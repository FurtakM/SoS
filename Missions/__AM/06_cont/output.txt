// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7948 0 0
// CreateNature ;
  57: CALL 21669 0 0
// PrepareRussian ;
  61: CALL 5826 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11315 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 44772 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 44772 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 44772 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 44772 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 44772 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 44772 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 44772 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 44772 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 44772 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 44772 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 44772 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: IFTRUE 2586
2565: PUSH
2566: LD_VAR 0 4
2570: PPUSH
2571: LD_INT 21
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 70
2585: OR
2586: IFFALSE 2604
// begin area := HarrisonSupportArea2 ;
2588: LD_ADDR_VAR 0 4
2592: PUSH
2593: LD_INT 31
2595: ST_TO_ADDR
// dir := 1 ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// end ; uc_side := 1 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// uc_nation := 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// hc_class := class_engineer ;
2620: LD_ADDR_OWVAR 28
2624: PUSH
2625: LD_INT 2
2627: ST_TO_ADDR
// hc_sex := sex_male ;
2628: LD_ADDR_OWVAR 27
2632: PUSH
2633: LD_INT 1
2635: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2636: LD_ADDR_OWVAR 33
2640: PUSH
2641: LD_STRING SecondCharsGal
2643: ST_TO_ADDR
// hc_face_number := 52 ;
2644: LD_ADDR_OWVAR 34
2648: PUSH
2649: LD_INT 52
2651: ST_TO_ADDR
// hc_name := Craig Brown ;
2652: LD_ADDR_OWVAR 26
2656: PUSH
2657: LD_STRING Craig Brown
2659: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2660: LD_ADDR_OWVAR 29
2664: PUSH
2665: LD_INT 10
2667: PUSH
2668: LD_INT 10
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2675: LD_ADDR_OWVAR 30
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: LD_INT 2
2685: PUSH
2686: LD_INT 0
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2698: LD_ADDR_OWVAR 31
2702: PUSH
2703: LD_INT 2
2705: PUSH
2706: LD_INT 3
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: LD_INT 0
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2721: LD_ADDR_EXP 18
2725: PUSH
2726: CALL_OW 44
2730: ST_TO_ADDR
// hc_class := class_soldier ;
2731: LD_ADDR_OWVAR 28
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// hc_sex := sex_female ;
2739: LD_ADDR_OWVAR 27
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2747: LD_ADDR_OWVAR 33
2751: PUSH
2752: LD_STRING SecondCharsGal
2754: ST_TO_ADDR
// hc_face_number := 42 ;
2755: LD_ADDR_OWVAR 34
2759: PUSH
2760: LD_INT 42
2762: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2763: LD_ADDR_OWVAR 29
2767: PUSH
2768: LD_INT 11
2770: PUSH
2771: LD_INT 10
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2778: LD_ADDR_OWVAR 26
2782: PUSH
2783: LD_STRING Ingrid Jonsson
2785: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2786: LD_ADDR_OWVAR 30
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: LD_INT 1
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 0
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2809: LD_ADDR_OWVAR 31
2813: PUSH
2814: LD_INT 3
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: ST_TO_ADDR
// HarrSupp2 := CreateHuman ;
2832: LD_ADDR_EXP 19
2836: PUSH
2837: CALL_OW 44
2841: ST_TO_ADDR
// vc_engine := engine_combustion ;
2842: LD_ADDR_OWVAR 39
2846: PUSH
2847: LD_INT 1
2849: ST_TO_ADDR
// vc_control := control_manual ;
2850: LD_ADDR_OWVAR 38
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2858: LD_ADDR_OWVAR 40
2862: PUSH
2863: LD_INT 5
2865: PUSH
2866: LD_INT 5
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: PUSH
2881: LD_OWVAR 67
2885: ARRAY
2886: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2887: LD_ADDR_OWVAR 37
2891: PUSH
2892: LD_INT 2
2894: ST_TO_ADDR
// veh := CreateVehicle ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: CALL_OW 45
2904: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: CALL_OW 233
// repeat wait ( 10 ) ;
2919: LD_INT 10
2921: PPUSH
2922: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
2943: IFFALSE 2919
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2945: LD_EXP 18
2949: PPUSH
2950: LD_VAR 0 3
2954: PPUSH
2955: CALL_OW 52
// SetFuel ( veh , 50 ) ;
2959: LD_VAR 0 3
2963: PPUSH
2964: LD_INT 50
2966: PPUSH
2967: CALL_OW 240
// uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// uc_nation := 1 ;
2979: LD_ADDR_OWVAR 21
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2987: LD_ADDR_OWVAR 40
2991: PUSH
2992: LD_INT 4
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: LD_INT 2
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_OWVAR 67
3014: ARRAY
3015: ST_TO_ADDR
// veh := CreateVehicle ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: CALL_OW 45
3025: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3026: LD_VAR 0 3
3030: PPUSH
3031: LD_VAR 0 5
3035: PPUSH
3036: CALL_OW 233
// repeat wait ( 10 ) ;
3040: LD_INT 10
3042: PPUSH
3043: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_VAR 0 4
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
3064: IFFALSE 3040
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// SetFuel ( veh , 50 ) ;
3080: LD_VAR 0 3
3084: PPUSH
3085: LD_INT 50
3087: PPUSH
3088: CALL_OW 240
// end ;
3092: LD_VAR 0 1
3096: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 23
3120: PUSH
3121: LD_INT 1
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 26
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 69
3147: PUSH
3148: LD_EXP 3
3152: PUSH
3153: LD_EXP 4
3157: PUSH
3158: LD_EXP 8
3162: PUSH
3163: LD_EXP 9
3167: PUSH
3168: LD_EXP 5
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: DIFF
3180: ST_TO_ADDR
// for i in _tmp do
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_VAR 0 4
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3235
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_INT 32
3201: PPUSH
3202: CALL_OW 308
3206: IFFALSE 3219
3208: PUSH
3209: LD_VAR 0 2
3213: PPUSH
3214: CALL_OW 302
3218: AND
3219: IFFALSE 3233
// begin tmp := i ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: LD_VAR 0 2
3230: ST_TO_ADDR
// break ;
3231: GO 3235
// end ;
3233: GO 3191
3235: POP
3236: POP
// if not tmp then
3237: LD_VAR 0 3
3241: NOT
3242: IFFALSE 3254
// tmp := JMM ;
3244: LD_ADDR_VAR 0 3
3248: PUSH
3249: LD_EXP 1
3253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3254: LD_INT 35
3256: PPUSH
3257: CALL_OW 67
// if IsDead ( tmp ) then
3261: LD_VAR 0 3
3265: PPUSH
3266: CALL_OW 301
3270: IFFALSE 3282
// tmp := JMM ;
3272: LD_ADDR_VAR 0 3
3276: PUSH
3277: LD_EXP 1
3281: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3282: LD_INT 81
3284: PUSH
3285: LD_INT 1
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 91
3294: PUSH
3295: LD_VAR 0 3
3299: PUSH
3300: LD_INT 15
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: NOT
3317: IFTRUE 3329
3319: PUSH
3320: LD_EXP 27
3324: PUSH
3325: LD_INT 6300
3327: LESS
3328: OR
3329: IFFALSE 3254
// blockSpawn := 1 ;
3331: LD_ADDR_EXP 30
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// uc_side := 4 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 4
3346: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3347: LD_ADDR_EXP 16
3351: PUSH
3352: LD_STRING Joan
3354: PPUSH
3355: LD_INT 0
3357: PPUSH
3358: LD_EXP 44
3362: PPUSH
3363: CALL 44772 0 3
3367: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3368: LD_EXP 16
3372: PPUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: CALL_OW 250
3382: PPUSH
3383: LD_VAR 0 3
3387: PPUSH
3388: CALL_OW 251
3392: PPUSH
3393: LD_INT 5
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3403: LD_EXP 16
3407: PPUSH
3408: LD_INT 250
3410: PPUSH
3411: CALL_OW 234
// InGameOn ;
3415: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3419: LD_EXP 16
3423: PPUSH
3424: CALL_OW 87
// wait ( 0 0$2 ) ;
3428: LD_INT 70
3430: PPUSH
3431: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3435: LD_VAR 0 3
3439: PPUSH
3440: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 122
// wait ( 0 0$1 ) ;
3453: LD_INT 35
3455: PPUSH
3456: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_EXP 16
3469: PPUSH
3470: CALL_OW 112
// wait ( 0 0$2 ) ;
3474: LD_INT 70
3476: PPUSH
3477: CALL_OW 67
// DialogueOn ;
3481: CALL_OW 6
// if tmp = JMM then
3485: LD_VAR 0 3
3489: PUSH
3490: LD_EXP 1
3494: EQUAL
3495: IFFALSE 3644
// begin ComTurnUnit ( JMM , Joan ) ;
3497: LD_EXP 1
3501: PPUSH
3502: LD_EXP 16
3506: PPUSH
3507: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3511: LD_EXP 1
3515: PPUSH
3516: LD_STRING D5b-JMM-1
3518: PPUSH
3519: CALL_OW 88
// DialogueOff ;
3523: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3527: LD_EXP 16
3531: PPUSH
3532: LD_INT 500
3534: PPUSH
3535: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3539: LD_EXP 16
3543: PPUSH
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3553: LD_EXP 1
3557: PPUSH
3558: LD_EXP 16
3562: PPUSH
3563: CALL_OW 119
// wait ( 0 0$1 ) ;
3567: LD_INT 35
3569: PPUSH
3570: CALL_OW 67
// DialogueOn ;
3574: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3578: LD_EXP 16
3582: PPUSH
3583: LD_STRING D5b-Joan-1
3585: PPUSH
3586: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5b-JMM-2
3597: PPUSH
3598: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3602: LD_EXP 16
3606: PPUSH
3607: LD_STRING D5b-Joan-2
3609: PPUSH
3610: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3614: LD_EXP 1
3618: PPUSH
3619: LD_STRING D5b-JMM-3
3621: PPUSH
3622: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3626: LD_EXP 16
3630: PPUSH
3631: LD_STRING D5b-Joan-3
3633: PPUSH
3634: CALL_OW 88
// DialogueOff ;
3638: CALL_OW 7
// end else
3642: GO 4112
// begin ComTurnUnit ( tmp , Joan ) ;
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_EXP 16
3653: PPUSH
3654: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_STRING D5a-Sol1-1
3665: PPUSH
3666: CALL_OW 88
// DialogueOff ;
3670: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3674: LD_EXP 16
3678: PPUSH
3679: LD_INT 500
3681: PPUSH
3682: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3686: LD_EXP 16
3690: PPUSH
3691: LD_VAR 0 3
3695: PPUSH
3696: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_EXP 16
3709: PPUSH
3710: CALL_OW 119
// wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// DialogueOn ;
3721: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3725: LD_EXP 16
3729: PPUSH
3730: LD_STRING D5a-Joan-1
3732: PPUSH
3733: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3737: LD_VAR 0 3
3741: PPUSH
3742: LD_STRING D5a-Sol1-2
3744: PPUSH
3745: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3749: LD_EXP 16
3753: PPUSH
3754: LD_STRING D5a-Joan-2
3756: PPUSH
3757: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_STRING D5a-Sol1-3
3768: PPUSH
3769: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3773: LD_EXP 16
3777: PPUSH
3778: LD_STRING D5a-Joan-3
3780: PPUSH
3781: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3785: LD_VAR 0 3
3789: PPUSH
3790: LD_STRING D5a-Sol1-4
3792: PPUSH
3793: CALL_OW 88
// DialogueOff ;
3797: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3801: LD_EXP 1
3805: PPUSH
3806: LD_EXP 16
3810: PPUSH
3811: CALL_OW 296
3815: PUSH
3816: LD_INT 10
3818: GREATER
3819: IFFALSE 3904
// begin InGameOff ;
3821: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3825: LD_EXP 16
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3839: LD_INT 35
3841: PPUSH
3842: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3846: LD_EXP 1
3850: PPUSH
3851: LD_EXP 16
3855: PPUSH
3856: CALL_OW 296
3860: PUSH
3861: LD_INT 8
3863: LESS
3864: IFTRUE 3877
3866: PUSH
3867: LD_EXP 16
3871: PPUSH
3872: CALL_OW 301
3876: OR
3877: IFFALSE 3839
// if IsDead ( Joan ) then
3879: LD_EXP 16
3883: PPUSH
3884: CALL_OW 301
3888: IFFALSE 3900
// begin blockSpawn := false ;
3890: LD_ADDR_EXP 30
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// exit ;
3898: GO 4243
// end ; InGameOn ;
3900: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3904: LD_EXP 1
3908: PUSH
3909: LD_INT 55
3911: PUSH
3912: EMPTY
3913: LIST
3914: PPUSH
3915: CALL_OW 69
3919: IN
3920: IFFALSE 3943
// begin ComMoveUnit ( JMM , Joan ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_EXP 16
3931: PPUSH
3932: CALL_OW 112
// wait ( 0 0$05 ) ;
3936: LD_INT 175
3938: PPUSH
3939: CALL_OW 67
// end ; ComExit ( JMM ) ;
3943: LD_EXP 1
3947: PPUSH
3948: CALL 83370 0 1
// wait ( 0 0$1 ) ;
3952: LD_INT 35
3954: PPUSH
3955: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3959: LD_INT 35
3961: PPUSH
3962: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3966: LD_EXP 16
3970: PUSH
3971: LD_VAR 0 3
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_EXP 1
3984: PPUSH
3985: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3989: LD_EXP 16
3993: PPUSH
3994: LD_EXP 1
3998: PPUSH
3999: CALL_OW 296
4003: PUSH
4004: LD_INT 5
4006: LESS
4007: IFFALSE 3959
// ComTurnUnit ( Joan , JMM ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_EXP 1
4018: PPUSH
4019: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4023: LD_EXP 1
4027: PPUSH
4028: LD_EXP 16
4032: PPUSH
4033: CALL_OW 119
// wait ( 0 0$1 ) ;
4037: LD_INT 35
4039: PPUSH
4040: CALL_OW 67
// DialogueOn ;
4044: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4048: LD_EXP 16
4052: PPUSH
4053: LD_STRING D5a-Joan-4
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4060: LD_EXP 1
4064: PPUSH
4065: LD_STRING D5a-JMM-4
4067: PPUSH
4068: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4072: LD_EXP 16
4076: PPUSH
4077: LD_STRING D5a-Joan-5
4079: PPUSH
4080: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4084: LD_EXP 1
4088: PPUSH
4089: LD_STRING D5a-JMM-5
4091: PPUSH
4092: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4096: LD_EXP 16
4100: PPUSH
4101: LD_STRING D5a-Joan-6
4103: PPUSH
4104: CALL_OW 88
// DialogueOff ;
4108: CALL_OW 7
// end ; DialogueOn ;
4112: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4116: LD_EXP 1
4120: PPUSH
4121: LD_STRING D6-JMM-1
4123: PPUSH
4124: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4128: LD_EXP 16
4132: PPUSH
4133: LD_STRING D6-Joan-1
4135: PPUSH
4136: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4140: LD_EXP 1
4144: PPUSH
4145: LD_STRING D6-JMM-2
4147: PPUSH
4148: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4152: LD_EXP 16
4156: PPUSH
4157: LD_STRING D6-Joan-2
4159: PPUSH
4160: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4164: LD_EXP 1
4168: PPUSH
4169: LD_STRING D6-JMM-3
4171: PPUSH
4172: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4176: LD_EXP 16
4180: PPUSH
4181: LD_STRING D6-Joan-3
4183: PPUSH
4184: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4188: LD_EXP 1
4192: PPUSH
4193: LD_STRING D6-JMM-4
4195: PPUSH
4196: CALL_OW 88
// DialogueOff ;
4200: CALL_OW 7
// InGameOff ;
4204: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4208: LD_EXP 16
4212: PPUSH
4213: LD_INT 1
4215: PPUSH
4216: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4220: LD_STRING MJ
4222: PPUSH
4223: CALL_OW 337
// joanStatus = 1 ;
4227: LD_ADDR_EXP 17
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// blockSpawn = 0 ;
4235: LD_ADDR_EXP 30
4239: PUSH
4240: LD_INT 0
4242: ST_TO_ADDR
// end ;
4243: LD_VAR 0 1
4247: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// if not number or number > 8 then
4252: LD_VAR 0 1
4256: NOT
4257: IFTRUE 4269
4259: PUSH
4260: LD_VAR 0 1
4264: PUSH
4265: LD_INT 8
4267: GREATER
4268: OR
4269: IFFALSE 4273
// exit ;
4271: GO 5821
// repeat wait ( 0 0$7 ) ;
4273: LD_INT 245
4275: PPUSH
4276: CALL_OW 67
// until blockSpawn = 0 ;
4280: LD_EXP 30
4284: PUSH
4285: LD_INT 0
4287: EQUAL
4288: IFFALSE 4273
// uc_side := 1 ;
4290: LD_ADDR_OWVAR 20
4294: PUSH
4295: LD_INT 1
4297: ST_TO_ADDR
// uc_nation := 1 ;
4298: LD_ADDR_OWVAR 21
4302: PUSH
4303: LD_INT 1
4305: ST_TO_ADDR
// InitHc ;
4306: CALL_OW 19
// if number = 1 then
4310: LD_VAR 0 1
4314: PUSH
4315: LD_INT 1
4317: EQUAL
4318: IFFALSE 4494
// begin hc_class := 3 ;
4320: LD_ADDR_OWVAR 28
4324: PUSH
4325: LD_INT 3
4327: ST_TO_ADDR
// hc_sex := sex_male ;
4328: LD_ADDR_OWVAR 27
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4336: LD_ADDR_OWVAR 33
4340: PUSH
4341: LD_STRING SecondCharsGal
4343: ST_TO_ADDR
// hc_face_number := 55 ;
4344: LD_ADDR_OWVAR 34
4348: PUSH
4349: LD_INT 55
4351: ST_TO_ADDR
// hc_name := George McCarthy ;
4352: LD_ADDR_OWVAR 26
4356: PUSH
4357: LD_STRING George McCarthy
4359: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4360: LD_ADDR_OWVAR 29
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 10
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4375: LD_ADDR_OWVAR 30
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4398: LD_ADDR_OWVAR 31
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: LD_INT 2
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// un = CreateHuman ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: CALL_OW 44
4430: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_INT 23
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: CALL_OW 87
// wait ( 0 0$1 ) ;
4455: LD_INT 35
4457: PPUSH
4458: CALL_OW 67
// DialogueOn ;
4462: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4466: LD_VAR 0 3
4470: PPUSH
4471: LD_STRING D11d-Sol4-1
4473: PPUSH
4474: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4478: LD_EXP 1
4482: PPUSH
4483: LD_STRING D11d-JMM-1
4485: PPUSH
4486: CALL_OW 88
// DialogueOff ;
4490: CALL_OW 7
// end ; if number = 2 then
4494: LD_VAR 0 1
4498: PUSH
4499: LD_INT 2
4501: EQUAL
4502: IFFALSE 4678
// begin hc_class := 1 ;
4504: LD_ADDR_OWVAR 28
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// hc_sex := sex_male ;
4512: LD_ADDR_OWVAR 27
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4520: LD_ADDR_OWVAR 33
4524: PUSH
4525: LD_STRING AmGalRemake
4527: ST_TO_ADDR
// hc_face_number := 7 ;
4528: LD_ADDR_OWVAR 34
4532: PUSH
4533: LD_INT 7
4535: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4536: LD_ADDR_OWVAR 26
4540: PUSH
4541: LD_STRING Bobby Jordan
4543: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4544: LD_ADDR_OWVAR 29
4548: PUSH
4549: LD_INT 9
4551: PUSH
4552: LD_INT 11
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4559: LD_ADDR_OWVAR 30
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4582: LD_ADDR_OWVAR 31
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: ST_TO_ADDR
// un = CreateHuman ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: CALL_OW 44
4614: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4615: LD_VAR 0 3
4619: PPUSH
4620: LD_INT 24
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 49
// wait ( 0 0$1 ) ;
4630: LD_INT 35
4632: PPUSH
4633: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4637: LD_VAR 0 3
4641: PPUSH
4642: CALL_OW 87
// DialogueOn ;
4646: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4650: LD_VAR 0 3
4654: PPUSH
4655: LD_STRING D11b-Sol3-1
4657: PPUSH
4658: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4662: LD_EXP 1
4666: PPUSH
4667: LD_STRING D11b-JMM-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 3 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 3
4685: EQUAL
4686: IFFALSE 4850
// begin hc_class := 1 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 1
4695: ST_TO_ADDR
// hc_sex := sex_male ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 1
4703: ST_TO_ADDR
// hc_gallery := DJ ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING DJ
4711: ST_TO_ADDR
// hc_face_number := 1 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// hc_name := Darius Dajay ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Darius Dajay
4727: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 11
4735: PUSH
4736: LD_INT 11
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 0
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 0
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 5
4773: PUSH
4774: LD_INT 0
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 0
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 25
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// wait ( 0 0$1 ) ;
4823: LD_INT 35
4825: PPUSH
4826: CALL_OW 67
// DialogueOn ;
4830: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_STRING D11f-Sol5-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; if number = 4 then
4850: LD_VAR 0 1
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: IFFALSE 4995
// begin hc_class := 2 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 2
4867: ST_TO_ADDR
// hc_sex := sex_female ;
4868: LD_ADDR_OWVAR 27
4872: PUSH
4873: LD_INT 2
4875: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4876: LD_ADDR_OWVAR 33
4880: PUSH
4881: LD_STRING SecondCharsGal
4883: ST_TO_ADDR
// hc_face_number := 46 ;
4884: LD_ADDR_OWVAR 34
4888: PUSH
4889: LD_INT 46
4891: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4892: LD_ADDR_OWVAR 26
4896: PUSH
4897: LD_STRING Sylvia Creak
4899: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4900: LD_ADDR_OWVAR 29
4904: PUSH
4905: LD_INT 10
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4915: LD_ADDR_OWVAR 30
4919: PUSH
4920: LD_INT 0
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 1
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4938: LD_ADDR_OWVAR 31
4942: PUSH
4943: LD_INT 1
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: ST_TO_ADDR
// un = CreateHuman ;
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4971: LD_VAR 0 3
4975: PPUSH
4976: LD_INT 26
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: CALL_OW 87
// end ; if number = 5 then
4995: LD_VAR 0 1
4999: PUSH
5000: LD_INT 5
5002: EQUAL
5003: IFFALSE 5179
// begin hc_class := 1 ;
5005: LD_ADDR_OWVAR 28
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// hc_sex := sex_female ;
5013: LD_ADDR_OWVAR 27
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5021: LD_ADDR_OWVAR 33
5025: PUSH
5026: LD_STRING SecondCharsGal
5028: ST_TO_ADDR
// hc_face_number := 37 ;
5029: LD_ADDR_OWVAR 34
5033: PUSH
5034: LD_INT 37
5036: ST_TO_ADDR
// hc_name := Malena Johnson ;
5037: LD_ADDR_OWVAR 26
5041: PUSH
5042: LD_STRING Malena Johnson
5044: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5045: LD_ADDR_OWVAR 29
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 10
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5060: LD_ADDR_OWVAR 30
5064: PUSH
5065: LD_INT 1
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 0
5073: PUSH
5074: LD_INT 0
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5083: LD_ADDR_OWVAR 31
5087: PUSH
5088: LD_INT 3
5090: PUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: LD_INT 0
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: ST_TO_ADDR
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 27
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: CALL_OW 87
// wait ( 0 0$1 ) ;
5140: LD_INT 35
5142: PPUSH
5143: CALL_OW 67
// DialogueOn ;
5147: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5151: LD_VAR 0 3
5155: PPUSH
5156: LD_STRING D11c-FSol3-1
5158: PPUSH
5159: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5163: LD_EXP 1
5167: PPUSH
5168: LD_STRING D11c-JMM-1
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// end ; if number = 6 then
5179: LD_VAR 0 1
5183: PUSH
5184: LD_INT 6
5186: EQUAL
5187: IFFALSE 5361
// begin hc_class := 1 ;
5189: LD_ADDR_OWVAR 28
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// hc_sex := sex_male ;
5197: LD_ADDR_OWVAR 27
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5205: LD_ADDR_OWVAR 33
5209: PUSH
5210: LD_STRING AmGalRemake
5212: ST_TO_ADDR
// hc_face_number := 1 ;
5213: LD_ADDR_OWVAR 34
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// hc_name := Charles Brown ;
5221: LD_ADDR_OWVAR 26
5225: PUSH
5226: LD_STRING Charles Brown
5228: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5229: LD_ADDR_OWVAR 29
5233: PUSH
5234: LD_INT 12
5236: PUSH
5237: LD_INT 11
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5244: LD_ADDR_OWVAR 30
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 0
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 0
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5267: LD_ADDR_OWVAR 31
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// un = CreateHuman ;
5290: LD_ADDR_VAR 0 3
5294: PUSH
5295: CALL_OW 44
5299: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5300: LD_VAR 0 3
5304: PPUSH
5305: LD_INT 28
5307: PPUSH
5308: LD_INT 1
5310: PPUSH
5311: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: CALL_OW 87
// wait ( 0 0$1 ) ;
5324: LD_INT 35
5326: PPUSH
5327: CALL_OW 67
// DialogueOn ;
5331: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5335: LD_VAR 0 3
5339: PPUSH
5340: LD_STRING D4-Sol1-5
5342: PPUSH
5343: CALL_OW 88
// DialogueOff ;
5347: CALL_OW 7
// tempCharles = un ;
5351: LD_ADDR_EXP 14
5355: PUSH
5356: LD_VAR 0 3
5360: ST_TO_ADDR
// end ; if number = 7 then
5361: LD_VAR 0 1
5365: PUSH
5366: LD_INT 7
5368: EQUAL
5369: IFFALSE 5641
// begin hc_class := 1 ;
5371: LD_ADDR_OWVAR 28
5375: PUSH
5376: LD_INT 1
5378: ST_TO_ADDR
// hc_sex := sex_female ;
5379: LD_ADDR_OWVAR 27
5383: PUSH
5384: LD_INT 2
5386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5387: LD_ADDR_OWVAR 33
5391: PUSH
5392: LD_STRING AmGalRemake
5394: ST_TO_ADDR
// hc_face_number := 2 ;
5395: LD_ADDR_OWVAR 34
5399: PUSH
5400: LD_INT 2
5402: ST_TO_ADDR
// hc_name := Johanna Holland ;
5403: LD_ADDR_OWVAR 26
5407: PUSH
5408: LD_STRING Johanna Holland
5410: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5411: LD_ADDR_OWVAR 29
5415: PUSH
5416: LD_INT 10
5418: PUSH
5419: LD_INT 10
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5426: LD_ADDR_OWVAR 30
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: LD_INT 0
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5449: LD_ADDR_OWVAR 31
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: LD_INT 0
5459: PUSH
5460: LD_INT 1
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: ST_TO_ADDR
// un = CreateHuman ;
5472: LD_ADDR_VAR 0 3
5476: PUSH
5477: CALL_OW 44
5481: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: LD_INT 29
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5497: LD_VAR 0 3
5501: PPUSH
5502: CALL_OW 87
// wait ( 0 0$1 ) ;
5506: LD_INT 35
5508: PPUSH
5509: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5513: LD_INT 30
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_INT 3
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 70
5530: IFFALSE 5641
// begin DialogueOn ;
5532: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: LD_INT 15
5561: NEG
5562: PPUSH
5563: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 250
5576: PPUSH
5577: LD_VAR 0 3
5581: PPUSH
5582: CALL_OW 251
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_STRING D11a-FSol2-1
5601: PPUSH
5602: CALL_OW 88
// DialogueOff ;
5606: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5610: LD_INT 3
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: CALL_OW 471
// wait ( 0 0$2 ) ;
5622: LD_INT 70
5624: PPUSH
5625: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5629: LD_INT 3
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 472
// end ; end ; if number = 8 then
5641: LD_VAR 0 1
5645: PUSH
5646: LD_INT 8
5648: EQUAL
5649: IFFALSE 5805
// begin hc_class := 1 ;
5651: LD_ADDR_OWVAR 28
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// hc_sex := sex_female ;
5659: LD_ADDR_OWVAR 27
5663: PUSH
5664: LD_INT 2
5666: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5667: LD_ADDR_OWVAR 33
5671: PUSH
5672: LD_STRING SecondCharsGal
5674: ST_TO_ADDR
// hc_face_number := 45 ;
5675: LD_ADDR_OWVAR 34
5679: PUSH
5680: LD_INT 45
5682: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5683: LD_ADDR_OWVAR 26
5687: PUSH
5688: LD_STRING Margherite Simpson
5690: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5691: LD_ADDR_OWVAR 29
5695: PUSH
5696: LD_INT 12
5698: PUSH
5699: LD_INT 10
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5706: LD_ADDR_OWVAR 30
5710: PUSH
5711: LD_INT 1
5713: PUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 0
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5729: LD_ADDR_OWVAR 31
5733: PUSH
5734: LD_INT 2
5736: PUSH
5737: LD_INT 3
5739: PUSH
5740: LD_INT 0
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// un = CreateHuman ;
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: CALL_OW 44
5761: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5762: LD_VAR 0 3
5766: PPUSH
5767: LD_INT 33
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5777: LD_VAR 0 3
5781: PPUSH
5782: CALL_OW 87
// wait ( 0 0$1 ) ;
5786: LD_INT 35
5788: PPUSH
5789: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5793: LD_VAR 0 3
5797: PPUSH
5798: LD_STRING D11e-FSol4-1
5800: PPUSH
5801: CALL_OW 88
// end ; arrivals := arrivals union un ;
5805: LD_ADDR_EXP 45
5809: PUSH
5810: LD_EXP 45
5814: PUSH
5815: LD_VAR 0 3
5819: UNION
5820: ST_TO_ADDR
// end ; end_of_file
5821: LD_VAR 0 2
5825: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5826: LD_INT 0
5828: PPUSH
5829: PPUSH
// ruAttackers := [ ] ;
5830: LD_ADDR_EXP 48
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5837: LD_ADDR_EXP 49
5841: PUSH
5842: EMPTY
5843: ST_TO_ADDR
// if Difficulty < 3 then
5844: LD_OWVAR 67
5848: PUSH
5849: LD_INT 3
5851: LESS
5852: IFFALSE 5869
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5854: LD_INT 130
5856: PPUSH
5857: LD_INT 81
5859: PPUSH
5860: CALL_OW 428
5864: PPUSH
5865: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5869: LD_INT 3
5871: PPUSH
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 2
5877: PPUSH
5878: LD_EXP 35
5882: PPUSH
5883: LD_EXP 36
5887: PPUSH
5888: CALL_OW 12
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: CALL 7702 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5903: LD_INT 3
5905: PPUSH
5906: LD_INT 3
5908: PPUSH
5909: LD_INT 8
5911: PPUSH
5912: LD_EXP 35
5916: PPUSH
5917: LD_EXP 36
5921: PPUSH
5922: CALL_OW 12
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: LD_INT 4
5932: PPUSH
5933: CALL 7702 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5937: LD_INT 3
5939: PPUSH
5940: LD_INT 3
5942: PPUSH
5943: LD_INT 67
5945: PPUSH
5946: LD_EXP 35
5950: PPUSH
5951: LD_EXP 36
5955: PPUSH
5956: CALL_OW 12
5960: PPUSH
5961: LD_INT 1
5963: PPUSH
5964: LD_INT 2
5966: PPUSH
5967: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5971: LD_INT 3
5973: PPUSH
5974: LD_INT 3
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_EXP 35
5984: PPUSH
5985: LD_EXP 36
5989: PPUSH
5990: CALL_OW 12
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_INT 6
6000: PPUSH
6001: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 17
6013: PPUSH
6014: LD_EXP 35
6018: PPUSH
6019: LD_EXP 36
6023: PPUSH
6024: CALL_OW 12
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: LD_INT 6
6034: PPUSH
6035: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6039: LD_INT 3
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: LD_INT 32
6047: PPUSH
6048: LD_EXP 35
6052: PPUSH
6053: LD_EXP 36
6057: PPUSH
6058: CALL_OW 12
6062: PPUSH
6063: LD_INT 4
6065: PPUSH
6066: LD_INT 2
6068: PPUSH
6069: CALL 7702 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: LD_INT 22
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 21
6090: PUSH
6091: LD_INT 3
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 30
6100: PUSH
6101: LD_INT 32
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: PUSH
6118: FOR_IN
6119: IFFALSE 6159
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6121: LD_INT 3
6123: PPUSH
6124: LD_INT 3
6126: PPUSH
6127: LD_VAR 0 2
6131: PPUSH
6132: LD_EXP 35
6136: PPUSH
6137: LD_EXP 36
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: LD_INT 1
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL 7702 0 6
6157: GO 6118
6159: POP
6160: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 21
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 31
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6235
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6209: LD_EXP 35
6213: PPUSH
6214: LD_EXP 36
6218: PPUSH
6219: CALL_OW 12
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL 7812 0 2
6233: GO 6206
6235: POP
6236: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6237: LD_INT 3
6239: PPUSH
6240: LD_INT 32
6242: PPUSH
6243: LD_INT 3
6245: PPUSH
6246: CALL 8091 0 3
// end ;
6250: LD_VAR 0 1
6254: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6255: LD_INT 22
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 32
6267: PUSH
6268: LD_INT 1
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PPUSH
6279: CALL_OW 69
6283: IFFALSE 6360
6285: GO 6287
6287: DISABLE
6288: LD_INT 0
6290: PPUSH
// begin enable ;
6291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 32
6309: PUSH
6310: LD_INT 1
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 69
6325: PUSH
6326: FOR_IN
6327: IFFALSE 6358
// if GetFuel ( i ) < 3 then
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 261
6338: PUSH
6339: LD_INT 3
6341: LESS
6342: IFFALSE 6356
// SetFuel ( i , 3 ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: CALL_OW 240
6356: GO 6326
6358: POP
6359: POP
// end ;
6360: PPOPN 1
6362: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6363: LD_OWVAR 67
6367: PUSH
6368: LD_INT 1
6370: GREATER
6371: IFFALSE 6942
6373: GO 6375
6375: DISABLE
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
// begin uc_side := 3 ;
6382: LD_ADDR_OWVAR 20
6386: PUSH
6387: LD_INT 3
6389: ST_TO_ADDR
// uc_nation := 3 ;
6390: LD_ADDR_OWVAR 21
6394: PUSH
6395: LD_INT 3
6397: ST_TO_ADDR
// for i := 1 to 2 do
6398: LD_ADDR_VAR 0 1
6402: PUSH
6403: DOUBLE
6404: LD_INT 1
6406: DEC
6407: ST_TO_ADDR
6408: LD_INT 2
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6526
// begin InitHC_All ( ) ;
6414: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 5
6426: PUSH
6427: LD_INT 6
6429: PUSH
6430: LD_INT 6
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_OWVAR 67
6443: ARRAY
6444: PPUSH
6445: CALL_OW 381
// un := CreateHuman ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: CALL_OW 44
6458: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6459: LD_VAR 0 2
6463: PPUSH
6464: LD_INT 91
6466: PPUSH
6467: LD_INT 87
6469: PPUSH
6470: LD_INT 3
6472: PPUSH
6473: LD_INT 0
6475: PPUSH
6476: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6480: LD_ADDR_EXP 49
6484: PUSH
6485: LD_EXP 49
6489: PPUSH
6490: LD_EXP 49
6494: PUSH
6495: LD_INT 1
6497: PLUS
6498: PPUSH
6499: LD_VAR 0 2
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6509: LD_VAR 0 2
6513: PPUSH
6514: LD_INT 46
6516: PPUSH
6517: LD_INT 78
6519: PPUSH
6520: CALL_OW 114
// end ;
6524: GO 6411
6526: POP
6527: POP
// if Difficulty > 2 then
6528: LD_OWVAR 67
6532: PUSH
6533: LD_INT 2
6535: GREATER
6536: IFFALSE 6668
// begin for i := 1 to 3 do
6538: LD_ADDR_VAR 0 1
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_INT 3
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6666
// begin InitHC_All ( ) ;
6554: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6558: LD_INT 0
6560: PPUSH
6561: LD_INT 4
6563: PUSH
6564: LD_INT 5
6566: PUSH
6567: LD_INT 6
6569: PUSH
6570: LD_INT 6
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_OWVAR 67
6583: ARRAY
6584: PPUSH
6585: CALL_OW 381
// un := CreateHuman ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: CALL_OW 44
6598: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_INT 91
6606: PPUSH
6607: LD_INT 87
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 0
6615: PPUSH
6616: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6620: LD_ADDR_EXP 49
6624: PUSH
6625: LD_EXP 49
6629: PPUSH
6630: LD_EXP 49
6634: PUSH
6635: LD_INT 1
6637: PLUS
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 1
6648: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_INT 89
6656: PPUSH
6657: LD_INT 148
6659: PPUSH
6660: CALL_OW 114
// end ;
6664: GO 6551
6666: POP
6667: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: LD_INT 33
6675: PUSH
6676: LD_INT 61
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 49
6685: PUSH
6686: LD_INT 85
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 76
6695: PUSH
6696: LD_INT 99
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 81
6705: PUSH
6706: LD_INT 135
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 111
6715: PUSH
6716: LD_INT 155
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 147
6725: PUSH
6726: LD_INT 158
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6741: LD_INT 1050
6743: PPUSH
6744: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: DOUBLE
6754: LD_INT 1
6756: DEC
6757: ST_TO_ADDR
6758: LD_EXP 49
6762: PUSH
6763: FOR_TO
6764: IFFALSE 6933
// begin un := ruAttackersInForest [ i ] ;
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_EXP 49
6775: PUSH
6776: LD_VAR 0 1
6780: ARRAY
6781: ST_TO_ADDR
// tag := GetTag ( un ) ;
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 110
6796: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 302
6806: IFFALSE 6820
6808: PUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: CALL_OW 314
6818: NOT
6819: AND
6820: IFFALSE 6931
// begin if tag <> i then
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 1
6831: NONEQUAL
6832: IFFALSE 6860
// begin SetTag ( un , i ) ;
6834: LD_VAR 0 2
6838: PPUSH
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 109
// tag := i ;
6848: LD_ADDR_VAR 0 4
6852: PUSH
6853: LD_VAR 0 1
6857: ST_TO_ADDR
// end else
6858: GO 6892
// begin SetTag ( un , i + 1 ) ;
6860: LD_VAR 0 2
6864: PPUSH
6865: LD_VAR 0 1
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PPUSH
6874: CALL_OW 109
// tag := i + 1 ;
6878: LD_ADDR_VAR 0 4
6882: PUSH
6883: LD_VAR 0 1
6887: PUSH
6888: LD_INT 1
6890: PLUS
6891: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6892: LD_VAR 0 2
6896: PPUSH
6897: LD_VAR 0 3
6901: PUSH
6902: LD_VAR 0 4
6906: ARRAY
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 3
6916: PUSH
6917: LD_VAR 0 4
6921: ARRAY
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: CALL_OW 114
// end ; end ;
6931: GO 6763
6933: POP
6934: POP
// until not ruAttackersInForest ;
6935: LD_EXP 49
6939: NOT
6940: IFFALSE 6741
// end ;
6942: PPOPN 4
6944: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6945: LD_INT 10
6947: PPUSH
6948: LD_INT 22
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 70
6962: IFFALSE 7311
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// begin enable ;
6973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6974: LD_ADDR_VAR 0 2
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 120
7001: PUSH
7002: LD_INT 111
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 69
7018: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 50
7036: PUSH
7037: EMPTY
7038: LIST
7039: PUSH
7040: LD_INT 2
7042: PUSH
7043: LD_INT 30
7045: PUSH
7046: LD_INT 4
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 30
7055: PUSH
7056: LD_INT 5
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 69
7077: ST_TO_ADDR
// if not tmp then
7078: LD_VAR 0 2
7082: NOT
7083: IFFALSE 7181
// begin if not bar then
7085: LD_VAR 0 3
7089: NOT
7090: IFFALSE 7095
// begin disable ;
7092: DISABLE
// exit ;
7093: GO 7311
// end ; tmp := [ ] ;
7095: LD_ADDR_VAR 0 2
7099: PUSH
7100: EMPTY
7101: ST_TO_ADDR
// for i in bar do
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_VAR 0 3
7111: PUSH
7112: FOR_IN
7113: IFFALSE 7138
// tmp := tmp union UnitsInside ( i ) ;
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: LD_VAR 0 2
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 313
7134: UNION
7135: ST_TO_ADDR
7136: GO 7112
7138: POP
7139: POP
// if not tmp then
7140: LD_VAR 0 2
7144: NOT
7145: IFFALSE 7150
// begin disable ;
7147: DISABLE
// exit ;
7148: GO 7311
// end ; for i in tmp do
7150: LD_ADDR_VAR 0 1
7154: PUSH
7155: LD_VAR 0 2
7159: PUSH
7160: FOR_IN
7161: IFFALSE 7177
// SetTag ( i , 111 ) ;
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_INT 111
7170: PPUSH
7171: CALL_OW 109
7175: GO 7160
7177: POP
7178: POP
// end else
7179: GO 7311
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_INT 10
7188: PPUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 70
7203: ST_TO_ADDR
// for i in tmp do
7204: LD_ADDR_VAR 0 1
7208: PUSH
7209: LD_VAR 0 2
7213: PUSH
7214: FOR_IN
7215: IFFALSE 7309
// if IsOk ( i ) then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 302
7226: IFFALSE 7307
// begin if IsInUnit ( i ) then
7228: LD_VAR 0 1
7232: PPUSH
7233: CALL_OW 310
7237: IFFALSE 7248
// ComExitBuilding ( i ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 122
// wait ( 3 ) ;
7248: LD_INT 3
7250: PPUSH
7251: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_VAR 0 4
7264: PPUSH
7265: LD_VAR 0 1
7269: PPUSH
7270: CALL_OW 74
7274: PPUSH
7275: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7279: LD_VAR 0 1
7283: PPUSH
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: PPUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 12
7301: ARRAY
7302: PPUSH
7303: CALL_OW 180
// end ;
7307: GO 7214
7309: POP
7310: POP
// end ; end ;
7311: PPOPN 4
7313: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7314: LD_OWVAR 1
7318: PUSH
7319: LD_INT 4200
7321: GREATER
7322: IFFALSE 7333
7324: PUSH
7325: LD_INT 50
7327: PPUSH
7328: CALL_OW 13
7332: AND
7333: IFFALSE 7424
7335: GO 7337
7337: DISABLE
7338: LD_INT 0
7340: PPUSH
// begin uc_side := 3 ;
7341: LD_ADDR_OWVAR 20
7345: PUSH
7346: LD_INT 3
7348: ST_TO_ADDR
// uc_nation := nation_russian ;
7349: LD_ADDR_OWVAR 21
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// InitHC_All ( ) ;
7357: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7361: LD_INT 0
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: CALL_OW 382
// un := CreateHuman ;
7371: LD_ADDR_VAR 0 1
7375: PUSH
7376: CALL_OW 44
7380: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 51
7388: PPUSH
7389: LD_INT 7
7391: PPUSH
7392: LD_INT 12
7394: PPUSH
7395: LD_INT 1
7397: PPUSH
7398: CALL_OW 50
// wait ( 0 0$1 ) ;
7402: LD_INT 35
7404: PPUSH
7405: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7409: LD_VAR 0 1
7413: PPUSH
7414: LD_INT 106
7416: PPUSH
7417: LD_INT 83
7419: PPUSH
7420: CALL_OW 111
// end ;
7424: PPOPN 1
7426: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7427: LD_OWVAR 1
7431: PUSH
7432: LD_INT 21000
7434: GREATER
7435: IFFALSE 7446
7437: PUSH
7438: LD_INT 45
7440: PPUSH
7441: CALL_OW 13
7445: AND
7446: IFFALSE 7561
7448: GO 7450
7450: DISABLE
7451: LD_INT 0
7453: PPUSH
// begin uc_side := 3 ;
7454: LD_ADDR_OWVAR 20
7458: PUSH
7459: LD_INT 3
7461: ST_TO_ADDR
// uc_nation := nation_russian ;
7462: LD_ADDR_OWVAR 21
7466: PUSH
7467: LD_INT 3
7469: ST_TO_ADDR
// InitHC_All ( ) ;
7470: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 2
7479: PPUSH
7480: CALL_OW 384
// un := CreateHuman ;
7484: LD_ADDR_VAR 0 1
7488: PUSH
7489: CALL_OW 44
7493: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 91
7501: PPUSH
7502: LD_INT 18
7504: PPUSH
7505: LD_INT 15
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 50
// wait ( 0 0$1 ) ;
7515: LD_INT 35
7517: PPUSH
7518: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_INT 106
7529: PPUSH
7530: LD_INT 83
7532: PPUSH
7533: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 67
7544: PPUSH
7545: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 183
// end ; end_of_file
7561: PPOPN 1
7563: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7564: LD_INT 0
7566: PPUSH
7567: PPUSH
7568: PPUSH
// if not characters then
7569: LD_VAR 0 1
7573: NOT
7574: IFFALSE 7578
// exit ;
7576: GO 7657
// speaker := characters [ rand ( 1 , characters ) ] ;
7578: LD_ADDR_VAR 0 6
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7602: LD_VAR 0 6
7606: PPUSH
7607: CALL_OW 258
7611: PUSH
7612: LD_INT 1
7614: EQUAL
7615: IFFALSE 7633
// Say ( speaker , dialogMID ) else
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: CALL_OW 88
7631: GO 7647
// Say ( speaker , dialogFID ) ;
7633: LD_VAR 0 6
7637: PPUSH
7638: LD_VAR 0 3
7642: PPUSH
7643: CALL_OW 88
// result := speaker ;
7647: LD_ADDR_VAR 0 4
7651: PUSH
7652: LD_VAR 0 6
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 4
7661: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// for i in charactersList do
7666: LD_ADDR_VAR 0 4
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7695
// SaveCharacters ( i , ident ) ;
7679: LD_VAR 0 4
7683: PPUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: CALL_OW 38
7693: GO 7676
7695: POP
7696: POP
// end ;
7697: LD_VAR 0 3
7701: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7702: LD_INT 0
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
// for i := 1 to count do
7708: LD_ADDR_VAR 0 8
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_VAR 0 6
7722: PUSH
7723: FOR_TO
7724: IFFALSE 7805
// begin uc_side = side ;
7726: LD_ADDR_OWVAR 20
7730: PUSH
7731: LD_VAR 0 1
7735: ST_TO_ADDR
// uc_nation = nation ;
7736: LD_ADDR_OWVAR 21
7740: PUSH
7741: LD_VAR 0 2
7745: ST_TO_ADDR
// hc_gallery =  ;
7746: LD_ADDR_OWVAR 33
7750: PUSH
7751: LD_STRING 
7753: ST_TO_ADDR
// hc_name =  ;
7754: LD_ADDR_OWVAR 26
7758: PUSH
7759: LD_STRING 
7761: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7762: LD_INT 0
7764: PPUSH
7765: LD_VAR 0 5
7769: PPUSH
7770: LD_VAR 0 4
7774: PPUSH
7775: CALL_OW 380
// un = CreateHuman ;
7779: LD_ADDR_VAR 0 10
7783: PUSH
7784: CALL_OW 44
7788: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7789: LD_VAR 0 10
7793: PPUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: CALL_OW 52
// end ;
7803: GO 7723
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 7
7811: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
// uc_side := GetSide ( b ) ;
7817: LD_ADDR_OWVAR 20
7821: PUSH
7822: LD_VAR 0 2
7826: PPUSH
7827: CALL_OW 255
7831: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7832: LD_ADDR_OWVAR 21
7836: PUSH
7837: LD_VAR 0 2
7841: PPUSH
7842: CALL_OW 248
7846: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7847: LD_INT 0
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7862: LD_ADDR_VAR 0 5
7866: PUSH
7867: LD_VAR 0 2
7871: PPUSH
7872: CALL_OW 254
7876: PUSH
7877: LD_INT 3
7879: MINUS
7880: ST_TO_ADDR
// if dir < 0 then
7881: LD_VAR 0 5
7885: PUSH
7886: LD_INT 0
7888: LESS
7889: IFFALSE 7905
// dir := 6 + dir ;
7891: LD_ADDR_VAR 0 5
7895: PUSH
7896: LD_INT 6
7898: PUSH
7899: LD_VAR 0 5
7903: PLUS
7904: ST_TO_ADDR
// un := CreateHuman ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: CALL_OW 44
7914: ST_TO_ADDR
// SetDir ( un , dir ) ;
7915: LD_VAR 0 4
7919: PPUSH
7920: LD_VAR 0 5
7924: PPUSH
7925: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7929: LD_VAR 0 4
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 52
// end ;
7943: LD_VAR 0 3
7947: RET
// export function PrepareDifficulty ; begin
7948: LD_INT 0
7950: PPUSH
// case Difficulty of 1 :
7951: LD_OWVAR 67
7955: PUSH
7956: LD_INT 1
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7983
7964: POP
// begin RuSolMinLevel = 2 ;
7965: LD_ADDR_EXP 35
7969: PUSH
7970: LD_INT 2
7972: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7973: LD_ADDR_EXP 36
7977: PUSH
7978: LD_INT 3
7980: ST_TO_ADDR
// end ; 2 :
7981: GO 8044
7983: LD_INT 2
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8010
7991: POP
// begin RuSolMinLevel = 3 ;
7992: LD_ADDR_EXP 35
7996: PUSH
7997: LD_INT 3
7999: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
8000: LD_ADDR_EXP 36
8004: PUSH
8005: LD_INT 5
8007: ST_TO_ADDR
// end ; 3 .. 4 :
8008: GO 8044
8010: LD_INT 3
8012: DOUBLE
8013: GREATEREQUAL
8014: IFFALSE 8022
8016: LD_INT 4
8018: DOUBLE
8019: LESSEQUAL
8020: IFTRUE 8024
8022: GO 8043
8024: POP
// begin RuSolMinLevel = 4 ;
8025: LD_ADDR_EXP 35
8029: PUSH
8030: LD_INT 4
8032: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8033: LD_ADDR_EXP 36
8037: PUSH
8038: LD_INT 6
8040: ST_TO_ADDR
// end ; end ;
8041: GO 8044
8043: POP
// end ;
8044: LD_VAR 0 1
8048: RET
// export function ShowQuery1 ; begin
8049: LD_INT 0
8051: PPUSH
// result := Query ( QKill ) ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_STRING QKill
8059: PPUSH
8060: CALL_OW 97
8064: ST_TO_ADDR
// end ;
8065: LD_VAR 0 1
8069: RET
// export function ShowQuery2 ; begin
8070: LD_INT 0
8072: PPUSH
// result := Query ( QKill2 ) ;
8073: LD_ADDR_VAR 0 1
8077: PUSH
8078: LD_STRING QKill2
8080: PPUSH
8081: CALL_OW 97
8085: ST_TO_ADDR
// end ;
8086: LD_VAR 0 1
8090: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8097: LD_ADDR_VAR 0 7
8101: PUSH
8102: LD_INT 48
8104: PUSH
8105: LD_INT 49
8107: PUSH
8108: LD_INT 50
8110: PUSH
8111: LD_INT 20
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: LD_INT 51
8119: PUSH
8120: LD_INT 52
8122: PUSH
8123: LD_INT 69
8125: PUSH
8126: LD_INT 39
8128: PUSH
8129: LD_INT 34
8131: PUSH
8132: LD_INT 40
8134: PUSH
8135: LD_INT 53
8137: PUSH
8138: LD_INT 71
8140: PUSH
8141: LD_INT 57
8143: PUSH
8144: LD_INT 58
8146: PUSH
8147: LD_INT 44
8149: PUSH
8150: LD_INT 32
8152: PUSH
8153: LD_INT 27
8155: PUSH
8156: LD_INT 23
8158: PUSH
8159: LD_INT 33
8161: PUSH
8162: LD_INT 59
8164: PUSH
8165: LD_INT 54
8167: PUSH
8168: LD_INT 55
8170: PUSH
8171: LD_INT 56
8173: PUSH
8174: LD_INT 63
8176: PUSH
8177: LD_INT 64
8179: PUSH
8180: LD_INT 65
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: LD_INT 31
8188: PUSH
8189: LD_INT 21
8191: PUSH
8192: LD_INT 22
8194: PUSH
8195: LD_INT 25
8197: PUSH
8198: LD_INT 82
8200: PUSH
8201: LD_INT 83
8203: PUSH
8204: LD_INT 84
8206: PUSH
8207: LD_INT 85
8209: PUSH
8210: LD_INT 86
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: ST_TO_ADDR
// for i = 1 to list do
8252: LD_ADDR_VAR 0 5
8256: PUSH
8257: DOUBLE
8258: LD_INT 1
8260: DEC
8261: ST_TO_ADDR
8262: LD_VAR 0 7
8266: PUSH
8267: FOR_TO
8268: IFFALSE 8342
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 5
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 321
8290: PUSH
8291: LD_INT 1
8293: EQUAL
8294: IFFALSE 8318
8296: PUSH
8297: LD_VAR 0 7
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: PPUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: CALL_OW 482
8317: AND
8318: IFFALSE 8340
// AddComResearch ( lab , list [ i ] ) ;
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_VAR 0 7
8329: PUSH
8330: LD_VAR 0 5
8334: ARRAY
8335: PPUSH
8336: CALL_OW 184
8340: GO 8267
8342: POP
8343: POP
// end ;
8344: LD_VAR 0 4
8348: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8349: LD_INT 0
8351: PPUSH
8352: PPUSH
8353: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8354: LD_INT 22
8356: PUSH
8357: LD_VAR 0 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 21
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: PUSH
8385: LD_VAR 0 3
8389: LESSEQUAL
8390: IFFALSE 8498
// begin for i = 1 to vehCount do
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 3
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8496
// begin weapon := weaponTab [ i ] ;
8410: LD_ADDR_VAR 0 10
8414: PUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 9
8424: ARRAY
8425: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8426: LD_VAR 0 10
8430: PUSH
8431: LD_INT 46
8433: EQUAL
8434: IFFALSE 8465
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8436: LD_VAR 0 2
8440: PPUSH
8441: LD_INT 24
8443: PPUSH
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_VAR 0 10
8458: PPUSH
8459: CALL_OW 185
8463: GO 8494
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8465: LD_VAR 0 2
8469: PPUSH
8470: LD_VAR 0 7
8474: PPUSH
8475: LD_VAR 0 5
8479: PPUSH
8480: LD_VAR 0 6
8484: PPUSH
8485: LD_VAR 0 10
8489: PPUSH
8490: CALL_OW 185
// end ;
8494: GO 8407
8496: POP
8497: POP
// end ; end ;
8498: LD_VAR 0 8
8502: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8503: LD_INT 0
8505: PPUSH
8506: PPUSH
8507: PPUSH
8508: PPUSH
8509: PPUSH
8510: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_VAR 0 2
8520: PPUSH
8521: CALL_OW 313
8525: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 24
8560: PUSH
8561: LD_INT 750
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: LD_INT 54
8573: PUSH
8574: EMPTY
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 70
8591: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8592: LD_ADDR_VAR 0 6
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: LD_INT 22
8604: PUSH
8605: LD_VAR 0 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 21
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 1000
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: PPUSH
8649: CALL_OW 70
8653: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8654: LD_VAR 0 6
8658: NOT
8659: IFFALSE 8705
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 25
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 24
8686: PUSH
8687: LD_INT 250
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 69
8703: NOT
8704: AND
8705: IFFALSE 8709
// exit ;
8707: GO 8879
// if buildingsList and engineerOkInside then
8709: LD_VAR 0 6
8713: IFFALSE 8721
8715: PUSH
8716: LD_VAR 0 8
8720: AND
8721: IFFALSE 8732
// ComExitBuilding ( engineerOkInside ) ;
8723: LD_VAR 0 8
8727: PPUSH
8728: CALL_OW 122
// if buildingsList and engineerOkOutside then
8732: LD_VAR 0 6
8736: IFFALSE 8744
8738: PUSH
8739: LD_VAR 0 9
8743: AND
8744: IFFALSE 8764
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8746: LD_VAR 0 9
8750: PPUSH
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8764: LD_VAR 0 6
8768: PUSH
8769: LD_INT 0
8771: EQUAL
8772: IFFALSE 8784
8774: PUSH
8775: LD_VAR 0 4
8779: PUSH
8780: LD_INT 0
8782: EQUAL
8783: AND
8784: IFFALSE 8792
8786: PUSH
8787: LD_VAR 0 9
8791: AND
8792: IFFALSE 8808
// ComEnterUnit ( engineerOkOutside , depot ) ;
8794: LD_VAR 0 9
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8808: LD_VAR 0 9
8812: IFFALSE 8824
8814: PUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 0
8822: EQUAL
8823: AND
8824: IFFALSE 8832
8826: PUSH
8827: LD_VAR 0 4
8831: AND
8832: IFFALSE 8879
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8834: LD_VAR 0 9
8838: PPUSH
8839: LD_VAR 0 4
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: LD_VAR 0 4
8852: PUSH
8853: LD_INT 2
8855: ARRAY
8856: PPUSH
8857: LD_VAR 0 4
8861: PUSH
8862: LD_INT 3
8864: ARRAY
8865: PPUSH
8866: LD_VAR 0 4
8870: PUSH
8871: LD_INT 4
8873: ARRAY
8874: PPUSH
8875: CALL_OW 145
// end ;
8879: LD_VAR 0 5
8883: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8884: LD_INT 0
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_INT 22
8902: PUSH
8903: LD_VAR 0 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 4
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 23
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 251
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 69
8952: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8953: LD_ADDR_VAR 0 7
8957: PUSH
8958: LD_VAR 0 3
8962: PPUSH
8963: LD_INT 22
8965: PUSH
8966: LD_VAR 0 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 25
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 50
8997: PUSH
8998: EMPTY
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PPUSH
9007: CALL_OW 70
9011: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9012: LD_ADDR_VAR 0 10
9016: PUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_INT 22
9024: PUSH
9025: LD_VAR 0 1
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 21
9036: PUSH
9037: LD_INT 1
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 3
9046: PUSH
9047: LD_INT 25
9049: PUSH
9050: LD_INT 3
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 3
9063: PUSH
9064: LD_INT 24
9066: PUSH
9067: LD_INT 750
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9089: LD_ADDR_VAR 0 11
9093: PUSH
9094: LD_VAR 0 2
9098: PPUSH
9099: LD_INT 22
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 1
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 3
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 3
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: LD_INT 1000
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 70
9165: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9166: LD_VAR 0 10
9170: NOT
9171: IFFALSE 9180
9173: PUSH
9174: LD_VAR 0 11
9178: NOT
9179: AND
9180: IFFALSE 9189
9182: PUSH
9183: LD_VAR 0 6
9187: NOT
9188: AND
9189: IFFALSE 9193
// exit ;
9191: GO 9409
// if damageUnits and sci_list then
9193: LD_VAR 0 10
9197: IFFALSE 9205
9199: PUSH
9200: LD_VAR 0 6
9204: AND
9205: IFFALSE 9221
// ComMoveToArea ( damageUnits , healArea ) ;
9207: LD_VAR 0 10
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 113
// if unitsToHeal and sci_list then
9221: LD_VAR 0 11
9225: IFFALSE 9233
9227: PUSH
9228: LD_VAR 0 6
9232: AND
9233: IFFALSE 9244
// ComExitBuilding ( sci_list ) ;
9235: LD_VAR 0 6
9239: PPUSH
9240: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9244: LD_VAR 0 11
9248: IFFALSE 9256
9250: PUSH
9251: LD_VAR 0 7
9255: AND
9256: IFFALSE 9276
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9258: LD_VAR 0 7
9262: PPUSH
9263: LD_VAR 0 11
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 0
9283: EQUAL
9284: IFFALSE 9296
9286: PUSH
9287: LD_VAR 0 11
9291: PUSH
9292: LD_INT 0
9294: EQUAL
9295: AND
9296: IFFALSE 9304
9298: PUSH
9299: LD_VAR 0 7
9303: AND
9304: IFFALSE 9409
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9306: LD_ADDR_VAR 0 12
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_VAR 0 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 8
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 69
9352: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9353: LD_ADDR_VAR 0 13
9357: PUSH
9358: LD_INT 1
9360: PPUSH
9361: LD_VAR 0 12
9365: PPUSH
9366: CALL_OW 12
9370: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9371: LD_VAR 0 7
9375: PPUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 60
9381: PUSH
9382: EMPTY
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 72
9393: PPUSH
9394: LD_VAR 0 12
9398: PUSH
9399: LD_VAR 0 13
9403: ARRAY
9404: PPUSH
9405: CALL_OW 120
// end ; end ;
9409: LD_VAR 0 5
9413: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9414: LD_INT 0
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
// tmp := [ ] ;
9421: LD_ADDR_VAR 0 6
9425: PUSH
9426: EMPTY
9427: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9428: LD_ADDR_VAR 0 7
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 30
9447: PUSH
9448: LD_INT 32
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: ST_TO_ADDR
// if bunkers then
9464: LD_VAR 0 7
9468: IFFALSE 9538
// for i in bunkers do
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9536
// for j in UnitsInside ( i ) do
9483: LD_ADDR_VAR 0 5
9487: PUSH
9488: LD_VAR 0 4
9492: PPUSH
9493: CALL_OW 313
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9532
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9501: LD_ADDR_VAR 0 6
9505: PUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_VAR 0 6
9515: PUSH
9516: LD_INT 1
9518: PLUS
9519: PPUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: CALL_OW 1
9529: ST_TO_ADDR
9530: GO 9498
9532: POP
9533: POP
9534: GO 9480
9536: POP
9537: POP
// if tmp then
9538: LD_VAR 0 6
9542: IFFALSE 9582
// begin ComExitBuilding ( tmp ) ;
9544: LD_VAR 0 6
9548: PPUSH
9549: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9553: LD_VAR 0 6
9557: PPUSH
9558: LD_VAR 0 2
9562: PPUSH
9563: CALL_OW 250
9567: PPUSH
9568: LD_VAR 0 2
9572: PPUSH
9573: CALL_OW 251
9577: PPUSH
9578: CALL_OW 174
// end ; end ;
9582: LD_VAR 0 3
9586: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9587: LD_INT 0
9589: PPUSH
9590: PPUSH
9591: PPUSH
// enable ;
9592: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9593: LD_ADDR_VAR 0 6
9597: PUSH
9598: LD_VAR 0 3
9602: PPUSH
9603: CALL_OW 435
9607: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9608: LD_ADDR_VAR 0 5
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 34
9627: PUSH
9628: LD_VAR 0 2
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9646: LD_VAR 0 5
9650: IFFALSE 9663
9652: PUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: CALL_OW 435
9662: AND
9663: IFFALSE 9671
9665: PUSH
9666: LD_VAR 0 6
9670: AND
9671: IFFALSE 9704
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9673: LD_VAR 0 5
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: LD_VAR 0 6
9686: PUSH
9687: LD_INT 1
9689: ARRAY
9690: PPUSH
9691: LD_VAR 0 6
9695: PUSH
9696: LD_INT 2
9698: ARRAY
9699: PPUSH
9700: CALL_OW 177
// end ;
9704: LD_VAR 0 4
9708: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9709: LD_INT 0
9711: PPUSH
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
9718: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9719: LD_ADDR_VAR 0 6
9723: PUSH
9724: LD_VAR 0 2
9728: PPUSH
9729: LD_INT 22
9731: PUSH
9732: LD_VAR 0 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 56
9743: PUSH
9744: EMPTY
9745: LIST
9746: PUSH
9747: LD_INT 24
9749: PUSH
9750: LD_INT 700
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 60
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 25
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 5
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 8
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 25
9805: PUSH
9806: LD_INT 9
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 70
9831: PUSH
9832: LD_EXP 48
9836: PUSH
9837: LD_EXP 49
9841: UNION
9842: DIFF
9843: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9844: LD_ADDR_VAR 0 7
9848: PUSH
9849: LD_VAR 0 2
9853: PPUSH
9854: LD_INT 22
9856: PUSH
9857: LD_VAR 0 1
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 30
9868: PUSH
9869: LD_INT 32
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 58
9878: PUSH
9879: EMPTY
9880: LIST
9881: PUSH
9882: LD_INT 24
9884: PUSH
9885: LD_INT 251
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9903: LD_ADDR_VAR 0 9
9907: PUSH
9908: LD_VAR 0 2
9912: PPUSH
9913: LD_INT 22
9915: PUSH
9916: LD_VAR 0 1
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 4
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 5
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 24
9955: PUSH
9956: LD_INT 251
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 70
9972: ST_TO_ADDR
// if barrackList then
9973: LD_VAR 0 9
9977: IFFALSE 10133
// begin if turretList = 0 then
9979: LD_VAR 0 7
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: IFFALSE 10025
// begin if soldiersList then
9989: LD_VAR 0 6
9993: IFFALSE 10023
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9995: LD_VAR 0 6
9999: PPUSH
10000: LD_VAR 0 9
10004: PUSH
10005: LD_INT 1
10007: PPUSH
10008: LD_VAR 0 9
10012: PPUSH
10013: CALL_OW 12
10017: ARRAY
10018: PPUSH
10019: CALL_OW 120
// end else
10023: GO 10133
// begin for i in barrackList do
10025: LD_ADDR_VAR 0 4
10029: PUSH
10030: LD_VAR 0 9
10034: PUSH
10035: FOR_IN
10036: IFFALSE 10131
// begin if not turretList then
10038: LD_VAR 0 7
10042: NOT
10043: IFFALSE 10049
// exit ;
10045: POP
10046: POP
10047: GO 10133
// insideUnits = UnitsInside ( i ) ;
10049: LD_ADDR_VAR 0 10
10053: PUSH
10054: LD_VAR 0 4
10058: PPUSH
10059: CALL_OW 313
10063: ST_TO_ADDR
// if insideUnits then
10064: LD_VAR 0 10
10068: IFFALSE 10129
// begin tmp := insideUnits [ 1 ] ;
10070: LD_ADDR_VAR 0 8
10074: PUSH
10075: LD_VAR 0 10
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10084: LD_VAR 0 8
10088: PPUSH
10089: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10093: LD_VAR 0 8
10097: PPUSH
10098: LD_VAR 0 7
10102: PUSH
10103: LD_INT 1
10105: ARRAY
10106: PPUSH
10107: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10111: LD_ADDR_VAR 0 7
10115: PUSH
10116: LD_VAR 0 7
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 3
10128: ST_TO_ADDR
// end ; end ;
10129: GO 10035
10131: POP
10132: POP
// end ; end ; end ;
10133: LD_VAR 0 3
10137: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10138: LD_INT 0
10140: PPUSH
10141: PPUSH
10142: PPUSH
10143: PPUSH
10144: PPUSH
10145: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10146: LD_ADDR_VAR 0 8
10150: PUSH
10151: LD_INT 22
10153: PUSH
10154: LD_VAR 0 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 34
10175: PUSH
10176: LD_INT 52
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not craneList then
10193: LD_VAR 0 8
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10642
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10202: LD_ADDR_VAR 0 9
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_VAR 0 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 3
10231: PUSH
10232: LD_INT 24
10234: PUSH
10235: LD_INT 1000
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: PPUSH
10254: CALL_OW 69
10258: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10259: LD_VAR 0 9
10263: IFFALSE 10286
10265: PUSH
10266: LD_VAR 0 8
10270: PPUSH
10271: LD_INT 24
10273: PUSH
10274: LD_INT 750
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: AND
10286: IFFALSE 10321
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10288: LD_VAR 0 8
10292: PPUSH
10293: LD_INT 24
10295: PUSH
10296: LD_INT 750
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 72
10307: PPUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_INT 1
10315: ARRAY
10316: PPUSH
10317: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10321: LD_VAR 0 8
10325: PPUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 24
10331: PUSH
10332: LD_INT 750
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 72
10347: IFFALSE 10385
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10349: LD_VAR 0 8
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 750
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10385: LD_VAR 0 8
10389: IFFALSE 10401
10391: PUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 0
10399: EQUAL
10400: AND
10401: IFFALSE 10409
10403: PUSH
10404: LD_VAR 0 3
10408: AND
10409: IFFALSE 10456
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10411: LD_VAR 0 8
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 1
10423: ARRAY
10424: PPUSH
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 2
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 3
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PUSH
10448: LD_INT 4
10450: ARRAY
10451: PPUSH
10452: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10456: LD_ADDR_VAR 0 7
10460: PUSH
10461: LD_VAR 0 2
10465: PPUSH
10466: LD_INT 22
10468: PUSH
10469: LD_VAR 0 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 34
10490: PUSH
10491: LD_INT 52
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: LD_INT 24
10503: PUSH
10504: LD_INT 750
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 70
10525: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10526: LD_ADDR_VAR 0 6
10530: PUSH
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 22
10538: PUSH
10539: LD_VAR 0 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 30
10553: PUSH
10554: LD_INT 0
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 70
10584: ST_TO_ADDR
// if crane then
10585: LD_VAR 0 7
10589: IFFALSE 10642
// for i in crane do
10591: LD_ADDR_VAR 0 5
10595: PUSH
10596: LD_VAR 0 7
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10640
// begin if dep then
10604: LD_VAR 0 6
10608: IFFALSE 10624
// ComMoveUnit ( i , dep ) ;
10610: LD_VAR 0 5
10614: PPUSH
10615: LD_VAR 0 6
10619: PPUSH
10620: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10624: LD_VAR 0 5
10628: PPUSH
10629: CALL_OW 311
10633: PPUSH
10634: CALL 84808 0 1
// end ;
10638: GO 10601
10640: POP
10641: POP
// end ;
10642: LD_VAR 0 4
10646: RET
// export function BuildBulldozer ; begin
10647: LD_INT 0
10649: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10650: LD_INT 17
10652: PPUSH
10653: CALL_OW 302
10657: NOT
10658: IFTRUE 10673
10660: PUSH
10661: LD_INT 17
10663: PPUSH
10664: CALL_OW 255
10668: PUSH
10669: LD_INT 3
10671: NONEQUAL
10672: OR
10673: IFFALSE 10677
// exit ;
10675: GO 10696
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10677: LD_INT 17
10679: PPUSH
10680: LD_INT 24
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 53
10691: PPUSH
10692: CALL_OW 185
// end ;
10696: LD_VAR 0 1
10700: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// if not bulldozer then
10708: LD_VAR 0 1
10712: NOT
10713: IFFALSE 10717
// exit ;
10715: GO 10999
// list := ListEnvironmentArea ( area ) ;
10717: LD_ADDR_VAR 0 5
10721: PUSH
10722: LD_VAR 0 2
10726: PPUSH
10727: CALL_OW 353
10731: ST_TO_ADDR
// tmp := [ ] ;
10732: LD_ADDR_VAR 0 6
10736: PUSH
10737: EMPTY
10738: ST_TO_ADDR
// for i = 1 to list do
10739: LD_ADDR_VAR 0 4
10743: PUSH
10744: DOUBLE
10745: LD_INT 1
10747: DEC
10748: ST_TO_ADDR
10749: LD_VAR 0 5
10753: PUSH
10754: FOR_TO
10755: IFFALSE 10853
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10757: LD_VAR 0 5
10761: PUSH
10762: LD_VAR 0 4
10766: ARRAY
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PPUSH
10772: LD_VAR 0 5
10776: PUSH
10777: LD_VAR 0 4
10781: ARRAY
10782: PUSH
10783: LD_INT 2
10785: ARRAY
10786: PPUSH
10787: CALL_OW 554
10791: IFFALSE 10851
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10793: LD_ADDR_VAR 0 6
10797: PUSH
10798: LD_VAR 0 6
10802: PPUSH
10803: LD_VAR 0 6
10807: PUSH
10808: LD_INT 1
10810: PLUS
10811: PPUSH
10812: LD_VAR 0 5
10816: PUSH
10817: LD_VAR 0 4
10821: ARRAY
10822: PUSH
10823: LD_INT 1
10825: ARRAY
10826: PUSH
10827: LD_VAR 0 5
10831: PUSH
10832: LD_VAR 0 4
10836: ARRAY
10837: PUSH
10838: LD_INT 2
10840: ARRAY
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 1
10850: ST_TO_ADDR
// end ;
10851: GO 10754
10853: POP
10854: POP
// ComStop ( bulldozer ) ;
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10864: LD_ADDR_VAR 0 7
10868: PUSH
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 250
10878: PUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 251
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// for i = tmp downto 1 do
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: DOUBLE
10899: LD_VAR 0 6
10903: INC
10904: ST_TO_ADDR
10905: LD_INT 1
10907: PUSH
10908: FOR_DOWNTO
10909: IFFALSE 10997
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10911: LD_ADDR_VAR 0 7
10915: PUSH
10916: LD_VAR 0 7
10920: PUSH
10921: LD_INT 1
10923: ARRAY
10924: PPUSH
10925: LD_VAR 0 7
10929: PUSH
10930: LD_INT 2
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 6
10938: PPUSH
10939: CALL 11106 0 3
10943: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_VAR 0 7
10953: PUSH
10954: LD_INT 1
10956: ARRAY
10957: PPUSH
10958: LD_VAR 0 7
10962: PUSH
10963: LD_INT 2
10965: ARRAY
10966: PPUSH
10967: CALL 11004 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10971: LD_ADDR_VAR 0 6
10975: PUSH
10976: LD_VAR 0 6
10980: PPUSH
10981: LD_VAR 0 7
10985: PUSH
10986: LD_INT 3
10988: ARRAY
10989: PPUSH
10990: CALL_OW 3
10994: ST_TO_ADDR
// end ;
10995: GO 10908
10997: POP
10998: POP
// end ;
10999: LD_VAR 0 3
11003: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
11004: LD_INT 0
11006: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: CALL_OW 351
11021: IFFALSE 11039
11023: PUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL_OW 554
11038: AND
11039: IFFALSE 11057
11041: PUSH
11042: LD_VAR 0 2
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: CALL_OW 488
11056: AND
11057: IFFALSE 11080
11059: PUSH
11060: LD_VAR 0 2
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: CALL_OW 428
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: EQUAL
11079: AND
11080: IFFALSE 11101
// AddComMoveXY ( bulldozer , x , y ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_VAR 0 2
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: CALL_OW 171
// end ;
11101: LD_VAR 0 4
11105: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
// dist := 99999 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 99999
11122: ST_TO_ADDR
// for i = 1 to list do
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: DOUBLE
11129: LD_INT 1
11131: DEC
11132: ST_TO_ADDR
11133: LD_VAR 0 3
11137: PUSH
11138: FOR_TO
11139: IFFALSE 11277
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11141: LD_ADDR_VAR 0 7
11145: PUSH
11146: LD_VAR 0 1
11150: PPUSH
11151: LD_VAR 0 2
11155: PPUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 5
11165: ARRAY
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: PPUSH
11171: LD_VAR 0 3
11175: PUSH
11176: LD_VAR 0 5
11180: ARRAY
11181: PUSH
11182: LD_INT 2
11184: ARRAY
11185: PPUSH
11186: CALL_OW 298
11190: ST_TO_ADDR
// if d = 0 then
11191: LD_VAR 0 7
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 11203
// continue ;
11201: GO 11138
// if d < dist then
11203: LD_VAR 0 7
11207: PUSH
11208: LD_VAR 0 6
11212: LESS
11213: IFFALSE 11275
// begin _x := list [ i ] [ 1 ] ;
11215: LD_ADDR_VAR 0 8
11219: PUSH
11220: LD_VAR 0 3
11224: PUSH
11225: LD_VAR 0 5
11229: ARRAY
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11235: LD_ADDR_VAR 0 9
11239: PUSH
11240: LD_VAR 0 3
11244: PUSH
11245: LD_VAR 0 5
11249: ARRAY
11250: PUSH
11251: LD_INT 2
11253: ARRAY
11254: ST_TO_ADDR
// _i := i ;
11255: LD_ADDR_VAR 0 10
11259: PUSH
11260: LD_VAR 0 5
11264: ST_TO_ADDR
// dist := d ;
11265: LD_ADDR_VAR 0 6
11269: PUSH
11270: LD_VAR 0 7
11274: ST_TO_ADDR
// end ; end ;
11275: GO 11138
11277: POP
11278: POP
// result := [ _x , _y , _i , dist ] ;
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_VAR 0 8
11288: PUSH
11289: LD_VAR 0 9
11293: PUSH
11294: LD_VAR 0 10
11298: PUSH
11299: LD_VAR 0 6
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: ST_TO_ADDR
// end ; end_of_file
11310: LD_VAR 0 4
11314: RET
// export function Action ; begin
11315: LD_INT 0
11317: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11318: LD_INT 66
11320: PPUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11328: LD_INT 22
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: PUSH
11357: LD_INT 0
11359: EQUAL
11360: IFFALSE 11374
// SetClass ( JMM , 2 ) ;
11362: LD_EXP 1
11366: PPUSH
11367: LD_INT 2
11369: PPUSH
11370: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11374: LD_STRING M1
11376: PPUSH
11377: CALL_OW 337
// case Difficulty of 1 :
11381: LD_OWVAR 67
11385: PUSH
11386: LD_INT 1
11388: DOUBLE
11389: EQUAL
11390: IFTRUE 11394
11392: GO 11404
11394: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11395: LD_STRING M1-1
11397: PPUSH
11398: CALL_OW 337
11402: GO 11459
11404: LD_INT 2
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11422
11412: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11413: LD_STRING M1-2
11415: PPUSH
11416: CALL_OW 337
11420: GO 11459
11422: LD_INT 3
11424: DOUBLE
11425: EQUAL
11426: IFTRUE 11430
11428: GO 11440
11430: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11431: LD_STRING M1-3
11433: PPUSH
11434: CALL_OW 337
11438: GO 11459
11440: LD_INT 4
11442: DOUBLE
11443: EQUAL
11444: IFTRUE 11448
11446: GO 11458
11448: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11449: LD_STRING M1-4
11451: PPUSH
11452: CALL_OW 337
11456: GO 11459
11458: POP
// ChangeMissionObjectives ( M1cont ) ;
11459: LD_STRING M1cont
11461: PPUSH
11462: CALL_OW 337
// SaveForQuickRestart ;
11466: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11470: LD_INT 525
11472: PPUSH
11473: LD_INT 700
11475: PPUSH
11476: CALL_OW 12
11480: PPUSH
11481: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 82
11490: PPUSH
11491: LD_INT 38
11493: PPUSH
11494: LD_INT 10
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 56
// wait ( 0 0$14 ) ;
11504: LD_INT 490
11506: PPUSH
11507: CALL_OW 67
// firstCrateSpawn := true ;
11511: LD_ADDR_EXP 41
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// end ;
11519: LD_VAR 0 1
11523: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11524: LD_EXP 41
11528: IFFALSE 11919
11530: GO 11532
11532: DISABLE
11533: LD_INT 0
11535: PPUSH
// begin if IsOk ( Lisa ) then
11536: LD_EXP 2
11540: PPUSH
11541: CALL_OW 302
11545: IFFALSE 11561
// Say ( Lisa , DR0-Lisa-1 ) else
11547: LD_EXP 2
11551: PPUSH
11552: LD_STRING DR0-Lisa-1
11554: PPUSH
11555: CALL_OW 88
11559: GO 11707
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11561: LD_INT 22
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 21
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 4
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: PUSH
11652: LD_EXP 1
11656: PUSH
11657: LD_EXP 8
11661: PUSH
11662: LD_EXP 5
11666: PUSH
11667: LD_EXP 6
11671: PUSH
11672: LD_EXP 7
11676: PUSH
11677: LD_EXP 4
11681: PUSH
11682: LD_EXP 3
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: DIFF
11696: PPUSH
11697: LD_STRING DR0-Sol1-1
11699: PPUSH
11700: LD_STRING DR0-Sol1-1
11702: PPUSH
11703: CALL 7564 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11707: LD_ADDR_VAR 0 1
11711: PUSH
11712: LD_INT 22
11714: PUSH
11715: LD_INT 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 21
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 26
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 25
11747: PUSH
11748: LD_INT 1
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 25
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 25
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 4
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: PUSH
11803: LD_EXP 1
11807: PUSH
11808: LD_EXP 8
11812: PUSH
11813: LD_EXP 5
11817: PUSH
11818: LD_EXP 2
11822: PUSH
11823: LD_EXP 6
11827: PUSH
11828: LD_EXP 7
11832: PUSH
11833: LD_EXP 4
11837: PUSH
11838: LD_EXP 3
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: DIFF
11853: PPUSH
11854: LD_STRING DR0-Sol2-1
11856: PPUSH
11857: LD_STRING DR0-Sol2-1
11859: PPUSH
11860: CALL 7564 0 3
11864: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11865: LD_EXP 4
11869: PPUSH
11870: CALL_OW 302
11874: IFFALSE 11888
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11876: LD_EXP 4
11880: PPUSH
11881: LD_STRING DR0-Cyrus-1
11883: PPUSH
11884: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11888: LD_EXP 2
11892: PPUSH
11893: CALL_OW 302
11897: IFTRUE 11905
11899: PUSH
11900: LD_VAR 0 1
11904: OR
11905: IFFALSE 11919
// Say ( JMM , DR0-JMM-1 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING DR0-JMM-1
11914: PPUSH
11915: CALL_OW 88
// end ;
11919: PPOPN 1
11921: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11922: LD_EXP 5
11926: PPUSH
11927: CALL_OW 302
11931: IFFALSE 11967
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 25
11946: PUSH
11947: LD_INT 16
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_INT 0
11965: GREATER
11966: AND
11967: IFFALSE 11979
11969: PUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 463
11977: NOT
11978: AND
11979: IFFALSE 12257
11981: GO 11983
11983: DISABLE
// begin DialogueOn ;
11984: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11988: LD_EXP 5
11992: PPUSH
11993: LD_STRING D10-Frank-1
11995: PPUSH
11996: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12000: LD_INT 22
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 21
12012: PUSH
12013: LD_INT 1
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 25
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 4
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: PUSH
12080: LD_EXP 1
12084: PUSH
12085: LD_EXP 5
12089: PUSH
12090: LD_EXP 2
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: DIFF
12100: PPUSH
12101: LD_STRING D10-Sol1-1
12103: PPUSH
12104: LD_STRING D10-FSol1-1
12106: PPUSH
12107: CALL 7564 0 3
// Say ( Frank , D10-Frank-2 ) ;
12111: LD_EXP 5
12115: PPUSH
12116: LD_STRING D10-Frank-2
12118: PPUSH
12119: CALL_OW 88
// if IsOk ( Lisa ) then
12123: LD_EXP 2
12127: PPUSH
12128: CALL_OW 302
12132: IFFALSE 12148
// Say ( Lisa , D10-Lisa-2 ) else
12134: LD_EXP 2
12138: PPUSH
12139: LD_STRING D10-Lisa-2
12141: PPUSH
12142: CALL_OW 88
12146: GO 12253
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12148: LD_INT 22
12150: PUSH
12151: LD_INT 1
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 21
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 25
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 3
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: PUSH
12228: LD_EXP 1
12232: PUSH
12233: LD_EXP 5
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: DIFF
12242: PPUSH
12243: LD_STRING D10-Sol1-2
12245: PPUSH
12246: LD_STRING D10-FSol1-2
12248: PPUSH
12249: CALL 7564 0 3
// DialogueOff ;
12253: CALL_OW 7
// end ;
12257: END
// every 0 0$30 trigger not InBattle ( 1 ) and tick > 10 10$00 do
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 463
12265: NOT
12266: IFFALSE 12278
12268: PUSH
12269: LD_OWVAR 1
12273: PUSH
12274: LD_INT 21000
12276: GREATER
12277: AND
12278: IFFALSE 12561
12280: GO 12282
12282: DISABLE
// begin HarrisonSupport ;
12283: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12287: LD_EXP 18
12291: PPUSH
12292: CALL_OW 310
12296: PPUSH
12297: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12301: LD_EXP 18
12305: PPUSH
12306: LD_STRING DEng-Eng1-1
12308: PPUSH
12309: CALL_OW 88
// wait ( 1 1$0 ) ;
12313: LD_INT 2100
12315: PPUSH
12316: CALL_OW 67
// DialogueOn ;
12320: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12324: LD_EXP 15
12328: PPUSH
12329: LD_STRING DRem-Har-1
12331: PPUSH
12332: CALL_OW 94
// if contactWithRussian then
12336: LD_EXP 23
12340: IFFALSE 12356
// Say ( JMM , DRem-JMM-1 ) else
12342: LD_EXP 1
12346: PPUSH
12347: LD_STRING DRem-JMM-1
12349: PPUSH
12350: CALL_OW 88
12354: GO 12368
// Say ( JMM , DRem-JMM-1a ) ;
12356: LD_EXP 1
12360: PPUSH
12361: LD_STRING DRem-JMM-1a
12363: PPUSH
12364: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12368: LD_EXP 15
12372: PPUSH
12373: LD_STRING DRem-Har-2
12375: PPUSH
12376: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12380: LD_STRING DenisInDelta
12382: PPUSH
12383: LD_INT 0
12385: PPUSH
12386: CALL_OW 30
12390: IFFALSE 12406
// Say ( JMM , DRem-JMM-2 ) else
12392: LD_EXP 1
12396: PPUSH
12397: LD_STRING DRem-JMM-2
12399: PPUSH
12400: CALL_OW 88
12404: GO 12418
// Say ( JMM , DRem-JMM-2a ) ;
12406: LD_EXP 1
12410: PPUSH
12411: LD_STRING DRem-JMM-2a
12413: PPUSH
12414: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12418: LD_EXP 15
12422: PPUSH
12423: LD_STRING DRem-Har-3
12425: PPUSH
12426: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12430: LD_EXP 1
12434: PPUSH
12435: LD_STRING DRem-JMM-3
12437: PPUSH
12438: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12442: LD_EXP 15
12446: PPUSH
12447: LD_STRING DRem-Har-4
12449: PPUSH
12450: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12454: LD_STRING DenisInDelta
12456: PPUSH
12457: LD_INT 0
12459: PPUSH
12460: CALL_OW 30
12464: IFFALSE 12524
// begin Say ( JMM , DRem-JMM-4 ) ;
12466: LD_EXP 1
12470: PPUSH
12471: LD_STRING DRem-JMM-4
12473: PPUSH
12474: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12478: LD_EXP 15
12482: PPUSH
12483: LD_STRING DRem-Har-5
12485: PPUSH
12486: CALL_OW 94
// DialogueOff ;
12490: CALL_OW 7
// wait ( 4 4$00 ) ;
12494: LD_INT 8400
12496: PPUSH
12497: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// until not InBattle ( 1 ) ;
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 463
12515: NOT
12516: IFFALSE 12501
// SpawnDenis ;
12518: CALL 12562 0 0
// end else
12522: GO 12561
// begin DialogueOff ;
12524: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12528: LD_INT 36
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12541: LD_INT 15
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12554: LD_STRING MR
12556: PPUSH
12557: CALL_OW 337
// end ; end ;
12561: END
// export function SpawnDenis ; var tmp ; begin
12562: LD_INT 0
12564: PPUSH
12565: PPUSH
// PrepareDenis ;
12566: CALL 2244 0 0
// if not Denis then
12570: LD_EXP 9
12574: NOT
12575: IFFALSE 12579
// exit ;
12577: GO 12800
// CenterNowOnUnits ( Denis ) ;
12579: LD_EXP 9
12583: PPUSH
12584: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12588: LD_ADDR_VAR 0 2
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PPUSH
12603: CALL_OW 69
12607: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12608: LD_EXP 9
12612: PPUSH
12613: LD_VAR 0 2
12617: PPUSH
12618: LD_EXP 9
12622: PPUSH
12623: CALL_OW 74
12627: PPUSH
12628: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12632: LD_INT 35
12634: PPUSH
12635: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12639: LD_INT 22
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 91
12651: PUSH
12652: LD_EXP 9
12656: PUSH
12657: LD_INT 10
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: IFFALSE 12632
// SetSide ( Denis , 1 ) ;
12675: LD_EXP 9
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 235
// DialogueOn ;
12687: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12691: LD_EXP 9
12695: PPUSH
12696: LD_STRING DDen-Den-1
12698: PPUSH
12699: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12703: LD_EXP 1
12707: PPUSH
12708: LD_STRING DDen-JMM-1
12710: PPUSH
12711: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12715: LD_EXP 9
12719: PPUSH
12720: LD_STRING DDen-Den-2
12722: PPUSH
12723: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12727: LD_EXP 1
12731: PPUSH
12732: LD_STRING DDen-JMM-2
12734: PPUSH
12735: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12739: LD_EXP 9
12743: PPUSH
12744: LD_STRING DDen-Den-3
12746: PPUSH
12747: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12751: LD_EXP 1
12755: PPUSH
12756: LD_STRING DDen-JMM-3
12758: PPUSH
12759: CALL_OW 88
// DialogueOff ;
12763: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12767: LD_INT 36
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12780: LD_INT 15
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12793: LD_STRING MR
12795: PPUSH
12796: CALL_OW 337
// end ;
12800: LD_VAR 0 1
12804: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12805: LD_INT 22
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 30
12817: PUSH
12818: LD_INT 15
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: IFFALSE 12846
12835: PUSH
12836: LD_EXP 9
12840: PPUSH
12841: CALL_OW 302
12845: AND
12846: IFFALSE 12858
12848: PUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 463
12856: NOT
12857: AND
12858: IFFALSE 12887
12860: GO 12862
12862: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12863: LD_EXP 9
12867: PPUSH
12868: LD_STRING DR1-Den-1
12870: PPUSH
12871: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12875: LD_EXP 1
12879: PPUSH
12880: LD_STRING DR1-JMM-1
12882: PPUSH
12883: CALL_OW 88
// end ;
12887: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12888: LD_INT 15
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 321
12898: PUSH
12899: LD_INT 2
12901: EQUAL
12902: IFFALSE 12915
12904: PUSH
12905: LD_EXP 9
12909: PPUSH
12910: CALL_OW 302
12914: AND
12915: IFFALSE 12927
12917: PUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 463
12925: NOT
12926: AND
12927: IFFALSE 13136
12929: GO 12931
12931: DISABLE
// begin DialogueOn ;
12932: CALL_OW 6
// if IsOK ( Denis ) then
12936: LD_EXP 9
12940: PPUSH
12941: CALL_OW 302
12945: IFFALSE 12961
// Say ( Denis , DR2-Den-1 ) else
12947: LD_EXP 9
12951: PPUSH
12952: LD_STRING DR2-Den-1
12954: PPUSH
12955: CALL_OW 88
12959: GO 13020
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12961: LD_INT 22
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 25
12983: PUSH
12984: LD_INT 4
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: PPUSH
12996: CALL_OW 69
13000: PUSH
13001: LD_EXP 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: DIFF
13009: PPUSH
13010: LD_STRING DR2-Sci1-1
13012: PPUSH
13013: LD_STRING DR2-FSci1-1
13015: PPUSH
13016: CALL 7564 0 3
// Say ( JMM , DR2-JMM-1 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING DR2-JMM-1
13027: PPUSH
13028: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
13032: LD_INT 22
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 23
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PPUSH
13078: CALL_OW 69
13082: PUSH
13083: LD_EXP 1
13087: PUSH
13088: LD_EXP 9
13092: PUSH
13093: LD_EXP 8
13097: PUSH
13098: LD_EXP 5
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: DIFF
13109: PPUSH
13110: LD_STRING DR2-Sol1-1
13112: PPUSH
13113: LD_STRING 
13115: PPUSH
13116: CALL 7564 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13120: LD_EXP 1
13124: PPUSH
13125: LD_STRING DR2-JMM-2
13127: PPUSH
13128: CALL_OW 88
// DialogueOff ;
13132: CALL_OW 7
// end ;
13136: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13137: LD_INT 22
13139: PUSH
13140: LD_INT 1
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 36
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: PUSH
13166: LD_INT 0
13168: EQUAL
13169: IFFALSE 13216
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 33
13194: PUSH
13195: LD_INT 2
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: PUSH
13212: LD_INT 0
13214: GREATER
13215: AND
13216: IFFALSE 13228
13218: PUSH
13219: LD_EXP 24
13223: PUSH
13224: LD_INT 0
13226: EQUAL
13227: AND
13228: IFFALSE 13240
13230: PUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 463
13238: NOT
13239: AND
13240: IFFALSE 13377
13242: GO 13244
13244: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13245: LD_INT 22
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 21
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 26
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 69
13295: PUSH
13296: LD_EXP 1
13300: PUSH
13301: LD_EXP 6
13305: PUSH
13306: LD_EXP 7
13310: PUSH
13311: LD_EXP 9
13315: PUSH
13316: LD_EXP 16
13320: PUSH
13321: LD_EXP 3
13325: PUSH
13326: LD_EXP 4
13330: PUSH
13331: LD_EXP 2
13335: PUSH
13336: LD_EXP 5
13340: PUSH
13341: LD_EXP 8
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: DIFF
13358: PPUSH
13359: LD_STRING D3a-Mech1-1
13361: PPUSH
13362: LD_STRING 
13364: PPUSH
13365: CALL 7564 0 3
// firstTower = 2 ;
13369: LD_ADDR_EXP 24
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// end ;
13377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13378: LD_INT 22
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 21
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: PUSH
13407: LD_INT 0
13409: EQUAL
13410: IFFALSE 13541
13412: GO 13414
13414: DISABLE
13415: LD_INT 0
13417: PPUSH
// begin stop_talking := true ;
13418: LD_ADDR_OWVAR 56
13422: PUSH
13423: LD_INT 1
13425: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 21
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 1
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: PUSH
13511: FOR_IN
13512: IFFALSE 13531
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13514: LD_VAR 0 1
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: LD_INT 7500
13524: PPUSH
13525: CALL_OW 591
13529: GO 13511
13531: POP
13532: POP
// stop_talking := false ;
13533: LD_ADDR_OWVAR 56
13537: PUSH
13538: LD_INT 0
13540: ST_TO_ADDR
// end ;
13541: PPOPN 1
13543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13544: LD_INT 22
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 36
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: IFFALSE 13615
13574: PUSH
13575: LD_INT 22
13577: PUSH
13578: LD_INT 1
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 2
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 33
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 69
13614: AND
13615: IFFALSE 13623
13617: PUSH
13618: CALL 14174 0 0
13622: AND
13623: IFFALSE 13635
13625: PUSH
13626: LD_INT 1
13628: PPUSH
13629: CALL_OW 463
13633: NOT
13634: AND
13635: IFFALSE 14171
13637: GO 13639
13639: DISABLE
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_INT 1
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 30
13664: PUSH
13665: LD_INT 36
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 21
13698: PUSH
13699: LD_INT 2
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 33
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13726: LD_ADDR_VAR 0 5
13730: PUSH
13731: EMPTY
13732: ST_TO_ADDR
// for i in tmpControlTowers do
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_VAR 0 3
13742: PUSH
13743: FOR_IN
13744: IFFALSE 14169
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13746: LD_EXP 1
13750: PPUSH
13751: CALL_OW 310
13755: PUSH
13756: LD_VAR 0 1
13760: EQUAL
13761: IFFALSE 13778
13763: PUSH
13764: LD_EXP 1
13768: PPUSH
13769: CALL_OW 257
13773: PUSH
13774: LD_INT 3
13776: EQUAL
13777: AND
13778: IFFALSE 13912
// begin InGameOn ;
13780: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13784: LD_VAR 0 4
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PPUSH
13793: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13797: LD_EXP 1
13801: PPUSH
13802: LD_STRING D4a-JMM-1
13804: PPUSH
13805: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13809: LD_VAR 0 4
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PPUSH
13818: LD_EXP 1
13822: PPUSH
13823: CALL_OW 53
// wait ( 0 0$1 ) ;
13827: LD_INT 35
13829: PPUSH
13830: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13834: LD_VAR 0 4
13838: PUSH
13839: LD_INT 1
13841: ARRAY
13842: PPUSH
13843: LD_VAR 0 4
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 250
13856: PUSH
13857: LD_INT 3
13859: PLUS
13860: PPUSH
13861: LD_VAR 0 4
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: CALL_OW 251
13874: PUSH
13875: LD_INT 2
13877: MINUS
13878: PPUSH
13879: CALL_OW 111
// wait ( 0 0$2 ) ;
13883: LD_INT 70
13885: PPUSH
13886: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13890: LD_EXP 1
13894: PPUSH
13895: LD_STRING D4b-JMM-1
13897: PPUSH
13898: CALL_OW 88
// InGameOff ;
13902: CALL_OW 9
// exit ;
13906: POP
13907: POP
13908: GO 14171
// end else
13910: GO 14167
// begin InGameOn ;
13912: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13916: LD_ADDR_VAR 0 5
13920: PUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 313
13930: PPUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PPUSH
13941: CALL_OW 72
13945: ST_TO_ADDR
// if not tmpMechanicInside then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// continue ;
13953: GO 13743
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13955: LD_VAR 0 5
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: CALL_OW 258
13968: PUSH
13969: LD_INT 1
13971: EQUAL
13972: IFFALSE 13992
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13974: LD_VAR 0 5
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D4a-Mech1-1
13985: PPUSH
13986: CALL_OW 88
13990: GO 14008
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: LD_STRING D4a-FMech1-1
14003: PPUSH
14004: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14008: LD_VAR 0 4
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14021: LD_VAR 0 4
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 5
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: PPUSH
14039: CALL_OW 53
// wait ( 0 0$1 ) ;
14043: LD_INT 35
14045: PPUSH
14046: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14050: LD_VAR 0 4
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 4
14063: PUSH
14064: LD_INT 1
14066: ARRAY
14067: PPUSH
14068: CALL_OW 250
14072: PUSH
14073: LD_INT 3
14075: PLUS
14076: PPUSH
14077: LD_VAR 0 4
14081: PUSH
14082: LD_INT 1
14084: ARRAY
14085: PPUSH
14086: CALL_OW 251
14090: PUSH
14091: LD_INT 2
14093: MINUS
14094: PPUSH
14095: CALL_OW 111
// wait ( 0 0$2 ) ;
14099: LD_INT 70
14101: PPUSH
14102: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
14106: LD_VAR 0 5
14110: PUSH
14111: LD_INT 1
14113: ARRAY
14114: PPUSH
14115: CALL_OW 258
14119: PUSH
14120: LD_INT 1
14122: EQUAL
14123: IFFALSE 14143
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14125: LD_VAR 0 5
14129: PUSH
14130: LD_INT 1
14132: ARRAY
14133: PPUSH
14134: LD_STRING D4b-Mech1-1
14136: PPUSH
14137: CALL_OW 88
14141: GO 14159
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14143: LD_VAR 0 5
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: LD_STRING D4b-FMech1-1
14154: PPUSH
14155: CALL_OW 88
// InGameOff ;
14159: CALL_OW 9
// exit ;
14163: POP
14164: POP
14165: GO 14171
// end ; end ;
14167: GO 13743
14169: POP
14170: POP
// end ;
14171: PPOPN 5
14173: END
// function CheckMehInside ; var i , j , tmp ; begin
14174: LD_INT 0
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
// result := false ;
14180: LD_ADDR_VAR 0 1
14184: PUSH
14185: LD_INT 0
14187: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14188: LD_ADDR_VAR 0 4
14192: PUSH
14193: LD_INT 22
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 30
14205: PUSH
14206: LD_INT 36
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if not tmp then
14222: LD_VAR 0 4
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14295
// for i in tmp do
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_VAR 0 4
14240: PUSH
14241: FOR_IN
14242: IFFALSE 14293
// for j in UnitsInside ( i ) do
14244: LD_ADDR_VAR 0 3
14248: PUSH
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 313
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14289
// if GetClass ( j ) = class_mechanic then
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 257
14271: PUSH
14272: LD_INT 3
14274: EQUAL
14275: IFFALSE 14287
// begin result := true ;
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: LD_INT 1
14284: ST_TO_ADDR
// break ;
14285: GO 14289
// end ;
14287: GO 14259
14289: POP
14290: POP
14291: GO 14241
14293: POP
14294: POP
// end ;
14295: LD_VAR 0 1
14299: RET
// every 12 12$0 do
14300: GO 14302
14302: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14303: LD_INT 35
14305: PPUSH
14306: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 463
14317: NOT
14318: IFFALSE 14340
14320: PUSH
14321: LD_INT 32
14323: PPUSH
14324: LD_INT 81
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 70
14338: NOT
14339: AND
14340: IFTRUE 14352
14342: PUSH
14343: LD_EXP 27
14347: PUSH
14348: LD_INT 10500
14350: LESS
14351: OR
14352: IFFALSE 14303
// PrepareKurt ;
14354: CALL 17047 0 0
// end ;
14358: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14359: LD_EXP 16
14363: PPUSH
14364: CALL_OW 302
14368: IFFALSE 14385
14370: PUSH
14371: LD_EXP 16
14375: PPUSH
14376: CALL_OW 255
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: AND
14385: IFFALSE 14393
14387: PUSH
14388: LD_EXP 2
14392: AND
14393: IFFALSE 14558
14395: GO 14397
14397: DISABLE
// begin wait ( 0 0$50 ) ;
14398: LD_INT 1750
14400: PPUSH
14401: CALL_OW 67
// if not IsOk ( Joan ) then
14405: LD_EXP 16
14409: PPUSH
14410: CALL_OW 302
14414: NOT
14415: IFFALSE 14419
// exit ;
14417: GO 14558
// if IsOK ( Lisa ) then
14419: LD_EXP 2
14423: PPUSH
14424: CALL_OW 302
14428: IFFALSE 14558
// begin DialogueOn ;
14430: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14434: LD_EXP 2
14438: PPUSH
14439: LD_STRING D7-Lisa-1
14441: PPUSH
14442: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14446: LD_EXP 1
14450: PPUSH
14451: LD_STRING D7-JMM-1
14453: PPUSH
14454: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14458: LD_EXP 2
14462: PPUSH
14463: LD_STRING D7-Lisa-2
14465: PPUSH
14466: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14470: LD_EXP 1
14474: PPUSH
14475: LD_STRING D7-JMM-2
14477: PPUSH
14478: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14482: LD_EXP 2
14486: PPUSH
14487: LD_STRING D7-Lisa-3
14489: PPUSH
14490: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14494: LD_EXP 1
14498: PPUSH
14499: LD_STRING D7-JMM-3
14501: PPUSH
14502: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14506: LD_EXP 2
14510: PPUSH
14511: LD_STRING D7-Lisa-4
14513: PPUSH
14514: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14518: LD_EXP 1
14522: PPUSH
14523: LD_STRING D7-JMM-4
14525: PPUSH
14526: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14530: LD_EXP 1
14534: PPUSH
14535: LD_STRING D7-JMM-4a
14537: PPUSH
14538: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14542: LD_EXP 2
14546: PPUSH
14547: LD_STRING D7-Lisa-5
14549: PPUSH
14550: CALL_OW 88
// DialogueOff ;
14554: CALL_OW 7
// end ; end ;
14558: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14559: LD_EXP 14
14563: IFFALSE 14656
14565: PUSH
14566: LD_INT 22
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 91
14578: PUSH
14579: LD_EXP 14
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 25
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 25
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 3
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 25
14627: PUSH
14628: LD_INT 4
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 69
14651: PUSH
14652: LD_INT 1
14654: GREATER
14655: AND
14656: IFFALSE 14673
14658: GO 14660
14660: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14661: LD_EXP 14
14665: PPUSH
14666: LD_STRING D5-Sol1-1
14668: PPUSH
14669: CALL_OW 88
14673: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14674: LD_INT 22
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 33
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL_OW 69
14702: PUSH
14703: LD_INT 2
14705: GREATEREQUAL
14706: IFFALSE 14726
14708: GO 14710
14710: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14711: LD_STRING MRa
14713: PPUSH
14714: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14718: LD_ADDR_EXP 29
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// end ;
14726: END
// every 2 2$00 do var i , last ;
14727: GO 14729
14729: DISABLE
14730: LD_INT 0
14732: PPUSH
14733: PPUSH
// begin last := 8 ;
14734: LD_ADDR_VAR 0 2
14738: PUSH
14739: LD_INT 8
14741: ST_TO_ADDR
// for i := 1 to last do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14786
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14760: LD_INT 6300
14762: PPUSH
14763: LD_INT 12600
14765: PPUSH
14766: CALL_OW 12
14770: PPUSH
14771: CALL_OW 67
// PrepareRandoms ( i ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL 4248 0 1
// end ;
14784: GO 14757
14786: POP
14787: POP
// end ;
14788: PPOPN 2
14790: END
// every 5 5$20 do
14791: GO 14793
14793: DISABLE
// begin DialogueOn ;
14794: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14798: LD_EXP 10
14802: PPUSH
14803: LD_STRING D12a-Sci-1
14805: PPUSH
14806: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14810: LD_EXP 1
14814: PPUSH
14815: LD_STRING D12a-JMM-1
14817: PPUSH
14818: CALL_OW 88
// DialogueOff ;
14822: CALL_OW 7
// cratesStatus := 1 ;
14826: LD_ADDR_EXP 39
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// end ;
14834: END
// every 13 13$0 do
14835: GO 14837
14837: DISABLE
// begin DialogueOn ;
14838: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14842: LD_EXP 10
14846: PPUSH
14847: LD_STRING D12b-Sci-1
14849: PPUSH
14850: CALL_OW 94
// DialogueOff ;
14854: CALL_OW 7
// cratesStatus := 2 ;
14858: LD_ADDR_EXP 39
14862: PUSH
14863: LD_INT 2
14865: ST_TO_ADDR
// BuildBulldozer ;
14866: CALL 10647 0 0
// end ;
14870: END
// every 32 32$0 do
14871: GO 14873
14873: DISABLE
// begin DialogueOn ;
14874: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14878: LD_EXP 10
14882: PPUSH
14883: LD_STRING D12c-Sci-1
14885: PPUSH
14886: CALL_OW 94
// DialogueOff ;
14890: CALL_OW 7
// wait ( 3 3$0 ) ;
14894: LD_INT 6300
14896: PPUSH
14897: CALL_OW 67
// DialogueOn ;
14901: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14905: LD_EXP 10
14909: PPUSH
14910: LD_STRING D12d-Sci-1
14912: PPUSH
14913: CALL_OW 94
// DialogueOff ;
14917: CALL_OW 7
// cratesStatus = 1 ;
14921: LD_ADDR_EXP 39
14925: PUSH
14926: LD_INT 1
14928: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14929: CALL 21447 0 0
// wait ( 2 2$30 ) ;
14933: LD_INT 5250
14935: PPUSH
14936: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 463
14954: NOT
14955: IFFALSE 14977
14957: PUSH
14958: LD_INT 32
14960: PPUSH
14961: LD_INT 81
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 70
14975: NOT
14976: AND
14977: IFTRUE 14989
14979: PUSH
14980: LD_EXP 27
14984: PUSH
14985: LD_INT 6300
14987: LESS
14988: OR
14989: IFFALSE 14940
// PrepareJoan ;
14991: CALL 3097 0 0
// end ;
14995: END
// every 42 42$0 do
14996: GO 14998
14998: DISABLE
// begin DialogueOn ;
14999: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15003: LD_EXP 10
15007: PPUSH
15008: LD_STRING D12e-Sci-1
15010: PPUSH
15011: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15015: LD_EXP 1
15019: PPUSH
15020: LD_STRING D12e-JMM-1
15022: PPUSH
15023: CALL_OW 88
// DialogueOff ;
15027: CALL_OW 7
// cratesStatus := 2 ;
15031: LD_ADDR_EXP 39
15035: PUSH
15036: LD_INT 2
15038: ST_TO_ADDR
// end ; end_of_file
15039: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 1
15047: EQUAL
15048: IFFALSE 15060
15050: PUSH
15051: LD_VAR 0 2
15055: PUSH
15056: LD_INT 3
15058: EQUAL
15059: AND
15060: IFFALSE 15070
// contactWithRussian := 1 ;
15062: LD_ADDR_EXP 23
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
// end ;
15070: PPOPN 2
15072: END
// on BuildingComplete ( building ) do var i ;
15073: LD_INT 0
15075: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 266
15085: PUSH
15086: LD_INT 36
15088: EQUAL
15089: IFFALSE 15106
15091: PUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 255
15101: PUSH
15102: LD_INT 1
15104: EQUAL
15105: AND
15106: IFFALSE 15118
15108: PUSH
15109: LD_EXP 24
15113: PUSH
15114: LD_INT 0
15116: EQUAL
15117: AND
15118: IFFALSE 15198
// begin firstTower = 1 ;
15120: LD_ADDR_EXP 24
15124: PUSH
15125: LD_INT 1
15127: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15128: LD_INT 22
15130: PUSH
15131: LD_INT 1
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 25
15150: PUSH
15151: LD_INT 3
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 26
15160: PUSH
15161: LD_INT 1
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D3b-Mech1-1
15190: PPUSH
15191: LD_STRING D3b-Mech1-1
15193: PPUSH
15194: CALL 7564 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15198: LD_VAR 0 1
15202: PPUSH
15203: CALL_OW 266
15207: PUSH
15208: LD_INT 0
15210: EQUAL
15211: IFFALSE 15228
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 255
15223: PUSH
15224: LD_INT 1
15226: EQUAL
15227: AND
15228: IFFALSE 15242
// SetBName ( building , theta ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_STRING theta
15237: PPUSH
15238: CALL_OW 500
// if GetSide ( building ) = 3 then
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 3
15254: EQUAL
15255: IFFALSE 15295
// begin for i := 1 to 4 do
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: DOUBLE
15263: LD_INT 1
15265: DEC
15266: ST_TO_ADDR
15267: LD_INT 4
15269: PUSH
15270: FOR_TO
15271: IFFALSE 15293
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15273: LD_ADDR_EXP 32
15277: PUSH
15278: LD_EXP 32
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 3
15290: ST_TO_ADDR
15291: GO 15270
15293: POP
15294: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 255
15304: PUSH
15305: LD_INT 3
15307: EQUAL
15308: IFFALSE 15362
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 266
15320: PUSH
15321: LD_INT 0
15323: EQUAL
15324: IFTRUE 15341
15326: PUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 266
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: OR
15341: IFTRUE 15358
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 266
15353: PUSH
15354: LD_INT 4
15356: EQUAL
15357: OR
15358: PUSH
15359: EMPTY
15360: LIST
15361: AND
15362: IFFALSE 15373
// ComUpgrade ( building ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15373: LD_VAR 0 1
15377: PPUSH
15378: CALL_OW 255
15382: PUSH
15383: LD_INT 3
15385: EQUAL
15386: IFFALSE 15403
15388: PUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 266
15398: PUSH
15399: LD_INT 32
15401: EQUAL
15402: AND
15403: IFFALSE 15444
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: LD_INT 42
15412: PUSH
15413: LD_INT 43
15415: PUSH
15416: LD_INT 44
15418: PUSH
15419: LD_INT 46
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_INT 4
15433: PPUSH
15434: CALL_OW 12
15438: ARRAY
15439: PPUSH
15440: CALL_OW 208
// end ;
15444: PPOPN 2
15446: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL 38298 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15456: LD_VAR 0 1
15460: PUSH
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 23
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: IN
15501: IFFALSE 15517
// killCounter := killCounter + 1 ;
15503: LD_ADDR_EXP 46
15507: PUSH
15508: LD_EXP 46
15512: PUSH
15513: LD_INT 1
15515: PLUS
15516: ST_TO_ADDR
// if unit in ruAttackersInForest then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 49
15526: IN
15527: IFFALSE 15545
// ruAttackersInForest := ruAttackersInForest diff unit ;
15529: LD_ADDR_EXP 49
15533: PUSH
15534: LD_EXP 49
15538: PUSH
15539: LD_VAR 0 1
15543: DIFF
15544: ST_TO_ADDR
// if unit in ruAttackers then
15545: LD_VAR 0 1
15549: PUSH
15550: LD_EXP 48
15554: IN
15555: IFFALSE 15573
// ruAttackers := ruAttackers diff unit ;
15557: LD_ADDR_EXP 48
15561: PUSH
15562: LD_EXP 48
15566: PUSH
15567: LD_VAR 0 1
15571: DIFF
15572: ST_TO_ADDR
// if unit = JMM then
15573: LD_VAR 0 1
15577: PUSH
15578: LD_EXP 1
15582: EQUAL
15583: IFFALSE 15592
// YouLost ( JMM ) ;
15585: LD_STRING JMM
15587: PPUSH
15588: CALL_OW 104
// if unit = Joan then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 16
15601: EQUAL
15602: IFFALSE 15612
// JoanStatus := 0 ;
15604: LD_ADDR_EXP 17
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 255
15621: PUSH
15622: LD_INT 1
15624: EQUAL
15625: IFFALSE 15642
15627: PUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 247
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: AND
15642: IFFALSE 15659
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 248
15654: PUSH
15655: LD_INT 1
15657: EQUAL
15658: AND
15659: IFFALSE 15675
// unitLost = unitLost + 1 ;
15661: LD_ADDR_EXP 31
15665: PUSH
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 1
15673: PLUS
15674: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 255
15684: PUSH
15685: LD_INT 3
15687: EQUAL
15688: IFFALSE 15705
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 3
15703: EQUAL
15704: AND
15705: IFFALSE 15737
15707: PUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 266
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: LD_INT 32
15726: PUSH
15727: LD_INT 31
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: IN
15736: AND
15737: IFFALSE 15823
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15739: LD_ADDR_EXP 32
15743: PUSH
15744: LD_EXP 32
15748: PUSH
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 266
15758: ADD
15759: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15760: LD_ADDR_EXP 32
15764: PUSH
15765: LD_EXP 32
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 250
15779: ADD
15780: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15781: LD_ADDR_EXP 32
15785: PUSH
15786: LD_EXP 32
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 251
15800: ADD
15801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15802: LD_ADDR_EXP 32
15806: PUSH
15807: LD_EXP 32
15811: PUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 254
15821: ADD
15822: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15823: LD_EXP 47
15827: IFFALSE 15844
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 257
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: AND
15844: IFFALSE 15861
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 255
15856: PUSH
15857: LD_INT 3
15859: EQUAL
15860: AND
15861: IFFALSE 15872
15863: PUSH
15864: LD_INT 21
15866: PPUSH
15867: CALL_OW 302
15871: AND
15872: IFFALSE 15887
15874: PUSH
15875: LD_INT 21
15877: PPUSH
15878: CALL_OW 255
15882: PUSH
15883: LD_INT 3
15885: EQUAL
15886: AND
15887: IFFALSE 15969
// begin ruMechCounter := ruMechCounter - 1 ;
15889: LD_ADDR_EXP 47
15893: PUSH
15894: LD_EXP 47
15898: PUSH
15899: LD_INT 1
15901: MINUS
15902: ST_TO_ADDR
// uc_side := 3 ;
15903: LD_ADDR_OWVAR 20
15907: PUSH
15908: LD_INT 3
15910: ST_TO_ADDR
// uc_nation := 3 ;
15911: LD_ADDR_OWVAR 21
15915: PUSH
15916: LD_INT 3
15918: ST_TO_ADDR
// hc_gallery :=  ;
15919: LD_ADDR_OWVAR 33
15923: PUSH
15924: LD_STRING 
15926: ST_TO_ADDR
// hc_name :=  ;
15927: LD_ADDR_OWVAR 26
15931: PUSH
15932: LD_STRING 
15934: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15935: LD_INT 0
15937: PPUSH
15938: LD_EXP 35
15942: PPUSH
15943: LD_EXP 36
15947: PPUSH
15948: CALL_OW 12
15952: PPUSH
15953: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15957: CALL_OW 44
15961: PPUSH
15962: LD_INT 21
15964: PPUSH
15965: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15969: LD_VAR 0 1
15973: PPUSH
15974: CALL_OW 255
15978: PUSH
15979: LD_INT 3
15981: EQUAL
15982: IFFALSE 15999
15984: PUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 264
15994: PUSH
15995: LD_INT 52
15997: EQUAL
15998: AND
15999: IFFALSE 16010
16001: PUSH
16002: LD_INT 21
16004: PPUSH
16005: CALL_OW 302
16009: AND
16010: IFFALSE 16025
16012: PUSH
16013: LD_INT 21
16015: PPUSH
16016: CALL_OW 255
16020: PUSH
16021: LD_INT 3
16023: EQUAL
16024: AND
16025: IFFALSE 16046
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
16027: LD_INT 21
16029: PPUSH
16030: LD_INT 22
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_INT 52
16041: PPUSH
16042: CALL_OW 125
// end ;
16046: PPOPN 1
16048: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16049: LD_INT 0
16051: PPUSH
16052: PPUSH
16053: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL 38356 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 255
16077: PUSH
16078: LD_INT 3
16080: EQUAL
16081: IFFALSE 16110
16083: PUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 264
16093: PUSH
16094: LD_INT 51
16096: PUSH
16097: LD_INT 52
16099: PUSH
16100: LD_INT 53
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: IN
16108: NOT
16109: AND
16110: IFFALSE 16141
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
16112: LD_ADDR_EXP 48
16116: PUSH
16117: LD_EXP 48
16121: PPUSH
16122: LD_EXP 48
16126: PUSH
16127: LD_INT 1
16129: PLUS
16130: PPUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 1
16140: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 264
16150: PUSH
16151: LD_INT 53
16153: EQUAL
16154: IFFALSE 16309
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: LD_INT 60
16163: PPUSH
16164: LD_INT 85
16166: PPUSH
16167: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 43
16178: PPUSH
16179: LD_INT 69
16181: PPUSH
16182: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16186: LD_VAR 0 1
16190: PPUSH
16191: LD_INT 37
16193: PPUSH
16194: LD_INT 46
16196: PPUSH
16197: CALL_OW 171
// wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16208: LD_INT 35
16210: PPUSH
16211: CALL_OW 67
// until not HasTask ( vehicle ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 314
16224: NOT
16225: IFFALSE 16208
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 34
16234: PPUSH
16235: CALL 10701 0 2
// repeat wait ( 0 0$1 ) ;
16239: LD_INT 35
16241: PPUSH
16242: CALL_OW 67
// until not HasTask ( vehicle ) ;
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 314
16255: NOT
16256: IFFALSE 16239
// un := IsDrivenBy ( vehicle ) ;
16258: LD_ADDR_VAR 0 4
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 311
16272: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16273: LD_VAR 0 4
16277: PPUSH
16278: LD_INT 96
16280: PPUSH
16281: LD_INT 77
16283: PPUSH
16284: CALL_OW 171
// AddComExitVehicle ( un ) ;
16288: LD_VAR 0 4
16292: PPUSH
16293: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16297: LD_VAR 0 4
16301: PPUSH
16302: LD_INT 17
16304: PPUSH
16305: CALL_OW 180
// end ; end ;
16309: PPOPN 5
16311: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 255
16321: PUSH
16322: LD_INT 3
16324: EQUAL
16325: IFFALSE 16356
// begin tamedApemans = tamedApemans + 1 ;
16327: LD_ADDR_EXP 33
16331: PUSH
16332: LD_EXP 33
16336: PUSH
16337: LD_INT 1
16339: PLUS
16340: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16341: LD_VAR 0 1
16345: PPUSH
16346: LD_INT 106
16348: PPUSH
16349: LD_INT 85
16351: PPUSH
16352: CALL_OW 111
// end ; end ;
16356: PPOPN 2
16358: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16359: LD_VAR 0 2
16363: PPUSH
16364: CALL_OW 255
16368: PUSH
16369: LD_INT 3
16371: EQUAL
16372: IFFALSE 16389
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 255
16384: PUSH
16385: LD_INT 3
16387: EQUAL
16388: AND
16389: IFFALSE 16400
16391: PUSH
16392: LD_INT 21
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: IFFALSE 16414
// ComEnterUnit ( human , rufab ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 21
16409: PPUSH
16410: CALL_OW 120
// end ;
16414: PPOPN 4
16416: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16417: LD_VAR 0 1
16421: PUSH
16422: LD_INT 21
16424: EQUAL
16425: IFFALSE 16442
16427: PUSH
16428: LD_VAR 0 2
16432: PPUSH
16433: CALL_OW 255
16437: PUSH
16438: LD_INT 3
16440: EQUAL
16441: AND
16442: IFFALSE 16456
// SetLives ( human , 1000 ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_INT 1000
16451: PPUSH
16452: CALL_OW 234
// end ;
16456: PPOPN 2
16458: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL 38340 0 1
// end ; end_of_file
16468: PPOPN 1
16470: END
// every 0 0$30 trigger cratesStatus = 1 do
16471: LD_EXP 39
16475: PUSH
16476: LD_INT 1
16478: EQUAL
16479: IFFALSE 16532
16481: GO 16483
16483: DISABLE
// begin enable ;
16484: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16485: LD_INT 350
16487: PUSH
16488: LD_INT 875
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: PPUSH
16498: LD_INT 2
16500: PPUSH
16501: CALL_OW 12
16505: ARRAY
16506: PPUSH
16507: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16511: LD_INT 1
16513: PPUSH
16514: LD_INT 5
16516: PPUSH
16517: CALL_OW 12
16521: PPUSH
16522: LD_INT 7
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 55
// end ;
16532: END
// every 1 1$0 trigger cratesStatus = 2 do
16533: LD_EXP 39
16537: PUSH
16538: LD_INT 2
16540: EQUAL
16541: IFFALSE 16624
16543: GO 16545
16545: DISABLE
// begin enable ;
16546: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16547: LD_INT 3150
16549: PUSH
16550: LD_INT 4550
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 1
16559: PPUSH
16560: LD_INT 2
16562: PPUSH
16563: CALL_OW 12
16567: ARRAY
16568: PPUSH
16569: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16573: LD_INT 2
16575: PUSH
16576: LD_INT 5
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: LD_INT 6
16597: PUSH
16598: LD_INT 7
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 2
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 55
// end ;
16624: END
// every 0 0$30 + 0 0$10 do
16625: GO 16627
16627: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16628: LD_INT 4
16630: PUSH
16631: LD_INT 5
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_INT 2
16643: PPUSH
16644: CALL_OW 12
16648: ARRAY
16649: PPUSH
16650: LD_INT 7
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 55
// Wait ( 0 0$15 ) ;
16660: LD_INT 525
16662: PPUSH
16663: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16667: LD_INT 4
16669: PUSH
16670: LD_INT 5
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: PPUSH
16680: LD_INT 2
16682: PPUSH
16683: CALL_OW 12
16687: ARRAY
16688: PPUSH
16689: LD_INT 7
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 55
// Wait ( 0 0$20 ) ;
16699: LD_INT 700
16701: PPUSH
16702: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16706: LD_INT 4
16708: PUSH
16709: LD_INT 5
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: PPUSH
16719: LD_INT 2
16721: PPUSH
16722: CALL_OW 12
16726: ARRAY
16727: PPUSH
16728: LD_INT 7
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 55
// end ; end_of_file
16738: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16739: LD_EXP 25
16743: PUSH
16744: LD_INT 1
16746: EQUAL
16747: IFFALSE 17044
16749: GO 16751
16751: DISABLE
16752: LD_INT 0
16754: PPUSH
16755: PPUSH
16756: PPUSH
// begin enable ;
16757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_INT 22
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 21
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 30
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 30
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// for i in tmp do
16821: LD_ADDR_VAR 0 1
16825: PUSH
16826: LD_VAR 0 2
16830: PUSH
16831: FOR_IN
16832: IFFALSE 16865
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16834: LD_ADDR_VAR 0 3
16838: PUSH
16839: LD_VAR 0 3
16843: PUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 274
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 275
16861: PLUS
16862: ST_TO_ADDR
16863: GO 16831
16865: POP
16866: POP
// strings = [ ] ;
16867: LD_ADDR_EXP 28
16871: PUSH
16872: EMPTY
16873: ST_TO_ADDR
// if tmp = 0 then
16874: LD_VAR 0 2
16878: PUSH
16879: LD_INT 0
16881: EQUAL
16882: IFFALSE 16907
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16884: LD_ADDR_EXP 28
16888: PUSH
16889: LD_EXP 28
16893: PUSH
16894: LD_STRING #Am06-1
16896: PUSH
16897: LD_EXP 26
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: ADD
16906: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16907: LD_VAR 0 2
16911: IFFALSE 16925
16913: PUSH
16914: LD_EXP 26
16918: PUSH
16919: LD_VAR 0 3
16923: GREATER
16924: AND
16925: IFFALSE 16956
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16927: LD_ADDR_EXP 28
16931: PUSH
16932: LD_EXP 28
16936: PUSH
16937: LD_STRING #Am06-1
16939: PUSH
16940: LD_EXP 26
16944: PUSH
16945: LD_VAR 0 3
16949: MINUS
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: ADD
16955: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16956: LD_VAR 0 2
16960: IFFALSE 16974
16962: PUSH
16963: LD_EXP 26
16967: PUSH
16968: LD_VAR 0 3
16972: LESSEQUAL
16973: AND
16974: IFFALSE 16997
// strings = strings ^ [ #Am06-1 , 0 ] ;
16976: LD_ADDR_EXP 28
16980: PUSH
16981: LD_EXP 28
16985: PUSH
16986: LD_STRING #Am06-1
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: ADD
16996: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16997: LD_ADDR_EXP 27
17001: PUSH
17002: LD_EXP 27
17006: PUSH
17007: LD_INT 35
17009: MINUS
17010: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17011: LD_ADDR_EXP 28
17015: PUSH
17016: LD_EXP 28
17020: PUSH
17021: LD_STRING #Am06-2
17023: PUSH
17024: LD_EXP 27
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: ADD
17033: ST_TO_ADDR
// display_strings = strings ;
17034: LD_ADDR_OWVAR 47
17038: PUSH
17039: LD_EXP 28
17043: ST_TO_ADDR
// end ; end_of_file
17044: PPOPN 3
17046: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
17047: LD_INT 0
17049: PPUSH
17050: PPUSH
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 30
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: CALL_OW 69
17108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17109: LD_INT 35
17111: PPUSH
17112: CALL_OW 67
// until depot ;
17116: LD_VAR 0 3
17120: IFFALSE 17057
// forceJMM := false ;
17122: LD_ADDR_VAR 0 8
17126: PUSH
17127: LD_INT 0
17129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17130: LD_INT 35
17132: PPUSH
17133: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
17137: LD_ADDR_VAR 0 4
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 91
17154: PUSH
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PUSH
17164: LD_INT 15
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 21
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 25
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 25
17207: PUSH
17208: LD_INT 3
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 25
17217: PUSH
17218: LD_INT 4
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 3
17234: PUSH
17235: LD_INT 54
17237: PUSH
17238: EMPTY
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 3
17247: PUSH
17248: LD_INT 55
17250: PUSH
17251: EMPTY
17252: LIST
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: PUSH
17271: LD_EXP 2
17275: PUSH
17276: LD_EXP 3
17280: PUSH
17281: LD_EXP 4
17285: PUSH
17286: LD_EXP 5
17290: PUSH
17291: LD_EXP 7
17295: PUSH
17296: LD_EXP 8
17300: PUSH
17301: LD_EXP 9
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: DIFF
17315: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17316: LD_EXP 27
17320: PUSH
17321: LD_INT 21000
17323: LESS
17324: IFFALSE 17336
// begin forceJMM := true ;
17326: LD_ADDR_VAR 0 8
17330: PUSH
17331: LD_INT 1
17333: ST_TO_ADDR
// break ;
17334: GO 17354
// end ; until tmp and not InBattle ( 1 ) ;
17336: LD_VAR 0 4
17340: IFFALSE 17352
17342: PUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 463
17350: NOT
17351: AND
17352: IFFALSE 17130
// if not forceJMM then
17354: LD_VAR 0 8
17358: NOT
17359: IFFALSE 17387
// tmp := tmp [ rand ( 1 , tmp ) ] else
17361: LD_ADDR_VAR 0 4
17365: PUSH
17366: LD_VAR 0 4
17370: PUSH
17371: LD_INT 1
17373: PPUSH
17374: LD_VAR 0 4
17378: PPUSH
17379: CALL_OW 12
17383: ARRAY
17384: ST_TO_ADDR
17385: GO 17397
// tmp := JMM ;
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_EXP 1
17396: ST_TO_ADDR
// blockSpawn := 1 ;
17397: LD_ADDR_EXP 30
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// uc_side := 2 ;
17405: LD_ADDR_OWVAR 20
17409: PUSH
17410: LD_INT 2
17412: ST_TO_ADDR
// uc_nation := 2 ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 2
17420: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17421: LD_ADDR_EXP 20
17425: PUSH
17426: LD_STRING Kurt
17428: PPUSH
17429: LD_INT 0
17431: PPUSH
17432: LD_STRING 
17434: PPUSH
17435: CALL 44772 0 3
17439: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17440: LD_EXP 20
17444: PPUSH
17445: LD_VAR 0 4
17449: PPUSH
17450: CALL_OW 250
17454: PPUSH
17455: LD_VAR 0 4
17459: PPUSH
17460: CALL_OW 251
17464: PPUSH
17465: LD_INT 5
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 50
// InGameOn ;
17475: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17479: LD_EXP 20
17483: PPUSH
17484: CALL_OW 87
// wait ( 0 0$2 ) ;
17488: LD_INT 70
17490: PPUSH
17491: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17495: LD_EXP 20
17499: PPUSH
17500: LD_VAR 0 4
17504: PPUSH
17505: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17509: LD_VAR 0 4
17513: PPUSH
17514: LD_EXP 20
17518: PPUSH
17519: CALL_OW 112
// wait ( 0 0$1 ) ;
17523: LD_INT 35
17525: PPUSH
17526: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17530: LD_VAR 0 4
17534: PPUSH
17535: LD_EXP 20
17539: PPUSH
17540: CALL_OW 119
// DialogueOn ;
17544: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17548: LD_EXP 20
17552: PPUSH
17553: LD_STRING D2-Kurt-1
17555: PPUSH
17556: CALL_OW 88
// if tmp = JMM then
17560: LD_VAR 0 4
17564: PUSH
17565: LD_EXP 1
17569: EQUAL
17570: IFFALSE 17662
// begin Say ( JMM , D2-JMM-1 ) ;
17572: LD_EXP 1
17576: PPUSH
17577: LD_STRING D2-JMM-1
17579: PPUSH
17580: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17584: LD_EXP 20
17588: PPUSH
17589: LD_STRING D2-Kurt-2
17591: PPUSH
17592: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17596: LD_EXP 1
17600: PPUSH
17601: LD_STRING D2-JMM-2
17603: PPUSH
17604: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17608: LD_EXP 20
17612: PPUSH
17613: LD_STRING D2-Kurt-3
17615: PPUSH
17616: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17620: LD_EXP 1
17624: PPUSH
17625: LD_STRING D2-JMM-3
17627: PPUSH
17628: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17632: LD_EXP 20
17636: PPUSH
17637: LD_STRING D2-Kurt-4
17639: PPUSH
17640: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17644: LD_EXP 1
17648: PPUSH
17649: LD_STRING D2-JMM-4
17651: PPUSH
17652: CALL_OW 88
// DialogueOff ;
17656: CALL_OW 7
// end else
17660: GO 17890
// begin if GetSex ( tmp ) = 1 then
17662: LD_VAR 0 4
17666: PPUSH
17667: CALL_OW 258
17671: PUSH
17672: LD_INT 1
17674: EQUAL
17675: IFFALSE 17691
// Say ( tmp , D2-Sol1-1 ) else
17677: LD_VAR 0 4
17681: PPUSH
17682: LD_STRING D2-Sol1-1
17684: PPUSH
17685: CALL_OW 88
17689: GO 17703
// Say ( tmp , D2-FSol1-1 ) ;
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_STRING D2-FSol1-1
17698: PPUSH
17699: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17703: LD_EXP 20
17707: PPUSH
17708: LD_STRING D2-Kurt-2
17710: PPUSH
17711: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17715: LD_VAR 0 4
17719: PPUSH
17720: CALL_OW 258
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17744
// Say ( tmp , D2-Sol1-2 ) else
17730: LD_VAR 0 4
17734: PPUSH
17735: LD_STRING D2-Sol1-2
17737: PPUSH
17738: CALL_OW 88
17742: GO 17756
// Say ( tmp , D2-FSol1-2 ) ;
17744: LD_VAR 0 4
17748: PPUSH
17749: LD_STRING D2-FSol1-2
17751: PPUSH
17752: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17756: LD_EXP 20
17760: PPUSH
17761: LD_STRING D2-Kurt-3
17763: PPUSH
17764: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17768: LD_VAR 0 4
17772: PPUSH
17773: CALL_OW 258
17777: PUSH
17778: LD_INT 1
17780: EQUAL
17781: IFFALSE 17797
// Say ( tmp , D2-Sol1-3 ) else
17783: LD_VAR 0 4
17787: PPUSH
17788: LD_STRING D2-Sol1-3
17790: PPUSH
17791: CALL_OW 88
17795: GO 17809
// Say ( tmp , D2-FSol1-3 ) ;
17797: LD_VAR 0 4
17801: PPUSH
17802: LD_STRING D2-FSol1-3
17804: PPUSH
17805: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17809: LD_EXP 20
17813: PPUSH
17814: LD_STRING D2-Kurt-4
17816: PPUSH
17817: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17821: LD_VAR 0 4
17825: PPUSH
17826: CALL_OW 258
17830: PUSH
17831: LD_INT 1
17833: EQUAL
17834: IFFALSE 17862
// begin Say ( tmp , D2-Sol1-4 ) ;
17836: LD_VAR 0 4
17840: PPUSH
17841: LD_STRING D2-Sol1-4
17843: PPUSH
17844: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17848: LD_VAR 0 4
17852: PPUSH
17853: LD_STRING D2-Sol1-5
17855: PPUSH
17856: CALL_OW 88
// end else
17860: GO 17886
// begin Say ( tmp , D2-FSol1-4 ) ;
17862: LD_VAR 0 4
17866: PPUSH
17867: LD_STRING D2-FSol1-4
17869: PPUSH
17870: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17874: LD_VAR 0 4
17878: PPUSH
17879: LD_STRING D2-FSol1-5
17881: PPUSH
17882: CALL_OW 88
// end ; DialogueOff ;
17886: CALL_OW 7
// end ; dec := ShowQuery1 ;
17890: LD_ADDR_VAR 0 6
17894: PUSH
17895: CALL 8049 0 0
17899: ST_TO_ADDR
// if dec = 1 then
17900: LD_VAR 0 6
17904: PUSH
17905: LD_INT 1
17907: EQUAL
17908: IFFALSE 17970
// begin DialogueOn ;
17910: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17914: LD_EXP 20
17918: PPUSH
17919: LD_STRING D2a-Kurt-1
17921: PPUSH
17922: CALL_OW 88
// DialogueOff ;
17926: CALL_OW 7
// InGameOff ;
17930: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 2
17939: PPUSH
17940: LD_INT 2
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17950: LD_EXP 20
17954: PPUSH
17955: LD_INT 8
17957: PPUSH
17958: CALL_OW 113
// readyToEscape := 1 ;
17962: LD_ADDR_EXP 22
17966: PUSH
17967: LD_INT 1
17969: ST_TO_ADDR
// end ; if dec = 2 then
17970: LD_VAR 0 6
17974: PUSH
17975: LD_INT 2
17977: EQUAL
17978: IFFALSE 18446
// begin DialogueOn ;
17980: CALL_OW 6
// if tmp = JMM then
17984: LD_VAR 0 4
17988: PUSH
17989: LD_EXP 1
17993: EQUAL
17994: IFFALSE 18050
// begin Say ( JMM , D2b-JMM-1 ) ;
17996: LD_EXP 1
18000: PPUSH
18001: LD_STRING D2b-JMM-1
18003: PPUSH
18004: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18008: LD_EXP 20
18012: PPUSH
18013: LD_STRING D2b-Kurt-1
18015: PPUSH
18016: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18020: LD_EXP 1
18024: PPUSH
18025: LD_STRING D2b-JMM-2
18027: PPUSH
18028: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18032: LD_EXP 20
18036: PPUSH
18037: LD_STRING D2b-Kurt-2
18039: PPUSH
18040: CALL_OW 88
// DialogueOff ;
18044: CALL_OW 7
// end else
18048: GO 18201
// begin if GetSex ( tmp ) = 1 then
18050: LD_VAR 0 4
18054: PPUSH
18055: CALL_OW 258
18059: PUSH
18060: LD_INT 1
18062: EQUAL
18063: IFFALSE 18079
// Say ( tmp , D2b-Sol1-1 ) else
18065: LD_VAR 0 4
18069: PPUSH
18070: LD_STRING D2b-Sol1-1
18072: PPUSH
18073: CALL_OW 88
18077: GO 18091
// Say ( tmp , D2b-FSol1-1 ) ;
18079: LD_VAR 0 4
18083: PPUSH
18084: LD_STRING D2b-FSol1-1
18086: PPUSH
18087: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18091: LD_EXP 20
18095: PPUSH
18096: LD_STRING D2b-Kurt-1
18098: PPUSH
18099: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18103: LD_VAR 0 4
18107: PPUSH
18108: CALL_OW 258
18112: PUSH
18113: LD_INT 1
18115: EQUAL
18116: IFFALSE 18132
// Say ( tmp , D2b-Sol1-2 ) else
18118: LD_VAR 0 4
18122: PPUSH
18123: LD_STRING D2b-Sol1-2
18125: PPUSH
18126: CALL_OW 88
18130: GO 18144
// Say ( tmp , D2b-FSol1-2 ) ;
18132: LD_VAR 0 4
18136: PPUSH
18137: LD_STRING D2b-FSol1-2
18139: PPUSH
18140: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18144: LD_EXP 20
18148: PPUSH
18149: LD_STRING D2b-Kurt-2
18151: PPUSH
18152: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18156: LD_VAR 0 4
18160: PPUSH
18161: CALL_OW 258
18165: PUSH
18166: LD_INT 1
18168: EQUAL
18169: IFFALSE 18185
// Say ( tmp , D2c-Sol1-2 ) else
18171: LD_VAR 0 4
18175: PPUSH
18176: LD_STRING D2c-Sol1-2
18178: PPUSH
18179: CALL_OW 88
18183: GO 18197
// Say ( tmp , D2c-FSol1-2 ) ;
18185: LD_VAR 0 4
18189: PPUSH
18190: LD_STRING D2c-FSol1-2
18192: PPUSH
18193: CALL_OW 88
// DialogueOff ;
18197: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18201: LD_ADDR_VAR 0 7
18205: PUSH
18206: CALL 8070 0 0
18210: ST_TO_ADDR
// if dec2 = 1 then
18211: LD_VAR 0 7
18215: PUSH
18216: LD_INT 1
18218: EQUAL
18219: IFFALSE 18281
// begin DialogueOn ;
18221: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18225: LD_EXP 20
18229: PPUSH
18230: LD_STRING D2a-Kurt-1
18232: PPUSH
18233: CALL_OW 88
// DialogueOff ;
18237: CALL_OW 7
// InGameOff ;
18241: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18245: LD_INT 1
18247: PPUSH
18248: LD_INT 2
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18261: LD_EXP 20
18265: PPUSH
18266: LD_INT 8
18268: PPUSH
18269: CALL_OW 113
// readyToEscape := 1 ;
18273: LD_ADDR_EXP 22
18277: PUSH
18278: LD_INT 1
18280: ST_TO_ADDR
// end ; if dec2 = 2 then
18281: LD_VAR 0 7
18285: PUSH
18286: LD_INT 2
18288: EQUAL
18289: IFFALSE 18446
// begin if tmp = JMM then
18291: LD_VAR 0 4
18295: PUSH
18296: LD_EXP 1
18300: EQUAL
18301: IFFALSE 18361
// begin DialogueOn ;
18303: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18307: LD_EXP 1
18311: PPUSH
18312: LD_STRING D2c-JMM-1
18314: PPUSH
18315: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18319: LD_EXP 20
18323: PPUSH
18324: LD_STRING D2c-Kurt-1
18326: PPUSH
18327: CALL_OW 88
// DialogueOff ;
18331: CALL_OW 7
// InGameOff ;
18335: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18339: LD_EXP 20
18343: PPUSH
18344: LD_INT 8
18346: PPUSH
18347: CALL_OW 113
// readyToEscape := 1 ;
18351: LD_ADDR_EXP 22
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// end else
18359: GO 18446
// begin DialogueOn ;
18361: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18365: LD_VAR 0 4
18369: PPUSH
18370: CALL_OW 258
18374: PUSH
18375: LD_INT 1
18377: EQUAL
18378: IFFALSE 18394
// Say ( tmp , D2c-Sol1-1 ) else
18380: LD_VAR 0 4
18384: PPUSH
18385: LD_STRING D2c-Sol1-1
18387: PPUSH
18388: CALL_OW 88
18392: GO 18406
// Say ( tmp , D2c-FSol1-1 ) ;
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_STRING D2c-FSol1-1
18401: PPUSH
18402: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18406: LD_EXP 20
18410: PPUSH
18411: LD_STRING D2c-Kurt-1
18413: PPUSH
18414: CALL_OW 88
// DialogueOff ;
18418: CALL_OW 7
// InGameOff ;
18422: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18426: LD_EXP 20
18430: PPUSH
18431: LD_INT 8
18433: PPUSH
18434: CALL_OW 113
// readyToEscape := 1 ;
18438: LD_ADDR_EXP 22
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18446: LD_VAR 0 6
18450: PUSH
18451: LD_INT 3
18453: EQUAL
18454: IFFALSE 18615
// begin DialogueOn ;
18456: CALL_OW 6
// if tmp = JMM then
18460: LD_VAR 0 4
18464: PUSH
18465: LD_EXP 1
18469: EQUAL
18470: IFFALSE 18530
// begin DialogueOn ;
18472: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18476: LD_EXP 1
18480: PPUSH
18481: LD_STRING D2c-JMM-1
18483: PPUSH
18484: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18488: LD_EXP 20
18492: PPUSH
18493: LD_STRING D2c-Kurt-1
18495: PPUSH
18496: CALL_OW 88
// DialogueOff ;
18500: CALL_OW 7
// InGameOff ;
18504: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18508: LD_EXP 20
18512: PPUSH
18513: LD_INT 8
18515: PPUSH
18516: CALL_OW 113
// readyToEscape := 1 ;
18520: LD_ADDR_EXP 22
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// end else
18528: GO 18615
// begin DialogueOn ;
18530: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 258
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: IFFALSE 18563
// Say ( tmp , D2c-Sol1-1 ) else
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_STRING D2c-Sol1-1
18556: PPUSH
18557: CALL_OW 88
18561: GO 18575
// Say ( tmp , D2c-FSol1-1 ) ;
18563: LD_VAR 0 4
18567: PPUSH
18568: LD_STRING D2c-FSol1-1
18570: PPUSH
18571: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18575: LD_EXP 20
18579: PPUSH
18580: LD_STRING D2c-Kurt-1
18582: PPUSH
18583: CALL_OW 88
// DialogueOff ;
18587: CALL_OW 7
// InGameOff ;
18591: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18595: LD_EXP 20
18599: PPUSH
18600: LD_INT 8
18602: PPUSH
18603: CALL_OW 113
// readyToEscape := 1 ;
18607: LD_ADDR_EXP 22
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18615: LD_ADDR_EXP 30
18619: PUSH
18620: LD_INT 0
18622: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18623: LD_INT 35
18625: PPUSH
18626: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18630: LD_EXP 20
18634: PPUSH
18635: LD_INT 8
18637: PPUSH
18638: CALL_OW 308
18642: IFFALSE 18650
18644: PUSH
18645: LD_EXP 22
18649: AND
18650: IFTRUE 18663
18652: PUSH
18653: LD_EXP 20
18657: PPUSH
18658: CALL_OW 301
18662: OR
18663: IFFALSE 18623
// if IsDead ( Kurt ) then
18665: LD_EXP 20
18669: PPUSH
18670: CALL_OW 301
18674: IFFALSE 18678
// exit ;
18676: GO 18733
// RemoveUnit ( Kurt ) ;
18678: LD_EXP 20
18682: PPUSH
18683: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18687: LD_EXP 20
18691: PPUSH
18692: LD_STRING Kurt
18694: PPUSH
18695: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18699: LD_INT 1
18701: PPUSH
18702: LD_INT 2
18704: PPUSH
18705: CALL_OW 81
18709: PUSH
18710: LD_INT 0
18712: EQUAL
18713: IFFALSE 18725
// kurtStatus = 1 else
18715: LD_ADDR_EXP 21
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
18723: GO 18733
// kurtStatus = 2 ;
18725: LD_ADDR_EXP 21
18729: PUSH
18730: LD_INT 2
18732: ST_TO_ADDR
// end ; end_of_file
18733: LD_VAR 0 1
18737: RET
// every 0 0$2 do
18738: GO 18740
18740: DISABLE
// begin enable ;
18741: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18742: LD_INT 3
18744: PPUSH
18745: LD_INT 2
18747: PPUSH
18748: LD_INT 10
18750: PPUSH
18751: LD_EXP 32
18755: PPUSH
18756: CALL 8503 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18760: LD_INT 3
18762: PPUSH
18763: LD_INT 12
18765: PPUSH
18766: LD_EXP 32
18770: PPUSH
18771: CALL 10138 0 3
// if disableHealAI = 0 then
18775: LD_EXP 34
18779: PUSH
18780: LD_INT 0
18782: EQUAL
18783: IFFALSE 18804
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18785: LD_INT 3
18787: PPUSH
18788: LD_INT 9
18790: PPUSH
18791: LD_INT 10
18793: PPUSH
18794: LD_INT 32
18796: PUSH
18797: EMPTY
18798: LIST
18799: PPUSH
18800: CALL 8884 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18804: LD_INT 3
18806: PPUSH
18807: LD_INT 51
18809: PPUSH
18810: LD_INT 6
18812: PPUSH
18813: CALL 9587 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18817: LD_INT 2
18819: PPUSH
18820: CALL_OW 303
18824: IFTRUE 18839
18826: PUSH
18827: LD_INT 2
18829: PPUSH
18830: CALL_OW 255
18834: PUSH
18835: LD_INT 1
18837: EQUAL
18838: OR
18839: IFFALSE 18853
// DefendDepot ( 3 , rudepo ) else
18841: LD_INT 3
18843: PPUSH
18844: LD_INT 2
18846: PPUSH
18847: CALL 9414 0 2
18851: GO 18863
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18853: LD_INT 3
18855: PPUSH
18856: LD_INT 10
18858: PPUSH
18859: CALL 9709 0 2
// end ;
18863: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18864: LD_INT 22
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 55
18886: PUSH
18887: EMPTY
18888: LIST
18889: PUSH
18890: LD_INT 3
18892: PUSH
18893: LD_INT 34
18895: PUSH
18896: LD_INT 51
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18936
18923: PUSH
18924: LD_INT 21
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: AND
18936: IFFALSE 18947
18938: PUSH
18939: LD_INT 21
18941: PPUSH
18942: CALL_OW 302
18946: AND
18947: IFFALSE 18962
18949: PUSH
18950: LD_INT 2
18952: PPUSH
18953: CALL_OW 255
18957: PUSH
18958: LD_INT 3
18960: EQUAL
18961: AND
18962: IFFALSE 18973
18964: PUSH
18965: LD_INT 2
18967: PPUSH
18968: CALL_OW 302
18972: AND
18973: IFFALSE 18984
18975: PUSH
18976: LD_INT 21
18978: PPUSH
18979: CALL_OW 313
18983: AND
18984: IFFALSE 19017
18986: PUSH
18987: LD_EXP 48
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: LD_INT 5
18997: PUSH
18998: LD_INT 6
19000: PUSH
19001: LD_INT 6
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: PUSH
19010: LD_OWVAR 67
19014: ARRAY
19015: LESS
19016: AND
19017: IFFALSE 19238
19019: GO 19021
19021: DISABLE
// begin enable ;
19022: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
19023: LD_INT 2
19025: PPUSH
19026: CALL_OW 274
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 2000
19036: PPUSH
19037: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
19041: LD_INT 3
19043: PPUSH
19044: LD_INT 21
19046: PPUSH
19047: LD_INT 4
19049: PUSH
19050: LD_INT 5
19052: PUSH
19053: LD_INT 6
19055: PUSH
19056: LD_INT 6
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: PUSH
19065: LD_OWVAR 67
19069: ARRAY
19070: PUSH
19071: LD_EXP 48
19075: MINUS
19076: PPUSH
19077: LD_INT 43
19079: PUSH
19080: LD_INT 43
19082: PUSH
19083: LD_INT 44
19085: PUSH
19086: LD_INT 44
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 43
19097: PUSH
19098: LD_INT 43
19100: PUSH
19101: LD_INT 43
19103: PUSH
19104: LD_INT 44
19106: PUSH
19107: LD_INT 44
19109: PUSH
19110: LD_INT 46
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 43
19123: PUSH
19124: LD_INT 43
19126: PUSH
19127: LD_INT 43
19129: PUSH
19130: LD_INT 44
19132: PUSH
19133: LD_INT 44
19135: PUSH
19136: LD_INT 46
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 43
19149: PUSH
19150: LD_INT 43
19152: PUSH
19153: LD_INT 44
19155: PUSH
19156: LD_INT 46
19158: PUSH
19159: LD_INT 46
19161: PUSH
19162: LD_INT 46
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: LD_OWVAR 67
19183: ARRAY
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_INT 22
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_INT 24
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PPUSH
19207: LD_INT 2
19209: PPUSH
19210: CALL_OW 12
19214: ARRAY
19215: PUSH
19216: LD_INT 24
19218: PUSH
19219: LD_INT 24
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: PUSH
19228: LD_OWVAR 67
19232: ARRAY
19233: PPUSH
19234: CALL 8349 0 7
// end ;
19238: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19239: LD_INT 17
19241: PPUSH
19242: CALL_OW 255
19246: PUSH
19247: LD_INT 3
19249: EQUAL
19250: IFFALSE 19261
19252: PUSH
19253: LD_INT 17
19255: PPUSH
19256: CALL_OW 302
19260: AND
19261: IFFALSE 19276
19263: PUSH
19264: LD_INT 2
19266: PPUSH
19267: CALL_OW 255
19271: PUSH
19272: LD_INT 3
19274: EQUAL
19275: AND
19276: IFFALSE 19287
19278: PUSH
19279: LD_INT 2
19281: PPUSH
19282: CALL_OW 302
19286: AND
19287: IFFALSE 19320
19289: PUSH
19290: LD_EXP 48
19294: PUSH
19295: LD_INT 4
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: LD_INT 6
19303: PUSH
19304: LD_INT 7
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: PUSH
19313: LD_OWVAR 67
19317: ARRAY
19318: LESS
19319: AND
19320: IFFALSE 19368
19322: GO 19324
19324: DISABLE
// begin enable ;
19325: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19326: LD_INT 17
19328: PPUSH
19329: LD_INT 22
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_INT 1
19337: PPUSH
19338: LD_INT 42
19340: PUSH
19341: LD_INT 43
19343: PUSH
19344: LD_INT 44
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 12
19362: ARRAY
19363: PPUSH
19364: CALL_OW 185
// end ;
19368: END
// every 2 2$0 do var i , j ;
19369: GO 19371
19371: DISABLE
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19376: LD_INT 14700
19378: PUSH
19379: LD_INT 33600
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 2
19391: PPUSH
19392: CALL_OW 12
19396: ARRAY
19397: PPUSH
19398: CALL_OW 67
// disableHealAI = 1 ;
19402: LD_ADDR_EXP 34
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19410: LD_ADDR_VAR 0 1
19414: PUSH
19415: LD_INT 22
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 25
19427: PUSH
19428: LD_INT 4
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 69
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19458
// ComExitBuilding ( i ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 122
19456: GO 19444
19458: POP
19459: POP
// wait ( 0 0$1 ) ;
19460: LD_INT 35
19462: PPUSH
19463: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19467: LD_INT 35
19469: PPUSH
19470: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19474: LD_ADDR_VAR 0 1
19478: PUSH
19479: LD_INT 22
19481: PUSH
19482: LD_INT 3
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 25
19491: PUSH
19492: LD_INT 4
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PPUSH
19503: CALL_OW 69
19507: PUSH
19508: FOR_IN
19509: IFFALSE 19586
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_INT 17
19518: PPUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 25
19531: PUSH
19532: LD_INT 12
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 70
19547: PUSH
19548: FOR_IN
19549: IFFALSE 19582
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_VAR 0 2
19560: PPUSH
19561: CALL_OW 250
19565: PPUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: CALL_OW 251
19575: PPUSH
19576: CALL_OW 191
19580: GO 19548
19582: POP
19583: POP
19584: GO 19508
19586: POP
19587: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19588: LD_INT 22
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 25
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PPUSH
19612: CALL_OW 69
19616: PUSH
19617: LD_INT 0
19619: EQUAL
19620: IFTRUE 19653
19622: PUSH
19623: LD_EXP 33
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: LD_INT 7
19633: PUSH
19634: LD_INT 8
19636: PUSH
19637: LD_INT 8
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: LD_OWVAR 67
19650: ARRAY
19651: GREATEREQUAL
19652: OR
19653: IFTRUE 19692
19655: PUSH
19656: LD_INT 17
19658: PPUSH
19659: LD_INT 22
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 25
19671: PUSH
19672: LD_INT 12
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PPUSH
19683: CALL_OW 70
19687: PUSH
19688: LD_INT 0
19690: EQUAL
19691: OR
19692: IFFALSE 19467
// disableHealAI = 0 ;
19694: LD_ADDR_EXP 34
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: LD_INT 22
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 25
19719: PUSH
19720: LD_INT 12
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19753
// SetClass ( i , 16 ) ;
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_INT 16
19746: PPUSH
19747: CALL_OW 336
19751: GO 19736
19753: POP
19754: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 25
19772: PUSH
19773: LD_INT 4
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: PUSH
19789: FOR_IN
19790: IFFALSE 19806
// ComEnterUnit ( i , rulab ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: LD_INT 32
19799: PPUSH
19800: CALL_OW 120
19804: GO 19789
19806: POP
19807: POP
// end ; end_of_file
19808: PPOPN 2
19810: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19811: LD_EXP 27
19815: PUSH
19816: LD_INT 0
19818: LESSEQUAL
19819: IFFALSE 19973
19821: GO 19823
19823: DISABLE
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
19828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 30
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 30
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: ST_TO_ADDR
// for i in tmp do
19892: LD_ADDR_VAR 0 1
19896: PUSH
19897: LD_VAR 0 2
19901: PUSH
19902: FOR_IN
19903: IFFALSE 19936
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_VAR 0 3
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 274
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 275
19932: PLUS
19933: ST_TO_ADDR
19934: GO 19902
19936: POP
19937: POP
// if yourCrates >= needCrates then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_EXP 26
19947: GREATEREQUAL
19948: IFFALSE 19966
// FinishMission ( yourCrates , needCrates ) else
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_EXP 26
19959: PPUSH
19960: CALL 19976 0 2
19964: GO 19973
// YouLost ( matmin ) ;
19966: LD_STRING matmin
19968: PPUSH
19969: CALL_OW 104
// end ;
19973: PPOPN 3
19975: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19976: LD_INT 0
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19982: LD_EXP 46
19986: PUSH
19987: LD_INT 8
19989: GREATEREQUAL
19990: IFTRUE 20015
19992: PUSH
19993: LD_EXP 46
19997: PUSH
19998: LD_EXP 45
20002: PPUSH
20003: LD_INT 50
20005: PUSH
20006: EMPTY
20007: LIST
20008: PPUSH
20009: CALL_OW 72
20013: GREATEREQUAL
20014: OR
20015: IFTRUE 20069
20017: PUSH
20018: LD_INT 22
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 21
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 23
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 50
20050: PUSH
20051: EMPTY
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PPUSH
20060: CALL_OW 69
20064: PUSH
20065: LD_INT 5
20067: LESS
20068: OR
20069: IFFALSE 20080
// begin YouLost ( Troops ) ;
20071: LD_STRING Troops
20073: PPUSH
20074: CALL_OW 104
// exit ;
20078: GO 21053
// end ; if killCounter = 0 then
20080: LD_EXP 46
20084: PUSH
20085: LD_INT 0
20087: EQUAL
20088: IFFALSE 20097
// SetAchievement ( ACH_SURV ) ;
20090: LD_STRING ACH_SURV
20092: PPUSH
20093: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
20097: LD_INT 22
20099: PUSH
20100: LD_INT 3
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 21
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 69
20125: PUSH
20126: LD_INT 0
20128: EQUAL
20129: IFFALSE 20145
// begin wait ( 3 ) ;
20131: LD_INT 3
20133: PPUSH
20134: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
20138: LD_STRING ACH_BASEDESTROYER
20140: PPUSH
20141: CALL_OW 543
// end ; m1 := false ;
20145: LD_ADDR_VAR 0 4
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// m2 := false ;
20153: LD_ADDR_VAR 0 5
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// m3 := false ;
20161: LD_ADDR_VAR 0 6
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
20169: LD_VAR 0 1
20173: PUSH
20174: LD_INT 100
20176: PUSH
20177: LD_INT 140
20179: PUSH
20180: LD_INT 180
20182: PUSH
20183: LD_INT 220
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: LD_OWVAR 67
20196: ARRAY
20197: PLUS
20198: PUSH
20199: LD_VAR 0 2
20203: GREATER
20204: IFFALSE 20236
// begin AddMedal ( cans , 1 ) ;
20206: LD_STRING cans
20208: PPUSH
20209: LD_INT 1
20211: PPUSH
20212: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20216: LD_INT 1
20218: PPUSH
20219: LD_STRING 06_crates_1
20221: PPUSH
20222: CALL_OW 39
// m1 := true ;
20226: LD_ADDR_VAR 0 4
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// end else
20234: GO 20257
// begin AddMedal ( cans , - 1 ) ;
20236: LD_STRING cans
20238: PPUSH
20239: LD_INT 1
20241: NEG
20242: PPUSH
20243: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20247: LD_INT 0
20249: PPUSH
20250: LD_STRING 06_crates_1
20252: PPUSH
20253: CALL_OW 39
// end ; if unitLost < 3 then
20257: LD_EXP 31
20261: PUSH
20262: LD_INT 3
20264: LESS
20265: IFFALSE 20287
// begin AddMedal ( people , 1 ) ;
20267: LD_STRING people
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 101
// m2 := true ;
20277: LD_ADDR_VAR 0 5
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// end else
20285: GO 20298
// AddMedal ( people , - 1 ) ;
20287: LD_STRING people
20289: PPUSH
20290: LD_INT 1
20292: NEG
20293: PPUSH
20294: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20298: LD_EXP 29
20302: PPUSH
20303: LD_STRING 06_remoteVehs_1
20305: PPUSH
20306: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20310: LD_EXP 29
20314: PUSH
20315: LD_INT 1
20317: EQUAL
20318: IFFALSE 20340
// begin AddMedal ( remote , 1 ) ;
20320: LD_STRING remote
20322: PPUSH
20323: LD_INT 1
20325: PPUSH
20326: CALL_OW 101
// m3 := true ;
20330: LD_ADDR_VAR 0 6
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// end else
20338: GO 20380
// begin if GetTech ( 18 , 1 ) = state_enabled then
20340: LD_INT 18
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 321
20350: PUSH
20351: LD_INT 1
20353: EQUAL
20354: IFFALSE 20369
// AddMedal ( remote , - 1 ) else
20356: LD_STRING remote
20358: PPUSH
20359: LD_INT 1
20361: NEG
20362: PPUSH
20363: CALL_OW 101
20367: GO 20380
// AddMedal ( remote , - 2 ) ;
20369: LD_STRING remote
20371: PPUSH
20372: LD_INT 2
20374: NEG
20375: PPUSH
20376: CALL_OW 101
// end ; if m1 and m2 and m3 then
20380: LD_VAR 0 4
20384: IFFALSE 20392
20386: PUSH
20387: LD_VAR 0 5
20391: AND
20392: IFFALSE 20400
20394: PUSH
20395: LD_VAR 0 6
20399: AND
20400: IFFALSE 20416
// begin wait ( 3 ) ;
20402: LD_INT 3
20404: PPUSH
20405: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20409: LD_STRING ACH_ASPEED_6
20411: PPUSH
20412: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20416: LD_OWVAR 67
20420: PUSH
20421: LD_INT 3
20423: GREATEREQUAL
20424: IFFALSE 20432
20426: PUSH
20427: LD_VAR 0 4
20431: AND
20432: IFFALSE 20440
20434: PUSH
20435: LD_VAR 0 5
20439: AND
20440: IFFALSE 20448
20442: PUSH
20443: LD_VAR 0 6
20447: AND
20448: IFFALSE 20460
// SetAchievementEX ( ACH_AMER , 6 ) ;
20450: LD_STRING ACH_AMER
20452: PPUSH
20453: LD_INT 6
20455: PPUSH
20456: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20460: LD_EXP 21
20464: PPUSH
20465: LD_STRING 06_KurtStatus_1
20467: PPUSH
20468: CALL_OW 39
// GiveMedals ( Main ) ;
20472: LD_STRING Main
20474: PPUSH
20475: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20479: LD_INT 22
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 21
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 50
20501: PUSH
20502: EMPTY
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 25
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 25
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 25
20530: PUSH
20531: LD_INT 3
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 25
20540: PUSH
20541: LD_INT 4
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PPUSH
20561: CALL_OW 69
20565: PPUSH
20566: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20570: LD_EXP 1
20574: PPUSH
20575: LD_EXP 43
20579: PUSH
20580: LD_STRING JMM
20582: STR
20583: PPUSH
20584: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20588: LD_EXP 2
20592: PPUSH
20593: LD_EXP 43
20597: PUSH
20598: LD_STRING Lisa
20600: STR
20601: PPUSH
20602: CALL 7662 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20606: LD_EXP 3
20610: PPUSH
20611: LD_EXP 43
20615: PUSH
20616: LD_STRING Bobby
20618: STR
20619: PPUSH
20620: CALL 7662 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20624: LD_EXP 4
20628: PPUSH
20629: LD_EXP 43
20633: PUSH
20634: LD_STRING Cyrus
20636: STR
20637: PPUSH
20638: CALL 7662 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20642: LD_EXP 5
20646: PPUSH
20647: LD_EXP 43
20651: PUSH
20652: LD_STRING Frank
20654: STR
20655: PPUSH
20656: CALL 7662 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20660: LD_EXP 6
20664: PPUSH
20665: LD_EXP 43
20669: PUSH
20670: LD_STRING Brown
20672: STR
20673: PPUSH
20674: CALL 7662 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20678: LD_EXP 7
20682: PPUSH
20683: LD_EXP 43
20687: PUSH
20688: LD_STRING Donaldson
20690: STR
20691: PPUSH
20692: CALL 7662 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20696: LD_EXP 8
20700: PPUSH
20701: LD_EXP 43
20705: PUSH
20706: LD_STRING Gladstone
20708: STR
20709: PPUSH
20710: CALL 7662 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20714: LD_EXP 9
20718: PPUSH
20719: LD_EXP 43
20723: PUSH
20724: LD_STRING Denis
20726: STR
20727: PPUSH
20728: CALL 7662 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20732: LD_EXP 16
20736: PPUSH
20737: LD_EXP 43
20741: PUSH
20742: LD_STRING Joan
20744: STR
20745: PPUSH
20746: CALL 7662 0 2
// if IsLive ( Mike ) then
20750: LD_EXP 11
20754: PPUSH
20755: CALL_OW 300
20759: IFFALSE 20779
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20761: LD_EXP 11
20765: PPUSH
20766: LD_EXP 43
20770: PUSH
20771: LD_STRING Mike
20773: STR
20774: PPUSH
20775: CALL_OW 38
// if IsLive ( Joan ) then
20779: LD_EXP 16
20783: PPUSH
20784: CALL_OW 300
20788: IFFALSE 20802
// SaveCharacters ( Joan , Joan ) ;
20790: LD_EXP 16
20794: PPUSH
20795: LD_STRING Joan
20797: PPUSH
20798: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20802: LD_EXP 17
20806: PPUSH
20807: LD_STRING 06_JoanStatus_1
20809: PPUSH
20810: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20814: LD_INT 50
20816: PUSH
20817: EMPTY
20818: LIST
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 21
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 25
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 25
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 25
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 25
20875: PUSH
20876: LD_INT 4
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 69
20900: PUSH
20901: LD_EXP 1
20905: PUSH
20906: LD_EXP 2
20910: PUSH
20911: LD_EXP 3
20915: PUSH
20916: LD_EXP 4
20920: PUSH
20921: LD_EXP 5
20925: PUSH
20926: LD_EXP 6
20930: PUSH
20931: LD_EXP 7
20935: PUSH
20936: LD_EXP 8
20940: PUSH
20941: LD_EXP 9
20945: PUSH
20946: LD_EXP 16
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: DIFF
20963: PPUSH
20964: LD_STRING 06_other_survivors
20966: PPUSH
20967: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) diff Mike , 06_other_apemans ) ;
20971: LD_INT 50
20973: PUSH
20974: EMPTY
20975: LIST
20976: PUSH
20977: LD_INT 22
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 25
21002: PUSH
21003: LD_INT 12
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 25
21012: PUSH
21013: LD_INT 16
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: PUSH
21036: LD_EXP 11
21040: DIFF
21041: PPUSH
21042: LD_STRING 06_other_apemans
21044: PPUSH
21045: CALL_OW 38
// YouWin ;
21049: CALL_OW 103
// end ; end_of_file
21053: LD_VAR 0 3
21057: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
21058: LD_EXP 48
21062: IFFALSE 21095
21064: PUSH
21065: LD_OWVAR 1
21069: PUSH
21070: LD_INT 23100
21072: PUSH
21073: LD_INT 21000
21075: PUSH
21076: LD_INT 18900
21078: PUSH
21079: LD_INT 16800
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_OWVAR 67
21092: ARRAY
21093: GREATER
21094: AND
21095: IFFALSE 21444
21097: GO 21099
21099: DISABLE
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
// begin enable ;
21106: ENABLE
// for i in ruAttackers do
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_EXP 48
21116: PUSH
21117: FOR_IN
21118: IFFALSE 21442
// begin if not IsDrivenBy ( i ) then
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 311
21129: NOT
21130: IFFALSE 21134
// continue ;
21132: GO 21117
// if i mod 2 = 0 then
21134: LD_VAR 0 1
21138: PUSH
21139: LD_INT 2
21141: MOD
21142: PUSH
21143: LD_INT 0
21145: EQUAL
21146: IFFALSE 21201
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
21148: LD_ADDR_VAR 0 3
21152: PUSH
21153: LD_INT 91
21155: PUSH
21156: LD_INT 52
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 82
21165: PUSH
21166: LD_INT 34
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 90
21175: PUSH
21176: LD_INT 26
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 86
21185: PUSH
21186: LD_INT 16
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21296
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
21201: LD_ADDR_VAR 0 3
21205: PUSH
21206: LD_INT 91
21208: PUSH
21209: LD_INT 52
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 68
21218: PUSH
21219: LD_INT 46
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 48
21228: PUSH
21229: LD_INT 43
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 44
21238: PUSH
21239: LD_INT 42
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 33
21248: PUSH
21249: LD_INT 34
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 29
21258: PUSH
21259: LD_INT 23
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 30
21268: PUSH
21269: LD_INT 19
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 38
21278: PUSH
21279: LD_INT 16
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 256
21305: PUSH
21306: LD_INT 1000
21308: EQUAL
21309: IFFALSE 21327
// AgressiveMove ( i , path ) else
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: CALL 85738 0 2
21325: GO 21440
// if GetLives ( i ) < 650 then
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 256
21336: PUSH
21337: LD_INT 650
21339: LESS
21340: IFFALSE 21440
// begin if not IsInArea ( i , russianRepairArea ) then
21342: LD_VAR 0 1
21346: PPUSH
21347: LD_INT 12
21349: PPUSH
21350: CALL_OW 308
21354: NOT
21355: IFFALSE 21426
// begin SetTag ( i , 0 ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_INT 0
21364: PPUSH
21365: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 261
21378: PUSH
21379: LD_INT 50
21381: LESS
21382: IFFALSE 21393
21384: PUSH
21385: LD_INT 21
21387: PPUSH
21388: CALL_OW 302
21392: AND
21393: IFFALSE 21409
// ComMoveUnit ( i , rufab ) else
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_INT 21
21402: PPUSH
21403: CALL_OW 112
21407: GO 21424
// ComMoveXY ( i , 121 , 99 ) ;
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_INT 121
21416: PPUSH
21417: LD_INT 99
21419: PPUSH
21420: CALL_OW 111
// end else
21424: GO 21440
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21426: LD_VAR 0 1
21430: PPUSH
21431: CALL_OW 311
21435: PPUSH
21436: CALL 84686 0 1
// end ; end ;
21440: GO 21117
21442: POP
21443: POP
// end ;
21444: PPOPN 4
21446: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21447: LD_INT 0
21449: PPUSH
21450: PPUSH
21451: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: DOUBLE
21458: LD_INT 1
21460: DEC
21461: ST_TO_ADDR
21462: LD_INT 4
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: LD_INT 6
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_OWVAR 67
21484: ARRAY
21485: PUSH
21486: FOR_TO
21487: IFFALSE 21662
// begin uc_side := 3 ;
21489: LD_ADDR_OWVAR 20
21493: PUSH
21494: LD_INT 3
21496: ST_TO_ADDR
// uc_nation := 3 ;
21497: LD_ADDR_OWVAR 21
21501: PUSH
21502: LD_INT 3
21504: ST_TO_ADDR
// InitHC_All ( ) ;
21505: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21509: LD_INT 0
21511: PPUSH
21512: LD_INT 4
21514: PUSH
21515: LD_INT 5
21517: PUSH
21518: LD_INT 6
21520: PUSH
21521: LD_INT 6
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_OWVAR 67
21534: ARRAY
21535: PPUSH
21536: CALL_OW 381
// un := CreateHuman ;
21540: LD_ADDR_VAR 0 3
21544: PUSH
21545: CALL_OW 44
21549: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 127
21557: PPUSH
21558: LD_INT 62
21560: PPUSH
21561: LD_INT 3
21563: PPUSH
21564: LD_INT 0
21566: PPUSH
21567: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21571: LD_ADDR_EXP 49
21575: PUSH
21576: LD_EXP 49
21580: PPUSH
21581: LD_EXP 49
21585: PUSH
21586: LD_INT 1
21588: PLUS
21589: PPUSH
21590: LD_VAR 0 3
21594: PPUSH
21595: CALL_OW 1
21599: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21600: LD_VAR 0 3
21604: PPUSH
21605: LD_INT 83
21607: PPUSH
21608: LD_INT 49
21610: PPUSH
21611: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21615: LD_VAR 0 3
21619: PPUSH
21620: LD_INT 49
21622: PPUSH
21623: LD_INT 43
21625: PPUSH
21626: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21630: LD_VAR 0 3
21634: PPUSH
21635: LD_INT 31
21637: PPUSH
21638: LD_INT 15
21640: PPUSH
21641: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21645: LD_VAR 0 3
21649: PPUSH
21650: LD_INT 63
21652: PPUSH
21653: LD_INT 9
21655: PPUSH
21656: CALL_OW 174
// end ;
21660: GO 21486
21662: POP
21663: POP
// end ; end_of_file
21664: LD_VAR 0 1
21668: RET
// export function CreateNature ; var i , un ; begin
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
21673: PPUSH
// for i := 1 to Difficulty + 2 do
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: DOUBLE
21680: LD_INT 1
21682: DEC
21683: ST_TO_ADDR
21684: LD_OWVAR 67
21688: PUSH
21689: LD_INT 2
21691: PLUS
21692: PUSH
21693: FOR_TO
21694: IFFALSE 21803
// begin hc_sex := sex_male ;
21696: LD_ADDR_OWVAR 27
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// uc_side := 0 ;
21704: LD_ADDR_OWVAR 20
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// uc_nation := nation_nature ;
21712: LD_ADDR_OWVAR 21
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// hc_class := class_tiger ;
21720: LD_ADDR_OWVAR 28
21724: PUSH
21725: LD_INT 14
21727: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21728: LD_ADDR_OWVAR 31
21732: PUSH
21733: LD_EXP 36
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21753: LD_ADDR_OWVAR 35
21757: PUSH
21758: LD_INT 5
21760: NEG
21761: PPUSH
21762: LD_INT 5
21764: PPUSH
21765: CALL_OW 12
21769: PUSH
21770: LD_OWVAR 67
21774: MUL
21775: ST_TO_ADDR
// un := CreateHuman ;
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: CALL_OW 44
21785: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_INT 18
21793: PPUSH
21794: LD_INT 0
21796: PPUSH
21797: CALL_OW 49
// end ;
21801: GO 21693
21803: POP
21804: POP
// for i = 1 to rand ( 3 , 4 ) do
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: DOUBLE
21811: LD_INT 1
21813: DEC
21814: ST_TO_ADDR
21815: LD_INT 3
21817: PPUSH
21818: LD_INT 4
21820: PPUSH
21821: CALL_OW 12
21825: PUSH
21826: FOR_TO
21827: IFFALSE 21897
// begin hc_class := class_phororhacos ;
21829: LD_ADDR_OWVAR 28
21833: PUSH
21834: LD_INT 18
21836: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21837: LD_ADDR_OWVAR 31
21841: PUSH
21842: LD_EXP 36
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: ST_TO_ADDR
// hc_agressivity := 0 ;
21862: LD_ADDR_OWVAR 35
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// un = CreateHuman ;
21870: LD_ADDR_VAR 0 3
21874: PUSH
21875: CALL_OW 44
21879: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 18
21887: PPUSH
21888: LD_INT 0
21890: PPUSH
21891: CALL_OW 49
// end ;
21895: GO 21826
21897: POP
21898: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: DOUBLE
21905: LD_INT 1
21907: DEC
21908: ST_TO_ADDR
21909: LD_INT 3
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: LD_INT 4
21917: PUSH
21918: LD_INT 5
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: LD_OWVAR 67
21931: ARRAY
21932: PUSH
21933: FOR_TO
21934: IFFALSE 22075
// begin hc_class := class_apeman ;
21936: LD_ADDR_OWVAR 28
21940: PUSH
21941: LD_INT 12
21943: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21944: LD_ADDR_OWVAR 31
21948: PUSH
21949: LD_INT 2
21951: PPUSH
21952: LD_INT 5
21954: PPUSH
21955: CALL_OW 12
21959: PUSH
21960: LD_INT 0
21962: PPUSH
21963: LD_INT 2
21965: PPUSH
21966: CALL_OW 12
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21983: LD_ADDR_OWVAR 35
21987: PUSH
21988: LD_INT 5
21990: NEG
21991: PPUSH
21992: LD_INT 10
21994: PPUSH
21995: CALL_OW 12
21999: PUSH
22000: LD_INT 10
22002: NEG
22003: PPUSH
22004: LD_INT 20
22006: PPUSH
22007: CALL_OW 12
22011: PUSH
22012: LD_INT 20
22014: NEG
22015: PPUSH
22016: LD_INT 25
22018: PPUSH
22019: CALL_OW 12
22023: PUSH
22024: LD_INT 30
22026: NEG
22027: PPUSH
22028: LD_INT 30
22030: PPUSH
22031: CALL_OW 12
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_OWVAR 67
22046: ARRAY
22047: ST_TO_ADDR
// un := CreateHuman ;
22048: LD_ADDR_VAR 0 3
22052: PUSH
22053: CALL_OW 44
22057: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22058: LD_VAR 0 3
22062: PPUSH
22063: LD_INT 19
22065: PPUSH
22066: LD_INT 0
22068: PPUSH
22069: CALL_OW 49
// end ;
22073: GO 21933
22075: POP
22076: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
22077: LD_ADDR_VAR 0 2
22081: PUSH
22082: DOUBLE
22083: LD_INT 1
22085: DEC
22086: ST_TO_ADDR
22087: LD_INT 3
22089: PUSH
22090: LD_INT 4
22092: PUSH
22093: LD_INT 5
22095: PUSH
22096: LD_INT 6
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: PUSH
22105: LD_OWVAR 67
22109: ARRAY
22110: PUSH
22111: FOR_TO
22112: IFFALSE 22205
// begin hc_class := class_apeman ;
22114: LD_ADDR_OWVAR 28
22118: PUSH
22119: LD_INT 12
22121: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
22122: LD_ADDR_OWVAR 31
22126: PUSH
22127: LD_INT 2
22129: PPUSH
22130: LD_INT 5
22132: PPUSH
22133: CALL_OW 12
22137: PUSH
22138: LD_INT 0
22140: PPUSH
22141: LD_INT 2
22143: PPUSH
22144: CALL_OW 12
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
22161: LD_ADDR_OWVAR 35
22165: PUSH
22166: LD_INT 15
22168: NEG
22169: PPUSH
22170: LD_INT 15
22172: PPUSH
22173: CALL_OW 12
22177: ST_TO_ADDR
// un = CreateHuman ;
22178: LD_ADDR_VAR 0 3
22182: PUSH
22183: CALL_OW 44
22187: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22188: LD_VAR 0 3
22192: PPUSH
22193: LD_INT 20
22195: PPUSH
22196: LD_INT 0
22198: PPUSH
22199: CALL_OW 49
// end ;
22203: GO 22111
22205: POP
22206: POP
// end ; end_of_file end_of_file
22207: LD_VAR 0 1
22211: RET
// export globalGameSaveCounter ; every 0 0$1 do
22212: GO 22214
22214: DISABLE
// begin enable ;
22215: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
22216: LD_STRING updateTimer(
22218: PUSH
22219: LD_OWVAR 1
22223: STR
22224: PUSH
22225: LD_STRING );
22227: STR
22228: PPUSH
22229: CALL_OW 559
// end ;
22233: END
// every 0 0$1 do
22234: GO 22236
22236: DISABLE
// begin globalGameSaveCounter := 0 ;
22237: LD_ADDR_EXP 50
22241: PUSH
22242: LD_INT 0
22244: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22245: LD_STRING setGameSaveCounter(0)
22247: PPUSH
22248: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22252: LD_STRING initStreamRollete();
22254: PPUSH
22255: CALL_OW 559
// InitStreamMode ;
22259: CALL 23611 0 0
// DefineStreamItems ( false ) ;
22263: LD_INT 0
22265: PPUSH
22266: CALL 24075 0 1
// end ;
22270: END
// export function SOS_MapStart ( ) ; begin
22271: LD_INT 0
22273: PPUSH
// if streamModeActive then
22274: LD_EXP 51
22278: IFFALSE 22287
// DefineStreamItems ( true ) ;
22280: LD_INT 1
22282: PPUSH
22283: CALL 24075 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
22287: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
22289: PPUSH
22290: CALL_OW 559
// UpdateLuaVariables ( ) ;
22294: CALL 22311 0 0
// UpdateFactoryWaypoints ( ) ;
22298: CALL 37197 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22302: CALL 37449 0 0
// end ;
22306: LD_VAR 0 1
22310: RET
// function UpdateLuaVariables ( ) ; begin
22311: LD_INT 0
22313: PPUSH
// if globalGameSaveCounter then
22314: LD_EXP 50
22318: IFFALSE 22352
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22320: LD_ADDR_EXP 50
22324: PUSH
22325: LD_EXP 50
22329: PPUSH
22330: CALL 84345 0 1
22334: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22335: LD_STRING setGameSaveCounter(
22337: PUSH
22338: LD_EXP 50
22342: STR
22343: PUSH
22344: LD_STRING )
22346: STR
22347: PPUSH
22348: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22352: LD_STRING setGameDifficulty(
22354: PUSH
22355: LD_OWVAR 67
22359: STR
22360: PUSH
22361: LD_STRING )
22363: STR
22364: PPUSH
22365: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22369: LD_STRING displayDifficulty(
22371: PUSH
22372: LD_OWVAR 67
22376: STR
22377: PUSH
22378: LD_STRING )
22380: STR
22381: PPUSH
22382: CALL_OW 559
// end ;
22386: LD_VAR 0 1
22390: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22391: LD_INT 0
22393: PPUSH
// if p2 = stream_mode then
22394: LD_VAR 0 2
22398: PUSH
22399: LD_INT 100
22401: EQUAL
22402: IFFALSE 23405
// begin if not StreamModeActive then
22404: LD_EXP 51
22408: NOT
22409: IFFALSE 22419
// StreamModeActive := true ;
22411: LD_ADDR_EXP 51
22415: PUSH
22416: LD_INT 1
22418: ST_TO_ADDR
// if p3 = 0 then
22419: LD_VAR 0 3
22423: PUSH
22424: LD_INT 0
22426: EQUAL
22427: IFFALSE 22433
// InitStreamMode ;
22429: CALL 23611 0 0
// if p3 = 1 then
22433: LD_VAR 0 3
22437: PUSH
22438: LD_INT 1
22440: EQUAL
22441: IFFALSE 22451
// sRocket := true ;
22443: LD_ADDR_EXP 56
22447: PUSH
22448: LD_INT 1
22450: ST_TO_ADDR
// if p3 = 2 then
22451: LD_VAR 0 3
22455: PUSH
22456: LD_INT 2
22458: EQUAL
22459: IFFALSE 22469
// sSpeed := true ;
22461: LD_ADDR_EXP 55
22465: PUSH
22466: LD_INT 1
22468: ST_TO_ADDR
// if p3 = 3 then
22469: LD_VAR 0 3
22473: PUSH
22474: LD_INT 3
22476: EQUAL
22477: IFFALSE 22487
// sEngine := true ;
22479: LD_ADDR_EXP 57
22483: PUSH
22484: LD_INT 1
22486: ST_TO_ADDR
// if p3 = 4 then
22487: LD_VAR 0 3
22491: PUSH
22492: LD_INT 4
22494: EQUAL
22495: IFFALSE 22505
// sSpec := true ;
22497: LD_ADDR_EXP 54
22501: PUSH
22502: LD_INT 1
22504: ST_TO_ADDR
// if p3 = 5 then
22505: LD_VAR 0 3
22509: PUSH
22510: LD_INT 5
22512: EQUAL
22513: IFFALSE 22523
// sLevel := true ;
22515: LD_ADDR_EXP 58
22519: PUSH
22520: LD_INT 1
22522: ST_TO_ADDR
// if p3 = 6 then
22523: LD_VAR 0 3
22527: PUSH
22528: LD_INT 6
22530: EQUAL
22531: IFFALSE 22541
// sArmoury := true ;
22533: LD_ADDR_EXP 59
22537: PUSH
22538: LD_INT 1
22540: ST_TO_ADDR
// if p3 = 7 then
22541: LD_VAR 0 3
22545: PUSH
22546: LD_INT 7
22548: EQUAL
22549: IFFALSE 22559
// sRadar := true ;
22551: LD_ADDR_EXP 60
22555: PUSH
22556: LD_INT 1
22558: ST_TO_ADDR
// if p3 = 8 then
22559: LD_VAR 0 3
22563: PUSH
22564: LD_INT 8
22566: EQUAL
22567: IFFALSE 22577
// sBunker := true ;
22569: LD_ADDR_EXP 61
22573: PUSH
22574: LD_INT 1
22576: ST_TO_ADDR
// if p3 = 9 then
22577: LD_VAR 0 3
22581: PUSH
22582: LD_INT 9
22584: EQUAL
22585: IFFALSE 22595
// sHack := true ;
22587: LD_ADDR_EXP 62
22591: PUSH
22592: LD_INT 1
22594: ST_TO_ADDR
// if p3 = 10 then
22595: LD_VAR 0 3
22599: PUSH
22600: LD_INT 10
22602: EQUAL
22603: IFFALSE 22613
// sFire := true ;
22605: LD_ADDR_EXP 63
22609: PUSH
22610: LD_INT 1
22612: ST_TO_ADDR
// if p3 = 11 then
22613: LD_VAR 0 3
22617: PUSH
22618: LD_INT 11
22620: EQUAL
22621: IFFALSE 22631
// sRefresh := true ;
22623: LD_ADDR_EXP 64
22627: PUSH
22628: LD_INT 1
22630: ST_TO_ADDR
// if p3 = 12 then
22631: LD_VAR 0 3
22635: PUSH
22636: LD_INT 12
22638: EQUAL
22639: IFFALSE 22649
// sExp := true ;
22641: LD_ADDR_EXP 65
22645: PUSH
22646: LD_INT 1
22648: ST_TO_ADDR
// if p3 = 13 then
22649: LD_VAR 0 3
22653: PUSH
22654: LD_INT 13
22656: EQUAL
22657: IFFALSE 22667
// sDepot := true ;
22659: LD_ADDR_EXP 66
22663: PUSH
22664: LD_INT 1
22666: ST_TO_ADDR
// if p3 = 14 then
22667: LD_VAR 0 3
22671: PUSH
22672: LD_INT 14
22674: EQUAL
22675: IFFALSE 22685
// sFlag := true ;
22677: LD_ADDR_EXP 67
22681: PUSH
22682: LD_INT 1
22684: ST_TO_ADDR
// if p3 = 15 then
22685: LD_VAR 0 3
22689: PUSH
22690: LD_INT 15
22692: EQUAL
22693: IFFALSE 22703
// sKamikadze := true ;
22695: LD_ADDR_EXP 75
22699: PUSH
22700: LD_INT 1
22702: ST_TO_ADDR
// if p3 = 16 then
22703: LD_VAR 0 3
22707: PUSH
22708: LD_INT 16
22710: EQUAL
22711: IFFALSE 22721
// sTroll := true ;
22713: LD_ADDR_EXP 76
22717: PUSH
22718: LD_INT 1
22720: ST_TO_ADDR
// if p3 = 17 then
22721: LD_VAR 0 3
22725: PUSH
22726: LD_INT 17
22728: EQUAL
22729: IFFALSE 22739
// sSlow := true ;
22731: LD_ADDR_EXP 77
22735: PUSH
22736: LD_INT 1
22738: ST_TO_ADDR
// if p3 = 18 then
22739: LD_VAR 0 3
22743: PUSH
22744: LD_INT 18
22746: EQUAL
22747: IFFALSE 22757
// sLack := true ;
22749: LD_ADDR_EXP 78
22753: PUSH
22754: LD_INT 1
22756: ST_TO_ADDR
// if p3 = 19 then
22757: LD_VAR 0 3
22761: PUSH
22762: LD_INT 19
22764: EQUAL
22765: IFFALSE 22775
// sTank := true ;
22767: LD_ADDR_EXP 80
22771: PUSH
22772: LD_INT 1
22774: ST_TO_ADDR
// if p3 = 20 then
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 20
22782: EQUAL
22783: IFFALSE 22793
// sRemote := true ;
22785: LD_ADDR_EXP 81
22789: PUSH
22790: LD_INT 1
22792: ST_TO_ADDR
// if p3 = 21 then
22793: LD_VAR 0 3
22797: PUSH
22798: LD_INT 21
22800: EQUAL
22801: IFFALSE 22811
// sPowell := true ;
22803: LD_ADDR_EXP 82
22807: PUSH
22808: LD_INT 1
22810: ST_TO_ADDR
// if p3 = 22 then
22811: LD_VAR 0 3
22815: PUSH
22816: LD_INT 22
22818: EQUAL
22819: IFFALSE 22829
// sTeleport := true ;
22821: LD_ADDR_EXP 85
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// if p3 = 23 then
22829: LD_VAR 0 3
22833: PUSH
22834: LD_INT 23
22836: EQUAL
22837: IFFALSE 22847
// sOilTower := true ;
22839: LD_ADDR_EXP 87
22843: PUSH
22844: LD_INT 1
22846: ST_TO_ADDR
// if p3 = 24 then
22847: LD_VAR 0 3
22851: PUSH
22852: LD_INT 24
22854: EQUAL
22855: IFFALSE 22865
// sShovel := true ;
22857: LD_ADDR_EXP 88
22861: PUSH
22862: LD_INT 1
22864: ST_TO_ADDR
// if p3 = 25 then
22865: LD_VAR 0 3
22869: PUSH
22870: LD_INT 25
22872: EQUAL
22873: IFFALSE 22883
// sSheik := true ;
22875: LD_ADDR_EXP 89
22879: PUSH
22880: LD_INT 1
22882: ST_TO_ADDR
// if p3 = 26 then
22883: LD_VAR 0 3
22887: PUSH
22888: LD_INT 26
22890: EQUAL
22891: IFFALSE 22901
// sEarthquake := true ;
22893: LD_ADDR_EXP 91
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// if p3 = 27 then
22901: LD_VAR 0 3
22905: PUSH
22906: LD_INT 27
22908: EQUAL
22909: IFFALSE 22919
// sAI := true ;
22911: LD_ADDR_EXP 92
22915: PUSH
22916: LD_INT 1
22918: ST_TO_ADDR
// if p3 = 28 then
22919: LD_VAR 0 3
22923: PUSH
22924: LD_INT 28
22926: EQUAL
22927: IFFALSE 22937
// sCargo := true ;
22929: LD_ADDR_EXP 95
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
// if p3 = 29 then
22937: LD_VAR 0 3
22941: PUSH
22942: LD_INT 29
22944: EQUAL
22945: IFFALSE 22955
// sDLaser := true ;
22947: LD_ADDR_EXP 96
22951: PUSH
22952: LD_INT 1
22954: ST_TO_ADDR
// if p3 = 30 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 30
22962: EQUAL
22963: IFFALSE 22973
// sExchange := true ;
22965: LD_ADDR_EXP 97
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// if p3 = 31 then
22973: LD_VAR 0 3
22977: PUSH
22978: LD_INT 31
22980: EQUAL
22981: IFFALSE 22991
// sFac := true ;
22983: LD_ADDR_EXP 98
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
// if p3 = 32 then
22991: LD_VAR 0 3
22995: PUSH
22996: LD_INT 32
22998: EQUAL
22999: IFFALSE 23009
// sPower := true ;
23001: LD_ADDR_EXP 99
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// if p3 = 33 then
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 33
23016: EQUAL
23017: IFFALSE 23027
// sRandom := true ;
23019: LD_ADDR_EXP 100
23023: PUSH
23024: LD_INT 1
23026: ST_TO_ADDR
// if p3 = 34 then
23027: LD_VAR 0 3
23031: PUSH
23032: LD_INT 34
23034: EQUAL
23035: IFFALSE 23045
// sShield := true ;
23037: LD_ADDR_EXP 101
23041: PUSH
23042: LD_INT 1
23044: ST_TO_ADDR
// if p3 = 35 then
23045: LD_VAR 0 3
23049: PUSH
23050: LD_INT 35
23052: EQUAL
23053: IFFALSE 23063
// sTime := true ;
23055: LD_ADDR_EXP 102
23059: PUSH
23060: LD_INT 1
23062: ST_TO_ADDR
// if p3 = 36 then
23063: LD_VAR 0 3
23067: PUSH
23068: LD_INT 36
23070: EQUAL
23071: IFFALSE 23081
// sTools := true ;
23073: LD_ADDR_EXP 103
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// if p3 = 101 then
23081: LD_VAR 0 3
23085: PUSH
23086: LD_INT 101
23088: EQUAL
23089: IFFALSE 23099
// sSold := true ;
23091: LD_ADDR_EXP 68
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
// if p3 = 102 then
23099: LD_VAR 0 3
23103: PUSH
23104: LD_INT 102
23106: EQUAL
23107: IFFALSE 23117
// sDiff := true ;
23109: LD_ADDR_EXP 69
23113: PUSH
23114: LD_INT 1
23116: ST_TO_ADDR
// if p3 = 103 then
23117: LD_VAR 0 3
23121: PUSH
23122: LD_INT 103
23124: EQUAL
23125: IFFALSE 23135
// sFog := true ;
23127: LD_ADDR_EXP 72
23131: PUSH
23132: LD_INT 1
23134: ST_TO_ADDR
// if p3 = 104 then
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 104
23142: EQUAL
23143: IFFALSE 23153
// sReset := true ;
23145: LD_ADDR_EXP 73
23149: PUSH
23150: LD_INT 1
23152: ST_TO_ADDR
// if p3 = 105 then
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 105
23160: EQUAL
23161: IFFALSE 23171
// sSun := true ;
23163: LD_ADDR_EXP 74
23167: PUSH
23168: LD_INT 1
23170: ST_TO_ADDR
// if p3 = 106 then
23171: LD_VAR 0 3
23175: PUSH
23176: LD_INT 106
23178: EQUAL
23179: IFFALSE 23189
// sTiger := true ;
23181: LD_ADDR_EXP 70
23185: PUSH
23186: LD_INT 1
23188: ST_TO_ADDR
// if p3 = 107 then
23189: LD_VAR 0 3
23193: PUSH
23194: LD_INT 107
23196: EQUAL
23197: IFFALSE 23207
// sBomb := true ;
23199: LD_ADDR_EXP 71
23203: PUSH
23204: LD_INT 1
23206: ST_TO_ADDR
// if p3 = 108 then
23207: LD_VAR 0 3
23211: PUSH
23212: LD_INT 108
23214: EQUAL
23215: IFFALSE 23225
// sWound := true ;
23217: LD_ADDR_EXP 79
23221: PUSH
23222: LD_INT 1
23224: ST_TO_ADDR
// if p3 = 109 then
23225: LD_VAR 0 3
23229: PUSH
23230: LD_INT 109
23232: EQUAL
23233: IFFALSE 23243
// sBetray := true ;
23235: LD_ADDR_EXP 83
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// if p3 = 110 then
23243: LD_VAR 0 3
23247: PUSH
23248: LD_INT 110
23250: EQUAL
23251: IFFALSE 23261
// sContamin := true ;
23253: LD_ADDR_EXP 84
23257: PUSH
23258: LD_INT 1
23260: ST_TO_ADDR
// if p3 = 111 then
23261: LD_VAR 0 3
23265: PUSH
23266: LD_INT 111
23268: EQUAL
23269: IFFALSE 23279
// sOil := true ;
23271: LD_ADDR_EXP 86
23275: PUSH
23276: LD_INT 1
23278: ST_TO_ADDR
// if p3 = 112 then
23279: LD_VAR 0 3
23283: PUSH
23284: LD_INT 112
23286: EQUAL
23287: IFFALSE 23297
// sStu := true ;
23289: LD_ADDR_EXP 90
23293: PUSH
23294: LD_INT 1
23296: ST_TO_ADDR
// if p3 = 113 then
23297: LD_VAR 0 3
23301: PUSH
23302: LD_INT 113
23304: EQUAL
23305: IFFALSE 23315
// sBazooka := true ;
23307: LD_ADDR_EXP 93
23311: PUSH
23312: LD_INT 1
23314: ST_TO_ADDR
// if p3 = 114 then
23315: LD_VAR 0 3
23319: PUSH
23320: LD_INT 114
23322: EQUAL
23323: IFFALSE 23333
// sMortar := true ;
23325: LD_ADDR_EXP 94
23329: PUSH
23330: LD_INT 1
23332: ST_TO_ADDR
// if p3 = 115 then
23333: LD_VAR 0 3
23337: PUSH
23338: LD_INT 115
23340: EQUAL
23341: IFFALSE 23351
// sRanger := true ;
23343: LD_ADDR_EXP 104
23347: PUSH
23348: LD_INT 1
23350: ST_TO_ADDR
// if p3 = 116 then
23351: LD_VAR 0 3
23355: PUSH
23356: LD_INT 116
23358: EQUAL
23359: IFFALSE 23369
// sComputer := true ;
23361: LD_ADDR_EXP 105
23365: PUSH
23366: LD_INT 1
23368: ST_TO_ADDR
// if p3 = 117 then
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 117
23376: EQUAL
23377: IFFALSE 23387
// s30 := true ;
23379: LD_ADDR_EXP 106
23383: PUSH
23384: LD_INT 1
23386: ST_TO_ADDR
// if p3 = 118 then
23387: LD_VAR 0 3
23391: PUSH
23392: LD_INT 118
23394: EQUAL
23395: IFFALSE 23405
// s60 := true ;
23397: LD_ADDR_EXP 107
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// end ; if p2 = hack_mode then
23405: LD_VAR 0 2
23409: PUSH
23410: LD_INT 101
23412: EQUAL
23413: IFFALSE 23541
// begin case p3 of 1 :
23415: LD_VAR 0 3
23419: PUSH
23420: LD_INT 1
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23435
23428: POP
// hHackUnlimitedResources ; 2 :
23429: CALL 35804 0 0
23433: GO 23541
23435: LD_INT 2
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23450
23443: POP
// hHackSetLevel10 ; 3 :
23444: CALL 35937 0 0
23448: GO 23541
23450: LD_INT 3
23452: DOUBLE
23453: EQUAL
23454: IFTRUE 23458
23456: GO 23465
23458: POP
// hHackSetLevel10YourUnits ; 4 :
23459: CALL 36022 0 0
23463: GO 23541
23465: LD_INT 4
23467: DOUBLE
23468: EQUAL
23469: IFTRUE 23473
23471: GO 23480
23473: POP
// hHackInvincible ; 5 :
23474: CALL 36470 0 0
23478: GO 23541
23480: LD_INT 5
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23495
23488: POP
// hHackInvisible ; 6 :
23489: CALL 36581 0 0
23493: GO 23541
23495: LD_INT 6
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23510
23503: POP
// hHackChangeYourSide ; 7 :
23504: CALL 36638 0 0
23508: GO 23541
23510: LD_INT 7
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23525
23518: POP
// hHackChangeUnitSide ; 8 :
23519: CALL 36680 0 0
23523: GO 23541
23525: LD_INT 8
23527: DOUBLE
23528: EQUAL
23529: IFTRUE 23533
23531: GO 23540
23533: POP
// hHackFog ; end ;
23534: CALL 36781 0 0
23538: GO 23541
23540: POP
// end ; if p2 = game_save_mode then
23541: LD_VAR 0 2
23545: PUSH
23546: LD_INT 102
23548: EQUAL
23549: IFFALSE 23606
// begin if p3 = 1 then
23551: LD_VAR 0 3
23555: PUSH
23556: LD_INT 1
23558: EQUAL
23559: IFFALSE 23571
// globalGameSaveCounter := p4 ;
23561: LD_ADDR_EXP 50
23565: PUSH
23566: LD_VAR 0 4
23570: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23571: LD_VAR 0 3
23575: PUSH
23576: LD_INT 2
23578: EQUAL
23579: IFFALSE 23587
23581: PUSH
23582: LD_EXP 50
23586: AND
23587: IFFALSE 23606
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23589: LD_STRING setGameSaveCounter(
23591: PUSH
23592: LD_EXP 50
23596: STR
23597: PUSH
23598: LD_STRING )
23600: STR
23601: PPUSH
23602: CALL_OW 559
// end ; end ;
23606: LD_VAR 0 7
23610: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23611: LD_INT 0
23613: PPUSH
// streamModeActive := false ;
23614: LD_ADDR_EXP 51
23618: PUSH
23619: LD_INT 0
23621: ST_TO_ADDR
// normalCounter := 36 ;
23622: LD_ADDR_EXP 52
23626: PUSH
23627: LD_INT 36
23629: ST_TO_ADDR
// hardcoreCounter := 18 ;
23630: LD_ADDR_EXP 53
23634: PUSH
23635: LD_INT 18
23637: ST_TO_ADDR
// sRocket := false ;
23638: LD_ADDR_EXP 56
23642: PUSH
23643: LD_INT 0
23645: ST_TO_ADDR
// sSpeed := false ;
23646: LD_ADDR_EXP 55
23650: PUSH
23651: LD_INT 0
23653: ST_TO_ADDR
// sEngine := false ;
23654: LD_ADDR_EXP 57
23658: PUSH
23659: LD_INT 0
23661: ST_TO_ADDR
// sSpec := false ;
23662: LD_ADDR_EXP 54
23666: PUSH
23667: LD_INT 0
23669: ST_TO_ADDR
// sLevel := false ;
23670: LD_ADDR_EXP 58
23674: PUSH
23675: LD_INT 0
23677: ST_TO_ADDR
// sArmoury := false ;
23678: LD_ADDR_EXP 59
23682: PUSH
23683: LD_INT 0
23685: ST_TO_ADDR
// sRadar := false ;
23686: LD_ADDR_EXP 60
23690: PUSH
23691: LD_INT 0
23693: ST_TO_ADDR
// sBunker := false ;
23694: LD_ADDR_EXP 61
23698: PUSH
23699: LD_INT 0
23701: ST_TO_ADDR
// sHack := false ;
23702: LD_ADDR_EXP 62
23706: PUSH
23707: LD_INT 0
23709: ST_TO_ADDR
// sFire := false ;
23710: LD_ADDR_EXP 63
23714: PUSH
23715: LD_INT 0
23717: ST_TO_ADDR
// sRefresh := false ;
23718: LD_ADDR_EXP 64
23722: PUSH
23723: LD_INT 0
23725: ST_TO_ADDR
// sExp := false ;
23726: LD_ADDR_EXP 65
23730: PUSH
23731: LD_INT 0
23733: ST_TO_ADDR
// sDepot := false ;
23734: LD_ADDR_EXP 66
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
// sFlag := false ;
23742: LD_ADDR_EXP 67
23746: PUSH
23747: LD_INT 0
23749: ST_TO_ADDR
// sKamikadze := false ;
23750: LD_ADDR_EXP 75
23754: PUSH
23755: LD_INT 0
23757: ST_TO_ADDR
// sTroll := false ;
23758: LD_ADDR_EXP 76
23762: PUSH
23763: LD_INT 0
23765: ST_TO_ADDR
// sSlow := false ;
23766: LD_ADDR_EXP 77
23770: PUSH
23771: LD_INT 0
23773: ST_TO_ADDR
// sLack := false ;
23774: LD_ADDR_EXP 78
23778: PUSH
23779: LD_INT 0
23781: ST_TO_ADDR
// sTank := false ;
23782: LD_ADDR_EXP 80
23786: PUSH
23787: LD_INT 0
23789: ST_TO_ADDR
// sRemote := false ;
23790: LD_ADDR_EXP 81
23794: PUSH
23795: LD_INT 0
23797: ST_TO_ADDR
// sPowell := false ;
23798: LD_ADDR_EXP 82
23802: PUSH
23803: LD_INT 0
23805: ST_TO_ADDR
// sTeleport := false ;
23806: LD_ADDR_EXP 85
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// sOilTower := false ;
23814: LD_ADDR_EXP 87
23818: PUSH
23819: LD_INT 0
23821: ST_TO_ADDR
// sShovel := false ;
23822: LD_ADDR_EXP 88
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
// sSheik := false ;
23830: LD_ADDR_EXP 89
23834: PUSH
23835: LD_INT 0
23837: ST_TO_ADDR
// sEarthquake := false ;
23838: LD_ADDR_EXP 91
23842: PUSH
23843: LD_INT 0
23845: ST_TO_ADDR
// sAI := false ;
23846: LD_ADDR_EXP 92
23850: PUSH
23851: LD_INT 0
23853: ST_TO_ADDR
// sCargo := false ;
23854: LD_ADDR_EXP 95
23858: PUSH
23859: LD_INT 0
23861: ST_TO_ADDR
// sDLaser := false ;
23862: LD_ADDR_EXP 96
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// sExchange := false ;
23870: LD_ADDR_EXP 97
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
// sFac := false ;
23878: LD_ADDR_EXP 98
23882: PUSH
23883: LD_INT 0
23885: ST_TO_ADDR
// sPower := false ;
23886: LD_ADDR_EXP 99
23890: PUSH
23891: LD_INT 0
23893: ST_TO_ADDR
// sRandom := false ;
23894: LD_ADDR_EXP 100
23898: PUSH
23899: LD_INT 0
23901: ST_TO_ADDR
// sShield := false ;
23902: LD_ADDR_EXP 101
23906: PUSH
23907: LD_INT 0
23909: ST_TO_ADDR
// sTime := false ;
23910: LD_ADDR_EXP 102
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
// sTools := false ;
23918: LD_ADDR_EXP 103
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// sSold := false ;
23926: LD_ADDR_EXP 68
23930: PUSH
23931: LD_INT 0
23933: ST_TO_ADDR
// sDiff := false ;
23934: LD_ADDR_EXP 69
23938: PUSH
23939: LD_INT 0
23941: ST_TO_ADDR
// sFog := false ;
23942: LD_ADDR_EXP 72
23946: PUSH
23947: LD_INT 0
23949: ST_TO_ADDR
// sReset := false ;
23950: LD_ADDR_EXP 73
23954: PUSH
23955: LD_INT 0
23957: ST_TO_ADDR
// sSun := false ;
23958: LD_ADDR_EXP 74
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
// sTiger := false ;
23966: LD_ADDR_EXP 70
23970: PUSH
23971: LD_INT 0
23973: ST_TO_ADDR
// sBomb := false ;
23974: LD_ADDR_EXP 71
23978: PUSH
23979: LD_INT 0
23981: ST_TO_ADDR
// sWound := false ;
23982: LD_ADDR_EXP 79
23986: PUSH
23987: LD_INT 0
23989: ST_TO_ADDR
// sBetray := false ;
23990: LD_ADDR_EXP 83
23994: PUSH
23995: LD_INT 0
23997: ST_TO_ADDR
// sContamin := false ;
23998: LD_ADDR_EXP 84
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// sOil := false ;
24006: LD_ADDR_EXP 86
24010: PUSH
24011: LD_INT 0
24013: ST_TO_ADDR
// sStu := false ;
24014: LD_ADDR_EXP 90
24018: PUSH
24019: LD_INT 0
24021: ST_TO_ADDR
// sBazooka := false ;
24022: LD_ADDR_EXP 93
24026: PUSH
24027: LD_INT 0
24029: ST_TO_ADDR
// sMortar := false ;
24030: LD_ADDR_EXP 94
24034: PUSH
24035: LD_INT 0
24037: ST_TO_ADDR
// sRanger := false ;
24038: LD_ADDR_EXP 104
24042: PUSH
24043: LD_INT 0
24045: ST_TO_ADDR
// sComputer := false ;
24046: LD_ADDR_EXP 105
24050: PUSH
24051: LD_INT 0
24053: ST_TO_ADDR
// s30 := false ;
24054: LD_ADDR_EXP 106
24058: PUSH
24059: LD_INT 0
24061: ST_TO_ADDR
// s60 := false ;
24062: LD_ADDR_EXP 107
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// end ;
24070: LD_VAR 0 1
24074: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
24075: LD_INT 0
24077: PPUSH
24078: PPUSH
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
24083: PPUSH
// result := [ ] ;
24084: LD_ADDR_VAR 0 2
24088: PUSH
24089: EMPTY
24090: ST_TO_ADDR
// if campaign_id = 1 then
24091: LD_OWVAR 69
24095: PUSH
24096: LD_INT 1
24098: EQUAL
24099: IFFALSE 27265
// begin case mission_number of 1 :
24101: LD_OWVAR 70
24105: PUSH
24106: LD_INT 1
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24190
24114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
24115: LD_ADDR_VAR 0 2
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 4
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 15
24134: PUSH
24135: LD_INT 16
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_INT 23
24143: PUSH
24144: LD_INT 26
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 101
24160: PUSH
24161: LD_INT 102
24163: PUSH
24164: LD_INT 106
24166: PUSH
24167: LD_INT 116
24169: PUSH
24170: LD_INT 117
24172: PUSH
24173: LD_INT 118
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: ST_TO_ADDR
24188: GO 27263
24190: LD_INT 2
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24282
24198: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
24199: LD_ADDR_VAR 0 2
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: LD_INT 4
24209: PUSH
24210: LD_INT 11
24212: PUSH
24213: LD_INT 12
24215: PUSH
24216: LD_INT 15
24218: PUSH
24219: LD_INT 16
24221: PUSH
24222: LD_INT 22
24224: PUSH
24225: LD_INT 23
24227: PUSH
24228: LD_INT 26
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 101
24244: PUSH
24245: LD_INT 102
24247: PUSH
24248: LD_INT 105
24250: PUSH
24251: LD_INT 106
24253: PUSH
24254: LD_INT 108
24256: PUSH
24257: LD_INT 116
24259: PUSH
24260: LD_INT 117
24262: PUSH
24263: LD_INT 118
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: ST_TO_ADDR
24280: GO 27263
24282: LD_INT 3
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24378
24290: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 4
24301: PUSH
24302: LD_INT 5
24304: PUSH
24305: LD_INT 11
24307: PUSH
24308: LD_INT 12
24310: PUSH
24311: LD_INT 15
24313: PUSH
24314: LD_INT 16
24316: PUSH
24317: LD_INT 22
24319: PUSH
24320: LD_INT 26
24322: PUSH
24323: LD_INT 36
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 101
24340: PUSH
24341: LD_INT 102
24343: PUSH
24344: LD_INT 105
24346: PUSH
24347: LD_INT 106
24349: PUSH
24350: LD_INT 108
24352: PUSH
24353: LD_INT 116
24355: PUSH
24356: LD_INT 117
24358: PUSH
24359: LD_INT 118
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 27263
24378: LD_INT 4
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24482
24386: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: LD_INT 4
24397: PUSH
24398: LD_INT 5
24400: PUSH
24401: LD_INT 8
24403: PUSH
24404: LD_INT 11
24406: PUSH
24407: LD_INT 12
24409: PUSH
24410: LD_INT 15
24412: PUSH
24413: LD_INT 16
24415: PUSH
24416: LD_INT 22
24418: PUSH
24419: LD_INT 23
24421: PUSH
24422: LD_INT 26
24424: PUSH
24425: LD_INT 36
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 101
24444: PUSH
24445: LD_INT 102
24447: PUSH
24448: LD_INT 105
24450: PUSH
24451: LD_INT 106
24453: PUSH
24454: LD_INT 108
24456: PUSH
24457: LD_INT 116
24459: PUSH
24460: LD_INT 117
24462: PUSH
24463: LD_INT 118
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: ST_TO_ADDR
24480: GO 27263
24482: LD_INT 5
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24602
24490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 4
24501: PUSH
24502: LD_INT 5
24504: PUSH
24505: LD_INT 6
24507: PUSH
24508: LD_INT 8
24510: PUSH
24511: LD_INT 11
24513: PUSH
24514: LD_INT 12
24516: PUSH
24517: LD_INT 15
24519: PUSH
24520: LD_INT 16
24522: PUSH
24523: LD_INT 22
24525: PUSH
24526: LD_INT 23
24528: PUSH
24529: LD_INT 25
24531: PUSH
24532: LD_INT 26
24534: PUSH
24535: LD_INT 36
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 101
24556: PUSH
24557: LD_INT 102
24559: PUSH
24560: LD_INT 105
24562: PUSH
24563: LD_INT 106
24565: PUSH
24566: LD_INT 108
24568: PUSH
24569: LD_INT 109
24571: PUSH
24572: LD_INT 112
24574: PUSH
24575: LD_INT 116
24577: PUSH
24578: LD_INT 117
24580: PUSH
24581: LD_INT 118
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: ST_TO_ADDR
24600: GO 27263
24602: LD_INT 6
24604: DOUBLE
24605: EQUAL
24606: IFTRUE 24610
24608: GO 24742
24610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24611: LD_ADDR_VAR 0 2
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 4
24621: PUSH
24622: LD_INT 5
24624: PUSH
24625: LD_INT 6
24627: PUSH
24628: LD_INT 8
24630: PUSH
24631: LD_INT 11
24633: PUSH
24634: LD_INT 12
24636: PUSH
24637: LD_INT 15
24639: PUSH
24640: LD_INT 16
24642: PUSH
24643: LD_INT 20
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 22
24651: PUSH
24652: LD_INT 23
24654: PUSH
24655: LD_INT 25
24657: PUSH
24658: LD_INT 26
24660: PUSH
24661: LD_INT 30
24663: PUSH
24664: LD_INT 31
24666: PUSH
24667: LD_INT 32
24669: PUSH
24670: LD_INT 36
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 101
24696: PUSH
24697: LD_INT 102
24699: PUSH
24700: LD_INT 105
24702: PUSH
24703: LD_INT 106
24705: PUSH
24706: LD_INT 108
24708: PUSH
24709: LD_INT 109
24711: PUSH
24712: LD_INT 112
24714: PUSH
24715: LD_INT 116
24717: PUSH
24718: LD_INT 117
24720: PUSH
24721: LD_INT 118
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: ST_TO_ADDR
24740: GO 27263
24742: LD_INT 7
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24862
24750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24751: LD_ADDR_VAR 0 2
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 4
24761: PUSH
24762: LD_INT 5
24764: PUSH
24765: LD_INT 7
24767: PUSH
24768: LD_INT 11
24770: PUSH
24771: LD_INT 12
24773: PUSH
24774: LD_INT 15
24776: PUSH
24777: LD_INT 16
24779: PUSH
24780: LD_INT 20
24782: PUSH
24783: LD_INT 21
24785: PUSH
24786: LD_INT 22
24788: PUSH
24789: LD_INT 23
24791: PUSH
24792: LD_INT 25
24794: PUSH
24795: LD_INT 26
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 101
24816: PUSH
24817: LD_INT 102
24819: PUSH
24820: LD_INT 103
24822: PUSH
24823: LD_INT 105
24825: PUSH
24826: LD_INT 106
24828: PUSH
24829: LD_INT 108
24831: PUSH
24832: LD_INT 112
24834: PUSH
24835: LD_INT 116
24837: PUSH
24838: LD_INT 117
24840: PUSH
24841: LD_INT 118
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: ST_TO_ADDR
24860: GO 27263
24862: LD_INT 8
24864: DOUBLE
24865: EQUAL
24866: IFTRUE 24870
24868: GO 25010
24870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24871: LD_ADDR_VAR 0 2
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 4
24881: PUSH
24882: LD_INT 5
24884: PUSH
24885: LD_INT 6
24887: PUSH
24888: LD_INT 7
24890: PUSH
24891: LD_INT 8
24893: PUSH
24894: LD_INT 11
24896: PUSH
24897: LD_INT 12
24899: PUSH
24900: LD_INT 15
24902: PUSH
24903: LD_INT 16
24905: PUSH
24906: LD_INT 20
24908: PUSH
24909: LD_INT 21
24911: PUSH
24912: LD_INT 22
24914: PUSH
24915: LD_INT 23
24917: PUSH
24918: LD_INT 25
24920: PUSH
24921: LD_INT 26
24923: PUSH
24924: LD_INT 30
24926: PUSH
24927: LD_INT 31
24929: PUSH
24930: LD_INT 32
24932: PUSH
24933: LD_INT 36
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 101
24960: PUSH
24961: LD_INT 102
24963: PUSH
24964: LD_INT 103
24966: PUSH
24967: LD_INT 105
24969: PUSH
24970: LD_INT 106
24972: PUSH
24973: LD_INT 108
24975: PUSH
24976: LD_INT 109
24978: PUSH
24979: LD_INT 112
24981: PUSH
24982: LD_INT 116
24984: PUSH
24985: LD_INT 117
24987: PUSH
24988: LD_INT 118
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: ST_TO_ADDR
25008: GO 27263
25010: LD_INT 9
25012: DOUBLE
25013: EQUAL
25014: IFTRUE 25018
25016: GO 25166
25018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 4
25029: PUSH
25030: LD_INT 5
25032: PUSH
25033: LD_INT 6
25035: PUSH
25036: LD_INT 7
25038: PUSH
25039: LD_INT 8
25041: PUSH
25042: LD_INT 11
25044: PUSH
25045: LD_INT 12
25047: PUSH
25048: LD_INT 15
25050: PUSH
25051: LD_INT 16
25053: PUSH
25054: LD_INT 20
25056: PUSH
25057: LD_INT 21
25059: PUSH
25060: LD_INT 22
25062: PUSH
25063: LD_INT 23
25065: PUSH
25066: LD_INT 25
25068: PUSH
25069: LD_INT 26
25071: PUSH
25072: LD_INT 28
25074: PUSH
25075: LD_INT 30
25077: PUSH
25078: LD_INT 31
25080: PUSH
25081: LD_INT 32
25083: PUSH
25084: LD_INT 36
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 101
25112: PUSH
25113: LD_INT 102
25115: PUSH
25116: LD_INT 103
25118: PUSH
25119: LD_INT 105
25121: PUSH
25122: LD_INT 106
25124: PUSH
25125: LD_INT 108
25127: PUSH
25128: LD_INT 109
25130: PUSH
25131: LD_INT 112
25133: PUSH
25134: LD_INT 114
25136: PUSH
25137: LD_INT 116
25139: PUSH
25140: LD_INT 117
25142: PUSH
25143: LD_INT 118
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: ST_TO_ADDR
25164: GO 27263
25166: LD_INT 10
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25370
25174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
25175: LD_ADDR_VAR 0 2
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 4
25185: PUSH
25186: LD_INT 5
25188: PUSH
25189: LD_INT 6
25191: PUSH
25192: LD_INT 7
25194: PUSH
25195: LD_INT 8
25197: PUSH
25198: LD_INT 9
25200: PUSH
25201: LD_INT 10
25203: PUSH
25204: LD_INT 11
25206: PUSH
25207: LD_INT 12
25209: PUSH
25210: LD_INT 13
25212: PUSH
25213: LD_INT 14
25215: PUSH
25216: LD_INT 15
25218: PUSH
25219: LD_INT 16
25221: PUSH
25222: LD_INT 17
25224: PUSH
25225: LD_INT 18
25227: PUSH
25228: LD_INT 19
25230: PUSH
25231: LD_INT 20
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 22
25239: PUSH
25240: LD_INT 23
25242: PUSH
25243: LD_INT 24
25245: PUSH
25246: LD_INT 25
25248: PUSH
25249: LD_INT 26
25251: PUSH
25252: LD_INT 28
25254: PUSH
25255: LD_INT 30
25257: PUSH
25258: LD_INT 31
25260: PUSH
25261: LD_INT 32
25263: PUSH
25264: LD_INT 36
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 101
25300: PUSH
25301: LD_INT 102
25303: PUSH
25304: LD_INT 103
25306: PUSH
25307: LD_INT 104
25309: PUSH
25310: LD_INT 105
25312: PUSH
25313: LD_INT 106
25315: PUSH
25316: LD_INT 107
25318: PUSH
25319: LD_INT 108
25321: PUSH
25322: LD_INT 109
25324: PUSH
25325: LD_INT 110
25327: PUSH
25328: LD_INT 111
25330: PUSH
25331: LD_INT 112
25333: PUSH
25334: LD_INT 114
25336: PUSH
25337: LD_INT 116
25339: PUSH
25340: LD_INT 117
25342: PUSH
25343: LD_INT 118
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: ST_TO_ADDR
25368: GO 27263
25370: LD_INT 11
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25582
25378: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25379: LD_ADDR_VAR 0 2
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 4
25392: PUSH
25393: LD_INT 5
25395: PUSH
25396: LD_INT 6
25398: PUSH
25399: LD_INT 7
25401: PUSH
25402: LD_INT 8
25404: PUSH
25405: LD_INT 9
25407: PUSH
25408: LD_INT 10
25410: PUSH
25411: LD_INT 11
25413: PUSH
25414: LD_INT 12
25416: PUSH
25417: LD_INT 13
25419: PUSH
25420: LD_INT 14
25422: PUSH
25423: LD_INT 15
25425: PUSH
25426: LD_INT 16
25428: PUSH
25429: LD_INT 17
25431: PUSH
25432: LD_INT 18
25434: PUSH
25435: LD_INT 19
25437: PUSH
25438: LD_INT 20
25440: PUSH
25441: LD_INT 21
25443: PUSH
25444: LD_INT 22
25446: PUSH
25447: LD_INT 23
25449: PUSH
25450: LD_INT 24
25452: PUSH
25453: LD_INT 25
25455: PUSH
25456: LD_INT 26
25458: PUSH
25459: LD_INT 28
25461: PUSH
25462: LD_INT 30
25464: PUSH
25465: LD_INT 31
25467: PUSH
25468: LD_INT 32
25470: PUSH
25471: LD_INT 34
25473: PUSH
25474: LD_INT 36
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 101
25512: PUSH
25513: LD_INT 102
25515: PUSH
25516: LD_INT 103
25518: PUSH
25519: LD_INT 104
25521: PUSH
25522: LD_INT 105
25524: PUSH
25525: LD_INT 106
25527: PUSH
25528: LD_INT 107
25530: PUSH
25531: LD_INT 108
25533: PUSH
25534: LD_INT 109
25536: PUSH
25537: LD_INT 110
25539: PUSH
25540: LD_INT 111
25542: PUSH
25543: LD_INT 112
25545: PUSH
25546: LD_INT 114
25548: PUSH
25549: LD_INT 116
25551: PUSH
25552: LD_INT 117
25554: PUSH
25555: LD_INT 118
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: ST_TO_ADDR
25580: GO 27263
25582: LD_INT 12
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25810
25590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 3
25604: PUSH
25605: LD_INT 4
25607: PUSH
25608: LD_INT 5
25610: PUSH
25611: LD_INT 6
25613: PUSH
25614: LD_INT 7
25616: PUSH
25617: LD_INT 8
25619: PUSH
25620: LD_INT 9
25622: PUSH
25623: LD_INT 10
25625: PUSH
25626: LD_INT 11
25628: PUSH
25629: LD_INT 12
25631: PUSH
25632: LD_INT 13
25634: PUSH
25635: LD_INT 14
25637: PUSH
25638: LD_INT 15
25640: PUSH
25641: LD_INT 16
25643: PUSH
25644: LD_INT 17
25646: PUSH
25647: LD_INT 18
25649: PUSH
25650: LD_INT 19
25652: PUSH
25653: LD_INT 20
25655: PUSH
25656: LD_INT 21
25658: PUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 23
25664: PUSH
25665: LD_INT 24
25667: PUSH
25668: LD_INT 25
25670: PUSH
25671: LD_INT 26
25673: PUSH
25674: LD_INT 27
25676: PUSH
25677: LD_INT 28
25679: PUSH
25680: LD_INT 30
25682: PUSH
25683: LD_INT 31
25685: PUSH
25686: LD_INT 32
25688: PUSH
25689: LD_INT 33
25691: PUSH
25692: LD_INT 34
25694: PUSH
25695: LD_INT 36
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 101
25736: PUSH
25737: LD_INT 102
25739: PUSH
25740: LD_INT 103
25742: PUSH
25743: LD_INT 104
25745: PUSH
25746: LD_INT 105
25748: PUSH
25749: LD_INT 106
25751: PUSH
25752: LD_INT 107
25754: PUSH
25755: LD_INT 108
25757: PUSH
25758: LD_INT 109
25760: PUSH
25761: LD_INT 110
25763: PUSH
25764: LD_INT 111
25766: PUSH
25767: LD_INT 112
25769: PUSH
25770: LD_INT 113
25772: PUSH
25773: LD_INT 114
25775: PUSH
25776: LD_INT 116
25778: PUSH
25779: LD_INT 117
25781: PUSH
25782: LD_INT 118
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 27263
25810: LD_INT 13
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 26026
25818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25819: LD_ADDR_VAR 0 2
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: LD_INT 4
25835: PUSH
25836: LD_INT 5
25838: PUSH
25839: LD_INT 8
25841: PUSH
25842: LD_INT 9
25844: PUSH
25845: LD_INT 10
25847: PUSH
25848: LD_INT 11
25850: PUSH
25851: LD_INT 12
25853: PUSH
25854: LD_INT 14
25856: PUSH
25857: LD_INT 15
25859: PUSH
25860: LD_INT 16
25862: PUSH
25863: LD_INT 17
25865: PUSH
25866: LD_INT 18
25868: PUSH
25869: LD_INT 19
25871: PUSH
25872: LD_INT 20
25874: PUSH
25875: LD_INT 21
25877: PUSH
25878: LD_INT 22
25880: PUSH
25881: LD_INT 23
25883: PUSH
25884: LD_INT 24
25886: PUSH
25887: LD_INT 25
25889: PUSH
25890: LD_INT 26
25892: PUSH
25893: LD_INT 27
25895: PUSH
25896: LD_INT 28
25898: PUSH
25899: LD_INT 30
25901: PUSH
25902: LD_INT 31
25904: PUSH
25905: LD_INT 32
25907: PUSH
25908: LD_INT 33
25910: PUSH
25911: LD_INT 34
25913: PUSH
25914: LD_INT 36
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 101
25952: PUSH
25953: LD_INT 102
25955: PUSH
25956: LD_INT 103
25958: PUSH
25959: LD_INT 104
25961: PUSH
25962: LD_INT 105
25964: PUSH
25965: LD_INT 106
25967: PUSH
25968: LD_INT 107
25970: PUSH
25971: LD_INT 108
25973: PUSH
25974: LD_INT 109
25976: PUSH
25977: LD_INT 110
25979: PUSH
25980: LD_INT 111
25982: PUSH
25983: LD_INT 112
25985: PUSH
25986: LD_INT 113
25988: PUSH
25989: LD_INT 114
25991: PUSH
25992: LD_INT 116
25994: PUSH
25995: LD_INT 117
25997: PUSH
25998: LD_INT 118
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: ST_TO_ADDR
26024: GO 27263
26026: LD_INT 14
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26258
26034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
26035: LD_ADDR_VAR 0 2
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: LD_INT 3
26048: PUSH
26049: LD_INT 4
26051: PUSH
26052: LD_INT 5
26054: PUSH
26055: LD_INT 6
26057: PUSH
26058: LD_INT 7
26060: PUSH
26061: LD_INT 8
26063: PUSH
26064: LD_INT 9
26066: PUSH
26067: LD_INT 10
26069: PUSH
26070: LD_INT 11
26072: PUSH
26073: LD_INT 12
26075: PUSH
26076: LD_INT 13
26078: PUSH
26079: LD_INT 14
26081: PUSH
26082: LD_INT 15
26084: PUSH
26085: LD_INT 16
26087: PUSH
26088: LD_INT 17
26090: PUSH
26091: LD_INT 18
26093: PUSH
26094: LD_INT 19
26096: PUSH
26097: LD_INT 20
26099: PUSH
26100: LD_INT 21
26102: PUSH
26103: LD_INT 22
26105: PUSH
26106: LD_INT 23
26108: PUSH
26109: LD_INT 24
26111: PUSH
26112: LD_INT 25
26114: PUSH
26115: LD_INT 26
26117: PUSH
26118: LD_INT 27
26120: PUSH
26121: LD_INT 28
26123: PUSH
26124: LD_INT 29
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 31
26132: PUSH
26133: LD_INT 32
26135: PUSH
26136: LD_INT 33
26138: PUSH
26139: LD_INT 34
26141: PUSH
26142: LD_INT 36
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 101
26184: PUSH
26185: LD_INT 102
26187: PUSH
26188: LD_INT 103
26190: PUSH
26191: LD_INT 104
26193: PUSH
26194: LD_INT 105
26196: PUSH
26197: LD_INT 106
26199: PUSH
26200: LD_INT 107
26202: PUSH
26203: LD_INT 108
26205: PUSH
26206: LD_INT 109
26208: PUSH
26209: LD_INT 110
26211: PUSH
26212: LD_INT 111
26214: PUSH
26215: LD_INT 112
26217: PUSH
26218: LD_INT 113
26220: PUSH
26221: LD_INT 114
26223: PUSH
26224: LD_INT 116
26226: PUSH
26227: LD_INT 117
26229: PUSH
26230: LD_INT 118
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: ST_TO_ADDR
26256: GO 27263
26258: LD_INT 15
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26266
26264: GO 26490
26266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26267: LD_ADDR_VAR 0 2
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 3
26280: PUSH
26281: LD_INT 4
26283: PUSH
26284: LD_INT 5
26286: PUSH
26287: LD_INT 6
26289: PUSH
26290: LD_INT 7
26292: PUSH
26293: LD_INT 8
26295: PUSH
26296: LD_INT 9
26298: PUSH
26299: LD_INT 10
26301: PUSH
26302: LD_INT 11
26304: PUSH
26305: LD_INT 12
26307: PUSH
26308: LD_INT 13
26310: PUSH
26311: LD_INT 14
26313: PUSH
26314: LD_INT 15
26316: PUSH
26317: LD_INT 16
26319: PUSH
26320: LD_INT 17
26322: PUSH
26323: LD_INT 18
26325: PUSH
26326: LD_INT 19
26328: PUSH
26329: LD_INT 20
26331: PUSH
26332: LD_INT 21
26334: PUSH
26335: LD_INT 22
26337: PUSH
26338: LD_INT 23
26340: PUSH
26341: LD_INT 24
26343: PUSH
26344: LD_INT 25
26346: PUSH
26347: LD_INT 26
26349: PUSH
26350: LD_INT 27
26352: PUSH
26353: LD_INT 28
26355: PUSH
26356: LD_INT 29
26358: PUSH
26359: LD_INT 30
26361: PUSH
26362: LD_INT 31
26364: PUSH
26365: LD_INT 32
26367: PUSH
26368: LD_INT 33
26370: PUSH
26371: LD_INT 34
26373: PUSH
26374: LD_INT 36
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 101
26416: PUSH
26417: LD_INT 102
26419: PUSH
26420: LD_INT 103
26422: PUSH
26423: LD_INT 104
26425: PUSH
26426: LD_INT 105
26428: PUSH
26429: LD_INT 106
26431: PUSH
26432: LD_INT 107
26434: PUSH
26435: LD_INT 108
26437: PUSH
26438: LD_INT 109
26440: PUSH
26441: LD_INT 110
26443: PUSH
26444: LD_INT 111
26446: PUSH
26447: LD_INT 112
26449: PUSH
26450: LD_INT 113
26452: PUSH
26453: LD_INT 114
26455: PUSH
26456: LD_INT 116
26458: PUSH
26459: LD_INT 117
26461: PUSH
26462: LD_INT 118
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: ST_TO_ADDR
26488: GO 27263
26490: LD_INT 16
26492: DOUBLE
26493: EQUAL
26494: IFTRUE 26498
26496: GO 26634
26498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 4
26509: PUSH
26510: LD_INT 5
26512: PUSH
26513: LD_INT 7
26515: PUSH
26516: LD_INT 11
26518: PUSH
26519: LD_INT 12
26521: PUSH
26522: LD_INT 15
26524: PUSH
26525: LD_INT 16
26527: PUSH
26528: LD_INT 20
26530: PUSH
26531: LD_INT 21
26533: PUSH
26534: LD_INT 22
26536: PUSH
26537: LD_INT 23
26539: PUSH
26540: LD_INT 25
26542: PUSH
26543: LD_INT 26
26545: PUSH
26546: LD_INT 30
26548: PUSH
26549: LD_INT 31
26551: PUSH
26552: LD_INT 32
26554: PUSH
26555: LD_INT 33
26557: PUSH
26558: LD_INT 34
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 101
26584: PUSH
26585: LD_INT 102
26587: PUSH
26588: LD_INT 103
26590: PUSH
26591: LD_INT 106
26593: PUSH
26594: LD_INT 108
26596: PUSH
26597: LD_INT 112
26599: PUSH
26600: LD_INT 113
26602: PUSH
26603: LD_INT 114
26605: PUSH
26606: LD_INT 116
26608: PUSH
26609: LD_INT 117
26611: PUSH
26612: LD_INT 118
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: ST_TO_ADDR
26632: GO 27263
26634: LD_INT 17
26636: DOUBLE
26637: EQUAL
26638: IFTRUE 26642
26640: GO 26866
26642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 3
26656: PUSH
26657: LD_INT 4
26659: PUSH
26660: LD_INT 5
26662: PUSH
26663: LD_INT 6
26665: PUSH
26666: LD_INT 7
26668: PUSH
26669: LD_INT 8
26671: PUSH
26672: LD_INT 9
26674: PUSH
26675: LD_INT 10
26677: PUSH
26678: LD_INT 11
26680: PUSH
26681: LD_INT 12
26683: PUSH
26684: LD_INT 13
26686: PUSH
26687: LD_INT 14
26689: PUSH
26690: LD_INT 15
26692: PUSH
26693: LD_INT 16
26695: PUSH
26696: LD_INT 17
26698: PUSH
26699: LD_INT 18
26701: PUSH
26702: LD_INT 19
26704: PUSH
26705: LD_INT 20
26707: PUSH
26708: LD_INT 21
26710: PUSH
26711: LD_INT 22
26713: PUSH
26714: LD_INT 23
26716: PUSH
26717: LD_INT 24
26719: PUSH
26720: LD_INT 25
26722: PUSH
26723: LD_INT 26
26725: PUSH
26726: LD_INT 27
26728: PUSH
26729: LD_INT 28
26731: PUSH
26732: LD_INT 29
26734: PUSH
26735: LD_INT 30
26737: PUSH
26738: LD_INT 31
26740: PUSH
26741: LD_INT 32
26743: PUSH
26744: LD_INT 33
26746: PUSH
26747: LD_INT 34
26749: PUSH
26750: LD_INT 36
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 101
26792: PUSH
26793: LD_INT 102
26795: PUSH
26796: LD_INT 103
26798: PUSH
26799: LD_INT 104
26801: PUSH
26802: LD_INT 105
26804: PUSH
26805: LD_INT 106
26807: PUSH
26808: LD_INT 107
26810: PUSH
26811: LD_INT 108
26813: PUSH
26814: LD_INT 109
26816: PUSH
26817: LD_INT 110
26819: PUSH
26820: LD_INT 111
26822: PUSH
26823: LD_INT 112
26825: PUSH
26826: LD_INT 113
26828: PUSH
26829: LD_INT 114
26831: PUSH
26832: LD_INT 116
26834: PUSH
26835: LD_INT 117
26837: PUSH
26838: LD_INT 118
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: ST_TO_ADDR
26864: GO 27263
26866: LD_INT 18
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 27022
26874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26875: LD_ADDR_VAR 0 2
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: LD_INT 4
26885: PUSH
26886: LD_INT 5
26888: PUSH
26889: LD_INT 7
26891: PUSH
26892: LD_INT 11
26894: PUSH
26895: LD_INT 12
26897: PUSH
26898: LD_INT 15
26900: PUSH
26901: LD_INT 16
26903: PUSH
26904: LD_INT 20
26906: PUSH
26907: LD_INT 21
26909: PUSH
26910: LD_INT 22
26912: PUSH
26913: LD_INT 23
26915: PUSH
26916: LD_INT 25
26918: PUSH
26919: LD_INT 26
26921: PUSH
26922: LD_INT 30
26924: PUSH
26925: LD_INT 31
26927: PUSH
26928: LD_INT 32
26930: PUSH
26931: LD_INT 33
26933: PUSH
26934: LD_INT 34
26936: PUSH
26937: LD_INT 35
26939: PUSH
26940: LD_INT 36
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 101
26968: PUSH
26969: LD_INT 102
26971: PUSH
26972: LD_INT 103
26974: PUSH
26975: LD_INT 106
26977: PUSH
26978: LD_INT 108
26980: PUSH
26981: LD_INT 112
26983: PUSH
26984: LD_INT 113
26986: PUSH
26987: LD_INT 114
26989: PUSH
26990: LD_INT 115
26992: PUSH
26993: LD_INT 116
26995: PUSH
26996: LD_INT 117
26998: PUSH
26999: LD_INT 118
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: ST_TO_ADDR
27020: GO 27263
27022: LD_INT 19
27024: DOUBLE
27025: EQUAL
27026: IFTRUE 27030
27028: GO 27262
27030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
27031: LD_ADDR_VAR 0 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: LD_INT 4
27047: PUSH
27048: LD_INT 5
27050: PUSH
27051: LD_INT 6
27053: PUSH
27054: LD_INT 7
27056: PUSH
27057: LD_INT 8
27059: PUSH
27060: LD_INT 9
27062: PUSH
27063: LD_INT 10
27065: PUSH
27066: LD_INT 11
27068: PUSH
27069: LD_INT 12
27071: PUSH
27072: LD_INT 13
27074: PUSH
27075: LD_INT 14
27077: PUSH
27078: LD_INT 15
27080: PUSH
27081: LD_INT 16
27083: PUSH
27084: LD_INT 17
27086: PUSH
27087: LD_INT 18
27089: PUSH
27090: LD_INT 19
27092: PUSH
27093: LD_INT 20
27095: PUSH
27096: LD_INT 21
27098: PUSH
27099: LD_INT 22
27101: PUSH
27102: LD_INT 23
27104: PUSH
27105: LD_INT 24
27107: PUSH
27108: LD_INT 25
27110: PUSH
27111: LD_INT 26
27113: PUSH
27114: LD_INT 27
27116: PUSH
27117: LD_INT 28
27119: PUSH
27120: LD_INT 29
27122: PUSH
27123: LD_INT 30
27125: PUSH
27126: LD_INT 31
27128: PUSH
27129: LD_INT 32
27131: PUSH
27132: LD_INT 33
27134: PUSH
27135: LD_INT 34
27137: PUSH
27138: LD_INT 35
27140: PUSH
27141: LD_INT 36
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 101
27184: PUSH
27185: LD_INT 102
27187: PUSH
27188: LD_INT 103
27190: PUSH
27191: LD_INT 104
27193: PUSH
27194: LD_INT 105
27196: PUSH
27197: LD_INT 106
27199: PUSH
27200: LD_INT 107
27202: PUSH
27203: LD_INT 108
27205: PUSH
27206: LD_INT 109
27208: PUSH
27209: LD_INT 110
27211: PUSH
27212: LD_INT 111
27214: PUSH
27215: LD_INT 112
27217: PUSH
27218: LD_INT 113
27220: PUSH
27221: LD_INT 114
27223: PUSH
27224: LD_INT 115
27226: PUSH
27227: LD_INT 116
27229: PUSH
27230: LD_INT 117
27232: PUSH
27233: LD_INT 118
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: ST_TO_ADDR
27260: GO 27263
27262: POP
// end else
27263: GO 27494
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27265: LD_ADDR_VAR 0 2
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 4
27281: PUSH
27282: LD_INT 5
27284: PUSH
27285: LD_INT 6
27287: PUSH
27288: LD_INT 7
27290: PUSH
27291: LD_INT 8
27293: PUSH
27294: LD_INT 9
27296: PUSH
27297: LD_INT 10
27299: PUSH
27300: LD_INT 11
27302: PUSH
27303: LD_INT 12
27305: PUSH
27306: LD_INT 13
27308: PUSH
27309: LD_INT 14
27311: PUSH
27312: LD_INT 15
27314: PUSH
27315: LD_INT 16
27317: PUSH
27318: LD_INT 17
27320: PUSH
27321: LD_INT 18
27323: PUSH
27324: LD_INT 19
27326: PUSH
27327: LD_INT 20
27329: PUSH
27330: LD_INT 21
27332: PUSH
27333: LD_INT 22
27335: PUSH
27336: LD_INT 23
27338: PUSH
27339: LD_INT 24
27341: PUSH
27342: LD_INT 25
27344: PUSH
27345: LD_INT 26
27347: PUSH
27348: LD_INT 27
27350: PUSH
27351: LD_INT 28
27353: PUSH
27354: LD_INT 29
27356: PUSH
27357: LD_INT 30
27359: PUSH
27360: LD_INT 31
27362: PUSH
27363: LD_INT 32
27365: PUSH
27366: LD_INT 33
27368: PUSH
27369: LD_INT 34
27371: PUSH
27372: LD_INT 35
27374: PUSH
27375: LD_INT 36
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 101
27418: PUSH
27419: LD_INT 102
27421: PUSH
27422: LD_INT 103
27424: PUSH
27425: LD_INT 104
27427: PUSH
27428: LD_INT 105
27430: PUSH
27431: LD_INT 106
27433: PUSH
27434: LD_INT 107
27436: PUSH
27437: LD_INT 108
27439: PUSH
27440: LD_INT 109
27442: PUSH
27443: LD_INT 110
27445: PUSH
27446: LD_INT 111
27448: PUSH
27449: LD_INT 112
27451: PUSH
27452: LD_INT 113
27454: PUSH
27455: LD_INT 114
27457: PUSH
27458: LD_INT 115
27460: PUSH
27461: LD_INT 116
27463: PUSH
27464: LD_INT 117
27466: PUSH
27467: LD_INT 118
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: ST_TO_ADDR
// if result then
27494: LD_VAR 0 2
27498: IFFALSE 28284
// begin normal :=  ;
27500: LD_ADDR_VAR 0 5
27504: PUSH
27505: LD_STRING 
27507: ST_TO_ADDR
// hardcore :=  ;
27508: LD_ADDR_VAR 0 6
27512: PUSH
27513: LD_STRING 
27515: ST_TO_ADDR
// active :=  ;
27516: LD_ADDR_VAR 0 7
27520: PUSH
27521: LD_STRING 
27523: ST_TO_ADDR
// for i = 1 to normalCounter do
27524: LD_ADDR_VAR 0 8
27528: PUSH
27529: DOUBLE
27530: LD_INT 1
27532: DEC
27533: ST_TO_ADDR
27534: LD_EXP 52
27538: PUSH
27539: FOR_TO
27540: IFFALSE 27641
// begin tmp := 0 ;
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_STRING 0
27549: ST_TO_ADDR
// if result [ 1 ] then
27550: LD_VAR 0 2
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: IFFALSE 27623
// if result [ 1 ] [ 1 ] = i then
27560: LD_VAR 0 2
27564: PUSH
27565: LD_INT 1
27567: ARRAY
27568: PUSH
27569: LD_INT 1
27571: ARRAY
27572: PUSH
27573: LD_VAR 0 8
27577: EQUAL
27578: IFFALSE 27623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27580: LD_ADDR_VAR 0 2
27584: PUSH
27585: LD_VAR 0 2
27589: PPUSH
27590: LD_INT 1
27592: PPUSH
27593: LD_VAR 0 2
27597: PUSH
27598: LD_INT 1
27600: ARRAY
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 3
27609: PPUSH
27610: CALL_OW 1
27614: ST_TO_ADDR
// tmp := 1 ;
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: LD_STRING 1
27622: ST_TO_ADDR
// end ; normal := normal & tmp ;
27623: LD_ADDR_VAR 0 5
27627: PUSH
27628: LD_VAR 0 5
27632: PUSH
27633: LD_VAR 0 3
27637: STR
27638: ST_TO_ADDR
// end ;
27639: GO 27539
27641: POP
27642: POP
// for i = 1 to hardcoreCounter do
27643: LD_ADDR_VAR 0 8
27647: PUSH
27648: DOUBLE
27649: LD_INT 1
27651: DEC
27652: ST_TO_ADDR
27653: LD_EXP 53
27657: PUSH
27658: FOR_TO
27659: IFFALSE 27764
// begin tmp := 0 ;
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_STRING 0
27668: ST_TO_ADDR
// if result [ 2 ] then
27669: LD_VAR 0 2
27673: PUSH
27674: LD_INT 2
27676: ARRAY
27677: IFFALSE 27746
// if result [ 2 ] [ 1 ] = 100 + i then
27679: LD_VAR 0 2
27683: PUSH
27684: LD_INT 2
27686: ARRAY
27687: PUSH
27688: LD_INT 1
27690: ARRAY
27691: PUSH
27692: LD_INT 100
27694: PUSH
27695: LD_VAR 0 8
27699: PLUS
27700: EQUAL
27701: IFFALSE 27746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27703: LD_ADDR_VAR 0 2
27707: PUSH
27708: LD_VAR 0 2
27712: PPUSH
27713: LD_INT 2
27715: PPUSH
27716: LD_VAR 0 2
27720: PUSH
27721: LD_INT 2
27723: ARRAY
27724: PPUSH
27725: LD_INT 1
27727: PPUSH
27728: CALL_OW 3
27732: PPUSH
27733: CALL_OW 1
27737: ST_TO_ADDR
// tmp := 1 ;
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_STRING 1
27745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27746: LD_ADDR_VAR 0 6
27750: PUSH
27751: LD_VAR 0 6
27755: PUSH
27756: LD_VAR 0 3
27760: STR
27761: ST_TO_ADDR
// end ;
27762: GO 27658
27764: POP
27765: POP
// if isGameLoad then
27766: LD_VAR 0 1
27770: IFFALSE 28245
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27772: LD_ADDR_VAR 0 4
27776: PUSH
27777: LD_EXP 56
27781: PUSH
27782: LD_EXP 55
27786: PUSH
27787: LD_EXP 57
27791: PUSH
27792: LD_EXP 54
27796: PUSH
27797: LD_EXP 58
27801: PUSH
27802: LD_EXP 59
27806: PUSH
27807: LD_EXP 60
27811: PUSH
27812: LD_EXP 61
27816: PUSH
27817: LD_EXP 62
27821: PUSH
27822: LD_EXP 63
27826: PUSH
27827: LD_EXP 64
27831: PUSH
27832: LD_EXP 65
27836: PUSH
27837: LD_EXP 66
27841: PUSH
27842: LD_EXP 67
27846: PUSH
27847: LD_EXP 75
27851: PUSH
27852: LD_EXP 76
27856: PUSH
27857: LD_EXP 77
27861: PUSH
27862: LD_EXP 78
27866: PUSH
27867: LD_EXP 80
27871: PUSH
27872: LD_EXP 81
27876: PUSH
27877: LD_EXP 82
27881: PUSH
27882: LD_EXP 85
27886: PUSH
27887: LD_EXP 87
27891: PUSH
27892: LD_EXP 88
27896: PUSH
27897: LD_EXP 89
27901: PUSH
27902: LD_EXP 91
27906: PUSH
27907: LD_EXP 92
27911: PUSH
27912: LD_EXP 95
27916: PUSH
27917: LD_EXP 96
27921: PUSH
27922: LD_EXP 97
27926: PUSH
27927: LD_EXP 98
27931: PUSH
27932: LD_EXP 99
27936: PUSH
27937: LD_EXP 100
27941: PUSH
27942: LD_EXP 101
27946: PUSH
27947: LD_EXP 102
27951: PUSH
27952: LD_EXP 103
27956: PUSH
27957: LD_EXP 68
27961: PUSH
27962: LD_EXP 69
27966: PUSH
27967: LD_EXP 72
27971: PUSH
27972: LD_EXP 73
27976: PUSH
27977: LD_EXP 74
27981: PUSH
27982: LD_EXP 70
27986: PUSH
27987: LD_EXP 71
27991: PUSH
27992: LD_EXP 79
27996: PUSH
27997: LD_EXP 83
28001: PUSH
28002: LD_EXP 84
28006: PUSH
28007: LD_EXP 86
28011: PUSH
28012: LD_EXP 90
28016: PUSH
28017: LD_EXP 93
28021: PUSH
28022: LD_EXP 94
28026: PUSH
28027: LD_EXP 104
28031: PUSH
28032: LD_EXP 105
28036: PUSH
28037: LD_EXP 106
28041: PUSH
28042: LD_EXP 107
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// tmp :=  ;
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_STRING 
28110: ST_TO_ADDR
// for i = 1 to normalCounter do
28111: LD_ADDR_VAR 0 8
28115: PUSH
28116: DOUBLE
28117: LD_INT 1
28119: DEC
28120: ST_TO_ADDR
28121: LD_EXP 52
28125: PUSH
28126: FOR_TO
28127: IFFALSE 28163
// begin if flags [ i ] then
28129: LD_VAR 0 4
28133: PUSH
28134: LD_VAR 0 8
28138: ARRAY
28139: IFFALSE 28161
// tmp := tmp & i & ; ;
28141: LD_ADDR_VAR 0 3
28145: PUSH
28146: LD_VAR 0 3
28150: PUSH
28151: LD_VAR 0 8
28155: STR
28156: PUSH
28157: LD_STRING ;
28159: STR
28160: ST_TO_ADDR
// end ;
28161: GO 28126
28163: POP
28164: POP
// for i = 1 to hardcoreCounter do
28165: LD_ADDR_VAR 0 8
28169: PUSH
28170: DOUBLE
28171: LD_INT 1
28173: DEC
28174: ST_TO_ADDR
28175: LD_EXP 53
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28227
// begin if flags [ normalCounter + i ] then
28183: LD_VAR 0 4
28187: PUSH
28188: LD_EXP 52
28192: PUSH
28193: LD_VAR 0 8
28197: PLUS
28198: ARRAY
28199: IFFALSE 28225
// tmp := tmp & ( 100 + i ) & ; ;
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_VAR 0 3
28210: PUSH
28211: LD_INT 100
28213: PUSH
28214: LD_VAR 0 8
28218: PLUS
28219: STR
28220: PUSH
28221: LD_STRING ;
28223: STR
28224: ST_TO_ADDR
// end ;
28225: GO 28180
28227: POP
28228: POP
// if tmp then
28229: LD_VAR 0 3
28233: IFFALSE 28245
// active := tmp ;
28235: LD_ADDR_VAR 0 7
28239: PUSH
28240: LD_VAR 0 3
28244: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28245: LD_STRING getStreamItemsFromMission("
28247: PUSH
28248: LD_VAR 0 5
28252: STR
28253: PUSH
28254: LD_STRING ","
28256: STR
28257: PUSH
28258: LD_VAR 0 6
28262: STR
28263: PUSH
28264: LD_STRING ","
28266: STR
28267: PUSH
28268: LD_VAR 0 7
28272: STR
28273: PUSH
28274: LD_STRING ")
28276: STR
28277: PPUSH
28278: CALL_OW 559
// end else
28282: GO 28291
// ToLua ( getStreamItemsFromMission("","","") ) ;
28284: LD_STRING getStreamItemsFromMission("","","")
28286: PPUSH
28287: CALL_OW 559
// end ;
28291: LD_VAR 0 2
28295: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28296: LD_EXP 51
28300: IFFALSE 28308
28302: PUSH
28303: LD_EXP 56
28307: AND
28308: IFFALSE 28432
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// begin enable ;
28317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28318: LD_ADDR_VAR 0 2
28322: PUSH
28323: LD_INT 22
28325: PUSH
28326: LD_OWVAR 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 2
28337: PUSH
28338: LD_INT 34
28340: PUSH
28341: LD_INT 7
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 34
28350: PUSH
28351: LD_INT 45
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 34
28360: PUSH
28361: LD_INT 28
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 34
28370: PUSH
28371: LD_INT 47
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PPUSH
28389: CALL_OW 69
28393: ST_TO_ADDR
// if not tmp then
28394: LD_VAR 0 2
28398: NOT
28399: IFFALSE 28403
// exit ;
28401: GO 28432
// for i in tmp do
28403: LD_ADDR_VAR 0 1
28407: PUSH
28408: LD_VAR 0 2
28412: PUSH
28413: FOR_IN
28414: IFFALSE 28430
// begin SetLives ( i , 0 ) ;
28416: LD_VAR 0 1
28420: PPUSH
28421: LD_INT 0
28423: PPUSH
28424: CALL_OW 234
// end ;
28428: GO 28413
28430: POP
28431: POP
// end ;
28432: PPOPN 2
28434: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28435: LD_EXP 51
28439: IFFALSE 28447
28441: PUSH
28442: LD_EXP 57
28446: AND
28447: IFFALSE 28531
28449: GO 28451
28451: DISABLE
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
// begin enable ;
28456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28457: LD_ADDR_VAR 0 2
28461: PUSH
28462: LD_INT 22
28464: PUSH
28465: LD_OWVAR 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 32
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 2
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28531
// for i in tmp do
28502: LD_ADDR_VAR 0 1
28506: PUSH
28507: LD_VAR 0 2
28511: PUSH
28512: FOR_IN
28513: IFFALSE 28529
// begin SetLives ( i , 0 ) ;
28515: LD_VAR 0 1
28519: PPUSH
28520: LD_INT 0
28522: PPUSH
28523: CALL_OW 234
// end ;
28527: GO 28512
28529: POP
28530: POP
// end ;
28531: PPOPN 2
28533: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28534: LD_EXP 51
28538: IFFALSE 28546
28540: PUSH
28541: LD_EXP 54
28545: AND
28546: IFFALSE 28639
28548: GO 28550
28550: DISABLE
28551: LD_INT 0
28553: PPUSH
// begin enable ;
28554: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 25
28577: PUSH
28578: LD_INT 5
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 25
28587: PUSH
28588: LD_INT 9
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 25
28597: PUSH
28598: LD_INT 8
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PPUSH
28615: CALL_OW 69
28619: PUSH
28620: FOR_IN
28621: IFFALSE 28637
// begin SetClass ( i , 1 ) ;
28623: LD_VAR 0 1
28627: PPUSH
28628: LD_INT 1
28630: PPUSH
28631: CALL_OW 336
// end ;
28635: GO 28620
28637: POP
28638: POP
// end ;
28639: PPOPN 1
28641: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28642: LD_EXP 51
28646: IFFALSE 28654
28648: PUSH
28649: LD_EXP 55
28653: AND
28654: IFFALSE 28666
28656: PUSH
28657: LD_OWVAR 65
28661: PUSH
28662: LD_INT 7
28664: LESS
28665: AND
28666: IFFALSE 28680
28668: GO 28670
28670: DISABLE
// begin enable ;
28671: ENABLE
// game_speed := 7 ;
28672: LD_ADDR_OWVAR 65
28676: PUSH
28677: LD_INT 7
28679: ST_TO_ADDR
// end ;
28680: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28681: LD_EXP 51
28685: IFFALSE 28693
28687: PUSH
28688: LD_EXP 58
28692: AND
28693: IFFALSE 28895
28695: GO 28697
28697: DISABLE
28698: LD_INT 0
28700: PPUSH
28701: PPUSH
28702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28703: LD_ADDR_VAR 0 3
28707: PUSH
28708: LD_INT 81
28710: PUSH
28711: LD_OWVAR 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 21
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 69
28738: ST_TO_ADDR
// if not tmp then
28739: LD_VAR 0 3
28743: NOT
28744: IFFALSE 28748
// exit ;
28746: GO 28895
// if tmp > 5 then
28748: LD_VAR 0 3
28752: PUSH
28753: LD_INT 5
28755: GREATER
28756: IFFALSE 28768
// k := 5 else
28758: LD_ADDR_VAR 0 2
28762: PUSH
28763: LD_INT 5
28765: ST_TO_ADDR
28766: GO 28778
// k := tmp ;
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: LD_VAR 0 3
28777: ST_TO_ADDR
// for i := 1 to k do
28778: LD_ADDR_VAR 0 1
28782: PUSH
28783: DOUBLE
28784: LD_INT 1
28786: DEC
28787: ST_TO_ADDR
28788: LD_VAR 0 2
28792: PUSH
28793: FOR_TO
28794: IFFALSE 28893
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28796: LD_VAR 0 3
28800: PUSH
28801: LD_VAR 0 1
28805: ARRAY
28806: PPUSH
28807: LD_VAR 0 1
28811: PUSH
28812: LD_INT 4
28814: MOD
28815: PUSH
28816: LD_INT 1
28818: PLUS
28819: PPUSH
28820: CALL_OW 259
28824: PUSH
28825: LD_INT 10
28827: LESS
28828: IFFALSE 28891
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28830: LD_VAR 0 3
28834: PUSH
28835: LD_VAR 0 1
28839: ARRAY
28840: PPUSH
28841: LD_VAR 0 1
28845: PUSH
28846: LD_INT 4
28848: MOD
28849: PUSH
28850: LD_INT 1
28852: PLUS
28853: PPUSH
28854: LD_VAR 0 3
28858: PUSH
28859: LD_VAR 0 1
28863: ARRAY
28864: PPUSH
28865: LD_VAR 0 1
28869: PUSH
28870: LD_INT 4
28872: MOD
28873: PUSH
28874: LD_INT 1
28876: PLUS
28877: PPUSH
28878: CALL_OW 259
28882: PUSH
28883: LD_INT 1
28885: PLUS
28886: PPUSH
28887: CALL_OW 237
28891: GO 28793
28893: POP
28894: POP
// end ;
28895: PPOPN 3
28897: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28898: LD_EXP 51
28902: IFFALSE 28910
28904: PUSH
28905: LD_EXP 59
28909: AND
28910: IFFALSE 28930
28912: GO 28914
28914: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28915: LD_INT 4
28917: PPUSH
28918: LD_OWVAR 2
28922: PPUSH
28923: LD_INT 0
28925: PPUSH
28926: CALL_OW 324
28930: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28931: LD_EXP 51
28935: IFFALSE 28943
28937: PUSH
28938: LD_EXP 88
28942: AND
28943: IFFALSE 28963
28945: GO 28947
28947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28948: LD_INT 19
28950: PPUSH
28951: LD_OWVAR 2
28955: PPUSH
28956: LD_INT 0
28958: PPUSH
28959: CALL_OW 324
28963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28964: LD_EXP 51
28968: IFFALSE 28976
28970: PUSH
28971: LD_EXP 60
28975: AND
28976: IFFALSE 29078
28978: GO 28980
28980: DISABLE
28981: LD_INT 0
28983: PPUSH
28984: PPUSH
// begin enable ;
28985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28986: LD_ADDR_VAR 0 2
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 34
29008: PUSH
29009: LD_INT 11
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 34
29018: PUSH
29019: LD_INT 30
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 2
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29078
// for i in tmp do
29049: LD_ADDR_VAR 0 1
29053: PUSH
29054: LD_VAR 0 2
29058: PUSH
29059: FOR_IN
29060: IFFALSE 29076
// begin SetLives ( i , 0 ) ;
29062: LD_VAR 0 1
29066: PPUSH
29067: LD_INT 0
29069: PPUSH
29070: CALL_OW 234
// end ;
29074: GO 29059
29076: POP
29077: POP
// end ;
29078: PPOPN 2
29080: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29081: LD_EXP 51
29085: IFFALSE 29093
29087: PUSH
29088: LD_EXP 61
29092: AND
29093: IFFALSE 29113
29095: GO 29097
29097: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29098: LD_INT 32
29100: PPUSH
29101: LD_OWVAR 2
29105: PPUSH
29106: LD_INT 0
29108: PPUSH
29109: CALL_OW 324
29113: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29114: LD_EXP 51
29118: IFFALSE 29126
29120: PUSH
29121: LD_EXP 62
29125: AND
29126: IFFALSE 29309
29128: GO 29130
29130: DISABLE
29131: LD_INT 0
29133: PPUSH
29134: PPUSH
29135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29136: LD_ADDR_VAR 0 2
29140: PUSH
29141: LD_INT 22
29143: PUSH
29144: LD_OWVAR 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 33
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PPUSH
29167: CALL_OW 69
29171: ST_TO_ADDR
// if not tmp then
29172: LD_VAR 0 2
29176: NOT
29177: IFFALSE 29181
// exit ;
29179: GO 29309
// side := 0 ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_INT 0
29188: ST_TO_ADDR
// for i := 1 to 8 do
29189: LD_ADDR_VAR 0 1
29193: PUSH
29194: DOUBLE
29195: LD_INT 1
29197: DEC
29198: ST_TO_ADDR
29199: LD_INT 8
29201: PUSH
29202: FOR_TO
29203: IFFALSE 29253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29205: LD_OWVAR 2
29209: PUSH
29210: LD_VAR 0 1
29214: NONEQUAL
29215: IFFALSE 29237
29217: PUSH
29218: LD_OWVAR 2
29222: PPUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL_OW 81
29232: PUSH
29233: LD_INT 2
29235: EQUAL
29236: AND
29237: IFFALSE 29251
// begin side := i ;
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: LD_VAR 0 1
29248: ST_TO_ADDR
// break ;
29249: GO 29253
// end ;
29251: GO 29202
29253: POP
29254: POP
// if not side then
29255: LD_VAR 0 3
29259: NOT
29260: IFFALSE 29264
// exit ;
29262: GO 29309
// for i := 1 to tmp do
29264: LD_ADDR_VAR 0 1
29268: PUSH
29269: DOUBLE
29270: LD_INT 1
29272: DEC
29273: ST_TO_ADDR
29274: LD_VAR 0 2
29278: PUSH
29279: FOR_TO
29280: IFFALSE 29307
// if Prob ( 60 ) then
29282: LD_INT 60
29284: PPUSH
29285: CALL_OW 13
29289: IFFALSE 29305
// SetSide ( i , side ) ;
29291: LD_VAR 0 1
29295: PPUSH
29296: LD_VAR 0 3
29300: PPUSH
29301: CALL_OW 235
29305: GO 29279
29307: POP
29308: POP
// end ;
29309: PPOPN 3
29311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29312: LD_EXP 51
29316: IFFALSE 29324
29318: PUSH
29319: LD_EXP 64
29323: AND
29324: IFFALSE 29443
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29332: LD_ADDR_VAR 0 1
29336: PUSH
29337: LD_INT 22
29339: PUSH
29340: LD_OWVAR 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 21
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 23
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: PUSH
29386: FOR_IN
29387: IFFALSE 29441
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 257
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: IN
29417: IFFALSE 29439
// SetClass ( un , rand ( 1 , 4 ) ) ;
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_INT 1
29426: PPUSH
29427: LD_INT 4
29429: PPUSH
29430: CALL_OW 12
29434: PPUSH
29435: CALL_OW 336
29439: GO 29386
29441: POP
29442: POP
// end ;
29443: PPOPN 1
29445: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29446: LD_EXP 51
29450: IFFALSE 29458
29452: PUSH
29453: LD_EXP 63
29457: AND
29458: IFFALSE 29537
29460: GO 29462
29462: DISABLE
29463: LD_INT 0
29465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29466: LD_ADDR_VAR 0 1
29470: PUSH
29471: LD_INT 22
29473: PUSH
29474: LD_OWVAR 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 21
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: ST_TO_ADDR
// if not tmp then
29502: LD_VAR 0 1
29506: NOT
29507: IFFALSE 29511
// exit ;
29509: GO 29537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29511: LD_VAR 0 1
29515: PUSH
29516: LD_INT 1
29518: PPUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 12
29528: ARRAY
29529: PPUSH
29530: LD_INT 100
29532: PPUSH
29533: CALL_OW 234
// end ;
29537: PPOPN 1
29539: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29540: LD_EXP 51
29544: IFFALSE 29552
29546: PUSH
29547: LD_EXP 65
29551: AND
29552: IFFALSE 29650
29554: GO 29556
29556: DISABLE
29557: LD_INT 0
29559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29560: LD_ADDR_VAR 0 1
29564: PUSH
29565: LD_INT 22
29567: PUSH
29568: LD_OWVAR 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 21
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: ST_TO_ADDR
// if not tmp then
29596: LD_VAR 0 1
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 29650
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29605: LD_VAR 0 1
29609: PUSH
29610: LD_INT 1
29612: PPUSH
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 12
29622: ARRAY
29623: PPUSH
29624: LD_INT 1
29626: PPUSH
29627: LD_INT 4
29629: PPUSH
29630: CALL_OW 12
29634: PPUSH
29635: LD_INT 3000
29637: PPUSH
29638: LD_INT 9000
29640: PPUSH
29641: CALL_OW 12
29645: PPUSH
29646: CALL_OW 492
// end ;
29650: PPOPN 1
29652: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29653: LD_EXP 51
29657: IFFALSE 29665
29659: PUSH
29660: LD_EXP 66
29664: AND
29665: IFFALSE 29685
29667: GO 29669
29669: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29670: LD_INT 1
29672: PPUSH
29673: LD_OWVAR 2
29677: PPUSH
29678: LD_INT 0
29680: PPUSH
29681: CALL_OW 324
29685: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29686: LD_EXP 51
29690: IFFALSE 29698
29692: PUSH
29693: LD_EXP 67
29697: AND
29698: IFFALSE 29781
29700: GO 29702
29702: DISABLE
29703: LD_INT 0
29705: PPUSH
29706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29707: LD_ADDR_VAR 0 2
29711: PUSH
29712: LD_INT 22
29714: PUSH
29715: LD_OWVAR 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 21
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: ST_TO_ADDR
// if not tmp then
29743: LD_VAR 0 2
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 29781
// for i in tmp do
29752: LD_ADDR_VAR 0 1
29756: PUSH
29757: LD_VAR 0 2
29761: PUSH
29762: FOR_IN
29763: IFFALSE 29779
// SetBLevel ( i , 10 ) ;
29765: LD_VAR 0 1
29769: PPUSH
29770: LD_INT 10
29772: PPUSH
29773: CALL_OW 241
29777: GO 29762
29779: POP
29780: POP
// end ;
29781: PPOPN 2
29783: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29784: LD_EXP 51
29788: IFFALSE 29796
29790: PUSH
29791: LD_EXP 68
29795: AND
29796: IFFALSE 29907
29798: GO 29800
29800: DISABLE
29801: LD_INT 0
29803: PPUSH
29804: PPUSH
29805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 22
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 25
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 69
29841: ST_TO_ADDR
// if not tmp then
29842: LD_VAR 0 3
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29907
// un := tmp [ rand ( 1 , tmp ) ] ;
29851: LD_ADDR_VAR 0 2
29855: PUSH
29856: LD_VAR 0 3
29860: PUSH
29861: LD_INT 1
29863: PPUSH
29864: LD_VAR 0 3
29868: PPUSH
29869: CALL_OW 12
29873: ARRAY
29874: ST_TO_ADDR
// if Crawls ( un ) then
29875: LD_VAR 0 2
29879: PPUSH
29880: CALL_OW 318
29884: IFFALSE 29895
// ComWalk ( un ) ;
29886: LD_VAR 0 2
29890: PPUSH
29891: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29895: LD_VAR 0 2
29899: PPUSH
29900: LD_INT 5
29902: PPUSH
29903: CALL_OW 336
// end ;
29907: PPOPN 3
29909: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29910: LD_EXP 51
29914: IFFALSE 29922
29916: PUSH
29917: LD_EXP 69
29921: AND
29922: IFFALSE 29934
29924: PUSH
29925: LD_OWVAR 67
29929: PUSH
29930: LD_INT 4
29932: LESS
29933: AND
29934: IFFALSE 29953
29936: GO 29938
29938: DISABLE
// begin Difficulty := Difficulty + 1 ;
29939: LD_ADDR_OWVAR 67
29943: PUSH
29944: LD_OWVAR 67
29948: PUSH
29949: LD_INT 1
29951: PLUS
29952: ST_TO_ADDR
// end ;
29953: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29954: LD_EXP 51
29958: IFFALSE 29966
29960: PUSH
29961: LD_EXP 70
29965: AND
29966: IFFALSE 30069
29968: GO 29970
29970: DISABLE
29971: LD_INT 0
29973: PPUSH
// begin for i := 1 to 5 do
29974: LD_ADDR_VAR 0 1
29978: PUSH
29979: DOUBLE
29980: LD_INT 1
29982: DEC
29983: ST_TO_ADDR
29984: LD_INT 5
29986: PUSH
29987: FOR_TO
29988: IFFALSE 30067
// begin uc_nation := nation_nature ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 0
29997: ST_TO_ADDR
// uc_side := 0 ;
29998: LD_ADDR_OWVAR 20
30002: PUSH
30003: LD_INT 0
30005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30006: LD_ADDR_OWVAR 29
30010: PUSH
30011: LD_INT 12
30013: PUSH
30014: LD_INT 12
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: ST_TO_ADDR
// hc_agressivity := 20 ;
30021: LD_ADDR_OWVAR 35
30025: PUSH
30026: LD_INT 20
30028: ST_TO_ADDR
// hc_class := class_tiger ;
30029: LD_ADDR_OWVAR 28
30033: PUSH
30034: LD_INT 14
30036: ST_TO_ADDR
// hc_gallery :=  ;
30037: LD_ADDR_OWVAR 33
30041: PUSH
30042: LD_STRING 
30044: ST_TO_ADDR
// hc_name :=  ;
30045: LD_ADDR_OWVAR 26
30049: PUSH
30050: LD_STRING 
30052: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30053: CALL_OW 44
30057: PPUSH
30058: LD_INT 0
30060: PPUSH
30061: CALL_OW 51
// end ;
30065: GO 29987
30067: POP
30068: POP
// end ;
30069: PPOPN 1
30071: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30072: LD_EXP 51
30076: IFFALSE 30084
30078: PUSH
30079: LD_EXP 71
30083: AND
30084: IFFALSE 30093
30086: GO 30088
30088: DISABLE
// StreamSibBomb ;
30089: CALL 30094 0 0
30093: END
// export function StreamSibBomb ; var i , x , y ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
// result := false ;
30100: LD_ADDR_VAR 0 1
30104: PUSH
30105: LD_INT 0
30107: ST_TO_ADDR
// for i := 1 to 16 do
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: DOUBLE
30114: LD_INT 1
30116: DEC
30117: ST_TO_ADDR
30118: LD_INT 16
30120: PUSH
30121: FOR_TO
30122: IFFALSE 30321
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_INT 10
30131: PUSH
30132: LD_INT 20
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 40
30140: PUSH
30141: LD_INT 50
30143: PUSH
30144: LD_INT 60
30146: PUSH
30147: LD_INT 70
30149: PUSH
30150: LD_INT 80
30152: PUSH
30153: LD_INT 90
30155: PUSH
30156: LD_INT 100
30158: PUSH
30159: LD_INT 110
30161: PUSH
30162: LD_INT 120
30164: PUSH
30165: LD_INT 130
30167: PUSH
30168: LD_INT 140
30170: PUSH
30171: LD_INT 150
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PPUSH
30194: LD_INT 15
30196: PPUSH
30197: CALL_OW 12
30201: ARRAY
30202: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30203: LD_ADDR_VAR 0 4
30207: PUSH
30208: LD_INT 10
30210: PUSH
30211: LD_INT 20
30213: PUSH
30214: LD_INT 30
30216: PUSH
30217: LD_INT 40
30219: PUSH
30220: LD_INT 50
30222: PUSH
30223: LD_INT 60
30225: PUSH
30226: LD_INT 70
30228: PUSH
30229: LD_INT 80
30231: PUSH
30232: LD_INT 90
30234: PUSH
30235: LD_INT 100
30237: PUSH
30238: LD_INT 110
30240: PUSH
30241: LD_INT 120
30243: PUSH
30244: LD_INT 130
30246: PUSH
30247: LD_INT 140
30249: PUSH
30250: LD_INT 150
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PPUSH
30273: LD_INT 15
30275: PPUSH
30276: CALL_OW 12
30280: ARRAY
30281: ST_TO_ADDR
// if ValidHex ( x , y ) then
30282: LD_VAR 0 3
30286: PPUSH
30287: LD_VAR 0 4
30291: PPUSH
30292: CALL_OW 488
30296: IFFALSE 30319
// begin result := [ x , y ] ;
30298: LD_ADDR_VAR 0 1
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: LD_VAR 0 4
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// break ;
30317: GO 30321
// end ; end ;
30319: GO 30121
30321: POP
30322: POP
// if result then
30323: LD_VAR 0 1
30327: IFFALSE 30387
// begin ToLua ( playSibBomb() ) ;
30329: LD_STRING playSibBomb()
30331: PPUSH
30332: CALL_OW 559
// wait ( 0 0$14 ) ;
30336: LD_INT 490
30338: PPUSH
30339: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30343: LD_VAR 0 1
30347: PUSH
30348: LD_INT 1
30350: ARRAY
30351: PPUSH
30352: LD_VAR 0 1
30356: PUSH
30357: LD_INT 2
30359: ARRAY
30360: PPUSH
30361: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30365: LD_VAR 0 1
30369: PUSH
30370: LD_INT 1
30372: ARRAY
30373: PPUSH
30374: LD_VAR 0 1
30378: PUSH
30379: LD_INT 2
30381: ARRAY
30382: PPUSH
30383: CALL_OW 429
// end ; end ;
30387: LD_VAR 0 1
30391: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30392: LD_EXP 51
30396: IFFALSE 30404
30398: PUSH
30399: LD_EXP 73
30403: AND
30404: IFFALSE 30416
30406: GO 30408
30408: DISABLE
// YouLost (  ) ;
30409: LD_STRING 
30411: PPUSH
30412: CALL_OW 104
30416: END
// every 0 0$1 trigger StreamModeActive and sFog do
30417: LD_EXP 51
30421: IFFALSE 30429
30423: PUSH
30424: LD_EXP 72
30428: AND
30429: IFFALSE 30443
30431: GO 30433
30433: DISABLE
// FogOff ( your_side ) ;
30434: LD_OWVAR 2
30438: PPUSH
30439: CALL_OW 344
30443: END
// every 0 0$1 trigger StreamModeActive and sSun do
30444: LD_EXP 51
30448: IFFALSE 30456
30450: PUSH
30451: LD_EXP 74
30455: AND
30456: IFFALSE 30484
30458: GO 30460
30460: DISABLE
// begin solar_recharge_percent := 0 ;
30461: LD_ADDR_OWVAR 79
30465: PUSH
30466: LD_INT 0
30468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30469: LD_INT 10500
30471: PPUSH
30472: CALL_OW 67
// solar_recharge_percent := 100 ;
30476: LD_ADDR_OWVAR 79
30480: PUSH
30481: LD_INT 100
30483: ST_TO_ADDR
// end ;
30484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30485: LD_EXP 51
30489: IFFALSE 30497
30491: PUSH
30492: LD_EXP 75
30496: AND
30497: IFFALSE 30736
30499: GO 30501
30501: DISABLE
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
// begin tmp := [ ] ;
30507: LD_ADDR_VAR 0 3
30511: PUSH
30512: EMPTY
30513: ST_TO_ADDR
// for i := 1 to 6 do
30514: LD_ADDR_VAR 0 1
30518: PUSH
30519: DOUBLE
30520: LD_INT 1
30522: DEC
30523: ST_TO_ADDR
30524: LD_INT 6
30526: PUSH
30527: FOR_TO
30528: IFFALSE 30633
// begin uc_nation := nation_nature ;
30530: LD_ADDR_OWVAR 21
30534: PUSH
30535: LD_INT 0
30537: ST_TO_ADDR
// uc_side := 0 ;
30538: LD_ADDR_OWVAR 20
30542: PUSH
30543: LD_INT 0
30545: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30546: LD_ADDR_OWVAR 29
30550: PUSH
30551: LD_INT 12
30553: PUSH
30554: LD_INT 12
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// hc_agressivity := 20 ;
30561: LD_ADDR_OWVAR 35
30565: PUSH
30566: LD_INT 20
30568: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30569: LD_ADDR_OWVAR 28
30573: PUSH
30574: LD_INT 17
30576: ST_TO_ADDR
// hc_gallery :=  ;
30577: LD_ADDR_OWVAR 33
30581: PUSH
30582: LD_STRING 
30584: ST_TO_ADDR
// hc_name :=  ;
30585: LD_ADDR_OWVAR 26
30589: PUSH
30590: LD_STRING 
30592: ST_TO_ADDR
// un := CreateHuman ;
30593: LD_ADDR_VAR 0 2
30597: PUSH
30598: CALL_OW 44
30602: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30603: LD_VAR 0 2
30607: PPUSH
30608: LD_INT 1
30610: PPUSH
30611: CALL_OW 51
// tmp := tmp ^ un ;
30615: LD_ADDR_VAR 0 3
30619: PUSH
30620: LD_VAR 0 3
30624: PUSH
30625: LD_VAR 0 2
30629: ADD
30630: ST_TO_ADDR
// end ;
30631: GO 30527
30633: POP
30634: POP
// repeat wait ( 0 0$1 ) ;
30635: LD_INT 35
30637: PPUSH
30638: CALL_OW 67
// for un in tmp do
30642: LD_ADDR_VAR 0 2
30646: PUSH
30647: LD_VAR 0 3
30651: PUSH
30652: FOR_IN
30653: IFFALSE 30727
// begin if IsDead ( un ) then
30655: LD_VAR 0 2
30659: PPUSH
30660: CALL_OW 301
30664: IFFALSE 30684
// begin tmp := tmp diff un ;
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: LD_VAR 0 3
30675: PUSH
30676: LD_VAR 0 2
30680: DIFF
30681: ST_TO_ADDR
// continue ;
30682: GO 30652
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30684: LD_VAR 0 2
30688: PPUSH
30689: LD_INT 3
30691: PUSH
30692: LD_INT 22
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PPUSH
30706: CALL_OW 69
30710: PPUSH
30711: LD_VAR 0 2
30715: PPUSH
30716: CALL_OW 74
30720: PPUSH
30721: CALL_OW 115
// end ;
30725: GO 30652
30727: POP
30728: POP
// until not tmp ;
30729: LD_VAR 0 3
30733: NOT
30734: IFFALSE 30635
// end ;
30736: PPOPN 3
30738: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30739: LD_EXP 51
30743: IFFALSE 30751
30745: PUSH
30746: LD_EXP 76
30750: AND
30751: IFFALSE 30805
30753: GO 30755
30755: DISABLE
// begin ToLua ( displayTroll(); ) ;
30756: LD_STRING displayTroll();
30758: PPUSH
30759: CALL_OW 559
// wait ( 3 3$00 ) ;
30763: LD_INT 6300
30765: PPUSH
30766: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30770: LD_STRING hideTroll();
30772: PPUSH
30773: CALL_OW 559
// wait ( 1 1$00 ) ;
30777: LD_INT 2100
30779: PPUSH
30780: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30784: LD_STRING displayTroll();
30786: PPUSH
30787: CALL_OW 559
// wait ( 1 1$00 ) ;
30791: LD_INT 2100
30793: PPUSH
30794: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30798: LD_STRING hideTroll();
30800: PPUSH
30801: CALL_OW 559
// end ;
30805: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30806: LD_EXP 51
30810: IFFALSE 30818
30812: PUSH
30813: LD_EXP 77
30817: AND
30818: IFFALSE 30881
30820: GO 30822
30822: DISABLE
30823: LD_INT 0
30825: PPUSH
// begin p := 0 ;
30826: LD_ADDR_VAR 0 1
30830: PUSH
30831: LD_INT 0
30833: ST_TO_ADDR
// repeat game_speed := 1 ;
30834: LD_ADDR_OWVAR 65
30838: PUSH
30839: LD_INT 1
30841: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30842: LD_INT 35
30844: PPUSH
30845: CALL_OW 67
// p := p + 1 ;
30849: LD_ADDR_VAR 0 1
30853: PUSH
30854: LD_VAR 0 1
30858: PUSH
30859: LD_INT 1
30861: PLUS
30862: ST_TO_ADDR
// until p >= 60 ;
30863: LD_VAR 0 1
30867: PUSH
30868: LD_INT 60
30870: GREATEREQUAL
30871: IFFALSE 30834
// game_speed := 4 ;
30873: LD_ADDR_OWVAR 65
30877: PUSH
30878: LD_INT 4
30880: ST_TO_ADDR
// end ;
30881: PPOPN 1
30883: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30884: LD_EXP 51
30888: IFFALSE 30896
30890: PUSH
30891: LD_EXP 78
30895: AND
30896: IFFALSE 31042
30898: GO 30900
30900: DISABLE
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30905: LD_ADDR_VAR 0 1
30909: PUSH
30910: LD_INT 22
30912: PUSH
30913: LD_OWVAR 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 30
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// if not depot then
30959: LD_VAR 0 1
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31042
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30968: LD_ADDR_VAR 0 2
30972: PUSH
30973: LD_VAR 0 1
30977: PUSH
30978: LD_INT 1
30980: PPUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL_OW 12
30990: ARRAY
30991: PPUSH
30992: CALL_OW 274
30996: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30997: LD_VAR 0 2
31001: PPUSH
31002: LD_INT 1
31004: PPUSH
31005: LD_INT 0
31007: PPUSH
31008: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31012: LD_VAR 0 2
31016: PPUSH
31017: LD_INT 2
31019: PPUSH
31020: LD_INT 0
31022: PPUSH
31023: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31027: LD_VAR 0 2
31031: PPUSH
31032: LD_INT 3
31034: PPUSH
31035: LD_INT 0
31037: PPUSH
31038: CALL_OW 277
// end ;
31042: PPOPN 2
31044: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31045: LD_EXP 51
31049: IFFALSE 31057
31051: PUSH
31052: LD_EXP 79
31056: AND
31057: IFFALSE 31154
31059: GO 31061
31061: DISABLE
31062: LD_INT 0
31064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31065: LD_ADDR_VAR 0 1
31069: PUSH
31070: LD_INT 22
31072: PUSH
31073: LD_OWVAR 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 21
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: LD_INT 23
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 69
31118: ST_TO_ADDR
// if not tmp then
31119: LD_VAR 0 1
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 1
31135: PPUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 12
31145: ARRAY
31146: PPUSH
31147: LD_INT 200
31149: PPUSH
31150: CALL_OW 234
// end ;
31154: PPOPN 1
31156: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31157: LD_EXP 51
31161: IFFALSE 31169
31163: PUSH
31164: LD_EXP 80
31168: AND
31169: IFFALSE 31248
31171: GO 31173
31173: DISABLE
31174: LD_INT 0
31176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31177: LD_ADDR_VAR 0 1
31181: PUSH
31182: LD_INT 22
31184: PUSH
31185: LD_OWVAR 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 21
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PPUSH
31208: CALL_OW 69
31212: ST_TO_ADDR
// if not tmp then
31213: LD_VAR 0 1
31217: NOT
31218: IFFALSE 31222
// exit ;
31220: GO 31248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31222: LD_VAR 0 1
31226: PUSH
31227: LD_INT 1
31229: PPUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: CALL_OW 12
31239: ARRAY
31240: PPUSH
31241: LD_INT 60
31243: PPUSH
31244: CALL_OW 234
// end ;
31248: PPOPN 1
31250: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31251: LD_EXP 51
31255: IFFALSE 31263
31257: PUSH
31258: LD_EXP 81
31262: AND
31263: IFFALSE 31362
31265: GO 31267
31267: DISABLE
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
// begin enable ;
31272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31273: LD_ADDR_VAR 0 1
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_OWVAR 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 61
31292: PUSH
31293: EMPTY
31294: LIST
31295: PUSH
31296: LD_INT 33
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// if not tmp then
31316: LD_VAR 0 1
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31362
// for i in tmp do
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: LD_VAR 0 1
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31360
// if IsControledBy ( i ) then
31338: LD_VAR 0 2
31342: PPUSH
31343: CALL_OW 312
31347: IFFALSE 31358
// ComUnlink ( i ) ;
31349: LD_VAR 0 2
31353: PPUSH
31354: CALL_OW 136
31358: GO 31335
31360: POP
31361: POP
// end ;
31362: PPOPN 2
31364: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31365: LD_EXP 51
31369: IFFALSE 31377
31371: PUSH
31372: LD_EXP 82
31376: AND
31377: IFFALSE 31517
31379: GO 31381
31381: DISABLE
31382: LD_INT 0
31384: PPUSH
31385: PPUSH
// begin ToLua ( displayPowell(); ) ;
31386: LD_STRING displayPowell();
31388: PPUSH
31389: CALL_OW 559
// uc_side := 0 ;
31393: LD_ADDR_OWVAR 20
31397: PUSH
31398: LD_INT 0
31400: ST_TO_ADDR
// uc_nation := 2 ;
31401: LD_ADDR_OWVAR 21
31405: PUSH
31406: LD_INT 2
31408: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31409: LD_ADDR_OWVAR 37
31413: PUSH
31414: LD_INT 14
31416: ST_TO_ADDR
// vc_engine := engine_siberite ;
31417: LD_ADDR_OWVAR 39
31421: PUSH
31422: LD_INT 3
31424: ST_TO_ADDR
// vc_control := control_apeman ;
31425: LD_ADDR_OWVAR 38
31429: PUSH
31430: LD_INT 5
31432: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31433: LD_ADDR_OWVAR 40
31437: PUSH
31438: LD_INT 29
31440: ST_TO_ADDR
// un := CreateVehicle ;
31441: LD_ADDR_VAR 0 2
31445: PUSH
31446: CALL_OW 45
31450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31451: LD_VAR 0 2
31455: PPUSH
31456: LD_INT 1
31458: PPUSH
31459: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31463: LD_INT 35
31465: PPUSH
31466: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31470: LD_VAR 0 2
31474: PPUSH
31475: LD_INT 22
31477: PUSH
31478: LD_OWVAR 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: PPUSH
31492: LD_VAR 0 2
31496: PPUSH
31497: CALL_OW 74
31501: PPUSH
31502: CALL_OW 115
// until IsDead ( un ) ;
31506: LD_VAR 0 2
31510: PPUSH
31511: CALL_OW 301
31515: IFFALSE 31463
// end ;
31517: PPOPN 2
31519: END
// every 0 0$1 trigger StreamModeActive and sStu do
31520: LD_EXP 51
31524: IFFALSE 31532
31526: PUSH
31527: LD_EXP 90
31531: AND
31532: IFFALSE 31548
31534: GO 31536
31536: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31537: LD_STRING displayStucuk();
31539: PPUSH
31540: CALL_OW 559
// ResetFog ;
31544: CALL_OW 335
// end ;
31548: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31549: LD_EXP 51
31553: IFFALSE 31561
31555: PUSH
31556: LD_EXP 83
31560: AND
31561: IFFALSE 31702
31563: GO 31565
31565: DISABLE
31566: LD_INT 0
31568: PPUSH
31569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31570: LD_ADDR_VAR 0 2
31574: PUSH
31575: LD_INT 22
31577: PUSH
31578: LD_OWVAR 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 21
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PPUSH
31601: CALL_OW 69
31605: ST_TO_ADDR
// if not tmp then
31606: LD_VAR 0 2
31610: NOT
31611: IFFALSE 31615
// exit ;
31613: GO 31702
// un := tmp [ rand ( 1 , tmp ) ] ;
31615: LD_ADDR_VAR 0 1
31619: PUSH
31620: LD_VAR 0 2
31624: PUSH
31625: LD_INT 1
31627: PPUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: CALL_OW 12
31637: ARRAY
31638: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31639: LD_VAR 0 1
31643: PPUSH
31644: LD_INT 0
31646: PPUSH
31647: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31651: LD_VAR 0 1
31655: PPUSH
31656: LD_OWVAR 3
31660: PUSH
31661: LD_VAR 0 1
31665: DIFF
31666: PPUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 74
31676: PPUSH
31677: CALL_OW 115
// wait ( 0 0$20 ) ;
31681: LD_INT 700
31683: PPUSH
31684: CALL_OW 67
// SetSide ( un , your_side ) ;
31688: LD_VAR 0 1
31692: PPUSH
31693: LD_OWVAR 2
31697: PPUSH
31698: CALL_OW 235
// end ;
31702: PPOPN 2
31704: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31705: LD_EXP 51
31709: IFFALSE 31717
31711: PUSH
31712: LD_EXP 84
31716: AND
31717: IFFALSE 31823
31719: GO 31721
31721: DISABLE
31722: LD_INT 0
31724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31725: LD_ADDR_VAR 0 1
31729: PUSH
31730: LD_INT 22
31732: PUSH
31733: LD_OWVAR 2
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PPUSH
31774: CALL_OW 69
31778: ST_TO_ADDR
// if not depot then
31779: LD_VAR 0 1
31783: NOT
31784: IFFALSE 31788
// exit ;
31786: GO 31823
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31788: LD_VAR 0 1
31792: PUSH
31793: LD_INT 1
31795: ARRAY
31796: PPUSH
31797: CALL_OW 250
31801: PPUSH
31802: LD_VAR 0 1
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PPUSH
31811: CALL_OW 251
31815: PPUSH
31816: LD_INT 70
31818: PPUSH
31819: CALL_OW 495
// end ;
31823: PPOPN 1
31825: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31826: LD_EXP 51
31830: IFFALSE 31838
31832: PUSH
31833: LD_EXP 85
31837: AND
31838: IFFALSE 32049
31840: GO 31842
31842: DISABLE
31843: LD_INT 0
31845: PPUSH
31846: PPUSH
31847: PPUSH
31848: PPUSH
31849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_OWVAR 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 21
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PPUSH
31881: CALL_OW 69
31885: ST_TO_ADDR
// if not tmp then
31886: LD_VAR 0 5
31890: NOT
31891: IFFALSE 31895
// exit ;
31893: GO 32049
// for i in tmp do
31895: LD_ADDR_VAR 0 1
31899: PUSH
31900: LD_VAR 0 5
31904: PUSH
31905: FOR_IN
31906: IFFALSE 32047
// begin d := rand ( 0 , 5 ) ;
31908: LD_ADDR_VAR 0 4
31912: PUSH
31913: LD_INT 0
31915: PPUSH
31916: LD_INT 5
31918: PPUSH
31919: CALL_OW 12
31923: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31924: LD_ADDR_VAR 0 2
31928: PUSH
31929: LD_VAR 0 1
31933: PPUSH
31934: CALL_OW 250
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_INT 3
31946: PPUSH
31947: LD_INT 12
31949: PPUSH
31950: CALL_OW 12
31954: PPUSH
31955: CALL_OW 272
31959: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31960: LD_ADDR_VAR 0 3
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 251
31974: PPUSH
31975: LD_VAR 0 4
31979: PPUSH
31980: LD_INT 3
31982: PPUSH
31983: LD_INT 12
31985: PPUSH
31986: CALL_OW 12
31990: PPUSH
31991: CALL_OW 273
31995: ST_TO_ADDR
// if ValidHex ( x , y ) then
31996: LD_VAR 0 2
32000: PPUSH
32001: LD_VAR 0 3
32005: PPUSH
32006: CALL_OW 488
32010: IFFALSE 32045
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32012: LD_VAR 0 1
32016: PPUSH
32017: LD_VAR 0 2
32021: PPUSH
32022: LD_VAR 0 3
32026: PPUSH
32027: LD_INT 3
32029: PPUSH
32030: LD_INT 6
32032: PPUSH
32033: CALL_OW 12
32037: PPUSH
32038: LD_INT 1
32040: PPUSH
32041: CALL_OW 483
// end ;
32045: GO 31905
32047: POP
32048: POP
// end ;
32049: PPOPN 5
32051: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32052: LD_EXP 51
32056: IFFALSE 32064
32058: PUSH
32059: LD_EXP 86
32063: AND
32064: IFFALSE 32158
32066: GO 32068
32068: DISABLE
32069: LD_INT 0
32071: PPUSH
32072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32073: LD_ADDR_VAR 0 2
32077: PUSH
32078: LD_INT 22
32080: PUSH
32081: LD_OWVAR 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 32
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 21
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: PPUSH
32115: CALL_OW 69
32119: ST_TO_ADDR
// if not tmp then
32120: LD_VAR 0 2
32124: NOT
32125: IFFALSE 32129
// exit ;
32127: GO 32158
// for i in tmp do
32129: LD_ADDR_VAR 0 1
32133: PUSH
32134: LD_VAR 0 2
32138: PUSH
32139: FOR_IN
32140: IFFALSE 32156
// SetFuel ( i , 0 ) ;
32142: LD_VAR 0 1
32146: PPUSH
32147: LD_INT 0
32149: PPUSH
32150: CALL_OW 240
32154: GO 32139
32156: POP
32157: POP
// end ;
32158: PPOPN 2
32160: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32161: LD_EXP 51
32165: IFFALSE 32173
32167: PUSH
32168: LD_EXP 87
32172: AND
32173: IFFALSE 32239
32175: GO 32177
32177: DISABLE
32178: LD_INT 0
32180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32181: LD_ADDR_VAR 0 1
32185: PUSH
32186: LD_INT 22
32188: PUSH
32189: LD_OWVAR 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 30
32200: PUSH
32201: LD_INT 29
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PPUSH
32212: CALL_OW 69
32216: ST_TO_ADDR
// if not tmp then
32217: LD_VAR 0 1
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32239
// DestroyUnit ( tmp [ 1 ] ) ;
32226: LD_VAR 0 1
32230: PUSH
32231: LD_INT 1
32233: ARRAY
32234: PPUSH
32235: CALL_OW 65
// end ;
32239: PPOPN 1
32241: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32242: LD_EXP 51
32246: IFFALSE 32254
32248: PUSH
32249: LD_EXP 89
32253: AND
32254: IFFALSE 32383
32256: GO 32258
32258: DISABLE
32259: LD_INT 0
32261: PPUSH
// begin uc_side := 0 ;
32262: LD_ADDR_OWVAR 20
32266: PUSH
32267: LD_INT 0
32269: ST_TO_ADDR
// uc_nation := nation_arabian ;
32270: LD_ADDR_OWVAR 21
32274: PUSH
32275: LD_INT 2
32277: ST_TO_ADDR
// hc_gallery :=  ;
32278: LD_ADDR_OWVAR 33
32282: PUSH
32283: LD_STRING 
32285: ST_TO_ADDR
// hc_name :=  ;
32286: LD_ADDR_OWVAR 26
32290: PUSH
32291: LD_STRING 
32293: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32294: LD_INT 1
32296: PPUSH
32297: LD_INT 11
32299: PPUSH
32300: LD_INT 10
32302: PPUSH
32303: CALL_OW 380
// un := CreateHuman ;
32307: LD_ADDR_VAR 0 1
32311: PUSH
32312: CALL_OW 44
32316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32317: LD_VAR 0 1
32321: PPUSH
32322: LD_INT 1
32324: PPUSH
32325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32329: LD_INT 35
32331: PPUSH
32332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32336: LD_VAR 0 1
32340: PPUSH
32341: LD_INT 22
32343: PUSH
32344: LD_OWVAR 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: PPUSH
32358: LD_VAR 0 1
32362: PPUSH
32363: CALL_OW 74
32367: PPUSH
32368: CALL_OW 115
// until IsDead ( un ) ;
32372: LD_VAR 0 1
32376: PPUSH
32377: CALL_OW 301
32381: IFFALSE 32329
// end ;
32383: PPOPN 1
32385: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32386: LD_EXP 51
32390: IFFALSE 32398
32392: PUSH
32393: LD_EXP 91
32397: AND
32398: IFFALSE 32410
32400: GO 32402
32402: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32403: LD_STRING earthquake(getX(game), 0, 32)
32405: PPUSH
32406: CALL_OW 559
32410: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32411: LD_EXP 51
32415: IFFALSE 32423
32417: PUSH
32418: LD_EXP 92
32422: AND
32423: IFFALSE 32514
32425: GO 32427
32427: DISABLE
32428: LD_INT 0
32430: PPUSH
// begin enable ;
32431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32432: LD_ADDR_VAR 0 1
32436: PUSH
32437: LD_INT 22
32439: PUSH
32440: LD_OWVAR 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 21
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 33
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: PPUSH
32474: CALL_OW 69
32478: ST_TO_ADDR
// if not tmp then
32479: LD_VAR 0 1
32483: NOT
32484: IFFALSE 32488
// exit ;
32486: GO 32514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32488: LD_VAR 0 1
32492: PUSH
32493: LD_INT 1
32495: PPUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: CALL_OW 12
32505: ARRAY
32506: PPUSH
32507: LD_INT 1
32509: PPUSH
32510: CALL_OW 234
// end ;
32514: PPOPN 1
32516: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32517: LD_EXP 51
32521: IFFALSE 32529
32523: PUSH
32524: LD_EXP 93
32528: AND
32529: IFFALSE 32670
32531: GO 32533
32533: DISABLE
32534: LD_INT 0
32536: PPUSH
32537: PPUSH
32538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_INT 22
32546: PUSH
32547: LD_OWVAR 2
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 25
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PPUSH
32570: CALL_OW 69
32574: ST_TO_ADDR
// if not tmp then
32575: LD_VAR 0 3
32579: NOT
32580: IFFALSE 32584
// exit ;
32582: GO 32670
// un := tmp [ rand ( 1 , tmp ) ] ;
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_INT 1
32596: PPUSH
32597: LD_VAR 0 3
32601: PPUSH
32602: CALL_OW 12
32606: ARRAY
32607: ST_TO_ADDR
// if Crawls ( un ) then
32608: LD_VAR 0 2
32612: PPUSH
32613: CALL_OW 318
32617: IFFALSE 32628
// ComWalk ( un ) ;
32619: LD_VAR 0 2
32623: PPUSH
32624: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32628: LD_VAR 0 2
32632: PPUSH
32633: LD_INT 9
32635: PPUSH
32636: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32640: LD_INT 28
32642: PPUSH
32643: LD_OWVAR 2
32647: PPUSH
32648: LD_INT 2
32650: PPUSH
32651: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32655: LD_INT 29
32657: PPUSH
32658: LD_OWVAR 2
32662: PPUSH
32663: LD_INT 2
32665: PPUSH
32666: CALL_OW 322
// end ;
32670: PPOPN 3
32672: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32673: LD_EXP 51
32677: IFFALSE 32685
32679: PUSH
32680: LD_EXP 94
32684: AND
32685: IFFALSE 32796
32687: GO 32689
32689: DISABLE
32690: LD_INT 0
32692: PPUSH
32693: PPUSH
32694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_INT 22
32702: PUSH
32703: LD_OWVAR 2
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 25
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PPUSH
32726: CALL_OW 69
32730: ST_TO_ADDR
// if not tmp then
32731: LD_VAR 0 3
32735: NOT
32736: IFFALSE 32740
// exit ;
32738: GO 32796
// un := tmp [ rand ( 1 , tmp ) ] ;
32740: LD_ADDR_VAR 0 2
32744: PUSH
32745: LD_VAR 0 3
32749: PUSH
32750: LD_INT 1
32752: PPUSH
32753: LD_VAR 0 3
32757: PPUSH
32758: CALL_OW 12
32762: ARRAY
32763: ST_TO_ADDR
// if Crawls ( un ) then
32764: LD_VAR 0 2
32768: PPUSH
32769: CALL_OW 318
32773: IFFALSE 32784
// ComWalk ( un ) ;
32775: LD_VAR 0 2
32779: PPUSH
32780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_INT 8
32791: PPUSH
32792: CALL_OW 336
// end ;
32796: PPOPN 3
32798: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32799: LD_EXP 51
32803: IFFALSE 32811
32805: PUSH
32806: LD_EXP 95
32810: AND
32811: IFFALSE 32955
32813: GO 32815
32815: DISABLE
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32820: LD_ADDR_VAR 0 2
32824: PUSH
32825: LD_INT 22
32827: PUSH
32828: LD_OWVAR 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 21
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 34
32852: PUSH
32853: LD_INT 12
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 34
32862: PUSH
32863: LD_INT 51
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 34
32872: PUSH
32873: LD_INT 32
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: PPUSH
32891: CALL_OW 69
32895: ST_TO_ADDR
// if not tmp then
32896: LD_VAR 0 2
32900: NOT
32901: IFFALSE 32905
// exit ;
32903: GO 32955
// for i in tmp do
32905: LD_ADDR_VAR 0 1
32909: PUSH
32910: LD_VAR 0 2
32914: PUSH
32915: FOR_IN
32916: IFFALSE 32953
// if GetCargo ( i , mat_artifact ) = 0 then
32918: LD_VAR 0 1
32922: PPUSH
32923: LD_INT 4
32925: PPUSH
32926: CALL_OW 289
32930: PUSH
32931: LD_INT 0
32933: EQUAL
32934: IFFALSE 32951
// SetCargo ( i , mat_siberit , 100 ) ;
32936: LD_VAR 0 1
32940: PPUSH
32941: LD_INT 3
32943: PPUSH
32944: LD_INT 100
32946: PPUSH
32947: CALL_OW 290
32951: GO 32915
32953: POP
32954: POP
// end ;
32955: PPOPN 2
32957: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32958: LD_EXP 51
32962: IFFALSE 32970
32964: PUSH
32965: LD_EXP 96
32969: AND
32970: IFFALSE 33153
32972: GO 32974
32974: DISABLE
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32979: LD_ADDR_VAR 0 2
32983: PUSH
32984: LD_INT 22
32986: PUSH
32987: LD_OWVAR 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PPUSH
32996: CALL_OW 69
33000: ST_TO_ADDR
// if not tmp then
33001: LD_VAR 0 2
33005: NOT
33006: IFFALSE 33010
// exit ;
33008: GO 33153
// for i := 1 to 2 do
33010: LD_ADDR_VAR 0 1
33014: PUSH
33015: DOUBLE
33016: LD_INT 1
33018: DEC
33019: ST_TO_ADDR
33020: LD_INT 2
33022: PUSH
33023: FOR_TO
33024: IFFALSE 33151
// begin uc_side := your_side ;
33026: LD_ADDR_OWVAR 20
33030: PUSH
33031: LD_OWVAR 2
33035: ST_TO_ADDR
// uc_nation := nation_american ;
33036: LD_ADDR_OWVAR 21
33040: PUSH
33041: LD_INT 1
33043: ST_TO_ADDR
// vc_chassis := us_morphling ;
33044: LD_ADDR_OWVAR 37
33048: PUSH
33049: LD_INT 5
33051: ST_TO_ADDR
// vc_engine := engine_siberite ;
33052: LD_ADDR_OWVAR 39
33056: PUSH
33057: LD_INT 3
33059: ST_TO_ADDR
// vc_control := control_computer ;
33060: LD_ADDR_OWVAR 38
33064: PUSH
33065: LD_INT 3
33067: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33068: LD_ADDR_OWVAR 40
33072: PUSH
33073: LD_INT 10
33075: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33076: LD_VAR 0 2
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: PPUSH
33085: CALL_OW 310
33089: NOT
33090: IFFALSE 33137
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33092: CALL_OW 45
33096: PPUSH
33097: LD_VAR 0 2
33101: PUSH
33102: LD_INT 1
33104: ARRAY
33105: PPUSH
33106: CALL_OW 250
33110: PPUSH
33111: LD_VAR 0 2
33115: PUSH
33116: LD_INT 1
33118: ARRAY
33119: PPUSH
33120: CALL_OW 251
33124: PPUSH
33125: LD_INT 12
33127: PPUSH
33128: LD_INT 1
33130: PPUSH
33131: CALL_OW 50
33135: GO 33149
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33137: CALL_OW 45
33141: PPUSH
33142: LD_INT 1
33144: PPUSH
33145: CALL_OW 51
// end ;
33149: GO 33023
33151: POP
33152: POP
// end ;
33153: PPOPN 2
33155: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33156: LD_EXP 51
33160: IFFALSE 33168
33162: PUSH
33163: LD_EXP 97
33167: AND
33168: IFFALSE 33390
33170: GO 33172
33172: DISABLE
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
33179: PPUSH
33180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33181: LD_ADDR_VAR 0 6
33185: PUSH
33186: LD_INT 22
33188: PUSH
33189: LD_OWVAR 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 21
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 23
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 69
33234: ST_TO_ADDR
// if not tmp then
33235: LD_VAR 0 6
33239: NOT
33240: IFFALSE 33244
// exit ;
33242: GO 33390
// s1 := rand ( 1 , 4 ) ;
33244: LD_ADDR_VAR 0 2
33248: PUSH
33249: LD_INT 1
33251: PPUSH
33252: LD_INT 4
33254: PPUSH
33255: CALL_OW 12
33259: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33260: LD_ADDR_VAR 0 4
33264: PUSH
33265: LD_VAR 0 6
33269: PUSH
33270: LD_INT 1
33272: ARRAY
33273: PPUSH
33274: LD_VAR 0 2
33278: PPUSH
33279: CALL_OW 259
33283: ST_TO_ADDR
// if s1 = 1 then
33284: LD_VAR 0 2
33288: PUSH
33289: LD_INT 1
33291: EQUAL
33292: IFFALSE 33312
// s2 := rand ( 2 , 4 ) else
33294: LD_ADDR_VAR 0 3
33298: PUSH
33299: LD_INT 2
33301: PPUSH
33302: LD_INT 4
33304: PPUSH
33305: CALL_OW 12
33309: ST_TO_ADDR
33310: GO 33320
// s2 := 1 ;
33312: LD_ADDR_VAR 0 3
33316: PUSH
33317: LD_INT 1
33319: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33320: LD_ADDR_VAR 0 5
33324: PUSH
33325: LD_VAR 0 6
33329: PUSH
33330: LD_INT 1
33332: ARRAY
33333: PPUSH
33334: LD_VAR 0 3
33338: PPUSH
33339: CALL_OW 259
33343: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33344: LD_VAR 0 6
33348: PUSH
33349: LD_INT 1
33351: ARRAY
33352: PPUSH
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 5
33362: PPUSH
33363: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33367: LD_VAR 0 6
33371: PUSH
33372: LD_INT 1
33374: ARRAY
33375: PPUSH
33376: LD_VAR 0 3
33380: PPUSH
33381: LD_VAR 0 4
33385: PPUSH
33386: CALL_OW 237
// end ;
33390: PPOPN 6
33392: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33393: LD_EXP 51
33397: IFFALSE 33405
33399: PUSH
33400: LD_EXP 98
33404: AND
33405: IFFALSE 33484
33407: GO 33409
33409: DISABLE
33410: LD_INT 0
33412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33413: LD_ADDR_VAR 0 1
33417: PUSH
33418: LD_INT 22
33420: PUSH
33421: LD_OWVAR 2
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 30
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 69
33448: ST_TO_ADDR
// if not tmp then
33449: LD_VAR 0 1
33453: NOT
33454: IFFALSE 33458
// exit ;
33456: GO 33484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33458: LD_VAR 0 1
33462: PUSH
33463: LD_INT 1
33465: PPUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: CALL_OW 12
33475: ARRAY
33476: PPUSH
33477: LD_INT 1
33479: PPUSH
33480: CALL_OW 234
// end ;
33484: PPOPN 1
33486: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33487: LD_EXP 51
33491: IFFALSE 33499
33493: PUSH
33494: LD_EXP 99
33498: AND
33499: IFFALSE 33611
33501: GO 33503
33503: DISABLE
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33508: LD_ADDR_VAR 0 2
33512: PUSH
33513: LD_INT 22
33515: PUSH
33516: LD_OWVAR 2
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 30
33530: PUSH
33531: LD_INT 27
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 30
33540: PUSH
33541: LD_INT 26
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 30
33550: PUSH
33551: LD_INT 28
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PPUSH
33568: CALL_OW 69
33572: ST_TO_ADDR
// if not tmp then
33573: LD_VAR 0 2
33577: NOT
33578: IFFALSE 33582
// exit ;
33580: GO 33611
// for i in tmp do
33582: LD_ADDR_VAR 0 1
33586: PUSH
33587: LD_VAR 0 2
33591: PUSH
33592: FOR_IN
33593: IFFALSE 33609
// SetLives ( i , 1 ) ;
33595: LD_VAR 0 1
33599: PPUSH
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 234
33607: GO 33592
33609: POP
33610: POP
// end ;
33611: PPOPN 2
33613: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33614: LD_EXP 51
33618: IFFALSE 33626
33620: PUSH
33621: LD_EXP 100
33625: AND
33626: IFFALSE 33913
33628: GO 33630
33630: DISABLE
33631: LD_INT 0
33633: PPUSH
33634: PPUSH
33635: PPUSH
// begin i := rand ( 1 , 7 ) ;
33636: LD_ADDR_VAR 0 1
33640: PUSH
33641: LD_INT 1
33643: PPUSH
33644: LD_INT 7
33646: PPUSH
33647: CALL_OW 12
33651: ST_TO_ADDR
// case i of 1 :
33652: LD_VAR 0 1
33656: PUSH
33657: LD_INT 1
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33665
33663: GO 33675
33665: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33666: LD_STRING earthquake(getX(game), 0, 32)
33668: PPUSH
33669: CALL_OW 559
33673: GO 33913
33675: LD_INT 2
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33697
33683: POP
// begin ToLua ( displayStucuk(); ) ;
33684: LD_STRING displayStucuk();
33686: PPUSH
33687: CALL_OW 559
// ResetFog ;
33691: CALL_OW 335
// end ; 3 :
33695: GO 33913
33697: LD_INT 3
33699: DOUBLE
33700: EQUAL
33701: IFTRUE 33705
33703: GO 33809
33705: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33706: LD_ADDR_VAR 0 2
33710: PUSH
33711: LD_INT 22
33713: PUSH
33714: LD_OWVAR 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 25
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PPUSH
33737: CALL_OW 69
33741: ST_TO_ADDR
// if not tmp then
33742: LD_VAR 0 2
33746: NOT
33747: IFFALSE 33751
// exit ;
33749: GO 33913
// un := tmp [ rand ( 1 , tmp ) ] ;
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_VAR 0 2
33760: PUSH
33761: LD_INT 1
33763: PPUSH
33764: LD_VAR 0 2
33768: PPUSH
33769: CALL_OW 12
33773: ARRAY
33774: ST_TO_ADDR
// if Crawls ( un ) then
33775: LD_VAR 0 3
33779: PPUSH
33780: CALL_OW 318
33784: IFFALSE 33795
// ComWalk ( un ) ;
33786: LD_VAR 0 3
33790: PPUSH
33791: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33795: LD_VAR 0 3
33799: PPUSH
33800: LD_INT 8
33802: PPUSH
33803: CALL_OW 336
// end ; 4 :
33807: GO 33913
33809: LD_INT 4
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 33891
33817: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33818: LD_ADDR_VAR 0 2
33822: PUSH
33823: LD_INT 22
33825: PUSH
33826: LD_OWVAR 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 30
33837: PUSH
33838: LD_INT 29
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PPUSH
33849: CALL_OW 69
33853: ST_TO_ADDR
// if not tmp then
33854: LD_VAR 0 2
33858: NOT
33859: IFFALSE 33863
// exit ;
33861: GO 33913
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33863: LD_VAR 0 2
33867: PUSH
33868: LD_INT 1
33870: ARRAY
33871: PPUSH
33872: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33876: LD_VAR 0 2
33880: PUSH
33881: LD_INT 1
33883: ARRAY
33884: PPUSH
33885: CALL_OW 65
// end ; 5 .. 7 :
33889: GO 33913
33891: LD_INT 5
33893: DOUBLE
33894: GREATEREQUAL
33895: IFFALSE 33903
33897: LD_INT 7
33899: DOUBLE
33900: LESSEQUAL
33901: IFTRUE 33905
33903: GO 33912
33905: POP
// StreamSibBomb ; end ;
33906: CALL 30094 0 0
33910: GO 33913
33912: POP
// end ;
33913: PPOPN 3
33915: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33916: LD_EXP 51
33920: IFFALSE 33928
33922: PUSH
33923: LD_EXP 101
33927: AND
33928: IFFALSE 34084
33930: GO 33932
33932: DISABLE
33933: LD_INT 0
33935: PPUSH
33936: PPUSH
33937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33938: LD_ADDR_VAR 0 2
33942: PUSH
33943: LD_INT 81
33945: PUSH
33946: LD_OWVAR 2
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 21
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PPUSH
33987: CALL_OW 69
33991: ST_TO_ADDR
// if not tmp then
33992: LD_VAR 0 2
33996: NOT
33997: IFFALSE 34001
// exit ;
33999: GO 34084
// p := 0 ;
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_INT 0
34008: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34009: LD_INT 35
34011: PPUSH
34012: CALL_OW 67
// p := p + 1 ;
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_VAR 0 3
34025: PUSH
34026: LD_INT 1
34028: PLUS
34029: ST_TO_ADDR
// for i in tmp do
34030: LD_ADDR_VAR 0 1
34034: PUSH
34035: LD_VAR 0 2
34039: PUSH
34040: FOR_IN
34041: IFFALSE 34072
// if GetLives ( i ) < 1000 then
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 256
34052: PUSH
34053: LD_INT 1000
34055: LESS
34056: IFFALSE 34070
// SetLives ( i , 1000 ) ;
34058: LD_VAR 0 1
34062: PPUSH
34063: LD_INT 1000
34065: PPUSH
34066: CALL_OW 234
34070: GO 34040
34072: POP
34073: POP
// until p > 20 ;
34074: LD_VAR 0 3
34078: PUSH
34079: LD_INT 20
34081: GREATER
34082: IFFALSE 34009
// end ;
34084: PPOPN 3
34086: END
// every 0 0$1 trigger StreamModeActive and sTime do
34087: LD_EXP 51
34091: IFFALSE 34099
34093: PUSH
34094: LD_EXP 102
34098: AND
34099: IFFALSE 34134
34101: GO 34103
34103: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34104: LD_INT 28
34106: PPUSH
34107: LD_OWVAR 2
34111: PPUSH
34112: LD_INT 2
34114: PPUSH
34115: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34119: LD_INT 30
34121: PPUSH
34122: LD_OWVAR 2
34126: PPUSH
34127: LD_INT 2
34129: PPUSH
34130: CALL_OW 322
// end ;
34134: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34135: LD_EXP 51
34139: IFFALSE 34147
34141: PUSH
34142: LD_EXP 103
34146: AND
34147: IFFALSE 34268
34149: GO 34151
34151: DISABLE
34152: LD_INT 0
34154: PPUSH
34155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34156: LD_ADDR_VAR 0 2
34160: PUSH
34161: LD_INT 22
34163: PUSH
34164: LD_OWVAR 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 21
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 23
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: PPUSH
34205: CALL_OW 69
34209: ST_TO_ADDR
// if not tmp then
34210: LD_VAR 0 2
34214: NOT
34215: IFFALSE 34219
// exit ;
34217: GO 34268
// for i in tmp do
34219: LD_ADDR_VAR 0 1
34223: PUSH
34224: LD_VAR 0 2
34228: PUSH
34229: FOR_IN
34230: IFFALSE 34266
// begin if Crawls ( i ) then
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 318
34241: IFFALSE 34252
// ComWalk ( i ) ;
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 138
// SetClass ( i , 2 ) ;
34252: LD_VAR 0 1
34256: PPUSH
34257: LD_INT 2
34259: PPUSH
34260: CALL_OW 336
// end ;
34264: GO 34229
34266: POP
34267: POP
// end ;
34268: PPOPN 2
34270: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34271: LD_EXP 51
34275: IFFALSE 34283
34277: PUSH
34278: LD_EXP 104
34282: AND
34283: IFFALSE 34573
34285: GO 34287
34287: DISABLE
34288: LD_INT 0
34290: PPUSH
34291: PPUSH
34292: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34293: LD_OWVAR 2
34297: PPUSH
34298: LD_INT 9
34300: PPUSH
34301: LD_INT 1
34303: PPUSH
34304: LD_INT 1
34306: PPUSH
34307: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34311: LD_INT 9
34313: PPUSH
34314: LD_OWVAR 2
34318: PPUSH
34319: CALL_OW 343
// uc_side := 9 ;
34323: LD_ADDR_OWVAR 20
34327: PUSH
34328: LD_INT 9
34330: ST_TO_ADDR
// uc_nation := 2 ;
34331: LD_ADDR_OWVAR 21
34335: PUSH
34336: LD_INT 2
34338: ST_TO_ADDR
// hc_name := Dark Warrior ;
34339: LD_ADDR_OWVAR 26
34343: PUSH
34344: LD_STRING Dark Warrior
34346: ST_TO_ADDR
// hc_gallery :=  ;
34347: LD_ADDR_OWVAR 33
34351: PUSH
34352: LD_STRING 
34354: ST_TO_ADDR
// hc_noskilllimit := true ;
34355: LD_ADDR_OWVAR 76
34359: PUSH
34360: LD_INT 1
34362: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34363: LD_ADDR_OWVAR 31
34367: PUSH
34368: LD_INT 30
34370: PUSH
34371: LD_INT 30
34373: PUSH
34374: LD_INT 30
34376: PUSH
34377: LD_INT 30
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// un := CreateHuman ;
34386: LD_ADDR_VAR 0 3
34390: PUSH
34391: CALL_OW 44
34395: ST_TO_ADDR
// hc_noskilllimit := false ;
34396: LD_ADDR_OWVAR 76
34400: PUSH
34401: LD_INT 0
34403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34404: LD_VAR 0 3
34408: PPUSH
34409: LD_INT 1
34411: PPUSH
34412: CALL_OW 51
// ToLua ( playRanger() ) ;
34416: LD_STRING playRanger()
34418: PPUSH
34419: CALL_OW 559
// p := 0 ;
34423: LD_ADDR_VAR 0 2
34427: PUSH
34428: LD_INT 0
34430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34431: LD_INT 35
34433: PPUSH
34434: CALL_OW 67
// p := p + 1 ;
34438: LD_ADDR_VAR 0 2
34442: PUSH
34443: LD_VAR 0 2
34447: PUSH
34448: LD_INT 1
34450: PLUS
34451: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34452: LD_VAR 0 3
34456: PPUSH
34457: CALL_OW 256
34461: PUSH
34462: LD_INT 1000
34464: LESS
34465: IFFALSE 34479
// SetLives ( un , 1000 ) ;
34467: LD_VAR 0 3
34471: PPUSH
34472: LD_INT 1000
34474: PPUSH
34475: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34479: LD_VAR 0 3
34483: PPUSH
34484: LD_INT 81
34486: PUSH
34487: LD_OWVAR 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 91
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: LD_INT 30
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PPUSH
34516: CALL_OW 69
34520: PPUSH
34521: LD_VAR 0 3
34525: PPUSH
34526: CALL_OW 74
34530: PPUSH
34531: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34535: LD_VAR 0 2
34539: PUSH
34540: LD_INT 80
34542: GREATER
34543: IFTRUE 34556
34545: PUSH
34546: LD_VAR 0 3
34550: PPUSH
34551: CALL_OW 301
34555: OR
34556: IFFALSE 34431
// if un then
34558: LD_VAR 0 3
34562: IFFALSE 34573
// RemoveUnit ( un ) ;
34564: LD_VAR 0 3
34568: PPUSH
34569: CALL_OW 64
// end ;
34573: PPOPN 3
34575: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34576: LD_EXP 105
34580: IFFALSE 34696
34582: GO 34584
34584: DISABLE
34585: LD_INT 0
34587: PPUSH
34588: PPUSH
34589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34590: LD_ADDR_VAR 0 2
34594: PUSH
34595: LD_INT 81
34597: PUSH
34598: LD_OWVAR 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 21
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL_OW 69
34625: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34626: LD_STRING playComputer()
34628: PPUSH
34629: CALL_OW 559
// if not tmp then
34633: LD_VAR 0 2
34637: NOT
34638: IFFALSE 34642
// exit ;
34640: GO 34696
// for i in tmp do
34642: LD_ADDR_VAR 0 1
34646: PUSH
34647: LD_VAR 0 2
34651: PUSH
34652: FOR_IN
34653: IFFALSE 34694
// for j := 1 to 4 do
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: DOUBLE
34661: LD_INT 1
34663: DEC
34664: ST_TO_ADDR
34665: LD_INT 4
34667: PUSH
34668: FOR_TO
34669: IFFALSE 34690
// SetSkill ( i , j , 10 ) ;
34671: LD_VAR 0 1
34675: PPUSH
34676: LD_VAR 0 3
34680: PPUSH
34681: LD_INT 10
34683: PPUSH
34684: CALL_OW 237
34688: GO 34668
34690: POP
34691: POP
34692: GO 34652
34694: POP
34695: POP
// end ;
34696: PPOPN 3
34698: END
// every 0 0$1 trigger s30 do var i , tmp ;
34699: LD_EXP 106
34703: IFFALSE 34772
34705: GO 34707
34707: DISABLE
34708: LD_INT 0
34710: PPUSH
34711: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34712: LD_ADDR_VAR 0 2
34716: PUSH
34717: LD_INT 22
34719: PUSH
34720: LD_OWVAR 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PPUSH
34729: CALL_OW 69
34733: ST_TO_ADDR
// if not tmp then
34734: LD_VAR 0 2
34738: NOT
34739: IFFALSE 34743
// exit ;
34741: GO 34772
// for i in tmp do
34743: LD_ADDR_VAR 0 1
34747: PUSH
34748: LD_VAR 0 2
34752: PUSH
34753: FOR_IN
34754: IFFALSE 34770
// SetLives ( i , 300 ) ;
34756: LD_VAR 0 1
34760: PPUSH
34761: LD_INT 300
34763: PPUSH
34764: CALL_OW 234
34768: GO 34753
34770: POP
34771: POP
// end ;
34772: PPOPN 2
34774: END
// every 0 0$1 trigger s60 do var i , tmp ;
34775: LD_EXP 107
34779: IFFALSE 34848
34781: GO 34783
34783: DISABLE
34784: LD_INT 0
34786: PPUSH
34787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34788: LD_ADDR_VAR 0 2
34792: PUSH
34793: LD_INT 22
34795: PUSH
34796: LD_OWVAR 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PPUSH
34805: CALL_OW 69
34809: ST_TO_ADDR
// if not tmp then
34810: LD_VAR 0 2
34814: NOT
34815: IFFALSE 34819
// exit ;
34817: GO 34848
// for i in tmp do
34819: LD_ADDR_VAR 0 1
34823: PUSH
34824: LD_VAR 0 2
34828: PUSH
34829: FOR_IN
34830: IFFALSE 34846
// SetLives ( i , 600 ) ;
34832: LD_VAR 0 1
34836: PPUSH
34837: LD_INT 600
34839: PPUSH
34840: CALL_OW 234
34844: GO 34829
34846: POP
34847: POP
// end ;
34848: PPOPN 2
34850: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34851: LD_INT 0
34853: PPUSH
// case cmd of 301 :
34854: LD_VAR 0 1
34858: PUSH
34859: LD_INT 301
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34899
34867: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34868: LD_VAR 0 6
34872: PPUSH
34873: LD_VAR 0 7
34877: PPUSH
34878: LD_VAR 0 8
34882: PPUSH
34883: LD_VAR 0 4
34887: PPUSH
34888: LD_VAR 0 5
34892: PPUSH
34893: CALL 36112 0 5
34897: GO 35020
34899: LD_INT 302
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34944
34907: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34908: LD_VAR 0 6
34912: PPUSH
34913: LD_VAR 0 7
34917: PPUSH
34918: LD_VAR 0 8
34922: PPUSH
34923: LD_VAR 0 9
34927: PPUSH
34928: LD_VAR 0 4
34932: PPUSH
34933: LD_VAR 0 5
34937: PPUSH
34938: CALL 36203 0 6
34942: GO 35020
34944: LD_INT 303
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 34989
34952: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34953: LD_VAR 0 6
34957: PPUSH
34958: LD_VAR 0 7
34962: PPUSH
34963: LD_VAR 0 8
34967: PPUSH
34968: LD_VAR 0 9
34972: PPUSH
34973: LD_VAR 0 4
34977: PPUSH
34978: LD_VAR 0 5
34982: PPUSH
34983: CALL 35025 0 6
34987: GO 35020
34989: LD_INT 304
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35019
34997: POP
// hHackTeleport ( unit , x , y ) ; end ;
34998: LD_VAR 0 2
35002: PPUSH
35003: LD_VAR 0 4
35007: PPUSH
35008: LD_VAR 0 5
35012: PPUSH
35013: CALL 36796 0 3
35017: GO 35020
35019: POP
// end ;
35020: LD_VAR 0 12
35024: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35025: LD_INT 0
35027: PPUSH
35028: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35029: LD_VAR 0 1
35033: PUSH
35034: LD_INT 1
35036: LESS
35037: IFTRUE 35049
35039: PUSH
35040: LD_VAR 0 1
35044: PUSH
35045: LD_INT 3
35047: GREATER
35048: OR
35049: IFTRUE 35067
35051: PUSH
35052: LD_VAR 0 5
35056: PPUSH
35057: LD_VAR 0 6
35061: PPUSH
35062: CALL_OW 428
35066: OR
35067: IFFALSE 35071
// exit ;
35069: GO 35799
// uc_side := your_side ;
35071: LD_ADDR_OWVAR 20
35075: PUSH
35076: LD_OWVAR 2
35080: ST_TO_ADDR
// uc_nation := nation ;
35081: LD_ADDR_OWVAR 21
35085: PUSH
35086: LD_VAR 0 1
35090: ST_TO_ADDR
// bc_level = 1 ;
35091: LD_ADDR_OWVAR 43
35095: PUSH
35096: LD_INT 1
35098: ST_TO_ADDR
// case btype of 1 :
35099: LD_VAR 0 2
35103: PUSH
35104: LD_INT 1
35106: DOUBLE
35107: EQUAL
35108: IFTRUE 35112
35110: GO 35123
35112: POP
// bc_type := b_depot ; 2 :
35113: LD_ADDR_OWVAR 42
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
35121: GO 35743
35123: LD_INT 2
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35142
35131: POP
// bc_type := b_warehouse ; 3 :
35132: LD_ADDR_OWVAR 42
35136: PUSH
35137: LD_INT 1
35139: ST_TO_ADDR
35140: GO 35743
35142: LD_INT 3
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35161
35150: POP
// bc_type := b_lab ; 4 .. 9 :
35151: LD_ADDR_OWVAR 42
35155: PUSH
35156: LD_INT 6
35158: ST_TO_ADDR
35159: GO 35743
35161: LD_INT 4
35163: DOUBLE
35164: GREATEREQUAL
35165: IFFALSE 35173
35167: LD_INT 9
35169: DOUBLE
35170: LESSEQUAL
35171: IFTRUE 35175
35173: GO 35235
35175: POP
// begin bc_type := b_lab_half ;
35176: LD_ADDR_OWVAR 42
35180: PUSH
35181: LD_INT 7
35183: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35184: LD_ADDR_OWVAR 44
35188: PUSH
35189: LD_INT 10
35191: PUSH
35192: LD_INT 11
35194: PUSH
35195: LD_INT 12
35197: PUSH
35198: LD_INT 15
35200: PUSH
35201: LD_INT 14
35203: PUSH
35204: LD_INT 13
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: PUSH
35215: LD_VAR 0 2
35219: PUSH
35220: LD_INT 3
35222: MINUS
35223: ARRAY
35224: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
35225: LD_ADDR_OWVAR 45
35229: PUSH
35230: LD_INT 9
35232: ST_TO_ADDR
// end ; 10 .. 13 :
35233: GO 35743
35235: LD_INT 10
35237: DOUBLE
35238: GREATEREQUAL
35239: IFFALSE 35247
35241: LD_INT 13
35243: DOUBLE
35244: LESSEQUAL
35245: IFTRUE 35249
35247: GO 35326
35249: POP
// begin bc_type := b_lab_full ;
35250: LD_ADDR_OWVAR 42
35254: PUSH
35255: LD_INT 8
35257: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35258: LD_ADDR_OWVAR 44
35262: PUSH
35263: LD_INT 10
35265: PUSH
35266: LD_INT 12
35268: PUSH
35269: LD_INT 14
35271: PUSH
35272: LD_INT 13
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 9
35288: MINUS
35289: ARRAY
35290: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35291: LD_ADDR_OWVAR 45
35295: PUSH
35296: LD_INT 11
35298: PUSH
35299: LD_INT 15
35301: PUSH
35302: LD_INT 12
35304: PUSH
35305: LD_INT 15
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: PUSH
35314: LD_VAR 0 2
35318: PUSH
35319: LD_INT 9
35321: MINUS
35322: ARRAY
35323: ST_TO_ADDR
// end ; 14 :
35324: GO 35743
35326: LD_INT 14
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35334
35332: GO 35345
35334: POP
// bc_type := b_workshop ; 15 :
35335: LD_ADDR_OWVAR 42
35339: PUSH
35340: LD_INT 2
35342: ST_TO_ADDR
35343: GO 35743
35345: LD_INT 15
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35364
35353: POP
// bc_type := b_factory ; 16 :
35354: LD_ADDR_OWVAR 42
35358: PUSH
35359: LD_INT 3
35361: ST_TO_ADDR
35362: GO 35743
35364: LD_INT 16
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35383
35372: POP
// bc_type := b_ext_gun ; 17 :
35373: LD_ADDR_OWVAR 42
35377: PUSH
35378: LD_INT 17
35380: ST_TO_ADDR
35381: GO 35743
35383: LD_INT 17
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35391
35389: GO 35419
35391: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35392: LD_ADDR_OWVAR 42
35396: PUSH
35397: LD_INT 19
35399: PUSH
35400: LD_INT 23
35402: PUSH
35403: LD_INT 19
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: PUSH
35411: LD_VAR 0 1
35415: ARRAY
35416: ST_TO_ADDR
35417: GO 35743
35419: LD_INT 18
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35438
35427: POP
// bc_type := b_ext_radar ; 19 :
35428: LD_ADDR_OWVAR 42
35432: PUSH
35433: LD_INT 20
35435: ST_TO_ADDR
35436: GO 35743
35438: LD_INT 19
35440: DOUBLE
35441: EQUAL
35442: IFTRUE 35446
35444: GO 35457
35446: POP
// bc_type := b_ext_radio ; 20 :
35447: LD_ADDR_OWVAR 42
35451: PUSH
35452: LD_INT 22
35454: ST_TO_ADDR
35455: GO 35743
35457: LD_INT 20
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35476
35465: POP
// bc_type := b_ext_siberium ; 21 :
35466: LD_ADDR_OWVAR 42
35470: PUSH
35471: LD_INT 21
35473: ST_TO_ADDR
35474: GO 35743
35476: LD_INT 21
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 35495
35484: POP
// bc_type := b_ext_computer ; 22 :
35485: LD_ADDR_OWVAR 42
35489: PUSH
35490: LD_INT 24
35492: ST_TO_ADDR
35493: GO 35743
35495: LD_INT 22
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35514
35503: POP
// bc_type := b_ext_track ; 23 :
35504: LD_ADDR_OWVAR 42
35508: PUSH
35509: LD_INT 16
35511: ST_TO_ADDR
35512: GO 35743
35514: LD_INT 23
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35533
35522: POP
// bc_type := b_ext_laser ; 24 :
35523: LD_ADDR_OWVAR 42
35527: PUSH
35528: LD_INT 25
35530: ST_TO_ADDR
35531: GO 35743
35533: LD_INT 24
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35541
35539: GO 35552
35541: POP
// bc_type := b_control_tower ; 25 :
35542: LD_ADDR_OWVAR 42
35546: PUSH
35547: LD_INT 36
35549: ST_TO_ADDR
35550: GO 35743
35552: LD_INT 25
35554: DOUBLE
35555: EQUAL
35556: IFTRUE 35560
35558: GO 35571
35560: POP
// bc_type := b_breastwork ; 26 :
35561: LD_ADDR_OWVAR 42
35565: PUSH
35566: LD_INT 31
35568: ST_TO_ADDR
35569: GO 35743
35571: LD_INT 26
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35579
35577: GO 35590
35579: POP
// bc_type := b_bunker ; 27 :
35580: LD_ADDR_OWVAR 42
35584: PUSH
35585: LD_INT 32
35587: ST_TO_ADDR
35588: GO 35743
35590: LD_INT 27
35592: DOUBLE
35593: EQUAL
35594: IFTRUE 35598
35596: GO 35609
35598: POP
// bc_type := b_turret ; 28 :
35599: LD_ADDR_OWVAR 42
35603: PUSH
35604: LD_INT 33
35606: ST_TO_ADDR
35607: GO 35743
35609: LD_INT 28
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35617
35615: GO 35628
35617: POP
// bc_type := b_armoury ; 29 :
35618: LD_ADDR_OWVAR 42
35622: PUSH
35623: LD_INT 4
35625: ST_TO_ADDR
35626: GO 35743
35628: LD_INT 29
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 35647
35636: POP
// bc_type := b_barracks ; 30 :
35637: LD_ADDR_OWVAR 42
35641: PUSH
35642: LD_INT 5
35644: ST_TO_ADDR
35645: GO 35743
35647: LD_INT 30
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35666
35655: POP
// bc_type := b_solar_power ; 31 :
35656: LD_ADDR_OWVAR 42
35660: PUSH
35661: LD_INT 27
35663: ST_TO_ADDR
35664: GO 35743
35666: LD_INT 31
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35674
35672: GO 35685
35674: POP
// bc_type := b_oil_power ; 32 :
35675: LD_ADDR_OWVAR 42
35679: PUSH
35680: LD_INT 26
35682: ST_TO_ADDR
35683: GO 35743
35685: LD_INT 32
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 35704
35693: POP
// bc_type := b_siberite_power ; 33 :
35694: LD_ADDR_OWVAR 42
35698: PUSH
35699: LD_INT 28
35701: ST_TO_ADDR
35702: GO 35743
35704: LD_INT 33
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35712
35710: GO 35723
35712: POP
// bc_type := b_oil_mine ; 34 :
35713: LD_ADDR_OWVAR 42
35717: PUSH
35718: LD_INT 29
35720: ST_TO_ADDR
35721: GO 35743
35723: LD_INT 34
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35731
35729: GO 35742
35731: POP
// bc_type := b_siberite_mine ; end ;
35732: LD_ADDR_OWVAR 42
35736: PUSH
35737: LD_INT 30
35739: ST_TO_ADDR
35740: GO 35743
35742: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35743: LD_ADDR_VAR 0 8
35747: PUSH
35748: LD_VAR 0 5
35752: PPUSH
35753: LD_VAR 0 6
35757: PPUSH
35758: LD_VAR 0 3
35762: PPUSH
35763: CALL_OW 47
35767: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35768: LD_OWVAR 42
35772: PUSH
35773: LD_INT 32
35775: PUSH
35776: LD_INT 33
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: IN
35783: IFFALSE 35799
// PlaceWeaponTurret ( b , weapon ) ;
35785: LD_VAR 0 8
35789: PPUSH
35790: LD_VAR 0 4
35794: PPUSH
35795: CALL_OW 431
// end ;
35799: LD_VAR 0 7
35803: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35810: LD_ADDR_VAR 0 4
35814: PUSH
35815: LD_INT 22
35817: PUSH
35818: LD_OWVAR 2
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 30
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 30
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PPUSH
35859: CALL_OW 69
35863: ST_TO_ADDR
// if not tmp then
35864: LD_VAR 0 4
35868: NOT
35869: IFFALSE 35873
// exit ;
35871: GO 35932
// for i in tmp do
35873: LD_ADDR_VAR 0 2
35877: PUSH
35878: LD_VAR 0 4
35882: PUSH
35883: FOR_IN
35884: IFFALSE 35930
// for j = 1 to 3 do
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: DOUBLE
35892: LD_INT 1
35894: DEC
35895: ST_TO_ADDR
35896: LD_INT 3
35898: PUSH
35899: FOR_TO
35900: IFFALSE 35926
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35902: LD_VAR 0 2
35906: PPUSH
35907: CALL_OW 274
35911: PPUSH
35912: LD_VAR 0 3
35916: PPUSH
35917: LD_INT 99999
35919: PPUSH
35920: CALL_OW 277
35924: GO 35899
35926: POP
35927: POP
35928: GO 35883
35930: POP
35931: POP
// end ;
35932: LD_VAR 0 1
35936: RET
// export function hHackSetLevel10 ; var i , j ; begin
35937: LD_INT 0
35939: PPUSH
35940: PPUSH
35941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35942: LD_ADDR_VAR 0 2
35946: PUSH
35947: LD_INT 21
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PPUSH
35957: CALL_OW 69
35961: PUSH
35962: FOR_IN
35963: IFFALSE 36015
// if IsSelected ( i ) then
35965: LD_VAR 0 2
35969: PPUSH
35970: CALL_OW 306
35974: IFFALSE 36013
// begin for j := 1 to 4 do
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: DOUBLE
35982: LD_INT 1
35984: DEC
35985: ST_TO_ADDR
35986: LD_INT 4
35988: PUSH
35989: FOR_TO
35990: IFFALSE 36011
// SetSkill ( i , j , 10 ) ;
35992: LD_VAR 0 2
35996: PPUSH
35997: LD_VAR 0 3
36001: PPUSH
36002: LD_INT 10
36004: PPUSH
36005: CALL_OW 237
36009: GO 35989
36011: POP
36012: POP
// end ;
36013: GO 35962
36015: POP
36016: POP
// end ;
36017: LD_VAR 0 1
36021: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36022: LD_INT 0
36024: PPUSH
36025: PPUSH
36026: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36027: LD_ADDR_VAR 0 2
36031: PUSH
36032: LD_INT 22
36034: PUSH
36035: LD_OWVAR 2
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 21
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PPUSH
36058: CALL_OW 69
36062: PUSH
36063: FOR_IN
36064: IFFALSE 36105
// begin for j := 1 to 4 do
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: DOUBLE
36072: LD_INT 1
36074: DEC
36075: ST_TO_ADDR
36076: LD_INT 4
36078: PUSH
36079: FOR_TO
36080: IFFALSE 36101
// SetSkill ( i , j , 10 ) ;
36082: LD_VAR 0 2
36086: PPUSH
36087: LD_VAR 0 3
36091: PPUSH
36092: LD_INT 10
36094: PPUSH
36095: CALL_OW 237
36099: GO 36079
36101: POP
36102: POP
// end ;
36103: GO 36063
36105: POP
36106: POP
// end ;
36107: LD_VAR 0 1
36111: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36112: LD_INT 0
36114: PPUSH
// uc_side := your_side ;
36115: LD_ADDR_OWVAR 20
36119: PUSH
36120: LD_OWVAR 2
36124: ST_TO_ADDR
// uc_nation := nation ;
36125: LD_ADDR_OWVAR 21
36129: PUSH
36130: LD_VAR 0 1
36134: ST_TO_ADDR
// InitHc ;
36135: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36139: LD_INT 0
36141: PPUSH
36142: LD_VAR 0 2
36146: PPUSH
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36156: LD_VAR 0 4
36160: PPUSH
36161: LD_VAR 0 5
36165: PPUSH
36166: CALL_OW 428
36170: PUSH
36171: LD_INT 0
36173: EQUAL
36174: IFFALSE 36198
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36176: CALL_OW 44
36180: PPUSH
36181: LD_VAR 0 4
36185: PPUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: LD_INT 1
36193: PPUSH
36194: CALL_OW 48
// end ;
36198: LD_VAR 0 6
36202: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
// uc_side := your_side ;
36207: LD_ADDR_OWVAR 20
36211: PUSH
36212: LD_OWVAR 2
36216: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36217: LD_VAR 0 1
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 3
36230: PUSH
36231: LD_INT 4
36233: PUSH
36234: LD_INT 5
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: IN
36244: IFFALSE 36256
// uc_nation := nation_american else
36246: LD_ADDR_OWVAR 21
36250: PUSH
36251: LD_INT 1
36253: ST_TO_ADDR
36254: GO 36299
// if chassis in [ 11 , 12 , 13 , 14 ] then
36256: LD_VAR 0 1
36260: PUSH
36261: LD_INT 11
36263: PUSH
36264: LD_INT 12
36266: PUSH
36267: LD_INT 13
36269: PUSH
36270: LD_INT 14
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: IN
36279: IFFALSE 36291
// uc_nation := nation_arabian else
36281: LD_ADDR_OWVAR 21
36285: PUSH
36286: LD_INT 2
36288: ST_TO_ADDR
36289: GO 36299
// uc_nation := nation_russian ;
36291: LD_ADDR_OWVAR 21
36295: PUSH
36296: LD_INT 3
36298: ST_TO_ADDR
// vc_chassis := chassis ;
36299: LD_ADDR_OWVAR 37
36303: PUSH
36304: LD_VAR 0 1
36308: ST_TO_ADDR
// vc_engine := engine ;
36309: LD_ADDR_OWVAR 39
36313: PUSH
36314: LD_VAR 0 2
36318: ST_TO_ADDR
// vc_control := control ;
36319: LD_ADDR_OWVAR 38
36323: PUSH
36324: LD_VAR 0 3
36328: ST_TO_ADDR
// vc_weapon := weapon ;
36329: LD_ADDR_OWVAR 40
36333: PUSH
36334: LD_VAR 0 4
36338: ST_TO_ADDR
// un := CreateVehicle ;
36339: LD_ADDR_VAR 0 8
36343: PUSH
36344: CALL_OW 45
36348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36349: LD_VAR 0 8
36353: PPUSH
36354: LD_INT 0
36356: PPUSH
36357: LD_INT 5
36359: PPUSH
36360: CALL_OW 12
36364: PPUSH
36365: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36369: LD_VAR 0 8
36373: PPUSH
36374: LD_VAR 0 5
36378: PPUSH
36379: LD_VAR 0 6
36383: PPUSH
36384: LD_INT 1
36386: PPUSH
36387: CALL_OW 48
// end ;
36391: LD_VAR 0 7
36395: RET
// export hInvincible ; every 1 do
36396: GO 36398
36398: DISABLE
// hInvincible := [ ] ;
36399: LD_ADDR_EXP 108
36403: PUSH
36404: EMPTY
36405: ST_TO_ADDR
36406: END
// every 10 do var i ;
36407: GO 36409
36409: DISABLE
36410: LD_INT 0
36412: PPUSH
// begin enable ;
36413: ENABLE
// if not hInvincible then
36414: LD_EXP 108
36418: NOT
36419: IFFALSE 36423
// exit ;
36421: GO 36467
// for i in hInvincible do
36423: LD_ADDR_VAR 0 1
36427: PUSH
36428: LD_EXP 108
36432: PUSH
36433: FOR_IN
36434: IFFALSE 36465
// if GetLives ( i ) < 1000 then
36436: LD_VAR 0 1
36440: PPUSH
36441: CALL_OW 256
36445: PUSH
36446: LD_INT 1000
36448: LESS
36449: IFFALSE 36463
// SetLives ( i , 1000 ) ;
36451: LD_VAR 0 1
36455: PPUSH
36456: LD_INT 1000
36458: PPUSH
36459: CALL_OW 234
36463: GO 36433
36465: POP
36466: POP
// end ;
36467: PPOPN 1
36469: END
// export function hHackInvincible ; var i ; begin
36470: LD_INT 0
36472: PPUSH
36473: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36474: LD_ADDR_VAR 0 2
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 21
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 21
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: PPUSH
36507: CALL_OW 69
36511: PUSH
36512: FOR_IN
36513: IFFALSE 36574
// if IsSelected ( i ) then
36515: LD_VAR 0 2
36519: PPUSH
36520: CALL_OW 306
36524: IFFALSE 36572
// begin if i in hInvincible then
36526: LD_VAR 0 2
36530: PUSH
36531: LD_EXP 108
36535: IN
36536: IFFALSE 36556
// hInvincible := hInvincible diff i else
36538: LD_ADDR_EXP 108
36542: PUSH
36543: LD_EXP 108
36547: PUSH
36548: LD_VAR 0 2
36552: DIFF
36553: ST_TO_ADDR
36554: GO 36572
// hInvincible := hInvincible union i ;
36556: LD_ADDR_EXP 108
36560: PUSH
36561: LD_EXP 108
36565: PUSH
36566: LD_VAR 0 2
36570: UNION
36571: ST_TO_ADDR
// end ;
36572: GO 36512
36574: POP
36575: POP
// end ;
36576: LD_VAR 0 1
36580: RET
// export function hHackInvisible ; var i , j ; begin
36581: LD_INT 0
36583: PPUSH
36584: PPUSH
36585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36586: LD_ADDR_VAR 0 2
36590: PUSH
36591: LD_INT 21
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PPUSH
36601: CALL_OW 69
36605: PUSH
36606: FOR_IN
36607: IFFALSE 36631
// if IsSelected ( i ) then
36609: LD_VAR 0 2
36613: PPUSH
36614: CALL_OW 306
36618: IFFALSE 36629
// ComForceInvisible ( i ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: CALL_OW 496
36629: GO 36606
36631: POP
36632: POP
// end ;
36633: LD_VAR 0 1
36637: RET
// export function hHackChangeYourSide ; begin
36638: LD_INT 0
36640: PPUSH
// if your_side = 8 then
36641: LD_OWVAR 2
36645: PUSH
36646: LD_INT 8
36648: EQUAL
36649: IFFALSE 36661
// your_side := 0 else
36651: LD_ADDR_OWVAR 2
36655: PUSH
36656: LD_INT 0
36658: ST_TO_ADDR
36659: GO 36675
// your_side := your_side + 1 ;
36661: LD_ADDR_OWVAR 2
36665: PUSH
36666: LD_OWVAR 2
36670: PUSH
36671: LD_INT 1
36673: PLUS
36674: ST_TO_ADDR
// end ;
36675: LD_VAR 0 1
36679: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36680: LD_INT 0
36682: PPUSH
36683: PPUSH
36684: PPUSH
// for i in all_units do
36685: LD_ADDR_VAR 0 2
36689: PUSH
36690: LD_OWVAR 3
36694: PUSH
36695: FOR_IN
36696: IFFALSE 36774
// if IsSelected ( i ) then
36698: LD_VAR 0 2
36702: PPUSH
36703: CALL_OW 306
36707: IFFALSE 36772
// begin j := GetSide ( i ) ;
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_VAR 0 2
36718: PPUSH
36719: CALL_OW 255
36723: ST_TO_ADDR
// if j = 8 then
36724: LD_VAR 0 3
36728: PUSH
36729: LD_INT 8
36731: EQUAL
36732: IFFALSE 36744
// j := 0 else
36734: LD_ADDR_VAR 0 3
36738: PUSH
36739: LD_INT 0
36741: ST_TO_ADDR
36742: GO 36758
// j := j + 1 ;
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_VAR 0 3
36753: PUSH
36754: LD_INT 1
36756: PLUS
36757: ST_TO_ADDR
// SetSide ( i , j ) ;
36758: LD_VAR 0 2
36762: PPUSH
36763: LD_VAR 0 3
36767: PPUSH
36768: CALL_OW 235
// end ;
36772: GO 36695
36774: POP
36775: POP
// end ;
36776: LD_VAR 0 1
36780: RET
// export function hHackFog ; begin
36781: LD_INT 0
36783: PPUSH
// FogOff ( true ) ;
36784: LD_INT 1
36786: PPUSH
36787: CALL_OW 344
// end ;
36791: LD_VAR 0 1
36795: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36796: LD_INT 0
36798: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36799: LD_VAR 0 1
36803: PPUSH
36804: LD_VAR 0 2
36808: PPUSH
36809: LD_VAR 0 3
36813: PPUSH
36814: LD_INT 1
36816: PPUSH
36817: LD_INT 1
36819: PPUSH
36820: CALL_OW 483
// CenterOnXY ( x , y ) ;
36824: LD_VAR 0 2
36828: PPUSH
36829: LD_VAR 0 3
36833: PPUSH
36834: CALL_OW 84
// end ;
36838: LD_VAR 0 4
36842: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36843: LD_INT 0
36845: PPUSH
36846: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36847: LD_VAR 0 1
36851: NOT
36852: IFTRUE 36871
36854: PUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 3
36864: PPUSH
36865: CALL_OW 488
36869: NOT
36870: OR
36871: IFTRUE 36906
36873: PUSH
36874: LD_VAR 0 1
36878: PPUSH
36879: CALL_OW 266
36883: PUSH
36884: LD_INT 3
36886: NONEQUAL
36887: IFFALSE 36905
36889: PUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: CALL_OW 247
36899: PUSH
36900: LD_INT 1
36902: EQUAL
36903: NOT
36904: AND
36905: OR
36906: IFFALSE 36910
// exit ;
36908: GO 37192
// if GetType ( factory ) = unit_human then
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 247
36919: PUSH
36920: LD_INT 1
36922: EQUAL
36923: IFFALSE 36940
// factory := IsInUnit ( factory ) ;
36925: LD_ADDR_VAR 0 1
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 310
36939: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 266
36949: PUSH
36950: LD_INT 3
36952: NONEQUAL
36953: IFFALSE 36957
// exit ;
36955: GO 37192
// for i := 1 to Count ( factoryWaypoints ) do
36957: LD_ADDR_VAR 0 5
36961: PUSH
36962: DOUBLE
36963: LD_INT 1
36965: DEC
36966: ST_TO_ADDR
36967: LD_EXP 109
36971: PPUSH
36972: CALL 46996 0 1
36976: PUSH
36977: FOR_TO
36978: IFFALSE 37140
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36980: LD_VAR 0 2
36984: PPUSH
36985: LD_VAR 0 3
36989: PPUSH
36990: CALL_OW 428
36994: PUSH
36995: LD_EXP 109
36999: PUSH
37000: LD_VAR 0 5
37004: ARRAY
37005: PUSH
37006: LD_INT 2
37008: ARRAY
37009: EQUAL
37010: IFFALSE 37042
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
37012: LD_ADDR_EXP 109
37016: PUSH
37017: LD_EXP 109
37021: PPUSH
37022: LD_VAR 0 5
37026: PPUSH
37027: CALL_OW 3
37031: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37032: CALL 37197 0 0
// exit ;
37036: POP
37037: POP
37038: GO 37192
// end else
37040: GO 37138
// if factory = factoryWaypoints [ i ] [ 2 ] then
37042: LD_VAR 0 1
37046: PUSH
37047: LD_EXP 109
37051: PUSH
37052: LD_VAR 0 5
37056: ARRAY
37057: PUSH
37058: LD_INT 2
37060: ARRAY
37061: EQUAL
37062: IFFALSE 37138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
37064: LD_ADDR_EXP 109
37068: PUSH
37069: LD_EXP 109
37073: PPUSH
37074: LD_VAR 0 5
37078: PPUSH
37079: CALL_OW 3
37083: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
37084: LD_ADDR_EXP 109
37088: PUSH
37089: LD_EXP 109
37093: PPUSH
37094: LD_VAR 0 1
37098: PPUSH
37099: CALL_OW 255
37103: PUSH
37104: LD_VAR 0 1
37108: PUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_VAR 0 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: PPUSH
37125: CALL 82972 0 2
37129: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37130: CALL 37197 0 0
// exit ;
37134: POP
37135: POP
37136: GO 37192
// end ; end ;
37138: GO 36977
37140: POP
37141: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
37142: LD_ADDR_EXP 109
37146: PUSH
37147: LD_EXP 109
37151: PPUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 255
37161: PUSH
37162: LD_VAR 0 1
37166: PUSH
37167: LD_VAR 0 2
37171: PUSH
37172: LD_VAR 0 3
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: PPUSH
37183: CALL 82972 0 2
37187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37188: CALL 37197 0 0
// end ;
37192: LD_VAR 0 4
37196: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
37201: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
37202: LD_STRING resetFactoryWaypoint();
37204: PPUSH
37205: CALL_OW 559
// if factoryWaypoints then
37209: LD_EXP 109
37213: IFFALSE 37334
// begin list := factoryWaypoints ;
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: LD_EXP 109
37224: ST_TO_ADDR
// for i := 1 to list do
37225: LD_ADDR_VAR 0 2
37229: PUSH
37230: DOUBLE
37231: LD_INT 1
37233: DEC
37234: ST_TO_ADDR
37235: LD_VAR 0 3
37239: PUSH
37240: FOR_TO
37241: IFFALSE 37332
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37243: LD_STRING setFactoryWaypointXY(
37245: PUSH
37246: LD_VAR 0 3
37250: PUSH
37251: LD_VAR 0 2
37255: ARRAY
37256: PUSH
37257: LD_INT 1
37259: ARRAY
37260: STR
37261: PUSH
37262: LD_STRING ,
37264: STR
37265: PUSH
37266: LD_VAR 0 3
37270: PUSH
37271: LD_VAR 0 2
37275: ARRAY
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: STR
37281: PUSH
37282: LD_STRING ,
37284: STR
37285: PUSH
37286: LD_VAR 0 3
37290: PUSH
37291: LD_VAR 0 2
37295: ARRAY
37296: PUSH
37297: LD_INT 3
37299: ARRAY
37300: STR
37301: PUSH
37302: LD_STRING ,
37304: STR
37305: PUSH
37306: LD_VAR 0 3
37310: PUSH
37311: LD_VAR 0 2
37315: ARRAY
37316: PUSH
37317: LD_INT 4
37319: ARRAY
37320: STR
37321: PUSH
37322: LD_STRING )
37324: STR
37325: PPUSH
37326: CALL_OW 559
37330: GO 37240
37332: POP
37333: POP
// end ; end ;
37334: LD_VAR 0 1
37338: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
37339: LD_INT 0
37341: PPUSH
// if HexInfo ( x , y ) = warehouse then
37342: LD_VAR 0 2
37346: PPUSH
37347: LD_VAR 0 3
37351: PPUSH
37352: CALL_OW 428
37356: PUSH
37357: LD_VAR 0 1
37361: EQUAL
37362: IFFALSE 37389
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
37364: LD_ADDR_EXP 111
37368: PUSH
37369: LD_EXP 111
37373: PPUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: LD_INT 0
37381: PPUSH
37382: CALL_OW 1
37386: ST_TO_ADDR
37387: GO 37440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
37389: LD_ADDR_EXP 111
37393: PUSH
37394: LD_EXP 111
37398: PPUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: CALL_OW 255
37413: PUSH
37414: LD_VAR 0 1
37418: PUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_VAR 0 3
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: PPUSH
37435: CALL_OW 1
37439: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
37440: CALL 37449 0 0
// end ;
37444: LD_VAR 0 4
37448: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
37449: LD_INT 0
37451: PPUSH
37452: PPUSH
37453: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
37454: LD_STRING resetWarehouseGatheringPoints();
37456: PPUSH
37457: CALL_OW 559
// if warehouseGatheringPoints then
37461: LD_EXP 111
37465: IFFALSE 37591
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
37467: LD_ADDR_VAR 0 3
37471: PUSH
37472: LD_EXP 111
37476: PPUSH
37477: CALL 86906 0 1
37481: ST_TO_ADDR
// for i := 1 to list do
37482: LD_ADDR_VAR 0 2
37486: PUSH
37487: DOUBLE
37488: LD_INT 1
37490: DEC
37491: ST_TO_ADDR
37492: LD_VAR 0 3
37496: PUSH
37497: FOR_TO
37498: IFFALSE 37589
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37500: LD_STRING setWarehouseGatheringPointXY(
37502: PUSH
37503: LD_VAR 0 3
37507: PUSH
37508: LD_VAR 0 2
37512: ARRAY
37513: PUSH
37514: LD_INT 1
37516: ARRAY
37517: STR
37518: PUSH
37519: LD_STRING ,
37521: STR
37522: PUSH
37523: LD_VAR 0 3
37527: PUSH
37528: LD_VAR 0 2
37532: ARRAY
37533: PUSH
37534: LD_INT 2
37536: ARRAY
37537: STR
37538: PUSH
37539: LD_STRING ,
37541: STR
37542: PUSH
37543: LD_VAR 0 3
37547: PUSH
37548: LD_VAR 0 2
37552: ARRAY
37553: PUSH
37554: LD_INT 3
37556: ARRAY
37557: STR
37558: PUSH
37559: LD_STRING ,
37561: STR
37562: PUSH
37563: LD_VAR 0 3
37567: PUSH
37568: LD_VAR 0 2
37572: ARRAY
37573: PUSH
37574: LD_INT 4
37576: ARRAY
37577: STR
37578: PUSH
37579: LD_STRING )
37581: STR
37582: PPUSH
37583: CALL_OW 559
37587: GO 37497
37589: POP
37590: POP
// end ; end ;
37591: LD_VAR 0 1
37595: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37596: LD_EXP 111
37600: IFFALSE 38295
37602: GO 37604
37604: DISABLE
37605: LD_INT 0
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
// begin enable ;
37616: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37617: LD_ADDR_VAR 0 3
37621: PUSH
37622: LD_EXP 111
37626: PPUSH
37627: CALL 86906 0 1
37631: ST_TO_ADDR
// if not list then
37632: LD_VAR 0 3
37636: NOT
37637: IFFALSE 37641
// exit ;
37639: GO 38295
// for i := 1 to list do
37641: LD_ADDR_VAR 0 1
37645: PUSH
37646: DOUBLE
37647: LD_INT 1
37649: DEC
37650: ST_TO_ADDR
37651: LD_VAR 0 3
37655: PUSH
37656: FOR_TO
37657: IFFALSE 38293
// begin depot := list [ i ] [ 2 ] ;
37659: LD_ADDR_VAR 0 8
37663: PUSH
37664: LD_VAR 0 3
37668: PUSH
37669: LD_VAR 0 1
37673: ARRAY
37674: PUSH
37675: LD_INT 2
37677: ARRAY
37678: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_VAR 0 3
37688: PUSH
37689: LD_VAR 0 1
37693: ARRAY
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37699: LD_VAR 0 8
37703: PPUSH
37704: CALL_OW 301
37708: IFTRUE 37727
37710: PUSH
37711: LD_VAR 0 5
37715: PUSH
37716: LD_VAR 0 8
37720: PPUSH
37721: CALL_OW 255
37725: NONEQUAL
37726: OR
37727: IFFALSE 37756
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37729: LD_ADDR_EXP 111
37733: PUSH
37734: LD_EXP 111
37738: PPUSH
37739: LD_VAR 0 8
37743: PPUSH
37744: LD_INT 0
37746: PPUSH
37747: CALL_OW 1
37751: ST_TO_ADDR
// exit ;
37752: POP
37753: POP
37754: GO 38295
// end ; x := list [ i ] [ 3 ] ;
37756: LD_ADDR_VAR 0 6
37760: PUSH
37761: LD_VAR 0 3
37765: PUSH
37766: LD_VAR 0 1
37770: ARRAY
37771: PUSH
37772: LD_INT 3
37774: ARRAY
37775: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37776: LD_ADDR_VAR 0 7
37780: PUSH
37781: LD_VAR 0 3
37785: PUSH
37786: LD_VAR 0 1
37790: ARRAY
37791: PUSH
37792: LD_INT 4
37794: ARRAY
37795: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37796: LD_ADDR_VAR 0 9
37800: PUSH
37801: LD_VAR 0 6
37805: PPUSH
37806: LD_VAR 0 7
37810: PPUSH
37811: LD_INT 16
37813: PPUSH
37814: CALL 85480 0 3
37818: ST_TO_ADDR
// if not cratesNearbyPoint then
37819: LD_VAR 0 9
37823: NOT
37824: IFFALSE 37830
// exit ;
37826: POP
37827: POP
37828: GO 38295
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37830: LD_ADDR_VAR 0 4
37834: PUSH
37835: LD_INT 22
37837: PUSH
37838: LD_VAR 0 5
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: LD_INT 60
37852: PUSH
37853: EMPTY
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 91
37862: PUSH
37863: LD_VAR 0 8
37867: PUSH
37868: LD_INT 6
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 25
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 25
37891: PUSH
37892: LD_INT 16
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: PPUSH
37910: CALL_OW 69
37914: PUSH
37915: LD_VAR 0 8
37919: PPUSH
37920: CALL_OW 313
37924: PPUSH
37925: LD_INT 3
37927: PUSH
37928: LD_INT 60
37930: PUSH
37931: EMPTY
37932: LIST
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 25
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 25
37953: PUSH
37954: LD_INT 16
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PPUSH
37970: CALL_OW 72
37974: UNION
37975: ST_TO_ADDR
// if tmp then
37976: LD_VAR 0 4
37980: IFFALSE 38060
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37982: LD_ADDR_VAR 0 4
37986: PUSH
37987: LD_VAR 0 4
37991: PPUSH
37992: LD_INT 3
37994: PPUSH
37995: CALL 83287 0 2
37999: ST_TO_ADDR
// for j in tmp do
38000: LD_ADDR_VAR 0 2
38004: PUSH
38005: LD_VAR 0 4
38009: PUSH
38010: FOR_IN
38011: IFFALSE 38054
// begin if IsInUnit ( j ) then
38013: LD_VAR 0 2
38017: PPUSH
38018: CALL_OW 310
38022: IFFALSE 38033
// ComExit ( j ) ;
38024: LD_VAR 0 2
38028: PPUSH
38029: CALL 83370 0 1
// AddComCollect ( j , x , y ) ;
38033: LD_VAR 0 2
38037: PPUSH
38038: LD_VAR 0 6
38042: PPUSH
38043: LD_VAR 0 7
38047: PPUSH
38048: CALL_OW 177
// end ;
38052: GO 38010
38054: POP
38055: POP
// exit ;
38056: POP
38057: POP
38058: GO 38295
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
38060: LD_ADDR_VAR 0 4
38064: PUSH
38065: LD_INT 22
38067: PUSH
38068: LD_VAR 0 5
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 91
38079: PUSH
38080: LD_VAR 0 8
38084: PUSH
38085: LD_INT 8
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 34
38098: PUSH
38099: LD_INT 12
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 34
38108: PUSH
38109: LD_INT 51
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 34
38118: PUSH
38119: LD_INT 32
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 34
38128: PUSH
38129: LD_INT 89
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: PPUSH
38148: CALL_OW 69
38152: ST_TO_ADDR
// if tmp then
38153: LD_VAR 0 4
38157: IFFALSE 38291
// begin for j in tmp do
38159: LD_ADDR_VAR 0 2
38163: PUSH
38164: LD_VAR 0 4
38168: PUSH
38169: FOR_IN
38170: IFFALSE 38289
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL_OW 262
38181: PUSH
38182: LD_INT 3
38184: EQUAL
38185: IFTRUE 38202
38187: PUSH
38188: LD_VAR 0 2
38192: PPUSH
38193: CALL_OW 261
38197: PUSH
38198: LD_INT 20
38200: GREATER
38201: OR
38202: IFFALSE 38216
38204: PUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: CALL_OW 314
38214: NOT
38215: AND
38216: IFFALSE 38246
38218: PUSH
38219: LD_VAR 0 2
38223: PPUSH
38224: CALL_OW 263
38228: PUSH
38229: LD_INT 1
38231: NONEQUAL
38232: IFTRUE 38245
38234: PUSH
38235: LD_VAR 0 2
38239: PPUSH
38240: CALL_OW 311
38244: OR
38245: AND
38246: IFFALSE 38287
// begin ComCollect ( j , x , y ) ;
38248: LD_VAR 0 2
38252: PPUSH
38253: LD_VAR 0 6
38257: PPUSH
38258: LD_VAR 0 7
38262: PPUSH
38263: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
38267: LD_VAR 0 2
38271: PPUSH
38272: LD_VAR 0 8
38276: PPUSH
38277: CALL_OW 172
// exit ;
38281: POP
38282: POP
38283: POP
38284: POP
38285: GO 38295
// end ;
38287: GO 38169
38289: POP
38290: POP
// end ; end ;
38291: GO 37656
38293: POP
38294: POP
// end ; end_of_file
38295: PPOPN 9
38297: END
// export function SOS_UnitDestroyed ( un ) ; begin
38298: LD_INT 0
38300: PPUSH
// ComRadiation ( un ) ;
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL 39468 0 1
// end ;
38310: LD_VAR 0 2
38314: RET
// export function SOS_UnitKamikazed ( un ) ; begin
38315: LD_INT 0
38317: PPUSH
// ComRadiation ( un ) ;
38318: LD_VAR 0 1
38322: PPUSH
38323: CALL 39468 0 1
// end ;
38327: LD_VAR 0 2
38331: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
38332: LD_INT 0
38334: PPUSH
// end ;
38335: LD_VAR 0 4
38339: RET
// export function SOS_Command ( cmd ) ; begin
38340: LD_INT 0
38342: PPUSH
// end ;
38343: LD_VAR 0 2
38347: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
38348: LD_INT 0
38350: PPUSH
// end ;
38351: LD_VAR 0 6
38355: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
38356: LD_INT 0
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
// if not vehicle or not factory then
38363: LD_VAR 0 1
38367: NOT
38368: IFTRUE 38377
38370: PUSH
38371: LD_VAR 0 2
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 39043
// weapon := GetWeapon ( vehicle ) ;
38381: LD_ADDR_VAR 0 7
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 264
38395: ST_TO_ADDR
// if weapon = ar_miner then
38396: LD_VAR 0 7
38400: PUSH
38401: LD_INT 81
38403: EQUAL
38404: IFFALSE 38461
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
38406: LD_ADDR_EXP 120
38410: PUSH
38411: LD_EXP 120
38415: PPUSH
38416: LD_EXP 120
38420: PUSH
38421: LD_INT 1
38423: PLUS
38424: PPUSH
38425: LD_VAR 0 1
38429: PPUSH
38430: CALL_OW 1
38434: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38435: LD_ADDR_EXP 121
38439: PUSH
38440: LD_EXP 121
38444: PPUSH
38445: LD_EXP 121
38449: PUSH
38450: LD_INT 1
38452: PLUS
38453: PPUSH
38454: EMPTY
38455: PPUSH
38456: CALL_OW 1
38460: ST_TO_ADDR
// end ; if not factoryWaypoints then
38461: LD_EXP 109
38465: NOT
38466: IFFALSE 38470
// exit ;
38468: GO 39043
// for i := 1 to Count ( factoryWaypoints ) do
38470: LD_ADDR_VAR 0 4
38474: PUSH
38475: DOUBLE
38476: LD_INT 1
38478: DEC
38479: ST_TO_ADDR
38480: LD_EXP 109
38484: PPUSH
38485: CALL 46996 0 1
38489: PUSH
38490: FOR_TO
38491: IFFALSE 39041
// if factoryWaypoints [ i ] [ 2 ] = factory then
38493: LD_EXP 109
38497: PUSH
38498: LD_VAR 0 4
38502: ARRAY
38503: PUSH
38504: LD_INT 2
38506: ARRAY
38507: PUSH
38508: LD_VAR 0 2
38512: EQUAL
38513: IFFALSE 39039
// begin if GetControl ( vehicle ) = control_manual then
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 263
38524: PUSH
38525: LD_INT 1
38527: EQUAL
38528: IFFALSE 38892
// begin driver := IsDrivenBy ( vehicle ) ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 311
38544: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
38545: LD_VAR 0 5
38549: PUSH
38550: LD_EXP 110
38554: IN
38555: IFTRUE 38569
38557: PUSH
38558: LD_VAR 0 1
38562: PUSH
38563: LD_EXP 110
38567: IN
38568: OR
38569: IFFALSE 38575
// exit ;
38571: POP
38572: POP
38573: GO 39043
// if not HasTask ( driver ) then
38575: LD_VAR 0 5
38579: PPUSH
38580: CALL_OW 314
38584: NOT
38585: IFFALSE 38890
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
38587: LD_ADDR_EXP 110
38591: PUSH
38592: LD_EXP 110
38596: PPUSH
38597: LD_VAR 0 5
38601: PPUSH
38602: CALL 82972 0 2
38606: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
38607: LD_ADDR_EXP 110
38611: PUSH
38612: LD_EXP 110
38616: PPUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL 82972 0 2
38626: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38627: LD_ADDR_VAR 0 6
38631: PUSH
38632: LD_EXP 109
38636: PUSH
38637: LD_VAR 0 4
38641: ARRAY
38642: PUSH
38643: LD_INT 3
38645: ARRAY
38646: PPUSH
38647: LD_EXP 109
38651: PUSH
38652: LD_VAR 0 4
38656: ARRAY
38657: PUSH
38658: LD_INT 4
38660: ARRAY
38661: PPUSH
38662: CALL_OW 428
38666: ST_TO_ADDR
// if hex then
38667: LD_VAR 0 6
38671: IFFALSE 38689
// ComMoveUnit ( driver , hex ) else
38673: LD_VAR 0 5
38677: PPUSH
38678: LD_VAR 0 6
38682: PPUSH
38683: CALL_OW 112
38687: GO 38773
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
38689: LD_VAR 0 1
38693: PPUSH
38694: LD_EXP 109
38698: PUSH
38699: LD_VAR 0 4
38703: ARRAY
38704: PUSH
38705: LD_INT 3
38707: ARRAY
38708: PPUSH
38709: LD_EXP 109
38713: PUSH
38714: LD_VAR 0 4
38718: ARRAY
38719: PUSH
38720: LD_INT 4
38722: ARRAY
38723: PPUSH
38724: CALL_OW 297
38728: PUSH
38729: LD_INT 0
38731: GREATER
38732: IFFALSE 38773
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38734: LD_VAR 0 5
38738: PPUSH
38739: LD_EXP 109
38743: PUSH
38744: LD_VAR 0 4
38748: ARRAY
38749: PUSH
38750: LD_INT 3
38752: ARRAY
38753: PPUSH
38754: LD_EXP 109
38758: PUSH
38759: LD_VAR 0 4
38763: ARRAY
38764: PUSH
38765: LD_INT 4
38767: ARRAY
38768: PPUSH
38769: CALL_OW 111
// AddComExitVehicle ( driver ) ;
38773: LD_VAR 0 5
38777: PPUSH
38778: CALL_OW 181
// if Multiplayer then
38782: LD_OWVAR 4
38786: IFFALSE 38835
// begin repeat wait ( 10 ) ;
38788: LD_INT 10
38790: PPUSH
38791: CALL_OW 67
// until not IsInUnit ( driver ) ;
38795: LD_VAR 0 5
38799: PPUSH
38800: CALL_OW 310
38804: NOT
38805: IFFALSE 38788
// if not HasTask ( driver ) then
38807: LD_VAR 0 5
38811: PPUSH
38812: CALL_OW 314
38816: NOT
38817: IFFALSE 38833
// ComEnterUnit ( driver , factory ) ;
38819: LD_VAR 0 5
38823: PPUSH
38824: LD_VAR 0 2
38828: PPUSH
38829: CALL_OW 120
// end else
38833: GO 38849
// AddComEnterUnit ( driver , factory ) ;
38835: LD_VAR 0 5
38839: PPUSH
38840: LD_VAR 0 2
38844: PPUSH
38845: CALL_OW 180
// wait ( 0 0$1 ) ;
38849: LD_INT 35
38851: PPUSH
38852: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
38856: LD_ADDR_EXP 110
38860: PUSH
38861: LD_EXP 110
38865: PUSH
38866: LD_VAR 0 5
38870: DIFF
38871: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
38872: LD_ADDR_EXP 110
38876: PUSH
38877: LD_EXP 110
38881: PUSH
38882: LD_VAR 0 1
38886: DIFF
38887: ST_TO_ADDR
// break ;
38888: GO 39041
// end ; end else
38890: GO 39039
// if GetControl ( vehicle ) = control_remote then
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL_OW 263
38901: PUSH
38902: LD_INT 2
38904: EQUAL
38905: IFFALSE 38991
// begin wait ( 0 0$2 ) ;
38907: LD_INT 70
38909: PPUSH
38910: CALL_OW 67
// repeat wait ( 10 ) ;
38914: LD_INT 10
38916: PPUSH
38917: CALL_OW 67
// Connect ( vehicle ) ;
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL 53274 0 1
// until IsControledBy ( vehicle ) ;
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 312
38939: IFFALSE 38914
// wait ( 10 ) ;
38941: LD_INT 10
38943: PPUSH
38944: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_EXP 109
38957: PUSH
38958: LD_VAR 0 4
38962: ARRAY
38963: PUSH
38964: LD_INT 3
38966: ARRAY
38967: PPUSH
38968: LD_EXP 109
38972: PUSH
38973: LD_VAR 0 4
38977: ARRAY
38978: PUSH
38979: LD_INT 4
38981: ARRAY
38982: PPUSH
38983: CALL_OW 111
// break ;
38987: GO 39041
// end else
38989: GO 39039
// begin wait ( 0 0$3 ) ;
38991: LD_INT 105
38993: PPUSH
38994: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38998: LD_VAR 0 1
39002: PPUSH
39003: LD_EXP 109
39007: PUSH
39008: LD_VAR 0 4
39012: ARRAY
39013: PUSH
39014: LD_INT 3
39016: ARRAY
39017: PPUSH
39018: LD_EXP 109
39022: PUSH
39023: LD_VAR 0 4
39027: ARRAY
39028: PUSH
39029: LD_INT 4
39031: ARRAY
39032: PPUSH
39033: CALL_OW 111
// break ;
39037: GO 39041
// end ; end ;
39039: GO 38490
39041: POP
39042: POP
// end ;
39043: LD_VAR 0 3
39047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
39048: LD_INT 0
39050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
39051: LD_VAR 0 1
39055: PUSH
39056: LD_INT 250
39058: EQUAL
39059: IFFALSE 39076
39061: PUSH
39062: LD_VAR 0 2
39066: PPUSH
39067: CALL_OW 264
39071: PUSH
39072: LD_INT 81
39074: EQUAL
39075: AND
39076: IFFALSE 39097
// MinerPlaceMine ( unit , x , y ) ;
39078: LD_VAR 0 2
39082: PPUSH
39083: LD_VAR 0 4
39087: PPUSH
39088: LD_VAR 0 5
39092: PPUSH
39093: CALL 42443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
39097: LD_VAR 0 1
39101: PUSH
39102: LD_INT 251
39104: EQUAL
39105: IFFALSE 39122
39107: PUSH
39108: LD_VAR 0 2
39112: PPUSH
39113: CALL_OW 264
39117: PUSH
39118: LD_INT 81
39120: EQUAL
39121: AND
39122: IFFALSE 39143
// MinerDetonateMine ( unit , x , y ) ;
39124: LD_VAR 0 2
39128: PPUSH
39129: LD_VAR 0 4
39133: PPUSH
39134: LD_VAR 0 5
39138: PPUSH
39139: CALL 42850 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 252
39150: EQUAL
39151: IFFALSE 39168
39153: PUSH
39154: LD_VAR 0 2
39158: PPUSH
39159: CALL_OW 264
39163: PUSH
39164: LD_INT 81
39166: EQUAL
39167: AND
39168: IFFALSE 39189
// MinerCreateMinefield ( unit , x , y ) ;
39170: LD_VAR 0 2
39174: PPUSH
39175: LD_VAR 0 4
39179: PPUSH
39180: LD_VAR 0 5
39184: PPUSH
39185: CALL 43082 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
39189: LD_VAR 0 1
39193: PUSH
39194: LD_INT 253
39196: EQUAL
39197: IFFALSE 39214
39199: PUSH
39200: LD_VAR 0 2
39204: PPUSH
39205: CALL_OW 257
39209: PUSH
39210: LD_INT 5
39212: EQUAL
39213: AND
39214: IFFALSE 39235
// ComBinocular ( unit , x , y ) ;
39216: LD_VAR 0 2
39220: PPUSH
39221: LD_VAR 0 4
39225: PPUSH
39226: LD_VAR 0 5
39230: PPUSH
39231: CALL 43457 0 3
// if selectedUnit then
39235: LD_VAR 0 3
39239: IFFALSE 39299
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39241: LD_VAR 0 1
39245: PUSH
39246: LD_INT 254
39248: EQUAL
39249: IFFALSE 39266
39251: PUSH
39252: LD_VAR 0 2
39256: PPUSH
39257: CALL_OW 264
39261: PUSH
39262: LD_INT 99
39264: EQUAL
39265: AND
39266: IFFALSE 39283
39268: PUSH
39269: LD_VAR 0 3
39273: PPUSH
39274: CALL_OW 263
39278: PUSH
39279: LD_INT 3
39281: EQUAL
39282: AND
39283: IFFALSE 39299
// HackDestroyVehicle ( unit , selectedUnit ) ;
39285: LD_VAR 0 2
39289: PPUSH
39290: LD_VAR 0 3
39294: PPUSH
39295: CALL 41633 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39299: LD_VAR 0 1
39303: PUSH
39304: LD_INT 255
39306: EQUAL
39307: IFFALSE 39331
39309: PUSH
39310: LD_VAR 0 2
39314: PPUSH
39315: CALL_OW 264
39319: PUSH
39320: LD_INT 14
39322: PUSH
39323: LD_INT 53
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: IN
39330: AND
39331: IFFALSE 39349
39333: PUSH
39334: LD_VAR 0 4
39338: PPUSH
39339: LD_VAR 0 5
39343: PPUSH
39344: CALL_OW 488
39348: AND
39349: IFFALSE 39373
// CutTreeXYR ( unit , x , y , 12 ) ;
39351: LD_VAR 0 2
39355: PPUSH
39356: LD_VAR 0 4
39360: PPUSH
39361: LD_VAR 0 5
39365: PPUSH
39366: LD_INT 12
39368: PPUSH
39369: CALL 39564 0 4
// if cmd = 256 then
39373: LD_VAR 0 1
39377: PUSH
39378: LD_INT 256
39380: EQUAL
39381: IFFALSE 39402
// SetFactoryWaypoint ( unit , x , y ) ;
39383: LD_VAR 0 2
39387: PPUSH
39388: LD_VAR 0 4
39392: PPUSH
39393: LD_VAR 0 5
39397: PPUSH
39398: CALL 36843 0 3
// if cmd = 257 then
39402: LD_VAR 0 1
39406: PUSH
39407: LD_INT 257
39409: EQUAL
39410: IFFALSE 39431
// SetWarehouseGatheringPoint ( unit , x , y ) ;
39412: LD_VAR 0 2
39416: PPUSH
39417: LD_VAR 0 4
39421: PPUSH
39422: LD_VAR 0 5
39426: PPUSH
39427: CALL 37339 0 3
// if cmd = 258 then
39431: LD_VAR 0 1
39435: PUSH
39436: LD_INT 258
39438: EQUAL
39439: IFFALSE 39463
// BurnTreeXYR ( unit , x , y , 8 ) ;
39441: LD_VAR 0 2
39445: PPUSH
39446: LD_VAR 0 4
39450: PPUSH
39451: LD_VAR 0 5
39455: PPUSH
39456: LD_INT 8
39458: PPUSH
39459: CALL 39986 0 4
// end ;
39463: LD_VAR 0 6
39467: RET
// export function ComRadiation ( un ) ; var eff ; begin
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
39472: LD_VAR 0 1
39476: PPUSH
39477: CALL_OW 264
39481: PUSH
39482: LD_INT 91
39484: NONEQUAL
39485: IFFALSE 39489
// exit ;
39487: GO 39559
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39489: LD_INT 68
39491: PPUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 255
39501: PPUSH
39502: CALL_OW 321
39506: PUSH
39507: LD_INT 2
39509: EQUAL
39510: IFFALSE 39522
// eff := 50 else
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 50
39519: ST_TO_ADDR
39520: GO 39530
// eff := 25 ;
39522: LD_ADDR_VAR 0 3
39526: PUSH
39527: LD_INT 25
39529: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39530: LD_VAR 0 1
39534: PPUSH
39535: CALL_OW 250
39539: PPUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: CALL_OW 251
39549: PPUSH
39550: LD_VAR 0 3
39554: PPUSH
39555: CALL_OW 495
// end ;
39559: LD_VAR 0 2
39563: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39564: LD_INT 0
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
39575: LD_VAR 0 1
39579: PPUSH
39580: CALL_OW 302
39584: NOT
39585: IFTRUE 39604
39587: PUSH
39588: LD_VAR 0 2
39592: PPUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: CALL_OW 488
39602: NOT
39603: OR
39604: IFTRUE 39613
39606: PUSH
39607: LD_VAR 0 4
39611: NOT
39612: OR
39613: IFFALSE 39617
// exit ;
39615: GO 39981
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 437
39626: PPUSH
39627: CALL 46996 0 1
39631: PUSH
39632: LD_INT 10
39634: GREATER
39635: IFFALSE 39639
// exit ;
39637: GO 39981
// list := [ ] ;
39639: LD_ADDR_VAR 0 13
39643: PUSH
39644: EMPTY
39645: ST_TO_ADDR
// if x - r < 0 then
39646: LD_VAR 0 2
39650: PUSH
39651: LD_VAR 0 4
39655: MINUS
39656: PUSH
39657: LD_INT 0
39659: LESS
39660: IFFALSE 39672
// min_x := 0 else
39662: LD_ADDR_VAR 0 7
39666: PUSH
39667: LD_INT 0
39669: ST_TO_ADDR
39670: GO 39688
// min_x := x - r ;
39672: LD_ADDR_VAR 0 7
39676: PUSH
39677: LD_VAR 0 2
39681: PUSH
39682: LD_VAR 0 4
39686: MINUS
39687: ST_TO_ADDR
// if y - r < 0 then
39688: LD_VAR 0 3
39692: PUSH
39693: LD_VAR 0 4
39697: MINUS
39698: PUSH
39699: LD_INT 0
39701: LESS
39702: IFFALSE 39714
// min_y := 0 else
39704: LD_ADDR_VAR 0 8
39708: PUSH
39709: LD_INT 0
39711: ST_TO_ADDR
39712: GO 39730
// min_y := y - r ;
39714: LD_ADDR_VAR 0 8
39718: PUSH
39719: LD_VAR 0 3
39723: PUSH
39724: LD_VAR 0 4
39728: MINUS
39729: ST_TO_ADDR
// max_x := x + r ;
39730: LD_ADDR_VAR 0 9
39734: PUSH
39735: LD_VAR 0 2
39739: PUSH
39740: LD_VAR 0 4
39744: PLUS
39745: ST_TO_ADDR
// max_y := y + r ;
39746: LD_ADDR_VAR 0 10
39750: PUSH
39751: LD_VAR 0 3
39755: PUSH
39756: LD_VAR 0 4
39760: PLUS
39761: ST_TO_ADDR
// for _x = min_x to max_x do
39762: LD_ADDR_VAR 0 11
39766: PUSH
39767: DOUBLE
39768: LD_VAR 0 7
39772: DEC
39773: ST_TO_ADDR
39774: LD_VAR 0 9
39778: PUSH
39779: FOR_TO
39780: IFFALSE 39899
// for _y = min_y to max_y do
39782: LD_ADDR_VAR 0 12
39786: PUSH
39787: DOUBLE
39788: LD_VAR 0 8
39792: DEC
39793: ST_TO_ADDR
39794: LD_VAR 0 10
39798: PUSH
39799: FOR_TO
39800: IFFALSE 39895
// begin if not ValidHex ( _x , _y ) then
39802: LD_VAR 0 11
39806: PPUSH
39807: LD_VAR 0 12
39811: PPUSH
39812: CALL_OW 488
39816: NOT
39817: IFFALSE 39821
// continue ;
39819: GO 39799
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39821: LD_VAR 0 11
39825: PPUSH
39826: LD_VAR 0 12
39830: PPUSH
39831: CALL_OW 351
39835: IFFALSE 39853
39837: PUSH
39838: LD_VAR 0 11
39842: PPUSH
39843: LD_VAR 0 12
39847: PPUSH
39848: CALL_OW 554
39852: AND
39853: IFFALSE 39893
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39855: LD_ADDR_VAR 0 13
39859: PUSH
39860: LD_VAR 0 13
39864: PPUSH
39865: LD_VAR 0 13
39869: PUSH
39870: LD_INT 1
39872: PLUS
39873: PPUSH
39874: LD_VAR 0 11
39878: PUSH
39879: LD_VAR 0 12
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PPUSH
39888: CALL_OW 2
39892: ST_TO_ADDR
// end ;
39893: GO 39799
39895: POP
39896: POP
39897: GO 39779
39899: POP
39900: POP
// if not list then
39901: LD_VAR 0 13
39905: NOT
39906: IFFALSE 39910
// exit ;
39908: GO 39981
// for i in list do
39910: LD_ADDR_VAR 0 6
39914: PUSH
39915: LD_VAR 0 13
39919: PUSH
39920: FOR_IN
39921: IFFALSE 39979
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39923: LD_VAR 0 1
39927: PPUSH
39928: LD_STRING M
39930: PUSH
39931: LD_VAR 0 6
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PUSH
39940: LD_VAR 0 6
39944: PUSH
39945: LD_INT 2
39947: ARRAY
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: PPUSH
39973: CALL_OW 447
39977: GO 39920
39979: POP
39980: POP
// end ;
39981: LD_VAR 0 5
39985: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
39986: LD_INT 0
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 302
40007: NOT
40008: IFTRUE 40027
40010: PUSH
40011: LD_VAR 0 2
40015: PPUSH
40016: LD_VAR 0 3
40020: PPUSH
40021: CALL_OW 488
40025: NOT
40026: OR
40027: IFTRUE 40036
40029: PUSH
40030: LD_VAR 0 4
40034: NOT
40035: OR
40036: IFFALSE 40040
// exit ;
40038: GO 40579
// if Count ( GetTaskList ( flame ) ) > 10 then
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 437
40049: PPUSH
40050: CALL 46996 0 1
40054: PUSH
40055: LD_INT 10
40057: GREATER
40058: IFFALSE 40062
// exit ;
40060: GO 40579
// list := [ ] ;
40062: LD_ADDR_VAR 0 13
40066: PUSH
40067: EMPTY
40068: ST_TO_ADDR
// if x - r < 0 then
40069: LD_VAR 0 2
40073: PUSH
40074: LD_VAR 0 4
40078: MINUS
40079: PUSH
40080: LD_INT 0
40082: LESS
40083: IFFALSE 40095
// min_x := 0 else
40085: LD_ADDR_VAR 0 7
40089: PUSH
40090: LD_INT 0
40092: ST_TO_ADDR
40093: GO 40111
// min_x := x - r ;
40095: LD_ADDR_VAR 0 7
40099: PUSH
40100: LD_VAR 0 2
40104: PUSH
40105: LD_VAR 0 4
40109: MINUS
40110: ST_TO_ADDR
// if y - r < 0 then
40111: LD_VAR 0 3
40115: PUSH
40116: LD_VAR 0 4
40120: MINUS
40121: PUSH
40122: LD_INT 0
40124: LESS
40125: IFFALSE 40137
// min_y := 0 else
40127: LD_ADDR_VAR 0 8
40131: PUSH
40132: LD_INT 0
40134: ST_TO_ADDR
40135: GO 40153
// min_y := y - r ;
40137: LD_ADDR_VAR 0 8
40141: PUSH
40142: LD_VAR 0 3
40146: PUSH
40147: LD_VAR 0 4
40151: MINUS
40152: ST_TO_ADDR
// max_x := x + r ;
40153: LD_ADDR_VAR 0 9
40157: PUSH
40158: LD_VAR 0 2
40162: PUSH
40163: LD_VAR 0 4
40167: PLUS
40168: ST_TO_ADDR
// max_y := y + r ;
40169: LD_ADDR_VAR 0 10
40173: PUSH
40174: LD_VAR 0 3
40178: PUSH
40179: LD_VAR 0 4
40183: PLUS
40184: ST_TO_ADDR
// for _x = min_x to max_x do
40185: LD_ADDR_VAR 0 11
40189: PUSH
40190: DOUBLE
40191: LD_VAR 0 7
40195: DEC
40196: ST_TO_ADDR
40197: LD_VAR 0 9
40201: PUSH
40202: FOR_TO
40203: IFFALSE 40322
// for _y = min_y to max_y do
40205: LD_ADDR_VAR 0 12
40209: PUSH
40210: DOUBLE
40211: LD_VAR 0 8
40215: DEC
40216: ST_TO_ADDR
40217: LD_VAR 0 10
40221: PUSH
40222: FOR_TO
40223: IFFALSE 40318
// begin if not ValidHex ( _x , _y ) then
40225: LD_VAR 0 11
40229: PPUSH
40230: LD_VAR 0 12
40234: PPUSH
40235: CALL_OW 488
40239: NOT
40240: IFFALSE 40244
// continue ;
40242: GO 40222
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40244: LD_VAR 0 11
40248: PPUSH
40249: LD_VAR 0 12
40253: PPUSH
40254: CALL_OW 351
40258: IFFALSE 40276
40260: PUSH
40261: LD_VAR 0 11
40265: PPUSH
40266: LD_VAR 0 12
40270: PPUSH
40271: CALL_OW 554
40275: AND
40276: IFFALSE 40316
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40278: LD_ADDR_VAR 0 13
40282: PUSH
40283: LD_VAR 0 13
40287: PPUSH
40288: LD_VAR 0 13
40292: PUSH
40293: LD_INT 1
40295: PLUS
40296: PPUSH
40297: LD_VAR 0 11
40301: PUSH
40302: LD_VAR 0 12
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PPUSH
40311: CALL_OW 2
40315: ST_TO_ADDR
// end ;
40316: GO 40222
40318: POP
40319: POP
40320: GO 40202
40322: POP
40323: POP
// if not list then
40324: LD_VAR 0 13
40328: NOT
40329: IFFALSE 40333
// exit ;
40331: GO 40579
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
40333: LD_ADDR_VAR 0 13
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: LD_VAR 0 13
40347: PPUSH
40348: LD_INT 1
40350: PPUSH
40351: LD_INT 1
40353: PPUSH
40354: CALL 50402 0 4
40358: ST_TO_ADDR
// ComStop ( flame ) ;
40359: LD_VAR 0 1
40363: PPUSH
40364: CALL_OW 141
// for i in list do
40368: LD_ADDR_VAR 0 6
40372: PUSH
40373: LD_VAR 0 13
40377: PUSH
40378: FOR_IN
40379: IFFALSE 40410
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
40381: LD_VAR 0 1
40385: PPUSH
40386: LD_VAR 0 6
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: PPUSH
40395: LD_VAR 0 6
40399: PUSH
40400: LD_INT 2
40402: ARRAY
40403: PPUSH
40404: CALL_OW 176
40408: GO 40378
40410: POP
40411: POP
// repeat wait ( 0 0$1 ) ;
40412: LD_INT 35
40414: PPUSH
40415: CALL_OW 67
// task := GetTaskList ( flame ) ;
40419: LD_ADDR_VAR 0 14
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 437
40433: ST_TO_ADDR
// if not task then
40434: LD_VAR 0 14
40438: NOT
40439: IFFALSE 40443
// exit ;
40441: GO 40579
// if task [ 1 ] [ 1 ] <> | then
40443: LD_VAR 0 14
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: PUSH
40456: LD_STRING |
40458: NONEQUAL
40459: IFFALSE 40463
// exit ;
40461: GO 40579
// _x := task [ 1 ] [ 2 ] ;
40463: LD_ADDR_VAR 0 11
40467: PUSH
40468: LD_VAR 0 14
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PUSH
40477: LD_INT 2
40479: ARRAY
40480: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
40481: LD_ADDR_VAR 0 12
40485: PUSH
40486: LD_VAR 0 14
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: PUSH
40495: LD_INT 3
40497: ARRAY
40498: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
40499: LD_VAR 0 11
40503: PPUSH
40504: LD_VAR 0 12
40508: PPUSH
40509: CALL_OW 351
40513: NOT
40514: IFTRUE 40533
40516: PUSH
40517: LD_VAR 0 11
40521: PPUSH
40522: LD_VAR 0 12
40526: PPUSH
40527: CALL_OW 554
40531: NOT
40532: OR
40533: IFFALSE 40567
// begin task := Delete ( task , 1 ) ;
40535: LD_ADDR_VAR 0 14
40539: PUSH
40540: LD_VAR 0 14
40544: PPUSH
40545: LD_INT 1
40547: PPUSH
40548: CALL_OW 3
40552: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
40553: LD_VAR 0 1
40557: PPUSH
40558: LD_VAR 0 14
40562: PPUSH
40563: CALL_OW 446
// end ; until not HasTask ( flame ) ;
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 314
40576: NOT
40577: IFFALSE 40412
// end ;
40579: LD_VAR 0 5
40583: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40584: LD_EXP 113
40588: NOT
40589: IFFALSE 40639
40591: GO 40593
40593: DISABLE
// begin initHack := true ;
40594: LD_ADDR_EXP 113
40598: PUSH
40599: LD_INT 1
40601: ST_TO_ADDR
// hackTanks := [ ] ;
40602: LD_ADDR_EXP 114
40606: PUSH
40607: EMPTY
40608: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40609: LD_ADDR_EXP 115
40613: PUSH
40614: EMPTY
40615: ST_TO_ADDR
// hackLimit := 3 ;
40616: LD_ADDR_EXP 116
40620: PUSH
40621: LD_INT 3
40623: ST_TO_ADDR
// hackDist := 12 ;
40624: LD_ADDR_EXP 117
40628: PUSH
40629: LD_INT 12
40631: ST_TO_ADDR
// hackCounter := [ ] ;
40632: LD_ADDR_EXP 118
40636: PUSH
40637: EMPTY
40638: ST_TO_ADDR
// end ;
40639: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40640: LD_EXP 113
40644: IFFALSE 40662
40646: PUSH
40647: LD_INT 34
40649: PUSH
40650: LD_INT 99
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PPUSH
40657: CALL_OW 69
40661: AND
40662: IFFALSE 40915
40664: GO 40666
40666: DISABLE
40667: LD_INT 0
40669: PPUSH
40670: PPUSH
// begin enable ;
40671: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40672: LD_ADDR_VAR 0 1
40676: PUSH
40677: LD_INT 34
40679: PUSH
40680: LD_INT 99
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PPUSH
40687: CALL_OW 69
40691: PUSH
40692: FOR_IN
40693: IFFALSE 40913
// begin if not i in hackTanks then
40695: LD_VAR 0 1
40699: PUSH
40700: LD_EXP 114
40704: IN
40705: NOT
40706: IFFALSE 40789
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40708: LD_ADDR_EXP 114
40712: PUSH
40713: LD_EXP 114
40717: PPUSH
40718: LD_EXP 114
40722: PUSH
40723: LD_INT 1
40725: PLUS
40726: PPUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 1
40736: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40737: LD_ADDR_EXP 115
40741: PUSH
40742: LD_EXP 115
40746: PPUSH
40747: LD_EXP 115
40751: PUSH
40752: LD_INT 1
40754: PLUS
40755: PPUSH
40756: EMPTY
40757: PPUSH
40758: CALL_OW 1
40762: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40763: LD_ADDR_EXP 118
40767: PUSH
40768: LD_EXP 118
40772: PPUSH
40773: LD_EXP 118
40777: PUSH
40778: LD_INT 1
40780: PLUS
40781: PPUSH
40782: EMPTY
40783: PPUSH
40784: CALL_OW 1
40788: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 302
40798: NOT
40799: IFFALSE 40812
// begin HackUnlinkAll ( i ) ;
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL 40918 0 1
// continue ;
40810: GO 40692
// end ; HackCheckCapturedStatus ( i ) ;
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL 41363 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40821: LD_ADDR_VAR 0 2
40825: PUSH
40826: LD_INT 81
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 255
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 33
40845: PUSH
40846: LD_INT 3
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 91
40855: PUSH
40856: LD_VAR 0 1
40860: PUSH
40861: LD_EXP 117
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 50
40873: PUSH
40874: EMPTY
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 69
40887: ST_TO_ADDR
// if not tmp then
40888: LD_VAR 0 2
40892: NOT
40893: IFFALSE 40897
// continue ;
40895: GO 40692
// HackLink ( i , tmp ) ;
40897: LD_VAR 0 1
40901: PPUSH
40902: LD_VAR 0 2
40906: PPUSH
40907: CALL 41054 0 2
// end ;
40911: GO 40692
40913: POP
40914: POP
// end ;
40915: PPOPN 2
40917: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
40922: PPUSH
// if not hack in hackTanks then
40923: LD_VAR 0 1
40927: PUSH
40928: LD_EXP 114
40932: IN
40933: NOT
40934: IFFALSE 40938
// exit ;
40936: GO 41049
// index := GetElementIndex ( hackTanks , hack ) ;
40938: LD_ADDR_VAR 0 4
40942: PUSH
40943: LD_EXP 114
40947: PPUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL 49697 0 2
40957: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40958: LD_EXP 115
40962: PUSH
40963: LD_VAR 0 4
40967: ARRAY
40968: IFFALSE 41049
// begin for i in hackTanksCaptured [ index ] do
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_EXP 115
40979: PUSH
40980: LD_VAR 0 4
40984: ARRAY
40985: PUSH
40986: FOR_IN
40987: IFFALSE 41013
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40989: LD_VAR 0 3
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PPUSH
40998: LD_VAR 0 3
41002: PUSH
41003: LD_INT 2
41005: ARRAY
41006: PPUSH
41007: CALL_OW 235
41011: GO 40986
41013: POP
41014: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41015: LD_ADDR_EXP 115
41019: PUSH
41020: LD_EXP 115
41024: PPUSH
41025: LD_VAR 0 4
41029: PPUSH
41030: EMPTY
41031: PPUSH
41032: CALL_OW 1
41036: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41037: LD_VAR 0 1
41041: PPUSH
41042: LD_INT 0
41044: PPUSH
41045: CALL_OW 505
// end ; end ;
41049: LD_VAR 0 2
41053: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
41058: PPUSH
// if not hack in hackTanks or not vehicles then
41059: LD_VAR 0 1
41063: PUSH
41064: LD_EXP 114
41068: IN
41069: NOT
41070: IFTRUE 41079
41072: PUSH
41073: LD_VAR 0 2
41077: NOT
41078: OR
41079: IFFALSE 41083
// exit ;
41081: GO 41358
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41083: LD_ADDR_VAR 0 2
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: LD_INT 1
41100: PPUSH
41101: LD_INT 1
41103: PPUSH
41104: CALL 50349 0 4
41108: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: LD_EXP 114
41118: PPUSH
41119: LD_VAR 0 1
41123: PPUSH
41124: CALL 49697 0 2
41128: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41129: LD_EXP 115
41133: PUSH
41134: LD_VAR 0 5
41138: ARRAY
41139: PUSH
41140: LD_EXP 116
41144: LESS
41145: IFFALSE 41334
// begin for i := 1 to vehicles do
41147: LD_ADDR_VAR 0 4
41151: PUSH
41152: DOUBLE
41153: LD_INT 1
41155: DEC
41156: ST_TO_ADDR
41157: LD_VAR 0 2
41161: PUSH
41162: FOR_TO
41163: IFFALSE 41332
// begin if hackTanksCaptured [ index ] = hackLimit then
41165: LD_EXP 115
41169: PUSH
41170: LD_VAR 0 5
41174: ARRAY
41175: PUSH
41176: LD_EXP 116
41180: EQUAL
41181: IFFALSE 41185
// break ;
41183: GO 41332
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41185: LD_ADDR_EXP 118
41189: PUSH
41190: LD_EXP 118
41194: PPUSH
41195: LD_VAR 0 5
41199: PPUSH
41200: LD_EXP 118
41204: PUSH
41205: LD_VAR 0 5
41209: ARRAY
41210: PUSH
41211: LD_INT 1
41213: PLUS
41214: PPUSH
41215: CALL_OW 1
41219: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41220: LD_ADDR_EXP 115
41224: PUSH
41225: LD_EXP 115
41229: PPUSH
41230: LD_VAR 0 5
41234: PUSH
41235: LD_EXP 115
41239: PUSH
41240: LD_VAR 0 5
41244: ARRAY
41245: PUSH
41246: LD_INT 1
41248: PLUS
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PPUSH
41254: LD_VAR 0 2
41258: PUSH
41259: LD_VAR 0 4
41263: ARRAY
41264: PUSH
41265: LD_VAR 0 2
41269: PUSH
41270: LD_VAR 0 4
41274: ARRAY
41275: PPUSH
41276: CALL_OW 255
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PPUSH
41285: CALL 49914 0 3
41289: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41290: LD_VAR 0 2
41294: PUSH
41295: LD_VAR 0 4
41299: ARRAY
41300: PPUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 255
41310: PPUSH
41311: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 4
41324: ARRAY
41325: PPUSH
41326: CALL_OW 141
// end ;
41330: GO 41162
41332: POP
41333: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41334: LD_VAR 0 1
41338: PPUSH
41339: LD_EXP 115
41343: PUSH
41344: LD_VAR 0 5
41348: ARRAY
41349: PUSH
41350: LD_INT 0
41352: PLUS
41353: PPUSH
41354: CALL_OW 505
// end ;
41358: LD_VAR 0 3
41362: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41363: LD_INT 0
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
// if not hack in hackTanks then
41369: LD_VAR 0 1
41373: PUSH
41374: LD_EXP 114
41378: IN
41379: NOT
41380: IFFALSE 41384
// exit ;
41382: GO 41628
// index := GetElementIndex ( hackTanks , hack ) ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_EXP 114
41393: PPUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL 49697 0 2
41403: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: DOUBLE
41410: LD_EXP 115
41414: PUSH
41415: LD_VAR 0 4
41419: ARRAY
41420: INC
41421: ST_TO_ADDR
41422: LD_INT 1
41424: PUSH
41425: FOR_DOWNTO
41426: IFFALSE 41602
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: LD_EXP 115
41437: PUSH
41438: LD_VAR 0 4
41442: ARRAY
41443: PUSH
41444: LD_VAR 0 3
41448: ARRAY
41449: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41450: LD_VAR 0 5
41454: PUSH
41455: LD_INT 1
41457: ARRAY
41458: PPUSH
41459: CALL_OW 302
41463: NOT
41464: IFTRUE 41492
41466: PUSH
41467: LD_VAR 0 5
41471: PUSH
41472: LD_INT 1
41474: ARRAY
41475: PPUSH
41476: CALL_OW 255
41480: PUSH
41481: LD_VAR 0 1
41485: PPUSH
41486: CALL_OW 255
41490: NONEQUAL
41491: OR
41492: IFFALSE 41600
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41494: LD_VAR 0 5
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PPUSH
41503: CALL_OW 305
41507: IFFALSE 41535
41509: PUSH
41510: LD_VAR 0 5
41514: PUSH
41515: LD_INT 1
41517: ARRAY
41518: PPUSH
41519: CALL_OW 255
41523: PUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 255
41533: EQUAL
41534: AND
41535: IFFALSE 41559
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41537: LD_VAR 0 5
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: LD_VAR 0 5
41550: PUSH
41551: LD_INT 2
41553: ARRAY
41554: PPUSH
41555: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41559: LD_ADDR_EXP 115
41563: PUSH
41564: LD_EXP 115
41568: PPUSH
41569: LD_VAR 0 4
41573: PPUSH
41574: LD_EXP 115
41578: PUSH
41579: LD_VAR 0 4
41583: ARRAY
41584: PPUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: CALL_OW 3
41594: PPUSH
41595: CALL_OW 1
41599: ST_TO_ADDR
// end ; end ;
41600: GO 41425
41602: POP
41603: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41604: LD_VAR 0 1
41608: PPUSH
41609: LD_EXP 115
41613: PUSH
41614: LD_VAR 0 4
41618: ARRAY
41619: PUSH
41620: LD_INT 0
41622: PLUS
41623: PPUSH
41624: CALL_OW 505
// end ;
41628: LD_VAR 0 2
41632: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41633: LD_INT 0
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
// if not hack in hackTanks then
41639: LD_VAR 0 1
41643: PUSH
41644: LD_EXP 114
41648: IN
41649: NOT
41650: IFFALSE 41654
// exit ;
41652: GO 41739
// index := GetElementIndex ( hackTanks , hack ) ;
41654: LD_ADDR_VAR 0 5
41658: PUSH
41659: LD_EXP 114
41663: PPUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL 49697 0 2
41673: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41674: LD_ADDR_VAR 0 4
41678: PUSH
41679: DOUBLE
41680: LD_INT 1
41682: DEC
41683: ST_TO_ADDR
41684: LD_EXP 115
41688: PUSH
41689: LD_VAR 0 5
41693: ARRAY
41694: PUSH
41695: FOR_TO
41696: IFFALSE 41737
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41698: LD_EXP 115
41702: PUSH
41703: LD_VAR 0 5
41707: ARRAY
41708: PUSH
41709: LD_VAR 0 4
41713: ARRAY
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_VAR 0 2
41723: EQUAL
41724: IFFALSE 41735
// KillUnit ( vehicle ) ;
41726: LD_VAR 0 2
41730: PPUSH
41731: CALL_OW 66
41735: GO 41695
41737: POP
41738: POP
// end ;
41739: LD_VAR 0 3
41743: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
41744: LD_EXP 119
41748: NOT
41749: IFFALSE 41882
41751: GO 41753
41753: DISABLE
41754: LD_INT 0
41756: PPUSH
// begin initMiner := true ;
41757: LD_ADDR_EXP 119
41761: PUSH
41762: LD_INT 1
41764: ST_TO_ADDR
// minersList := [ ] ;
41765: LD_ADDR_EXP 120
41769: PUSH
41770: EMPTY
41771: ST_TO_ADDR
// minerMinesList := [ ] ;
41772: LD_ADDR_EXP 121
41776: PUSH
41777: EMPTY
41778: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
41779: LD_ADDR_EXP 122
41783: PUSH
41784: LD_INT 10
41786: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41787: LD_ADDR_VAR 0 1
41791: PUSH
41792: LD_INT 34
41794: PUSH
41795: LD_INT 81
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PPUSH
41802: CALL_OW 69
41806: PUSH
41807: FOR_IN
41808: IFFALSE 41880
// begin if not i in minersList then
41810: LD_VAR 0 1
41814: PUSH
41815: LD_EXP 120
41819: IN
41820: NOT
41821: IFFALSE 41878
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41823: LD_ADDR_EXP 120
41827: PUSH
41828: LD_EXP 120
41832: PPUSH
41833: LD_EXP 120
41837: PUSH
41838: LD_INT 1
41840: PLUS
41841: PPUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 1
41851: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41852: LD_ADDR_EXP 121
41856: PUSH
41857: LD_EXP 121
41861: PPUSH
41862: LD_EXP 121
41866: PUSH
41867: LD_INT 1
41869: PLUS
41870: PPUSH
41871: EMPTY
41872: PPUSH
41873: CALL_OW 1
41877: ST_TO_ADDR
// end end ;
41878: GO 41807
41880: POP
41881: POP
// end ;
41882: PPOPN 1
41884: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
41885: LD_EXP 119
41889: IFFALSE 41920
41891: PUSH
41892: LD_EXP 121
41896: PPUSH
41897: CALL 46996 0 1
41901: IFTRUE 41919
41903: PUSH
41904: LD_INT 34
41906: PUSH
41907: LD_INT 81
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PPUSH
41914: CALL_OW 69
41918: OR
41919: AND
41920: IFFALSE 42440
41922: GO 41924
41924: DISABLE
41925: LD_INT 0
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
// begin enable ;
41931: ENABLE
// for i := minerMinesList downto 1 do
41932: LD_ADDR_VAR 0 1
41936: PUSH
41937: DOUBLE
41938: LD_EXP 121
41942: INC
41943: ST_TO_ADDR
41944: LD_INT 1
41946: PUSH
41947: FOR_DOWNTO
41948: IFFALSE 42438
// begin side := GetSide ( minersList [ i ] ) ;
41950: LD_ADDR_VAR 0 3
41954: PUSH
41955: LD_EXP 120
41959: PUSH
41960: LD_VAR 0 1
41964: ARRAY
41965: PPUSH
41966: CALL_OW 255
41970: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
41971: LD_EXP 120
41975: PUSH
41976: LD_VAR 0 1
41980: ARRAY
41981: PPUSH
41982: CALL_OW 300
41986: IFFALSE 42007
41988: PUSH
41989: LD_VAR 0 3
41993: PUSH
41994: LD_OWVAR 2
41998: PUSH
41999: LD_INT 9
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: IN
42006: AND
42007: IFFALSE 42040
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
42009: LD_EXP 120
42013: PUSH
42014: LD_VAR 0 1
42018: ARRAY
42019: PPUSH
42020: LD_EXP 121
42024: PUSH
42025: LD_VAR 0 1
42029: ARRAY
42030: PPUSH
42031: CALL 46996 0 1
42035: PPUSH
42036: CALL_OW 505
// if not minerMinesList [ i ] then
42040: LD_EXP 121
42044: PUSH
42045: LD_VAR 0 1
42049: ARRAY
42050: NOT
42051: IFFALSE 42055
// continue ;
42053: GO 41947
// for j := minerMinesList [ i ] downto 1 do
42055: LD_ADDR_VAR 0 2
42059: PUSH
42060: DOUBLE
42061: LD_EXP 121
42065: PUSH
42066: LD_VAR 0 1
42070: ARRAY
42071: INC
42072: ST_TO_ADDR
42073: LD_INT 1
42075: PUSH
42076: FOR_DOWNTO
42077: IFFALSE 42434
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
42079: LD_EXP 120
42083: PUSH
42084: LD_VAR 0 1
42088: ARRAY
42089: PPUSH
42090: CALL_OW 301
42094: IFTRUE 42114
42096: PUSH
42097: LD_EXP 120
42101: PUSH
42102: LD_VAR 0 1
42106: ARRAY
42107: PPUSH
42108: CALL_OW 305
42112: NOT
42113: OR
42114: IFFALSE 42205
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42116: LD_EXP 121
42120: PUSH
42121: LD_VAR 0 1
42125: ARRAY
42126: PUSH
42127: LD_VAR 0 2
42131: ARRAY
42132: PUSH
42133: LD_INT 1
42135: ARRAY
42136: PPUSH
42137: LD_EXP 121
42141: PUSH
42142: LD_VAR 0 1
42146: ARRAY
42147: PUSH
42148: LD_VAR 0 2
42152: ARRAY
42153: PUSH
42154: LD_INT 2
42156: ARRAY
42157: PPUSH
42158: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42162: LD_ADDR_EXP 121
42166: PUSH
42167: LD_EXP 121
42171: PPUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_EXP 121
42181: PUSH
42182: LD_VAR 0 1
42186: ARRAY
42187: PPUSH
42188: LD_VAR 0 2
42192: PPUSH
42193: CALL_OW 3
42197: PPUSH
42198: CALL_OW 1
42202: ST_TO_ADDR
// continue ;
42203: GO 42076
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42205: LD_ADDR_VAR 0 4
42209: PUSH
42210: LD_EXP 121
42214: PUSH
42215: LD_VAR 0 1
42219: ARRAY
42220: PUSH
42221: LD_VAR 0 2
42225: ARRAY
42226: PUSH
42227: LD_INT 1
42229: ARRAY
42230: PPUSH
42231: LD_EXP 121
42235: PUSH
42236: LD_VAR 0 1
42240: ARRAY
42241: PUSH
42242: LD_VAR 0 2
42246: ARRAY
42247: PUSH
42248: LD_INT 2
42250: ARRAY
42251: PPUSH
42252: CALL_OW 428
42256: ST_TO_ADDR
// if not tmp then
42257: LD_VAR 0 4
42261: NOT
42262: IFFALSE 42266
// continue ;
42264: GO 42076
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42266: LD_VAR 0 4
42270: PUSH
42271: LD_INT 81
42273: PUSH
42274: LD_VAR 0 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PPUSH
42283: CALL_OW 69
42287: IN
42288: IFFALSE 42338
42290: PUSH
42291: LD_EXP 121
42295: PUSH
42296: LD_VAR 0 1
42300: ARRAY
42301: PUSH
42302: LD_VAR 0 2
42306: ARRAY
42307: PUSH
42308: LD_INT 1
42310: ARRAY
42311: PPUSH
42312: LD_EXP 121
42316: PUSH
42317: LD_VAR 0 1
42321: ARRAY
42322: PUSH
42323: LD_VAR 0 2
42327: ARRAY
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: PPUSH
42333: CALL_OW 458
42337: AND
42338: IFFALSE 42432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42340: LD_EXP 121
42344: PUSH
42345: LD_VAR 0 1
42349: ARRAY
42350: PUSH
42351: LD_VAR 0 2
42355: ARRAY
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_EXP 121
42365: PUSH
42366: LD_VAR 0 1
42370: ARRAY
42371: PUSH
42372: LD_VAR 0 2
42376: ARRAY
42377: PUSH
42378: LD_INT 2
42380: ARRAY
42381: PPUSH
42382: LD_VAR 0 3
42386: PPUSH
42387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42391: LD_ADDR_EXP 121
42395: PUSH
42396: LD_EXP 121
42400: PPUSH
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_EXP 121
42410: PUSH
42411: LD_VAR 0 1
42415: ARRAY
42416: PPUSH
42417: LD_VAR 0 2
42421: PPUSH
42422: CALL_OW 3
42426: PPUSH
42427: CALL_OW 1
42431: ST_TO_ADDR
// end ; end ;
42432: GO 42076
42434: POP
42435: POP
// end ;
42436: GO 41947
42438: POP
42439: POP
// end ;
42440: PPOPN 4
42442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
42443: LD_INT 0
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
// result := false ;
42449: LD_ADDR_VAR 0 4
42453: PUSH
42454: LD_INT 0
42456: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 264
42466: PUSH
42467: LD_INT 81
42469: EQUAL
42470: NOT
42471: IFFALSE 42475
// exit ;
42473: GO 42845
// side := GetSide ( unit ) ;
42475: LD_ADDR_VAR 0 6
42479: PUSH
42480: LD_VAR 0 1
42484: PPUSH
42485: CALL_OW 255
42489: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
42490: LD_ADDR_VAR 0 5
42494: PUSH
42495: LD_EXP 120
42499: PPUSH
42500: LD_VAR 0 1
42504: PPUSH
42505: CALL 49697 0 2
42509: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42510: LD_EXP 121
42514: PUSH
42515: LD_VAR 0 5
42519: ARRAY
42520: PUSH
42521: LD_EXP 122
42525: GREATEREQUAL
42526: IFFALSE 42530
// exit ;
42528: GO 42845
// ComMoveXY ( unit , x , y ) ;
42530: LD_VAR 0 1
42534: PPUSH
42535: LD_VAR 0 2
42539: PPUSH
42540: LD_VAR 0 3
42544: PPUSH
42545: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42549: LD_INT 35
42551: PPUSH
42552: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42556: LD_VAR 0 1
42560: PPUSH
42561: LD_VAR 0 2
42565: PPUSH
42566: LD_VAR 0 3
42570: PPUSH
42571: CALL 81753 0 3
42575: NOT
42576: IFFALSE 42589
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: CALL_OW 314
42588: AND
42589: IFFALSE 42593
// exit ;
42591: GO 42845
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42593: LD_VAR 0 2
42597: PPUSH
42598: LD_VAR 0 3
42602: PPUSH
42603: CALL_OW 428
42607: PUSH
42608: LD_VAR 0 1
42612: EQUAL
42613: IFFALSE 42627
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: CALL_OW 314
42625: NOT
42626: AND
42627: IFFALSE 42549
// if MineAtPos ( x , y ) then
42629: LD_VAR 0 2
42633: PPUSH
42634: LD_VAR 0 3
42638: PPUSH
42639: CALL_OW 458
42643: IFFALSE 42647
// exit ;
42645: GO 42845
// if your_side = side then
42647: LD_OWVAR 2
42651: PUSH
42652: LD_VAR 0 6
42656: EQUAL
42657: IFFALSE 42676
// PlaySoundXY ( x , y , PlantMine ) ;
42659: LD_VAR 0 2
42663: PPUSH
42664: LD_VAR 0 3
42668: PPUSH
42669: LD_STRING PlantMine
42671: PPUSH
42672: CALL_OW 366
// repeat wait ( 1 ) ;
42676: LD_INT 1
42678: PPUSH
42679: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
42683: LD_VAR 0 2
42687: PPUSH
42688: LD_VAR 0 3
42692: PPUSH
42693: LD_VAR 0 6
42697: PPUSH
42698: LD_INT 0
42700: PPUSH
42701: CALL_OW 454
42705: IFFALSE 42676
// if MineAtPos ( x , y ) then
42707: LD_VAR 0 2
42711: PPUSH
42712: LD_VAR 0 3
42716: PPUSH
42717: CALL_OW 458
42721: IFFALSE 42837
// begin for i in minerMinesList [ index ] do
42723: LD_ADDR_VAR 0 7
42727: PUSH
42728: LD_EXP 121
42732: PUSH
42733: LD_VAR 0 5
42737: ARRAY
42738: PUSH
42739: FOR_IN
42740: IFFALSE 42782
// if i [ 1 ] = x and i [ 2 ] = y then
42742: LD_VAR 0 7
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PUSH
42751: LD_VAR 0 2
42755: EQUAL
42756: IFFALSE 42774
42758: PUSH
42759: LD_VAR 0 7
42763: PUSH
42764: LD_INT 2
42766: ARRAY
42767: PUSH
42768: LD_VAR 0 3
42772: EQUAL
42773: AND
42774: IFFALSE 42780
// exit ;
42776: POP
42777: POP
42778: GO 42845
42780: GO 42739
42782: POP
42783: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42784: LD_ADDR_EXP 121
42788: PUSH
42789: LD_EXP 121
42793: PPUSH
42794: LD_VAR 0 5
42798: PUSH
42799: LD_EXP 121
42803: PUSH
42804: LD_VAR 0 5
42808: ARRAY
42809: PUSH
42810: LD_INT 1
42812: PLUS
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PPUSH
42818: LD_VAR 0 2
42822: PUSH
42823: LD_VAR 0 3
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PPUSH
42832: CALL 49914 0 3
42836: ST_TO_ADDR
// end ; result := true ;
42837: LD_ADDR_VAR 0 4
42841: PUSH
42842: LD_INT 1
42844: ST_TO_ADDR
// end ;
42845: LD_VAR 0 4
42849: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
42854: PPUSH
// if not unit in minersList then
42855: LD_VAR 0 1
42859: PUSH
42860: LD_EXP 120
42864: IN
42865: NOT
42866: IFFALSE 42870
// exit ;
42868: GO 43077
// index := GetElementIndex ( minersList , unit ) ;
42870: LD_ADDR_VAR 0 6
42874: PUSH
42875: LD_EXP 120
42879: PPUSH
42880: LD_VAR 0 1
42884: PPUSH
42885: CALL 49697 0 2
42889: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: DOUBLE
42896: LD_EXP 121
42900: PUSH
42901: LD_VAR 0 6
42905: ARRAY
42906: INC
42907: ST_TO_ADDR
42908: LD_INT 1
42910: PUSH
42911: FOR_DOWNTO
42912: IFFALSE 43075
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42914: LD_EXP 121
42918: PUSH
42919: LD_VAR 0 6
42923: ARRAY
42924: PUSH
42925: LD_VAR 0 5
42929: ARRAY
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: PPUSH
42935: LD_EXP 121
42939: PUSH
42940: LD_VAR 0 6
42944: ARRAY
42945: PUSH
42946: LD_VAR 0 5
42950: ARRAY
42951: PUSH
42952: LD_INT 2
42954: ARRAY
42955: PPUSH
42956: LD_VAR 0 2
42960: PPUSH
42961: LD_VAR 0 3
42965: PPUSH
42966: CALL_OW 298
42970: PUSH
42971: LD_INT 6
42973: LESS
42974: IFFALSE 43073
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42976: LD_EXP 121
42980: PUSH
42981: LD_VAR 0 6
42985: ARRAY
42986: PUSH
42987: LD_VAR 0 5
42991: ARRAY
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: PPUSH
42997: LD_EXP 121
43001: PUSH
43002: LD_VAR 0 6
43006: ARRAY
43007: PUSH
43008: LD_VAR 0 5
43012: ARRAY
43013: PUSH
43014: LD_INT 2
43016: ARRAY
43017: PPUSH
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 255
43027: PPUSH
43028: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43032: LD_ADDR_EXP 121
43036: PUSH
43037: LD_EXP 121
43041: PPUSH
43042: LD_VAR 0 6
43046: PPUSH
43047: LD_EXP 121
43051: PUSH
43052: LD_VAR 0 6
43056: ARRAY
43057: PPUSH
43058: LD_VAR 0 5
43062: PPUSH
43063: CALL_OW 3
43067: PPUSH
43068: CALL_OW 1
43072: ST_TO_ADDR
// end ; end ;
43073: GO 42911
43075: POP
43076: POP
// end ;
43077: LD_VAR 0 4
43081: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43082: LD_INT 0
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 264
43102: PUSH
43103: LD_INT 81
43105: EQUAL
43106: NOT
43107: IFTRUE 43122
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: LD_EXP 120
43119: IN
43120: NOT
43121: OR
43122: IFFALSE 43126
// exit ;
43124: GO 43452
// index := GetElementIndex ( minersList , unit ) ;
43126: LD_ADDR_VAR 0 6
43130: PUSH
43131: LD_EXP 120
43135: PPUSH
43136: LD_VAR 0 1
43140: PPUSH
43141: CALL 49697 0 2
43145: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43146: LD_ADDR_VAR 0 8
43150: PUSH
43151: LD_EXP 122
43155: PUSH
43156: LD_EXP 121
43160: PUSH
43161: LD_VAR 0 6
43165: ARRAY
43166: MINUS
43167: ST_TO_ADDR
// if not minesFreeAmount then
43168: LD_VAR 0 8
43172: NOT
43173: IFFALSE 43177
// exit ;
43175: GO 43452
// tmp := [ ] ;
43177: LD_ADDR_VAR 0 7
43181: PUSH
43182: EMPTY
43183: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43184: LD_ADDR_VAR 0 5
43188: PUSH
43189: DOUBLE
43190: LD_INT 1
43192: DEC
43193: ST_TO_ADDR
43194: LD_VAR 0 8
43198: PUSH
43199: FOR_TO
43200: IFFALSE 43399
// begin _d := rand ( 0 , 5 ) ;
43202: LD_ADDR_VAR 0 11
43206: PUSH
43207: LD_INT 0
43209: PPUSH
43210: LD_INT 5
43212: PPUSH
43213: CALL_OW 12
43217: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43218: LD_ADDR_VAR 0 12
43222: PUSH
43223: LD_INT 2
43225: PPUSH
43226: LD_INT 6
43228: PPUSH
43229: CALL_OW 12
43233: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43234: LD_ADDR_VAR 0 9
43238: PUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: LD_VAR 0 11
43248: PPUSH
43249: LD_VAR 0 12
43253: PPUSH
43254: CALL_OW 272
43258: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43259: LD_ADDR_VAR 0 10
43263: PUSH
43264: LD_VAR 0 3
43268: PPUSH
43269: LD_VAR 0 11
43273: PPUSH
43274: LD_VAR 0 12
43278: PPUSH
43279: CALL_OW 273
43283: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43284: LD_VAR 0 9
43288: PPUSH
43289: LD_VAR 0 10
43293: PPUSH
43294: CALL_OW 488
43298: IFFALSE 43322
43300: PUSH
43301: LD_VAR 0 9
43305: PUSH
43306: LD_VAR 0 10
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_VAR 0 7
43319: IN
43320: NOT
43321: AND
43322: IFFALSE 43341
43324: PUSH
43325: LD_VAR 0 9
43329: PPUSH
43330: LD_VAR 0 10
43334: PPUSH
43335: CALL_OW 458
43339: NOT
43340: AND
43341: IFFALSE 43383
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: LD_VAR 0 7
43352: PPUSH
43353: LD_VAR 0 7
43357: PUSH
43358: LD_INT 1
43360: PLUS
43361: PPUSH
43362: LD_VAR 0 9
43366: PUSH
43367: LD_VAR 0 10
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PPUSH
43376: CALL_OW 1
43380: ST_TO_ADDR
43381: GO 43397
// i := i - 1 ;
43383: LD_ADDR_VAR 0 5
43387: PUSH
43388: LD_VAR 0 5
43392: PUSH
43393: LD_INT 1
43395: MINUS
43396: ST_TO_ADDR
// end ;
43397: GO 43199
43399: POP
43400: POP
// for i in tmp do
43401: LD_ADDR_VAR 0 5
43405: PUSH
43406: LD_VAR 0 7
43410: PUSH
43411: FOR_IN
43412: IFFALSE 43450
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43414: LD_VAR 0 1
43418: PPUSH
43419: LD_VAR 0 5
43423: PUSH
43424: LD_INT 1
43426: ARRAY
43427: PPUSH
43428: LD_VAR 0 5
43432: PUSH
43433: LD_INT 2
43435: ARRAY
43436: PPUSH
43437: CALL 42443 0 3
43441: NOT
43442: IFFALSE 43448
// exit ;
43444: POP
43445: POP
43446: GO 43452
43448: GO 43411
43450: POP
43451: POP
// end ;
43452: LD_VAR 0 4
43456: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
43457: LD_INT 0
43459: PPUSH
43460: PPUSH
43461: PPUSH
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
// if GetClass ( unit ) <> class_sniper then
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 257
43477: PUSH
43478: LD_INT 5
43480: NONEQUAL
43481: IFFALSE 43485
// exit ;
43483: GO 43955
// dist := 8 ;
43485: LD_ADDR_VAR 0 5
43489: PUSH
43490: LD_INT 8
43492: ST_TO_ADDR
// viewRange := 12 ;
43493: LD_ADDR_VAR 0 8
43497: PUSH
43498: LD_INT 12
43500: ST_TO_ADDR
// side := GetSide ( unit ) ;
43501: LD_ADDR_VAR 0 6
43505: PUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: CALL_OW 255
43515: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43516: LD_INT 61
43518: PPUSH
43519: LD_VAR 0 6
43523: PPUSH
43524: CALL_OW 321
43528: PUSH
43529: LD_INT 2
43531: EQUAL
43532: IFFALSE 43542
// viewRange := 16 ;
43534: LD_ADDR_VAR 0 8
43538: PUSH
43539: LD_INT 16
43541: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43542: LD_VAR 0 1
43546: PPUSH
43547: LD_VAR 0 2
43551: PPUSH
43552: LD_VAR 0 3
43556: PPUSH
43557: CALL_OW 297
43561: PUSH
43562: LD_VAR 0 5
43566: GREATER
43567: IFFALSE 43646
// begin ComMoveXY ( unit , x , y ) ;
43569: LD_VAR 0 1
43573: PPUSH
43574: LD_VAR 0 2
43578: PPUSH
43579: LD_VAR 0 3
43583: PPUSH
43584: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43588: LD_INT 35
43590: PPUSH
43591: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43595: LD_VAR 0 1
43599: PPUSH
43600: LD_VAR 0 2
43604: PPUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: CALL 81753 0 3
43614: NOT
43615: IFFALSE 43619
// exit ;
43617: GO 43955
// until GetDistUnitXY ( unit , x , y ) < dist ;
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: CALL_OW 297
43638: PUSH
43639: LD_VAR 0 5
43643: LESS
43644: IFFALSE 43588
// end ; ComTurnXY ( unit , x , y ) ;
43646: LD_VAR 0 1
43650: PPUSH
43651: LD_VAR 0 2
43655: PPUSH
43656: LD_VAR 0 3
43660: PPUSH
43661: CALL_OW 118
// repeat if Multiplayer then
43665: LD_OWVAR 4
43669: IFFALSE 43680
// wait ( 35 ) else
43671: LD_INT 35
43673: PPUSH
43674: CALL_OW 67
43678: GO 43687
// wait ( 5 ) ;
43680: LD_INT 5
43682: PPUSH
43683: CALL_OW 67
// _d := GetDir ( unit ) ;
43687: LD_ADDR_VAR 0 11
43691: PUSH
43692: LD_VAR 0 1
43696: PPUSH
43697: CALL_OW 254
43701: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
43702: LD_ADDR_VAR 0 7
43706: PUSH
43707: LD_VAR 0 1
43711: PPUSH
43712: CALL_OW 250
43716: PPUSH
43717: LD_VAR 0 1
43721: PPUSH
43722: CALL_OW 251
43726: PPUSH
43727: LD_VAR 0 2
43731: PPUSH
43732: LD_VAR 0 3
43736: PPUSH
43737: CALL 84389 0 4
43741: ST_TO_ADDR
// until dir = _d ;
43742: LD_VAR 0 7
43746: PUSH
43747: LD_VAR 0 11
43751: EQUAL
43752: IFFALSE 43665
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
43754: LD_ADDR_VAR 0 9
43758: PUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 250
43768: PPUSH
43769: LD_VAR 0 7
43773: PPUSH
43774: LD_VAR 0 5
43778: PPUSH
43779: CALL_OW 272
43783: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
43784: LD_ADDR_VAR 0 10
43788: PUSH
43789: LD_VAR 0 1
43793: PPUSH
43794: CALL_OW 251
43798: PPUSH
43799: LD_VAR 0 7
43803: PPUSH
43804: LD_VAR 0 5
43808: PPUSH
43809: CALL_OW 273
43813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43814: LD_VAR 0 9
43818: PPUSH
43819: LD_VAR 0 10
43823: PPUSH
43824: CALL_OW 488
43828: NOT
43829: IFFALSE 43833
// exit ;
43831: GO 43955
// ComAnimCustom ( unit , 1 ) ;
43833: LD_VAR 0 1
43837: PPUSH
43838: LD_INT 1
43840: PPUSH
43841: CALL_OW 592
// p := 0 ;
43845: LD_ADDR_VAR 0 12
43849: PUSH
43850: LD_INT 0
43852: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43853: LD_VAR 0 9
43857: PPUSH
43858: LD_VAR 0 10
43862: PPUSH
43863: LD_VAR 0 6
43867: PPUSH
43868: LD_VAR 0 8
43872: PPUSH
43873: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
43877: LD_INT 35
43879: PPUSH
43880: CALL_OW 67
// p := Inc ( p ) ;
43884: LD_ADDR_VAR 0 12
43888: PUSH
43889: LD_VAR 0 12
43893: PPUSH
43894: CALL 84345 0 1
43898: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
43899: LD_VAR 0 12
43903: PUSH
43904: LD_INT 3
43906: EQUAL
43907: IFTRUE 43921
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 302
43919: NOT
43920: OR
43921: IFTRUE 43934
43923: PUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 301
43933: OR
43934: IFFALSE 43877
// RemoveSeeing ( _x , _y , side ) ;
43936: LD_VAR 0 9
43940: PPUSH
43941: LD_VAR 0 10
43945: PPUSH
43946: LD_VAR 0 6
43950: PPUSH
43951: CALL_OW 331
// end ;
43955: LD_VAR 0 4
43959: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
// if not unit then
43973: LD_VAR 0 1
43977: NOT
43978: IFFALSE 43982
// exit ;
43980: GO 44253
// side := GetSide ( unit ) ;
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 255
43996: ST_TO_ADDR
// x := GetX ( unit ) ;
43997: LD_ADDR_VAR 0 5
44001: PUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 250
44011: ST_TO_ADDR
// y := GetY ( unit ) ;
44012: LD_ADDR_VAR 0 6
44016: PUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 251
44026: ST_TO_ADDR
// r := 8 ;
44027: LD_ADDR_VAR 0 4
44031: PUSH
44032: LD_INT 8
44034: ST_TO_ADDR
// if x - r < 0 then
44035: LD_VAR 0 5
44039: PUSH
44040: LD_VAR 0 4
44044: MINUS
44045: PUSH
44046: LD_INT 0
44048: LESS
44049: IFFALSE 44061
// min_x := 0 else
44051: LD_ADDR_VAR 0 7
44055: PUSH
44056: LD_INT 0
44058: ST_TO_ADDR
44059: GO 44077
// min_x := x - r ;
44061: LD_ADDR_VAR 0 7
44065: PUSH
44066: LD_VAR 0 5
44070: PUSH
44071: LD_VAR 0 4
44075: MINUS
44076: ST_TO_ADDR
// if y - r < 0 then
44077: LD_VAR 0 6
44081: PUSH
44082: LD_VAR 0 4
44086: MINUS
44087: PUSH
44088: LD_INT 0
44090: LESS
44091: IFFALSE 44103
// min_y := 0 else
44093: LD_ADDR_VAR 0 8
44097: PUSH
44098: LD_INT 0
44100: ST_TO_ADDR
44101: GO 44119
// min_y := y - r ;
44103: LD_ADDR_VAR 0 8
44107: PUSH
44108: LD_VAR 0 6
44112: PUSH
44113: LD_VAR 0 4
44117: MINUS
44118: ST_TO_ADDR
// max_x := x + r ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_VAR 0 5
44128: PUSH
44129: LD_VAR 0 4
44133: PLUS
44134: ST_TO_ADDR
// max_y := y + r ;
44135: LD_ADDR_VAR 0 10
44139: PUSH
44140: LD_VAR 0 6
44144: PUSH
44145: LD_VAR 0 4
44149: PLUS
44150: ST_TO_ADDR
// for _x = min_x to max_x do
44151: LD_ADDR_VAR 0 11
44155: PUSH
44156: DOUBLE
44157: LD_VAR 0 7
44161: DEC
44162: ST_TO_ADDR
44163: LD_VAR 0 9
44167: PUSH
44168: FOR_TO
44169: IFFALSE 44251
// for _y = min_y to max_y do
44171: LD_ADDR_VAR 0 12
44175: PUSH
44176: DOUBLE
44177: LD_VAR 0 8
44181: DEC
44182: ST_TO_ADDR
44183: LD_VAR 0 10
44187: PUSH
44188: FOR_TO
44189: IFFALSE 44247
// begin if not ValidHex ( _x , _y ) then
44191: LD_VAR 0 11
44195: PPUSH
44196: LD_VAR 0 12
44200: PPUSH
44201: CALL_OW 488
44205: NOT
44206: IFFALSE 44210
// continue ;
44208: GO 44188
// if MineAtPos ( _x , _y ) then
44210: LD_VAR 0 11
44214: PPUSH
44215: LD_VAR 0 12
44219: PPUSH
44220: CALL_OW 458
44224: IFFALSE 44245
// ViewMineAtPos ( _x , _y , side ) ;
44226: LD_VAR 0 11
44230: PPUSH
44231: LD_VAR 0 12
44235: PPUSH
44236: LD_VAR 0 3
44240: PPUSH
44241: CALL_OW 457
// end ;
44245: GO 44188
44247: POP
44248: POP
44249: GO 44168
44251: POP
44252: POP
// end ;
44253: LD_VAR 0 2
44257: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
44258: LD_INT 0
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
// if not units then
44267: LD_VAR 0 1
44271: NOT
44272: IFFALSE 44276
// exit ;
44274: GO 44740
// scaners := [ ] ;
44276: LD_ADDR_VAR 0 6
44280: PUSH
44281: EMPTY
44282: ST_TO_ADDR
// for i in units do
44283: LD_ADDR_VAR 0 3
44287: PUSH
44288: LD_VAR 0 1
44292: PUSH
44293: FOR_IN
44294: IFFALSE 44451
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
44296: LD_VAR 0 3
44300: PPUSH
44301: CALL_OW 264
44305: PUSH
44306: LD_INT 11
44308: NONEQUAL
44309: IFTRUE 44323
44311: PUSH
44312: LD_VAR 0 3
44316: PPUSH
44317: CALL_OW 302
44321: NOT
44322: OR
44323: IFTRUE 44340
44325: PUSH
44326: LD_VAR 0 3
44330: PPUSH
44331: CALL_OW 110
44335: PUSH
44336: LD_INT 502
44338: EQUAL
44339: OR
44340: IFFALSE 44344
// continue ;
44342: GO 44293
// ComStop ( i ) ;
44344: LD_VAR 0 3
44348: PPUSH
44349: CALL_OW 141
// x := GetX ( i ) ;
44353: LD_ADDR_VAR 0 4
44357: PUSH
44358: LD_VAR 0 3
44362: PPUSH
44363: CALL_OW 250
44367: ST_TO_ADDR
// y := GetY ( i ) ;
44368: LD_ADDR_VAR 0 5
44372: PUSH
44373: LD_VAR 0 3
44377: PPUSH
44378: CALL_OW 251
44382: ST_TO_ADDR
// if GetSide ( i ) = your_side then
44383: LD_VAR 0 3
44387: PPUSH
44388: CALL_OW 255
44392: PUSH
44393: LD_OWVAR 2
44397: EQUAL
44398: IFFALSE 44417
// PlaySoundXY ( x , y , mineDetector ) ;
44400: LD_VAR 0 4
44404: PPUSH
44405: LD_VAR 0 5
44409: PPUSH
44410: LD_STRING mineDetector
44412: PPUSH
44413: CALL_OW 366
// scaners := Join ( scaners , i ) ;
44417: LD_ADDR_VAR 0 6
44421: PUSH
44422: LD_VAR 0 6
44426: PPUSH
44427: LD_VAR 0 3
44431: PPUSH
44432: CALL 82972 0 2
44436: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
44437: LD_VAR 0 3
44441: PPUSH
44442: LD_INT 502
44444: PPUSH
44445: CALL_OW 109
// end ;
44449: GO 44293
44451: POP
44452: POP
// if not scaners then
44453: LD_VAR 0 6
44457: NOT
44458: IFFALSE 44462
// exit ;
44460: GO 44740
// wait ( 3 ) ;
44462: LD_INT 3
44464: PPUSH
44465: CALL_OW 67
// timer := 6 ;
44469: LD_ADDR_VAR 0 7
44473: PUSH
44474: LD_INT 6
44476: ST_TO_ADDR
// repeat for i in scaners do
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_VAR 0 6
44486: PUSH
44487: FOR_IN
44488: IFFALSE 44638
// begin side := GetSide ( i ) ;
44490: LD_ADDR_VAR 0 8
44494: PUSH
44495: LD_VAR 0 3
44499: PPUSH
44500: CALL_OW 255
44504: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
44505: LD_VAR 0 3
44509: PPUSH
44510: CALL_OW 302
44514: NOT
44515: IFTRUE 44528
44517: PUSH
44518: LD_VAR 0 3
44522: PPUSH
44523: CALL_OW 314
44527: OR
44528: IFTRUE 44559
44530: PUSH
44531: LD_VAR 0 3
44535: PPUSH
44536: CALL_OW 263
44540: PUSH
44541: LD_INT 1
44543: EQUAL
44544: IFFALSE 44558
44546: PUSH
44547: LD_VAR 0 3
44551: PPUSH
44552: CALL_OW 311
44556: NOT
44557: AND
44558: OR
44559: IFFALSE 44603
// begin SetUnitDisplayNumber ( i , 0 ) ;
44561: LD_VAR 0 3
44565: PPUSH
44566: LD_INT 0
44568: PPUSH
44569: CALL_OW 505
// SetTag ( i , 0 ) ;
44573: LD_VAR 0 3
44577: PPUSH
44578: LD_INT 0
44580: PPUSH
44581: CALL_OW 109
// scaners := scaners diff i ;
44585: LD_ADDR_VAR 0 6
44589: PUSH
44590: LD_VAR 0 6
44594: PUSH
44595: LD_VAR 0 3
44599: DIFF
44600: ST_TO_ADDR
// continue ;
44601: GO 44487
// end ; if side in [ your_side , 9 ] then
44603: LD_VAR 0 8
44607: PUSH
44608: LD_OWVAR 2
44612: PUSH
44613: LD_INT 9
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: IN
44620: IFFALSE 44636
// SetUnitDisplayNumber ( i , timer ) ;
44622: LD_VAR 0 3
44626: PPUSH
44627: LD_VAR 0 7
44631: PPUSH
44632: CALL_OW 505
// end ;
44636: GO 44487
44638: POP
44639: POP
// if not scaners then
44640: LD_VAR 0 6
44644: NOT
44645: IFFALSE 44649
// exit ;
44647: GO 44740
// timer := Dec ( timer ) ;
44649: LD_ADDR_VAR 0 7
44653: PUSH
44654: LD_VAR 0 7
44658: PPUSH
44659: CALL 84367 0 1
44663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
44664: LD_INT 35
44666: PPUSH
44667: CALL_OW 67
// until timer = 0 ;
44671: LD_VAR 0 7
44675: PUSH
44676: LD_INT 0
44678: EQUAL
44679: IFFALSE 44477
// if not scaners then
44681: LD_VAR 0 6
44685: NOT
44686: IFFALSE 44690
// exit ;
44688: GO 44740
// for i in scaners do
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_VAR 0 6
44699: PUSH
44700: FOR_IN
44701: IFFALSE 44738
// begin SetUnitDisplayNumber ( i , 0 ) ;
44703: LD_VAR 0 3
44707: PPUSH
44708: LD_INT 0
44710: PPUSH
44711: CALL_OW 505
// SetTag ( i , 0 ) ;
44715: LD_VAR 0 3
44719: PPUSH
44720: LD_INT 0
44722: PPUSH
44723: CALL_OW 109
// RevealDetectorMine ( i ) ;
44727: LD_VAR 0 3
44731: PPUSH
44732: CALL 43960 0 1
// end ;
44736: GO 44700
44738: POP
44739: POP
// end ;
44740: LD_VAR 0 2
44744: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
44745: LD_INT 0
44747: PPUSH
// if p1 = mine_detector_mode then
44748: LD_VAR 0 2
44752: PUSH
44753: LD_INT 103
44755: EQUAL
44756: IFFALSE 44767
// DetectMine ( units ) ;
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL 44258 0 1
// end ; end_of_file
44767: LD_VAR 0 7
44771: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44772: LD_INT 0
44774: PPUSH
44775: PPUSH
// if exist_mode then
44776: LD_VAR 0 2
44780: IFFALSE 44826
// begin unit := CreateCharacter ( prefix & ident ) ;
44782: LD_ADDR_VAR 0 5
44786: PUSH
44787: LD_VAR 0 3
44791: PUSH
44792: LD_VAR 0 1
44796: STR
44797: PPUSH
44798: CALL_OW 34
44802: ST_TO_ADDR
// if unit then
44803: LD_VAR 0 5
44807: IFFALSE 44824
// DeleteCharacters ( prefix & ident ) ;
44809: LD_VAR 0 3
44813: PUSH
44814: LD_VAR 0 1
44818: STR
44819: PPUSH
44820: CALL_OW 40
// end else
44824: GO 44841
// unit := NewCharacter ( ident ) ;
44826: LD_ADDR_VAR 0 5
44830: PUSH
44831: LD_VAR 0 1
44835: PPUSH
44836: CALL_OW 25
44840: ST_TO_ADDR
// result := unit ;
44841: LD_ADDR_VAR 0 4
44845: PUSH
44846: LD_VAR 0 5
44850: ST_TO_ADDR
// end ;
44851: LD_VAR 0 4
44855: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
44856: LD_INT 0
44858: PPUSH
44859: PPUSH
// if exist_mode then
44860: LD_VAR 0 2
44864: IFFALSE 44889
// unit := CreateCharacter ( prefix & ident ) else
44866: LD_ADDR_VAR 0 5
44870: PUSH
44871: LD_VAR 0 3
44875: PUSH
44876: LD_VAR 0 1
44880: STR
44881: PPUSH
44882: CALL_OW 34
44886: ST_TO_ADDR
44887: GO 44904
// unit := NewCharacter ( ident ) ;
44889: LD_ADDR_VAR 0 5
44893: PUSH
44894: LD_VAR 0 1
44898: PPUSH
44899: CALL_OW 25
44903: ST_TO_ADDR
// result := unit ;
44904: LD_ADDR_VAR 0 4
44908: PUSH
44909: LD_VAR 0 5
44913: ST_TO_ADDR
// end ;
44914: LD_VAR 0 4
44918: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44919: LD_INT 0
44921: PPUSH
44922: PPUSH
// if not side or not nation then
44923: LD_VAR 0 1
44927: NOT
44928: IFTRUE 44937
44930: PUSH
44931: LD_VAR 0 2
44935: NOT
44936: OR
44937: IFFALSE 44941
// exit ;
44939: GO 45735
// case nation of nation_american :
44941: LD_VAR 0 2
44945: PUSH
44946: LD_INT 1
44948: DOUBLE
44949: EQUAL
44950: IFTRUE 44954
44952: GO 45176
44954: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
44955: LD_ADDR_VAR 0 4
44959: PUSH
44960: LD_INT 35
44962: PUSH
44963: LD_INT 45
44965: PUSH
44966: LD_INT 46
44968: PUSH
44969: LD_INT 47
44971: PUSH
44972: LD_INT 82
44974: PUSH
44975: LD_INT 83
44977: PUSH
44978: LD_INT 84
44980: PUSH
44981: LD_INT 85
44983: PUSH
44984: LD_INT 86
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 6
44995: PUSH
44996: LD_INT 15
44998: PUSH
44999: LD_INT 16
45001: PUSH
45002: LD_INT 7
45004: PUSH
45005: LD_INT 12
45007: PUSH
45008: LD_INT 13
45010: PUSH
45011: LD_INT 10
45013: PUSH
45014: LD_INT 14
45016: PUSH
45017: LD_INT 20
45019: PUSH
45020: LD_INT 21
45022: PUSH
45023: LD_INT 22
45025: PUSH
45026: LD_INT 25
45028: PUSH
45029: LD_INT 32
45031: PUSH
45032: LD_INT 27
45034: PUSH
45035: LD_INT 36
45037: PUSH
45038: LD_INT 69
45040: PUSH
45041: LD_INT 39
45043: PUSH
45044: LD_INT 34
45046: PUSH
45047: LD_INT 40
45049: PUSH
45050: LD_INT 48
45052: PUSH
45053: LD_INT 49
45055: PUSH
45056: LD_INT 50
45058: PUSH
45059: LD_INT 51
45061: PUSH
45062: LD_INT 52
45064: PUSH
45065: LD_INT 53
45067: PUSH
45068: LD_INT 54
45070: PUSH
45071: LD_INT 55
45073: PUSH
45074: LD_INT 56
45076: PUSH
45077: LD_INT 57
45079: PUSH
45080: LD_INT 58
45082: PUSH
45083: LD_INT 59
45085: PUSH
45086: LD_INT 60
45088: PUSH
45089: LD_INT 61
45091: PUSH
45092: LD_INT 62
45094: PUSH
45095: LD_INT 80
45097: PUSH
45098: LD_INT 82
45100: PUSH
45101: LD_INT 83
45103: PUSH
45104: LD_INT 84
45106: PUSH
45107: LD_INT 85
45109: PUSH
45110: LD_INT 86
45112: PUSH
45113: LD_INT 90
45115: PUSH
45116: LD_INT 93
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
45174: GO 45657
45176: LD_INT 2
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45184
45182: GO 45418
45184: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
45185: LD_ADDR_VAR 0 4
45189: PUSH
45190: LD_INT 35
45192: PUSH
45193: LD_INT 45
45195: PUSH
45196: LD_INT 46
45198: PUSH
45199: LD_INT 47
45201: PUSH
45202: LD_INT 82
45204: PUSH
45205: LD_INT 83
45207: PUSH
45208: LD_INT 84
45210: PUSH
45211: LD_INT 85
45213: PUSH
45214: LD_INT 87
45216: PUSH
45217: LD_INT 70
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 11
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 4
45231: PUSH
45232: LD_INT 5
45234: PUSH
45235: LD_INT 6
45237: PUSH
45238: LD_INT 15
45240: PUSH
45241: LD_INT 18
45243: PUSH
45244: LD_INT 7
45246: PUSH
45247: LD_INT 17
45249: PUSH
45250: LD_INT 8
45252: PUSH
45253: LD_INT 20
45255: PUSH
45256: LD_INT 21
45258: PUSH
45259: LD_INT 22
45261: PUSH
45262: LD_INT 72
45264: PUSH
45265: LD_INT 26
45267: PUSH
45268: LD_INT 69
45270: PUSH
45271: LD_INT 39
45273: PUSH
45274: LD_INT 40
45276: PUSH
45277: LD_INT 41
45279: PUSH
45280: LD_INT 42
45282: PUSH
45283: LD_INT 43
45285: PUSH
45286: LD_INT 48
45288: PUSH
45289: LD_INT 49
45291: PUSH
45292: LD_INT 50
45294: PUSH
45295: LD_INT 51
45297: PUSH
45298: LD_INT 52
45300: PUSH
45301: LD_INT 53
45303: PUSH
45304: LD_INT 54
45306: PUSH
45307: LD_INT 55
45309: PUSH
45310: LD_INT 56
45312: PUSH
45313: LD_INT 60
45315: PUSH
45316: LD_INT 61
45318: PUSH
45319: LD_INT 62
45321: PUSH
45322: LD_INT 66
45324: PUSH
45325: LD_INT 67
45327: PUSH
45328: LD_INT 68
45330: PUSH
45331: LD_INT 81
45333: PUSH
45334: LD_INT 82
45336: PUSH
45337: LD_INT 83
45339: PUSH
45340: LD_INT 84
45342: PUSH
45343: LD_INT 85
45345: PUSH
45346: LD_INT 87
45348: PUSH
45349: LD_INT 88
45351: PUSH
45352: LD_INT 92
45354: PUSH
45355: LD_INT 94
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
45416: GO 45657
45418: LD_INT 3
45420: DOUBLE
45421: EQUAL
45422: IFTRUE 45426
45424: GO 45656
45426: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
45427: LD_ADDR_VAR 0 4
45431: PUSH
45432: LD_INT 46
45434: PUSH
45435: LD_INT 47
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 82
45446: PUSH
45447: LD_INT 83
45449: PUSH
45450: LD_INT 84
45452: PUSH
45453: LD_INT 85
45455: PUSH
45456: LD_INT 86
45458: PUSH
45459: LD_INT 11
45461: PUSH
45462: LD_INT 9
45464: PUSH
45465: LD_INT 20
45467: PUSH
45468: LD_INT 19
45470: PUSH
45471: LD_INT 21
45473: PUSH
45474: LD_INT 24
45476: PUSH
45477: LD_INT 22
45479: PUSH
45480: LD_INT 25
45482: PUSH
45483: LD_INT 28
45485: PUSH
45486: LD_INT 29
45488: PUSH
45489: LD_INT 30
45491: PUSH
45492: LD_INT 31
45494: PUSH
45495: LD_INT 37
45497: PUSH
45498: LD_INT 38
45500: PUSH
45501: LD_INT 32
45503: PUSH
45504: LD_INT 27
45506: PUSH
45507: LD_INT 33
45509: PUSH
45510: LD_INT 69
45512: PUSH
45513: LD_INT 39
45515: PUSH
45516: LD_INT 34
45518: PUSH
45519: LD_INT 40
45521: PUSH
45522: LD_INT 71
45524: PUSH
45525: LD_INT 23
45527: PUSH
45528: LD_INT 44
45530: PUSH
45531: LD_INT 48
45533: PUSH
45534: LD_INT 49
45536: PUSH
45537: LD_INT 50
45539: PUSH
45540: LD_INT 51
45542: PUSH
45543: LD_INT 52
45545: PUSH
45546: LD_INT 53
45548: PUSH
45549: LD_INT 54
45551: PUSH
45552: LD_INT 55
45554: PUSH
45555: LD_INT 56
45557: PUSH
45558: LD_INT 57
45560: PUSH
45561: LD_INT 58
45563: PUSH
45564: LD_INT 59
45566: PUSH
45567: LD_INT 63
45569: PUSH
45570: LD_INT 64
45572: PUSH
45573: LD_INT 65
45575: PUSH
45576: LD_INT 82
45578: PUSH
45579: LD_INT 83
45581: PUSH
45582: LD_INT 84
45584: PUSH
45585: LD_INT 85
45587: PUSH
45588: LD_INT 86
45590: PUSH
45591: LD_INT 89
45593: PUSH
45594: LD_INT 91
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
45654: GO 45657
45656: POP
// if state > - 1 and state < 3 then
45657: LD_VAR 0 3
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: GREATER
45666: IFFALSE 45678
45668: PUSH
45669: LD_VAR 0 3
45673: PUSH
45674: LD_INT 3
45676: LESS
45677: AND
45678: IFFALSE 45735
// for i in result do
45680: LD_ADDR_VAR 0 5
45684: PUSH
45685: LD_VAR 0 4
45689: PUSH
45690: FOR_IN
45691: IFFALSE 45733
// if GetTech ( i , side ) <> state then
45693: LD_VAR 0 5
45697: PPUSH
45698: LD_VAR 0 1
45702: PPUSH
45703: CALL_OW 321
45707: PUSH
45708: LD_VAR 0 3
45712: NONEQUAL
45713: IFFALSE 45731
// result := result diff i ;
45715: LD_ADDR_VAR 0 4
45719: PUSH
45720: LD_VAR 0 4
45724: PUSH
45725: LD_VAR 0 5
45729: DIFF
45730: ST_TO_ADDR
45731: GO 45690
45733: POP
45734: POP
// end ;
45735: LD_VAR 0 4
45739: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45740: LD_INT 0
45742: PPUSH
45743: PPUSH
45744: PPUSH
// result := true ;
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_INT 1
45752: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45753: LD_ADDR_VAR 0 5
45757: PUSH
45758: LD_VAR 0 2
45762: PPUSH
45763: CALL_OW 480
45767: ST_TO_ADDR
// if not tmp then
45768: LD_VAR 0 5
45772: NOT
45773: IFFALSE 45777
// exit ;
45775: GO 45826
// for i in tmp do
45777: LD_ADDR_VAR 0 4
45781: PUSH
45782: LD_VAR 0 5
45786: PUSH
45787: FOR_IN
45788: IFFALSE 45824
// if GetTech ( i , side ) <> state_researched then
45790: LD_VAR 0 4
45794: PPUSH
45795: LD_VAR 0 1
45799: PPUSH
45800: CALL_OW 321
45804: PUSH
45805: LD_INT 2
45807: NONEQUAL
45808: IFFALSE 45822
// begin result := false ;
45810: LD_ADDR_VAR 0 3
45814: PUSH
45815: LD_INT 0
45817: ST_TO_ADDR
// exit ;
45818: POP
45819: POP
45820: GO 45826
// end ;
45822: GO 45787
45824: POP
45825: POP
// end ;
45826: LD_VAR 0 3
45830: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45831: LD_INT 0
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
45837: PPUSH
45838: PPUSH
45839: PPUSH
45840: PPUSH
45841: PPUSH
45842: PPUSH
45843: PPUSH
45844: PPUSH
45845: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45846: LD_VAR 0 1
45850: NOT
45851: IFTRUE 45868
45853: PUSH
45854: LD_VAR 0 1
45858: PPUSH
45859: CALL_OW 257
45863: PUSH
45864: LD_INT 9
45866: NONEQUAL
45867: OR
45868: IFFALSE 45872
// exit ;
45870: GO 46451
// side := GetSide ( unit ) ;
45872: LD_ADDR_VAR 0 9
45876: PUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 255
45886: ST_TO_ADDR
// tech_space := tech_spacanom ;
45887: LD_ADDR_VAR 0 12
45891: PUSH
45892: LD_INT 29
45894: ST_TO_ADDR
// tech_time := tech_taurad ;
45895: LD_ADDR_VAR 0 13
45899: PUSH
45900: LD_INT 28
45902: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45903: LD_ADDR_VAR 0 11
45907: PUSH
45908: LD_VAR 0 1
45912: PPUSH
45913: CALL_OW 310
45917: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45918: LD_VAR 0 11
45922: PPUSH
45923: CALL_OW 247
45927: PUSH
45928: LD_INT 2
45930: EQUAL
45931: IFFALSE 45935
// exit ;
45933: GO 46451
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45935: LD_ADDR_VAR 0 8
45939: PUSH
45940: LD_INT 81
45942: PUSH
45943: LD_VAR 0 9
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: LD_INT 21
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PPUSH
45973: CALL_OW 69
45977: ST_TO_ADDR
// if not tmp then
45978: LD_VAR 0 8
45982: NOT
45983: IFFALSE 45987
// exit ;
45985: GO 46451
// if in_unit then
45987: LD_VAR 0 11
45991: IFFALSE 46015
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45993: LD_ADDR_VAR 0 10
45997: PUSH
45998: LD_VAR 0 8
46002: PPUSH
46003: LD_VAR 0 11
46007: PPUSH
46008: CALL_OW 74
46012: ST_TO_ADDR
46013: GO 46035
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46015: LD_ADDR_VAR 0 10
46019: PUSH
46020: LD_VAR 0 8
46024: PPUSH
46025: LD_VAR 0 1
46029: PPUSH
46030: CALL_OW 74
46034: ST_TO_ADDR
// if not enemy then
46035: LD_VAR 0 10
46039: NOT
46040: IFFALSE 46044
// exit ;
46042: GO 46451
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46044: LD_VAR 0 11
46048: IFFALSE 46070
46050: PUSH
46051: LD_VAR 0 11
46055: PPUSH
46056: LD_VAR 0 10
46060: PPUSH
46061: CALL_OW 296
46065: PUSH
46066: LD_INT 13
46068: GREATER
46069: AND
46070: IFTRUE 46092
46072: PUSH
46073: LD_VAR 0 1
46077: PPUSH
46078: LD_VAR 0 10
46082: PPUSH
46083: CALL_OW 296
46087: PUSH
46088: LD_INT 12
46090: GREATER
46091: OR
46092: IFFALSE 46096
// exit ;
46094: GO 46451
// missile := [ 1 ] ;
46096: LD_ADDR_VAR 0 14
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46107: LD_VAR 0 9
46111: PPUSH
46112: LD_VAR 0 12
46116: PPUSH
46117: CALL_OW 325
46121: IFFALSE 46150
// missile := Replace ( missile , missile + 1 , 2 ) ;
46123: LD_ADDR_VAR 0 14
46127: PUSH
46128: LD_VAR 0 14
46132: PPUSH
46133: LD_VAR 0 14
46137: PUSH
46138: LD_INT 1
46140: PLUS
46141: PPUSH
46142: LD_INT 2
46144: PPUSH
46145: CALL_OW 1
46149: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46150: LD_VAR 0 9
46154: PPUSH
46155: LD_VAR 0 13
46159: PPUSH
46160: CALL_OW 325
46164: IFFALSE 46188
46166: PUSH
46167: LD_VAR 0 10
46171: PPUSH
46172: CALL_OW 255
46176: PPUSH
46177: LD_VAR 0 13
46181: PPUSH
46182: CALL_OW 325
46186: NOT
46187: AND
46188: IFFALSE 46217
// missile := Replace ( missile , missile + 1 , 3 ) ;
46190: LD_ADDR_VAR 0 14
46194: PUSH
46195: LD_VAR 0 14
46199: PPUSH
46200: LD_VAR 0 14
46204: PUSH
46205: LD_INT 1
46207: PLUS
46208: PPUSH
46209: LD_INT 3
46211: PPUSH
46212: CALL_OW 1
46216: ST_TO_ADDR
// if missile < 2 then
46217: LD_VAR 0 14
46221: PUSH
46222: LD_INT 2
46224: LESS
46225: IFFALSE 46229
// exit ;
46227: GO 46451
// x := GetX ( enemy ) ;
46229: LD_ADDR_VAR 0 4
46233: PUSH
46234: LD_VAR 0 10
46238: PPUSH
46239: CALL_OW 250
46243: ST_TO_ADDR
// y := GetY ( enemy ) ;
46244: LD_ADDR_VAR 0 5
46248: PUSH
46249: LD_VAR 0 10
46253: PPUSH
46254: CALL_OW 251
46258: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46259: LD_ADDR_VAR 0 6
46263: PUSH
46264: LD_VAR 0 4
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PPUSH
46273: LD_INT 1
46275: PPUSH
46276: CALL_OW 12
46280: PLUS
46281: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46282: LD_ADDR_VAR 0 7
46286: PUSH
46287: LD_VAR 0 5
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PPUSH
46296: LD_INT 1
46298: PPUSH
46299: CALL_OW 12
46303: PLUS
46304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46305: LD_VAR 0 6
46309: PPUSH
46310: LD_VAR 0 7
46314: PPUSH
46315: CALL_OW 488
46319: NOT
46320: IFFALSE 46342
// begin _x := x ;
46322: LD_ADDR_VAR 0 6
46326: PUSH
46327: LD_VAR 0 4
46331: ST_TO_ADDR
// _y := y ;
46332: LD_ADDR_VAR 0 7
46336: PUSH
46337: LD_VAR 0 5
46341: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46342: LD_ADDR_VAR 0 3
46346: PUSH
46347: LD_INT 1
46349: PPUSH
46350: LD_VAR 0 14
46354: PPUSH
46355: CALL_OW 12
46359: ST_TO_ADDR
// case i of 1 :
46360: LD_VAR 0 3
46364: PUSH
46365: LD_INT 1
46367: DOUBLE
46368: EQUAL
46369: IFTRUE 46373
46371: GO 46390
46373: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46374: LD_VAR 0 1
46378: PPUSH
46379: LD_VAR 0 10
46383: PPUSH
46384: CALL_OW 115
46388: GO 46451
46390: LD_INT 2
46392: DOUBLE
46393: EQUAL
46394: IFTRUE 46398
46396: GO 46420
46398: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46399: LD_VAR 0 1
46403: PPUSH
46404: LD_VAR 0 6
46408: PPUSH
46409: LD_VAR 0 7
46413: PPUSH
46414: CALL_OW 153
46418: GO 46451
46420: LD_INT 3
46422: DOUBLE
46423: EQUAL
46424: IFTRUE 46428
46426: GO 46450
46428: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46429: LD_VAR 0 1
46433: PPUSH
46434: LD_VAR 0 6
46438: PPUSH
46439: LD_VAR 0 7
46443: PPUSH
46444: CALL_OW 154
46448: GO 46451
46450: POP
// end ;
46451: LD_VAR 0 2
46455: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46456: LD_INT 0
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
// if not unit or not building then
46464: LD_VAR 0 1
46468: NOT
46469: IFTRUE 46478
46471: PUSH
46472: LD_VAR 0 2
46476: NOT
46477: OR
46478: IFFALSE 46482
// exit ;
46480: GO 46640
// x := GetX ( building ) ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: LD_VAR 0 2
46491: PPUSH
46492: CALL_OW 250
46496: ST_TO_ADDR
// y := GetY ( building ) ;
46497: LD_ADDR_VAR 0 6
46501: PUSH
46502: LD_VAR 0 2
46506: PPUSH
46507: CALL_OW 251
46511: ST_TO_ADDR
// for i := 0 to 5 do
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: DOUBLE
46518: LD_INT 0
46520: DEC
46521: ST_TO_ADDR
46522: LD_INT 5
46524: PUSH
46525: FOR_TO
46526: IFFALSE 46638
// begin _x := ShiftX ( x , i , 3 ) ;
46528: LD_ADDR_VAR 0 7
46532: PUSH
46533: LD_VAR 0 5
46537: PPUSH
46538: LD_VAR 0 4
46542: PPUSH
46543: LD_INT 3
46545: PPUSH
46546: CALL_OW 272
46550: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46551: LD_ADDR_VAR 0 8
46555: PUSH
46556: LD_VAR 0 6
46560: PPUSH
46561: LD_VAR 0 4
46565: PPUSH
46566: LD_INT 3
46568: PPUSH
46569: CALL_OW 273
46573: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46574: LD_VAR 0 7
46578: PPUSH
46579: LD_VAR 0 8
46583: PPUSH
46584: CALL_OW 488
46588: NOT
46589: IFFALSE 46593
// continue ;
46591: GO 46525
// if HexInfo ( _x , _y ) = 0 then
46593: LD_VAR 0 7
46597: PPUSH
46598: LD_VAR 0 8
46602: PPUSH
46603: CALL_OW 428
46607: PUSH
46608: LD_INT 0
46610: EQUAL
46611: IFFALSE 46636
// begin ComMoveXY ( unit , _x , _y ) ;
46613: LD_VAR 0 1
46617: PPUSH
46618: LD_VAR 0 7
46622: PPUSH
46623: LD_VAR 0 8
46627: PPUSH
46628: CALL_OW 111
// exit ;
46632: POP
46633: POP
46634: GO 46640
// end ; end ;
46636: GO 46525
46638: POP
46639: POP
// end ;
46640: LD_VAR 0 3
46644: RET
// export function ScanBase ( side , base_area ) ; begin
46645: LD_INT 0
46647: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46648: LD_ADDR_VAR 0 3
46652: PUSH
46653: LD_VAR 0 2
46657: PPUSH
46658: LD_INT 81
46660: PUSH
46661: LD_VAR 0 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PPUSH
46670: CALL_OW 70
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 3
46679: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46680: LD_INT 0
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
// result := false ;
46686: LD_ADDR_VAR 0 2
46690: PUSH
46691: LD_INT 0
46693: ST_TO_ADDR
// side := GetSide ( unit ) ;
46694: LD_ADDR_VAR 0 3
46698: PUSH
46699: LD_VAR 0 1
46703: PPUSH
46704: CALL_OW 255
46708: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46709: LD_ADDR_VAR 0 4
46713: PUSH
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 248
46723: ST_TO_ADDR
// case nat of 1 :
46724: LD_VAR 0 4
46728: PUSH
46729: LD_INT 1
46731: DOUBLE
46732: EQUAL
46733: IFTRUE 46737
46735: GO 46748
46737: POP
// tech := tech_lassight ; 2 :
46738: LD_ADDR_VAR 0 5
46742: PUSH
46743: LD_INT 12
46745: ST_TO_ADDR
46746: GO 46787
46748: LD_INT 2
46750: DOUBLE
46751: EQUAL
46752: IFTRUE 46756
46754: GO 46767
46756: POP
// tech := tech_mortar ; 3 :
46757: LD_ADDR_VAR 0 5
46761: PUSH
46762: LD_INT 41
46764: ST_TO_ADDR
46765: GO 46787
46767: LD_INT 3
46769: DOUBLE
46770: EQUAL
46771: IFTRUE 46775
46773: GO 46786
46775: POP
// tech := tech_bazooka ; end ;
46776: LD_ADDR_VAR 0 5
46780: PUSH
46781: LD_INT 44
46783: ST_TO_ADDR
46784: GO 46787
46786: POP
// if Researched ( side , tech ) then
46787: LD_VAR 0 3
46791: PPUSH
46792: LD_VAR 0 5
46796: PPUSH
46797: CALL_OW 325
46801: IFFALSE 46828
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46803: LD_ADDR_VAR 0 2
46807: PUSH
46808: LD_INT 5
46810: PUSH
46811: LD_INT 8
46813: PUSH
46814: LD_INT 9
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: PUSH
46822: LD_VAR 0 4
46826: ARRAY
46827: ST_TO_ADDR
// end ;
46828: LD_VAR 0 2
46832: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46833: LD_INT 0
46835: PPUSH
46836: PPUSH
46837: PPUSH
// if not mines then
46838: LD_VAR 0 2
46842: NOT
46843: IFFALSE 46847
// exit ;
46845: GO 46991
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46847: LD_ADDR_VAR 0 5
46851: PUSH
46852: LD_INT 81
46854: PUSH
46855: LD_VAR 0 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: LD_INT 21
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PPUSH
46885: CALL_OW 69
46889: ST_TO_ADDR
// for i in mines do
46890: LD_ADDR_VAR 0 4
46894: PUSH
46895: LD_VAR 0 2
46899: PUSH
46900: FOR_IN
46901: IFFALSE 46989
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46903: LD_VAR 0 4
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: PPUSH
46912: LD_VAR 0 4
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: PPUSH
46921: CALL_OW 458
46925: NOT
46926: IFFALSE 46930
// continue ;
46928: GO 46900
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46930: LD_VAR 0 4
46934: PUSH
46935: LD_INT 1
46937: ARRAY
46938: PPUSH
46939: LD_VAR 0 4
46943: PUSH
46944: LD_INT 2
46946: ARRAY
46947: PPUSH
46948: CALL_OW 428
46952: PUSH
46953: LD_VAR 0 5
46957: IN
46958: IFFALSE 46987
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46960: LD_VAR 0 4
46964: PUSH
46965: LD_INT 1
46967: ARRAY
46968: PPUSH
46969: LD_VAR 0 4
46973: PUSH
46974: LD_INT 2
46976: ARRAY
46977: PPUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 456
// end ;
46987: GO 46900
46989: POP
46990: POP
// end ;
46991: LD_VAR 0 3
46995: RET
// export function Count ( array ) ; begin
46996: LD_INT 0
46998: PPUSH
// result := array + 0 ;
46999: LD_ADDR_VAR 0 2
47003: PUSH
47004: LD_VAR 0 1
47008: PUSH
47009: LD_INT 0
47011: PLUS
47012: ST_TO_ADDR
// end ;
47013: LD_VAR 0 2
47017: RET
// export function IsEmpty ( building ) ; begin
47018: LD_INT 0
47020: PPUSH
// if not building then
47021: LD_VAR 0 1
47025: NOT
47026: IFFALSE 47030
// exit ;
47028: GO 47073
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
47030: LD_ADDR_VAR 0 2
47034: PUSH
47035: LD_VAR 0 1
47039: PUSH
47040: LD_INT 22
47042: PUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 255
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 58
47059: PUSH
47060: EMPTY
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PPUSH
47067: CALL_OW 69
47071: IN
47072: ST_TO_ADDR
// end ;
47073: LD_VAR 0 2
47077: RET
// export function IsNotFull ( building ) ; var places ; begin
47078: LD_INT 0
47080: PPUSH
47081: PPUSH
// if not building then
47082: LD_VAR 0 1
47086: NOT
47087: IFFALSE 47091
// exit ;
47089: GO 47119
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
47091: LD_ADDR_VAR 0 2
47095: PUSH
47096: LD_VAR 0 1
47100: PPUSH
47101: LD_INT 3
47103: PUSH
47104: LD_INT 62
47106: PUSH
47107: EMPTY
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PPUSH
47114: CALL_OW 72
47118: ST_TO_ADDR
// end ;
47119: LD_VAR 0 2
47123: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47124: LD_INT 0
47126: PPUSH
47127: PPUSH
47128: PPUSH
47129: PPUSH
// tmp := [ ] ;
47130: LD_ADDR_VAR 0 3
47134: PUSH
47135: EMPTY
47136: ST_TO_ADDR
// list := [ ] ;
47137: LD_ADDR_VAR 0 5
47141: PUSH
47142: EMPTY
47143: ST_TO_ADDR
// for i = 16 to 25 do
47144: LD_ADDR_VAR 0 4
47148: PUSH
47149: DOUBLE
47150: LD_INT 16
47152: DEC
47153: ST_TO_ADDR
47154: LD_INT 25
47156: PUSH
47157: FOR_TO
47158: IFFALSE 47231
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47160: LD_ADDR_VAR 0 3
47164: PUSH
47165: LD_VAR 0 3
47169: PUSH
47170: LD_INT 22
47172: PUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: CALL_OW 255
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 91
47189: PUSH
47190: LD_VAR 0 1
47194: PUSH
47195: LD_INT 6
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 30
47205: PUSH
47206: LD_VAR 0 4
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: LIST
47219: PUSH
47220: EMPTY
47221: LIST
47222: PPUSH
47223: CALL_OW 69
47227: ADD
47228: ST_TO_ADDR
47229: GO 47157
47231: POP
47232: POP
// for i = 1 to tmp do
47233: LD_ADDR_VAR 0 4
47237: PUSH
47238: DOUBLE
47239: LD_INT 1
47241: DEC
47242: ST_TO_ADDR
47243: LD_VAR 0 3
47247: PUSH
47248: FOR_TO
47249: IFFALSE 47337
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47251: LD_ADDR_VAR 0 5
47255: PUSH
47256: LD_VAR 0 5
47260: PUSH
47261: LD_VAR 0 3
47265: PUSH
47266: LD_VAR 0 4
47270: ARRAY
47271: PPUSH
47272: CALL_OW 266
47276: PUSH
47277: LD_VAR 0 3
47281: PUSH
47282: LD_VAR 0 4
47286: ARRAY
47287: PPUSH
47288: CALL_OW 250
47292: PUSH
47293: LD_VAR 0 3
47297: PUSH
47298: LD_VAR 0 4
47302: ARRAY
47303: PPUSH
47304: CALL_OW 251
47308: PUSH
47309: LD_VAR 0 3
47313: PUSH
47314: LD_VAR 0 4
47318: ARRAY
47319: PPUSH
47320: CALL_OW 254
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: ADD
47334: ST_TO_ADDR
47335: GO 47248
47337: POP
47338: POP
// result := list ;
47339: LD_ADDR_VAR 0 2
47343: PUSH
47344: LD_VAR 0 5
47348: ST_TO_ADDR
// end ;
47349: LD_VAR 0 2
47353: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
// if not factory then
47363: LD_VAR 0 1
47367: NOT
47368: IFFALSE 47372
// exit ;
47370: GO 47975
// if control = control_apeman then
47372: LD_VAR 0 4
47376: PUSH
47377: LD_INT 5
47379: EQUAL
47380: IFFALSE 47489
// begin tmp := UnitsInside ( factory ) ;
47382: LD_ADDR_VAR 0 8
47386: PUSH
47387: LD_VAR 0 1
47391: PPUSH
47392: CALL_OW 313
47396: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47397: LD_VAR 0 8
47401: PPUSH
47402: LD_INT 25
47404: PUSH
47405: LD_INT 12
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PPUSH
47412: CALL_OW 72
47416: NOT
47417: IFFALSE 47427
// control := control_manual ;
47419: LD_ADDR_VAR 0 4
47423: PUSH
47424: LD_INT 1
47426: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47427: LD_ADDR_VAR 0 8
47431: PUSH
47432: LD_VAR 0 1
47436: PPUSH
47437: CALL 47124 0 1
47441: ST_TO_ADDR
// if tmp then
47442: LD_VAR 0 8
47446: IFFALSE 47489
// begin for i in tmp do
47448: LD_ADDR_VAR 0 7
47452: PUSH
47453: LD_VAR 0 8
47457: PUSH
47458: FOR_IN
47459: IFFALSE 47487
// if i [ 1 ] = b_ext_radio then
47461: LD_VAR 0 7
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: PUSH
47470: LD_INT 22
47472: EQUAL
47473: IFFALSE 47485
// begin control := control_remote ;
47475: LD_ADDR_VAR 0 4
47479: PUSH
47480: LD_INT 2
47482: ST_TO_ADDR
// break ;
47483: GO 47487
// end ;
47485: GO 47458
47487: POP
47488: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47489: LD_VAR 0 1
47493: PPUSH
47494: LD_VAR 0 2
47498: PPUSH
47499: LD_VAR 0 3
47503: PPUSH
47504: LD_VAR 0 4
47508: PPUSH
47509: LD_VAR 0 5
47513: PPUSH
47514: CALL_OW 448
47518: IFFALSE 47553
// begin result := [ chassis , engine , control , weapon ] ;
47520: LD_ADDR_VAR 0 6
47524: PUSH
47525: LD_VAR 0 2
47529: PUSH
47530: LD_VAR 0 3
47534: PUSH
47535: LD_VAR 0 4
47539: PUSH
47540: LD_VAR 0 5
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// exit ;
47551: GO 47975
// end ; _chassis := AvailableChassisList ( factory ) ;
47553: LD_ADDR_VAR 0 9
47557: PUSH
47558: LD_VAR 0 1
47562: PPUSH
47563: CALL_OW 475
47567: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47568: LD_ADDR_VAR 0 11
47572: PUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: CALL_OW 476
47582: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47583: LD_ADDR_VAR 0 12
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 477
47597: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47598: LD_ADDR_VAR 0 10
47602: PUSH
47603: LD_VAR 0 1
47607: PPUSH
47608: CALL_OW 478
47612: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47613: LD_VAR 0 9
47617: NOT
47618: IFTRUE 47627
47620: PUSH
47621: LD_VAR 0 11
47625: NOT
47626: OR
47627: IFTRUE 47636
47629: PUSH
47630: LD_VAR 0 12
47634: NOT
47635: OR
47636: IFTRUE 47645
47638: PUSH
47639: LD_VAR 0 10
47643: NOT
47644: OR
47645: IFFALSE 47680
// begin result := [ chassis , engine , control , weapon ] ;
47647: LD_ADDR_VAR 0 6
47651: PUSH
47652: LD_VAR 0 2
47656: PUSH
47657: LD_VAR 0 3
47661: PUSH
47662: LD_VAR 0 4
47666: PUSH
47667: LD_VAR 0 5
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: ST_TO_ADDR
// exit ;
47678: GO 47975
// end ; if not chassis in _chassis then
47680: LD_VAR 0 2
47684: PUSH
47685: LD_VAR 0 9
47689: IN
47690: NOT
47691: IFFALSE 47717
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47693: LD_ADDR_VAR 0 2
47697: PUSH
47698: LD_VAR 0 9
47702: PUSH
47703: LD_INT 1
47705: PPUSH
47706: LD_VAR 0 9
47710: PPUSH
47711: CALL_OW 12
47715: ARRAY
47716: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47717: LD_VAR 0 2
47721: PPUSH
47722: LD_VAR 0 3
47726: PPUSH
47727: CALL 47980 0 2
47731: NOT
47732: IFFALSE 47793
// repeat engine := _engine [ 1 ] ;
47734: LD_ADDR_VAR 0 3
47738: PUSH
47739: LD_VAR 0 11
47743: PUSH
47744: LD_INT 1
47746: ARRAY
47747: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47748: LD_ADDR_VAR 0 11
47752: PUSH
47753: LD_VAR 0 11
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 3
47765: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47766: LD_VAR 0 2
47770: PPUSH
47771: LD_VAR 0 3
47775: PPUSH
47776: CALL 47980 0 2
47780: IFTRUE 47791
47782: PUSH
47783: LD_VAR 0 11
47787: PUSH
47788: EMPTY
47789: EQUAL
47790: OR
47791: IFFALSE 47734
// if not control in _control then
47793: LD_VAR 0 4
47797: PUSH
47798: LD_VAR 0 12
47802: IN
47803: NOT
47804: IFFALSE 47830
// control := _control [ rand ( 1 , _control ) ] ;
47806: LD_ADDR_VAR 0 4
47810: PUSH
47811: LD_VAR 0 12
47815: PUSH
47816: LD_INT 1
47818: PPUSH
47819: LD_VAR 0 12
47823: PPUSH
47824: CALL_OW 12
47828: ARRAY
47829: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47830: LD_VAR 0 2
47834: PPUSH
47835: LD_VAR 0 5
47839: PPUSH
47840: CALL 48202 0 2
47844: NOT
47845: IFFALSE 47906
// repeat weapon := _weapon [ 1 ] ;
47847: LD_ADDR_VAR 0 5
47851: PUSH
47852: LD_VAR 0 10
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47861: LD_ADDR_VAR 0 10
47865: PUSH
47866: LD_VAR 0 10
47870: PPUSH
47871: LD_INT 1
47873: PPUSH
47874: CALL_OW 3
47878: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47879: LD_VAR 0 2
47883: PPUSH
47884: LD_VAR 0 5
47888: PPUSH
47889: CALL 48202 0 2
47893: IFTRUE 47904
47895: PUSH
47896: LD_VAR 0 10
47900: PUSH
47901: EMPTY
47902: EQUAL
47903: OR
47904: IFFALSE 47847
// result := [ ] ;
47906: LD_ADDR_VAR 0 6
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47913: LD_VAR 0 1
47917: PPUSH
47918: LD_VAR 0 2
47922: PPUSH
47923: LD_VAR 0 3
47927: PPUSH
47928: LD_VAR 0 4
47932: PPUSH
47933: LD_VAR 0 5
47937: PPUSH
47938: CALL_OW 448
47942: IFFALSE 47975
// result := [ chassis , engine , control , weapon ] ;
47944: LD_ADDR_VAR 0 6
47948: PUSH
47949: LD_VAR 0 2
47953: PUSH
47954: LD_VAR 0 3
47958: PUSH
47959: LD_VAR 0 4
47963: PUSH
47964: LD_VAR 0 5
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// end ;
47975: LD_VAR 0 6
47979: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47980: LD_INT 0
47982: PPUSH
// if not chassis or not engine then
47983: LD_VAR 0 1
47987: NOT
47988: IFTRUE 47997
47990: PUSH
47991: LD_VAR 0 2
47995: NOT
47996: OR
47997: IFFALSE 48001
// exit ;
47999: GO 48197
// case engine of engine_solar :
48001: LD_VAR 0 2
48005: PUSH
48006: LD_INT 2
48008: DOUBLE
48009: EQUAL
48010: IFTRUE 48014
48012: GO 48052
48014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 11
48022: PUSH
48023: LD_INT 12
48025: PUSH
48026: LD_INT 13
48028: PUSH
48029: LD_INT 14
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
48050: GO 48181
48052: LD_INT 1
48054: DOUBLE
48055: EQUAL
48056: IFTRUE 48060
48058: GO 48122
48060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
48061: LD_ADDR_VAR 0 3
48065: PUSH
48066: LD_INT 11
48068: PUSH
48069: LD_INT 12
48071: PUSH
48072: LD_INT 13
48074: PUSH
48075: LD_INT 14
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: LD_INT 4
48089: PUSH
48090: LD_INT 5
48092: PUSH
48093: LD_INT 21
48095: PUSH
48096: LD_INT 23
48098: PUSH
48099: LD_INT 22
48101: PUSH
48102: LD_INT 24
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
48120: GO 48181
48122: LD_INT 3
48124: DOUBLE
48125: EQUAL
48126: IFTRUE 48130
48128: GO 48180
48130: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_INT 13
48138: PUSH
48139: LD_INT 14
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: LD_INT 4
48150: PUSH
48151: LD_INT 5
48153: PUSH
48154: LD_INT 21
48156: PUSH
48157: LD_INT 22
48159: PUSH
48160: LD_INT 23
48162: PUSH
48163: LD_INT 24
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
48178: GO 48181
48180: POP
// result := ( chassis in result ) ;
48181: LD_ADDR_VAR 0 3
48185: PUSH
48186: LD_VAR 0 1
48190: PUSH
48191: LD_VAR 0 3
48195: IN
48196: ST_TO_ADDR
// end ;
48197: LD_VAR 0 3
48201: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48202: LD_INT 0
48204: PPUSH
// if not chassis or not weapon then
48205: LD_VAR 0 1
48209: NOT
48210: IFTRUE 48219
48212: PUSH
48213: LD_VAR 0 2
48217: NOT
48218: OR
48219: IFFALSE 48223
// exit ;
48221: GO 49317
// case weapon of us_machine_gun :
48223: LD_VAR 0 2
48227: PUSH
48228: LD_INT 2
48230: DOUBLE
48231: EQUAL
48232: IFTRUE 48236
48234: GO 48266
48236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48237: LD_ADDR_VAR 0 3
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 4
48253: PUSH
48254: LD_INT 5
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
48264: GO 49301
48266: LD_INT 3
48268: DOUBLE
48269: EQUAL
48270: IFTRUE 48274
48272: GO 48304
48274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48275: LD_ADDR_VAR 0 3
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 4
48291: PUSH
48292: LD_INT 5
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
48302: GO 49301
48304: LD_INT 11
48306: DOUBLE
48307: EQUAL
48308: IFTRUE 48312
48310: GO 48342
48312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48313: LD_ADDR_VAR 0 3
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: LD_INT 4
48329: PUSH
48330: LD_INT 5
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
48340: GO 49301
48342: LD_INT 4
48344: DOUBLE
48345: EQUAL
48346: IFTRUE 48350
48348: GO 48376
48350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48351: LD_ADDR_VAR 0 3
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: LD_INT 4
48364: PUSH
48365: LD_INT 5
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: ST_TO_ADDR
48374: GO 49301
48376: LD_INT 5
48378: DOUBLE
48379: EQUAL
48380: IFTRUE 48384
48382: GO 48410
48384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48385: LD_ADDR_VAR 0 3
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 4
48398: PUSH
48399: LD_INT 5
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
48408: GO 49301
48410: LD_INT 9
48412: DOUBLE
48413: EQUAL
48414: IFTRUE 48418
48416: GO 48444
48418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48419: LD_ADDR_VAR 0 3
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: LD_INT 5
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
48442: GO 49301
48444: LD_INT 7
48446: DOUBLE
48447: EQUAL
48448: IFTRUE 48452
48450: GO 48478
48452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48453: LD_ADDR_VAR 0 3
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: LD_INT 4
48466: PUSH
48467: LD_INT 5
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: ST_TO_ADDR
48476: GO 49301
48478: LD_INT 12
48480: DOUBLE
48481: EQUAL
48482: IFTRUE 48486
48484: GO 48512
48486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48487: LD_ADDR_VAR 0 3
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 4
48500: PUSH
48501: LD_INT 5
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: ST_TO_ADDR
48510: GO 49301
48512: LD_INT 13
48514: DOUBLE
48515: EQUAL
48516: IFTRUE 48520
48518: GO 48546
48520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48521: LD_ADDR_VAR 0 3
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: LD_INT 4
48534: PUSH
48535: LD_INT 5
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
48544: GO 49301
48546: LD_INT 14
48548: DOUBLE
48549: EQUAL
48550: IFTRUE 48554
48552: GO 48572
48554: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48555: LD_ADDR_VAR 0 3
48559: PUSH
48560: LD_INT 4
48562: PUSH
48563: LD_INT 5
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: ST_TO_ADDR
48570: GO 49301
48572: LD_INT 6
48574: DOUBLE
48575: EQUAL
48576: IFTRUE 48580
48578: GO 48598
48580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48581: LD_ADDR_VAR 0 3
48585: PUSH
48586: LD_INT 4
48588: PUSH
48589: LD_INT 5
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: ST_TO_ADDR
48596: GO 49301
48598: LD_INT 10
48600: DOUBLE
48601: EQUAL
48602: IFTRUE 48606
48604: GO 48624
48606: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48607: LD_ADDR_VAR 0 3
48611: PUSH
48612: LD_INT 4
48614: PUSH
48615: LD_INT 5
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: ST_TO_ADDR
48622: GO 49301
48624: LD_INT 22
48626: DOUBLE
48627: EQUAL
48628: IFTRUE 48632
48630: GO 48658
48632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: LD_INT 11
48640: PUSH
48641: LD_INT 12
48643: PUSH
48644: LD_INT 13
48646: PUSH
48647: LD_INT 14
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: ST_TO_ADDR
48656: GO 49301
48658: LD_INT 23
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48666
48664: GO 48692
48666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48667: LD_ADDR_VAR 0 3
48671: PUSH
48672: LD_INT 11
48674: PUSH
48675: LD_INT 12
48677: PUSH
48678: LD_INT 13
48680: PUSH
48681: LD_INT 14
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: ST_TO_ADDR
48690: GO 49301
48692: LD_INT 24
48694: DOUBLE
48695: EQUAL
48696: IFTRUE 48700
48698: GO 48726
48700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_INT 11
48708: PUSH
48709: LD_INT 12
48711: PUSH
48712: LD_INT 13
48714: PUSH
48715: LD_INT 14
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
48724: GO 49301
48726: LD_INT 30
48728: DOUBLE
48729: EQUAL
48730: IFTRUE 48734
48732: GO 48760
48734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48735: LD_ADDR_VAR 0 3
48739: PUSH
48740: LD_INT 11
48742: PUSH
48743: LD_INT 12
48745: PUSH
48746: LD_INT 13
48748: PUSH
48749: LD_INT 14
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: ST_TO_ADDR
48758: GO 49301
48760: LD_INT 25
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48768
48766: GO 48786
48768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48769: LD_ADDR_VAR 0 3
48773: PUSH
48774: LD_INT 13
48776: PUSH
48777: LD_INT 14
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: ST_TO_ADDR
48784: GO 49301
48786: LD_INT 27
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48794
48792: GO 48812
48794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48795: LD_ADDR_VAR 0 3
48799: PUSH
48800: LD_INT 13
48802: PUSH
48803: LD_INT 14
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: ST_TO_ADDR
48810: GO 49301
48812: LD_INT 92
48814: DOUBLE
48815: EQUAL
48816: IFTRUE 48820
48818: GO 48846
48820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48821: LD_ADDR_VAR 0 3
48825: PUSH
48826: LD_INT 11
48828: PUSH
48829: LD_INT 12
48831: PUSH
48832: LD_INT 13
48834: PUSH
48835: LD_INT 14
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
48844: GO 49301
48846: LD_INT 28
48848: DOUBLE
48849: EQUAL
48850: IFTRUE 48854
48852: GO 48872
48854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48855: LD_ADDR_VAR 0 3
48859: PUSH
48860: LD_INT 13
48862: PUSH
48863: LD_INT 14
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: ST_TO_ADDR
48870: GO 49301
48872: LD_INT 29
48874: DOUBLE
48875: EQUAL
48876: IFTRUE 48880
48878: GO 48898
48880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48881: LD_ADDR_VAR 0 3
48885: PUSH
48886: LD_INT 13
48888: PUSH
48889: LD_INT 14
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: ST_TO_ADDR
48896: GO 49301
48898: LD_INT 31
48900: DOUBLE
48901: EQUAL
48902: IFTRUE 48906
48904: GO 48924
48906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48907: LD_ADDR_VAR 0 3
48911: PUSH
48912: LD_INT 13
48914: PUSH
48915: LD_INT 14
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: ST_TO_ADDR
48922: GO 49301
48924: LD_INT 26
48926: DOUBLE
48927: EQUAL
48928: IFTRUE 48932
48930: GO 48950
48932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48933: LD_ADDR_VAR 0 3
48937: PUSH
48938: LD_INT 13
48940: PUSH
48941: LD_INT 14
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: ST_TO_ADDR
48948: GO 49301
48950: LD_INT 42
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48958
48956: GO 48984
48958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48959: LD_ADDR_VAR 0 3
48963: PUSH
48964: LD_INT 21
48966: PUSH
48967: LD_INT 22
48969: PUSH
48970: LD_INT 23
48972: PUSH
48973: LD_INT 24
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
48982: GO 49301
48984: LD_INT 43
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 48992
48990: GO 49018
48992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48993: LD_ADDR_VAR 0 3
48997: PUSH
48998: LD_INT 21
49000: PUSH
49001: LD_INT 22
49003: PUSH
49004: LD_INT 23
49006: PUSH
49007: LD_INT 24
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
49016: GO 49301
49018: LD_INT 44
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49026
49024: GO 49052
49026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
49027: LD_ADDR_VAR 0 3
49031: PUSH
49032: LD_INT 21
49034: PUSH
49035: LD_INT 22
49037: PUSH
49038: LD_INT 23
49040: PUSH
49041: LD_INT 24
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
49050: GO 49301
49052: LD_INT 45
49054: DOUBLE
49055: EQUAL
49056: IFTRUE 49060
49058: GO 49086
49060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
49061: LD_ADDR_VAR 0 3
49065: PUSH
49066: LD_INT 21
49068: PUSH
49069: LD_INT 22
49071: PUSH
49072: LD_INT 23
49074: PUSH
49075: LD_INT 24
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: ST_TO_ADDR
49084: GO 49301
49086: LD_INT 49
49088: DOUBLE
49089: EQUAL
49090: IFTRUE 49094
49092: GO 49120
49094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_INT 21
49102: PUSH
49103: LD_INT 22
49105: PUSH
49106: LD_INT 23
49108: PUSH
49109: LD_INT 24
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
49118: GO 49301
49120: LD_INT 51
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49128
49126: GO 49154
49128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49129: LD_ADDR_VAR 0 3
49133: PUSH
49134: LD_INT 21
49136: PUSH
49137: LD_INT 22
49139: PUSH
49140: LD_INT 23
49142: PUSH
49143: LD_INT 24
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
49152: GO 49301
49154: LD_INT 52
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49162
49160: GO 49188
49162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49163: LD_ADDR_VAR 0 3
49167: PUSH
49168: LD_INT 21
49170: PUSH
49171: LD_INT 22
49173: PUSH
49174: LD_INT 23
49176: PUSH
49177: LD_INT 24
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: ST_TO_ADDR
49186: GO 49301
49188: LD_INT 53
49190: DOUBLE
49191: EQUAL
49192: IFTRUE 49196
49194: GO 49214
49196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49197: LD_ADDR_VAR 0 3
49201: PUSH
49202: LD_INT 23
49204: PUSH
49205: LD_INT 24
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: ST_TO_ADDR
49212: GO 49301
49214: LD_INT 46
49216: DOUBLE
49217: EQUAL
49218: IFTRUE 49222
49220: GO 49240
49222: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: LD_INT 23
49230: PUSH
49231: LD_INT 24
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: ST_TO_ADDR
49238: GO 49301
49240: LD_INT 47
49242: DOUBLE
49243: EQUAL
49244: IFTRUE 49248
49246: GO 49266
49248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
49249: LD_ADDR_VAR 0 3
49253: PUSH
49254: LD_INT 23
49256: PUSH
49257: LD_INT 24
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: ST_TO_ADDR
49264: GO 49301
49266: LD_INT 98
49268: DOUBLE
49269: EQUAL
49270: IFTRUE 49274
49272: GO 49300
49274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49275: LD_ADDR_VAR 0 3
49279: PUSH
49280: LD_INT 21
49282: PUSH
49283: LD_INT 22
49285: PUSH
49286: LD_INT 23
49288: PUSH
49289: LD_INT 24
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: ST_TO_ADDR
49298: GO 49301
49300: POP
// result := ( chassis in result ) ;
49301: LD_ADDR_VAR 0 3
49305: PUSH
49306: LD_VAR 0 1
49310: PUSH
49311: LD_VAR 0 3
49315: IN
49316: ST_TO_ADDR
// end ;
49317: LD_VAR 0 3
49321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49322: LD_INT 0
49324: PPUSH
49325: PPUSH
49326: PPUSH
49327: PPUSH
49328: PPUSH
49329: PPUSH
49330: PPUSH
// result := array ;
49331: LD_ADDR_VAR 0 5
49335: PUSH
49336: LD_VAR 0 1
49340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49341: LD_VAR 0 1
49345: NOT
49346: IFTRUE 49355
49348: PUSH
49349: LD_VAR 0 2
49353: NOT
49354: OR
49355: IFTRUE 49364
49357: PUSH
49358: LD_VAR 0 3
49362: NOT
49363: OR
49364: IFTRUE 49378
49366: PUSH
49367: LD_VAR 0 2
49371: PUSH
49372: LD_VAR 0 1
49376: GREATER
49377: OR
49378: IFTRUE 49392
49380: PUSH
49381: LD_VAR 0 3
49385: PUSH
49386: LD_VAR 0 1
49390: GREATER
49391: OR
49392: IFFALSE 49396
// exit ;
49394: GO 49692
// if direction then
49396: LD_VAR 0 4
49400: IFFALSE 49464
// begin d := 1 ;
49402: LD_ADDR_VAR 0 9
49406: PUSH
49407: LD_INT 1
49409: ST_TO_ADDR
// if i_from > i_to then
49410: LD_VAR 0 2
49414: PUSH
49415: LD_VAR 0 3
49419: GREATER
49420: IFFALSE 49446
// length := ( array - i_from ) + i_to else
49422: LD_ADDR_VAR 0 11
49426: PUSH
49427: LD_VAR 0 1
49431: PUSH
49432: LD_VAR 0 2
49436: MINUS
49437: PUSH
49438: LD_VAR 0 3
49442: PLUS
49443: ST_TO_ADDR
49444: GO 49462
// length := i_to - i_from ;
49446: LD_ADDR_VAR 0 11
49450: PUSH
49451: LD_VAR 0 3
49455: PUSH
49456: LD_VAR 0 2
49460: MINUS
49461: ST_TO_ADDR
// end else
49462: GO 49525
// begin d := - 1 ;
49464: LD_ADDR_VAR 0 9
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: ST_TO_ADDR
// if i_from > i_to then
49473: LD_VAR 0 2
49477: PUSH
49478: LD_VAR 0 3
49482: GREATER
49483: IFFALSE 49503
// length := i_from - i_to else
49485: LD_ADDR_VAR 0 11
49489: PUSH
49490: LD_VAR 0 2
49494: PUSH
49495: LD_VAR 0 3
49499: MINUS
49500: ST_TO_ADDR
49501: GO 49525
// length := ( array - i_to ) + i_from ;
49503: LD_ADDR_VAR 0 11
49507: PUSH
49508: LD_VAR 0 1
49512: PUSH
49513: LD_VAR 0 3
49517: MINUS
49518: PUSH
49519: LD_VAR 0 2
49523: PLUS
49524: ST_TO_ADDR
// end ; if not length then
49525: LD_VAR 0 11
49529: NOT
49530: IFFALSE 49534
// exit ;
49532: GO 49692
// tmp := array ;
49534: LD_ADDR_VAR 0 10
49538: PUSH
49539: LD_VAR 0 1
49543: ST_TO_ADDR
// for i = 1 to length do
49544: LD_ADDR_VAR 0 6
49548: PUSH
49549: DOUBLE
49550: LD_INT 1
49552: DEC
49553: ST_TO_ADDR
49554: LD_VAR 0 11
49558: PUSH
49559: FOR_TO
49560: IFFALSE 49680
// begin for j = 1 to array do
49562: LD_ADDR_VAR 0 7
49566: PUSH
49567: DOUBLE
49568: LD_INT 1
49570: DEC
49571: ST_TO_ADDR
49572: LD_VAR 0 1
49576: PUSH
49577: FOR_TO
49578: IFFALSE 49666
// begin k := j + d ;
49580: LD_ADDR_VAR 0 8
49584: PUSH
49585: LD_VAR 0 7
49589: PUSH
49590: LD_VAR 0 9
49594: PLUS
49595: ST_TO_ADDR
// if k > array then
49596: LD_VAR 0 8
49600: PUSH
49601: LD_VAR 0 1
49605: GREATER
49606: IFFALSE 49616
// k := 1 ;
49608: LD_ADDR_VAR 0 8
49612: PUSH
49613: LD_INT 1
49615: ST_TO_ADDR
// if not k then
49616: LD_VAR 0 8
49620: NOT
49621: IFFALSE 49633
// k := array ;
49623: LD_ADDR_VAR 0 8
49627: PUSH
49628: LD_VAR 0 1
49632: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49633: LD_ADDR_VAR 0 10
49637: PUSH
49638: LD_VAR 0 10
49642: PPUSH
49643: LD_VAR 0 8
49647: PPUSH
49648: LD_VAR 0 1
49652: PUSH
49653: LD_VAR 0 7
49657: ARRAY
49658: PPUSH
49659: CALL_OW 1
49663: ST_TO_ADDR
// end ;
49664: GO 49577
49666: POP
49667: POP
// array := tmp ;
49668: LD_ADDR_VAR 0 1
49672: PUSH
49673: LD_VAR 0 10
49677: ST_TO_ADDR
// end ;
49678: GO 49559
49680: POP
49681: POP
// result := array ;
49682: LD_ADDR_VAR 0 5
49686: PUSH
49687: LD_VAR 0 1
49691: ST_TO_ADDR
// end ;
49692: LD_VAR 0 5
49696: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49697: LD_INT 0
49699: PPUSH
49700: PPUSH
// result := 0 ;
49701: LD_ADDR_VAR 0 3
49705: PUSH
49706: LD_INT 0
49708: ST_TO_ADDR
// if not array or not value in array then
49709: LD_VAR 0 1
49713: NOT
49714: IFTRUE 49729
49716: PUSH
49717: LD_VAR 0 2
49721: PUSH
49722: LD_VAR 0 1
49726: IN
49727: NOT
49728: OR
49729: IFFALSE 49733
// exit ;
49731: GO 49787
// for i = 1 to array do
49733: LD_ADDR_VAR 0 4
49737: PUSH
49738: DOUBLE
49739: LD_INT 1
49741: DEC
49742: ST_TO_ADDR
49743: LD_VAR 0 1
49747: PUSH
49748: FOR_TO
49749: IFFALSE 49785
// if value = array [ i ] then
49751: LD_VAR 0 2
49755: PUSH
49756: LD_VAR 0 1
49760: PUSH
49761: LD_VAR 0 4
49765: ARRAY
49766: EQUAL
49767: IFFALSE 49783
// begin result := i ;
49769: LD_ADDR_VAR 0 3
49773: PUSH
49774: LD_VAR 0 4
49778: ST_TO_ADDR
// exit ;
49779: POP
49780: POP
49781: GO 49787
// end ;
49783: GO 49748
49785: POP
49786: POP
// end ;
49787: LD_VAR 0 3
49791: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49792: LD_INT 0
49794: PPUSH
// vc_chassis := chassis ;
49795: LD_ADDR_OWVAR 37
49799: PUSH
49800: LD_VAR 0 1
49804: ST_TO_ADDR
// vc_engine := engine ;
49805: LD_ADDR_OWVAR 39
49809: PUSH
49810: LD_VAR 0 2
49814: ST_TO_ADDR
// vc_control := control ;
49815: LD_ADDR_OWVAR 38
49819: PUSH
49820: LD_VAR 0 3
49824: ST_TO_ADDR
// vc_weapon := weapon ;
49825: LD_ADDR_OWVAR 40
49829: PUSH
49830: LD_VAR 0 4
49834: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49835: LD_ADDR_OWVAR 41
49839: PUSH
49840: LD_VAR 0 5
49844: ST_TO_ADDR
// end ;
49845: LD_VAR 0 6
49849: RET
// export function WantPlant ( unit ) ; var task ; begin
49850: LD_INT 0
49852: PPUSH
49853: PPUSH
// result := false ;
49854: LD_ADDR_VAR 0 2
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49862: LD_ADDR_VAR 0 3
49866: PUSH
49867: LD_VAR 0 1
49871: PPUSH
49872: CALL_OW 437
49876: ST_TO_ADDR
// if task then
49877: LD_VAR 0 3
49881: IFFALSE 49909
// if task [ 1 ] [ 1 ] = p then
49883: LD_VAR 0 3
49887: PUSH
49888: LD_INT 1
49890: ARRAY
49891: PUSH
49892: LD_INT 1
49894: ARRAY
49895: PUSH
49896: LD_STRING p
49898: EQUAL
49899: IFFALSE 49909
// result := true ;
49901: LD_ADDR_VAR 0 2
49905: PUSH
49906: LD_INT 1
49908: ST_TO_ADDR
// end ;
49909: LD_VAR 0 2
49913: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
// if pos < 1 then
49920: LD_VAR 0 2
49924: PUSH
49925: LD_INT 1
49927: LESS
49928: IFFALSE 49932
// exit ;
49930: GO 50235
// if pos = 1 then
49932: LD_VAR 0 2
49936: PUSH
49937: LD_INT 1
49939: EQUAL
49940: IFFALSE 49973
// result := Replace ( arr , pos [ 1 ] , value ) else
49942: LD_ADDR_VAR 0 4
49946: PUSH
49947: LD_VAR 0 1
49951: PPUSH
49952: LD_VAR 0 2
49956: PUSH
49957: LD_INT 1
49959: ARRAY
49960: PPUSH
49961: LD_VAR 0 3
49965: PPUSH
49966: CALL_OW 1
49970: ST_TO_ADDR
49971: GO 50235
// begin tmp := arr ;
49973: LD_ADDR_VAR 0 6
49977: PUSH
49978: LD_VAR 0 1
49982: ST_TO_ADDR
// s_arr := [ tmp ] ;
49983: LD_ADDR_VAR 0 7
49987: PUSH
49988: LD_VAR 0 6
49992: PUSH
49993: EMPTY
49994: LIST
49995: ST_TO_ADDR
// for i = 1 to pos - 1 do
49996: LD_ADDR_VAR 0 5
50000: PUSH
50001: DOUBLE
50002: LD_INT 1
50004: DEC
50005: ST_TO_ADDR
50006: LD_VAR 0 2
50010: PUSH
50011: LD_INT 1
50013: MINUS
50014: PUSH
50015: FOR_TO
50016: IFFALSE 50061
// begin tmp := tmp [ pos [ i ] ] ;
50018: LD_ADDR_VAR 0 6
50022: PUSH
50023: LD_VAR 0 6
50027: PUSH
50028: LD_VAR 0 2
50032: PUSH
50033: LD_VAR 0 5
50037: ARRAY
50038: ARRAY
50039: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50040: LD_ADDR_VAR 0 7
50044: PUSH
50045: LD_VAR 0 7
50049: PUSH
50050: LD_VAR 0 6
50054: PUSH
50055: EMPTY
50056: LIST
50057: ADD
50058: ST_TO_ADDR
// end ;
50059: GO 50015
50061: POP
50062: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
50063: LD_ADDR_VAR 0 6
50067: PUSH
50068: LD_VAR 0 6
50072: PPUSH
50073: LD_VAR 0 2
50077: PUSH
50078: LD_VAR 0 2
50082: ARRAY
50083: PPUSH
50084: LD_VAR 0 3
50088: PPUSH
50089: CALL_OW 1
50093: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
50094: LD_ADDR_VAR 0 7
50098: PUSH
50099: LD_VAR 0 7
50103: PPUSH
50104: LD_VAR 0 7
50108: PPUSH
50109: LD_VAR 0 6
50113: PPUSH
50114: CALL_OW 1
50118: ST_TO_ADDR
// for i = s_arr downto 2 do
50119: LD_ADDR_VAR 0 5
50123: PUSH
50124: DOUBLE
50125: LD_VAR 0 7
50129: INC
50130: ST_TO_ADDR
50131: LD_INT 2
50133: PUSH
50134: FOR_DOWNTO
50135: IFFALSE 50219
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50137: LD_ADDR_VAR 0 6
50141: PUSH
50142: LD_VAR 0 7
50146: PUSH
50147: LD_VAR 0 5
50151: PUSH
50152: LD_INT 1
50154: MINUS
50155: ARRAY
50156: PPUSH
50157: LD_VAR 0 2
50161: PUSH
50162: LD_VAR 0 5
50166: PUSH
50167: LD_INT 1
50169: MINUS
50170: ARRAY
50171: PPUSH
50172: LD_VAR 0 7
50176: PUSH
50177: LD_VAR 0 5
50181: ARRAY
50182: PPUSH
50183: CALL_OW 1
50187: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50188: LD_ADDR_VAR 0 7
50192: PUSH
50193: LD_VAR 0 7
50197: PPUSH
50198: LD_VAR 0 5
50202: PUSH
50203: LD_INT 1
50205: MINUS
50206: PPUSH
50207: LD_VAR 0 6
50211: PPUSH
50212: CALL_OW 1
50216: ST_TO_ADDR
// end ;
50217: GO 50134
50219: POP
50220: POP
// result := s_arr [ 1 ] ;
50221: LD_ADDR_VAR 0 4
50225: PUSH
50226: LD_VAR 0 7
50230: PUSH
50231: LD_INT 1
50233: ARRAY
50234: ST_TO_ADDR
// end ; end ;
50235: LD_VAR 0 4
50239: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50240: LD_INT 0
50242: PPUSH
50243: PPUSH
// if not list then
50244: LD_VAR 0 1
50248: NOT
50249: IFFALSE 50253
// exit ;
50251: GO 50344
// i := list [ pos1 ] ;
50253: LD_ADDR_VAR 0 5
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_VAR 0 2
50267: ARRAY
50268: ST_TO_ADDR
// if not i then
50269: LD_VAR 0 5
50273: NOT
50274: IFFALSE 50278
// exit ;
50276: GO 50344
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50278: LD_ADDR_VAR 0 1
50282: PUSH
50283: LD_VAR 0 1
50287: PPUSH
50288: LD_VAR 0 2
50292: PPUSH
50293: LD_VAR 0 1
50297: PUSH
50298: LD_VAR 0 3
50302: ARRAY
50303: PPUSH
50304: CALL_OW 1
50308: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50309: LD_ADDR_VAR 0 1
50313: PUSH
50314: LD_VAR 0 1
50318: PPUSH
50319: LD_VAR 0 3
50323: PPUSH
50324: LD_VAR 0 5
50328: PPUSH
50329: CALL_OW 1
50333: ST_TO_ADDR
// result := list ;
50334: LD_ADDR_VAR 0 4
50338: PUSH
50339: LD_VAR 0 1
50343: ST_TO_ADDR
// end ;
50344: LD_VAR 0 4
50348: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50349: LD_INT 0
50351: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50352: LD_ADDR_VAR 0 5
50356: PUSH
50357: LD_VAR 0 1
50361: PPUSH
50362: CALL_OW 250
50366: PPUSH
50367: LD_VAR 0 1
50371: PPUSH
50372: CALL_OW 251
50376: PPUSH
50377: LD_VAR 0 2
50381: PPUSH
50382: LD_VAR 0 3
50386: PPUSH
50387: LD_VAR 0 4
50391: PPUSH
50392: CALL 50774 0 5
50396: ST_TO_ADDR
// end ;
50397: LD_VAR 0 5
50401: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
50402: LD_INT 0
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
// if not list or not unit then
50408: LD_VAR 0 2
50412: NOT
50413: IFTRUE 50422
50415: PUSH
50416: LD_VAR 0 1
50420: NOT
50421: OR
50422: IFFALSE 50426
// exit ;
50424: GO 50769
// result := [ ] ;
50426: LD_ADDR_VAR 0 5
50430: PUSH
50431: EMPTY
50432: ST_TO_ADDR
// for i in list do
50433: LD_ADDR_VAR 0 6
50437: PUSH
50438: LD_VAR 0 2
50442: PUSH
50443: FOR_IN
50444: IFFALSE 50662
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50446: LD_ADDR_VAR 0 8
50450: PUSH
50451: LD_VAR 0 1
50455: PPUSH
50456: LD_VAR 0 6
50460: PUSH
50461: LD_INT 1
50463: ARRAY
50464: PPUSH
50465: LD_VAR 0 6
50469: PUSH
50470: LD_INT 2
50472: ARRAY
50473: PPUSH
50474: CALL_OW 297
50478: ST_TO_ADDR
// if not Count ( result ) then
50479: LD_VAR 0 5
50483: PPUSH
50484: CALL 46996 0 1
50488: NOT
50489: IFFALSE 50522
// begin result := Join ( result , [ i , tmp ] ) ;
50491: LD_ADDR_VAR 0 5
50495: PUSH
50496: LD_VAR 0 5
50500: PPUSH
50501: LD_VAR 0 6
50505: PUSH
50506: LD_VAR 0 8
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PPUSH
50515: CALL 82972 0 2
50519: ST_TO_ADDR
// continue ;
50520: GO 50443
// end ; if result [ result ] [ 2 ] <= tmp then
50522: LD_VAR 0 5
50526: PUSH
50527: LD_VAR 0 5
50531: ARRAY
50532: PUSH
50533: LD_INT 2
50535: ARRAY
50536: PUSH
50537: LD_VAR 0 8
50541: LESSEQUAL
50542: IFFALSE 50575
// result := Join ( result , [ i , tmp ] ) else
50544: LD_ADDR_VAR 0 5
50548: PUSH
50549: LD_VAR 0 5
50553: PPUSH
50554: LD_VAR 0 6
50558: PUSH
50559: LD_VAR 0 8
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PPUSH
50568: CALL 82972 0 2
50572: ST_TO_ADDR
50573: GO 50660
// begin for j := 1 to Count ( result ) do
50575: LD_ADDR_VAR 0 7
50579: PUSH
50580: DOUBLE
50581: LD_INT 1
50583: DEC
50584: ST_TO_ADDR
50585: LD_VAR 0 5
50589: PPUSH
50590: CALL 46996 0 1
50594: PUSH
50595: FOR_TO
50596: IFFALSE 50658
// begin if tmp < result [ j ] [ 2 ] then
50598: LD_VAR 0 8
50602: PUSH
50603: LD_VAR 0 5
50607: PUSH
50608: LD_VAR 0 7
50612: ARRAY
50613: PUSH
50614: LD_INT 2
50616: ARRAY
50617: LESS
50618: IFFALSE 50656
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50620: LD_ADDR_VAR 0 5
50624: PUSH
50625: LD_VAR 0 5
50629: PPUSH
50630: LD_VAR 0 7
50634: PPUSH
50635: LD_VAR 0 6
50639: PUSH
50640: LD_VAR 0 8
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PPUSH
50649: CALL_OW 2
50653: ST_TO_ADDR
// break ;
50654: GO 50658
// end ; end ;
50656: GO 50595
50658: POP
50659: POP
// end ; end ;
50660: GO 50443
50662: POP
50663: POP
// if result and not asc then
50664: LD_VAR 0 5
50668: IFFALSE 50677
50670: PUSH
50671: LD_VAR 0 3
50675: NOT
50676: AND
50677: IFFALSE 50694
// result := ReverseArray ( result ) ;
50679: LD_ADDR_VAR 0 5
50683: PUSH
50684: LD_VAR 0 5
50688: PPUSH
50689: CALL 78052 0 1
50693: ST_TO_ADDR
// tmp := [ ] ;
50694: LD_ADDR_VAR 0 8
50698: PUSH
50699: EMPTY
50700: ST_TO_ADDR
// if mode then
50701: LD_VAR 0 4
50705: IFFALSE 50769
// begin for i := 1 to result do
50707: LD_ADDR_VAR 0 6
50711: PUSH
50712: DOUBLE
50713: LD_INT 1
50715: DEC
50716: ST_TO_ADDR
50717: LD_VAR 0 5
50721: PUSH
50722: FOR_TO
50723: IFFALSE 50757
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
50725: LD_ADDR_VAR 0 8
50729: PUSH
50730: LD_VAR 0 8
50734: PPUSH
50735: LD_VAR 0 5
50739: PUSH
50740: LD_VAR 0 6
50744: ARRAY
50745: PUSH
50746: LD_INT 1
50748: ARRAY
50749: PPUSH
50750: CALL 82972 0 2
50754: ST_TO_ADDR
50755: GO 50722
50757: POP
50758: POP
// result := tmp ;
50759: LD_ADDR_VAR 0 5
50763: PUSH
50764: LD_VAR 0 8
50768: ST_TO_ADDR
// end ; end ;
50769: LD_VAR 0 5
50773: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
// if not list then
50780: LD_VAR 0 3
50784: NOT
50785: IFFALSE 50789
// exit ;
50787: GO 51179
// result := [ ] ;
50789: LD_ADDR_VAR 0 6
50793: PUSH
50794: EMPTY
50795: ST_TO_ADDR
// for i in list do
50796: LD_ADDR_VAR 0 7
50800: PUSH
50801: LD_VAR 0 3
50805: PUSH
50806: FOR_IN
50807: IFFALSE 51009
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50809: LD_ADDR_VAR 0 9
50813: PUSH
50814: LD_VAR 0 7
50818: PPUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: LD_VAR 0 2
50828: PPUSH
50829: CALL_OW 297
50833: ST_TO_ADDR
// if not result then
50834: LD_VAR 0 6
50838: NOT
50839: IFFALSE 50865
// result := [ [ i , tmp ] ] else
50841: LD_ADDR_VAR 0 6
50845: PUSH
50846: LD_VAR 0 7
50850: PUSH
50851: LD_VAR 0 9
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: ST_TO_ADDR
50863: GO 51007
// begin if result [ result ] [ 2 ] <= tmp then
50865: LD_VAR 0 6
50869: PUSH
50870: LD_VAR 0 6
50874: ARRAY
50875: PUSH
50876: LD_INT 2
50878: ARRAY
50879: PUSH
50880: LD_VAR 0 9
50884: LESSEQUAL
50885: IFFALSE 50927
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50887: LD_ADDR_VAR 0 6
50891: PUSH
50892: LD_VAR 0 6
50896: PPUSH
50897: LD_VAR 0 6
50901: PUSH
50902: LD_INT 1
50904: PLUS
50905: PPUSH
50906: LD_VAR 0 7
50910: PUSH
50911: LD_VAR 0 9
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PPUSH
50920: CALL_OW 2
50924: ST_TO_ADDR
50925: GO 51007
// for j := 1 to result do
50927: LD_ADDR_VAR 0 8
50931: PUSH
50932: DOUBLE
50933: LD_INT 1
50935: DEC
50936: ST_TO_ADDR
50937: LD_VAR 0 6
50941: PUSH
50942: FOR_TO
50943: IFFALSE 51005
// begin if tmp < result [ j ] [ 2 ] then
50945: LD_VAR 0 9
50949: PUSH
50950: LD_VAR 0 6
50954: PUSH
50955: LD_VAR 0 8
50959: ARRAY
50960: PUSH
50961: LD_INT 2
50963: ARRAY
50964: LESS
50965: IFFALSE 51003
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50967: LD_ADDR_VAR 0 6
50971: PUSH
50972: LD_VAR 0 6
50976: PPUSH
50977: LD_VAR 0 8
50981: PPUSH
50982: LD_VAR 0 7
50986: PUSH
50987: LD_VAR 0 9
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PPUSH
50996: CALL_OW 2
51000: ST_TO_ADDR
// break ;
51001: GO 51005
// end ; end ;
51003: GO 50942
51005: POP
51006: POP
// end ; end ;
51007: GO 50806
51009: POP
51010: POP
// if result and not asc then
51011: LD_VAR 0 6
51015: IFFALSE 51024
51017: PUSH
51018: LD_VAR 0 4
51022: NOT
51023: AND
51024: IFFALSE 51099
// begin tmp := result ;
51026: LD_ADDR_VAR 0 9
51030: PUSH
51031: LD_VAR 0 6
51035: ST_TO_ADDR
// for i = tmp downto 1 do
51036: LD_ADDR_VAR 0 7
51040: PUSH
51041: DOUBLE
51042: LD_VAR 0 9
51046: INC
51047: ST_TO_ADDR
51048: LD_INT 1
51050: PUSH
51051: FOR_DOWNTO
51052: IFFALSE 51097
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51054: LD_ADDR_VAR 0 6
51058: PUSH
51059: LD_VAR 0 6
51063: PPUSH
51064: LD_VAR 0 9
51068: PUSH
51069: LD_VAR 0 7
51073: MINUS
51074: PUSH
51075: LD_INT 1
51077: PLUS
51078: PPUSH
51079: LD_VAR 0 9
51083: PUSH
51084: LD_VAR 0 7
51088: ARRAY
51089: PPUSH
51090: CALL_OW 1
51094: ST_TO_ADDR
51095: GO 51051
51097: POP
51098: POP
// end ; tmp := [ ] ;
51099: LD_ADDR_VAR 0 9
51103: PUSH
51104: EMPTY
51105: ST_TO_ADDR
// if mode then
51106: LD_VAR 0 5
51110: IFFALSE 51179
// begin for i = 1 to result do
51112: LD_ADDR_VAR 0 7
51116: PUSH
51117: DOUBLE
51118: LD_INT 1
51120: DEC
51121: ST_TO_ADDR
51122: LD_VAR 0 6
51126: PUSH
51127: FOR_TO
51128: IFFALSE 51167
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
51130: LD_ADDR_VAR 0 9
51134: PUSH
51135: LD_VAR 0 9
51139: PPUSH
51140: LD_VAR 0 7
51144: PPUSH
51145: LD_VAR 0 6
51149: PUSH
51150: LD_VAR 0 7
51154: ARRAY
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PPUSH
51160: CALL_OW 1
51164: ST_TO_ADDR
51165: GO 51127
51167: POP
51168: POP
// result := tmp ;
51169: LD_ADDR_VAR 0 6
51173: PUSH
51174: LD_VAR 0 9
51178: ST_TO_ADDR
// end ; end ;
51179: LD_VAR 0 6
51183: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
51184: LD_INT 0
51186: PPUSH
51187: PPUSH
51188: PPUSH
51189: PPUSH
51190: PPUSH
51191: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
51192: LD_ADDR_VAR 0 5
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// if not x or not y then
51214: LD_VAR 0 2
51218: NOT
51219: IFTRUE 51228
51221: PUSH
51222: LD_VAR 0 3
51226: NOT
51227: OR
51228: IFFALSE 51232
// exit ;
51230: GO 52888
// if not range then
51232: LD_VAR 0 4
51236: NOT
51237: IFFALSE 51247
// range := 10 ;
51239: LD_ADDR_VAR 0 4
51243: PUSH
51244: LD_INT 10
51246: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51247: LD_ADDR_VAR 0 8
51251: PUSH
51252: LD_INT 81
51254: PUSH
51255: LD_VAR 0 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 92
51266: PUSH
51267: LD_VAR 0 2
51271: PUSH
51272: LD_VAR 0 3
51276: PUSH
51277: LD_VAR 0 4
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 21
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: PPUSH
51310: CALL_OW 69
51314: ST_TO_ADDR
// if not tmp then
51315: LD_VAR 0 8
51319: NOT
51320: IFFALSE 51324
// exit ;
51322: GO 52888
// for i in tmp do
51324: LD_ADDR_VAR 0 6
51328: PUSH
51329: LD_VAR 0 8
51333: PUSH
51334: FOR_IN
51335: IFFALSE 52863
// begin points := [ 0 , 0 , 0 ] ;
51337: LD_ADDR_VAR 0 9
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// bpoints := 1 ;
51356: LD_ADDR_VAR 0 10
51360: PUSH
51361: LD_INT 1
51363: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51364: LD_VAR 0 6
51368: PPUSH
51369: CALL_OW 247
51373: PUSH
51374: LD_INT 1
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51964
51382: POP
// begin if GetClass ( i ) = 1 then
51383: LD_VAR 0 6
51387: PPUSH
51388: CALL_OW 257
51392: PUSH
51393: LD_INT 1
51395: EQUAL
51396: IFFALSE 51417
// points := [ 10 , 5 , 3 ] ;
51398: LD_ADDR_VAR 0 9
51402: PUSH
51403: LD_INT 10
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51417: LD_VAR 0 6
51421: PPUSH
51422: CALL_OW 257
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: IN
51441: IFFALSE 51462
// points := [ 3 , 2 , 1 ] ;
51443: LD_ADDR_VAR 0 9
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51462: LD_VAR 0 6
51466: PPUSH
51467: CALL_OW 257
51471: PUSH
51472: LD_INT 5
51474: EQUAL
51475: IFFALSE 51496
// points := [ 130 , 5 , 2 ] ;
51477: LD_ADDR_VAR 0 9
51481: PUSH
51482: LD_INT 130
51484: PUSH
51485: LD_INT 5
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51496: LD_VAR 0 6
51500: PPUSH
51501: CALL_OW 257
51505: PUSH
51506: LD_INT 8
51508: EQUAL
51509: IFFALSE 51530
// points := [ 35 , 35 , 30 ] ;
51511: LD_ADDR_VAR 0 9
51515: PUSH
51516: LD_INT 35
51518: PUSH
51519: LD_INT 35
51521: PUSH
51522: LD_INT 30
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51530: LD_VAR 0 6
51534: PPUSH
51535: CALL_OW 257
51539: PUSH
51540: LD_INT 9
51542: EQUAL
51543: IFFALSE 51564
// points := [ 20 , 55 , 40 ] ;
51545: LD_ADDR_VAR 0 9
51549: PUSH
51550: LD_INT 20
51552: PUSH
51553: LD_INT 55
51555: PUSH
51556: LD_INT 40
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51564: LD_VAR 0 6
51568: PPUSH
51569: CALL_OW 257
51573: PUSH
51574: LD_INT 12
51576: PUSH
51577: LD_INT 16
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: IN
51584: IFFALSE 51605
// points := [ 5 , 3 , 2 ] ;
51586: LD_ADDR_VAR 0 9
51590: PUSH
51591: LD_INT 5
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51605: LD_VAR 0 6
51609: PPUSH
51610: CALL_OW 257
51614: PUSH
51615: LD_INT 17
51617: EQUAL
51618: IFFALSE 51639
// points := [ 100 , 50 , 75 ] ;
51620: LD_ADDR_VAR 0 9
51624: PUSH
51625: LD_INT 100
51627: PUSH
51628: LD_INT 50
51630: PUSH
51631: LD_INT 75
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51639: LD_VAR 0 6
51643: PPUSH
51644: CALL_OW 257
51648: PUSH
51649: LD_INT 15
51651: EQUAL
51652: IFFALSE 51673
// points := [ 10 , 5 , 3 ] ;
51654: LD_ADDR_VAR 0 9
51658: PUSH
51659: LD_INT 10
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51673: LD_VAR 0 6
51677: PPUSH
51678: CALL_OW 257
51682: PUSH
51683: LD_INT 14
51685: EQUAL
51686: IFFALSE 51707
// points := [ 10 , 0 , 0 ] ;
51688: LD_ADDR_VAR 0 9
51692: PUSH
51693: LD_INT 10
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51707: LD_VAR 0 6
51711: PPUSH
51712: CALL_OW 257
51716: PUSH
51717: LD_INT 11
51719: EQUAL
51720: IFFALSE 51741
// points := [ 30 , 10 , 5 ] ;
51722: LD_ADDR_VAR 0 9
51726: PUSH
51727: LD_INT 30
51729: PUSH
51730: LD_INT 10
51732: PUSH
51733: LD_INT 5
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51741: LD_VAR 0 1
51745: PPUSH
51746: LD_INT 5
51748: PPUSH
51749: CALL_OW 321
51753: PUSH
51754: LD_INT 2
51756: EQUAL
51757: IFFALSE 51774
// bpoints := bpoints * 1.8 ;
51759: LD_ADDR_VAR 0 10
51763: PUSH
51764: LD_VAR 0 10
51768: PUSH
51769: LD_REAL  1.80000000000000E+0000
51772: MUL
51773: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51774: LD_VAR 0 6
51778: PPUSH
51779: CALL_OW 257
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: IN
51802: IFFALSE 51822
51804: PUSH
51805: LD_VAR 0 1
51809: PPUSH
51810: LD_INT 51
51812: PPUSH
51813: CALL_OW 321
51817: PUSH
51818: LD_INT 2
51820: EQUAL
51821: AND
51822: IFFALSE 51839
// bpoints := bpoints * 1.2 ;
51824: LD_ADDR_VAR 0 10
51828: PUSH
51829: LD_VAR 0 10
51833: PUSH
51834: LD_REAL  1.20000000000000E+0000
51837: MUL
51838: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51839: LD_VAR 0 6
51843: PPUSH
51844: CALL_OW 257
51848: PUSH
51849: LD_INT 5
51851: PUSH
51852: LD_INT 7
51854: PUSH
51855: LD_INT 9
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: IN
51863: IFFALSE 51883
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: LD_INT 52
51873: PPUSH
51874: CALL_OW 321
51878: PUSH
51879: LD_INT 2
51881: EQUAL
51882: AND
51883: IFFALSE 51900
// bpoints := bpoints * 1.5 ;
51885: LD_ADDR_VAR 0 10
51889: PUSH
51890: LD_VAR 0 10
51894: PUSH
51895: LD_REAL  1.50000000000000E+0000
51898: MUL
51899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51900: LD_VAR 0 1
51904: PPUSH
51905: LD_INT 66
51907: PPUSH
51908: CALL_OW 321
51912: PUSH
51913: LD_INT 2
51915: EQUAL
51916: IFFALSE 51933
// bpoints := bpoints * 1.1 ;
51918: LD_ADDR_VAR 0 10
51922: PUSH
51923: LD_VAR 0 10
51927: PUSH
51928: LD_REAL  1.10000000000000E+0000
51931: MUL
51932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51933: LD_ADDR_VAR 0 10
51937: PUSH
51938: LD_VAR 0 10
51942: PUSH
51943: LD_VAR 0 6
51947: PPUSH
51948: LD_INT 1
51950: PPUSH
51951: CALL_OW 259
51955: PUSH
51956: LD_REAL  1.15000000000000E+0000
51959: MUL
51960: MUL
51961: ST_TO_ADDR
// end ; unit_vehicle :
51962: GO 52792
51964: LD_INT 2
51966: DOUBLE
51967: EQUAL
51968: IFTRUE 51972
51970: GO 52780
51972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51973: LD_VAR 0 6
51977: PPUSH
51978: CALL_OW 264
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 42
51988: PUSH
51989: LD_INT 24
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: IN
51997: IFFALSE 52018
// points := [ 25 , 5 , 3 ] ;
51999: LD_ADDR_VAR 0 9
52003: PUSH
52004: LD_INT 25
52006: PUSH
52007: LD_INT 5
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52018: LD_VAR 0 6
52022: PPUSH
52023: CALL_OW 264
52027: PUSH
52028: LD_INT 4
52030: PUSH
52031: LD_INT 43
52033: PUSH
52034: LD_INT 25
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: IN
52042: IFFALSE 52063
// points := [ 40 , 15 , 5 ] ;
52044: LD_ADDR_VAR 0 9
52048: PUSH
52049: LD_INT 40
52051: PUSH
52052: LD_INT 15
52054: PUSH
52055: LD_INT 5
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52063: LD_VAR 0 6
52067: PPUSH
52068: CALL_OW 264
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 23
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: IN
52083: IFFALSE 52104
// points := [ 7 , 25 , 8 ] ;
52085: LD_ADDR_VAR 0 9
52089: PUSH
52090: LD_INT 7
52092: PUSH
52093: LD_INT 25
52095: PUSH
52096: LD_INT 8
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
52104: LD_VAR 0 6
52108: PPUSH
52109: CALL_OW 264
52113: PUSH
52114: LD_INT 5
52116: PUSH
52117: LD_INT 27
52119: PUSH
52120: LD_INT 44
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: IN
52128: IFFALSE 52149
// points := [ 14 , 50 , 16 ] ;
52130: LD_ADDR_VAR 0 9
52134: PUSH
52135: LD_INT 14
52137: PUSH
52138: LD_INT 50
52140: PUSH
52141: LD_INT 16
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
52149: LD_VAR 0 6
52153: PPUSH
52154: CALL_OW 264
52158: PUSH
52159: LD_INT 6
52161: PUSH
52162: LD_INT 46
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: IN
52169: IFFALSE 52190
// points := [ 32 , 120 , 70 ] ;
52171: LD_ADDR_VAR 0 9
52175: PUSH
52176: LD_INT 32
52178: PUSH
52179: LD_INT 120
52181: PUSH
52182: LD_INT 70
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
52190: LD_VAR 0 6
52194: PPUSH
52195: CALL_OW 264
52199: PUSH
52200: LD_INT 7
52202: PUSH
52203: LD_INT 28
52205: PUSH
52206: LD_INT 45
52208: PUSH
52209: LD_INT 92
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: IN
52218: IFFALSE 52239
// points := [ 35 , 20 , 45 ] ;
52220: LD_ADDR_VAR 0 9
52224: PUSH
52225: LD_INT 35
52227: PUSH
52228: LD_INT 20
52230: PUSH
52231: LD_INT 45
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52239: LD_VAR 0 6
52243: PPUSH
52244: CALL_OW 264
52248: PUSH
52249: LD_INT 47
52251: PUSH
52252: EMPTY
52253: LIST
52254: IN
52255: IFFALSE 52276
// points := [ 67 , 45 , 75 ] ;
52257: LD_ADDR_VAR 0 9
52261: PUSH
52262: LD_INT 67
52264: PUSH
52265: LD_INT 45
52267: PUSH
52268: LD_INT 75
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52276: LD_VAR 0 6
52280: PPUSH
52281: CALL_OW 264
52285: PUSH
52286: LD_INT 26
52288: PUSH
52289: EMPTY
52290: LIST
52291: IN
52292: IFFALSE 52313
// points := [ 120 , 30 , 80 ] ;
52294: LD_ADDR_VAR 0 9
52298: PUSH
52299: LD_INT 120
52301: PUSH
52302: LD_INT 30
52304: PUSH
52305: LD_INT 80
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52313: LD_VAR 0 6
52317: PPUSH
52318: CALL_OW 264
52322: PUSH
52323: LD_INT 22
52325: PUSH
52326: EMPTY
52327: LIST
52328: IN
52329: IFFALSE 52350
// points := [ 40 , 1 , 1 ] ;
52331: LD_ADDR_VAR 0 9
52335: PUSH
52336: LD_INT 40
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52350: LD_VAR 0 6
52354: PPUSH
52355: CALL_OW 264
52359: PUSH
52360: LD_INT 29
52362: PUSH
52363: EMPTY
52364: LIST
52365: IN
52366: IFFALSE 52387
// points := [ 70 , 200 , 400 ] ;
52368: LD_ADDR_VAR 0 9
52372: PUSH
52373: LD_INT 70
52375: PUSH
52376: LD_INT 200
52378: PUSH
52379: LD_INT 400
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52387: LD_VAR 0 6
52391: PPUSH
52392: CALL_OW 264
52396: PUSH
52397: LD_INT 14
52399: PUSH
52400: LD_INT 53
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: IN
52407: IFFALSE 52428
// points := [ 40 , 10 , 20 ] ;
52409: LD_ADDR_VAR 0 9
52413: PUSH
52414: LD_INT 40
52416: PUSH
52417: LD_INT 10
52419: PUSH
52420: LD_INT 20
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52428: LD_VAR 0 6
52432: PPUSH
52433: CALL_OW 264
52437: PUSH
52438: LD_INT 9
52440: PUSH
52441: EMPTY
52442: LIST
52443: IN
52444: IFFALSE 52465
// points := [ 5 , 70 , 20 ] ;
52446: LD_ADDR_VAR 0 9
52450: PUSH
52451: LD_INT 5
52453: PUSH
52454: LD_INT 70
52456: PUSH
52457: LD_INT 20
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52465: LD_VAR 0 6
52469: PPUSH
52470: CALL_OW 264
52474: PUSH
52475: LD_INT 10
52477: PUSH
52478: EMPTY
52479: LIST
52480: IN
52481: IFFALSE 52502
// points := [ 35 , 110 , 70 ] ;
52483: LD_ADDR_VAR 0 9
52487: PUSH
52488: LD_INT 35
52490: PUSH
52491: LD_INT 110
52493: PUSH
52494: LD_INT 70
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52502: LD_VAR 0 6
52506: PPUSH
52507: CALL_OW 265
52511: PUSH
52512: LD_INT 25
52514: EQUAL
52515: IFFALSE 52536
// points := [ 80 , 65 , 100 ] ;
52517: LD_ADDR_VAR 0 9
52521: PUSH
52522: LD_INT 80
52524: PUSH
52525: LD_INT 65
52527: PUSH
52528: LD_INT 100
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52536: LD_VAR 0 6
52540: PPUSH
52541: CALL_OW 263
52545: PUSH
52546: LD_INT 1
52548: EQUAL
52549: IFFALSE 52584
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52551: LD_ADDR_VAR 0 10
52555: PUSH
52556: LD_VAR 0 10
52560: PUSH
52561: LD_VAR 0 6
52565: PPUSH
52566: CALL_OW 311
52570: PPUSH
52571: LD_INT 3
52573: PPUSH
52574: CALL_OW 259
52578: PUSH
52579: LD_INT 4
52581: MUL
52582: MUL
52583: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52584: LD_VAR 0 6
52588: PPUSH
52589: CALL_OW 263
52593: PUSH
52594: LD_INT 2
52596: EQUAL
52597: IFFALSE 52648
// begin j := IsControledBy ( i ) ;
52599: LD_ADDR_VAR 0 7
52603: PUSH
52604: LD_VAR 0 6
52608: PPUSH
52609: CALL_OW 312
52613: ST_TO_ADDR
// if j then
52614: LD_VAR 0 7
52618: IFFALSE 52648
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52620: LD_ADDR_VAR 0 10
52624: PUSH
52625: LD_VAR 0 10
52629: PUSH
52630: LD_VAR 0 7
52634: PPUSH
52635: LD_INT 3
52637: PPUSH
52638: CALL_OW 259
52642: PUSH
52643: LD_INT 3
52645: MUL
52646: MUL
52647: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52648: LD_VAR 0 6
52652: PPUSH
52653: CALL_OW 264
52657: PUSH
52658: LD_INT 5
52660: PUSH
52661: LD_INT 6
52663: PUSH
52664: LD_INT 46
52666: PUSH
52667: LD_INT 44
52669: PUSH
52670: LD_INT 47
52672: PUSH
52673: LD_INT 45
52675: PUSH
52676: LD_INT 28
52678: PUSH
52679: LD_INT 7
52681: PUSH
52682: LD_INT 27
52684: PUSH
52685: LD_INT 29
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: IN
52700: IFFALSE 52720
52702: PUSH
52703: LD_VAR 0 1
52707: PPUSH
52708: LD_INT 52
52710: PPUSH
52711: CALL_OW 321
52715: PUSH
52716: LD_INT 2
52718: EQUAL
52719: AND
52720: IFFALSE 52737
// bpoints := bpoints * 1.2 ;
52722: LD_ADDR_VAR 0 10
52726: PUSH
52727: LD_VAR 0 10
52731: PUSH
52732: LD_REAL  1.20000000000000E+0000
52735: MUL
52736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52737: LD_VAR 0 6
52741: PPUSH
52742: CALL_OW 264
52746: PUSH
52747: LD_INT 6
52749: PUSH
52750: LD_INT 46
52752: PUSH
52753: LD_INT 47
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: IN
52761: IFFALSE 52778
// bpoints := bpoints * 1.2 ;
52763: LD_ADDR_VAR 0 10
52767: PUSH
52768: LD_VAR 0 10
52772: PUSH
52773: LD_REAL  1.20000000000000E+0000
52776: MUL
52777: ST_TO_ADDR
// end ; unit_building :
52778: GO 52792
52780: LD_INT 3
52782: DOUBLE
52783: EQUAL
52784: IFTRUE 52788
52786: GO 52791
52788: POP
// ; end ;
52789: GO 52792
52791: POP
// for j = 1 to 3 do
52792: LD_ADDR_VAR 0 7
52796: PUSH
52797: DOUBLE
52798: LD_INT 1
52800: DEC
52801: ST_TO_ADDR
52802: LD_INT 3
52804: PUSH
52805: FOR_TO
52806: IFFALSE 52859
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52808: LD_ADDR_VAR 0 5
52812: PUSH
52813: LD_VAR 0 5
52817: PPUSH
52818: LD_VAR 0 7
52822: PPUSH
52823: LD_VAR 0 5
52827: PUSH
52828: LD_VAR 0 7
52832: ARRAY
52833: PUSH
52834: LD_VAR 0 9
52838: PUSH
52839: LD_VAR 0 7
52843: ARRAY
52844: PUSH
52845: LD_VAR 0 10
52849: MUL
52850: PLUS
52851: PPUSH
52852: CALL_OW 1
52856: ST_TO_ADDR
52857: GO 52805
52859: POP
52860: POP
// end ;
52861: GO 51334
52863: POP
52864: POP
// result := Replace ( result , 4 , tmp ) ;
52865: LD_ADDR_VAR 0 5
52869: PUSH
52870: LD_VAR 0 5
52874: PPUSH
52875: LD_INT 4
52877: PPUSH
52878: LD_VAR 0 8
52882: PPUSH
52883: CALL_OW 1
52887: ST_TO_ADDR
// end ;
52888: LD_VAR 0 5
52892: RET
// export function DangerAtRange ( unit , range ) ; begin
52893: LD_INT 0
52895: PPUSH
// if not unit then
52896: LD_VAR 0 1
52900: NOT
52901: IFFALSE 52905
// exit ;
52903: GO 52950
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: CALL_OW 255
52919: PPUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 250
52929: PPUSH
52930: LD_VAR 0 1
52934: PPUSH
52935: CALL_OW 251
52939: PPUSH
52940: LD_VAR 0 2
52944: PPUSH
52945: CALL 51184 0 4
52949: ST_TO_ADDR
// end ;
52950: LD_VAR 0 3
52954: RET
// export function DangerInArea ( side , area ) ; begin
52955: LD_INT 0
52957: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52958: LD_ADDR_VAR 0 3
52962: PUSH
52963: LD_VAR 0 2
52967: PPUSH
52968: LD_INT 81
52970: PUSH
52971: LD_VAR 0 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PPUSH
52980: CALL_OW 70
52984: ST_TO_ADDR
// end ;
52985: LD_VAR 0 3
52989: RET
// export function IsExtension ( b ) ; begin
52990: LD_INT 0
52992: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52993: LD_ADDR_VAR 0 2
52997: PUSH
52998: LD_VAR 0 1
53002: PUSH
53003: LD_INT 23
53005: PUSH
53006: LD_INT 20
53008: PUSH
53009: LD_INT 22
53011: PUSH
53012: LD_INT 17
53014: PUSH
53015: LD_INT 24
53017: PUSH
53018: LD_INT 21
53020: PUSH
53021: LD_INT 19
53023: PUSH
53024: LD_INT 16
53026: PUSH
53027: LD_INT 25
53029: PUSH
53030: LD_INT 18
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: IN
53045: ST_TO_ADDR
// end ;
53046: LD_VAR 0 2
53050: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
53051: LD_INT 0
53053: PPUSH
53054: PPUSH
53055: PPUSH
// result := [ ] ;
53056: LD_ADDR_VAR 0 4
53060: PUSH
53061: EMPTY
53062: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53063: LD_ADDR_VAR 0 5
53067: PUSH
53068: LD_VAR 0 2
53072: PPUSH
53073: LD_INT 21
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PPUSH
53083: CALL_OW 70
53087: ST_TO_ADDR
// if not tmp then
53088: LD_VAR 0 5
53092: NOT
53093: IFFALSE 53097
// exit ;
53095: GO 53161
// if checkLink then
53097: LD_VAR 0 3
53101: IFFALSE 53151
// begin for i in tmp do
53103: LD_ADDR_VAR 0 6
53107: PUSH
53108: LD_VAR 0 5
53112: PUSH
53113: FOR_IN
53114: IFFALSE 53149
// if GetBase ( i ) <> base then
53116: LD_VAR 0 6
53120: PPUSH
53121: CALL_OW 274
53125: PUSH
53126: LD_VAR 0 1
53130: NONEQUAL
53131: IFFALSE 53147
// ComLinkToBase ( base , i ) ;
53133: LD_VAR 0 1
53137: PPUSH
53138: LD_VAR 0 6
53142: PPUSH
53143: CALL_OW 169
53147: GO 53113
53149: POP
53150: POP
// end ; result := tmp ;
53151: LD_ADDR_VAR 0 4
53155: PUSH
53156: LD_VAR 0 5
53160: ST_TO_ADDR
// end ;
53161: LD_VAR 0 4
53165: RET
// export function ComComplete ( units , b ) ; var i ; begin
53166: LD_INT 0
53168: PPUSH
53169: PPUSH
// if not units then
53170: LD_VAR 0 1
53174: NOT
53175: IFFALSE 53179
// exit ;
53177: GO 53269
// for i in units do
53179: LD_ADDR_VAR 0 4
53183: PUSH
53184: LD_VAR 0 1
53188: PUSH
53189: FOR_IN
53190: IFFALSE 53267
// if BuildingStatus ( b ) = bs_build then
53192: LD_VAR 0 2
53196: PPUSH
53197: CALL_OW 461
53201: PUSH
53202: LD_INT 1
53204: EQUAL
53205: IFFALSE 53265
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
53207: LD_VAR 0 4
53211: PPUSH
53212: LD_STRING h
53214: PUSH
53215: LD_VAR 0 2
53219: PPUSH
53220: CALL_OW 250
53224: PUSH
53225: LD_VAR 0 2
53229: PPUSH
53230: CALL_OW 251
53234: PUSH
53235: LD_VAR 0 2
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: PUSH
53258: EMPTY
53259: LIST
53260: PPUSH
53261: CALL_OW 446
53265: GO 53189
53267: POP
53268: POP
// end ;
53269: LD_VAR 0 3
53273: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53274: LD_INT 0
53276: PPUSH
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
53281: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
53282: LD_VAR 0 1
53286: NOT
53287: IFTRUE 53304
53289: PUSH
53290: LD_VAR 0 1
53294: PPUSH
53295: CALL_OW 263
53299: PUSH
53300: LD_INT 2
53302: NONEQUAL
53303: OR
53304: IFFALSE 53308
// exit ;
53306: GO 53624
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53308: LD_ADDR_VAR 0 6
53312: PUSH
53313: LD_INT 22
53315: PUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: CALL_OW 255
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 30
53335: PUSH
53336: LD_INT 36
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 34
53345: PUSH
53346: LD_INT 31
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PPUSH
53362: CALL_OW 69
53366: ST_TO_ADDR
// if not tmp then
53367: LD_VAR 0 6
53371: NOT
53372: IFFALSE 53376
// exit ;
53374: GO 53624
// result := [ ] ;
53376: LD_ADDR_VAR 0 2
53380: PUSH
53381: EMPTY
53382: ST_TO_ADDR
// for i in tmp do
53383: LD_ADDR_VAR 0 3
53387: PUSH
53388: LD_VAR 0 6
53392: PUSH
53393: FOR_IN
53394: IFFALSE 53465
// begin t := UnitsInside ( i ) ;
53396: LD_ADDR_VAR 0 4
53400: PUSH
53401: LD_VAR 0 3
53405: PPUSH
53406: CALL_OW 313
53410: ST_TO_ADDR
// if t then
53411: LD_VAR 0 4
53415: IFFALSE 53463
// for j in t do
53417: LD_ADDR_VAR 0 7
53421: PUSH
53422: LD_VAR 0 4
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53461
// result := Replace ( result , result + 1 , j ) ;
53430: LD_ADDR_VAR 0 2
53434: PUSH
53435: LD_VAR 0 2
53439: PPUSH
53440: LD_VAR 0 2
53444: PUSH
53445: LD_INT 1
53447: PLUS
53448: PPUSH
53449: LD_VAR 0 7
53453: PPUSH
53454: CALL_OW 1
53458: ST_TO_ADDR
53459: GO 53427
53461: POP
53462: POP
// end ;
53463: GO 53393
53465: POP
53466: POP
// if not result then
53467: LD_VAR 0 2
53471: NOT
53472: IFFALSE 53476
// exit ;
53474: GO 53624
// mech := result [ 1 ] ;
53476: LD_ADDR_VAR 0 5
53480: PUSH
53481: LD_VAR 0 2
53485: PUSH
53486: LD_INT 1
53488: ARRAY
53489: ST_TO_ADDR
// if result > 1 then
53490: LD_VAR 0 2
53494: PUSH
53495: LD_INT 1
53497: GREATER
53498: IFFALSE 53610
// begin for i = 2 to result do
53500: LD_ADDR_VAR 0 3
53504: PUSH
53505: DOUBLE
53506: LD_INT 2
53508: DEC
53509: ST_TO_ADDR
53510: LD_VAR 0 2
53514: PUSH
53515: FOR_TO
53516: IFFALSE 53608
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53518: LD_ADDR_VAR 0 4
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_VAR 0 3
53532: ARRAY
53533: PPUSH
53534: LD_INT 3
53536: PPUSH
53537: CALL_OW 259
53541: PUSH
53542: LD_VAR 0 2
53546: PUSH
53547: LD_VAR 0 3
53551: ARRAY
53552: PPUSH
53553: CALL_OW 432
53557: MINUS
53558: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53559: LD_VAR 0 4
53563: PUSH
53564: LD_VAR 0 5
53568: PPUSH
53569: LD_INT 3
53571: PPUSH
53572: CALL_OW 259
53576: PUSH
53577: LD_VAR 0 5
53581: PPUSH
53582: CALL_OW 432
53586: MINUS
53587: GREATEREQUAL
53588: IFFALSE 53606
// mech := result [ i ] ;
53590: LD_ADDR_VAR 0 5
53594: PUSH
53595: LD_VAR 0 2
53599: PUSH
53600: LD_VAR 0 3
53604: ARRAY
53605: ST_TO_ADDR
// end ;
53606: GO 53515
53608: POP
53609: POP
// end ; ComLinkTo ( vehicle , mech ) ;
53610: LD_VAR 0 1
53614: PPUSH
53615: LD_VAR 0 5
53619: PPUSH
53620: CALL_OW 135
// end ;
53624: LD_VAR 0 2
53628: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53629: LD_INT 0
53631: PPUSH
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
53636: PPUSH
53637: PPUSH
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
53642: PPUSH
53643: PPUSH
// result := [ ] ;
53644: LD_ADDR_VAR 0 7
53648: PUSH
53649: EMPTY
53650: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53651: LD_VAR 0 1
53655: PPUSH
53656: CALL_OW 266
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: IN
53671: NOT
53672: IFFALSE 53676
// exit ;
53674: GO 55316
// if name then
53676: LD_VAR 0 3
53680: IFFALSE 53696
// SetBName ( base_dep , name ) ;
53682: LD_VAR 0 1
53686: PPUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: CALL_OW 500
// base := GetBase ( base_dep ) ;
53696: LD_ADDR_VAR 0 15
53700: PUSH
53701: LD_VAR 0 1
53705: PPUSH
53706: CALL_OW 274
53710: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53711: LD_ADDR_VAR 0 16
53715: PUSH
53716: LD_VAR 0 1
53720: PPUSH
53721: CALL_OW 255
53725: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53726: LD_ADDR_VAR 0 17
53730: PUSH
53731: LD_VAR 0 1
53735: PPUSH
53736: CALL_OW 248
53740: ST_TO_ADDR
// if sources then
53741: LD_VAR 0 5
53745: IFFALSE 53792
// for i = 1 to 3 do
53747: LD_ADDR_VAR 0 8
53751: PUSH
53752: DOUBLE
53753: LD_INT 1
53755: DEC
53756: ST_TO_ADDR
53757: LD_INT 3
53759: PUSH
53760: FOR_TO
53761: IFFALSE 53790
// AddResourceType ( base , i , sources [ i ] ) ;
53763: LD_VAR 0 15
53767: PPUSH
53768: LD_VAR 0 8
53772: PPUSH
53773: LD_VAR 0 5
53777: PUSH
53778: LD_VAR 0 8
53782: ARRAY
53783: PPUSH
53784: CALL_OW 276
53788: GO 53760
53790: POP
53791: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
53792: LD_ADDR_VAR 0 18
53796: PUSH
53797: LD_VAR 0 15
53801: PPUSH
53802: LD_VAR 0 2
53806: PPUSH
53807: LD_INT 1
53809: PPUSH
53810: CALL 53051 0 3
53814: ST_TO_ADDR
// InitHc ;
53815: CALL_OW 19
// InitUc ;
53819: CALL_OW 18
// uc_side := side ;
53823: LD_ADDR_OWVAR 20
53827: PUSH
53828: LD_VAR 0 16
53832: ST_TO_ADDR
// uc_nation := nation ;
53833: LD_ADDR_OWVAR 21
53837: PUSH
53838: LD_VAR 0 17
53842: ST_TO_ADDR
// if buildings then
53843: LD_VAR 0 18
53847: IFFALSE 55175
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53849: LD_ADDR_VAR 0 19
53853: PUSH
53854: LD_VAR 0 18
53858: PPUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 30
53864: PUSH
53865: LD_INT 29
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 30
53874: PUSH
53875: LD_INT 30
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: PPUSH
53887: CALL_OW 72
53891: ST_TO_ADDR
// if tmp then
53892: LD_VAR 0 19
53896: IFFALSE 53944
// for i in tmp do
53898: LD_ADDR_VAR 0 8
53902: PUSH
53903: LD_VAR 0 19
53907: PUSH
53908: FOR_IN
53909: IFFALSE 53942
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53911: LD_VAR 0 8
53915: PPUSH
53916: CALL_OW 250
53920: PPUSH
53921: LD_VAR 0 8
53925: PPUSH
53926: CALL_OW 251
53930: PPUSH
53931: LD_VAR 0 16
53935: PPUSH
53936: CALL_OW 441
53940: GO 53908
53942: POP
53943: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53944: LD_VAR 0 18
53948: PPUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 30
53954: PUSH
53955: LD_INT 32
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 30
53964: PUSH
53965: LD_INT 33
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: PPUSH
53977: CALL_OW 72
53981: IFFALSE 54069
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53983: LD_ADDR_VAR 0 8
53987: PUSH
53988: LD_VAR 0 18
53992: PPUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 30
53998: PUSH
53999: LD_INT 32
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 30
54008: PUSH
54009: LD_INT 33
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: PPUSH
54021: CALL_OW 72
54025: PUSH
54026: FOR_IN
54027: IFFALSE 54067
// begin if not GetBWeapon ( i ) then
54029: LD_VAR 0 8
54033: PPUSH
54034: CALL_OW 269
54038: NOT
54039: IFFALSE 54065
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54041: LD_VAR 0 8
54045: PPUSH
54046: LD_VAR 0 8
54050: PPUSH
54051: LD_VAR 0 2
54055: PPUSH
54056: CALL 55321 0 2
54060: PPUSH
54061: CALL_OW 431
// end ;
54065: GO 54026
54067: POP
54068: POP
// end ; for i = 1 to personel do
54069: LD_ADDR_VAR 0 8
54073: PUSH
54074: DOUBLE
54075: LD_INT 1
54077: DEC
54078: ST_TO_ADDR
54079: LD_VAR 0 6
54083: PUSH
54084: FOR_TO
54085: IFFALSE 55155
// begin if i > 4 then
54087: LD_VAR 0 8
54091: PUSH
54092: LD_INT 4
54094: GREATER
54095: IFFALSE 54099
// break ;
54097: GO 55155
// case i of 1 :
54099: LD_VAR 0 8
54103: PUSH
54104: LD_INT 1
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54112
54110: GO 54192
54112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
54113: LD_ADDR_VAR 0 12
54117: PUSH
54118: LD_VAR 0 18
54122: PPUSH
54123: LD_INT 22
54125: PUSH
54126: LD_VAR 0 16
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 58
54137: PUSH
54138: EMPTY
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 30
54146: PUSH
54147: LD_INT 32
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 30
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 30
54166: PUSH
54167: LD_INT 5
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: PPUSH
54185: CALL_OW 72
54189: ST_TO_ADDR
54190: GO 54414
54192: LD_INT 2
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54200
54198: GO 54262
54200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
54201: LD_ADDR_VAR 0 12
54205: PUSH
54206: LD_VAR 0 18
54210: PPUSH
54211: LD_INT 22
54213: PUSH
54214: LD_VAR 0 16
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 30
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 30
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PPUSH
54255: CALL_OW 72
54259: ST_TO_ADDR
54260: GO 54414
54262: LD_INT 3
54264: DOUBLE
54265: EQUAL
54266: IFTRUE 54270
54268: GO 54332
54270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54271: LD_ADDR_VAR 0 12
54275: PUSH
54276: LD_VAR 0 18
54280: PPUSH
54281: LD_INT 22
54283: PUSH
54284: LD_VAR 0 16
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 30
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 30
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PPUSH
54325: CALL_OW 72
54329: ST_TO_ADDR
54330: GO 54414
54332: LD_INT 4
54334: DOUBLE
54335: EQUAL
54336: IFTRUE 54340
54338: GO 54413
54340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54341: LD_ADDR_VAR 0 12
54345: PUSH
54346: LD_VAR 0 18
54350: PPUSH
54351: LD_INT 22
54353: PUSH
54354: LD_VAR 0 16
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 30
54368: PUSH
54369: LD_INT 6
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 30
54378: PUSH
54379: LD_INT 7
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 30
54388: PUSH
54389: LD_INT 8
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PPUSH
54406: CALL_OW 72
54410: ST_TO_ADDR
54411: GO 54414
54413: POP
// if i = 1 then
54414: LD_VAR 0 8
54418: PUSH
54419: LD_INT 1
54421: EQUAL
54422: IFFALSE 54533
// begin tmp := [ ] ;
54424: LD_ADDR_VAR 0 19
54428: PUSH
54429: EMPTY
54430: ST_TO_ADDR
// for j in f do
54431: LD_ADDR_VAR 0 9
54435: PUSH
54436: LD_VAR 0 12
54440: PUSH
54441: FOR_IN
54442: IFFALSE 54515
// if GetBType ( j ) = b_bunker then
54444: LD_VAR 0 9
54448: PPUSH
54449: CALL_OW 266
54453: PUSH
54454: LD_INT 32
54456: EQUAL
54457: IFFALSE 54484
// tmp := Insert ( tmp , 1 , j ) else
54459: LD_ADDR_VAR 0 19
54463: PUSH
54464: LD_VAR 0 19
54468: PPUSH
54469: LD_INT 1
54471: PPUSH
54472: LD_VAR 0 9
54476: PPUSH
54477: CALL_OW 2
54481: ST_TO_ADDR
54482: GO 54513
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54484: LD_ADDR_VAR 0 19
54488: PUSH
54489: LD_VAR 0 19
54493: PPUSH
54494: LD_VAR 0 19
54498: PUSH
54499: LD_INT 1
54501: PLUS
54502: PPUSH
54503: LD_VAR 0 9
54507: PPUSH
54508: CALL_OW 2
54512: ST_TO_ADDR
54513: GO 54441
54515: POP
54516: POP
// if tmp then
54517: LD_VAR 0 19
54521: IFFALSE 54533
// f := tmp ;
54523: LD_ADDR_VAR 0 12
54527: PUSH
54528: LD_VAR 0 19
54532: ST_TO_ADDR
// end ; x := personel [ i ] ;
54533: LD_ADDR_VAR 0 13
54537: PUSH
54538: LD_VAR 0 6
54542: PUSH
54543: LD_VAR 0 8
54547: ARRAY
54548: ST_TO_ADDR
// if x = - 1 then
54549: LD_VAR 0 13
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: EQUAL
54558: IFFALSE 54769
// begin for j in f do
54560: LD_ADDR_VAR 0 9
54564: PUSH
54565: LD_VAR 0 12
54569: PUSH
54570: FOR_IN
54571: IFFALSE 54765
// repeat InitHc ;
54573: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54577: LD_VAR 0 9
54581: PPUSH
54582: CALL_OW 266
54586: PUSH
54587: LD_INT 5
54589: EQUAL
54590: IFFALSE 54660
// begin if UnitsInside ( j ) < 3 then
54592: LD_VAR 0 9
54596: PPUSH
54597: CALL_OW 313
54601: PUSH
54602: LD_INT 3
54604: LESS
54605: IFFALSE 54641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54607: LD_INT 0
54609: PPUSH
54610: LD_INT 5
54612: PUSH
54613: LD_INT 8
54615: PUSH
54616: LD_INT 9
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: PUSH
54624: LD_VAR 0 17
54628: ARRAY
54629: PPUSH
54630: LD_VAR 0 4
54634: PPUSH
54635: CALL_OW 380
54639: GO 54658
// PrepareHuman ( false , i , skill ) ;
54641: LD_INT 0
54643: PPUSH
54644: LD_VAR 0 8
54648: PPUSH
54649: LD_VAR 0 4
54653: PPUSH
54654: CALL_OW 380
// end else
54658: GO 54677
// PrepareHuman ( false , i , skill ) ;
54660: LD_INT 0
54662: PPUSH
54663: LD_VAR 0 8
54667: PPUSH
54668: LD_VAR 0 4
54672: PPUSH
54673: CALL_OW 380
// un := CreateHuman ;
54677: LD_ADDR_VAR 0 14
54681: PUSH
54682: CALL_OW 44
54686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54687: LD_ADDR_VAR 0 7
54691: PUSH
54692: LD_VAR 0 7
54696: PPUSH
54697: LD_INT 1
54699: PPUSH
54700: LD_VAR 0 14
54704: PPUSH
54705: CALL_OW 2
54709: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54710: LD_VAR 0 14
54714: PPUSH
54715: LD_VAR 0 9
54719: PPUSH
54720: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54724: LD_VAR 0 9
54728: PPUSH
54729: CALL_OW 313
54733: PUSH
54734: LD_INT 6
54736: EQUAL
54737: IFTRUE 54761
54739: PUSH
54740: LD_VAR 0 9
54744: PPUSH
54745: CALL_OW 266
54749: PUSH
54750: LD_INT 32
54752: PUSH
54753: LD_INT 31
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: IN
54760: OR
54761: IFFALSE 54573
54763: GO 54570
54765: POP
54766: POP
// end else
54767: GO 55153
// for j = 1 to x do
54769: LD_ADDR_VAR 0 9
54773: PUSH
54774: DOUBLE
54775: LD_INT 1
54777: DEC
54778: ST_TO_ADDR
54779: LD_VAR 0 13
54783: PUSH
54784: FOR_TO
54785: IFFALSE 55151
// begin InitHc ;
54787: CALL_OW 19
// if not f then
54791: LD_VAR 0 12
54795: NOT
54796: IFFALSE 54885
// begin PrepareHuman ( false , i , skill ) ;
54798: LD_INT 0
54800: PPUSH
54801: LD_VAR 0 8
54805: PPUSH
54806: LD_VAR 0 4
54810: PPUSH
54811: CALL_OW 380
// un := CreateHuman ;
54815: LD_ADDR_VAR 0 14
54819: PUSH
54820: CALL_OW 44
54824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54825: LD_ADDR_VAR 0 7
54829: PUSH
54830: LD_VAR 0 7
54834: PPUSH
54835: LD_INT 1
54837: PPUSH
54838: LD_VAR 0 14
54842: PPUSH
54843: CALL_OW 2
54847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54848: LD_VAR 0 14
54852: PPUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: CALL_OW 250
54862: PPUSH
54863: LD_VAR 0 1
54867: PPUSH
54868: CALL_OW 251
54872: PPUSH
54873: LD_INT 10
54875: PPUSH
54876: LD_INT 0
54878: PPUSH
54879: CALL_OW 50
// continue ;
54883: GO 54784
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54885: LD_VAR 0 12
54889: PUSH
54890: LD_INT 1
54892: ARRAY
54893: PPUSH
54894: CALL_OW 313
54898: IFFALSE 54926
54900: PUSH
54901: LD_VAR 0 12
54905: PUSH
54906: LD_INT 1
54908: ARRAY
54909: PPUSH
54910: CALL_OW 266
54914: PUSH
54915: LD_INT 32
54917: PUSH
54918: LD_INT 31
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: IN
54925: AND
54926: IFTRUE 54947
54928: PUSH
54929: LD_VAR 0 12
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: CALL_OW 313
54942: PUSH
54943: LD_INT 6
54945: EQUAL
54946: OR
54947: IFFALSE 54967
// f := Delete ( f , 1 ) ;
54949: LD_ADDR_VAR 0 12
54953: PUSH
54954: LD_VAR 0 12
54958: PPUSH
54959: LD_INT 1
54961: PPUSH
54962: CALL_OW 3
54966: ST_TO_ADDR
// if not f then
54967: LD_VAR 0 12
54971: NOT
54972: IFFALSE 54990
// begin x := x + 2 ;
54974: LD_ADDR_VAR 0 13
54978: PUSH
54979: LD_VAR 0 13
54983: PUSH
54984: LD_INT 2
54986: PLUS
54987: ST_TO_ADDR
// continue ;
54988: GO 54784
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54990: LD_VAR 0 12
54994: PUSH
54995: LD_INT 1
54997: ARRAY
54998: PPUSH
54999: CALL_OW 266
55003: PUSH
55004: LD_INT 5
55006: EQUAL
55007: IFFALSE 55081
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55009: LD_VAR 0 12
55013: PUSH
55014: LD_INT 1
55016: ARRAY
55017: PPUSH
55018: CALL_OW 313
55022: PUSH
55023: LD_INT 3
55025: LESS
55026: IFFALSE 55062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55028: LD_INT 0
55030: PPUSH
55031: LD_INT 5
55033: PUSH
55034: LD_INT 8
55036: PUSH
55037: LD_INT 9
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: PUSH
55045: LD_VAR 0 17
55049: ARRAY
55050: PPUSH
55051: LD_VAR 0 4
55055: PPUSH
55056: CALL_OW 380
55060: GO 55079
// PrepareHuman ( false , i , skill ) ;
55062: LD_INT 0
55064: PPUSH
55065: LD_VAR 0 8
55069: PPUSH
55070: LD_VAR 0 4
55074: PPUSH
55075: CALL_OW 380
// end else
55079: GO 55098
// PrepareHuman ( false , i , skill ) ;
55081: LD_INT 0
55083: PPUSH
55084: LD_VAR 0 8
55088: PPUSH
55089: LD_VAR 0 4
55093: PPUSH
55094: CALL_OW 380
// un := CreateHuman ;
55098: LD_ADDR_VAR 0 14
55102: PUSH
55103: CALL_OW 44
55107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55108: LD_ADDR_VAR 0 7
55112: PUSH
55113: LD_VAR 0 7
55117: PPUSH
55118: LD_INT 1
55120: PPUSH
55121: LD_VAR 0 14
55125: PPUSH
55126: CALL_OW 2
55130: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
55131: LD_VAR 0 14
55135: PPUSH
55136: LD_VAR 0 12
55140: PUSH
55141: LD_INT 1
55143: ARRAY
55144: PPUSH
55145: CALL_OW 52
// end ;
55149: GO 54784
55151: POP
55152: POP
// end ;
55153: GO 54084
55155: POP
55156: POP
// result := result ^ buildings ;
55157: LD_ADDR_VAR 0 7
55161: PUSH
55162: LD_VAR 0 7
55166: PUSH
55167: LD_VAR 0 18
55171: ADD
55172: ST_TO_ADDR
// end else
55173: GO 55316
// begin for i = 1 to personel do
55175: LD_ADDR_VAR 0 8
55179: PUSH
55180: DOUBLE
55181: LD_INT 1
55183: DEC
55184: ST_TO_ADDR
55185: LD_VAR 0 6
55189: PUSH
55190: FOR_TO
55191: IFFALSE 55314
// begin if i > 4 then
55193: LD_VAR 0 8
55197: PUSH
55198: LD_INT 4
55200: GREATER
55201: IFFALSE 55205
// break ;
55203: GO 55314
// x := personel [ i ] ;
55205: LD_ADDR_VAR 0 13
55209: PUSH
55210: LD_VAR 0 6
55214: PUSH
55215: LD_VAR 0 8
55219: ARRAY
55220: ST_TO_ADDR
// if x = - 1 then
55221: LD_VAR 0 13
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: EQUAL
55230: IFFALSE 55234
// continue ;
55232: GO 55190
// PrepareHuman ( false , i , skill ) ;
55234: LD_INT 0
55236: PPUSH
55237: LD_VAR 0 8
55241: PPUSH
55242: LD_VAR 0 4
55246: PPUSH
55247: CALL_OW 380
// un := CreateHuman ;
55251: LD_ADDR_VAR 0 14
55255: PUSH
55256: CALL_OW 44
55260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55261: LD_VAR 0 14
55265: PPUSH
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 250
55275: PPUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: CALL_OW 251
55285: PPUSH
55286: LD_INT 10
55288: PPUSH
55289: LD_INT 0
55291: PPUSH
55292: CALL_OW 50
// result := result ^ un ;
55296: LD_ADDR_VAR 0 7
55300: PUSH
55301: LD_VAR 0 7
55305: PUSH
55306: LD_VAR 0 14
55310: ADD
55311: ST_TO_ADDR
// end ;
55312: GO 55190
55314: POP
55315: POP
// end ; end ;
55316: LD_VAR 0 7
55320: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55321: LD_INT 0
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
55331: PPUSH
55332: PPUSH
55333: PPUSH
55334: PPUSH
55335: PPUSH
55336: PPUSH
55337: PPUSH
55338: PPUSH
// result := false ;
55339: LD_ADDR_VAR 0 3
55343: PUSH
55344: LD_INT 0
55346: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55347: LD_VAR 0 1
55351: NOT
55352: IFTRUE 55377
55354: PUSH
55355: LD_VAR 0 1
55359: PPUSH
55360: CALL_OW 266
55364: PUSH
55365: LD_INT 32
55367: PUSH
55368: LD_INT 33
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: IN
55375: NOT
55376: OR
55377: IFFALSE 55381
// exit ;
55379: GO 56516
// nat := GetNation ( tower ) ;
55381: LD_ADDR_VAR 0 12
55385: PUSH
55386: LD_VAR 0 1
55390: PPUSH
55391: CALL_OW 248
55395: ST_TO_ADDR
// side := GetSide ( tower ) ;
55396: LD_ADDR_VAR 0 16
55400: PUSH
55401: LD_VAR 0 1
55405: PPUSH
55406: CALL_OW 255
55410: ST_TO_ADDR
// x := GetX ( tower ) ;
55411: LD_ADDR_VAR 0 10
55415: PUSH
55416: LD_VAR 0 1
55420: PPUSH
55421: CALL_OW 250
55425: ST_TO_ADDR
// y := GetY ( tower ) ;
55426: LD_ADDR_VAR 0 11
55430: PUSH
55431: LD_VAR 0 1
55435: PPUSH
55436: CALL_OW 251
55440: ST_TO_ADDR
// if not x or not y then
55441: LD_VAR 0 10
55445: NOT
55446: IFTRUE 55455
55448: PUSH
55449: LD_VAR 0 11
55453: NOT
55454: OR
55455: IFFALSE 55459
// exit ;
55457: GO 56516
// weapon := 0 ;
55459: LD_ADDR_VAR 0 18
55463: PUSH
55464: LD_INT 0
55466: ST_TO_ADDR
// fac_list := [ ] ;
55467: LD_ADDR_VAR 0 17
55471: PUSH
55472: EMPTY
55473: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
55474: LD_ADDR_VAR 0 6
55478: PUSH
55479: LD_VAR 0 1
55483: PPUSH
55484: CALL_OW 274
55488: PPUSH
55489: LD_VAR 0 2
55493: PPUSH
55494: LD_INT 0
55496: PPUSH
55497: CALL 53051 0 3
55501: PPUSH
55502: LD_INT 30
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PPUSH
55512: CALL_OW 72
55516: ST_TO_ADDR
// if not factories then
55517: LD_VAR 0 6
55521: NOT
55522: IFFALSE 55526
// exit ;
55524: GO 56516
// for i in factories do
55526: LD_ADDR_VAR 0 8
55530: PUSH
55531: LD_VAR 0 6
55535: PUSH
55536: FOR_IN
55537: IFFALSE 55562
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55539: LD_ADDR_VAR 0 17
55543: PUSH
55544: LD_VAR 0 17
55548: PUSH
55549: LD_VAR 0 8
55553: PPUSH
55554: CALL_OW 478
55558: UNION
55559: ST_TO_ADDR
55560: GO 55536
55562: POP
55563: POP
// if not fac_list then
55564: LD_VAR 0 17
55568: NOT
55569: IFFALSE 55573
// exit ;
55571: GO 56516
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55573: LD_ADDR_VAR 0 5
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: LD_INT 5
55583: PUSH
55584: LD_INT 9
55586: PUSH
55587: LD_INT 10
55589: PUSH
55590: LD_INT 6
55592: PUSH
55593: LD_INT 7
55595: PUSH
55596: LD_INT 11
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 27
55610: PUSH
55611: LD_INT 28
55613: PUSH
55614: LD_INT 26
55616: PUSH
55617: LD_INT 30
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 43
55628: PUSH
55629: LD_INT 44
55631: PUSH
55632: LD_INT 46
55634: PUSH
55635: LD_INT 45
55637: PUSH
55638: LD_INT 47
55640: PUSH
55641: LD_INT 49
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: LIST
55656: PUSH
55657: LD_VAR 0 12
55661: ARRAY
55662: ST_TO_ADDR
// list := list isect fac_list ;
55663: LD_ADDR_VAR 0 5
55667: PUSH
55668: LD_VAR 0 5
55672: PUSH
55673: LD_VAR 0 17
55677: ISECT
55678: ST_TO_ADDR
// if not list then
55679: LD_VAR 0 5
55683: NOT
55684: IFFALSE 55688
// exit ;
55686: GO 56516
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55688: LD_VAR 0 12
55692: PUSH
55693: LD_INT 3
55695: EQUAL
55696: IFFALSE 55708
55698: PUSH
55699: LD_INT 49
55701: PUSH
55702: LD_VAR 0 5
55706: IN
55707: AND
55708: IFFALSE 55728
55710: PUSH
55711: LD_INT 31
55713: PPUSH
55714: LD_VAR 0 16
55718: PPUSH
55719: CALL_OW 321
55723: PUSH
55724: LD_INT 2
55726: EQUAL
55727: AND
55728: IFFALSE 55788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55730: LD_INT 22
55732: PUSH
55733: LD_VAR 0 16
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 35
55744: PUSH
55745: LD_INT 49
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 91
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 10
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: PPUSH
55773: CALL_OW 69
55777: NOT
55778: IFFALSE 55788
// weapon := ru_time_lapser ;
55780: LD_ADDR_VAR 0 18
55784: PUSH
55785: LD_INT 49
55787: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55788: LD_VAR 0 12
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: IN
55803: IFFALSE 55827
55805: PUSH
55806: LD_INT 11
55808: PUSH
55809: LD_VAR 0 5
55813: IN
55814: IFTRUE 55826
55816: PUSH
55817: LD_INT 30
55819: PUSH
55820: LD_VAR 0 5
55824: IN
55825: OR
55826: AND
55827: IFFALSE 55847
55829: PUSH
55830: LD_INT 6
55832: PPUSH
55833: LD_VAR 0 16
55837: PPUSH
55838: CALL_OW 321
55842: PUSH
55843: LD_INT 2
55845: EQUAL
55846: AND
55847: IFFALSE 56014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55849: LD_INT 22
55851: PUSH
55852: LD_VAR 0 16
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 35
55866: PUSH
55867: LD_INT 11
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 35
55876: PUSH
55877: LD_INT 30
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 91
55891: PUSH
55892: LD_VAR 0 1
55896: PUSH
55897: LD_INT 18
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: PPUSH
55910: CALL_OW 69
55914: NOT
55915: IFFALSE 55991
55917: PUSH
55918: LD_INT 22
55920: PUSH
55921: LD_VAR 0 16
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 30
55935: PUSH
55936: LD_INT 32
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 30
55945: PUSH
55946: LD_INT 33
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 91
55960: PUSH
55961: LD_VAR 0 1
55965: PUSH
55966: LD_INT 12
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: PPUSH
55982: CALL_OW 69
55986: PUSH
55987: LD_INT 2
55989: GREATER
55990: AND
55991: IFFALSE 56014
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55993: LD_ADDR_VAR 0 18
55997: PUSH
55998: LD_INT 11
56000: PUSH
56001: LD_INT 30
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_VAR 0 12
56012: ARRAY
56013: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56014: LD_VAR 0 18
56018: NOT
56019: IFFALSE 56039
56021: PUSH
56022: LD_INT 40
56024: PPUSH
56025: LD_VAR 0 16
56029: PPUSH
56030: CALL_OW 321
56034: PUSH
56035: LD_INT 2
56037: EQUAL
56038: AND
56039: IFFALSE 56075
56041: PUSH
56042: LD_INT 7
56044: PUSH
56045: LD_VAR 0 5
56049: IN
56050: IFTRUE 56062
56052: PUSH
56053: LD_INT 28
56055: PUSH
56056: LD_VAR 0 5
56060: IN
56061: OR
56062: IFTRUE 56074
56064: PUSH
56065: LD_INT 45
56067: PUSH
56068: LD_VAR 0 5
56072: IN
56073: OR
56074: AND
56075: IFFALSE 56329
// begin hex := GetHexInfo ( x , y ) ;
56077: LD_ADDR_VAR 0 4
56081: PUSH
56082: LD_VAR 0 10
56086: PPUSH
56087: LD_VAR 0 11
56091: PPUSH
56092: CALL_OW 546
56096: ST_TO_ADDR
// if hex [ 1 ] then
56097: LD_VAR 0 4
56101: PUSH
56102: LD_INT 1
56104: ARRAY
56105: IFFALSE 56109
// exit ;
56107: GO 56516
// height := hex [ 2 ] ;
56109: LD_ADDR_VAR 0 15
56113: PUSH
56114: LD_VAR 0 4
56118: PUSH
56119: LD_INT 2
56121: ARRAY
56122: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56123: LD_ADDR_VAR 0 14
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// for i in tmp do
56146: LD_ADDR_VAR 0 8
56150: PUSH
56151: LD_VAR 0 14
56155: PUSH
56156: FOR_IN
56157: IFFALSE 56327
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
56159: LD_ADDR_VAR 0 9
56163: PUSH
56164: LD_VAR 0 10
56168: PPUSH
56169: LD_VAR 0 8
56173: PPUSH
56174: LD_INT 5
56176: PPUSH
56177: CALL_OW 272
56181: PUSH
56182: LD_VAR 0 11
56186: PPUSH
56187: LD_VAR 0 8
56191: PPUSH
56192: LD_INT 5
56194: PPUSH
56195: CALL_OW 273
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56204: LD_VAR 0 9
56208: PUSH
56209: LD_INT 1
56211: ARRAY
56212: PPUSH
56213: LD_VAR 0 9
56217: PUSH
56218: LD_INT 2
56220: ARRAY
56221: PPUSH
56222: CALL_OW 488
56226: IFFALSE 56325
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
56228: LD_ADDR_VAR 0 4
56232: PUSH
56233: LD_VAR 0 9
56237: PUSH
56238: LD_INT 1
56240: ARRAY
56241: PPUSH
56242: LD_VAR 0 9
56246: PUSH
56247: LD_INT 2
56249: ARRAY
56250: PPUSH
56251: CALL_OW 546
56255: ST_TO_ADDR
// if hex [ 1 ] then
56256: LD_VAR 0 4
56260: PUSH
56261: LD_INT 1
56263: ARRAY
56264: IFFALSE 56268
// continue ;
56266: GO 56156
// h := hex [ 2 ] ;
56268: LD_ADDR_VAR 0 13
56272: PUSH
56273: LD_VAR 0 4
56277: PUSH
56278: LD_INT 2
56280: ARRAY
56281: ST_TO_ADDR
// if h + 7 < height then
56282: LD_VAR 0 13
56286: PUSH
56287: LD_INT 7
56289: PLUS
56290: PUSH
56291: LD_VAR 0 15
56295: LESS
56296: IFFALSE 56325
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56298: LD_ADDR_VAR 0 18
56302: PUSH
56303: LD_INT 7
56305: PUSH
56306: LD_INT 28
56308: PUSH
56309: LD_INT 45
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: PUSH
56317: LD_VAR 0 12
56321: ARRAY
56322: ST_TO_ADDR
// break ;
56323: GO 56327
// end ; end ; end ;
56325: GO 56156
56327: POP
56328: POP
// end ; if not weapon then
56329: LD_VAR 0 18
56333: NOT
56334: IFFALSE 56394
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56336: LD_ADDR_VAR 0 5
56340: PUSH
56341: LD_VAR 0 5
56345: PUSH
56346: LD_INT 11
56348: PUSH
56349: LD_INT 30
56351: PUSH
56352: LD_INT 49
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: DIFF
56360: ST_TO_ADDR
// if not list then
56361: LD_VAR 0 5
56365: NOT
56366: IFFALSE 56370
// exit ;
56368: GO 56516
// weapon := list [ rand ( 1 , list ) ] ;
56370: LD_ADDR_VAR 0 18
56374: PUSH
56375: LD_VAR 0 5
56379: PUSH
56380: LD_INT 1
56382: PPUSH
56383: LD_VAR 0 5
56387: PPUSH
56388: CALL_OW 12
56392: ARRAY
56393: ST_TO_ADDR
// end ; if weapon then
56394: LD_VAR 0 18
56398: IFFALSE 56516
// begin tmp := CostOfWeapon ( weapon ) ;
56400: LD_ADDR_VAR 0 14
56404: PUSH
56405: LD_VAR 0 18
56409: PPUSH
56410: CALL_OW 451
56414: ST_TO_ADDR
// j := GetBase ( tower ) ;
56415: LD_ADDR_VAR 0 9
56419: PUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 274
56429: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56430: LD_VAR 0 9
56434: PPUSH
56435: LD_INT 1
56437: PPUSH
56438: CALL_OW 275
56442: PUSH
56443: LD_VAR 0 14
56447: PUSH
56448: LD_INT 1
56450: ARRAY
56451: GREATEREQUAL
56452: IFFALSE 56478
56454: PUSH
56455: LD_VAR 0 9
56459: PPUSH
56460: LD_INT 2
56462: PPUSH
56463: CALL_OW 275
56467: PUSH
56468: LD_VAR 0 14
56472: PUSH
56473: LD_INT 2
56475: ARRAY
56476: GREATEREQUAL
56477: AND
56478: IFFALSE 56504
56480: PUSH
56481: LD_VAR 0 9
56485: PPUSH
56486: LD_INT 3
56488: PPUSH
56489: CALL_OW 275
56493: PUSH
56494: LD_VAR 0 14
56498: PUSH
56499: LD_INT 3
56501: ARRAY
56502: GREATEREQUAL
56503: AND
56504: IFFALSE 56516
// result := weapon ;
56506: LD_ADDR_VAR 0 3
56510: PUSH
56511: LD_VAR 0 18
56515: ST_TO_ADDR
// end ; end ;
56516: LD_VAR 0 3
56520: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56521: LD_INT 0
56523: PPUSH
56524: PPUSH
// result := true ;
56525: LD_ADDR_VAR 0 3
56529: PUSH
56530: LD_INT 1
56532: ST_TO_ADDR
// if array1 = array2 then
56533: LD_VAR 0 1
56537: PUSH
56538: LD_VAR 0 2
56542: EQUAL
56543: IFFALSE 56603
// begin for i = 1 to array1 do
56545: LD_ADDR_VAR 0 4
56549: PUSH
56550: DOUBLE
56551: LD_INT 1
56553: DEC
56554: ST_TO_ADDR
56555: LD_VAR 0 1
56559: PUSH
56560: FOR_TO
56561: IFFALSE 56599
// if array1 [ i ] <> array2 [ i ] then
56563: LD_VAR 0 1
56567: PUSH
56568: LD_VAR 0 4
56572: ARRAY
56573: PUSH
56574: LD_VAR 0 2
56578: PUSH
56579: LD_VAR 0 4
56583: ARRAY
56584: NONEQUAL
56585: IFFALSE 56597
// begin result := false ;
56587: LD_ADDR_VAR 0 3
56591: PUSH
56592: LD_INT 0
56594: ST_TO_ADDR
// break ;
56595: GO 56599
// end ;
56597: GO 56560
56599: POP
56600: POP
// end else
56601: GO 56611
// result := false ;
56603: LD_ADDR_VAR 0 3
56607: PUSH
56608: LD_INT 0
56610: ST_TO_ADDR
// end ;
56611: LD_VAR 0 3
56615: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
56616: LD_INT 0
56618: PPUSH
56619: PPUSH
// if not array1 or not array2 then
56620: LD_VAR 0 1
56624: NOT
56625: IFTRUE 56634
56627: PUSH
56628: LD_VAR 0 2
56632: NOT
56633: OR
56634: IFFALSE 56638
// exit ;
56636: GO 56702
// result := true ;
56638: LD_ADDR_VAR 0 3
56642: PUSH
56643: LD_INT 1
56645: ST_TO_ADDR
// for i = 1 to array1 do
56646: LD_ADDR_VAR 0 4
56650: PUSH
56651: DOUBLE
56652: LD_INT 1
56654: DEC
56655: ST_TO_ADDR
56656: LD_VAR 0 1
56660: PUSH
56661: FOR_TO
56662: IFFALSE 56700
// if array1 [ i ] <> array2 [ i ] then
56664: LD_VAR 0 1
56668: PUSH
56669: LD_VAR 0 4
56673: ARRAY
56674: PUSH
56675: LD_VAR 0 2
56679: PUSH
56680: LD_VAR 0 4
56684: ARRAY
56685: NONEQUAL
56686: IFFALSE 56698
// begin result := false ;
56688: LD_ADDR_VAR 0 3
56692: PUSH
56693: LD_INT 0
56695: ST_TO_ADDR
// break ;
56696: GO 56700
// end ;
56698: GO 56661
56700: POP
56701: POP
// end ;
56702: LD_VAR 0 3
56706: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56707: LD_INT 0
56709: PPUSH
56710: PPUSH
56711: PPUSH
// pom := GetBase ( fac ) ;
56712: LD_ADDR_VAR 0 5
56716: PUSH
56717: LD_VAR 0 1
56721: PPUSH
56722: CALL_OW 274
56726: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56727: LD_ADDR_VAR 0 4
56731: PUSH
56732: LD_VAR 0 2
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PPUSH
56741: LD_VAR 0 2
56745: PUSH
56746: LD_INT 2
56748: ARRAY
56749: PPUSH
56750: LD_VAR 0 2
56754: PUSH
56755: LD_INT 3
56757: ARRAY
56758: PPUSH
56759: LD_VAR 0 2
56763: PUSH
56764: LD_INT 4
56766: ARRAY
56767: PPUSH
56768: CALL_OW 449
56772: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56773: LD_ADDR_VAR 0 3
56777: PUSH
56778: LD_VAR 0 5
56782: PPUSH
56783: LD_INT 1
56785: PPUSH
56786: CALL_OW 275
56790: PUSH
56791: LD_VAR 0 4
56795: PUSH
56796: LD_INT 1
56798: ARRAY
56799: GREATEREQUAL
56800: IFFALSE 56826
56802: PUSH
56803: LD_VAR 0 5
56807: PPUSH
56808: LD_INT 2
56810: PPUSH
56811: CALL_OW 275
56815: PUSH
56816: LD_VAR 0 4
56820: PUSH
56821: LD_INT 2
56823: ARRAY
56824: GREATEREQUAL
56825: AND
56826: IFFALSE 56852
56828: PUSH
56829: LD_VAR 0 5
56833: PPUSH
56834: LD_INT 3
56836: PPUSH
56837: CALL_OW 275
56841: PUSH
56842: LD_VAR 0 4
56846: PUSH
56847: LD_INT 3
56849: ARRAY
56850: GREATEREQUAL
56851: AND
56852: ST_TO_ADDR
// end ;
56853: LD_VAR 0 3
56857: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56858: LD_INT 0
56860: PPUSH
56861: PPUSH
56862: PPUSH
56863: PPUSH
// pom := GetBase ( building ) ;
56864: LD_ADDR_VAR 0 3
56868: PUSH
56869: LD_VAR 0 1
56873: PPUSH
56874: CALL_OW 274
56878: ST_TO_ADDR
// if not pom then
56879: LD_VAR 0 3
56883: NOT
56884: IFFALSE 56888
// exit ;
56886: GO 57062
// btype := GetBType ( building ) ;
56888: LD_ADDR_VAR 0 5
56892: PUSH
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 266
56902: ST_TO_ADDR
// if btype = b_armoury then
56903: LD_VAR 0 5
56907: PUSH
56908: LD_INT 4
56910: EQUAL
56911: IFFALSE 56921
// btype := b_barracks ;
56913: LD_ADDR_VAR 0 5
56917: PUSH
56918: LD_INT 5
56920: ST_TO_ADDR
// if btype = b_depot then
56921: LD_VAR 0 5
56925: PUSH
56926: LD_INT 0
56928: EQUAL
56929: IFFALSE 56939
// btype := b_warehouse ;
56931: LD_ADDR_VAR 0 5
56935: PUSH
56936: LD_INT 1
56938: ST_TO_ADDR
// if btype = b_workshop then
56939: LD_VAR 0 5
56943: PUSH
56944: LD_INT 2
56946: EQUAL
56947: IFFALSE 56957
// btype := b_factory ;
56949: LD_ADDR_VAR 0 5
56953: PUSH
56954: LD_INT 3
56956: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56957: LD_ADDR_VAR 0 4
56961: PUSH
56962: LD_VAR 0 5
56966: PPUSH
56967: LD_VAR 0 1
56971: PPUSH
56972: CALL_OW 248
56976: PPUSH
56977: CALL_OW 450
56981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56982: LD_ADDR_VAR 0 2
56986: PUSH
56987: LD_VAR 0 3
56991: PPUSH
56992: LD_INT 1
56994: PPUSH
56995: CALL_OW 275
56999: PUSH
57000: LD_VAR 0 4
57004: PUSH
57005: LD_INT 1
57007: ARRAY
57008: GREATEREQUAL
57009: IFFALSE 57035
57011: PUSH
57012: LD_VAR 0 3
57016: PPUSH
57017: LD_INT 2
57019: PPUSH
57020: CALL_OW 275
57024: PUSH
57025: LD_VAR 0 4
57029: PUSH
57030: LD_INT 2
57032: ARRAY
57033: GREATEREQUAL
57034: AND
57035: IFFALSE 57061
57037: PUSH
57038: LD_VAR 0 3
57042: PPUSH
57043: LD_INT 3
57045: PPUSH
57046: CALL_OW 275
57050: PUSH
57051: LD_VAR 0 4
57055: PUSH
57056: LD_INT 3
57058: ARRAY
57059: GREATEREQUAL
57060: AND
57061: ST_TO_ADDR
// end ;
57062: LD_VAR 0 2
57066: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57067: LD_INT 0
57069: PPUSH
57070: PPUSH
57071: PPUSH
// pom := GetBase ( building ) ;
57072: LD_ADDR_VAR 0 4
57076: PUSH
57077: LD_VAR 0 1
57081: PPUSH
57082: CALL_OW 274
57086: ST_TO_ADDR
// if not pom then
57087: LD_VAR 0 4
57091: NOT
57092: IFFALSE 57096
// exit ;
57094: GO 57201
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57096: LD_ADDR_VAR 0 5
57100: PUSH
57101: LD_VAR 0 2
57105: PPUSH
57106: LD_VAR 0 1
57110: PPUSH
57111: CALL_OW 248
57115: PPUSH
57116: CALL_OW 450
57120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57121: LD_ADDR_VAR 0 3
57125: PUSH
57126: LD_VAR 0 4
57130: PPUSH
57131: LD_INT 1
57133: PPUSH
57134: CALL_OW 275
57138: PUSH
57139: LD_VAR 0 5
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: GREATEREQUAL
57148: IFFALSE 57174
57150: PUSH
57151: LD_VAR 0 4
57155: PPUSH
57156: LD_INT 2
57158: PPUSH
57159: CALL_OW 275
57163: PUSH
57164: LD_VAR 0 5
57168: PUSH
57169: LD_INT 2
57171: ARRAY
57172: GREATEREQUAL
57173: AND
57174: IFFALSE 57200
57176: PUSH
57177: LD_VAR 0 4
57181: PPUSH
57182: LD_INT 3
57184: PPUSH
57185: CALL_OW 275
57189: PUSH
57190: LD_VAR 0 5
57194: PUSH
57195: LD_INT 3
57197: ARRAY
57198: GREATEREQUAL
57199: AND
57200: ST_TO_ADDR
// end ;
57201: LD_VAR 0 3
57205: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
57206: LD_INT 0
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
57217: PPUSH
57218: PPUSH
// result := false ;
57219: LD_ADDR_VAR 0 8
57223: PUSH
57224: LD_INT 0
57226: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
57227: LD_VAR 0 5
57231: NOT
57232: IFTRUE 57241
57234: PUSH
57235: LD_VAR 0 1
57239: NOT
57240: OR
57241: IFTRUE 57250
57243: PUSH
57244: LD_VAR 0 2
57248: NOT
57249: OR
57250: IFTRUE 57259
57252: PUSH
57253: LD_VAR 0 3
57257: NOT
57258: OR
57259: IFFALSE 57263
// exit ;
57261: GO 58089
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
57263: LD_ADDR_VAR 0 14
57267: PUSH
57268: LD_VAR 0 1
57272: PPUSH
57273: LD_VAR 0 2
57277: PPUSH
57278: LD_VAR 0 3
57282: PPUSH
57283: LD_VAR 0 4
57287: PPUSH
57288: LD_VAR 0 5
57292: PUSH
57293: LD_INT 1
57295: ARRAY
57296: PPUSH
57297: CALL_OW 248
57301: PPUSH
57302: LD_INT 0
57304: PPUSH
57305: CALL 59370 0 6
57309: ST_TO_ADDR
// if not hexes then
57310: LD_VAR 0 14
57314: NOT
57315: IFFALSE 57319
// exit ;
57317: GO 58089
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57319: LD_ADDR_VAR 0 17
57323: PUSH
57324: LD_VAR 0 5
57328: PPUSH
57329: LD_INT 22
57331: PUSH
57332: LD_VAR 0 13
57336: PPUSH
57337: CALL_OW 255
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 30
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 30
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PPUSH
57378: CALL_OW 72
57382: ST_TO_ADDR
// for i = 1 to hexes do
57383: LD_ADDR_VAR 0 9
57387: PUSH
57388: DOUBLE
57389: LD_INT 1
57391: DEC
57392: ST_TO_ADDR
57393: LD_VAR 0 14
57397: PUSH
57398: FOR_TO
57399: IFFALSE 58087
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57401: LD_ADDR_VAR 0 13
57405: PUSH
57406: LD_VAR 0 14
57410: PUSH
57411: LD_VAR 0 9
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PPUSH
57421: LD_VAR 0 14
57425: PUSH
57426: LD_VAR 0 9
57430: ARRAY
57431: PUSH
57432: LD_INT 2
57434: ARRAY
57435: PPUSH
57436: CALL_OW 428
57440: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57441: LD_VAR 0 14
57445: PUSH
57446: LD_VAR 0 9
57450: ARRAY
57451: PUSH
57452: LD_INT 1
57454: ARRAY
57455: PPUSH
57456: LD_VAR 0 14
57460: PUSH
57461: LD_VAR 0 9
57465: ARRAY
57466: PUSH
57467: LD_INT 2
57469: ARRAY
57470: PPUSH
57471: CALL_OW 351
57475: IFTRUE 57514
57477: PUSH
57478: LD_VAR 0 14
57482: PUSH
57483: LD_VAR 0 9
57487: ARRAY
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PPUSH
57493: LD_VAR 0 14
57497: PUSH
57498: LD_VAR 0 9
57502: ARRAY
57503: PUSH
57504: LD_INT 2
57506: ARRAY
57507: PPUSH
57508: CALL_OW 488
57512: NOT
57513: OR
57514: IFTRUE 57531
57516: PUSH
57517: LD_VAR 0 13
57521: PPUSH
57522: CALL_OW 247
57526: PUSH
57527: LD_INT 3
57529: EQUAL
57530: OR
57531: IFFALSE 57537
// exit ;
57533: POP
57534: POP
57535: GO 58089
// if not tmp then
57537: LD_VAR 0 13
57541: NOT
57542: IFFALSE 57546
// continue ;
57544: GO 57398
// result := true ;
57546: LD_ADDR_VAR 0 8
57550: PUSH
57551: LD_INT 1
57553: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
57554: LD_VAR 0 6
57558: IFFALSE 57575
57560: PUSH
57561: LD_VAR 0 13
57565: PPUSH
57566: CALL_OW 247
57570: PUSH
57571: LD_INT 2
57573: EQUAL
57574: AND
57575: IFFALSE 57592
57577: PUSH
57578: LD_VAR 0 13
57582: PPUSH
57583: CALL_OW 263
57587: PUSH
57588: LD_INT 1
57590: EQUAL
57591: AND
57592: IFFALSE 57756
// begin if IsDrivenBy ( tmp ) then
57594: LD_VAR 0 13
57598: PPUSH
57599: CALL_OW 311
57603: IFFALSE 57607
// continue ;
57605: GO 57398
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
57607: LD_VAR 0 6
57611: PPUSH
57612: LD_INT 3
57614: PUSH
57615: LD_INT 60
57617: PUSH
57618: EMPTY
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: LD_INT 55
57630: PUSH
57631: EMPTY
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PPUSH
57642: CALL_OW 72
57646: IFFALSE 57754
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
57648: LD_ADDR_VAR 0 18
57652: PUSH
57653: LD_VAR 0 6
57657: PPUSH
57658: LD_INT 3
57660: PUSH
57661: LD_INT 60
57663: PUSH
57664: EMPTY
57665: LIST
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: LD_INT 55
57676: PUSH
57677: EMPTY
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PPUSH
57688: CALL_OW 72
57692: PUSH
57693: LD_INT 1
57695: ARRAY
57696: ST_TO_ADDR
// if IsInUnit ( driver ) then
57697: LD_VAR 0 18
57701: PPUSH
57702: CALL_OW 310
57706: IFFALSE 57717
// ComExit ( driver ) ;
57708: LD_VAR 0 18
57712: PPUSH
57713: CALL 83370 0 1
// AddComEnterUnit ( driver , tmp ) ;
57717: LD_VAR 0 18
57721: PPUSH
57722: LD_VAR 0 13
57726: PPUSH
57727: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
57731: LD_VAR 0 18
57735: PPUSH
57736: LD_VAR 0 7
57740: PPUSH
57741: CALL_OW 173
// AddComExitVehicle ( driver ) ;
57745: LD_VAR 0 18
57749: PPUSH
57750: CALL_OW 181
// end ; continue ;
57754: GO 57398
// end ; if not cleaners or not tmp in cleaners then
57756: LD_VAR 0 6
57760: NOT
57761: IFTRUE 57776
57763: PUSH
57764: LD_VAR 0 13
57768: PUSH
57769: LD_VAR 0 6
57773: IN
57774: NOT
57775: OR
57776: IFFALSE 58085
// begin if dep then
57778: LD_VAR 0 17
57782: IFFALSE 57918
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57784: LD_ADDR_VAR 0 16
57788: PUSH
57789: LD_VAR 0 17
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: PPUSH
57798: CALL_OW 250
57802: PPUSH
57803: LD_VAR 0 17
57807: PUSH
57808: LD_INT 1
57810: ARRAY
57811: PPUSH
57812: CALL_OW 254
57816: PPUSH
57817: LD_INT 5
57819: PPUSH
57820: CALL_OW 272
57824: PUSH
57825: LD_VAR 0 17
57829: PUSH
57830: LD_INT 1
57832: ARRAY
57833: PPUSH
57834: CALL_OW 251
57838: PPUSH
57839: LD_VAR 0 17
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PPUSH
57848: CALL_OW 254
57852: PPUSH
57853: LD_INT 5
57855: PPUSH
57856: CALL_OW 273
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57865: LD_VAR 0 16
57869: PUSH
57870: LD_INT 1
57872: ARRAY
57873: PPUSH
57874: LD_VAR 0 16
57878: PUSH
57879: LD_INT 2
57881: ARRAY
57882: PPUSH
57883: CALL_OW 488
57887: IFFALSE 57918
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57889: LD_VAR 0 13
57893: PPUSH
57894: LD_VAR 0 16
57898: PUSH
57899: LD_INT 1
57901: ARRAY
57902: PPUSH
57903: LD_VAR 0 16
57907: PUSH
57908: LD_INT 2
57910: ARRAY
57911: PPUSH
57912: CALL_OW 111
// continue ;
57916: GO 57398
// end ; end ; r := GetDir ( tmp ) ;
57918: LD_ADDR_VAR 0 15
57922: PUSH
57923: LD_VAR 0 13
57927: PPUSH
57928: CALL_OW 254
57932: ST_TO_ADDR
// if r = 5 then
57933: LD_VAR 0 15
57937: PUSH
57938: LD_INT 5
57940: EQUAL
57941: IFFALSE 57951
// r := 0 ;
57943: LD_ADDR_VAR 0 15
57947: PUSH
57948: LD_INT 0
57950: ST_TO_ADDR
// for j = r to 5 do
57951: LD_ADDR_VAR 0 10
57955: PUSH
57956: DOUBLE
57957: LD_VAR 0 15
57961: DEC
57962: ST_TO_ADDR
57963: LD_INT 5
57965: PUSH
57966: FOR_TO
57967: IFFALSE 58083
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57969: LD_ADDR_VAR 0 11
57973: PUSH
57974: LD_VAR 0 13
57978: PPUSH
57979: CALL_OW 250
57983: PPUSH
57984: LD_VAR 0 10
57988: PPUSH
57989: LD_INT 2
57991: PPUSH
57992: CALL_OW 272
57996: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57997: LD_ADDR_VAR 0 12
58001: PUSH
58002: LD_VAR 0 13
58006: PPUSH
58007: CALL_OW 251
58011: PPUSH
58012: LD_VAR 0 10
58016: PPUSH
58017: LD_INT 2
58019: PPUSH
58020: CALL_OW 273
58024: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58025: LD_VAR 0 11
58029: PPUSH
58030: LD_VAR 0 12
58034: PPUSH
58035: CALL_OW 488
58039: IFFALSE 58058
58041: PUSH
58042: LD_VAR 0 11
58046: PPUSH
58047: LD_VAR 0 12
58051: PPUSH
58052: CALL_OW 428
58056: NOT
58057: AND
58058: IFFALSE 58081
// begin ComMoveXY ( tmp , _x , _y ) ;
58060: LD_VAR 0 13
58064: PPUSH
58065: LD_VAR 0 11
58069: PPUSH
58070: LD_VAR 0 12
58074: PPUSH
58075: CALL_OW 111
// break ;
58079: GO 58083
// end ; end ;
58081: GO 57966
58083: POP
58084: POP
// end ; end ;
58085: GO 57398
58087: POP
58088: POP
// end ;
58089: LD_VAR 0 8
58093: RET
// export function BuildingTechInvented ( side , btype ) ; begin
58094: LD_INT 0
58096: PPUSH
// result := true ;
58097: LD_ADDR_VAR 0 3
58101: PUSH
58102: LD_INT 1
58104: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
58105: LD_VAR 0 2
58109: PUSH
58110: LD_INT 24
58112: DOUBLE
58113: EQUAL
58114: IFTRUE 58124
58116: LD_INT 33
58118: DOUBLE
58119: EQUAL
58120: IFTRUE 58124
58122: GO 58149
58124: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
58125: LD_ADDR_VAR 0 3
58129: PUSH
58130: LD_INT 32
58132: PPUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 321
58142: PUSH
58143: LD_INT 2
58145: EQUAL
58146: ST_TO_ADDR
58147: GO 58465
58149: LD_INT 20
58151: DOUBLE
58152: EQUAL
58153: IFTRUE 58157
58155: GO 58182
58157: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
58158: LD_ADDR_VAR 0 3
58162: PUSH
58163: LD_INT 6
58165: PPUSH
58166: LD_VAR 0 1
58170: PPUSH
58171: CALL_OW 321
58175: PUSH
58176: LD_INT 2
58178: EQUAL
58179: ST_TO_ADDR
58180: GO 58465
58182: LD_INT 22
58184: DOUBLE
58185: EQUAL
58186: IFTRUE 58196
58188: LD_INT 36
58190: DOUBLE
58191: EQUAL
58192: IFTRUE 58196
58194: GO 58221
58196: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
58197: LD_ADDR_VAR 0 3
58201: PUSH
58202: LD_INT 15
58204: PPUSH
58205: LD_VAR 0 1
58209: PPUSH
58210: CALL_OW 321
58214: PUSH
58215: LD_INT 2
58217: EQUAL
58218: ST_TO_ADDR
58219: GO 58465
58221: LD_INT 30
58223: DOUBLE
58224: EQUAL
58225: IFTRUE 58229
58227: GO 58254
58229: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
58230: LD_ADDR_VAR 0 3
58234: PUSH
58235: LD_INT 20
58237: PPUSH
58238: LD_VAR 0 1
58242: PPUSH
58243: CALL_OW 321
58247: PUSH
58248: LD_INT 2
58250: EQUAL
58251: ST_TO_ADDR
58252: GO 58465
58254: LD_INT 28
58256: DOUBLE
58257: EQUAL
58258: IFTRUE 58268
58260: LD_INT 21
58262: DOUBLE
58263: EQUAL
58264: IFTRUE 58268
58266: GO 58293
58268: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: LD_INT 21
58276: PPUSH
58277: LD_VAR 0 1
58281: PPUSH
58282: CALL_OW 321
58286: PUSH
58287: LD_INT 2
58289: EQUAL
58290: ST_TO_ADDR
58291: GO 58465
58293: LD_INT 16
58295: DOUBLE
58296: EQUAL
58297: IFTRUE 58301
58299: GO 58326
58301: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
58302: LD_ADDR_VAR 0 3
58306: PUSH
58307: LD_INT 84
58309: PPUSH
58310: LD_VAR 0 1
58314: PPUSH
58315: CALL_OW 321
58319: PUSH
58320: LD_INT 2
58322: EQUAL
58323: ST_TO_ADDR
58324: GO 58465
58326: LD_INT 19
58328: DOUBLE
58329: EQUAL
58330: IFTRUE 58340
58332: LD_INT 23
58334: DOUBLE
58335: EQUAL
58336: IFTRUE 58340
58338: GO 58365
58340: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
58341: LD_ADDR_VAR 0 3
58345: PUSH
58346: LD_INT 83
58348: PPUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 321
58358: PUSH
58359: LD_INT 2
58361: EQUAL
58362: ST_TO_ADDR
58363: GO 58465
58365: LD_INT 17
58367: DOUBLE
58368: EQUAL
58369: IFTRUE 58373
58371: GO 58398
58373: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
58374: LD_ADDR_VAR 0 3
58378: PUSH
58379: LD_INT 39
58381: PPUSH
58382: LD_VAR 0 1
58386: PPUSH
58387: CALL_OW 321
58391: PUSH
58392: LD_INT 2
58394: EQUAL
58395: ST_TO_ADDR
58396: GO 58465
58398: LD_INT 18
58400: DOUBLE
58401: EQUAL
58402: IFTRUE 58406
58404: GO 58431
58406: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
58407: LD_ADDR_VAR 0 3
58411: PUSH
58412: LD_INT 40
58414: PPUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: CALL_OW 321
58424: PUSH
58425: LD_INT 2
58427: EQUAL
58428: ST_TO_ADDR
58429: GO 58465
58431: LD_INT 27
58433: DOUBLE
58434: EQUAL
58435: IFTRUE 58439
58437: GO 58464
58439: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
58440: LD_ADDR_VAR 0 3
58444: PUSH
58445: LD_INT 35
58447: PPUSH
58448: LD_VAR 0 1
58452: PPUSH
58453: CALL_OW 321
58457: PUSH
58458: LD_INT 2
58460: EQUAL
58461: ST_TO_ADDR
58462: GO 58465
58464: POP
// end ;
58465: LD_VAR 0 3
58469: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
58470: LD_INT 0
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
58476: PPUSH
58477: PPUSH
58478: PPUSH
58479: PPUSH
58480: PPUSH
58481: PPUSH
58482: PPUSH
// result := false ;
58483: LD_ADDR_VAR 0 6
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// if btype = b_depot then
58491: LD_VAR 0 2
58495: PUSH
58496: LD_INT 0
58498: EQUAL
58499: IFFALSE 58511
// begin result := true ;
58501: LD_ADDR_VAR 0 6
58505: PUSH
58506: LD_INT 1
58508: ST_TO_ADDR
// exit ;
58509: GO 59365
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58511: LD_VAR 0 1
58515: NOT
58516: IFTRUE 58541
58518: PUSH
58519: LD_VAR 0 1
58523: PPUSH
58524: CALL_OW 266
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: IN
58539: NOT
58540: OR
58541: IFTRUE 58550
58543: PUSH
58544: LD_VAR 0 2
58548: NOT
58549: OR
58550: IFTRUE 58586
58552: PUSH
58553: LD_VAR 0 5
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: LD_INT 5
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: IN
58584: NOT
58585: OR
58586: IFTRUE 58605
58588: PUSH
58589: LD_VAR 0 3
58593: PPUSH
58594: LD_VAR 0 4
58598: PPUSH
58599: CALL_OW 488
58603: NOT
58604: OR
58605: IFFALSE 58609
// exit ;
58607: GO 59365
// side := GetSide ( depot ) ;
58609: LD_ADDR_VAR 0 9
58613: PUSH
58614: LD_VAR 0 1
58618: PPUSH
58619: CALL_OW 255
58623: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
58624: LD_VAR 0 9
58628: PPUSH
58629: LD_VAR 0 2
58633: PPUSH
58634: CALL 58094 0 2
58638: NOT
58639: IFFALSE 58643
// exit ;
58641: GO 59365
// pom := GetBase ( depot ) ;
58643: LD_ADDR_VAR 0 10
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 274
58657: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58658: LD_ADDR_VAR 0 11
58662: PUSH
58663: LD_VAR 0 2
58667: PPUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL_OW 248
58677: PPUSH
58678: CALL_OW 450
58682: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58683: LD_VAR 0 10
58687: PPUSH
58688: LD_INT 1
58690: PPUSH
58691: CALL_OW 275
58695: PUSH
58696: LD_VAR 0 11
58700: PUSH
58701: LD_INT 1
58703: ARRAY
58704: GREATEREQUAL
58705: IFFALSE 58731
58707: PUSH
58708: LD_VAR 0 10
58712: PPUSH
58713: LD_INT 2
58715: PPUSH
58716: CALL_OW 275
58720: PUSH
58721: LD_VAR 0 11
58725: PUSH
58726: LD_INT 2
58728: ARRAY
58729: GREATEREQUAL
58730: AND
58731: IFFALSE 58757
58733: PUSH
58734: LD_VAR 0 10
58738: PPUSH
58739: LD_INT 3
58741: PPUSH
58742: CALL_OW 275
58746: PUSH
58747: LD_VAR 0 11
58751: PUSH
58752: LD_INT 3
58754: ARRAY
58755: GREATEREQUAL
58756: AND
58757: NOT
58758: IFFALSE 58762
// exit ;
58760: GO 59365
// if GetBType ( depot ) = b_depot then
58762: LD_VAR 0 1
58766: PPUSH
58767: CALL_OW 266
58771: PUSH
58772: LD_INT 0
58774: EQUAL
58775: IFFALSE 58787
// dist := 28 else
58777: LD_ADDR_VAR 0 14
58781: PUSH
58782: LD_INT 28
58784: ST_TO_ADDR
58785: GO 58795
// dist := 36 ;
58787: LD_ADDR_VAR 0 14
58791: PUSH
58792: LD_INT 36
58794: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
58795: LD_VAR 0 1
58799: PPUSH
58800: LD_VAR 0 3
58804: PPUSH
58805: LD_VAR 0 4
58809: PPUSH
58810: CALL_OW 297
58814: PUSH
58815: LD_VAR 0 14
58819: GREATER
58820: IFFALSE 58824
// exit ;
58822: GO 59365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
58824: LD_ADDR_VAR 0 12
58828: PUSH
58829: LD_VAR 0 2
58833: PPUSH
58834: LD_VAR 0 3
58838: PPUSH
58839: LD_VAR 0 4
58843: PPUSH
58844: LD_VAR 0 5
58848: PPUSH
58849: LD_VAR 0 1
58853: PPUSH
58854: CALL_OW 248
58858: PPUSH
58859: LD_INT 0
58861: PPUSH
58862: CALL 59370 0 6
58866: ST_TO_ADDR
// if not hexes then
58867: LD_VAR 0 12
58871: NOT
58872: IFFALSE 58876
// exit ;
58874: GO 59365
// hex := GetHexInfo ( x , y ) ;
58876: LD_ADDR_VAR 0 15
58880: PUSH
58881: LD_VAR 0 3
58885: PPUSH
58886: LD_VAR 0 4
58890: PPUSH
58891: CALL_OW 546
58895: ST_TO_ADDR
// if hex [ 1 ] then
58896: LD_VAR 0 15
58900: PUSH
58901: LD_INT 1
58903: ARRAY
58904: IFFALSE 58908
// exit ;
58906: GO 59365
// height := hex [ 2 ] ;
58908: LD_ADDR_VAR 0 13
58912: PUSH
58913: LD_VAR 0 15
58917: PUSH
58918: LD_INT 2
58920: ARRAY
58921: ST_TO_ADDR
// for i = 1 to hexes do
58922: LD_ADDR_VAR 0 7
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_VAR 0 12
58936: PUSH
58937: FOR_TO
58938: IFFALSE 59282
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58940: LD_VAR 0 12
58944: PUSH
58945: LD_VAR 0 7
58949: ARRAY
58950: PUSH
58951: LD_INT 1
58953: ARRAY
58954: PPUSH
58955: LD_VAR 0 12
58959: PUSH
58960: LD_VAR 0 7
58964: ARRAY
58965: PUSH
58966: LD_INT 2
58968: ARRAY
58969: PPUSH
58970: CALL_OW 488
58974: NOT
58975: IFTRUE 59017
58977: PUSH
58978: LD_VAR 0 12
58982: PUSH
58983: LD_VAR 0 7
58987: ARRAY
58988: PUSH
58989: LD_INT 1
58991: ARRAY
58992: PPUSH
58993: LD_VAR 0 12
58997: PUSH
58998: LD_VAR 0 7
59002: ARRAY
59003: PUSH
59004: LD_INT 2
59006: ARRAY
59007: PPUSH
59008: CALL_OW 428
59012: PUSH
59013: LD_INT 0
59015: GREATER
59016: OR
59017: IFTRUE 59055
59019: PUSH
59020: LD_VAR 0 12
59024: PUSH
59025: LD_VAR 0 7
59029: ARRAY
59030: PUSH
59031: LD_INT 1
59033: ARRAY
59034: PPUSH
59035: LD_VAR 0 12
59039: PUSH
59040: LD_VAR 0 7
59044: ARRAY
59045: PUSH
59046: LD_INT 2
59048: ARRAY
59049: PPUSH
59050: CALL_OW 351
59054: OR
59055: IFFALSE 59061
// exit ;
59057: POP
59058: POP
59059: GO 59365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59061: LD_ADDR_VAR 0 8
59065: PUSH
59066: LD_VAR 0 12
59070: PUSH
59071: LD_VAR 0 7
59075: ARRAY
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PPUSH
59081: LD_VAR 0 12
59085: PUSH
59086: LD_VAR 0 7
59090: ARRAY
59091: PUSH
59092: LD_INT 2
59094: ARRAY
59095: PPUSH
59096: CALL_OW 546
59100: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59101: LD_VAR 0 8
59105: PUSH
59106: LD_INT 1
59108: ARRAY
59109: IFTRUE 59131
59111: PUSH
59112: LD_VAR 0 8
59116: PUSH
59117: LD_INT 2
59119: ARRAY
59120: PUSH
59121: LD_VAR 0 13
59125: PUSH
59126: LD_INT 2
59128: PLUS
59129: GREATER
59130: OR
59131: IFTRUE 59153
59133: PUSH
59134: LD_VAR 0 8
59138: PUSH
59139: LD_INT 2
59141: ARRAY
59142: PUSH
59143: LD_VAR 0 13
59147: PUSH
59148: LD_INT 2
59150: MINUS
59151: LESS
59152: OR
59153: IFTRUE 59221
59155: PUSH
59156: LD_VAR 0 8
59160: PUSH
59161: LD_INT 3
59163: ARRAY
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 8
59170: PUSH
59171: LD_INT 9
59173: PUSH
59174: LD_INT 10
59176: PUSH
59177: LD_INT 11
59179: PUSH
59180: LD_INT 12
59182: PUSH
59183: LD_INT 13
59185: PUSH
59186: LD_INT 16
59188: PUSH
59189: LD_INT 17
59191: PUSH
59192: LD_INT 18
59194: PUSH
59195: LD_INT 19
59197: PUSH
59198: LD_INT 20
59200: PUSH
59201: LD_INT 21
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: IN
59219: NOT
59220: OR
59221: IFTRUE 59234
59223: PUSH
59224: LD_VAR 0 8
59228: PUSH
59229: LD_INT 5
59231: ARRAY
59232: NOT
59233: OR
59234: IFTRUE 59274
59236: PUSH
59237: LD_VAR 0 8
59241: PUSH
59242: LD_INT 6
59244: ARRAY
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: LD_INT 7
59254: PUSH
59255: LD_INT 9
59257: PUSH
59258: LD_INT 10
59260: PUSH
59261: LD_INT 11
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: IN
59272: NOT
59273: OR
59274: IFFALSE 59280
// exit ;
59276: POP
59277: POP
59278: GO 59365
// end ;
59280: GO 58937
59282: POP
59283: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59284: LD_VAR 0 9
59288: PPUSH
59289: LD_VAR 0 3
59293: PPUSH
59294: LD_VAR 0 4
59298: PPUSH
59299: LD_INT 20
59301: PPUSH
59302: CALL 51184 0 4
59306: PUSH
59307: LD_INT 4
59309: ARRAY
59310: IFFALSE 59314
// exit ;
59312: GO 59365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 29
59321: PUSH
59322: LD_INT 30
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: IN
59329: IFFALSE 59353
59331: PUSH
59332: LD_VAR 0 3
59336: PPUSH
59337: LD_VAR 0 4
59341: PPUSH
59342: LD_VAR 0 9
59346: PPUSH
59347: CALL_OW 440
59351: NOT
59352: AND
59353: IFFALSE 59357
// exit ;
59355: GO 59365
// result := true ;
59357: LD_ADDR_VAR 0 6
59361: PUSH
59362: LD_INT 1
59364: ST_TO_ADDR
// end ;
59365: LD_VAR 0 6
59369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
59370: LD_INT 0
59372: PPUSH
59373: PPUSH
59374: PPUSH
59375: PPUSH
59376: PPUSH
59377: PPUSH
59378: PPUSH
59379: PPUSH
59380: PPUSH
59381: PPUSH
59382: PPUSH
59383: PPUSH
59384: PPUSH
59385: PPUSH
59386: PPUSH
59387: PPUSH
59388: PPUSH
59389: PPUSH
59390: PPUSH
59391: PPUSH
59392: PPUSH
59393: PPUSH
59394: PPUSH
59395: PPUSH
59396: PPUSH
59397: PPUSH
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
59408: PPUSH
59409: PPUSH
59410: PPUSH
59411: PPUSH
59412: PPUSH
59413: PPUSH
59414: PPUSH
59415: PPUSH
59416: PPUSH
59417: PPUSH
59418: PPUSH
59419: PPUSH
59420: PPUSH
59421: PPUSH
59422: PPUSH
59423: PPUSH
59424: PPUSH
59425: PPUSH
59426: PPUSH
59427: PPUSH
59428: PPUSH
59429: PPUSH
// result = [ ] ;
59430: LD_ADDR_VAR 0 7
59434: PUSH
59435: EMPTY
59436: ST_TO_ADDR
// temp_list = [ ] ;
59437: LD_ADDR_VAR 0 9
59441: PUSH
59442: EMPTY
59443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59444: LD_VAR 0 4
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: LD_INT 4
59463: PUSH
59464: LD_INT 5
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: IN
59475: NOT
59476: IFTRUE 59519
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: IN
59494: IFFALSE 59518
59496: PUSH
59497: LD_VAR 0 5
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: IN
59516: NOT
59517: AND
59518: OR
59519: IFFALSE 59523
// exit ;
59521: GO 77922
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59523: LD_VAR 0 1
59527: PUSH
59528: LD_INT 6
59530: PUSH
59531: LD_INT 7
59533: PUSH
59534: LD_INT 8
59536: PUSH
59537: LD_INT 13
59539: PUSH
59540: LD_INT 12
59542: PUSH
59543: LD_INT 15
59545: PUSH
59546: LD_INT 11
59548: PUSH
59549: LD_INT 14
59551: PUSH
59552: LD_INT 10
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: IN
59566: IFFALSE 59576
// btype = b_lab ;
59568: LD_ADDR_VAR 0 1
59572: PUSH
59573: LD_INT 6
59575: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59576: LD_VAR 0 6
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: IN
59595: NOT
59596: IFTRUE 59664
59598: PUSH
59599: LD_VAR 0 1
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 6
59618: PUSH
59619: LD_INT 36
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: LD_INT 5
59627: PUSH
59628: LD_INT 31
59630: PUSH
59631: LD_INT 32
59633: PUSH
59634: LD_INT 33
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: IN
59650: NOT
59651: IFFALSE 59663
59653: PUSH
59654: LD_VAR 0 6
59658: PUSH
59659: LD_INT 1
59661: EQUAL
59662: AND
59663: OR
59664: IFTRUE 59696
59666: PUSH
59667: LD_VAR 0 1
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: IN
59682: NOT
59683: IFFALSE 59695
59685: PUSH
59686: LD_VAR 0 6
59690: PUSH
59691: LD_INT 2
59693: EQUAL
59694: AND
59695: OR
59696: IFFALSE 59706
// mode = 0 ;
59698: LD_ADDR_VAR 0 6
59702: PUSH
59703: LD_INT 0
59705: ST_TO_ADDR
// case mode of 0 :
59706: LD_VAR 0 6
59710: PUSH
59711: LD_INT 0
59713: DOUBLE
59714: EQUAL
59715: IFTRUE 59719
59717: GO 71172
59719: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59720: LD_ADDR_VAR 0 11
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59913: LD_ADDR_VAR 0 12
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60109: LD_ADDR_VAR 0 13
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: LD_INT 3
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60308: LD_ADDR_VAR 0 14
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60504: LD_ADDR_VAR 0 15
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60697: LD_ADDR_VAR 0 16
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60890: LD_ADDR_VAR 0 17
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61120: LD_ADDR_VAR 0 18
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61350: LD_ADDR_VAR 0 19
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61580: LD_ADDR_VAR 0 20
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61810: LD_ADDR_VAR 0 21
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62040: LD_ADDR_VAR 0 22
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: NEG
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62270: LD_ADDR_VAR 0 23
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 3
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 3
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62550: LD_ADDR_VAR 0 24
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62826: LD_ADDR_VAR 0 25
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 3
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 3
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 3
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63100: LD_ADDR_VAR 0 26
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: LD_INT 2
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63376: LD_ADDR_VAR 0 27
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: LD_INT 2
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 3
63609: NEG
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 2
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63656: LD_ADDR_VAR 0 28
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: LD_INT 3
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 2
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63938: LD_ADDR_VAR 0 29
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: LD_INT 3
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: NEG
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64217: LD_ADDR_VAR 0 30
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64495: LD_ADDR_VAR 0 31
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: LD_INT 2
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64773: LD_ADDR_VAR 0 32
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65051: LD_ADDR_VAR 0 33
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: LD_INT 1
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 3
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65330: LD_ADDR_VAR 0 34
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 2
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: LD_INT 1
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 2
65509: NEG
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: LD_INT 2
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65610: LD_ADDR_VAR 0 35
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65722: LD_ADDR_VAR 0 36
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65834: LD_ADDR_VAR 0 37
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65946: LD_ADDR_VAR 0 38
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66058: LD_ADDR_VAR 0 39
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: NEG
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66170: LD_ADDR_VAR 0 40
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66282: LD_ADDR_VAR 0 41
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: LD_INT 1
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 2
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: LD_INT 3
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: LD_INT 3
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: LD_INT 3
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66632: LD_ADDR_VAR 0 42
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 1
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: LD_INT 2
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: LD_INT 2
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 3
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: LD_INT 2
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: LD_INT 3
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66982: LD_ADDR_VAR 0 43
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 2
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 3
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 3
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67330: LD_ADDR_VAR 0 44
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 3
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 2
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67680: LD_ADDR_VAR 0 45
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: LD_INT 1
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 1
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: NEG
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 2
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 1
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 2
67858: NEG
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 2
67870: NEG
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 0
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: LD_INT 2
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 1
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68030: LD_ADDR_VAR 0 46
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 1
68088: NEG
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: LD_INT 3
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 3
68326: NEG
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68378: LD_ADDR_VAR 0 47
68382: PUSH
68383: LD_INT 0
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 1
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: NEG
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 2
68493: NEG
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 2
68505: NEG
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68529: LD_ADDR_VAR 0 48
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: LD_INT 0
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: LD_INT 1
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 2
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: PUSH
68655: LD_INT 1
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68676: LD_ADDR_VAR 0 49
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: PUSH
68789: LD_INT 2
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: LD_INT 2
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68820: LD_ADDR_VAR 0 50
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 1
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 1
68878: NEG
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: LD_INT 2
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: LD_INT 2
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: LD_INT 1
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68964: LD_ADDR_VAR 0 51
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 1
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: LD_INT 2
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69111: LD_ADDR_VAR 0 52
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 1
69149: PUSH
69150: LD_INT 1
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 1
69169: NEG
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: NEG
69205: PUSH
69206: LD_INT 1
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 2
69215: NEG
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 2
69226: NEG
69227: PUSH
69228: LD_INT 1
69230: NEG
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 2
69238: NEG
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69262: LD_ADDR_VAR 0 53
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: NEG
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: LD_INT 0
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 2
69397: PUSH
69398: LD_INT 2
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 1
69427: NEG
69428: PUSH
69429: LD_INT 1
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: NEG
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: NEG
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 2
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69492: LD_ADDR_VAR 0 54
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 2
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 2
69691: NEG
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69722: LD_ADDR_VAR 0 55
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 1
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 1
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 0
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: NEG
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: LD_INT 1
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: LD_INT 1
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: LD_INT 2
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: NEG
69888: PUSH
69889: LD_INT 1
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: NEG
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: LD_INT 1
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 2
69921: NEG
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69952: LD_ADDR_VAR 0 56
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 1
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 1
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: LD_INT 1
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 2
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: LD_INT 2
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: NEG
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: LD_INT 1
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 2
70151: NEG
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70182: LD_ADDR_VAR 0 57
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: LD_INT 0
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 1
70263: NEG
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 1
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 2
70317: PUSH
70318: LD_INT 2
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: PUSH
70328: LD_INT 2
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: LD_INT 2
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 2
70358: NEG
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: LD_INT 1
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: NEG
70382: PUSH
70383: LD_INT 2
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70412: LD_ADDR_VAR 0 58
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 1
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: LD_INT 2
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: LD_INT 1
70519: NEG
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 2
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: LD_INT 1
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 2
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: LD_INT 2
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: NEG
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 2
70599: NEG
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 2
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70642: LD_ADDR_VAR 0 59
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: LD_INT 1
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: PUSH
70681: LD_INT 1
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: LD_INT 1
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70730: LD_ADDR_VAR 0 60
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 0
70747: PUSH
70748: LD_INT 1
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 1
70799: NEG
70800: PUSH
70801: LD_INT 1
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70818: LD_ADDR_VAR 0 61
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: LD_INT 1
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: LD_INT 0
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: LD_INT 1
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70906: LD_ADDR_VAR 0 62
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: LD_INT 1
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 1
70975: NEG
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70994: LD_ADDR_VAR 0 63
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: LD_INT 1
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 1
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 0
71042: PUSH
71043: LD_INT 1
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 1
71052: NEG
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: LD_INT 1
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71082: LD_ADDR_VAR 0 64
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: PUSH
71111: LD_INT 0
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: LD_INT 1
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: LD_INT 1
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 1
71140: NEG
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: LD_INT 1
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: ST_TO_ADDR
// end ; 1 :
71170: GO 77067
71172: LD_INT 1
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71180
71178: GO 73803
71180: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71181: LD_ADDR_VAR 0 11
71185: PUSH
71186: LD_INT 1
71188: NEG
71189: PUSH
71190: LD_INT 3
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 0
71200: PUSH
71201: LD_INT 3
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: LD_INT 2
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71225: LD_ADDR_VAR 0 12
71229: PUSH
71230: LD_INT 2
71232: PUSH
71233: LD_INT 1
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 3
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 3
71253: PUSH
71254: LD_INT 1
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: LIST
71265: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71266: LD_ADDR_VAR 0 13
71270: PUSH
71271: LD_INT 3
71273: PUSH
71274: LD_INT 2
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 3
71283: PUSH
71284: LD_INT 3
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 2
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: LIST
71305: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71306: LD_ADDR_VAR 0 14
71310: PUSH
71311: LD_INT 1
71313: PUSH
71314: LD_INT 3
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: LD_INT 3
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71347: LD_ADDR_VAR 0 15
71351: PUSH
71352: LD_INT 2
71354: NEG
71355: PUSH
71356: LD_INT 1
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 3
71365: NEG
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 3
71376: NEG
71377: PUSH
71378: LD_INT 1
71380: NEG
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: LIST
71390: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71391: LD_ADDR_VAR 0 16
71395: PUSH
71396: LD_INT 2
71398: NEG
71399: PUSH
71400: LD_INT 3
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: NEG
71411: PUSH
71412: LD_INT 2
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 3
71422: NEG
71423: PUSH
71424: LD_INT 3
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71437: LD_ADDR_VAR 0 17
71441: PUSH
71442: LD_INT 1
71444: NEG
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 3
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 1
71467: PUSH
71468: LD_INT 2
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71481: LD_ADDR_VAR 0 18
71485: PUSH
71486: LD_INT 2
71488: PUSH
71489: LD_INT 1
71491: NEG
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 3
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 3
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71522: LD_ADDR_VAR 0 19
71526: PUSH
71527: LD_INT 3
71529: PUSH
71530: LD_INT 2
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 3
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 2
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: LIST
71561: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71562: LD_ADDR_VAR 0 20
71566: PUSH
71567: LD_INT 1
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: PUSH
71591: LD_INT 2
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71603: LD_ADDR_VAR 0 21
71607: PUSH
71608: LD_INT 2
71610: NEG
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 3
71621: NEG
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: LD_INT 1
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: LIST
71646: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71647: LD_ADDR_VAR 0 22
71651: PUSH
71652: LD_INT 2
71654: NEG
71655: PUSH
71656: LD_INT 3
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 3
71666: NEG
71667: PUSH
71668: LD_INT 2
71670: NEG
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 3
71678: NEG
71679: PUSH
71680: LD_INT 3
71682: NEG
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: LIST
71692: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71693: LD_ADDR_VAR 0 23
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: LD_INT 4
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 1
71723: PUSH
71724: LD_INT 3
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: LIST
71736: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71737: LD_ADDR_VAR 0 24
71741: PUSH
71742: LD_INT 3
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 4
71765: PUSH
71766: LD_INT 1
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: LIST
71777: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71778: LD_ADDR_VAR 0 25
71782: PUSH
71783: LD_INT 3
71785: PUSH
71786: LD_INT 3
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 4
71795: PUSH
71796: LD_INT 3
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 3
71805: PUSH
71806: LD_INT 4
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: LIST
71817: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71818: LD_ADDR_VAR 0 26
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: LD_INT 3
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 1
71835: PUSH
71836: LD_INT 4
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 1
71845: NEG
71846: PUSH
71847: LD_INT 3
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71859: LD_ADDR_VAR 0 27
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: LIST
71902: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71903: LD_ADDR_VAR 0 28
71907: PUSH
71908: LD_INT 3
71910: NEG
71911: PUSH
71912: LD_INT 3
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: NEG
71923: PUSH
71924: LD_INT 4
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 4
71934: NEG
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: LIST
71948: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71949: LD_ADDR_VAR 0 29
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: LD_INT 3
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: PUSH
71980: LD_INT 2
71982: NEG
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 1
71990: NEG
71991: PUSH
71992: LD_INT 4
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 4
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 3
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 1
72024: NEG
72025: PUSH
72026: LD_INT 5
72028: NEG
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 0
72036: PUSH
72037: LD_INT 5
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 1
72047: PUSH
72048: LD_INT 4
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: LD_INT 6
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: LD_INT 6
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: LD_INT 5
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72104: LD_ADDR_VAR 0 30
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: LD_INT 1
72114: NEG
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 3
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 3
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 3
72142: PUSH
72143: LD_INT 1
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 4
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 4
72163: PUSH
72164: LD_INT 1
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 4
72173: PUSH
72174: LD_INT 1
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 5
72194: PUSH
72195: LD_INT 1
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 5
72204: PUSH
72205: LD_INT 1
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 6
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 6
72225: PUSH
72226: LD_INT 1
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72247: LD_ADDR_VAR 0 31
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 3
72264: PUSH
72265: LD_INT 3
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 2
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 4
72284: PUSH
72285: LD_INT 3
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 4
72294: PUSH
72295: LD_INT 4
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: LD_INT 4
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 5
72314: PUSH
72315: LD_INT 4
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 5
72324: PUSH
72325: LD_INT 5
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 4
72334: PUSH
72335: LD_INT 5
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 6
72344: PUSH
72345: LD_INT 5
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_INT 6
72354: PUSH
72355: LD_INT 6
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 5
72364: PUSH
72365: LD_INT 6
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72386: LD_ADDR_VAR 0 32
72390: PUSH
72391: LD_INT 1
72393: PUSH
72394: LD_INT 3
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: LD_INT 3
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 1
72413: NEG
72414: PUSH
72415: LD_INT 2
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: LD_INT 4
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: LD_INT 4
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: NEG
72445: PUSH
72446: LD_INT 3
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: PUSH
72456: LD_INT 5
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: LD_INT 5
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 1
72475: NEG
72476: PUSH
72477: LD_INT 4
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 1
72486: PUSH
72487: LD_INT 6
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: LD_INT 6
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 1
72506: NEG
72507: PUSH
72508: LD_INT 5
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72529: LD_ADDR_VAR 0 33
72533: PUSH
72534: LD_INT 2
72536: NEG
72537: PUSH
72538: LD_INT 1
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 3
72547: NEG
72548: PUSH
72549: LD_INT 0
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 3
72558: NEG
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: NEG
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 4
72581: NEG
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 4
72592: NEG
72593: PUSH
72594: LD_INT 1
72596: NEG
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 4
72604: NEG
72605: PUSH
72606: LD_INT 1
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 5
72615: NEG
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 5
72626: NEG
72627: PUSH
72628: LD_INT 1
72630: NEG
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 5
72638: NEG
72639: PUSH
72640: LD_INT 1
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 6
72649: NEG
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 6
72660: NEG
72661: PUSH
72662: LD_INT 1
72664: NEG
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72684: LD_ADDR_VAR 0 34
72688: PUSH
72689: LD_INT 2
72691: NEG
72692: PUSH
72693: LD_INT 3
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 3
72703: NEG
72704: PUSH
72705: LD_INT 2
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 3
72715: NEG
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 3
72727: NEG
72728: PUSH
72729: LD_INT 4
72731: NEG
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 4
72739: NEG
72740: PUSH
72741: LD_INT 3
72743: NEG
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 4
72751: NEG
72752: PUSH
72753: LD_INT 4
72755: NEG
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 4
72763: NEG
72764: PUSH
72765: LD_INT 5
72767: NEG
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 5
72775: NEG
72776: PUSH
72777: LD_INT 4
72779: NEG
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 5
72787: NEG
72788: PUSH
72789: LD_INT 5
72791: NEG
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 5
72799: NEG
72800: PUSH
72801: LD_INT 6
72803: NEG
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 6
72811: NEG
72812: PUSH
72813: LD_INT 5
72815: NEG
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 6
72823: NEG
72824: PUSH
72825: LD_INT 6
72827: NEG
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72847: LD_ADDR_VAR 0 41
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: LD_INT 2
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72891: LD_ADDR_VAR 0 42
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 2
72908: PUSH
72909: LD_INT 1
72911: NEG
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 3
72919: PUSH
72920: LD_INT 1
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: LIST
72931: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72932: LD_ADDR_VAR 0 43
72936: PUSH
72937: LD_INT 2
72939: PUSH
72940: LD_INT 2
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 3
72949: PUSH
72950: LD_INT 2
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 2
72959: PUSH
72960: LD_INT 3
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: LIST
72971: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72972: LD_ADDR_VAR 0 44
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: LD_INT 2
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 1
72989: PUSH
72990: LD_INT 3
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 1
72999: NEG
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: LIST
73012: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73013: LD_ADDR_VAR 0 45
73017: PUSH
73018: LD_INT 2
73020: NEG
73021: PUSH
73022: LD_INT 0
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 2
73031: NEG
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 3
73042: NEG
73043: PUSH
73044: LD_INT 1
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: LIST
73056: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73057: LD_ADDR_VAR 0 46
73061: PUSH
73062: LD_INT 2
73064: NEG
73065: PUSH
73066: LD_INT 2
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 2
73076: NEG
73077: PUSH
73078: LD_INT 3
73080: NEG
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 3
73088: NEG
73089: PUSH
73090: LD_INT 2
73092: NEG
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: LIST
73102: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73103: LD_ADDR_VAR 0 47
73107: PUSH
73108: LD_INT 2
73110: NEG
73111: PUSH
73112: LD_INT 3
73114: NEG
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 1
73122: NEG
73123: PUSH
73124: LD_INT 3
73126: NEG
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73136: LD_ADDR_VAR 0 48
73140: PUSH
73141: LD_INT 1
73143: PUSH
73144: LD_INT 2
73146: NEG
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 2
73154: PUSH
73155: LD_INT 1
73157: NEG
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73167: LD_ADDR_VAR 0 49
73171: PUSH
73172: LD_INT 3
73174: PUSH
73175: LD_INT 1
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 3
73184: PUSH
73185: LD_INT 2
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73196: LD_ADDR_VAR 0 50
73200: PUSH
73201: LD_INT 2
73203: PUSH
73204: LD_INT 3
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 1
73213: PUSH
73214: LD_INT 3
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73225: LD_ADDR_VAR 0 51
73229: PUSH
73230: LD_INT 1
73232: NEG
73233: PUSH
73234: LD_INT 2
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 2
73243: NEG
73244: PUSH
73245: LD_INT 1
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73256: LD_ADDR_VAR 0 52
73260: PUSH
73261: LD_INT 3
73263: NEG
73264: PUSH
73265: LD_INT 1
73267: NEG
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 3
73275: NEG
73276: PUSH
73277: LD_INT 2
73279: NEG
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73289: LD_ADDR_VAR 0 53
73293: PUSH
73294: LD_INT 1
73296: NEG
73297: PUSH
73298: LD_INT 3
73300: NEG
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: LD_INT 3
73311: NEG
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 1
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: LIST
73332: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73333: LD_ADDR_VAR 0 54
73337: PUSH
73338: LD_INT 2
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 3
73351: PUSH
73352: LD_INT 0
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 3
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73374: LD_ADDR_VAR 0 55
73378: PUSH
73379: LD_INT 3
73381: PUSH
73382: LD_INT 2
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 3
73391: PUSH
73392: LD_INT 3
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 2
73401: PUSH
73402: LD_INT 3
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: LIST
73413: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73414: LD_ADDR_VAR 0 56
73418: PUSH
73419: LD_INT 1
73421: PUSH
73422: LD_INT 3
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 0
73431: PUSH
73432: LD_INT 3
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 1
73441: NEG
73442: PUSH
73443: LD_INT 2
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: LIST
73454: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73455: LD_ADDR_VAR 0 57
73459: PUSH
73460: LD_INT 2
73462: NEG
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 3
73473: NEG
73474: PUSH
73475: LD_INT 0
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 3
73484: NEG
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73499: LD_ADDR_VAR 0 58
73503: PUSH
73504: LD_INT 2
73506: NEG
73507: PUSH
73508: LD_INT 3
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 3
73518: NEG
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 3
73530: NEG
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73545: LD_ADDR_VAR 0 59
73549: PUSH
73550: LD_INT 1
73552: NEG
73553: PUSH
73554: LD_INT 2
73556: NEG
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 0
73564: PUSH
73565: LD_INT 2
73567: NEG
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 1
73575: PUSH
73576: LD_INT 1
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: LIST
73588: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73589: LD_ADDR_VAR 0 60
73593: PUSH
73594: LD_INT 1
73596: PUSH
73597: LD_INT 1
73599: NEG
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 2
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 2
73617: PUSH
73618: LD_INT 1
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: LIST
73629: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73630: LD_ADDR_VAR 0 61
73634: PUSH
73635: LD_INT 2
73637: PUSH
73638: LD_INT 1
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 2
73647: PUSH
73648: LD_INT 2
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: LD_INT 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: LIST
73669: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73670: LD_ADDR_VAR 0 62
73674: PUSH
73675: LD_INT 1
73677: PUSH
73678: LD_INT 2
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 0
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 1
73697: NEG
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73711: LD_ADDR_VAR 0 63
73715: PUSH
73716: LD_INT 1
73718: NEG
73719: PUSH
73720: LD_INT 1
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 2
73729: NEG
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 2
73740: NEG
73741: PUSH
73742: LD_INT 1
73744: NEG
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73755: LD_ADDR_VAR 0 64
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: LD_INT 2
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 2
73774: NEG
73775: PUSH
73776: LD_INT 1
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 2
73786: NEG
73787: PUSH
73788: LD_INT 2
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: ST_TO_ADDR
// end ; 2 :
73801: GO 77067
73803: LD_INT 2
73805: DOUBLE
73806: EQUAL
73807: IFTRUE 73811
73809: GO 77066
73811: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73812: LD_ADDR_VAR 0 29
73816: PUSH
73817: LD_INT 4
73819: PUSH
73820: LD_INT 0
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 4
73829: PUSH
73830: LD_INT 1
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 5
73840: PUSH
73841: LD_INT 0
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 5
73850: PUSH
73851: LD_INT 1
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 4
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: PUSH
73871: LD_INT 0
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 3
73880: PUSH
73881: LD_INT 1
73883: NEG
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 3
73891: PUSH
73892: LD_INT 2
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 5
73902: PUSH
73903: LD_INT 2
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 3
73912: PUSH
73913: LD_INT 3
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 4
73932: PUSH
73933: LD_INT 3
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 4
73942: PUSH
73943: LD_INT 4
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 3
73952: PUSH
73953: LD_INT 4
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: LD_INT 2
73962: PUSH
73963: LD_INT 3
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: PUSH
73970: LD_INT 2
73972: PUSH
73973: LD_INT 2
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 4
73982: PUSH
73983: LD_INT 2
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 2
73992: PUSH
73993: LD_INT 4
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: LD_INT 4
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 1
74022: PUSH
74023: LD_INT 4
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 1
74032: PUSH
74033: LD_INT 5
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 0
74042: PUSH
74043: LD_INT 5
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 1
74052: NEG
74053: PUSH
74054: LD_INT 4
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 1
74063: NEG
74064: PUSH
74065: LD_INT 3
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 2
74074: PUSH
74075: LD_INT 5
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 2
74084: NEG
74085: PUSH
74086: LD_INT 3
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 3
74095: NEG
74096: PUSH
74097: LD_INT 0
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: LD_INT 1
74110: NEG
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 2
74118: NEG
74119: PUSH
74120: LD_INT 0
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 2
74129: NEG
74130: PUSH
74131: LD_INT 1
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 3
74140: NEG
74141: PUSH
74142: LD_INT 1
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 4
74151: NEG
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 4
74162: NEG
74163: PUSH
74164: LD_INT 1
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 4
74174: NEG
74175: PUSH
74176: LD_INT 2
74178: NEG
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 2
74186: NEG
74187: PUSH
74188: LD_INT 2
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 4
74197: NEG
74198: PUSH
74199: LD_INT 4
74201: NEG
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 4
74209: NEG
74210: PUSH
74211: LD_INT 5
74213: NEG
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PUSH
74219: LD_INT 3
74221: NEG
74222: PUSH
74223: LD_INT 4
74225: NEG
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 3
74233: NEG
74234: PUSH
74235: LD_INT 3
74237: NEG
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 4
74245: NEG
74246: PUSH
74247: LD_INT 3
74249: NEG
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 5
74257: NEG
74258: PUSH
74259: LD_INT 4
74261: NEG
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 5
74269: NEG
74270: PUSH
74271: LD_INT 5
74273: NEG
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 3
74281: NEG
74282: PUSH
74283: LD_INT 5
74285: NEG
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 5
74293: NEG
74294: PUSH
74295: LD_INT 3
74297: NEG
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74350: LD_ADDR_VAR 0 30
74354: PUSH
74355: LD_INT 4
74357: PUSH
74358: LD_INT 4
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 4
74367: PUSH
74368: LD_INT 3
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 5
74377: PUSH
74378: LD_INT 4
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 5
74387: PUSH
74388: LD_INT 5
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 4
74397: PUSH
74398: LD_INT 5
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 3
74407: PUSH
74408: LD_INT 4
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 3
74417: PUSH
74418: LD_INT 3
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 5
74427: PUSH
74428: LD_INT 3
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 3
74437: PUSH
74438: LD_INT 5
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 0
74447: PUSH
74448: LD_INT 3
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 2
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 1
74467: PUSH
74468: LD_INT 3
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 1
74477: PUSH
74478: LD_INT 4
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 0
74487: PUSH
74488: LD_INT 4
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 1
74497: NEG
74498: PUSH
74499: LD_INT 3
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 1
74508: NEG
74509: PUSH
74510: LD_INT 2
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 2
74519: PUSH
74520: LD_INT 4
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 2
74529: NEG
74530: PUSH
74531: LD_INT 2
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 4
74540: NEG
74541: PUSH
74542: LD_INT 0
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: LD_INT 1
74555: NEG
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_INT 3
74563: NEG
74564: PUSH
74565: LD_INT 0
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PUSH
74572: LD_INT 3
74574: NEG
74575: PUSH
74576: LD_INT 1
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 4
74585: NEG
74586: PUSH
74587: LD_INT 1
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 5
74596: NEG
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 5
74607: NEG
74608: PUSH
74609: LD_INT 1
74611: NEG
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 5
74619: NEG
74620: PUSH
74621: LD_INT 2
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 3
74631: NEG
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 3
74642: NEG
74643: PUSH
74644: LD_INT 3
74646: NEG
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 3
74654: NEG
74655: PUSH
74656: LD_INT 4
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 2
74666: NEG
74667: PUSH
74668: LD_INT 3
74670: NEG
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 2
74678: NEG
74679: PUSH
74680: LD_INT 2
74682: NEG
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: LD_INT 3
74690: NEG
74691: PUSH
74692: LD_INT 2
74694: NEG
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 4
74702: NEG
74703: PUSH
74704: LD_INT 3
74706: NEG
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PUSH
74712: LD_INT 4
74714: NEG
74715: PUSH
74716: LD_INT 4
74718: NEG
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 2
74726: NEG
74727: PUSH
74728: LD_INT 4
74730: NEG
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 4
74738: NEG
74739: PUSH
74740: LD_INT 2
74742: NEG
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: LD_INT 4
74753: NEG
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_INT 5
74764: NEG
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 1
74772: PUSH
74773: LD_INT 4
74775: NEG
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 1
74783: PUSH
74784: LD_INT 3
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: LD_INT 3
74797: NEG
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 1
74805: NEG
74806: PUSH
74807: LD_INT 4
74809: NEG
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 1
74817: NEG
74818: PUSH
74819: LD_INT 5
74821: NEG
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 2
74829: PUSH
74830: LD_INT 3
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 2
74840: NEG
74841: PUSH
74842: LD_INT 5
74844: NEG
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74897: LD_ADDR_VAR 0 31
74901: PUSH
74902: LD_INT 0
74904: PUSH
74905: LD_INT 4
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_INT 3
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 1
74924: PUSH
74925: LD_INT 4
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: LD_INT 1
74934: PUSH
74935: LD_INT 5
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: LD_INT 5
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 1
74954: NEG
74955: PUSH
74956: LD_INT 4
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: PUSH
74967: LD_INT 3
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 2
74976: PUSH
74977: LD_INT 5
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 2
74986: NEG
74987: PUSH
74988: LD_INT 3
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 3
74997: NEG
74998: PUSH
74999: LD_INT 0
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 3
75008: NEG
75009: PUSH
75010: LD_INT 1
75012: NEG
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 2
75020: NEG
75021: PUSH
75022: LD_INT 0
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 2
75031: NEG
75032: PUSH
75033: LD_INT 1
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 3
75042: NEG
75043: PUSH
75044: LD_INT 1
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 4
75053: NEG
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 4
75064: NEG
75065: PUSH
75066: LD_INT 1
75068: NEG
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 4
75076: NEG
75077: PUSH
75078: LD_INT 2
75080: NEG
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 2
75088: NEG
75089: PUSH
75090: LD_INT 2
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 4
75099: NEG
75100: PUSH
75101: LD_INT 4
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 4
75111: NEG
75112: PUSH
75113: LD_INT 5
75115: NEG
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 3
75123: NEG
75124: PUSH
75125: LD_INT 4
75127: NEG
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 3
75135: NEG
75136: PUSH
75137: LD_INT 3
75139: NEG
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: LD_INT 4
75147: NEG
75148: PUSH
75149: LD_INT 3
75151: NEG
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 5
75159: NEG
75160: PUSH
75161: LD_INT 4
75163: NEG
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 5
75171: NEG
75172: PUSH
75173: LD_INT 5
75175: NEG
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 3
75183: NEG
75184: PUSH
75185: LD_INT 5
75187: NEG
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 5
75195: NEG
75196: PUSH
75197: LD_INT 3
75199: NEG
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 0
75207: PUSH
75208: LD_INT 3
75210: NEG
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: LD_INT 4
75221: NEG
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: LD_INT 1
75229: PUSH
75230: LD_INT 3
75232: NEG
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 1
75240: PUSH
75241: LD_INT 2
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 0
75251: PUSH
75252: LD_INT 2
75254: NEG
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 1
75262: NEG
75263: PUSH
75264: LD_INT 3
75266: NEG
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 1
75274: NEG
75275: PUSH
75276: LD_INT 4
75278: NEG
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 2
75286: PUSH
75287: LD_INT 2
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 2
75297: NEG
75298: PUSH
75299: LD_INT 4
75301: NEG
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 4
75309: PUSH
75310: LD_INT 0
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 4
75319: PUSH
75320: LD_INT 1
75322: NEG
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 5
75330: PUSH
75331: LD_INT 0
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: LD_INT 5
75340: PUSH
75341: LD_INT 1
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 4
75350: PUSH
75351: LD_INT 1
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 3
75360: PUSH
75361: LD_INT 0
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 3
75370: PUSH
75371: LD_INT 1
75373: NEG
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 3
75381: PUSH
75382: LD_INT 2
75384: NEG
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 5
75392: PUSH
75393: LD_INT 2
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75447: LD_ADDR_VAR 0 32
75451: PUSH
75452: LD_INT 4
75454: NEG
75455: PUSH
75456: LD_INT 0
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 4
75465: NEG
75466: PUSH
75467: LD_INT 1
75469: NEG
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 3
75477: NEG
75478: PUSH
75479: LD_INT 0
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 3
75488: NEG
75489: PUSH
75490: LD_INT 1
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 4
75499: NEG
75500: PUSH
75501: LD_INT 1
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 5
75510: NEG
75511: PUSH
75512: LD_INT 0
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 5
75521: NEG
75522: PUSH
75523: LD_INT 1
75525: NEG
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 5
75533: NEG
75534: PUSH
75535: LD_INT 2
75537: NEG
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 3
75545: NEG
75546: PUSH
75547: LD_INT 2
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 3
75556: NEG
75557: PUSH
75558: LD_INT 3
75560: NEG
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 3
75568: NEG
75569: PUSH
75570: LD_INT 4
75572: NEG
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 2
75580: NEG
75581: PUSH
75582: LD_INT 3
75584: NEG
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 2
75592: NEG
75593: PUSH
75594: LD_INT 2
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 3
75604: NEG
75605: PUSH
75606: LD_INT 2
75608: NEG
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: PUSH
75614: LD_INT 4
75616: NEG
75617: PUSH
75618: LD_INT 3
75620: NEG
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 4
75628: NEG
75629: PUSH
75630: LD_INT 4
75632: NEG
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: PUSH
75638: LD_INT 2
75640: NEG
75641: PUSH
75642: LD_INT 4
75644: NEG
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 4
75652: NEG
75653: PUSH
75654: LD_INT 2
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 0
75664: PUSH
75665: LD_INT 4
75667: NEG
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: LD_INT 5
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 1
75686: PUSH
75687: LD_INT 4
75689: NEG
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 1
75697: PUSH
75698: LD_INT 3
75700: NEG
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 0
75708: PUSH
75709: LD_INT 3
75711: NEG
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 1
75719: NEG
75720: PUSH
75721: LD_INT 4
75723: NEG
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 1
75731: NEG
75732: PUSH
75733: LD_INT 5
75735: NEG
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 2
75743: PUSH
75744: LD_INT 3
75746: NEG
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 2
75754: NEG
75755: PUSH
75756: LD_INT 5
75758: NEG
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: PUSH
75764: LD_INT 3
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 3
75776: PUSH
75777: LD_INT 1
75779: NEG
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 4
75787: PUSH
75788: LD_INT 0
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 4
75797: PUSH
75798: LD_INT 1
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 3
75807: PUSH
75808: LD_INT 1
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 2
75817: PUSH
75818: LD_INT 0
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 2
75827: PUSH
75828: LD_INT 1
75830: NEG
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 2
75838: PUSH
75839: LD_INT 2
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 4
75849: PUSH
75850: LD_INT 2
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 4
75859: PUSH
75860: LD_INT 4
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 4
75869: PUSH
75870: LD_INT 3
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 5
75879: PUSH
75880: LD_INT 4
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: LD_INT 5
75889: PUSH
75890: LD_INT 5
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: LD_INT 4
75899: PUSH
75900: LD_INT 5
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: LD_INT 3
75909: PUSH
75910: LD_INT 4
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 3
75919: PUSH
75920: LD_INT 3
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: LD_INT 5
75929: PUSH
75930: LD_INT 3
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 3
75939: PUSH
75940: LD_INT 5
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75994: LD_ADDR_VAR 0 33
75998: PUSH
75999: LD_INT 4
76001: NEG
76002: PUSH
76003: LD_INT 4
76005: NEG
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 4
76013: NEG
76014: PUSH
76015: LD_INT 5
76017: NEG
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 3
76025: NEG
76026: PUSH
76027: LD_INT 4
76029: NEG
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PUSH
76035: LD_INT 3
76037: NEG
76038: PUSH
76039: LD_INT 3
76041: NEG
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PUSH
76047: LD_INT 4
76049: NEG
76050: PUSH
76051: LD_INT 3
76053: NEG
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 5
76061: NEG
76062: PUSH
76063: LD_INT 4
76065: NEG
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: LD_INT 5
76073: NEG
76074: PUSH
76075: LD_INT 5
76077: NEG
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 3
76085: NEG
76086: PUSH
76087: LD_INT 5
76089: NEG
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: PUSH
76095: LD_INT 5
76097: NEG
76098: PUSH
76099: LD_INT 3
76101: NEG
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: LD_INT 3
76112: NEG
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 0
76120: PUSH
76121: LD_INT 4
76123: NEG
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: PUSH
76129: LD_INT 1
76131: PUSH
76132: LD_INT 3
76134: NEG
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: LD_INT 2
76145: NEG
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 0
76153: PUSH
76154: LD_INT 2
76156: NEG
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: PUSH
76162: LD_INT 1
76164: NEG
76165: PUSH
76166: LD_INT 3
76168: NEG
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 1
76176: NEG
76177: PUSH
76178: LD_INT 4
76180: NEG
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 2
76188: PUSH
76189: LD_INT 2
76191: NEG
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 2
76199: NEG
76200: PUSH
76201: LD_INT 4
76203: NEG
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 4
76211: PUSH
76212: LD_INT 0
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 4
76221: PUSH
76222: LD_INT 1
76224: NEG
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 5
76232: PUSH
76233: LD_INT 0
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 5
76242: PUSH
76243: LD_INT 1
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 4
76252: PUSH
76253: LD_INT 1
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 3
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PUSH
76270: LD_INT 3
76272: PUSH
76273: LD_INT 1
76275: NEG
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: LD_INT 2
76286: NEG
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PUSH
76292: LD_INT 5
76294: PUSH
76295: LD_INT 2
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: LD_INT 3
76304: PUSH
76305: LD_INT 3
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: LD_INT 2
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: LD_INT 4
76324: PUSH
76325: LD_INT 3
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: PUSH
76332: LD_INT 4
76334: PUSH
76335: LD_INT 4
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: LD_INT 3
76344: PUSH
76345: LD_INT 4
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: LD_INT 3
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 2
76364: PUSH
76365: LD_INT 2
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 4
76374: PUSH
76375: LD_INT 2
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 2
76384: PUSH
76385: LD_INT 4
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: LD_INT 4
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 0
76404: PUSH
76405: LD_INT 3
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 1
76414: PUSH
76415: LD_INT 4
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: LD_INT 1
76424: PUSH
76425: LD_INT 5
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 0
76434: PUSH
76435: LD_INT 5
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: LD_INT 1
76444: NEG
76445: PUSH
76446: LD_INT 4
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 1
76455: NEG
76456: PUSH
76457: LD_INT 3
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 2
76466: PUSH
76467: LD_INT 5
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 2
76476: NEG
76477: PUSH
76478: LD_INT 3
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76532: LD_ADDR_VAR 0 34
76536: PUSH
76537: LD_INT 0
76539: PUSH
76540: LD_INT 4
76542: NEG
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 0
76550: PUSH
76551: LD_INT 5
76553: NEG
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 1
76561: PUSH
76562: LD_INT 4
76564: NEG
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 1
76572: PUSH
76573: LD_INT 3
76575: NEG
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 0
76583: PUSH
76584: LD_INT 3
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 1
76594: NEG
76595: PUSH
76596: LD_INT 4
76598: NEG
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 1
76606: NEG
76607: PUSH
76608: LD_INT 5
76610: NEG
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 2
76618: PUSH
76619: LD_INT 3
76621: NEG
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: NEG
76630: PUSH
76631: LD_INT 5
76633: NEG
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 3
76641: PUSH
76642: LD_INT 0
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 3
76651: PUSH
76652: LD_INT 1
76654: NEG
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PUSH
76660: LD_INT 4
76662: PUSH
76663: LD_INT 0
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: PUSH
76670: LD_INT 4
76672: PUSH
76673: LD_INT 1
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PUSH
76680: LD_INT 3
76682: PUSH
76683: LD_INT 1
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: LD_INT 2
76692: PUSH
76693: LD_INT 0
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: PUSH
76700: LD_INT 2
76702: PUSH
76703: LD_INT 1
76705: NEG
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: PUSH
76711: LD_INT 2
76713: PUSH
76714: LD_INT 2
76716: NEG
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 4
76724: PUSH
76725: LD_INT 2
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 4
76734: PUSH
76735: LD_INT 4
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 4
76744: PUSH
76745: LD_INT 3
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PUSH
76752: LD_INT 5
76754: PUSH
76755: LD_INT 4
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: LD_INT 5
76764: PUSH
76765: LD_INT 5
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 4
76774: PUSH
76775: LD_INT 5
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: PUSH
76782: LD_INT 3
76784: PUSH
76785: LD_INT 4
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PUSH
76792: LD_INT 3
76794: PUSH
76795: LD_INT 3
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PUSH
76802: LD_INT 5
76804: PUSH
76805: LD_INT 3
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: LD_INT 3
76814: PUSH
76815: LD_INT 5
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 0
76824: PUSH
76825: LD_INT 3
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 0
76834: PUSH
76835: LD_INT 2
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 1
76844: PUSH
76845: LD_INT 3
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 1
76854: PUSH
76855: LD_INT 4
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: LD_INT 0
76864: PUSH
76865: LD_INT 4
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 1
76874: NEG
76875: PUSH
76876: LD_INT 3
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 1
76885: NEG
76886: PUSH
76887: LD_INT 2
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 2
76896: PUSH
76897: LD_INT 4
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 2
76906: NEG
76907: PUSH
76908: LD_INT 2
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 4
76917: NEG
76918: PUSH
76919: LD_INT 0
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 4
76928: NEG
76929: PUSH
76930: LD_INT 1
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 3
76940: NEG
76941: PUSH
76942: LD_INT 0
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 3
76951: NEG
76952: PUSH
76953: LD_INT 1
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 4
76962: NEG
76963: PUSH
76964: LD_INT 1
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 5
76973: NEG
76974: PUSH
76975: LD_INT 0
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 5
76984: NEG
76985: PUSH
76986: LD_INT 1
76988: NEG
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: PUSH
76994: LD_INT 5
76996: NEG
76997: PUSH
76998: LD_INT 2
77000: NEG
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PUSH
77006: LD_INT 3
77008: NEG
77009: PUSH
77010: LD_INT 2
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: ST_TO_ADDR
// end ; end ;
77064: GO 77067
77066: POP
// case btype of b_depot , b_warehouse :
77067: LD_VAR 0 1
77071: PUSH
77072: LD_INT 0
77074: DOUBLE
77075: EQUAL
77076: IFTRUE 77086
77078: LD_INT 1
77080: DOUBLE
77081: EQUAL
77082: IFTRUE 77086
77084: GO 77287
77086: POP
// case nation of nation_american :
77087: LD_VAR 0 5
77091: PUSH
77092: LD_INT 1
77094: DOUBLE
77095: EQUAL
77096: IFTRUE 77100
77098: GO 77156
77100: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77101: LD_ADDR_VAR 0 9
77105: PUSH
77106: LD_VAR 0 11
77110: PUSH
77111: LD_VAR 0 12
77115: PUSH
77116: LD_VAR 0 13
77120: PUSH
77121: LD_VAR 0 14
77125: PUSH
77126: LD_VAR 0 15
77130: PUSH
77131: LD_VAR 0 16
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: PUSH
77144: LD_VAR 0 4
77148: PUSH
77149: LD_INT 1
77151: PLUS
77152: ARRAY
77153: ST_TO_ADDR
77154: GO 77285
77156: LD_INT 2
77158: DOUBLE
77159: EQUAL
77160: IFTRUE 77164
77162: GO 77220
77164: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77165: LD_ADDR_VAR 0 9
77169: PUSH
77170: LD_VAR 0 17
77174: PUSH
77175: LD_VAR 0 18
77179: PUSH
77180: LD_VAR 0 19
77184: PUSH
77185: LD_VAR 0 20
77189: PUSH
77190: LD_VAR 0 21
77194: PUSH
77195: LD_VAR 0 22
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: PUSH
77208: LD_VAR 0 4
77212: PUSH
77213: LD_INT 1
77215: PLUS
77216: ARRAY
77217: ST_TO_ADDR
77218: GO 77285
77220: LD_INT 3
77222: DOUBLE
77223: EQUAL
77224: IFTRUE 77228
77226: GO 77284
77228: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77229: LD_ADDR_VAR 0 9
77233: PUSH
77234: LD_VAR 0 23
77238: PUSH
77239: LD_VAR 0 24
77243: PUSH
77244: LD_VAR 0 25
77248: PUSH
77249: LD_VAR 0 26
77253: PUSH
77254: LD_VAR 0 27
77258: PUSH
77259: LD_VAR 0 28
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: PUSH
77272: LD_VAR 0 4
77276: PUSH
77277: LD_INT 1
77279: PLUS
77280: ARRAY
77281: ST_TO_ADDR
77282: GO 77285
77284: POP
77285: GO 77840
77287: LD_INT 2
77289: DOUBLE
77290: EQUAL
77291: IFTRUE 77301
77293: LD_INT 3
77295: DOUBLE
77296: EQUAL
77297: IFTRUE 77301
77299: GO 77357
77301: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77302: LD_ADDR_VAR 0 9
77306: PUSH
77307: LD_VAR 0 29
77311: PUSH
77312: LD_VAR 0 30
77316: PUSH
77317: LD_VAR 0 31
77321: PUSH
77322: LD_VAR 0 32
77326: PUSH
77327: LD_VAR 0 33
77331: PUSH
77332: LD_VAR 0 34
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: PUSH
77345: LD_VAR 0 4
77349: PUSH
77350: LD_INT 1
77352: PLUS
77353: ARRAY
77354: ST_TO_ADDR
77355: GO 77840
77357: LD_INT 16
77359: DOUBLE
77360: EQUAL
77361: IFTRUE 77419
77363: LD_INT 17
77365: DOUBLE
77366: EQUAL
77367: IFTRUE 77419
77369: LD_INT 18
77371: DOUBLE
77372: EQUAL
77373: IFTRUE 77419
77375: LD_INT 19
77377: DOUBLE
77378: EQUAL
77379: IFTRUE 77419
77381: LD_INT 22
77383: DOUBLE
77384: EQUAL
77385: IFTRUE 77419
77387: LD_INT 20
77389: DOUBLE
77390: EQUAL
77391: IFTRUE 77419
77393: LD_INT 21
77395: DOUBLE
77396: EQUAL
77397: IFTRUE 77419
77399: LD_INT 23
77401: DOUBLE
77402: EQUAL
77403: IFTRUE 77419
77405: LD_INT 24
77407: DOUBLE
77408: EQUAL
77409: IFTRUE 77419
77411: LD_INT 25
77413: DOUBLE
77414: EQUAL
77415: IFTRUE 77419
77417: GO 77475
77419: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77420: LD_ADDR_VAR 0 9
77424: PUSH
77425: LD_VAR 0 35
77429: PUSH
77430: LD_VAR 0 36
77434: PUSH
77435: LD_VAR 0 37
77439: PUSH
77440: LD_VAR 0 38
77444: PUSH
77445: LD_VAR 0 39
77449: PUSH
77450: LD_VAR 0 40
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: PUSH
77463: LD_VAR 0 4
77467: PUSH
77468: LD_INT 1
77470: PLUS
77471: ARRAY
77472: ST_TO_ADDR
77473: GO 77840
77475: LD_INT 6
77477: DOUBLE
77478: EQUAL
77479: IFTRUE 77531
77481: LD_INT 7
77483: DOUBLE
77484: EQUAL
77485: IFTRUE 77531
77487: LD_INT 8
77489: DOUBLE
77490: EQUAL
77491: IFTRUE 77531
77493: LD_INT 13
77495: DOUBLE
77496: EQUAL
77497: IFTRUE 77531
77499: LD_INT 12
77501: DOUBLE
77502: EQUAL
77503: IFTRUE 77531
77505: LD_INT 15
77507: DOUBLE
77508: EQUAL
77509: IFTRUE 77531
77511: LD_INT 11
77513: DOUBLE
77514: EQUAL
77515: IFTRUE 77531
77517: LD_INT 14
77519: DOUBLE
77520: EQUAL
77521: IFTRUE 77531
77523: LD_INT 10
77525: DOUBLE
77526: EQUAL
77527: IFTRUE 77531
77529: GO 77587
77531: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
77532: LD_ADDR_VAR 0 9
77536: PUSH
77537: LD_VAR 0 41
77541: PUSH
77542: LD_VAR 0 42
77546: PUSH
77547: LD_VAR 0 43
77551: PUSH
77552: LD_VAR 0 44
77556: PUSH
77557: LD_VAR 0 45
77561: PUSH
77562: LD_VAR 0 46
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: PUSH
77575: LD_VAR 0 4
77579: PUSH
77580: LD_INT 1
77582: PLUS
77583: ARRAY
77584: ST_TO_ADDR
77585: GO 77840
77587: LD_INT 36
77589: DOUBLE
77590: EQUAL
77591: IFTRUE 77595
77593: GO 77651
77595: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77596: LD_ADDR_VAR 0 9
77600: PUSH
77601: LD_VAR 0 47
77605: PUSH
77606: LD_VAR 0 48
77610: PUSH
77611: LD_VAR 0 49
77615: PUSH
77616: LD_VAR 0 50
77620: PUSH
77621: LD_VAR 0 51
77625: PUSH
77626: LD_VAR 0 52
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: PUSH
77639: LD_VAR 0 4
77643: PUSH
77644: LD_INT 1
77646: PLUS
77647: ARRAY
77648: ST_TO_ADDR
77649: GO 77840
77651: LD_INT 4
77653: DOUBLE
77654: EQUAL
77655: IFTRUE 77677
77657: LD_INT 5
77659: DOUBLE
77660: EQUAL
77661: IFTRUE 77677
77663: LD_INT 34
77665: DOUBLE
77666: EQUAL
77667: IFTRUE 77677
77669: LD_INT 37
77671: DOUBLE
77672: EQUAL
77673: IFTRUE 77677
77675: GO 77733
77677: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77678: LD_ADDR_VAR 0 9
77682: PUSH
77683: LD_VAR 0 53
77687: PUSH
77688: LD_VAR 0 54
77692: PUSH
77693: LD_VAR 0 55
77697: PUSH
77698: LD_VAR 0 56
77702: PUSH
77703: LD_VAR 0 57
77707: PUSH
77708: LD_VAR 0 58
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: PUSH
77721: LD_VAR 0 4
77725: PUSH
77726: LD_INT 1
77728: PLUS
77729: ARRAY
77730: ST_TO_ADDR
77731: GO 77840
77733: LD_INT 31
77735: DOUBLE
77736: EQUAL
77737: IFTRUE 77783
77739: LD_INT 32
77741: DOUBLE
77742: EQUAL
77743: IFTRUE 77783
77745: LD_INT 33
77747: DOUBLE
77748: EQUAL
77749: IFTRUE 77783
77751: LD_INT 27
77753: DOUBLE
77754: EQUAL
77755: IFTRUE 77783
77757: LD_INT 26
77759: DOUBLE
77760: EQUAL
77761: IFTRUE 77783
77763: LD_INT 28
77765: DOUBLE
77766: EQUAL
77767: IFTRUE 77783
77769: LD_INT 29
77771: DOUBLE
77772: EQUAL
77773: IFTRUE 77783
77775: LD_INT 30
77777: DOUBLE
77778: EQUAL
77779: IFTRUE 77783
77781: GO 77839
77783: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
77784: LD_ADDR_VAR 0 9
77788: PUSH
77789: LD_VAR 0 59
77793: PUSH
77794: LD_VAR 0 60
77798: PUSH
77799: LD_VAR 0 61
77803: PUSH
77804: LD_VAR 0 62
77808: PUSH
77809: LD_VAR 0 63
77813: PUSH
77814: LD_VAR 0 64
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: PUSH
77827: LD_VAR 0 4
77831: PUSH
77832: LD_INT 1
77834: PLUS
77835: ARRAY
77836: ST_TO_ADDR
77837: GO 77840
77839: POP
// temp_list2 = [ ] ;
77840: LD_ADDR_VAR 0 10
77844: PUSH
77845: EMPTY
77846: ST_TO_ADDR
// for i in temp_list do
77847: LD_ADDR_VAR 0 8
77851: PUSH
77852: LD_VAR 0 9
77856: PUSH
77857: FOR_IN
77858: IFFALSE 77910
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77860: LD_ADDR_VAR 0 10
77864: PUSH
77865: LD_VAR 0 10
77869: PUSH
77870: LD_VAR 0 8
77874: PUSH
77875: LD_INT 1
77877: ARRAY
77878: PUSH
77879: LD_VAR 0 2
77883: PLUS
77884: PUSH
77885: LD_VAR 0 8
77889: PUSH
77890: LD_INT 2
77892: ARRAY
77893: PUSH
77894: LD_VAR 0 3
77898: PLUS
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: EMPTY
77905: LIST
77906: ADD
77907: ST_TO_ADDR
77908: GO 77857
77910: POP
77911: POP
// result = temp_list2 ;
77912: LD_ADDR_VAR 0 7
77916: PUSH
77917: LD_VAR 0 10
77921: ST_TO_ADDR
// end ;
77922: LD_VAR 0 7
77926: RET
// export function EnemyInRange ( unit , dist ) ; begin
77927: LD_INT 0
77929: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77930: LD_ADDR_VAR 0 3
77934: PUSH
77935: LD_VAR 0 1
77939: PPUSH
77940: CALL_OW 255
77944: PPUSH
77945: LD_VAR 0 1
77949: PPUSH
77950: CALL_OW 250
77954: PPUSH
77955: LD_VAR 0 1
77959: PPUSH
77960: CALL_OW 251
77964: PPUSH
77965: LD_VAR 0 2
77969: PPUSH
77970: CALL 51184 0 4
77974: PUSH
77975: LD_INT 4
77977: ARRAY
77978: ST_TO_ADDR
// end ;
77979: LD_VAR 0 3
77983: RET
// export function PlayerSeeMe ( unit ) ; begin
77984: LD_INT 0
77986: PPUSH
// result := See ( your_side , unit ) ;
77987: LD_ADDR_VAR 0 2
77991: PUSH
77992: LD_OWVAR 2
77996: PPUSH
77997: LD_VAR 0 1
78001: PPUSH
78002: CALL_OW 292
78006: ST_TO_ADDR
// end ;
78007: LD_VAR 0 2
78011: RET
// export function ReverseDir ( unit ) ; begin
78012: LD_INT 0
78014: PPUSH
// if not unit then
78015: LD_VAR 0 1
78019: NOT
78020: IFFALSE 78024
// exit ;
78022: GO 78047
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78024: LD_ADDR_VAR 0 2
78028: PUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: CALL_OW 254
78038: PUSH
78039: LD_INT 3
78041: PLUS
78042: PUSH
78043: LD_INT 6
78045: MOD
78046: ST_TO_ADDR
// end ;
78047: LD_VAR 0 2
78051: RET
// export function ReverseArray ( array ) ; var i ; begin
78052: LD_INT 0
78054: PPUSH
78055: PPUSH
// if not array then
78056: LD_VAR 0 1
78060: NOT
78061: IFFALSE 78065
// exit ;
78063: GO 78120
// result := [ ] ;
78065: LD_ADDR_VAR 0 2
78069: PUSH
78070: EMPTY
78071: ST_TO_ADDR
// for i := array downto 1 do
78072: LD_ADDR_VAR 0 3
78076: PUSH
78077: DOUBLE
78078: LD_VAR 0 1
78082: INC
78083: ST_TO_ADDR
78084: LD_INT 1
78086: PUSH
78087: FOR_DOWNTO
78088: IFFALSE 78118
// result := Join ( result , array [ i ] ) ;
78090: LD_ADDR_VAR 0 2
78094: PUSH
78095: LD_VAR 0 2
78099: PPUSH
78100: LD_VAR 0 1
78104: PUSH
78105: LD_VAR 0 3
78109: ARRAY
78110: PPUSH
78111: CALL 82972 0 2
78115: ST_TO_ADDR
78116: GO 78087
78118: POP
78119: POP
// end ;
78120: LD_VAR 0 2
78124: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
78125: LD_INT 0
78127: PPUSH
78128: PPUSH
78129: PPUSH
78130: PPUSH
78131: PPUSH
78132: PPUSH
// if not unit or not hexes then
78133: LD_VAR 0 1
78137: NOT
78138: IFTRUE 78147
78140: PUSH
78141: LD_VAR 0 2
78145: NOT
78146: OR
78147: IFFALSE 78151
// exit ;
78149: GO 78274
// dist := 9999 ;
78151: LD_ADDR_VAR 0 5
78155: PUSH
78156: LD_INT 9999
78158: ST_TO_ADDR
// for i = 1 to hexes do
78159: LD_ADDR_VAR 0 4
78163: PUSH
78164: DOUBLE
78165: LD_INT 1
78167: DEC
78168: ST_TO_ADDR
78169: LD_VAR 0 2
78173: PUSH
78174: FOR_TO
78175: IFFALSE 78262
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78177: LD_ADDR_VAR 0 6
78181: PUSH
78182: LD_VAR 0 1
78186: PPUSH
78187: LD_VAR 0 2
78191: PUSH
78192: LD_VAR 0 4
78196: ARRAY
78197: PUSH
78198: LD_INT 1
78200: ARRAY
78201: PPUSH
78202: LD_VAR 0 2
78206: PUSH
78207: LD_VAR 0 4
78211: ARRAY
78212: PUSH
78213: LD_INT 2
78215: ARRAY
78216: PPUSH
78217: CALL_OW 297
78221: ST_TO_ADDR
// if tdist < dist then
78222: LD_VAR 0 6
78226: PUSH
78227: LD_VAR 0 5
78231: LESS
78232: IFFALSE 78260
// begin hex := hexes [ i ] ;
78234: LD_ADDR_VAR 0 8
78238: PUSH
78239: LD_VAR 0 2
78243: PUSH
78244: LD_VAR 0 4
78248: ARRAY
78249: ST_TO_ADDR
// dist := tdist ;
78250: LD_ADDR_VAR 0 5
78254: PUSH
78255: LD_VAR 0 6
78259: ST_TO_ADDR
// end ; end ;
78260: GO 78174
78262: POP
78263: POP
// result := hex ;
78264: LD_ADDR_VAR 0 3
78268: PUSH
78269: LD_VAR 0 8
78273: ST_TO_ADDR
// end ;
78274: LD_VAR 0 3
78278: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78279: LD_INT 0
78281: PPUSH
78282: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78283: LD_VAR 0 1
78287: NOT
78288: IFTRUE 78327
78290: PUSH
78291: LD_VAR 0 1
78295: PUSH
78296: LD_INT 21
78298: PUSH
78299: LD_INT 2
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 23
78308: PUSH
78309: LD_INT 2
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PPUSH
78320: CALL_OW 69
78324: IN
78325: NOT
78326: OR
78327: IFFALSE 78331
// exit ;
78329: GO 78378
// for i = 1 to 3 do
78331: LD_ADDR_VAR 0 3
78335: PUSH
78336: DOUBLE
78337: LD_INT 1
78339: DEC
78340: ST_TO_ADDR
78341: LD_INT 3
78343: PUSH
78344: FOR_TO
78345: IFFALSE 78376
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL_OW 250
78356: PPUSH
78357: LD_VAR 0 1
78361: PPUSH
78362: CALL_OW 251
78366: PPUSH
78367: LD_INT 1
78369: PPUSH
78370: CALL_OW 453
78374: GO 78344
78376: POP
78377: POP
// end ;
78378: LD_VAR 0 2
78382: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78383: LD_INT 0
78385: PPUSH
78386: PPUSH
78387: PPUSH
78388: PPUSH
78389: PPUSH
78390: PPUSH
// if not unit or not enemy_unit then
78391: LD_VAR 0 1
78395: NOT
78396: IFTRUE 78405
78398: PUSH
78399: LD_VAR 0 2
78403: NOT
78404: OR
78405: IFFALSE 78409
// exit ;
78407: GO 78890
// if GetLives ( i ) < 250 then
78409: LD_VAR 0 4
78413: PPUSH
78414: CALL_OW 256
78418: PUSH
78419: LD_INT 250
78421: LESS
78422: IFFALSE 78435
// begin ComAutodestruct ( i ) ;
78424: LD_VAR 0 4
78428: PPUSH
78429: CALL 78279 0 1
// exit ;
78433: GO 78890
// end ; x := GetX ( enemy_unit ) ;
78435: LD_ADDR_VAR 0 7
78439: PUSH
78440: LD_VAR 0 2
78444: PPUSH
78445: CALL_OW 250
78449: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78450: LD_ADDR_VAR 0 8
78454: PUSH
78455: LD_VAR 0 2
78459: PPUSH
78460: CALL_OW 251
78464: ST_TO_ADDR
// if not x or not y then
78465: LD_VAR 0 7
78469: NOT
78470: IFTRUE 78479
78472: PUSH
78473: LD_VAR 0 8
78477: NOT
78478: OR
78479: IFFALSE 78483
// exit ;
78481: GO 78890
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78483: LD_ADDR_VAR 0 6
78487: PUSH
78488: LD_VAR 0 7
78492: PPUSH
78493: LD_INT 0
78495: PPUSH
78496: LD_INT 4
78498: PPUSH
78499: CALL_OW 272
78503: PUSH
78504: LD_VAR 0 8
78508: PPUSH
78509: LD_INT 0
78511: PPUSH
78512: LD_INT 4
78514: PPUSH
78515: CALL_OW 273
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: LD_VAR 0 7
78528: PPUSH
78529: LD_INT 1
78531: PPUSH
78532: LD_INT 4
78534: PPUSH
78535: CALL_OW 272
78539: PUSH
78540: LD_VAR 0 8
78544: PPUSH
78545: LD_INT 1
78547: PPUSH
78548: LD_INT 4
78550: PPUSH
78551: CALL_OW 273
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: LD_VAR 0 7
78564: PPUSH
78565: LD_INT 2
78567: PPUSH
78568: LD_INT 4
78570: PPUSH
78571: CALL_OW 272
78575: PUSH
78576: LD_VAR 0 8
78580: PPUSH
78581: LD_INT 2
78583: PPUSH
78584: LD_INT 4
78586: PPUSH
78587: CALL_OW 273
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: LD_VAR 0 7
78600: PPUSH
78601: LD_INT 3
78603: PPUSH
78604: LD_INT 4
78606: PPUSH
78607: CALL_OW 272
78611: PUSH
78612: LD_VAR 0 8
78616: PPUSH
78617: LD_INT 3
78619: PPUSH
78620: LD_INT 4
78622: PPUSH
78623: CALL_OW 273
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_VAR 0 7
78636: PPUSH
78637: LD_INT 4
78639: PPUSH
78640: LD_INT 4
78642: PPUSH
78643: CALL_OW 272
78647: PUSH
78648: LD_VAR 0 8
78652: PPUSH
78653: LD_INT 4
78655: PPUSH
78656: LD_INT 4
78658: PPUSH
78659: CALL_OW 273
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_VAR 0 7
78672: PPUSH
78673: LD_INT 5
78675: PPUSH
78676: LD_INT 4
78678: PPUSH
78679: CALL_OW 272
78683: PUSH
78684: LD_VAR 0 8
78688: PPUSH
78689: LD_INT 5
78691: PPUSH
78692: LD_INT 4
78694: PPUSH
78695: CALL_OW 273
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: ST_TO_ADDR
// for i = tmp downto 1 do
78712: LD_ADDR_VAR 0 4
78716: PUSH
78717: DOUBLE
78718: LD_VAR 0 6
78722: INC
78723: ST_TO_ADDR
78724: LD_INT 1
78726: PUSH
78727: FOR_DOWNTO
78728: IFFALSE 78831
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78730: LD_VAR 0 6
78734: PUSH
78735: LD_VAR 0 4
78739: ARRAY
78740: PUSH
78741: LD_INT 1
78743: ARRAY
78744: PPUSH
78745: LD_VAR 0 6
78749: PUSH
78750: LD_VAR 0 4
78754: ARRAY
78755: PUSH
78756: LD_INT 2
78758: ARRAY
78759: PPUSH
78760: CALL_OW 488
78764: NOT
78765: IFTRUE 78807
78767: PUSH
78768: LD_VAR 0 6
78772: PUSH
78773: LD_VAR 0 4
78777: ARRAY
78778: PUSH
78779: LD_INT 1
78781: ARRAY
78782: PPUSH
78783: LD_VAR 0 6
78787: PUSH
78788: LD_VAR 0 4
78792: ARRAY
78793: PUSH
78794: LD_INT 2
78796: ARRAY
78797: PPUSH
78798: CALL_OW 428
78802: PUSH
78803: LD_INT 0
78805: NONEQUAL
78806: OR
78807: IFFALSE 78829
// tmp := Delete ( tmp , i ) ;
78809: LD_ADDR_VAR 0 6
78813: PUSH
78814: LD_VAR 0 6
78818: PPUSH
78819: LD_VAR 0 4
78823: PPUSH
78824: CALL_OW 3
78828: ST_TO_ADDR
78829: GO 78727
78831: POP
78832: POP
// j := GetClosestHex ( unit , tmp ) ;
78833: LD_ADDR_VAR 0 5
78837: PUSH
78838: LD_VAR 0 1
78842: PPUSH
78843: LD_VAR 0 6
78847: PPUSH
78848: CALL 78125 0 2
78852: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78853: LD_VAR 0 1
78857: PPUSH
78858: LD_VAR 0 5
78862: PUSH
78863: LD_INT 1
78865: ARRAY
78866: PPUSH
78867: LD_VAR 0 5
78871: PUSH
78872: LD_INT 2
78874: ARRAY
78875: PPUSH
78876: CALL_OW 111
// result := j ;
78880: LD_ADDR_VAR 0 3
78884: PUSH
78885: LD_VAR 0 5
78889: ST_TO_ADDR
// end ;
78890: LD_VAR 0 3
78894: RET
// export function PrepareApemanSoldier ( ) ; begin
78895: LD_INT 0
78897: PPUSH
// uc_nation := 0 ;
78898: LD_ADDR_OWVAR 21
78902: PUSH
78903: LD_INT 0
78905: ST_TO_ADDR
// hc_sex := sex_male ;
78906: LD_ADDR_OWVAR 27
78910: PUSH
78911: LD_INT 1
78913: ST_TO_ADDR
// hc_name :=  ;
78914: LD_ADDR_OWVAR 26
78918: PUSH
78919: LD_STRING 
78921: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
78922: LD_ADDR_OWVAR 28
78926: PUSH
78927: LD_INT 15
78929: ST_TO_ADDR
// hc_gallery :=  ;
78930: LD_ADDR_OWVAR 33
78934: PUSH
78935: LD_STRING 
78937: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
78938: LD_ADDR_OWVAR 31
78942: PUSH
78943: LD_INT 0
78945: PPUSH
78946: LD_INT 3
78948: PPUSH
78949: CALL_OW 12
78953: PUSH
78954: LD_INT 0
78956: PPUSH
78957: LD_INT 3
78959: PPUSH
78960: CALL_OW 12
78964: PUSH
78965: LD_INT 0
78967: PUSH
78968: LD_INT 0
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
78977: LD_ADDR_OWVAR 29
78981: PUSH
78982: LD_INT 10
78984: PUSH
78985: LD_INT 12
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: ST_TO_ADDR
// end ;
78992: LD_VAR 0 1
78996: RET
// export function PrepareApemanEngineer ( ) ; begin
78997: LD_INT 0
78999: PPUSH
// uc_nation := 0 ;
79000: LD_ADDR_OWVAR 21
79004: PUSH
79005: LD_INT 0
79007: ST_TO_ADDR
// hc_sex := sex_male ;
79008: LD_ADDR_OWVAR 27
79012: PUSH
79013: LD_INT 1
79015: ST_TO_ADDR
// hc_name :=  ;
79016: LD_ADDR_OWVAR 26
79020: PUSH
79021: LD_STRING 
79023: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
79024: LD_ADDR_OWVAR 28
79028: PUSH
79029: LD_INT 16
79031: ST_TO_ADDR
// hc_gallery :=  ;
79032: LD_ADDR_OWVAR 33
79036: PUSH
79037: LD_STRING 
79039: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
79040: LD_ADDR_OWVAR 31
79044: PUSH
79045: LD_INT 0
79047: PPUSH
79048: LD_INT 3
79050: PPUSH
79051: CALL_OW 12
79055: PUSH
79056: LD_INT 0
79058: PPUSH
79059: LD_INT 3
79061: PPUSH
79062: CALL_OW 12
79066: PUSH
79067: LD_INT 0
79069: PUSH
79070: LD_INT 0
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
79079: LD_ADDR_OWVAR 29
79083: PUSH
79084: LD_INT 10
79086: PUSH
79087: LD_INT 12
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: ST_TO_ADDR
// end ;
79094: LD_VAR 0 1
79098: RET
// export function PrepareApeman ( agressivity ) ; begin
79099: LD_INT 0
79101: PPUSH
// uc_side := 0 ;
79102: LD_ADDR_OWVAR 20
79106: PUSH
79107: LD_INT 0
79109: ST_TO_ADDR
// uc_nation := 0 ;
79110: LD_ADDR_OWVAR 21
79114: PUSH
79115: LD_INT 0
79117: ST_TO_ADDR
// hc_sex := sex_male ;
79118: LD_ADDR_OWVAR 27
79122: PUSH
79123: LD_INT 1
79125: ST_TO_ADDR
// hc_class := class_apeman ;
79126: LD_ADDR_OWVAR 28
79130: PUSH
79131: LD_INT 12
79133: ST_TO_ADDR
// hc_gallery :=  ;
79134: LD_ADDR_OWVAR 33
79138: PUSH
79139: LD_STRING 
79141: ST_TO_ADDR
// hc_name :=  ;
79142: LD_ADDR_OWVAR 26
79146: PUSH
79147: LD_STRING 
79149: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
79150: LD_ADDR_OWVAR 29
79154: PUSH
79155: LD_INT 10
79157: PUSH
79158: LD_INT 12
79160: PUSH
79161: EMPTY
79162: LIST
79163: LIST
79164: ST_TO_ADDR
// if agressivity = 0 then
79165: LD_VAR 0 1
79169: PUSH
79170: LD_INT 0
79172: EQUAL
79173: IFFALSE 79185
// hc_agressivity := 0 else
79175: LD_ADDR_OWVAR 35
79179: PUSH
79180: LD_INT 0
79182: ST_TO_ADDR
79183: GO 79206
// hc_agressivity := rand ( - agressivity , agressivity ) ;
79185: LD_ADDR_OWVAR 35
79189: PUSH
79190: LD_VAR 0 1
79194: NEG
79195: PPUSH
79196: LD_VAR 0 1
79200: PPUSH
79201: CALL_OW 12
79205: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
79206: LD_ADDR_OWVAR 31
79210: PUSH
79211: LD_INT 0
79213: PPUSH
79214: LD_INT 3
79216: PPUSH
79217: CALL_OW 12
79221: PUSH
79222: LD_INT 0
79224: PPUSH
79225: LD_INT 3
79227: PPUSH
79228: CALL_OW 12
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: LD_INT 0
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: LIST
79243: LIST
79244: ST_TO_ADDR
// end ;
79245: LD_VAR 0 2
79249: RET
// export function PrepareTiger ( agressivity ) ; begin
79250: LD_INT 0
79252: PPUSH
// uc_side := 0 ;
79253: LD_ADDR_OWVAR 20
79257: PUSH
79258: LD_INT 0
79260: ST_TO_ADDR
// uc_nation := 0 ;
79261: LD_ADDR_OWVAR 21
79265: PUSH
79266: LD_INT 0
79268: ST_TO_ADDR
// InitHc ;
79269: CALL_OW 19
// hc_class := class_tiger ;
79273: LD_ADDR_OWVAR 28
79277: PUSH
79278: LD_INT 14
79280: ST_TO_ADDR
// hc_gallery :=  ;
79281: LD_ADDR_OWVAR 33
79285: PUSH
79286: LD_STRING 
79288: ST_TO_ADDR
// hc_name :=  ;
79289: LD_ADDR_OWVAR 26
79293: PUSH
79294: LD_STRING 
79296: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
79297: LD_ADDR_OWVAR 35
79301: PUSH
79302: LD_VAR 0 1
79306: NEG
79307: PPUSH
79308: LD_VAR 0 1
79312: PPUSH
79313: CALL_OW 12
79317: ST_TO_ADDR
// end ;
79318: LD_VAR 0 2
79322: RET
// export function PrepareEnchidna ( ) ; begin
79323: LD_INT 0
79325: PPUSH
// uc_side := 0 ;
79326: LD_ADDR_OWVAR 20
79330: PUSH
79331: LD_INT 0
79333: ST_TO_ADDR
// uc_nation := 0 ;
79334: LD_ADDR_OWVAR 21
79338: PUSH
79339: LD_INT 0
79341: ST_TO_ADDR
// InitHc ;
79342: CALL_OW 19
// hc_class := class_baggie ;
79346: LD_ADDR_OWVAR 28
79350: PUSH
79351: LD_INT 13
79353: ST_TO_ADDR
// hc_gallery :=  ;
79354: LD_ADDR_OWVAR 33
79358: PUSH
79359: LD_STRING 
79361: ST_TO_ADDR
// hc_name :=  ;
79362: LD_ADDR_OWVAR 26
79366: PUSH
79367: LD_STRING 
79369: ST_TO_ADDR
// end ;
79370: LD_VAR 0 1
79374: RET
// export function PrepareFrog ( ) ; begin
79375: LD_INT 0
79377: PPUSH
// uc_side := 0 ;
79378: LD_ADDR_OWVAR 20
79382: PUSH
79383: LD_INT 0
79385: ST_TO_ADDR
// uc_nation := 0 ;
79386: LD_ADDR_OWVAR 21
79390: PUSH
79391: LD_INT 0
79393: ST_TO_ADDR
// InitHc ;
79394: CALL_OW 19
// hc_class := class_frog ;
79398: LD_ADDR_OWVAR 28
79402: PUSH
79403: LD_INT 19
79405: ST_TO_ADDR
// hc_gallery :=  ;
79406: LD_ADDR_OWVAR 33
79410: PUSH
79411: LD_STRING 
79413: ST_TO_ADDR
// hc_name :=  ;
79414: LD_ADDR_OWVAR 26
79418: PUSH
79419: LD_STRING 
79421: ST_TO_ADDR
// end ;
79422: LD_VAR 0 1
79426: RET
// export function PrepareFish ( ) ; begin
79427: LD_INT 0
79429: PPUSH
// uc_side := 0 ;
79430: LD_ADDR_OWVAR 20
79434: PUSH
79435: LD_INT 0
79437: ST_TO_ADDR
// uc_nation := 0 ;
79438: LD_ADDR_OWVAR 21
79442: PUSH
79443: LD_INT 0
79445: ST_TO_ADDR
// InitHc ;
79446: CALL_OW 19
// hc_class := class_fish ;
79450: LD_ADDR_OWVAR 28
79454: PUSH
79455: LD_INT 20
79457: ST_TO_ADDR
// hc_gallery :=  ;
79458: LD_ADDR_OWVAR 33
79462: PUSH
79463: LD_STRING 
79465: ST_TO_ADDR
// hc_name :=  ;
79466: LD_ADDR_OWVAR 26
79470: PUSH
79471: LD_STRING 
79473: ST_TO_ADDR
// end ;
79474: LD_VAR 0 1
79478: RET
// export function PrepareBird ( ) ; begin
79479: LD_INT 0
79481: PPUSH
// uc_side := 0 ;
79482: LD_ADDR_OWVAR 20
79486: PUSH
79487: LD_INT 0
79489: ST_TO_ADDR
// uc_nation := 0 ;
79490: LD_ADDR_OWVAR 21
79494: PUSH
79495: LD_INT 0
79497: ST_TO_ADDR
// InitHc ;
79498: CALL_OW 19
// hc_class := class_phororhacos ;
79502: LD_ADDR_OWVAR 28
79506: PUSH
79507: LD_INT 18
79509: ST_TO_ADDR
// hc_gallery :=  ;
79510: LD_ADDR_OWVAR 33
79514: PUSH
79515: LD_STRING 
79517: ST_TO_ADDR
// hc_name :=  ;
79518: LD_ADDR_OWVAR 26
79522: PUSH
79523: LD_STRING 
79525: ST_TO_ADDR
// end ;
79526: LD_VAR 0 1
79530: RET
// export function PrepareHorse ( ) ; begin
79531: LD_INT 0
79533: PPUSH
// uc_side := 0 ;
79534: LD_ADDR_OWVAR 20
79538: PUSH
79539: LD_INT 0
79541: ST_TO_ADDR
// uc_nation := 0 ;
79542: LD_ADDR_OWVAR 21
79546: PUSH
79547: LD_INT 0
79549: ST_TO_ADDR
// InitHc ;
79550: CALL_OW 19
// hc_class := class_horse ;
79554: LD_ADDR_OWVAR 28
79558: PUSH
79559: LD_INT 21
79561: ST_TO_ADDR
// hc_gallery :=  ;
79562: LD_ADDR_OWVAR 33
79566: PUSH
79567: LD_STRING 
79569: ST_TO_ADDR
// hc_name :=  ;
79570: LD_ADDR_OWVAR 26
79574: PUSH
79575: LD_STRING 
79577: ST_TO_ADDR
// end ;
79578: LD_VAR 0 1
79582: RET
// export function PrepareMastodont ( ) ; begin
79583: LD_INT 0
79585: PPUSH
// uc_side := 0 ;
79586: LD_ADDR_OWVAR 20
79590: PUSH
79591: LD_INT 0
79593: ST_TO_ADDR
// uc_nation := 0 ;
79594: LD_ADDR_OWVAR 21
79598: PUSH
79599: LD_INT 0
79601: ST_TO_ADDR
// vc_chassis := class_mastodont ;
79602: LD_ADDR_OWVAR 37
79606: PUSH
79607: LD_INT 31
79609: ST_TO_ADDR
// vc_control := control_rider ;
79610: LD_ADDR_OWVAR 38
79614: PUSH
79615: LD_INT 4
79617: ST_TO_ADDR
// end ;
79618: LD_VAR 0 1
79622: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79623: LD_INT 0
79625: PPUSH
79626: PPUSH
79627: PPUSH
// uc_side = 0 ;
79628: LD_ADDR_OWVAR 20
79632: PUSH
79633: LD_INT 0
79635: ST_TO_ADDR
// uc_nation = 0 ;
79636: LD_ADDR_OWVAR 21
79640: PUSH
79641: LD_INT 0
79643: ST_TO_ADDR
// InitHc_All ( ) ;
79644: CALL_OW 584
// InitVc ;
79648: CALL_OW 20
// if mastodonts then
79652: LD_VAR 0 6
79656: IFFALSE 79723
// for i = 1 to mastodonts do
79658: LD_ADDR_VAR 0 11
79662: PUSH
79663: DOUBLE
79664: LD_INT 1
79666: DEC
79667: ST_TO_ADDR
79668: LD_VAR 0 6
79672: PUSH
79673: FOR_TO
79674: IFFALSE 79721
// begin vc_chassis := 31 ;
79676: LD_ADDR_OWVAR 37
79680: PUSH
79681: LD_INT 31
79683: ST_TO_ADDR
// vc_control := control_rider ;
79684: LD_ADDR_OWVAR 38
79688: PUSH
79689: LD_INT 4
79691: ST_TO_ADDR
// animal := CreateVehicle ;
79692: LD_ADDR_VAR 0 12
79696: PUSH
79697: CALL_OW 45
79701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79702: LD_VAR 0 12
79706: PPUSH
79707: LD_VAR 0 8
79711: PPUSH
79712: LD_INT 0
79714: PPUSH
79715: CALL 81865 0 3
// end ;
79719: GO 79673
79721: POP
79722: POP
// if horses then
79723: LD_VAR 0 5
79727: IFFALSE 79794
// for i = 1 to horses do
79729: LD_ADDR_VAR 0 11
79733: PUSH
79734: DOUBLE
79735: LD_INT 1
79737: DEC
79738: ST_TO_ADDR
79739: LD_VAR 0 5
79743: PUSH
79744: FOR_TO
79745: IFFALSE 79792
// begin hc_class := 21 ;
79747: LD_ADDR_OWVAR 28
79751: PUSH
79752: LD_INT 21
79754: ST_TO_ADDR
// hc_gallery :=  ;
79755: LD_ADDR_OWVAR 33
79759: PUSH
79760: LD_STRING 
79762: ST_TO_ADDR
// animal := CreateHuman ;
79763: LD_ADDR_VAR 0 12
79767: PUSH
79768: CALL_OW 44
79772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79773: LD_VAR 0 12
79777: PPUSH
79778: LD_VAR 0 8
79782: PPUSH
79783: LD_INT 0
79785: PPUSH
79786: CALL 81865 0 3
// end ;
79790: GO 79744
79792: POP
79793: POP
// if birds then
79794: LD_VAR 0 1
79798: IFFALSE 79865
// for i = 1 to birds do
79800: LD_ADDR_VAR 0 11
79804: PUSH
79805: DOUBLE
79806: LD_INT 1
79808: DEC
79809: ST_TO_ADDR
79810: LD_VAR 0 1
79814: PUSH
79815: FOR_TO
79816: IFFALSE 79863
// begin hc_class := 18 ;
79818: LD_ADDR_OWVAR 28
79822: PUSH
79823: LD_INT 18
79825: ST_TO_ADDR
// hc_gallery =  ;
79826: LD_ADDR_OWVAR 33
79830: PUSH
79831: LD_STRING 
79833: ST_TO_ADDR
// animal := CreateHuman ;
79834: LD_ADDR_VAR 0 12
79838: PUSH
79839: CALL_OW 44
79843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79844: LD_VAR 0 12
79848: PPUSH
79849: LD_VAR 0 8
79853: PPUSH
79854: LD_INT 0
79856: PPUSH
79857: CALL 81865 0 3
// end ;
79861: GO 79815
79863: POP
79864: POP
// if tigers then
79865: LD_VAR 0 2
79869: IFFALSE 79953
// for i = 1 to tigers do
79871: LD_ADDR_VAR 0 11
79875: PUSH
79876: DOUBLE
79877: LD_INT 1
79879: DEC
79880: ST_TO_ADDR
79881: LD_VAR 0 2
79885: PUSH
79886: FOR_TO
79887: IFFALSE 79951
// begin hc_class = class_tiger ;
79889: LD_ADDR_OWVAR 28
79893: PUSH
79894: LD_INT 14
79896: ST_TO_ADDR
// hc_gallery =  ;
79897: LD_ADDR_OWVAR 33
79901: PUSH
79902: LD_STRING 
79904: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79905: LD_ADDR_OWVAR 35
79909: PUSH
79910: LD_INT 7
79912: NEG
79913: PPUSH
79914: LD_INT 7
79916: PPUSH
79917: CALL_OW 12
79921: ST_TO_ADDR
// animal := CreateHuman ;
79922: LD_ADDR_VAR 0 12
79926: PUSH
79927: CALL_OW 44
79931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79932: LD_VAR 0 12
79936: PPUSH
79937: LD_VAR 0 8
79941: PPUSH
79942: LD_INT 0
79944: PPUSH
79945: CALL 81865 0 3
// end ;
79949: GO 79886
79951: POP
79952: POP
// if apemans then
79953: LD_VAR 0 3
79957: IFFALSE 80080
// for i = 1 to apemans do
79959: LD_ADDR_VAR 0 11
79963: PUSH
79964: DOUBLE
79965: LD_INT 1
79967: DEC
79968: ST_TO_ADDR
79969: LD_VAR 0 3
79973: PUSH
79974: FOR_TO
79975: IFFALSE 80078
// begin hc_class = class_apeman ;
79977: LD_ADDR_OWVAR 28
79981: PUSH
79982: LD_INT 12
79984: ST_TO_ADDR
// hc_gallery =  ;
79985: LD_ADDR_OWVAR 33
79989: PUSH
79990: LD_STRING 
79992: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
79993: LD_ADDR_OWVAR 35
79997: PUSH
79998: LD_INT 2
80000: NEG
80001: PPUSH
80002: LD_INT 2
80004: PPUSH
80005: CALL_OW 12
80009: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80010: LD_ADDR_OWVAR 31
80014: PUSH
80015: LD_INT 1
80017: PPUSH
80018: LD_INT 3
80020: PPUSH
80021: CALL_OW 12
80025: PUSH
80026: LD_INT 1
80028: PPUSH
80029: LD_INT 3
80031: PPUSH
80032: CALL_OW 12
80036: PUSH
80037: LD_INT 0
80039: PUSH
80040: LD_INT 0
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: ST_TO_ADDR
// animal := CreateHuman ;
80049: LD_ADDR_VAR 0 12
80053: PUSH
80054: CALL_OW 44
80058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80059: LD_VAR 0 12
80063: PPUSH
80064: LD_VAR 0 8
80068: PPUSH
80069: LD_INT 0
80071: PPUSH
80072: CALL 81865 0 3
// end ;
80076: GO 79974
80078: POP
80079: POP
// if enchidnas then
80080: LD_VAR 0 4
80084: IFFALSE 80151
// for i = 1 to enchidnas do
80086: LD_ADDR_VAR 0 11
80090: PUSH
80091: DOUBLE
80092: LD_INT 1
80094: DEC
80095: ST_TO_ADDR
80096: LD_VAR 0 4
80100: PUSH
80101: FOR_TO
80102: IFFALSE 80149
// begin hc_class = 13 ;
80104: LD_ADDR_OWVAR 28
80108: PUSH
80109: LD_INT 13
80111: ST_TO_ADDR
// hc_gallery =  ;
80112: LD_ADDR_OWVAR 33
80116: PUSH
80117: LD_STRING 
80119: ST_TO_ADDR
// animal := CreateHuman ;
80120: LD_ADDR_VAR 0 12
80124: PUSH
80125: CALL_OW 44
80129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80130: LD_VAR 0 12
80134: PPUSH
80135: LD_VAR 0 8
80139: PPUSH
80140: LD_INT 0
80142: PPUSH
80143: CALL 81865 0 3
// end ;
80147: GO 80101
80149: POP
80150: POP
// if fishes then
80151: LD_VAR 0 7
80155: IFFALSE 80222
// for i = 1 to fishes do
80157: LD_ADDR_VAR 0 11
80161: PUSH
80162: DOUBLE
80163: LD_INT 1
80165: DEC
80166: ST_TO_ADDR
80167: LD_VAR 0 7
80171: PUSH
80172: FOR_TO
80173: IFFALSE 80220
// begin hc_class = 20 ;
80175: LD_ADDR_OWVAR 28
80179: PUSH
80180: LD_INT 20
80182: ST_TO_ADDR
// hc_gallery =  ;
80183: LD_ADDR_OWVAR 33
80187: PUSH
80188: LD_STRING 
80190: ST_TO_ADDR
// animal := CreateHuman ;
80191: LD_ADDR_VAR 0 12
80195: PUSH
80196: CALL_OW 44
80200: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80201: LD_VAR 0 12
80205: PPUSH
80206: LD_VAR 0 9
80210: PPUSH
80211: LD_INT 0
80213: PPUSH
80214: CALL 81865 0 3
// end ;
80218: GO 80172
80220: POP
80221: POP
// end ;
80222: LD_VAR 0 10
80226: RET
// export function WantHeal ( sci , unit ) ; begin
80227: LD_INT 0
80229: PPUSH
// if GetTaskList ( sci ) > 0 then
80230: LD_VAR 0 1
80234: PPUSH
80235: CALL_OW 437
80239: PUSH
80240: LD_INT 0
80242: GREATER
80243: IFFALSE 80315
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80245: LD_VAR 0 1
80249: PPUSH
80250: CALL_OW 437
80254: PUSH
80255: LD_INT 1
80257: ARRAY
80258: PUSH
80259: LD_INT 1
80261: ARRAY
80262: PUSH
80263: LD_STRING l
80265: EQUAL
80266: IFFALSE 80293
80268: PUSH
80269: LD_VAR 0 1
80273: PPUSH
80274: CALL_OW 437
80278: PUSH
80279: LD_INT 1
80281: ARRAY
80282: PUSH
80283: LD_INT 4
80285: ARRAY
80286: PUSH
80287: LD_VAR 0 2
80291: EQUAL
80292: AND
80293: IFFALSE 80305
// result := true else
80295: LD_ADDR_VAR 0 3
80299: PUSH
80300: LD_INT 1
80302: ST_TO_ADDR
80303: GO 80313
// result := false ;
80305: LD_ADDR_VAR 0 3
80309: PUSH
80310: LD_INT 0
80312: ST_TO_ADDR
// end else
80313: GO 80323
// result := false ;
80315: LD_ADDR_VAR 0 3
80319: PUSH
80320: LD_INT 0
80322: ST_TO_ADDR
// end ;
80323: LD_VAR 0 3
80327: RET
// export function HealTarget ( sci ) ; begin
80328: LD_INT 0
80330: PPUSH
// if not sci then
80331: LD_VAR 0 1
80335: NOT
80336: IFFALSE 80340
// exit ;
80338: GO 80405
// result := 0 ;
80340: LD_ADDR_VAR 0 2
80344: PUSH
80345: LD_INT 0
80347: ST_TO_ADDR
// if GetTaskList ( sci ) then
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL_OW 437
80357: IFFALSE 80405
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80359: LD_VAR 0 1
80363: PPUSH
80364: CALL_OW 437
80368: PUSH
80369: LD_INT 1
80371: ARRAY
80372: PUSH
80373: LD_INT 1
80375: ARRAY
80376: PUSH
80377: LD_STRING l
80379: EQUAL
80380: IFFALSE 80405
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80382: LD_ADDR_VAR 0 2
80386: PUSH
80387: LD_VAR 0 1
80391: PPUSH
80392: CALL_OW 437
80396: PUSH
80397: LD_INT 1
80399: ARRAY
80400: PUSH
80401: LD_INT 4
80403: ARRAY
80404: ST_TO_ADDR
// end ;
80405: LD_VAR 0 2
80409: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80410: LD_INT 0
80412: PPUSH
80413: PPUSH
80414: PPUSH
80415: PPUSH
// if not base_units then
80416: LD_VAR 0 1
80420: NOT
80421: IFFALSE 80425
// exit ;
80423: GO 80512
// result := false ;
80425: LD_ADDR_VAR 0 2
80429: PUSH
80430: LD_INT 0
80432: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80433: LD_ADDR_VAR 0 5
80437: PUSH
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_INT 21
80445: PUSH
80446: LD_INT 3
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: PPUSH
80453: CALL_OW 72
80457: ST_TO_ADDR
// if not tmp then
80458: LD_VAR 0 5
80462: NOT
80463: IFFALSE 80467
// exit ;
80465: GO 80512
// for i in tmp do
80467: LD_ADDR_VAR 0 3
80471: PUSH
80472: LD_VAR 0 5
80476: PUSH
80477: FOR_IN
80478: IFFALSE 80510
// begin result := EnemyInRange ( i , 22 ) ;
80480: LD_ADDR_VAR 0 2
80484: PUSH
80485: LD_VAR 0 3
80489: PPUSH
80490: LD_INT 22
80492: PPUSH
80493: CALL 77927 0 2
80497: ST_TO_ADDR
// if result then
80498: LD_VAR 0 2
80502: IFFALSE 80508
// exit ;
80504: POP
80505: POP
80506: GO 80512
// end ;
80508: GO 80477
80510: POP
80511: POP
// end ;
80512: LD_VAR 0 2
80516: RET
// export function FilterByTag ( units , tag ) ; begin
80517: LD_INT 0
80519: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
80520: LD_ADDR_VAR 0 3
80524: PUSH
80525: LD_VAR 0 1
80529: PPUSH
80530: LD_INT 120
80532: PUSH
80533: LD_VAR 0 2
80537: PUSH
80538: EMPTY
80539: LIST
80540: LIST
80541: PPUSH
80542: CALL_OW 72
80546: ST_TO_ADDR
// end ;
80547: LD_VAR 0 3
80551: RET
// export function IsDriver ( un ) ; begin
80552: LD_INT 0
80554: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80555: LD_ADDR_VAR 0 2
80559: PUSH
80560: LD_VAR 0 1
80564: PUSH
80565: LD_INT 55
80567: PUSH
80568: EMPTY
80569: LIST
80570: PPUSH
80571: CALL_OW 69
80575: IN
80576: ST_TO_ADDR
// end ;
80577: LD_VAR 0 2
80581: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80582: LD_INT 0
80584: PPUSH
80585: PPUSH
// list := [ ] ;
80586: LD_ADDR_VAR 0 5
80590: PUSH
80591: EMPTY
80592: ST_TO_ADDR
// case d of 0 :
80593: LD_VAR 0 3
80597: PUSH
80598: LD_INT 0
80600: DOUBLE
80601: EQUAL
80602: IFTRUE 80606
80604: GO 80739
80606: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80607: LD_ADDR_VAR 0 5
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: LD_INT 4
80619: MINUS
80620: PUSH
80621: LD_VAR 0 2
80625: PUSH
80626: LD_INT 4
80628: MINUS
80629: PUSH
80630: LD_INT 2
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: PUSH
80638: LD_VAR 0 1
80642: PUSH
80643: LD_INT 3
80645: MINUS
80646: PUSH
80647: LD_VAR 0 2
80651: PUSH
80652: LD_INT 1
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: LIST
80659: PUSH
80660: LD_VAR 0 1
80664: PUSH
80665: LD_INT 4
80667: PLUS
80668: PUSH
80669: LD_VAR 0 2
80673: PUSH
80674: LD_INT 4
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: LIST
80681: PUSH
80682: LD_VAR 0 1
80686: PUSH
80687: LD_INT 3
80689: PLUS
80690: PUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_INT 3
80698: PLUS
80699: PUSH
80700: LD_INT 5
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: LIST
80707: PUSH
80708: LD_VAR 0 1
80712: PUSH
80713: LD_VAR 0 2
80717: PUSH
80718: LD_INT 4
80720: PLUS
80721: PUSH
80722: LD_INT 0
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: LIST
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: ST_TO_ADDR
// end ; 1 :
80737: GO 81437
80739: LD_INT 1
80741: DOUBLE
80742: EQUAL
80743: IFTRUE 80747
80745: GO 80880
80747: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80748: LD_ADDR_VAR 0 5
80752: PUSH
80753: LD_VAR 0 1
80757: PUSH
80758: LD_VAR 0 2
80762: PUSH
80763: LD_INT 4
80765: MINUS
80766: PUSH
80767: LD_INT 3
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: LIST
80774: PUSH
80775: LD_VAR 0 1
80779: PUSH
80780: LD_INT 3
80782: MINUS
80783: PUSH
80784: LD_VAR 0 2
80788: PUSH
80789: LD_INT 3
80791: MINUS
80792: PUSH
80793: LD_INT 2
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: LIST
80800: PUSH
80801: LD_VAR 0 1
80805: PUSH
80806: LD_INT 4
80808: MINUS
80809: PUSH
80810: LD_VAR 0 2
80814: PUSH
80815: LD_INT 1
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: LIST
80822: PUSH
80823: LD_VAR 0 1
80827: PUSH
80828: LD_VAR 0 2
80832: PUSH
80833: LD_INT 3
80835: PLUS
80836: PUSH
80837: LD_INT 0
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: LIST
80844: PUSH
80845: LD_VAR 0 1
80849: PUSH
80850: LD_INT 4
80852: PLUS
80853: PUSH
80854: LD_VAR 0 2
80858: PUSH
80859: LD_INT 4
80861: PLUS
80862: PUSH
80863: LD_INT 5
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: LIST
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: LIST
80875: LIST
80876: LIST
80877: ST_TO_ADDR
// end ; 2 :
80878: GO 81437
80880: LD_INT 2
80882: DOUBLE
80883: EQUAL
80884: IFTRUE 80888
80886: GO 81017
80888: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80889: LD_ADDR_VAR 0 5
80893: PUSH
80894: LD_VAR 0 1
80898: PUSH
80899: LD_VAR 0 2
80903: PUSH
80904: LD_INT 3
80906: MINUS
80907: PUSH
80908: LD_INT 3
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: LIST
80915: PUSH
80916: LD_VAR 0 1
80920: PUSH
80921: LD_INT 4
80923: PLUS
80924: PUSH
80925: LD_VAR 0 2
80929: PUSH
80930: LD_INT 4
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: LIST
80937: PUSH
80938: LD_VAR 0 1
80942: PUSH
80943: LD_VAR 0 2
80947: PUSH
80948: LD_INT 4
80950: PLUS
80951: PUSH
80952: LD_INT 0
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: LIST
80959: PUSH
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 3
80967: MINUS
80968: PUSH
80969: LD_VAR 0 2
80973: PUSH
80974: LD_INT 1
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: LIST
80981: PUSH
80982: LD_VAR 0 1
80986: PUSH
80987: LD_INT 4
80989: MINUS
80990: PUSH
80991: LD_VAR 0 2
80995: PUSH
80996: LD_INT 4
80998: MINUS
80999: PUSH
81000: LD_INT 2
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: LIST
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: LIST
81012: LIST
81013: LIST
81014: ST_TO_ADDR
// end ; 3 :
81015: GO 81437
81017: LD_INT 3
81019: DOUBLE
81020: EQUAL
81021: IFTRUE 81025
81023: GO 81158
81025: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81026: LD_ADDR_VAR 0 5
81030: PUSH
81031: LD_VAR 0 1
81035: PUSH
81036: LD_INT 3
81038: PLUS
81039: PUSH
81040: LD_VAR 0 2
81044: PUSH
81045: LD_INT 4
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: LIST
81052: PUSH
81053: LD_VAR 0 1
81057: PUSH
81058: LD_INT 4
81060: PLUS
81061: PUSH
81062: LD_VAR 0 2
81066: PUSH
81067: LD_INT 4
81069: PLUS
81070: PUSH
81071: LD_INT 5
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: LIST
81078: PUSH
81079: LD_VAR 0 1
81083: PUSH
81084: LD_INT 4
81086: MINUS
81087: PUSH
81088: LD_VAR 0 2
81092: PUSH
81093: LD_INT 1
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: LIST
81100: PUSH
81101: LD_VAR 0 1
81105: PUSH
81106: LD_VAR 0 2
81110: PUSH
81111: LD_INT 4
81113: MINUS
81114: PUSH
81115: LD_INT 3
81117: PUSH
81118: EMPTY
81119: LIST
81120: LIST
81121: LIST
81122: PUSH
81123: LD_VAR 0 1
81127: PUSH
81128: LD_INT 3
81130: MINUS
81131: PUSH
81132: LD_VAR 0 2
81136: PUSH
81137: LD_INT 3
81139: MINUS
81140: PUSH
81141: LD_INT 2
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: LIST
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: ST_TO_ADDR
// end ; 4 :
81156: GO 81437
81158: LD_INT 4
81160: DOUBLE
81161: EQUAL
81162: IFTRUE 81166
81164: GO 81299
81166: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81167: LD_ADDR_VAR 0 5
81171: PUSH
81172: LD_VAR 0 1
81176: PUSH
81177: LD_VAR 0 2
81181: PUSH
81182: LD_INT 4
81184: PLUS
81185: PUSH
81186: LD_INT 0
81188: PUSH
81189: EMPTY
81190: LIST
81191: LIST
81192: LIST
81193: PUSH
81194: LD_VAR 0 1
81198: PUSH
81199: LD_INT 3
81201: PLUS
81202: PUSH
81203: LD_VAR 0 2
81207: PUSH
81208: LD_INT 3
81210: PLUS
81211: PUSH
81212: LD_INT 5
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: LIST
81219: PUSH
81220: LD_VAR 0 1
81224: PUSH
81225: LD_INT 4
81227: PLUS
81228: PUSH
81229: LD_VAR 0 2
81233: PUSH
81234: LD_INT 4
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: LIST
81241: PUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_VAR 0 2
81251: PUSH
81252: LD_INT 3
81254: MINUS
81255: PUSH
81256: LD_INT 3
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: LIST
81263: PUSH
81264: LD_VAR 0 1
81268: PUSH
81269: LD_INT 4
81271: MINUS
81272: PUSH
81273: LD_VAR 0 2
81277: PUSH
81278: LD_INT 4
81280: MINUS
81281: PUSH
81282: LD_INT 2
81284: PUSH
81285: EMPTY
81286: LIST
81287: LIST
81288: LIST
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: LIST
81296: ST_TO_ADDR
// end ; 5 :
81297: GO 81437
81299: LD_INT 5
81301: DOUBLE
81302: EQUAL
81303: IFTRUE 81307
81305: GO 81436
81307: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81308: LD_ADDR_VAR 0 5
81312: PUSH
81313: LD_VAR 0 1
81317: PUSH
81318: LD_INT 4
81320: MINUS
81321: PUSH
81322: LD_VAR 0 2
81326: PUSH
81327: LD_INT 1
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: LIST
81334: PUSH
81335: LD_VAR 0 1
81339: PUSH
81340: LD_VAR 0 2
81344: PUSH
81345: LD_INT 4
81347: MINUS
81348: PUSH
81349: LD_INT 3
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: LIST
81356: PUSH
81357: LD_VAR 0 1
81361: PUSH
81362: LD_INT 4
81364: PLUS
81365: PUSH
81366: LD_VAR 0 2
81370: PUSH
81371: LD_INT 4
81373: PLUS
81374: PUSH
81375: LD_INT 5
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: LIST
81382: PUSH
81383: LD_VAR 0 1
81387: PUSH
81388: LD_INT 3
81390: PLUS
81391: PUSH
81392: LD_VAR 0 2
81396: PUSH
81397: LD_INT 4
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: LIST
81404: PUSH
81405: LD_VAR 0 1
81409: PUSH
81410: LD_VAR 0 2
81414: PUSH
81415: LD_INT 3
81417: PLUS
81418: PUSH
81419: LD_INT 0
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: LIST
81426: PUSH
81427: EMPTY
81428: LIST
81429: LIST
81430: LIST
81431: LIST
81432: LIST
81433: ST_TO_ADDR
// end ; end ;
81434: GO 81437
81436: POP
// result := list ;
81437: LD_ADDR_VAR 0 4
81441: PUSH
81442: LD_VAR 0 5
81446: ST_TO_ADDR
// end ;
81447: LD_VAR 0 4
81451: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81452: LD_INT 0
81454: PPUSH
81455: PPUSH
81456: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81457: LD_VAR 0 1
81461: NOT
81462: IFTRUE 81490
81464: PUSH
81465: LD_VAR 0 2
81469: PUSH
81470: LD_INT 1
81472: PUSH
81473: LD_INT 2
81475: PUSH
81476: LD_INT 3
81478: PUSH
81479: LD_INT 4
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: LIST
81486: LIST
81487: IN
81488: NOT
81489: OR
81490: IFFALSE 81494
// exit ;
81492: GO 81577
// tmp := [ ] ;
81494: LD_ADDR_VAR 0 5
81498: PUSH
81499: EMPTY
81500: ST_TO_ADDR
// for i in units do
81501: LD_ADDR_VAR 0 4
81505: PUSH
81506: LD_VAR 0 1
81510: PUSH
81511: FOR_IN
81512: IFFALSE 81546
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
81514: LD_ADDR_VAR 0 5
81518: PUSH
81519: LD_VAR 0 5
81523: PPUSH
81524: LD_VAR 0 4
81528: PPUSH
81529: LD_VAR 0 2
81533: PPUSH
81534: CALL_OW 259
81538: PPUSH
81539: CALL 82972 0 2
81543: ST_TO_ADDR
81544: GO 81511
81546: POP
81547: POP
// if not tmp then
81548: LD_VAR 0 5
81552: NOT
81553: IFFALSE 81557
// exit ;
81555: GO 81577
// result := SortListByListDesc ( units , tmp ) ;
81557: LD_ADDR_VAR 0 3
81561: PUSH
81562: LD_VAR 0 1
81566: PPUSH
81567: LD_VAR 0 5
81571: PPUSH
81572: CALL_OW 77
81576: ST_TO_ADDR
// end ;
81577: LD_VAR 0 3
81581: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81582: LD_INT 0
81584: PPUSH
81585: PPUSH
81586: PPUSH
// result := false ;
81587: LD_ADDR_VAR 0 3
81591: PUSH
81592: LD_INT 0
81594: ST_TO_ADDR
// if not building then
81595: LD_VAR 0 2
81599: NOT
81600: IFFALSE 81604
// exit ;
81602: GO 81748
// x := GetX ( building ) ;
81604: LD_ADDR_VAR 0 4
81608: PUSH
81609: LD_VAR 0 2
81613: PPUSH
81614: CALL_OW 250
81618: ST_TO_ADDR
// y := GetY ( building ) ;
81619: LD_ADDR_VAR 0 5
81623: PUSH
81624: LD_VAR 0 2
81628: PPUSH
81629: CALL_OW 251
81633: ST_TO_ADDR
// if not x or not y then
81634: LD_VAR 0 4
81638: NOT
81639: IFTRUE 81648
81641: PUSH
81642: LD_VAR 0 5
81646: NOT
81647: OR
81648: IFFALSE 81652
// exit ;
81650: GO 81748
// if GetTaskList ( unit ) then
81652: LD_VAR 0 1
81656: PPUSH
81657: CALL_OW 437
81661: IFFALSE 81748
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81663: LD_STRING e
81665: PUSH
81666: LD_VAR 0 1
81670: PPUSH
81671: CALL_OW 437
81675: PUSH
81676: LD_INT 1
81678: ARRAY
81679: PUSH
81680: LD_INT 1
81682: ARRAY
81683: EQUAL
81684: IFFALSE 81711
81686: PUSH
81687: LD_VAR 0 4
81691: PUSH
81692: LD_VAR 0 1
81696: PPUSH
81697: CALL_OW 437
81701: PUSH
81702: LD_INT 1
81704: ARRAY
81705: PUSH
81706: LD_INT 2
81708: ARRAY
81709: EQUAL
81710: AND
81711: IFFALSE 81738
81713: PUSH
81714: LD_VAR 0 5
81718: PUSH
81719: LD_VAR 0 1
81723: PPUSH
81724: CALL_OW 437
81728: PUSH
81729: LD_INT 1
81731: ARRAY
81732: PUSH
81733: LD_INT 3
81735: ARRAY
81736: EQUAL
81737: AND
81738: IFFALSE 81748
// result := true end ;
81740: LD_ADDR_VAR 0 3
81744: PUSH
81745: LD_INT 1
81747: ST_TO_ADDR
// end ;
81748: LD_VAR 0 3
81752: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81753: LD_INT 0
81755: PPUSH
// result := false ;
81756: LD_ADDR_VAR 0 4
81760: PUSH
81761: LD_INT 0
81763: ST_TO_ADDR
// if GetTaskList ( unit ) then
81764: LD_VAR 0 1
81768: PPUSH
81769: CALL_OW 437
81773: IFFALSE 81860
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81775: LD_STRING M
81777: PUSH
81778: LD_VAR 0 1
81782: PPUSH
81783: CALL_OW 437
81787: PUSH
81788: LD_INT 1
81790: ARRAY
81791: PUSH
81792: LD_INT 1
81794: ARRAY
81795: EQUAL
81796: IFFALSE 81823
81798: PUSH
81799: LD_VAR 0 2
81803: PUSH
81804: LD_VAR 0 1
81808: PPUSH
81809: CALL_OW 437
81813: PUSH
81814: LD_INT 1
81816: ARRAY
81817: PUSH
81818: LD_INT 2
81820: ARRAY
81821: EQUAL
81822: AND
81823: IFFALSE 81850
81825: PUSH
81826: LD_VAR 0 3
81830: PUSH
81831: LD_VAR 0 1
81835: PPUSH
81836: CALL_OW 437
81840: PUSH
81841: LD_INT 1
81843: ARRAY
81844: PUSH
81845: LD_INT 3
81847: ARRAY
81848: EQUAL
81849: AND
81850: IFFALSE 81860
// result := true ;
81852: LD_ADDR_VAR 0 4
81856: PUSH
81857: LD_INT 1
81859: ST_TO_ADDR
// end ; end ;
81860: LD_VAR 0 4
81864: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81865: LD_INT 0
81867: PPUSH
81868: PPUSH
81869: PPUSH
81870: PPUSH
// if not unit or not area then
81871: LD_VAR 0 1
81875: NOT
81876: IFTRUE 81885
81878: PUSH
81879: LD_VAR 0 2
81883: NOT
81884: OR
81885: IFFALSE 81889
// exit ;
81887: GO 82065
// tmp := AreaToList ( area , i ) ;
81889: LD_ADDR_VAR 0 6
81893: PUSH
81894: LD_VAR 0 2
81898: PPUSH
81899: LD_VAR 0 5
81903: PPUSH
81904: CALL_OW 517
81908: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81909: LD_ADDR_VAR 0 5
81913: PUSH
81914: DOUBLE
81915: LD_INT 1
81917: DEC
81918: ST_TO_ADDR
81919: LD_VAR 0 6
81923: PUSH
81924: LD_INT 1
81926: ARRAY
81927: PUSH
81928: FOR_TO
81929: IFFALSE 82063
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81931: LD_ADDR_VAR 0 7
81935: PUSH
81936: LD_VAR 0 6
81940: PUSH
81941: LD_INT 1
81943: ARRAY
81944: PUSH
81945: LD_VAR 0 5
81949: ARRAY
81950: PUSH
81951: LD_VAR 0 6
81955: PUSH
81956: LD_INT 2
81958: ARRAY
81959: PUSH
81960: LD_VAR 0 5
81964: ARRAY
81965: PUSH
81966: EMPTY
81967: LIST
81968: LIST
81969: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
81970: LD_INT 92
81972: PUSH
81973: LD_VAR 0 7
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PUSH
81982: LD_VAR 0 7
81986: PUSH
81987: LD_INT 2
81989: ARRAY
81990: PUSH
81991: LD_INT 2
81993: PUSH
81994: EMPTY
81995: LIST
81996: LIST
81997: LIST
81998: LIST
81999: PPUSH
82000: CALL_OW 69
82004: PUSH
82005: LD_INT 0
82007: EQUAL
82008: IFFALSE 82061
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82010: LD_VAR 0 1
82014: PPUSH
82015: LD_VAR 0 7
82019: PUSH
82020: LD_INT 1
82022: ARRAY
82023: PPUSH
82024: LD_VAR 0 7
82028: PUSH
82029: LD_INT 2
82031: ARRAY
82032: PPUSH
82033: LD_VAR 0 3
82037: PPUSH
82038: CALL_OW 48
// result := IsPlaced ( unit ) ;
82042: LD_ADDR_VAR 0 4
82046: PUSH
82047: LD_VAR 0 1
82051: PPUSH
82052: CALL_OW 305
82056: ST_TO_ADDR
// exit ;
82057: POP
82058: POP
82059: GO 82065
// end ; end ;
82061: GO 81928
82063: POP
82064: POP
// end ;
82065: LD_VAR 0 4
82069: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82070: LD_INT 0
82072: PPUSH
82073: PPUSH
82074: PPUSH
// if not side or side > 8 then
82075: LD_VAR 0 1
82079: NOT
82080: IFTRUE 82092
82082: PUSH
82083: LD_VAR 0 1
82087: PUSH
82088: LD_INT 8
82090: GREATER
82091: OR
82092: IFFALSE 82096
// exit ;
82094: GO 82283
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82096: LD_ADDR_VAR 0 4
82100: PUSH
82101: LD_INT 22
82103: PUSH
82104: LD_VAR 0 1
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: PUSH
82113: LD_INT 21
82115: PUSH
82116: LD_INT 3
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: PUSH
82123: EMPTY
82124: LIST
82125: LIST
82126: PPUSH
82127: CALL_OW 69
82131: ST_TO_ADDR
// if not tmp then
82132: LD_VAR 0 4
82136: NOT
82137: IFFALSE 82141
// exit ;
82139: GO 82283
// enable_addtolog := true ;
82141: LD_ADDR_OWVAR 81
82145: PUSH
82146: LD_INT 1
82148: ST_TO_ADDR
// AddToLog ( [ ) ;
82149: LD_STRING [
82151: PPUSH
82152: CALL_OW 561
// for i in tmp do
82156: LD_ADDR_VAR 0 3
82160: PUSH
82161: LD_VAR 0 4
82165: PUSH
82166: FOR_IN
82167: IFFALSE 82274
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82169: LD_STRING [
82171: PUSH
82172: LD_VAR 0 3
82176: PPUSH
82177: CALL_OW 266
82181: STR
82182: PUSH
82183: LD_STRING , 
82185: STR
82186: PUSH
82187: LD_VAR 0 3
82191: PPUSH
82192: CALL_OW 250
82196: STR
82197: PUSH
82198: LD_STRING , 
82200: STR
82201: PUSH
82202: LD_VAR 0 3
82206: PPUSH
82207: CALL_OW 251
82211: STR
82212: PUSH
82213: LD_STRING , 
82215: STR
82216: PUSH
82217: LD_VAR 0 3
82221: PPUSH
82222: CALL_OW 254
82226: STR
82227: PUSH
82228: LD_STRING , 
82230: STR
82231: PUSH
82232: LD_VAR 0 3
82236: PPUSH
82237: LD_INT 1
82239: PPUSH
82240: CALL_OW 268
82244: STR
82245: PUSH
82246: LD_STRING , 
82248: STR
82249: PUSH
82250: LD_VAR 0 3
82254: PPUSH
82255: LD_INT 2
82257: PPUSH
82258: CALL_OW 268
82262: STR
82263: PUSH
82264: LD_STRING ],
82266: STR
82267: PPUSH
82268: CALL_OW 561
// end ;
82272: GO 82166
82274: POP
82275: POP
// AddToLog ( ]; ) ;
82276: LD_STRING ];
82278: PPUSH
82279: CALL_OW 561
// end ;
82283: LD_VAR 0 2
82287: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82288: LD_INT 0
82290: PPUSH
82291: PPUSH
82292: PPUSH
82293: PPUSH
82294: PPUSH
// if not area or not rate or not max then
82295: LD_VAR 0 1
82299: NOT
82300: IFTRUE 82309
82302: PUSH
82303: LD_VAR 0 2
82307: NOT
82308: OR
82309: IFTRUE 82318
82311: PUSH
82312: LD_VAR 0 4
82316: NOT
82317: OR
82318: IFFALSE 82322
// exit ;
82320: GO 82511
// while 1 do
82322: LD_INT 1
82324: IFFALSE 82511
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82326: LD_ADDR_VAR 0 9
82330: PUSH
82331: LD_VAR 0 1
82335: PPUSH
82336: LD_INT 1
82338: PPUSH
82339: CALL_OW 287
82343: PUSH
82344: LD_INT 10
82346: MUL
82347: ST_TO_ADDR
// r := rate / 10 ;
82348: LD_ADDR_VAR 0 7
82352: PUSH
82353: LD_VAR 0 2
82357: PUSH
82358: LD_INT 10
82360: DIVREAL
82361: ST_TO_ADDR
// time := 1 1$00 ;
82362: LD_ADDR_VAR 0 8
82366: PUSH
82367: LD_INT 2100
82369: ST_TO_ADDR
// if amount < min then
82370: LD_VAR 0 9
82374: PUSH
82375: LD_VAR 0 3
82379: LESS
82380: IFFALSE 82398
// r := r * 2 else
82382: LD_ADDR_VAR 0 7
82386: PUSH
82387: LD_VAR 0 7
82391: PUSH
82392: LD_INT 2
82394: MUL
82395: ST_TO_ADDR
82396: GO 82424
// if amount > max then
82398: LD_VAR 0 9
82402: PUSH
82403: LD_VAR 0 4
82407: GREATER
82408: IFFALSE 82424
// r := r / 2 ;
82410: LD_ADDR_VAR 0 7
82414: PUSH
82415: LD_VAR 0 7
82419: PUSH
82420: LD_INT 2
82422: DIVREAL
82423: ST_TO_ADDR
// time := time / r ;
82424: LD_ADDR_VAR 0 8
82428: PUSH
82429: LD_VAR 0 8
82433: PUSH
82434: LD_VAR 0 7
82438: DIVREAL
82439: ST_TO_ADDR
// if time < 0 then
82440: LD_VAR 0 8
82444: PUSH
82445: LD_INT 0
82447: LESS
82448: IFFALSE 82465
// time := time * - 1 ;
82450: LD_ADDR_VAR 0 8
82454: PUSH
82455: LD_VAR 0 8
82459: PUSH
82460: LD_INT 1
82462: NEG
82463: MUL
82464: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
82465: LD_VAR 0 8
82469: PUSH
82470: LD_INT 35
82472: PPUSH
82473: LD_INT 875
82475: PPUSH
82476: CALL_OW 12
82480: PLUS
82481: PPUSH
82482: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82486: LD_INT 1
82488: PPUSH
82489: LD_INT 5
82491: PPUSH
82492: CALL_OW 12
82496: PPUSH
82497: LD_VAR 0 1
82501: PPUSH
82502: LD_INT 1
82504: PPUSH
82505: CALL_OW 55
// end ;
82509: GO 82322
// end ;
82511: LD_VAR 0 5
82515: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82516: LD_INT 0
82518: PPUSH
82519: PPUSH
82520: PPUSH
82521: PPUSH
82522: PPUSH
82523: PPUSH
82524: PPUSH
82525: PPUSH
// if not turrets or not factories then
82526: LD_VAR 0 1
82530: NOT
82531: IFTRUE 82540
82533: PUSH
82534: LD_VAR 0 2
82538: NOT
82539: OR
82540: IFFALSE 82544
// exit ;
82542: GO 82851
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82544: LD_ADDR_VAR 0 10
82548: PUSH
82549: LD_INT 5
82551: PUSH
82552: LD_INT 6
82554: PUSH
82555: EMPTY
82556: LIST
82557: LIST
82558: PUSH
82559: LD_INT 2
82561: PUSH
82562: LD_INT 4
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: PUSH
82569: LD_INT 3
82571: PUSH
82572: LD_INT 5
82574: PUSH
82575: EMPTY
82576: LIST
82577: LIST
82578: PUSH
82579: EMPTY
82580: LIST
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 24
82586: PUSH
82587: LD_INT 25
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PUSH
82594: LD_INT 23
82596: PUSH
82597: LD_INT 27
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: PUSH
82604: EMPTY
82605: LIST
82606: LIST
82607: PUSH
82608: LD_INT 42
82610: PUSH
82611: LD_INT 43
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: PUSH
82618: LD_INT 44
82620: PUSH
82621: LD_INT 46
82623: PUSH
82624: EMPTY
82625: LIST
82626: LIST
82627: PUSH
82628: LD_INT 45
82630: PUSH
82631: LD_INT 47
82633: PUSH
82634: EMPTY
82635: LIST
82636: LIST
82637: PUSH
82638: EMPTY
82639: LIST
82640: LIST
82641: LIST
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: LIST
82647: ST_TO_ADDR
// result := [ ] ;
82648: LD_ADDR_VAR 0 3
82652: PUSH
82653: EMPTY
82654: ST_TO_ADDR
// for i in turrets do
82655: LD_ADDR_VAR 0 4
82659: PUSH
82660: LD_VAR 0 1
82664: PUSH
82665: FOR_IN
82666: IFFALSE 82849
// begin nat := GetNation ( i ) ;
82668: LD_ADDR_VAR 0 7
82672: PUSH
82673: LD_VAR 0 4
82677: PPUSH
82678: CALL_OW 248
82682: ST_TO_ADDR
// weapon := 0 ;
82683: LD_ADDR_VAR 0 8
82687: PUSH
82688: LD_INT 0
82690: ST_TO_ADDR
// if not nat then
82691: LD_VAR 0 7
82695: NOT
82696: IFFALSE 82700
// continue ;
82698: GO 82665
// for j in list [ nat ] do
82700: LD_ADDR_VAR 0 5
82704: PUSH
82705: LD_VAR 0 10
82709: PUSH
82710: LD_VAR 0 7
82714: ARRAY
82715: PUSH
82716: FOR_IN
82717: IFFALSE 82758
// if GetBWeapon ( i ) = j [ 1 ] then
82719: LD_VAR 0 4
82723: PPUSH
82724: CALL_OW 269
82728: PUSH
82729: LD_VAR 0 5
82733: PUSH
82734: LD_INT 1
82736: ARRAY
82737: EQUAL
82738: IFFALSE 82756
// begin weapon := j [ 2 ] ;
82740: LD_ADDR_VAR 0 8
82744: PUSH
82745: LD_VAR 0 5
82749: PUSH
82750: LD_INT 2
82752: ARRAY
82753: ST_TO_ADDR
// break ;
82754: GO 82758
// end ;
82756: GO 82716
82758: POP
82759: POP
// if not weapon then
82760: LD_VAR 0 8
82764: NOT
82765: IFFALSE 82769
// continue ;
82767: GO 82665
// for k in factories do
82769: LD_ADDR_VAR 0 6
82773: PUSH
82774: LD_VAR 0 2
82778: PUSH
82779: FOR_IN
82780: IFFALSE 82845
// begin weapons := AvailableWeaponList ( k ) ;
82782: LD_ADDR_VAR 0 9
82786: PUSH
82787: LD_VAR 0 6
82791: PPUSH
82792: CALL_OW 478
82796: ST_TO_ADDR
// if not weapons then
82797: LD_VAR 0 9
82801: NOT
82802: IFFALSE 82806
// continue ;
82804: GO 82779
// if weapon in weapons then
82806: LD_VAR 0 8
82810: PUSH
82811: LD_VAR 0 9
82815: IN
82816: IFFALSE 82843
// begin result := [ i , weapon ] ;
82818: LD_ADDR_VAR 0 3
82822: PUSH
82823: LD_VAR 0 4
82827: PUSH
82828: LD_VAR 0 8
82832: PUSH
82833: EMPTY
82834: LIST
82835: LIST
82836: ST_TO_ADDR
// exit ;
82837: POP
82838: POP
82839: POP
82840: POP
82841: GO 82851
// end ; end ;
82843: GO 82779
82845: POP
82846: POP
// end ;
82847: GO 82665
82849: POP
82850: POP
// end ;
82851: LD_VAR 0 3
82855: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82856: LD_INT 0
82858: PPUSH
// if not side or side > 8 then
82859: LD_VAR 0 3
82863: NOT
82864: IFTRUE 82876
82866: PUSH
82867: LD_VAR 0 3
82871: PUSH
82872: LD_INT 8
82874: GREATER
82875: OR
82876: IFFALSE 82880
// exit ;
82878: GO 82939
// if not range then
82880: LD_VAR 0 4
82884: NOT
82885: IFFALSE 82896
// range := - 12 ;
82887: LD_ADDR_VAR 0 4
82891: PUSH
82892: LD_INT 12
82894: NEG
82895: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82896: LD_VAR 0 1
82900: PPUSH
82901: LD_VAR 0 2
82905: PPUSH
82906: LD_VAR 0 3
82910: PPUSH
82911: LD_VAR 0 4
82915: PPUSH
82916: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82920: LD_VAR 0 1
82924: PPUSH
82925: LD_VAR 0 2
82929: PPUSH
82930: LD_VAR 0 3
82934: PPUSH
82935: CALL_OW 331
// end ;
82939: LD_VAR 0 5
82943: RET
// export function Video ( mode ) ; begin
82944: LD_INT 0
82946: PPUSH
// ingame_video = mode ;
82947: LD_ADDR_OWVAR 52
82951: PUSH
82952: LD_VAR 0 1
82956: ST_TO_ADDR
// interface_hidden = mode ;
82957: LD_ADDR_OWVAR 54
82961: PUSH
82962: LD_VAR 0 1
82966: ST_TO_ADDR
// end ;
82967: LD_VAR 0 2
82971: RET
// export function Join ( array , element ) ; begin
82972: LD_INT 0
82974: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82975: LD_ADDR_VAR 0 3
82979: PUSH
82980: LD_VAR 0 1
82984: PPUSH
82985: LD_VAR 0 1
82989: PUSH
82990: LD_INT 1
82992: PLUS
82993: PPUSH
82994: LD_VAR 0 2
82998: PPUSH
82999: CALL_OW 1
83003: ST_TO_ADDR
// end ;
83004: LD_VAR 0 3
83008: RET
// export function JoinUnion ( array , element ) ; begin
83009: LD_INT 0
83011: PPUSH
// result := array union element ;
83012: LD_ADDR_VAR 0 3
83016: PUSH
83017: LD_VAR 0 1
83021: PUSH
83022: LD_VAR 0 2
83026: UNION
83027: ST_TO_ADDR
// end ;
83028: LD_VAR 0 3
83032: RET
// export function GetBehemoths ( side ) ; begin
83033: LD_INT 0
83035: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
83036: LD_ADDR_VAR 0 2
83040: PUSH
83041: LD_INT 22
83043: PUSH
83044: LD_VAR 0 1
83048: PUSH
83049: EMPTY
83050: LIST
83051: LIST
83052: PUSH
83053: LD_INT 31
83055: PUSH
83056: LD_INT 25
83058: PUSH
83059: EMPTY
83060: LIST
83061: LIST
83062: PUSH
83063: EMPTY
83064: LIST
83065: LIST
83066: PPUSH
83067: CALL_OW 69
83071: ST_TO_ADDR
// end ;
83072: LD_VAR 0 2
83076: RET
// export function Shuffle ( array ) ; var i , index ; begin
83077: LD_INT 0
83079: PPUSH
83080: PPUSH
83081: PPUSH
// result := [ ] ;
83082: LD_ADDR_VAR 0 2
83086: PUSH
83087: EMPTY
83088: ST_TO_ADDR
// if not array then
83089: LD_VAR 0 1
83093: NOT
83094: IFFALSE 83098
// exit ;
83096: GO 83197
// Randomize ;
83098: CALL_OW 10
// for i = array downto 1 do
83102: LD_ADDR_VAR 0 3
83106: PUSH
83107: DOUBLE
83108: LD_VAR 0 1
83112: INC
83113: ST_TO_ADDR
83114: LD_INT 1
83116: PUSH
83117: FOR_DOWNTO
83118: IFFALSE 83195
// begin index := rand ( 1 , array ) ;
83120: LD_ADDR_VAR 0 4
83124: PUSH
83125: LD_INT 1
83127: PPUSH
83128: LD_VAR 0 1
83132: PPUSH
83133: CALL_OW 12
83137: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83138: LD_ADDR_VAR 0 2
83142: PUSH
83143: LD_VAR 0 2
83147: PPUSH
83148: LD_VAR 0 2
83152: PUSH
83153: LD_INT 1
83155: PLUS
83156: PPUSH
83157: LD_VAR 0 1
83161: PUSH
83162: LD_VAR 0 4
83166: ARRAY
83167: PPUSH
83168: CALL_OW 2
83172: ST_TO_ADDR
// array := Delete ( array , index ) ;
83173: LD_ADDR_VAR 0 1
83177: PUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: LD_VAR 0 4
83187: PPUSH
83188: CALL_OW 3
83192: ST_TO_ADDR
// end ;
83193: GO 83117
83195: POP
83196: POP
// end ;
83197: LD_VAR 0 2
83201: RET
// export function GetBaseMaterials ( base ) ; begin
83202: LD_INT 0
83204: PPUSH
// result := [ 0 , 0 , 0 ] ;
83205: LD_ADDR_VAR 0 2
83209: PUSH
83210: LD_INT 0
83212: PUSH
83213: LD_INT 0
83215: PUSH
83216: LD_INT 0
83218: PUSH
83219: EMPTY
83220: LIST
83221: LIST
83222: LIST
83223: ST_TO_ADDR
// if not base then
83224: LD_VAR 0 1
83228: NOT
83229: IFFALSE 83233
// exit ;
83231: GO 83282
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83233: LD_ADDR_VAR 0 2
83237: PUSH
83238: LD_VAR 0 1
83242: PPUSH
83243: LD_INT 1
83245: PPUSH
83246: CALL_OW 275
83250: PUSH
83251: LD_VAR 0 1
83255: PPUSH
83256: LD_INT 2
83258: PPUSH
83259: CALL_OW 275
83263: PUSH
83264: LD_VAR 0 1
83268: PPUSH
83269: LD_INT 3
83271: PPUSH
83272: CALL_OW 275
83276: PUSH
83277: EMPTY
83278: LIST
83279: LIST
83280: LIST
83281: ST_TO_ADDR
// end ;
83282: LD_VAR 0 2
83286: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83287: LD_INT 0
83289: PPUSH
83290: PPUSH
// result := array ;
83291: LD_ADDR_VAR 0 3
83295: PUSH
83296: LD_VAR 0 1
83300: ST_TO_ADDR
// if size >= result then
83301: LD_VAR 0 2
83305: PUSH
83306: LD_VAR 0 3
83310: GREATEREQUAL
83311: IFFALSE 83315
// exit ;
83313: GO 83365
// if size then
83315: LD_VAR 0 2
83319: IFFALSE 83365
// for i := array downto size do
83321: LD_ADDR_VAR 0 4
83325: PUSH
83326: DOUBLE
83327: LD_VAR 0 1
83331: INC
83332: ST_TO_ADDR
83333: LD_VAR 0 2
83337: PUSH
83338: FOR_DOWNTO
83339: IFFALSE 83363
// result := Delete ( result , result ) ;
83341: LD_ADDR_VAR 0 3
83345: PUSH
83346: LD_VAR 0 3
83350: PPUSH
83351: LD_VAR 0 3
83355: PPUSH
83356: CALL_OW 3
83360: ST_TO_ADDR
83361: GO 83338
83363: POP
83364: POP
// end ;
83365: LD_VAR 0 3
83369: RET
// export function ComExit ( unit ) ; var tmp ; begin
83370: LD_INT 0
83372: PPUSH
83373: PPUSH
// if not IsInUnit ( unit ) then
83374: LD_VAR 0 1
83378: PPUSH
83379: CALL_OW 310
83383: NOT
83384: IFFALSE 83388
// exit ;
83386: GO 83448
// tmp := IsInUnit ( unit ) ;
83388: LD_ADDR_VAR 0 3
83392: PUSH
83393: LD_VAR 0 1
83397: PPUSH
83398: CALL_OW 310
83402: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83403: LD_VAR 0 3
83407: PPUSH
83408: CALL_OW 247
83412: PUSH
83413: LD_INT 2
83415: EQUAL
83416: IFFALSE 83429
// ComExitVehicle ( unit ) else
83418: LD_VAR 0 1
83422: PPUSH
83423: CALL_OW 121
83427: GO 83438
// ComExitBuilding ( unit ) ;
83429: LD_VAR 0 1
83433: PPUSH
83434: CALL_OW 122
// result := tmp ;
83438: LD_ADDR_VAR 0 2
83442: PUSH
83443: LD_VAR 0 3
83447: ST_TO_ADDR
// end ;
83448: LD_VAR 0 2
83452: RET
// export function ComExitAll ( units ) ; var i ; begin
83453: LD_INT 0
83455: PPUSH
83456: PPUSH
// if not units then
83457: LD_VAR 0 1
83461: NOT
83462: IFFALSE 83466
// exit ;
83464: GO 83492
// for i in units do
83466: LD_ADDR_VAR 0 3
83470: PUSH
83471: LD_VAR 0 1
83475: PUSH
83476: FOR_IN
83477: IFFALSE 83490
// ComExit ( i ) ;
83479: LD_VAR 0 3
83483: PPUSH
83484: CALL 83370 0 1
83488: GO 83476
83490: POP
83491: POP
// end ;
83492: LD_VAR 0 2
83496: RET
// export function ResetHc ; begin
83497: LD_INT 0
83499: PPUSH
// InitHc ;
83500: CALL_OW 19
// hc_importance := 0 ;
83504: LD_ADDR_OWVAR 32
83508: PUSH
83509: LD_INT 0
83511: ST_TO_ADDR
// end ;
83512: LD_VAR 0 1
83516: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83517: LD_INT 0
83519: PPUSH
83520: PPUSH
83521: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83522: LD_ADDR_VAR 0 6
83526: PUSH
83527: LD_VAR 0 1
83531: PUSH
83532: LD_VAR 0 3
83536: PLUS
83537: PUSH
83538: LD_INT 2
83540: DIV
83541: ST_TO_ADDR
// if _x < 0 then
83542: LD_VAR 0 6
83546: PUSH
83547: LD_INT 0
83549: LESS
83550: IFFALSE 83567
// _x := _x * - 1 ;
83552: LD_ADDR_VAR 0 6
83556: PUSH
83557: LD_VAR 0 6
83561: PUSH
83562: LD_INT 1
83564: NEG
83565: MUL
83566: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83567: LD_ADDR_VAR 0 7
83571: PUSH
83572: LD_VAR 0 2
83576: PUSH
83577: LD_VAR 0 4
83581: PLUS
83582: PUSH
83583: LD_INT 2
83585: DIV
83586: ST_TO_ADDR
// if _y < 0 then
83587: LD_VAR 0 7
83591: PUSH
83592: LD_INT 0
83594: LESS
83595: IFFALSE 83612
// _y := _y * - 1 ;
83597: LD_ADDR_VAR 0 7
83601: PUSH
83602: LD_VAR 0 7
83606: PUSH
83607: LD_INT 1
83609: NEG
83610: MUL
83611: ST_TO_ADDR
// result := [ _x , _y ] ;
83612: LD_ADDR_VAR 0 5
83616: PUSH
83617: LD_VAR 0 6
83621: PUSH
83622: LD_VAR 0 7
83626: PUSH
83627: EMPTY
83628: LIST
83629: LIST
83630: ST_TO_ADDR
// end ;
83631: LD_VAR 0 5
83635: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83636: LD_INT 0
83638: PPUSH
83639: PPUSH
83640: PPUSH
83641: PPUSH
// task := GetTaskList ( unit ) ;
83642: LD_ADDR_VAR 0 7
83646: PUSH
83647: LD_VAR 0 1
83651: PPUSH
83652: CALL_OW 437
83656: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83657: LD_VAR 0 7
83661: NOT
83662: IFFALSE 83681
83664: PUSH
83665: LD_VAR 0 1
83669: PPUSH
83670: LD_VAR 0 2
83674: PPUSH
83675: CALL_OW 308
83679: NOT
83680: AND
83681: IFFALSE 83685
// exit ;
83683: GO 83803
// if IsInArea ( unit , area ) then
83685: LD_VAR 0 1
83689: PPUSH
83690: LD_VAR 0 2
83694: PPUSH
83695: CALL_OW 308
83699: IFFALSE 83717
// begin ComMoveToArea ( unit , goAway ) ;
83701: LD_VAR 0 1
83705: PPUSH
83706: LD_VAR 0 3
83710: PPUSH
83711: CALL_OW 113
// exit ;
83715: GO 83803
// end ; if task [ 1 ] [ 1 ] <> M then
83717: LD_VAR 0 7
83721: PUSH
83722: LD_INT 1
83724: ARRAY
83725: PUSH
83726: LD_INT 1
83728: ARRAY
83729: PUSH
83730: LD_STRING M
83732: NONEQUAL
83733: IFFALSE 83737
// exit ;
83735: GO 83803
// x := task [ 1 ] [ 2 ] ;
83737: LD_ADDR_VAR 0 5
83741: PUSH
83742: LD_VAR 0 7
83746: PUSH
83747: LD_INT 1
83749: ARRAY
83750: PUSH
83751: LD_INT 2
83753: ARRAY
83754: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83755: LD_ADDR_VAR 0 6
83759: PUSH
83760: LD_VAR 0 7
83764: PUSH
83765: LD_INT 1
83767: ARRAY
83768: PUSH
83769: LD_INT 3
83771: ARRAY
83772: ST_TO_ADDR
// if InArea ( x , y , area ) then
83773: LD_VAR 0 5
83777: PPUSH
83778: LD_VAR 0 6
83782: PPUSH
83783: LD_VAR 0 2
83787: PPUSH
83788: CALL_OW 309
83792: IFFALSE 83803
// ComStop ( unit ) ;
83794: LD_VAR 0 1
83798: PPUSH
83799: CALL_OW 141
// end ;
83803: LD_VAR 0 4
83807: RET
// export function Abs ( value ) ; begin
83808: LD_INT 0
83810: PPUSH
// result := value ;
83811: LD_ADDR_VAR 0 2
83815: PUSH
83816: LD_VAR 0 1
83820: ST_TO_ADDR
// if value < 0 then
83821: LD_VAR 0 1
83825: PUSH
83826: LD_INT 0
83828: LESS
83829: IFFALSE 83846
// result := value * - 1 ;
83831: LD_ADDR_VAR 0 2
83835: PUSH
83836: LD_VAR 0 1
83840: PUSH
83841: LD_INT 1
83843: NEG
83844: MUL
83845: ST_TO_ADDR
// end ;
83846: LD_VAR 0 2
83850: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83851: LD_INT 0
83853: PPUSH
83854: PPUSH
83855: PPUSH
83856: PPUSH
83857: PPUSH
83858: PPUSH
83859: PPUSH
83860: PPUSH
// if not unit or not building then
83861: LD_VAR 0 1
83865: NOT
83866: IFTRUE 83875
83868: PUSH
83869: LD_VAR 0 2
83873: NOT
83874: OR
83875: IFFALSE 83879
// exit ;
83877: GO 84107
// x := GetX ( building ) ;
83879: LD_ADDR_VAR 0 4
83883: PUSH
83884: LD_VAR 0 2
83888: PPUSH
83889: CALL_OW 250
83893: ST_TO_ADDR
// y := GetY ( building ) ;
83894: LD_ADDR_VAR 0 6
83898: PUSH
83899: LD_VAR 0 2
83903: PPUSH
83904: CALL_OW 251
83908: ST_TO_ADDR
// d := GetDir ( building ) ;
83909: LD_ADDR_VAR 0 8
83913: PUSH
83914: LD_VAR 0 2
83918: PPUSH
83919: CALL_OW 254
83923: ST_TO_ADDR
// r := 4 ;
83924: LD_ADDR_VAR 0 9
83928: PUSH
83929: LD_INT 4
83931: ST_TO_ADDR
// for i := 1 to 5 do
83932: LD_ADDR_VAR 0 10
83936: PUSH
83937: DOUBLE
83938: LD_INT 1
83940: DEC
83941: ST_TO_ADDR
83942: LD_INT 5
83944: PUSH
83945: FOR_TO
83946: IFFALSE 84105
// begin _x := ShiftX ( x , d , r + i ) ;
83948: LD_ADDR_VAR 0 5
83952: PUSH
83953: LD_VAR 0 4
83957: PPUSH
83958: LD_VAR 0 8
83962: PPUSH
83963: LD_VAR 0 9
83967: PUSH
83968: LD_VAR 0 10
83972: PLUS
83973: PPUSH
83974: CALL_OW 272
83978: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83979: LD_ADDR_VAR 0 7
83983: PUSH
83984: LD_VAR 0 6
83988: PPUSH
83989: LD_VAR 0 8
83993: PPUSH
83994: LD_VAR 0 9
83998: PUSH
83999: LD_VAR 0 10
84003: PLUS
84004: PPUSH
84005: CALL_OW 273
84009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
84010: LD_VAR 0 5
84014: PPUSH
84015: LD_VAR 0 7
84019: PPUSH
84020: CALL_OW 488
84024: IFFALSE 84059
84026: PUSH
84027: LD_VAR 0 5
84031: PPUSH
84032: LD_VAR 0 7
84036: PPUSH
84037: CALL_OW 428
84041: PPUSH
84042: CALL_OW 247
84046: PUSH
84047: LD_INT 3
84049: PUSH
84050: LD_INT 2
84052: PUSH
84053: EMPTY
84054: LIST
84055: LIST
84056: IN
84057: NOT
84058: AND
84059: IFFALSE 84103
// begin ComMoveXY ( unit , _x , _y ) ;
84061: LD_VAR 0 1
84065: PPUSH
84066: LD_VAR 0 5
84070: PPUSH
84071: LD_VAR 0 7
84075: PPUSH
84076: CALL_OW 111
// result := [ _x , _y ] ;
84080: LD_ADDR_VAR 0 3
84084: PUSH
84085: LD_VAR 0 5
84089: PUSH
84090: LD_VAR 0 7
84094: PUSH
84095: EMPTY
84096: LIST
84097: LIST
84098: ST_TO_ADDR
// exit ;
84099: POP
84100: POP
84101: GO 84107
// end ; end ;
84103: GO 83945
84105: POP
84106: POP
// end ;
84107: LD_VAR 0 3
84111: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84112: LD_INT 0
84114: PPUSH
84115: PPUSH
84116: PPUSH
// result := 0 ;
84117: LD_ADDR_VAR 0 3
84121: PUSH
84122: LD_INT 0
84124: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84125: LD_VAR 0 1
84129: PUSH
84130: LD_INT 0
84132: LESS
84133: IFTRUE 84145
84135: PUSH
84136: LD_VAR 0 1
84140: PUSH
84141: LD_INT 8
84143: GREATER
84144: OR
84145: IFTRUE 84157
84147: PUSH
84148: LD_VAR 0 2
84152: PUSH
84153: LD_INT 0
84155: LESS
84156: OR
84157: IFTRUE 84169
84159: PUSH
84160: LD_VAR 0 2
84164: PUSH
84165: LD_INT 8
84167: GREATER
84168: OR
84169: IFFALSE 84173
// exit ;
84171: GO 84248
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84173: LD_ADDR_VAR 0 4
84177: PUSH
84178: LD_INT 22
84180: PUSH
84181: LD_VAR 0 2
84185: PUSH
84186: EMPTY
84187: LIST
84188: LIST
84189: PPUSH
84190: CALL_OW 69
84194: PUSH
84195: FOR_IN
84196: IFFALSE 84246
// begin un := UnitShoot ( i ) ;
84198: LD_ADDR_VAR 0 5
84202: PUSH
84203: LD_VAR 0 4
84207: PPUSH
84208: CALL_OW 504
84212: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84213: LD_VAR 0 5
84217: PPUSH
84218: CALL_OW 255
84222: PUSH
84223: LD_VAR 0 1
84227: EQUAL
84228: IFFALSE 84244
// begin result := un ;
84230: LD_ADDR_VAR 0 3
84234: PUSH
84235: LD_VAR 0 5
84239: ST_TO_ADDR
// exit ;
84240: POP
84241: POP
84242: GO 84248
// end ; end ;
84244: GO 84195
84246: POP
84247: POP
// end ;
84248: LD_VAR 0 3
84252: RET
// export function GetCargoBay ( units ) ; begin
84253: LD_INT 0
84255: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84256: LD_ADDR_VAR 0 2
84260: PUSH
84261: LD_VAR 0 1
84265: PPUSH
84266: LD_INT 2
84268: PUSH
84269: LD_INT 34
84271: PUSH
84272: LD_INT 12
84274: PUSH
84275: EMPTY
84276: LIST
84277: LIST
84278: PUSH
84279: LD_INT 34
84281: PUSH
84282: LD_INT 51
84284: PUSH
84285: EMPTY
84286: LIST
84287: LIST
84288: PUSH
84289: LD_INT 34
84291: PUSH
84292: LD_INT 32
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: PUSH
84299: LD_INT 34
84301: PUSH
84302: LD_INT 89
84304: PUSH
84305: EMPTY
84306: LIST
84307: LIST
84308: PUSH
84309: EMPTY
84310: LIST
84311: LIST
84312: LIST
84313: LIST
84314: LIST
84315: PPUSH
84316: CALL_OW 72
84320: ST_TO_ADDR
// end ;
84321: LD_VAR 0 2
84325: RET
// export function Negate ( value ) ; begin
84326: LD_INT 0
84328: PPUSH
// result := not value ;
84329: LD_ADDR_VAR 0 2
84333: PUSH
84334: LD_VAR 0 1
84338: NOT
84339: ST_TO_ADDR
// end ;
84340: LD_VAR 0 2
84344: RET
// export function Inc ( value ) ; begin
84345: LD_INT 0
84347: PPUSH
// result := value + 1 ;
84348: LD_ADDR_VAR 0 2
84352: PUSH
84353: LD_VAR 0 1
84357: PUSH
84358: LD_INT 1
84360: PLUS
84361: ST_TO_ADDR
// end ;
84362: LD_VAR 0 2
84366: RET
// export function Dec ( value ) ; begin
84367: LD_INT 0
84369: PPUSH
// result := value - 1 ;
84370: LD_ADDR_VAR 0 2
84374: PUSH
84375: LD_VAR 0 1
84379: PUSH
84380: LD_INT 1
84382: MINUS
84383: ST_TO_ADDR
// end ;
84384: LD_VAR 0 2
84388: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84389: LD_INT 0
84391: PPUSH
84392: PPUSH
84393: PPUSH
84394: PPUSH
84395: PPUSH
84396: PPUSH
84397: PPUSH
84398: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84399: LD_VAR 0 1
84403: PPUSH
84404: LD_VAR 0 2
84408: PPUSH
84409: CALL_OW 488
84413: NOT
84414: IFTRUE 84433
84416: PUSH
84417: LD_VAR 0 3
84421: PPUSH
84422: LD_VAR 0 4
84426: PPUSH
84427: CALL_OW 488
84431: NOT
84432: OR
84433: IFFALSE 84446
// begin result := - 1 ;
84435: LD_ADDR_VAR 0 5
84439: PUSH
84440: LD_INT 1
84442: NEG
84443: ST_TO_ADDR
// exit ;
84444: GO 84681
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84446: LD_ADDR_VAR 0 12
84450: PUSH
84451: LD_VAR 0 1
84455: PPUSH
84456: LD_VAR 0 2
84460: PPUSH
84461: LD_VAR 0 3
84465: PPUSH
84466: LD_VAR 0 4
84470: PPUSH
84471: CALL 83517 0 4
84475: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84476: LD_ADDR_VAR 0 11
84480: PUSH
84481: LD_VAR 0 1
84485: PPUSH
84486: LD_VAR 0 2
84490: PPUSH
84491: LD_VAR 0 12
84495: PUSH
84496: LD_INT 1
84498: ARRAY
84499: PPUSH
84500: LD_VAR 0 12
84504: PUSH
84505: LD_INT 2
84507: ARRAY
84508: PPUSH
84509: CALL_OW 298
84513: ST_TO_ADDR
// distance := 9999 ;
84514: LD_ADDR_VAR 0 10
84518: PUSH
84519: LD_INT 9999
84521: ST_TO_ADDR
// for i := 0 to 5 do
84522: LD_ADDR_VAR 0 6
84526: PUSH
84527: DOUBLE
84528: LD_INT 0
84530: DEC
84531: ST_TO_ADDR
84532: LD_INT 5
84534: PUSH
84535: FOR_TO
84536: IFFALSE 84679
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84538: LD_ADDR_VAR 0 7
84542: PUSH
84543: LD_VAR 0 1
84547: PPUSH
84548: LD_VAR 0 6
84552: PPUSH
84553: LD_VAR 0 11
84557: PPUSH
84558: CALL_OW 272
84562: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84563: LD_ADDR_VAR 0 8
84567: PUSH
84568: LD_VAR 0 2
84572: PPUSH
84573: LD_VAR 0 6
84577: PPUSH
84578: LD_VAR 0 11
84582: PPUSH
84583: CALL_OW 273
84587: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84588: LD_VAR 0 7
84592: PPUSH
84593: LD_VAR 0 8
84597: PPUSH
84598: CALL_OW 488
84602: NOT
84603: IFFALSE 84607
// continue ;
84605: GO 84535
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84607: LD_ADDR_VAR 0 9
84611: PUSH
84612: LD_VAR 0 12
84616: PUSH
84617: LD_INT 1
84619: ARRAY
84620: PPUSH
84621: LD_VAR 0 12
84625: PUSH
84626: LD_INT 2
84628: ARRAY
84629: PPUSH
84630: LD_VAR 0 7
84634: PPUSH
84635: LD_VAR 0 8
84639: PPUSH
84640: CALL_OW 298
84644: ST_TO_ADDR
// if tmp < distance then
84645: LD_VAR 0 9
84649: PUSH
84650: LD_VAR 0 10
84654: LESS
84655: IFFALSE 84677
// begin result := i ;
84657: LD_ADDR_VAR 0 5
84661: PUSH
84662: LD_VAR 0 6
84666: ST_TO_ADDR
// distance := tmp ;
84667: LD_ADDR_VAR 0 10
84671: PUSH
84672: LD_VAR 0 9
84676: ST_TO_ADDR
// end ; end ;
84677: GO 84535
84679: POP
84680: POP
// end ;
84681: LD_VAR 0 5
84685: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84686: LD_INT 0
84688: PPUSH
84689: PPUSH
// if not driver or not IsInUnit ( driver ) then
84690: LD_VAR 0 1
84694: NOT
84695: IFTRUE 84709
84697: PUSH
84698: LD_VAR 0 1
84702: PPUSH
84703: CALL_OW 310
84707: NOT
84708: OR
84709: IFFALSE 84713
// exit ;
84711: GO 84803
// vehicle := IsInUnit ( driver ) ;
84713: LD_ADDR_VAR 0 3
84717: PUSH
84718: LD_VAR 0 1
84722: PPUSH
84723: CALL_OW 310
84727: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84728: LD_VAR 0 1
84732: PPUSH
84733: LD_STRING \
84735: PUSH
84736: LD_INT 0
84738: PUSH
84739: LD_INT 0
84741: PUSH
84742: LD_INT 0
84744: PUSH
84745: LD_INT 0
84747: PUSH
84748: LD_INT 0
84750: PUSH
84751: LD_INT 0
84753: PUSH
84754: EMPTY
84755: LIST
84756: LIST
84757: LIST
84758: LIST
84759: LIST
84760: LIST
84761: LIST
84762: PUSH
84763: LD_STRING E
84765: PUSH
84766: LD_INT 0
84768: PUSH
84769: LD_INT 0
84771: PUSH
84772: LD_VAR 0 3
84776: PUSH
84777: LD_INT 0
84779: PUSH
84780: LD_INT 0
84782: PUSH
84783: LD_INT 0
84785: PUSH
84786: EMPTY
84787: LIST
84788: LIST
84789: LIST
84790: LIST
84791: LIST
84792: LIST
84793: LIST
84794: PUSH
84795: EMPTY
84796: LIST
84797: LIST
84798: PPUSH
84799: CALL_OW 446
// end ;
84803: LD_VAR 0 2
84807: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84808: LD_INT 0
84810: PPUSH
84811: PPUSH
// if not driver or not IsInUnit ( driver ) then
84812: LD_VAR 0 1
84816: NOT
84817: IFTRUE 84831
84819: PUSH
84820: LD_VAR 0 1
84824: PPUSH
84825: CALL_OW 310
84829: NOT
84830: OR
84831: IFFALSE 84835
// exit ;
84833: GO 84925
// vehicle := IsInUnit ( driver ) ;
84835: LD_ADDR_VAR 0 3
84839: PUSH
84840: LD_VAR 0 1
84844: PPUSH
84845: CALL_OW 310
84849: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84850: LD_VAR 0 1
84854: PPUSH
84855: LD_STRING \
84857: PUSH
84858: LD_INT 0
84860: PUSH
84861: LD_INT 0
84863: PUSH
84864: LD_INT 0
84866: PUSH
84867: LD_INT 0
84869: PUSH
84870: LD_INT 0
84872: PUSH
84873: LD_INT 0
84875: PUSH
84876: EMPTY
84877: LIST
84878: LIST
84879: LIST
84880: LIST
84881: LIST
84882: LIST
84883: LIST
84884: PUSH
84885: LD_STRING E
84887: PUSH
84888: LD_INT 0
84890: PUSH
84891: LD_INT 0
84893: PUSH
84894: LD_VAR 0 3
84898: PUSH
84899: LD_INT 0
84901: PUSH
84902: LD_INT 0
84904: PUSH
84905: LD_INT 0
84907: PUSH
84908: EMPTY
84909: LIST
84910: LIST
84911: LIST
84912: LIST
84913: LIST
84914: LIST
84915: LIST
84916: PUSH
84917: EMPTY
84918: LIST
84919: LIST
84920: PPUSH
84921: CALL_OW 447
// end ;
84925: LD_VAR 0 2
84929: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84930: LD_INT 0
84932: PPUSH
84933: PPUSH
84934: PPUSH
// tmp := [ ] ;
84935: LD_ADDR_VAR 0 5
84939: PUSH
84940: EMPTY
84941: ST_TO_ADDR
// for i in units do
84942: LD_ADDR_VAR 0 4
84946: PUSH
84947: LD_VAR 0 1
84951: PUSH
84952: FOR_IN
84953: IFFALSE 84991
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84955: LD_ADDR_VAR 0 5
84959: PUSH
84960: LD_VAR 0 5
84964: PPUSH
84965: LD_VAR 0 5
84969: PUSH
84970: LD_INT 1
84972: PLUS
84973: PPUSH
84974: LD_VAR 0 4
84978: PPUSH
84979: CALL_OW 256
84983: PPUSH
84984: CALL_OW 2
84988: ST_TO_ADDR
84989: GO 84952
84991: POP
84992: POP
// if not tmp then
84993: LD_VAR 0 5
84997: NOT
84998: IFFALSE 85002
// exit ;
85000: GO 85050
// if asc then
85002: LD_VAR 0 2
85006: IFFALSE 85030
// result := SortListByListAsc ( units , tmp ) else
85008: LD_ADDR_VAR 0 3
85012: PUSH
85013: LD_VAR 0 1
85017: PPUSH
85018: LD_VAR 0 5
85022: PPUSH
85023: CALL_OW 76
85027: ST_TO_ADDR
85028: GO 85050
// result := SortListByListDesc ( units , tmp ) ;
85030: LD_ADDR_VAR 0 3
85034: PUSH
85035: LD_VAR 0 1
85039: PPUSH
85040: LD_VAR 0 5
85044: PPUSH
85045: CALL_OW 77
85049: ST_TO_ADDR
// end ;
85050: LD_VAR 0 3
85054: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
85055: LD_INT 0
85057: PPUSH
85058: PPUSH
// task := GetTaskList ( mech ) ;
85059: LD_ADDR_VAR 0 4
85063: PUSH
85064: LD_VAR 0 1
85068: PPUSH
85069: CALL_OW 437
85073: ST_TO_ADDR
// if not task then
85074: LD_VAR 0 4
85078: NOT
85079: IFFALSE 85083
// exit ;
85081: GO 85127
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85083: LD_ADDR_VAR 0 3
85087: PUSH
85088: LD_VAR 0 4
85092: PUSH
85093: LD_INT 1
85095: ARRAY
85096: PUSH
85097: LD_INT 1
85099: ARRAY
85100: PUSH
85101: LD_STRING r
85103: EQUAL
85104: IFFALSE 85126
85106: PUSH
85107: LD_VAR 0 4
85111: PUSH
85112: LD_INT 1
85114: ARRAY
85115: PUSH
85116: LD_INT 4
85118: ARRAY
85119: PUSH
85120: LD_VAR 0 2
85124: EQUAL
85125: AND
85126: ST_TO_ADDR
// end ;
85127: LD_VAR 0 3
85131: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85132: LD_INT 0
85134: PPUSH
// SetDir ( unit , d ) ;
85135: LD_VAR 0 1
85139: PPUSH
85140: LD_VAR 0 4
85144: PPUSH
85145: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
85149: LD_ADDR_VAR 0 6
85153: PUSH
85154: LD_VAR 0 1
85158: PPUSH
85159: LD_VAR 0 2
85163: PPUSH
85164: LD_VAR 0 3
85168: PPUSH
85169: LD_VAR 0 5
85173: PPUSH
85174: CALL_OW 48
85178: ST_TO_ADDR
// end ;
85179: LD_VAR 0 6
85183: RET
// export function ToNaturalNumber ( number ) ; begin
85184: LD_INT 0
85186: PPUSH
// result := number div 1 ;
85187: LD_ADDR_VAR 0 2
85191: PUSH
85192: LD_VAR 0 1
85196: PUSH
85197: LD_INT 1
85199: DIV
85200: ST_TO_ADDR
// if number < 0 then
85201: LD_VAR 0 1
85205: PUSH
85206: LD_INT 0
85208: LESS
85209: IFFALSE 85219
// result := 0 ;
85211: LD_ADDR_VAR 0 2
85215: PUSH
85216: LD_INT 0
85218: ST_TO_ADDR
// end ;
85219: LD_VAR 0 2
85223: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
85224: LD_INT 0
85226: PPUSH
85227: PPUSH
85228: PPUSH
// if not buildings then
85229: LD_VAR 0 1
85233: NOT
85234: IFFALSE 85238
// exit ;
85236: GO 85353
// tmp := [ ] ;
85238: LD_ADDR_VAR 0 5
85242: PUSH
85243: EMPTY
85244: ST_TO_ADDR
// for b in buildings do
85245: LD_ADDR_VAR 0 4
85249: PUSH
85250: LD_VAR 0 1
85254: PUSH
85255: FOR_IN
85256: IFFALSE 85294
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
85258: LD_ADDR_VAR 0 5
85262: PUSH
85263: LD_VAR 0 5
85267: PPUSH
85268: LD_VAR 0 5
85272: PUSH
85273: LD_INT 1
85275: PLUS
85276: PPUSH
85277: LD_VAR 0 4
85281: PPUSH
85282: CALL_OW 266
85286: PPUSH
85287: CALL_OW 1
85291: ST_TO_ADDR
85292: GO 85255
85294: POP
85295: POP
// if not tmp then
85296: LD_VAR 0 5
85300: NOT
85301: IFFALSE 85305
// exit ;
85303: GO 85353
// if asc then
85305: LD_VAR 0 2
85309: IFFALSE 85333
// result := SortListByListAsc ( buildings , tmp ) else
85311: LD_ADDR_VAR 0 3
85315: PUSH
85316: LD_VAR 0 1
85320: PPUSH
85321: LD_VAR 0 5
85325: PPUSH
85326: CALL_OW 76
85330: ST_TO_ADDR
85331: GO 85353
// result := SortListByListDesc ( buildings , tmp ) ;
85333: LD_ADDR_VAR 0 3
85337: PUSH
85338: LD_VAR 0 1
85342: PPUSH
85343: LD_VAR 0 5
85347: PPUSH
85348: CALL_OW 77
85352: ST_TO_ADDR
// end ;
85353: LD_VAR 0 3
85357: RET
// export function SortByClass ( units , class ) ; var un ; begin
85358: LD_INT 0
85360: PPUSH
85361: PPUSH
// if not units or not class then
85362: LD_VAR 0 1
85366: NOT
85367: IFTRUE 85376
85369: PUSH
85370: LD_VAR 0 2
85374: NOT
85375: OR
85376: IFFALSE 85380
// exit ;
85378: GO 85475
// result := [ ] ;
85380: LD_ADDR_VAR 0 3
85384: PUSH
85385: EMPTY
85386: ST_TO_ADDR
// for un in units do
85387: LD_ADDR_VAR 0 4
85391: PUSH
85392: LD_VAR 0 1
85396: PUSH
85397: FOR_IN
85398: IFFALSE 85473
// if GetClass ( un ) = class then
85400: LD_VAR 0 4
85404: PPUSH
85405: CALL_OW 257
85409: PUSH
85410: LD_VAR 0 2
85414: EQUAL
85415: IFFALSE 85442
// result := Insert ( result , 1 , un ) else
85417: LD_ADDR_VAR 0 3
85421: PUSH
85422: LD_VAR 0 3
85426: PPUSH
85427: LD_INT 1
85429: PPUSH
85430: LD_VAR 0 4
85434: PPUSH
85435: CALL_OW 2
85439: ST_TO_ADDR
85440: GO 85471
// result := Replace ( result , result + 1 , un ) ;
85442: LD_ADDR_VAR 0 3
85446: PUSH
85447: LD_VAR 0 3
85451: PPUSH
85452: LD_VAR 0 3
85456: PUSH
85457: LD_INT 1
85459: PLUS
85460: PPUSH
85461: LD_VAR 0 4
85465: PPUSH
85466: CALL_OW 1
85470: ST_TO_ADDR
85471: GO 85397
85473: POP
85474: POP
// end ;
85475: LD_VAR 0 3
85479: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85480: LD_INT 0
85482: PPUSH
85483: PPUSH
85484: PPUSH
85485: PPUSH
85486: PPUSH
85487: PPUSH
85488: PPUSH
// result := [ ] ;
85489: LD_ADDR_VAR 0 4
85493: PUSH
85494: EMPTY
85495: ST_TO_ADDR
// if x - r < 0 then
85496: LD_VAR 0 1
85500: PUSH
85501: LD_VAR 0 3
85505: MINUS
85506: PUSH
85507: LD_INT 0
85509: LESS
85510: IFFALSE 85522
// min_x := 0 else
85512: LD_ADDR_VAR 0 8
85516: PUSH
85517: LD_INT 0
85519: ST_TO_ADDR
85520: GO 85538
// min_x := x - r ;
85522: LD_ADDR_VAR 0 8
85526: PUSH
85527: LD_VAR 0 1
85531: PUSH
85532: LD_VAR 0 3
85536: MINUS
85537: ST_TO_ADDR
// if y - r < 0 then
85538: LD_VAR 0 2
85542: PUSH
85543: LD_VAR 0 3
85547: MINUS
85548: PUSH
85549: LD_INT 0
85551: LESS
85552: IFFALSE 85564
// min_y := 0 else
85554: LD_ADDR_VAR 0 7
85558: PUSH
85559: LD_INT 0
85561: ST_TO_ADDR
85562: GO 85580
// min_y := y - r ;
85564: LD_ADDR_VAR 0 7
85568: PUSH
85569: LD_VAR 0 2
85573: PUSH
85574: LD_VAR 0 3
85578: MINUS
85579: ST_TO_ADDR
// max_x := x + r ;
85580: LD_ADDR_VAR 0 9
85584: PUSH
85585: LD_VAR 0 1
85589: PUSH
85590: LD_VAR 0 3
85594: PLUS
85595: ST_TO_ADDR
// max_y := y + r ;
85596: LD_ADDR_VAR 0 10
85600: PUSH
85601: LD_VAR 0 2
85605: PUSH
85606: LD_VAR 0 3
85610: PLUS
85611: ST_TO_ADDR
// for _x = min_x to max_x do
85612: LD_ADDR_VAR 0 5
85616: PUSH
85617: DOUBLE
85618: LD_VAR 0 8
85622: DEC
85623: ST_TO_ADDR
85624: LD_VAR 0 9
85628: PUSH
85629: FOR_TO
85630: IFFALSE 85731
// for _y = min_y to max_y do
85632: LD_ADDR_VAR 0 6
85636: PUSH
85637: DOUBLE
85638: LD_VAR 0 7
85642: DEC
85643: ST_TO_ADDR
85644: LD_VAR 0 10
85648: PUSH
85649: FOR_TO
85650: IFFALSE 85727
// begin if not ValidHex ( _x , _y ) then
85652: LD_VAR 0 5
85656: PPUSH
85657: LD_VAR 0 6
85661: PPUSH
85662: CALL_OW 488
85666: NOT
85667: IFFALSE 85671
// continue ;
85669: GO 85649
// if GetResourceTypeXY ( _x , _y ) then
85671: LD_VAR 0 5
85675: PPUSH
85676: LD_VAR 0 6
85680: PPUSH
85681: CALL_OW 283
85685: IFFALSE 85725
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85687: LD_ADDR_VAR 0 4
85691: PUSH
85692: LD_VAR 0 4
85696: PPUSH
85697: LD_VAR 0 4
85701: PUSH
85702: LD_INT 1
85704: PLUS
85705: PPUSH
85706: LD_VAR 0 5
85710: PUSH
85711: LD_VAR 0 6
85715: PUSH
85716: EMPTY
85717: LIST
85718: LIST
85719: PPUSH
85720: CALL_OW 1
85724: ST_TO_ADDR
// end ;
85725: GO 85649
85727: POP
85728: POP
85729: GO 85629
85731: POP
85732: POP
// end ;
85733: LD_VAR 0 4
85737: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85738: LD_INT 0
85740: PPUSH
85741: PPUSH
85742: PPUSH
85743: PPUSH
85744: PPUSH
85745: PPUSH
85746: PPUSH
85747: PPUSH
// if not units then
85748: LD_VAR 0 1
85752: NOT
85753: IFFALSE 85757
// exit ;
85755: GO 86289
// result := UnitFilter ( units , [ f_ok ] ) ;
85757: LD_ADDR_VAR 0 3
85761: PUSH
85762: LD_VAR 0 1
85766: PPUSH
85767: LD_INT 50
85769: PUSH
85770: EMPTY
85771: LIST
85772: PPUSH
85773: CALL_OW 72
85777: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85778: LD_ADDR_VAR 0 8
85782: PUSH
85783: LD_VAR 0 1
85787: PUSH
85788: LD_INT 1
85790: ARRAY
85791: PPUSH
85792: CALL_OW 255
85796: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
85797: LD_ADDR_VAR 0 10
85801: PUSH
85802: LD_INT 29
85804: PUSH
85805: LD_INT 91
85807: PUSH
85808: LD_INT 49
85810: PUSH
85811: EMPTY
85812: LIST
85813: LIST
85814: LIST
85815: ST_TO_ADDR
// if not result then
85816: LD_VAR 0 3
85820: NOT
85821: IFFALSE 85825
// exit ;
85823: GO 86289
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85825: LD_ADDR_VAR 0 5
85829: PUSH
85830: LD_INT 81
85832: PUSH
85833: LD_VAR 0 8
85837: PUSH
85838: EMPTY
85839: LIST
85840: LIST
85841: PPUSH
85842: CALL_OW 69
85846: ST_TO_ADDR
// for i in result do
85847: LD_ADDR_VAR 0 4
85851: PUSH
85852: LD_VAR 0 3
85856: PUSH
85857: FOR_IN
85858: IFFALSE 86287
// begin tag := GetTag ( i ) + 1 ;
85860: LD_ADDR_VAR 0 9
85864: PUSH
85865: LD_VAR 0 4
85869: PPUSH
85870: CALL_OW 110
85874: PUSH
85875: LD_INT 1
85877: PLUS
85878: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
85879: LD_ADDR_VAR 0 7
85883: PUSH
85884: LD_VAR 0 4
85888: PPUSH
85889: CALL_OW 250
85893: PPUSH
85894: LD_VAR 0 4
85898: PPUSH
85899: CALL_OW 251
85903: PPUSH
85904: LD_INT 4
85906: PPUSH
85907: CALL 85480 0 3
85911: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
85912: LD_VAR 0 4
85916: PPUSH
85917: CALL_OW 247
85921: PUSH
85922: LD_INT 2
85924: EQUAL
85925: IFFALSE 85937
85927: PUSH
85928: LD_VAR 0 7
85932: PUSH
85933: LD_INT 2
85935: GREATER
85936: AND
85937: IFFALSE 85957
85939: PUSH
85940: LD_VAR 0 4
85944: PPUSH
85945: CALL_OW 264
85949: PUSH
85950: LD_VAR 0 10
85954: IN
85955: NOT
85956: AND
85957: IFFALSE 85996
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85959: LD_VAR 0 4
85963: PPUSH
85964: LD_VAR 0 7
85968: PUSH
85969: LD_INT 1
85971: ARRAY
85972: PUSH
85973: LD_INT 1
85975: ARRAY
85976: PPUSH
85977: LD_VAR 0 7
85981: PUSH
85982: LD_INT 1
85984: ARRAY
85985: PUSH
85986: LD_INT 2
85988: ARRAY
85989: PPUSH
85990: CALL_OW 116
85994: GO 86285
// if path > tag then
85996: LD_VAR 0 2
86000: PUSH
86001: LD_VAR 0 9
86005: GREATER
86006: IFFALSE 86214
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
86008: LD_ADDR_VAR 0 6
86012: PUSH
86013: LD_VAR 0 5
86017: PPUSH
86018: LD_INT 91
86020: PUSH
86021: LD_VAR 0 4
86025: PUSH
86026: LD_INT 8
86028: PUSH
86029: EMPTY
86030: LIST
86031: LIST
86032: LIST
86033: PPUSH
86034: CALL_OW 72
86038: ST_TO_ADDR
// if nearEnemy then
86039: LD_VAR 0 6
86043: IFFALSE 86112
// begin if GetWeapon ( i ) = ru_time_lapser then
86045: LD_VAR 0 4
86049: PPUSH
86050: CALL_OW 264
86054: PUSH
86055: LD_INT 49
86057: EQUAL
86058: IFFALSE 86086
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
86060: LD_VAR 0 4
86064: PPUSH
86065: LD_VAR 0 6
86069: PPUSH
86070: LD_VAR 0 4
86074: PPUSH
86075: CALL_OW 74
86079: PPUSH
86080: CALL_OW 112
86084: GO 86110
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
86086: LD_VAR 0 4
86090: PPUSH
86091: LD_VAR 0 6
86095: PPUSH
86096: LD_VAR 0 4
86100: PPUSH
86101: CALL_OW 74
86105: PPUSH
86106: CALL 87370 0 2
// end else
86110: GO 86212
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
86112: LD_VAR 0 4
86116: PPUSH
86117: LD_VAR 0 2
86121: PUSH
86122: LD_VAR 0 9
86126: ARRAY
86127: PUSH
86128: LD_INT 1
86130: ARRAY
86131: PPUSH
86132: LD_VAR 0 2
86136: PUSH
86137: LD_VAR 0 9
86141: ARRAY
86142: PUSH
86143: LD_INT 2
86145: ARRAY
86146: PPUSH
86147: CALL_OW 297
86151: PUSH
86152: LD_INT 6
86154: GREATER
86155: IFFALSE 86198
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
86157: LD_VAR 0 4
86161: PPUSH
86162: LD_VAR 0 2
86166: PUSH
86167: LD_VAR 0 9
86171: ARRAY
86172: PUSH
86173: LD_INT 1
86175: ARRAY
86176: PPUSH
86177: LD_VAR 0 2
86181: PUSH
86182: LD_VAR 0 9
86186: ARRAY
86187: PUSH
86188: LD_INT 2
86190: ARRAY
86191: PPUSH
86192: CALL_OW 114
86196: GO 86212
// SetTag ( i , tag ) ;
86198: LD_VAR 0 4
86202: PPUSH
86203: LD_VAR 0 9
86207: PPUSH
86208: CALL_OW 109
// end else
86212: GO 86285
// if enemy then
86214: LD_VAR 0 5
86218: IFFALSE 86285
// begin if GetWeapon ( i ) = ru_time_lapser then
86220: LD_VAR 0 4
86224: PPUSH
86225: CALL_OW 264
86229: PUSH
86230: LD_INT 49
86232: EQUAL
86233: IFFALSE 86261
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86235: LD_VAR 0 4
86239: PPUSH
86240: LD_VAR 0 5
86244: PPUSH
86245: LD_VAR 0 4
86249: PPUSH
86250: CALL_OW 74
86254: PPUSH
86255: CALL_OW 112
86259: GO 86285
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
86261: LD_VAR 0 4
86265: PPUSH
86266: LD_VAR 0 5
86270: PPUSH
86271: LD_VAR 0 4
86275: PPUSH
86276: CALL_OW 74
86280: PPUSH
86281: CALL 87370 0 2
// end ; end ;
86285: GO 85857
86287: POP
86288: POP
// end ;
86289: LD_VAR 0 3
86293: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
86294: LD_INT 0
86296: PPUSH
86297: PPUSH
86298: PPUSH
// if not unit or IsInUnit ( unit ) then
86299: LD_VAR 0 1
86303: NOT
86304: IFTRUE 86317
86306: PUSH
86307: LD_VAR 0 1
86311: PPUSH
86312: CALL_OW 310
86316: OR
86317: IFFALSE 86321
// exit ;
86319: GO 86412
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
86321: LD_ADDR_VAR 0 4
86325: PUSH
86326: LD_VAR 0 1
86330: PPUSH
86331: CALL_OW 250
86335: PPUSH
86336: LD_VAR 0 2
86340: PPUSH
86341: LD_INT 1
86343: PPUSH
86344: CALL_OW 272
86348: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86349: LD_ADDR_VAR 0 5
86353: PUSH
86354: LD_VAR 0 1
86358: PPUSH
86359: CALL_OW 251
86363: PPUSH
86364: LD_VAR 0 2
86368: PPUSH
86369: LD_INT 1
86371: PPUSH
86372: CALL_OW 273
86376: ST_TO_ADDR
// if ValidHex ( x , y ) then
86377: LD_VAR 0 4
86381: PPUSH
86382: LD_VAR 0 5
86386: PPUSH
86387: CALL_OW 488
86391: IFFALSE 86412
// ComTurnXY ( unit , x , y ) ;
86393: LD_VAR 0 1
86397: PPUSH
86398: LD_VAR 0 4
86402: PPUSH
86403: LD_VAR 0 5
86407: PPUSH
86408: CALL_OW 118
// end ;
86412: LD_VAR 0 3
86416: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86417: LD_INT 0
86419: PPUSH
86420: PPUSH
// result := false ;
86421: LD_ADDR_VAR 0 3
86425: PUSH
86426: LD_INT 0
86428: ST_TO_ADDR
// if not units then
86429: LD_VAR 0 2
86433: NOT
86434: IFFALSE 86438
// exit ;
86436: GO 86483
// for i in units do
86438: LD_ADDR_VAR 0 4
86442: PUSH
86443: LD_VAR 0 2
86447: PUSH
86448: FOR_IN
86449: IFFALSE 86481
// if See ( side , i ) then
86451: LD_VAR 0 1
86455: PPUSH
86456: LD_VAR 0 4
86460: PPUSH
86461: CALL_OW 292
86465: IFFALSE 86479
// begin result := true ;
86467: LD_ADDR_VAR 0 3
86471: PUSH
86472: LD_INT 1
86474: ST_TO_ADDR
// exit ;
86475: POP
86476: POP
86477: GO 86483
// end ;
86479: GO 86448
86481: POP
86482: POP
// end ;
86483: LD_VAR 0 3
86487: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86488: LD_INT 0
86490: PPUSH
86491: PPUSH
86492: PPUSH
86493: PPUSH
// if not unit or not points then
86494: LD_VAR 0 1
86498: NOT
86499: IFTRUE 86508
86501: PUSH
86502: LD_VAR 0 2
86506: NOT
86507: OR
86508: IFFALSE 86512
// exit ;
86510: GO 86602
// dist := 99999 ;
86512: LD_ADDR_VAR 0 5
86516: PUSH
86517: LD_INT 99999
86519: ST_TO_ADDR
// for i in points do
86520: LD_ADDR_VAR 0 4
86524: PUSH
86525: LD_VAR 0 2
86529: PUSH
86530: FOR_IN
86531: IFFALSE 86600
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86533: LD_ADDR_VAR 0 6
86537: PUSH
86538: LD_VAR 0 1
86542: PPUSH
86543: LD_VAR 0 4
86547: PUSH
86548: LD_INT 1
86550: ARRAY
86551: PPUSH
86552: LD_VAR 0 4
86556: PUSH
86557: LD_INT 2
86559: ARRAY
86560: PPUSH
86561: CALL_OW 297
86565: ST_TO_ADDR
// if tmpDist < dist then
86566: LD_VAR 0 6
86570: PUSH
86571: LD_VAR 0 5
86575: LESS
86576: IFFALSE 86598
// begin result := i ;
86578: LD_ADDR_VAR 0 3
86582: PUSH
86583: LD_VAR 0 4
86587: ST_TO_ADDR
// dist := tmpDist ;
86588: LD_ADDR_VAR 0 5
86592: PUSH
86593: LD_VAR 0 6
86597: ST_TO_ADDR
// end ; end ;
86598: GO 86530
86600: POP
86601: POP
// end ;
86602: LD_VAR 0 3
86606: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
86607: LD_INT 0
86609: PPUSH
// uc_side := side ;
86610: LD_ADDR_OWVAR 20
86614: PUSH
86615: LD_VAR 0 1
86619: ST_TO_ADDR
// uc_nation := 3 ;
86620: LD_ADDR_OWVAR 21
86624: PUSH
86625: LD_INT 3
86627: ST_TO_ADDR
// vc_chassis := 25 ;
86628: LD_ADDR_OWVAR 37
86632: PUSH
86633: LD_INT 25
86635: ST_TO_ADDR
// vc_engine := engine_siberite ;
86636: LD_ADDR_OWVAR 39
86640: PUSH
86641: LD_INT 3
86643: ST_TO_ADDR
// vc_control := control_computer ;
86644: LD_ADDR_OWVAR 38
86648: PUSH
86649: LD_INT 3
86651: ST_TO_ADDR
// vc_weapon := 59 ;
86652: LD_ADDR_OWVAR 40
86656: PUSH
86657: LD_INT 59
86659: ST_TO_ADDR
// result := CreateVehicle ;
86660: LD_ADDR_VAR 0 5
86664: PUSH
86665: CALL_OW 45
86669: ST_TO_ADDR
// SetDir ( result , d ) ;
86670: LD_VAR 0 5
86674: PPUSH
86675: LD_VAR 0 4
86679: PPUSH
86680: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
86684: LD_VAR 0 5
86688: PPUSH
86689: LD_VAR 0 2
86693: PPUSH
86694: LD_VAR 0 3
86698: PPUSH
86699: LD_INT 0
86701: PPUSH
86702: CALL_OW 48
// end ;
86706: LD_VAR 0 5
86710: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
86711: LD_INT 0
86713: PPUSH
86714: PPUSH
86715: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
86716: LD_ADDR_VAR 0 2
86720: PUSH
86721: LD_INT 0
86723: PUSH
86724: LD_INT 0
86726: PUSH
86727: LD_INT 0
86729: PUSH
86730: LD_INT 0
86732: PUSH
86733: EMPTY
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
86739: LD_VAR 0 1
86743: NOT
86744: IFTRUE 86777
86746: PUSH
86747: LD_VAR 0 1
86751: PPUSH
86752: CALL_OW 264
86756: PUSH
86757: LD_INT 12
86759: PUSH
86760: LD_INT 51
86762: PUSH
86763: LD_INT 32
86765: PUSH
86766: LD_INT 89
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: IN
86775: NOT
86776: OR
86777: IFFALSE 86781
// exit ;
86779: GO 86879
// for i := 1 to 3 do
86781: LD_ADDR_VAR 0 3
86785: PUSH
86786: DOUBLE
86787: LD_INT 1
86789: DEC
86790: ST_TO_ADDR
86791: LD_INT 3
86793: PUSH
86794: FOR_TO
86795: IFFALSE 86877
// begin tmp := GetCargo ( cargo , i ) ;
86797: LD_ADDR_VAR 0 4
86801: PUSH
86802: LD_VAR 0 1
86806: PPUSH
86807: LD_VAR 0 3
86811: PPUSH
86812: CALL_OW 289
86816: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
86817: LD_ADDR_VAR 0 2
86821: PUSH
86822: LD_VAR 0 2
86826: PPUSH
86827: LD_VAR 0 3
86831: PPUSH
86832: LD_VAR 0 4
86836: PPUSH
86837: CALL_OW 1
86841: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
86842: LD_ADDR_VAR 0 2
86846: PUSH
86847: LD_VAR 0 2
86851: PPUSH
86852: LD_INT 4
86854: PPUSH
86855: LD_VAR 0 2
86859: PUSH
86860: LD_INT 4
86862: ARRAY
86863: PUSH
86864: LD_VAR 0 4
86868: PLUS
86869: PPUSH
86870: CALL_OW 1
86874: ST_TO_ADDR
// end ;
86875: GO 86794
86877: POP
86878: POP
// end ;
86879: LD_VAR 0 2
86883: RET
// export function Length ( array ) ; begin
86884: LD_INT 0
86886: PPUSH
// result := array + 0 ;
86887: LD_ADDR_VAR 0 2
86891: PUSH
86892: LD_VAR 0 1
86896: PUSH
86897: LD_INT 0
86899: PLUS
86900: ST_TO_ADDR
// end ;
86901: LD_VAR 0 2
86905: RET
// export function PrepareArray ( array ) ; begin
86906: LD_INT 0
86908: PPUSH
// result := array diff 0 ;
86909: LD_ADDR_VAR 0 2
86913: PUSH
86914: LD_VAR 0 1
86918: PUSH
86919: LD_INT 0
86921: DIFF
86922: ST_TO_ADDR
// if not result [ 1 ] then
86923: LD_VAR 0 2
86927: PUSH
86928: LD_INT 1
86930: ARRAY
86931: NOT
86932: IFFALSE 86952
// result := Delete ( result , 1 ) ;
86934: LD_ADDR_VAR 0 2
86938: PUSH
86939: LD_VAR 0 2
86943: PPUSH
86944: LD_INT 1
86946: PPUSH
86947: CALL_OW 3
86951: ST_TO_ADDR
// end ;
86952: LD_VAR 0 2
86956: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
86957: LD_INT 0
86959: PPUSH
86960: PPUSH
86961: PPUSH
86962: PPUSH
// sibRocketRange := 25 ;
86963: LD_ADDR_VAR 0 6
86967: PUSH
86968: LD_INT 25
86970: ST_TO_ADDR
// result := false ;
86971: LD_ADDR_VAR 0 4
86975: PUSH
86976: LD_INT 0
86978: ST_TO_ADDR
// for i := 0 to 5 do
86979: LD_ADDR_VAR 0 5
86983: PUSH
86984: DOUBLE
86985: LD_INT 0
86987: DEC
86988: ST_TO_ADDR
86989: LD_INT 5
86991: PUSH
86992: FOR_TO
86993: IFFALSE 87060
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
86995: LD_VAR 0 1
86999: PPUSH
87000: LD_VAR 0 5
87004: PPUSH
87005: LD_VAR 0 6
87009: PPUSH
87010: CALL_OW 272
87014: PPUSH
87015: LD_VAR 0 2
87019: PPUSH
87020: LD_VAR 0 5
87024: PPUSH
87025: LD_VAR 0 6
87029: PPUSH
87030: CALL_OW 273
87034: PPUSH
87035: LD_VAR 0 3
87039: PPUSH
87040: CALL_OW 309
87044: IFFALSE 87058
// begin result := true ;
87046: LD_ADDR_VAR 0 4
87050: PUSH
87051: LD_INT 1
87053: ST_TO_ADDR
// exit ;
87054: POP
87055: POP
87056: GO 87062
// end ;
87058: GO 86992
87060: POP
87061: POP
// end ;
87062: LD_VAR 0 4
87066: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
87067: LD_INT 0
87069: PPUSH
87070: PPUSH
87071: PPUSH
// if btype = b_depot then
87072: LD_VAR 0 2
87076: PUSH
87077: LD_INT 0
87079: EQUAL
87080: IFFALSE 87092
// begin result := true ;
87082: LD_ADDR_VAR 0 3
87086: PUSH
87087: LD_INT 1
87089: ST_TO_ADDR
// exit ;
87090: GO 87212
// end ; pom := GetBase ( depot ) ;
87092: LD_ADDR_VAR 0 4
87096: PUSH
87097: LD_VAR 0 1
87101: PPUSH
87102: CALL_OW 274
87106: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
87107: LD_ADDR_VAR 0 5
87111: PUSH
87112: LD_VAR 0 2
87116: PPUSH
87117: LD_VAR 0 1
87121: PPUSH
87122: CALL_OW 248
87126: PPUSH
87127: CALL_OW 450
87131: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
87132: LD_ADDR_VAR 0 3
87136: PUSH
87137: LD_VAR 0 4
87141: PPUSH
87142: LD_INT 1
87144: PPUSH
87145: CALL_OW 275
87149: PUSH
87150: LD_VAR 0 5
87154: PUSH
87155: LD_INT 1
87157: ARRAY
87158: GREATEREQUAL
87159: IFFALSE 87185
87161: PUSH
87162: LD_VAR 0 4
87166: PPUSH
87167: LD_INT 2
87169: PPUSH
87170: CALL_OW 275
87174: PUSH
87175: LD_VAR 0 5
87179: PUSH
87180: LD_INT 2
87182: ARRAY
87183: GREATEREQUAL
87184: AND
87185: IFFALSE 87211
87187: PUSH
87188: LD_VAR 0 4
87192: PPUSH
87193: LD_INT 3
87195: PPUSH
87196: CALL_OW 275
87200: PUSH
87201: LD_VAR 0 5
87205: PUSH
87206: LD_INT 3
87208: ARRAY
87209: GREATEREQUAL
87210: AND
87211: ST_TO_ADDR
// end ;
87212: LD_VAR 0 3
87216: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
87217: LD_INT 0
87219: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
87220: LD_VAR 0 1
87224: PPUSH
87225: LD_VAR 0 2
87229: PPUSH
87230: LD_INT 0
87232: PPUSH
87233: LD_INT 0
87235: PPUSH
87236: LD_INT 1
87238: PPUSH
87239: LD_INT 0
87241: PPUSH
87242: CALL_OW 587
// end ;
87246: LD_VAR 0 3
87250: RET
// export function CenterOnNow ( unit ) ; begin
87251: LD_INT 0
87253: PPUSH
// result := IsInUnit ( unit ) ;
87254: LD_ADDR_VAR 0 2
87258: PUSH
87259: LD_VAR 0 1
87263: PPUSH
87264: CALL_OW 310
87268: ST_TO_ADDR
// if not result then
87269: LD_VAR 0 2
87273: NOT
87274: IFFALSE 87286
// result := unit ;
87276: LD_ADDR_VAR 0 2
87280: PUSH
87281: LD_VAR 0 1
87285: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
87286: LD_VAR 0 1
87290: PPUSH
87291: CALL_OW 87
// end ;
87295: LD_VAR 0 2
87299: RET
// export function ComMoveHex ( unit , hex ) ; begin
87300: LD_INT 0
87302: PPUSH
// if not hex then
87303: LD_VAR 0 2
87307: NOT
87308: IFFALSE 87312
// exit ;
87310: GO 87365
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
87312: LD_VAR 0 2
87316: PUSH
87317: LD_INT 1
87319: ARRAY
87320: PPUSH
87321: LD_VAR 0 2
87325: PUSH
87326: LD_INT 2
87328: ARRAY
87329: PPUSH
87330: CALL_OW 428
87334: IFFALSE 87338
// exit ;
87336: GO 87365
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
87338: LD_VAR 0 1
87342: PPUSH
87343: LD_VAR 0 2
87347: PUSH
87348: LD_INT 1
87350: ARRAY
87351: PPUSH
87352: LD_VAR 0 2
87356: PUSH
87357: LD_INT 2
87359: ARRAY
87360: PPUSH
87361: CALL_OW 111
// end ;
87365: LD_VAR 0 3
87369: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
87370: LD_INT 0
87372: PPUSH
87373: PPUSH
87374: PPUSH
// if not unit or not enemy then
87375: LD_VAR 0 1
87379: NOT
87380: IFTRUE 87389
87382: PUSH
87383: LD_VAR 0 2
87387: NOT
87388: OR
87389: IFFALSE 87393
// exit ;
87391: GO 87519
// x := GetX ( enemy ) ;
87393: LD_ADDR_VAR 0 4
87397: PUSH
87398: LD_VAR 0 2
87402: PPUSH
87403: CALL_OW 250
87407: ST_TO_ADDR
// y := GetY ( enemy ) ;
87408: LD_ADDR_VAR 0 5
87412: PUSH
87413: LD_VAR 0 2
87417: PPUSH
87418: CALL_OW 251
87422: ST_TO_ADDR
// if ValidHex ( x , y ) then
87423: LD_VAR 0 4
87427: PPUSH
87428: LD_VAR 0 5
87432: PPUSH
87433: CALL_OW 488
87437: IFFALSE 87519
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
87439: LD_VAR 0 2
87443: PPUSH
87444: CALL_OW 247
87448: PUSH
87449: LD_INT 3
87451: PUSH
87452: LD_INT 2
87454: PUSH
87455: EMPTY
87456: LIST
87457: LIST
87458: IN
87459: IFTRUE 87482
87461: PUSH
87462: LD_VAR 0 1
87466: PPUSH
87467: CALL_OW 255
87471: PPUSH
87472: LD_VAR 0 2
87476: PPUSH
87477: CALL_OW 292
87481: OR
87482: IFFALSE 87500
// ComAttackUnit ( unit , enemy ) else
87484: LD_VAR 0 1
87488: PPUSH
87489: LD_VAR 0 2
87493: PPUSH
87494: CALL_OW 115
87498: GO 87519
// ComAgressiveMove ( unit , x , y ) ;
87500: LD_VAR 0 1
87504: PPUSH
87505: LD_VAR 0 4
87509: PPUSH
87510: LD_VAR 0 5
87514: PPUSH
87515: CALL_OW 114
// end ;
87519: LD_VAR 0 3
87523: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
87524: LD_INT 0
87526: PPUSH
87527: PPUSH
87528: PPUSH
// list := AreaToList ( area , 0 ) ;
87529: LD_ADDR_VAR 0 5
87533: PUSH
87534: LD_VAR 0 1
87538: PPUSH
87539: LD_INT 0
87541: PPUSH
87542: CALL_OW 517
87546: ST_TO_ADDR
// if not list then
87547: LD_VAR 0 5
87551: NOT
87552: IFFALSE 87556
// exit ;
87554: GO 87686
// if all then
87556: LD_VAR 0 2
87560: IFFALSE 87648
// begin for i := 1 to list [ 1 ] do
87562: LD_ADDR_VAR 0 4
87566: PUSH
87567: DOUBLE
87568: LD_INT 1
87570: DEC
87571: ST_TO_ADDR
87572: LD_VAR 0 5
87576: PUSH
87577: LD_INT 1
87579: ARRAY
87580: PUSH
87581: FOR_TO
87582: IFFALSE 87644
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
87584: LD_ADDR_VAR 0 3
87588: PUSH
87589: LD_VAR 0 3
87593: PPUSH
87594: LD_VAR 0 3
87598: PUSH
87599: LD_INT 1
87601: PLUS
87602: PPUSH
87603: LD_VAR 0 5
87607: PUSH
87608: LD_INT 1
87610: ARRAY
87611: PUSH
87612: LD_VAR 0 4
87616: ARRAY
87617: PUSH
87618: LD_VAR 0 5
87622: PUSH
87623: LD_INT 2
87625: ARRAY
87626: PUSH
87627: LD_VAR 0 4
87631: ARRAY
87632: PUSH
87633: EMPTY
87634: LIST
87635: LIST
87636: PPUSH
87637: CALL_OW 1
87641: ST_TO_ADDR
87642: GO 87581
87644: POP
87645: POP
// exit ;
87646: GO 87686
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
87648: LD_ADDR_VAR 0 3
87652: PUSH
87653: LD_VAR 0 5
87657: PUSH
87658: LD_INT 1
87660: ARRAY
87661: PUSH
87662: LD_INT 1
87664: ARRAY
87665: PUSH
87666: LD_VAR 0 5
87670: PUSH
87671: LD_INT 2
87673: ARRAY
87674: PUSH
87675: LD_INT 1
87677: ARRAY
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: PUSH
87683: EMPTY
87684: LIST
87685: ST_TO_ADDR
// end ;
87686: LD_VAR 0 3
87690: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
87691: LD_INT 0
87693: PPUSH
87694: PPUSH
// list := AreaToList ( area , 0 ) ;
87695: LD_ADDR_VAR 0 4
87699: PUSH
87700: LD_VAR 0 1
87704: PPUSH
87705: LD_INT 0
87707: PPUSH
87708: CALL_OW 517
87712: ST_TO_ADDR
// if not list then
87713: LD_VAR 0 4
87717: NOT
87718: IFFALSE 87722
// exit ;
87720: GO 87763
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
87722: LD_ADDR_VAR 0 3
87726: PUSH
87727: LD_VAR 0 4
87731: PUSH
87732: LD_INT 1
87734: ARRAY
87735: PUSH
87736: LD_INT 1
87738: ARRAY
87739: PUSH
87740: LD_VAR 0 4
87744: PUSH
87745: LD_INT 2
87747: ARRAY
87748: PUSH
87749: LD_INT 1
87751: ARRAY
87752: PUSH
87753: LD_VAR 0 2
87757: PUSH
87758: EMPTY
87759: LIST
87760: LIST
87761: LIST
87762: ST_TO_ADDR
// end ;
87763: LD_VAR 0 3
87767: RET
// export function First ( array ) ; begin
87768: LD_INT 0
87770: PPUSH
// if not array then
87771: LD_VAR 0 1
87775: NOT
87776: IFFALSE 87780
// exit ;
87778: GO 87794
// result := array [ 1 ] ;
87780: LD_ADDR_VAR 0 2
87784: PUSH
87785: LD_VAR 0 1
87789: PUSH
87790: LD_INT 1
87792: ARRAY
87793: ST_TO_ADDR
// end ;
87794: LD_VAR 0 2
87798: RET
// export function Last ( array ) ; begin
87799: LD_INT 0
87801: PPUSH
// if not array then
87802: LD_VAR 0 1
87806: NOT
87807: IFFALSE 87811
// exit ;
87809: GO 87827
// result := array [ array ] ;
87811: LD_ADDR_VAR 0 2
87815: PUSH
87816: LD_VAR 0 1
87820: PUSH
87821: LD_VAR 0 1
87825: ARRAY
87826: ST_TO_ADDR
// end ;
87827: LD_VAR 0 2
87831: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
87832: LD_INT 0
87834: PPUSH
87835: PPUSH
// result := [ ] ;
87836: LD_ADDR_VAR 0 5
87840: PUSH
87841: EMPTY
87842: ST_TO_ADDR
// if not array then
87843: LD_VAR 0 1
87847: NOT
87848: IFFALSE 87852
// exit ;
87850: GO 87964
// for i := 1 to array do
87852: LD_ADDR_VAR 0 6
87856: PUSH
87857: DOUBLE
87858: LD_INT 1
87860: DEC
87861: ST_TO_ADDR
87862: LD_VAR 0 1
87866: PUSH
87867: FOR_TO
87868: IFFALSE 87962
// if array [ i ] [ index ] = value then
87870: LD_VAR 0 1
87874: PUSH
87875: LD_VAR 0 6
87879: ARRAY
87880: PUSH
87881: LD_VAR 0 2
87885: ARRAY
87886: PUSH
87887: LD_VAR 0 3
87891: EQUAL
87892: IFFALSE 87960
// begin if indexColumn then
87894: LD_VAR 0 4
87898: IFFALSE 87934
// result := Join ( result , array [ i ] [ indexColumn ] ) else
87900: LD_ADDR_VAR 0 5
87904: PUSH
87905: LD_VAR 0 5
87909: PPUSH
87910: LD_VAR 0 1
87914: PUSH
87915: LD_VAR 0 6
87919: ARRAY
87920: PUSH
87921: LD_VAR 0 4
87925: ARRAY
87926: PPUSH
87927: CALL 82972 0 2
87931: ST_TO_ADDR
87932: GO 87960
// result := Join ( result , array [ i ] ) ;
87934: LD_ADDR_VAR 0 5
87938: PUSH
87939: LD_VAR 0 5
87943: PPUSH
87944: LD_VAR 0 1
87948: PUSH
87949: LD_VAR 0 6
87953: ARRAY
87954: PPUSH
87955: CALL 82972 0 2
87959: ST_TO_ADDR
// end ;
87960: GO 87867
87962: POP
87963: POP
// end ;
87964: LD_VAR 0 5
87968: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
87969: LD_INT 0
87971: PPUSH
// if not vehicles or not parkingPoint then
87972: LD_VAR 0 1
87976: NOT
87977: IFTRUE 87986
87979: PUSH
87980: LD_VAR 0 2
87984: NOT
87985: OR
87986: IFFALSE 87990
// exit ;
87988: GO 88088
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
87990: LD_ADDR_VAR 0 1
87994: PUSH
87995: LD_VAR 0 1
87999: PPUSH
88000: LD_INT 50
88002: PUSH
88003: EMPTY
88004: LIST
88005: PUSH
88006: LD_INT 3
88008: PUSH
88009: LD_INT 92
88011: PUSH
88012: LD_VAR 0 2
88016: PUSH
88017: LD_INT 1
88019: ARRAY
88020: PUSH
88021: LD_VAR 0 2
88025: PUSH
88026: LD_INT 2
88028: ARRAY
88029: PUSH
88030: LD_INT 8
88032: PUSH
88033: EMPTY
88034: LIST
88035: LIST
88036: LIST
88037: LIST
88038: PUSH
88039: EMPTY
88040: LIST
88041: LIST
88042: PUSH
88043: EMPTY
88044: LIST
88045: LIST
88046: PPUSH
88047: CALL_OW 72
88051: ST_TO_ADDR
// if not vehicles then
88052: LD_VAR 0 1
88056: NOT
88057: IFFALSE 88061
// exit ;
88059: GO 88088
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
88061: LD_VAR 0 1
88065: PPUSH
88066: LD_VAR 0 2
88070: PUSH
88071: LD_INT 1
88073: ARRAY
88074: PPUSH
88075: LD_VAR 0 2
88079: PUSH
88080: LD_INT 2
88082: ARRAY
88083: PPUSH
88084: CALL_OW 111
// end ;
88088: LD_VAR 0 3
88092: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
88093: LD_INT 0
88095: PPUSH
88096: PPUSH
88097: PPUSH
// if not side or not area then
88098: LD_VAR 0 1
88102: NOT
88103: IFTRUE 88112
88105: PUSH
88106: LD_VAR 0 2
88110: NOT
88111: OR
88112: IFFALSE 88116
// exit ;
88114: GO 88235
// tmp := AreaToList ( area , 0 ) ;
88116: LD_ADDR_VAR 0 5
88120: PUSH
88121: LD_VAR 0 2
88125: PPUSH
88126: LD_INT 0
88128: PPUSH
88129: CALL_OW 517
88133: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
88134: LD_ADDR_VAR 0 4
88138: PUSH
88139: DOUBLE
88140: LD_INT 1
88142: DEC
88143: ST_TO_ADDR
88144: LD_VAR 0 5
88148: PUSH
88149: LD_INT 1
88151: ARRAY
88152: PUSH
88153: FOR_TO
88154: IFFALSE 88233
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
88156: LD_VAR 0 5
88160: PUSH
88161: LD_INT 1
88163: ARRAY
88164: PUSH
88165: LD_VAR 0 4
88169: ARRAY
88170: PPUSH
88171: LD_VAR 0 5
88175: PUSH
88176: LD_INT 2
88178: ARRAY
88179: PUSH
88180: LD_VAR 0 4
88184: ARRAY
88185: PPUSH
88186: CALL_OW 351
88190: IFFALSE 88231
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
88192: LD_VAR 0 5
88196: PUSH
88197: LD_INT 1
88199: ARRAY
88200: PUSH
88201: LD_VAR 0 4
88205: ARRAY
88206: PPUSH
88207: LD_VAR 0 5
88211: PUSH
88212: LD_INT 2
88214: ARRAY
88215: PUSH
88216: LD_VAR 0 4
88220: ARRAY
88221: PPUSH
88222: LD_VAR 0 1
88226: PPUSH
88227: CALL_OW 244
// end ;
88231: GO 88153
88233: POP
88234: POP
// end ;
88235: LD_VAR 0 3
88239: RET
// export function UniqueArray ( array ) ; var i ; begin
88240: LD_INT 0
88242: PPUSH
88243: PPUSH
// result := [ ] ;
88244: LD_ADDR_VAR 0 2
88248: PUSH
88249: EMPTY
88250: ST_TO_ADDR
// if not array then
88251: LD_VAR 0 1
88255: NOT
88256: IFFALSE 88260
// exit ;
88258: GO 88321
// for i := 1 to array do
88260: LD_ADDR_VAR 0 3
88264: PUSH
88265: DOUBLE
88266: LD_INT 1
88268: DEC
88269: ST_TO_ADDR
88270: LD_VAR 0 1
88274: PUSH
88275: FOR_TO
88276: IFFALSE 88319
// if not array [ i ] in result then
88278: LD_VAR 0 1
88282: PUSH
88283: LD_VAR 0 3
88287: ARRAY
88288: PUSH
88289: LD_VAR 0 2
88293: IN
88294: NOT
88295: IFFALSE 88317
// result := Join ( result , i ) ;
88297: LD_ADDR_VAR 0 2
88301: PUSH
88302: LD_VAR 0 2
88306: PPUSH
88307: LD_VAR 0 3
88311: PPUSH
88312: CALL 82972 0 2
88316: ST_TO_ADDR
88317: GO 88275
88319: POP
88320: POP
// end ; end_of_file
88321: LD_VAR 0 2
88325: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88326: LD_VAR 0 1
88330: PUSH
88331: LD_INT 200
88333: DOUBLE
88334: GREATEREQUAL
88335: IFFALSE 88343
88337: LD_INT 299
88339: DOUBLE
88340: LESSEQUAL
88341: IFTRUE 88345
88343: GO 88377
88345: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88346: LD_VAR 0 1
88350: PPUSH
88351: LD_VAR 0 2
88355: PPUSH
88356: LD_VAR 0 3
88360: PPUSH
88361: LD_VAR 0 4
88365: PPUSH
88366: LD_VAR 0 5
88370: PPUSH
88371: CALL 39048 0 5
88375: GO 88454
88377: LD_INT 300
88379: DOUBLE
88380: GREATEREQUAL
88381: IFFALSE 88389
88383: LD_INT 399
88385: DOUBLE
88386: LESSEQUAL
88387: IFTRUE 88391
88389: GO 88453
88391: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88392: LD_VAR 0 1
88396: PPUSH
88397: LD_VAR 0 2
88401: PPUSH
88402: LD_VAR 0 3
88406: PPUSH
88407: LD_VAR 0 4
88411: PPUSH
88412: LD_VAR 0 5
88416: PPUSH
88417: LD_VAR 0 6
88421: PPUSH
88422: LD_VAR 0 7
88426: PPUSH
88427: LD_VAR 0 8
88431: PPUSH
88432: LD_VAR 0 9
88436: PPUSH
88437: LD_VAR 0 10
88441: PPUSH
88442: LD_VAR 0 11
88446: PPUSH
88447: CALL 34851 0 11
88451: GO 88454
88453: POP
// end ;
88454: PPOPN 11
88456: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88457: LD_VAR 0 1
88461: PPUSH
88462: LD_VAR 0 2
88466: PPUSH
88467: LD_VAR 0 3
88471: PPUSH
88472: LD_VAR 0 4
88476: PPUSH
88477: LD_VAR 0 5
88481: PPUSH
88482: CALL 38348 0 5
// end ; end_of_file
88486: PPOPN 5
88488: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
88489: LD_VAR 0 1
88493: PPUSH
88494: LD_VAR 0 2
88498: PPUSH
88499: LD_VAR 0 3
88503: PPUSH
88504: LD_VAR 0 4
88508: PPUSH
88509: LD_VAR 0 5
88513: PPUSH
88514: LD_VAR 0 6
88518: PPUSH
88519: CALL 22391 0 6
// end ;
88523: PPOPN 6
88525: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
88526: LD_INT 0
88528: PPUSH
// begin if not units then
88529: LD_VAR 0 1
88533: NOT
88534: IFFALSE 88538
// exit ;
88536: GO 88572
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
88538: LD_VAR 0 1
88542: PPUSH
88543: LD_VAR 0 2
88547: PPUSH
88548: LD_VAR 0 3
88552: PPUSH
88553: LD_VAR 0 4
88557: PPUSH
88558: LD_VAR 0 5
88562: PPUSH
88563: LD_VAR 0 6
88567: PPUSH
88568: CALL 44745 0 6
// end ;
88572: PPOPN 7
88574: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
88575: CALL 22271 0 0
// end ;
88579: PPOPN 1
88581: END
