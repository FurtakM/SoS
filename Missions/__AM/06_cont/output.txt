// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 19580 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9794 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 39246 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 39246 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 39246 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 39246 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 39246 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 39246 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 39246 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 39246 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 39246 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 39246 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 39246 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 76315 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: ST_TO_ADDR
// for i = 1 to list do
7439: LD_ADDR_VAR 0 5
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_VAR 0 7
7453: PUSH
7454: FOR_TO
7455: IFFALSE 7527
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7457: LD_VAR 0 7
7461: PUSH
7462: LD_VAR 0 5
7466: ARRAY
7467: PPUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 321
7477: PUSH
7478: LD_INT 1
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 7
7486: PUSH
7487: LD_VAR 0 5
7491: ARRAY
7492: PPUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 482
7502: AND
7503: IFFALSE 7525
// AddComResearch ( lab , list [ i ] ) ;
7505: LD_VAR 0 2
7509: PPUSH
7510: LD_VAR 0 7
7514: PUSH
7515: LD_VAR 0 5
7519: ARRAY
7520: PPUSH
7521: CALL_OW 184
7525: GO 7454
7527: POP
7528: POP
// end ;
7529: LD_VAR 0 4
7533: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7534: LD_INT 0
7536: PPUSH
7537: PPUSH
7538: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7539: LD_INT 22
7541: PUSH
7542: LD_VAR 0 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 69
7569: PUSH
7570: LD_VAR 0 3
7574: LESSEQUAL
7575: IFFALSE 7683
// begin for i = 1 to vehCount do
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: DOUBLE
7583: LD_INT 1
7585: DEC
7586: ST_TO_ADDR
7587: LD_VAR 0 3
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7681
// begin weapon := weaponTab [ i ] ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_VAR 0 4
7604: PUSH
7605: LD_VAR 0 9
7609: ARRAY
7610: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7611: LD_VAR 0 10
7615: PUSH
7616: LD_INT 46
7618: EQUAL
7619: IFFALSE 7650
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 24
7628: PPUSH
7629: LD_VAR 0 5
7633: PPUSH
7634: LD_VAR 0 6
7638: PPUSH
7639: LD_VAR 0 10
7643: PPUSH
7644: CALL_OW 185
7648: GO 7679
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7650: LD_VAR 0 2
7654: PPUSH
7655: LD_VAR 0 7
7659: PPUSH
7660: LD_VAR 0 5
7664: PPUSH
7665: LD_VAR 0 6
7669: PPUSH
7670: LD_VAR 0 10
7674: PPUSH
7675: CALL_OW 185
// end ;
7679: GO 7592
7681: POP
7682: POP
// end ; end ;
7683: LD_VAR 0 8
7687: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7688: LD_INT 0
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7696: LD_ADDR_VAR 0 8
7700: PUSH
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 313
7710: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7711: LD_ADDR_VAR 0 9
7715: PUSH
7716: LD_VAR 0 3
7720: PPUSH
7721: LD_INT 22
7723: PUSH
7724: LD_VAR 0 1
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 750
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 70
7776: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_VAR 0 3
7786: PPUSH
7787: LD_INT 22
7789: PUSH
7790: LD_VAR 0 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: LD_INT 24
7814: PUSH
7815: LD_INT 1000
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7839: LD_VAR 0 6
7843: NOT
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_VAR 0 1
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 2
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 24
7869: PUSH
7870: LD_INT 250
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: PPUSH
7882: CALL_OW 69
7886: NOT
7887: AND
7888: IFFALSE 7892
// exit ;
7890: GO 8050
// if buildingsList and engineerOkInside then
7892: LD_VAR 0 6
7896: PUSH
7897: LD_VAR 0 8
7901: AND
7902: IFFALSE 7913
// ComExitBuilding ( engineerOkInside ) ;
7904: LD_VAR 0 8
7908: PPUSH
7909: CALL_OW 122
// if buildingsList and engineerOkOutside then
7913: LD_VAR 0 6
7917: PUSH
7918: LD_VAR 0 9
7922: AND
7923: IFFALSE 7943
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7925: LD_VAR 0 9
7929: PPUSH
7930: LD_VAR 0 6
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 0
7950: EQUAL
7951: PUSH
7952: LD_VAR 0 4
7956: PUSH
7957: LD_INT 0
7959: EQUAL
7960: AND
7961: PUSH
7962: LD_VAR 0 9
7966: AND
7967: IFFALSE 7983
// ComEnterUnit ( engineerOkOutside , depot ) ;
7969: LD_VAR 0 9
7973: PPUSH
7974: LD_VAR 0 2
7978: PPUSH
7979: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
7983: LD_VAR 0 9
7987: PUSH
7988: LD_VAR 0 6
7992: PUSH
7993: LD_INT 0
7995: EQUAL
7996: AND
7997: PUSH
7998: LD_VAR 0 4
8002: AND
8003: IFFALSE 8050
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8005: LD_VAR 0 9
8009: PPUSH
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 4
8023: PUSH
8024: LD_INT 2
8026: ARRAY
8027: PPUSH
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: ARRAY
8036: PPUSH
8037: LD_VAR 0 4
8041: PUSH
8042: LD_INT 4
8044: ARRAY
8045: PPUSH
8046: CALL_OW 145
// end ;
8050: LD_VAR 0 5
8054: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8066: LD_ADDR_VAR 0 6
8070: PUSH
8071: LD_INT 22
8073: PUSH
8074: LD_VAR 0 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 4
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 23
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 24
8105: PUSH
8106: LD_INT 251
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8124: LD_ADDR_VAR 0 7
8128: PUSH
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_INT 22
8136: PUSH
8137: LD_VAR 0 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 23
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 70
8182: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8183: LD_ADDR_VAR 0 10
8187: PUSH
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_INT 22
8195: PUSH
8196: LD_VAR 0 1
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 21
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 25
8220: PUSH
8221: LD_INT 3
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 750
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 70
8259: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8260: LD_ADDR_VAR 0 11
8264: PUSH
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 22
8272: PUSH
8273: LD_VAR 0 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 21
8284: PUSH
8285: LD_INT 1
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 3
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 3
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 1000
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 70
8336: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8337: LD_VAR 0 10
8341: NOT
8342: PUSH
8343: LD_VAR 0 11
8347: NOT
8348: AND
8349: PUSH
8350: LD_VAR 0 6
8354: NOT
8355: AND
8356: IFFALSE 8360
// exit ;
8358: GO 8566
// if damageUnits and sci_list then
8360: LD_VAR 0 10
8364: PUSH
8365: LD_VAR 0 6
8369: AND
8370: IFFALSE 8386
// ComMoveToArea ( damageUnits , healArea ) ;
8372: LD_VAR 0 10
8376: PPUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: CALL_OW 113
// if unitsToHeal and sci_list then
8386: LD_VAR 0 11
8390: PUSH
8391: LD_VAR 0 6
8395: AND
8396: IFFALSE 8407
// ComExitBuilding ( sci_list ) ;
8398: LD_VAR 0 6
8402: PPUSH
8403: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8407: LD_VAR 0 11
8411: PUSH
8412: LD_VAR 0 7
8416: AND
8417: IFFALSE 8437
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8419: LD_VAR 0 7
8423: PPUSH
8424: LD_VAR 0 11
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PPUSH
8433: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8437: LD_VAR 0 10
8441: PUSH
8442: LD_INT 0
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 11
8450: PUSH
8451: LD_INT 0
8453: EQUAL
8454: AND
8455: PUSH
8456: LD_VAR 0 7
8460: AND
8461: IFFALSE 8566
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8463: LD_ADDR_VAR 0 12
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 30
8492: PUSH
8493: LD_INT 8
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 69
8509: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8510: LD_ADDR_VAR 0 13
8514: PUSH
8515: LD_INT 1
8517: PPUSH
8518: LD_VAR 0 12
8522: PPUSH
8523: CALL_OW 12
8527: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8528: LD_VAR 0 7
8532: PPUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 60
8538: PUSH
8539: EMPTY
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: PPUSH
8551: LD_VAR 0 12
8555: PUSH
8556: LD_VAR 0 13
8560: ARRAY
8561: PPUSH
8562: CALL_OW 120
// end ; end ;
8566: LD_VAR 0 5
8570: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
// tmp := [ ] ;
8578: LD_ADDR_VAR 0 6
8582: PUSH
8583: EMPTY
8584: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_VAR 0 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 32
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: ST_TO_ADDR
// if bunkers then
8621: LD_VAR 0 7
8625: IFFALSE 8695
// for i in bunkers do
8627: LD_ADDR_VAR 0 4
8631: PUSH
8632: LD_VAR 0 7
8636: PUSH
8637: FOR_IN
8638: IFFALSE 8693
// for j in UnitsInside ( i ) do
8640: LD_ADDR_VAR 0 5
8644: PUSH
8645: LD_VAR 0 4
8649: PPUSH
8650: CALL_OW 313
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8689
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8658: LD_ADDR_VAR 0 6
8662: PUSH
8663: LD_VAR 0 6
8667: PPUSH
8668: LD_VAR 0 6
8672: PUSH
8673: LD_INT 1
8675: PLUS
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 1
8686: ST_TO_ADDR
8687: GO 8655
8689: POP
8690: POP
8691: GO 8637
8693: POP
8694: POP
// if tmp then
8695: LD_VAR 0 6
8699: IFFALSE 8739
// begin ComExitBuilding ( tmp ) ;
8701: LD_VAR 0 6
8705: PPUSH
8706: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8710: LD_VAR 0 6
8714: PPUSH
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 250
8724: PPUSH
8725: LD_VAR 0 2
8729: PPUSH
8730: CALL_OW 251
8734: PPUSH
8735: CALL_OW 174
// end ; end ;
8739: LD_VAR 0 3
8743: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
// enable ;
8749: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8750: LD_ADDR_VAR 0 6
8754: PUSH
8755: LD_VAR 0 3
8759: PPUSH
8760: CALL_OW 435
8764: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 22
8772: PUSH
8773: LD_VAR 0 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 34
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8803: LD_VAR 0 5
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: CALL_OW 435
8817: AND
8818: PUSH
8819: LD_VAR 0 6
8823: AND
8824: IFFALSE 8857
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8826: LD_VAR 0 5
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: LD_VAR 0 6
8839: PUSH
8840: LD_INT 1
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 6
8848: PUSH
8849: LD_INT 2
8851: ARRAY
8852: PPUSH
8853: CALL_OW 177
// end ;
8857: LD_VAR 0 4
8861: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8862: LD_INT 0
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8872: LD_ADDR_VAR 0 6
8876: PUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 56
8896: PUSH
8897: EMPTY
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 700
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 60
8915: PUSH
8916: EMPTY
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: LD_INT 25
8928: PUSH
8929: LD_INT 1
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 5
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 70
8984: PUSH
8985: LD_EXP 47
8989: PUSH
8990: LD_EXP 48
8994: UNION
8995: DIFF
8996: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8997: LD_ADDR_VAR 0 7
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 22
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 30
9021: PUSH
9022: LD_INT 32
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 58
9031: PUSH
9032: EMPTY
9033: LIST
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: LD_INT 251
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_VAR 0 2
9065: PPUSH
9066: LD_INT 22
9068: PUSH
9069: LD_VAR 0 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 4
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 30
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 70
9125: ST_TO_ADDR
// if barrackList then
9126: LD_VAR 0 9
9130: IFFALSE 9286
// begin if turretList = 0 then
9132: LD_VAR 0 7
9136: PUSH
9137: LD_INT 0
9139: EQUAL
9140: IFFALSE 9178
// begin if soldiersList then
9142: LD_VAR 0 6
9146: IFFALSE 9176
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9148: LD_VAR 0 6
9152: PPUSH
9153: LD_VAR 0 9
9157: PUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_VAR 0 9
9165: PPUSH
9166: CALL_OW 12
9170: ARRAY
9171: PPUSH
9172: CALL_OW 120
// end else
9176: GO 9286
// begin for i in barrackList do
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_VAR 0 9
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9284
// begin if not turretList then
9191: LD_VAR 0 7
9195: NOT
9196: IFFALSE 9202
// exit ;
9198: POP
9199: POP
9200: GO 9286
// insideUnits = UnitsInside ( i ) ;
9202: LD_ADDR_VAR 0 10
9206: PUSH
9207: LD_VAR 0 4
9211: PPUSH
9212: CALL_OW 313
9216: ST_TO_ADDR
// if insideUnits then
9217: LD_VAR 0 10
9221: IFFALSE 9282
// begin tmp := insideUnits [ 1 ] ;
9223: LD_ADDR_VAR 0 8
9227: PUSH
9228: LD_VAR 0 10
9232: PUSH
9233: LD_INT 1
9235: ARRAY
9236: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9246: LD_VAR 0 8
9250: PPUSH
9251: LD_VAR 0 7
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9264: LD_ADDR_VAR 0 7
9268: PUSH
9269: LD_VAR 0 7
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: CALL_OW 3
9281: ST_TO_ADDR
// end ; end ;
9282: GO 9188
9284: POP
9285: POP
// end ; end ; end ;
9286: LD_VAR 0 3
9290: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
9296: PPUSH
9297: PPUSH
9298: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9299: LD_ADDR_VAR 0 8
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_VAR 0 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 34
9328: PUSH
9329: LD_INT 52
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: ST_TO_ADDR
// if not craneList then
9346: LD_VAR 0 8
9350: NOT
9351: IFFALSE 9355
// exit ;
9353: GO 9789
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 21
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 3
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 1000
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9412: LD_VAR 0 9
9416: PUSH
9417: LD_VAR 0 8
9421: PPUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 750
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 72
9436: AND
9437: IFFALSE 9472
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9439: LD_VAR 0 8
9443: PPUSH
9444: LD_INT 24
9446: PUSH
9447: LD_INT 750
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 72
9458: PPUSH
9459: LD_VAR 0 9
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9472: LD_VAR 0 8
9476: PPUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 750
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL_OW 72
9498: IFFALSE 9536
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9500: LD_VAR 0 8
9504: PPUSH
9505: LD_INT 3
9507: PUSH
9508: LD_INT 24
9510: PUSH
9511: LD_INT 750
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PPUSH
9527: LD_VAR 0 2
9531: PPUSH
9532: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9536: LD_VAR 0 8
9540: PUSH
9541: LD_VAR 0 9
9545: PUSH
9546: LD_INT 0
9548: EQUAL
9549: AND
9550: PUSH
9551: LD_VAR 0 3
9555: AND
9556: IFFALSE 9603
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9558: LD_VAR 0 8
9562: PPUSH
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PPUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 2
9579: ARRAY
9580: PPUSH
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 3
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 4
9597: ARRAY
9598: PPUSH
9599: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 2
9612: PPUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 21
9627: PUSH
9628: LD_INT 2
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 34
9637: PUSH
9638: LD_INT 52
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: LD_INT 24
9650: PUSH
9651: LD_INT 750
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 70
9672: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9673: LD_ADDR_VAR 0 6
9677: PUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: LD_INT 22
9685: PUSH
9686: LD_VAR 0 1
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 0
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 70
9731: ST_TO_ADDR
// if crane then
9732: LD_VAR 0 7
9736: IFFALSE 9789
// for i in crane do
9738: LD_ADDR_VAR 0 5
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9787
// begin if dep then
9751: LD_VAR 0 6
9755: IFFALSE 9771
// ComMoveUnit ( i , dep ) ;
9757: LD_VAR 0 5
9761: PPUSH
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9771: LD_VAR 0 5
9775: PPUSH
9776: CALL_OW 311
9780: PPUSH
9781: CALL 77739 0 1
// end ;
9785: GO 9748
9787: POP
9788: POP
// end ; end_of_file
9789: LD_VAR 0 4
9793: RET
// export function Action ; begin
9794: LD_INT 0
9796: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9797: LD_INT 66
9799: PPUSH
9800: LD_INT 4
9802: PPUSH
9803: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PUSH
9836: LD_INT 0
9838: EQUAL
9839: IFFALSE 9853
// SetClass ( JMM , 2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_INT 2
9848: PPUSH
9849: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9853: LD_STRING M1
9855: PPUSH
9856: CALL_OW 337
// case Difficulty of 1 :
9860: LD_OWVAR 67
9864: PUSH
9865: LD_INT 1
9867: DOUBLE
9868: EQUAL
9869: IFTRUE 9873
9871: GO 9883
9873: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9874: LD_STRING M1-1
9876: PPUSH
9877: CALL_OW 337
9881: GO 9926
9883: LD_INT 2
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 9901
9891: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9892: LD_STRING M1-2
9894: PPUSH
9895: CALL_OW 337
9899: GO 9926
9901: LD_INT 3
9903: DOUBLE
9904: GREATEREQUAL
9905: IFFALSE 9913
9907: LD_INT 4
9909: DOUBLE
9910: LESSEQUAL
9911: IFTRUE 9915
9913: GO 9925
9915: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9916: LD_STRING M1-3
9918: PPUSH
9919: CALL_OW 337
9923: GO 9926
9925: POP
// ChangeMissionObjectives ( M1cont ) ;
9926: LD_STRING M1cont
9928: PPUSH
9929: CALL_OW 337
// wait ( 0 0$2 ) ;
9933: LD_INT 70
9935: PPUSH
9936: CALL_OW 67
// SaveForQuickRestart ;
9940: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9944: LD_INT 525
9946: PPUSH
9947: LD_INT 700
9949: PPUSH
9950: CALL_OW 12
9954: PPUSH
9955: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
9959: LD_INT 5
9961: PPUSH
9962: LD_INT 82
9964: PPUSH
9965: LD_INT 38
9967: PPUSH
9968: LD_INT 10
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 56
// wait ( 0 0$14 ) ;
9978: LD_INT 490
9980: PPUSH
9981: CALL_OW 67
// firstCrateSpawn := true ;
9985: LD_ADDR_EXP 40
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// end ;
9993: LD_VAR 0 1
9997: RET
// every 0 0$02 trigger firstCrateSpawn do
9998: LD_EXP 40
10002: IFFALSE 10365
10004: GO 10006
10006: DISABLE
// begin if IsOk ( Lisa ) then
10007: LD_EXP 2
10011: PPUSH
10012: CALL_OW 302
10016: IFFALSE 10032
// Say ( Lisa , DR0-Lisa-1 ) else
10018: LD_EXP 2
10022: PPUSH
10023: LD_STRING DR0-Lisa-1
10025: PPUSH
10026: CALL_OW 88
10030: GO 10178
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 21
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 4
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 69
10122: PUSH
10123: LD_EXP 1
10127: PUSH
10128: LD_EXP 8
10132: PUSH
10133: LD_EXP 5
10137: PUSH
10138: LD_EXP 6
10142: PUSH
10143: LD_EXP 7
10147: PUSH
10148: LD_EXP 4
10152: PUSH
10153: LD_EXP 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: DIFF
10167: PPUSH
10168: LD_STRING DR0-Sol1-1
10170: PPUSH
10171: LD_STRING DR0-Sol1-1
10173: PPUSH
10174: CALL 6771 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10178: LD_INT 22
10180: PUSH
10181: LD_INT 1
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 1
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 25
10213: PUSH
10214: LD_INT 1
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 25
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 25
10233: PUSH
10234: LD_INT 3
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 25
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: PUSH
10269: LD_EXP 1
10273: PUSH
10274: LD_EXP 8
10278: PUSH
10279: LD_EXP 5
10283: PUSH
10284: LD_EXP 2
10288: PUSH
10289: LD_EXP 6
10293: PUSH
10294: LD_EXP 7
10298: PUSH
10299: LD_EXP 4
10303: PUSH
10304: LD_EXP 3
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: DIFF
10319: PPUSH
10320: LD_STRING DR0-Sol2-1
10322: PPUSH
10323: LD_STRING DR0-Sol2-1
10325: PPUSH
10326: CALL 6771 0 3
// if IsOk ( Cyrus ) then
10330: LD_EXP 4
10334: PPUSH
10335: CALL_OW 302
10339: IFFALSE 10353
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10341: LD_EXP 4
10345: PPUSH
10346: LD_STRING DR0-Cyrus-1
10348: PPUSH
10349: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10353: LD_EXP 1
10357: PPUSH
10358: LD_STRING DR0-JMM-1
10360: PPUSH
10361: CALL_OW 88
// end ;
10365: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10366: LD_EXP 5
10370: PPUSH
10371: CALL_OW 302
10375: PUSH
10376: LD_INT 22
10378: PUSH
10379: LD_INT 1
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 25
10388: PUSH
10389: LD_INT 16
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 69
10404: PUSH
10405: LD_INT 0
10407: GREATER
10408: AND
10409: PUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 463
10417: NOT
10418: AND
10419: IFFALSE 10697
10421: GO 10423
10423: DISABLE
// begin DialogueOn ;
10424: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10428: LD_EXP 5
10432: PPUSH
10433: LD_STRING D10-Frank-1
10435: PPUSH
10436: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10440: LD_INT 22
10442: PUSH
10443: LD_INT 1
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 21
10452: PUSH
10453: LD_INT 1
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: LD_INT 25
10465: PUSH
10466: LD_INT 1
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 25
10475: PUSH
10476: LD_INT 2
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 25
10485: PUSH
10486: LD_INT 3
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 25
10495: PUSH
10496: LD_INT 4
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: PPUSH
10515: CALL_OW 69
10519: PUSH
10520: LD_EXP 1
10524: PUSH
10525: LD_EXP 5
10529: PUSH
10530: LD_EXP 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: DIFF
10540: PPUSH
10541: LD_STRING D10-Sol1-1
10543: PPUSH
10544: LD_STRING D10-FSol1-1
10546: PPUSH
10547: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
10551: LD_EXP 5
10555: PPUSH
10556: LD_STRING D10-Frank-2
10558: PPUSH
10559: CALL_OW 88
// if IsOK ( Lisa ) then
10563: LD_EXP 2
10567: PPUSH
10568: CALL_OW 302
10572: IFFALSE 10588
// begin Say ( Lisa , D10-Lisa-2 ) ;
10574: LD_EXP 2
10578: PPUSH
10579: LD_STRING D10-Lisa-2
10581: PPUSH
10582: CALL_OW 88
// end else
10586: GO 10693
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10588: LD_INT 22
10590: PUSH
10591: LD_INT 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 21
10600: PUSH
10601: LD_INT 1
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 25
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 3
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 25
10643: PUSH
10644: LD_INT 4
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: PUSH
10668: LD_EXP 1
10672: PUSH
10673: LD_EXP 5
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: DIFF
10682: PPUSH
10683: LD_STRING D10-Sol1-2
10685: PPUSH
10686: LD_STRING D10-FSol1-2
10688: PPUSH
10689: CALL 6771 0 3
// end ; DialogueOff ;
10693: CALL_OW 7
// end ;
10697: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 463
10705: NOT
10706: IFFALSE 11001
10708: GO 10710
10710: DISABLE
// begin HarrisonSupport ;
10711: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10715: LD_EXP 17
10719: PPUSH
10720: CALL_OW 310
10724: PPUSH
10725: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10729: LD_EXP 17
10733: PPUSH
10734: LD_STRING DEng-Eng1-1
10736: PPUSH
10737: CALL_OW 88
// wait ( 1 1$0 ) ;
10741: LD_INT 2100
10743: PPUSH
10744: CALL_OW 67
// DialogueOn ;
10748: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10752: LD_EXP 14
10756: PPUSH
10757: LD_STRING DRem-Har-1
10759: PPUSH
10760: CALL_OW 94
// if contactWithRussian = 1 then
10764: LD_EXP 22
10768: PUSH
10769: LD_INT 1
10771: EQUAL
10772: IFFALSE 10788
// begin Say ( JMM , DRem-JMM-1 ) ;
10774: LD_EXP 1
10778: PPUSH
10779: LD_STRING DRem-JMM-1
10781: PPUSH
10782: CALL_OW 88
// end else
10786: GO 10800
// begin Say ( JMM , DRem-JMM-1a ) ;
10788: LD_EXP 1
10792: PPUSH
10793: LD_STRING DRem-JMM-1a
10795: PPUSH
10796: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_STRING DRem-Har-2
10807: PPUSH
10808: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10812: LD_STRING DenisInDelta
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL_OW 30
10822: PUSH
10823: LD_INT 1
10825: EQUAL
10826: IFFALSE 10842
// begin Say ( JMM , DRem-JMM-2 ) ;
10828: LD_EXP 1
10832: PPUSH
10833: LD_STRING DRem-JMM-2
10835: PPUSH
10836: CALL_OW 88
// end else
10840: GO 10854
// begin Say ( JMM , DRem-JMM-2a ) ;
10842: LD_EXP 1
10846: PPUSH
10847: LD_STRING DRem-JMM-2a
10849: PPUSH
10850: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10854: LD_EXP 14
10858: PPUSH
10859: LD_STRING DRem-Har-3
10861: PPUSH
10862: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10866: LD_EXP 1
10870: PPUSH
10871: LD_STRING DRem-JMM-3
10873: PPUSH
10874: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10878: LD_EXP 14
10882: PPUSH
10883: LD_STRING DRem-Har-4
10885: PPUSH
10886: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10890: LD_STRING DenisInDelta
10892: PPUSH
10893: LD_INT 0
10895: PPUSH
10896: CALL_OW 30
10900: PUSH
10901: LD_INT 1
10903: EQUAL
10904: IFFALSE 10964
// begin Say ( JMM , DRem-JMM-4 ) ;
10906: LD_EXP 1
10910: PPUSH
10911: LD_STRING DRem-JMM-4
10913: PPUSH
10914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10918: LD_EXP 14
10922: PPUSH
10923: LD_STRING DRem-Har-5
10925: PPUSH
10926: CALL_OW 94
// DialogueOff ;
10930: CALL_OW 7
// wait ( 4 4$00 ) ;
10934: LD_INT 8400
10936: PPUSH
10937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10941: LD_INT 35
10943: PPUSH
10944: CALL_OW 67
// until not InBattle ( 1 ) ;
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 463
10955: NOT
10956: IFFALSE 10941
// SpawnDenis ;
10958: CALL 11002 0 0
// end else
10962: GO 11001
// begin DialogueOff ;
10964: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
10968: LD_INT 36
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
10981: LD_INT 15
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
10994: LD_STRING MR
10996: PPUSH
10997: CALL_OW 337
// end ; end ;
11001: END
// export function SpawnDenis ; var tmp ; begin
11002: LD_INT 0
11004: PPUSH
11005: PPUSH
// PrepareDenis ;
11006: CALL 2199 0 0
// if not Denis then
11010: LD_EXP 9
11014: NOT
11015: IFFALSE 11019
// exit ;
11017: GO 11240
// CenterNowOnUnits ( Denis ) ;
11019: LD_EXP 9
11023: PPUSH
11024: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 69
11047: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11048: LD_EXP 9
11052: PPUSH
11053: LD_VAR 0 2
11057: PPUSH
11058: LD_EXP 9
11062: PPUSH
11063: CALL_OW 74
11067: PPUSH
11068: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11072: LD_INT 35
11074: PPUSH
11075: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11079: LD_INT 22
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 91
11091: PUSH
11092: LD_EXP 9
11096: PUSH
11097: LD_INT 10
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL_OW 69
11113: IFFALSE 11072
// SetSide ( Denis , 1 ) ;
11115: LD_EXP 9
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: CALL_OW 235
// DialogueOn ;
11127: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11131: LD_EXP 9
11135: PPUSH
11136: LD_STRING DDen-Den-1
11138: PPUSH
11139: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11143: LD_EXP 1
11147: PPUSH
11148: LD_STRING DDen-JMM-1
11150: PPUSH
11151: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11155: LD_EXP 9
11159: PPUSH
11160: LD_STRING DDen-Den-2
11162: PPUSH
11163: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11167: LD_EXP 1
11171: PPUSH
11172: LD_STRING DDen-JMM-2
11174: PPUSH
11175: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DDen-Den-3
11186: PPUSH
11187: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11191: LD_EXP 1
11195: PPUSH
11196: LD_STRING DDen-JMM-3
11198: PPUSH
11199: CALL_OW 88
// DialogueOff ;
11203: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11207: LD_INT 36
11209: PPUSH
11210: LD_INT 1
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11220: LD_INT 15
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11233: LD_STRING MR
11235: PPUSH
11236: CALL_OW 337
// end ;
11240: LD_VAR 0 1
11244: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11245: LD_INT 22
11247: PUSH
11248: LD_INT 1
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 15
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: PUSH
11274: LD_EXP 9
11278: PPUSH
11279: CALL_OW 302
11283: AND
11284: PUSH
11285: LD_INT 1
11287: PPUSH
11288: CALL_OW 463
11292: NOT
11293: AND
11294: IFFALSE 11323
11296: GO 11298
11298: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11299: LD_EXP 9
11303: PPUSH
11304: LD_STRING DR1-Den-1
11306: PPUSH
11307: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11311: LD_EXP 1
11315: PPUSH
11316: LD_STRING DR1-JMM-1
11318: PPUSH
11319: CALL_OW 88
// end ;
11323: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11324: LD_INT 15
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 321
11334: PUSH
11335: LD_INT 2
11337: EQUAL
11338: PUSH
11339: LD_EXP 9
11343: PPUSH
11344: CALL_OW 302
11348: AND
11349: PUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 463
11357: NOT
11358: AND
11359: IFFALSE 11591
11361: GO 11363
11363: DISABLE
// begin DialogueOn ;
11364: CALL_OW 6
// if IsOK ( Denis ) then
11368: LD_EXP 9
11372: PPUSH
11373: CALL_OW 302
11377: IFFALSE 11393
// Say ( Denis , DR2-Den-1 ) else
11379: LD_EXP 9
11383: PPUSH
11384: LD_STRING DR2-Den-1
11386: PPUSH
11387: CALL_OW 88
11391: GO 11452
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11393: LD_INT 22
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 21
11405: PUSH
11406: LD_INT 1
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: PUSH
11433: LD_EXP 1
11437: PUSH
11438: EMPTY
11439: LIST
11440: DIFF
11441: PPUSH
11442: LD_STRING DR2-Sci1-1
11444: PPUSH
11445: LD_STRING DR2-FSci1-1
11447: PPUSH
11448: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11452: LD_EXP 1
11456: PPUSH
11457: LD_STRING DR2-JMM-1
11459: PPUSH
11460: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11464: LD_INT 22
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 2
11486: PUSH
11487: LD_INT 25
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 25
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 25
11509: PUSH
11510: LD_INT 3
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 25
11519: PUSH
11520: LD_INT 4
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: PUSH
11544: LD_EXP 1
11548: PUSH
11549: LD_EXP 9
11553: PUSH
11554: LD_EXP 8
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: DIFF
11564: PPUSH
11565: LD_STRING DR2-Sol1-1
11567: PPUSH
11568: LD_STRING DR2-Sol1-11
11570: PPUSH
11571: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11575: LD_EXP 1
11579: PPUSH
11580: LD_STRING DR2-JMM-2
11582: PPUSH
11583: CALL_OW 88
// DialogueOff ;
11587: CALL_OW 7
// end ;
11591: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11592: LD_INT 22
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 30
11604: PUSH
11605: LD_INT 36
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: PUSH
11621: LD_INT 0
11623: EQUAL
11624: PUSH
11625: LD_INT 22
11627: PUSH
11628: LD_INT 1
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 21
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 33
11647: PUSH
11648: LD_INT 2
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: LIST
11659: PPUSH
11660: CALL_OW 69
11664: PUSH
11665: LD_INT 0
11667: GREATER
11668: AND
11669: PUSH
11670: LD_EXP 23
11674: PUSH
11675: LD_INT 0
11677: EQUAL
11678: AND
11679: PUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 463
11687: NOT
11688: AND
11689: IFFALSE 11826
11691: GO 11693
11693: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11694: LD_INT 22
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 21
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 25
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 26
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: PPUSH
11740: CALL_OW 69
11744: PUSH
11745: LD_EXP 1
11749: PUSH
11750: LD_EXP 6
11754: PUSH
11755: LD_EXP 7
11759: PUSH
11760: LD_EXP 9
11764: PUSH
11765: LD_EXP 15
11769: PUSH
11770: LD_EXP 3
11774: PUSH
11775: LD_EXP 4
11779: PUSH
11780: LD_EXP 2
11784: PUSH
11785: LD_EXP 5
11789: PUSH
11790: LD_EXP 8
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: DIFF
11807: PPUSH
11808: LD_STRING D3a-Mech1-1
11810: PPUSH
11811: LD_STRING D3a-Mech1-1
11813: PPUSH
11814: CALL 6771 0 3
// firstTower = 2 ;
11818: LD_ADDR_EXP 23
11822: PUSH
11823: LD_INT 2
11825: ST_TO_ADDR
// end ;
11826: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11827: LD_INT 22
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 21
11839: PUSH
11840: LD_INT 3
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: PUSH
11856: LD_INT 0
11858: EQUAL
11859: IFFALSE 11990
11861: GO 11863
11863: DISABLE
11864: LD_INT 0
11866: PPUSH
// begin stop_talking := true ;
11867: LD_ADDR_OWVAR 56
11871: PUSH
11872: LD_INT 1
11874: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11875: LD_ADDR_VAR 0 1
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 25
11905: PUSH
11906: LD_INT 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 25
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 25
11925: PUSH
11926: LD_INT 3
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 25
11935: PUSH
11936: LD_INT 4
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: PUSH
11960: FOR_IN
11961: IFFALSE 11980
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_INT 1
11970: PPUSH
11971: LD_INT 7500
11973: PPUSH
11974: CALL_OW 591
11978: GO 11960
11980: POP
11981: POP
// stop_talking := false ;
11982: LD_ADDR_OWVAR 56
11986: PUSH
11987: LD_INT 0
11989: ST_TO_ADDR
// end ;
11990: PPOPN 1
11992: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
11993: LD_INT 22
11995: PUSH
11996: LD_INT 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 30
12005: PUSH
12006: LD_INT 36
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 69
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 21
12034: PUSH
12035: LD_INT 2
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 33
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: AND
12062: PUSH
12063: CALL 12615 0 0
12067: AND
12068: PUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 463
12076: NOT
12077: AND
12078: IFFALSE 12612
12080: GO 12082
12082: DISABLE
12083: LD_INT 0
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12090: LD_ADDR_VAR 0 3
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 30
12107: PUSH
12108: LD_INT 36
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PPUSH
12119: CALL_OW 69
12123: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12124: LD_ADDR_VAR 0 4
12128: PUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 33
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: EMPTY
12175: ST_TO_ADDR
// for i in tmpControlTowers do
12176: LD_ADDR_VAR 0 1
12180: PUSH
12181: LD_VAR 0 3
12185: PUSH
12186: FOR_IN
12187: IFFALSE 12610
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12189: LD_EXP 1
12193: PPUSH
12194: CALL_OW 310
12198: PUSH
12199: LD_VAR 0 1
12203: EQUAL
12204: PUSH
12205: LD_EXP 1
12209: PPUSH
12210: CALL_OW 257
12214: PUSH
12215: LD_INT 3
12217: EQUAL
12218: AND
12219: IFFALSE 12353
// begin InGameOn ;
12221: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12225: LD_VAR 0 4
12229: PUSH
12230: LD_INT 1
12232: ARRAY
12233: PPUSH
12234: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12238: LD_EXP 1
12242: PPUSH
12243: LD_STRING D4a-JMM-1
12245: PPUSH
12246: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12250: LD_VAR 0 4
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PPUSH
12259: LD_EXP 1
12263: PPUSH
12264: CALL_OW 53
// wait ( 0 0$1 ) ;
12268: LD_INT 35
12270: PPUSH
12271: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12275: LD_VAR 0 4
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: LD_VAR 0 4
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: CALL_OW 250
12297: PUSH
12298: LD_INT 3
12300: PLUS
12301: PPUSH
12302: LD_VAR 0 4
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: CALL_OW 251
12315: PUSH
12316: LD_INT 2
12318: MINUS
12319: PPUSH
12320: CALL_OW 111
// wait ( 0 0$2 ) ;
12324: LD_INT 70
12326: PPUSH
12327: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12331: LD_EXP 1
12335: PPUSH
12336: LD_STRING D4b-JMM-1
12338: PPUSH
12339: CALL_OW 88
// InGameOff ;
12343: CALL_OW 9
// exit ;
12347: POP
12348: POP
12349: GO 12612
// end else
12351: GO 12608
// begin InGameOn ;
12353: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12357: LD_ADDR_VAR 0 5
12361: PUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 313
12371: PPUSH
12372: LD_INT 25
12374: PUSH
12375: LD_INT 3
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PPUSH
12382: CALL_OW 72
12386: ST_TO_ADDR
// if not tmpMechanicInside then
12387: LD_VAR 0 5
12391: NOT
12392: IFFALSE 12396
// continue ;
12394: GO 12186
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12396: LD_VAR 0 5
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: CALL_OW 258
12409: PUSH
12410: LD_INT 1
12412: EQUAL
12413: IFFALSE 12433
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12415: LD_VAR 0 5
12419: PUSH
12420: LD_INT 1
12422: ARRAY
12423: PPUSH
12424: LD_STRING D4a-Mech1-1
12426: PPUSH
12427: CALL_OW 88
12431: GO 12449
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12433: LD_VAR 0 5
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PPUSH
12442: LD_STRING D4a-FMech1-1
12444: PPUSH
12445: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12449: LD_VAR 0 4
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12462: LD_VAR 0 4
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: LD_VAR 0 5
12475: PUSH
12476: LD_INT 1
12478: ARRAY
12479: PPUSH
12480: CALL_OW 53
// wait ( 0 0$1 ) ;
12484: LD_INT 35
12486: PPUSH
12487: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12491: LD_VAR 0 4
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: LD_VAR 0 4
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 250
12513: PUSH
12514: LD_INT 3
12516: PLUS
12517: PPUSH
12518: LD_VAR 0 4
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: PPUSH
12527: CALL_OW 251
12531: PUSH
12532: LD_INT 2
12534: MINUS
12535: PPUSH
12536: CALL_OW 111
// wait ( 0 0$2 ) ;
12540: LD_INT 70
12542: PPUSH
12543: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12547: LD_VAR 0 5
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: PPUSH
12556: CALL_OW 258
12560: PUSH
12561: LD_INT 1
12563: EQUAL
12564: IFFALSE 12584
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12566: LD_VAR 0 5
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: PPUSH
12575: LD_STRING D4b-Mech1-1
12577: PPUSH
12578: CALL_OW 88
12582: GO 12600
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12584: LD_VAR 0 5
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: LD_STRING D4b-FMech1-1
12595: PPUSH
12596: CALL_OW 88
// InGameOff ;
12600: CALL_OW 9
// exit ;
12604: POP
12605: POP
12606: GO 12612
// end ; end ;
12608: GO 12186
12610: POP
12611: POP
// end ;
12612: PPOPN 5
12614: END
// function CheckMehInside ; var i , j , tmp ; begin
12615: LD_INT 0
12617: PPUSH
12618: PPUSH
12619: PPUSH
12620: PPUSH
// result := false ;
12621: LD_ADDR_VAR 0 1
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12629: LD_ADDR_VAR 0 4
12633: PUSH
12634: LD_INT 22
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 30
12646: PUSH
12647: LD_INT 36
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 69
12662: ST_TO_ADDR
// if not tmp then
12663: LD_VAR 0 4
12667: NOT
12668: IFFALSE 12672
// exit ;
12670: GO 12736
// for i in tmp do
12672: LD_ADDR_VAR 0 2
12676: PUSH
12677: LD_VAR 0 4
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12734
// for j in UnitsInside ( i ) do
12685: LD_ADDR_VAR 0 3
12689: PUSH
12690: LD_VAR 0 2
12694: PPUSH
12695: CALL_OW 313
12699: PUSH
12700: FOR_IN
12701: IFFALSE 12730
// if GetClass ( j ) = class_mechanic then
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 257
12712: PUSH
12713: LD_INT 3
12715: EQUAL
12716: IFFALSE 12728
// begin result := true ;
12718: LD_ADDR_VAR 0 1
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// break ;
12726: GO 12730
// end ;
12728: GO 12700
12730: POP
12731: POP
12732: GO 12682
12734: POP
12735: POP
// end ;
12736: LD_VAR 0 1
12740: RET
// every 12 12$0 do
12741: GO 12743
12743: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12744: LD_INT 35
12746: PPUSH
12747: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 463
12758: NOT
12759: PUSH
12760: LD_INT 32
12762: PPUSH
12763: LD_INT 81
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 70
12777: NOT
12778: AND
12779: IFFALSE 12744
// PrepareKurt ;
12781: CALL 15238 0 0
// end ;
12785: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12786: LD_EXP 15
12790: PPUSH
12791: CALL_OW 302
12795: PUSH
12796: LD_EXP 15
12800: PPUSH
12801: CALL_OW 255
12805: PUSH
12806: LD_INT 1
12808: EQUAL
12809: AND
12810: PUSH
12811: LD_EXP 2
12815: AND
12816: IFFALSE 12981
12818: GO 12820
12820: DISABLE
// begin wait ( 0 0$50 ) ;
12821: LD_INT 1750
12823: PPUSH
12824: CALL_OW 67
// if not IsOk ( Joan ) then
12828: LD_EXP 15
12832: PPUSH
12833: CALL_OW 302
12837: NOT
12838: IFFALSE 12842
// exit ;
12840: GO 12981
// if IsOK ( Lisa ) then
12842: LD_EXP 2
12846: PPUSH
12847: CALL_OW 302
12851: IFFALSE 12981
// begin DialogueOn ;
12853: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12857: LD_EXP 2
12861: PPUSH
12862: LD_STRING D7-Lisa-1
12864: PPUSH
12865: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12869: LD_EXP 1
12873: PPUSH
12874: LD_STRING D7-JMM-1
12876: PPUSH
12877: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12881: LD_EXP 2
12885: PPUSH
12886: LD_STRING D7-Lisa-2
12888: PPUSH
12889: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12893: LD_EXP 1
12897: PPUSH
12898: LD_STRING D7-JMM-2
12900: PPUSH
12901: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12905: LD_EXP 2
12909: PPUSH
12910: LD_STRING D7-Lisa-3
12912: PPUSH
12913: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12917: LD_EXP 1
12921: PPUSH
12922: LD_STRING D7-JMM-3
12924: PPUSH
12925: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12929: LD_EXP 2
12933: PPUSH
12934: LD_STRING D7-Lisa-4
12936: PPUSH
12937: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12941: LD_EXP 1
12945: PPUSH
12946: LD_STRING D7-JMM-4
12948: PPUSH
12949: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12953: LD_EXP 1
12957: PPUSH
12958: LD_STRING D7-JMM-4a
12960: PPUSH
12961: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12965: LD_EXP 2
12969: PPUSH
12970: LD_STRING D7-Lisa-5
12972: PPUSH
12973: CALL_OW 88
// DialogueOff ;
12977: CALL_OW 7
// end ; end ;
12981: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
12982: LD_EXP 13
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 91
12999: PUSH
13000: LD_EXP 13
13004: PUSH
13005: LD_INT 10
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 25
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 25
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 4
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_INT 1
13075: GREATER
13076: AND
13077: IFFALSE 13094
13079: GO 13081
13081: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13082: LD_EXP 13
13086: PPUSH
13087: LD_STRING D5-Sol1-1
13089: PPUSH
13090: CALL_OW 88
13094: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13095: LD_INT 22
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 33
13107: PUSH
13108: LD_INT 2
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: PUSH
13124: LD_INT 2
13126: GREATEREQUAL
13127: IFFALSE 13147
13129: GO 13131
13131: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13132: LD_STRING MRa
13134: PPUSH
13135: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13139: LD_ADDR_EXP 28
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// end ;
13147: END
// every 2 2$00 do var i , last ;
13148: GO 13150
13150: DISABLE
13151: LD_INT 0
13153: PPUSH
13154: PPUSH
// begin last := 8 ;
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: LD_INT 8
13162: ST_TO_ADDR
// for i = 1 to last do
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: DOUBLE
13169: LD_INT 1
13171: DEC
13172: ST_TO_ADDR
13173: LD_VAR 0 2
13177: PUSH
13178: FOR_TO
13179: IFFALSE 13207
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13181: LD_INT 6300
13183: PPUSH
13184: LD_INT 12600
13186: PPUSH
13187: CALL_OW 12
13191: PPUSH
13192: CALL_OW 67
// PrepareRandoms ( i ) ;
13196: LD_VAR 0 1
13200: PPUSH
13201: CALL 4078 0 1
// end ;
13205: GO 13178
13207: POP
13208: POP
// end ;
13209: PPOPN 2
13211: END
// every 5 5$20 do
13212: GO 13214
13214: DISABLE
// begin DialogueOn ;
13215: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13219: LD_EXP 10
13223: PPUSH
13224: LD_STRING D12a-Sci-1
13226: PPUSH
13227: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13231: LD_EXP 1
13235: PPUSH
13236: LD_STRING D12a-JMM-1
13238: PPUSH
13239: CALL_OW 88
// DialogueOff ;
13243: CALL_OW 7
// cratesStatus = 1 ;
13247: LD_ADDR_EXP 38
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// end ;
13255: END
// every 13 13$0 do
13256: GO 13258
13258: DISABLE
// begin DialogueOn ;
13259: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13263: LD_EXP 10
13267: PPUSH
13268: LD_STRING D12b-Sci-1
13270: PPUSH
13271: CALL_OW 94
// DialogueOff ;
13275: CALL_OW 7
// cratesStatus = 2 ;
13279: LD_ADDR_EXP 38
13283: PUSH
13284: LD_INT 2
13286: ST_TO_ADDR
// end ;
13287: END
// every 32 32$0 do
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13295: LD_EXP 10
13299: PPUSH
13300: LD_STRING D12c-Sci-1
13302: PPUSH
13303: CALL_OW 94
// DialogueOff ;
13307: CALL_OW 7
// wait ( 3 3$0 ) ;
13311: LD_INT 6300
13313: PPUSH
13314: CALL_OW 67
// DialogueOn ;
13318: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13322: LD_EXP 10
13326: PPUSH
13327: LD_STRING D12d-Sci-1
13329: PPUSH
13330: CALL_OW 94
// DialogueOff ;
13334: CALL_OW 7
// cratesStatus = 1 ;
13338: LD_ADDR_EXP 38
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13346: CALL 19358 0 0
// wait ( 2 2$30 ) ;
13350: LD_INT 5250
13352: PPUSH
13353: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13357: LD_INT 35
13359: PPUSH
13360: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 463
13371: NOT
13372: PUSH
13373: LD_INT 32
13375: PPUSH
13376: LD_INT 81
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 70
13390: NOT
13391: AND
13392: PUSH
13393: LD_EXP 26
13397: PUSH
13398: LD_INT 6300
13400: LESS
13401: OR
13402: IFFALSE 13357
// PrepareJoan ;
13404: CALL 3034 0 0
// end ;
13408: END
// every 42 42$0 do
13409: GO 13411
13411: DISABLE
// begin DialogueOn ;
13412: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13416: LD_EXP 10
13420: PPUSH
13421: LD_STRING D12e-Sci-1
13423: PPUSH
13424: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13428: LD_EXP 1
13432: PPUSH
13433: LD_STRING D12e-JMM-1
13435: PPUSH
13436: CALL_OW 88
// DialogueOff ;
13440: CALL_OW 7
// cratesStatus := 2 ;
13444: LD_ADDR_EXP 38
13448: PUSH
13449: LD_INT 2
13451: ST_TO_ADDR
// end ; end_of_file
13452: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13453: LD_VAR 0 1
13457: PUSH
13458: LD_INT 1
13460: EQUAL
13461: PUSH
13462: LD_VAR 0 2
13466: PUSH
13467: LD_INT 3
13469: EQUAL
13470: AND
13471: IFFALSE 13481
// contactWithRussian := 1 ;
13473: LD_ADDR_EXP 22
13477: PUSH
13478: LD_INT 1
13480: ST_TO_ADDR
// end ;
13481: PPOPN 2
13483: END
// on BuildingComplete ( building ) do var i ;
13484: LD_INT 0
13486: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13487: LD_VAR 0 1
13491: PPUSH
13492: CALL_OW 266
13496: PUSH
13497: LD_INT 36
13499: EQUAL
13500: PUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 255
13510: PUSH
13511: LD_INT 1
13513: EQUAL
13514: AND
13515: PUSH
13516: LD_EXP 23
13520: PUSH
13521: LD_INT 0
13523: EQUAL
13524: AND
13525: IFFALSE 13605
// begin firstTower = 1 ;
13527: LD_ADDR_EXP 23
13531: PUSH
13532: LD_INT 1
13534: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13535: LD_INT 22
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 21
13547: PUSH
13548: LD_INT 1
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 26
13567: PUSH
13568: LD_INT 1
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: PUSH
13586: LD_EXP 1
13590: PUSH
13591: EMPTY
13592: LIST
13593: DIFF
13594: PPUSH
13595: LD_STRING D3b-Mech1-1
13597: PPUSH
13598: LD_STRING D3b-Mech1-1
13600: PPUSH
13601: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13605: LD_VAR 0 1
13609: PPUSH
13610: CALL_OW 266
13614: PUSH
13615: LD_INT 0
13617: EQUAL
13618: PUSH
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 255
13628: PUSH
13629: LD_INT 1
13631: EQUAL
13632: AND
13633: IFFALSE 13647
// SetBName ( building , theta ) ;
13635: LD_VAR 0 1
13639: PPUSH
13640: LD_STRING theta
13642: PPUSH
13643: CALL_OW 500
// if GetSide ( building ) = 3 then
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 255
13656: PUSH
13657: LD_INT 3
13659: EQUAL
13660: IFFALSE 13700
// begin for i := 1 to 4 do
13662: LD_ADDR_VAR 0 2
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_INT 4
13674: PUSH
13675: FOR_TO
13676: IFFALSE 13698
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13678: LD_ADDR_EXP 31
13682: PUSH
13683: LD_EXP 31
13687: PPUSH
13688: LD_INT 1
13690: PPUSH
13691: CALL_OW 3
13695: ST_TO_ADDR
13696: GO 13675
13698: POP
13699: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 255
13709: PUSH
13710: LD_INT 3
13712: EQUAL
13713: PUSH
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 266
13723: PUSH
13724: LD_INT 0
13726: EQUAL
13727: PUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 266
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: OR
13742: PUSH
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 266
13752: PUSH
13753: LD_INT 4
13755: EQUAL
13756: OR
13757: PUSH
13758: EMPTY
13759: LIST
13760: AND
13761: IFFALSE 13772
// ComUpgrade ( building ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13772: LD_VAR 0 1
13776: PPUSH
13777: CALL_OW 255
13781: PUSH
13782: LD_INT 3
13784: EQUAL
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 266
13795: PUSH
13796: LD_INT 32
13798: EQUAL
13799: AND
13800: IFFALSE 13841
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13802: LD_VAR 0 1
13806: PPUSH
13807: LD_INT 42
13809: PUSH
13810: LD_INT 43
13812: PUSH
13813: LD_INT 44
13815: PUSH
13816: LD_INT 46
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 1
13827: PPUSH
13828: LD_INT 4
13830: PPUSH
13831: CALL_OW 12
13835: ARRAY
13836: PPUSH
13837: CALL_OW 208
// end ;
13841: PPOPN 2
13843: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL 34606 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 23
13880: PUSH
13881: LD_INT 1
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: PPUSH
13893: CALL_OW 69
13897: IN
13898: IFFALSE 13914
// killCounter := killCounter + 1 ;
13900: LD_ADDR_EXP 45
13904: PUSH
13905: LD_EXP 45
13909: PUSH
13910: LD_INT 1
13912: PLUS
13913: ST_TO_ADDR
// if unit in ruAttackersInForest then
13914: LD_VAR 0 1
13918: PUSH
13919: LD_EXP 48
13923: IN
13924: IFFALSE 13942
// ruAttackersInForest := ruAttackersInForest diff unit ;
13926: LD_ADDR_EXP 48
13930: PUSH
13931: LD_EXP 48
13935: PUSH
13936: LD_VAR 0 1
13940: DIFF
13941: ST_TO_ADDR
// if unit in ruAttackers then
13942: LD_VAR 0 1
13946: PUSH
13947: LD_EXP 47
13951: IN
13952: IFFALSE 13970
// ruAttackers := ruAttackers diff unit ;
13954: LD_ADDR_EXP 47
13958: PUSH
13959: LD_EXP 47
13963: PUSH
13964: LD_VAR 0 1
13968: DIFF
13969: ST_TO_ADDR
// if unit = JMM then
13970: LD_VAR 0 1
13974: PUSH
13975: LD_EXP 1
13979: EQUAL
13980: IFFALSE 13989
// YouLost ( JMM ) ;
13982: LD_STRING JMM
13984: PPUSH
13985: CALL_OW 104
// if unit = Joan then
13989: LD_VAR 0 1
13993: PUSH
13994: LD_EXP 15
13998: EQUAL
13999: IFFALSE 14009
// JoanStatus := 0 ;
14001: LD_ADDR_EXP 16
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14009: LD_VAR 0 1
14013: PPUSH
14014: CALL_OW 255
14018: PUSH
14019: LD_INT 1
14021: EQUAL
14022: PUSH
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 247
14032: PUSH
14033: LD_INT 1
14035: EQUAL
14036: AND
14037: PUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 248
14047: PUSH
14048: LD_INT 1
14050: EQUAL
14051: AND
14052: IFFALSE 14068
// unitLost = unitLost + 1 ;
14054: LD_ADDR_EXP 30
14058: PUSH
14059: LD_EXP 30
14063: PUSH
14064: LD_INT 1
14066: PLUS
14067: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14068: LD_VAR 0 1
14072: PPUSH
14073: CALL_OW 255
14077: PUSH
14078: LD_INT 3
14080: EQUAL
14081: PUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 247
14091: PUSH
14092: LD_INT 3
14094: EQUAL
14095: AND
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 266
14106: PUSH
14107: LD_INT 4
14109: PUSH
14110: LD_INT 5
14112: PUSH
14113: LD_INT 32
14115: PUSH
14116: LD_INT 31
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: IN
14125: AND
14126: IFFALSE 14212
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14128: LD_ADDR_EXP 31
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_VAR 0 1
14142: PPUSH
14143: CALL_OW 266
14147: ADD
14148: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14149: LD_ADDR_EXP 31
14153: PUSH
14154: LD_EXP 31
14158: PUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 250
14168: ADD
14169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14170: LD_ADDR_EXP 31
14174: PUSH
14175: LD_EXP 31
14179: PUSH
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 251
14189: ADD
14190: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14191: LD_ADDR_EXP 31
14195: PUSH
14196: LD_EXP 31
14200: PUSH
14201: LD_VAR 0 1
14205: PPUSH
14206: CALL_OW 254
14210: ADD
14211: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14212: LD_EXP 46
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 257
14226: PUSH
14227: LD_INT 3
14229: EQUAL
14230: AND
14231: PUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 255
14241: PUSH
14242: LD_INT 3
14244: EQUAL
14245: AND
14246: PUSH
14247: LD_INT 21
14249: PPUSH
14250: CALL_OW 302
14254: AND
14255: PUSH
14256: LD_INT 21
14258: PPUSH
14259: CALL_OW 255
14263: PUSH
14264: LD_INT 3
14266: EQUAL
14267: AND
14268: IFFALSE 14350
// begin ruMechCounter := ruMechCounter - 1 ;
14270: LD_ADDR_EXP 46
14274: PUSH
14275: LD_EXP 46
14279: PUSH
14280: LD_INT 1
14282: MINUS
14283: ST_TO_ADDR
// uc_side := 3 ;
14284: LD_ADDR_OWVAR 20
14288: PUSH
14289: LD_INT 3
14291: ST_TO_ADDR
// uc_nation := 3 ;
14292: LD_ADDR_OWVAR 21
14296: PUSH
14297: LD_INT 3
14299: ST_TO_ADDR
// hc_gallery :=  ;
14300: LD_ADDR_OWVAR 33
14304: PUSH
14305: LD_STRING 
14307: ST_TO_ADDR
// hc_name :=  ;
14308: LD_ADDR_OWVAR 26
14312: PUSH
14313: LD_STRING 
14315: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14316: LD_INT 0
14318: PPUSH
14319: LD_EXP 34
14323: PPUSH
14324: LD_EXP 35
14328: PPUSH
14329: CALL_OW 12
14333: PPUSH
14334: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14338: CALL_OW 44
14342: PPUSH
14343: LD_INT 21
14345: PPUSH
14346: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 3
14362: EQUAL
14363: PUSH
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 264
14373: PUSH
14374: LD_INT 52
14376: EQUAL
14377: AND
14378: PUSH
14379: LD_INT 21
14381: PPUSH
14382: CALL_OW 302
14386: AND
14387: PUSH
14388: LD_INT 21
14390: PPUSH
14391: CALL_OW 255
14395: PUSH
14396: LD_INT 3
14398: EQUAL
14399: AND
14400: IFFALSE 14421
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14402: LD_INT 21
14404: PPUSH
14405: LD_INT 22
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_INT 52
14416: PPUSH
14417: CALL_OW 125
// end ;
14421: PPOPN 1
14423: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14424: LD_INT 0
14426: PPUSH
14427: PPUSH
14428: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14429: LD_VAR 0 1
14433: PPUSH
14434: LD_VAR 0 2
14438: PPUSH
14439: CALL 34728 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14443: LD_VAR 0 1
14447: PPUSH
14448: CALL_OW 255
14452: PUSH
14453: LD_INT 3
14455: EQUAL
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 264
14466: PUSH
14467: LD_INT 51
14469: PUSH
14470: LD_INT 52
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: IN
14477: NOT
14478: AND
14479: IFFALSE 14510
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14481: LD_ADDR_EXP 47
14485: PUSH
14486: LD_EXP 47
14490: PPUSH
14491: LD_EXP 47
14495: PUSH
14496: LD_INT 1
14498: PLUS
14499: PPUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 1
14509: ST_TO_ADDR
// end ;
14510: PPOPN 5
14512: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 255
14522: PUSH
14523: LD_INT 3
14525: EQUAL
14526: IFFALSE 14557
// begin tamedApemans = tamedApemans + 1 ;
14528: LD_ADDR_EXP 32
14532: PUSH
14533: LD_EXP 32
14537: PUSH
14538: LD_INT 1
14540: PLUS
14541: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14542: LD_VAR 0 1
14546: PPUSH
14547: LD_INT 106
14549: PPUSH
14550: LD_INT 85
14552: PPUSH
14553: CALL_OW 111
// end ; end ;
14557: PPOPN 2
14559: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14560: LD_VAR 0 2
14564: PPUSH
14565: CALL_OW 255
14569: PUSH
14570: LD_INT 3
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 3
14586: EQUAL
14587: AND
14588: PUSH
14589: LD_INT 21
14591: PPUSH
14592: CALL_OW 302
14596: AND
14597: IFFALSE 14611
// ComEnterUnit ( human , rufab ) ;
14599: LD_VAR 0 1
14603: PPUSH
14604: LD_INT 21
14606: PPUSH
14607: CALL_OW 120
// end ;
14611: PPOPN 4
14613: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 21
14621: EQUAL
14622: PUSH
14623: LD_VAR 0 2
14627: PPUSH
14628: CALL_OW 255
14632: PUSH
14633: LD_INT 3
14635: EQUAL
14636: AND
14637: IFFALSE 14651
// SetLives ( human , 1000 ) ;
14639: LD_VAR 0 2
14643: PPUSH
14644: LD_INT 1000
14646: PPUSH
14647: CALL_OW 234
// end ;
14651: PPOPN 2
14653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL 34712 0 1
// end ; end_of_file
14663: PPOPN 1
14665: END
// every 0 0$30 trigger cratesStatus = 1 do
14666: LD_EXP 38
14670: PUSH
14671: LD_INT 1
14673: EQUAL
14674: IFFALSE 14727
14676: GO 14678
14678: DISABLE
// begin enable ;
14679: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14680: LD_INT 350
14682: PUSH
14683: LD_INT 875
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 1
14692: PPUSH
14693: LD_INT 2
14695: PPUSH
14696: CALL_OW 12
14700: ARRAY
14701: PPUSH
14702: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 5
14711: PPUSH
14712: CALL_OW 12
14716: PPUSH
14717: LD_INT 7
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: CALL_OW 55
// end ;
14727: END
// every 1 1$0 trigger cratesStatus = 2 do
14728: LD_EXP 38
14732: PUSH
14733: LD_INT 2
14735: EQUAL
14736: IFFALSE 14819
14738: GO 14740
14740: DISABLE
// begin enable ;
14741: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14742: LD_INT 3150
14744: PUSH
14745: LD_INT 4550
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_INT 2
14757: PPUSH
14758: CALL_OW 12
14762: ARRAY
14763: PPUSH
14764: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14768: LD_INT 2
14770: PUSH
14771: LD_INT 5
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_INT 2
14783: PPUSH
14784: CALL_OW 12
14788: ARRAY
14789: PPUSH
14790: LD_INT 6
14792: PUSH
14793: LD_INT 7
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 1
14802: PPUSH
14803: LD_INT 2
14805: PPUSH
14806: CALL_OW 12
14810: ARRAY
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 55
// end ;
14819: END
// every 0 0$30 + 0 0$10 do
14820: GO 14822
14822: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14823: LD_INT 4
14825: PUSH
14826: LD_INT 5
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 1
14835: PPUSH
14836: LD_INT 2
14838: PPUSH
14839: CALL_OW 12
14843: ARRAY
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: CALL_OW 55
// Wait ( 0 0$15 ) ;
14855: LD_INT 525
14857: PPUSH
14858: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14862: LD_INT 4
14864: PUSH
14865: LD_INT 5
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 1
14874: PPUSH
14875: LD_INT 2
14877: PPUSH
14878: CALL_OW 12
14882: ARRAY
14883: PPUSH
14884: LD_INT 7
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 55
// Wait ( 0 0$20 ) ;
14894: LD_INT 700
14896: PPUSH
14897: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14901: LD_INT 4
14903: PUSH
14904: LD_INT 5
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_INT 2
14916: PPUSH
14917: CALL_OW 12
14921: ARRAY
14922: PPUSH
14923: LD_INT 7
14925: PPUSH
14926: LD_INT 1
14928: PPUSH
14929: CALL_OW 55
// end ; end_of_file
14933: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14934: LD_EXP 24
14938: PUSH
14939: LD_INT 1
14941: EQUAL
14942: IFFALSE 15235
14944: GO 14946
14946: DISABLE
14947: LD_INT 0
14949: PPUSH
14950: PPUSH
14951: PPUSH
// begin enable ;
14952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: LD_INT 30
14983: PUSH
14984: LD_INT 0
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: ST_TO_ADDR
// for i in tmp do
15016: LD_ADDR_VAR 0 1
15020: PUSH
15021: LD_VAR 0 2
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15060
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15029: LD_ADDR_VAR 0 3
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 274
15048: PPUSH
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 275
15056: PLUS
15057: ST_TO_ADDR
15058: GO 15026
15060: POP
15061: POP
// strings = [ ] ;
15062: LD_ADDR_EXP 27
15066: PUSH
15067: EMPTY
15068: ST_TO_ADDR
// if tmp = 0 then
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 0
15076: EQUAL
15077: IFFALSE 15102
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15079: LD_ADDR_EXP 27
15083: PUSH
15084: LD_EXP 27
15088: PUSH
15089: LD_STRING #Am06-1
15091: PUSH
15092: LD_EXP 25
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: ADD
15101: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15102: LD_VAR 0 2
15106: PUSH
15107: LD_EXP 25
15111: PUSH
15112: LD_VAR 0 3
15116: GREATER
15117: AND
15118: IFFALSE 15149
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15120: LD_ADDR_EXP 27
15124: PUSH
15125: LD_EXP 27
15129: PUSH
15130: LD_STRING #Am06-1
15132: PUSH
15133: LD_EXP 25
15137: PUSH
15138: LD_VAR 0 3
15142: MINUS
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: ADD
15148: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15149: LD_VAR 0 2
15153: PUSH
15154: LD_EXP 25
15158: PUSH
15159: LD_VAR 0 3
15163: LESSEQUAL
15164: AND
15165: IFFALSE 15188
// strings = strings ^ [ #Am06-1 , 0 ] ;
15167: LD_ADDR_EXP 27
15171: PUSH
15172: LD_EXP 27
15176: PUSH
15177: LD_STRING #Am06-1
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: ADD
15187: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15188: LD_ADDR_EXP 26
15192: PUSH
15193: LD_EXP 26
15197: PUSH
15198: LD_INT 35
15200: MINUS
15201: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15202: LD_ADDR_EXP 27
15206: PUSH
15207: LD_EXP 27
15211: PUSH
15212: LD_STRING #Am06-2
15214: PUSH
15215: LD_EXP 26
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: ADD
15224: ST_TO_ADDR
// display_strings = strings ;
15225: LD_ADDR_OWVAR 47
15229: PUSH
15230: LD_EXP 27
15234: ST_TO_ADDR
// end ; end_of_file
15235: PPOPN 3
15237: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15238: LD_INT 0
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15247: LD_ADDR_VAR 0 3
15251: PUSH
15252: LD_INT 22
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: LD_INT 30
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 30
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15299: LD_INT 35
15301: PPUSH
15302: CALL_OW 67
// until depot ;
15306: LD_VAR 0 3
15310: IFFALSE 15247
// repeat wait ( 0 0$1 ) ;
15312: LD_INT 35
15314: PPUSH
15315: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15319: LD_ADDR_VAR 0 4
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 91
15336: PUSH
15337: LD_VAR 0 3
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PUSH
15346: LD_INT 15
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: LD_INT 25
15369: PUSH
15370: LD_INT 1
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 25
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 25
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 25
15399: PUSH
15400: LD_INT 4
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: LD_INT 54
15419: PUSH
15420: EMPTY
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 3
15429: PUSH
15430: LD_INT 55
15432: PUSH
15433: EMPTY
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: PPUSH
15448: CALL_OW 69
15452: PUSH
15453: LD_EXP 2
15457: PUSH
15458: LD_EXP 3
15462: PUSH
15463: LD_EXP 4
15467: PUSH
15468: LD_EXP 5
15472: PUSH
15473: LD_EXP 7
15477: PUSH
15478: LD_EXP 8
15482: PUSH
15483: LD_EXP 9
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_EXP 44
15501: ADD
15502: DIFF
15503: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15504: LD_VAR 0 4
15508: PUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 463
15516: NOT
15517: AND
15518: IFFALSE 15312
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15520: LD_ADDR_VAR 0 4
15524: PUSH
15525: LD_VAR 0 4
15529: PUSH
15530: LD_INT 1
15532: PPUSH
15533: LD_VAR 0 4
15537: PPUSH
15538: CALL_OW 12
15542: ARRAY
15543: ST_TO_ADDR
// blockSpawn := 1 ;
15544: LD_ADDR_EXP 29
15548: PUSH
15549: LD_INT 1
15551: ST_TO_ADDR
// uc_side := 2 ;
15552: LD_ADDR_OWVAR 20
15556: PUSH
15557: LD_INT 2
15559: ST_TO_ADDR
// uc_nation := 2 ;
15560: LD_ADDR_OWVAR 21
15564: PUSH
15565: LD_INT 2
15567: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15568: LD_ADDR_EXP 19
15572: PUSH
15573: LD_STRING Kurt
15575: PPUSH
15576: LD_INT 0
15578: PPUSH
15579: LD_STRING 
15581: PPUSH
15582: CALL 39246 0 3
15586: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15587: LD_EXP 19
15591: PPUSH
15592: LD_VAR 0 4
15596: PPUSH
15597: CALL_OW 250
15601: PPUSH
15602: LD_VAR 0 4
15606: PPUSH
15607: CALL_OW 251
15611: PPUSH
15612: LD_INT 5
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: CALL_OW 50
// InGameOn ;
15622: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15626: LD_EXP 19
15630: PPUSH
15631: CALL_OW 87
// wait ( 0 0$2 ) ;
15635: LD_INT 70
15637: PPUSH
15638: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15642: LD_EXP 19
15646: PPUSH
15647: LD_VAR 0 4
15651: PPUSH
15652: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15656: LD_VAR 0 4
15660: PPUSH
15661: LD_EXP 19
15665: PPUSH
15666: CALL_OW 112
// wait ( 0 0$1 ) ;
15670: LD_INT 35
15672: PPUSH
15673: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15677: LD_VAR 0 4
15681: PPUSH
15682: LD_EXP 19
15686: PPUSH
15687: CALL_OW 119
// DialogueOn ;
15691: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15695: LD_EXP 19
15699: PPUSH
15700: LD_STRING D2-Kurt-1
15702: PPUSH
15703: CALL_OW 88
// if tmp = JMM then
15707: LD_VAR 0 4
15711: PUSH
15712: LD_EXP 1
15716: EQUAL
15717: IFFALSE 15809
// begin Say ( JMM , D2-JMM-1 ) ;
15719: LD_EXP 1
15723: PPUSH
15724: LD_STRING D2-JMM-1
15726: PPUSH
15727: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15731: LD_EXP 19
15735: PPUSH
15736: LD_STRING D2-Kurt-2
15738: PPUSH
15739: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15743: LD_EXP 1
15747: PPUSH
15748: LD_STRING D2-JMM-2
15750: PPUSH
15751: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15755: LD_EXP 19
15759: PPUSH
15760: LD_STRING D2-Kurt-3
15762: PPUSH
15763: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15767: LD_EXP 1
15771: PPUSH
15772: LD_STRING D2-JMM-3
15774: PPUSH
15775: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15779: LD_EXP 19
15783: PPUSH
15784: LD_STRING D2-Kurt-4
15786: PPUSH
15787: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15791: LD_EXP 1
15795: PPUSH
15796: LD_STRING D2-JMM-4
15798: PPUSH
15799: CALL_OW 88
// DialogueOff ;
15803: CALL_OW 7
// end else
15807: GO 16037
// begin if GetSex ( tmp ) = 1 then
15809: LD_VAR 0 4
15813: PPUSH
15814: CALL_OW 258
15818: PUSH
15819: LD_INT 1
15821: EQUAL
15822: IFFALSE 15838
// Say ( tmp , D2-Sol1-1 ) else
15824: LD_VAR 0 4
15828: PPUSH
15829: LD_STRING D2-Sol1-1
15831: PPUSH
15832: CALL_OW 88
15836: GO 15850
// Say ( tmp , D2-FSol1-1 ) ;
15838: LD_VAR 0 4
15842: PPUSH
15843: LD_STRING D2-FSol1-1
15845: PPUSH
15846: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15850: LD_EXP 19
15854: PPUSH
15855: LD_STRING D2-Kurt-2
15857: PPUSH
15858: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15862: LD_VAR 0 4
15866: PPUSH
15867: CALL_OW 258
15871: PUSH
15872: LD_INT 1
15874: EQUAL
15875: IFFALSE 15891
// Say ( tmp , D2-Sol1-2 ) else
15877: LD_VAR 0 4
15881: PPUSH
15882: LD_STRING D2-Sol1-2
15884: PPUSH
15885: CALL_OW 88
15889: GO 15903
// Say ( tmp , D2-FSol1-2 ) ;
15891: LD_VAR 0 4
15895: PPUSH
15896: LD_STRING D2-FSol1-2
15898: PPUSH
15899: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15903: LD_EXP 19
15907: PPUSH
15908: LD_STRING D2-Kurt-3
15910: PPUSH
15911: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15915: LD_VAR 0 4
15919: PPUSH
15920: CALL_OW 258
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: IFFALSE 15944
// Say ( tmp , D2-Sol1-3 ) else
15930: LD_VAR 0 4
15934: PPUSH
15935: LD_STRING D2-Sol1-3
15937: PPUSH
15938: CALL_OW 88
15942: GO 15956
// Say ( tmp , D2-FSol1-3 ) ;
15944: LD_VAR 0 4
15948: PPUSH
15949: LD_STRING D2-FSol1-3
15951: PPUSH
15952: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15956: LD_EXP 19
15960: PPUSH
15961: LD_STRING D2-Kurt-4
15963: PPUSH
15964: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15968: LD_VAR 0 4
15972: PPUSH
15973: CALL_OW 258
15977: PUSH
15978: LD_INT 1
15980: EQUAL
15981: IFFALSE 16009
// begin Say ( tmp , D2-Sol1-4 ) ;
15983: LD_VAR 0 4
15987: PPUSH
15988: LD_STRING D2-Sol1-4
15990: PPUSH
15991: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_STRING D2-Sol1-5
16002: PPUSH
16003: CALL_OW 88
// end else
16007: GO 16033
// begin Say ( tmp , D2-FSol1-4 ) ;
16009: LD_VAR 0 4
16013: PPUSH
16014: LD_STRING D2-FSol1-4
16016: PPUSH
16017: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_STRING D2-FSol1-5
16028: PPUSH
16029: CALL_OW 88
// end ; DialogueOff ;
16033: CALL_OW 7
// end ; dec := ShowQuery1 ;
16037: LD_ADDR_VAR 0 6
16041: PUSH
16042: CALL 7256 0 0
16046: ST_TO_ADDR
// if dec = 1 then
16047: LD_VAR 0 6
16051: PUSH
16052: LD_INT 1
16054: EQUAL
16055: IFFALSE 16117
// begin DialogueOn ;
16057: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16061: LD_EXP 19
16065: PPUSH
16066: LD_STRING D2a-Kurt-1
16068: PPUSH
16069: CALL_OW 88
// DialogueOff ;
16073: CALL_OW 7
// InGameOff ;
16077: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16081: LD_INT 1
16083: PPUSH
16084: LD_INT 2
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16097: LD_EXP 19
16101: PPUSH
16102: LD_INT 8
16104: PPUSH
16105: CALL_OW 113
// readyToEscape := 1 ;
16109: LD_ADDR_EXP 21
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// end ; if dec = 2 then
16117: LD_VAR 0 6
16121: PUSH
16122: LD_INT 2
16124: EQUAL
16125: IFFALSE 16593
// begin DialogueOn ;
16127: CALL_OW 6
// if tmp = JMM then
16131: LD_VAR 0 4
16135: PUSH
16136: LD_EXP 1
16140: EQUAL
16141: IFFALSE 16197
// begin Say ( JMM , D2b-JMM-1 ) ;
16143: LD_EXP 1
16147: PPUSH
16148: LD_STRING D2b-JMM-1
16150: PPUSH
16151: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16155: LD_EXP 19
16159: PPUSH
16160: LD_STRING D2b-Kurt-1
16162: PPUSH
16163: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16167: LD_EXP 1
16171: PPUSH
16172: LD_STRING D2b-JMM-2
16174: PPUSH
16175: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16179: LD_EXP 19
16183: PPUSH
16184: LD_STRING D2b-Kurt-2
16186: PPUSH
16187: CALL_OW 88
// DialogueOff ;
16191: CALL_OW 7
// end else
16195: GO 16348
// begin if GetSex ( tmp ) = 1 then
16197: LD_VAR 0 4
16201: PPUSH
16202: CALL_OW 258
16206: PUSH
16207: LD_INT 1
16209: EQUAL
16210: IFFALSE 16226
// Say ( tmp , D2b-Sol1-1 ) else
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_STRING D2b-Sol1-1
16219: PPUSH
16220: CALL_OW 88
16224: GO 16238
// Say ( tmp , D2b-FSol1-1 ) ;
16226: LD_VAR 0 4
16230: PPUSH
16231: LD_STRING D2b-FSol1-1
16233: PPUSH
16234: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16238: LD_EXP 19
16242: PPUSH
16243: LD_STRING D2b-Kurt-1
16245: PPUSH
16246: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16250: LD_VAR 0 4
16254: PPUSH
16255: CALL_OW 258
16259: PUSH
16260: LD_INT 1
16262: EQUAL
16263: IFFALSE 16279
// Say ( tmp , D2b-Sol1-2 ) else
16265: LD_VAR 0 4
16269: PPUSH
16270: LD_STRING D2b-Sol1-2
16272: PPUSH
16273: CALL_OW 88
16277: GO 16291
// Say ( tmp , D2b-FSol1-2 ) ;
16279: LD_VAR 0 4
16283: PPUSH
16284: LD_STRING D2b-FSol1-2
16286: PPUSH
16287: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16291: LD_EXP 19
16295: PPUSH
16296: LD_STRING D2b-Kurt-2
16298: PPUSH
16299: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16303: LD_VAR 0 4
16307: PPUSH
16308: CALL_OW 258
16312: PUSH
16313: LD_INT 1
16315: EQUAL
16316: IFFALSE 16332
// Say ( tmp , D2c-Sol1-2 ) else
16318: LD_VAR 0 4
16322: PPUSH
16323: LD_STRING D2c-Sol1-2
16325: PPUSH
16326: CALL_OW 88
16330: GO 16344
// Say ( tmp , D2c-FSol1-2 ) ;
16332: LD_VAR 0 4
16336: PPUSH
16337: LD_STRING D2c-FSol1-2
16339: PPUSH
16340: CALL_OW 88
// DialogueOff ;
16344: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16348: LD_ADDR_VAR 0 7
16352: PUSH
16353: CALL 7277 0 0
16357: ST_TO_ADDR
// if dec2 = 1 then
16358: LD_VAR 0 7
16362: PUSH
16363: LD_INT 1
16365: EQUAL
16366: IFFALSE 16428
// begin DialogueOn ;
16368: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16372: LD_EXP 19
16376: PPUSH
16377: LD_STRING D2a-Kurt-1
16379: PPUSH
16380: CALL_OW 88
// DialogueOff ;
16384: CALL_OW 7
// InGameOff ;
16388: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16392: LD_INT 1
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: LD_INT 2
16400: PPUSH
16401: LD_INT 1
16403: PPUSH
16404: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16408: LD_EXP 19
16412: PPUSH
16413: LD_INT 8
16415: PPUSH
16416: CALL_OW 113
// readyToEscape := 1 ;
16420: LD_ADDR_EXP 21
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// end ; if dec2 = 2 then
16428: LD_VAR 0 7
16432: PUSH
16433: LD_INT 2
16435: EQUAL
16436: IFFALSE 16593
// begin if tmp = JMM then
16438: LD_VAR 0 4
16442: PUSH
16443: LD_EXP 1
16447: EQUAL
16448: IFFALSE 16508
// begin DialogueOn ;
16450: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16454: LD_EXP 1
16458: PPUSH
16459: LD_STRING D2c-JMM-1
16461: PPUSH
16462: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16466: LD_EXP 19
16470: PPUSH
16471: LD_STRING D2c-Kurt-1
16473: PPUSH
16474: CALL_OW 88
// DialogueOff ;
16478: CALL_OW 7
// InGameOff ;
16482: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16486: LD_EXP 19
16490: PPUSH
16491: LD_INT 8
16493: PPUSH
16494: CALL_OW 113
// readyToEscape := 1 ;
16498: LD_ADDR_EXP 21
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// end else
16506: GO 16593
// begin DialogueOn ;
16508: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16512: LD_VAR 0 4
16516: PPUSH
16517: CALL_OW 258
16521: PUSH
16522: LD_INT 1
16524: EQUAL
16525: IFFALSE 16541
// Say ( tmp , D2c-Sol1-1 ) else
16527: LD_VAR 0 4
16531: PPUSH
16532: LD_STRING D2c-Sol1-1
16534: PPUSH
16535: CALL_OW 88
16539: GO 16553
// Say ( tmp , D2c-FSol1-1 ) ;
16541: LD_VAR 0 4
16545: PPUSH
16546: LD_STRING D2c-FSol1-1
16548: PPUSH
16549: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16553: LD_EXP 19
16557: PPUSH
16558: LD_STRING D2c-Kurt-1
16560: PPUSH
16561: CALL_OW 88
// DialogueOff ;
16565: CALL_OW 7
// InGameOff ;
16569: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16573: LD_EXP 19
16577: PPUSH
16578: LD_INT 8
16580: PPUSH
16581: CALL_OW 113
// readyToEscape := 1 ;
16585: LD_ADDR_EXP 21
16589: PUSH
16590: LD_INT 1
16592: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16593: LD_VAR 0 6
16597: PUSH
16598: LD_INT 3
16600: EQUAL
16601: IFFALSE 16762
// begin DialogueOn ;
16603: CALL_OW 6
// if tmp = JMM then
16607: LD_VAR 0 4
16611: PUSH
16612: LD_EXP 1
16616: EQUAL
16617: IFFALSE 16677
// begin DialogueOn ;
16619: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16623: LD_EXP 1
16627: PPUSH
16628: LD_STRING D2c-JMM-1
16630: PPUSH
16631: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16635: LD_EXP 19
16639: PPUSH
16640: LD_STRING D2c-Kurt-1
16642: PPUSH
16643: CALL_OW 88
// DialogueOff ;
16647: CALL_OW 7
// InGameOff ;
16651: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16655: LD_EXP 19
16659: PPUSH
16660: LD_INT 8
16662: PPUSH
16663: CALL_OW 113
// readyToEscape := 1 ;
16667: LD_ADDR_EXP 21
16671: PUSH
16672: LD_INT 1
16674: ST_TO_ADDR
// end else
16675: GO 16762
// begin DialogueOn ;
16677: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16681: LD_VAR 0 4
16685: PPUSH
16686: CALL_OW 258
16690: PUSH
16691: LD_INT 1
16693: EQUAL
16694: IFFALSE 16710
// Say ( tmp , D2c-Sol1-1 ) else
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_STRING D2c-Sol1-1
16703: PPUSH
16704: CALL_OW 88
16708: GO 16722
// Say ( tmp , D2c-FSol1-1 ) ;
16710: LD_VAR 0 4
16714: PPUSH
16715: LD_STRING D2c-FSol1-1
16717: PPUSH
16718: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16722: LD_EXP 19
16726: PPUSH
16727: LD_STRING D2c-Kurt-1
16729: PPUSH
16730: CALL_OW 88
// DialogueOff ;
16734: CALL_OW 7
// InGameOff ;
16738: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16742: LD_EXP 19
16746: PPUSH
16747: LD_INT 8
16749: PPUSH
16750: CALL_OW 113
// readyToEscape := 1 ;
16754: LD_ADDR_EXP 21
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16762: LD_ADDR_EXP 29
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16770: LD_INT 35
16772: PPUSH
16773: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16777: LD_EXP 19
16781: PPUSH
16782: LD_INT 8
16784: PPUSH
16785: CALL_OW 308
16789: PUSH
16790: LD_EXP 21
16794: AND
16795: PUSH
16796: LD_EXP 19
16800: PPUSH
16801: CALL_OW 301
16805: OR
16806: IFFALSE 16770
// if IsDead ( Kurt ) then
16808: LD_EXP 19
16812: PPUSH
16813: CALL_OW 301
16817: IFFALSE 16821
// exit ;
16819: GO 16876
// RemoveUnit ( Kurt ) ;
16821: LD_EXP 19
16825: PPUSH
16826: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16830: LD_EXP 19
16834: PPUSH
16835: LD_STRING Kurt
16837: PPUSH
16838: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 2
16847: PPUSH
16848: CALL_OW 81
16852: PUSH
16853: LD_INT 0
16855: EQUAL
16856: IFFALSE 16868
// kurtStatus = 1 else
16858: LD_ADDR_EXP 20
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
16866: GO 16876
// kurtStatus = 2 ;
16868: LD_ADDR_EXP 20
16872: PUSH
16873: LD_INT 2
16875: ST_TO_ADDR
// end ; end_of_file
16876: LD_VAR 0 1
16880: RET
// every 0 0$2 do
16881: GO 16883
16883: DISABLE
// begin enable ;
16884: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16885: LD_INT 3
16887: PPUSH
16888: LD_INT 2
16890: PPUSH
16891: LD_INT 10
16893: PPUSH
16894: LD_EXP 31
16898: PPUSH
16899: CALL 7688 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16903: LD_INT 3
16905: PPUSH
16906: LD_INT 12
16908: PPUSH
16909: LD_EXP 31
16913: PPUSH
16914: CALL 9291 0 3
// if disableHealAI = 0 then
16918: LD_EXP 33
16922: PUSH
16923: LD_INT 0
16925: EQUAL
16926: IFFALSE 16947
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16928: LD_INT 3
16930: PPUSH
16931: LD_INT 9
16933: PPUSH
16934: LD_INT 10
16936: PPUSH
16937: LD_INT 32
16939: PUSH
16940: EMPTY
16941: LIST
16942: PPUSH
16943: CALL 8055 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16947: LD_INT 3
16949: PPUSH
16950: LD_INT 51
16952: PPUSH
16953: LD_INT 6
16955: PPUSH
16956: CALL 8744 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16960: LD_INT 2
16962: PPUSH
16963: CALL_OW 303
16967: PUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 255
16975: PUSH
16976: LD_INT 1
16978: EQUAL
16979: OR
16980: IFFALSE 16994
// DefendDepot ( 3 , rudepo ) else
16982: LD_INT 3
16984: PPUSH
16985: LD_INT 2
16987: PPUSH
16988: CALL 8571 0 2
16992: GO 17004
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16994: LD_INT 3
16996: PPUSH
16997: LD_INT 10
16999: PPUSH
17000: CALL 8862 0 2
// end ;
17004: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17005: LD_INT 22
17007: PUSH
17008: LD_INT 3
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 21
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 55
17027: PUSH
17028: EMPTY
17029: LIST
17030: PUSH
17031: LD_INT 3
17033: PUSH
17034: LD_INT 34
17036: PUSH
17037: LD_INT 51
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: PUSH
17059: LD_INT 0
17061: EQUAL
17062: PUSH
17063: LD_INT 21
17065: PPUSH
17066: CALL_OW 255
17070: PUSH
17071: LD_INT 3
17073: EQUAL
17074: AND
17075: PUSH
17076: LD_INT 21
17078: PPUSH
17079: CALL_OW 302
17083: AND
17084: PUSH
17085: LD_INT 2
17087: PPUSH
17088: CALL_OW 255
17092: PUSH
17093: LD_INT 3
17095: EQUAL
17096: AND
17097: PUSH
17098: LD_INT 2
17100: PPUSH
17101: CALL_OW 302
17105: AND
17106: PUSH
17107: LD_INT 21
17109: PPUSH
17110: CALL_OW 313
17114: AND
17115: PUSH
17116: LD_EXP 47
17120: PUSH
17121: LD_INT 4
17123: PUSH
17124: LD_INT 5
17126: PUSH
17127: LD_INT 6
17129: PUSH
17130: LD_INT 6
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: PUSH
17139: LD_OWVAR 67
17143: ARRAY
17144: LESS
17145: AND
17146: IFFALSE 17367
17148: GO 17150
17150: DISABLE
// begin enable ;
17151: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17152: LD_INT 2
17154: PPUSH
17155: CALL_OW 274
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: LD_INT 2000
17165: PPUSH
17166: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17170: LD_INT 3
17172: PPUSH
17173: LD_INT 21
17175: PPUSH
17176: LD_INT 4
17178: PUSH
17179: LD_INT 5
17181: PUSH
17182: LD_INT 6
17184: PUSH
17185: LD_INT 6
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: LD_OWVAR 67
17198: ARRAY
17199: PUSH
17200: LD_EXP 47
17204: MINUS
17205: PPUSH
17206: LD_INT 43
17208: PUSH
17209: LD_INT 43
17211: PUSH
17212: LD_INT 44
17214: PUSH
17215: LD_INT 44
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 43
17226: PUSH
17227: LD_INT 43
17229: PUSH
17230: LD_INT 43
17232: PUSH
17233: LD_INT 44
17235: PUSH
17236: LD_INT 44
17238: PUSH
17239: LD_INT 46
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 43
17252: PUSH
17253: LD_INT 43
17255: PUSH
17256: LD_INT 43
17258: PUSH
17259: LD_INT 44
17261: PUSH
17262: LD_INT 44
17264: PUSH
17265: LD_INT 46
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 43
17278: PUSH
17279: LD_INT 43
17281: PUSH
17282: LD_INT 44
17284: PUSH
17285: LD_INT 46
17287: PUSH
17288: LD_INT 46
17290: PUSH
17291: LD_INT 46
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: PUSH
17308: LD_OWVAR 67
17312: ARRAY
17313: PPUSH
17314: LD_INT 1
17316: PPUSH
17317: LD_INT 1
17319: PPUSH
17320: LD_INT 22
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_INT 24
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 2
17338: PPUSH
17339: CALL_OW 12
17343: ARRAY
17344: PUSH
17345: LD_INT 24
17347: PUSH
17348: LD_INT 24
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: LD_OWVAR 67
17361: ARRAY
17362: PPUSH
17363: CALL 7534 0 7
// end ;
17367: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17368: LD_INT 17
17370: PPUSH
17371: CALL_OW 255
17375: PUSH
17376: LD_INT 3
17378: EQUAL
17379: PUSH
17380: LD_INT 17
17382: PPUSH
17383: CALL_OW 302
17387: AND
17388: PUSH
17389: LD_INT 2
17391: PPUSH
17392: CALL_OW 255
17396: PUSH
17397: LD_INT 3
17399: EQUAL
17400: AND
17401: PUSH
17402: LD_INT 2
17404: PPUSH
17405: CALL_OW 302
17409: AND
17410: PUSH
17411: LD_EXP 47
17415: PUSH
17416: LD_INT 4
17418: PUSH
17419: LD_INT 5
17421: PUSH
17422: LD_INT 6
17424: PUSH
17425: LD_INT 7
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PUSH
17434: LD_OWVAR 67
17438: ARRAY
17439: LESS
17440: AND
17441: IFFALSE 17489
17443: GO 17445
17445: DISABLE
// begin enable ;
17446: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17447: LD_INT 17
17449: PPUSH
17450: LD_INT 22
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_INT 42
17461: PUSH
17462: LD_INT 43
17464: PUSH
17465: LD_INT 44
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PPUSH
17476: LD_INT 3
17478: PPUSH
17479: CALL_OW 12
17483: ARRAY
17484: PPUSH
17485: CALL_OW 185
// end ;
17489: END
// every 2 2$0 do var i , j ;
17490: GO 17492
17492: DISABLE
17493: LD_INT 0
17495: PPUSH
17496: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17497: LD_INT 14700
17499: PUSH
17500: LD_INT 33600
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: PPUSH
17510: LD_INT 2
17512: PPUSH
17513: CALL_OW 12
17517: ARRAY
17518: PPUSH
17519: CALL_OW 67
// disableHealAI = 1 ;
17523: LD_ADDR_EXP 33
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: LD_INT 22
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 4
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: PUSH
17565: FOR_IN
17566: IFFALSE 17579
// ComExitBuilding ( i ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 122
17577: GO 17565
17579: POP
17580: POP
// wait ( 0 0$1 ) ;
17581: LD_INT 35
17583: PPUSH
17584: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17588: LD_INT 35
17590: PPUSH
17591: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 3
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 25
17612: PUSH
17613: LD_INT 4
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: PUSH
17629: FOR_IN
17630: IFFALSE 17707
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: LD_INT 17
17639: PPUSH
17640: LD_INT 22
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 25
17652: PUSH
17653: LD_INT 12
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 70
17668: PUSH
17669: FOR_IN
17670: IFFALSE 17703
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17672: LD_VAR 0 1
17676: PPUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 250
17686: PPUSH
17687: LD_VAR 0 2
17691: PPUSH
17692: CALL_OW 251
17696: PPUSH
17697: CALL_OW 191
17701: GO 17669
17703: POP
17704: POP
17705: GO 17629
17707: POP
17708: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17709: LD_INT 22
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 4
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: PUSH
17738: LD_INT 0
17740: EQUAL
17741: PUSH
17742: LD_EXP 32
17746: PUSH
17747: LD_INT 6
17749: PUSH
17750: LD_INT 7
17752: PUSH
17753: LD_INT 8
17755: PUSH
17756: LD_INT 8
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_OWVAR 67
17769: ARRAY
17770: GREATEREQUAL
17771: OR
17772: PUSH
17773: LD_INT 17
17775: PPUSH
17776: LD_INT 22
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 25
17788: PUSH
17789: LD_INT 12
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 70
17804: PUSH
17805: LD_INT 0
17807: EQUAL
17808: OR
17809: IFFALSE 17588
// disableHealAI = 0 ;
17811: LD_ADDR_EXP 33
17815: PUSH
17816: LD_INT 0
17818: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17819: LD_ADDR_VAR 0 1
17823: PUSH
17824: LD_INT 22
17826: PUSH
17827: LD_INT 3
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 25
17836: PUSH
17837: LD_INT 12
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PPUSH
17848: CALL_OW 69
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17870
// SetClass ( i , 16 ) ;
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_INT 16
17863: PPUSH
17864: CALL_OW 336
17868: GO 17853
17870: POP
17871: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17872: LD_ADDR_VAR 0 1
17876: PUSH
17877: LD_INT 22
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 25
17889: PUSH
17890: LD_INT 4
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17923
// ComEnterUnit ( i , rulab ) ;
17909: LD_VAR 0 1
17913: PPUSH
17914: LD_INT 32
17916: PPUSH
17917: CALL_OW 120
17921: GO 17906
17923: POP
17924: POP
// end ; end_of_file
17925: PPOPN 2
17927: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17928: LD_EXP 26
17932: PUSH
17933: LD_INT 0
17935: LESSEQUAL
17936: IFFALSE 18085
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
17944: PPUSH
17945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17946: LD_ADDR_VAR 0 2
17950: PUSH
17951: LD_INT 22
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 30
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: ST_TO_ADDR
// for i in tmp do
18009: LD_ADDR_VAR 0 1
18013: PUSH
18014: LD_VAR 0 2
18018: PUSH
18019: FOR_IN
18020: IFFALSE 18053
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18022: LD_ADDR_VAR 0 3
18026: PUSH
18027: LD_VAR 0 3
18031: PUSH
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 274
18041: PPUSH
18042: LD_INT 1
18044: PPUSH
18045: CALL_OW 275
18049: PLUS
18050: ST_TO_ADDR
18051: GO 18019
18053: POP
18054: POP
// if yourCrates >= needCrates then
18055: LD_VAR 0 3
18059: PUSH
18060: LD_EXP 25
18064: GREATEREQUAL
18065: IFFALSE 18078
// FinishMission ( yourCrates ) else
18067: LD_VAR 0 3
18071: PPUSH
18072: CALL 18088 0 1
18076: GO 18085
// YouLost ( matmin ) ;
18078: LD_STRING matmin
18080: PPUSH
18081: CALL_OW 104
// end ;
18085: PPOPN 3
18087: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
// if killCounter = 0 then
18094: LD_EXP 45
18098: PUSH
18099: LD_INT 0
18101: EQUAL
18102: IFFALSE 18111
// SetAchievement ( ACH_SURV ) ;
18104: LD_STRING ACH_SURV
18106: PPUSH
18107: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18111: LD_INT 22
18113: PUSH
18114: LD_INT 3
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 21
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: PUSH
18140: LD_INT 0
18142: EQUAL
18143: IFFALSE 18159
// begin wait ( 3 ) ;
18145: LD_INT 3
18147: PPUSH
18148: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18152: LD_STRING ACH_BASEDESTROYER
18154: PPUSH
18155: CALL_OW 543
// end ; m1 := false ;
18159: LD_ADDR_VAR 0 3
18163: PUSH
18164: LD_INT 0
18166: ST_TO_ADDR
// m2 := false ;
18167: LD_ADDR_VAR 0 4
18171: PUSH
18172: LD_INT 0
18174: ST_TO_ADDR
// m3 := false ;
18175: LD_ADDR_VAR 0 5
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// if crates + 100 > crates then
18183: LD_VAR 0 1
18187: PUSH
18188: LD_INT 100
18190: PLUS
18191: PUSH
18192: LD_VAR 0 1
18196: GREATER
18197: IFFALSE 18229
// begin AddMedal ( cans , 1 ) ;
18199: LD_STRING cans
18201: PPUSH
18202: LD_INT 1
18204: PPUSH
18205: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18209: LD_INT 1
18211: PPUSH
18212: LD_STRING 06_crates_1
18214: PPUSH
18215: CALL_OW 39
// m1 := true ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_INT 1
18226: ST_TO_ADDR
// end else
18227: GO 18250
// begin AddMedal ( cans , - 1 ) ;
18229: LD_STRING cans
18231: PPUSH
18232: LD_INT 1
18234: NEG
18235: PPUSH
18236: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18240: LD_INT 0
18242: PPUSH
18243: LD_STRING 06_crates_1
18245: PPUSH
18246: CALL_OW 39
// end ; if unitLost < 3 then
18250: LD_EXP 30
18254: PUSH
18255: LD_INT 3
18257: LESS
18258: IFFALSE 18280
// begin AddMedal ( people , 1 ) ;
18260: LD_STRING people
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: CALL_OW 101
// m2 := true ;
18270: LD_ADDR_VAR 0 4
18274: PUSH
18275: LD_INT 1
18277: ST_TO_ADDR
// end else
18278: GO 18291
// AddMedal ( people , - 1 ) ;
18280: LD_STRING people
18282: PPUSH
18283: LD_INT 1
18285: NEG
18286: PPUSH
18287: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18291: LD_EXP 28
18295: PPUSH
18296: LD_STRING 06_remoteVehs_1
18298: PPUSH
18299: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18303: LD_EXP 28
18307: PUSH
18308: LD_INT 1
18310: EQUAL
18311: IFFALSE 18333
// begin AddMedal ( remote , 1 ) ;
18313: LD_STRING remote
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 101
// m3 := true ;
18323: LD_ADDR_VAR 0 5
18327: PUSH
18328: LD_INT 1
18330: ST_TO_ADDR
// end else
18331: GO 18373
// begin if GetTech ( 18 , 1 ) = state_enabled then
18333: LD_INT 18
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 321
18343: PUSH
18344: LD_INT 1
18346: EQUAL
18347: IFFALSE 18362
// AddMedal ( remote , - 1 ) else
18349: LD_STRING remote
18351: PPUSH
18352: LD_INT 1
18354: NEG
18355: PPUSH
18356: CALL_OW 101
18360: GO 18373
// AddMedal ( remote , - 2 ) ;
18362: LD_STRING remote
18364: PPUSH
18365: LD_INT 2
18367: NEG
18368: PPUSH
18369: CALL_OW 101
// end ; if m1 and m2 and m3 then
18373: LD_VAR 0 3
18377: PUSH
18378: LD_VAR 0 4
18382: AND
18383: PUSH
18384: LD_VAR 0 5
18388: AND
18389: IFFALSE 18405
// begin wait ( 3 ) ;
18391: LD_INT 3
18393: PPUSH
18394: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18398: LD_STRING ACH_ASPEED_6
18400: PPUSH
18401: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18405: LD_OWVAR 67
18409: PUSH
18410: LD_INT 3
18412: GREATEREQUAL
18413: PUSH
18414: LD_VAR 0 3
18418: AND
18419: PUSH
18420: LD_VAR 0 4
18424: AND
18425: PUSH
18426: LD_VAR 0 5
18430: AND
18431: IFFALSE 18443
// SetAchievementEX ( ACH_AMER , 6 ) ;
18433: LD_STRING ACH_AMER
18435: PPUSH
18436: LD_INT 6
18438: PPUSH
18439: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18443: LD_EXP 20
18447: PPUSH
18448: LD_STRING 06_KurtStatus_1
18450: PPUSH
18451: CALL_OW 39
// GiveMedals ( Main ) ;
18455: LD_STRING Main
18457: PPUSH
18458: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18462: LD_INT 22
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 21
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 50
18484: PUSH
18485: EMPTY
18486: LIST
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: LD_INT 25
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 25
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 25
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 25
18523: PUSH
18524: LD_INT 4
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: PPUSH
18544: CALL_OW 69
18548: PPUSH
18549: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18553: LD_EXP 1
18557: PPUSH
18558: LD_EXP 42
18562: PUSH
18563: LD_STRING JMM
18565: STR
18566: PPUSH
18567: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18571: LD_EXP 2
18575: PPUSH
18576: LD_EXP 42
18580: PUSH
18581: LD_STRING Lisa
18583: STR
18584: PPUSH
18585: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18589: LD_EXP 3
18593: PPUSH
18594: LD_EXP 42
18598: PUSH
18599: LD_STRING Bobby
18601: STR
18602: PPUSH
18603: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18607: LD_EXP 4
18611: PPUSH
18612: LD_EXP 42
18616: PUSH
18617: LD_STRING Cyrus
18619: STR
18620: PPUSH
18621: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18625: LD_EXP 5
18629: PPUSH
18630: LD_EXP 42
18634: PUSH
18635: LD_STRING Frank
18637: STR
18638: PPUSH
18639: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18643: LD_EXP 6
18647: PPUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_STRING Brown
18655: STR
18656: PPUSH
18657: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18661: LD_EXP 7
18665: PPUSH
18666: LD_EXP 42
18670: PUSH
18671: LD_STRING Donaldson
18673: STR
18674: PPUSH
18675: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18679: LD_EXP 8
18683: PPUSH
18684: LD_EXP 42
18688: PUSH
18689: LD_STRING Gladstone
18691: STR
18692: PPUSH
18693: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18697: LD_EXP 9
18701: PPUSH
18702: LD_EXP 42
18706: PUSH
18707: LD_STRING Denis
18709: STR
18710: PPUSH
18711: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18715: LD_EXP 15
18719: PPUSH
18720: LD_EXP 42
18724: PUSH
18725: LD_STRING Joan
18727: STR
18728: PPUSH
18729: CALL 6869 0 2
// if IsLive ( Joan ) then
18733: LD_EXP 15
18737: PPUSH
18738: CALL_OW 300
18742: IFFALSE 18756
// SaveCharacters ( Joan , Joan ) ;
18744: LD_EXP 15
18748: PPUSH
18749: LD_STRING Joan
18751: PPUSH
18752: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18756: LD_EXP 16
18760: PPUSH
18761: LD_STRING 06_JoanStatus_1
18763: PPUSH
18764: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18768: LD_INT 50
18770: PUSH
18771: EMPTY
18772: LIST
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 21
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: LD_INT 25
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 25
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 25
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 25
18829: PUSH
18830: LD_INT 4
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: PUSH
18855: LD_EXP 1
18859: PUSH
18860: LD_EXP 2
18864: PUSH
18865: LD_EXP 3
18869: PUSH
18870: LD_EXP 4
18874: PUSH
18875: LD_EXP 5
18879: PUSH
18880: LD_EXP 6
18884: PUSH
18885: LD_EXP 7
18889: PUSH
18890: LD_EXP 8
18894: PUSH
18895: LD_EXP 9
18899: PUSH
18900: LD_EXP 15
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: DIFF
18917: PPUSH
18918: LD_STRING 06_other_survivors
18920: PPUSH
18921: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18925: LD_INT 50
18927: PUSH
18928: EMPTY
18929: LIST
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 21
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 25
18956: PUSH
18957: LD_INT 12
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 25
18966: PUSH
18967: LD_INT 16
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: PPUSH
18985: CALL_OW 69
18989: PPUSH
18990: LD_STRING 06_other_apemans
18992: PPUSH
18993: CALL_OW 38
// YouWin ;
18997: CALL_OW 103
// end ; end_of_file
19001: LD_VAR 0 2
19005: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19006: LD_EXP 47
19010: PUSH
19011: LD_OWVAR 1
19015: PUSH
19016: LD_INT 23100
19018: PUSH
19019: LD_INT 21000
19021: PUSH
19022: LD_INT 18900
19024: PUSH
19025: LD_INT 16800
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: PUSH
19034: LD_OWVAR 67
19038: ARRAY
19039: GREATER
19040: AND
19041: IFFALSE 19355
19043: GO 19045
19045: DISABLE
19046: LD_INT 0
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
// begin enable ;
19052: ENABLE
// for i in ruAttackers do
19053: LD_ADDR_VAR 0 1
19057: PUSH
19058: LD_EXP 47
19062: PUSH
19063: FOR_IN
19064: IFFALSE 19353
// begin if not IsDrivenBy ( i ) then
19066: LD_VAR 0 1
19070: PPUSH
19071: CALL_OW 311
19075: NOT
19076: IFFALSE 19080
// continue ;
19078: GO 19063
// if i mod 2 = 0 then
19080: LD_VAR 0 1
19084: PUSH
19085: LD_INT 2
19087: MOD
19088: PUSH
19089: LD_INT 0
19091: EQUAL
19092: IFFALSE 19147
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_INT 91
19101: PUSH
19102: LD_INT 52
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 82
19111: PUSH
19112: LD_INT 34
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 90
19121: PUSH
19122: LD_INT 26
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 80
19131: PUSH
19132: LD_INT 12
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: ST_TO_ADDR
19145: GO 19209
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19147: LD_ADDR_VAR 0 3
19151: PUSH
19152: LD_INT 91
19154: PUSH
19155: LD_INT 52
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 68
19164: PUSH
19165: LD_INT 46
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 48
19174: PUSH
19175: LD_INT 43
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 33
19184: PUSH
19185: LD_INT 34
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 30
19194: PUSH
19195: LD_INT 19
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 256
19218: PUSH
19219: LD_INT 1000
19221: EQUAL
19222: IFFALSE 19240
// AgressiveMove ( i , path ) else
19224: LD_VAR 0 1
19228: PPUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: CALL 78523 0 2
19238: GO 19351
// if GetLives ( i ) < 650 then
19240: LD_VAR 0 1
19244: PPUSH
19245: CALL_OW 256
19249: PUSH
19250: LD_INT 650
19252: LESS
19253: IFFALSE 19351
// begin if not IsInArea ( i , russianRepairArea ) then
19255: LD_VAR 0 1
19259: PPUSH
19260: LD_INT 12
19262: PPUSH
19263: CALL_OW 308
19267: NOT
19268: IFFALSE 19337
// begin SetTag ( i , 0 ) ;
19270: LD_VAR 0 1
19274: PPUSH
19275: LD_INT 0
19277: PPUSH
19278: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19282: LD_VAR 0 1
19286: PPUSH
19287: CALL_OW 261
19291: PUSH
19292: LD_INT 50
19294: LESS
19295: PUSH
19296: LD_INT 21
19298: PPUSH
19299: CALL_OW 302
19303: AND
19304: IFFALSE 19320
// ComMoveUnit ( i , rufab ) else
19306: LD_VAR 0 1
19310: PPUSH
19311: LD_INT 21
19313: PPUSH
19314: CALL_OW 112
19318: GO 19335
// ComMoveXY ( i , 121 , 99 ) ;
19320: LD_VAR 0 1
19324: PPUSH
19325: LD_INT 121
19327: PPUSH
19328: LD_INT 99
19330: PPUSH
19331: CALL_OW 111
// end else
19335: GO 19351
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 311
19346: PPUSH
19347: CALL 77619 0 1
// end ; end ;
19351: GO 19063
19353: POP
19354: POP
// end ;
19355: PPOPN 4
19357: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
19362: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: LD_INT 6
19381: PUSH
19382: LD_INT 6
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: LD_OWVAR 67
19395: ARRAY
19396: PUSH
19397: FOR_TO
19398: IFFALSE 19573
// begin uc_side := 3 ;
19400: LD_ADDR_OWVAR 20
19404: PUSH
19405: LD_INT 3
19407: ST_TO_ADDR
// uc_nation := 3 ;
19408: LD_ADDR_OWVAR 21
19412: PUSH
19413: LD_INT 3
19415: ST_TO_ADDR
// InitHC_All ( ) ;
19416: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19420: LD_INT 0
19422: PPUSH
19423: LD_INT 4
19425: PUSH
19426: LD_INT 5
19428: PUSH
19429: LD_INT 6
19431: PUSH
19432: LD_INT 6
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: LD_OWVAR 67
19445: ARRAY
19446: PPUSH
19447: CALL_OW 381
// un := CreateHuman ;
19451: LD_ADDR_VAR 0 3
19455: PUSH
19456: CALL_OW 44
19460: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19461: LD_VAR 0 3
19465: PPUSH
19466: LD_INT 127
19468: PPUSH
19469: LD_INT 62
19471: PPUSH
19472: LD_INT 3
19474: PPUSH
19475: LD_INT 0
19477: PPUSH
19478: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19482: LD_ADDR_EXP 48
19486: PUSH
19487: LD_EXP 48
19491: PPUSH
19492: LD_EXP 48
19496: PUSH
19497: LD_INT 1
19499: PLUS
19500: PPUSH
19501: LD_VAR 0 3
19505: PPUSH
19506: CALL_OW 1
19510: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19511: LD_VAR 0 3
19515: PPUSH
19516: LD_INT 83
19518: PPUSH
19519: LD_INT 49
19521: PPUSH
19522: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19526: LD_VAR 0 3
19530: PPUSH
19531: LD_INT 49
19533: PPUSH
19534: LD_INT 43
19536: PPUSH
19537: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19541: LD_VAR 0 3
19545: PPUSH
19546: LD_INT 31
19548: PPUSH
19549: LD_INT 15
19551: PPUSH
19552: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19556: LD_VAR 0 3
19560: PPUSH
19561: LD_INT 63
19563: PPUSH
19564: LD_INT 9
19566: PPUSH
19567: CALL_OW 174
// end ;
19571: GO 19397
19573: POP
19574: POP
// end ; end_of_file
19575: LD_VAR 0 1
19579: RET
// export function CreateNature ; var i , un ; begin
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
19584: PPUSH
// for i := 1 to Difficulty + 2 do
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_OWVAR 67
19599: PUSH
19600: LD_INT 2
19602: PLUS
19603: PUSH
19604: FOR_TO
19605: IFFALSE 19714
// begin hc_sex := sex_male ;
19607: LD_ADDR_OWVAR 27
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// uc_side := 0 ;
19615: LD_ADDR_OWVAR 20
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// uc_nation := nation_nature ;
19623: LD_ADDR_OWVAR 21
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// hc_class := class_tiger ;
19631: LD_ADDR_OWVAR 28
19635: PUSH
19636: LD_INT 14
19638: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19639: LD_ADDR_OWVAR 31
19643: PUSH
19644: LD_EXP 35
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19664: LD_ADDR_OWVAR 35
19668: PUSH
19669: LD_INT 5
19671: NEG
19672: PPUSH
19673: LD_INT 5
19675: PPUSH
19676: CALL_OW 12
19680: PUSH
19681: LD_OWVAR 67
19685: MUL
19686: ST_TO_ADDR
// un := CreateHuman ;
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: CALL_OW 44
19696: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19697: LD_VAR 0 3
19701: PPUSH
19702: LD_INT 18
19704: PPUSH
19705: LD_INT 0
19707: PPUSH
19708: CALL_OW 49
// end ;
19712: GO 19604
19714: POP
19715: POP
// for i = 1 to rand ( 3 , 4 ) do
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: DOUBLE
19722: LD_INT 1
19724: DEC
19725: ST_TO_ADDR
19726: LD_INT 3
19728: PPUSH
19729: LD_INT 4
19731: PPUSH
19732: CALL_OW 12
19736: PUSH
19737: FOR_TO
19738: IFFALSE 19808
// begin hc_class := class_phororhacos ;
19740: LD_ADDR_OWVAR 28
19744: PUSH
19745: LD_INT 18
19747: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19748: LD_ADDR_OWVAR 31
19752: PUSH
19753: LD_EXP 35
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: ST_TO_ADDR
// hc_agressivity := 0 ;
19773: LD_ADDR_OWVAR 35
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// un = CreateHuman ;
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: CALL_OW 44
19790: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19791: LD_VAR 0 3
19795: PPUSH
19796: LD_INT 18
19798: PPUSH
19799: LD_INT 0
19801: PPUSH
19802: CALL_OW 49
// end ;
19806: GO 19737
19808: POP
19809: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19810: LD_ADDR_VAR 0 2
19814: PUSH
19815: DOUBLE
19816: LD_INT 1
19818: DEC
19819: ST_TO_ADDR
19820: LD_INT 1
19822: PPUSH
19823: LD_INT 3
19825: PPUSH
19826: CALL_OW 12
19830: PUSH
19831: LD_OWVAR 67
19835: PLUS
19836: PUSH
19837: FOR_TO
19838: IFFALSE 19975
// begin hc_class := class_apeman ;
19840: LD_ADDR_OWVAR 28
19844: PUSH
19845: LD_INT 12
19847: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19848: LD_ADDR_OWVAR 31
19852: PUSH
19853: LD_INT 2
19855: PPUSH
19856: LD_INT 5
19858: PPUSH
19859: CALL_OW 12
19863: PUSH
19864: LD_INT 0
19866: PPUSH
19867: LD_INT 2
19869: PPUSH
19870: CALL_OW 12
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19887: LD_ADDR_OWVAR 35
19891: PUSH
19892: LD_INT 20
19894: PPUSH
19895: LD_INT 30
19897: PPUSH
19898: CALL_OW 12
19902: PUSH
19903: LD_INT 30
19905: PPUSH
19906: LD_INT 40
19908: PPUSH
19909: CALL_OW 12
19913: PUSH
19914: LD_INT 40
19916: PPUSH
19917: LD_INT 50
19919: PPUSH
19920: CALL_OW 12
19924: PUSH
19925: LD_INT 45
19927: PPUSH
19928: LD_INT 55
19930: PPUSH
19931: CALL_OW 12
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: LD_OWVAR 67
19946: ARRAY
19947: ST_TO_ADDR
// un := CreateHuman ;
19948: LD_ADDR_VAR 0 3
19952: PUSH
19953: CALL_OW 44
19957: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19958: LD_VAR 0 3
19962: PPUSH
19963: LD_INT 19
19965: PPUSH
19966: LD_INT 0
19968: PPUSH
19969: CALL_OW 49
// end ;
19973: GO 19837
19975: POP
19976: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: DOUBLE
19983: LD_INT 1
19985: DEC
19986: ST_TO_ADDR
19987: LD_INT 5
19989: PPUSH
19990: LD_INT 6
19992: PPUSH
19993: CALL_OW 12
19997: PUSH
19998: LD_OWVAR 67
20002: PLUS
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20089
// begin hc_class := class_apeman ;
20007: LD_ADDR_OWVAR 28
20011: PUSH
20012: LD_INT 12
20014: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20015: LD_ADDR_OWVAR 31
20019: PUSH
20020: LD_INT 2
20022: PPUSH
20023: LD_INT 5
20025: PPUSH
20026: CALL_OW 12
20030: PUSH
20031: LD_INT 0
20033: PPUSH
20034: LD_INT 2
20036: PPUSH
20037: CALL_OW 12
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: ST_TO_ADDR
// hc_agressivity := 0 ;
20054: LD_ADDR_OWVAR 35
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// un = CreateHuman ;
20062: LD_ADDR_VAR 0 3
20066: PUSH
20067: CALL_OW 44
20071: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20072: LD_VAR 0 3
20076: PPUSH
20077: LD_INT 20
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 49
// end ;
20087: GO 20004
20089: POP
20090: POP
// end ; end_of_file
20091: LD_VAR 0 1
20095: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20096: LD_INT 0
20098: PPUSH
// ar_miner := 81 ;
20099: LD_ADDR_EXP 56
20103: PUSH
20104: LD_INT 81
20106: ST_TO_ADDR
// ar_crane := 88 ;
20107: LD_ADDR_EXP 55
20111: PUSH
20112: LD_INT 88
20114: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20115: LD_ADDR_EXP 50
20119: PUSH
20120: LD_INT 89
20122: ST_TO_ADDR
// us_hack := 99 ;
20123: LD_ADDR_EXP 51
20127: PUSH
20128: LD_INT 99
20130: ST_TO_ADDR
// us_artillery := 97 ;
20131: LD_ADDR_EXP 52
20135: PUSH
20136: LD_INT 97
20138: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20139: LD_ADDR_EXP 53
20143: PUSH
20144: LD_INT 91
20146: ST_TO_ADDR
// ar_mortar := 92 ;
20147: LD_ADDR_EXP 54
20151: PUSH
20152: LD_INT 92
20154: ST_TO_ADDR
// ru_flamethrower := 93 ;
20155: LD_ADDR_EXP 57
20159: PUSH
20160: LD_INT 93
20162: ST_TO_ADDR
// ru_radar := 98 ;
20163: LD_ADDR_EXP 49
20167: PUSH
20168: LD_INT 98
20170: ST_TO_ADDR
// tech_Artillery := 80 ;
20171: LD_ADDR_EXP 58
20175: PUSH
20176: LD_INT 80
20178: ST_TO_ADDR
// tech_RadMat := 81 ;
20179: LD_ADDR_EXP 59
20183: PUSH
20184: LD_INT 81
20186: ST_TO_ADDR
// tech_BasicTools := 82 ;
20187: LD_ADDR_EXP 60
20191: PUSH
20192: LD_INT 82
20194: ST_TO_ADDR
// tech_Cargo := 83 ;
20195: LD_ADDR_EXP 61
20199: PUSH
20200: LD_INT 83
20202: ST_TO_ADDR
// tech_Track := 84 ;
20203: LD_ADDR_EXP 62
20207: PUSH
20208: LD_INT 84
20210: ST_TO_ADDR
// tech_Crane := 85 ;
20211: LD_ADDR_EXP 63
20215: PUSH
20216: LD_INT 85
20218: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20219: LD_ADDR_EXP 64
20223: PUSH
20224: LD_INT 86
20226: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20227: LD_ADDR_EXP 65
20231: PUSH
20232: LD_INT 87
20234: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20235: LD_ADDR_EXP 66
20239: PUSH
20240: LD_INT 88
20242: ST_TO_ADDR
// class_mastodont := 31 ;
20243: LD_ADDR_EXP 67
20247: PUSH
20248: LD_INT 31
20250: ST_TO_ADDR
// class_horse := 21 ;
20251: LD_ADDR_EXP 68
20255: PUSH
20256: LD_INT 21
20258: ST_TO_ADDR
// end ;
20259: LD_VAR 0 1
20263: RET
// every 1 do
20264: GO 20266
20266: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20267: CALL 20096 0 0
20271: END
// every 0 0$1 do
20272: GO 20274
20274: DISABLE
// begin enable ;
20275: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20276: LD_STRING updateTimer(
20278: PUSH
20279: LD_OWVAR 1
20283: STR
20284: PUSH
20285: LD_STRING );
20287: STR
20288: PPUSH
20289: CALL_OW 559
// end ;
20293: END
// export function SOS_MapStart ( ) ; begin
20294: LD_INT 0
20296: PPUSH
// if streamModeActive then
20297: LD_EXP 69
20301: IFFALSE 20310
// DefineStreamItems ( true ) ;
20303: LD_INT 1
20305: PPUSH
20306: CALL 21960 0 1
// UpdateFactoryWaypoints ( ) ;
20310: CALL 35544 0 0
// end ;
20314: LD_VAR 0 1
20318: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20319: LD_INT 0
20321: PPUSH
// if p2 = 100 then
20322: LD_VAR 0 2
20326: PUSH
20327: LD_INT 100
20329: EQUAL
20330: IFFALSE 21333
// begin if not StreamModeActive then
20332: LD_EXP 69
20336: NOT
20337: IFFALSE 20347
// StreamModeActive := true ;
20339: LD_ADDR_EXP 69
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// if p3 = 0 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 0
20354: EQUAL
20355: IFFALSE 20361
// InitStreamMode ;
20357: CALL 21496 0 0
// if p3 = 1 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 1
20368: EQUAL
20369: IFFALSE 20379
// sRocket := true ;
20371: LD_ADDR_EXP 74
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 2 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 2
20386: EQUAL
20387: IFFALSE 20397
// sSpeed := true ;
20389: LD_ADDR_EXP 73
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 3 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 3
20404: EQUAL
20405: IFFALSE 20415
// sEngine := true ;
20407: LD_ADDR_EXP 75
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 4 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 4
20422: EQUAL
20423: IFFALSE 20433
// sSpec := true ;
20425: LD_ADDR_EXP 72
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 5 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 5
20440: EQUAL
20441: IFFALSE 20451
// sLevel := true ;
20443: LD_ADDR_EXP 76
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 6 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 6
20458: EQUAL
20459: IFFALSE 20469
// sArmoury := true ;
20461: LD_ADDR_EXP 77
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 7 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 7
20476: EQUAL
20477: IFFALSE 20487
// sRadar := true ;
20479: LD_ADDR_EXP 78
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 8 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 8
20494: EQUAL
20495: IFFALSE 20505
// sBunker := true ;
20497: LD_ADDR_EXP 79
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 9 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 9
20512: EQUAL
20513: IFFALSE 20523
// sHack := true ;
20515: LD_ADDR_EXP 80
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 10 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 10
20530: EQUAL
20531: IFFALSE 20541
// sFire := true ;
20533: LD_ADDR_EXP 81
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 11 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 11
20548: EQUAL
20549: IFFALSE 20559
// sRefresh := true ;
20551: LD_ADDR_EXP 82
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 12 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 12
20566: EQUAL
20567: IFFALSE 20577
// sExp := true ;
20569: LD_ADDR_EXP 83
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 13 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 13
20584: EQUAL
20585: IFFALSE 20595
// sDepot := true ;
20587: LD_ADDR_EXP 84
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 14 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 14
20602: EQUAL
20603: IFFALSE 20613
// sFlag := true ;
20605: LD_ADDR_EXP 85
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 15 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 15
20620: EQUAL
20621: IFFALSE 20631
// sKamikadze := true ;
20623: LD_ADDR_EXP 93
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 16 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 16
20638: EQUAL
20639: IFFALSE 20649
// sTroll := true ;
20641: LD_ADDR_EXP 94
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 17 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 17
20656: EQUAL
20657: IFFALSE 20667
// sSlow := true ;
20659: LD_ADDR_EXP 95
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 18 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 18
20674: EQUAL
20675: IFFALSE 20685
// sLack := true ;
20677: LD_ADDR_EXP 96
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 19 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 19
20692: EQUAL
20693: IFFALSE 20703
// sTank := true ;
20695: LD_ADDR_EXP 98
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 20 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 20
20710: EQUAL
20711: IFFALSE 20721
// sRemote := true ;
20713: LD_ADDR_EXP 99
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 21 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 21
20728: EQUAL
20729: IFFALSE 20739
// sPowell := true ;
20731: LD_ADDR_EXP 100
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 22 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 22
20746: EQUAL
20747: IFFALSE 20757
// sTeleport := true ;
20749: LD_ADDR_EXP 103
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 23 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 23
20764: EQUAL
20765: IFFALSE 20775
// sOilTower := true ;
20767: LD_ADDR_EXP 105
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 24 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 24
20782: EQUAL
20783: IFFALSE 20793
// sShovel := true ;
20785: LD_ADDR_EXP 106
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 25 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 25
20800: EQUAL
20801: IFFALSE 20811
// sSheik := true ;
20803: LD_ADDR_EXP 107
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 26 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 26
20818: EQUAL
20819: IFFALSE 20829
// sEarthquake := true ;
20821: LD_ADDR_EXP 109
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 27 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 27
20836: EQUAL
20837: IFFALSE 20847
// sAI := true ;
20839: LD_ADDR_EXP 110
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 28 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 28
20854: EQUAL
20855: IFFALSE 20865
// sCargo := true ;
20857: LD_ADDR_EXP 113
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 29 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 29
20872: EQUAL
20873: IFFALSE 20883
// sDLaser := true ;
20875: LD_ADDR_EXP 114
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 30 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 30
20890: EQUAL
20891: IFFALSE 20901
// sExchange := true ;
20893: LD_ADDR_EXP 115
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 31 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 31
20908: EQUAL
20909: IFFALSE 20919
// sFac := true ;
20911: LD_ADDR_EXP 116
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 32 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 32
20926: EQUAL
20927: IFFALSE 20937
// sPower := true ;
20929: LD_ADDR_EXP 117
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 33 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 33
20944: EQUAL
20945: IFFALSE 20955
// sRandom := true ;
20947: LD_ADDR_EXP 118
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 34 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 34
20962: EQUAL
20963: IFFALSE 20973
// sShield := true ;
20965: LD_ADDR_EXP 119
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 35 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 35
20980: EQUAL
20981: IFFALSE 20991
// sTime := true ;
20983: LD_ADDR_EXP 120
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 36 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 36
20998: EQUAL
20999: IFFALSE 21009
// sTools := true ;
21001: LD_ADDR_EXP 121
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 101 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 101
21016: EQUAL
21017: IFFALSE 21027
// sSold := true ;
21019: LD_ADDR_EXP 86
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 102 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 102
21034: EQUAL
21035: IFFALSE 21045
// sDiff := true ;
21037: LD_ADDR_EXP 87
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 103 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 103
21052: EQUAL
21053: IFFALSE 21063
// sFog := true ;
21055: LD_ADDR_EXP 90
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 104 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 104
21070: EQUAL
21071: IFFALSE 21081
// sReset := true ;
21073: LD_ADDR_EXP 91
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 105 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 105
21088: EQUAL
21089: IFFALSE 21099
// sSun := true ;
21091: LD_ADDR_EXP 92
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 106 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 106
21106: EQUAL
21107: IFFALSE 21117
// sTiger := true ;
21109: LD_ADDR_EXP 88
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 107 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 107
21124: EQUAL
21125: IFFALSE 21135
// sBomb := true ;
21127: LD_ADDR_EXP 89
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 108 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 108
21142: EQUAL
21143: IFFALSE 21153
// sWound := true ;
21145: LD_ADDR_EXP 97
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 109 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 109
21160: EQUAL
21161: IFFALSE 21171
// sBetray := true ;
21163: LD_ADDR_EXP 101
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 110 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 110
21178: EQUAL
21179: IFFALSE 21189
// sContamin := true ;
21181: LD_ADDR_EXP 102
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 111 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 111
21196: EQUAL
21197: IFFALSE 21207
// sOil := true ;
21199: LD_ADDR_EXP 104
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 112 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 112
21214: EQUAL
21215: IFFALSE 21225
// sStu := true ;
21217: LD_ADDR_EXP 108
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 113 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 113
21232: EQUAL
21233: IFFALSE 21243
// sBazooka := true ;
21235: LD_ADDR_EXP 111
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 114 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 114
21250: EQUAL
21251: IFFALSE 21261
// sMortar := true ;
21253: LD_ADDR_EXP 112
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 115 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 115
21268: EQUAL
21269: IFFALSE 21279
// sRanger := true ;
21271: LD_ADDR_EXP 122
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 116 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 116
21286: EQUAL
21287: IFFALSE 21297
// sComputer := true ;
21289: LD_ADDR_EXP 123
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 117 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 117
21304: EQUAL
21305: IFFALSE 21315
// s30 := true ;
21307: LD_ADDR_EXP 124
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 118 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 118
21322: EQUAL
21323: IFFALSE 21333
// s60 := true ;
21325: LD_ADDR_EXP 125
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// end ; if p2 = 101 then
21333: LD_VAR 0 2
21337: PUSH
21338: LD_INT 101
21340: EQUAL
21341: IFFALSE 21469
// begin case p3 of 1 :
21343: LD_VAR 0 3
21347: PUSH
21348: LD_INT 1
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21363
21356: POP
// hHackUnlimitedResources ; 2 :
21357: CALL 33567 0 0
21361: GO 21469
21363: LD_INT 2
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21378
21371: POP
// hHackSetLevel10 ; 3 :
21372: CALL 33700 0 0
21376: GO 21469
21378: LD_INT 3
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21393
21386: POP
// hHackSetLevel10YourUnits ; 4 :
21387: CALL 33785 0 0
21391: GO 21469
21393: LD_INT 4
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 21408
21401: POP
// hHackInvincible ; 5 :
21402: CALL 34233 0 0
21406: GO 21469
21408: LD_INT 5
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21423
21416: POP
// hHackInvisible ; 6 :
21417: CALL 34344 0 0
21421: GO 21469
21423: LD_INT 6
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21438
21431: POP
// hHackChangeYourSide ; 7 :
21432: CALL 34401 0 0
21436: GO 21469
21438: LD_INT 7
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21453
21446: POP
// hHackChangeUnitSide ; 8 :
21447: CALL 34443 0 0
21451: GO 21469
21453: LD_INT 8
21455: DOUBLE
21456: EQUAL
21457: IFTRUE 21461
21459: GO 21468
21461: POP
// hHackFog ; end ;
21462: CALL 34544 0 0
21466: GO 21469
21468: POP
// end ; end ;
21469: LD_VAR 0 7
21473: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21474: GO 21476
21476: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21477: LD_STRING initStreamRollete();
21479: PPUSH
21480: CALL_OW 559
// InitStreamMode ;
21484: CALL 21496 0 0
// DefineStreamItems ( false ) ;
21488: LD_INT 0
21490: PPUSH
21491: CALL 21960 0 1
// end ;
21495: END
// function InitStreamMode ; begin
21496: LD_INT 0
21498: PPUSH
// streamModeActive := false ;
21499: LD_ADDR_EXP 69
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// normalCounter := 36 ;
21507: LD_ADDR_EXP 70
21511: PUSH
21512: LD_INT 36
21514: ST_TO_ADDR
// hardcoreCounter := 18 ;
21515: LD_ADDR_EXP 71
21519: PUSH
21520: LD_INT 18
21522: ST_TO_ADDR
// sRocket := false ;
21523: LD_ADDR_EXP 74
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// sSpeed := false ;
21531: LD_ADDR_EXP 73
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// sEngine := false ;
21539: LD_ADDR_EXP 75
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// sSpec := false ;
21547: LD_ADDR_EXP 72
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// sLevel := false ;
21555: LD_ADDR_EXP 76
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// sArmoury := false ;
21563: LD_ADDR_EXP 77
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// sRadar := false ;
21571: LD_ADDR_EXP 78
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// sBunker := false ;
21579: LD_ADDR_EXP 79
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// sHack := false ;
21587: LD_ADDR_EXP 80
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// sFire := false ;
21595: LD_ADDR_EXP 81
21599: PUSH
21600: LD_INT 0
21602: ST_TO_ADDR
// sRefresh := false ;
21603: LD_ADDR_EXP 82
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
// sExp := false ;
21611: LD_ADDR_EXP 83
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// sDepot := false ;
21619: LD_ADDR_EXP 84
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// sFlag := false ;
21627: LD_ADDR_EXP 85
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// sKamikadze := false ;
21635: LD_ADDR_EXP 93
21639: PUSH
21640: LD_INT 0
21642: ST_TO_ADDR
// sTroll := false ;
21643: LD_ADDR_EXP 94
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// sSlow := false ;
21651: LD_ADDR_EXP 95
21655: PUSH
21656: LD_INT 0
21658: ST_TO_ADDR
// sLack := false ;
21659: LD_ADDR_EXP 96
21663: PUSH
21664: LD_INT 0
21666: ST_TO_ADDR
// sTank := false ;
21667: LD_ADDR_EXP 98
21671: PUSH
21672: LD_INT 0
21674: ST_TO_ADDR
// sRemote := false ;
21675: LD_ADDR_EXP 99
21679: PUSH
21680: LD_INT 0
21682: ST_TO_ADDR
// sPowell := false ;
21683: LD_ADDR_EXP 100
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// sTeleport := false ;
21691: LD_ADDR_EXP 103
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
// sOilTower := false ;
21699: LD_ADDR_EXP 105
21703: PUSH
21704: LD_INT 0
21706: ST_TO_ADDR
// sShovel := false ;
21707: LD_ADDR_EXP 106
21711: PUSH
21712: LD_INT 0
21714: ST_TO_ADDR
// sSheik := false ;
21715: LD_ADDR_EXP 107
21719: PUSH
21720: LD_INT 0
21722: ST_TO_ADDR
// sEarthquake := false ;
21723: LD_ADDR_EXP 109
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// sAI := false ;
21731: LD_ADDR_EXP 110
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// sCargo := false ;
21739: LD_ADDR_EXP 113
21743: PUSH
21744: LD_INT 0
21746: ST_TO_ADDR
// sDLaser := false ;
21747: LD_ADDR_EXP 114
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// sExchange := false ;
21755: LD_ADDR_EXP 115
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// sFac := false ;
21763: LD_ADDR_EXP 116
21767: PUSH
21768: LD_INT 0
21770: ST_TO_ADDR
// sPower := false ;
21771: LD_ADDR_EXP 117
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// sRandom := false ;
21779: LD_ADDR_EXP 118
21783: PUSH
21784: LD_INT 0
21786: ST_TO_ADDR
// sShield := false ;
21787: LD_ADDR_EXP 119
21791: PUSH
21792: LD_INT 0
21794: ST_TO_ADDR
// sTime := false ;
21795: LD_ADDR_EXP 120
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// sTools := false ;
21803: LD_ADDR_EXP 121
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// sSold := false ;
21811: LD_ADDR_EXP 86
21815: PUSH
21816: LD_INT 0
21818: ST_TO_ADDR
// sDiff := false ;
21819: LD_ADDR_EXP 87
21823: PUSH
21824: LD_INT 0
21826: ST_TO_ADDR
// sFog := false ;
21827: LD_ADDR_EXP 90
21831: PUSH
21832: LD_INT 0
21834: ST_TO_ADDR
// sReset := false ;
21835: LD_ADDR_EXP 91
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// sSun := false ;
21843: LD_ADDR_EXP 92
21847: PUSH
21848: LD_INT 0
21850: ST_TO_ADDR
// sTiger := false ;
21851: LD_ADDR_EXP 88
21855: PUSH
21856: LD_INT 0
21858: ST_TO_ADDR
// sBomb := false ;
21859: LD_ADDR_EXP 89
21863: PUSH
21864: LD_INT 0
21866: ST_TO_ADDR
// sWound := false ;
21867: LD_ADDR_EXP 97
21871: PUSH
21872: LD_INT 0
21874: ST_TO_ADDR
// sBetray := false ;
21875: LD_ADDR_EXP 101
21879: PUSH
21880: LD_INT 0
21882: ST_TO_ADDR
// sContamin := false ;
21883: LD_ADDR_EXP 102
21887: PUSH
21888: LD_INT 0
21890: ST_TO_ADDR
// sOil := false ;
21891: LD_ADDR_EXP 104
21895: PUSH
21896: LD_INT 0
21898: ST_TO_ADDR
// sStu := false ;
21899: LD_ADDR_EXP 108
21903: PUSH
21904: LD_INT 0
21906: ST_TO_ADDR
// sBazooka := false ;
21907: LD_ADDR_EXP 111
21911: PUSH
21912: LD_INT 0
21914: ST_TO_ADDR
// sMortar := false ;
21915: LD_ADDR_EXP 112
21919: PUSH
21920: LD_INT 0
21922: ST_TO_ADDR
// sRanger := false ;
21923: LD_ADDR_EXP 122
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// sComputer := false ;
21931: LD_ADDR_EXP 123
21935: PUSH
21936: LD_INT 0
21938: ST_TO_ADDR
// s30 := false ;
21939: LD_ADDR_EXP 124
21943: PUSH
21944: LD_INT 0
21946: ST_TO_ADDR
// s60 := false ;
21947: LD_ADDR_EXP 125
21951: PUSH
21952: LD_INT 0
21954: ST_TO_ADDR
// end ;
21955: LD_VAR 0 1
21959: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21960: LD_INT 0
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
// result := [ ] ;
21969: LD_ADDR_VAR 0 2
21973: PUSH
21974: EMPTY
21975: ST_TO_ADDR
// if campaign_id = 1 then
21976: LD_OWVAR 69
21980: PUSH
21981: LD_INT 1
21983: EQUAL
21984: IFFALSE 25150
// begin case mission_number of 1 :
21986: LD_OWVAR 70
21990: PUSH
21991: LD_INT 1
21993: DOUBLE
21994: EQUAL
21995: IFTRUE 21999
21997: GO 22075
21999: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22000: LD_ADDR_VAR 0 2
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: LD_INT 4
22010: PUSH
22011: LD_INT 11
22013: PUSH
22014: LD_INT 12
22016: PUSH
22017: LD_INT 15
22019: PUSH
22020: LD_INT 16
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 26
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 101
22045: PUSH
22046: LD_INT 102
22048: PUSH
22049: LD_INT 106
22051: PUSH
22052: LD_INT 116
22054: PUSH
22055: LD_INT 117
22057: PUSH
22058: LD_INT 118
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: ST_TO_ADDR
22073: GO 25148
22075: LD_INT 2
22077: DOUBLE
22078: EQUAL
22079: IFTRUE 22083
22081: GO 22167
22083: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22084: LD_ADDR_VAR 0 2
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 4
22094: PUSH
22095: LD_INT 11
22097: PUSH
22098: LD_INT 12
22100: PUSH
22101: LD_INT 15
22103: PUSH
22104: LD_INT 16
22106: PUSH
22107: LD_INT 22
22109: PUSH
22110: LD_INT 23
22112: PUSH
22113: LD_INT 26
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 101
22129: PUSH
22130: LD_INT 102
22132: PUSH
22133: LD_INT 105
22135: PUSH
22136: LD_INT 106
22138: PUSH
22139: LD_INT 108
22141: PUSH
22142: LD_INT 116
22144: PUSH
22145: LD_INT 117
22147: PUSH
22148: LD_INT 118
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: ST_TO_ADDR
22165: GO 25148
22167: LD_INT 3
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22263
22175: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 4
22186: PUSH
22187: LD_INT 5
22189: PUSH
22190: LD_INT 11
22192: PUSH
22193: LD_INT 12
22195: PUSH
22196: LD_INT 15
22198: PUSH
22199: LD_INT 16
22201: PUSH
22202: LD_INT 22
22204: PUSH
22205: LD_INT 26
22207: PUSH
22208: LD_INT 36
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 101
22225: PUSH
22226: LD_INT 102
22228: PUSH
22229: LD_INT 105
22231: PUSH
22232: LD_INT 106
22234: PUSH
22235: LD_INT 108
22237: PUSH
22238: LD_INT 116
22240: PUSH
22241: LD_INT 117
22243: PUSH
22244: LD_INT 118
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: ST_TO_ADDR
22261: GO 25148
22263: LD_INT 4
22265: DOUBLE
22266: EQUAL
22267: IFTRUE 22271
22269: GO 22367
22271: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22272: LD_ADDR_VAR 0 2
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: LD_INT 4
22282: PUSH
22283: LD_INT 5
22285: PUSH
22286: LD_INT 8
22288: PUSH
22289: LD_INT 11
22291: PUSH
22292: LD_INT 12
22294: PUSH
22295: LD_INT 15
22297: PUSH
22298: LD_INT 16
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_INT 23
22306: PUSH
22307: LD_INT 26
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 101
22329: PUSH
22330: LD_INT 102
22332: PUSH
22333: LD_INT 105
22335: PUSH
22336: LD_INT 106
22338: PUSH
22339: LD_INT 108
22341: PUSH
22342: LD_INT 116
22344: PUSH
22345: LD_INT 117
22347: PUSH
22348: LD_INT 118
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: ST_TO_ADDR
22365: GO 25148
22367: LD_INT 5
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22487
22375: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22376: LD_ADDR_VAR 0 2
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: LD_INT 4
22386: PUSH
22387: LD_INT 5
22389: PUSH
22390: LD_INT 6
22392: PUSH
22393: LD_INT 8
22395: PUSH
22396: LD_INT 11
22398: PUSH
22399: LD_INT 12
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 23
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 26
22419: PUSH
22420: LD_INT 36
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 101
22441: PUSH
22442: LD_INT 102
22444: PUSH
22445: LD_INT 105
22447: PUSH
22448: LD_INT 106
22450: PUSH
22451: LD_INT 108
22453: PUSH
22454: LD_INT 109
22456: PUSH
22457: LD_INT 112
22459: PUSH
22460: LD_INT 116
22462: PUSH
22463: LD_INT 117
22465: PUSH
22466: LD_INT 118
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: ST_TO_ADDR
22485: GO 25148
22487: LD_INT 6
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22627
22495: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22496: LD_ADDR_VAR 0 2
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 4
22506: PUSH
22507: LD_INT 5
22509: PUSH
22510: LD_INT 6
22512: PUSH
22513: LD_INT 8
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 15
22524: PUSH
22525: LD_INT 16
22527: PUSH
22528: LD_INT 20
22530: PUSH
22531: LD_INT 21
22533: PUSH
22534: LD_INT 22
22536: PUSH
22537: LD_INT 23
22539: PUSH
22540: LD_INT 25
22542: PUSH
22543: LD_INT 26
22545: PUSH
22546: LD_INT 30
22548: PUSH
22549: LD_INT 31
22551: PUSH
22552: LD_INT 32
22554: PUSH
22555: LD_INT 36
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 101
22581: PUSH
22582: LD_INT 102
22584: PUSH
22585: LD_INT 105
22587: PUSH
22588: LD_INT 106
22590: PUSH
22591: LD_INT 108
22593: PUSH
22594: LD_INT 109
22596: PUSH
22597: LD_INT 112
22599: PUSH
22600: LD_INT 116
22602: PUSH
22603: LD_INT 117
22605: PUSH
22606: LD_INT 118
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 25148
22627: LD_INT 7
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22747
22635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 101
22701: PUSH
22702: LD_INT 102
22704: PUSH
22705: LD_INT 103
22707: PUSH
22708: LD_INT 105
22710: PUSH
22711: LD_INT 106
22713: PUSH
22714: LD_INT 108
22716: PUSH
22717: LD_INT 112
22719: PUSH
22720: LD_INT 116
22722: PUSH
22723: LD_INT 117
22725: PUSH
22726: LD_INT 118
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: ST_TO_ADDR
22745: GO 25148
22747: LD_INT 8
22749: DOUBLE
22750: EQUAL
22751: IFTRUE 22755
22753: GO 22895
22755: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22756: LD_ADDR_VAR 0 2
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 4
22766: PUSH
22767: LD_INT 5
22769: PUSH
22770: LD_INT 6
22772: PUSH
22773: LD_INT 7
22775: PUSH
22776: LD_INT 8
22778: PUSH
22779: LD_INT 11
22781: PUSH
22782: LD_INT 12
22784: PUSH
22785: LD_INT 15
22787: PUSH
22788: LD_INT 16
22790: PUSH
22791: LD_INT 20
22793: PUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 22
22799: PUSH
22800: LD_INT 23
22802: PUSH
22803: LD_INT 25
22805: PUSH
22806: LD_INT 26
22808: PUSH
22809: LD_INT 30
22811: PUSH
22812: LD_INT 31
22814: PUSH
22815: LD_INT 32
22817: PUSH
22818: LD_INT 36
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 101
22845: PUSH
22846: LD_INT 102
22848: PUSH
22849: LD_INT 103
22851: PUSH
22852: LD_INT 105
22854: PUSH
22855: LD_INT 106
22857: PUSH
22858: LD_INT 108
22860: PUSH
22861: LD_INT 109
22863: PUSH
22864: LD_INT 112
22866: PUSH
22867: LD_INT 116
22869: PUSH
22870: LD_INT 117
22872: PUSH
22873: LD_INT 118
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: ST_TO_ADDR
22893: GO 25148
22895: LD_INT 9
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 23051
22903: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22904: LD_ADDR_VAR 0 2
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: LD_INT 4
22914: PUSH
22915: LD_INT 5
22917: PUSH
22918: LD_INT 6
22920: PUSH
22921: LD_INT 7
22923: PUSH
22924: LD_INT 8
22926: PUSH
22927: LD_INT 11
22929: PUSH
22930: LD_INT 12
22932: PUSH
22933: LD_INT 15
22935: PUSH
22936: LD_INT 16
22938: PUSH
22939: LD_INT 20
22941: PUSH
22942: LD_INT 21
22944: PUSH
22945: LD_INT 22
22947: PUSH
22948: LD_INT 23
22950: PUSH
22951: LD_INT 25
22953: PUSH
22954: LD_INT 26
22956: PUSH
22957: LD_INT 28
22959: PUSH
22960: LD_INT 30
22962: PUSH
22963: LD_INT 31
22965: PUSH
22966: LD_INT 32
22968: PUSH
22969: LD_INT 36
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 101
22997: PUSH
22998: LD_INT 102
23000: PUSH
23001: LD_INT 103
23003: PUSH
23004: LD_INT 105
23006: PUSH
23007: LD_INT 106
23009: PUSH
23010: LD_INT 108
23012: PUSH
23013: LD_INT 109
23015: PUSH
23016: LD_INT 112
23018: PUSH
23019: LD_INT 114
23021: PUSH
23022: LD_INT 116
23024: PUSH
23025: LD_INT 117
23027: PUSH
23028: LD_INT 118
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
23049: GO 25148
23051: LD_INT 10
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23255
23059: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23060: LD_ADDR_VAR 0 2
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 4
23070: PUSH
23071: LD_INT 5
23073: PUSH
23074: LD_INT 6
23076: PUSH
23077: LD_INT 7
23079: PUSH
23080: LD_INT 8
23082: PUSH
23083: LD_INT 9
23085: PUSH
23086: LD_INT 10
23088: PUSH
23089: LD_INT 11
23091: PUSH
23092: LD_INT 12
23094: PUSH
23095: LD_INT 13
23097: PUSH
23098: LD_INT 14
23100: PUSH
23101: LD_INT 15
23103: PUSH
23104: LD_INT 16
23106: PUSH
23107: LD_INT 17
23109: PUSH
23110: LD_INT 18
23112: PUSH
23113: LD_INT 19
23115: PUSH
23116: LD_INT 20
23118: PUSH
23119: LD_INT 21
23121: PUSH
23122: LD_INT 22
23124: PUSH
23125: LD_INT 23
23127: PUSH
23128: LD_INT 24
23130: PUSH
23131: LD_INT 25
23133: PUSH
23134: LD_INT 26
23136: PUSH
23137: LD_INT 28
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 31
23145: PUSH
23146: LD_INT 32
23148: PUSH
23149: LD_INT 36
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 101
23185: PUSH
23186: LD_INT 102
23188: PUSH
23189: LD_INT 103
23191: PUSH
23192: LD_INT 104
23194: PUSH
23195: LD_INT 105
23197: PUSH
23198: LD_INT 106
23200: PUSH
23201: LD_INT 107
23203: PUSH
23204: LD_INT 108
23206: PUSH
23207: LD_INT 109
23209: PUSH
23210: LD_INT 110
23212: PUSH
23213: LD_INT 111
23215: PUSH
23216: LD_INT 112
23218: PUSH
23219: LD_INT 114
23221: PUSH
23222: LD_INT 116
23224: PUSH
23225: LD_INT 117
23227: PUSH
23228: LD_INT 118
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: ST_TO_ADDR
23253: GO 25148
23255: LD_INT 11
23257: DOUBLE
23258: EQUAL
23259: IFTRUE 23263
23261: GO 23467
23263: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23264: LD_ADDR_VAR 0 2
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 4
23277: PUSH
23278: LD_INT 5
23280: PUSH
23281: LD_INT 6
23283: PUSH
23284: LD_INT 7
23286: PUSH
23287: LD_INT 8
23289: PUSH
23290: LD_INT 9
23292: PUSH
23293: LD_INT 10
23295: PUSH
23296: LD_INT 11
23298: PUSH
23299: LD_INT 12
23301: PUSH
23302: LD_INT 13
23304: PUSH
23305: LD_INT 14
23307: PUSH
23308: LD_INT 15
23310: PUSH
23311: LD_INT 16
23313: PUSH
23314: LD_INT 17
23316: PUSH
23317: LD_INT 18
23319: PUSH
23320: LD_INT 19
23322: PUSH
23323: LD_INT 20
23325: PUSH
23326: LD_INT 21
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_INT 23
23334: PUSH
23335: LD_INT 24
23337: PUSH
23338: LD_INT 25
23340: PUSH
23341: LD_INT 26
23343: PUSH
23344: LD_INT 28
23346: PUSH
23347: LD_INT 30
23349: PUSH
23350: LD_INT 31
23352: PUSH
23353: LD_INT 32
23355: PUSH
23356: LD_INT 34
23358: PUSH
23359: LD_INT 36
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 101
23397: PUSH
23398: LD_INT 102
23400: PUSH
23401: LD_INT 103
23403: PUSH
23404: LD_INT 104
23406: PUSH
23407: LD_INT 105
23409: PUSH
23410: LD_INT 106
23412: PUSH
23413: LD_INT 107
23415: PUSH
23416: LD_INT 108
23418: PUSH
23419: LD_INT 109
23421: PUSH
23422: LD_INT 110
23424: PUSH
23425: LD_INT 111
23427: PUSH
23428: LD_INT 112
23430: PUSH
23431: LD_INT 114
23433: PUSH
23434: LD_INT 116
23436: PUSH
23437: LD_INT 117
23439: PUSH
23440: LD_INT 118
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: ST_TO_ADDR
23465: GO 25148
23467: LD_INT 12
23469: DOUBLE
23470: EQUAL
23471: IFTRUE 23475
23473: GO 23695
23475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: LD_INT 4
23492: PUSH
23493: LD_INT 5
23495: PUSH
23496: LD_INT 6
23498: PUSH
23499: LD_INT 7
23501: PUSH
23502: LD_INT 8
23504: PUSH
23505: LD_INT 9
23507: PUSH
23508: LD_INT 10
23510: PUSH
23511: LD_INT 11
23513: PUSH
23514: LD_INT 12
23516: PUSH
23517: LD_INT 13
23519: PUSH
23520: LD_INT 14
23522: PUSH
23523: LD_INT 15
23525: PUSH
23526: LD_INT 16
23528: PUSH
23529: LD_INT 17
23531: PUSH
23532: LD_INT 18
23534: PUSH
23535: LD_INT 19
23537: PUSH
23538: LD_INT 20
23540: PUSH
23541: LD_INT 21
23543: PUSH
23544: LD_INT 22
23546: PUSH
23547: LD_INT 23
23549: PUSH
23550: LD_INT 24
23552: PUSH
23553: LD_INT 25
23555: PUSH
23556: LD_INT 26
23558: PUSH
23559: LD_INT 27
23561: PUSH
23562: LD_INT 28
23564: PUSH
23565: LD_INT 30
23567: PUSH
23568: LD_INT 31
23570: PUSH
23571: LD_INT 32
23573: PUSH
23574: LD_INT 33
23576: PUSH
23577: LD_INT 34
23579: PUSH
23580: LD_INT 36
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 101
23621: PUSH
23622: LD_INT 102
23624: PUSH
23625: LD_INT 103
23627: PUSH
23628: LD_INT 104
23630: PUSH
23631: LD_INT 105
23633: PUSH
23634: LD_INT 106
23636: PUSH
23637: LD_INT 107
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 109
23645: PUSH
23646: LD_INT 110
23648: PUSH
23649: LD_INT 111
23651: PUSH
23652: LD_INT 112
23654: PUSH
23655: LD_INT 113
23657: PUSH
23658: LD_INT 114
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: ST_TO_ADDR
23693: GO 25148
23695: LD_INT 13
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23911
23703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 3
23717: PUSH
23718: LD_INT 4
23720: PUSH
23721: LD_INT 5
23723: PUSH
23724: LD_INT 8
23726: PUSH
23727: LD_INT 9
23729: PUSH
23730: LD_INT 10
23732: PUSH
23733: LD_INT 11
23735: PUSH
23736: LD_INT 12
23738: PUSH
23739: LD_INT 14
23741: PUSH
23742: LD_INT 15
23744: PUSH
23745: LD_INT 16
23747: PUSH
23748: LD_INT 17
23750: PUSH
23751: LD_INT 18
23753: PUSH
23754: LD_INT 19
23756: PUSH
23757: LD_INT 20
23759: PUSH
23760: LD_INT 21
23762: PUSH
23763: LD_INT 22
23765: PUSH
23766: LD_INT 23
23768: PUSH
23769: LD_INT 24
23771: PUSH
23772: LD_INT 25
23774: PUSH
23775: LD_INT 26
23777: PUSH
23778: LD_INT 27
23780: PUSH
23781: LD_INT 28
23783: PUSH
23784: LD_INT 30
23786: PUSH
23787: LD_INT 31
23789: PUSH
23790: LD_INT 32
23792: PUSH
23793: LD_INT 33
23795: PUSH
23796: LD_INT 34
23798: PUSH
23799: LD_INT 36
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 101
23837: PUSH
23838: LD_INT 102
23840: PUSH
23841: LD_INT 103
23843: PUSH
23844: LD_INT 104
23846: PUSH
23847: LD_INT 105
23849: PUSH
23850: LD_INT 106
23852: PUSH
23853: LD_INT 107
23855: PUSH
23856: LD_INT 108
23858: PUSH
23859: LD_INT 109
23861: PUSH
23862: LD_INT 110
23864: PUSH
23865: LD_INT 111
23867: PUSH
23868: LD_INT 112
23870: PUSH
23871: LD_INT 113
23873: PUSH
23874: LD_INT 114
23876: PUSH
23877: LD_INT 116
23879: PUSH
23880: LD_INT 117
23882: PUSH
23883: LD_INT 118
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: ST_TO_ADDR
23909: GO 25148
23911: LD_INT 14
23913: DOUBLE
23914: EQUAL
23915: IFTRUE 23919
23917: GO 24143
23919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23920: LD_ADDR_VAR 0 2
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: LD_INT 4
23936: PUSH
23937: LD_INT 5
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: LD_INT 7
23945: PUSH
23946: LD_INT 8
23948: PUSH
23949: LD_INT 9
23951: PUSH
23952: LD_INT 10
23954: PUSH
23955: LD_INT 11
23957: PUSH
23958: LD_INT 12
23960: PUSH
23961: LD_INT 13
23963: PUSH
23964: LD_INT 14
23966: PUSH
23967: LD_INT 15
23969: PUSH
23970: LD_INT 16
23972: PUSH
23973: LD_INT 17
23975: PUSH
23976: LD_INT 18
23978: PUSH
23979: LD_INT 19
23981: PUSH
23982: LD_INT 20
23984: PUSH
23985: LD_INT 21
23987: PUSH
23988: LD_INT 22
23990: PUSH
23991: LD_INT 23
23993: PUSH
23994: LD_INT 24
23996: PUSH
23997: LD_INT 25
23999: PUSH
24000: LD_INT 26
24002: PUSH
24003: LD_INT 27
24005: PUSH
24006: LD_INT 28
24008: PUSH
24009: LD_INT 29
24011: PUSH
24012: LD_INT 30
24014: PUSH
24015: LD_INT 31
24017: PUSH
24018: LD_INT 32
24020: PUSH
24021: LD_INT 33
24023: PUSH
24024: LD_INT 34
24026: PUSH
24027: LD_INT 36
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 101
24069: PUSH
24070: LD_INT 102
24072: PUSH
24073: LD_INT 103
24075: PUSH
24076: LD_INT 104
24078: PUSH
24079: LD_INT 105
24081: PUSH
24082: LD_INT 106
24084: PUSH
24085: LD_INT 107
24087: PUSH
24088: LD_INT 108
24090: PUSH
24091: LD_INT 109
24093: PUSH
24094: LD_INT 110
24096: PUSH
24097: LD_INT 111
24099: PUSH
24100: LD_INT 112
24102: PUSH
24103: LD_INT 113
24105: PUSH
24106: LD_INT 114
24108: PUSH
24109: LD_INT 116
24111: PUSH
24112: LD_INT 117
24114: PUSH
24115: LD_INT 118
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: ST_TO_ADDR
24141: GO 25148
24143: LD_INT 15
24145: DOUBLE
24146: EQUAL
24147: IFTRUE 24151
24149: GO 24375
24151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24152: LD_ADDR_VAR 0 2
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 4
24168: PUSH
24169: LD_INT 5
24171: PUSH
24172: LD_INT 6
24174: PUSH
24175: LD_INT 7
24177: PUSH
24178: LD_INT 8
24180: PUSH
24181: LD_INT 9
24183: PUSH
24184: LD_INT 10
24186: PUSH
24187: LD_INT 11
24189: PUSH
24190: LD_INT 12
24192: PUSH
24193: LD_INT 13
24195: PUSH
24196: LD_INT 14
24198: PUSH
24199: LD_INT 15
24201: PUSH
24202: LD_INT 16
24204: PUSH
24205: LD_INT 17
24207: PUSH
24208: LD_INT 18
24210: PUSH
24211: LD_INT 19
24213: PUSH
24214: LD_INT 20
24216: PUSH
24217: LD_INT 21
24219: PUSH
24220: LD_INT 22
24222: PUSH
24223: LD_INT 23
24225: PUSH
24226: LD_INT 24
24228: PUSH
24229: LD_INT 25
24231: PUSH
24232: LD_INT 26
24234: PUSH
24235: LD_INT 27
24237: PUSH
24238: LD_INT 28
24240: PUSH
24241: LD_INT 29
24243: PUSH
24244: LD_INT 30
24246: PUSH
24247: LD_INT 31
24249: PUSH
24250: LD_INT 32
24252: PUSH
24253: LD_INT 33
24255: PUSH
24256: LD_INT 34
24258: PUSH
24259: LD_INT 36
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 101
24301: PUSH
24302: LD_INT 102
24304: PUSH
24305: LD_INT 103
24307: PUSH
24308: LD_INT 104
24310: PUSH
24311: LD_INT 105
24313: PUSH
24314: LD_INT 106
24316: PUSH
24317: LD_INT 107
24319: PUSH
24320: LD_INT 108
24322: PUSH
24323: LD_INT 109
24325: PUSH
24326: LD_INT 110
24328: PUSH
24329: LD_INT 111
24331: PUSH
24332: LD_INT 112
24334: PUSH
24335: LD_INT 113
24337: PUSH
24338: LD_INT 114
24340: PUSH
24341: LD_INT 116
24343: PUSH
24344: LD_INT 117
24346: PUSH
24347: LD_INT 118
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: ST_TO_ADDR
24373: GO 25148
24375: LD_INT 16
24377: DOUBLE
24378: EQUAL
24379: IFTRUE 24383
24381: GO 24519
24383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24384: LD_ADDR_VAR 0 2
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 4
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: LD_INT 7
24400: PUSH
24401: LD_INT 11
24403: PUSH
24404: LD_INT 12
24406: PUSH
24407: LD_INT 15
24409: PUSH
24410: LD_INT 16
24412: PUSH
24413: LD_INT 20
24415: PUSH
24416: LD_INT 21
24418: PUSH
24419: LD_INT 22
24421: PUSH
24422: LD_INT 23
24424: PUSH
24425: LD_INT 25
24427: PUSH
24428: LD_INT 26
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 31
24436: PUSH
24437: LD_INT 32
24439: PUSH
24440: LD_INT 33
24442: PUSH
24443: LD_INT 34
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 101
24469: PUSH
24470: LD_INT 102
24472: PUSH
24473: LD_INT 103
24475: PUSH
24476: LD_INT 106
24478: PUSH
24479: LD_INT 108
24481: PUSH
24482: LD_INT 112
24484: PUSH
24485: LD_INT 113
24487: PUSH
24488: LD_INT 114
24490: PUSH
24491: LD_INT 116
24493: PUSH
24494: LD_INT 117
24496: PUSH
24497: LD_INT 118
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 25148
24519: LD_INT 17
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24751
24527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24528: LD_ADDR_VAR 0 2
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: LD_INT 5
24547: PUSH
24548: LD_INT 6
24550: PUSH
24551: LD_INT 7
24553: PUSH
24554: LD_INT 8
24556: PUSH
24557: LD_INT 9
24559: PUSH
24560: LD_INT 10
24562: PUSH
24563: LD_INT 11
24565: PUSH
24566: LD_INT 12
24568: PUSH
24569: LD_INT 13
24571: PUSH
24572: LD_INT 14
24574: PUSH
24575: LD_INT 15
24577: PUSH
24578: LD_INT 16
24580: PUSH
24581: LD_INT 17
24583: PUSH
24584: LD_INT 18
24586: PUSH
24587: LD_INT 19
24589: PUSH
24590: LD_INT 20
24592: PUSH
24593: LD_INT 21
24595: PUSH
24596: LD_INT 22
24598: PUSH
24599: LD_INT 23
24601: PUSH
24602: LD_INT 24
24604: PUSH
24605: LD_INT 25
24607: PUSH
24608: LD_INT 26
24610: PUSH
24611: LD_INT 27
24613: PUSH
24614: LD_INT 28
24616: PUSH
24617: LD_INT 29
24619: PUSH
24620: LD_INT 30
24622: PUSH
24623: LD_INT 31
24625: PUSH
24626: LD_INT 32
24628: PUSH
24629: LD_INT 33
24631: PUSH
24632: LD_INT 34
24634: PUSH
24635: LD_INT 36
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 101
24677: PUSH
24678: LD_INT 102
24680: PUSH
24681: LD_INT 103
24683: PUSH
24684: LD_INT 104
24686: PUSH
24687: LD_INT 105
24689: PUSH
24690: LD_INT 106
24692: PUSH
24693: LD_INT 107
24695: PUSH
24696: LD_INT 108
24698: PUSH
24699: LD_INT 109
24701: PUSH
24702: LD_INT 110
24704: PUSH
24705: LD_INT 111
24707: PUSH
24708: LD_INT 112
24710: PUSH
24711: LD_INT 113
24713: PUSH
24714: LD_INT 114
24716: PUSH
24717: LD_INT 116
24719: PUSH
24720: LD_INT 117
24722: PUSH
24723: LD_INT 118
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25148
24751: LD_INT 18
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24907
24759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24760: LD_ADDR_VAR 0 2
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 4
24770: PUSH
24771: LD_INT 5
24773: PUSH
24774: LD_INT 7
24776: PUSH
24777: LD_INT 11
24779: PUSH
24780: LD_INT 12
24782: PUSH
24783: LD_INT 15
24785: PUSH
24786: LD_INT 16
24788: PUSH
24789: LD_INT 20
24791: PUSH
24792: LD_INT 21
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_INT 23
24800: PUSH
24801: LD_INT 25
24803: PUSH
24804: LD_INT 26
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 31
24812: PUSH
24813: LD_INT 32
24815: PUSH
24816: LD_INT 33
24818: PUSH
24819: LD_INT 34
24821: PUSH
24822: LD_INT 35
24824: PUSH
24825: LD_INT 36
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 101
24853: PUSH
24854: LD_INT 102
24856: PUSH
24857: LD_INT 103
24859: PUSH
24860: LD_INT 106
24862: PUSH
24863: LD_INT 108
24865: PUSH
24866: LD_INT 112
24868: PUSH
24869: LD_INT 113
24871: PUSH
24872: LD_INT 114
24874: PUSH
24875: LD_INT 115
24877: PUSH
24878: LD_INT 116
24880: PUSH
24881: LD_INT 117
24883: PUSH
24884: LD_INT 118
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25148
24907: LD_INT 19
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 25147
24915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24916: LD_ADDR_VAR 0 2
24920: PUSH
24921: LD_INT 1
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: LD_INT 3
24929: PUSH
24930: LD_INT 4
24932: PUSH
24933: LD_INT 5
24935: PUSH
24936: LD_INT 6
24938: PUSH
24939: LD_INT 7
24941: PUSH
24942: LD_INT 8
24944: PUSH
24945: LD_INT 9
24947: PUSH
24948: LD_INT 10
24950: PUSH
24951: LD_INT 11
24953: PUSH
24954: LD_INT 12
24956: PUSH
24957: LD_INT 13
24959: PUSH
24960: LD_INT 14
24962: PUSH
24963: LD_INT 15
24965: PUSH
24966: LD_INT 16
24968: PUSH
24969: LD_INT 17
24971: PUSH
24972: LD_INT 18
24974: PUSH
24975: LD_INT 19
24977: PUSH
24978: LD_INT 20
24980: PUSH
24981: LD_INT 21
24983: PUSH
24984: LD_INT 22
24986: PUSH
24987: LD_INT 23
24989: PUSH
24990: LD_INT 24
24992: PUSH
24993: LD_INT 25
24995: PUSH
24996: LD_INT 26
24998: PUSH
24999: LD_INT 27
25001: PUSH
25002: LD_INT 28
25004: PUSH
25005: LD_INT 29
25007: PUSH
25008: LD_INT 30
25010: PUSH
25011: LD_INT 31
25013: PUSH
25014: LD_INT 32
25016: PUSH
25017: LD_INT 33
25019: PUSH
25020: LD_INT 34
25022: PUSH
25023: LD_INT 35
25025: PUSH
25026: LD_INT 36
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 101
25069: PUSH
25070: LD_INT 102
25072: PUSH
25073: LD_INT 103
25075: PUSH
25076: LD_INT 104
25078: PUSH
25079: LD_INT 105
25081: PUSH
25082: LD_INT 106
25084: PUSH
25085: LD_INT 107
25087: PUSH
25088: LD_INT 108
25090: PUSH
25091: LD_INT 109
25093: PUSH
25094: LD_INT 110
25096: PUSH
25097: LD_INT 111
25099: PUSH
25100: LD_INT 112
25102: PUSH
25103: LD_INT 113
25105: PUSH
25106: LD_INT 114
25108: PUSH
25109: LD_INT 115
25111: PUSH
25112: LD_INT 116
25114: PUSH
25115: LD_INT 117
25117: PUSH
25118: LD_INT 118
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 25148
25147: POP
// end else
25148: GO 25379
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25150: LD_ADDR_VAR 0 2
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: LD_INT 3
25163: PUSH
25164: LD_INT 4
25166: PUSH
25167: LD_INT 5
25169: PUSH
25170: LD_INT 6
25172: PUSH
25173: LD_INT 7
25175: PUSH
25176: LD_INT 8
25178: PUSH
25179: LD_INT 9
25181: PUSH
25182: LD_INT 10
25184: PUSH
25185: LD_INT 11
25187: PUSH
25188: LD_INT 12
25190: PUSH
25191: LD_INT 13
25193: PUSH
25194: LD_INT 14
25196: PUSH
25197: LD_INT 15
25199: PUSH
25200: LD_INT 16
25202: PUSH
25203: LD_INT 17
25205: PUSH
25206: LD_INT 18
25208: PUSH
25209: LD_INT 19
25211: PUSH
25212: LD_INT 20
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 22
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 24
25226: PUSH
25227: LD_INT 25
25229: PUSH
25230: LD_INT 26
25232: PUSH
25233: LD_INT 27
25235: PUSH
25236: LD_INT 28
25238: PUSH
25239: LD_INT 29
25241: PUSH
25242: LD_INT 30
25244: PUSH
25245: LD_INT 31
25247: PUSH
25248: LD_INT 32
25250: PUSH
25251: LD_INT 33
25253: PUSH
25254: LD_INT 34
25256: PUSH
25257: LD_INT 35
25259: PUSH
25260: LD_INT 36
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 101
25303: PUSH
25304: LD_INT 102
25306: PUSH
25307: LD_INT 103
25309: PUSH
25310: LD_INT 104
25312: PUSH
25313: LD_INT 105
25315: PUSH
25316: LD_INT 106
25318: PUSH
25319: LD_INT 107
25321: PUSH
25322: LD_INT 108
25324: PUSH
25325: LD_INT 109
25327: PUSH
25328: LD_INT 110
25330: PUSH
25331: LD_INT 111
25333: PUSH
25334: LD_INT 112
25336: PUSH
25337: LD_INT 113
25339: PUSH
25340: LD_INT 114
25342: PUSH
25343: LD_INT 115
25345: PUSH
25346: LD_INT 116
25348: PUSH
25349: LD_INT 117
25351: PUSH
25352: LD_INT 118
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: ST_TO_ADDR
// if result then
25379: LD_VAR 0 2
25383: IFFALSE 26169
// begin normal :=  ;
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_STRING 
25392: ST_TO_ADDR
// hardcore :=  ;
25393: LD_ADDR_VAR 0 6
25397: PUSH
25398: LD_STRING 
25400: ST_TO_ADDR
// active :=  ;
25401: LD_ADDR_VAR 0 7
25405: PUSH
25406: LD_STRING 
25408: ST_TO_ADDR
// for i = 1 to normalCounter do
25409: LD_ADDR_VAR 0 8
25413: PUSH
25414: DOUBLE
25415: LD_INT 1
25417: DEC
25418: ST_TO_ADDR
25419: LD_EXP 70
25423: PUSH
25424: FOR_TO
25425: IFFALSE 25526
// begin tmp := 0 ;
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_STRING 0
25434: ST_TO_ADDR
// if result [ 1 ] then
25435: LD_VAR 0 2
25439: PUSH
25440: LD_INT 1
25442: ARRAY
25443: IFFALSE 25508
// if result [ 1 ] [ 1 ] = i then
25445: LD_VAR 0 2
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: PUSH
25454: LD_INT 1
25456: ARRAY
25457: PUSH
25458: LD_VAR 0 8
25462: EQUAL
25463: IFFALSE 25508
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25465: LD_ADDR_VAR 0 2
25469: PUSH
25470: LD_VAR 0 2
25474: PPUSH
25475: LD_INT 1
25477: PPUSH
25478: LD_VAR 0 2
25482: PUSH
25483: LD_INT 1
25485: ARRAY
25486: PPUSH
25487: LD_INT 1
25489: PPUSH
25490: CALL_OW 3
25494: PPUSH
25495: CALL_OW 1
25499: ST_TO_ADDR
// tmp := 1 ;
25500: LD_ADDR_VAR 0 3
25504: PUSH
25505: LD_STRING 1
25507: ST_TO_ADDR
// end ; normal := normal & tmp ;
25508: LD_ADDR_VAR 0 5
25512: PUSH
25513: LD_VAR 0 5
25517: PUSH
25518: LD_VAR 0 3
25522: STR
25523: ST_TO_ADDR
// end ;
25524: GO 25424
25526: POP
25527: POP
// for i = 1 to hardcoreCounter do
25528: LD_ADDR_VAR 0 8
25532: PUSH
25533: DOUBLE
25534: LD_INT 1
25536: DEC
25537: ST_TO_ADDR
25538: LD_EXP 71
25542: PUSH
25543: FOR_TO
25544: IFFALSE 25649
// begin tmp := 0 ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_STRING 0
25553: ST_TO_ADDR
// if result [ 2 ] then
25554: LD_VAR 0 2
25558: PUSH
25559: LD_INT 2
25561: ARRAY
25562: IFFALSE 25631
// if result [ 2 ] [ 1 ] = 100 + i then
25564: LD_VAR 0 2
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PUSH
25577: LD_INT 100
25579: PUSH
25580: LD_VAR 0 8
25584: PLUS
25585: EQUAL
25586: IFFALSE 25631
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25588: LD_ADDR_VAR 0 2
25592: PUSH
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_INT 2
25600: PPUSH
25601: LD_VAR 0 2
25605: PUSH
25606: LD_INT 2
25608: ARRAY
25609: PPUSH
25610: LD_INT 1
25612: PPUSH
25613: CALL_OW 3
25617: PPUSH
25618: CALL_OW 1
25622: ST_TO_ADDR
// tmp := 1 ;
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_STRING 1
25630: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25631: LD_ADDR_VAR 0 6
25635: PUSH
25636: LD_VAR 0 6
25640: PUSH
25641: LD_VAR 0 3
25645: STR
25646: ST_TO_ADDR
// end ;
25647: GO 25543
25649: POP
25650: POP
// if isGameLoad then
25651: LD_VAR 0 1
25655: IFFALSE 26130
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25657: LD_ADDR_VAR 0 4
25661: PUSH
25662: LD_EXP 74
25666: PUSH
25667: LD_EXP 73
25671: PUSH
25672: LD_EXP 75
25676: PUSH
25677: LD_EXP 72
25681: PUSH
25682: LD_EXP 76
25686: PUSH
25687: LD_EXP 77
25691: PUSH
25692: LD_EXP 78
25696: PUSH
25697: LD_EXP 79
25701: PUSH
25702: LD_EXP 80
25706: PUSH
25707: LD_EXP 81
25711: PUSH
25712: LD_EXP 82
25716: PUSH
25717: LD_EXP 83
25721: PUSH
25722: LD_EXP 84
25726: PUSH
25727: LD_EXP 85
25731: PUSH
25732: LD_EXP 93
25736: PUSH
25737: LD_EXP 94
25741: PUSH
25742: LD_EXP 95
25746: PUSH
25747: LD_EXP 96
25751: PUSH
25752: LD_EXP 98
25756: PUSH
25757: LD_EXP 99
25761: PUSH
25762: LD_EXP 100
25766: PUSH
25767: LD_EXP 103
25771: PUSH
25772: LD_EXP 105
25776: PUSH
25777: LD_EXP 106
25781: PUSH
25782: LD_EXP 107
25786: PUSH
25787: LD_EXP 109
25791: PUSH
25792: LD_EXP 110
25796: PUSH
25797: LD_EXP 113
25801: PUSH
25802: LD_EXP 114
25806: PUSH
25807: LD_EXP 115
25811: PUSH
25812: LD_EXP 116
25816: PUSH
25817: LD_EXP 117
25821: PUSH
25822: LD_EXP 118
25826: PUSH
25827: LD_EXP 119
25831: PUSH
25832: LD_EXP 120
25836: PUSH
25837: LD_EXP 121
25841: PUSH
25842: LD_EXP 86
25846: PUSH
25847: LD_EXP 87
25851: PUSH
25852: LD_EXP 90
25856: PUSH
25857: LD_EXP 91
25861: PUSH
25862: LD_EXP 92
25866: PUSH
25867: LD_EXP 88
25871: PUSH
25872: LD_EXP 89
25876: PUSH
25877: LD_EXP 97
25881: PUSH
25882: LD_EXP 101
25886: PUSH
25887: LD_EXP 102
25891: PUSH
25892: LD_EXP 104
25896: PUSH
25897: LD_EXP 108
25901: PUSH
25902: LD_EXP 111
25906: PUSH
25907: LD_EXP 112
25911: PUSH
25912: LD_EXP 122
25916: PUSH
25917: LD_EXP 123
25921: PUSH
25922: LD_EXP 124
25926: PUSH
25927: LD_EXP 125
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: ST_TO_ADDR
// tmp :=  ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: LD_STRING 
25995: ST_TO_ADDR
// for i = 1 to normalCounter do
25996: LD_ADDR_VAR 0 8
26000: PUSH
26001: DOUBLE
26002: LD_INT 1
26004: DEC
26005: ST_TO_ADDR
26006: LD_EXP 70
26010: PUSH
26011: FOR_TO
26012: IFFALSE 26048
// begin if flags [ i ] then
26014: LD_VAR 0 4
26018: PUSH
26019: LD_VAR 0 8
26023: ARRAY
26024: IFFALSE 26046
// tmp := tmp & i & ; ;
26026: LD_ADDR_VAR 0 3
26030: PUSH
26031: LD_VAR 0 3
26035: PUSH
26036: LD_VAR 0 8
26040: STR
26041: PUSH
26042: LD_STRING ;
26044: STR
26045: ST_TO_ADDR
// end ;
26046: GO 26011
26048: POP
26049: POP
// for i = 1 to hardcoreCounter do
26050: LD_ADDR_VAR 0 8
26054: PUSH
26055: DOUBLE
26056: LD_INT 1
26058: DEC
26059: ST_TO_ADDR
26060: LD_EXP 71
26064: PUSH
26065: FOR_TO
26066: IFFALSE 26112
// begin if flags [ normalCounter + i ] then
26068: LD_VAR 0 4
26072: PUSH
26073: LD_EXP 70
26077: PUSH
26078: LD_VAR 0 8
26082: PLUS
26083: ARRAY
26084: IFFALSE 26110
// tmp := tmp & ( 100 + i ) & ; ;
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_INT 100
26098: PUSH
26099: LD_VAR 0 8
26103: PLUS
26104: STR
26105: PUSH
26106: LD_STRING ;
26108: STR
26109: ST_TO_ADDR
// end ;
26110: GO 26065
26112: POP
26113: POP
// if tmp then
26114: LD_VAR 0 3
26118: IFFALSE 26130
// active := tmp ;
26120: LD_ADDR_VAR 0 7
26124: PUSH
26125: LD_VAR 0 3
26129: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26130: LD_STRING getStreamItemsFromMission("
26132: PUSH
26133: LD_VAR 0 5
26137: STR
26138: PUSH
26139: LD_STRING ","
26141: STR
26142: PUSH
26143: LD_VAR 0 6
26147: STR
26148: PUSH
26149: LD_STRING ","
26151: STR
26152: PUSH
26153: LD_VAR 0 7
26157: STR
26158: PUSH
26159: LD_STRING ")
26161: STR
26162: PPUSH
26163: CALL_OW 559
// end else
26167: GO 26176
// ToLua ( getStreamItemsFromMission("","","") ) ;
26169: LD_STRING getStreamItemsFromMission("","","")
26171: PPUSH
26172: CALL_OW 559
// end ;
26176: LD_VAR 0 2
26180: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26181: LD_EXP 69
26185: PUSH
26186: LD_EXP 74
26190: AND
26191: IFFALSE 26315
26193: GO 26195
26195: DISABLE
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
// begin enable ;
26200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26201: LD_ADDR_VAR 0 2
26205: PUSH
26206: LD_INT 22
26208: PUSH
26209: LD_OWVAR 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 34
26223: PUSH
26224: LD_INT 7
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 34
26233: PUSH
26234: LD_INT 45
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 34
26243: PUSH
26244: LD_INT 28
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 34
26253: PUSH
26254: LD_INT 47
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: ST_TO_ADDR
// if not tmp then
26277: LD_VAR 0 2
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26315
// for i in tmp do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: LD_VAR 0 2
26295: PUSH
26296: FOR_IN
26297: IFFALSE 26313
// begin SetLives ( i , 0 ) ;
26299: LD_VAR 0 1
26303: PPUSH
26304: LD_INT 0
26306: PPUSH
26307: CALL_OW 234
// end ;
26311: GO 26296
26313: POP
26314: POP
// end ;
26315: PPOPN 2
26317: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26318: LD_EXP 69
26322: PUSH
26323: LD_EXP 75
26327: AND
26328: IFFALSE 26412
26330: GO 26332
26332: DISABLE
26333: LD_INT 0
26335: PPUSH
26336: PPUSH
// begin enable ;
26337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26338: LD_ADDR_VAR 0 2
26342: PUSH
26343: LD_INT 22
26345: PUSH
26346: LD_OWVAR 2
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 32
26357: PUSH
26358: LD_INT 3
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PPUSH
26369: CALL_OW 69
26373: ST_TO_ADDR
// if not tmp then
26374: LD_VAR 0 2
26378: NOT
26379: IFFALSE 26383
// exit ;
26381: GO 26412
// for i in tmp do
26383: LD_ADDR_VAR 0 1
26387: PUSH
26388: LD_VAR 0 2
26392: PUSH
26393: FOR_IN
26394: IFFALSE 26410
// begin SetLives ( i , 0 ) ;
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_INT 0
26403: PPUSH
26404: CALL_OW 234
// end ;
26408: GO 26393
26410: POP
26411: POP
// end ;
26412: PPOPN 2
26414: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26415: LD_EXP 69
26419: PUSH
26420: LD_EXP 72
26424: AND
26425: IFFALSE 26518
26427: GO 26429
26429: DISABLE
26430: LD_INT 0
26432: PPUSH
// begin enable ;
26433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26434: LD_ADDR_VAR 0 1
26438: PUSH
26439: LD_INT 22
26441: PUSH
26442: LD_OWVAR 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 25
26456: PUSH
26457: LD_INT 5
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 9
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 25
26476: PUSH
26477: LD_INT 8
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: PUSH
26499: FOR_IN
26500: IFFALSE 26516
// begin SetClass ( i , 1 ) ;
26502: LD_VAR 0 1
26506: PPUSH
26507: LD_INT 1
26509: PPUSH
26510: CALL_OW 336
// end ;
26514: GO 26499
26516: POP
26517: POP
// end ;
26518: PPOPN 1
26520: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26521: LD_EXP 69
26525: PUSH
26526: LD_EXP 73
26530: AND
26531: PUSH
26532: LD_OWVAR 65
26536: PUSH
26537: LD_INT 7
26539: LESS
26540: AND
26541: IFFALSE 26555
26543: GO 26545
26545: DISABLE
// begin enable ;
26546: ENABLE
// game_speed := 7 ;
26547: LD_ADDR_OWVAR 65
26551: PUSH
26552: LD_INT 7
26554: ST_TO_ADDR
// end ;
26555: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26556: LD_EXP 69
26560: PUSH
26561: LD_EXP 76
26565: AND
26566: IFFALSE 26768
26568: GO 26570
26570: DISABLE
26571: LD_INT 0
26573: PPUSH
26574: PPUSH
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: LD_INT 81
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 3
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26768
// if tmp > 5 then
26621: LD_VAR 0 3
26625: PUSH
26626: LD_INT 5
26628: GREATER
26629: IFFALSE 26641
// k := 5 else
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: LD_INT 5
26638: ST_TO_ADDR
26639: GO 26651
// k := tmp ;
26641: LD_ADDR_VAR 0 2
26645: PUSH
26646: LD_VAR 0 3
26650: ST_TO_ADDR
// for i := 1 to k do
26651: LD_ADDR_VAR 0 1
26655: PUSH
26656: DOUBLE
26657: LD_INT 1
26659: DEC
26660: ST_TO_ADDR
26661: LD_VAR 0 2
26665: PUSH
26666: FOR_TO
26667: IFFALSE 26766
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26669: LD_VAR 0 3
26673: PUSH
26674: LD_VAR 0 1
26678: ARRAY
26679: PPUSH
26680: LD_VAR 0 1
26684: PUSH
26685: LD_INT 4
26687: MOD
26688: PUSH
26689: LD_INT 1
26691: PLUS
26692: PPUSH
26693: CALL_OW 259
26697: PUSH
26698: LD_INT 10
26700: LESS
26701: IFFALSE 26764
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26703: LD_VAR 0 3
26707: PUSH
26708: LD_VAR 0 1
26712: ARRAY
26713: PPUSH
26714: LD_VAR 0 1
26718: PUSH
26719: LD_INT 4
26721: MOD
26722: PUSH
26723: LD_INT 1
26725: PLUS
26726: PPUSH
26727: LD_VAR 0 3
26731: PUSH
26732: LD_VAR 0 1
26736: ARRAY
26737: PPUSH
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 4
26745: MOD
26746: PUSH
26747: LD_INT 1
26749: PLUS
26750: PPUSH
26751: CALL_OW 259
26755: PUSH
26756: LD_INT 1
26758: PLUS
26759: PPUSH
26760: CALL_OW 237
26764: GO 26666
26766: POP
26767: POP
// end ;
26768: PPOPN 3
26770: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26771: LD_EXP 69
26775: PUSH
26776: LD_EXP 77
26780: AND
26781: IFFALSE 26801
26783: GO 26785
26785: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26786: LD_INT 4
26788: PPUSH
26789: LD_OWVAR 2
26793: PPUSH
26794: LD_INT 0
26796: PPUSH
26797: CALL_OW 324
26801: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26802: LD_EXP 69
26806: PUSH
26807: LD_EXP 106
26811: AND
26812: IFFALSE 26832
26814: GO 26816
26816: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26817: LD_INT 19
26819: PPUSH
26820: LD_OWVAR 2
26824: PPUSH
26825: LD_INT 0
26827: PPUSH
26828: CALL_OW 324
26832: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26833: LD_EXP 69
26837: PUSH
26838: LD_EXP 78
26842: AND
26843: IFFALSE 26945
26845: GO 26847
26847: DISABLE
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
// begin enable ;
26852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26853: LD_ADDR_VAR 0 2
26857: PUSH
26858: LD_INT 22
26860: PUSH
26861: LD_OWVAR 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: PUSH
26873: LD_INT 34
26875: PUSH
26876: LD_INT 11
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 34
26885: PUSH
26886: LD_INT 30
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 69
26906: ST_TO_ADDR
// if not tmp then
26907: LD_VAR 0 2
26911: NOT
26912: IFFALSE 26916
// exit ;
26914: GO 26945
// for i in tmp do
26916: LD_ADDR_VAR 0 1
26920: PUSH
26921: LD_VAR 0 2
26925: PUSH
26926: FOR_IN
26927: IFFALSE 26943
// begin SetLives ( i , 0 ) ;
26929: LD_VAR 0 1
26933: PPUSH
26934: LD_INT 0
26936: PPUSH
26937: CALL_OW 234
// end ;
26941: GO 26926
26943: POP
26944: POP
// end ;
26945: PPOPN 2
26947: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26948: LD_EXP 69
26952: PUSH
26953: LD_EXP 79
26957: AND
26958: IFFALSE 26978
26960: GO 26962
26962: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26963: LD_INT 32
26965: PPUSH
26966: LD_OWVAR 2
26970: PPUSH
26971: LD_INT 0
26973: PPUSH
26974: CALL_OW 324
26978: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26979: LD_EXP 69
26983: PUSH
26984: LD_EXP 80
26988: AND
26989: IFFALSE 27170
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
26998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_OWVAR 2
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 33
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PPUSH
27030: CALL_OW 69
27034: ST_TO_ADDR
// if not tmp then
27035: LD_VAR 0 2
27039: NOT
27040: IFFALSE 27044
// exit ;
27042: GO 27170
// side := 0 ;
27044: LD_ADDR_VAR 0 3
27048: PUSH
27049: LD_INT 0
27051: ST_TO_ADDR
// for i := 1 to 8 do
27052: LD_ADDR_VAR 0 1
27056: PUSH
27057: DOUBLE
27058: LD_INT 1
27060: DEC
27061: ST_TO_ADDR
27062: LD_INT 8
27064: PUSH
27065: FOR_TO
27066: IFFALSE 27114
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27068: LD_OWVAR 2
27072: PUSH
27073: LD_VAR 0 1
27077: NONEQUAL
27078: PUSH
27079: LD_OWVAR 2
27083: PPUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 81
27093: PUSH
27094: LD_INT 2
27096: EQUAL
27097: AND
27098: IFFALSE 27112
// begin side := i ;
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_VAR 0 1
27109: ST_TO_ADDR
// break ;
27110: GO 27114
// end ;
27112: GO 27065
27114: POP
27115: POP
// if not side then
27116: LD_VAR 0 3
27120: NOT
27121: IFFALSE 27125
// exit ;
27123: GO 27170
// for i := 1 to tmp do
27125: LD_ADDR_VAR 0 1
27129: PUSH
27130: DOUBLE
27131: LD_INT 1
27133: DEC
27134: ST_TO_ADDR
27135: LD_VAR 0 2
27139: PUSH
27140: FOR_TO
27141: IFFALSE 27168
// if Prob ( 60 ) then
27143: LD_INT 60
27145: PPUSH
27146: CALL_OW 13
27150: IFFALSE 27166
// SetSide ( i , side ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_VAR 0 3
27161: PPUSH
27162: CALL_OW 235
27166: GO 27140
27168: POP
27169: POP
// end ;
27170: PPOPN 3
27172: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27173: LD_EXP 69
27177: PUSH
27178: LD_EXP 82
27182: AND
27183: IFFALSE 27302
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 22
27198: PUSH
27199: LD_OWVAR 2
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 21
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: PUSH
27221: LD_INT 23
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: PPUSH
27240: CALL_OW 69
27244: PUSH
27245: FOR_IN
27246: IFFALSE 27300
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27248: LD_VAR 0 1
27252: PPUSH
27253: CALL_OW 257
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 2
27263: PUSH
27264: LD_INT 3
27266: PUSH
27267: LD_INT 4
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: IN
27276: IFFALSE 27298
// SetClass ( un , rand ( 1 , 4 ) ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: LD_INT 1
27285: PPUSH
27286: LD_INT 4
27288: PPUSH
27289: CALL_OW 12
27293: PPUSH
27294: CALL_OW 336
27298: GO 27245
27300: POP
27301: POP
// end ;
27302: PPOPN 1
27304: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27305: LD_EXP 69
27309: PUSH
27310: LD_EXP 81
27314: AND
27315: IFFALSE 27394
27317: GO 27319
27319: DISABLE
27320: LD_INT 0
27322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27323: LD_ADDR_VAR 0 1
27327: PUSH
27328: LD_INT 22
27330: PUSH
27331: LD_OWVAR 2
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 21
27342: PUSH
27343: LD_INT 3
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: CALL_OW 69
27358: ST_TO_ADDR
// if not tmp then
27359: LD_VAR 0 1
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 1
27375: PPUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL_OW 12
27385: ARRAY
27386: PPUSH
27387: LD_INT 100
27389: PPUSH
27390: CALL_OW 234
// end ;
27394: PPOPN 1
27396: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27397: LD_EXP 69
27401: PUSH
27402: LD_EXP 83
27406: AND
27407: IFFALSE 27505
27409: GO 27411
27411: DISABLE
27412: LD_INT 0
27414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27415: LD_ADDR_VAR 0 1
27419: PUSH
27420: LD_INT 22
27422: PUSH
27423: LD_OWVAR 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 69
27450: ST_TO_ADDR
// if not tmp then
27451: LD_VAR 0 1
27455: NOT
27456: IFFALSE 27460
// exit ;
27458: GO 27505
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27460: LD_VAR 0 1
27464: PUSH
27465: LD_INT 1
27467: PPUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 12
27477: ARRAY
27478: PPUSH
27479: LD_INT 1
27481: PPUSH
27482: LD_INT 4
27484: PPUSH
27485: CALL_OW 12
27489: PPUSH
27490: LD_INT 3000
27492: PPUSH
27493: LD_INT 9000
27495: PPUSH
27496: CALL_OW 12
27500: PPUSH
27501: CALL_OW 492
// end ;
27505: PPOPN 1
27507: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27508: LD_EXP 69
27512: PUSH
27513: LD_EXP 84
27517: AND
27518: IFFALSE 27538
27520: GO 27522
27522: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27523: LD_INT 1
27525: PPUSH
27526: LD_OWVAR 2
27530: PPUSH
27531: LD_INT 0
27533: PPUSH
27534: CALL_OW 324
27538: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27539: LD_EXP 69
27543: PUSH
27544: LD_EXP 85
27548: AND
27549: IFFALSE 27632
27551: GO 27553
27553: DISABLE
27554: LD_INT 0
27556: PPUSH
27557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27558: LD_ADDR_VAR 0 2
27562: PUSH
27563: LD_INT 22
27565: PUSH
27566: LD_OWVAR 2
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 21
27577: PUSH
27578: LD_INT 3
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PPUSH
27589: CALL_OW 69
27593: ST_TO_ADDR
// if not tmp then
27594: LD_VAR 0 2
27598: NOT
27599: IFFALSE 27603
// exit ;
27601: GO 27632
// for i in tmp do
27603: LD_ADDR_VAR 0 1
27607: PUSH
27608: LD_VAR 0 2
27612: PUSH
27613: FOR_IN
27614: IFFALSE 27630
// SetBLevel ( i , 10 ) ;
27616: LD_VAR 0 1
27620: PPUSH
27621: LD_INT 10
27623: PPUSH
27624: CALL_OW 241
27628: GO 27613
27630: POP
27631: POP
// end ;
27632: PPOPN 2
27634: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27635: LD_EXP 69
27639: PUSH
27640: LD_EXP 86
27644: AND
27645: IFFALSE 27756
27647: GO 27649
27649: DISABLE
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
27654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27655: LD_ADDR_VAR 0 3
27659: PUSH
27660: LD_INT 22
27662: PUSH
27663: LD_OWVAR 2
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 25
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// if not tmp then
27691: LD_VAR 0 3
27695: NOT
27696: IFFALSE 27700
// exit ;
27698: GO 27756
// un := tmp [ rand ( 1 , tmp ) ] ;
27700: LD_ADDR_VAR 0 2
27704: PUSH
27705: LD_VAR 0 3
27709: PUSH
27710: LD_INT 1
27712: PPUSH
27713: LD_VAR 0 3
27717: PPUSH
27718: CALL_OW 12
27722: ARRAY
27723: ST_TO_ADDR
// if Crawls ( un ) then
27724: LD_VAR 0 2
27728: PPUSH
27729: CALL_OW 318
27733: IFFALSE 27744
// ComWalk ( un ) ;
27735: LD_VAR 0 2
27739: PPUSH
27740: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27744: LD_VAR 0 2
27748: PPUSH
27749: LD_INT 5
27751: PPUSH
27752: CALL_OW 336
// end ;
27756: PPOPN 3
27758: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27759: LD_EXP 69
27763: PUSH
27764: LD_EXP 87
27768: AND
27769: PUSH
27770: LD_OWVAR 67
27774: PUSH
27775: LD_INT 4
27777: LESS
27778: AND
27779: IFFALSE 27798
27781: GO 27783
27783: DISABLE
// begin Difficulty := Difficulty + 1 ;
27784: LD_ADDR_OWVAR 67
27788: PUSH
27789: LD_OWVAR 67
27793: PUSH
27794: LD_INT 1
27796: PLUS
27797: ST_TO_ADDR
// end ;
27798: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27799: LD_EXP 69
27803: PUSH
27804: LD_EXP 88
27808: AND
27809: IFFALSE 27912
27811: GO 27813
27813: DISABLE
27814: LD_INT 0
27816: PPUSH
// begin for i := 1 to 5 do
27817: LD_ADDR_VAR 0 1
27821: PUSH
27822: DOUBLE
27823: LD_INT 1
27825: DEC
27826: ST_TO_ADDR
27827: LD_INT 5
27829: PUSH
27830: FOR_TO
27831: IFFALSE 27910
// begin uc_nation := nation_nature ;
27833: LD_ADDR_OWVAR 21
27837: PUSH
27838: LD_INT 0
27840: ST_TO_ADDR
// uc_side := 0 ;
27841: LD_ADDR_OWVAR 20
27845: PUSH
27846: LD_INT 0
27848: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27849: LD_ADDR_OWVAR 29
27853: PUSH
27854: LD_INT 12
27856: PUSH
27857: LD_INT 12
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: ST_TO_ADDR
// hc_agressivity := 20 ;
27864: LD_ADDR_OWVAR 35
27868: PUSH
27869: LD_INT 20
27871: ST_TO_ADDR
// hc_class := class_tiger ;
27872: LD_ADDR_OWVAR 28
27876: PUSH
27877: LD_INT 14
27879: ST_TO_ADDR
// hc_gallery :=  ;
27880: LD_ADDR_OWVAR 33
27884: PUSH
27885: LD_STRING 
27887: ST_TO_ADDR
// hc_name :=  ;
27888: LD_ADDR_OWVAR 26
27892: PUSH
27893: LD_STRING 
27895: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27896: CALL_OW 44
27900: PPUSH
27901: LD_INT 0
27903: PPUSH
27904: CALL_OW 51
// end ;
27908: GO 27830
27910: POP
27911: POP
// end ;
27912: PPOPN 1
27914: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27915: LD_EXP 69
27919: PUSH
27920: LD_EXP 89
27924: AND
27925: IFFALSE 27934
27927: GO 27929
27929: DISABLE
// StreamSibBomb ;
27930: CALL 27935 0 0
27934: END
// export function StreamSibBomb ; var i , x , y ; begin
27935: LD_INT 0
27937: PPUSH
27938: PPUSH
27939: PPUSH
27940: PPUSH
// result := false ;
27941: LD_ADDR_VAR 0 1
27945: PUSH
27946: LD_INT 0
27948: ST_TO_ADDR
// for i := 1 to 16 do
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: DOUBLE
27955: LD_INT 1
27957: DEC
27958: ST_TO_ADDR
27959: LD_INT 16
27961: PUSH
27962: FOR_TO
27963: IFFALSE 28162
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27965: LD_ADDR_VAR 0 3
27969: PUSH
27970: LD_INT 10
27972: PUSH
27973: LD_INT 20
27975: PUSH
27976: LD_INT 30
27978: PUSH
27979: LD_INT 40
27981: PUSH
27982: LD_INT 50
27984: PUSH
27985: LD_INT 60
27987: PUSH
27988: LD_INT 70
27990: PUSH
27991: LD_INT 80
27993: PUSH
27994: LD_INT 90
27996: PUSH
27997: LD_INT 100
27999: PUSH
28000: LD_INT 110
28002: PUSH
28003: LD_INT 120
28005: PUSH
28006: LD_INT 130
28008: PUSH
28009: LD_INT 140
28011: PUSH
28012: LD_INT 150
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PPUSH
28035: LD_INT 15
28037: PPUSH
28038: CALL_OW 12
28042: ARRAY
28043: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28044: LD_ADDR_VAR 0 4
28048: PUSH
28049: LD_INT 10
28051: PUSH
28052: LD_INT 20
28054: PUSH
28055: LD_INT 30
28057: PUSH
28058: LD_INT 40
28060: PUSH
28061: LD_INT 50
28063: PUSH
28064: LD_INT 60
28066: PUSH
28067: LD_INT 70
28069: PUSH
28070: LD_INT 80
28072: PUSH
28073: LD_INT 90
28075: PUSH
28076: LD_INT 100
28078: PUSH
28079: LD_INT 110
28081: PUSH
28082: LD_INT 120
28084: PUSH
28085: LD_INT 130
28087: PUSH
28088: LD_INT 140
28090: PUSH
28091: LD_INT 150
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: PPUSH
28114: LD_INT 15
28116: PPUSH
28117: CALL_OW 12
28121: ARRAY
28122: ST_TO_ADDR
// if ValidHex ( x , y ) then
28123: LD_VAR 0 3
28127: PPUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: CALL_OW 488
28137: IFFALSE 28160
// begin result := [ x , y ] ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_VAR 0 3
28148: PUSH
28149: LD_VAR 0 4
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// break ;
28158: GO 28162
// end ; end ;
28160: GO 27962
28162: POP
28163: POP
// if result then
28164: LD_VAR 0 1
28168: IFFALSE 28228
// begin ToLua ( playSibBomb() ) ;
28170: LD_STRING playSibBomb()
28172: PPUSH
28173: CALL_OW 559
// wait ( 0 0$14 ) ;
28177: LD_INT 490
28179: PPUSH
28180: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28184: LD_VAR 0 1
28188: PUSH
28189: LD_INT 1
28191: ARRAY
28192: PPUSH
28193: LD_VAR 0 1
28197: PUSH
28198: LD_INT 2
28200: ARRAY
28201: PPUSH
28202: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28206: LD_VAR 0 1
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: LD_VAR 0 1
28219: PUSH
28220: LD_INT 2
28222: ARRAY
28223: PPUSH
28224: CALL_OW 429
// end ; end ;
28228: LD_VAR 0 1
28232: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28233: LD_EXP 69
28237: PUSH
28238: LD_EXP 91
28242: AND
28243: IFFALSE 28255
28245: GO 28247
28247: DISABLE
// YouLost (  ) ;
28248: LD_STRING 
28250: PPUSH
28251: CALL_OW 104
28255: END
// every 0 0$1 trigger StreamModeActive and sFog do
28256: LD_EXP 69
28260: PUSH
28261: LD_EXP 90
28265: AND
28266: IFFALSE 28280
28268: GO 28270
28270: DISABLE
// FogOff ( your_side ) ;
28271: LD_OWVAR 2
28275: PPUSH
28276: CALL_OW 344
28280: END
// every 0 0$1 trigger StreamModeActive and sSun do
28281: LD_EXP 69
28285: PUSH
28286: LD_EXP 92
28290: AND
28291: IFFALSE 28319
28293: GO 28295
28295: DISABLE
// begin solar_recharge_percent := 0 ;
28296: LD_ADDR_OWVAR 79
28300: PUSH
28301: LD_INT 0
28303: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28304: LD_INT 10500
28306: PPUSH
28307: CALL_OW 67
// solar_recharge_percent := 100 ;
28311: LD_ADDR_OWVAR 79
28315: PUSH
28316: LD_INT 100
28318: ST_TO_ADDR
// end ;
28319: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28320: LD_EXP 69
28324: PUSH
28325: LD_EXP 93
28329: AND
28330: IFFALSE 28569
28332: GO 28334
28334: DISABLE
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
28339: PPUSH
// begin tmp := [ ] ;
28340: LD_ADDR_VAR 0 3
28344: PUSH
28345: EMPTY
28346: ST_TO_ADDR
// for i := 1 to 6 do
28347: LD_ADDR_VAR 0 1
28351: PUSH
28352: DOUBLE
28353: LD_INT 1
28355: DEC
28356: ST_TO_ADDR
28357: LD_INT 6
28359: PUSH
28360: FOR_TO
28361: IFFALSE 28466
// begin uc_nation := nation_nature ;
28363: LD_ADDR_OWVAR 21
28367: PUSH
28368: LD_INT 0
28370: ST_TO_ADDR
// uc_side := 0 ;
28371: LD_ADDR_OWVAR 20
28375: PUSH
28376: LD_INT 0
28378: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28379: LD_ADDR_OWVAR 29
28383: PUSH
28384: LD_INT 12
28386: PUSH
28387: LD_INT 12
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: ST_TO_ADDR
// hc_agressivity := 20 ;
28394: LD_ADDR_OWVAR 35
28398: PUSH
28399: LD_INT 20
28401: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28402: LD_ADDR_OWVAR 28
28406: PUSH
28407: LD_INT 17
28409: ST_TO_ADDR
// hc_gallery :=  ;
28410: LD_ADDR_OWVAR 33
28414: PUSH
28415: LD_STRING 
28417: ST_TO_ADDR
// hc_name :=  ;
28418: LD_ADDR_OWVAR 26
28422: PUSH
28423: LD_STRING 
28425: ST_TO_ADDR
// un := CreateHuman ;
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: CALL_OW 44
28435: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28436: LD_VAR 0 2
28440: PPUSH
28441: LD_INT 1
28443: PPUSH
28444: CALL_OW 51
// tmp := tmp ^ un ;
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_VAR 0 3
28457: PUSH
28458: LD_VAR 0 2
28462: ADD
28463: ST_TO_ADDR
// end ;
28464: GO 28360
28466: POP
28467: POP
// repeat wait ( 0 0$1 ) ;
28468: LD_INT 35
28470: PPUSH
28471: CALL_OW 67
// for un in tmp do
28475: LD_ADDR_VAR 0 2
28479: PUSH
28480: LD_VAR 0 3
28484: PUSH
28485: FOR_IN
28486: IFFALSE 28560
// begin if IsDead ( un ) then
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 301
28497: IFFALSE 28517
// begin tmp := tmp diff un ;
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_VAR 0 3
28508: PUSH
28509: LD_VAR 0 2
28513: DIFF
28514: ST_TO_ADDR
// continue ;
28515: GO 28485
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28517: LD_VAR 0 2
28521: PPUSH
28522: LD_INT 3
28524: PUSH
28525: LD_INT 22
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PPUSH
28539: CALL_OW 69
28543: PPUSH
28544: LD_VAR 0 2
28548: PPUSH
28549: CALL_OW 74
28553: PPUSH
28554: CALL_OW 115
// end ;
28558: GO 28485
28560: POP
28561: POP
// until not tmp ;
28562: LD_VAR 0 3
28566: NOT
28567: IFFALSE 28468
// end ;
28569: PPOPN 3
28571: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28572: LD_EXP 69
28576: PUSH
28577: LD_EXP 94
28581: AND
28582: IFFALSE 28636
28584: GO 28586
28586: DISABLE
// begin ToLua ( displayTroll(); ) ;
28587: LD_STRING displayTroll();
28589: PPUSH
28590: CALL_OW 559
// wait ( 3 3$00 ) ;
28594: LD_INT 6300
28596: PPUSH
28597: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28601: LD_STRING hideTroll();
28603: PPUSH
28604: CALL_OW 559
// wait ( 1 1$00 ) ;
28608: LD_INT 2100
28610: PPUSH
28611: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28615: LD_STRING displayTroll();
28617: PPUSH
28618: CALL_OW 559
// wait ( 1 1$00 ) ;
28622: LD_INT 2100
28624: PPUSH
28625: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28629: LD_STRING hideTroll();
28631: PPUSH
28632: CALL_OW 559
// end ;
28636: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28637: LD_EXP 69
28641: PUSH
28642: LD_EXP 95
28646: AND
28647: IFFALSE 28710
28649: GO 28651
28651: DISABLE
28652: LD_INT 0
28654: PPUSH
// begin p := 0 ;
28655: LD_ADDR_VAR 0 1
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// repeat game_speed := 1 ;
28663: LD_ADDR_OWVAR 65
28667: PUSH
28668: LD_INT 1
28670: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28671: LD_INT 35
28673: PPUSH
28674: CALL_OW 67
// p := p + 1 ;
28678: LD_ADDR_VAR 0 1
28682: PUSH
28683: LD_VAR 0 1
28687: PUSH
28688: LD_INT 1
28690: PLUS
28691: ST_TO_ADDR
// until p >= 60 ;
28692: LD_VAR 0 1
28696: PUSH
28697: LD_INT 60
28699: GREATEREQUAL
28700: IFFALSE 28663
// game_speed := 4 ;
28702: LD_ADDR_OWVAR 65
28706: PUSH
28707: LD_INT 4
28709: ST_TO_ADDR
// end ;
28710: PPOPN 1
28712: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28713: LD_EXP 69
28717: PUSH
28718: LD_EXP 96
28722: AND
28723: IFFALSE 28869
28725: GO 28727
28727: DISABLE
28728: LD_INT 0
28730: PPUSH
28731: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28732: LD_ADDR_VAR 0 1
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_OWVAR 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 30
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 30
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PPUSH
28781: CALL_OW 69
28785: ST_TO_ADDR
// if not depot then
28786: LD_VAR 0 1
28790: NOT
28791: IFFALSE 28795
// exit ;
28793: GO 28869
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: LD_VAR 0 1
28804: PUSH
28805: LD_INT 1
28807: PPUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 12
28817: ARRAY
28818: PPUSH
28819: CALL_OW 274
28823: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28824: LD_VAR 0 2
28828: PPUSH
28829: LD_INT 1
28831: PPUSH
28832: LD_INT 0
28834: PPUSH
28835: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28839: LD_VAR 0 2
28843: PPUSH
28844: LD_INT 2
28846: PPUSH
28847: LD_INT 0
28849: PPUSH
28850: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28854: LD_VAR 0 2
28858: PPUSH
28859: LD_INT 3
28861: PPUSH
28862: LD_INT 0
28864: PPUSH
28865: CALL_OW 277
// end ;
28869: PPOPN 2
28871: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28872: LD_EXP 69
28876: PUSH
28877: LD_EXP 97
28881: AND
28882: IFFALSE 28979
28884: GO 28886
28886: DISABLE
28887: LD_INT 0
28889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28890: LD_ADDR_VAR 0 1
28894: PUSH
28895: LD_INT 22
28897: PUSH
28898: LD_OWVAR 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 21
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 3
28919: PUSH
28920: LD_INT 23
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 69
28943: ST_TO_ADDR
// if not tmp then
28944: LD_VAR 0 1
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 28979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28953: LD_VAR 0 1
28957: PUSH
28958: LD_INT 1
28960: PPUSH
28961: LD_VAR 0 1
28965: PPUSH
28966: CALL_OW 12
28970: ARRAY
28971: PPUSH
28972: LD_INT 200
28974: PPUSH
28975: CALL_OW 234
// end ;
28979: PPOPN 1
28981: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28982: LD_EXP 69
28986: PUSH
28987: LD_EXP 98
28991: AND
28992: IFFALSE 29071
28994: GO 28996
28996: DISABLE
28997: LD_INT 0
28999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29000: LD_ADDR_VAR 0 1
29004: PUSH
29005: LD_INT 22
29007: PUSH
29008: LD_OWVAR 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 21
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PPUSH
29031: CALL_OW 69
29035: ST_TO_ADDR
// if not tmp then
29036: LD_VAR 0 1
29040: NOT
29041: IFFALSE 29045
// exit ;
29043: GO 29071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29045: LD_VAR 0 1
29049: PUSH
29050: LD_INT 1
29052: PPUSH
29053: LD_VAR 0 1
29057: PPUSH
29058: CALL_OW 12
29062: ARRAY
29063: PPUSH
29064: LD_INT 60
29066: PPUSH
29067: CALL_OW 234
// end ;
29071: PPOPN 1
29073: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29074: LD_EXP 69
29078: PUSH
29079: LD_EXP 99
29083: AND
29084: IFFALSE 29183
29086: GO 29088
29088: DISABLE
29089: LD_INT 0
29091: PPUSH
29092: PPUSH
// begin enable ;
29093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29094: LD_ADDR_VAR 0 1
29098: PUSH
29099: LD_INT 22
29101: PUSH
29102: LD_OWVAR 2
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 61
29113: PUSH
29114: EMPTY
29115: LIST
29116: PUSH
29117: LD_INT 33
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: PPUSH
29132: CALL_OW 69
29136: ST_TO_ADDR
// if not tmp then
29137: LD_VAR 0 1
29141: NOT
29142: IFFALSE 29146
// exit ;
29144: GO 29183
// for i in tmp do
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: LD_VAR 0 1
29155: PUSH
29156: FOR_IN
29157: IFFALSE 29181
// if IsControledBy ( i ) then
29159: LD_VAR 0 2
29163: PPUSH
29164: CALL_OW 312
29168: IFFALSE 29179
// ComUnlink ( i ) ;
29170: LD_VAR 0 2
29174: PPUSH
29175: CALL_OW 136
29179: GO 29156
29181: POP
29182: POP
// end ;
29183: PPOPN 2
29185: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29186: LD_EXP 69
29190: PUSH
29191: LD_EXP 100
29195: AND
29196: IFFALSE 29336
29198: GO 29200
29200: DISABLE
29201: LD_INT 0
29203: PPUSH
29204: PPUSH
// begin ToLua ( displayPowell(); ) ;
29205: LD_STRING displayPowell();
29207: PPUSH
29208: CALL_OW 559
// uc_side := 0 ;
29212: LD_ADDR_OWVAR 20
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// uc_nation := 2 ;
29220: LD_ADDR_OWVAR 21
29224: PUSH
29225: LD_INT 2
29227: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29228: LD_ADDR_OWVAR 37
29232: PUSH
29233: LD_INT 14
29235: ST_TO_ADDR
// vc_engine := engine_siberite ;
29236: LD_ADDR_OWVAR 39
29240: PUSH
29241: LD_INT 3
29243: ST_TO_ADDR
// vc_control := control_apeman ;
29244: LD_ADDR_OWVAR 38
29248: PUSH
29249: LD_INT 5
29251: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29252: LD_ADDR_OWVAR 40
29256: PUSH
29257: LD_INT 29
29259: ST_TO_ADDR
// un := CreateVehicle ;
29260: LD_ADDR_VAR 0 2
29264: PUSH
29265: CALL_OW 45
29269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29270: LD_VAR 0 2
29274: PPUSH
29275: LD_INT 1
29277: PPUSH
29278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29282: LD_INT 35
29284: PPUSH
29285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29289: LD_VAR 0 2
29293: PPUSH
29294: LD_INT 22
29296: PUSH
29297: LD_OWVAR 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PPUSH
29306: CALL_OW 69
29310: PPUSH
29311: LD_VAR 0 2
29315: PPUSH
29316: CALL_OW 74
29320: PPUSH
29321: CALL_OW 115
// until IsDead ( un ) ;
29325: LD_VAR 0 2
29329: PPUSH
29330: CALL_OW 301
29334: IFFALSE 29282
// end ;
29336: PPOPN 2
29338: END
// every 0 0$1 trigger StreamModeActive and sStu do
29339: LD_EXP 69
29343: PUSH
29344: LD_EXP 108
29348: AND
29349: IFFALSE 29365
29351: GO 29353
29353: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29354: LD_STRING displayStucuk();
29356: PPUSH
29357: CALL_OW 559
// ResetFog ;
29361: CALL_OW 335
// end ;
29365: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29366: LD_EXP 69
29370: PUSH
29371: LD_EXP 101
29375: AND
29376: IFFALSE 29517
29378: GO 29380
29380: DISABLE
29381: LD_INT 0
29383: PPUSH
29384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29385: LD_ADDR_VAR 0 2
29389: PUSH
29390: LD_INT 22
29392: PUSH
29393: LD_OWVAR 2
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 21
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PPUSH
29416: CALL_OW 69
29420: ST_TO_ADDR
// if not tmp then
29421: LD_VAR 0 2
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29517
// un := tmp [ rand ( 1 , tmp ) ] ;
29430: LD_ADDR_VAR 0 1
29434: PUSH
29435: LD_VAR 0 2
29439: PUSH
29440: LD_INT 1
29442: PPUSH
29443: LD_VAR 0 2
29447: PPUSH
29448: CALL_OW 12
29452: ARRAY
29453: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_INT 0
29461: PPUSH
29462: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29466: LD_VAR 0 1
29470: PPUSH
29471: LD_OWVAR 3
29475: PUSH
29476: LD_VAR 0 1
29480: DIFF
29481: PPUSH
29482: LD_VAR 0 1
29486: PPUSH
29487: CALL_OW 74
29491: PPUSH
29492: CALL_OW 115
// wait ( 0 0$20 ) ;
29496: LD_INT 700
29498: PPUSH
29499: CALL_OW 67
// SetSide ( un , your_side ) ;
29503: LD_VAR 0 1
29507: PPUSH
29508: LD_OWVAR 2
29512: PPUSH
29513: CALL_OW 235
// end ;
29517: PPOPN 2
29519: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29520: LD_EXP 69
29524: PUSH
29525: LD_EXP 102
29529: AND
29530: IFFALSE 29636
29532: GO 29534
29534: DISABLE
29535: LD_INT 0
29537: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29538: LD_ADDR_VAR 0 1
29542: PUSH
29543: LD_INT 22
29545: PUSH
29546: LD_OWVAR 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: LD_INT 30
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PPUSH
29587: CALL_OW 69
29591: ST_TO_ADDR
// if not depot then
29592: LD_VAR 0 1
29596: NOT
29597: IFFALSE 29601
// exit ;
29599: GO 29636
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29601: LD_VAR 0 1
29605: PUSH
29606: LD_INT 1
29608: ARRAY
29609: PPUSH
29610: CALL_OW 250
29614: PPUSH
29615: LD_VAR 0 1
29619: PUSH
29620: LD_INT 1
29622: ARRAY
29623: PPUSH
29624: CALL_OW 251
29628: PPUSH
29629: LD_INT 70
29631: PPUSH
29632: CALL_OW 495
// end ;
29636: PPOPN 1
29638: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29639: LD_EXP 69
29643: PUSH
29644: LD_EXP 103
29648: AND
29649: IFFALSE 29860
29651: GO 29653
29653: DISABLE
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_INT 22
29668: PUSH
29669: LD_OWVAR 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 21
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 69
29696: ST_TO_ADDR
// if not tmp then
29697: LD_VAR 0 5
29701: NOT
29702: IFFALSE 29706
// exit ;
29704: GO 29860
// for i in tmp do
29706: LD_ADDR_VAR 0 1
29710: PUSH
29711: LD_VAR 0 5
29715: PUSH
29716: FOR_IN
29717: IFFALSE 29858
// begin d := rand ( 0 , 5 ) ;
29719: LD_ADDR_VAR 0 4
29723: PUSH
29724: LD_INT 0
29726: PPUSH
29727: LD_INT 5
29729: PPUSH
29730: CALL_OW 12
29734: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 250
29749: PPUSH
29750: LD_VAR 0 4
29754: PPUSH
29755: LD_INT 3
29757: PPUSH
29758: LD_INT 12
29760: PPUSH
29761: CALL_OW 12
29765: PPUSH
29766: CALL_OW 272
29770: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: LD_VAR 0 1
29780: PPUSH
29781: CALL_OW 251
29785: PPUSH
29786: LD_VAR 0 4
29790: PPUSH
29791: LD_INT 3
29793: PPUSH
29794: LD_INT 12
29796: PPUSH
29797: CALL_OW 12
29801: PPUSH
29802: CALL_OW 273
29806: ST_TO_ADDR
// if ValidHex ( x , y ) then
29807: LD_VAR 0 2
29811: PPUSH
29812: LD_VAR 0 3
29816: PPUSH
29817: CALL_OW 488
29821: IFFALSE 29856
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29823: LD_VAR 0 1
29827: PPUSH
29828: LD_VAR 0 2
29832: PPUSH
29833: LD_VAR 0 3
29837: PPUSH
29838: LD_INT 3
29840: PPUSH
29841: LD_INT 6
29843: PPUSH
29844: CALL_OW 12
29848: PPUSH
29849: LD_INT 1
29851: PPUSH
29852: CALL_OW 483
// end ;
29856: GO 29716
29858: POP
29859: POP
// end ;
29860: PPOPN 5
29862: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29863: LD_EXP 69
29867: PUSH
29868: LD_EXP 104
29872: AND
29873: IFFALSE 29967
29875: GO 29877
29877: DISABLE
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29882: LD_ADDR_VAR 0 2
29886: PUSH
29887: LD_INT 22
29889: PUSH
29890: LD_OWVAR 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 32
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 21
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 69
29928: ST_TO_ADDR
// if not tmp then
29929: LD_VAR 0 2
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 29967
// for i in tmp do
29938: LD_ADDR_VAR 0 1
29942: PUSH
29943: LD_VAR 0 2
29947: PUSH
29948: FOR_IN
29949: IFFALSE 29965
// SetFuel ( i , 0 ) ;
29951: LD_VAR 0 1
29955: PPUSH
29956: LD_INT 0
29958: PPUSH
29959: CALL_OW 240
29963: GO 29948
29965: POP
29966: POP
// end ;
29967: PPOPN 2
29969: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29970: LD_EXP 69
29974: PUSH
29975: LD_EXP 105
29979: AND
29980: IFFALSE 30046
29982: GO 29984
29984: DISABLE
29985: LD_INT 0
29987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29988: LD_ADDR_VAR 0 1
29992: PUSH
29993: LD_INT 22
29995: PUSH
29996: LD_OWVAR 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 30
30007: PUSH
30008: LD_INT 29
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 69
30023: ST_TO_ADDR
// if not tmp then
30024: LD_VAR 0 1
30028: NOT
30029: IFFALSE 30033
// exit ;
30031: GO 30046
// DestroyUnit ( tmp [ 1 ] ) ;
30033: LD_VAR 0 1
30037: PUSH
30038: LD_INT 1
30040: ARRAY
30041: PPUSH
30042: CALL_OW 65
// end ;
30046: PPOPN 1
30048: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30049: LD_EXP 69
30053: PUSH
30054: LD_EXP 107
30058: AND
30059: IFFALSE 30188
30061: GO 30063
30063: DISABLE
30064: LD_INT 0
30066: PPUSH
// begin uc_side := 0 ;
30067: LD_ADDR_OWVAR 20
30071: PUSH
30072: LD_INT 0
30074: ST_TO_ADDR
// uc_nation := nation_arabian ;
30075: LD_ADDR_OWVAR 21
30079: PUSH
30080: LD_INT 2
30082: ST_TO_ADDR
// hc_gallery :=  ;
30083: LD_ADDR_OWVAR 33
30087: PUSH
30088: LD_STRING 
30090: ST_TO_ADDR
// hc_name :=  ;
30091: LD_ADDR_OWVAR 26
30095: PUSH
30096: LD_STRING 
30098: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30099: LD_INT 1
30101: PPUSH
30102: LD_INT 11
30104: PPUSH
30105: LD_INT 10
30107: PPUSH
30108: CALL_OW 380
// un := CreateHuman ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: CALL_OW 44
30121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30122: LD_VAR 0 1
30126: PPUSH
30127: LD_INT 1
30129: PPUSH
30130: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30134: LD_INT 35
30136: PPUSH
30137: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: LD_INT 22
30148: PUSH
30149: LD_OWVAR 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PPUSH
30158: CALL_OW 69
30162: PPUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 74
30172: PPUSH
30173: CALL_OW 115
// until IsDead ( un ) ;
30177: LD_VAR 0 1
30181: PPUSH
30182: CALL_OW 301
30186: IFFALSE 30134
// end ;
30188: PPOPN 1
30190: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30191: LD_EXP 69
30195: PUSH
30196: LD_EXP 109
30200: AND
30201: IFFALSE 30213
30203: GO 30205
30205: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30206: LD_STRING earthquake(getX(game), 0, 32)
30208: PPUSH
30209: CALL_OW 559
30213: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30214: LD_EXP 69
30218: PUSH
30219: LD_EXP 110
30223: AND
30224: IFFALSE 30315
30226: GO 30228
30228: DISABLE
30229: LD_INT 0
30231: PPUSH
// begin enable ;
30232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30233: LD_ADDR_VAR 0 1
30237: PUSH
30238: LD_INT 22
30240: PUSH
30241: LD_OWVAR 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 21
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 33
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL_OW 69
30279: ST_TO_ADDR
// if not tmp then
30280: LD_VAR 0 1
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30289: LD_VAR 0 1
30293: PUSH
30294: LD_INT 1
30296: PPUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 12
30306: ARRAY
30307: PPUSH
30308: LD_INT 1
30310: PPUSH
30311: CALL_OW 234
// end ;
30315: PPOPN 1
30317: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30318: LD_EXP 69
30322: PUSH
30323: LD_EXP 111
30327: AND
30328: IFFALSE 30469
30330: GO 30332
30332: DISABLE
30333: LD_INT 0
30335: PPUSH
30336: PPUSH
30337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: LD_OWVAR 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 25
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PPUSH
30369: CALL_OW 69
30373: ST_TO_ADDR
// if not tmp then
30374: LD_VAR 0 3
30378: NOT
30379: IFFALSE 30383
// exit ;
30381: GO 30469
// un := tmp [ rand ( 1 , tmp ) ] ;
30383: LD_ADDR_VAR 0 2
30387: PUSH
30388: LD_VAR 0 3
30392: PUSH
30393: LD_INT 1
30395: PPUSH
30396: LD_VAR 0 3
30400: PPUSH
30401: CALL_OW 12
30405: ARRAY
30406: ST_TO_ADDR
// if Crawls ( un ) then
30407: LD_VAR 0 2
30411: PPUSH
30412: CALL_OW 318
30416: IFFALSE 30427
// ComWalk ( un ) ;
30418: LD_VAR 0 2
30422: PPUSH
30423: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30427: LD_VAR 0 2
30431: PPUSH
30432: LD_INT 9
30434: PPUSH
30435: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30439: LD_INT 28
30441: PPUSH
30442: LD_OWVAR 2
30446: PPUSH
30447: LD_INT 2
30449: PPUSH
30450: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30454: LD_INT 29
30456: PPUSH
30457: LD_OWVAR 2
30461: PPUSH
30462: LD_INT 2
30464: PPUSH
30465: CALL_OW 322
// end ;
30469: PPOPN 3
30471: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30472: LD_EXP 69
30476: PUSH
30477: LD_EXP 112
30481: AND
30482: IFFALSE 30593
30484: GO 30486
30486: DISABLE
30487: LD_INT 0
30489: PPUSH
30490: PPUSH
30491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: LD_INT 22
30499: PUSH
30500: LD_OWVAR 2
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 25
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PPUSH
30523: CALL_OW 69
30527: ST_TO_ADDR
// if not tmp then
30528: LD_VAR 0 3
30532: NOT
30533: IFFALSE 30537
// exit ;
30535: GO 30593
// un := tmp [ rand ( 1 , tmp ) ] ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_VAR 0 3
30546: PUSH
30547: LD_INT 1
30549: PPUSH
30550: LD_VAR 0 3
30554: PPUSH
30555: CALL_OW 12
30559: ARRAY
30560: ST_TO_ADDR
// if Crawls ( un ) then
30561: LD_VAR 0 2
30565: PPUSH
30566: CALL_OW 318
30570: IFFALSE 30581
// ComWalk ( un ) ;
30572: LD_VAR 0 2
30576: PPUSH
30577: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_INT 8
30588: PPUSH
30589: CALL_OW 336
// end ;
30593: PPOPN 3
30595: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30596: LD_EXP 69
30600: PUSH
30601: LD_EXP 113
30605: AND
30606: IFFALSE 30750
30608: GO 30610
30610: DISABLE
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 21
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 34
30647: PUSH
30648: LD_INT 12
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 34
30657: PUSH
30658: LD_INT 51
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 34
30667: PUSH
30668: LD_INT 32
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 69
30690: ST_TO_ADDR
// if not tmp then
30691: LD_VAR 0 2
30695: NOT
30696: IFFALSE 30700
// exit ;
30698: GO 30750
// for i in tmp do
30700: LD_ADDR_VAR 0 1
30704: PUSH
30705: LD_VAR 0 2
30709: PUSH
30710: FOR_IN
30711: IFFALSE 30748
// if GetCargo ( i , mat_artifact ) = 0 then
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_INT 4
30720: PPUSH
30721: CALL_OW 289
30725: PUSH
30726: LD_INT 0
30728: EQUAL
30729: IFFALSE 30746
// SetCargo ( i , mat_siberit , 100 ) ;
30731: LD_VAR 0 1
30735: PPUSH
30736: LD_INT 3
30738: PPUSH
30739: LD_INT 100
30741: PPUSH
30742: CALL_OW 290
30746: GO 30710
30748: POP
30749: POP
// end ;
30750: PPOPN 2
30752: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30753: LD_EXP 69
30757: PUSH
30758: LD_EXP 114
30762: AND
30763: IFFALSE 30946
30765: GO 30767
30767: DISABLE
30768: LD_INT 0
30770: PPUSH
30771: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30772: LD_ADDR_VAR 0 2
30776: PUSH
30777: LD_INT 22
30779: PUSH
30780: LD_OWVAR 2
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PPUSH
30789: CALL_OW 69
30793: ST_TO_ADDR
// if not tmp then
30794: LD_VAR 0 2
30798: NOT
30799: IFFALSE 30803
// exit ;
30801: GO 30946
// for i := 1 to 2 do
30803: LD_ADDR_VAR 0 1
30807: PUSH
30808: DOUBLE
30809: LD_INT 1
30811: DEC
30812: ST_TO_ADDR
30813: LD_INT 2
30815: PUSH
30816: FOR_TO
30817: IFFALSE 30944
// begin uc_side := your_side ;
30819: LD_ADDR_OWVAR 20
30823: PUSH
30824: LD_OWVAR 2
30828: ST_TO_ADDR
// uc_nation := nation_american ;
30829: LD_ADDR_OWVAR 21
30833: PUSH
30834: LD_INT 1
30836: ST_TO_ADDR
// vc_chassis := us_morphling ;
30837: LD_ADDR_OWVAR 37
30841: PUSH
30842: LD_INT 5
30844: ST_TO_ADDR
// vc_engine := engine_siberite ;
30845: LD_ADDR_OWVAR 39
30849: PUSH
30850: LD_INT 3
30852: ST_TO_ADDR
// vc_control := control_computer ;
30853: LD_ADDR_OWVAR 38
30857: PUSH
30858: LD_INT 3
30860: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30861: LD_ADDR_OWVAR 40
30865: PUSH
30866: LD_INT 10
30868: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30869: LD_VAR 0 2
30873: PUSH
30874: LD_INT 1
30876: ARRAY
30877: PPUSH
30878: CALL_OW 310
30882: NOT
30883: IFFALSE 30930
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30885: CALL_OW 45
30889: PPUSH
30890: LD_VAR 0 2
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: CALL_OW 250
30903: PPUSH
30904: LD_VAR 0 2
30908: PUSH
30909: LD_INT 1
30911: ARRAY
30912: PPUSH
30913: CALL_OW 251
30917: PPUSH
30918: LD_INT 12
30920: PPUSH
30921: LD_INT 1
30923: PPUSH
30924: CALL_OW 50
30928: GO 30942
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30930: CALL_OW 45
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: CALL_OW 51
// end ;
30942: GO 30816
30944: POP
30945: POP
// end ;
30946: PPOPN 2
30948: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30949: LD_EXP 69
30953: PUSH
30954: LD_EXP 115
30958: AND
30959: IFFALSE 31181
30961: GO 30963
30963: DISABLE
30964: LD_INT 0
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: LD_INT 22
30979: PUSH
30980: LD_OWVAR 2
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 21
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: LD_INT 23
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: ST_TO_ADDR
// if not tmp then
31026: LD_VAR 0 6
31030: NOT
31031: IFFALSE 31035
// exit ;
31033: GO 31181
// s1 := rand ( 1 , 4 ) ;
31035: LD_ADDR_VAR 0 2
31039: PUSH
31040: LD_INT 1
31042: PPUSH
31043: LD_INT 4
31045: PPUSH
31046: CALL_OW 12
31050: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31051: LD_ADDR_VAR 0 4
31055: PUSH
31056: LD_VAR 0 6
31060: PUSH
31061: LD_INT 1
31063: ARRAY
31064: PPUSH
31065: LD_VAR 0 2
31069: PPUSH
31070: CALL_OW 259
31074: ST_TO_ADDR
// if s1 = 1 then
31075: LD_VAR 0 2
31079: PUSH
31080: LD_INT 1
31082: EQUAL
31083: IFFALSE 31103
// s2 := rand ( 2 , 4 ) else
31085: LD_ADDR_VAR 0 3
31089: PUSH
31090: LD_INT 2
31092: PPUSH
31093: LD_INT 4
31095: PPUSH
31096: CALL_OW 12
31100: ST_TO_ADDR
31101: GO 31111
// s2 := 1 ;
31103: LD_ADDR_VAR 0 3
31107: PUSH
31108: LD_INT 1
31110: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31111: LD_ADDR_VAR 0 5
31115: PUSH
31116: LD_VAR 0 6
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: LD_VAR 0 3
31129: PPUSH
31130: CALL_OW 259
31134: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31135: LD_VAR 0 6
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: LD_VAR 0 2
31148: PPUSH
31149: LD_VAR 0 5
31153: PPUSH
31154: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31158: LD_VAR 0 6
31162: PUSH
31163: LD_INT 1
31165: ARRAY
31166: PPUSH
31167: LD_VAR 0 3
31171: PPUSH
31172: LD_VAR 0 4
31176: PPUSH
31177: CALL_OW 237
// end ;
31181: PPOPN 6
31183: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31184: LD_EXP 69
31188: PUSH
31189: LD_EXP 116
31193: AND
31194: IFFALSE 31273
31196: GO 31198
31198: DISABLE
31199: LD_INT 0
31201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31202: LD_ADDR_VAR 0 1
31206: PUSH
31207: LD_INT 22
31209: PUSH
31210: LD_OWVAR 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 30
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PPUSH
31233: CALL_OW 69
31237: ST_TO_ADDR
// if not tmp then
31238: LD_VAR 0 1
31242: NOT
31243: IFFALSE 31247
// exit ;
31245: GO 31273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31247: LD_VAR 0 1
31251: PUSH
31252: LD_INT 1
31254: PPUSH
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 12
31264: ARRAY
31265: PPUSH
31266: LD_INT 1
31268: PPUSH
31269: CALL_OW 234
// end ;
31273: PPOPN 1
31275: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31276: LD_EXP 69
31280: PUSH
31281: LD_EXP 117
31285: AND
31286: IFFALSE 31398
31288: GO 31290
31290: DISABLE
31291: LD_INT 0
31293: PPUSH
31294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31295: LD_ADDR_VAR 0 2
31299: PUSH
31300: LD_INT 22
31302: PUSH
31303: LD_OWVAR 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: LD_INT 27
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 30
31327: PUSH
31328: LD_INT 26
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 30
31337: PUSH
31338: LD_INT 28
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PPUSH
31355: CALL_OW 69
31359: ST_TO_ADDR
// if not tmp then
31360: LD_VAR 0 2
31364: NOT
31365: IFFALSE 31369
// exit ;
31367: GO 31398
// for i in tmp do
31369: LD_ADDR_VAR 0 1
31373: PUSH
31374: LD_VAR 0 2
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31396
// SetLives ( i , 1 ) ;
31382: LD_VAR 0 1
31386: PPUSH
31387: LD_INT 1
31389: PPUSH
31390: CALL_OW 234
31394: GO 31379
31396: POP
31397: POP
// end ;
31398: PPOPN 2
31400: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31401: LD_EXP 69
31405: PUSH
31406: LD_EXP 118
31410: AND
31411: IFFALSE 31698
31413: GO 31415
31415: DISABLE
31416: LD_INT 0
31418: PPUSH
31419: PPUSH
31420: PPUSH
// begin i := rand ( 1 , 7 ) ;
31421: LD_ADDR_VAR 0 1
31425: PUSH
31426: LD_INT 1
31428: PPUSH
31429: LD_INT 7
31431: PPUSH
31432: CALL_OW 12
31436: ST_TO_ADDR
// case i of 1 :
31437: LD_VAR 0 1
31441: PUSH
31442: LD_INT 1
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31460
31450: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31451: LD_STRING earthquake(getX(game), 0, 32)
31453: PPUSH
31454: CALL_OW 559
31458: GO 31698
31460: LD_INT 2
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31482
31468: POP
// begin ToLua ( displayStucuk(); ) ;
31469: LD_STRING displayStucuk();
31471: PPUSH
31472: CALL_OW 559
// ResetFog ;
31476: CALL_OW 335
// end ; 3 :
31480: GO 31698
31482: LD_INT 3
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31594
31490: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 22
31498: PUSH
31499: LD_OWVAR 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 25
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PPUSH
31522: CALL_OW 69
31526: ST_TO_ADDR
// if not tmp then
31527: LD_VAR 0 2
31531: NOT
31532: IFFALSE 31536
// exit ;
31534: GO 31698
// un := tmp [ rand ( 1 , tmp ) ] ;
31536: LD_ADDR_VAR 0 3
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: LD_INT 1
31548: PPUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: CALL_OW 12
31558: ARRAY
31559: ST_TO_ADDR
// if Crawls ( un ) then
31560: LD_VAR 0 3
31564: PPUSH
31565: CALL_OW 318
31569: IFFALSE 31580
// ComWalk ( un ) ;
31571: LD_VAR 0 3
31575: PPUSH
31576: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31580: LD_VAR 0 3
31584: PPUSH
31585: LD_INT 8
31587: PPUSH
31588: CALL_OW 336
// end ; 4 :
31592: GO 31698
31594: LD_INT 4
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31676
31602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31603: LD_ADDR_VAR 0 2
31607: PUSH
31608: LD_INT 22
31610: PUSH
31611: LD_OWVAR 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 30
31622: PUSH
31623: LD_INT 29
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PPUSH
31634: CALL_OW 69
31638: ST_TO_ADDR
// if not tmp then
31639: LD_VAR 0 2
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 31698
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31648: LD_VAR 0 2
31652: PUSH
31653: LD_INT 1
31655: ARRAY
31656: PPUSH
31657: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31661: LD_VAR 0 2
31665: PUSH
31666: LD_INT 1
31668: ARRAY
31669: PPUSH
31670: CALL_OW 65
// end ; 5 .. 7 :
31674: GO 31698
31676: LD_INT 5
31678: DOUBLE
31679: GREATEREQUAL
31680: IFFALSE 31688
31682: LD_INT 7
31684: DOUBLE
31685: LESSEQUAL
31686: IFTRUE 31690
31688: GO 31697
31690: POP
// StreamSibBomb ; end ;
31691: CALL 27935 0 0
31695: GO 31698
31697: POP
// end ;
31698: PPOPN 3
31700: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31701: LD_EXP 69
31705: PUSH
31706: LD_EXP 119
31710: AND
31711: IFFALSE 31867
31713: GO 31715
31715: DISABLE
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31721: LD_ADDR_VAR 0 2
31725: PUSH
31726: LD_INT 81
31728: PUSH
31729: LD_OWVAR 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 21
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 21
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PPUSH
31770: CALL_OW 69
31774: ST_TO_ADDR
// if not tmp then
31775: LD_VAR 0 2
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 31867
// p := 0 ;
31784: LD_ADDR_VAR 0 3
31788: PUSH
31789: LD_INT 0
31791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31792: LD_INT 35
31794: PPUSH
31795: CALL_OW 67
// p := p + 1 ;
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_VAR 0 3
31808: PUSH
31809: LD_INT 1
31811: PLUS
31812: ST_TO_ADDR
// for i in tmp do
31813: LD_ADDR_VAR 0 1
31817: PUSH
31818: LD_VAR 0 2
31822: PUSH
31823: FOR_IN
31824: IFFALSE 31855
// if GetLives ( i ) < 1000 then
31826: LD_VAR 0 1
31830: PPUSH
31831: CALL_OW 256
31835: PUSH
31836: LD_INT 1000
31838: LESS
31839: IFFALSE 31853
// SetLives ( i , 1000 ) ;
31841: LD_VAR 0 1
31845: PPUSH
31846: LD_INT 1000
31848: PPUSH
31849: CALL_OW 234
31853: GO 31823
31855: POP
31856: POP
// until p > 20 ;
31857: LD_VAR 0 3
31861: PUSH
31862: LD_INT 20
31864: GREATER
31865: IFFALSE 31792
// end ;
31867: PPOPN 3
31869: END
// every 0 0$1 trigger StreamModeActive and sTime do
31870: LD_EXP 69
31874: PUSH
31875: LD_EXP 120
31879: AND
31880: IFFALSE 31915
31882: GO 31884
31884: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31885: LD_INT 28
31887: PPUSH
31888: LD_OWVAR 2
31892: PPUSH
31893: LD_INT 2
31895: PPUSH
31896: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31900: LD_INT 30
31902: PPUSH
31903: LD_OWVAR 2
31907: PPUSH
31908: LD_INT 2
31910: PPUSH
31911: CALL_OW 322
// end ;
31915: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31916: LD_EXP 69
31920: PUSH
31921: LD_EXP 121
31925: AND
31926: IFFALSE 32047
31928: GO 31930
31930: DISABLE
31931: LD_INT 0
31933: PPUSH
31934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31935: LD_ADDR_VAR 0 2
31939: PUSH
31940: LD_INT 22
31942: PUSH
31943: LD_OWVAR 2
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 21
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 23
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: PPUSH
31984: CALL_OW 69
31988: ST_TO_ADDR
// if not tmp then
31989: LD_VAR 0 2
31993: NOT
31994: IFFALSE 31998
// exit ;
31996: GO 32047
// for i in tmp do
31998: LD_ADDR_VAR 0 1
32002: PUSH
32003: LD_VAR 0 2
32007: PUSH
32008: FOR_IN
32009: IFFALSE 32045
// begin if Crawls ( i ) then
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 318
32020: IFFALSE 32031
// ComWalk ( i ) ;
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 138
// SetClass ( i , 2 ) ;
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_INT 2
32038: PPUSH
32039: CALL_OW 336
// end ;
32043: GO 32008
32045: POP
32046: POP
// end ;
32047: PPOPN 2
32049: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32050: LD_EXP 69
32054: PUSH
32055: LD_EXP 122
32059: AND
32060: IFFALSE 32348
32062: GO 32064
32064: DISABLE
32065: LD_INT 0
32067: PPUSH
32068: PPUSH
32069: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32070: LD_OWVAR 2
32074: PPUSH
32075: LD_INT 9
32077: PPUSH
32078: LD_INT 1
32080: PPUSH
32081: LD_INT 1
32083: PPUSH
32084: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32088: LD_INT 9
32090: PPUSH
32091: LD_OWVAR 2
32095: PPUSH
32096: CALL_OW 343
// uc_side := 9 ;
32100: LD_ADDR_OWVAR 20
32104: PUSH
32105: LD_INT 9
32107: ST_TO_ADDR
// uc_nation := 2 ;
32108: LD_ADDR_OWVAR 21
32112: PUSH
32113: LD_INT 2
32115: ST_TO_ADDR
// hc_name := Dark Warrior ;
32116: LD_ADDR_OWVAR 26
32120: PUSH
32121: LD_STRING Dark Warrior
32123: ST_TO_ADDR
// hc_gallery :=  ;
32124: LD_ADDR_OWVAR 33
32128: PUSH
32129: LD_STRING 
32131: ST_TO_ADDR
// hc_noskilllimit := true ;
32132: LD_ADDR_OWVAR 76
32136: PUSH
32137: LD_INT 1
32139: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32140: LD_ADDR_OWVAR 31
32144: PUSH
32145: LD_INT 30
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: LD_INT 30
32153: PUSH
32154: LD_INT 30
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: ST_TO_ADDR
// un := CreateHuman ;
32163: LD_ADDR_VAR 0 3
32167: PUSH
32168: CALL_OW 44
32172: ST_TO_ADDR
// hc_noskilllimit := false ;
32173: LD_ADDR_OWVAR 76
32177: PUSH
32178: LD_INT 0
32180: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32181: LD_VAR 0 3
32185: PPUSH
32186: LD_INT 1
32188: PPUSH
32189: CALL_OW 51
// ToLua ( playRanger() ) ;
32193: LD_STRING playRanger()
32195: PPUSH
32196: CALL_OW 559
// p := 0 ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 0
32207: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32208: LD_INT 35
32210: PPUSH
32211: CALL_OW 67
// p := p + 1 ;
32215: LD_ADDR_VAR 0 2
32219: PUSH
32220: LD_VAR 0 2
32224: PUSH
32225: LD_INT 1
32227: PLUS
32228: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32229: LD_VAR 0 3
32233: PPUSH
32234: CALL_OW 256
32238: PUSH
32239: LD_INT 1000
32241: LESS
32242: IFFALSE 32256
// SetLives ( un , 1000 ) ;
32244: LD_VAR 0 3
32248: PPUSH
32249: LD_INT 1000
32251: PPUSH
32252: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32256: LD_VAR 0 3
32260: PPUSH
32261: LD_INT 81
32263: PUSH
32264: LD_OWVAR 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 91
32275: PUSH
32276: LD_VAR 0 3
32280: PUSH
32281: LD_INT 30
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PPUSH
32293: CALL_OW 69
32297: PPUSH
32298: LD_VAR 0 3
32302: PPUSH
32303: CALL_OW 74
32307: PPUSH
32308: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32312: LD_VAR 0 2
32316: PUSH
32317: LD_INT 80
32319: GREATER
32320: PUSH
32321: LD_VAR 0 3
32325: PPUSH
32326: CALL_OW 301
32330: OR
32331: IFFALSE 32208
// if un then
32333: LD_VAR 0 3
32337: IFFALSE 32348
// RemoveUnit ( un ) ;
32339: LD_VAR 0 3
32343: PPUSH
32344: CALL_OW 64
// end ;
32348: PPOPN 3
32350: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32351: LD_EXP 123
32355: IFFALSE 32471
32357: GO 32359
32359: DISABLE
32360: LD_INT 0
32362: PPUSH
32363: PPUSH
32364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32365: LD_ADDR_VAR 0 2
32369: PUSH
32370: LD_INT 81
32372: PUSH
32373: LD_OWVAR 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 21
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PPUSH
32396: CALL_OW 69
32400: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32401: LD_STRING playComputer()
32403: PPUSH
32404: CALL_OW 559
// if not tmp then
32408: LD_VAR 0 2
32412: NOT
32413: IFFALSE 32417
// exit ;
32415: GO 32471
// for i in tmp do
32417: LD_ADDR_VAR 0 1
32421: PUSH
32422: LD_VAR 0 2
32426: PUSH
32427: FOR_IN
32428: IFFALSE 32469
// for j := 1 to 4 do
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: DOUBLE
32436: LD_INT 1
32438: DEC
32439: ST_TO_ADDR
32440: LD_INT 4
32442: PUSH
32443: FOR_TO
32444: IFFALSE 32465
// SetSkill ( i , j , 10 ) ;
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: LD_INT 10
32458: PPUSH
32459: CALL_OW 237
32463: GO 32443
32465: POP
32466: POP
32467: GO 32427
32469: POP
32470: POP
// end ;
32471: PPOPN 3
32473: END
// every 0 0$1 trigger s30 do var i , tmp ;
32474: LD_EXP 124
32478: IFFALSE 32547
32480: GO 32482
32482: DISABLE
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32487: LD_ADDR_VAR 0 2
32491: PUSH
32492: LD_INT 22
32494: PUSH
32495: LD_OWVAR 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PPUSH
32504: CALL_OW 69
32508: ST_TO_ADDR
// if not tmp then
32509: LD_VAR 0 2
32513: NOT
32514: IFFALSE 32518
// exit ;
32516: GO 32547
// for i in tmp do
32518: LD_ADDR_VAR 0 1
32522: PUSH
32523: LD_VAR 0 2
32527: PUSH
32528: FOR_IN
32529: IFFALSE 32545
// SetLives ( i , 300 ) ;
32531: LD_VAR 0 1
32535: PPUSH
32536: LD_INT 300
32538: PPUSH
32539: CALL_OW 234
32543: GO 32528
32545: POP
32546: POP
// end ;
32547: PPOPN 2
32549: END
// every 0 0$1 trigger s60 do var i , tmp ;
32550: LD_EXP 125
32554: IFFALSE 32623
32556: GO 32558
32558: DISABLE
32559: LD_INT 0
32561: PPUSH
32562: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32563: LD_ADDR_VAR 0 2
32567: PUSH
32568: LD_INT 22
32570: PUSH
32571: LD_OWVAR 2
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PPUSH
32580: CALL_OW 69
32584: ST_TO_ADDR
// if not tmp then
32585: LD_VAR 0 2
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 32623
// for i in tmp do
32594: LD_ADDR_VAR 0 1
32598: PUSH
32599: LD_VAR 0 2
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32621
// SetLives ( i , 600 ) ;
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_INT 600
32614: PPUSH
32615: CALL_OW 234
32619: GO 32604
32621: POP
32622: POP
// end ;
32623: PPOPN 2
32625: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32626: LD_INT 0
32628: PPUSH
// case cmd of 301 :
32629: LD_VAR 0 1
32633: PUSH
32634: LD_INT 301
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32674
32642: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32643: LD_VAR 0 6
32647: PPUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_VAR 0 4
32662: PPUSH
32663: LD_VAR 0 5
32667: PPUSH
32668: CALL 33875 0 5
32672: GO 32795
32674: LD_INT 302
32676: DOUBLE
32677: EQUAL
32678: IFTRUE 32682
32680: GO 32719
32682: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32683: LD_VAR 0 6
32687: PPUSH
32688: LD_VAR 0 7
32692: PPUSH
32693: LD_VAR 0 8
32697: PPUSH
32698: LD_VAR 0 9
32702: PPUSH
32703: LD_VAR 0 4
32707: PPUSH
32708: LD_VAR 0 5
32712: PPUSH
32713: CALL 33966 0 6
32717: GO 32795
32719: LD_INT 303
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32764
32727: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32728: LD_VAR 0 6
32732: PPUSH
32733: LD_VAR 0 7
32737: PPUSH
32738: LD_VAR 0 8
32742: PPUSH
32743: LD_VAR 0 9
32747: PPUSH
32748: LD_VAR 0 4
32752: PPUSH
32753: LD_VAR 0 5
32757: PPUSH
32758: CALL 32800 0 6
32762: GO 32795
32764: LD_INT 304
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32794
32772: POP
// hHackTeleport ( unit , x , y ) ; end ;
32773: LD_VAR 0 2
32777: PPUSH
32778: LD_VAR 0 4
32782: PPUSH
32783: LD_VAR 0 5
32787: PPUSH
32788: CALL 34559 0 3
32792: GO 32795
32794: POP
// end ;
32795: LD_VAR 0 12
32799: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32804: LD_VAR 0 1
32808: PUSH
32809: LD_INT 1
32811: LESS
32812: PUSH
32813: LD_VAR 0 1
32817: PUSH
32818: LD_INT 3
32820: GREATER
32821: OR
32822: PUSH
32823: LD_VAR 0 5
32827: PPUSH
32828: LD_VAR 0 6
32832: PPUSH
32833: CALL_OW 428
32837: OR
32838: IFFALSE 32842
// exit ;
32840: GO 33562
// uc_side := your_side ;
32842: LD_ADDR_OWVAR 20
32846: PUSH
32847: LD_OWVAR 2
32851: ST_TO_ADDR
// uc_nation := nation ;
32852: LD_ADDR_OWVAR 21
32856: PUSH
32857: LD_VAR 0 1
32861: ST_TO_ADDR
// bc_level = 1 ;
32862: LD_ADDR_OWVAR 43
32866: PUSH
32867: LD_INT 1
32869: ST_TO_ADDR
// case btype of 1 :
32870: LD_VAR 0 2
32874: PUSH
32875: LD_INT 1
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32894
32883: POP
// bc_type := b_depot ; 2 :
32884: LD_ADDR_OWVAR 42
32888: PUSH
32889: LD_INT 0
32891: ST_TO_ADDR
32892: GO 33506
32894: LD_INT 2
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32913
32902: POP
// bc_type := b_warehouse ; 3 :
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 1
32910: ST_TO_ADDR
32911: GO 33506
32913: LD_INT 3
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 32932
32921: POP
// bc_type := b_lab ; 4 .. 9 :
32922: LD_ADDR_OWVAR 42
32926: PUSH
32927: LD_INT 6
32929: ST_TO_ADDR
32930: GO 33506
32932: LD_INT 4
32934: DOUBLE
32935: GREATEREQUAL
32936: IFFALSE 32944
32938: LD_INT 9
32940: DOUBLE
32941: LESSEQUAL
32942: IFTRUE 32946
32944: GO 32998
32946: POP
// begin bc_type := b_lab_half ;
32947: LD_ADDR_OWVAR 42
32951: PUSH
32952: LD_INT 7
32954: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32955: LD_ADDR_OWVAR 44
32959: PUSH
32960: LD_INT 10
32962: PUSH
32963: LD_INT 11
32965: PUSH
32966: LD_INT 12
32968: PUSH
32969: LD_INT 15
32971: PUSH
32972: LD_INT 14
32974: PUSH
32975: LD_INT 13
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: PUSH
32986: LD_VAR 0 2
32990: PUSH
32991: LD_INT 3
32993: MINUS
32994: ARRAY
32995: ST_TO_ADDR
// end ; 10 .. 13 :
32996: GO 33506
32998: LD_INT 10
33000: DOUBLE
33001: GREATEREQUAL
33002: IFFALSE 33010
33004: LD_INT 13
33006: DOUBLE
33007: LESSEQUAL
33008: IFTRUE 33012
33010: GO 33089
33012: POP
// begin bc_type := b_lab_full ;
33013: LD_ADDR_OWVAR 42
33017: PUSH
33018: LD_INT 8
33020: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33021: LD_ADDR_OWVAR 44
33025: PUSH
33026: LD_INT 10
33028: PUSH
33029: LD_INT 12
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 13
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: PUSH
33044: LD_VAR 0 2
33048: PUSH
33049: LD_INT 9
33051: MINUS
33052: ARRAY
33053: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33054: LD_ADDR_OWVAR 45
33058: PUSH
33059: LD_INT 11
33061: PUSH
33062: LD_INT 15
33064: PUSH
33065: LD_INT 12
33067: PUSH
33068: LD_INT 15
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: PUSH
33077: LD_VAR 0 2
33081: PUSH
33082: LD_INT 9
33084: MINUS
33085: ARRAY
33086: ST_TO_ADDR
// end ; 14 :
33087: GO 33506
33089: LD_INT 14
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33108
33097: POP
// bc_type := b_workshop ; 15 :
33098: LD_ADDR_OWVAR 42
33102: PUSH
33103: LD_INT 2
33105: ST_TO_ADDR
33106: GO 33506
33108: LD_INT 15
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_factory ; 16 :
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 3
33124: ST_TO_ADDR
33125: GO 33506
33127: LD_INT 16
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// bc_type := b_ext_gun ; 17 :
33136: LD_ADDR_OWVAR 42
33140: PUSH
33141: LD_INT 17
33143: ST_TO_ADDR
33144: GO 33506
33146: LD_INT 17
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33182
33154: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 19
33162: PUSH
33163: LD_INT 23
33165: PUSH
33166: LD_INT 19
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: PUSH
33174: LD_VAR 0 1
33178: ARRAY
33179: ST_TO_ADDR
33180: GO 33506
33182: LD_INT 18
33184: DOUBLE
33185: EQUAL
33186: IFTRUE 33190
33188: GO 33201
33190: POP
// bc_type := b_ext_radar ; 19 :
33191: LD_ADDR_OWVAR 42
33195: PUSH
33196: LD_INT 20
33198: ST_TO_ADDR
33199: GO 33506
33201: LD_INT 19
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33220
33209: POP
// bc_type := b_ext_radio ; 20 :
33210: LD_ADDR_OWVAR 42
33214: PUSH
33215: LD_INT 22
33217: ST_TO_ADDR
33218: GO 33506
33220: LD_INT 20
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33239
33228: POP
// bc_type := b_ext_siberium ; 21 :
33229: LD_ADDR_OWVAR 42
33233: PUSH
33234: LD_INT 21
33236: ST_TO_ADDR
33237: GO 33506
33239: LD_INT 21
33241: DOUBLE
33242: EQUAL
33243: IFTRUE 33247
33245: GO 33258
33247: POP
// bc_type := b_ext_computer ; 22 :
33248: LD_ADDR_OWVAR 42
33252: PUSH
33253: LD_INT 24
33255: ST_TO_ADDR
33256: GO 33506
33258: LD_INT 22
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33277
33266: POP
// bc_type := b_ext_track ; 23 :
33267: LD_ADDR_OWVAR 42
33271: PUSH
33272: LD_INT 16
33274: ST_TO_ADDR
33275: GO 33506
33277: LD_INT 23
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// bc_type := b_ext_laser ; 24 :
33286: LD_ADDR_OWVAR 42
33290: PUSH
33291: LD_INT 25
33293: ST_TO_ADDR
33294: GO 33506
33296: LD_INT 24
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33315
33304: POP
// bc_type := b_control_tower ; 25 :
33305: LD_ADDR_OWVAR 42
33309: PUSH
33310: LD_INT 36
33312: ST_TO_ADDR
33313: GO 33506
33315: LD_INT 25
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33334
33323: POP
// bc_type := b_breastwork ; 26 :
33324: LD_ADDR_OWVAR 42
33328: PUSH
33329: LD_INT 31
33331: ST_TO_ADDR
33332: GO 33506
33334: LD_INT 26
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33353
33342: POP
// bc_type := b_bunker ; 27 :
33343: LD_ADDR_OWVAR 42
33347: PUSH
33348: LD_INT 32
33350: ST_TO_ADDR
33351: GO 33506
33353: LD_INT 27
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33372
33361: POP
// bc_type := b_turret ; 28 :
33362: LD_ADDR_OWVAR 42
33366: PUSH
33367: LD_INT 33
33369: ST_TO_ADDR
33370: GO 33506
33372: LD_INT 28
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 33391
33380: POP
// bc_type := b_armoury ; 29 :
33381: LD_ADDR_OWVAR 42
33385: PUSH
33386: LD_INT 4
33388: ST_TO_ADDR
33389: GO 33506
33391: LD_INT 29
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33410
33399: POP
// bc_type := b_barracks ; 30 :
33400: LD_ADDR_OWVAR 42
33404: PUSH
33405: LD_INT 5
33407: ST_TO_ADDR
33408: GO 33506
33410: LD_INT 30
33412: DOUBLE
33413: EQUAL
33414: IFTRUE 33418
33416: GO 33429
33418: POP
// bc_type := b_solar_power ; 31 :
33419: LD_ADDR_OWVAR 42
33423: PUSH
33424: LD_INT 27
33426: ST_TO_ADDR
33427: GO 33506
33429: LD_INT 31
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33448
33437: POP
// bc_type := b_oil_power ; 32 :
33438: LD_ADDR_OWVAR 42
33442: PUSH
33443: LD_INT 26
33445: ST_TO_ADDR
33446: GO 33506
33448: LD_INT 32
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33467
33456: POP
// bc_type := b_siberite_power ; 33 :
33457: LD_ADDR_OWVAR 42
33461: PUSH
33462: LD_INT 28
33464: ST_TO_ADDR
33465: GO 33506
33467: LD_INT 33
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33486
33475: POP
// bc_type := b_oil_mine ; 34 :
33476: LD_ADDR_OWVAR 42
33480: PUSH
33481: LD_INT 29
33483: ST_TO_ADDR
33484: GO 33506
33486: LD_INT 34
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33505
33494: POP
// bc_type := b_siberite_mine ; end ;
33495: LD_ADDR_OWVAR 42
33499: PUSH
33500: LD_INT 30
33502: ST_TO_ADDR
33503: GO 33506
33505: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33506: LD_ADDR_VAR 0 8
33510: PUSH
33511: LD_VAR 0 5
33515: PPUSH
33516: LD_VAR 0 6
33520: PPUSH
33521: LD_VAR 0 3
33525: PPUSH
33526: CALL_OW 47
33530: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33531: LD_OWVAR 42
33535: PUSH
33536: LD_INT 32
33538: PUSH
33539: LD_INT 33
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: IN
33546: IFFALSE 33562
// PlaceWeaponTurret ( b , weapon ) ;
33548: LD_VAR 0 8
33552: PPUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: CALL_OW 431
// end ;
33562: LD_VAR 0 7
33566: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33567: LD_INT 0
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33573: LD_ADDR_VAR 0 4
33577: PUSH
33578: LD_INT 22
33580: PUSH
33581: LD_OWVAR 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 30
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PPUSH
33622: CALL_OW 69
33626: ST_TO_ADDR
// if not tmp then
33627: LD_VAR 0 4
33631: NOT
33632: IFFALSE 33636
// exit ;
33634: GO 33695
// for i in tmp do
33636: LD_ADDR_VAR 0 2
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: FOR_IN
33647: IFFALSE 33693
// for j = 1 to 3 do
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: DOUBLE
33655: LD_INT 1
33657: DEC
33658: ST_TO_ADDR
33659: LD_INT 3
33661: PUSH
33662: FOR_TO
33663: IFFALSE 33689
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33665: LD_VAR 0 2
33669: PPUSH
33670: CALL_OW 274
33674: PPUSH
33675: LD_VAR 0 3
33679: PPUSH
33680: LD_INT 99999
33682: PPUSH
33683: CALL_OW 277
33687: GO 33662
33689: POP
33690: POP
33691: GO 33646
33693: POP
33694: POP
// end ;
33695: LD_VAR 0 1
33699: RET
// export function hHackSetLevel10 ; var i , j ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_INT 21
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PPUSH
33720: CALL_OW 69
33724: PUSH
33725: FOR_IN
33726: IFFALSE 33778
// if IsSelected ( i ) then
33728: LD_VAR 0 2
33732: PPUSH
33733: CALL_OW 306
33737: IFFALSE 33776
// begin for j := 1 to 4 do
33739: LD_ADDR_VAR 0 3
33743: PUSH
33744: DOUBLE
33745: LD_INT 1
33747: DEC
33748: ST_TO_ADDR
33749: LD_INT 4
33751: PUSH
33752: FOR_TO
33753: IFFALSE 33774
// SetSkill ( i , j , 10 ) ;
33755: LD_VAR 0 2
33759: PPUSH
33760: LD_VAR 0 3
33764: PPUSH
33765: LD_INT 10
33767: PPUSH
33768: CALL_OW 237
33772: GO 33752
33774: POP
33775: POP
// end ;
33776: GO 33725
33778: POP
33779: POP
// end ;
33780: LD_VAR 0 1
33784: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
33789: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33790: LD_ADDR_VAR 0 2
33794: PUSH
33795: LD_INT 22
33797: PUSH
33798: LD_OWVAR 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 21
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PPUSH
33821: CALL_OW 69
33825: PUSH
33826: FOR_IN
33827: IFFALSE 33868
// begin for j := 1 to 4 do
33829: LD_ADDR_VAR 0 3
33833: PUSH
33834: DOUBLE
33835: LD_INT 1
33837: DEC
33838: ST_TO_ADDR
33839: LD_INT 4
33841: PUSH
33842: FOR_TO
33843: IFFALSE 33864
// SetSkill ( i , j , 10 ) ;
33845: LD_VAR 0 2
33849: PPUSH
33850: LD_VAR 0 3
33854: PPUSH
33855: LD_INT 10
33857: PPUSH
33858: CALL_OW 237
33862: GO 33842
33864: POP
33865: POP
// end ;
33866: GO 33826
33868: POP
33869: POP
// end ;
33870: LD_VAR 0 1
33874: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33875: LD_INT 0
33877: PPUSH
// uc_side := your_side ;
33878: LD_ADDR_OWVAR 20
33882: PUSH
33883: LD_OWVAR 2
33887: ST_TO_ADDR
// uc_nation := nation ;
33888: LD_ADDR_OWVAR 21
33892: PUSH
33893: LD_VAR 0 1
33897: ST_TO_ADDR
// InitHc ;
33898: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33902: LD_INT 0
33904: PPUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_VAR 0 3
33914: PPUSH
33915: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33919: LD_VAR 0 4
33923: PPUSH
33924: LD_VAR 0 5
33928: PPUSH
33929: CALL_OW 428
33933: PUSH
33934: LD_INT 0
33936: EQUAL
33937: IFFALSE 33961
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33939: CALL_OW 44
33943: PPUSH
33944: LD_VAR 0 4
33948: PPUSH
33949: LD_VAR 0 5
33953: PPUSH
33954: LD_INT 1
33956: PPUSH
33957: CALL_OW 48
// end ;
33961: LD_VAR 0 6
33965: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
// uc_side := your_side ;
33970: LD_ADDR_OWVAR 20
33974: PUSH
33975: LD_OWVAR 2
33979: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33980: LD_VAR 0 1
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: LD_INT 4
33996: PUSH
33997: LD_INT 5
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: IN
34007: IFFALSE 34019
// uc_nation := nation_american else
34009: LD_ADDR_OWVAR 21
34013: PUSH
34014: LD_INT 1
34016: ST_TO_ADDR
34017: GO 34062
// if chassis in [ 11 , 12 , 13 , 14 ] then
34019: LD_VAR 0 1
34023: PUSH
34024: LD_INT 11
34026: PUSH
34027: LD_INT 12
34029: PUSH
34030: LD_INT 13
34032: PUSH
34033: LD_INT 14
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: IN
34042: IFFALSE 34054
// uc_nation := nation_arabian else
34044: LD_ADDR_OWVAR 21
34048: PUSH
34049: LD_INT 2
34051: ST_TO_ADDR
34052: GO 34062
// uc_nation := nation_russian ;
34054: LD_ADDR_OWVAR 21
34058: PUSH
34059: LD_INT 3
34061: ST_TO_ADDR
// vc_chassis := chassis ;
34062: LD_ADDR_OWVAR 37
34066: PUSH
34067: LD_VAR 0 1
34071: ST_TO_ADDR
// vc_engine := engine ;
34072: LD_ADDR_OWVAR 39
34076: PUSH
34077: LD_VAR 0 2
34081: ST_TO_ADDR
// vc_control := control ;
34082: LD_ADDR_OWVAR 38
34086: PUSH
34087: LD_VAR 0 3
34091: ST_TO_ADDR
// vc_weapon := weapon ;
34092: LD_ADDR_OWVAR 40
34096: PUSH
34097: LD_VAR 0 4
34101: ST_TO_ADDR
// un := CreateVehicle ;
34102: LD_ADDR_VAR 0 8
34106: PUSH
34107: CALL_OW 45
34111: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34112: LD_VAR 0 8
34116: PPUSH
34117: LD_INT 0
34119: PPUSH
34120: LD_INT 5
34122: PPUSH
34123: CALL_OW 12
34127: PPUSH
34128: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34132: LD_VAR 0 8
34136: PPUSH
34137: LD_VAR 0 5
34141: PPUSH
34142: LD_VAR 0 6
34146: PPUSH
34147: LD_INT 1
34149: PPUSH
34150: CALL_OW 48
// end ;
34154: LD_VAR 0 7
34158: RET
// export hInvincible ; every 1 do
34159: GO 34161
34161: DISABLE
// hInvincible := [ ] ;
34162: LD_ADDR_EXP 126
34166: PUSH
34167: EMPTY
34168: ST_TO_ADDR
34169: END
// every 10 do var i ;
34170: GO 34172
34172: DISABLE
34173: LD_INT 0
34175: PPUSH
// begin enable ;
34176: ENABLE
// if not hInvincible then
34177: LD_EXP 126
34181: NOT
34182: IFFALSE 34186
// exit ;
34184: GO 34230
// for i in hInvincible do
34186: LD_ADDR_VAR 0 1
34190: PUSH
34191: LD_EXP 126
34195: PUSH
34196: FOR_IN
34197: IFFALSE 34228
// if GetLives ( i ) < 1000 then
34199: LD_VAR 0 1
34203: PPUSH
34204: CALL_OW 256
34208: PUSH
34209: LD_INT 1000
34211: LESS
34212: IFFALSE 34226
// SetLives ( i , 1000 ) ;
34214: LD_VAR 0 1
34218: PPUSH
34219: LD_INT 1000
34221: PPUSH
34222: CALL_OW 234
34226: GO 34196
34228: POP
34229: POP
// end ;
34230: PPOPN 1
34232: END
// export function hHackInvincible ; var i ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 21
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 21
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: PPUSH
34270: CALL_OW 69
34274: PUSH
34275: FOR_IN
34276: IFFALSE 34337
// if IsSelected ( i ) then
34278: LD_VAR 0 2
34282: PPUSH
34283: CALL_OW 306
34287: IFFALSE 34335
// begin if i in hInvincible then
34289: LD_VAR 0 2
34293: PUSH
34294: LD_EXP 126
34298: IN
34299: IFFALSE 34319
// hInvincible := hInvincible diff i else
34301: LD_ADDR_EXP 126
34305: PUSH
34306: LD_EXP 126
34310: PUSH
34311: LD_VAR 0 2
34315: DIFF
34316: ST_TO_ADDR
34317: GO 34335
// hInvincible := hInvincible union i ;
34319: LD_ADDR_EXP 126
34323: PUSH
34324: LD_EXP 126
34328: PUSH
34329: LD_VAR 0 2
34333: UNION
34334: ST_TO_ADDR
// end ;
34335: GO 34275
34337: POP
34338: POP
// end ;
34339: LD_VAR 0 1
34343: RET
// export function hHackInvisible ; var i , j ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
34348: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34349: LD_ADDR_VAR 0 2
34353: PUSH
34354: LD_INT 21
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PPUSH
34364: CALL_OW 69
34368: PUSH
34369: FOR_IN
34370: IFFALSE 34394
// if IsSelected ( i ) then
34372: LD_VAR 0 2
34376: PPUSH
34377: CALL_OW 306
34381: IFFALSE 34392
// ComForceInvisible ( i ) ;
34383: LD_VAR 0 2
34387: PPUSH
34388: CALL_OW 496
34392: GO 34369
34394: POP
34395: POP
// end ;
34396: LD_VAR 0 1
34400: RET
// export function hHackChangeYourSide ; begin
34401: LD_INT 0
34403: PPUSH
// if your_side = 8 then
34404: LD_OWVAR 2
34408: PUSH
34409: LD_INT 8
34411: EQUAL
34412: IFFALSE 34424
// your_side := 0 else
34414: LD_ADDR_OWVAR 2
34418: PUSH
34419: LD_INT 0
34421: ST_TO_ADDR
34422: GO 34438
// your_side := your_side + 1 ;
34424: LD_ADDR_OWVAR 2
34428: PUSH
34429: LD_OWVAR 2
34433: PUSH
34434: LD_INT 1
34436: PLUS
34437: ST_TO_ADDR
// end ;
34438: LD_VAR 0 1
34442: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34443: LD_INT 0
34445: PPUSH
34446: PPUSH
34447: PPUSH
// for i in all_units do
34448: LD_ADDR_VAR 0 2
34452: PUSH
34453: LD_OWVAR 3
34457: PUSH
34458: FOR_IN
34459: IFFALSE 34537
// if IsSelected ( i ) then
34461: LD_VAR 0 2
34465: PPUSH
34466: CALL_OW 306
34470: IFFALSE 34535
// begin j := GetSide ( i ) ;
34472: LD_ADDR_VAR 0 3
34476: PUSH
34477: LD_VAR 0 2
34481: PPUSH
34482: CALL_OW 255
34486: ST_TO_ADDR
// if j = 8 then
34487: LD_VAR 0 3
34491: PUSH
34492: LD_INT 8
34494: EQUAL
34495: IFFALSE 34507
// j := 0 else
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 0
34504: ST_TO_ADDR
34505: GO 34521
// j := j + 1 ;
34507: LD_ADDR_VAR 0 3
34511: PUSH
34512: LD_VAR 0 3
34516: PUSH
34517: LD_INT 1
34519: PLUS
34520: ST_TO_ADDR
// SetSide ( i , j ) ;
34521: LD_VAR 0 2
34525: PPUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 235
// end ;
34535: GO 34458
34537: POP
34538: POP
// end ;
34539: LD_VAR 0 1
34543: RET
// export function hHackFog ; begin
34544: LD_INT 0
34546: PPUSH
// FogOff ( true ) ;
34547: LD_INT 1
34549: PPUSH
34550: CALL_OW 344
// end ;
34554: LD_VAR 0 1
34558: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34559: LD_INT 0
34561: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34562: LD_VAR 0 1
34566: PPUSH
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: LD_INT 1
34579: PPUSH
34580: LD_INT 1
34582: PPUSH
34583: CALL_OW 483
// CenterOnXY ( x , y ) ;
34587: LD_VAR 0 2
34591: PPUSH
34592: LD_VAR 0 3
34596: PPUSH
34597: CALL_OW 84
// end ; end_of_file
34601: LD_VAR 0 4
34605: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34606: LD_INT 0
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 264
34621: PUSH
34622: LD_EXP 53
34626: EQUAL
34627: IFFALSE 34699
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34629: LD_INT 68
34631: PPUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 255
34641: PPUSH
34642: CALL_OW 321
34646: PUSH
34647: LD_INT 2
34649: EQUAL
34650: IFFALSE 34662
// eff := 70 else
34652: LD_ADDR_VAR 0 4
34656: PUSH
34657: LD_INT 70
34659: ST_TO_ADDR
34660: GO 34670
// eff := 30 ;
34662: LD_ADDR_VAR 0 4
34666: PUSH
34667: LD_INT 30
34669: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL_OW 250
34679: PPUSH
34680: LD_VAR 0 1
34684: PPUSH
34685: CALL_OW 251
34689: PPUSH
34690: LD_VAR 0 4
34694: PPUSH
34695: CALL_OW 495
// end ; end ;
34699: LD_VAR 0 2
34703: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34704: LD_INT 0
34706: PPUSH
// end ;
34707: LD_VAR 0 4
34711: RET
// export function SOS_Command ( cmd ) ; begin
34712: LD_INT 0
34714: PPUSH
// end ;
34715: LD_VAR 0 2
34719: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34720: LD_INT 0
34722: PPUSH
// end ;
34723: LD_VAR 0 6
34727: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34728: LD_INT 0
34730: PPUSH
34731: PPUSH
// if not vehicle or not factory then
34732: LD_VAR 0 1
34736: NOT
34737: PUSH
34738: LD_VAR 0 2
34742: NOT
34743: OR
34744: IFFALSE 34748
// exit ;
34746: GO 34979
// if factoryWaypoints >= factory then
34748: LD_EXP 127
34752: PUSH
34753: LD_VAR 0 2
34757: GREATEREQUAL
34758: IFFALSE 34979
// if factoryWaypoints [ factory ] then
34760: LD_EXP 127
34764: PUSH
34765: LD_VAR 0 2
34769: ARRAY
34770: IFFALSE 34979
// begin if GetControl ( vehicle ) = control_manual then
34772: LD_VAR 0 1
34776: PPUSH
34777: CALL_OW 263
34781: PUSH
34782: LD_INT 1
34784: EQUAL
34785: IFFALSE 34866
// begin driver := IsDrivenBy ( vehicle ) ;
34787: LD_ADDR_VAR 0 4
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 311
34801: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34802: LD_VAR 0 4
34806: PPUSH
34807: LD_EXP 127
34811: PUSH
34812: LD_VAR 0 2
34816: ARRAY
34817: PUSH
34818: LD_INT 3
34820: ARRAY
34821: PPUSH
34822: LD_EXP 127
34826: PUSH
34827: LD_VAR 0 2
34831: ARRAY
34832: PUSH
34833: LD_INT 4
34835: ARRAY
34836: PPUSH
34837: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34841: LD_VAR 0 4
34845: PPUSH
34846: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34850: LD_VAR 0 4
34854: PPUSH
34855: LD_VAR 0 2
34859: PPUSH
34860: CALL_OW 180
// end else
34864: GO 34979
// if GetControl ( vehicle ) = control_remote then
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 263
34875: PUSH
34876: LD_INT 2
34878: EQUAL
34879: IFFALSE 34940
// begin wait ( 0 0$2 ) ;
34881: LD_INT 70
34883: PPUSH
34884: CALL_OW 67
// if Connect ( vehicle ) then
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL 47203 0 1
34897: IFFALSE 34938
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34899: LD_VAR 0 1
34903: PPUSH
34904: LD_EXP 127
34908: PUSH
34909: LD_VAR 0 2
34913: ARRAY
34914: PUSH
34915: LD_INT 3
34917: ARRAY
34918: PPUSH
34919: LD_EXP 127
34923: PUSH
34924: LD_VAR 0 2
34928: ARRAY
34929: PUSH
34930: LD_INT 4
34932: ARRAY
34933: PPUSH
34934: CALL_OW 171
// end else
34938: GO 34979
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_EXP 127
34949: PUSH
34950: LD_VAR 0 2
34954: ARRAY
34955: PUSH
34956: LD_INT 3
34958: ARRAY
34959: PPUSH
34960: LD_EXP 127
34964: PUSH
34965: LD_VAR 0 2
34969: ARRAY
34970: PUSH
34971: LD_INT 4
34973: ARRAY
34974: PPUSH
34975: CALL_OW 171
// end ; end ;
34979: LD_VAR 0 3
34983: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34984: LD_INT 0
34986: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34987: LD_VAR 0 1
34991: PUSH
34992: LD_INT 250
34994: EQUAL
34995: PUSH
34996: LD_VAR 0 2
35000: PPUSH
35001: CALL_OW 264
35005: PUSH
35006: LD_EXP 56
35010: EQUAL
35011: AND
35012: IFFALSE 35033
// MinerPlaceMine ( unit , x , y ) ;
35014: LD_VAR 0 2
35018: PPUSH
35019: LD_VAR 0 4
35023: PPUSH
35024: LD_VAR 0 5
35028: PPUSH
35029: CALL 37761 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35033: LD_VAR 0 1
35037: PUSH
35038: LD_INT 251
35040: EQUAL
35041: PUSH
35042: LD_VAR 0 2
35046: PPUSH
35047: CALL_OW 264
35051: PUSH
35052: LD_EXP 56
35056: EQUAL
35057: AND
35058: IFFALSE 35079
// MinerDetonateMine ( unit , x , y ) ;
35060: LD_VAR 0 2
35064: PPUSH
35065: LD_VAR 0 4
35069: PPUSH
35070: LD_VAR 0 5
35074: PPUSH
35075: CALL 38038 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35079: LD_VAR 0 1
35083: PUSH
35084: LD_INT 252
35086: EQUAL
35087: PUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: CALL_OW 264
35097: PUSH
35098: LD_EXP 56
35102: EQUAL
35103: AND
35104: IFFALSE 35125
// MinerCreateMinefield ( unit , x , y ) ;
35106: LD_VAR 0 2
35110: PPUSH
35111: LD_VAR 0 4
35115: PPUSH
35116: LD_VAR 0 5
35120: PPUSH
35121: CALL 38455 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35125: LD_VAR 0 1
35129: PUSH
35130: LD_INT 253
35132: EQUAL
35133: PUSH
35134: LD_VAR 0 2
35138: PPUSH
35139: CALL_OW 257
35143: PUSH
35144: LD_INT 5
35146: EQUAL
35147: AND
35148: IFFALSE 35169
// ComBinocular ( unit , x , y ) ;
35150: LD_VAR 0 2
35154: PPUSH
35155: LD_VAR 0 4
35159: PPUSH
35160: LD_VAR 0 5
35164: PPUSH
35165: CALL 38826 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35169: LD_VAR 0 1
35173: PUSH
35174: LD_INT 254
35176: EQUAL
35177: PUSH
35178: LD_VAR 0 2
35182: PPUSH
35183: CALL_OW 264
35187: PUSH
35188: LD_EXP 51
35192: EQUAL
35193: AND
35194: PUSH
35195: LD_VAR 0 3
35199: PPUSH
35200: CALL_OW 263
35204: PUSH
35205: LD_INT 3
35207: EQUAL
35208: AND
35209: IFFALSE 35225
// HackDestroyVehicle ( unit , selectedUnit ) ;
35211: LD_VAR 0 2
35215: PPUSH
35216: LD_VAR 0 3
35220: PPUSH
35221: CALL 37121 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35225: LD_VAR 0 1
35229: PUSH
35230: LD_INT 255
35232: EQUAL
35233: PUSH
35234: LD_VAR 0 2
35238: PPUSH
35239: CALL_OW 264
35243: PUSH
35244: LD_INT 14
35246: PUSH
35247: LD_INT 53
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: IN
35254: AND
35255: PUSH
35256: LD_VAR 0 4
35260: PPUSH
35261: LD_VAR 0 5
35265: PPUSH
35266: CALL_OW 488
35270: AND
35271: IFFALSE 35295
// CutTreeXYR ( unit , x , y , 12 ) ;
35273: LD_VAR 0 2
35277: PPUSH
35278: LD_VAR 0 4
35282: PPUSH
35283: LD_VAR 0 5
35287: PPUSH
35288: LD_INT 12
35290: PPUSH
35291: CALL 35687 0 4
// if cmd = 256 then
35295: LD_VAR 0 1
35299: PUSH
35300: LD_INT 256
35302: EQUAL
35303: IFFALSE 35324
// SetFactoryWaypoint ( unit , x , y ) ;
35305: LD_VAR 0 2
35309: PPUSH
35310: LD_VAR 0 4
35314: PPUSH
35315: LD_VAR 0 5
35319: PPUSH
35320: CALL 35329 0 3
// end ;
35324: LD_VAR 0 6
35328: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35329: LD_INT 0
35331: PPUSH
35332: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35333: LD_VAR 0 1
35337: NOT
35338: PUSH
35339: LD_VAR 0 2
35343: PPUSH
35344: LD_VAR 0 3
35348: PPUSH
35349: CALL_OW 488
35353: NOT
35354: OR
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 266
35365: PUSH
35366: LD_INT 3
35368: NONEQUAL
35369: PUSH
35370: LD_VAR 0 1
35374: PPUSH
35375: CALL_OW 247
35379: PUSH
35380: LD_INT 1
35382: EQUAL
35383: NOT
35384: AND
35385: OR
35386: IFFALSE 35390
// exit ;
35388: GO 35539
// if GetType ( factory ) = unit_human then
35390: LD_VAR 0 1
35394: PPUSH
35395: CALL_OW 247
35399: PUSH
35400: LD_INT 1
35402: EQUAL
35403: IFFALSE 35420
// factory := IsInUnit ( factory ) ;
35405: LD_ADDR_VAR 0 1
35409: PUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 310
35419: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 266
35429: PUSH
35430: LD_INT 3
35432: NONEQUAL
35433: IFFALSE 35437
// exit ;
35435: GO 35539
// if HexInfo ( x , y ) = factory then
35437: LD_VAR 0 2
35441: PPUSH
35442: LD_VAR 0 3
35446: PPUSH
35447: CALL_OW 428
35451: PUSH
35452: LD_VAR 0 1
35456: EQUAL
35457: IFFALSE 35484
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35459: LD_ADDR_EXP 127
35463: PUSH
35464: LD_EXP 127
35468: PPUSH
35469: LD_VAR 0 1
35473: PPUSH
35474: LD_INT 0
35476: PPUSH
35477: CALL_OW 1
35481: ST_TO_ADDR
35482: GO 35535
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35484: LD_ADDR_EXP 127
35488: PUSH
35489: LD_EXP 127
35493: PPUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 255
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: LD_VAR 0 2
35518: PUSH
35519: LD_VAR 0 3
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: PPUSH
35530: CALL_OW 1
35534: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35535: CALL 35544 0 0
// end ;
35539: LD_VAR 0 4
35543: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35544: LD_INT 0
35546: PPUSH
35547: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35548: LD_STRING resetFactoryWaypoint();
35550: PPUSH
35551: CALL_OW 559
// if factoryWaypoints then
35555: LD_EXP 127
35559: IFFALSE 35682
// begin for i := 1 to factoryWaypoints do
35561: LD_ADDR_VAR 0 2
35565: PUSH
35566: DOUBLE
35567: LD_INT 1
35569: DEC
35570: ST_TO_ADDR
35571: LD_EXP 127
35575: PUSH
35576: FOR_TO
35577: IFFALSE 35680
// if factoryWaypoints [ i ] then
35579: LD_EXP 127
35583: PUSH
35584: LD_VAR 0 2
35588: ARRAY
35589: IFFALSE 35678
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35591: LD_STRING setFactoryWaypointXY(
35593: PUSH
35594: LD_EXP 127
35598: PUSH
35599: LD_VAR 0 2
35603: ARRAY
35604: PUSH
35605: LD_INT 1
35607: ARRAY
35608: STR
35609: PUSH
35610: LD_STRING ,
35612: STR
35613: PUSH
35614: LD_EXP 127
35618: PUSH
35619: LD_VAR 0 2
35623: ARRAY
35624: PUSH
35625: LD_INT 2
35627: ARRAY
35628: STR
35629: PUSH
35630: LD_STRING ,
35632: STR
35633: PUSH
35634: LD_EXP 127
35638: PUSH
35639: LD_VAR 0 2
35643: ARRAY
35644: PUSH
35645: LD_INT 3
35647: ARRAY
35648: STR
35649: PUSH
35650: LD_STRING ,
35652: STR
35653: PUSH
35654: LD_EXP 127
35658: PUSH
35659: LD_VAR 0 2
35663: ARRAY
35664: PUSH
35665: LD_INT 4
35667: ARRAY
35668: STR
35669: PUSH
35670: LD_STRING )
35672: STR
35673: PPUSH
35674: CALL_OW 559
35678: GO 35576
35680: POP
35681: POP
// end ; end ;
35682: LD_VAR 0 1
35686: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35687: LD_INT 0
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35698: LD_VAR 0 1
35702: NOT
35703: PUSH
35704: LD_VAR 0 2
35708: PPUSH
35709: LD_VAR 0 3
35713: PPUSH
35714: CALL_OW 488
35718: NOT
35719: OR
35720: PUSH
35721: LD_VAR 0 4
35725: NOT
35726: OR
35727: IFFALSE 35731
// exit ;
35729: GO 36071
// list := [ ] ;
35731: LD_ADDR_VAR 0 13
35735: PUSH
35736: EMPTY
35737: ST_TO_ADDR
// if x - r < 0 then
35738: LD_VAR 0 2
35742: PUSH
35743: LD_VAR 0 4
35747: MINUS
35748: PUSH
35749: LD_INT 0
35751: LESS
35752: IFFALSE 35764
// min_x := 0 else
35754: LD_ADDR_VAR 0 7
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
35762: GO 35780
// min_x := x - r ;
35764: LD_ADDR_VAR 0 7
35768: PUSH
35769: LD_VAR 0 2
35773: PUSH
35774: LD_VAR 0 4
35778: MINUS
35779: ST_TO_ADDR
// if y - r < 0 then
35780: LD_VAR 0 3
35784: PUSH
35785: LD_VAR 0 4
35789: MINUS
35790: PUSH
35791: LD_INT 0
35793: LESS
35794: IFFALSE 35806
// min_y := 0 else
35796: LD_ADDR_VAR 0 8
35800: PUSH
35801: LD_INT 0
35803: ST_TO_ADDR
35804: GO 35822
// min_y := y - r ;
35806: LD_ADDR_VAR 0 8
35810: PUSH
35811: LD_VAR 0 3
35815: PUSH
35816: LD_VAR 0 4
35820: MINUS
35821: ST_TO_ADDR
// max_x := x + r ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_VAR 0 2
35831: PUSH
35832: LD_VAR 0 4
35836: PLUS
35837: ST_TO_ADDR
// max_y := y + r ;
35838: LD_ADDR_VAR 0 10
35842: PUSH
35843: LD_VAR 0 3
35847: PUSH
35848: LD_VAR 0 4
35852: PLUS
35853: ST_TO_ADDR
// for _x = min_x to max_x do
35854: LD_ADDR_VAR 0 11
35858: PUSH
35859: DOUBLE
35860: LD_VAR 0 7
35864: DEC
35865: ST_TO_ADDR
35866: LD_VAR 0 9
35870: PUSH
35871: FOR_TO
35872: IFFALSE 35989
// for _y = min_y to max_y do
35874: LD_ADDR_VAR 0 12
35878: PUSH
35879: DOUBLE
35880: LD_VAR 0 8
35884: DEC
35885: ST_TO_ADDR
35886: LD_VAR 0 10
35890: PUSH
35891: FOR_TO
35892: IFFALSE 35985
// begin if not ValidHex ( _x , _y ) then
35894: LD_VAR 0 11
35898: PPUSH
35899: LD_VAR 0 12
35903: PPUSH
35904: CALL_OW 488
35908: NOT
35909: IFFALSE 35913
// continue ;
35911: GO 35891
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35913: LD_VAR 0 11
35917: PPUSH
35918: LD_VAR 0 12
35922: PPUSH
35923: CALL_OW 351
35927: PUSH
35928: LD_VAR 0 11
35932: PPUSH
35933: LD_VAR 0 12
35937: PPUSH
35938: CALL_OW 554
35942: AND
35943: IFFALSE 35983
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35945: LD_ADDR_VAR 0 13
35949: PUSH
35950: LD_VAR 0 13
35954: PPUSH
35955: LD_VAR 0 13
35959: PUSH
35960: LD_INT 1
35962: PLUS
35963: PPUSH
35964: LD_VAR 0 11
35968: PUSH
35969: LD_VAR 0 12
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PPUSH
35978: CALL_OW 2
35982: ST_TO_ADDR
// end ;
35983: GO 35891
35985: POP
35986: POP
35987: GO 35871
35989: POP
35990: POP
// if not list then
35991: LD_VAR 0 13
35995: NOT
35996: IFFALSE 36000
// exit ;
35998: GO 36071
// for i in list do
36000: LD_ADDR_VAR 0 6
36004: PUSH
36005: LD_VAR 0 13
36009: PUSH
36010: FOR_IN
36011: IFFALSE 36069
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36013: LD_VAR 0 1
36017: PPUSH
36018: LD_STRING M
36020: PUSH
36021: LD_VAR 0 6
36025: PUSH
36026: LD_INT 1
36028: ARRAY
36029: PUSH
36030: LD_VAR 0 6
36034: PUSH
36035: LD_INT 2
36037: ARRAY
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: PPUSH
36063: CALL_OW 447
36067: GO 36010
36069: POP
36070: POP
// end ;
36071: LD_VAR 0 5
36075: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36076: LD_EXP 128
36080: NOT
36081: IFFALSE 36131
36083: GO 36085
36085: DISABLE
// begin initHack := true ;
36086: LD_ADDR_EXP 128
36090: PUSH
36091: LD_INT 1
36093: ST_TO_ADDR
// hackTanks := [ ] ;
36094: LD_ADDR_EXP 129
36098: PUSH
36099: EMPTY
36100: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36101: LD_ADDR_EXP 130
36105: PUSH
36106: EMPTY
36107: ST_TO_ADDR
// hackLimit := 3 ;
36108: LD_ADDR_EXP 131
36112: PUSH
36113: LD_INT 3
36115: ST_TO_ADDR
// hackDist := 12 ;
36116: LD_ADDR_EXP 132
36120: PUSH
36121: LD_INT 12
36123: ST_TO_ADDR
// hackCounter := [ ] ;
36124: LD_ADDR_EXP 133
36128: PUSH
36129: EMPTY
36130: ST_TO_ADDR
// end ;
36131: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36132: LD_EXP 128
36136: PUSH
36137: LD_INT 34
36139: PUSH
36140: LD_EXP 51
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PPUSH
36149: CALL_OW 69
36153: AND
36154: IFFALSE 36409
36156: GO 36158
36158: DISABLE
36159: LD_INT 0
36161: PPUSH
36162: PPUSH
// begin enable ;
36163: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36164: LD_ADDR_VAR 0 1
36168: PUSH
36169: LD_INT 34
36171: PUSH
36172: LD_EXP 51
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PPUSH
36181: CALL_OW 69
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36407
// begin if not i in hackTanks then
36189: LD_VAR 0 1
36193: PUSH
36194: LD_EXP 129
36198: IN
36199: NOT
36200: IFFALSE 36283
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36202: LD_ADDR_EXP 129
36206: PUSH
36207: LD_EXP 129
36211: PPUSH
36212: LD_EXP 129
36216: PUSH
36217: LD_INT 1
36219: PLUS
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 1
36230: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36231: LD_ADDR_EXP 130
36235: PUSH
36236: LD_EXP 130
36240: PPUSH
36241: LD_EXP 130
36245: PUSH
36246: LD_INT 1
36248: PLUS
36249: PPUSH
36250: EMPTY
36251: PPUSH
36252: CALL_OW 1
36256: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36257: LD_ADDR_EXP 133
36261: PUSH
36262: LD_EXP 133
36266: PPUSH
36267: LD_EXP 133
36271: PUSH
36272: LD_INT 1
36274: PLUS
36275: PPUSH
36276: EMPTY
36277: PPUSH
36278: CALL_OW 1
36282: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 302
36292: NOT
36293: IFFALSE 36306
// begin HackUnlinkAll ( i ) ;
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL 36412 0 1
// continue ;
36304: GO 36186
// end ; HackCheckCapturedStatus ( i ) ;
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL 36855 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36315: LD_ADDR_VAR 0 2
36319: PUSH
36320: LD_INT 81
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL_OW 255
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 33
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 91
36349: PUSH
36350: LD_VAR 0 1
36354: PUSH
36355: LD_EXP 132
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 50
36367: PUSH
36368: EMPTY
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL_OW 69
36381: ST_TO_ADDR
// if not tmp then
36382: LD_VAR 0 2
36386: NOT
36387: IFFALSE 36391
// continue ;
36389: GO 36186
// HackLink ( i , tmp ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_VAR 0 2
36400: PPUSH
36401: CALL 36548 0 2
// end ;
36405: GO 36186
36407: POP
36408: POP
// end ;
36409: PPOPN 2
36411: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36412: LD_INT 0
36414: PPUSH
36415: PPUSH
36416: PPUSH
// if not hack in hackTanks then
36417: LD_VAR 0 1
36421: PUSH
36422: LD_EXP 129
36426: IN
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 36543
// index := GetElementIndex ( hackTanks , hack ) ;
36432: LD_ADDR_VAR 0 4
36436: PUSH
36437: LD_EXP 129
36441: PPUSH
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL 44017 0 2
36451: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36452: LD_EXP 130
36456: PUSH
36457: LD_VAR 0 4
36461: ARRAY
36462: IFFALSE 36543
// begin for i in hackTanksCaptured [ index ] do
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_EXP 130
36473: PUSH
36474: LD_VAR 0 4
36478: ARRAY
36479: PUSH
36480: FOR_IN
36481: IFFALSE 36507
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36483: LD_VAR 0 3
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 3
36496: PUSH
36497: LD_INT 2
36499: ARRAY
36500: PPUSH
36501: CALL_OW 235
36505: GO 36480
36507: POP
36508: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36509: LD_ADDR_EXP 130
36513: PUSH
36514: LD_EXP 130
36518: PPUSH
36519: LD_VAR 0 4
36523: PPUSH
36524: EMPTY
36525: PPUSH
36526: CALL_OW 1
36530: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36531: LD_VAR 0 1
36535: PPUSH
36536: LD_INT 0
36538: PPUSH
36539: CALL_OW 505
// end ; end ;
36543: LD_VAR 0 2
36547: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36548: LD_INT 0
36550: PPUSH
36551: PPUSH
36552: PPUSH
// if not hack in hackTanks or not vehicles then
36553: LD_VAR 0 1
36557: PUSH
36558: LD_EXP 129
36562: IN
36563: NOT
36564: PUSH
36565: LD_VAR 0 2
36569: NOT
36570: OR
36571: IFFALSE 36575
// exit ;
36573: GO 36850
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36575: LD_ADDR_VAR 0 2
36579: PUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: LD_INT 1
36592: PPUSH
36593: LD_INT 1
36595: PPUSH
36596: CALL 44667 0 4
36600: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36601: LD_ADDR_VAR 0 5
36605: PUSH
36606: LD_EXP 129
36610: PPUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL 44017 0 2
36620: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36621: LD_EXP 130
36625: PUSH
36626: LD_VAR 0 5
36630: ARRAY
36631: PUSH
36632: LD_EXP 131
36636: LESS
36637: IFFALSE 36826
// begin for i := 1 to vehicles do
36639: LD_ADDR_VAR 0 4
36643: PUSH
36644: DOUBLE
36645: LD_INT 1
36647: DEC
36648: ST_TO_ADDR
36649: LD_VAR 0 2
36653: PUSH
36654: FOR_TO
36655: IFFALSE 36824
// begin if hackTanksCaptured [ index ] = hackLimit then
36657: LD_EXP 130
36661: PUSH
36662: LD_VAR 0 5
36666: ARRAY
36667: PUSH
36668: LD_EXP 131
36672: EQUAL
36673: IFFALSE 36677
// break ;
36675: GO 36824
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36677: LD_ADDR_EXP 133
36681: PUSH
36682: LD_EXP 133
36686: PPUSH
36687: LD_VAR 0 5
36691: PPUSH
36692: LD_EXP 133
36696: PUSH
36697: LD_VAR 0 5
36701: ARRAY
36702: PUSH
36703: LD_INT 1
36705: PLUS
36706: PPUSH
36707: CALL_OW 1
36711: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36712: LD_ADDR_EXP 130
36716: PUSH
36717: LD_EXP 130
36721: PPUSH
36722: LD_VAR 0 5
36726: PUSH
36727: LD_EXP 130
36731: PUSH
36732: LD_VAR 0 5
36736: ARRAY
36737: PUSH
36738: LD_INT 1
36740: PLUS
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: LD_VAR 0 2
36750: PUSH
36751: LD_VAR 0 4
36755: ARRAY
36756: PUSH
36757: LD_VAR 0 2
36761: PUSH
36762: LD_VAR 0 4
36766: ARRAY
36767: PPUSH
36768: CALL_OW 255
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PPUSH
36777: CALL 44232 0 3
36781: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36782: LD_VAR 0 2
36786: PUSH
36787: LD_VAR 0 4
36791: ARRAY
36792: PPUSH
36793: LD_VAR 0 1
36797: PPUSH
36798: CALL_OW 255
36802: PPUSH
36803: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36807: LD_VAR 0 2
36811: PUSH
36812: LD_VAR 0 4
36816: ARRAY
36817: PPUSH
36818: CALL_OW 141
// end ;
36822: GO 36654
36824: POP
36825: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36826: LD_VAR 0 1
36830: PPUSH
36831: LD_EXP 130
36835: PUSH
36836: LD_VAR 0 5
36840: ARRAY
36841: PUSH
36842: LD_INT 0
36844: PLUS
36845: PPUSH
36846: CALL_OW 505
// end ;
36850: LD_VAR 0 3
36854: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// if not hack in hackTanks then
36861: LD_VAR 0 1
36865: PUSH
36866: LD_EXP 129
36870: IN
36871: NOT
36872: IFFALSE 36876
// exit ;
36874: GO 37116
// index := GetElementIndex ( hackTanks , hack ) ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_EXP 129
36885: PPUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL 44017 0 2
36895: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36896: LD_ADDR_VAR 0 3
36900: PUSH
36901: DOUBLE
36902: LD_EXP 130
36906: PUSH
36907: LD_VAR 0 4
36911: ARRAY
36912: INC
36913: ST_TO_ADDR
36914: LD_INT 1
36916: PUSH
36917: FOR_DOWNTO
36918: IFFALSE 37090
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36920: LD_ADDR_VAR 0 5
36924: PUSH
36925: LD_EXP 130
36929: PUSH
36930: LD_VAR 0 4
36934: ARRAY
36935: PUSH
36936: LD_VAR 0 3
36940: ARRAY
36941: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36942: LD_VAR 0 5
36946: PUSH
36947: LD_INT 1
36949: ARRAY
36950: PPUSH
36951: CALL_OW 302
36955: NOT
36956: PUSH
36957: LD_VAR 0 5
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 255
36970: PUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 255
36980: NONEQUAL
36981: OR
36982: IFFALSE 37088
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36984: LD_VAR 0 5
36988: PUSH
36989: LD_INT 1
36991: ARRAY
36992: PPUSH
36993: CALL_OW 305
36997: PUSH
36998: LD_VAR 0 5
37002: PUSH
37003: LD_INT 1
37005: ARRAY
37006: PPUSH
37007: CALL_OW 255
37011: PUSH
37012: LD_VAR 0 1
37016: PPUSH
37017: CALL_OW 255
37021: EQUAL
37022: AND
37023: IFFALSE 37047
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37025: LD_VAR 0 5
37029: PUSH
37030: LD_INT 1
37032: ARRAY
37033: PPUSH
37034: LD_VAR 0 5
37038: PUSH
37039: LD_INT 2
37041: ARRAY
37042: PPUSH
37043: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37047: LD_ADDR_EXP 130
37051: PUSH
37052: LD_EXP 130
37056: PPUSH
37057: LD_VAR 0 4
37061: PPUSH
37062: LD_EXP 130
37066: PUSH
37067: LD_VAR 0 4
37071: ARRAY
37072: PPUSH
37073: LD_VAR 0 3
37077: PPUSH
37078: CALL_OW 3
37082: PPUSH
37083: CALL_OW 1
37087: ST_TO_ADDR
// end ; end ;
37088: GO 36917
37090: POP
37091: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37092: LD_VAR 0 1
37096: PPUSH
37097: LD_EXP 130
37101: PUSH
37102: LD_VAR 0 4
37106: ARRAY
37107: PUSH
37108: LD_INT 0
37110: PLUS
37111: PPUSH
37112: CALL_OW 505
// end ;
37116: LD_VAR 0 2
37120: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37121: LD_INT 0
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
// if not hack in hackTanks then
37127: LD_VAR 0 1
37131: PUSH
37132: LD_EXP 129
37136: IN
37137: NOT
37138: IFFALSE 37142
// exit ;
37140: GO 37227
// index := GetElementIndex ( hackTanks , hack ) ;
37142: LD_ADDR_VAR 0 5
37146: PUSH
37147: LD_EXP 129
37151: PPUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL 44017 0 2
37161: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37162: LD_ADDR_VAR 0 4
37166: PUSH
37167: DOUBLE
37168: LD_INT 1
37170: DEC
37171: ST_TO_ADDR
37172: LD_EXP 130
37176: PUSH
37177: LD_VAR 0 5
37181: ARRAY
37182: PUSH
37183: FOR_TO
37184: IFFALSE 37225
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37186: LD_EXP 130
37190: PUSH
37191: LD_VAR 0 5
37195: ARRAY
37196: PUSH
37197: LD_VAR 0 4
37201: ARRAY
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PUSH
37207: LD_VAR 0 2
37211: EQUAL
37212: IFFALSE 37223
// KillUnit ( vehicle ) ;
37214: LD_VAR 0 2
37218: PPUSH
37219: CALL_OW 66
37223: GO 37183
37225: POP
37226: POP
// end ;
37227: LD_VAR 0 3
37231: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37232: LD_EXP 134
37236: NOT
37237: IFFALSE 37272
37239: GO 37241
37241: DISABLE
// begin initMiner := true ;
37242: LD_ADDR_EXP 134
37246: PUSH
37247: LD_INT 1
37249: ST_TO_ADDR
// minersList := [ ] ;
37250: LD_ADDR_EXP 135
37254: PUSH
37255: EMPTY
37256: ST_TO_ADDR
// minerMinesList := [ ] ;
37257: LD_ADDR_EXP 136
37261: PUSH
37262: EMPTY
37263: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37264: LD_ADDR_EXP 137
37268: PUSH
37269: LD_INT 5
37271: ST_TO_ADDR
// end ;
37272: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37273: LD_EXP 134
37277: PUSH
37278: LD_INT 34
37280: PUSH
37281: LD_EXP 56
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: AND
37295: IFFALSE 37758
37297: GO 37299
37299: DISABLE
37300: LD_INT 0
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
// begin enable ;
37306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37307: LD_ADDR_VAR 0 1
37311: PUSH
37312: LD_INT 34
37314: PUSH
37315: LD_EXP 56
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL_OW 69
37328: PUSH
37329: FOR_IN
37330: IFFALSE 37402
// begin if not i in minersList then
37332: LD_VAR 0 1
37336: PUSH
37337: LD_EXP 135
37341: IN
37342: NOT
37343: IFFALSE 37400
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37345: LD_ADDR_EXP 135
37349: PUSH
37350: LD_EXP 135
37354: PPUSH
37355: LD_EXP 135
37359: PUSH
37360: LD_INT 1
37362: PLUS
37363: PPUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 1
37373: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37374: LD_ADDR_EXP 136
37378: PUSH
37379: LD_EXP 136
37383: PPUSH
37384: LD_EXP 136
37388: PUSH
37389: LD_INT 1
37391: PLUS
37392: PPUSH
37393: EMPTY
37394: PPUSH
37395: CALL_OW 1
37399: ST_TO_ADDR
// end end ;
37400: GO 37329
37402: POP
37403: POP
// for i := minerMinesList downto 1 do
37404: LD_ADDR_VAR 0 1
37408: PUSH
37409: DOUBLE
37410: LD_EXP 136
37414: INC
37415: ST_TO_ADDR
37416: LD_INT 1
37418: PUSH
37419: FOR_DOWNTO
37420: IFFALSE 37756
// begin if IsLive ( minersList [ i ] ) then
37422: LD_EXP 135
37426: PUSH
37427: LD_VAR 0 1
37431: ARRAY
37432: PPUSH
37433: CALL_OW 300
37437: IFFALSE 37465
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37439: LD_EXP 135
37443: PUSH
37444: LD_VAR 0 1
37448: ARRAY
37449: PPUSH
37450: LD_EXP 136
37454: PUSH
37455: LD_VAR 0 1
37459: ARRAY
37460: PPUSH
37461: CALL_OW 505
// if not minerMinesList [ i ] then
37465: LD_EXP 136
37469: PUSH
37470: LD_VAR 0 1
37474: ARRAY
37475: NOT
37476: IFFALSE 37480
// continue ;
37478: GO 37419
// for j := minerMinesList [ i ] downto 1 do
37480: LD_ADDR_VAR 0 2
37484: PUSH
37485: DOUBLE
37486: LD_EXP 136
37490: PUSH
37491: LD_VAR 0 1
37495: ARRAY
37496: INC
37497: ST_TO_ADDR
37498: LD_INT 1
37500: PUSH
37501: FOR_DOWNTO
37502: IFFALSE 37752
// begin side := GetSide ( minersList [ i ] ) ;
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_EXP 135
37513: PUSH
37514: LD_VAR 0 1
37518: ARRAY
37519: PPUSH
37520: CALL_OW 255
37524: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37525: LD_ADDR_VAR 0 4
37529: PUSH
37530: LD_EXP 136
37534: PUSH
37535: LD_VAR 0 1
37539: ARRAY
37540: PUSH
37541: LD_VAR 0 2
37545: ARRAY
37546: PUSH
37547: LD_INT 1
37549: ARRAY
37550: PPUSH
37551: LD_EXP 136
37555: PUSH
37556: LD_VAR 0 1
37560: ARRAY
37561: PUSH
37562: LD_VAR 0 2
37566: ARRAY
37567: PUSH
37568: LD_INT 2
37570: ARRAY
37571: PPUSH
37572: CALL_OW 428
37576: ST_TO_ADDR
// if not tmp then
37577: LD_VAR 0 4
37581: NOT
37582: IFFALSE 37586
// continue ;
37584: GO 37501
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37586: LD_VAR 0 4
37590: PUSH
37591: LD_INT 81
37593: PUSH
37594: LD_VAR 0 3
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PPUSH
37603: CALL_OW 69
37607: IN
37608: PUSH
37609: LD_EXP 136
37613: PUSH
37614: LD_VAR 0 1
37618: ARRAY
37619: PUSH
37620: LD_VAR 0 2
37624: ARRAY
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: PPUSH
37630: LD_EXP 136
37634: PUSH
37635: LD_VAR 0 1
37639: ARRAY
37640: PUSH
37641: LD_VAR 0 2
37645: ARRAY
37646: PUSH
37647: LD_INT 2
37649: ARRAY
37650: PPUSH
37651: CALL_OW 458
37655: AND
37656: IFFALSE 37750
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37658: LD_EXP 136
37662: PUSH
37663: LD_VAR 0 1
37667: ARRAY
37668: PUSH
37669: LD_VAR 0 2
37673: ARRAY
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: PPUSH
37679: LD_EXP 136
37683: PUSH
37684: LD_VAR 0 1
37688: ARRAY
37689: PUSH
37690: LD_VAR 0 2
37694: ARRAY
37695: PUSH
37696: LD_INT 2
37698: ARRAY
37699: PPUSH
37700: LD_VAR 0 3
37704: PPUSH
37705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37709: LD_ADDR_EXP 136
37713: PUSH
37714: LD_EXP 136
37718: PPUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: LD_EXP 136
37728: PUSH
37729: LD_VAR 0 1
37733: ARRAY
37734: PPUSH
37735: LD_VAR 0 2
37739: PPUSH
37740: CALL_OW 3
37744: PPUSH
37745: CALL_OW 1
37749: ST_TO_ADDR
// end ; end ;
37750: GO 37501
37752: POP
37753: POP
// end ;
37754: GO 37419
37756: POP
37757: POP
// end ;
37758: PPOPN 4
37760: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37761: LD_INT 0
37763: PPUSH
37764: PPUSH
// result := false ;
37765: LD_ADDR_VAR 0 4
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 264
37782: PUSH
37783: LD_EXP 56
37787: EQUAL
37788: NOT
37789: IFFALSE 37793
// exit ;
37791: GO 38033
// index := GetElementIndex ( minersList , unit ) ;
37793: LD_ADDR_VAR 0 5
37797: PUSH
37798: LD_EXP 135
37802: PPUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL 44017 0 2
37812: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37813: LD_EXP 136
37817: PUSH
37818: LD_VAR 0 5
37822: ARRAY
37823: PUSH
37824: LD_EXP 137
37828: GREATEREQUAL
37829: IFFALSE 37833
// exit ;
37831: GO 38033
// ComMoveXY ( unit , x , y ) ;
37833: LD_VAR 0 1
37837: PPUSH
37838: LD_VAR 0 2
37842: PPUSH
37843: LD_VAR 0 3
37847: PPUSH
37848: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37852: LD_INT 35
37854: PPUSH
37855: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37859: LD_VAR 0 1
37863: PPUSH
37864: LD_VAR 0 2
37868: PPUSH
37869: LD_VAR 0 3
37873: PPUSH
37874: CALL 74736 0 3
37878: NOT
37879: PUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 314
37889: AND
37890: IFFALSE 37894
// exit ;
37892: GO 38033
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37894: LD_VAR 0 2
37898: PPUSH
37899: LD_VAR 0 3
37903: PPUSH
37904: CALL_OW 428
37908: PUSH
37909: LD_VAR 0 1
37913: EQUAL
37914: PUSH
37915: LD_VAR 0 1
37919: PPUSH
37920: CALL_OW 314
37924: NOT
37925: AND
37926: IFFALSE 37852
// PlaySoundXY ( x , y , PlantMine ) ;
37928: LD_VAR 0 2
37932: PPUSH
37933: LD_VAR 0 3
37937: PPUSH
37938: LD_STRING PlantMine
37940: PPUSH
37941: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37945: LD_VAR 0 2
37949: PPUSH
37950: LD_VAR 0 3
37954: PPUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 255
37964: PPUSH
37965: LD_INT 0
37967: PPUSH
37968: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37972: LD_ADDR_EXP 136
37976: PUSH
37977: LD_EXP 136
37981: PPUSH
37982: LD_VAR 0 5
37986: PUSH
37987: LD_EXP 136
37991: PUSH
37992: LD_VAR 0 5
37996: ARRAY
37997: PUSH
37998: LD_INT 1
38000: PLUS
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PPUSH
38006: LD_VAR 0 2
38010: PUSH
38011: LD_VAR 0 3
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PPUSH
38020: CALL 44232 0 3
38024: ST_TO_ADDR
// result := true ;
38025: LD_ADDR_VAR 0 4
38029: PUSH
38030: LD_INT 1
38032: ST_TO_ADDR
// end ;
38033: LD_VAR 0 4
38037: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38038: LD_INT 0
38040: PPUSH
38041: PPUSH
38042: PPUSH
// if not unit in minersList then
38043: LD_VAR 0 1
38047: PUSH
38048: LD_EXP 135
38052: IN
38053: NOT
38054: IFFALSE 38058
// exit ;
38056: GO 38450
// index := GetElementIndex ( minersList , unit ) ;
38058: LD_ADDR_VAR 0 6
38062: PUSH
38063: LD_EXP 135
38067: PPUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL 44017 0 2
38077: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38078: LD_ADDR_VAR 0 5
38082: PUSH
38083: DOUBLE
38084: LD_EXP 136
38088: PUSH
38089: LD_VAR 0 6
38093: ARRAY
38094: INC
38095: ST_TO_ADDR
38096: LD_INT 1
38098: PUSH
38099: FOR_DOWNTO
38100: IFFALSE 38261
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38102: LD_EXP 136
38106: PUSH
38107: LD_VAR 0 6
38111: ARRAY
38112: PUSH
38113: LD_VAR 0 5
38117: ARRAY
38118: PUSH
38119: LD_INT 1
38121: ARRAY
38122: PUSH
38123: LD_VAR 0 2
38127: EQUAL
38128: PUSH
38129: LD_EXP 136
38133: PUSH
38134: LD_VAR 0 6
38138: ARRAY
38139: PUSH
38140: LD_VAR 0 5
38144: ARRAY
38145: PUSH
38146: LD_INT 2
38148: ARRAY
38149: PUSH
38150: LD_VAR 0 3
38154: EQUAL
38155: AND
38156: IFFALSE 38259
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38158: LD_EXP 136
38162: PUSH
38163: LD_VAR 0 6
38167: ARRAY
38168: PUSH
38169: LD_VAR 0 5
38173: ARRAY
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: LD_EXP 136
38183: PUSH
38184: LD_VAR 0 6
38188: ARRAY
38189: PUSH
38190: LD_VAR 0 5
38194: ARRAY
38195: PUSH
38196: LD_INT 2
38198: ARRAY
38199: PPUSH
38200: LD_VAR 0 1
38204: PPUSH
38205: CALL_OW 255
38209: PPUSH
38210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38214: LD_ADDR_EXP 136
38218: PUSH
38219: LD_EXP 136
38223: PPUSH
38224: LD_VAR 0 6
38228: PPUSH
38229: LD_EXP 136
38233: PUSH
38234: LD_VAR 0 6
38238: ARRAY
38239: PPUSH
38240: LD_VAR 0 5
38244: PPUSH
38245: CALL_OW 3
38249: PPUSH
38250: CALL_OW 1
38254: ST_TO_ADDR
// exit ;
38255: POP
38256: POP
38257: GO 38450
// end ; end ;
38259: GO 38099
38261: POP
38262: POP
// for i := minerMinesList [ index ] downto 1 do
38263: LD_ADDR_VAR 0 5
38267: PUSH
38268: DOUBLE
38269: LD_EXP 136
38273: PUSH
38274: LD_VAR 0 6
38278: ARRAY
38279: INC
38280: ST_TO_ADDR
38281: LD_INT 1
38283: PUSH
38284: FOR_DOWNTO
38285: IFFALSE 38448
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38287: LD_EXP 136
38291: PUSH
38292: LD_VAR 0 6
38296: ARRAY
38297: PUSH
38298: LD_VAR 0 5
38302: ARRAY
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PPUSH
38308: LD_EXP 136
38312: PUSH
38313: LD_VAR 0 6
38317: ARRAY
38318: PUSH
38319: LD_VAR 0 5
38323: ARRAY
38324: PUSH
38325: LD_INT 2
38327: ARRAY
38328: PPUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 3
38338: PPUSH
38339: CALL_OW 298
38343: PUSH
38344: LD_INT 6
38346: LESS
38347: IFFALSE 38446
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38349: LD_EXP 136
38353: PUSH
38354: LD_VAR 0 6
38358: ARRAY
38359: PUSH
38360: LD_VAR 0 5
38364: ARRAY
38365: PUSH
38366: LD_INT 1
38368: ARRAY
38369: PPUSH
38370: LD_EXP 136
38374: PUSH
38375: LD_VAR 0 6
38379: ARRAY
38380: PUSH
38381: LD_VAR 0 5
38385: ARRAY
38386: PUSH
38387: LD_INT 2
38389: ARRAY
38390: PPUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 255
38400: PPUSH
38401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38405: LD_ADDR_EXP 136
38409: PUSH
38410: LD_EXP 136
38414: PPUSH
38415: LD_VAR 0 6
38419: PPUSH
38420: LD_EXP 136
38424: PUSH
38425: LD_VAR 0 6
38429: ARRAY
38430: PPUSH
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL_OW 3
38440: PPUSH
38441: CALL_OW 1
38445: ST_TO_ADDR
// end ; end ;
38446: GO 38284
38448: POP
38449: POP
// end ;
38450: LD_VAR 0 4
38454: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38455: LD_INT 0
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 264
38475: PUSH
38476: LD_EXP 56
38480: EQUAL
38481: NOT
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: LD_EXP 135
38492: IN
38493: NOT
38494: OR
38495: IFFALSE 38499
// exit ;
38497: GO 38821
// index := GetElementIndex ( minersList , unit ) ;
38499: LD_ADDR_VAR 0 6
38503: PUSH
38504: LD_EXP 135
38508: PPUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: CALL 44017 0 2
38518: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38519: LD_ADDR_VAR 0 8
38523: PUSH
38524: LD_EXP 137
38528: PUSH
38529: LD_EXP 136
38533: PUSH
38534: LD_VAR 0 6
38538: ARRAY
38539: MINUS
38540: ST_TO_ADDR
// if not minesFreeAmount then
38541: LD_VAR 0 8
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 38821
// tmp := [ ] ;
38550: LD_ADDR_VAR 0 7
38554: PUSH
38555: EMPTY
38556: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38557: LD_ADDR_VAR 0 5
38561: PUSH
38562: DOUBLE
38563: LD_INT 1
38565: DEC
38566: ST_TO_ADDR
38567: LD_VAR 0 8
38571: PUSH
38572: FOR_TO
38573: IFFALSE 38768
// begin _d := rand ( 0 , 5 ) ;
38575: LD_ADDR_VAR 0 11
38579: PUSH
38580: LD_INT 0
38582: PPUSH
38583: LD_INT 5
38585: PPUSH
38586: CALL_OW 12
38590: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38591: LD_ADDR_VAR 0 12
38595: PUSH
38596: LD_INT 2
38598: PPUSH
38599: LD_INT 6
38601: PPUSH
38602: CALL_OW 12
38606: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38607: LD_ADDR_VAR 0 9
38611: PUSH
38612: LD_VAR 0 2
38616: PPUSH
38617: LD_VAR 0 11
38621: PPUSH
38622: LD_VAR 0 12
38626: PPUSH
38627: CALL_OW 272
38631: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38632: LD_ADDR_VAR 0 10
38636: PUSH
38637: LD_VAR 0 3
38641: PPUSH
38642: LD_VAR 0 11
38646: PPUSH
38647: LD_VAR 0 12
38651: PPUSH
38652: CALL_OW 273
38656: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38657: LD_VAR 0 9
38661: PPUSH
38662: LD_VAR 0 10
38666: PPUSH
38667: CALL_OW 488
38671: PUSH
38672: LD_VAR 0 9
38676: PUSH
38677: LD_VAR 0 10
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_VAR 0 7
38690: IN
38691: NOT
38692: AND
38693: PUSH
38694: LD_VAR 0 9
38698: PPUSH
38699: LD_VAR 0 10
38703: PPUSH
38704: CALL_OW 458
38708: NOT
38709: AND
38710: IFFALSE 38752
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38712: LD_ADDR_VAR 0 7
38716: PUSH
38717: LD_VAR 0 7
38721: PPUSH
38722: LD_VAR 0 7
38726: PUSH
38727: LD_INT 1
38729: PLUS
38730: PPUSH
38731: LD_VAR 0 9
38735: PUSH
38736: LD_VAR 0 10
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PPUSH
38745: CALL_OW 1
38749: ST_TO_ADDR
38750: GO 38766
// i := i - 1 ;
38752: LD_ADDR_VAR 0 5
38756: PUSH
38757: LD_VAR 0 5
38761: PUSH
38762: LD_INT 1
38764: MINUS
38765: ST_TO_ADDR
// end ;
38766: GO 38572
38768: POP
38769: POP
// for i in tmp do
38770: LD_ADDR_VAR 0 5
38774: PUSH
38775: LD_VAR 0 7
38779: PUSH
38780: FOR_IN
38781: IFFALSE 38819
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38783: LD_VAR 0 1
38787: PPUSH
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 1
38795: ARRAY
38796: PPUSH
38797: LD_VAR 0 5
38801: PUSH
38802: LD_INT 2
38804: ARRAY
38805: PPUSH
38806: CALL 37761 0 3
38810: NOT
38811: IFFALSE 38817
// exit ;
38813: POP
38814: POP
38815: GO 38821
38817: GO 38780
38819: POP
38820: POP
// end ;
38821: LD_VAR 0 4
38825: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38826: LD_INT 0
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
// if not GetClass ( unit ) = class_sniper then
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 257
38844: PUSH
38845: LD_INT 5
38847: EQUAL
38848: NOT
38849: IFFALSE 38853
// exit ;
38851: GO 39241
// dist := 8 ;
38853: LD_ADDR_VAR 0 5
38857: PUSH
38858: LD_INT 8
38860: ST_TO_ADDR
// viewRange := 12 ;
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: LD_INT 12
38868: ST_TO_ADDR
// side := GetSide ( unit ) ;
38869: LD_ADDR_VAR 0 6
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 255
38883: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38884: LD_INT 61
38886: PPUSH
38887: LD_VAR 0 6
38891: PPUSH
38892: CALL_OW 321
38896: PUSH
38897: LD_INT 2
38899: EQUAL
38900: IFFALSE 38910
// viewRange := 16 ;
38902: LD_ADDR_VAR 0 7
38906: PUSH
38907: LD_INT 16
38909: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38910: LD_VAR 0 1
38914: PPUSH
38915: LD_VAR 0 2
38919: PPUSH
38920: LD_VAR 0 3
38924: PPUSH
38925: CALL_OW 297
38929: PUSH
38930: LD_VAR 0 5
38934: GREATER
38935: IFFALSE 39014
// begin ComMoveXY ( unit , x , y ) ;
38937: LD_VAR 0 1
38941: PPUSH
38942: LD_VAR 0 2
38946: PPUSH
38947: LD_VAR 0 3
38951: PPUSH
38952: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38956: LD_INT 35
38958: PPUSH
38959: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_VAR 0 2
38972: PPUSH
38973: LD_VAR 0 3
38977: PPUSH
38978: CALL 74736 0 3
38982: NOT
38983: IFFALSE 38987
// exit ;
38985: GO 39241
// until GetDistUnitXY ( unit , x , y ) < dist ;
38987: LD_VAR 0 1
38991: PPUSH
38992: LD_VAR 0 2
38996: PPUSH
38997: LD_VAR 0 3
39001: PPUSH
39002: CALL_OW 297
39006: PUSH
39007: LD_VAR 0 5
39011: LESS
39012: IFFALSE 38956
// end ; ComTurnXY ( unit , x , y ) ;
39014: LD_VAR 0 1
39018: PPUSH
39019: LD_VAR 0 2
39023: PPUSH
39024: LD_VAR 0 3
39028: PPUSH
39029: CALL_OW 118
// wait ( 5 ) ;
39033: LD_INT 5
39035: PPUSH
39036: CALL_OW 67
// _d := GetDir ( unit ) ;
39040: LD_ADDR_VAR 0 10
39044: PUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 254
39054: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39055: LD_ADDR_VAR 0 8
39059: PUSH
39060: LD_VAR 0 1
39064: PPUSH
39065: CALL_OW 250
39069: PPUSH
39070: LD_VAR 0 10
39074: PPUSH
39075: LD_VAR 0 5
39079: PPUSH
39080: CALL_OW 272
39084: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39085: LD_ADDR_VAR 0 9
39089: PUSH
39090: LD_VAR 0 1
39094: PPUSH
39095: CALL_OW 251
39099: PPUSH
39100: LD_VAR 0 10
39104: PPUSH
39105: LD_VAR 0 5
39109: PPUSH
39110: CALL_OW 273
39114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39115: LD_VAR 0 8
39119: PPUSH
39120: LD_VAR 0 9
39124: PPUSH
39125: CALL_OW 488
39129: NOT
39130: IFFALSE 39134
// exit ;
39132: GO 39241
// ComAnimCustom ( unit , 1 ) ;
39134: LD_VAR 0 1
39138: PPUSH
39139: LD_INT 1
39141: PPUSH
39142: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39146: LD_VAR 0 8
39150: PPUSH
39151: LD_VAR 0 9
39155: PPUSH
39156: LD_VAR 0 6
39160: PPUSH
39161: LD_VAR 0 7
39165: PPUSH
39166: CALL_OW 330
// repeat wait ( 1 ) ;
39170: LD_INT 1
39172: PPUSH
39173: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39177: LD_VAR 0 1
39181: PPUSH
39182: CALL_OW 316
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: CALL_OW 314
39196: OR
39197: PUSH
39198: LD_VAR 0 1
39202: PPUSH
39203: CALL_OW 302
39207: NOT
39208: OR
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 301
39219: OR
39220: IFFALSE 39170
// RemoveSeeing ( _x , _y , side ) ;
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_VAR 0 9
39231: PPUSH
39232: LD_VAR 0 6
39236: PPUSH
39237: CALL_OW 331
// end ; end_of_file
39241: LD_VAR 0 4
39245: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39246: LD_INT 0
39248: PPUSH
39249: PPUSH
// if exist_mode then
39250: LD_VAR 0 2
39254: IFFALSE 39279
// unit := CreateCharacter ( prefix & ident ) else
39256: LD_ADDR_VAR 0 5
39260: PUSH
39261: LD_VAR 0 3
39265: PUSH
39266: LD_VAR 0 1
39270: STR
39271: PPUSH
39272: CALL_OW 34
39276: ST_TO_ADDR
39277: GO 39294
// unit := NewCharacter ( ident ) ;
39279: LD_ADDR_VAR 0 5
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 25
39293: ST_TO_ADDR
// result := unit ;
39294: LD_ADDR_VAR 0 4
39298: PUSH
39299: LD_VAR 0 5
39303: ST_TO_ADDR
// end ;
39304: LD_VAR 0 4
39308: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39309: LD_INT 0
39311: PPUSH
39312: PPUSH
// if not side or not nation then
39313: LD_VAR 0 1
39317: NOT
39318: PUSH
39319: LD_VAR 0 2
39323: NOT
39324: OR
39325: IFFALSE 39329
// exit ;
39327: GO 40097
// case nation of nation_american :
39329: LD_VAR 0 2
39333: PUSH
39334: LD_INT 1
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39556
39342: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: LD_INT 35
39350: PUSH
39351: LD_INT 45
39353: PUSH
39354: LD_INT 46
39356: PUSH
39357: LD_INT 47
39359: PUSH
39360: LD_INT 82
39362: PUSH
39363: LD_INT 83
39365: PUSH
39366: LD_INT 84
39368: PUSH
39369: LD_INT 85
39371: PUSH
39372: LD_INT 86
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 6
39383: PUSH
39384: LD_INT 15
39386: PUSH
39387: LD_INT 16
39389: PUSH
39390: LD_INT 7
39392: PUSH
39393: LD_INT 12
39395: PUSH
39396: LD_INT 13
39398: PUSH
39399: LD_INT 10
39401: PUSH
39402: LD_INT 14
39404: PUSH
39405: LD_INT 20
39407: PUSH
39408: LD_INT 21
39410: PUSH
39411: LD_INT 22
39413: PUSH
39414: LD_INT 25
39416: PUSH
39417: LD_INT 32
39419: PUSH
39420: LD_INT 27
39422: PUSH
39423: LD_INT 36
39425: PUSH
39426: LD_INT 69
39428: PUSH
39429: LD_INT 39
39431: PUSH
39432: LD_INT 34
39434: PUSH
39435: LD_INT 40
39437: PUSH
39438: LD_INT 48
39440: PUSH
39441: LD_INT 49
39443: PUSH
39444: LD_INT 50
39446: PUSH
39447: LD_INT 51
39449: PUSH
39450: LD_INT 52
39452: PUSH
39453: LD_INT 53
39455: PUSH
39456: LD_INT 54
39458: PUSH
39459: LD_INT 55
39461: PUSH
39462: LD_INT 56
39464: PUSH
39465: LD_INT 57
39467: PUSH
39468: LD_INT 58
39470: PUSH
39471: LD_INT 59
39473: PUSH
39474: LD_INT 60
39476: PUSH
39477: LD_INT 61
39479: PUSH
39480: LD_INT 62
39482: PUSH
39483: LD_INT 80
39485: PUSH
39486: LD_INT 82
39488: PUSH
39489: LD_INT 83
39491: PUSH
39492: LD_INT 84
39494: PUSH
39495: LD_INT 85
39497: PUSH
39498: LD_INT 86
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: ST_TO_ADDR
39554: GO 40021
39556: LD_INT 2
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39564
39562: GO 39790
39564: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39565: LD_ADDR_VAR 0 4
39569: PUSH
39570: LD_INT 35
39572: PUSH
39573: LD_INT 45
39575: PUSH
39576: LD_INT 46
39578: PUSH
39579: LD_INT 47
39581: PUSH
39582: LD_INT 82
39584: PUSH
39585: LD_INT 83
39587: PUSH
39588: LD_INT 84
39590: PUSH
39591: LD_INT 85
39593: PUSH
39594: LD_INT 87
39596: PUSH
39597: LD_INT 70
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 11
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: LD_INT 6
39617: PUSH
39618: LD_INT 15
39620: PUSH
39621: LD_INT 18
39623: PUSH
39624: LD_INT 7
39626: PUSH
39627: LD_INT 17
39629: PUSH
39630: LD_INT 8
39632: PUSH
39633: LD_INT 20
39635: PUSH
39636: LD_INT 21
39638: PUSH
39639: LD_INT 22
39641: PUSH
39642: LD_INT 72
39644: PUSH
39645: LD_INT 26
39647: PUSH
39648: LD_INT 69
39650: PUSH
39651: LD_INT 39
39653: PUSH
39654: LD_INT 40
39656: PUSH
39657: LD_INT 41
39659: PUSH
39660: LD_INT 42
39662: PUSH
39663: LD_INT 43
39665: PUSH
39666: LD_INT 48
39668: PUSH
39669: LD_INT 49
39671: PUSH
39672: LD_INT 50
39674: PUSH
39675: LD_INT 51
39677: PUSH
39678: LD_INT 52
39680: PUSH
39681: LD_INT 53
39683: PUSH
39684: LD_INT 54
39686: PUSH
39687: LD_INT 55
39689: PUSH
39690: LD_INT 56
39692: PUSH
39693: LD_INT 60
39695: PUSH
39696: LD_INT 61
39698: PUSH
39699: LD_INT 62
39701: PUSH
39702: LD_INT 66
39704: PUSH
39705: LD_INT 67
39707: PUSH
39708: LD_INT 68
39710: PUSH
39711: LD_INT 81
39713: PUSH
39714: LD_INT 82
39716: PUSH
39717: LD_INT 83
39719: PUSH
39720: LD_INT 84
39722: PUSH
39723: LD_INT 85
39725: PUSH
39726: LD_INT 87
39728: PUSH
39729: LD_INT 88
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: ST_TO_ADDR
39788: GO 40021
39790: LD_INT 3
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 40020
39798: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39799: LD_ADDR_VAR 0 4
39803: PUSH
39804: LD_INT 46
39806: PUSH
39807: LD_INT 47
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 82
39818: PUSH
39819: LD_INT 83
39821: PUSH
39822: LD_INT 84
39824: PUSH
39825: LD_INT 85
39827: PUSH
39828: LD_INT 86
39830: PUSH
39831: LD_INT 11
39833: PUSH
39834: LD_INT 9
39836: PUSH
39837: LD_INT 20
39839: PUSH
39840: LD_INT 19
39842: PUSH
39843: LD_INT 21
39845: PUSH
39846: LD_INT 24
39848: PUSH
39849: LD_INT 22
39851: PUSH
39852: LD_INT 25
39854: PUSH
39855: LD_INT 28
39857: PUSH
39858: LD_INT 29
39860: PUSH
39861: LD_INT 30
39863: PUSH
39864: LD_INT 31
39866: PUSH
39867: LD_INT 37
39869: PUSH
39870: LD_INT 38
39872: PUSH
39873: LD_INT 32
39875: PUSH
39876: LD_INT 27
39878: PUSH
39879: LD_INT 33
39881: PUSH
39882: LD_INT 69
39884: PUSH
39885: LD_INT 39
39887: PUSH
39888: LD_INT 34
39890: PUSH
39891: LD_INT 40
39893: PUSH
39894: LD_INT 71
39896: PUSH
39897: LD_INT 23
39899: PUSH
39900: LD_INT 44
39902: PUSH
39903: LD_INT 48
39905: PUSH
39906: LD_INT 49
39908: PUSH
39909: LD_INT 50
39911: PUSH
39912: LD_INT 51
39914: PUSH
39915: LD_INT 52
39917: PUSH
39918: LD_INT 53
39920: PUSH
39921: LD_INT 54
39923: PUSH
39924: LD_INT 55
39926: PUSH
39927: LD_INT 56
39929: PUSH
39930: LD_INT 57
39932: PUSH
39933: LD_INT 58
39935: PUSH
39936: LD_INT 59
39938: PUSH
39939: LD_INT 63
39941: PUSH
39942: LD_INT 64
39944: PUSH
39945: LD_INT 65
39947: PUSH
39948: LD_INT 82
39950: PUSH
39951: LD_INT 83
39953: PUSH
39954: LD_INT 84
39956: PUSH
39957: LD_INT 85
39959: PUSH
39960: LD_INT 86
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
40018: GO 40021
40020: POP
// if state > - 1 and state < 3 then
40021: LD_VAR 0 3
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: GREATER
40030: PUSH
40031: LD_VAR 0 3
40035: PUSH
40036: LD_INT 3
40038: LESS
40039: AND
40040: IFFALSE 40097
// for i in result do
40042: LD_ADDR_VAR 0 5
40046: PUSH
40047: LD_VAR 0 4
40051: PUSH
40052: FOR_IN
40053: IFFALSE 40095
// if GetTech ( i , side ) <> state then
40055: LD_VAR 0 5
40059: PPUSH
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 321
40069: PUSH
40070: LD_VAR 0 3
40074: NONEQUAL
40075: IFFALSE 40093
// result := result diff i ;
40077: LD_ADDR_VAR 0 4
40081: PUSH
40082: LD_VAR 0 4
40086: PUSH
40087: LD_VAR 0 5
40091: DIFF
40092: ST_TO_ADDR
40093: GO 40052
40095: POP
40096: POP
// end ;
40097: LD_VAR 0 4
40101: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40102: LD_INT 0
40104: PPUSH
40105: PPUSH
40106: PPUSH
// result := true ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 1
40114: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40115: LD_ADDR_VAR 0 5
40119: PUSH
40120: LD_VAR 0 2
40124: PPUSH
40125: CALL_OW 480
40129: ST_TO_ADDR
// if not tmp then
40130: LD_VAR 0 5
40134: NOT
40135: IFFALSE 40139
// exit ;
40137: GO 40188
// for i in tmp do
40139: LD_ADDR_VAR 0 4
40143: PUSH
40144: LD_VAR 0 5
40148: PUSH
40149: FOR_IN
40150: IFFALSE 40186
// if GetTech ( i , side ) <> state_researched then
40152: LD_VAR 0 4
40156: PPUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 321
40166: PUSH
40167: LD_INT 2
40169: NONEQUAL
40170: IFFALSE 40184
// begin result := false ;
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_INT 0
40179: ST_TO_ADDR
// exit ;
40180: POP
40181: POP
40182: GO 40188
// end ;
40184: GO 40149
40186: POP
40187: POP
// end ;
40188: LD_VAR 0 3
40192: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40208: LD_VAR 0 1
40212: NOT
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 257
40223: PUSH
40224: LD_INT 9
40226: NONEQUAL
40227: OR
40228: IFFALSE 40232
// exit ;
40230: GO 40805
// side := GetSide ( unit ) ;
40232: LD_ADDR_VAR 0 9
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 255
40246: ST_TO_ADDR
// tech_space := tech_spacanom ;
40247: LD_ADDR_VAR 0 12
40251: PUSH
40252: LD_INT 29
40254: ST_TO_ADDR
// tech_time := tech_taurad ;
40255: LD_ADDR_VAR 0 13
40259: PUSH
40260: LD_INT 28
40262: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40263: LD_ADDR_VAR 0 11
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 310
40277: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40278: LD_VAR 0 11
40282: PPUSH
40283: CALL_OW 247
40287: PUSH
40288: LD_INT 2
40290: EQUAL
40291: IFFALSE 40295
// exit ;
40293: GO 40805
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40295: LD_ADDR_VAR 0 8
40299: PUSH
40300: LD_INT 81
40302: PUSH
40303: LD_VAR 0 9
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 21
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PPUSH
40333: CALL_OW 69
40337: ST_TO_ADDR
// if not tmp then
40338: LD_VAR 0 8
40342: NOT
40343: IFFALSE 40347
// exit ;
40345: GO 40805
// if in_unit then
40347: LD_VAR 0 11
40351: IFFALSE 40375
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40353: LD_ADDR_VAR 0 10
40357: PUSH
40358: LD_VAR 0 8
40362: PPUSH
40363: LD_VAR 0 11
40367: PPUSH
40368: CALL_OW 74
40372: ST_TO_ADDR
40373: GO 40395
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40375: LD_ADDR_VAR 0 10
40379: PUSH
40380: LD_VAR 0 8
40384: PPUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 74
40394: ST_TO_ADDR
// if not enemy then
40395: LD_VAR 0 10
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40805
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40404: LD_VAR 0 11
40408: PUSH
40409: LD_VAR 0 11
40413: PPUSH
40414: LD_VAR 0 10
40418: PPUSH
40419: CALL_OW 296
40423: PUSH
40424: LD_INT 13
40426: GREATER
40427: AND
40428: PUSH
40429: LD_VAR 0 1
40433: PPUSH
40434: LD_VAR 0 10
40438: PPUSH
40439: CALL_OW 296
40443: PUSH
40444: LD_INT 12
40446: GREATER
40447: OR
40448: IFFALSE 40452
// exit ;
40450: GO 40805
// missile := [ 1 ] ;
40452: LD_ADDR_VAR 0 14
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40463: LD_VAR 0 9
40467: PPUSH
40468: LD_VAR 0 12
40472: PPUSH
40473: CALL_OW 325
40477: IFFALSE 40506
// missile := Replace ( missile , missile + 1 , 2 ) ;
40479: LD_ADDR_VAR 0 14
40483: PUSH
40484: LD_VAR 0 14
40488: PPUSH
40489: LD_VAR 0 14
40493: PUSH
40494: LD_INT 1
40496: PLUS
40497: PPUSH
40498: LD_INT 2
40500: PPUSH
40501: CALL_OW 1
40505: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40506: LD_VAR 0 9
40510: PPUSH
40511: LD_VAR 0 13
40515: PPUSH
40516: CALL_OW 325
40520: PUSH
40521: LD_VAR 0 10
40525: PPUSH
40526: CALL_OW 255
40530: PPUSH
40531: LD_VAR 0 13
40535: PPUSH
40536: CALL_OW 325
40540: NOT
40541: AND
40542: IFFALSE 40571
// missile := Replace ( missile , missile + 1 , 3 ) ;
40544: LD_ADDR_VAR 0 14
40548: PUSH
40549: LD_VAR 0 14
40553: PPUSH
40554: LD_VAR 0 14
40558: PUSH
40559: LD_INT 1
40561: PLUS
40562: PPUSH
40563: LD_INT 3
40565: PPUSH
40566: CALL_OW 1
40570: ST_TO_ADDR
// if missile < 2 then
40571: LD_VAR 0 14
40575: PUSH
40576: LD_INT 2
40578: LESS
40579: IFFALSE 40583
// exit ;
40581: GO 40805
// x := GetX ( enemy ) ;
40583: LD_ADDR_VAR 0 4
40587: PUSH
40588: LD_VAR 0 10
40592: PPUSH
40593: CALL_OW 250
40597: ST_TO_ADDR
// y := GetY ( enemy ) ;
40598: LD_ADDR_VAR 0 5
40602: PUSH
40603: LD_VAR 0 10
40607: PPUSH
40608: CALL_OW 251
40612: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40613: LD_ADDR_VAR 0 6
40617: PUSH
40618: LD_VAR 0 4
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PPUSH
40627: LD_INT 1
40629: PPUSH
40630: CALL_OW 12
40634: PLUS
40635: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40636: LD_ADDR_VAR 0 7
40640: PUSH
40641: LD_VAR 0 5
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PPUSH
40650: LD_INT 1
40652: PPUSH
40653: CALL_OW 12
40657: PLUS
40658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40659: LD_VAR 0 6
40663: PPUSH
40664: LD_VAR 0 7
40668: PPUSH
40669: CALL_OW 488
40673: NOT
40674: IFFALSE 40696
// begin _x := x ;
40676: LD_ADDR_VAR 0 6
40680: PUSH
40681: LD_VAR 0 4
40685: ST_TO_ADDR
// _y := y ;
40686: LD_ADDR_VAR 0 7
40690: PUSH
40691: LD_VAR 0 5
40695: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 1
40703: PPUSH
40704: LD_VAR 0 14
40708: PPUSH
40709: CALL_OW 12
40713: ST_TO_ADDR
// case i of 1 :
40714: LD_VAR 0 3
40718: PUSH
40719: LD_INT 1
40721: DOUBLE
40722: EQUAL
40723: IFTRUE 40727
40725: GO 40744
40727: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_VAR 0 10
40737: PPUSH
40738: CALL_OW 115
40742: GO 40805
40744: LD_INT 2
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40752
40750: GO 40774
40752: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40753: LD_VAR 0 1
40757: PPUSH
40758: LD_VAR 0 6
40762: PPUSH
40763: LD_VAR 0 7
40767: PPUSH
40768: CALL_OW 153
40772: GO 40805
40774: LD_INT 3
40776: DOUBLE
40777: EQUAL
40778: IFTRUE 40782
40780: GO 40804
40782: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 6
40792: PPUSH
40793: LD_VAR 0 7
40797: PPUSH
40798: CALL_OW 154
40802: GO 40805
40804: POP
// end ;
40805: LD_VAR 0 2
40809: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40810: LD_INT 0
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
// if not unit or not building then
40818: LD_VAR 0 1
40822: NOT
40823: PUSH
40824: LD_VAR 0 2
40828: NOT
40829: OR
40830: IFFALSE 40834
// exit ;
40832: GO 40992
// x := GetX ( building ) ;
40834: LD_ADDR_VAR 0 5
40838: PUSH
40839: LD_VAR 0 2
40843: PPUSH
40844: CALL_OW 250
40848: ST_TO_ADDR
// y := GetY ( building ) ;
40849: LD_ADDR_VAR 0 6
40853: PUSH
40854: LD_VAR 0 2
40858: PPUSH
40859: CALL_OW 251
40863: ST_TO_ADDR
// for i = 0 to 5 do
40864: LD_ADDR_VAR 0 4
40868: PUSH
40869: DOUBLE
40870: LD_INT 0
40872: DEC
40873: ST_TO_ADDR
40874: LD_INT 5
40876: PUSH
40877: FOR_TO
40878: IFFALSE 40990
// begin _x := ShiftX ( x , i , 3 ) ;
40880: LD_ADDR_VAR 0 7
40884: PUSH
40885: LD_VAR 0 5
40889: PPUSH
40890: LD_VAR 0 4
40894: PPUSH
40895: LD_INT 3
40897: PPUSH
40898: CALL_OW 272
40902: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40903: LD_ADDR_VAR 0 8
40907: PUSH
40908: LD_VAR 0 6
40912: PPUSH
40913: LD_VAR 0 4
40917: PPUSH
40918: LD_INT 3
40920: PPUSH
40921: CALL_OW 273
40925: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40926: LD_VAR 0 7
40930: PPUSH
40931: LD_VAR 0 8
40935: PPUSH
40936: CALL_OW 488
40940: NOT
40941: IFFALSE 40945
// continue ;
40943: GO 40877
// if HexInfo ( _x , _y ) = 0 then
40945: LD_VAR 0 7
40949: PPUSH
40950: LD_VAR 0 8
40954: PPUSH
40955: CALL_OW 428
40959: PUSH
40960: LD_INT 0
40962: EQUAL
40963: IFFALSE 40988
// begin ComMoveXY ( unit , _x , _y ) ;
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 7
40974: PPUSH
40975: LD_VAR 0 8
40979: PPUSH
40980: CALL_OW 111
// exit ;
40984: POP
40985: POP
40986: GO 40992
// end ; end ;
40988: GO 40877
40990: POP
40991: POP
// end ;
40992: LD_VAR 0 3
40996: RET
// export function ScanBase ( side , base_area ) ; begin
40997: LD_INT 0
40999: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41000: LD_ADDR_VAR 0 3
41004: PUSH
41005: LD_VAR 0 2
41009: PPUSH
41010: LD_INT 81
41012: PUSH
41013: LD_VAR 0 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PPUSH
41022: CALL_OW 70
41026: ST_TO_ADDR
// end ;
41027: LD_VAR 0 3
41031: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41032: LD_INT 0
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
// result := false ;
41038: LD_ADDR_VAR 0 2
41042: PUSH
41043: LD_INT 0
41045: ST_TO_ADDR
// side := GetSide ( unit ) ;
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 255
41060: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41061: LD_ADDR_VAR 0 4
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 248
41075: ST_TO_ADDR
// case nat of 1 :
41076: LD_VAR 0 4
41080: PUSH
41081: LD_INT 1
41083: DOUBLE
41084: EQUAL
41085: IFTRUE 41089
41087: GO 41100
41089: POP
// tech := tech_lassight ; 2 :
41090: LD_ADDR_VAR 0 5
41094: PUSH
41095: LD_INT 12
41097: ST_TO_ADDR
41098: GO 41139
41100: LD_INT 2
41102: DOUBLE
41103: EQUAL
41104: IFTRUE 41108
41106: GO 41119
41108: POP
// tech := tech_mortar ; 3 :
41109: LD_ADDR_VAR 0 5
41113: PUSH
41114: LD_INT 41
41116: ST_TO_ADDR
41117: GO 41139
41119: LD_INT 3
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41127
41125: GO 41138
41127: POP
// tech := tech_bazooka ; end ;
41128: LD_ADDR_VAR 0 5
41132: PUSH
41133: LD_INT 44
41135: ST_TO_ADDR
41136: GO 41139
41138: POP
// if Researched ( side , tech ) then
41139: LD_VAR 0 3
41143: PPUSH
41144: LD_VAR 0 5
41148: PPUSH
41149: CALL_OW 325
41153: IFFALSE 41180
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41155: LD_ADDR_VAR 0 2
41159: PUSH
41160: LD_INT 5
41162: PUSH
41163: LD_INT 8
41165: PUSH
41166: LD_INT 9
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: PUSH
41174: LD_VAR 0 4
41178: ARRAY
41179: ST_TO_ADDR
// end ;
41180: LD_VAR 0 2
41184: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
41189: PPUSH
// if not mines then
41190: LD_VAR 0 2
41194: NOT
41195: IFFALSE 41199
// exit ;
41197: GO 41343
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41199: LD_ADDR_VAR 0 5
41203: PUSH
41204: LD_INT 81
41206: PUSH
41207: LD_VAR 0 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 3
41218: PUSH
41219: LD_INT 21
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PPUSH
41237: CALL_OW 69
41241: ST_TO_ADDR
// for i in mines do
41242: LD_ADDR_VAR 0 4
41246: PUSH
41247: LD_VAR 0 2
41251: PUSH
41252: FOR_IN
41253: IFFALSE 41341
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41255: LD_VAR 0 4
41259: PUSH
41260: LD_INT 1
41262: ARRAY
41263: PPUSH
41264: LD_VAR 0 4
41268: PUSH
41269: LD_INT 2
41271: ARRAY
41272: PPUSH
41273: CALL_OW 458
41277: NOT
41278: IFFALSE 41282
// continue ;
41280: GO 41252
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41282: LD_VAR 0 4
41286: PUSH
41287: LD_INT 1
41289: ARRAY
41290: PPUSH
41291: LD_VAR 0 4
41295: PUSH
41296: LD_INT 2
41298: ARRAY
41299: PPUSH
41300: CALL_OW 428
41304: PUSH
41305: LD_VAR 0 5
41309: IN
41310: IFFALSE 41339
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41312: LD_VAR 0 4
41316: PUSH
41317: LD_INT 1
41319: ARRAY
41320: PPUSH
41321: LD_VAR 0 4
41325: PUSH
41326: LD_INT 2
41328: ARRAY
41329: PPUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: CALL_OW 456
// end ;
41339: GO 41252
41341: POP
41342: POP
// end ;
41343: LD_VAR 0 3
41347: RET
// export function Count ( array ) ; var i ; begin
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
// result := 0 ;
41352: LD_ADDR_VAR 0 2
41356: PUSH
41357: LD_INT 0
41359: ST_TO_ADDR
// for i in array do
41360: LD_ADDR_VAR 0 3
41364: PUSH
41365: LD_VAR 0 1
41369: PUSH
41370: FOR_IN
41371: IFFALSE 41395
// if i then
41373: LD_VAR 0 3
41377: IFFALSE 41393
// result := result + 1 ;
41379: LD_ADDR_VAR 0 2
41383: PUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_INT 1
41391: PLUS
41392: ST_TO_ADDR
41393: GO 41370
41395: POP
41396: POP
// end ;
41397: LD_VAR 0 2
41401: RET
// export function IsEmpty ( building ) ; begin
41402: LD_INT 0
41404: PPUSH
// if not building then
41405: LD_VAR 0 1
41409: NOT
41410: IFFALSE 41414
// exit ;
41412: GO 41457
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41414: LD_ADDR_VAR 0 2
41418: PUSH
41419: LD_VAR 0 1
41423: PUSH
41424: LD_INT 22
41426: PUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 255
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 58
41443: PUSH
41444: EMPTY
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PPUSH
41451: CALL_OW 69
41455: IN
41456: ST_TO_ADDR
// end ;
41457: LD_VAR 0 2
41461: RET
// export function IsNotFull ( building ) ; begin
41462: LD_INT 0
41464: PPUSH
// if not building then
41465: LD_VAR 0 1
41469: NOT
41470: IFFALSE 41474
// exit ;
41472: GO 41493
// result := UnitsInside ( building ) < 6 ;
41474: LD_ADDR_VAR 0 2
41478: PUSH
41479: LD_VAR 0 1
41483: PPUSH
41484: CALL_OW 313
41488: PUSH
41489: LD_INT 6
41491: LESS
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 2
41497: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
// tmp := [ ] ;
41504: LD_ADDR_VAR 0 3
41508: PUSH
41509: EMPTY
41510: ST_TO_ADDR
// list := [ ] ;
41511: LD_ADDR_VAR 0 5
41515: PUSH
41516: EMPTY
41517: ST_TO_ADDR
// for i = 16 to 25 do
41518: LD_ADDR_VAR 0 4
41522: PUSH
41523: DOUBLE
41524: LD_INT 16
41526: DEC
41527: ST_TO_ADDR
41528: LD_INT 25
41530: PUSH
41531: FOR_TO
41532: IFFALSE 41605
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41534: LD_ADDR_VAR 0 3
41538: PUSH
41539: LD_VAR 0 3
41543: PUSH
41544: LD_INT 22
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 255
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 91
41563: PUSH
41564: LD_VAR 0 1
41568: PUSH
41569: LD_INT 6
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 30
41579: PUSH
41580: LD_VAR 0 4
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: PPUSH
41597: CALL_OW 69
41601: ADD
41602: ST_TO_ADDR
41603: GO 41531
41605: POP
41606: POP
// for i = 1 to tmp do
41607: LD_ADDR_VAR 0 4
41611: PUSH
41612: DOUBLE
41613: LD_INT 1
41615: DEC
41616: ST_TO_ADDR
41617: LD_VAR 0 3
41621: PUSH
41622: FOR_TO
41623: IFFALSE 41711
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41625: LD_ADDR_VAR 0 5
41629: PUSH
41630: LD_VAR 0 5
41634: PUSH
41635: LD_VAR 0 3
41639: PUSH
41640: LD_VAR 0 4
41644: ARRAY
41645: PPUSH
41646: CALL_OW 266
41650: PUSH
41651: LD_VAR 0 3
41655: PUSH
41656: LD_VAR 0 4
41660: ARRAY
41661: PPUSH
41662: CALL_OW 250
41666: PUSH
41667: LD_VAR 0 3
41671: PUSH
41672: LD_VAR 0 4
41676: ARRAY
41677: PPUSH
41678: CALL_OW 251
41682: PUSH
41683: LD_VAR 0 3
41687: PUSH
41688: LD_VAR 0 4
41692: ARRAY
41693: PPUSH
41694: CALL_OW 254
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: PUSH
41705: EMPTY
41706: LIST
41707: ADD
41708: ST_TO_ADDR
41709: GO 41622
41711: POP
41712: POP
// result := list ;
41713: LD_ADDR_VAR 0 2
41717: PUSH
41718: LD_VAR 0 5
41722: ST_TO_ADDR
// end ;
41723: LD_VAR 0 2
41727: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41728: LD_INT 0
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// if not factory then
41737: LD_VAR 0 1
41741: NOT
41742: IFFALSE 41746
// exit ;
41744: GO 42339
// if control = control_apeman then
41746: LD_VAR 0 4
41750: PUSH
41751: LD_INT 5
41753: EQUAL
41754: IFFALSE 41863
// begin tmp := UnitsInside ( factory ) ;
41756: LD_ADDR_VAR 0 8
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 313
41770: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41771: LD_VAR 0 8
41775: PPUSH
41776: LD_INT 25
41778: PUSH
41779: LD_INT 12
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PPUSH
41786: CALL_OW 72
41790: NOT
41791: IFFALSE 41801
// control := control_manual ;
41793: LD_ADDR_VAR 0 4
41797: PUSH
41798: LD_INT 1
41800: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41801: LD_ADDR_VAR 0 8
41805: PUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL 41498 0 1
41815: ST_TO_ADDR
// if tmp then
41816: LD_VAR 0 8
41820: IFFALSE 41863
// begin for i in tmp do
41822: LD_ADDR_VAR 0 7
41826: PUSH
41827: LD_VAR 0 8
41831: PUSH
41832: FOR_IN
41833: IFFALSE 41861
// if i [ 1 ] = b_ext_radio then
41835: LD_VAR 0 7
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PUSH
41844: LD_INT 22
41846: EQUAL
41847: IFFALSE 41859
// begin control := control_remote ;
41849: LD_ADDR_VAR 0 4
41853: PUSH
41854: LD_INT 2
41856: ST_TO_ADDR
// break ;
41857: GO 41861
// end ;
41859: GO 41832
41861: POP
41862: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41863: LD_VAR 0 1
41867: PPUSH
41868: LD_VAR 0 2
41872: PPUSH
41873: LD_VAR 0 3
41877: PPUSH
41878: LD_VAR 0 4
41882: PPUSH
41883: LD_VAR 0 5
41887: PPUSH
41888: CALL_OW 448
41892: IFFALSE 41927
// begin result := [ chassis , engine , control , weapon ] ;
41894: LD_ADDR_VAR 0 6
41898: PUSH
41899: LD_VAR 0 2
41903: PUSH
41904: LD_VAR 0 3
41908: PUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_VAR 0 5
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// exit ;
41925: GO 42339
// end ; _chassis := AvailableChassisList ( factory ) ;
41927: LD_ADDR_VAR 0 9
41931: PUSH
41932: LD_VAR 0 1
41936: PPUSH
41937: CALL_OW 475
41941: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41942: LD_ADDR_VAR 0 11
41946: PUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 476
41956: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41957: LD_ADDR_VAR 0 12
41961: PUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: CALL_OW 477
41971: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41972: LD_ADDR_VAR 0 10
41976: PUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 478
41986: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41987: LD_VAR 0 9
41991: NOT
41992: PUSH
41993: LD_VAR 0 11
41997: NOT
41998: OR
41999: PUSH
42000: LD_VAR 0 12
42004: NOT
42005: OR
42006: PUSH
42007: LD_VAR 0 10
42011: NOT
42012: OR
42013: IFFALSE 42048
// begin result := [ chassis , engine , control , weapon ] ;
42015: LD_ADDR_VAR 0 6
42019: PUSH
42020: LD_VAR 0 2
42024: PUSH
42025: LD_VAR 0 3
42029: PUSH
42030: LD_VAR 0 4
42034: PUSH
42035: LD_VAR 0 5
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// exit ;
42046: GO 42339
// end ; if not chassis in _chassis then
42048: LD_VAR 0 2
42052: PUSH
42053: LD_VAR 0 9
42057: IN
42058: NOT
42059: IFFALSE 42085
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42061: LD_ADDR_VAR 0 2
42065: PUSH
42066: LD_VAR 0 9
42070: PUSH
42071: LD_INT 1
42073: PPUSH
42074: LD_VAR 0 9
42078: PPUSH
42079: CALL_OW 12
42083: ARRAY
42084: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42085: LD_VAR 0 2
42089: PPUSH
42090: LD_VAR 0 3
42094: PPUSH
42095: CALL 42344 0 2
42099: NOT
42100: IFFALSE 42159
// repeat engine := _engine [ 1 ] ;
42102: LD_ADDR_VAR 0 3
42106: PUSH
42107: LD_VAR 0 11
42111: PUSH
42112: LD_INT 1
42114: ARRAY
42115: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42116: LD_ADDR_VAR 0 11
42120: PUSH
42121: LD_VAR 0 11
42125: PPUSH
42126: LD_INT 1
42128: PPUSH
42129: CALL_OW 3
42133: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42134: LD_VAR 0 2
42138: PPUSH
42139: LD_VAR 0 3
42143: PPUSH
42144: CALL 42344 0 2
42148: PUSH
42149: LD_VAR 0 11
42153: PUSH
42154: EMPTY
42155: EQUAL
42156: OR
42157: IFFALSE 42102
// if not control in _control then
42159: LD_VAR 0 4
42163: PUSH
42164: LD_VAR 0 12
42168: IN
42169: NOT
42170: IFFALSE 42196
// control := _control [ rand ( 1 , _control ) ] ;
42172: LD_ADDR_VAR 0 4
42176: PUSH
42177: LD_VAR 0 12
42181: PUSH
42182: LD_INT 1
42184: PPUSH
42185: LD_VAR 0 12
42189: PPUSH
42190: CALL_OW 12
42194: ARRAY
42195: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42196: LD_VAR 0 2
42200: PPUSH
42201: LD_VAR 0 5
42205: PPUSH
42206: CALL 42564 0 2
42210: NOT
42211: IFFALSE 42270
// repeat weapon := _weapon [ 1 ] ;
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: LD_VAR 0 10
42222: PUSH
42223: LD_INT 1
42225: ARRAY
42226: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42227: LD_ADDR_VAR 0 10
42231: PUSH
42232: LD_VAR 0 10
42236: PPUSH
42237: LD_INT 1
42239: PPUSH
42240: CALL_OW 3
42244: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42245: LD_VAR 0 2
42249: PPUSH
42250: LD_VAR 0 5
42254: PPUSH
42255: CALL 42564 0 2
42259: PUSH
42260: LD_VAR 0 10
42264: PUSH
42265: EMPTY
42266: EQUAL
42267: OR
42268: IFFALSE 42213
// result := [ ] ;
42270: LD_ADDR_VAR 0 6
42274: PUSH
42275: EMPTY
42276: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42277: LD_VAR 0 1
42281: PPUSH
42282: LD_VAR 0 2
42286: PPUSH
42287: LD_VAR 0 3
42291: PPUSH
42292: LD_VAR 0 4
42296: PPUSH
42297: LD_VAR 0 5
42301: PPUSH
42302: CALL_OW 448
42306: IFFALSE 42339
// result := [ chassis , engine , control , weapon ] ;
42308: LD_ADDR_VAR 0 6
42312: PUSH
42313: LD_VAR 0 2
42317: PUSH
42318: LD_VAR 0 3
42322: PUSH
42323: LD_VAR 0 4
42327: PUSH
42328: LD_VAR 0 5
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// end ;
42339: LD_VAR 0 6
42343: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42344: LD_INT 0
42346: PPUSH
// if not chassis or not engine then
42347: LD_VAR 0 1
42351: NOT
42352: PUSH
42353: LD_VAR 0 2
42357: NOT
42358: OR
42359: IFFALSE 42363
// exit ;
42361: GO 42559
// case engine of engine_solar :
42363: LD_VAR 0 2
42367: PUSH
42368: LD_INT 2
42370: DOUBLE
42371: EQUAL
42372: IFTRUE 42376
42374: GO 42414
42376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42377: LD_ADDR_VAR 0 3
42381: PUSH
42382: LD_INT 11
42384: PUSH
42385: LD_INT 12
42387: PUSH
42388: LD_INT 13
42390: PUSH
42391: LD_INT 14
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: ST_TO_ADDR
42412: GO 42543
42414: LD_INT 1
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42484
42422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 11
42430: PUSH
42431: LD_INT 12
42433: PUSH
42434: LD_INT 13
42436: PUSH
42437: LD_INT 14
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: LD_INT 4
42451: PUSH
42452: LD_INT 5
42454: PUSH
42455: LD_INT 21
42457: PUSH
42458: LD_INT 23
42460: PUSH
42461: LD_INT 22
42463: PUSH
42464: LD_INT 24
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
42482: GO 42543
42484: LD_INT 3
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42542
42492: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 13
42500: PUSH
42501: LD_INT 14
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: LD_INT 21
42518: PUSH
42519: LD_INT 22
42521: PUSH
42522: LD_INT 23
42524: PUSH
42525: LD_INT 24
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: ST_TO_ADDR
42540: GO 42543
42542: POP
// result := ( chassis in result ) ;
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_VAR 0 1
42552: PUSH
42553: LD_VAR 0 3
42557: IN
42558: ST_TO_ADDR
// end ;
42559: LD_VAR 0 3
42563: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42564: LD_INT 0
42566: PPUSH
// if not chassis or not weapon then
42567: LD_VAR 0 1
42571: NOT
42572: PUSH
42573: LD_VAR 0 2
42577: NOT
42578: OR
42579: IFFALSE 42583
// exit ;
42581: GO 43645
// case weapon of us_machine_gun :
42583: LD_VAR 0 2
42587: PUSH
42588: LD_INT 2
42590: DOUBLE
42591: EQUAL
42592: IFTRUE 42596
42594: GO 42626
42596: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42597: LD_ADDR_VAR 0 3
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 4
42613: PUSH
42614: LD_INT 5
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: ST_TO_ADDR
42624: GO 43629
42626: LD_INT 3
42628: DOUBLE
42629: EQUAL
42630: IFTRUE 42634
42632: GO 42664
42634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42635: LD_ADDR_VAR 0 3
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: LD_INT 4
42651: PUSH
42652: LD_INT 5
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
42662: GO 43629
42664: LD_INT 11
42666: DOUBLE
42667: EQUAL
42668: IFTRUE 42672
42670: GO 42702
42672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 4
42689: PUSH
42690: LD_INT 5
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
42700: GO 43629
42702: LD_INT 4
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42710
42708: GO 42736
42710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 4
42724: PUSH
42725: LD_INT 5
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: ST_TO_ADDR
42734: GO 43629
42736: LD_INT 5
42738: DOUBLE
42739: EQUAL
42740: IFTRUE 42744
42742: GO 42770
42744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 4
42758: PUSH
42759: LD_INT 5
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
42768: GO 43629
42770: LD_INT 9
42772: DOUBLE
42773: EQUAL
42774: IFTRUE 42778
42776: GO 42804
42778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 4
42792: PUSH
42793: LD_INT 5
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
42802: GO 43629
42804: LD_INT 7
42806: DOUBLE
42807: EQUAL
42808: IFTRUE 42812
42810: GO 42838
42812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42813: LD_ADDR_VAR 0 3
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 4
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: ST_TO_ADDR
42836: GO 43629
42838: LD_INT 12
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42872
42846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 4
42860: PUSH
42861: LD_INT 5
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: ST_TO_ADDR
42870: GO 43629
42872: LD_INT 13
42874: DOUBLE
42875: EQUAL
42876: IFTRUE 42880
42878: GO 42906
42880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42881: LD_ADDR_VAR 0 3
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: LD_INT 5
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
42904: GO 43629
42906: LD_INT 14
42908: DOUBLE
42909: EQUAL
42910: IFTRUE 42914
42912: GO 42932
42914: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_INT 4
42922: PUSH
42923: LD_INT 5
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: ST_TO_ADDR
42930: GO 43629
42932: LD_INT 6
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 42958
42940: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 4
42948: PUSH
42949: LD_INT 5
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: ST_TO_ADDR
42956: GO 43629
42958: LD_INT 10
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42984
42966: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_INT 4
42974: PUSH
42975: LD_INT 5
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: ST_TO_ADDR
42982: GO 43629
42984: LD_INT 22
42986: DOUBLE
42987: EQUAL
42988: IFTRUE 42992
42990: GO 43018
42992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42993: LD_ADDR_VAR 0 3
42997: PUSH
42998: LD_INT 11
43000: PUSH
43001: LD_INT 12
43003: PUSH
43004: LD_INT 13
43006: PUSH
43007: LD_INT 14
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
43016: GO 43629
43018: LD_INT 23
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43052
43026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 11
43034: PUSH
43035: LD_INT 12
43037: PUSH
43038: LD_INT 13
43040: PUSH
43041: LD_INT 14
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: ST_TO_ADDR
43050: GO 43629
43052: LD_INT 24
43054: DOUBLE
43055: EQUAL
43056: IFTRUE 43060
43058: GO 43086
43060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43061: LD_ADDR_VAR 0 3
43065: PUSH
43066: LD_INT 11
43068: PUSH
43069: LD_INT 12
43071: PUSH
43072: LD_INT 13
43074: PUSH
43075: LD_INT 14
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
43084: GO 43629
43086: LD_INT 30
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43094
43092: GO 43120
43094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43095: LD_ADDR_VAR 0 3
43099: PUSH
43100: LD_INT 11
43102: PUSH
43103: LD_INT 12
43105: PUSH
43106: LD_INT 13
43108: PUSH
43109: LD_INT 14
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
43118: GO 43629
43120: LD_INT 25
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43128
43126: GO 43146
43128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_INT 13
43136: PUSH
43137: LD_INT 14
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: ST_TO_ADDR
43144: GO 43629
43146: LD_INT 27
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 43172
43154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: LD_INT 13
43162: PUSH
43163: LD_INT 14
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: ST_TO_ADDR
43170: GO 43629
43172: LD_EXP 54
43176: DOUBLE
43177: EQUAL
43178: IFTRUE 43182
43180: GO 43208
43182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_INT 11
43190: PUSH
43191: LD_INT 12
43193: PUSH
43194: LD_INT 13
43196: PUSH
43197: LD_INT 14
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
43206: GO 43629
43208: LD_INT 28
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43234
43216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 13
43224: PUSH
43225: LD_INT 14
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: ST_TO_ADDR
43232: GO 43629
43234: LD_INT 29
43236: DOUBLE
43237: EQUAL
43238: IFTRUE 43242
43240: GO 43260
43242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43243: LD_ADDR_VAR 0 3
43247: PUSH
43248: LD_INT 13
43250: PUSH
43251: LD_INT 14
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: ST_TO_ADDR
43258: GO 43629
43260: LD_INT 31
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43286
43268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_INT 13
43276: PUSH
43277: LD_INT 14
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: ST_TO_ADDR
43284: GO 43629
43286: LD_INT 26
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43312
43294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_INT 13
43302: PUSH
43303: LD_INT 14
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: ST_TO_ADDR
43310: GO 43629
43312: LD_INT 42
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43346
43320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_INT 21
43328: PUSH
43329: LD_INT 22
43331: PUSH
43332: LD_INT 23
43334: PUSH
43335: LD_INT 24
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
43344: GO 43629
43346: LD_INT 43
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43380
43354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 21
43362: PUSH
43363: LD_INT 22
43365: PUSH
43366: LD_INT 23
43368: PUSH
43369: LD_INT 24
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
43378: GO 43629
43380: LD_INT 44
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43414
43388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 21
43396: PUSH
43397: LD_INT 22
43399: PUSH
43400: LD_INT 23
43402: PUSH
43403: LD_INT 24
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 43629
43414: LD_INT 45
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 21
43430: PUSH
43431: LD_INT 22
43433: PUSH
43434: LD_INT 23
43436: PUSH
43437: LD_INT 24
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 43629
43448: LD_INT 49
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 21
43464: PUSH
43465: LD_INT 22
43467: PUSH
43468: LD_INT 23
43470: PUSH
43471: LD_INT 24
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 43629
43482: LD_INT 51
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 21
43498: PUSH
43499: LD_INT 22
43501: PUSH
43502: LD_INT 23
43504: PUSH
43505: LD_INT 24
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 43629
43516: LD_INT 52
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 21
43532: PUSH
43533: LD_INT 22
43535: PUSH
43536: LD_INT 23
43538: PUSH
43539: LD_INT 24
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 43629
43550: LD_INT 53
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43576
43558: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 23
43566: PUSH
43567: LD_INT 24
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: ST_TO_ADDR
43574: GO 43629
43576: LD_INT 46
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43602
43584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 23
43592: PUSH
43593: LD_INT 24
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 43629
43602: LD_INT 47
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43628
43610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 23
43618: PUSH
43619: LD_INT 24
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: ST_TO_ADDR
43626: GO 43629
43628: POP
// result := ( chassis in result ) ;
43629: LD_ADDR_VAR 0 3
43633: PUSH
43634: LD_VAR 0 1
43638: PUSH
43639: LD_VAR 0 3
43643: IN
43644: ST_TO_ADDR
// end ;
43645: LD_VAR 0 3
43649: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43650: LD_INT 0
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
// result := array ;
43659: LD_ADDR_VAR 0 5
43663: PUSH
43664: LD_VAR 0 1
43668: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43669: LD_VAR 0 1
43673: NOT
43674: PUSH
43675: LD_VAR 0 2
43679: NOT
43680: OR
43681: PUSH
43682: LD_VAR 0 3
43686: NOT
43687: OR
43688: PUSH
43689: LD_VAR 0 2
43693: PUSH
43694: LD_VAR 0 1
43698: GREATER
43699: OR
43700: PUSH
43701: LD_VAR 0 3
43705: PUSH
43706: LD_VAR 0 1
43710: GREATER
43711: OR
43712: IFFALSE 43716
// exit ;
43714: GO 44012
// if direction then
43716: LD_VAR 0 4
43720: IFFALSE 43784
// begin d := 1 ;
43722: LD_ADDR_VAR 0 9
43726: PUSH
43727: LD_INT 1
43729: ST_TO_ADDR
// if i_from > i_to then
43730: LD_VAR 0 2
43734: PUSH
43735: LD_VAR 0 3
43739: GREATER
43740: IFFALSE 43766
// length := ( array - i_from ) + i_to else
43742: LD_ADDR_VAR 0 11
43746: PUSH
43747: LD_VAR 0 1
43751: PUSH
43752: LD_VAR 0 2
43756: MINUS
43757: PUSH
43758: LD_VAR 0 3
43762: PLUS
43763: ST_TO_ADDR
43764: GO 43782
// length := i_to - i_from ;
43766: LD_ADDR_VAR 0 11
43770: PUSH
43771: LD_VAR 0 3
43775: PUSH
43776: LD_VAR 0 2
43780: MINUS
43781: ST_TO_ADDR
// end else
43782: GO 43845
// begin d := - 1 ;
43784: LD_ADDR_VAR 0 9
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: ST_TO_ADDR
// if i_from > i_to then
43793: LD_VAR 0 2
43797: PUSH
43798: LD_VAR 0 3
43802: GREATER
43803: IFFALSE 43823
// length := i_from - i_to else
43805: LD_ADDR_VAR 0 11
43809: PUSH
43810: LD_VAR 0 2
43814: PUSH
43815: LD_VAR 0 3
43819: MINUS
43820: ST_TO_ADDR
43821: GO 43845
// length := ( array - i_to ) + i_from ;
43823: LD_ADDR_VAR 0 11
43827: PUSH
43828: LD_VAR 0 1
43832: PUSH
43833: LD_VAR 0 3
43837: MINUS
43838: PUSH
43839: LD_VAR 0 2
43843: PLUS
43844: ST_TO_ADDR
// end ; if not length then
43845: LD_VAR 0 11
43849: NOT
43850: IFFALSE 43854
// exit ;
43852: GO 44012
// tmp := array ;
43854: LD_ADDR_VAR 0 10
43858: PUSH
43859: LD_VAR 0 1
43863: ST_TO_ADDR
// for i = 1 to length do
43864: LD_ADDR_VAR 0 6
43868: PUSH
43869: DOUBLE
43870: LD_INT 1
43872: DEC
43873: ST_TO_ADDR
43874: LD_VAR 0 11
43878: PUSH
43879: FOR_TO
43880: IFFALSE 44000
// begin for j = 1 to array do
43882: LD_ADDR_VAR 0 7
43886: PUSH
43887: DOUBLE
43888: LD_INT 1
43890: DEC
43891: ST_TO_ADDR
43892: LD_VAR 0 1
43896: PUSH
43897: FOR_TO
43898: IFFALSE 43986
// begin k := j + d ;
43900: LD_ADDR_VAR 0 8
43904: PUSH
43905: LD_VAR 0 7
43909: PUSH
43910: LD_VAR 0 9
43914: PLUS
43915: ST_TO_ADDR
// if k > array then
43916: LD_VAR 0 8
43920: PUSH
43921: LD_VAR 0 1
43925: GREATER
43926: IFFALSE 43936
// k := 1 ;
43928: LD_ADDR_VAR 0 8
43932: PUSH
43933: LD_INT 1
43935: ST_TO_ADDR
// if not k then
43936: LD_VAR 0 8
43940: NOT
43941: IFFALSE 43953
// k := array ;
43943: LD_ADDR_VAR 0 8
43947: PUSH
43948: LD_VAR 0 1
43952: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43953: LD_ADDR_VAR 0 10
43957: PUSH
43958: LD_VAR 0 10
43962: PPUSH
43963: LD_VAR 0 8
43967: PPUSH
43968: LD_VAR 0 1
43972: PUSH
43973: LD_VAR 0 7
43977: ARRAY
43978: PPUSH
43979: CALL_OW 1
43983: ST_TO_ADDR
// end ;
43984: GO 43897
43986: POP
43987: POP
// array := tmp ;
43988: LD_ADDR_VAR 0 1
43992: PUSH
43993: LD_VAR 0 10
43997: ST_TO_ADDR
// end ;
43998: GO 43879
44000: POP
44001: POP
// result := array ;
44002: LD_ADDR_VAR 0 5
44006: PUSH
44007: LD_VAR 0 1
44011: ST_TO_ADDR
// end ;
44012: LD_VAR 0 5
44016: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44017: LD_INT 0
44019: PPUSH
44020: PPUSH
// result := 0 ;
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 0
44028: ST_TO_ADDR
// if not array or not value in array then
44029: LD_VAR 0 1
44033: NOT
44034: PUSH
44035: LD_VAR 0 2
44039: PUSH
44040: LD_VAR 0 1
44044: IN
44045: NOT
44046: OR
44047: IFFALSE 44051
// exit ;
44049: GO 44105
// for i = 1 to array do
44051: LD_ADDR_VAR 0 4
44055: PUSH
44056: DOUBLE
44057: LD_INT 1
44059: DEC
44060: ST_TO_ADDR
44061: LD_VAR 0 1
44065: PUSH
44066: FOR_TO
44067: IFFALSE 44103
// if value = array [ i ] then
44069: LD_VAR 0 2
44073: PUSH
44074: LD_VAR 0 1
44078: PUSH
44079: LD_VAR 0 4
44083: ARRAY
44084: EQUAL
44085: IFFALSE 44101
// begin result := i ;
44087: LD_ADDR_VAR 0 3
44091: PUSH
44092: LD_VAR 0 4
44096: ST_TO_ADDR
// exit ;
44097: POP
44098: POP
44099: GO 44105
// end ;
44101: GO 44066
44103: POP
44104: POP
// end ;
44105: LD_VAR 0 3
44109: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44110: LD_INT 0
44112: PPUSH
// vc_chassis := chassis ;
44113: LD_ADDR_OWVAR 37
44117: PUSH
44118: LD_VAR 0 1
44122: ST_TO_ADDR
// vc_engine := engine ;
44123: LD_ADDR_OWVAR 39
44127: PUSH
44128: LD_VAR 0 2
44132: ST_TO_ADDR
// vc_control := control ;
44133: LD_ADDR_OWVAR 38
44137: PUSH
44138: LD_VAR 0 3
44142: ST_TO_ADDR
// vc_weapon := weapon ;
44143: LD_ADDR_OWVAR 40
44147: PUSH
44148: LD_VAR 0 4
44152: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44153: LD_ADDR_OWVAR 41
44157: PUSH
44158: LD_VAR 0 5
44162: ST_TO_ADDR
// end ;
44163: LD_VAR 0 6
44167: RET
// export function WantPlant ( unit ) ; var task ; begin
44168: LD_INT 0
44170: PPUSH
44171: PPUSH
// result := false ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_INT 0
44179: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL_OW 437
44194: ST_TO_ADDR
// if task then
44195: LD_VAR 0 3
44199: IFFALSE 44227
// if task [ 1 ] [ 1 ] = p then
44201: LD_VAR 0 3
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PUSH
44210: LD_INT 1
44212: ARRAY
44213: PUSH
44214: LD_STRING p
44216: EQUAL
44217: IFFALSE 44227
// result := true ;
44219: LD_ADDR_VAR 0 2
44223: PUSH
44224: LD_INT 1
44226: ST_TO_ADDR
// end ;
44227: LD_VAR 0 2
44231: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44232: LD_INT 0
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// if pos < 1 then
44238: LD_VAR 0 2
44242: PUSH
44243: LD_INT 1
44245: LESS
44246: IFFALSE 44250
// exit ;
44248: GO 44553
// if pos = 1 then
44250: LD_VAR 0 2
44254: PUSH
44255: LD_INT 1
44257: EQUAL
44258: IFFALSE 44291
// result := Replace ( arr , pos [ 1 ] , value ) else
44260: LD_ADDR_VAR 0 4
44264: PUSH
44265: LD_VAR 0 1
44269: PPUSH
44270: LD_VAR 0 2
44274: PUSH
44275: LD_INT 1
44277: ARRAY
44278: PPUSH
44279: LD_VAR 0 3
44283: PPUSH
44284: CALL_OW 1
44288: ST_TO_ADDR
44289: GO 44553
// begin tmp := arr ;
44291: LD_ADDR_VAR 0 6
44295: PUSH
44296: LD_VAR 0 1
44300: ST_TO_ADDR
// s_arr := [ tmp ] ;
44301: LD_ADDR_VAR 0 7
44305: PUSH
44306: LD_VAR 0 6
44310: PUSH
44311: EMPTY
44312: LIST
44313: ST_TO_ADDR
// for i = 1 to pos - 1 do
44314: LD_ADDR_VAR 0 5
44318: PUSH
44319: DOUBLE
44320: LD_INT 1
44322: DEC
44323: ST_TO_ADDR
44324: LD_VAR 0 2
44328: PUSH
44329: LD_INT 1
44331: MINUS
44332: PUSH
44333: FOR_TO
44334: IFFALSE 44379
// begin tmp := tmp [ pos [ i ] ] ;
44336: LD_ADDR_VAR 0 6
44340: PUSH
44341: LD_VAR 0 6
44345: PUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_VAR 0 5
44355: ARRAY
44356: ARRAY
44357: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44358: LD_ADDR_VAR 0 7
44362: PUSH
44363: LD_VAR 0 7
44367: PUSH
44368: LD_VAR 0 6
44372: PUSH
44373: EMPTY
44374: LIST
44375: ADD
44376: ST_TO_ADDR
// end ;
44377: GO 44333
44379: POP
44380: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44381: LD_ADDR_VAR 0 6
44385: PUSH
44386: LD_VAR 0 6
44390: PPUSH
44391: LD_VAR 0 2
44395: PUSH
44396: LD_VAR 0 2
44400: ARRAY
44401: PPUSH
44402: LD_VAR 0 3
44406: PPUSH
44407: CALL_OW 1
44411: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44412: LD_ADDR_VAR 0 7
44416: PUSH
44417: LD_VAR 0 7
44421: PPUSH
44422: LD_VAR 0 7
44426: PPUSH
44427: LD_VAR 0 6
44431: PPUSH
44432: CALL_OW 1
44436: ST_TO_ADDR
// for i = s_arr downto 2 do
44437: LD_ADDR_VAR 0 5
44441: PUSH
44442: DOUBLE
44443: LD_VAR 0 7
44447: INC
44448: ST_TO_ADDR
44449: LD_INT 2
44451: PUSH
44452: FOR_DOWNTO
44453: IFFALSE 44537
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44455: LD_ADDR_VAR 0 6
44459: PUSH
44460: LD_VAR 0 7
44464: PUSH
44465: LD_VAR 0 5
44469: PUSH
44470: LD_INT 1
44472: MINUS
44473: ARRAY
44474: PPUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_VAR 0 5
44484: PUSH
44485: LD_INT 1
44487: MINUS
44488: ARRAY
44489: PPUSH
44490: LD_VAR 0 7
44494: PUSH
44495: LD_VAR 0 5
44499: ARRAY
44500: PPUSH
44501: CALL_OW 1
44505: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44506: LD_ADDR_VAR 0 7
44510: PUSH
44511: LD_VAR 0 7
44515: PPUSH
44516: LD_VAR 0 5
44520: PUSH
44521: LD_INT 1
44523: MINUS
44524: PPUSH
44525: LD_VAR 0 6
44529: PPUSH
44530: CALL_OW 1
44534: ST_TO_ADDR
// end ;
44535: GO 44452
44537: POP
44538: POP
// result := s_arr [ 1 ] ;
44539: LD_ADDR_VAR 0 4
44543: PUSH
44544: LD_VAR 0 7
44548: PUSH
44549: LD_INT 1
44551: ARRAY
44552: ST_TO_ADDR
// end ; end ;
44553: LD_VAR 0 4
44557: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44558: LD_INT 0
44560: PPUSH
44561: PPUSH
// if not list then
44562: LD_VAR 0 1
44566: NOT
44567: IFFALSE 44571
// exit ;
44569: GO 44662
// i := list [ pos1 ] ;
44571: LD_ADDR_VAR 0 5
44575: PUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_VAR 0 2
44585: ARRAY
44586: ST_TO_ADDR
// if not i then
44587: LD_VAR 0 5
44591: NOT
44592: IFFALSE 44596
// exit ;
44594: GO 44662
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44596: LD_ADDR_VAR 0 1
44600: PUSH
44601: LD_VAR 0 1
44605: PPUSH
44606: LD_VAR 0 2
44610: PPUSH
44611: LD_VAR 0 1
44615: PUSH
44616: LD_VAR 0 3
44620: ARRAY
44621: PPUSH
44622: CALL_OW 1
44626: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44627: LD_ADDR_VAR 0 1
44631: PUSH
44632: LD_VAR 0 1
44636: PPUSH
44637: LD_VAR 0 3
44641: PPUSH
44642: LD_VAR 0 5
44646: PPUSH
44647: CALL_OW 1
44651: ST_TO_ADDR
// result := list ;
44652: LD_ADDR_VAR 0 4
44656: PUSH
44657: LD_VAR 0 1
44661: ST_TO_ADDR
// end ;
44662: LD_VAR 0 4
44666: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44667: LD_INT 0
44669: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44670: LD_ADDR_VAR 0 5
44674: PUSH
44675: LD_VAR 0 1
44679: PPUSH
44680: CALL_OW 250
44684: PPUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 251
44694: PPUSH
44695: LD_VAR 0 2
44699: PPUSH
44700: LD_VAR 0 3
44704: PPUSH
44705: LD_VAR 0 4
44709: PPUSH
44710: CALL 44720 0 5
44714: ST_TO_ADDR
// end ;
44715: LD_VAR 0 5
44719: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44720: LD_INT 0
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
// if not list then
44726: LD_VAR 0 3
44730: NOT
44731: IFFALSE 44735
// exit ;
44733: GO 45123
// result := [ ] ;
44735: LD_ADDR_VAR 0 6
44739: PUSH
44740: EMPTY
44741: ST_TO_ADDR
// for i in list do
44742: LD_ADDR_VAR 0 7
44746: PUSH
44747: LD_VAR 0 3
44751: PUSH
44752: FOR_IN
44753: IFFALSE 44955
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44755: LD_ADDR_VAR 0 9
44759: PUSH
44760: LD_VAR 0 7
44764: PPUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: LD_VAR 0 2
44774: PPUSH
44775: CALL_OW 297
44779: ST_TO_ADDR
// if not result then
44780: LD_VAR 0 6
44784: NOT
44785: IFFALSE 44811
// result := [ [ i , tmp ] ] else
44787: LD_ADDR_VAR 0 6
44791: PUSH
44792: LD_VAR 0 7
44796: PUSH
44797: LD_VAR 0 9
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: ST_TO_ADDR
44809: GO 44953
// begin if result [ result ] [ 2 ] < tmp then
44811: LD_VAR 0 6
44815: PUSH
44816: LD_VAR 0 6
44820: ARRAY
44821: PUSH
44822: LD_INT 2
44824: ARRAY
44825: PUSH
44826: LD_VAR 0 9
44830: LESS
44831: IFFALSE 44873
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44833: LD_ADDR_VAR 0 6
44837: PUSH
44838: LD_VAR 0 6
44842: PPUSH
44843: LD_VAR 0 6
44847: PUSH
44848: LD_INT 1
44850: PLUS
44851: PPUSH
44852: LD_VAR 0 7
44856: PUSH
44857: LD_VAR 0 9
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PPUSH
44866: CALL_OW 2
44870: ST_TO_ADDR
44871: GO 44953
// for j = 1 to result do
44873: LD_ADDR_VAR 0 8
44877: PUSH
44878: DOUBLE
44879: LD_INT 1
44881: DEC
44882: ST_TO_ADDR
44883: LD_VAR 0 6
44887: PUSH
44888: FOR_TO
44889: IFFALSE 44951
// begin if tmp < result [ j ] [ 2 ] then
44891: LD_VAR 0 9
44895: PUSH
44896: LD_VAR 0 6
44900: PUSH
44901: LD_VAR 0 8
44905: ARRAY
44906: PUSH
44907: LD_INT 2
44909: ARRAY
44910: LESS
44911: IFFALSE 44949
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44913: LD_ADDR_VAR 0 6
44917: PUSH
44918: LD_VAR 0 6
44922: PPUSH
44923: LD_VAR 0 8
44927: PPUSH
44928: LD_VAR 0 7
44932: PUSH
44933: LD_VAR 0 9
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PPUSH
44942: CALL_OW 2
44946: ST_TO_ADDR
// break ;
44947: GO 44951
// end ; end ;
44949: GO 44888
44951: POP
44952: POP
// end ; end ;
44953: GO 44752
44955: POP
44956: POP
// if result and not asc then
44957: LD_VAR 0 6
44961: PUSH
44962: LD_VAR 0 4
44966: NOT
44967: AND
44968: IFFALSE 45043
// begin tmp := result ;
44970: LD_ADDR_VAR 0 9
44974: PUSH
44975: LD_VAR 0 6
44979: ST_TO_ADDR
// for i = tmp downto 1 do
44980: LD_ADDR_VAR 0 7
44984: PUSH
44985: DOUBLE
44986: LD_VAR 0 9
44990: INC
44991: ST_TO_ADDR
44992: LD_INT 1
44994: PUSH
44995: FOR_DOWNTO
44996: IFFALSE 45041
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44998: LD_ADDR_VAR 0 6
45002: PUSH
45003: LD_VAR 0 6
45007: PPUSH
45008: LD_VAR 0 9
45012: PUSH
45013: LD_VAR 0 7
45017: MINUS
45018: PUSH
45019: LD_INT 1
45021: PLUS
45022: PPUSH
45023: LD_VAR 0 9
45027: PUSH
45028: LD_VAR 0 7
45032: ARRAY
45033: PPUSH
45034: CALL_OW 1
45038: ST_TO_ADDR
45039: GO 44995
45041: POP
45042: POP
// end ; tmp := [ ] ;
45043: LD_ADDR_VAR 0 9
45047: PUSH
45048: EMPTY
45049: ST_TO_ADDR
// if mode then
45050: LD_VAR 0 5
45054: IFFALSE 45123
// begin for i = 1 to result do
45056: LD_ADDR_VAR 0 7
45060: PUSH
45061: DOUBLE
45062: LD_INT 1
45064: DEC
45065: ST_TO_ADDR
45066: LD_VAR 0 6
45070: PUSH
45071: FOR_TO
45072: IFFALSE 45111
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45074: LD_ADDR_VAR 0 9
45078: PUSH
45079: LD_VAR 0 9
45083: PPUSH
45084: LD_VAR 0 7
45088: PPUSH
45089: LD_VAR 0 6
45093: PUSH
45094: LD_VAR 0 7
45098: ARRAY
45099: PUSH
45100: LD_INT 1
45102: ARRAY
45103: PPUSH
45104: CALL_OW 1
45108: ST_TO_ADDR
45109: GO 45071
45111: POP
45112: POP
// result := tmp ;
45113: LD_ADDR_VAR 0 6
45117: PUSH
45118: LD_VAR 0 9
45122: ST_TO_ADDR
// end ; end ;
45123: LD_VAR 0 6
45127: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45128: LD_INT 0
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45136: LD_ADDR_VAR 0 5
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// if not x or not y then
45158: LD_VAR 0 2
45162: NOT
45163: PUSH
45164: LD_VAR 0 3
45168: NOT
45169: OR
45170: IFFALSE 45174
// exit ;
45172: GO 46826
// if not range then
45174: LD_VAR 0 4
45178: NOT
45179: IFFALSE 45189
// range := 10 ;
45181: LD_ADDR_VAR 0 4
45185: PUSH
45186: LD_INT 10
45188: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45189: LD_ADDR_VAR 0 8
45193: PUSH
45194: LD_INT 81
45196: PUSH
45197: LD_VAR 0 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 92
45208: PUSH
45209: LD_VAR 0 2
45213: PUSH
45214: LD_VAR 0 3
45218: PUSH
45219: LD_VAR 0 4
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 21
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: PPUSH
45252: CALL_OW 69
45256: ST_TO_ADDR
// if not tmp then
45257: LD_VAR 0 8
45261: NOT
45262: IFFALSE 45266
// exit ;
45264: GO 46826
// for i in tmp do
45266: LD_ADDR_VAR 0 6
45270: PUSH
45271: LD_VAR 0 8
45275: PUSH
45276: FOR_IN
45277: IFFALSE 46801
// begin points := [ 0 , 0 , 0 ] ;
45279: LD_ADDR_VAR 0 9
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// bpoints := 1 ;
45298: LD_ADDR_VAR 0 10
45302: PUSH
45303: LD_INT 1
45305: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45306: LD_VAR 0 6
45310: PPUSH
45311: CALL_OW 247
45315: PUSH
45316: LD_INT 1
45318: DOUBLE
45319: EQUAL
45320: IFTRUE 45324
45322: GO 45902
45324: POP
// begin if GetClass ( i ) = 1 then
45325: LD_VAR 0 6
45329: PPUSH
45330: CALL_OW 257
45334: PUSH
45335: LD_INT 1
45337: EQUAL
45338: IFFALSE 45359
// points := [ 10 , 5 , 3 ] ;
45340: LD_ADDR_VAR 0 9
45344: PUSH
45345: LD_INT 10
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45359: LD_VAR 0 6
45363: PPUSH
45364: CALL_OW 257
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: LD_INT 4
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: IN
45383: IFFALSE 45404
// points := [ 3 , 2 , 1 ] ;
45385: LD_ADDR_VAR 0 9
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45404: LD_VAR 0 6
45408: PPUSH
45409: CALL_OW 257
45413: PUSH
45414: LD_INT 5
45416: EQUAL
45417: IFFALSE 45438
// points := [ 130 , 5 , 2 ] ;
45419: LD_ADDR_VAR 0 9
45423: PUSH
45424: LD_INT 130
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45438: LD_VAR 0 6
45442: PPUSH
45443: CALL_OW 257
45447: PUSH
45448: LD_INT 8
45450: EQUAL
45451: IFFALSE 45472
// points := [ 35 , 35 , 30 ] ;
45453: LD_ADDR_VAR 0 9
45457: PUSH
45458: LD_INT 35
45460: PUSH
45461: LD_INT 35
45463: PUSH
45464: LD_INT 30
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45472: LD_VAR 0 6
45476: PPUSH
45477: CALL_OW 257
45481: PUSH
45482: LD_INT 9
45484: EQUAL
45485: IFFALSE 45506
// points := [ 20 , 55 , 40 ] ;
45487: LD_ADDR_VAR 0 9
45491: PUSH
45492: LD_INT 20
45494: PUSH
45495: LD_INT 55
45497: PUSH
45498: LD_INT 40
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45506: LD_VAR 0 6
45510: PPUSH
45511: CALL_OW 257
45515: PUSH
45516: LD_INT 12
45518: PUSH
45519: LD_INT 16
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: IN
45526: IFFALSE 45547
// points := [ 5 , 3 , 2 ] ;
45528: LD_ADDR_VAR 0 9
45532: PUSH
45533: LD_INT 5
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45547: LD_VAR 0 6
45551: PPUSH
45552: CALL_OW 257
45556: PUSH
45557: LD_INT 17
45559: EQUAL
45560: IFFALSE 45581
// points := [ 100 , 50 , 75 ] ;
45562: LD_ADDR_VAR 0 9
45566: PUSH
45567: LD_INT 100
45569: PUSH
45570: LD_INT 50
45572: PUSH
45573: LD_INT 75
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45581: LD_VAR 0 6
45585: PPUSH
45586: CALL_OW 257
45590: PUSH
45591: LD_INT 15
45593: EQUAL
45594: IFFALSE 45615
// points := [ 10 , 5 , 3 ] ;
45596: LD_ADDR_VAR 0 9
45600: PUSH
45601: LD_INT 10
45603: PUSH
45604: LD_INT 5
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45615: LD_VAR 0 6
45619: PPUSH
45620: CALL_OW 257
45624: PUSH
45625: LD_INT 14
45627: EQUAL
45628: IFFALSE 45649
// points := [ 10 , 0 , 0 ] ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_INT 10
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45649: LD_VAR 0 6
45653: PPUSH
45654: CALL_OW 257
45658: PUSH
45659: LD_INT 11
45661: EQUAL
45662: IFFALSE 45683
// points := [ 30 , 10 , 5 ] ;
45664: LD_ADDR_VAR 0 9
45668: PUSH
45669: LD_INT 30
45671: PUSH
45672: LD_INT 10
45674: PUSH
45675: LD_INT 5
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45683: LD_VAR 0 1
45687: PPUSH
45688: LD_INT 5
45690: PPUSH
45691: CALL_OW 321
45695: PUSH
45696: LD_INT 2
45698: EQUAL
45699: IFFALSE 45716
// bpoints := bpoints * 1.8 ;
45701: LD_ADDR_VAR 0 10
45705: PUSH
45706: LD_VAR 0 10
45710: PUSH
45711: LD_REAL  1.80000000000000E+0000
45714: MUL
45715: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45716: LD_VAR 0 6
45720: PPUSH
45721: CALL_OW 257
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 4
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: IN
45744: PUSH
45745: LD_VAR 0 1
45749: PPUSH
45750: LD_INT 51
45752: PPUSH
45753: CALL_OW 321
45757: PUSH
45758: LD_INT 2
45760: EQUAL
45761: AND
45762: IFFALSE 45779
// bpoints := bpoints * 1.2 ;
45764: LD_ADDR_VAR 0 10
45768: PUSH
45769: LD_VAR 0 10
45773: PUSH
45774: LD_REAL  1.20000000000000E+0000
45777: MUL
45778: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45779: LD_VAR 0 6
45783: PPUSH
45784: CALL_OW 257
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: LD_INT 7
45794: PUSH
45795: LD_INT 9
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: IN
45803: PUSH
45804: LD_VAR 0 1
45808: PPUSH
45809: LD_INT 52
45811: PPUSH
45812: CALL_OW 321
45816: PUSH
45817: LD_INT 2
45819: EQUAL
45820: AND
45821: IFFALSE 45838
// bpoints := bpoints * 1.5 ;
45823: LD_ADDR_VAR 0 10
45827: PUSH
45828: LD_VAR 0 10
45832: PUSH
45833: LD_REAL  1.50000000000000E+0000
45836: MUL
45837: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45838: LD_VAR 0 1
45842: PPUSH
45843: LD_INT 66
45845: PPUSH
45846: CALL_OW 321
45850: PUSH
45851: LD_INT 2
45853: EQUAL
45854: IFFALSE 45871
// bpoints := bpoints * 1.1 ;
45856: LD_ADDR_VAR 0 10
45860: PUSH
45861: LD_VAR 0 10
45865: PUSH
45866: LD_REAL  1.10000000000000E+0000
45869: MUL
45870: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45871: LD_ADDR_VAR 0 10
45875: PUSH
45876: LD_VAR 0 10
45880: PUSH
45881: LD_VAR 0 6
45885: PPUSH
45886: LD_INT 1
45888: PPUSH
45889: CALL_OW 259
45893: PUSH
45894: LD_REAL  1.15000000000000E+0000
45897: MUL
45898: MUL
45899: ST_TO_ADDR
// end ; unit_vehicle :
45900: GO 46730
45902: LD_INT 2
45904: DOUBLE
45905: EQUAL
45906: IFTRUE 45910
45908: GO 46718
45910: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45911: LD_VAR 0 6
45915: PPUSH
45916: CALL_OW 264
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 42
45926: PUSH
45927: LD_INT 24
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: IN
45935: IFFALSE 45956
// points := [ 25 , 5 , 3 ] ;
45937: LD_ADDR_VAR 0 9
45941: PUSH
45942: LD_INT 25
45944: PUSH
45945: LD_INT 5
45947: PUSH
45948: LD_INT 3
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45956: LD_VAR 0 6
45960: PPUSH
45961: CALL_OW 264
45965: PUSH
45966: LD_INT 4
45968: PUSH
45969: LD_INT 43
45971: PUSH
45972: LD_INT 25
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: IN
45980: IFFALSE 46001
// points := [ 40 , 15 , 5 ] ;
45982: LD_ADDR_VAR 0 9
45986: PUSH
45987: LD_INT 40
45989: PUSH
45990: LD_INT 15
45992: PUSH
45993: LD_INT 5
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46001: LD_VAR 0 6
46005: PPUSH
46006: CALL_OW 264
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: LD_INT 23
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: IN
46021: IFFALSE 46042
// points := [ 7 , 25 , 8 ] ;
46023: LD_ADDR_VAR 0 9
46027: PUSH
46028: LD_INT 7
46030: PUSH
46031: LD_INT 25
46033: PUSH
46034: LD_INT 8
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46042: LD_VAR 0 6
46046: PPUSH
46047: CALL_OW 264
46051: PUSH
46052: LD_INT 5
46054: PUSH
46055: LD_INT 27
46057: PUSH
46058: LD_INT 44
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: IN
46066: IFFALSE 46087
// points := [ 14 , 50 , 16 ] ;
46068: LD_ADDR_VAR 0 9
46072: PUSH
46073: LD_INT 14
46075: PUSH
46076: LD_INT 50
46078: PUSH
46079: LD_INT 16
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46087: LD_VAR 0 6
46091: PPUSH
46092: CALL_OW 264
46096: PUSH
46097: LD_INT 6
46099: PUSH
46100: LD_INT 46
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: IN
46107: IFFALSE 46128
// points := [ 32 , 120 , 70 ] ;
46109: LD_ADDR_VAR 0 9
46113: PUSH
46114: LD_INT 32
46116: PUSH
46117: LD_INT 120
46119: PUSH
46120: LD_INT 70
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46128: LD_VAR 0 6
46132: PPUSH
46133: CALL_OW 264
46137: PUSH
46138: LD_INT 7
46140: PUSH
46141: LD_INT 28
46143: PUSH
46144: LD_INT 45
46146: PUSH
46147: LD_EXP 54
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: IN
46158: IFFALSE 46179
// points := [ 35 , 20 , 45 ] ;
46160: LD_ADDR_VAR 0 9
46164: PUSH
46165: LD_INT 35
46167: PUSH
46168: LD_INT 20
46170: PUSH
46171: LD_INT 45
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46179: LD_VAR 0 6
46183: PPUSH
46184: CALL_OW 264
46188: PUSH
46189: LD_INT 47
46191: PUSH
46192: EMPTY
46193: LIST
46194: IN
46195: IFFALSE 46216
// points := [ 67 , 45 , 75 ] ;
46197: LD_ADDR_VAR 0 9
46201: PUSH
46202: LD_INT 67
46204: PUSH
46205: LD_INT 45
46207: PUSH
46208: LD_INT 75
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46216: LD_VAR 0 6
46220: PPUSH
46221: CALL_OW 264
46225: PUSH
46226: LD_INT 26
46228: PUSH
46229: EMPTY
46230: LIST
46231: IN
46232: IFFALSE 46253
// points := [ 120 , 30 , 80 ] ;
46234: LD_ADDR_VAR 0 9
46238: PUSH
46239: LD_INT 120
46241: PUSH
46242: LD_INT 30
46244: PUSH
46245: LD_INT 80
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46253: LD_VAR 0 6
46257: PPUSH
46258: CALL_OW 264
46262: PUSH
46263: LD_INT 22
46265: PUSH
46266: EMPTY
46267: LIST
46268: IN
46269: IFFALSE 46290
// points := [ 40 , 1 , 1 ] ;
46271: LD_ADDR_VAR 0 9
46275: PUSH
46276: LD_INT 40
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46290: LD_VAR 0 6
46294: PPUSH
46295: CALL_OW 264
46299: PUSH
46300: LD_INT 29
46302: PUSH
46303: EMPTY
46304: LIST
46305: IN
46306: IFFALSE 46327
// points := [ 70 , 200 , 400 ] ;
46308: LD_ADDR_VAR 0 9
46312: PUSH
46313: LD_INT 70
46315: PUSH
46316: LD_INT 200
46318: PUSH
46319: LD_INT 400
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46327: LD_VAR 0 6
46331: PPUSH
46332: CALL_OW 264
46336: PUSH
46337: LD_INT 14
46339: PUSH
46340: LD_INT 53
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: IN
46347: IFFALSE 46368
// points := [ 40 , 10 , 20 ] ;
46349: LD_ADDR_VAR 0 9
46353: PUSH
46354: LD_INT 40
46356: PUSH
46357: LD_INT 10
46359: PUSH
46360: LD_INT 20
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46368: LD_VAR 0 6
46372: PPUSH
46373: CALL_OW 264
46377: PUSH
46378: LD_INT 9
46380: PUSH
46381: EMPTY
46382: LIST
46383: IN
46384: IFFALSE 46405
// points := [ 5 , 70 , 20 ] ;
46386: LD_ADDR_VAR 0 9
46390: PUSH
46391: LD_INT 5
46393: PUSH
46394: LD_INT 70
46396: PUSH
46397: LD_INT 20
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46405: LD_VAR 0 6
46409: PPUSH
46410: CALL_OW 264
46414: PUSH
46415: LD_INT 10
46417: PUSH
46418: EMPTY
46419: LIST
46420: IN
46421: IFFALSE 46442
// points := [ 35 , 110 , 70 ] ;
46423: LD_ADDR_VAR 0 9
46427: PUSH
46428: LD_INT 35
46430: PUSH
46431: LD_INT 110
46433: PUSH
46434: LD_INT 70
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46442: LD_VAR 0 6
46446: PPUSH
46447: CALL_OW 265
46451: PUSH
46452: LD_INT 25
46454: EQUAL
46455: IFFALSE 46476
// points := [ 80 , 65 , 100 ] ;
46457: LD_ADDR_VAR 0 9
46461: PUSH
46462: LD_INT 80
46464: PUSH
46465: LD_INT 65
46467: PUSH
46468: LD_INT 100
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46476: LD_VAR 0 6
46480: PPUSH
46481: CALL_OW 263
46485: PUSH
46486: LD_INT 1
46488: EQUAL
46489: IFFALSE 46524
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46491: LD_ADDR_VAR 0 10
46495: PUSH
46496: LD_VAR 0 10
46500: PUSH
46501: LD_VAR 0 6
46505: PPUSH
46506: CALL_OW 311
46510: PPUSH
46511: LD_INT 3
46513: PPUSH
46514: CALL_OW 259
46518: PUSH
46519: LD_INT 4
46521: MUL
46522: MUL
46523: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46524: LD_VAR 0 6
46528: PPUSH
46529: CALL_OW 263
46533: PUSH
46534: LD_INT 2
46536: EQUAL
46537: IFFALSE 46588
// begin j := IsControledBy ( i ) ;
46539: LD_ADDR_VAR 0 7
46543: PUSH
46544: LD_VAR 0 6
46548: PPUSH
46549: CALL_OW 312
46553: ST_TO_ADDR
// if j then
46554: LD_VAR 0 7
46558: IFFALSE 46588
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46560: LD_ADDR_VAR 0 10
46564: PUSH
46565: LD_VAR 0 10
46569: PUSH
46570: LD_VAR 0 7
46574: PPUSH
46575: LD_INT 3
46577: PPUSH
46578: CALL_OW 259
46582: PUSH
46583: LD_INT 3
46585: MUL
46586: MUL
46587: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46588: LD_VAR 0 6
46592: PPUSH
46593: CALL_OW 264
46597: PUSH
46598: LD_INT 5
46600: PUSH
46601: LD_INT 6
46603: PUSH
46604: LD_INT 46
46606: PUSH
46607: LD_INT 44
46609: PUSH
46610: LD_INT 47
46612: PUSH
46613: LD_INT 45
46615: PUSH
46616: LD_INT 28
46618: PUSH
46619: LD_INT 7
46621: PUSH
46622: LD_INT 27
46624: PUSH
46625: LD_INT 29
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: IN
46640: PUSH
46641: LD_VAR 0 1
46645: PPUSH
46646: LD_INT 52
46648: PPUSH
46649: CALL_OW 321
46653: PUSH
46654: LD_INT 2
46656: EQUAL
46657: AND
46658: IFFALSE 46675
// bpoints := bpoints * 1.2 ;
46660: LD_ADDR_VAR 0 10
46664: PUSH
46665: LD_VAR 0 10
46669: PUSH
46670: LD_REAL  1.20000000000000E+0000
46673: MUL
46674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46675: LD_VAR 0 6
46679: PPUSH
46680: CALL_OW 264
46684: PUSH
46685: LD_INT 6
46687: PUSH
46688: LD_INT 46
46690: PUSH
46691: LD_INT 47
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: IN
46699: IFFALSE 46716
// bpoints := bpoints * 1.2 ;
46701: LD_ADDR_VAR 0 10
46705: PUSH
46706: LD_VAR 0 10
46710: PUSH
46711: LD_REAL  1.20000000000000E+0000
46714: MUL
46715: ST_TO_ADDR
// end ; unit_building :
46716: GO 46730
46718: LD_INT 3
46720: DOUBLE
46721: EQUAL
46722: IFTRUE 46726
46724: GO 46729
46726: POP
// ; end ;
46727: GO 46730
46729: POP
// for j = 1 to 3 do
46730: LD_ADDR_VAR 0 7
46734: PUSH
46735: DOUBLE
46736: LD_INT 1
46738: DEC
46739: ST_TO_ADDR
46740: LD_INT 3
46742: PUSH
46743: FOR_TO
46744: IFFALSE 46797
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46746: LD_ADDR_VAR 0 5
46750: PUSH
46751: LD_VAR 0 5
46755: PPUSH
46756: LD_VAR 0 7
46760: PPUSH
46761: LD_VAR 0 5
46765: PUSH
46766: LD_VAR 0 7
46770: ARRAY
46771: PUSH
46772: LD_VAR 0 9
46776: PUSH
46777: LD_VAR 0 7
46781: ARRAY
46782: PUSH
46783: LD_VAR 0 10
46787: MUL
46788: PLUS
46789: PPUSH
46790: CALL_OW 1
46794: ST_TO_ADDR
46795: GO 46743
46797: POP
46798: POP
// end ;
46799: GO 45276
46801: POP
46802: POP
// result := Replace ( result , 4 , tmp ) ;
46803: LD_ADDR_VAR 0 5
46807: PUSH
46808: LD_VAR 0 5
46812: PPUSH
46813: LD_INT 4
46815: PPUSH
46816: LD_VAR 0 8
46820: PPUSH
46821: CALL_OW 1
46825: ST_TO_ADDR
// end ;
46826: LD_VAR 0 5
46830: RET
// export function DangerAtRange ( unit , range ) ; begin
46831: LD_INT 0
46833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46834: LD_ADDR_VAR 0 3
46838: PUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 255
46848: PPUSH
46849: LD_VAR 0 1
46853: PPUSH
46854: CALL_OW 250
46858: PPUSH
46859: LD_VAR 0 1
46863: PPUSH
46864: CALL_OW 251
46868: PPUSH
46869: LD_VAR 0 2
46873: PPUSH
46874: CALL 45128 0 4
46878: ST_TO_ADDR
// end ;
46879: LD_VAR 0 3
46883: RET
// export function DangerInArea ( side , area ) ; begin
46884: LD_INT 0
46886: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46887: LD_ADDR_VAR 0 3
46891: PUSH
46892: LD_VAR 0 2
46896: PPUSH
46897: LD_INT 81
46899: PUSH
46900: LD_VAR 0 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PPUSH
46909: CALL_OW 70
46913: ST_TO_ADDR
// end ;
46914: LD_VAR 0 3
46918: RET
// export function IsExtension ( b ) ; begin
46919: LD_INT 0
46921: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46922: LD_ADDR_VAR 0 2
46926: PUSH
46927: LD_VAR 0 1
46931: PUSH
46932: LD_INT 23
46934: PUSH
46935: LD_INT 20
46937: PUSH
46938: LD_INT 22
46940: PUSH
46941: LD_INT 17
46943: PUSH
46944: LD_INT 24
46946: PUSH
46947: LD_INT 21
46949: PUSH
46950: LD_INT 19
46952: PUSH
46953: LD_INT 16
46955: PUSH
46956: LD_INT 25
46958: PUSH
46959: LD_INT 18
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: IN
46974: ST_TO_ADDR
// end ;
46975: LD_VAR 0 2
46979: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46980: LD_INT 0
46982: PPUSH
46983: PPUSH
46984: PPUSH
// result := [ ] ;
46985: LD_ADDR_VAR 0 4
46989: PUSH
46990: EMPTY
46991: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46992: LD_ADDR_VAR 0 5
46996: PUSH
46997: LD_VAR 0 2
47001: PPUSH
47002: LD_INT 21
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PPUSH
47012: CALL_OW 70
47016: ST_TO_ADDR
// if not tmp then
47017: LD_VAR 0 5
47021: NOT
47022: IFFALSE 47026
// exit ;
47024: GO 47090
// if checkLink then
47026: LD_VAR 0 3
47030: IFFALSE 47080
// begin for i in tmp do
47032: LD_ADDR_VAR 0 6
47036: PUSH
47037: LD_VAR 0 5
47041: PUSH
47042: FOR_IN
47043: IFFALSE 47078
// if GetBase ( i ) <> base then
47045: LD_VAR 0 6
47049: PPUSH
47050: CALL_OW 274
47054: PUSH
47055: LD_VAR 0 1
47059: NONEQUAL
47060: IFFALSE 47076
// ComLinkToBase ( base , i ) ;
47062: LD_VAR 0 1
47066: PPUSH
47067: LD_VAR 0 6
47071: PPUSH
47072: CALL_OW 169
47076: GO 47042
47078: POP
47079: POP
// end ; result := tmp ;
47080: LD_ADDR_VAR 0 4
47084: PUSH
47085: LD_VAR 0 5
47089: ST_TO_ADDR
// end ;
47090: LD_VAR 0 4
47094: RET
// export function ComComplete ( units , b ) ; var i ; begin
47095: LD_INT 0
47097: PPUSH
47098: PPUSH
// if not units then
47099: LD_VAR 0 1
47103: NOT
47104: IFFALSE 47108
// exit ;
47106: GO 47198
// for i in units do
47108: LD_ADDR_VAR 0 4
47112: PUSH
47113: LD_VAR 0 1
47117: PUSH
47118: FOR_IN
47119: IFFALSE 47196
// if BuildingStatus ( b ) = bs_build then
47121: LD_VAR 0 2
47125: PPUSH
47126: CALL_OW 461
47130: PUSH
47131: LD_INT 1
47133: EQUAL
47134: IFFALSE 47194
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47136: LD_VAR 0 4
47140: PPUSH
47141: LD_STRING h
47143: PUSH
47144: LD_VAR 0 2
47148: PPUSH
47149: CALL_OW 250
47153: PUSH
47154: LD_VAR 0 2
47158: PPUSH
47159: CALL_OW 251
47163: PUSH
47164: LD_VAR 0 2
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: PUSH
47187: EMPTY
47188: LIST
47189: PPUSH
47190: CALL_OW 446
47194: GO 47118
47196: POP
47197: POP
// end ;
47198: LD_VAR 0 3
47202: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47203: LD_INT 0
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
47209: PPUSH
47210: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47211: LD_VAR 0 1
47215: NOT
47216: PUSH
47217: LD_VAR 0 1
47221: PPUSH
47222: CALL_OW 263
47226: PUSH
47227: LD_INT 2
47229: NONEQUAL
47230: OR
47231: IFFALSE 47235
// exit ;
47233: GO 47551
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47235: LD_ADDR_VAR 0 6
47239: PUSH
47240: LD_INT 22
47242: PUSH
47243: LD_VAR 0 1
47247: PPUSH
47248: CALL_OW 255
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 30
47262: PUSH
47263: LD_INT 36
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 34
47272: PUSH
47273: LD_INT 31
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PPUSH
47289: CALL_OW 69
47293: ST_TO_ADDR
// if not tmp then
47294: LD_VAR 0 6
47298: NOT
47299: IFFALSE 47303
// exit ;
47301: GO 47551
// result := [ ] ;
47303: LD_ADDR_VAR 0 2
47307: PUSH
47308: EMPTY
47309: ST_TO_ADDR
// for i in tmp do
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: LD_VAR 0 6
47319: PUSH
47320: FOR_IN
47321: IFFALSE 47392
// begin t := UnitsInside ( i ) ;
47323: LD_ADDR_VAR 0 4
47327: PUSH
47328: LD_VAR 0 3
47332: PPUSH
47333: CALL_OW 313
47337: ST_TO_ADDR
// if t then
47338: LD_VAR 0 4
47342: IFFALSE 47390
// for j in t do
47344: LD_ADDR_VAR 0 7
47348: PUSH
47349: LD_VAR 0 4
47353: PUSH
47354: FOR_IN
47355: IFFALSE 47388
// result := Replace ( result , result + 1 , j ) ;
47357: LD_ADDR_VAR 0 2
47361: PUSH
47362: LD_VAR 0 2
47366: PPUSH
47367: LD_VAR 0 2
47371: PUSH
47372: LD_INT 1
47374: PLUS
47375: PPUSH
47376: LD_VAR 0 7
47380: PPUSH
47381: CALL_OW 1
47385: ST_TO_ADDR
47386: GO 47354
47388: POP
47389: POP
// end ;
47390: GO 47320
47392: POP
47393: POP
// if not result then
47394: LD_VAR 0 2
47398: NOT
47399: IFFALSE 47403
// exit ;
47401: GO 47551
// mech := result [ 1 ] ;
47403: LD_ADDR_VAR 0 5
47407: PUSH
47408: LD_VAR 0 2
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: ST_TO_ADDR
// if result > 1 then
47417: LD_VAR 0 2
47421: PUSH
47422: LD_INT 1
47424: GREATER
47425: IFFALSE 47537
// begin for i = 2 to result do
47427: LD_ADDR_VAR 0 3
47431: PUSH
47432: DOUBLE
47433: LD_INT 2
47435: DEC
47436: ST_TO_ADDR
47437: LD_VAR 0 2
47441: PUSH
47442: FOR_TO
47443: IFFALSE 47535
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47445: LD_ADDR_VAR 0 4
47449: PUSH
47450: LD_VAR 0 2
47454: PUSH
47455: LD_VAR 0 3
47459: ARRAY
47460: PPUSH
47461: LD_INT 3
47463: PPUSH
47464: CALL_OW 259
47468: PUSH
47469: LD_VAR 0 2
47473: PUSH
47474: LD_VAR 0 3
47478: ARRAY
47479: PPUSH
47480: CALL_OW 432
47484: MINUS
47485: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47486: LD_VAR 0 4
47490: PUSH
47491: LD_VAR 0 5
47495: PPUSH
47496: LD_INT 3
47498: PPUSH
47499: CALL_OW 259
47503: PUSH
47504: LD_VAR 0 5
47508: PPUSH
47509: CALL_OW 432
47513: MINUS
47514: GREATEREQUAL
47515: IFFALSE 47533
// mech := result [ i ] ;
47517: LD_ADDR_VAR 0 5
47521: PUSH
47522: LD_VAR 0 2
47526: PUSH
47527: LD_VAR 0 3
47531: ARRAY
47532: ST_TO_ADDR
// end ;
47533: GO 47442
47535: POP
47536: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47537: LD_VAR 0 1
47541: PPUSH
47542: LD_VAR 0 5
47546: PPUSH
47547: CALL_OW 135
// end ;
47551: LD_VAR 0 2
47555: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47556: LD_INT 0
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
// result := [ ] ;
47571: LD_ADDR_VAR 0 7
47575: PUSH
47576: EMPTY
47577: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47578: LD_VAR 0 1
47582: PPUSH
47583: CALL_OW 266
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: IN
47598: NOT
47599: IFFALSE 47603
// exit ;
47601: GO 49237
// if name then
47603: LD_VAR 0 3
47607: IFFALSE 47623
// SetBName ( base_dep , name ) ;
47609: LD_VAR 0 1
47613: PPUSH
47614: LD_VAR 0 3
47618: PPUSH
47619: CALL_OW 500
// base := GetBase ( base_dep ) ;
47623: LD_ADDR_VAR 0 15
47627: PUSH
47628: LD_VAR 0 1
47632: PPUSH
47633: CALL_OW 274
47637: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47638: LD_ADDR_VAR 0 16
47642: PUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: CALL_OW 255
47652: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47653: LD_ADDR_VAR 0 17
47657: PUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: CALL_OW 248
47667: ST_TO_ADDR
// if sources then
47668: LD_VAR 0 5
47672: IFFALSE 47719
// for i = 1 to 3 do
47674: LD_ADDR_VAR 0 8
47678: PUSH
47679: DOUBLE
47680: LD_INT 1
47682: DEC
47683: ST_TO_ADDR
47684: LD_INT 3
47686: PUSH
47687: FOR_TO
47688: IFFALSE 47717
// AddResourceType ( base , i , sources [ i ] ) ;
47690: LD_VAR 0 15
47694: PPUSH
47695: LD_VAR 0 8
47699: PPUSH
47700: LD_VAR 0 5
47704: PUSH
47705: LD_VAR 0 8
47709: ARRAY
47710: PPUSH
47711: CALL_OW 276
47715: GO 47687
47717: POP
47718: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47719: LD_ADDR_VAR 0 18
47723: PUSH
47724: LD_VAR 0 15
47728: PPUSH
47729: LD_VAR 0 2
47733: PPUSH
47734: LD_INT 1
47736: PPUSH
47737: CALL 46980 0 3
47741: ST_TO_ADDR
// InitHc ;
47742: CALL_OW 19
// InitUc ;
47746: CALL_OW 18
// uc_side := side ;
47750: LD_ADDR_OWVAR 20
47754: PUSH
47755: LD_VAR 0 16
47759: ST_TO_ADDR
// uc_nation := nation ;
47760: LD_ADDR_OWVAR 21
47764: PUSH
47765: LD_VAR 0 17
47769: ST_TO_ADDR
// if buildings then
47770: LD_VAR 0 18
47774: IFFALSE 49096
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47776: LD_ADDR_VAR 0 19
47780: PUSH
47781: LD_VAR 0 18
47785: PPUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 30
47791: PUSH
47792: LD_INT 29
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 30
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: PPUSH
47814: CALL_OW 72
47818: ST_TO_ADDR
// if tmp then
47819: LD_VAR 0 19
47823: IFFALSE 47871
// for i in tmp do
47825: LD_ADDR_VAR 0 8
47829: PUSH
47830: LD_VAR 0 19
47834: PUSH
47835: FOR_IN
47836: IFFALSE 47869
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47838: LD_VAR 0 8
47842: PPUSH
47843: CALL_OW 250
47847: PPUSH
47848: LD_VAR 0 8
47852: PPUSH
47853: CALL_OW 251
47857: PPUSH
47858: LD_VAR 0 16
47862: PPUSH
47863: CALL_OW 441
47867: GO 47835
47869: POP
47870: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47871: LD_VAR 0 18
47875: PPUSH
47876: LD_INT 2
47878: PUSH
47879: LD_INT 30
47881: PUSH
47882: LD_INT 32
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 30
47891: PUSH
47892: LD_INT 33
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: PPUSH
47904: CALL_OW 72
47908: IFFALSE 47996
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47910: LD_ADDR_VAR 0 8
47914: PUSH
47915: LD_VAR 0 18
47919: PPUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 32
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 30
47935: PUSH
47936: LD_INT 33
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: PPUSH
47948: CALL_OW 72
47952: PUSH
47953: FOR_IN
47954: IFFALSE 47994
// begin if not GetBWeapon ( i ) then
47956: LD_VAR 0 8
47960: PPUSH
47961: CALL_OW 269
47965: NOT
47966: IFFALSE 47992
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47968: LD_VAR 0 8
47972: PPUSH
47973: LD_VAR 0 8
47977: PPUSH
47978: LD_VAR 0 2
47982: PPUSH
47983: CALL 49242 0 2
47987: PPUSH
47988: CALL_OW 431
// end ;
47992: GO 47953
47994: POP
47995: POP
// end ; for i = 1 to personel do
47996: LD_ADDR_VAR 0 8
48000: PUSH
48001: DOUBLE
48002: LD_INT 1
48004: DEC
48005: ST_TO_ADDR
48006: LD_VAR 0 6
48010: PUSH
48011: FOR_TO
48012: IFFALSE 49076
// begin if i > 4 then
48014: LD_VAR 0 8
48018: PUSH
48019: LD_INT 4
48021: GREATER
48022: IFFALSE 48026
// break ;
48024: GO 49076
// case i of 1 :
48026: LD_VAR 0 8
48030: PUSH
48031: LD_INT 1
48033: DOUBLE
48034: EQUAL
48035: IFTRUE 48039
48037: GO 48119
48039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48040: LD_ADDR_VAR 0 12
48044: PUSH
48045: LD_VAR 0 18
48049: PPUSH
48050: LD_INT 22
48052: PUSH
48053: LD_VAR 0 16
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 58
48064: PUSH
48065: EMPTY
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 30
48073: PUSH
48074: LD_INT 32
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 30
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 30
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: PPUSH
48112: CALL_OW 72
48116: ST_TO_ADDR
48117: GO 48341
48119: LD_INT 2
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48127
48125: GO 48189
48127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48128: LD_ADDR_VAR 0 12
48132: PUSH
48133: LD_VAR 0 18
48137: PPUSH
48138: LD_INT 22
48140: PUSH
48141: LD_VAR 0 16
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 30
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 30
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: ST_TO_ADDR
48187: GO 48341
48189: LD_INT 3
48191: DOUBLE
48192: EQUAL
48193: IFTRUE 48197
48195: GO 48259
48197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48198: LD_ADDR_VAR 0 12
48202: PUSH
48203: LD_VAR 0 18
48207: PPUSH
48208: LD_INT 22
48210: PUSH
48211: LD_VAR 0 16
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 30
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 30
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PPUSH
48252: CALL_OW 72
48256: ST_TO_ADDR
48257: GO 48341
48259: LD_INT 4
48261: DOUBLE
48262: EQUAL
48263: IFTRUE 48267
48265: GO 48340
48267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48268: LD_ADDR_VAR 0 12
48272: PUSH
48273: LD_VAR 0 18
48277: PPUSH
48278: LD_INT 22
48280: PUSH
48281: LD_VAR 0 16
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 30
48305: PUSH
48306: LD_INT 7
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 30
48315: PUSH
48316: LD_INT 8
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PPUSH
48333: CALL_OW 72
48337: ST_TO_ADDR
48338: GO 48341
48340: POP
// if i = 1 then
48341: LD_VAR 0 8
48345: PUSH
48346: LD_INT 1
48348: EQUAL
48349: IFFALSE 48460
// begin tmp := [ ] ;
48351: LD_ADDR_VAR 0 19
48355: PUSH
48356: EMPTY
48357: ST_TO_ADDR
// for j in f do
48358: LD_ADDR_VAR 0 9
48362: PUSH
48363: LD_VAR 0 12
48367: PUSH
48368: FOR_IN
48369: IFFALSE 48442
// if GetBType ( j ) = b_bunker then
48371: LD_VAR 0 9
48375: PPUSH
48376: CALL_OW 266
48380: PUSH
48381: LD_INT 32
48383: EQUAL
48384: IFFALSE 48411
// tmp := Insert ( tmp , 1 , j ) else
48386: LD_ADDR_VAR 0 19
48390: PUSH
48391: LD_VAR 0 19
48395: PPUSH
48396: LD_INT 1
48398: PPUSH
48399: LD_VAR 0 9
48403: PPUSH
48404: CALL_OW 2
48408: ST_TO_ADDR
48409: GO 48440
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48411: LD_ADDR_VAR 0 19
48415: PUSH
48416: LD_VAR 0 19
48420: PPUSH
48421: LD_VAR 0 19
48425: PUSH
48426: LD_INT 1
48428: PLUS
48429: PPUSH
48430: LD_VAR 0 9
48434: PPUSH
48435: CALL_OW 2
48439: ST_TO_ADDR
48440: GO 48368
48442: POP
48443: POP
// if tmp then
48444: LD_VAR 0 19
48448: IFFALSE 48460
// f := tmp ;
48450: LD_ADDR_VAR 0 12
48454: PUSH
48455: LD_VAR 0 19
48459: ST_TO_ADDR
// end ; x := personel [ i ] ;
48460: LD_ADDR_VAR 0 13
48464: PUSH
48465: LD_VAR 0 6
48469: PUSH
48470: LD_VAR 0 8
48474: ARRAY
48475: ST_TO_ADDR
// if x = - 1 then
48476: LD_VAR 0 13
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: EQUAL
48485: IFFALSE 48694
// begin for j in f do
48487: LD_ADDR_VAR 0 9
48491: PUSH
48492: LD_VAR 0 12
48496: PUSH
48497: FOR_IN
48498: IFFALSE 48690
// repeat InitHc ;
48500: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48504: LD_VAR 0 9
48508: PPUSH
48509: CALL_OW 266
48513: PUSH
48514: LD_INT 5
48516: EQUAL
48517: IFFALSE 48587
// begin if UnitsInside ( j ) < 3 then
48519: LD_VAR 0 9
48523: PPUSH
48524: CALL_OW 313
48528: PUSH
48529: LD_INT 3
48531: LESS
48532: IFFALSE 48568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48534: LD_INT 0
48536: PPUSH
48537: LD_INT 5
48539: PUSH
48540: LD_INT 8
48542: PUSH
48543: LD_INT 9
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: LD_VAR 0 17
48555: ARRAY
48556: PPUSH
48557: LD_VAR 0 4
48561: PPUSH
48562: CALL_OW 380
48566: GO 48585
// PrepareHuman ( false , i , skill ) ;
48568: LD_INT 0
48570: PPUSH
48571: LD_VAR 0 8
48575: PPUSH
48576: LD_VAR 0 4
48580: PPUSH
48581: CALL_OW 380
// end else
48585: GO 48604
// PrepareHuman ( false , i , skill ) ;
48587: LD_INT 0
48589: PPUSH
48590: LD_VAR 0 8
48594: PPUSH
48595: LD_VAR 0 4
48599: PPUSH
48600: CALL_OW 380
// un := CreateHuman ;
48604: LD_ADDR_VAR 0 14
48608: PUSH
48609: CALL_OW 44
48613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48614: LD_ADDR_VAR 0 7
48618: PUSH
48619: LD_VAR 0 7
48623: PPUSH
48624: LD_INT 1
48626: PPUSH
48627: LD_VAR 0 14
48631: PPUSH
48632: CALL_OW 2
48636: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48637: LD_VAR 0 14
48641: PPUSH
48642: LD_VAR 0 9
48646: PPUSH
48647: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48651: LD_VAR 0 9
48655: PPUSH
48656: CALL_OW 313
48660: PUSH
48661: LD_INT 6
48663: EQUAL
48664: PUSH
48665: LD_VAR 0 9
48669: PPUSH
48670: CALL_OW 266
48674: PUSH
48675: LD_INT 32
48677: PUSH
48678: LD_INT 31
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: IN
48685: OR
48686: IFFALSE 48500
48688: GO 48497
48690: POP
48691: POP
// end else
48692: GO 49074
// for j = 1 to x do
48694: LD_ADDR_VAR 0 9
48698: PUSH
48699: DOUBLE
48700: LD_INT 1
48702: DEC
48703: ST_TO_ADDR
48704: LD_VAR 0 13
48708: PUSH
48709: FOR_TO
48710: IFFALSE 49072
// begin InitHc ;
48712: CALL_OW 19
// if not f then
48716: LD_VAR 0 12
48720: NOT
48721: IFFALSE 48810
// begin PrepareHuman ( false , i , skill ) ;
48723: LD_INT 0
48725: PPUSH
48726: LD_VAR 0 8
48730: PPUSH
48731: LD_VAR 0 4
48735: PPUSH
48736: CALL_OW 380
// un := CreateHuman ;
48740: LD_ADDR_VAR 0 14
48744: PUSH
48745: CALL_OW 44
48749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48750: LD_ADDR_VAR 0 7
48754: PUSH
48755: LD_VAR 0 7
48759: PPUSH
48760: LD_INT 1
48762: PPUSH
48763: LD_VAR 0 14
48767: PPUSH
48768: CALL_OW 2
48772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48773: LD_VAR 0 14
48777: PPUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 250
48787: PPUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 251
48797: PPUSH
48798: LD_INT 10
48800: PPUSH
48801: LD_INT 0
48803: PPUSH
48804: CALL_OW 50
// continue ;
48808: GO 48709
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48810: LD_VAR 0 12
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 313
48823: PUSH
48824: LD_VAR 0 12
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: PPUSH
48833: CALL_OW 266
48837: PUSH
48838: LD_INT 32
48840: PUSH
48841: LD_INT 31
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: IN
48848: AND
48849: PUSH
48850: LD_VAR 0 12
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: PPUSH
48859: CALL_OW 313
48863: PUSH
48864: LD_INT 6
48866: EQUAL
48867: OR
48868: IFFALSE 48888
// f := Delete ( f , 1 ) ;
48870: LD_ADDR_VAR 0 12
48874: PUSH
48875: LD_VAR 0 12
48879: PPUSH
48880: LD_INT 1
48882: PPUSH
48883: CALL_OW 3
48887: ST_TO_ADDR
// if not f then
48888: LD_VAR 0 12
48892: NOT
48893: IFFALSE 48911
// begin x := x + 2 ;
48895: LD_ADDR_VAR 0 13
48899: PUSH
48900: LD_VAR 0 13
48904: PUSH
48905: LD_INT 2
48907: PLUS
48908: ST_TO_ADDR
// continue ;
48909: GO 48709
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48911: LD_VAR 0 12
48915: PUSH
48916: LD_INT 1
48918: ARRAY
48919: PPUSH
48920: CALL_OW 266
48924: PUSH
48925: LD_INT 5
48927: EQUAL
48928: IFFALSE 49002
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48930: LD_VAR 0 12
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PPUSH
48939: CALL_OW 313
48943: PUSH
48944: LD_INT 3
48946: LESS
48947: IFFALSE 48983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48949: LD_INT 0
48951: PPUSH
48952: LD_INT 5
48954: PUSH
48955: LD_INT 8
48957: PUSH
48958: LD_INT 9
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: PUSH
48966: LD_VAR 0 17
48970: ARRAY
48971: PPUSH
48972: LD_VAR 0 4
48976: PPUSH
48977: CALL_OW 380
48981: GO 49000
// PrepareHuman ( false , i , skill ) ;
48983: LD_INT 0
48985: PPUSH
48986: LD_VAR 0 8
48990: PPUSH
48991: LD_VAR 0 4
48995: PPUSH
48996: CALL_OW 380
// end else
49000: GO 49019
// PrepareHuman ( false , i , skill ) ;
49002: LD_INT 0
49004: PPUSH
49005: LD_VAR 0 8
49009: PPUSH
49010: LD_VAR 0 4
49014: PPUSH
49015: CALL_OW 380
// un := CreateHuman ;
49019: LD_ADDR_VAR 0 14
49023: PUSH
49024: CALL_OW 44
49028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49029: LD_ADDR_VAR 0 7
49033: PUSH
49034: LD_VAR 0 7
49038: PPUSH
49039: LD_INT 1
49041: PPUSH
49042: LD_VAR 0 14
49046: PPUSH
49047: CALL_OW 2
49051: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49052: LD_VAR 0 14
49056: PPUSH
49057: LD_VAR 0 12
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: CALL_OW 52
// end ;
49070: GO 48709
49072: POP
49073: POP
// end ;
49074: GO 48011
49076: POP
49077: POP
// result := result ^ buildings ;
49078: LD_ADDR_VAR 0 7
49082: PUSH
49083: LD_VAR 0 7
49087: PUSH
49088: LD_VAR 0 18
49092: ADD
49093: ST_TO_ADDR
// end else
49094: GO 49237
// begin for i = 1 to personel do
49096: LD_ADDR_VAR 0 8
49100: PUSH
49101: DOUBLE
49102: LD_INT 1
49104: DEC
49105: ST_TO_ADDR
49106: LD_VAR 0 6
49110: PUSH
49111: FOR_TO
49112: IFFALSE 49235
// begin if i > 4 then
49114: LD_VAR 0 8
49118: PUSH
49119: LD_INT 4
49121: GREATER
49122: IFFALSE 49126
// break ;
49124: GO 49235
// x := personel [ i ] ;
49126: LD_ADDR_VAR 0 13
49130: PUSH
49131: LD_VAR 0 6
49135: PUSH
49136: LD_VAR 0 8
49140: ARRAY
49141: ST_TO_ADDR
// if x = - 1 then
49142: LD_VAR 0 13
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: EQUAL
49151: IFFALSE 49155
// continue ;
49153: GO 49111
// PrepareHuman ( false , i , skill ) ;
49155: LD_INT 0
49157: PPUSH
49158: LD_VAR 0 8
49162: PPUSH
49163: LD_VAR 0 4
49167: PPUSH
49168: CALL_OW 380
// un := CreateHuman ;
49172: LD_ADDR_VAR 0 14
49176: PUSH
49177: CALL_OW 44
49181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49182: LD_VAR 0 14
49186: PPUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 250
49196: PPUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 251
49206: PPUSH
49207: LD_INT 10
49209: PPUSH
49210: LD_INT 0
49212: PPUSH
49213: CALL_OW 50
// result := result ^ un ;
49217: LD_ADDR_VAR 0 7
49221: PUSH
49222: LD_VAR 0 7
49226: PUSH
49227: LD_VAR 0 14
49231: ADD
49232: ST_TO_ADDR
// end ;
49233: GO 49111
49235: POP
49236: POP
// end ; end ;
49237: LD_VAR 0 7
49241: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49242: LD_INT 0
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
// result := false ;
49260: LD_ADDR_VAR 0 3
49264: PUSH
49265: LD_INT 0
49267: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49268: LD_VAR 0 1
49272: NOT
49273: PUSH
49274: LD_VAR 0 1
49278: PPUSH
49279: CALL_OW 266
49283: PUSH
49284: LD_INT 32
49286: PUSH
49287: LD_INT 33
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: IN
49294: NOT
49295: OR
49296: IFFALSE 49300
// exit ;
49298: GO 50409
// nat := GetNation ( tower ) ;
49300: LD_ADDR_VAR 0 12
49304: PUSH
49305: LD_VAR 0 1
49309: PPUSH
49310: CALL_OW 248
49314: ST_TO_ADDR
// side := GetSide ( tower ) ;
49315: LD_ADDR_VAR 0 16
49319: PUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 255
49329: ST_TO_ADDR
// x := GetX ( tower ) ;
49330: LD_ADDR_VAR 0 10
49334: PUSH
49335: LD_VAR 0 1
49339: PPUSH
49340: CALL_OW 250
49344: ST_TO_ADDR
// y := GetY ( tower ) ;
49345: LD_ADDR_VAR 0 11
49349: PUSH
49350: LD_VAR 0 1
49354: PPUSH
49355: CALL_OW 251
49359: ST_TO_ADDR
// if not x or not y then
49360: LD_VAR 0 10
49364: NOT
49365: PUSH
49366: LD_VAR 0 11
49370: NOT
49371: OR
49372: IFFALSE 49376
// exit ;
49374: GO 50409
// weapon := 0 ;
49376: LD_ADDR_VAR 0 18
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// fac_list := [ ] ;
49384: LD_ADDR_VAR 0 17
49388: PUSH
49389: EMPTY
49390: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49391: LD_ADDR_VAR 0 6
49395: PUSH
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 274
49405: PPUSH
49406: LD_VAR 0 2
49410: PPUSH
49411: LD_INT 0
49413: PPUSH
49414: CALL 46980 0 3
49418: PPUSH
49419: LD_INT 30
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PPUSH
49429: CALL_OW 72
49433: ST_TO_ADDR
// if not factories then
49434: LD_VAR 0 6
49438: NOT
49439: IFFALSE 49443
// exit ;
49441: GO 50409
// for i in factories do
49443: LD_ADDR_VAR 0 8
49447: PUSH
49448: LD_VAR 0 6
49452: PUSH
49453: FOR_IN
49454: IFFALSE 49479
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49456: LD_ADDR_VAR 0 17
49460: PUSH
49461: LD_VAR 0 17
49465: PUSH
49466: LD_VAR 0 8
49470: PPUSH
49471: CALL_OW 478
49475: UNION
49476: ST_TO_ADDR
49477: GO 49453
49479: POP
49480: POP
// if not fac_list then
49481: LD_VAR 0 17
49485: NOT
49486: IFFALSE 49490
// exit ;
49488: GO 50409
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49490: LD_ADDR_VAR 0 5
49494: PUSH
49495: LD_INT 4
49497: PUSH
49498: LD_INT 5
49500: PUSH
49501: LD_INT 9
49503: PUSH
49504: LD_INT 10
49506: PUSH
49507: LD_INT 6
49509: PUSH
49510: LD_INT 7
49512: PUSH
49513: LD_INT 11
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 27
49527: PUSH
49528: LD_INT 28
49530: PUSH
49531: LD_INT 26
49533: PUSH
49534: LD_INT 30
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 43
49545: PUSH
49546: LD_INT 44
49548: PUSH
49549: LD_INT 46
49551: PUSH
49552: LD_INT 45
49554: PUSH
49555: LD_INT 47
49557: PUSH
49558: LD_INT 49
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: PUSH
49574: LD_VAR 0 12
49578: ARRAY
49579: ST_TO_ADDR
// list := list isect fac_list ;
49580: LD_ADDR_VAR 0 5
49584: PUSH
49585: LD_VAR 0 5
49589: PUSH
49590: LD_VAR 0 17
49594: ISECT
49595: ST_TO_ADDR
// if not list then
49596: LD_VAR 0 5
49600: NOT
49601: IFFALSE 49605
// exit ;
49603: GO 50409
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49605: LD_VAR 0 12
49609: PUSH
49610: LD_INT 3
49612: EQUAL
49613: PUSH
49614: LD_INT 49
49616: PUSH
49617: LD_VAR 0 5
49621: IN
49622: AND
49623: PUSH
49624: LD_INT 31
49626: PPUSH
49627: LD_VAR 0 16
49631: PPUSH
49632: CALL_OW 321
49636: PUSH
49637: LD_INT 2
49639: EQUAL
49640: AND
49641: IFFALSE 49701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49643: LD_INT 22
49645: PUSH
49646: LD_VAR 0 16
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 35
49657: PUSH
49658: LD_INT 49
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 91
49667: PUSH
49668: LD_VAR 0 1
49672: PUSH
49673: LD_INT 10
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: PPUSH
49686: CALL_OW 69
49690: NOT
49691: IFFALSE 49701
// weapon := ru_time_lapser ;
49693: LD_ADDR_VAR 0 18
49697: PUSH
49698: LD_INT 49
49700: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49701: LD_VAR 0 12
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: IN
49716: PUSH
49717: LD_INT 11
49719: PUSH
49720: LD_VAR 0 5
49724: IN
49725: PUSH
49726: LD_INT 30
49728: PUSH
49729: LD_VAR 0 5
49733: IN
49734: OR
49735: AND
49736: PUSH
49737: LD_INT 6
49739: PPUSH
49740: LD_VAR 0 16
49744: PPUSH
49745: CALL_OW 321
49749: PUSH
49750: LD_INT 2
49752: EQUAL
49753: AND
49754: IFFALSE 49919
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49756: LD_INT 22
49758: PUSH
49759: LD_VAR 0 16
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 35
49773: PUSH
49774: LD_INT 11
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 35
49783: PUSH
49784: LD_INT 30
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 91
49798: PUSH
49799: LD_VAR 0 1
49803: PUSH
49804: LD_INT 18
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: PPUSH
49817: CALL_OW 69
49821: NOT
49822: PUSH
49823: LD_INT 22
49825: PUSH
49826: LD_VAR 0 16
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: LD_INT 30
49840: PUSH
49841: LD_INT 32
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 30
49850: PUSH
49851: LD_INT 33
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 91
49865: PUSH
49866: LD_VAR 0 1
49870: PUSH
49871: LD_INT 12
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: PPUSH
49887: CALL_OW 69
49891: PUSH
49892: LD_INT 2
49894: GREATER
49895: AND
49896: IFFALSE 49919
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49898: LD_ADDR_VAR 0 18
49902: PUSH
49903: LD_INT 11
49905: PUSH
49906: LD_INT 30
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_VAR 0 12
49917: ARRAY
49918: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49919: LD_VAR 0 18
49923: NOT
49924: PUSH
49925: LD_INT 40
49927: PPUSH
49928: LD_VAR 0 16
49932: PPUSH
49933: CALL_OW 321
49937: PUSH
49938: LD_INT 2
49940: EQUAL
49941: AND
49942: PUSH
49943: LD_INT 7
49945: PUSH
49946: LD_VAR 0 5
49950: IN
49951: PUSH
49952: LD_INT 28
49954: PUSH
49955: LD_VAR 0 5
49959: IN
49960: OR
49961: PUSH
49962: LD_INT 45
49964: PUSH
49965: LD_VAR 0 5
49969: IN
49970: OR
49971: AND
49972: IFFALSE 50226
// begin hex := GetHexInfo ( x , y ) ;
49974: LD_ADDR_VAR 0 4
49978: PUSH
49979: LD_VAR 0 10
49983: PPUSH
49984: LD_VAR 0 11
49988: PPUSH
49989: CALL_OW 546
49993: ST_TO_ADDR
// if hex [ 1 ] then
49994: LD_VAR 0 4
49998: PUSH
49999: LD_INT 1
50001: ARRAY
50002: IFFALSE 50006
// exit ;
50004: GO 50409
// height := hex [ 2 ] ;
50006: LD_ADDR_VAR 0 15
50010: PUSH
50011: LD_VAR 0 4
50015: PUSH
50016: LD_INT 2
50018: ARRAY
50019: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50020: LD_ADDR_VAR 0 14
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: LD_INT 5
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// for i in tmp do
50043: LD_ADDR_VAR 0 8
50047: PUSH
50048: LD_VAR 0 14
50052: PUSH
50053: FOR_IN
50054: IFFALSE 50224
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50056: LD_ADDR_VAR 0 9
50060: PUSH
50061: LD_VAR 0 10
50065: PPUSH
50066: LD_VAR 0 8
50070: PPUSH
50071: LD_INT 5
50073: PPUSH
50074: CALL_OW 272
50078: PUSH
50079: LD_VAR 0 11
50083: PPUSH
50084: LD_VAR 0 8
50088: PPUSH
50089: LD_INT 5
50091: PPUSH
50092: CALL_OW 273
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50101: LD_VAR 0 9
50105: PUSH
50106: LD_INT 1
50108: ARRAY
50109: PPUSH
50110: LD_VAR 0 9
50114: PUSH
50115: LD_INT 2
50117: ARRAY
50118: PPUSH
50119: CALL_OW 488
50123: IFFALSE 50222
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50125: LD_ADDR_VAR 0 4
50129: PUSH
50130: LD_VAR 0 9
50134: PUSH
50135: LD_INT 1
50137: ARRAY
50138: PPUSH
50139: LD_VAR 0 9
50143: PUSH
50144: LD_INT 2
50146: ARRAY
50147: PPUSH
50148: CALL_OW 546
50152: ST_TO_ADDR
// if hex [ 1 ] then
50153: LD_VAR 0 4
50157: PUSH
50158: LD_INT 1
50160: ARRAY
50161: IFFALSE 50165
// continue ;
50163: GO 50053
// h := hex [ 2 ] ;
50165: LD_ADDR_VAR 0 13
50169: PUSH
50170: LD_VAR 0 4
50174: PUSH
50175: LD_INT 2
50177: ARRAY
50178: ST_TO_ADDR
// if h + 7 < height then
50179: LD_VAR 0 13
50183: PUSH
50184: LD_INT 7
50186: PLUS
50187: PUSH
50188: LD_VAR 0 15
50192: LESS
50193: IFFALSE 50222
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50195: LD_ADDR_VAR 0 18
50199: PUSH
50200: LD_INT 7
50202: PUSH
50203: LD_INT 28
50205: PUSH
50206: LD_INT 45
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_VAR 0 12
50218: ARRAY
50219: ST_TO_ADDR
// break ;
50220: GO 50224
// end ; end ; end ;
50222: GO 50053
50224: POP
50225: POP
// end ; if not weapon then
50226: LD_VAR 0 18
50230: NOT
50231: IFFALSE 50291
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_VAR 0 5
50242: PUSH
50243: LD_INT 11
50245: PUSH
50246: LD_INT 30
50248: PUSH
50249: LD_INT 49
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: DIFF
50257: ST_TO_ADDR
// if not list then
50258: LD_VAR 0 5
50262: NOT
50263: IFFALSE 50267
// exit ;
50265: GO 50409
// weapon := list [ rand ( 1 , list ) ] ;
50267: LD_ADDR_VAR 0 18
50271: PUSH
50272: LD_VAR 0 5
50276: PUSH
50277: LD_INT 1
50279: PPUSH
50280: LD_VAR 0 5
50284: PPUSH
50285: CALL_OW 12
50289: ARRAY
50290: ST_TO_ADDR
// end ; if weapon then
50291: LD_VAR 0 18
50295: IFFALSE 50409
// begin tmp := CostOfWeapon ( weapon ) ;
50297: LD_ADDR_VAR 0 14
50301: PUSH
50302: LD_VAR 0 18
50306: PPUSH
50307: CALL_OW 451
50311: ST_TO_ADDR
// j := GetBase ( tower ) ;
50312: LD_ADDR_VAR 0 9
50316: PUSH
50317: LD_VAR 0 1
50321: PPUSH
50322: CALL_OW 274
50326: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50327: LD_VAR 0 9
50331: PPUSH
50332: LD_INT 1
50334: PPUSH
50335: CALL_OW 275
50339: PUSH
50340: LD_VAR 0 14
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: GREATEREQUAL
50349: PUSH
50350: LD_VAR 0 9
50354: PPUSH
50355: LD_INT 2
50357: PPUSH
50358: CALL_OW 275
50362: PUSH
50363: LD_VAR 0 14
50367: PUSH
50368: LD_INT 2
50370: ARRAY
50371: GREATEREQUAL
50372: AND
50373: PUSH
50374: LD_VAR 0 9
50378: PPUSH
50379: LD_INT 3
50381: PPUSH
50382: CALL_OW 275
50386: PUSH
50387: LD_VAR 0 14
50391: PUSH
50392: LD_INT 3
50394: ARRAY
50395: GREATEREQUAL
50396: AND
50397: IFFALSE 50409
// result := weapon ;
50399: LD_ADDR_VAR 0 3
50403: PUSH
50404: LD_VAR 0 18
50408: ST_TO_ADDR
// end ; end ;
50409: LD_VAR 0 3
50413: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50414: LD_INT 0
50416: PPUSH
50417: PPUSH
// result := true ;
50418: LD_ADDR_VAR 0 3
50422: PUSH
50423: LD_INT 1
50425: ST_TO_ADDR
// if array1 = array2 then
50426: LD_VAR 0 1
50430: PUSH
50431: LD_VAR 0 2
50435: EQUAL
50436: IFFALSE 50496
// begin for i = 1 to array1 do
50438: LD_ADDR_VAR 0 4
50442: PUSH
50443: DOUBLE
50444: LD_INT 1
50446: DEC
50447: ST_TO_ADDR
50448: LD_VAR 0 1
50452: PUSH
50453: FOR_TO
50454: IFFALSE 50492
// if array1 [ i ] <> array2 [ i ] then
50456: LD_VAR 0 1
50460: PUSH
50461: LD_VAR 0 4
50465: ARRAY
50466: PUSH
50467: LD_VAR 0 2
50471: PUSH
50472: LD_VAR 0 4
50476: ARRAY
50477: NONEQUAL
50478: IFFALSE 50490
// begin result := false ;
50480: LD_ADDR_VAR 0 3
50484: PUSH
50485: LD_INT 0
50487: ST_TO_ADDR
// break ;
50488: GO 50492
// end ;
50490: GO 50453
50492: POP
50493: POP
// end else
50494: GO 50504
// result := false ;
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: LD_INT 0
50503: ST_TO_ADDR
// end ;
50504: LD_VAR 0 3
50508: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50509: LD_INT 0
50511: PPUSH
50512: PPUSH
// if not array1 or not array2 then
50513: LD_VAR 0 1
50517: NOT
50518: PUSH
50519: LD_VAR 0 2
50523: NOT
50524: OR
50525: IFFALSE 50529
// exit ;
50527: GO 50593
// result := true ;
50529: LD_ADDR_VAR 0 3
50533: PUSH
50534: LD_INT 1
50536: ST_TO_ADDR
// for i = 1 to array1 do
50537: LD_ADDR_VAR 0 4
50541: PUSH
50542: DOUBLE
50543: LD_INT 1
50545: DEC
50546: ST_TO_ADDR
50547: LD_VAR 0 1
50551: PUSH
50552: FOR_TO
50553: IFFALSE 50591
// if array1 [ i ] <> array2 [ i ] then
50555: LD_VAR 0 1
50559: PUSH
50560: LD_VAR 0 4
50564: ARRAY
50565: PUSH
50566: LD_VAR 0 2
50570: PUSH
50571: LD_VAR 0 4
50575: ARRAY
50576: NONEQUAL
50577: IFFALSE 50589
// begin result := false ;
50579: LD_ADDR_VAR 0 3
50583: PUSH
50584: LD_INT 0
50586: ST_TO_ADDR
// break ;
50587: GO 50591
// end ;
50589: GO 50552
50591: POP
50592: POP
// end ;
50593: LD_VAR 0 3
50597: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50598: LD_INT 0
50600: PPUSH
50601: PPUSH
50602: PPUSH
// pom := GetBase ( fac ) ;
50603: LD_ADDR_VAR 0 5
50607: PUSH
50608: LD_VAR 0 1
50612: PPUSH
50613: CALL_OW 274
50617: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50618: LD_ADDR_VAR 0 4
50622: PUSH
50623: LD_VAR 0 2
50627: PUSH
50628: LD_INT 1
50630: ARRAY
50631: PPUSH
50632: LD_VAR 0 2
50636: PUSH
50637: LD_INT 2
50639: ARRAY
50640: PPUSH
50641: LD_VAR 0 2
50645: PUSH
50646: LD_INT 3
50648: ARRAY
50649: PPUSH
50650: LD_VAR 0 2
50654: PUSH
50655: LD_INT 4
50657: ARRAY
50658: PPUSH
50659: CALL_OW 449
50663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50664: LD_ADDR_VAR 0 3
50668: PUSH
50669: LD_VAR 0 5
50673: PPUSH
50674: LD_INT 1
50676: PPUSH
50677: CALL_OW 275
50681: PUSH
50682: LD_VAR 0 4
50686: PUSH
50687: LD_INT 1
50689: ARRAY
50690: GREATEREQUAL
50691: PUSH
50692: LD_VAR 0 5
50696: PPUSH
50697: LD_INT 2
50699: PPUSH
50700: CALL_OW 275
50704: PUSH
50705: LD_VAR 0 4
50709: PUSH
50710: LD_INT 2
50712: ARRAY
50713: GREATEREQUAL
50714: AND
50715: PUSH
50716: LD_VAR 0 5
50720: PPUSH
50721: LD_INT 3
50723: PPUSH
50724: CALL_OW 275
50728: PUSH
50729: LD_VAR 0 4
50733: PUSH
50734: LD_INT 3
50736: ARRAY
50737: GREATEREQUAL
50738: AND
50739: ST_TO_ADDR
// end ;
50740: LD_VAR 0 3
50744: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50745: LD_INT 0
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
// pom := GetBase ( building ) ;
50751: LD_ADDR_VAR 0 3
50755: PUSH
50756: LD_VAR 0 1
50760: PPUSH
50761: CALL_OW 274
50765: ST_TO_ADDR
// if not pom then
50766: LD_VAR 0 3
50770: NOT
50771: IFFALSE 50775
// exit ;
50773: GO 50945
// btype := GetBType ( building ) ;
50775: LD_ADDR_VAR 0 5
50779: PUSH
50780: LD_VAR 0 1
50784: PPUSH
50785: CALL_OW 266
50789: ST_TO_ADDR
// if btype = b_armoury then
50790: LD_VAR 0 5
50794: PUSH
50795: LD_INT 4
50797: EQUAL
50798: IFFALSE 50808
// btype := b_barracks ;
50800: LD_ADDR_VAR 0 5
50804: PUSH
50805: LD_INT 5
50807: ST_TO_ADDR
// if btype = b_depot then
50808: LD_VAR 0 5
50812: PUSH
50813: LD_INT 0
50815: EQUAL
50816: IFFALSE 50826
// btype := b_warehouse ;
50818: LD_ADDR_VAR 0 5
50822: PUSH
50823: LD_INT 1
50825: ST_TO_ADDR
// if btype = b_workshop then
50826: LD_VAR 0 5
50830: PUSH
50831: LD_INT 2
50833: EQUAL
50834: IFFALSE 50844
// btype := b_factory ;
50836: LD_ADDR_VAR 0 5
50840: PUSH
50841: LD_INT 3
50843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50844: LD_ADDR_VAR 0 4
50848: PUSH
50849: LD_VAR 0 5
50853: PPUSH
50854: LD_VAR 0 1
50858: PPUSH
50859: CALL_OW 248
50863: PPUSH
50864: CALL_OW 450
50868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50869: LD_ADDR_VAR 0 2
50873: PUSH
50874: LD_VAR 0 3
50878: PPUSH
50879: LD_INT 1
50881: PPUSH
50882: CALL_OW 275
50886: PUSH
50887: LD_VAR 0 4
50891: PUSH
50892: LD_INT 1
50894: ARRAY
50895: GREATEREQUAL
50896: PUSH
50897: LD_VAR 0 3
50901: PPUSH
50902: LD_INT 2
50904: PPUSH
50905: CALL_OW 275
50909: PUSH
50910: LD_VAR 0 4
50914: PUSH
50915: LD_INT 2
50917: ARRAY
50918: GREATEREQUAL
50919: AND
50920: PUSH
50921: LD_VAR 0 3
50925: PPUSH
50926: LD_INT 3
50928: PPUSH
50929: CALL_OW 275
50933: PUSH
50934: LD_VAR 0 4
50938: PUSH
50939: LD_INT 3
50941: ARRAY
50942: GREATEREQUAL
50943: AND
50944: ST_TO_ADDR
// end ;
50945: LD_VAR 0 2
50949: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50950: LD_INT 0
50952: PPUSH
50953: PPUSH
50954: PPUSH
// pom := GetBase ( building ) ;
50955: LD_ADDR_VAR 0 4
50959: PUSH
50960: LD_VAR 0 1
50964: PPUSH
50965: CALL_OW 274
50969: ST_TO_ADDR
// if not pom then
50970: LD_VAR 0 4
50974: NOT
50975: IFFALSE 50979
// exit ;
50977: GO 51080
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50979: LD_ADDR_VAR 0 5
50983: PUSH
50984: LD_VAR 0 2
50988: PPUSH
50989: LD_VAR 0 1
50993: PPUSH
50994: CALL_OW 248
50998: PPUSH
50999: CALL_OW 450
51003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_VAR 0 4
51013: PPUSH
51014: LD_INT 1
51016: PPUSH
51017: CALL_OW 275
51021: PUSH
51022: LD_VAR 0 5
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: GREATEREQUAL
51031: PUSH
51032: LD_VAR 0 4
51036: PPUSH
51037: LD_INT 2
51039: PPUSH
51040: CALL_OW 275
51044: PUSH
51045: LD_VAR 0 5
51049: PUSH
51050: LD_INT 2
51052: ARRAY
51053: GREATEREQUAL
51054: AND
51055: PUSH
51056: LD_VAR 0 4
51060: PPUSH
51061: LD_INT 3
51063: PPUSH
51064: CALL_OW 275
51068: PUSH
51069: LD_VAR 0 5
51073: PUSH
51074: LD_INT 3
51076: ARRAY
51077: GREATEREQUAL
51078: AND
51079: ST_TO_ADDR
// end ;
51080: LD_VAR 0 3
51084: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51085: LD_INT 0
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
51096: PPUSH
51097: PPUSH
// result := false ;
51098: LD_ADDR_VAR 0 8
51102: PUSH
51103: LD_INT 0
51105: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51106: LD_VAR 0 5
51110: NOT
51111: PUSH
51112: LD_VAR 0 1
51116: NOT
51117: OR
51118: PUSH
51119: LD_VAR 0 2
51123: NOT
51124: OR
51125: PUSH
51126: LD_VAR 0 3
51130: NOT
51131: OR
51132: IFFALSE 51136
// exit ;
51134: GO 51950
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51136: LD_ADDR_VAR 0 14
51140: PUSH
51141: LD_VAR 0 1
51145: PPUSH
51146: LD_VAR 0 2
51150: PPUSH
51151: LD_VAR 0 3
51155: PPUSH
51156: LD_VAR 0 4
51160: PPUSH
51161: LD_VAR 0 5
51165: PUSH
51166: LD_INT 1
51168: ARRAY
51169: PPUSH
51170: CALL_OW 248
51174: PPUSH
51175: LD_INT 0
51177: PPUSH
51178: CALL 53187 0 6
51182: ST_TO_ADDR
// if not hexes then
51183: LD_VAR 0 14
51187: NOT
51188: IFFALSE 51192
// exit ;
51190: GO 51950
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51192: LD_ADDR_VAR 0 17
51196: PUSH
51197: LD_VAR 0 5
51201: PPUSH
51202: LD_INT 22
51204: PUSH
51205: LD_VAR 0 13
51209: PPUSH
51210: CALL_OW 255
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 30
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 30
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PPUSH
51251: CALL_OW 72
51255: ST_TO_ADDR
// for i = 1 to hexes do
51256: LD_ADDR_VAR 0 9
51260: PUSH
51261: DOUBLE
51262: LD_INT 1
51264: DEC
51265: ST_TO_ADDR
51266: LD_VAR 0 14
51270: PUSH
51271: FOR_TO
51272: IFFALSE 51948
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51274: LD_ADDR_VAR 0 13
51278: PUSH
51279: LD_VAR 0 14
51283: PUSH
51284: LD_VAR 0 9
51288: ARRAY
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PPUSH
51294: LD_VAR 0 14
51298: PUSH
51299: LD_VAR 0 9
51303: ARRAY
51304: PUSH
51305: LD_INT 2
51307: ARRAY
51308: PPUSH
51309: CALL_OW 428
51313: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51314: LD_VAR 0 14
51318: PUSH
51319: LD_VAR 0 9
51323: ARRAY
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PPUSH
51329: LD_VAR 0 14
51333: PUSH
51334: LD_VAR 0 9
51338: ARRAY
51339: PUSH
51340: LD_INT 2
51342: ARRAY
51343: PPUSH
51344: CALL_OW 351
51348: PUSH
51349: LD_VAR 0 14
51353: PUSH
51354: LD_VAR 0 9
51358: ARRAY
51359: PUSH
51360: LD_INT 1
51362: ARRAY
51363: PPUSH
51364: LD_VAR 0 14
51368: PUSH
51369: LD_VAR 0 9
51373: ARRAY
51374: PUSH
51375: LD_INT 2
51377: ARRAY
51378: PPUSH
51379: CALL_OW 488
51383: NOT
51384: OR
51385: PUSH
51386: LD_VAR 0 13
51390: PPUSH
51391: CALL_OW 247
51395: PUSH
51396: LD_INT 3
51398: EQUAL
51399: OR
51400: IFFALSE 51406
// exit ;
51402: POP
51403: POP
51404: GO 51950
// if not tmp then
51406: LD_VAR 0 13
51410: NOT
51411: IFFALSE 51415
// continue ;
51413: GO 51271
// result := true ;
51415: LD_ADDR_VAR 0 8
51419: PUSH
51420: LD_INT 1
51422: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51423: LD_VAR 0 6
51427: PUSH
51428: LD_VAR 0 13
51432: PPUSH
51433: CALL_OW 247
51437: PUSH
51438: LD_INT 2
51440: EQUAL
51441: AND
51442: PUSH
51443: LD_VAR 0 13
51447: PPUSH
51448: CALL_OW 263
51452: PUSH
51453: LD_INT 1
51455: EQUAL
51456: AND
51457: IFFALSE 51621
// begin if IsDrivenBy ( tmp ) then
51459: LD_VAR 0 13
51463: PPUSH
51464: CALL_OW 311
51468: IFFALSE 51472
// continue ;
51470: GO 51271
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51472: LD_VAR 0 6
51476: PPUSH
51477: LD_INT 3
51479: PUSH
51480: LD_INT 60
51482: PUSH
51483: EMPTY
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 55
51495: PUSH
51496: EMPTY
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PPUSH
51507: CALL_OW 72
51511: IFFALSE 51619
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51513: LD_ADDR_VAR 0 18
51517: PUSH
51518: LD_VAR 0 6
51522: PPUSH
51523: LD_INT 3
51525: PUSH
51526: LD_INT 60
51528: PUSH
51529: EMPTY
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 55
51541: PUSH
51542: EMPTY
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PPUSH
51553: CALL_OW 72
51557: PUSH
51558: LD_INT 1
51560: ARRAY
51561: ST_TO_ADDR
// if IsInUnit ( driver ) then
51562: LD_VAR 0 18
51566: PPUSH
51567: CALL_OW 310
51571: IFFALSE 51582
// ComExit ( driver ) ;
51573: LD_VAR 0 18
51577: PPUSH
51578: CALL 76315 0 1
// AddComEnterUnit ( driver , tmp ) ;
51582: LD_VAR 0 18
51586: PPUSH
51587: LD_VAR 0 13
51591: PPUSH
51592: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51596: LD_VAR 0 18
51600: PPUSH
51601: LD_VAR 0 7
51605: PPUSH
51606: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51610: LD_VAR 0 18
51614: PPUSH
51615: CALL_OW 181
// end ; continue ;
51619: GO 51271
// end ; if not cleaners or not tmp in cleaners then
51621: LD_VAR 0 6
51625: NOT
51626: PUSH
51627: LD_VAR 0 13
51631: PUSH
51632: LD_VAR 0 6
51636: IN
51637: NOT
51638: OR
51639: IFFALSE 51946
// begin if dep then
51641: LD_VAR 0 17
51645: IFFALSE 51781
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51647: LD_ADDR_VAR 0 16
51651: PUSH
51652: LD_VAR 0 17
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PPUSH
51661: CALL_OW 250
51665: PPUSH
51666: LD_VAR 0 17
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: PPUSH
51675: CALL_OW 254
51679: PPUSH
51680: LD_INT 5
51682: PPUSH
51683: CALL_OW 272
51687: PUSH
51688: LD_VAR 0 17
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: PPUSH
51697: CALL_OW 251
51701: PPUSH
51702: LD_VAR 0 17
51706: PUSH
51707: LD_INT 1
51709: ARRAY
51710: PPUSH
51711: CALL_OW 254
51715: PPUSH
51716: LD_INT 5
51718: PPUSH
51719: CALL_OW 273
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51728: LD_VAR 0 16
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PPUSH
51737: LD_VAR 0 16
51741: PUSH
51742: LD_INT 2
51744: ARRAY
51745: PPUSH
51746: CALL_OW 488
51750: IFFALSE 51781
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51752: LD_VAR 0 13
51756: PPUSH
51757: LD_VAR 0 16
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PPUSH
51766: LD_VAR 0 16
51770: PUSH
51771: LD_INT 2
51773: ARRAY
51774: PPUSH
51775: CALL_OW 111
// continue ;
51779: GO 51271
// end ; end ; r := GetDir ( tmp ) ;
51781: LD_ADDR_VAR 0 15
51785: PUSH
51786: LD_VAR 0 13
51790: PPUSH
51791: CALL_OW 254
51795: ST_TO_ADDR
// if r = 5 then
51796: LD_VAR 0 15
51800: PUSH
51801: LD_INT 5
51803: EQUAL
51804: IFFALSE 51814
// r := 0 ;
51806: LD_ADDR_VAR 0 15
51810: PUSH
51811: LD_INT 0
51813: ST_TO_ADDR
// for j = r to 5 do
51814: LD_ADDR_VAR 0 10
51818: PUSH
51819: DOUBLE
51820: LD_VAR 0 15
51824: DEC
51825: ST_TO_ADDR
51826: LD_INT 5
51828: PUSH
51829: FOR_TO
51830: IFFALSE 51944
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51832: LD_ADDR_VAR 0 11
51836: PUSH
51837: LD_VAR 0 13
51841: PPUSH
51842: CALL_OW 250
51846: PPUSH
51847: LD_VAR 0 10
51851: PPUSH
51852: LD_INT 2
51854: PPUSH
51855: CALL_OW 272
51859: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51860: LD_ADDR_VAR 0 12
51864: PUSH
51865: LD_VAR 0 13
51869: PPUSH
51870: CALL_OW 251
51874: PPUSH
51875: LD_VAR 0 10
51879: PPUSH
51880: LD_INT 2
51882: PPUSH
51883: CALL_OW 273
51887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51888: LD_VAR 0 11
51892: PPUSH
51893: LD_VAR 0 12
51897: PPUSH
51898: CALL_OW 488
51902: PUSH
51903: LD_VAR 0 11
51907: PPUSH
51908: LD_VAR 0 12
51912: PPUSH
51913: CALL_OW 428
51917: NOT
51918: AND
51919: IFFALSE 51942
// begin ComMoveXY ( tmp , _x , _y ) ;
51921: LD_VAR 0 13
51925: PPUSH
51926: LD_VAR 0 11
51930: PPUSH
51931: LD_VAR 0 12
51935: PPUSH
51936: CALL_OW 111
// break ;
51940: GO 51944
// end ; end ;
51942: GO 51829
51944: POP
51945: POP
// end ; end ;
51946: GO 51271
51948: POP
51949: POP
// end ;
51950: LD_VAR 0 8
51954: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51955: LD_INT 0
51957: PPUSH
// result := true ;
51958: LD_ADDR_VAR 0 3
51962: PUSH
51963: LD_INT 1
51965: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 24
51973: DOUBLE
51974: EQUAL
51975: IFTRUE 51985
51977: LD_INT 33
51979: DOUBLE
51980: EQUAL
51981: IFTRUE 51985
51983: GO 52010
51985: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51986: LD_ADDR_VAR 0 3
51990: PUSH
51991: LD_INT 32
51993: PPUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: CALL_OW 321
52003: PUSH
52004: LD_INT 2
52006: EQUAL
52007: ST_TO_ADDR
52008: GO 52330
52010: LD_INT 20
52012: DOUBLE
52013: EQUAL
52014: IFTRUE 52018
52016: GO 52043
52018: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52019: LD_ADDR_VAR 0 3
52023: PUSH
52024: LD_INT 6
52026: PPUSH
52027: LD_VAR 0 1
52031: PPUSH
52032: CALL_OW 321
52036: PUSH
52037: LD_INT 2
52039: EQUAL
52040: ST_TO_ADDR
52041: GO 52330
52043: LD_INT 22
52045: DOUBLE
52046: EQUAL
52047: IFTRUE 52057
52049: LD_INT 36
52051: DOUBLE
52052: EQUAL
52053: IFTRUE 52057
52055: GO 52082
52057: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52058: LD_ADDR_VAR 0 3
52062: PUSH
52063: LD_INT 15
52065: PPUSH
52066: LD_VAR 0 1
52070: PPUSH
52071: CALL_OW 321
52075: PUSH
52076: LD_INT 2
52078: EQUAL
52079: ST_TO_ADDR
52080: GO 52330
52082: LD_INT 30
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52090
52088: GO 52115
52090: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52091: LD_ADDR_VAR 0 3
52095: PUSH
52096: LD_INT 20
52098: PPUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 321
52108: PUSH
52109: LD_INT 2
52111: EQUAL
52112: ST_TO_ADDR
52113: GO 52330
52115: LD_INT 28
52117: DOUBLE
52118: EQUAL
52119: IFTRUE 52129
52121: LD_INT 21
52123: DOUBLE
52124: EQUAL
52125: IFTRUE 52129
52127: GO 52154
52129: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52130: LD_ADDR_VAR 0 3
52134: PUSH
52135: LD_INT 21
52137: PPUSH
52138: LD_VAR 0 1
52142: PPUSH
52143: CALL_OW 321
52147: PUSH
52148: LD_INT 2
52150: EQUAL
52151: ST_TO_ADDR
52152: GO 52330
52154: LD_INT 16
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52162
52160: GO 52189
52162: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52163: LD_ADDR_VAR 0 3
52167: PUSH
52168: LD_EXP 62
52172: PPUSH
52173: LD_VAR 0 1
52177: PPUSH
52178: CALL_OW 321
52182: PUSH
52183: LD_INT 2
52185: EQUAL
52186: ST_TO_ADDR
52187: GO 52330
52189: LD_INT 19
52191: DOUBLE
52192: EQUAL
52193: IFTRUE 52203
52195: LD_INT 23
52197: DOUBLE
52198: EQUAL
52199: IFTRUE 52203
52201: GO 52230
52203: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52204: LD_ADDR_VAR 0 3
52208: PUSH
52209: LD_EXP 61
52213: PPUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 321
52223: PUSH
52224: LD_INT 2
52226: EQUAL
52227: ST_TO_ADDR
52228: GO 52330
52230: LD_INT 17
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52263
52238: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52239: LD_ADDR_VAR 0 3
52243: PUSH
52244: LD_INT 39
52246: PPUSH
52247: LD_VAR 0 1
52251: PPUSH
52252: CALL_OW 321
52256: PUSH
52257: LD_INT 2
52259: EQUAL
52260: ST_TO_ADDR
52261: GO 52330
52263: LD_INT 18
52265: DOUBLE
52266: EQUAL
52267: IFTRUE 52271
52269: GO 52296
52271: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52272: LD_ADDR_VAR 0 3
52276: PUSH
52277: LD_INT 40
52279: PPUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 321
52289: PUSH
52290: LD_INT 2
52292: EQUAL
52293: ST_TO_ADDR
52294: GO 52330
52296: LD_INT 27
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52304
52302: GO 52329
52304: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52305: LD_ADDR_VAR 0 3
52309: PUSH
52310: LD_INT 35
52312: PPUSH
52313: LD_VAR 0 1
52317: PPUSH
52318: CALL_OW 321
52322: PUSH
52323: LD_INT 2
52325: EQUAL
52326: ST_TO_ADDR
52327: GO 52330
52329: POP
// end ;
52330: LD_VAR 0 3
52334: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52335: LD_INT 0
52337: PPUSH
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
// result := false ;
52348: LD_ADDR_VAR 0 6
52352: PUSH
52353: LD_INT 0
52355: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52356: LD_VAR 0 1
52360: NOT
52361: PUSH
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL_OW 266
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: IN
52382: NOT
52383: OR
52384: PUSH
52385: LD_VAR 0 2
52389: NOT
52390: OR
52391: PUSH
52392: LD_VAR 0 5
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 4
52411: PUSH
52412: LD_INT 5
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: IN
52423: NOT
52424: OR
52425: PUSH
52426: LD_VAR 0 3
52430: PPUSH
52431: LD_VAR 0 4
52435: PPUSH
52436: CALL_OW 488
52440: NOT
52441: OR
52442: IFFALSE 52446
// exit ;
52444: GO 53182
// side := GetSide ( depot ) ;
52446: LD_ADDR_VAR 0 9
52450: PUSH
52451: LD_VAR 0 1
52455: PPUSH
52456: CALL_OW 255
52460: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52461: LD_VAR 0 9
52465: PPUSH
52466: LD_VAR 0 2
52470: PPUSH
52471: CALL 51955 0 2
52475: NOT
52476: IFFALSE 52480
// exit ;
52478: GO 53182
// pom := GetBase ( depot ) ;
52480: LD_ADDR_VAR 0 10
52484: PUSH
52485: LD_VAR 0 1
52489: PPUSH
52490: CALL_OW 274
52494: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52495: LD_ADDR_VAR 0 11
52499: PUSH
52500: LD_VAR 0 2
52504: PPUSH
52505: LD_VAR 0 1
52509: PPUSH
52510: CALL_OW 248
52514: PPUSH
52515: CALL_OW 450
52519: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52520: LD_VAR 0 10
52524: PPUSH
52525: LD_INT 1
52527: PPUSH
52528: CALL_OW 275
52532: PUSH
52533: LD_VAR 0 11
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: GREATEREQUAL
52542: PUSH
52543: LD_VAR 0 10
52547: PPUSH
52548: LD_INT 2
52550: PPUSH
52551: CALL_OW 275
52555: PUSH
52556: LD_VAR 0 11
52560: PUSH
52561: LD_INT 2
52563: ARRAY
52564: GREATEREQUAL
52565: AND
52566: PUSH
52567: LD_VAR 0 10
52571: PPUSH
52572: LD_INT 3
52574: PPUSH
52575: CALL_OW 275
52579: PUSH
52580: LD_VAR 0 11
52584: PUSH
52585: LD_INT 3
52587: ARRAY
52588: GREATEREQUAL
52589: AND
52590: NOT
52591: IFFALSE 52595
// exit ;
52593: GO 53182
// if GetBType ( depot ) = b_depot then
52595: LD_VAR 0 1
52599: PPUSH
52600: CALL_OW 266
52604: PUSH
52605: LD_INT 0
52607: EQUAL
52608: IFFALSE 52620
// dist := 28 else
52610: LD_ADDR_VAR 0 14
52614: PUSH
52615: LD_INT 28
52617: ST_TO_ADDR
52618: GO 52628
// dist := 36 ;
52620: LD_ADDR_VAR 0 14
52624: PUSH
52625: LD_INT 36
52627: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52628: LD_VAR 0 1
52632: PPUSH
52633: LD_VAR 0 3
52637: PPUSH
52638: LD_VAR 0 4
52642: PPUSH
52643: CALL_OW 297
52647: PUSH
52648: LD_VAR 0 14
52652: GREATER
52653: IFFALSE 52657
// exit ;
52655: GO 53182
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52657: LD_ADDR_VAR 0 12
52661: PUSH
52662: LD_VAR 0 2
52666: PPUSH
52667: LD_VAR 0 3
52671: PPUSH
52672: LD_VAR 0 4
52676: PPUSH
52677: LD_VAR 0 5
52681: PPUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: CALL_OW 248
52691: PPUSH
52692: LD_INT 0
52694: PPUSH
52695: CALL 53187 0 6
52699: ST_TO_ADDR
// if not hexes then
52700: LD_VAR 0 12
52704: NOT
52705: IFFALSE 52709
// exit ;
52707: GO 53182
// hex := GetHexInfo ( x , y ) ;
52709: LD_ADDR_VAR 0 15
52713: PUSH
52714: LD_VAR 0 3
52718: PPUSH
52719: LD_VAR 0 4
52723: PPUSH
52724: CALL_OW 546
52728: ST_TO_ADDR
// if hex [ 1 ] then
52729: LD_VAR 0 15
52733: PUSH
52734: LD_INT 1
52736: ARRAY
52737: IFFALSE 52741
// exit ;
52739: GO 53182
// height := hex [ 2 ] ;
52741: LD_ADDR_VAR 0 13
52745: PUSH
52746: LD_VAR 0 15
52750: PUSH
52751: LD_INT 2
52753: ARRAY
52754: ST_TO_ADDR
// for i = 1 to hexes do
52755: LD_ADDR_VAR 0 7
52759: PUSH
52760: DOUBLE
52761: LD_INT 1
52763: DEC
52764: ST_TO_ADDR
52765: LD_VAR 0 12
52769: PUSH
52770: FOR_TO
52771: IFFALSE 53101
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52773: LD_VAR 0 12
52777: PUSH
52778: LD_VAR 0 7
52782: ARRAY
52783: PUSH
52784: LD_INT 1
52786: ARRAY
52787: PPUSH
52788: LD_VAR 0 12
52792: PUSH
52793: LD_VAR 0 7
52797: ARRAY
52798: PUSH
52799: LD_INT 2
52801: ARRAY
52802: PPUSH
52803: CALL_OW 488
52807: NOT
52808: PUSH
52809: LD_VAR 0 12
52813: PUSH
52814: LD_VAR 0 7
52818: ARRAY
52819: PUSH
52820: LD_INT 1
52822: ARRAY
52823: PPUSH
52824: LD_VAR 0 12
52828: PUSH
52829: LD_VAR 0 7
52833: ARRAY
52834: PUSH
52835: LD_INT 2
52837: ARRAY
52838: PPUSH
52839: CALL_OW 428
52843: PUSH
52844: LD_INT 0
52846: GREATER
52847: OR
52848: PUSH
52849: LD_VAR 0 12
52853: PUSH
52854: LD_VAR 0 7
52858: ARRAY
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PPUSH
52864: LD_VAR 0 12
52868: PUSH
52869: LD_VAR 0 7
52873: ARRAY
52874: PUSH
52875: LD_INT 2
52877: ARRAY
52878: PPUSH
52879: CALL_OW 351
52883: OR
52884: IFFALSE 52890
// exit ;
52886: POP
52887: POP
52888: GO 53182
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52890: LD_ADDR_VAR 0 8
52894: PUSH
52895: LD_VAR 0 12
52899: PUSH
52900: LD_VAR 0 7
52904: ARRAY
52905: PUSH
52906: LD_INT 1
52908: ARRAY
52909: PPUSH
52910: LD_VAR 0 12
52914: PUSH
52915: LD_VAR 0 7
52919: ARRAY
52920: PUSH
52921: LD_INT 2
52923: ARRAY
52924: PPUSH
52925: CALL_OW 546
52929: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52930: LD_VAR 0 8
52934: PUSH
52935: LD_INT 1
52937: ARRAY
52938: PUSH
52939: LD_VAR 0 8
52943: PUSH
52944: LD_INT 2
52946: ARRAY
52947: PUSH
52948: LD_VAR 0 13
52952: PUSH
52953: LD_INT 2
52955: PLUS
52956: GREATER
52957: OR
52958: PUSH
52959: LD_VAR 0 8
52963: PUSH
52964: LD_INT 2
52966: ARRAY
52967: PUSH
52968: LD_VAR 0 13
52972: PUSH
52973: LD_INT 2
52975: MINUS
52976: LESS
52977: OR
52978: PUSH
52979: LD_VAR 0 8
52983: PUSH
52984: LD_INT 3
52986: ARRAY
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 8
52993: PUSH
52994: LD_INT 9
52996: PUSH
52997: LD_INT 10
52999: PUSH
53000: LD_INT 11
53002: PUSH
53003: LD_INT 12
53005: PUSH
53006: LD_INT 13
53008: PUSH
53009: LD_INT 16
53011: PUSH
53012: LD_INT 17
53014: PUSH
53015: LD_INT 18
53017: PUSH
53018: LD_INT 19
53020: PUSH
53021: LD_INT 20
53023: PUSH
53024: LD_INT 21
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: IN
53042: NOT
53043: OR
53044: PUSH
53045: LD_VAR 0 8
53049: PUSH
53050: LD_INT 5
53052: ARRAY
53053: NOT
53054: OR
53055: PUSH
53056: LD_VAR 0 8
53060: PUSH
53061: LD_INT 6
53063: ARRAY
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 7
53073: PUSH
53074: LD_INT 9
53076: PUSH
53077: LD_INT 10
53079: PUSH
53080: LD_INT 11
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: IN
53091: NOT
53092: OR
53093: IFFALSE 53099
// exit ;
53095: POP
53096: POP
53097: GO 53182
// end ;
53099: GO 52770
53101: POP
53102: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53103: LD_VAR 0 9
53107: PPUSH
53108: LD_VAR 0 3
53112: PPUSH
53113: LD_VAR 0 4
53117: PPUSH
53118: LD_INT 20
53120: PPUSH
53121: CALL 45128 0 4
53125: PUSH
53126: LD_INT 4
53128: ARRAY
53129: IFFALSE 53133
// exit ;
53131: GO 53182
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53133: LD_VAR 0 2
53137: PUSH
53138: LD_INT 29
53140: PUSH
53141: LD_INT 30
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: IN
53148: PUSH
53149: LD_VAR 0 3
53153: PPUSH
53154: LD_VAR 0 4
53158: PPUSH
53159: LD_VAR 0 9
53163: PPUSH
53164: CALL_OW 440
53168: NOT
53169: AND
53170: IFFALSE 53174
// exit ;
53172: GO 53182
// result := true ;
53174: LD_ADDR_VAR 0 6
53178: PUSH
53179: LD_INT 1
53181: ST_TO_ADDR
// end ;
53182: LD_VAR 0 6
53186: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53187: LD_INT 0
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
// result = [ ] ;
53247: LD_ADDR_VAR 0 7
53251: PUSH
53252: EMPTY
53253: ST_TO_ADDR
// temp_list = [ ] ;
53254: LD_ADDR_VAR 0 9
53258: PUSH
53259: EMPTY
53260: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53261: LD_VAR 0 4
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: IN
53292: NOT
53293: PUSH
53294: LD_VAR 0 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: IN
53309: PUSH
53310: LD_VAR 0 5
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: IN
53329: NOT
53330: AND
53331: OR
53332: IFFALSE 53336
// exit ;
53334: GO 71727
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53336: LD_VAR 0 1
53340: PUSH
53341: LD_INT 6
53343: PUSH
53344: LD_INT 7
53346: PUSH
53347: LD_INT 8
53349: PUSH
53350: LD_INT 13
53352: PUSH
53353: LD_INT 12
53355: PUSH
53356: LD_INT 15
53358: PUSH
53359: LD_INT 11
53361: PUSH
53362: LD_INT 14
53364: PUSH
53365: LD_INT 10
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: IN
53379: IFFALSE 53389
// btype = b_lab ;
53381: LD_ADDR_VAR 0 1
53385: PUSH
53386: LD_INT 6
53388: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53389: LD_VAR 0 6
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: IN
53408: NOT
53409: PUSH
53410: LD_VAR 0 1
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 6
53429: PUSH
53430: LD_INT 36
53432: PUSH
53433: LD_INT 4
53435: PUSH
53436: LD_INT 5
53438: PUSH
53439: LD_INT 31
53441: PUSH
53442: LD_INT 32
53444: PUSH
53445: LD_INT 33
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: IN
53461: NOT
53462: PUSH
53463: LD_VAR 0 6
53467: PUSH
53468: LD_INT 1
53470: EQUAL
53471: AND
53472: OR
53473: PUSH
53474: LD_VAR 0 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: IN
53489: NOT
53490: PUSH
53491: LD_VAR 0 6
53495: PUSH
53496: LD_INT 2
53498: EQUAL
53499: AND
53500: OR
53501: IFFALSE 53511
// mode = 0 ;
53503: LD_ADDR_VAR 0 6
53507: PUSH
53508: LD_INT 0
53510: ST_TO_ADDR
// case mode of 0 :
53511: LD_VAR 0 6
53515: PUSH
53516: LD_INT 0
53518: DOUBLE
53519: EQUAL
53520: IFTRUE 53524
53522: GO 64977
53524: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53525: LD_ADDR_VAR 0 11
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53718: LD_ADDR_VAR 0 12
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53914: LD_ADDR_VAR 0 13
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54113: LD_ADDR_VAR 0 14
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 3
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54309: LD_ADDR_VAR 0 15
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54502: LD_ADDR_VAR 0 16
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54695: LD_ADDR_VAR 0 17
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54925: LD_ADDR_VAR 0 18
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55155: LD_ADDR_VAR 0 19
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55385: LD_ADDR_VAR 0 20
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55615: LD_ADDR_VAR 0 21
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55845: LD_ADDR_VAR 0 22
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56075: LD_ADDR_VAR 0 23
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56355: LD_ADDR_VAR 0 24
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56631: LD_ADDR_VAR 0 25
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56905: LD_ADDR_VAR 0 26
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57181: LD_ADDR_VAR 0 27
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57461: LD_ADDR_VAR 0 28
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57743: LD_ADDR_VAR 0 29
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58022: LD_ADDR_VAR 0 30
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58300: LD_ADDR_VAR 0 31
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58578: LD_ADDR_VAR 0 32
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58856: LD_ADDR_VAR 0 33
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59135: LD_ADDR_VAR 0 34
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 3
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59415: LD_ADDR_VAR 0 35
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59527: LD_ADDR_VAR 0 36
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59639: LD_ADDR_VAR 0 37
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59751: LD_ADDR_VAR 0 38
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59863: LD_ADDR_VAR 0 39
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59975: LD_ADDR_VAR 0 40
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60087: LD_ADDR_VAR 0 41
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 3
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60437: LD_ADDR_VAR 0 42
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 3
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: LD_INT 3
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60787: LD_ADDR_VAR 0 43
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 3
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61135: LD_ADDR_VAR 0 44
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 2
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61485: LD_ADDR_VAR 0 45
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 3
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61835: LD_ADDR_VAR 0 46
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: LD_INT 3
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 3
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62183: LD_ADDR_VAR 0 47
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62334: LD_ADDR_VAR 0 48
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62481: LD_ADDR_VAR 0 49
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 2
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62625: LD_ADDR_VAR 0 50
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62769: LD_ADDR_VAR 0 51
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62916: LD_ADDR_VAR 0 52
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63067: LD_ADDR_VAR 0 53
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63297: LD_ADDR_VAR 0 54
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 2
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63527: LD_ADDR_VAR 0 55
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63757: LD_ADDR_VAR 0 56
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63987: LD_ADDR_VAR 0 57
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: NEG
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: NEG
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64217: LD_ADDR_VAR 0 58
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64447: LD_ADDR_VAR 0 59
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64535: LD_ADDR_VAR 0 60
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64623: LD_ADDR_VAR 0 61
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64711: LD_ADDR_VAR 0 62
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64799: LD_ADDR_VAR 0 63
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64887: LD_ADDR_VAR 0 64
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: ST_TO_ADDR
// end ; 1 :
64975: GO 70872
64977: LD_INT 1
64979: DOUBLE
64980: EQUAL
64981: IFTRUE 64985
64983: GO 67608
64985: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64986: LD_ADDR_VAR 0 11
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 3
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 3
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65030: LD_ADDR_VAR 0 12
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 3
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 3
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65071: LD_ADDR_VAR 0 13
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65111: LD_ADDR_VAR 0 14
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65152: LD_ADDR_VAR 0 15
65156: PUSH
65157: LD_INT 2
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 3
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65196: LD_ADDR_VAR 0 16
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65242: LD_ADDR_VAR 0 17
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65286: LD_ADDR_VAR 0 18
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 3
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65327: LD_ADDR_VAR 0 19
65331: PUSH
65332: LD_INT 3
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: LD_INT 3
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65367: LD_ADDR_VAR 0 20
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65408: LD_ADDR_VAR 0 21
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 3
65437: NEG
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65452: LD_ADDR_VAR 0 22
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65498: LD_ADDR_VAR 0 23
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 4
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: LD_INT 3
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65542: LD_ADDR_VAR 0 24
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 3
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 4
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65583: LD_ADDR_VAR 0 25
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 4
65600: PUSH
65601: LD_INT 3
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65623: LD_ADDR_VAR 0 26
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 4
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65664: LD_ADDR_VAR 0 27
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: NEG
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65708: LD_ADDR_VAR 0 28
65712: PUSH
65713: LD_INT 3
65715: NEG
65716: PUSH
65717: LD_INT 3
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 4
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65754: LD_ADDR_VAR 0 29
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 3
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 2
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: LD_INT 4
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 4
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 5
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 5
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: LD_INT 4
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 6
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 6
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 5
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65909: LD_ADDR_VAR 0 30
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 4
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 4
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 5
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 5
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 5
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 6
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 6
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66052: LD_ADDR_VAR 0 31
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: LD_INT 2
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: LD_INT 4
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: LD_INT 4
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: LD_INT 4
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 5
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 4
66139: PUSH
66140: LD_INT 5
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 6
66149: PUSH
66150: LD_INT 5
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 6
66159: PUSH
66160: LD_INT 6
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 5
66169: PUSH
66170: LD_INT 6
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66191: LD_ADDR_VAR 0 32
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: LD_INT 4
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 4
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: LD_INT 5
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 5
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 6
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 6
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66334: LD_ADDR_VAR 0 33
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 3
66375: NEG
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: NEG
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 5
66420: NEG
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 5
66431: NEG
66432: PUSH
66433: LD_INT 1
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 5
66443: NEG
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 6
66454: NEG
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 6
66465: NEG
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66489: LD_ADDR_VAR 0 34
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 3
66508: NEG
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: LD_INT 4
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 4
66544: NEG
66545: PUSH
66546: LD_INT 3
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: LD_INT 4
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 5
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 5
66580: NEG
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 5
66592: NEG
66593: PUSH
66594: LD_INT 5
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: LD_INT 6
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 6
66616: NEG
66617: PUSH
66618: LD_INT 5
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 6
66628: NEG
66629: PUSH
66630: LD_INT 6
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66652: LD_ADDR_VAR 0 41
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66696: LD_ADDR_VAR 0 42
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66737: LD_ADDR_VAR 0 43
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66777: LD_ADDR_VAR 0 44
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66818: LD_ADDR_VAR 0 45
66822: PUSH
66823: LD_INT 2
66825: NEG
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66862: LD_ADDR_VAR 0 46
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 2
66881: NEG
66882: PUSH
66883: LD_INT 3
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66908: LD_ADDR_VAR 0 47
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: LD_INT 3
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66941: LD_ADDR_VAR 0 48
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66972: LD_ADDR_VAR 0 49
66976: PUSH
66977: LD_INT 3
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67001: LD_ADDR_VAR 0 50
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67030: LD_ADDR_VAR 0 51
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 2
67048: NEG
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67061: LD_ADDR_VAR 0 52
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: LD_INT 2
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67094: LD_ADDR_VAR 0 53
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 3
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67138: LD_ADDR_VAR 0 54
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67179: LD_ADDR_VAR 0 55
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67219: LD_ADDR_VAR 0 56
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 3
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67260: LD_ADDR_VAR 0 57
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67304: LD_ADDR_VAR 0 58
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: LD_INT 3
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67350: LD_ADDR_VAR 0 59
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67394: LD_ADDR_VAR 0 60
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 2
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67435: LD_ADDR_VAR 0 61
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: LD_INT 1
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 2
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67475: LD_ADDR_VAR 0 62
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: LD_INT 2
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: LD_INT 2
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67516: LD_ADDR_VAR 0 63
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67560: LD_ADDR_VAR 0 64
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 2
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// end ; 2 :
67606: GO 70872
67608: LD_INT 2
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67616
67614: GO 70871
67616: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67617: LD_ADDR_VAR 0 29
67621: PUSH
67622: LD_INT 4
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 5
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: LD_INT 2
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 5
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 4
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 4
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 5
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 4
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 2
67923: NEG
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 4
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 4
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: NEG
67992: PUSH
67993: LD_INT 2
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: NEG
68003: PUSH
68004: LD_INT 4
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: LD_INT 5
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 4
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 4
68050: NEG
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 5
68062: NEG
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: LD_INT 5
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 3
68086: NEG
68087: PUSH
68088: LD_INT 5
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 5
68098: NEG
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68155: LD_ADDR_VAR 0 30
68159: PUSH
68160: LD_INT 4
68162: PUSH
68163: LD_INT 4
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 5
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 5
68192: PUSH
68193: LD_INT 5
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 4
68202: PUSH
68203: LD_INT 5
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: LD_INT 3
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 5
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 5
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: NEG
68335: PUSH
68336: LD_INT 2
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 4
68345: NEG
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 4
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 3
68368: NEG
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 4
68390: NEG
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 5
68401: NEG
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 5
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 5
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: LD_INT 2
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: LD_INT 3
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 4
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: NEG
68520: PUSH
68521: LD_INT 4
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 2
68531: NEG
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 4
68543: NEG
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: LD_INT 4
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 5
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: LD_INT 4
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 3
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 3
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 5
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 5
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68702: LD_ADDR_VAR 0 31
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 4
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: LD_INT 3
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: LD_INT 5
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: NEG
68760: PUSH
68761: LD_INT 4
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 2
68781: PUSH
68782: LD_INT 5
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 2
68791: NEG
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 3
68802: NEG
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: LD_INT 1
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 2
68825: NEG
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PUSH
68838: LD_INT 1
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 3
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 4
68858: NEG
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 4
68869: NEG
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: LD_INT 2
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: NEG
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: LD_INT 5
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: NEG
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 5
68964: NEG
68965: PUSH
68966: LD_INT 4
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 5
68976: NEG
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: LD_INT 5
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 5
69000: NEG
69001: PUSH
69002: LD_INT 3
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 3
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: LD_INT 3
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: LD_INT 4
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 2
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 2
69102: NEG
69103: PUSH
69104: LD_INT 4
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 5
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 5
69145: PUSH
69146: LD_INT 1
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 4
69155: PUSH
69156: LD_INT 1
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: LD_INT 1
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 3
69186: PUSH
69187: LD_INT 2
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: PUSH
69198: LD_INT 2
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69252: LD_ADDR_VAR 0 32
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 4
69270: NEG
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 3
69282: NEG
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 3
69293: NEG
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 5
69315: NEG
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 5
69326: NEG
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: LD_INT 2
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 4
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 4
69421: NEG
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: LD_INT 4
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: LD_INT 4
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 4
69457: NEG
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: LD_INT 4
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 5
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: LD_INT 4
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 3
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: LD_INT 4
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: LD_INT 5
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 2
69559: NEG
69560: PUSH
69561: LD_INT 5
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 4
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: LD_INT 4
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 4
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 5
69684: PUSH
69685: LD_INT 4
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 5
69694: PUSH
69695: LD_INT 5
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 4
69704: PUSH
69705: LD_INT 5
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: PUSH
69715: LD_INT 4
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 3
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 5
69734: PUSH
69735: LD_INT 3
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: LD_INT 5
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69799: LD_ADDR_VAR 0 33
69803: PUSH
69804: LD_INT 4
69806: NEG
69807: PUSH
69808: LD_INT 4
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: LD_INT 5
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 3
69830: NEG
69831: PUSH
69832: LD_INT 4
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 3
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 4
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 5
69866: NEG
69867: PUSH
69868: LD_INT 4
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 5
69878: NEG
69879: PUSH
69880: LD_INT 5
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: LD_INT 5
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 5
69902: NEG
69903: PUSH
69904: LD_INT 3
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: LD_INT 3
69917: NEG
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 4
69928: NEG
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 1
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: LD_INT 2
69950: NEG
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 2
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 1
69969: NEG
69970: PUSH
69971: LD_INT 3
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 4
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: LD_INT 2
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 2
70004: NEG
70005: PUSH
70006: LD_INT 4
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 4
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 5
70047: PUSH
70048: LD_INT 1
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: LD_INT 1
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: LD_INT 1
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: LD_INT 2
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: PUSH
70100: LD_INT 2
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 3
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 2
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 4
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 4
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: LD_INT 4
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 2
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 2
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 4
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 4
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: LD_INT 4
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 1
70229: PUSH
70230: LD_INT 5
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 5
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: LD_INT 4
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: LD_INT 3
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 2
70271: PUSH
70272: LD_INT 5
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70337: LD_ADDR_VAR 0 34
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 5
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: LD_INT 4
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: PUSH
70378: LD_INT 3
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 3
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 1
70399: NEG
70400: PUSH
70401: LD_INT 4
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: LD_INT 5
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: PUSH
70424: LD_INT 3
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 2
70434: NEG
70435: PUSH
70436: LD_INT 5
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 3
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 4
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 4
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 2
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 4
70529: PUSH
70530: LD_INT 2
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 4
70539: PUSH
70540: LD_INT 4
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: LD_INT 3
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 5
70559: PUSH
70560: LD_INT 4
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 5
70569: PUSH
70570: LD_INT 5
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 4
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 3
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 5
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: LD_INT 5
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: LD_INT 3
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: LD_INT 2
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 1
70649: PUSH
70650: LD_INT 3
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 1
70659: PUSH
70660: LD_INT 4
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: LD_INT 4
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 1
70679: NEG
70680: PUSH
70681: LD_INT 3
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 1
70690: NEG
70691: PUSH
70692: LD_INT 2
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 4
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 2
70711: NEG
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 4
70733: NEG
70734: PUSH
70735: LD_INT 1
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 3
70756: NEG
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 5
70778: NEG
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 5
70789: NEG
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 5
70801: NEG
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: NEG
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: ST_TO_ADDR
// end ; end ;
70869: GO 70872
70871: POP
// case btype of b_depot , b_warehouse :
70872: LD_VAR 0 1
70876: PUSH
70877: LD_INT 0
70879: DOUBLE
70880: EQUAL
70881: IFTRUE 70891
70883: LD_INT 1
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 71092
70891: POP
// case nation of nation_american :
70892: LD_VAR 0 5
70896: PUSH
70897: LD_INT 1
70899: DOUBLE
70900: EQUAL
70901: IFTRUE 70905
70903: GO 70961
70905: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70906: LD_ADDR_VAR 0 9
70910: PUSH
70911: LD_VAR 0 11
70915: PUSH
70916: LD_VAR 0 12
70920: PUSH
70921: LD_VAR 0 13
70925: PUSH
70926: LD_VAR 0 14
70930: PUSH
70931: LD_VAR 0 15
70935: PUSH
70936: LD_VAR 0 16
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: PUSH
70949: LD_VAR 0 4
70953: PUSH
70954: LD_INT 1
70956: PLUS
70957: ARRAY
70958: ST_TO_ADDR
70959: GO 71090
70961: LD_INT 2
70963: DOUBLE
70964: EQUAL
70965: IFTRUE 70969
70967: GO 71025
70969: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70970: LD_ADDR_VAR 0 9
70974: PUSH
70975: LD_VAR 0 17
70979: PUSH
70980: LD_VAR 0 18
70984: PUSH
70985: LD_VAR 0 19
70989: PUSH
70990: LD_VAR 0 20
70994: PUSH
70995: LD_VAR 0 21
70999: PUSH
71000: LD_VAR 0 22
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: PUSH
71013: LD_VAR 0 4
71017: PUSH
71018: LD_INT 1
71020: PLUS
71021: ARRAY
71022: ST_TO_ADDR
71023: GO 71090
71025: LD_INT 3
71027: DOUBLE
71028: EQUAL
71029: IFTRUE 71033
71031: GO 71089
71033: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71034: LD_ADDR_VAR 0 9
71038: PUSH
71039: LD_VAR 0 23
71043: PUSH
71044: LD_VAR 0 24
71048: PUSH
71049: LD_VAR 0 25
71053: PUSH
71054: LD_VAR 0 26
71058: PUSH
71059: LD_VAR 0 27
71063: PUSH
71064: LD_VAR 0 28
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: PUSH
71077: LD_VAR 0 4
71081: PUSH
71082: LD_INT 1
71084: PLUS
71085: ARRAY
71086: ST_TO_ADDR
71087: GO 71090
71089: POP
71090: GO 71645
71092: LD_INT 2
71094: DOUBLE
71095: EQUAL
71096: IFTRUE 71106
71098: LD_INT 3
71100: DOUBLE
71101: EQUAL
71102: IFTRUE 71106
71104: GO 71162
71106: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71107: LD_ADDR_VAR 0 9
71111: PUSH
71112: LD_VAR 0 29
71116: PUSH
71117: LD_VAR 0 30
71121: PUSH
71122: LD_VAR 0 31
71126: PUSH
71127: LD_VAR 0 32
71131: PUSH
71132: LD_VAR 0 33
71136: PUSH
71137: LD_VAR 0 34
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: PUSH
71150: LD_VAR 0 4
71154: PUSH
71155: LD_INT 1
71157: PLUS
71158: ARRAY
71159: ST_TO_ADDR
71160: GO 71645
71162: LD_INT 16
71164: DOUBLE
71165: EQUAL
71166: IFTRUE 71224
71168: LD_INT 17
71170: DOUBLE
71171: EQUAL
71172: IFTRUE 71224
71174: LD_INT 18
71176: DOUBLE
71177: EQUAL
71178: IFTRUE 71224
71180: LD_INT 19
71182: DOUBLE
71183: EQUAL
71184: IFTRUE 71224
71186: LD_INT 22
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71224
71192: LD_INT 20
71194: DOUBLE
71195: EQUAL
71196: IFTRUE 71224
71198: LD_INT 21
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71224
71204: LD_INT 23
71206: DOUBLE
71207: EQUAL
71208: IFTRUE 71224
71210: LD_INT 24
71212: DOUBLE
71213: EQUAL
71214: IFTRUE 71224
71216: LD_INT 25
71218: DOUBLE
71219: EQUAL
71220: IFTRUE 71224
71222: GO 71280
71224: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71225: LD_ADDR_VAR 0 9
71229: PUSH
71230: LD_VAR 0 35
71234: PUSH
71235: LD_VAR 0 36
71239: PUSH
71240: LD_VAR 0 37
71244: PUSH
71245: LD_VAR 0 38
71249: PUSH
71250: LD_VAR 0 39
71254: PUSH
71255: LD_VAR 0 40
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: PUSH
71268: LD_VAR 0 4
71272: PUSH
71273: LD_INT 1
71275: PLUS
71276: ARRAY
71277: ST_TO_ADDR
71278: GO 71645
71280: LD_INT 6
71282: DOUBLE
71283: EQUAL
71284: IFTRUE 71336
71286: LD_INT 7
71288: DOUBLE
71289: EQUAL
71290: IFTRUE 71336
71292: LD_INT 8
71294: DOUBLE
71295: EQUAL
71296: IFTRUE 71336
71298: LD_INT 13
71300: DOUBLE
71301: EQUAL
71302: IFTRUE 71336
71304: LD_INT 12
71306: DOUBLE
71307: EQUAL
71308: IFTRUE 71336
71310: LD_INT 15
71312: DOUBLE
71313: EQUAL
71314: IFTRUE 71336
71316: LD_INT 11
71318: DOUBLE
71319: EQUAL
71320: IFTRUE 71336
71322: LD_INT 14
71324: DOUBLE
71325: EQUAL
71326: IFTRUE 71336
71328: LD_INT 10
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71336
71334: GO 71392
71336: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71337: LD_ADDR_VAR 0 9
71341: PUSH
71342: LD_VAR 0 41
71346: PUSH
71347: LD_VAR 0 42
71351: PUSH
71352: LD_VAR 0 43
71356: PUSH
71357: LD_VAR 0 44
71361: PUSH
71362: LD_VAR 0 45
71366: PUSH
71367: LD_VAR 0 46
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: PUSH
71380: LD_VAR 0 4
71384: PUSH
71385: LD_INT 1
71387: PLUS
71388: ARRAY
71389: ST_TO_ADDR
71390: GO 71645
71392: LD_INT 36
71394: DOUBLE
71395: EQUAL
71396: IFTRUE 71400
71398: GO 71456
71400: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71401: LD_ADDR_VAR 0 9
71405: PUSH
71406: LD_VAR 0 47
71410: PUSH
71411: LD_VAR 0 48
71415: PUSH
71416: LD_VAR 0 49
71420: PUSH
71421: LD_VAR 0 50
71425: PUSH
71426: LD_VAR 0 51
71430: PUSH
71431: LD_VAR 0 52
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: PUSH
71444: LD_VAR 0 4
71448: PUSH
71449: LD_INT 1
71451: PLUS
71452: ARRAY
71453: ST_TO_ADDR
71454: GO 71645
71456: LD_INT 4
71458: DOUBLE
71459: EQUAL
71460: IFTRUE 71482
71462: LD_INT 5
71464: DOUBLE
71465: EQUAL
71466: IFTRUE 71482
71468: LD_INT 34
71470: DOUBLE
71471: EQUAL
71472: IFTRUE 71482
71474: LD_INT 37
71476: DOUBLE
71477: EQUAL
71478: IFTRUE 71482
71480: GO 71538
71482: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71483: LD_ADDR_VAR 0 9
71487: PUSH
71488: LD_VAR 0 53
71492: PUSH
71493: LD_VAR 0 54
71497: PUSH
71498: LD_VAR 0 55
71502: PUSH
71503: LD_VAR 0 56
71507: PUSH
71508: LD_VAR 0 57
71512: PUSH
71513: LD_VAR 0 58
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: LD_VAR 0 4
71530: PUSH
71531: LD_INT 1
71533: PLUS
71534: ARRAY
71535: ST_TO_ADDR
71536: GO 71645
71538: LD_INT 31
71540: DOUBLE
71541: EQUAL
71542: IFTRUE 71588
71544: LD_INT 32
71546: DOUBLE
71547: EQUAL
71548: IFTRUE 71588
71550: LD_INT 33
71552: DOUBLE
71553: EQUAL
71554: IFTRUE 71588
71556: LD_INT 27
71558: DOUBLE
71559: EQUAL
71560: IFTRUE 71588
71562: LD_INT 26
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71588
71568: LD_INT 28
71570: DOUBLE
71571: EQUAL
71572: IFTRUE 71588
71574: LD_INT 29
71576: DOUBLE
71577: EQUAL
71578: IFTRUE 71588
71580: LD_INT 30
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71588
71586: GO 71644
71588: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71589: LD_ADDR_VAR 0 9
71593: PUSH
71594: LD_VAR 0 59
71598: PUSH
71599: LD_VAR 0 60
71603: PUSH
71604: LD_VAR 0 61
71608: PUSH
71609: LD_VAR 0 62
71613: PUSH
71614: LD_VAR 0 63
71618: PUSH
71619: LD_VAR 0 64
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: PUSH
71632: LD_VAR 0 4
71636: PUSH
71637: LD_INT 1
71639: PLUS
71640: ARRAY
71641: ST_TO_ADDR
71642: GO 71645
71644: POP
// temp_list2 = [ ] ;
71645: LD_ADDR_VAR 0 10
71649: PUSH
71650: EMPTY
71651: ST_TO_ADDR
// for i in temp_list do
71652: LD_ADDR_VAR 0 8
71656: PUSH
71657: LD_VAR 0 9
71661: PUSH
71662: FOR_IN
71663: IFFALSE 71715
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71665: LD_ADDR_VAR 0 10
71669: PUSH
71670: LD_VAR 0 10
71674: PUSH
71675: LD_VAR 0 8
71679: PUSH
71680: LD_INT 1
71682: ARRAY
71683: PUSH
71684: LD_VAR 0 2
71688: PLUS
71689: PUSH
71690: LD_VAR 0 8
71694: PUSH
71695: LD_INT 2
71697: ARRAY
71698: PUSH
71699: LD_VAR 0 3
71703: PLUS
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: EMPTY
71710: LIST
71711: ADD
71712: ST_TO_ADDR
71713: GO 71662
71715: POP
71716: POP
// result = temp_list2 ;
71717: LD_ADDR_VAR 0 7
71721: PUSH
71722: LD_VAR 0 10
71726: ST_TO_ADDR
// end ;
71727: LD_VAR 0 7
71731: RET
// export function EnemyInRange ( unit , dist ) ; begin
71732: LD_INT 0
71734: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71735: LD_ADDR_VAR 0 3
71739: PUSH
71740: LD_VAR 0 1
71744: PPUSH
71745: CALL_OW 255
71749: PPUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: CALL_OW 250
71759: PPUSH
71760: LD_VAR 0 1
71764: PPUSH
71765: CALL_OW 251
71769: PPUSH
71770: LD_VAR 0 2
71774: PPUSH
71775: CALL 45128 0 4
71779: PUSH
71780: LD_INT 4
71782: ARRAY
71783: ST_TO_ADDR
// end ;
71784: LD_VAR 0 3
71788: RET
// export function PlayerSeeMe ( unit ) ; begin
71789: LD_INT 0
71791: PPUSH
// result := See ( your_side , unit ) ;
71792: LD_ADDR_VAR 0 2
71796: PUSH
71797: LD_OWVAR 2
71801: PPUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 292
71811: ST_TO_ADDR
// end ;
71812: LD_VAR 0 2
71816: RET
// export function ReverseDir ( unit ) ; begin
71817: LD_INT 0
71819: PPUSH
// if not unit then
71820: LD_VAR 0 1
71824: NOT
71825: IFFALSE 71829
// exit ;
71827: GO 71852
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71829: LD_ADDR_VAR 0 2
71833: PUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: CALL_OW 254
71843: PUSH
71844: LD_INT 3
71846: PLUS
71847: PUSH
71848: LD_INT 6
71850: MOD
71851: ST_TO_ADDR
// end ;
71852: LD_VAR 0 2
71856: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71857: LD_INT 0
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
// if not hexes then
71864: LD_VAR 0 2
71868: NOT
71869: IFFALSE 71873
// exit ;
71871: GO 72021
// dist := 9999 ;
71873: LD_ADDR_VAR 0 5
71877: PUSH
71878: LD_INT 9999
71880: ST_TO_ADDR
// for i = 1 to hexes do
71881: LD_ADDR_VAR 0 4
71885: PUSH
71886: DOUBLE
71887: LD_INT 1
71889: DEC
71890: ST_TO_ADDR
71891: LD_VAR 0 2
71895: PUSH
71896: FOR_TO
71897: IFFALSE 72009
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_VAR 0 2
71908: PUSH
71909: LD_VAR 0 4
71913: ARRAY
71914: PUSH
71915: LD_INT 1
71917: ARRAY
71918: PPUSH
71919: LD_VAR 0 2
71923: PUSH
71924: LD_VAR 0 4
71928: ARRAY
71929: PUSH
71930: LD_INT 2
71932: ARRAY
71933: PPUSH
71934: CALL_OW 297
71938: PUSH
71939: LD_VAR 0 5
71943: LESS
71944: IFFALSE 72007
// begin hex := hexes [ i ] ;
71946: LD_ADDR_VAR 0 7
71950: PUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_VAR 0 4
71960: ARRAY
71961: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71962: LD_ADDR_VAR 0 5
71966: PUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: LD_VAR 0 2
71976: PUSH
71977: LD_VAR 0 4
71981: ARRAY
71982: PUSH
71983: LD_INT 1
71985: ARRAY
71986: PPUSH
71987: LD_VAR 0 2
71991: PUSH
71992: LD_VAR 0 4
71996: ARRAY
71997: PUSH
71998: LD_INT 2
72000: ARRAY
72001: PPUSH
72002: CALL_OW 297
72006: ST_TO_ADDR
// end ; end ;
72007: GO 71896
72009: POP
72010: POP
// result := hex ;
72011: LD_ADDR_VAR 0 3
72015: PUSH
72016: LD_VAR 0 7
72020: ST_TO_ADDR
// end ;
72021: LD_VAR 0 3
72025: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72026: LD_INT 0
72028: PPUSH
72029: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72030: LD_VAR 0 1
72034: NOT
72035: PUSH
72036: LD_VAR 0 1
72040: PUSH
72041: LD_INT 21
72043: PUSH
72044: LD_INT 2
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 23
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PPUSH
72065: CALL_OW 69
72069: IN
72070: NOT
72071: OR
72072: IFFALSE 72076
// exit ;
72074: GO 72123
// for i = 1 to 3 do
72076: LD_ADDR_VAR 0 3
72080: PUSH
72081: DOUBLE
72082: LD_INT 1
72084: DEC
72085: ST_TO_ADDR
72086: LD_INT 3
72088: PUSH
72089: FOR_TO
72090: IFFALSE 72121
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72092: LD_VAR 0 1
72096: PPUSH
72097: CALL_OW 250
72101: PPUSH
72102: LD_VAR 0 1
72106: PPUSH
72107: CALL_OW 251
72111: PPUSH
72112: LD_INT 1
72114: PPUSH
72115: CALL_OW 453
72119: GO 72089
72121: POP
72122: POP
// end ;
72123: LD_VAR 0 2
72127: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72128: LD_INT 0
72130: PPUSH
72131: PPUSH
72132: PPUSH
72133: PPUSH
72134: PPUSH
72135: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72136: LD_VAR 0 1
72140: NOT
72141: PUSH
72142: LD_VAR 0 2
72146: NOT
72147: OR
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: CALL_OW 314
72158: OR
72159: IFFALSE 72163
// exit ;
72161: GO 72604
// x := GetX ( enemy_unit ) ;
72163: LD_ADDR_VAR 0 7
72167: PUSH
72168: LD_VAR 0 2
72172: PPUSH
72173: CALL_OW 250
72177: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72178: LD_ADDR_VAR 0 8
72182: PUSH
72183: LD_VAR 0 2
72187: PPUSH
72188: CALL_OW 251
72192: ST_TO_ADDR
// if not x or not y then
72193: LD_VAR 0 7
72197: NOT
72198: PUSH
72199: LD_VAR 0 8
72203: NOT
72204: OR
72205: IFFALSE 72209
// exit ;
72207: GO 72604
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72209: LD_ADDR_VAR 0 6
72213: PUSH
72214: LD_VAR 0 7
72218: PPUSH
72219: LD_INT 0
72221: PPUSH
72222: LD_INT 4
72224: PPUSH
72225: CALL_OW 272
72229: PUSH
72230: LD_VAR 0 8
72234: PPUSH
72235: LD_INT 0
72237: PPUSH
72238: LD_INT 4
72240: PPUSH
72241: CALL_OW 273
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_VAR 0 7
72254: PPUSH
72255: LD_INT 1
72257: PPUSH
72258: LD_INT 4
72260: PPUSH
72261: CALL_OW 272
72265: PUSH
72266: LD_VAR 0 8
72270: PPUSH
72271: LD_INT 1
72273: PPUSH
72274: LD_INT 4
72276: PPUSH
72277: CALL_OW 273
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_VAR 0 7
72290: PPUSH
72291: LD_INT 2
72293: PPUSH
72294: LD_INT 4
72296: PPUSH
72297: CALL_OW 272
72301: PUSH
72302: LD_VAR 0 8
72306: PPUSH
72307: LD_INT 2
72309: PPUSH
72310: LD_INT 4
72312: PPUSH
72313: CALL_OW 273
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_VAR 0 7
72326: PPUSH
72327: LD_INT 3
72329: PPUSH
72330: LD_INT 4
72332: PPUSH
72333: CALL_OW 272
72337: PUSH
72338: LD_VAR 0 8
72342: PPUSH
72343: LD_INT 3
72345: PPUSH
72346: LD_INT 4
72348: PPUSH
72349: CALL_OW 273
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_VAR 0 7
72362: PPUSH
72363: LD_INT 4
72365: PPUSH
72366: LD_INT 4
72368: PPUSH
72369: CALL_OW 272
72373: PUSH
72374: LD_VAR 0 8
72378: PPUSH
72379: LD_INT 4
72381: PPUSH
72382: LD_INT 4
72384: PPUSH
72385: CALL_OW 273
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_VAR 0 7
72398: PPUSH
72399: LD_INT 5
72401: PPUSH
72402: LD_INT 4
72404: PPUSH
72405: CALL_OW 272
72409: PUSH
72410: LD_VAR 0 8
72414: PPUSH
72415: LD_INT 5
72417: PPUSH
72418: LD_INT 4
72420: PPUSH
72421: CALL_OW 273
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: ST_TO_ADDR
// for i = tmp downto 1 do
72438: LD_ADDR_VAR 0 4
72442: PUSH
72443: DOUBLE
72444: LD_VAR 0 6
72448: INC
72449: ST_TO_ADDR
72450: LD_INT 1
72452: PUSH
72453: FOR_DOWNTO
72454: IFFALSE 72555
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72456: LD_VAR 0 6
72460: PUSH
72461: LD_VAR 0 4
72465: ARRAY
72466: PUSH
72467: LD_INT 1
72469: ARRAY
72470: PPUSH
72471: LD_VAR 0 6
72475: PUSH
72476: LD_VAR 0 4
72480: ARRAY
72481: PUSH
72482: LD_INT 2
72484: ARRAY
72485: PPUSH
72486: CALL_OW 488
72490: NOT
72491: PUSH
72492: LD_VAR 0 6
72496: PUSH
72497: LD_VAR 0 4
72501: ARRAY
72502: PUSH
72503: LD_INT 1
72505: ARRAY
72506: PPUSH
72507: LD_VAR 0 6
72511: PUSH
72512: LD_VAR 0 4
72516: ARRAY
72517: PUSH
72518: LD_INT 2
72520: ARRAY
72521: PPUSH
72522: CALL_OW 428
72526: PUSH
72527: LD_INT 0
72529: NONEQUAL
72530: OR
72531: IFFALSE 72553
// tmp := Delete ( tmp , i ) ;
72533: LD_ADDR_VAR 0 6
72537: PUSH
72538: LD_VAR 0 6
72542: PPUSH
72543: LD_VAR 0 4
72547: PPUSH
72548: CALL_OW 3
72552: ST_TO_ADDR
72553: GO 72453
72555: POP
72556: POP
// j := GetClosestHex ( unit , tmp ) ;
72557: LD_ADDR_VAR 0 5
72561: PUSH
72562: LD_VAR 0 1
72566: PPUSH
72567: LD_VAR 0 6
72571: PPUSH
72572: CALL 71857 0 2
72576: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72577: LD_VAR 0 1
72581: PPUSH
72582: LD_VAR 0 5
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PPUSH
72591: LD_VAR 0 5
72595: PUSH
72596: LD_INT 2
72598: ARRAY
72599: PPUSH
72600: CALL_OW 111
// end ;
72604: LD_VAR 0 3
72608: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72609: LD_INT 0
72611: PPUSH
72612: PPUSH
72613: PPUSH
// uc_side = 0 ;
72614: LD_ADDR_OWVAR 20
72618: PUSH
72619: LD_INT 0
72621: ST_TO_ADDR
// uc_nation = 0 ;
72622: LD_ADDR_OWVAR 21
72626: PUSH
72627: LD_INT 0
72629: ST_TO_ADDR
// InitHc_All ( ) ;
72630: CALL_OW 584
// InitVc ;
72634: CALL_OW 20
// if mastodonts then
72638: LD_VAR 0 6
72642: IFFALSE 72709
// for i = 1 to mastodonts do
72644: LD_ADDR_VAR 0 11
72648: PUSH
72649: DOUBLE
72650: LD_INT 1
72652: DEC
72653: ST_TO_ADDR
72654: LD_VAR 0 6
72658: PUSH
72659: FOR_TO
72660: IFFALSE 72707
// begin vc_chassis := 31 ;
72662: LD_ADDR_OWVAR 37
72666: PUSH
72667: LD_INT 31
72669: ST_TO_ADDR
// vc_control := control_rider ;
72670: LD_ADDR_OWVAR 38
72674: PUSH
72675: LD_INT 4
72677: ST_TO_ADDR
// animal := CreateVehicle ;
72678: LD_ADDR_VAR 0 12
72682: PUSH
72683: CALL_OW 45
72687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72688: LD_VAR 0 12
72692: PPUSH
72693: LD_VAR 0 8
72697: PPUSH
72698: LD_INT 0
72700: PPUSH
72701: CALL 74844 0 3
// end ;
72705: GO 72659
72707: POP
72708: POP
// if horses then
72709: LD_VAR 0 5
72713: IFFALSE 72780
// for i = 1 to horses do
72715: LD_ADDR_VAR 0 11
72719: PUSH
72720: DOUBLE
72721: LD_INT 1
72723: DEC
72724: ST_TO_ADDR
72725: LD_VAR 0 5
72729: PUSH
72730: FOR_TO
72731: IFFALSE 72778
// begin hc_class := 21 ;
72733: LD_ADDR_OWVAR 28
72737: PUSH
72738: LD_INT 21
72740: ST_TO_ADDR
// hc_gallery :=  ;
72741: LD_ADDR_OWVAR 33
72745: PUSH
72746: LD_STRING 
72748: ST_TO_ADDR
// animal := CreateHuman ;
72749: LD_ADDR_VAR 0 12
72753: PUSH
72754: CALL_OW 44
72758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72759: LD_VAR 0 12
72763: PPUSH
72764: LD_VAR 0 8
72768: PPUSH
72769: LD_INT 0
72771: PPUSH
72772: CALL 74844 0 3
// end ;
72776: GO 72730
72778: POP
72779: POP
// if birds then
72780: LD_VAR 0 1
72784: IFFALSE 72851
// for i = 1 to birds do
72786: LD_ADDR_VAR 0 11
72790: PUSH
72791: DOUBLE
72792: LD_INT 1
72794: DEC
72795: ST_TO_ADDR
72796: LD_VAR 0 1
72800: PUSH
72801: FOR_TO
72802: IFFALSE 72849
// begin hc_class = 18 ;
72804: LD_ADDR_OWVAR 28
72808: PUSH
72809: LD_INT 18
72811: ST_TO_ADDR
// hc_gallery =  ;
72812: LD_ADDR_OWVAR 33
72816: PUSH
72817: LD_STRING 
72819: ST_TO_ADDR
// animal := CreateHuman ;
72820: LD_ADDR_VAR 0 12
72824: PUSH
72825: CALL_OW 44
72829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72830: LD_VAR 0 12
72834: PPUSH
72835: LD_VAR 0 8
72839: PPUSH
72840: LD_INT 0
72842: PPUSH
72843: CALL 74844 0 3
// end ;
72847: GO 72801
72849: POP
72850: POP
// if tigers then
72851: LD_VAR 0 2
72855: IFFALSE 72939
// for i = 1 to tigers do
72857: LD_ADDR_VAR 0 11
72861: PUSH
72862: DOUBLE
72863: LD_INT 1
72865: DEC
72866: ST_TO_ADDR
72867: LD_VAR 0 2
72871: PUSH
72872: FOR_TO
72873: IFFALSE 72937
// begin hc_class = class_tiger ;
72875: LD_ADDR_OWVAR 28
72879: PUSH
72880: LD_INT 14
72882: ST_TO_ADDR
// hc_gallery =  ;
72883: LD_ADDR_OWVAR 33
72887: PUSH
72888: LD_STRING 
72890: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72891: LD_ADDR_OWVAR 35
72895: PUSH
72896: LD_INT 7
72898: NEG
72899: PPUSH
72900: LD_INT 7
72902: PPUSH
72903: CALL_OW 12
72907: ST_TO_ADDR
// animal := CreateHuman ;
72908: LD_ADDR_VAR 0 12
72912: PUSH
72913: CALL_OW 44
72917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72918: LD_VAR 0 12
72922: PPUSH
72923: LD_VAR 0 8
72927: PPUSH
72928: LD_INT 0
72930: PPUSH
72931: CALL 74844 0 3
// end ;
72935: GO 72872
72937: POP
72938: POP
// if apemans then
72939: LD_VAR 0 3
72943: IFFALSE 73066
// for i = 1 to apemans do
72945: LD_ADDR_VAR 0 11
72949: PUSH
72950: DOUBLE
72951: LD_INT 1
72953: DEC
72954: ST_TO_ADDR
72955: LD_VAR 0 3
72959: PUSH
72960: FOR_TO
72961: IFFALSE 73064
// begin hc_class = class_apeman ;
72963: LD_ADDR_OWVAR 28
72967: PUSH
72968: LD_INT 12
72970: ST_TO_ADDR
// hc_gallery =  ;
72971: LD_ADDR_OWVAR 33
72975: PUSH
72976: LD_STRING 
72978: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72979: LD_ADDR_OWVAR 35
72983: PUSH
72984: LD_INT 2
72986: NEG
72987: PPUSH
72988: LD_INT 2
72990: PPUSH
72991: CALL_OW 12
72995: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72996: LD_ADDR_OWVAR 31
73000: PUSH
73001: LD_INT 1
73003: PPUSH
73004: LD_INT 3
73006: PPUSH
73007: CALL_OW 12
73011: PUSH
73012: LD_INT 1
73014: PPUSH
73015: LD_INT 3
73017: PPUSH
73018: CALL_OW 12
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: LD_INT 0
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: ST_TO_ADDR
// animal := CreateHuman ;
73035: LD_ADDR_VAR 0 12
73039: PUSH
73040: CALL_OW 44
73044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73045: LD_VAR 0 12
73049: PPUSH
73050: LD_VAR 0 8
73054: PPUSH
73055: LD_INT 0
73057: PPUSH
73058: CALL 74844 0 3
// end ;
73062: GO 72960
73064: POP
73065: POP
// if enchidnas then
73066: LD_VAR 0 4
73070: IFFALSE 73137
// for i = 1 to enchidnas do
73072: LD_ADDR_VAR 0 11
73076: PUSH
73077: DOUBLE
73078: LD_INT 1
73080: DEC
73081: ST_TO_ADDR
73082: LD_VAR 0 4
73086: PUSH
73087: FOR_TO
73088: IFFALSE 73135
// begin hc_class = 13 ;
73090: LD_ADDR_OWVAR 28
73094: PUSH
73095: LD_INT 13
73097: ST_TO_ADDR
// hc_gallery =  ;
73098: LD_ADDR_OWVAR 33
73102: PUSH
73103: LD_STRING 
73105: ST_TO_ADDR
// animal := CreateHuman ;
73106: LD_ADDR_VAR 0 12
73110: PUSH
73111: CALL_OW 44
73115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73116: LD_VAR 0 12
73120: PPUSH
73121: LD_VAR 0 8
73125: PPUSH
73126: LD_INT 0
73128: PPUSH
73129: CALL 74844 0 3
// end ;
73133: GO 73087
73135: POP
73136: POP
// if fishes then
73137: LD_VAR 0 7
73141: IFFALSE 73208
// for i = 1 to fishes do
73143: LD_ADDR_VAR 0 11
73147: PUSH
73148: DOUBLE
73149: LD_INT 1
73151: DEC
73152: ST_TO_ADDR
73153: LD_VAR 0 7
73157: PUSH
73158: FOR_TO
73159: IFFALSE 73206
// begin hc_class = 20 ;
73161: LD_ADDR_OWVAR 28
73165: PUSH
73166: LD_INT 20
73168: ST_TO_ADDR
// hc_gallery =  ;
73169: LD_ADDR_OWVAR 33
73173: PUSH
73174: LD_STRING 
73176: ST_TO_ADDR
// animal := CreateHuman ;
73177: LD_ADDR_VAR 0 12
73181: PUSH
73182: CALL_OW 44
73186: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73187: LD_VAR 0 12
73191: PPUSH
73192: LD_VAR 0 9
73196: PPUSH
73197: LD_INT 0
73199: PPUSH
73200: CALL 74844 0 3
// end ;
73204: GO 73158
73206: POP
73207: POP
// end ;
73208: LD_VAR 0 10
73212: RET
// export function WantHeal ( sci , unit ) ; begin
73213: LD_INT 0
73215: PPUSH
// if GetTaskList ( sci ) > 0 then
73216: LD_VAR 0 1
73220: PPUSH
73221: CALL_OW 437
73225: PUSH
73226: LD_INT 0
73228: GREATER
73229: IFFALSE 73299
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73231: LD_VAR 0 1
73235: PPUSH
73236: CALL_OW 437
73240: PUSH
73241: LD_INT 1
73243: ARRAY
73244: PUSH
73245: LD_INT 1
73247: ARRAY
73248: PUSH
73249: LD_STRING l
73251: EQUAL
73252: PUSH
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 437
73262: PUSH
73263: LD_INT 1
73265: ARRAY
73266: PUSH
73267: LD_INT 4
73269: ARRAY
73270: PUSH
73271: LD_VAR 0 2
73275: EQUAL
73276: AND
73277: IFFALSE 73289
// result := true else
73279: LD_ADDR_VAR 0 3
73283: PUSH
73284: LD_INT 1
73286: ST_TO_ADDR
73287: GO 73297
// result := false ;
73289: LD_ADDR_VAR 0 3
73293: PUSH
73294: LD_INT 0
73296: ST_TO_ADDR
// end else
73297: GO 73307
// result := false ;
73299: LD_ADDR_VAR 0 3
73303: PUSH
73304: LD_INT 0
73306: ST_TO_ADDR
// end ;
73307: LD_VAR 0 3
73311: RET
// export function HealTarget ( sci ) ; begin
73312: LD_INT 0
73314: PPUSH
// if not sci then
73315: LD_VAR 0 1
73319: NOT
73320: IFFALSE 73324
// exit ;
73322: GO 73389
// result := 0 ;
73324: LD_ADDR_VAR 0 2
73328: PUSH
73329: LD_INT 0
73331: ST_TO_ADDR
// if GetTaskList ( sci ) then
73332: LD_VAR 0 1
73336: PPUSH
73337: CALL_OW 437
73341: IFFALSE 73389
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73343: LD_VAR 0 1
73347: PPUSH
73348: CALL_OW 437
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PUSH
73361: LD_STRING l
73363: EQUAL
73364: IFFALSE 73389
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_VAR 0 1
73375: PPUSH
73376: CALL_OW 437
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: PUSH
73385: LD_INT 4
73387: ARRAY
73388: ST_TO_ADDR
// end ;
73389: LD_VAR 0 2
73393: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73394: LD_INT 0
73396: PPUSH
73397: PPUSH
73398: PPUSH
73399: PPUSH
// if not base_units then
73400: LD_VAR 0 1
73404: NOT
73405: IFFALSE 73409
// exit ;
73407: GO 73496
// result := false ;
73409: LD_ADDR_VAR 0 2
73413: PUSH
73414: LD_INT 0
73416: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73417: LD_ADDR_VAR 0 5
73421: PUSH
73422: LD_VAR 0 1
73426: PPUSH
73427: LD_INT 21
73429: PUSH
73430: LD_INT 3
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PPUSH
73437: CALL_OW 72
73441: ST_TO_ADDR
// if not tmp then
73442: LD_VAR 0 5
73446: NOT
73447: IFFALSE 73451
// exit ;
73449: GO 73496
// for i in tmp do
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: LD_VAR 0 5
73460: PUSH
73461: FOR_IN
73462: IFFALSE 73494
// begin result := EnemyInRange ( i , 22 ) ;
73464: LD_ADDR_VAR 0 2
73468: PUSH
73469: LD_VAR 0 3
73473: PPUSH
73474: LD_INT 22
73476: PPUSH
73477: CALL 71732 0 2
73481: ST_TO_ADDR
// if result then
73482: LD_VAR 0 2
73486: IFFALSE 73492
// exit ;
73488: POP
73489: POP
73490: GO 73496
// end ;
73492: GO 73461
73494: POP
73495: POP
// end ;
73496: LD_VAR 0 2
73500: RET
// export function FilterByTag ( units , tag ) ; begin
73501: LD_INT 0
73503: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: LD_INT 120
73516: PUSH
73517: LD_VAR 0 2
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PPUSH
73526: CALL_OW 72
73530: ST_TO_ADDR
// end ;
73531: LD_VAR 0 3
73535: RET
// export function IsDriver ( un ) ; begin
73536: LD_INT 0
73538: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73539: LD_ADDR_VAR 0 2
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_INT 55
73551: PUSH
73552: EMPTY
73553: LIST
73554: PPUSH
73555: CALL_OW 69
73559: IN
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 2
73565: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73566: LD_INT 0
73568: PPUSH
73569: PPUSH
// list := [ ] ;
73570: LD_ADDR_VAR 0 5
73574: PUSH
73575: EMPTY
73576: ST_TO_ADDR
// case d of 0 :
73577: LD_VAR 0 3
73581: PUSH
73582: LD_INT 0
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73590
73588: GO 73723
73590: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73591: LD_ADDR_VAR 0 5
73595: PUSH
73596: LD_VAR 0 1
73600: PUSH
73601: LD_INT 4
73603: MINUS
73604: PUSH
73605: LD_VAR 0 2
73609: PUSH
73610: LD_INT 4
73612: MINUS
73613: PUSH
73614: LD_INT 2
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: LIST
73621: PUSH
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 3
73629: MINUS
73630: PUSH
73631: LD_VAR 0 2
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: PUSH
73644: LD_VAR 0 1
73648: PUSH
73649: LD_INT 4
73651: PLUS
73652: PUSH
73653: LD_VAR 0 2
73657: PUSH
73658: LD_INT 4
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_INT 3
73673: PLUS
73674: PUSH
73675: LD_VAR 0 2
73679: PUSH
73680: LD_INT 3
73682: PLUS
73683: PUSH
73684: LD_INT 5
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: LIST
73691: PUSH
73692: LD_VAR 0 1
73696: PUSH
73697: LD_VAR 0 2
73701: PUSH
73702: LD_INT 4
73704: PLUS
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: LIST
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: ST_TO_ADDR
// end ; 1 :
73721: GO 74421
73723: LD_INT 1
73725: DOUBLE
73726: EQUAL
73727: IFTRUE 73731
73729: GO 73864
73731: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73732: LD_ADDR_VAR 0 5
73736: PUSH
73737: LD_VAR 0 1
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 4
73749: MINUS
73750: PUSH
73751: LD_INT 3
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: LD_INT 3
73766: MINUS
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 3
73775: MINUS
73776: PUSH
73777: LD_INT 2
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: PUSH
73785: LD_VAR 0 1
73789: PUSH
73790: LD_INT 4
73792: MINUS
73793: PUSH
73794: LD_VAR 0 2
73798: PUSH
73799: LD_INT 1
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: LIST
73806: PUSH
73807: LD_VAR 0 1
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: LD_INT 3
73819: PLUS
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: LD_VAR 0 1
73833: PUSH
73834: LD_INT 4
73836: PLUS
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_INT 4
73845: PLUS
73846: PUSH
73847: LD_INT 5
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: LIST
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: ST_TO_ADDR
// end ; 2 :
73862: GO 74421
73864: LD_INT 2
73866: DOUBLE
73867: EQUAL
73868: IFTRUE 73872
73870: GO 74001
73872: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73873: LD_ADDR_VAR 0 5
73877: PUSH
73878: LD_VAR 0 1
73882: PUSH
73883: LD_VAR 0 2
73887: PUSH
73888: LD_INT 3
73890: MINUS
73891: PUSH
73892: LD_INT 3
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: LIST
73899: PUSH
73900: LD_VAR 0 1
73904: PUSH
73905: LD_INT 4
73907: PLUS
73908: PUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 4
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_VAR 0 2
73931: PUSH
73932: LD_INT 4
73934: PLUS
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 3
73951: MINUS
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: LD_INT 1
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: LD_VAR 0 1
73970: PUSH
73971: LD_INT 4
73973: MINUS
73974: PUSH
73975: LD_VAR 0 2
73979: PUSH
73980: LD_INT 4
73982: MINUS
73983: PUSH
73984: LD_INT 2
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: ST_TO_ADDR
// end ; 3 :
73999: GO 74421
74001: LD_INT 3
74003: DOUBLE
74004: EQUAL
74005: IFTRUE 74009
74007: GO 74142
74009: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: LD_VAR 0 1
74019: PUSH
74020: LD_INT 3
74022: PLUS
74023: PUSH
74024: LD_VAR 0 2
74028: PUSH
74029: LD_INT 4
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: LIST
74036: PUSH
74037: LD_VAR 0 1
74041: PUSH
74042: LD_INT 4
74044: PLUS
74045: PUSH
74046: LD_VAR 0 2
74050: PUSH
74051: LD_INT 4
74053: PLUS
74054: PUSH
74055: LD_INT 5
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: PUSH
74063: LD_VAR 0 1
74067: PUSH
74068: LD_INT 4
74070: MINUS
74071: PUSH
74072: LD_VAR 0 2
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: LIST
74084: PUSH
74085: LD_VAR 0 1
74089: PUSH
74090: LD_VAR 0 2
74094: PUSH
74095: LD_INT 4
74097: MINUS
74098: PUSH
74099: LD_INT 3
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: LD_VAR 0 1
74111: PUSH
74112: LD_INT 3
74114: MINUS
74115: PUSH
74116: LD_VAR 0 2
74120: PUSH
74121: LD_INT 3
74123: MINUS
74124: PUSH
74125: LD_INT 2
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: LIST
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: ST_TO_ADDR
// end ; 4 :
74140: GO 74421
74142: LD_INT 4
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74150
74148: GO 74283
74150: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74151: LD_ADDR_VAR 0 5
74155: PUSH
74156: LD_VAR 0 1
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 4
74168: PLUS
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: LD_VAR 0 1
74182: PUSH
74183: LD_INT 3
74185: PLUS
74186: PUSH
74187: LD_VAR 0 2
74191: PUSH
74192: LD_INT 3
74194: PLUS
74195: PUSH
74196: LD_INT 5
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: LIST
74203: PUSH
74204: LD_VAR 0 1
74208: PUSH
74209: LD_INT 4
74211: PLUS
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 4
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: LIST
74225: PUSH
74226: LD_VAR 0 1
74230: PUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_INT 3
74238: MINUS
74239: PUSH
74240: LD_INT 3
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: LIST
74247: PUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_INT 4
74255: MINUS
74256: PUSH
74257: LD_VAR 0 2
74261: PUSH
74262: LD_INT 4
74264: MINUS
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: ST_TO_ADDR
// end ; 5 :
74281: GO 74421
74283: LD_INT 5
74285: DOUBLE
74286: EQUAL
74287: IFTRUE 74291
74289: GO 74420
74291: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74292: LD_ADDR_VAR 0 5
74296: PUSH
74297: LD_VAR 0 1
74301: PUSH
74302: LD_INT 4
74304: MINUS
74305: PUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 1
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: LIST
74318: PUSH
74319: LD_VAR 0 1
74323: PUSH
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 4
74331: MINUS
74332: PUSH
74333: LD_INT 3
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: PUSH
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 4
74348: PLUS
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_INT 4
74357: PLUS
74358: PUSH
74359: LD_INT 5
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: LD_VAR 0 1
74371: PUSH
74372: LD_INT 3
74374: PLUS
74375: PUSH
74376: LD_VAR 0 2
74380: PUSH
74381: LD_INT 4
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: LIST
74388: PUSH
74389: LD_VAR 0 1
74393: PUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 3
74401: PLUS
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: ST_TO_ADDR
// end ; end ;
74418: GO 74421
74420: POP
// result := list ;
74421: LD_ADDR_VAR 0 4
74425: PUSH
74426: LD_VAR 0 5
74430: ST_TO_ADDR
// end ;
74431: LD_VAR 0 4
74435: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74436: LD_INT 0
74438: PPUSH
74439: PPUSH
74440: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74441: LD_VAR 0 1
74445: NOT
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: LD_INT 4
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: IN
74470: NOT
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74568
// tmp := [ ] ;
74476: LD_ADDR_VAR 0 5
74480: PUSH
74481: EMPTY
74482: ST_TO_ADDR
// for i in units do
74483: LD_ADDR_VAR 0 4
74487: PUSH
74488: LD_VAR 0 1
74492: PUSH
74493: FOR_IN
74494: IFFALSE 74537
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74496: LD_ADDR_VAR 0 5
74500: PUSH
74501: LD_VAR 0 5
74505: PPUSH
74506: LD_VAR 0 5
74510: PUSH
74511: LD_INT 1
74513: PLUS
74514: PPUSH
74515: LD_VAR 0 4
74519: PPUSH
74520: LD_VAR 0 2
74524: PPUSH
74525: CALL_OW 259
74529: PPUSH
74530: CALL_OW 2
74534: ST_TO_ADDR
74535: GO 74493
74537: POP
74538: POP
// if not tmp then
74539: LD_VAR 0 5
74543: NOT
74544: IFFALSE 74548
// exit ;
74546: GO 74568
// result := SortListByListDesc ( units , tmp ) ;
74548: LD_ADDR_VAR 0 3
74552: PUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 5
74562: PPUSH
74563: CALL_OW 77
74567: ST_TO_ADDR
// end ;
74568: LD_VAR 0 3
74572: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74573: LD_INT 0
74575: PPUSH
74576: PPUSH
74577: PPUSH
// result := false ;
74578: LD_ADDR_VAR 0 3
74582: PUSH
74583: LD_INT 0
74585: ST_TO_ADDR
// x := GetX ( building ) ;
74586: LD_ADDR_VAR 0 4
74590: PUSH
74591: LD_VAR 0 2
74595: PPUSH
74596: CALL_OW 250
74600: ST_TO_ADDR
// y := GetY ( building ) ;
74601: LD_ADDR_VAR 0 5
74605: PUSH
74606: LD_VAR 0 2
74610: PPUSH
74611: CALL_OW 251
74615: ST_TO_ADDR
// if not building or not x or not y then
74616: LD_VAR 0 2
74620: NOT
74621: PUSH
74622: LD_VAR 0 4
74626: NOT
74627: OR
74628: PUSH
74629: LD_VAR 0 5
74633: NOT
74634: OR
74635: IFFALSE 74639
// exit ;
74637: GO 74731
// if GetTaskList ( unit ) then
74639: LD_VAR 0 1
74643: PPUSH
74644: CALL_OW 437
74648: IFFALSE 74731
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74650: LD_STRING e
74652: PUSH
74653: LD_VAR 0 1
74657: PPUSH
74658: CALL_OW 437
74662: PUSH
74663: LD_INT 1
74665: ARRAY
74666: PUSH
74667: LD_INT 1
74669: ARRAY
74670: EQUAL
74671: PUSH
74672: LD_VAR 0 4
74676: PUSH
74677: LD_VAR 0 1
74681: PPUSH
74682: CALL_OW 437
74686: PUSH
74687: LD_INT 1
74689: ARRAY
74690: PUSH
74691: LD_INT 2
74693: ARRAY
74694: EQUAL
74695: AND
74696: PUSH
74697: LD_VAR 0 5
74701: PUSH
74702: LD_VAR 0 1
74706: PPUSH
74707: CALL_OW 437
74711: PUSH
74712: LD_INT 1
74714: ARRAY
74715: PUSH
74716: LD_INT 3
74718: ARRAY
74719: EQUAL
74720: AND
74721: IFFALSE 74731
// result := true end ;
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: LD_INT 1
74730: ST_TO_ADDR
// end ;
74731: LD_VAR 0 3
74735: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74736: LD_INT 0
74738: PPUSH
// result := false ;
74739: LD_ADDR_VAR 0 4
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// if GetTaskList ( unit ) then
74747: LD_VAR 0 1
74751: PPUSH
74752: CALL_OW 437
74756: IFFALSE 74839
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74758: LD_STRING M
74760: PUSH
74761: LD_VAR 0 1
74765: PPUSH
74766: CALL_OW 437
74770: PUSH
74771: LD_INT 1
74773: ARRAY
74774: PUSH
74775: LD_INT 1
74777: ARRAY
74778: EQUAL
74779: PUSH
74780: LD_VAR 0 2
74784: PUSH
74785: LD_VAR 0 1
74789: PPUSH
74790: CALL_OW 437
74794: PUSH
74795: LD_INT 1
74797: ARRAY
74798: PUSH
74799: LD_INT 2
74801: ARRAY
74802: EQUAL
74803: AND
74804: PUSH
74805: LD_VAR 0 3
74809: PUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 437
74819: PUSH
74820: LD_INT 1
74822: ARRAY
74823: PUSH
74824: LD_INT 3
74826: ARRAY
74827: EQUAL
74828: AND
74829: IFFALSE 74839
// result := true ;
74831: LD_ADDR_VAR 0 4
74835: PUSH
74836: LD_INT 1
74838: ST_TO_ADDR
// end ; end ;
74839: LD_VAR 0 4
74843: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74844: LD_INT 0
74846: PPUSH
74847: PPUSH
74848: PPUSH
74849: PPUSH
// if not unit or not area then
74850: LD_VAR 0 1
74854: NOT
74855: PUSH
74856: LD_VAR 0 2
74860: NOT
74861: OR
74862: IFFALSE 74866
// exit ;
74864: GO 75030
// tmp := AreaToList ( area , i ) ;
74866: LD_ADDR_VAR 0 6
74870: PUSH
74871: LD_VAR 0 2
74875: PPUSH
74876: LD_VAR 0 5
74880: PPUSH
74881: CALL_OW 517
74885: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74886: LD_ADDR_VAR 0 5
74890: PUSH
74891: DOUBLE
74892: LD_INT 1
74894: DEC
74895: ST_TO_ADDR
74896: LD_VAR 0 6
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PUSH
74905: FOR_TO
74906: IFFALSE 75028
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74908: LD_ADDR_VAR 0 7
74912: PUSH
74913: LD_VAR 0 6
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_VAR 0 5
74926: ARRAY
74927: PUSH
74928: LD_VAR 0 6
74932: PUSH
74933: LD_INT 2
74935: ARRAY
74936: PUSH
74937: LD_VAR 0 5
74941: ARRAY
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74947: LD_VAR 0 7
74951: PUSH
74952: LD_INT 1
74954: ARRAY
74955: PPUSH
74956: LD_VAR 0 7
74960: PUSH
74961: LD_INT 2
74963: ARRAY
74964: PPUSH
74965: CALL_OW 428
74969: PUSH
74970: LD_INT 0
74972: EQUAL
74973: IFFALSE 75026
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74975: LD_VAR 0 1
74979: PPUSH
74980: LD_VAR 0 7
74984: PUSH
74985: LD_INT 1
74987: ARRAY
74988: PPUSH
74989: LD_VAR 0 7
74993: PUSH
74994: LD_INT 2
74996: ARRAY
74997: PPUSH
74998: LD_VAR 0 3
75002: PPUSH
75003: CALL_OW 48
// result := IsPlaced ( unit ) ;
75007: LD_ADDR_VAR 0 4
75011: PUSH
75012: LD_VAR 0 1
75016: PPUSH
75017: CALL_OW 305
75021: ST_TO_ADDR
// exit ;
75022: POP
75023: POP
75024: GO 75030
// end ; end ;
75026: GO 74905
75028: POP
75029: POP
// end ;
75030: LD_VAR 0 4
75034: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75035: LD_INT 0
75037: PPUSH
75038: PPUSH
75039: PPUSH
// if not side or side > 8 then
75040: LD_VAR 0 1
75044: NOT
75045: PUSH
75046: LD_VAR 0 1
75050: PUSH
75051: LD_INT 8
75053: GREATER
75054: OR
75055: IFFALSE 75059
// exit ;
75057: GO 75246
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75059: LD_ADDR_VAR 0 4
75063: PUSH
75064: LD_INT 22
75066: PUSH
75067: LD_VAR 0 1
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: LD_INT 21
75078: PUSH
75079: LD_INT 3
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PPUSH
75090: CALL_OW 69
75094: ST_TO_ADDR
// if not tmp then
75095: LD_VAR 0 4
75099: NOT
75100: IFFALSE 75104
// exit ;
75102: GO 75246
// enable_addtolog := true ;
75104: LD_ADDR_OWVAR 81
75108: PUSH
75109: LD_INT 1
75111: ST_TO_ADDR
// AddToLog ( [ ) ;
75112: LD_STRING [
75114: PPUSH
75115: CALL_OW 561
// for i in tmp do
75119: LD_ADDR_VAR 0 3
75123: PUSH
75124: LD_VAR 0 4
75128: PUSH
75129: FOR_IN
75130: IFFALSE 75237
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75132: LD_STRING [
75134: PUSH
75135: LD_VAR 0 3
75139: PPUSH
75140: CALL_OW 266
75144: STR
75145: PUSH
75146: LD_STRING , 
75148: STR
75149: PUSH
75150: LD_VAR 0 3
75154: PPUSH
75155: CALL_OW 250
75159: STR
75160: PUSH
75161: LD_STRING , 
75163: STR
75164: PUSH
75165: LD_VAR 0 3
75169: PPUSH
75170: CALL_OW 251
75174: STR
75175: PUSH
75176: LD_STRING , 
75178: STR
75179: PUSH
75180: LD_VAR 0 3
75184: PPUSH
75185: CALL_OW 254
75189: STR
75190: PUSH
75191: LD_STRING , 
75193: STR
75194: PUSH
75195: LD_VAR 0 3
75199: PPUSH
75200: LD_INT 1
75202: PPUSH
75203: CALL_OW 268
75207: STR
75208: PUSH
75209: LD_STRING , 
75211: STR
75212: PUSH
75213: LD_VAR 0 3
75217: PPUSH
75218: LD_INT 2
75220: PPUSH
75221: CALL_OW 268
75225: STR
75226: PUSH
75227: LD_STRING ],
75229: STR
75230: PPUSH
75231: CALL_OW 561
// end ;
75235: GO 75129
75237: POP
75238: POP
// AddToLog ( ]; ) ;
75239: LD_STRING ];
75241: PPUSH
75242: CALL_OW 561
// end ;
75246: LD_VAR 0 2
75250: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75251: LD_INT 0
75253: PPUSH
75254: PPUSH
75255: PPUSH
75256: PPUSH
75257: PPUSH
// if not area or not rate or not max then
75258: LD_VAR 0 1
75262: NOT
75263: PUSH
75264: LD_VAR 0 2
75268: NOT
75269: OR
75270: PUSH
75271: LD_VAR 0 4
75275: NOT
75276: OR
75277: IFFALSE 75281
// exit ;
75279: GO 75470
// while 1 do
75281: LD_INT 1
75283: IFFALSE 75470
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75285: LD_ADDR_VAR 0 9
75289: PUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: LD_INT 1
75297: PPUSH
75298: CALL_OW 287
75302: PUSH
75303: LD_INT 10
75305: MUL
75306: ST_TO_ADDR
// r := rate / 10 ;
75307: LD_ADDR_VAR 0 7
75311: PUSH
75312: LD_VAR 0 2
75316: PUSH
75317: LD_INT 10
75319: DIVREAL
75320: ST_TO_ADDR
// time := 1 1$00 ;
75321: LD_ADDR_VAR 0 8
75325: PUSH
75326: LD_INT 2100
75328: ST_TO_ADDR
// if amount < min then
75329: LD_VAR 0 9
75333: PUSH
75334: LD_VAR 0 3
75338: LESS
75339: IFFALSE 75357
// r := r * 2 else
75341: LD_ADDR_VAR 0 7
75345: PUSH
75346: LD_VAR 0 7
75350: PUSH
75351: LD_INT 2
75353: MUL
75354: ST_TO_ADDR
75355: GO 75383
// if amount > max then
75357: LD_VAR 0 9
75361: PUSH
75362: LD_VAR 0 4
75366: GREATER
75367: IFFALSE 75383
// r := r / 2 ;
75369: LD_ADDR_VAR 0 7
75373: PUSH
75374: LD_VAR 0 7
75378: PUSH
75379: LD_INT 2
75381: DIVREAL
75382: ST_TO_ADDR
// time := time / r ;
75383: LD_ADDR_VAR 0 8
75387: PUSH
75388: LD_VAR 0 8
75392: PUSH
75393: LD_VAR 0 7
75397: DIVREAL
75398: ST_TO_ADDR
// if time < 0 then
75399: LD_VAR 0 8
75403: PUSH
75404: LD_INT 0
75406: LESS
75407: IFFALSE 75424
// time := time * - 1 ;
75409: LD_ADDR_VAR 0 8
75413: PUSH
75414: LD_VAR 0 8
75418: PUSH
75419: LD_INT 1
75421: NEG
75422: MUL
75423: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75424: LD_VAR 0 8
75428: PUSH
75429: LD_INT 35
75431: PPUSH
75432: LD_INT 875
75434: PPUSH
75435: CALL_OW 12
75439: PLUS
75440: PPUSH
75441: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75445: LD_INT 1
75447: PPUSH
75448: LD_INT 5
75450: PPUSH
75451: CALL_OW 12
75455: PPUSH
75456: LD_VAR 0 1
75460: PPUSH
75461: LD_INT 1
75463: PPUSH
75464: CALL_OW 55
// end ;
75468: GO 75281
// end ;
75470: LD_VAR 0 5
75474: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75475: LD_INT 0
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
75481: PPUSH
75482: PPUSH
75483: PPUSH
75484: PPUSH
// if not turrets or not factories then
75485: LD_VAR 0 1
75489: NOT
75490: PUSH
75491: LD_VAR 0 2
75495: NOT
75496: OR
75497: IFFALSE 75501
// exit ;
75499: GO 75808
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75501: LD_ADDR_VAR 0 10
75505: PUSH
75506: LD_INT 5
75508: PUSH
75509: LD_INT 6
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 2
75518: PUSH
75519: LD_INT 4
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 3
75528: PUSH
75529: LD_INT 5
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 24
75543: PUSH
75544: LD_INT 25
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 23
75553: PUSH
75554: LD_INT 27
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 42
75567: PUSH
75568: LD_INT 43
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 44
75577: PUSH
75578: LD_INT 46
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 45
75587: PUSH
75588: LD_INT 47
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: LIST
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: LIST
75604: ST_TO_ADDR
// result := [ ] ;
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: EMPTY
75611: ST_TO_ADDR
// for i in turrets do
75612: LD_ADDR_VAR 0 4
75616: PUSH
75617: LD_VAR 0 1
75621: PUSH
75622: FOR_IN
75623: IFFALSE 75806
// begin nat := GetNation ( i ) ;
75625: LD_ADDR_VAR 0 7
75629: PUSH
75630: LD_VAR 0 4
75634: PPUSH
75635: CALL_OW 248
75639: ST_TO_ADDR
// weapon := 0 ;
75640: LD_ADDR_VAR 0 8
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
// if not nat then
75648: LD_VAR 0 7
75652: NOT
75653: IFFALSE 75657
// continue ;
75655: GO 75622
// for j in list [ nat ] do
75657: LD_ADDR_VAR 0 5
75661: PUSH
75662: LD_VAR 0 10
75666: PUSH
75667: LD_VAR 0 7
75671: ARRAY
75672: PUSH
75673: FOR_IN
75674: IFFALSE 75715
// if GetBWeapon ( i ) = j [ 1 ] then
75676: LD_VAR 0 4
75680: PPUSH
75681: CALL_OW 269
75685: PUSH
75686: LD_VAR 0 5
75690: PUSH
75691: LD_INT 1
75693: ARRAY
75694: EQUAL
75695: IFFALSE 75713
// begin weapon := j [ 2 ] ;
75697: LD_ADDR_VAR 0 8
75701: PUSH
75702: LD_VAR 0 5
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: ST_TO_ADDR
// break ;
75711: GO 75715
// end ;
75713: GO 75673
75715: POP
75716: POP
// if not weapon then
75717: LD_VAR 0 8
75721: NOT
75722: IFFALSE 75726
// continue ;
75724: GO 75622
// for k in factories do
75726: LD_ADDR_VAR 0 6
75730: PUSH
75731: LD_VAR 0 2
75735: PUSH
75736: FOR_IN
75737: IFFALSE 75802
// begin weapons := AvailableWeaponList ( k ) ;
75739: LD_ADDR_VAR 0 9
75743: PUSH
75744: LD_VAR 0 6
75748: PPUSH
75749: CALL_OW 478
75753: ST_TO_ADDR
// if not weapons then
75754: LD_VAR 0 9
75758: NOT
75759: IFFALSE 75763
// continue ;
75761: GO 75736
// if weapon in weapons then
75763: LD_VAR 0 8
75767: PUSH
75768: LD_VAR 0 9
75772: IN
75773: IFFALSE 75800
// begin result := [ i , weapon ] ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_VAR 0 4
75784: PUSH
75785: LD_VAR 0 8
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: ST_TO_ADDR
// exit ;
75794: POP
75795: POP
75796: POP
75797: POP
75798: GO 75808
// end ; end ;
75800: GO 75736
75802: POP
75803: POP
// end ;
75804: GO 75622
75806: POP
75807: POP
// end ;
75808: LD_VAR 0 3
75812: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75813: LD_INT 0
75815: PPUSH
// if not side or side > 8 then
75816: LD_VAR 0 3
75820: NOT
75821: PUSH
75822: LD_VAR 0 3
75826: PUSH
75827: LD_INT 8
75829: GREATER
75830: OR
75831: IFFALSE 75835
// exit ;
75833: GO 75894
// if not range then
75835: LD_VAR 0 4
75839: NOT
75840: IFFALSE 75851
// range := - 12 ;
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_INT 12
75849: NEG
75850: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75851: LD_VAR 0 1
75855: PPUSH
75856: LD_VAR 0 2
75860: PPUSH
75861: LD_VAR 0 3
75865: PPUSH
75866: LD_VAR 0 4
75870: PPUSH
75871: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75875: LD_VAR 0 1
75879: PPUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: LD_VAR 0 3
75889: PPUSH
75890: CALL_OW 331
// end ;
75894: LD_VAR 0 5
75898: RET
// export function Video ( mode ) ; begin
75899: LD_INT 0
75901: PPUSH
// ingame_video = mode ;
75902: LD_ADDR_OWVAR 52
75906: PUSH
75907: LD_VAR 0 1
75911: ST_TO_ADDR
// interface_hidden = mode ;
75912: LD_ADDR_OWVAR 54
75916: PUSH
75917: LD_VAR 0 1
75921: ST_TO_ADDR
// end ;
75922: LD_VAR 0 2
75926: RET
// export function Join ( array , element ) ; begin
75927: LD_INT 0
75929: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75930: LD_ADDR_VAR 0 3
75934: PUSH
75935: LD_VAR 0 1
75939: PPUSH
75940: LD_VAR 0 1
75944: PUSH
75945: LD_INT 1
75947: PLUS
75948: PPUSH
75949: LD_VAR 0 2
75953: PPUSH
75954: CALL_OW 1
75958: ST_TO_ADDR
// end ;
75959: LD_VAR 0 3
75963: RET
// export function JoinUnion ( array , element ) ; begin
75964: LD_INT 0
75966: PPUSH
// result := array union element ;
75967: LD_ADDR_VAR 0 3
75971: PUSH
75972: LD_VAR 0 1
75976: PUSH
75977: LD_VAR 0 2
75981: UNION
75982: ST_TO_ADDR
// end ;
75983: LD_VAR 0 3
75987: RET
// export function GetBehemoths ( side ) ; begin
75988: LD_INT 0
75990: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75991: LD_ADDR_VAR 0 2
75995: PUSH
75996: LD_INT 22
75998: PUSH
75999: LD_VAR 0 1
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 31
76010: PUSH
76011: LD_INT 25
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PPUSH
76022: CALL_OW 69
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 2
76031: RET
// export function Shuffle ( array ) ; var i , index ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
// result := [ ] ;
76037: LD_ADDR_VAR 0 2
76041: PUSH
76042: EMPTY
76043: ST_TO_ADDR
// if not array then
76044: LD_VAR 0 1
76048: NOT
76049: IFFALSE 76053
// exit ;
76051: GO 76152
// Randomize ;
76053: CALL_OW 10
// for i = array downto 1 do
76057: LD_ADDR_VAR 0 3
76061: PUSH
76062: DOUBLE
76063: LD_VAR 0 1
76067: INC
76068: ST_TO_ADDR
76069: LD_INT 1
76071: PUSH
76072: FOR_DOWNTO
76073: IFFALSE 76150
// begin index := rand ( 1 , array ) ;
76075: LD_ADDR_VAR 0 4
76079: PUSH
76080: LD_INT 1
76082: PPUSH
76083: LD_VAR 0 1
76087: PPUSH
76088: CALL_OW 12
76092: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76093: LD_ADDR_VAR 0 2
76097: PUSH
76098: LD_VAR 0 2
76102: PPUSH
76103: LD_VAR 0 2
76107: PUSH
76108: LD_INT 1
76110: PLUS
76111: PPUSH
76112: LD_VAR 0 1
76116: PUSH
76117: LD_VAR 0 4
76121: ARRAY
76122: PPUSH
76123: CALL_OW 2
76127: ST_TO_ADDR
// array := Delete ( array , index ) ;
76128: LD_ADDR_VAR 0 1
76132: PUSH
76133: LD_VAR 0 1
76137: PPUSH
76138: LD_VAR 0 4
76142: PPUSH
76143: CALL_OW 3
76147: ST_TO_ADDR
// end ;
76148: GO 76072
76150: POP
76151: POP
// end ;
76152: LD_VAR 0 2
76156: RET
// export function GetBaseMaterials ( base ) ; begin
76157: LD_INT 0
76159: PPUSH
// result := [ 0 , 0 , 0 ] ;
76160: LD_ADDR_VAR 0 2
76164: PUSH
76165: LD_INT 0
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: LD_INT 0
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: LIST
76178: ST_TO_ADDR
// if not base then
76179: LD_VAR 0 1
76183: NOT
76184: IFFALSE 76188
// exit ;
76186: GO 76237
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76188: LD_ADDR_VAR 0 2
76192: PUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: LD_INT 1
76200: PPUSH
76201: CALL_OW 275
76205: PUSH
76206: LD_VAR 0 1
76210: PPUSH
76211: LD_INT 2
76213: PPUSH
76214: CALL_OW 275
76218: PUSH
76219: LD_VAR 0 1
76223: PPUSH
76224: LD_INT 3
76226: PPUSH
76227: CALL_OW 275
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: LIST
76236: ST_TO_ADDR
// end ;
76237: LD_VAR 0 2
76241: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76242: LD_INT 0
76244: PPUSH
76245: PPUSH
// result := array ;
76246: LD_ADDR_VAR 0 3
76250: PUSH
76251: LD_VAR 0 1
76255: ST_TO_ADDR
// if size > 0 then
76256: LD_VAR 0 2
76260: PUSH
76261: LD_INT 0
76263: GREATER
76264: IFFALSE 76310
// for i := array downto size do
76266: LD_ADDR_VAR 0 4
76270: PUSH
76271: DOUBLE
76272: LD_VAR 0 1
76276: INC
76277: ST_TO_ADDR
76278: LD_VAR 0 2
76282: PUSH
76283: FOR_DOWNTO
76284: IFFALSE 76308
// result := Delete ( result , result ) ;
76286: LD_ADDR_VAR 0 3
76290: PUSH
76291: LD_VAR 0 3
76295: PPUSH
76296: LD_VAR 0 3
76300: PPUSH
76301: CALL_OW 3
76305: ST_TO_ADDR
76306: GO 76283
76308: POP
76309: POP
// end ;
76310: LD_VAR 0 3
76314: RET
// export function ComExit ( unit ) ; var tmp ; begin
76315: LD_INT 0
76317: PPUSH
76318: PPUSH
// if not IsInUnit ( unit ) then
76319: LD_VAR 0 1
76323: PPUSH
76324: CALL_OW 310
76328: NOT
76329: IFFALSE 76333
// exit ;
76331: GO 76393
// tmp := IsInUnit ( unit ) ;
76333: LD_ADDR_VAR 0 3
76337: PUSH
76338: LD_VAR 0 1
76342: PPUSH
76343: CALL_OW 310
76347: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76348: LD_VAR 0 3
76352: PPUSH
76353: CALL_OW 247
76357: PUSH
76358: LD_INT 2
76360: EQUAL
76361: IFFALSE 76374
// ComExitVehicle ( unit ) else
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL_OW 121
76372: GO 76383
// ComExitBuilding ( unit ) ;
76374: LD_VAR 0 1
76378: PPUSH
76379: CALL_OW 122
// result := tmp ;
76383: LD_ADDR_VAR 0 2
76387: PUSH
76388: LD_VAR 0 3
76392: ST_TO_ADDR
// end ;
76393: LD_VAR 0 2
76397: RET
// export function ComExitAll ( units ) ; var i ; begin
76398: LD_INT 0
76400: PPUSH
76401: PPUSH
// if not units then
76402: LD_VAR 0 1
76406: NOT
76407: IFFALSE 76411
// exit ;
76409: GO 76437
// for i in units do
76411: LD_ADDR_VAR 0 3
76415: PUSH
76416: LD_VAR 0 1
76420: PUSH
76421: FOR_IN
76422: IFFALSE 76435
// ComExit ( i ) ;
76424: LD_VAR 0 3
76428: PPUSH
76429: CALL 76315 0 1
76433: GO 76421
76435: POP
76436: POP
// end ;
76437: LD_VAR 0 2
76441: RET
// export function ResetHc ; begin
76442: LD_INT 0
76444: PPUSH
// InitHc ;
76445: CALL_OW 19
// hc_importance := 0 ;
76449: LD_ADDR_OWVAR 32
76453: PUSH
76454: LD_INT 0
76456: ST_TO_ADDR
// end ;
76457: LD_VAR 0 1
76461: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76462: LD_INT 0
76464: PPUSH
76465: PPUSH
76466: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76467: LD_ADDR_VAR 0 6
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_VAR 0 3
76481: PLUS
76482: PUSH
76483: LD_INT 2
76485: DIV
76486: ST_TO_ADDR
// if _x < 0 then
76487: LD_VAR 0 6
76491: PUSH
76492: LD_INT 0
76494: LESS
76495: IFFALSE 76512
// _x := _x * - 1 ;
76497: LD_ADDR_VAR 0 6
76501: PUSH
76502: LD_VAR 0 6
76506: PUSH
76507: LD_INT 1
76509: NEG
76510: MUL
76511: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76512: LD_ADDR_VAR 0 7
76516: PUSH
76517: LD_VAR 0 2
76521: PUSH
76522: LD_VAR 0 4
76526: PLUS
76527: PUSH
76528: LD_INT 2
76530: DIV
76531: ST_TO_ADDR
// if _y < 0 then
76532: LD_VAR 0 7
76536: PUSH
76537: LD_INT 0
76539: LESS
76540: IFFALSE 76557
// _y := _y * - 1 ;
76542: LD_ADDR_VAR 0 7
76546: PUSH
76547: LD_VAR 0 7
76551: PUSH
76552: LD_INT 1
76554: NEG
76555: MUL
76556: ST_TO_ADDR
// result := [ _x , _y ] ;
76557: LD_ADDR_VAR 0 5
76561: PUSH
76562: LD_VAR 0 6
76566: PUSH
76567: LD_VAR 0 7
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: ST_TO_ADDR
// end ;
76576: LD_VAR 0 5
76580: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76581: LD_INT 0
76583: PPUSH
76584: PPUSH
76585: PPUSH
76586: PPUSH
// task := GetTaskList ( unit ) ;
76587: LD_ADDR_VAR 0 7
76591: PUSH
76592: LD_VAR 0 1
76596: PPUSH
76597: CALL_OW 437
76601: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76602: LD_VAR 0 7
76606: NOT
76607: PUSH
76608: LD_VAR 0 1
76612: PPUSH
76613: LD_VAR 0 2
76617: PPUSH
76618: CALL_OW 308
76622: NOT
76623: AND
76624: IFFALSE 76628
// exit ;
76626: GO 76746
// if IsInArea ( unit , area ) then
76628: LD_VAR 0 1
76632: PPUSH
76633: LD_VAR 0 2
76637: PPUSH
76638: CALL_OW 308
76642: IFFALSE 76660
// begin ComMoveToArea ( unit , goAway ) ;
76644: LD_VAR 0 1
76648: PPUSH
76649: LD_VAR 0 3
76653: PPUSH
76654: CALL_OW 113
// exit ;
76658: GO 76746
// end ; if task [ 1 ] [ 1 ] <> M then
76660: LD_VAR 0 7
76664: PUSH
76665: LD_INT 1
76667: ARRAY
76668: PUSH
76669: LD_INT 1
76671: ARRAY
76672: PUSH
76673: LD_STRING M
76675: NONEQUAL
76676: IFFALSE 76680
// exit ;
76678: GO 76746
// x := task [ 1 ] [ 2 ] ;
76680: LD_ADDR_VAR 0 5
76684: PUSH
76685: LD_VAR 0 7
76689: PUSH
76690: LD_INT 1
76692: ARRAY
76693: PUSH
76694: LD_INT 2
76696: ARRAY
76697: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76698: LD_ADDR_VAR 0 6
76702: PUSH
76703: LD_VAR 0 7
76707: PUSH
76708: LD_INT 1
76710: ARRAY
76711: PUSH
76712: LD_INT 3
76714: ARRAY
76715: ST_TO_ADDR
// if InArea ( x , y , area ) then
76716: LD_VAR 0 5
76720: PPUSH
76721: LD_VAR 0 6
76725: PPUSH
76726: LD_VAR 0 2
76730: PPUSH
76731: CALL_OW 309
76735: IFFALSE 76746
// ComStop ( unit ) ;
76737: LD_VAR 0 1
76741: PPUSH
76742: CALL_OW 141
// end ;
76746: LD_VAR 0 4
76750: RET
// export function Abs ( value ) ; begin
76751: LD_INT 0
76753: PPUSH
// result := value ;
76754: LD_ADDR_VAR 0 2
76758: PUSH
76759: LD_VAR 0 1
76763: ST_TO_ADDR
// if value < 0 then
76764: LD_VAR 0 1
76768: PUSH
76769: LD_INT 0
76771: LESS
76772: IFFALSE 76789
// result := value * - 1 ;
76774: LD_ADDR_VAR 0 2
76778: PUSH
76779: LD_VAR 0 1
76783: PUSH
76784: LD_INT 1
76786: NEG
76787: MUL
76788: ST_TO_ADDR
// end ;
76789: LD_VAR 0 2
76793: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76794: LD_INT 0
76796: PPUSH
76797: PPUSH
76798: PPUSH
76799: PPUSH
76800: PPUSH
76801: PPUSH
76802: PPUSH
76803: PPUSH
// if not unit or not building then
76804: LD_VAR 0 1
76808: NOT
76809: PUSH
76810: LD_VAR 0 2
76814: NOT
76815: OR
76816: IFFALSE 76820
// exit ;
76818: GO 77046
// x := GetX ( building ) ;
76820: LD_ADDR_VAR 0 4
76824: PUSH
76825: LD_VAR 0 2
76829: PPUSH
76830: CALL_OW 250
76834: ST_TO_ADDR
// y := GetY ( building ) ;
76835: LD_ADDR_VAR 0 6
76839: PUSH
76840: LD_VAR 0 2
76844: PPUSH
76845: CALL_OW 251
76849: ST_TO_ADDR
// d := GetDir ( building ) ;
76850: LD_ADDR_VAR 0 8
76854: PUSH
76855: LD_VAR 0 2
76859: PPUSH
76860: CALL_OW 254
76864: ST_TO_ADDR
// r := 4 ;
76865: LD_ADDR_VAR 0 9
76869: PUSH
76870: LD_INT 4
76872: ST_TO_ADDR
// for i := 1 to 5 do
76873: LD_ADDR_VAR 0 10
76877: PUSH
76878: DOUBLE
76879: LD_INT 1
76881: DEC
76882: ST_TO_ADDR
76883: LD_INT 5
76885: PUSH
76886: FOR_TO
76887: IFFALSE 77044
// begin _x := ShiftX ( x , d , r + i ) ;
76889: LD_ADDR_VAR 0 5
76893: PUSH
76894: LD_VAR 0 4
76898: PPUSH
76899: LD_VAR 0 8
76903: PPUSH
76904: LD_VAR 0 9
76908: PUSH
76909: LD_VAR 0 10
76913: PLUS
76914: PPUSH
76915: CALL_OW 272
76919: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76920: LD_ADDR_VAR 0 7
76924: PUSH
76925: LD_VAR 0 6
76929: PPUSH
76930: LD_VAR 0 8
76934: PPUSH
76935: LD_VAR 0 9
76939: PUSH
76940: LD_VAR 0 10
76944: PLUS
76945: PPUSH
76946: CALL_OW 273
76950: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76951: LD_VAR 0 5
76955: PPUSH
76956: LD_VAR 0 7
76960: PPUSH
76961: CALL_OW 488
76965: PUSH
76966: LD_VAR 0 5
76970: PPUSH
76971: LD_VAR 0 7
76975: PPUSH
76976: CALL_OW 428
76980: PPUSH
76981: CALL_OW 247
76985: PUSH
76986: LD_INT 3
76988: PUSH
76989: LD_INT 2
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: IN
76996: NOT
76997: AND
76998: IFFALSE 77042
// begin ComMoveXY ( unit , _x , _y ) ;
77000: LD_VAR 0 1
77004: PPUSH
77005: LD_VAR 0 5
77009: PPUSH
77010: LD_VAR 0 7
77014: PPUSH
77015: CALL_OW 111
// result := [ _x , _y ] ;
77019: LD_ADDR_VAR 0 3
77023: PUSH
77024: LD_VAR 0 5
77028: PUSH
77029: LD_VAR 0 7
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: ST_TO_ADDR
// exit ;
77038: POP
77039: POP
77040: GO 77046
// end ; end ;
77042: GO 76886
77044: POP
77045: POP
// end ;
77046: LD_VAR 0 3
77050: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77051: LD_INT 0
77053: PPUSH
77054: PPUSH
77055: PPUSH
// result := 0 ;
77056: LD_ADDR_VAR 0 3
77060: PUSH
77061: LD_INT 0
77063: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77064: LD_VAR 0 1
77068: PUSH
77069: LD_INT 0
77071: LESS
77072: PUSH
77073: LD_VAR 0 1
77077: PUSH
77078: LD_INT 8
77080: GREATER
77081: OR
77082: PUSH
77083: LD_VAR 0 2
77087: PUSH
77088: LD_INT 0
77090: LESS
77091: OR
77092: PUSH
77093: LD_VAR 0 2
77097: PUSH
77098: LD_INT 8
77100: GREATER
77101: OR
77102: IFFALSE 77106
// exit ;
77104: GO 77181
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77106: LD_ADDR_VAR 0 4
77110: PUSH
77111: LD_INT 22
77113: PUSH
77114: LD_VAR 0 2
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PPUSH
77123: CALL_OW 69
77127: PUSH
77128: FOR_IN
77129: IFFALSE 77179
// begin un := UnitShoot ( i ) ;
77131: LD_ADDR_VAR 0 5
77135: PUSH
77136: LD_VAR 0 4
77140: PPUSH
77141: CALL_OW 504
77145: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77146: LD_VAR 0 5
77150: PPUSH
77151: CALL_OW 255
77155: PUSH
77156: LD_VAR 0 1
77160: EQUAL
77161: IFFALSE 77177
// begin result := un ;
77163: LD_ADDR_VAR 0 3
77167: PUSH
77168: LD_VAR 0 5
77172: ST_TO_ADDR
// exit ;
77173: POP
77174: POP
77175: GO 77181
// end ; end ;
77177: GO 77128
77179: POP
77180: POP
// end ;
77181: LD_VAR 0 3
77185: RET
// export function GetCargoBay ( units ) ; begin
77186: LD_INT 0
77188: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77189: LD_ADDR_VAR 0 2
77193: PUSH
77194: LD_VAR 0 1
77198: PPUSH
77199: LD_INT 2
77201: PUSH
77202: LD_INT 34
77204: PUSH
77205: LD_INT 12
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: PUSH
77212: LD_INT 34
77214: PUSH
77215: LD_INT 51
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: LD_INT 34
77224: PUSH
77225: LD_INT 32
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 34
77234: PUSH
77235: LD_EXP 50
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: PPUSH
77251: CALL_OW 72
77255: ST_TO_ADDR
// end ;
77256: LD_VAR 0 2
77260: RET
// export function Negate ( value ) ; begin
77261: LD_INT 0
77263: PPUSH
// result := not value ;
77264: LD_ADDR_VAR 0 2
77268: PUSH
77269: LD_VAR 0 1
77273: NOT
77274: ST_TO_ADDR
// end ;
77275: LD_VAR 0 2
77279: RET
// export function Inc ( value ) ; begin
77280: LD_INT 0
77282: PPUSH
// result := value + 1 ;
77283: LD_ADDR_VAR 0 2
77287: PUSH
77288: LD_VAR 0 1
77292: PUSH
77293: LD_INT 1
77295: PLUS
77296: ST_TO_ADDR
// end ;
77297: LD_VAR 0 2
77301: RET
// export function Dec ( value ) ; begin
77302: LD_INT 0
77304: PPUSH
// result := value - 1 ;
77305: LD_ADDR_VAR 0 2
77309: PUSH
77310: LD_VAR 0 1
77314: PUSH
77315: LD_INT 1
77317: MINUS
77318: ST_TO_ADDR
// end ;
77319: LD_VAR 0 2
77323: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77324: LD_INT 0
77326: PPUSH
77327: PPUSH
77328: PPUSH
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
77333: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77334: LD_VAR 0 1
77338: PPUSH
77339: LD_VAR 0 2
77343: PPUSH
77344: CALL_OW 488
77348: NOT
77349: PUSH
77350: LD_VAR 0 3
77354: PPUSH
77355: LD_VAR 0 4
77359: PPUSH
77360: CALL_OW 488
77364: NOT
77365: OR
77366: IFFALSE 77379
// begin result := - 1 ;
77368: LD_ADDR_VAR 0 5
77372: PUSH
77373: LD_INT 1
77375: NEG
77376: ST_TO_ADDR
// exit ;
77377: GO 77614
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77379: LD_ADDR_VAR 0 12
77383: PUSH
77384: LD_VAR 0 1
77388: PPUSH
77389: LD_VAR 0 2
77393: PPUSH
77394: LD_VAR 0 3
77398: PPUSH
77399: LD_VAR 0 4
77403: PPUSH
77404: CALL 76462 0 4
77408: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77409: LD_ADDR_VAR 0 11
77413: PUSH
77414: LD_VAR 0 1
77418: PPUSH
77419: LD_VAR 0 2
77423: PPUSH
77424: LD_VAR 0 12
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: PPUSH
77433: LD_VAR 0 12
77437: PUSH
77438: LD_INT 2
77440: ARRAY
77441: PPUSH
77442: CALL_OW 298
77446: ST_TO_ADDR
// distance := 9999 ;
77447: LD_ADDR_VAR 0 10
77451: PUSH
77452: LD_INT 9999
77454: ST_TO_ADDR
// for i := 0 to 5 do
77455: LD_ADDR_VAR 0 6
77459: PUSH
77460: DOUBLE
77461: LD_INT 0
77463: DEC
77464: ST_TO_ADDR
77465: LD_INT 5
77467: PUSH
77468: FOR_TO
77469: IFFALSE 77612
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77471: LD_ADDR_VAR 0 7
77475: PUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: LD_VAR 0 6
77485: PPUSH
77486: LD_VAR 0 11
77490: PPUSH
77491: CALL_OW 272
77495: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77496: LD_ADDR_VAR 0 8
77500: PUSH
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 6
77510: PPUSH
77511: LD_VAR 0 11
77515: PPUSH
77516: CALL_OW 273
77520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77521: LD_VAR 0 7
77525: PPUSH
77526: LD_VAR 0 8
77530: PPUSH
77531: CALL_OW 488
77535: NOT
77536: IFFALSE 77540
// continue ;
77538: GO 77468
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77540: LD_ADDR_VAR 0 9
77544: PUSH
77545: LD_VAR 0 12
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: PPUSH
77554: LD_VAR 0 12
77558: PUSH
77559: LD_INT 2
77561: ARRAY
77562: PPUSH
77563: LD_VAR 0 7
77567: PPUSH
77568: LD_VAR 0 8
77572: PPUSH
77573: CALL_OW 298
77577: ST_TO_ADDR
// if tmp < distance then
77578: LD_VAR 0 9
77582: PUSH
77583: LD_VAR 0 10
77587: LESS
77588: IFFALSE 77610
// begin result := i ;
77590: LD_ADDR_VAR 0 5
77594: PUSH
77595: LD_VAR 0 6
77599: ST_TO_ADDR
// distance := tmp ;
77600: LD_ADDR_VAR 0 10
77604: PUSH
77605: LD_VAR 0 9
77609: ST_TO_ADDR
// end ; end ;
77610: GO 77468
77612: POP
77613: POP
// end ;
77614: LD_VAR 0 5
77618: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
// if not driver or not IsInUnit ( driver ) then
77623: LD_VAR 0 1
77627: NOT
77628: PUSH
77629: LD_VAR 0 1
77633: PPUSH
77634: CALL_OW 310
77638: NOT
77639: OR
77640: IFFALSE 77644
// exit ;
77642: GO 77734
// vehicle := IsInUnit ( driver ) ;
77644: LD_ADDR_VAR 0 3
77648: PUSH
77649: LD_VAR 0 1
77653: PPUSH
77654: CALL_OW 310
77658: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77659: LD_VAR 0 1
77663: PPUSH
77664: LD_STRING \
77666: PUSH
77667: LD_INT 0
77669: PUSH
77670: LD_INT 0
77672: PUSH
77673: LD_INT 0
77675: PUSH
77676: LD_INT 0
77678: PUSH
77679: LD_INT 0
77681: PUSH
77682: LD_INT 0
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: PUSH
77694: LD_STRING E
77696: PUSH
77697: LD_INT 0
77699: PUSH
77700: LD_INT 0
77702: PUSH
77703: LD_VAR 0 3
77707: PUSH
77708: LD_INT 0
77710: PUSH
77711: LD_INT 0
77713: PUSH
77714: LD_INT 0
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PPUSH
77730: CALL_OW 446
// end ;
77734: LD_VAR 0 2
77738: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77739: LD_INT 0
77741: PPUSH
77742: PPUSH
// if not driver or not IsInUnit ( driver ) then
77743: LD_VAR 0 1
77747: NOT
77748: PUSH
77749: LD_VAR 0 1
77753: PPUSH
77754: CALL_OW 310
77758: NOT
77759: OR
77760: IFFALSE 77764
// exit ;
77762: GO 77854
// vehicle := IsInUnit ( driver ) ;
77764: LD_ADDR_VAR 0 3
77768: PUSH
77769: LD_VAR 0 1
77773: PPUSH
77774: CALL_OW 310
77778: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77779: LD_VAR 0 1
77783: PPUSH
77784: LD_STRING \
77786: PUSH
77787: LD_INT 0
77789: PUSH
77790: LD_INT 0
77792: PUSH
77793: LD_INT 0
77795: PUSH
77796: LD_INT 0
77798: PUSH
77799: LD_INT 0
77801: PUSH
77802: LD_INT 0
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: PUSH
77814: LD_STRING E
77816: PUSH
77817: LD_INT 0
77819: PUSH
77820: LD_INT 0
77822: PUSH
77823: LD_VAR 0 3
77827: PUSH
77828: LD_INT 0
77830: PUSH
77831: LD_INT 0
77833: PUSH
77834: LD_INT 0
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: PPUSH
77850: CALL_OW 447
// end ;
77854: LD_VAR 0 2
77858: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77859: LD_INT 0
77861: PPUSH
77862: PPUSH
77863: PPUSH
// tmp := [ ] ;
77864: LD_ADDR_VAR 0 5
77868: PUSH
77869: EMPTY
77870: ST_TO_ADDR
// for i in units do
77871: LD_ADDR_VAR 0 4
77875: PUSH
77876: LD_VAR 0 1
77880: PUSH
77881: FOR_IN
77882: IFFALSE 77920
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77884: LD_ADDR_VAR 0 5
77888: PUSH
77889: LD_VAR 0 5
77893: PPUSH
77894: LD_VAR 0 5
77898: PUSH
77899: LD_INT 1
77901: PLUS
77902: PPUSH
77903: LD_VAR 0 4
77907: PPUSH
77908: CALL_OW 256
77912: PPUSH
77913: CALL_OW 2
77917: ST_TO_ADDR
77918: GO 77881
77920: POP
77921: POP
// if not tmp then
77922: LD_VAR 0 5
77926: NOT
77927: IFFALSE 77931
// exit ;
77929: GO 77979
// if asc then
77931: LD_VAR 0 2
77935: IFFALSE 77959
// result := SortListByListAsc ( units , tmp ) else
77937: LD_ADDR_VAR 0 3
77941: PUSH
77942: LD_VAR 0 1
77946: PPUSH
77947: LD_VAR 0 5
77951: PPUSH
77952: CALL_OW 76
77956: ST_TO_ADDR
77957: GO 77979
// result := SortListByListDesc ( units , tmp ) ;
77959: LD_ADDR_VAR 0 3
77963: PUSH
77964: LD_VAR 0 1
77968: PPUSH
77969: LD_VAR 0 5
77973: PPUSH
77974: CALL_OW 77
77978: ST_TO_ADDR
// end ;
77979: LD_VAR 0 3
77983: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77984: LD_INT 0
77986: PPUSH
77987: PPUSH
// task := GetTaskList ( mech ) ;
77988: LD_ADDR_VAR 0 4
77992: PUSH
77993: LD_VAR 0 1
77997: PPUSH
77998: CALL_OW 437
78002: ST_TO_ADDR
// if not task then
78003: LD_VAR 0 4
78007: NOT
78008: IFFALSE 78012
// exit ;
78010: GO 78054
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78012: LD_ADDR_VAR 0 3
78016: PUSH
78017: LD_VAR 0 4
78021: PUSH
78022: LD_INT 1
78024: ARRAY
78025: PUSH
78026: LD_INT 1
78028: ARRAY
78029: PUSH
78030: LD_STRING r
78032: EQUAL
78033: PUSH
78034: LD_VAR 0 4
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: PUSH
78043: LD_INT 4
78045: ARRAY
78046: PUSH
78047: LD_VAR 0 2
78051: EQUAL
78052: AND
78053: ST_TO_ADDR
// end ;
78054: LD_VAR 0 3
78058: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78059: LD_INT 0
78061: PPUSH
// SetDir ( unit , d ) ;
78062: LD_VAR 0 1
78066: PPUSH
78067: LD_VAR 0 4
78071: PPUSH
78072: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78076: LD_VAR 0 1
78080: PPUSH
78081: LD_VAR 0 2
78085: PPUSH
78086: LD_VAR 0 3
78090: PPUSH
78091: LD_VAR 0 5
78095: PPUSH
78096: CALL_OW 48
// end ;
78100: LD_VAR 0 6
78104: RET
// export function ToNaturalNumber ( number ) ; begin
78105: LD_INT 0
78107: PPUSH
// result := number div 1 ;
78108: LD_ADDR_VAR 0 2
78112: PUSH
78113: LD_VAR 0 1
78117: PUSH
78118: LD_INT 1
78120: DIV
78121: ST_TO_ADDR
// if number < 0 then
78122: LD_VAR 0 1
78126: PUSH
78127: LD_INT 0
78129: LESS
78130: IFFALSE 78140
// result := 0 ;
78132: LD_ADDR_VAR 0 2
78136: PUSH
78137: LD_INT 0
78139: ST_TO_ADDR
// end ;
78140: LD_VAR 0 2
78144: RET
// export function SortByClass ( units , class ) ; var un ; begin
78145: LD_INT 0
78147: PPUSH
78148: PPUSH
// if not units or not class then
78149: LD_VAR 0 1
78153: NOT
78154: PUSH
78155: LD_VAR 0 2
78159: NOT
78160: OR
78161: IFFALSE 78165
// exit ;
78163: GO 78260
// result := [ ] ;
78165: LD_ADDR_VAR 0 3
78169: PUSH
78170: EMPTY
78171: ST_TO_ADDR
// for un in units do
78172: LD_ADDR_VAR 0 4
78176: PUSH
78177: LD_VAR 0 1
78181: PUSH
78182: FOR_IN
78183: IFFALSE 78258
// if GetClass ( un ) = class then
78185: LD_VAR 0 4
78189: PPUSH
78190: CALL_OW 257
78194: PUSH
78195: LD_VAR 0 2
78199: EQUAL
78200: IFFALSE 78227
// result := Insert ( result , 1 , un ) else
78202: LD_ADDR_VAR 0 3
78206: PUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: LD_INT 1
78214: PPUSH
78215: LD_VAR 0 4
78219: PPUSH
78220: CALL_OW 2
78224: ST_TO_ADDR
78225: GO 78256
// result := Replace ( result , result + 1 , un ) ;
78227: LD_ADDR_VAR 0 3
78231: PUSH
78232: LD_VAR 0 3
78236: PPUSH
78237: LD_VAR 0 3
78241: PUSH
78242: LD_INT 1
78244: PLUS
78245: PPUSH
78246: LD_VAR 0 4
78250: PPUSH
78251: CALL_OW 1
78255: ST_TO_ADDR
78256: GO 78182
78258: POP
78259: POP
// end ;
78260: LD_VAR 0 3
78264: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
78269: PPUSH
78270: PPUSH
78271: PPUSH
78272: PPUSH
78273: PPUSH
// result := [ ] ;
78274: LD_ADDR_VAR 0 4
78278: PUSH
78279: EMPTY
78280: ST_TO_ADDR
// if x - r < 0 then
78281: LD_VAR 0 1
78285: PUSH
78286: LD_VAR 0 3
78290: MINUS
78291: PUSH
78292: LD_INT 0
78294: LESS
78295: IFFALSE 78307
// min_x := 0 else
78297: LD_ADDR_VAR 0 8
78301: PUSH
78302: LD_INT 0
78304: ST_TO_ADDR
78305: GO 78323
// min_x := x - r ;
78307: LD_ADDR_VAR 0 8
78311: PUSH
78312: LD_VAR 0 1
78316: PUSH
78317: LD_VAR 0 3
78321: MINUS
78322: ST_TO_ADDR
// if y - r < 0 then
78323: LD_VAR 0 2
78327: PUSH
78328: LD_VAR 0 3
78332: MINUS
78333: PUSH
78334: LD_INT 0
78336: LESS
78337: IFFALSE 78349
// min_y := 0 else
78339: LD_ADDR_VAR 0 7
78343: PUSH
78344: LD_INT 0
78346: ST_TO_ADDR
78347: GO 78365
// min_y := y - r ;
78349: LD_ADDR_VAR 0 7
78353: PUSH
78354: LD_VAR 0 2
78358: PUSH
78359: LD_VAR 0 3
78363: MINUS
78364: ST_TO_ADDR
// max_x := x + r ;
78365: LD_ADDR_VAR 0 9
78369: PUSH
78370: LD_VAR 0 1
78374: PUSH
78375: LD_VAR 0 3
78379: PLUS
78380: ST_TO_ADDR
// max_y := y + r ;
78381: LD_ADDR_VAR 0 10
78385: PUSH
78386: LD_VAR 0 2
78390: PUSH
78391: LD_VAR 0 3
78395: PLUS
78396: ST_TO_ADDR
// for _x = min_x to max_x do
78397: LD_ADDR_VAR 0 5
78401: PUSH
78402: DOUBLE
78403: LD_VAR 0 8
78407: DEC
78408: ST_TO_ADDR
78409: LD_VAR 0 9
78413: PUSH
78414: FOR_TO
78415: IFFALSE 78516
// for _y = min_y to max_y do
78417: LD_ADDR_VAR 0 6
78421: PUSH
78422: DOUBLE
78423: LD_VAR 0 7
78427: DEC
78428: ST_TO_ADDR
78429: LD_VAR 0 10
78433: PUSH
78434: FOR_TO
78435: IFFALSE 78512
// begin if not ValidHex ( _x , _y ) then
78437: LD_VAR 0 5
78441: PPUSH
78442: LD_VAR 0 6
78446: PPUSH
78447: CALL_OW 488
78451: NOT
78452: IFFALSE 78456
// continue ;
78454: GO 78434
// if GetResourceTypeXY ( _x , _y ) then
78456: LD_VAR 0 5
78460: PPUSH
78461: LD_VAR 0 6
78465: PPUSH
78466: CALL_OW 283
78470: IFFALSE 78510
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78472: LD_ADDR_VAR 0 4
78476: PUSH
78477: LD_VAR 0 4
78481: PPUSH
78482: LD_VAR 0 4
78486: PUSH
78487: LD_INT 1
78489: PLUS
78490: PPUSH
78491: LD_VAR 0 5
78495: PUSH
78496: LD_VAR 0 6
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PPUSH
78505: CALL_OW 1
78509: ST_TO_ADDR
// end ;
78510: GO 78434
78512: POP
78513: POP
78514: GO 78414
78516: POP
78517: POP
// end ;
78518: LD_VAR 0 4
78522: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78523: LD_INT 0
78525: PPUSH
78526: PPUSH
78527: PPUSH
78528: PPUSH
78529: PPUSH
78530: PPUSH
78531: PPUSH
78532: PPUSH
// if not units then
78533: LD_VAR 0 1
78537: NOT
78538: IFFALSE 78542
// exit ;
78540: GO 78967
// result := UnitFilter ( units , [ f_ok ] ) ;
78542: LD_ADDR_VAR 0 3
78546: PUSH
78547: LD_VAR 0 1
78551: PPUSH
78552: LD_INT 50
78554: PUSH
78555: EMPTY
78556: LIST
78557: PPUSH
78558: CALL_OW 72
78562: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78563: LD_ADDR_VAR 0 8
78567: PUSH
78568: LD_VAR 0 1
78572: PUSH
78573: LD_INT 1
78575: ARRAY
78576: PPUSH
78577: CALL_OW 255
78581: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78582: LD_ADDR_VAR 0 10
78586: PUSH
78587: LD_INT 29
78589: PUSH
78590: LD_EXP 53
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: ST_TO_ADDR
// if not result then
78599: LD_VAR 0 3
78603: NOT
78604: IFFALSE 78608
// exit ;
78606: GO 78967
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78608: LD_ADDR_VAR 0 5
78612: PUSH
78613: LD_INT 81
78615: PUSH
78616: LD_VAR 0 8
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PPUSH
78625: CALL_OW 69
78629: ST_TO_ADDR
// for i in result do
78630: LD_ADDR_VAR 0 4
78634: PUSH
78635: LD_VAR 0 3
78639: PUSH
78640: FOR_IN
78641: IFFALSE 78965
// begin tag := GetTag ( i ) + 1 ;
78643: LD_ADDR_VAR 0 9
78647: PUSH
78648: LD_VAR 0 4
78652: PPUSH
78653: CALL_OW 110
78657: PUSH
78658: LD_INT 1
78660: PLUS
78661: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78662: LD_ADDR_VAR 0 7
78666: PUSH
78667: LD_VAR 0 4
78671: PPUSH
78672: CALL_OW 250
78676: PPUSH
78677: LD_VAR 0 4
78681: PPUSH
78682: CALL_OW 251
78686: PPUSH
78687: LD_INT 6
78689: PPUSH
78690: CALL 78265 0 3
78694: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78695: LD_VAR 0 7
78699: PUSH
78700: LD_VAR 0 4
78704: PPUSH
78705: CALL_OW 264
78709: PUSH
78710: LD_VAR 0 10
78714: IN
78715: NOT
78716: AND
78717: IFFALSE 78756
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78719: LD_VAR 0 4
78723: PPUSH
78724: LD_VAR 0 7
78728: PUSH
78729: LD_INT 1
78731: ARRAY
78732: PUSH
78733: LD_INT 1
78735: ARRAY
78736: PPUSH
78737: LD_VAR 0 7
78741: PUSH
78742: LD_INT 1
78744: ARRAY
78745: PUSH
78746: LD_INT 2
78748: ARRAY
78749: PPUSH
78750: CALL_OW 116
78754: GO 78963
// if path > tag then
78756: LD_VAR 0 2
78760: PUSH
78761: LD_VAR 0 9
78765: GREATER
78766: IFFALSE 78933
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78768: LD_ADDR_VAR 0 6
78772: PUSH
78773: LD_VAR 0 5
78777: PPUSH
78778: LD_INT 91
78780: PUSH
78781: LD_VAR 0 4
78785: PUSH
78786: LD_INT 12
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: PPUSH
78794: CALL_OW 72
78798: ST_TO_ADDR
// if nearEnemy then
78799: LD_VAR 0 6
78803: IFFALSE 78831
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78805: LD_VAR 0 4
78809: PPUSH
78810: LD_VAR 0 6
78814: PPUSH
78815: LD_VAR 0 4
78819: PPUSH
78820: CALL_OW 74
78824: PPUSH
78825: CALL_OW 115
78829: GO 78931
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78831: LD_VAR 0 4
78835: PPUSH
78836: LD_VAR 0 2
78840: PUSH
78841: LD_VAR 0 9
78845: ARRAY
78846: PUSH
78847: LD_INT 1
78849: ARRAY
78850: PPUSH
78851: LD_VAR 0 2
78855: PUSH
78856: LD_VAR 0 9
78860: ARRAY
78861: PUSH
78862: LD_INT 2
78864: ARRAY
78865: PPUSH
78866: CALL_OW 297
78870: PUSH
78871: LD_INT 6
78873: GREATER
78874: IFFALSE 78917
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78876: LD_VAR 0 4
78880: PPUSH
78881: LD_VAR 0 2
78885: PUSH
78886: LD_VAR 0 9
78890: ARRAY
78891: PUSH
78892: LD_INT 1
78894: ARRAY
78895: PPUSH
78896: LD_VAR 0 2
78900: PUSH
78901: LD_VAR 0 9
78905: ARRAY
78906: PUSH
78907: LD_INT 2
78909: ARRAY
78910: PPUSH
78911: CALL_OW 114
78915: GO 78931
// SetTag ( i , tag ) ;
78917: LD_VAR 0 4
78921: PPUSH
78922: LD_VAR 0 9
78926: PPUSH
78927: CALL_OW 109
// end else
78931: GO 78963
// if enemy then
78933: LD_VAR 0 5
78937: IFFALSE 78963
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78939: LD_VAR 0 4
78943: PPUSH
78944: LD_VAR 0 5
78948: PPUSH
78949: LD_VAR 0 4
78953: PPUSH
78954: CALL_OW 74
78958: PPUSH
78959: CALL_OW 115
// end ;
78963: GO 78640
78965: POP
78966: POP
// end ;
78967: LD_VAR 0 3
78971: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78972: LD_INT 0
78974: PPUSH
78975: PPUSH
78976: PPUSH
// if not unit or IsInUnit ( unit ) then
78977: LD_VAR 0 1
78981: NOT
78982: PUSH
78983: LD_VAR 0 1
78987: PPUSH
78988: CALL_OW 310
78992: OR
78993: IFFALSE 78997
// exit ;
78995: GO 79088
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78997: LD_ADDR_VAR 0 4
79001: PUSH
79002: LD_VAR 0 1
79006: PPUSH
79007: CALL_OW 250
79011: PPUSH
79012: LD_VAR 0 2
79016: PPUSH
79017: LD_INT 1
79019: PPUSH
79020: CALL_OW 272
79024: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79025: LD_ADDR_VAR 0 5
79029: PUSH
79030: LD_VAR 0 1
79034: PPUSH
79035: CALL_OW 251
79039: PPUSH
79040: LD_VAR 0 2
79044: PPUSH
79045: LD_INT 1
79047: PPUSH
79048: CALL_OW 273
79052: ST_TO_ADDR
// if ValidHex ( x , y ) then
79053: LD_VAR 0 4
79057: PPUSH
79058: LD_VAR 0 5
79062: PPUSH
79063: CALL_OW 488
79067: IFFALSE 79088
// ComTurnXY ( unit , x , y ) ;
79069: LD_VAR 0 1
79073: PPUSH
79074: LD_VAR 0 4
79078: PPUSH
79079: LD_VAR 0 5
79083: PPUSH
79084: CALL_OW 118
// end ;
79088: LD_VAR 0 3
79092: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79093: LD_INT 0
79095: PPUSH
79096: PPUSH
// result := false ;
79097: LD_ADDR_VAR 0 3
79101: PUSH
79102: LD_INT 0
79104: ST_TO_ADDR
// if not units then
79105: LD_VAR 0 2
79109: NOT
79110: IFFALSE 79114
// exit ;
79112: GO 79159
// for i in units do
79114: LD_ADDR_VAR 0 4
79118: PUSH
79119: LD_VAR 0 2
79123: PUSH
79124: FOR_IN
79125: IFFALSE 79157
// if See ( side , i ) then
79127: LD_VAR 0 1
79131: PPUSH
79132: LD_VAR 0 4
79136: PPUSH
79137: CALL_OW 292
79141: IFFALSE 79155
// begin result := true ;
79143: LD_ADDR_VAR 0 3
79147: PUSH
79148: LD_INT 1
79150: ST_TO_ADDR
// exit ;
79151: POP
79152: POP
79153: GO 79159
// end ;
79155: GO 79124
79157: POP
79158: POP
// end ;
79159: LD_VAR 0 3
79163: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79164: LD_INT 0
79166: PPUSH
79167: PPUSH
79168: PPUSH
79169: PPUSH
// if not unit or not points then
79170: LD_VAR 0 1
79174: NOT
79175: PUSH
79176: LD_VAR 0 2
79180: NOT
79181: OR
79182: IFFALSE 79186
// exit ;
79184: GO 79276
// dist := 99999 ;
79186: LD_ADDR_VAR 0 5
79190: PUSH
79191: LD_INT 99999
79193: ST_TO_ADDR
// for i in points do
79194: LD_ADDR_VAR 0 4
79198: PUSH
79199: LD_VAR 0 2
79203: PUSH
79204: FOR_IN
79205: IFFALSE 79274
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79207: LD_ADDR_VAR 0 6
79211: PUSH
79212: LD_VAR 0 1
79216: PPUSH
79217: LD_VAR 0 4
79221: PUSH
79222: LD_INT 1
79224: ARRAY
79225: PPUSH
79226: LD_VAR 0 4
79230: PUSH
79231: LD_INT 2
79233: ARRAY
79234: PPUSH
79235: CALL_OW 297
79239: ST_TO_ADDR
// if tmpDist < dist then
79240: LD_VAR 0 6
79244: PUSH
79245: LD_VAR 0 5
79249: LESS
79250: IFFALSE 79272
// begin result := i ;
79252: LD_ADDR_VAR 0 3
79256: PUSH
79257: LD_VAR 0 4
79261: ST_TO_ADDR
// dist := tmpDist ;
79262: LD_ADDR_VAR 0 5
79266: PUSH
79267: LD_VAR 0 6
79271: ST_TO_ADDR
// end ; end ;
79272: GO 79204
79274: POP
79275: POP
// end ;
79276: LD_VAR 0 3
79280: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79281: LD_INT 0
79283: PPUSH
// uc_side := side ;
79284: LD_ADDR_OWVAR 20
79288: PUSH
79289: LD_VAR 0 1
79293: ST_TO_ADDR
// uc_nation := 3 ;
79294: LD_ADDR_OWVAR 21
79298: PUSH
79299: LD_INT 3
79301: ST_TO_ADDR
// vc_chassis := 25 ;
79302: LD_ADDR_OWVAR 37
79306: PUSH
79307: LD_INT 25
79309: ST_TO_ADDR
// vc_engine := engine_siberite ;
79310: LD_ADDR_OWVAR 39
79314: PUSH
79315: LD_INT 3
79317: ST_TO_ADDR
// vc_control := control_computer ;
79318: LD_ADDR_OWVAR 38
79322: PUSH
79323: LD_INT 3
79325: ST_TO_ADDR
// vc_weapon := 59 ;
79326: LD_ADDR_OWVAR 40
79330: PUSH
79331: LD_INT 59
79333: ST_TO_ADDR
// result := CreateVehicle ;
79334: LD_ADDR_VAR 0 5
79338: PUSH
79339: CALL_OW 45
79343: ST_TO_ADDR
// SetDir ( result , d ) ;
79344: LD_VAR 0 5
79348: PPUSH
79349: LD_VAR 0 4
79353: PPUSH
79354: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79358: LD_VAR 0 5
79362: PPUSH
79363: LD_VAR 0 2
79367: PPUSH
79368: LD_VAR 0 3
79372: PPUSH
79373: LD_INT 0
79375: PPUSH
79376: CALL_OW 48
// end ; end_of_file
79380: LD_VAR 0 5
79384: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79385: LD_VAR 0 1
79389: PUSH
79390: LD_INT 200
79392: DOUBLE
79393: GREATEREQUAL
79394: IFFALSE 79402
79396: LD_INT 299
79398: DOUBLE
79399: LESSEQUAL
79400: IFTRUE 79404
79402: GO 79436
79404: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79405: LD_VAR 0 1
79409: PPUSH
79410: LD_VAR 0 2
79414: PPUSH
79415: LD_VAR 0 3
79419: PPUSH
79420: LD_VAR 0 4
79424: PPUSH
79425: LD_VAR 0 5
79429: PPUSH
79430: CALL 34984 0 5
79434: GO 79513
79436: LD_INT 300
79438: DOUBLE
79439: GREATEREQUAL
79440: IFFALSE 79448
79442: LD_INT 399
79444: DOUBLE
79445: LESSEQUAL
79446: IFTRUE 79450
79448: GO 79512
79450: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79451: LD_VAR 0 1
79455: PPUSH
79456: LD_VAR 0 2
79460: PPUSH
79461: LD_VAR 0 3
79465: PPUSH
79466: LD_VAR 0 4
79470: PPUSH
79471: LD_VAR 0 5
79475: PPUSH
79476: LD_VAR 0 6
79480: PPUSH
79481: LD_VAR 0 7
79485: PPUSH
79486: LD_VAR 0 8
79490: PPUSH
79491: LD_VAR 0 9
79495: PPUSH
79496: LD_VAR 0 10
79500: PPUSH
79501: LD_VAR 0 11
79505: PPUSH
79506: CALL 32626 0 11
79510: GO 79513
79512: POP
// end ;
79513: PPOPN 11
79515: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79516: LD_VAR 0 1
79520: PPUSH
79521: LD_VAR 0 2
79525: PPUSH
79526: LD_VAR 0 3
79530: PPUSH
79531: LD_VAR 0 4
79535: PPUSH
79536: LD_VAR 0 5
79540: PPUSH
79541: CALL 34720 0 5
// end ; end_of_file
79545: PPOPN 5
79547: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79548: LD_VAR 0 1
79552: PPUSH
79553: LD_VAR 0 2
79557: PPUSH
79558: LD_VAR 0 3
79562: PPUSH
79563: LD_VAR 0 4
79567: PPUSH
79568: LD_VAR 0 5
79572: PPUSH
79573: LD_VAR 0 6
79577: PPUSH
79578: CALL 20319 0 6
// end ;
79582: PPOPN 6
79584: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79585: CALL 20294 0 0
// end ;
79589: PPOPN 1
79591: END
