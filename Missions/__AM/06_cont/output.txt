// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 20503 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 10474 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 41141 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41141 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 41141 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 41141 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 41141 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 41141 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 41141 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 41141 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 41141 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 41141 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 41141 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 78923 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 82
7407: PUSH
7408: LD_INT 83
7410: PUSH
7411: LD_INT 84
7413: PUSH
7414: LD_INT 85
7416: PUSH
7417: LD_INT 86
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// for i = 1 to list do
7459: LD_ADDR_VAR 0 5
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 7
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7547
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7477: LD_VAR 0 7
7481: PUSH
7482: LD_VAR 0 5
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 1
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_VAR 0 5
7511: ARRAY
7512: PPUSH
7513: LD_VAR 0 3
7517: PPUSH
7518: CALL_OW 482
7522: AND
7523: IFFALSE 7545
// AddComResearch ( lab , list [ i ] ) ;
7525: LD_VAR 0 2
7529: PPUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: CALL_OW 184
7545: GO 7474
7547: POP
7548: POP
// end ;
7549: LD_VAR 0 4
7553: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7554: LD_INT 0
7556: PPUSH
7557: PPUSH
7558: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_VAR 0 3
7594: LESSEQUAL
7595: IFFALSE 7703
// begin for i = 1 to vehCount do
7597: LD_ADDR_VAR 0 9
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_VAR 0 3
7611: PUSH
7612: FOR_TO
7613: IFFALSE 7701
// begin weapon := weaponTab [ i ] ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 9
7629: ARRAY
7630: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 46
7638: EQUAL
7639: IFFALSE 7670
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 24
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: LD_VAR 0 6
7658: PPUSH
7659: LD_VAR 0 10
7663: PPUSH
7664: CALL_OW 185
7668: GO 7699
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 7
7679: PPUSH
7680: LD_VAR 0 5
7684: PPUSH
7685: LD_VAR 0 6
7689: PPUSH
7690: LD_VAR 0 10
7694: PPUSH
7695: CALL_OW 185
// end ;
7699: GO 7612
7701: POP
7702: POP
// end ; end ;
7703: LD_VAR 0 8
7707: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7716: LD_ADDR_VAR 0 8
7720: PUSH
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL_OW 313
7730: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7731: LD_ADDR_VAR 0 9
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 24
7765: PUSH
7766: LD_INT 750
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 54
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7797: LD_ADDR_VAR 0 6
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: LD_INT 1000
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: PPUSH
7854: CALL_OW 70
7858: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7859: LD_VAR 0 6
7863: NOT
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: NOT
7907: AND
7908: IFFALSE 7912
// exit ;
7910: GO 8070
// if buildingsList and engineerOkInside then
7912: LD_VAR 0 6
7916: PUSH
7917: LD_VAR 0 8
7921: AND
7922: IFFALSE 7933
// ComExitBuilding ( engineerOkInside ) ;
7924: LD_VAR 0 8
7928: PPUSH
7929: CALL_OW 122
// if buildingsList and engineerOkOutside then
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 9
7942: AND
7943: IFFALSE 7963
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7945: LD_VAR 0 9
7949: PPUSH
7950: LD_VAR 0 6
7954: PUSH
7955: LD_INT 1
7957: ARRAY
7958: PPUSH
7959: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_INT 0
7970: EQUAL
7971: PUSH
7972: LD_VAR 0 4
7976: PUSH
7977: LD_INT 0
7979: EQUAL
7980: AND
7981: PUSH
7982: LD_VAR 0 9
7986: AND
7987: IFFALSE 8003
// ComEnterUnit ( engineerOkOutside , depot ) ;
7989: LD_VAR 0 9
7993: PPUSH
7994: LD_VAR 0 2
7998: PPUSH
7999: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8003: LD_VAR 0 9
8007: PUSH
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: EQUAL
8016: AND
8017: PUSH
8018: LD_VAR 0 4
8022: AND
8023: IFFALSE 8070
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8025: LD_VAR 0 9
8029: PPUSH
8030: LD_VAR 0 4
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_VAR 0 4
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: LD_VAR 0 4
8052: PUSH
8053: LD_INT 3
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 4
8064: ARRAY
8065: PPUSH
8066: CALL_OW 145
// end ;
8070: LD_VAR 0 5
8074: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
8084: PPUSH
8085: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8086: LD_ADDR_VAR 0 6
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_VAR 0 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: LD_INT 4
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 24
8125: PUSH
8126: LD_INT 251
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 23
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 25
8178: PUSH
8179: LD_INT 4
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 50
8188: PUSH
8189: EMPTY
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 70
8202: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8203: LD_ADDR_VAR 0 10
8207: PUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: LD_INT 24
8257: PUSH
8258: LD_INT 750
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8280: LD_ADDR_VAR 0 11
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 22
8292: PUSH
8293: LD_VAR 0 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 21
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 24
8334: PUSH
8335: LD_INT 1000
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8357: LD_VAR 0 10
8361: NOT
8362: PUSH
8363: LD_VAR 0 11
8367: NOT
8368: AND
8369: PUSH
8370: LD_VAR 0 6
8374: NOT
8375: AND
8376: IFFALSE 8380
// exit ;
8378: GO 8586
// if damageUnits and sci_list then
8380: LD_VAR 0 10
8384: PUSH
8385: LD_VAR 0 6
8389: AND
8390: IFFALSE 8406
// ComMoveToArea ( damageUnits , healArea ) ;
8392: LD_VAR 0 10
8396: PPUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 113
// if unitsToHeal and sci_list then
8406: LD_VAR 0 11
8410: PUSH
8411: LD_VAR 0 6
8415: AND
8416: IFFALSE 8427
// ComExitBuilding ( sci_list ) ;
8418: LD_VAR 0 6
8422: PPUSH
8423: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8427: LD_VAR 0 11
8431: PUSH
8432: LD_VAR 0 7
8436: AND
8437: IFFALSE 8457
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_VAR 0 11
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8457: LD_VAR 0 10
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: PUSH
8466: LD_VAR 0 11
8470: PUSH
8471: LD_INT 0
8473: EQUAL
8474: AND
8475: PUSH
8476: LD_VAR 0 7
8480: AND
8481: IFFALSE 8586
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8483: LD_ADDR_VAR 0 12
8487: PUSH
8488: LD_INT 22
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 30
8512: PUSH
8513: LD_INT 8
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8530: LD_ADDR_VAR 0 13
8534: PUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_VAR 0 12
8542: PPUSH
8543: CALL_OW 12
8547: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8548: LD_VAR 0 7
8552: PPUSH
8553: LD_INT 3
8555: PUSH
8556: LD_INT 60
8558: PUSH
8559: EMPTY
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 72
8570: PPUSH
8571: LD_VAR 0 12
8575: PUSH
8576: LD_VAR 0 13
8580: ARRAY
8581: PPUSH
8582: CALL_OW 120
// end ; end ;
8586: LD_VAR 0 5
8590: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
// tmp := [ ] ;
8598: LD_ADDR_VAR 0 6
8602: PUSH
8603: EMPTY
8604: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8605: LD_ADDR_VAR 0 7
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_VAR 0 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 69
8640: ST_TO_ADDR
// if bunkers then
8641: LD_VAR 0 7
8645: IFFALSE 8715
// for i in bunkers do
8647: LD_ADDR_VAR 0 4
8651: PUSH
8652: LD_VAR 0 7
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8713
// for j in UnitsInside ( i ) do
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: LD_VAR 0 4
8669: PPUSH
8670: CALL_OW 313
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8709
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8678: LD_ADDR_VAR 0 6
8682: PUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: LD_VAR 0 6
8692: PUSH
8693: LD_INT 1
8695: PLUS
8696: PPUSH
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL_OW 1
8706: ST_TO_ADDR
8707: GO 8675
8709: POP
8710: POP
8711: GO 8657
8713: POP
8714: POP
// if tmp then
8715: LD_VAR 0 6
8719: IFFALSE 8759
// begin ComExitBuilding ( tmp ) ;
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8730: LD_VAR 0 6
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 250
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 251
8754: PPUSH
8755: CALL_OW 174
// end ; end ;
8759: LD_VAR 0 3
8763: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
// enable ;
8769: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8770: LD_ADDR_VAR 0 6
8774: PUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: CALL_OW 435
8784: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8785: LD_ADDR_VAR 0 5
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: LD_VAR 0 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 3
8832: PPUSH
8833: CALL_OW 435
8837: AND
8838: PUSH
8839: LD_VAR 0 6
8843: AND
8844: IFFALSE 8877
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8846: LD_VAR 0 5
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_INT 2
8871: ARRAY
8872: PPUSH
8873: CALL_OW 177
// end ;
8877: LD_VAR 0 4
8881: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 56
8916: PUSH
8917: EMPTY
8918: LIST
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 700
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 60
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL_OW 70
9004: PUSH
9005: LD_EXP 47
9009: PUSH
9010: LD_EXP 48
9014: UNION
9015: DIFF
9016: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_INT 22
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 58
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: LD_INT 24
9057: PUSH
9058: LD_INT 251
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 70
9075: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 30
9113: PUSH
9114: LD_INT 5
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 24
9128: PUSH
9129: LD_INT 251
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 70
9145: ST_TO_ADDR
// if barrackList then
9146: LD_VAR 0 9
9150: IFFALSE 9306
// begin if turretList = 0 then
9152: LD_VAR 0 7
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9198
// begin if soldiersList then
9162: LD_VAR 0 6
9166: IFFALSE 9196
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9168: LD_VAR 0 6
9172: PPUSH
9173: LD_VAR 0 9
9177: PUSH
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 9
9185: PPUSH
9186: CALL_OW 12
9190: ARRAY
9191: PPUSH
9192: CALL_OW 120
// end else
9196: GO 9306
// begin for i in barrackList do
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: FOR_IN
9209: IFFALSE 9304
// begin if not turretList then
9211: LD_VAR 0 7
9215: NOT
9216: IFFALSE 9222
// exit ;
9218: POP
9219: POP
9220: GO 9306
// insideUnits = UnitsInside ( i ) ;
9222: LD_ADDR_VAR 0 10
9226: PUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 313
9236: ST_TO_ADDR
// if insideUnits then
9237: LD_VAR 0 10
9241: IFFALSE 9302
// begin tmp := insideUnits [ 1 ] ;
9243: LD_ADDR_VAR 0 8
9247: PUSH
9248: LD_VAR 0 10
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9257: LD_VAR 0 8
9261: PPUSH
9262: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9266: LD_VAR 0 8
9270: PPUSH
9271: LD_VAR 0 7
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9284: LD_ADDR_VAR 0 7
9288: PUSH
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 3
9301: ST_TO_ADDR
// end ; end ;
9302: GO 9208
9304: POP
9305: POP
// end ; end ; end ;
9306: LD_VAR 0 3
9310: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9319: LD_ADDR_VAR 0 8
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 52
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: ST_TO_ADDR
// if not craneList then
9366: LD_VAR 0 8
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9809
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9375: LD_ADDR_VAR 0 9
9379: PUSH
9380: LD_INT 22
9382: PUSH
9383: LD_VAR 0 1
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 1000
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9432: LD_VAR 0 9
9436: PUSH
9437: LD_VAR 0 8
9441: PPUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 750
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: AND
9457: IFFALSE 9492
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: LD_INT 24
9466: PUSH
9467: LD_INT 750
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 72
9478: PPUSH
9479: LD_VAR 0 9
9483: PUSH
9484: LD_INT 1
9486: ARRAY
9487: PPUSH
9488: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_INT 3
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 750
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: IFFALSE 9556
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: PPUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9556: LD_VAR 0 8
9560: PUSH
9561: LD_VAR 0 9
9565: PUSH
9566: LD_INT 0
9568: EQUAL
9569: AND
9570: PUSH
9571: LD_VAR 0 3
9575: AND
9576: IFFALSE 9623
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9578: LD_VAR 0 8
9582: PPUSH
9583: LD_VAR 0 3
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 3
9596: PUSH
9597: LD_INT 2
9599: ARRAY
9600: PPUSH
9601: LD_VAR 0 3
9605: PUSH
9606: LD_INT 3
9608: ARRAY
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_INT 4
9617: ARRAY
9618: PPUSH
9619: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9623: LD_ADDR_VAR 0 7
9627: PUSH
9628: LD_VAR 0 2
9632: PPUSH
9633: LD_INT 22
9635: PUSH
9636: LD_VAR 0 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 52
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 24
9670: PUSH
9671: LD_INT 750
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 70
9692: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 2
9702: PPUSH
9703: LD_INT 22
9705: PUSH
9706: LD_VAR 0 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 0
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 70
9751: ST_TO_ADDR
// if crane then
9752: LD_VAR 0 7
9756: IFFALSE 9809
// for i in crane do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 7
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9807
// begin if dep then
9771: LD_VAR 0 6
9775: IFFALSE 9791
// ComMoveUnit ( i , dep ) ;
9777: LD_VAR 0 5
9781: PPUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9791: LD_VAR 0 5
9795: PPUSH
9796: CALL_OW 311
9800: PPUSH
9801: CALL 80347 0 1
// end ;
9805: GO 9768
9807: POP
9808: POP
// end ;
9809: LD_VAR 0 4
9813: RET
// export function BuildBulldozer ; begin
9814: LD_INT 0
9816: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9817: LD_INT 17
9819: PPUSH
9820: CALL_OW 302
9824: NOT
9825: PUSH
9826: LD_INT 17
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 3
9836: NONEQUAL
9837: OR
9838: IFFALSE 9842
// exit ;
9840: GO 9861
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9842: LD_INT 17
9844: PPUSH
9845: LD_INT 24
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_INT 53
9856: PPUSH
9857: CALL_OW 185
// end ;
9861: LD_VAR 0 1
9865: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9866: LD_INT 0
9868: PPUSH
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
// if not bulldozer then
9873: LD_VAR 0 1
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10164
// list := ListEnvironmentArea ( area ) ;
9882: LD_ADDR_VAR 0 5
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 353
9896: ST_TO_ADDR
// tmp := [ ] ;
9897: LD_ADDR_VAR 0 6
9901: PUSH
9902: EMPTY
9903: ST_TO_ADDR
// for i = 1 to list do
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_VAR 0 5
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10018
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9922: LD_VAR 0 5
9926: PUSH
9927: LD_VAR 0 4
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 5
9941: PUSH
9942: LD_VAR 0 4
9946: ARRAY
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: CALL_OW 554
9956: IFFALSE 10016
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
9958: LD_ADDR_VAR 0 6
9962: PUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: LD_VAR 0 6
9972: PUSH
9973: LD_INT 1
9975: PLUS
9976: PPUSH
9977: LD_VAR 0 5
9981: PUSH
9982: LD_VAR 0 4
9986: ARRAY
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PUSH
9992: LD_VAR 0 5
9996: PUSH
9997: LD_VAR 0 4
10001: ARRAY
10002: PUSH
10003: LD_INT 2
10005: ARRAY
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// end ;
10016: GO 9919
10018: POP
10019: POP
// ComStop ( bulldozer ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// for i = tmp downto 1 do
10058: LD_ADDR_VAR 0 4
10062: PUSH
10063: DOUBLE
10064: LD_VAR 0 6
10068: INC
10069: ST_TO_ADDR
10070: LD_INT 1
10072: PUSH
10073: FOR_DOWNTO
10074: IFFALSE 10162
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10076: LD_ADDR_VAR 0 7
10080: PUSH
10081: LD_VAR 0 7
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 7
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL 10265 0 3
10108: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 7
10118: PUSH
10119: LD_INT 1
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 7
10127: PUSH
10128: LD_INT 2
10130: ARRAY
10131: PPUSH
10132: CALL 10169 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10136: LD_ADDR_VAR 0 6
10140: PUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PUSH
10151: LD_INT 3
10153: ARRAY
10154: PPUSH
10155: CALL_OW 3
10159: ST_TO_ADDR
// end ;
10160: GO 10073
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 3
10168: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10169: LD_INT 0
10171: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: CALL_OW 351
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: CALL_OW 554
10201: AND
10202: PUSH
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: CALL_OW 488
10217: AND
10218: PUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: CALL_OW 428
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: EQUAL
10238: AND
10239: IFFALSE 10260
// AddComMoveXY ( bulldozer , x , y ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: CALL_OW 171
// end ;
10260: LD_VAR 0 4
10264: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// dist := 99999 ;
10274: LD_ADDR_VAR 0 6
10278: PUSH
10279: LD_INT 99999
10281: ST_TO_ADDR
// for i = 1 to list do
10282: LD_ADDR_VAR 0 5
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_VAR 0 3
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10436
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10300: LD_ADDR_VAR 0 7
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 5
10324: ARRAY
10325: PUSH
10326: LD_INT 1
10328: ARRAY
10329: PPUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_VAR 0 5
10339: ARRAY
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: CALL_OW 298
10349: ST_TO_ADDR
// if d = 0 then
10350: LD_VAR 0 7
10354: PUSH
10355: LD_INT 0
10357: EQUAL
10358: IFFALSE 10362
// continue ;
10360: GO 10297
// if d < dist then
10362: LD_VAR 0 7
10366: PUSH
10367: LD_VAR 0 6
10371: LESS
10372: IFFALSE 10434
// begin _x := list [ i ] [ 1 ] ;
10374: LD_ADDR_VAR 0 8
10378: PUSH
10379: LD_VAR 0 3
10383: PUSH
10384: LD_VAR 0 5
10388: ARRAY
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10394: LD_ADDR_VAR 0 9
10398: PUSH
10399: LD_VAR 0 3
10403: PUSH
10404: LD_VAR 0 5
10408: ARRAY
10409: PUSH
10410: LD_INT 2
10412: ARRAY
10413: ST_TO_ADDR
// _i := i ;
10414: LD_ADDR_VAR 0 10
10418: PUSH
10419: LD_VAR 0 5
10423: ST_TO_ADDR
// dist := d ;
10424: LD_ADDR_VAR 0 6
10428: PUSH
10429: LD_VAR 0 7
10433: ST_TO_ADDR
// end ; end ;
10434: GO 10297
10436: POP
10437: POP
// result := [ _x , _y , _i , dist ] ;
10438: LD_ADDR_VAR 0 4
10442: PUSH
10443: LD_VAR 0 8
10447: PUSH
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 10
10457: PUSH
10458: LD_VAR 0 6
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// end ; end_of_file
10469: LD_VAR 0 4
10473: RET
// export function Action ; begin
10474: LD_INT 0
10476: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10477: LD_INT 66
10479: PPUSH
10480: LD_INT 4
10482: PPUSH
10483: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10487: LD_INT 22
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: PUSH
10516: LD_INT 0
10518: EQUAL
10519: IFFALSE 10533
// SetClass ( JMM , 2 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_INT 2
10528: PPUSH
10529: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10533: LD_STRING M1
10535: PPUSH
10536: CALL_OW 337
// case Difficulty of 1 :
10540: LD_OWVAR 67
10544: PUSH
10545: LD_INT 1
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10563
10553: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10554: LD_STRING M1-1
10556: PPUSH
10557: CALL_OW 337
10561: GO 10606
10563: LD_INT 2
10565: DOUBLE
10566: EQUAL
10567: IFTRUE 10571
10569: GO 10581
10571: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10572: LD_STRING M1-2
10574: PPUSH
10575: CALL_OW 337
10579: GO 10606
10581: LD_INT 3
10583: DOUBLE
10584: GREATEREQUAL
10585: IFFALSE 10593
10587: LD_INT 4
10589: DOUBLE
10590: LESSEQUAL
10591: IFTRUE 10595
10593: GO 10605
10595: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10596: LD_STRING M1-3
10598: PPUSH
10599: CALL_OW 337
10603: GO 10606
10605: POP
// ChangeMissionObjectives ( M1cont ) ;
10606: LD_STRING M1cont
10608: PPUSH
10609: CALL_OW 337
// SaveForQuickRestart ;
10613: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10617: LD_INT 525
10619: PPUSH
10620: LD_INT 700
10622: PPUSH
10623: CALL_OW 12
10627: PPUSH
10628: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10632: LD_INT 5
10634: PPUSH
10635: LD_INT 82
10637: PPUSH
10638: LD_INT 38
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 56
// wait ( 0 0$14 ) ;
10651: LD_INT 490
10653: PPUSH
10654: CALL_OW 67
// firstCrateSpawn := true ;
10658: LD_ADDR_EXP 40
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// end ;
10666: LD_VAR 0 1
10670: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10671: LD_EXP 40
10675: IFFALSE 11064
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
// begin if IsOk ( Lisa ) then
10683: LD_EXP 2
10687: PPUSH
10688: CALL_OW 302
10692: IFFALSE 10708
// Say ( Lisa , DR0-Lisa-1 ) else
10694: LD_EXP 2
10698: PPUSH
10699: LD_STRING DR0-Lisa-1
10701: PPUSH
10702: CALL_OW 88
10706: GO 10854
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10708: LD_INT 22
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PUSH
10799: LD_EXP 1
10803: PUSH
10804: LD_EXP 8
10808: PUSH
10809: LD_EXP 5
10813: PUSH
10814: LD_EXP 6
10818: PUSH
10819: LD_EXP 7
10823: PUSH
10824: LD_EXP 4
10828: PUSH
10829: LD_EXP 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: DIFF
10843: PPUSH
10844: LD_STRING DR0-Sol1-1
10846: PPUSH
10847: LD_STRING DR0-Sol1-1
10849: PPUSH
10850: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PPUSH
10945: CALL_OW 69
10949: PUSH
10950: LD_EXP 1
10954: PUSH
10955: LD_EXP 8
10959: PUSH
10960: LD_EXP 5
10964: PUSH
10965: LD_EXP 2
10969: PUSH
10970: LD_EXP 6
10974: PUSH
10975: LD_EXP 7
10979: PUSH
10980: LD_EXP 4
10984: PUSH
10985: LD_EXP 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: DIFF
11000: PPUSH
11001: LD_STRING DR0-Sol2-1
11003: PPUSH
11004: LD_STRING DR0-Sol2-1
11006: PPUSH
11007: CALL 6771 0 3
11011: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11012: LD_EXP 4
11016: PPUSH
11017: CALL_OW 302
11021: IFFALSE 11035
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11023: LD_EXP 4
11027: PPUSH
11028: LD_STRING DR0-Cyrus-1
11030: PPUSH
11031: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11035: LD_EXP 2
11039: PPUSH
11040: CALL_OW 302
11044: PUSH
11045: LD_VAR 0 1
11049: OR
11050: IFFALSE 11064
// Say ( JMM , DR0-JMM-1 ) ;
11052: LD_EXP 1
11056: PPUSH
11057: LD_STRING DR0-JMM-1
11059: PPUSH
11060: CALL_OW 88
// end ;
11064: PPOPN 1
11066: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11067: LD_EXP 5
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: LD_INT 0
11108: GREATER
11109: AND
11110: PUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 463
11118: NOT
11119: AND
11120: IFFALSE 11398
11122: GO 11124
11124: DISABLE
// begin DialogueOn ;
11125: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11129: LD_EXP 5
11133: PPUSH
11134: LD_STRING D10-Frank-1
11136: PPUSH
11137: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11141: LD_INT 22
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 25
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 4
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: PUSH
11221: LD_EXP 1
11225: PUSH
11226: LD_EXP 5
11230: PUSH
11231: LD_EXP 2
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: DIFF
11241: PPUSH
11242: LD_STRING D10-Sol1-1
11244: PPUSH
11245: LD_STRING D10-FSol1-1
11247: PPUSH
11248: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
11252: LD_EXP 5
11256: PPUSH
11257: LD_STRING D10-Frank-2
11259: PPUSH
11260: CALL_OW 88
// if IsOk ( Lisa ) then
11264: LD_EXP 2
11268: PPUSH
11269: CALL_OW 302
11273: IFFALSE 11289
// Say ( Lisa , D10-Lisa-2 ) else
11275: LD_EXP 2
11279: PPUSH
11280: LD_STRING D10-Lisa-2
11282: PPUSH
11283: CALL_OW 88
11287: GO 11394
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11289: LD_INT 22
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 21
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 25
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 4
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: LD_EXP 1
11373: PUSH
11374: LD_EXP 5
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: DIFF
11383: PPUSH
11384: LD_STRING D10-Sol1-2
11386: PPUSH
11387: LD_STRING D10-FSol1-2
11389: PPUSH
11390: CALL 6771 0 3
// DialogueOff ;
11394: CALL_OW 7
// end ;
11398: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 463
11406: NOT
11407: IFFALSE 11690
11409: GO 11411
11411: DISABLE
// begin HarrisonSupport ;
11412: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11416: LD_EXP 17
11420: PPUSH
11421: CALL_OW 310
11425: PPUSH
11426: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11430: LD_EXP 17
11434: PPUSH
11435: LD_STRING DEng-Eng1-1
11437: PPUSH
11438: CALL_OW 88
// wait ( 1 1$0 ) ;
11442: LD_INT 2100
11444: PPUSH
11445: CALL_OW 67
// DialogueOn ;
11449: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11453: LD_EXP 14
11457: PPUSH
11458: LD_STRING DRem-Har-1
11460: PPUSH
11461: CALL_OW 94
// if contactWithRussian then
11465: LD_EXP 22
11469: IFFALSE 11485
// Say ( JMM , DRem-JMM-1 ) else
11471: LD_EXP 1
11475: PPUSH
11476: LD_STRING DRem-JMM-1
11478: PPUSH
11479: CALL_OW 88
11483: GO 11497
// Say ( JMM , DRem-JMM-1a ) ;
11485: LD_EXP 1
11489: PPUSH
11490: LD_STRING DRem-JMM-1a
11492: PPUSH
11493: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11497: LD_EXP 14
11501: PPUSH
11502: LD_STRING DRem-Har-2
11504: PPUSH
11505: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11509: LD_STRING DenisInDelta
11511: PPUSH
11512: LD_INT 0
11514: PPUSH
11515: CALL_OW 30
11519: IFFALSE 11535
// Say ( JMM , DRem-JMM-2 ) else
11521: LD_EXP 1
11525: PPUSH
11526: LD_STRING DRem-JMM-2
11528: PPUSH
11529: CALL_OW 88
11533: GO 11547
// Say ( JMM , DRem-JMM-2a ) ;
11535: LD_EXP 1
11539: PPUSH
11540: LD_STRING DRem-JMM-2a
11542: PPUSH
11543: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11547: LD_EXP 14
11551: PPUSH
11552: LD_STRING DRem-Har-3
11554: PPUSH
11555: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DRem-JMM-3
11566: PPUSH
11567: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11571: LD_EXP 14
11575: PPUSH
11576: LD_STRING DRem-Har-4
11578: PPUSH
11579: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11583: LD_STRING DenisInDelta
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 30
11593: IFFALSE 11653
// begin Say ( JMM , DRem-JMM-4 ) ;
11595: LD_EXP 1
11599: PPUSH
11600: LD_STRING DRem-JMM-4
11602: PPUSH
11603: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11607: LD_EXP 14
11611: PPUSH
11612: LD_STRING DRem-Har-5
11614: PPUSH
11615: CALL_OW 94
// DialogueOff ;
11619: CALL_OW 7
// wait ( 4 4$00 ) ;
11623: LD_INT 8400
11625: PPUSH
11626: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// until not InBattle ( 1 ) ;
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 463
11644: NOT
11645: IFFALSE 11630
// SpawnDenis ;
11647: CALL 11691 0 0
// end else
11651: GO 11690
// begin DialogueOff ;
11653: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11657: LD_INT 36
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11670: LD_INT 15
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11683: LD_STRING MR
11685: PPUSH
11686: CALL_OW 337
// end ; end ;
11690: END
// export function SpawnDenis ; var tmp ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// PrepareDenis ;
11695: CALL 2199 0 0
// if not Denis then
11699: LD_EXP 9
11703: NOT
11704: IFFALSE 11708
// exit ;
11706: GO 11929
// CenterNowOnUnits ( Denis ) ;
11708: LD_EXP 9
11712: PPUSH
11713: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 69
11736: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11737: LD_EXP 9
11741: PPUSH
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_EXP 9
11751: PPUSH
11752: CALL_OW 74
11756: PPUSH
11757: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11761: LD_INT 35
11763: PPUSH
11764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11768: LD_INT 22
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 91
11780: PUSH
11781: LD_EXP 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: IFFALSE 11761
// SetSide ( Denis , 1 ) ;
11804: LD_EXP 9
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 235
// DialogueOn ;
11816: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11820: LD_EXP 9
11824: PPUSH
11825: LD_STRING DDen-Den-1
11827: PPUSH
11828: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11832: LD_EXP 1
11836: PPUSH
11837: LD_STRING DDen-JMM-1
11839: PPUSH
11840: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11844: LD_EXP 9
11848: PPUSH
11849: LD_STRING DDen-Den-2
11851: PPUSH
11852: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING DDen-JMM-2
11863: PPUSH
11864: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11868: LD_EXP 9
11872: PPUSH
11873: LD_STRING DDen-Den-3
11875: PPUSH
11876: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11880: LD_EXP 1
11884: PPUSH
11885: LD_STRING DDen-JMM-3
11887: PPUSH
11888: CALL_OW 88
// DialogueOff ;
11892: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11896: LD_INT 36
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11909: LD_INT 15
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11922: LD_STRING MR
11924: PPUSH
11925: CALL_OW 337
// end ;
11929: LD_VAR 0 1
11933: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 30
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_EXP 9
11967: PPUSH
11968: CALL_OW 302
11972: AND
11973: PUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 463
11981: NOT
11982: AND
11983: IFFALSE 12012
11985: GO 11987
11987: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11988: LD_EXP 9
11992: PPUSH
11993: LD_STRING DR1-Den-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_STRING DR1-JMM-1
12007: PPUSH
12008: CALL_OW 88
// end ;
12012: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12013: LD_INT 15
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 321
12023: PUSH
12024: LD_INT 2
12026: EQUAL
12027: PUSH
12028: LD_EXP 9
12032: PPUSH
12033: CALL_OW 302
12037: AND
12038: PUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 463
12046: NOT
12047: AND
12048: IFFALSE 12280
12050: GO 12052
12052: DISABLE
// begin DialogueOn ;
12053: CALL_OW 6
// if IsOK ( Denis ) then
12057: LD_EXP 9
12061: PPUSH
12062: CALL_OW 302
12066: IFFALSE 12082
// Say ( Denis , DR2-Den-1 ) else
12068: LD_EXP 9
12072: PPUSH
12073: LD_STRING DR2-Den-1
12075: PPUSH
12076: CALL_OW 88
12080: GO 12141
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12082: LD_INT 22
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: PUSH
12122: LD_EXP 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: DIFF
12130: PPUSH
12131: LD_STRING DR2-Sci1-1
12133: PPUSH
12134: LD_STRING DR2-FSci1-1
12136: PPUSH
12137: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DR2-JMM-1
12148: PPUSH
12149: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12153: LD_INT 22
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 25
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 3
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 25
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: PUSH
12233: LD_EXP 1
12237: PUSH
12238: LD_EXP 9
12242: PUSH
12243: LD_EXP 8
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: DIFF
12253: PPUSH
12254: LD_STRING DR2-Sol1-1
12256: PPUSH
12257: LD_STRING DR2-Sol1-11
12259: PPUSH
12260: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DR2-JMM-2
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// end ;
12280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 36
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: PUSH
12310: LD_INT 0
12312: EQUAL
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: PUSH
12354: LD_INT 0
12356: GREATER
12357: AND
12358: PUSH
12359: LD_EXP 23
12363: PUSH
12364: LD_INT 0
12366: EQUAL
12367: AND
12368: PUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 463
12376: NOT
12377: AND
12378: IFFALSE 12515
12380: GO 12382
12382: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12383: LD_INT 22
12385: PUSH
12386: LD_INT 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 3
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_EXP 1
12438: PUSH
12439: LD_EXP 6
12443: PUSH
12444: LD_EXP 7
12448: PUSH
12449: LD_EXP 9
12453: PUSH
12454: LD_EXP 15
12458: PUSH
12459: LD_EXP 3
12463: PUSH
12464: LD_EXP 4
12468: PUSH
12469: LD_EXP 2
12473: PUSH
12474: LD_EXP 5
12478: PUSH
12479: LD_EXP 8
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: DIFF
12496: PPUSH
12497: LD_STRING D3a-Mech1-1
12499: PPUSH
12500: LD_STRING D3a-Mech1-1
12502: PPUSH
12503: CALL 6771 0 3
// firstTower = 2 ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_INT 2
12514: ST_TO_ADDR
// end ;
12515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12516: LD_INT 22
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PUSH
12545: LD_INT 0
12547: EQUAL
12548: IFFALSE 12679
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
// begin stop_talking := true ;
12556: LD_ADDR_OWVAR 56
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12564: LD_ADDR_VAR 0 1
12568: PUSH
12569: LD_INT 22
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 25
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: FOR_IN
12650: IFFALSE 12669
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_INT 7500
12662: PPUSH
12663: CALL_OW 591
12667: GO 12649
12669: POP
12670: POP
// stop_talking := false ;
12671: LD_ADDR_OWVAR 56
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// end ;
12679: PPOPN 1
12681: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12682: LD_INT 22
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 36
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: PUSH
12711: LD_INT 22
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 33
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: AND
12751: PUSH
12752: CALL 13304 0 0
12756: AND
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 463
12765: NOT
12766: AND
12767: IFFALSE 13301
12769: GO 12771
12771: DISABLE
12772: LD_INT 0
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 30
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 33
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12858: LD_ADDR_VAR 0 5
12862: PUSH
12863: EMPTY
12864: ST_TO_ADDR
// for i in tmpControlTowers do
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: FOR_IN
12876: IFFALSE 13299
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12878: LD_EXP 1
12882: PPUSH
12883: CALL_OW 310
12887: PUSH
12888: LD_VAR 0 1
12892: EQUAL
12893: PUSH
12894: LD_EXP 1
12898: PPUSH
12899: CALL_OW 257
12903: PUSH
12904: LD_INT 3
12906: EQUAL
12907: AND
12908: IFFALSE 13042
// begin InGameOn ;
12910: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12914: LD_VAR 0 4
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12927: LD_EXP 1
12931: PPUSH
12932: LD_STRING D4a-JMM-1
12934: PPUSH
12935: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12939: LD_VAR 0 4
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: LD_EXP 1
12952: PPUSH
12953: CALL_OW 53
// wait ( 0 0$1 ) ;
12957: LD_INT 35
12959: PPUSH
12960: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12964: LD_VAR 0 4
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 4
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 250
12986: PUSH
12987: LD_INT 3
12989: PLUS
12990: PPUSH
12991: LD_VAR 0 4
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: CALL_OW 251
13004: PUSH
13005: LD_INT 2
13007: MINUS
13008: PPUSH
13009: CALL_OW 111
// wait ( 0 0$2 ) ;
13013: LD_INT 70
13015: PPUSH
13016: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING D4b-JMM-1
13027: PPUSH
13028: CALL_OW 88
// InGameOff ;
13032: CALL_OW 9
// exit ;
13036: POP
13037: POP
13038: GO 13301
// end else
13040: GO 13297
// begin InGameOn ;
13042: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13046: LD_ADDR_VAR 0 5
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 313
13060: PPUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 72
13075: ST_TO_ADDR
// if not tmpMechanicInside then
13076: LD_VAR 0 5
13080: NOT
13081: IFFALSE 13085
// continue ;
13083: GO 12875
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13085: LD_VAR 0 5
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: CALL_OW 258
13098: PUSH
13099: LD_INT 1
13101: EQUAL
13102: IFFALSE 13122
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13104: LD_VAR 0 5
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: LD_STRING D4a-Mech1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13138
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13122: LD_VAR 0 5
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: LD_STRING D4a-FMech1-1
13133: PPUSH
13134: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13138: LD_VAR 0 4
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13151: LD_VAR 0 4
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PPUSH
13160: LD_VAR 0 5
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 53
// wait ( 0 0$1 ) ;
13173: LD_INT 35
13175: PPUSH
13176: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13180: LD_VAR 0 4
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PPUSH
13189: LD_VAR 0 4
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: CALL_OW 250
13202: PUSH
13203: LD_INT 3
13205: PLUS
13206: PPUSH
13207: LD_VAR 0 4
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: CALL_OW 251
13220: PUSH
13221: LD_INT 2
13223: MINUS
13224: PPUSH
13225: CALL_OW 111
// wait ( 0 0$2 ) ;
13229: LD_INT 70
13231: PPUSH
13232: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13236: LD_VAR 0 5
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING D4b-Mech1-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING D4b-FMech1-1
13284: PPUSH
13285: CALL_OW 88
// InGameOff ;
13289: CALL_OW 9
// exit ;
13293: POP
13294: POP
13295: GO 13301
// end ; end ;
13297: GO 12875
13299: POP
13300: POP
// end ;
13301: PPOPN 5
13303: END
// function CheckMehInside ; var i , j , tmp ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
// result := false ;
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_INT 1
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 36
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: ST_TO_ADDR
// if not tmp then
13352: LD_VAR 0 4
13356: NOT
13357: IFFALSE 13361
// exit ;
13359: GO 13425
// for i in tmp do
13361: LD_ADDR_VAR 0 2
13365: PUSH
13366: LD_VAR 0 4
13370: PUSH
13371: FOR_IN
13372: IFFALSE 13423
// for j in UnitsInside ( i ) do
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: LD_VAR 0 2
13383: PPUSH
13384: CALL_OW 313
13388: PUSH
13389: FOR_IN
13390: IFFALSE 13419
// if GetClass ( j ) = class_mechanic then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 257
13401: PUSH
13402: LD_INT 3
13404: EQUAL
13405: IFFALSE 13417
// begin result := true ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// break ;
13415: GO 13419
// end ;
13417: GO 13389
13419: POP
13420: POP
13421: GO 13371
13423: POP
13424: POP
// end ;
13425: LD_VAR 0 1
13429: RET
// every 12 12$0 do
13430: GO 13432
13432: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13433: LD_INT 35
13435: PPUSH
13436: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 463
13447: NOT
13448: PUSH
13449: LD_INT 32
13451: PPUSH
13452: LD_INT 81
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 70
13466: NOT
13467: AND
13468: PUSH
13469: LD_EXP 26
13473: PUSH
13474: LD_INT 10500
13476: LESS
13477: OR
13478: IFFALSE 13433
// PrepareKurt ;
13480: CALL 16113 0 0
// end ;
13484: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13485: LD_EXP 15
13489: PPUSH
13490: CALL_OW 302
13494: PUSH
13495: LD_EXP 15
13499: PPUSH
13500: CALL_OW 255
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: AND
13509: PUSH
13510: LD_EXP 2
13514: AND
13515: IFFALSE 13680
13517: GO 13519
13519: DISABLE
// begin wait ( 0 0$50 ) ;
13520: LD_INT 1750
13522: PPUSH
13523: CALL_OW 67
// if not IsOk ( Joan ) then
13527: LD_EXP 15
13531: PPUSH
13532: CALL_OW 302
13536: NOT
13537: IFFALSE 13541
// exit ;
13539: GO 13680
// if IsOK ( Lisa ) then
13541: LD_EXP 2
13545: PPUSH
13546: CALL_OW 302
13550: IFFALSE 13680
// begin DialogueOn ;
13552: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13556: LD_EXP 2
13560: PPUSH
13561: LD_STRING D7-Lisa-1
13563: PPUSH
13564: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13568: LD_EXP 1
13572: PPUSH
13573: LD_STRING D7-JMM-1
13575: PPUSH
13576: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13580: LD_EXP 2
13584: PPUSH
13585: LD_STRING D7-Lisa-2
13587: PPUSH
13588: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13592: LD_EXP 1
13596: PPUSH
13597: LD_STRING D7-JMM-2
13599: PPUSH
13600: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13604: LD_EXP 2
13608: PPUSH
13609: LD_STRING D7-Lisa-3
13611: PPUSH
13612: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13616: LD_EXP 1
13620: PPUSH
13621: LD_STRING D7-JMM-3
13623: PPUSH
13624: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13628: LD_EXP 2
13632: PPUSH
13633: LD_STRING D7-Lisa-4
13635: PPUSH
13636: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13640: LD_EXP 1
13644: PPUSH
13645: LD_STRING D7-JMM-4
13647: PPUSH
13648: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13652: LD_EXP 1
13656: PPUSH
13657: LD_STRING D7-JMM-4a
13659: PPUSH
13660: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13664: LD_EXP 2
13668: PPUSH
13669: LD_STRING D7-Lisa-5
13671: PPUSH
13672: CALL_OW 88
// DialogueOff ;
13676: CALL_OW 7
// end ; end ;
13680: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13681: LD_EXP 13
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 91
13698: PUSH
13699: LD_EXP 13
13703: PUSH
13704: LD_INT 10
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 25
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 25
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 25
13737: PUSH
13738: LD_INT 3
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 4
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: PPUSH
13767: CALL_OW 69
13771: PUSH
13772: LD_INT 1
13774: GREATER
13775: AND
13776: IFFALSE 13793
13778: GO 13780
13780: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13781: LD_EXP 13
13785: PPUSH
13786: LD_STRING D5-Sol1-1
13788: PPUSH
13789: CALL_OW 88
13793: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13794: LD_INT 22
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 33
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: PUSH
13823: LD_INT 2
13825: GREATEREQUAL
13826: IFFALSE 13846
13828: GO 13830
13830: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13831: LD_STRING MRa
13833: PPUSH
13834: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13838: LD_ADDR_EXP 28
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// end ;
13846: END
// every 2 2$00 do var i , last ;
13847: GO 13849
13849: DISABLE
13850: LD_INT 0
13852: PPUSH
13853: PPUSH
// begin last := 8 ;
13854: LD_ADDR_VAR 0 2
13858: PUSH
13859: LD_INT 8
13861: ST_TO_ADDR
// for i = 1 to last do
13862: LD_ADDR_VAR 0 1
13866: PUSH
13867: DOUBLE
13868: LD_INT 1
13870: DEC
13871: ST_TO_ADDR
13872: LD_VAR 0 2
13876: PUSH
13877: FOR_TO
13878: IFFALSE 13906
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13880: LD_INT 6300
13882: PPUSH
13883: LD_INT 12600
13885: PPUSH
13886: CALL_OW 12
13890: PPUSH
13891: CALL_OW 67
// PrepareRandoms ( i ) ;
13895: LD_VAR 0 1
13899: PPUSH
13900: CALL 4078 0 1
// end ;
13904: GO 13877
13906: POP
13907: POP
// end ;
13908: PPOPN 2
13910: END
// every 5 5$20 do
13911: GO 13913
13913: DISABLE
// begin DialogueOn ;
13914: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13918: LD_EXP 10
13922: PPUSH
13923: LD_STRING D12a-Sci-1
13925: PPUSH
13926: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13930: LD_EXP 1
13934: PPUSH
13935: LD_STRING D12a-JMM-1
13937: PPUSH
13938: CALL_OW 88
// DialogueOff ;
13942: CALL_OW 7
// cratesStatus := 1 ;
13946: LD_ADDR_EXP 38
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// end ;
13954: END
// every 13 13$0 do
13955: GO 13957
13957: DISABLE
// begin DialogueOn ;
13958: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13962: LD_EXP 10
13966: PPUSH
13967: LD_STRING D12b-Sci-1
13969: PPUSH
13970: CALL_OW 94
// DialogueOff ;
13974: CALL_OW 7
// cratesStatus := 2 ;
13978: LD_ADDR_EXP 38
13982: PUSH
13983: LD_INT 2
13985: ST_TO_ADDR
// BuildBulldozer ;
13986: CALL 9814 0 0
// end ;
13990: END
// every 32 32$0 do
13991: GO 13993
13993: DISABLE
// begin DialogueOn ;
13994: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13998: LD_EXP 10
14002: PPUSH
14003: LD_STRING D12c-Sci-1
14005: PPUSH
14006: CALL_OW 94
// DialogueOff ;
14010: CALL_OW 7
// wait ( 3 3$0 ) ;
14014: LD_INT 6300
14016: PPUSH
14017: CALL_OW 67
// DialogueOn ;
14021: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14025: LD_EXP 10
14029: PPUSH
14030: LD_STRING D12d-Sci-1
14032: PPUSH
14033: CALL_OW 94
// DialogueOff ;
14037: CALL_OW 7
// cratesStatus = 1 ;
14041: LD_ADDR_EXP 38
14045: PUSH
14046: LD_INT 1
14048: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14049: CALL 20281 0 0
// wait ( 2 2$30 ) ;
14053: LD_INT 5250
14055: PPUSH
14056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14060: LD_INT 35
14062: PPUSH
14063: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14067: LD_INT 1
14069: PPUSH
14070: CALL_OW 463
14074: NOT
14075: PUSH
14076: LD_INT 32
14078: PPUSH
14079: LD_INT 81
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 70
14093: NOT
14094: AND
14095: PUSH
14096: LD_EXP 26
14100: PUSH
14101: LD_INT 6300
14103: LESS
14104: OR
14105: IFFALSE 14060
// PrepareJoan ;
14107: CALL 3034 0 0
// end ;
14111: END
// every 42 42$0 do
14112: GO 14114
14114: DISABLE
// begin DialogueOn ;
14115: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14119: LD_EXP 10
14123: PPUSH
14124: LD_STRING D12e-Sci-1
14126: PPUSH
14127: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14131: LD_EXP 1
14135: PPUSH
14136: LD_STRING D12e-JMM-1
14138: PPUSH
14139: CALL_OW 88
// DialogueOff ;
14143: CALL_OW 7
// cratesStatus := 2 ;
14147: LD_ADDR_EXP 38
14151: PUSH
14152: LD_INT 2
14154: ST_TO_ADDR
// end ; end_of_file
14155: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14156: LD_VAR 0 1
14160: PUSH
14161: LD_INT 1
14163: EQUAL
14164: PUSH
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 3
14172: EQUAL
14173: AND
14174: IFFALSE 14184
// contactWithRussian := 1 ;
14176: LD_ADDR_EXP 22
14180: PUSH
14181: LD_INT 1
14183: ST_TO_ADDR
// end ;
14184: PPOPN 2
14186: END
// on BuildingComplete ( building ) do var i ;
14187: LD_INT 0
14189: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 266
14199: PUSH
14200: LD_INT 36
14202: EQUAL
14203: PUSH
14204: LD_VAR 0 1
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: AND
14218: PUSH
14219: LD_EXP 23
14223: PUSH
14224: LD_INT 0
14226: EQUAL
14227: AND
14228: IFFALSE 14308
// begin firstTower = 1 ;
14230: LD_ADDR_EXP 23
14234: PUSH
14235: LD_INT 1
14237: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14238: LD_INT 22
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 21
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 25
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 26
14270: PUSH
14271: LD_INT 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 69
14288: PUSH
14289: LD_EXP 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: DIFF
14297: PPUSH
14298: LD_STRING D3b-Mech1-1
14300: PPUSH
14301: LD_STRING D3b-Mech1-1
14303: PPUSH
14304: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 266
14317: PUSH
14318: LD_INT 0
14320: EQUAL
14321: PUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 255
14331: PUSH
14332: LD_INT 1
14334: EQUAL
14335: AND
14336: IFFALSE 14350
// SetBName ( building , theta ) ;
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_STRING theta
14345: PPUSH
14346: CALL_OW 500
// if GetSide ( building ) = 3 then
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 3
14362: EQUAL
14363: IFFALSE 14403
// begin for i := 1 to 4 do
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: DOUBLE
14371: LD_INT 1
14373: DEC
14374: ST_TO_ADDR
14375: LD_INT 4
14377: PUSH
14378: FOR_TO
14379: IFFALSE 14401
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14381: LD_ADDR_EXP 31
14385: PUSH
14386: LD_EXP 31
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 3
14398: ST_TO_ADDR
14399: GO 14378
14401: POP
14402: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL_OW 255
14412: PUSH
14413: LD_INT 3
14415: EQUAL
14416: PUSH
14417: LD_VAR 0 1
14421: PPUSH
14422: CALL_OW 266
14426: PUSH
14427: LD_INT 0
14429: EQUAL
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 266
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: OR
14445: PUSH
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 266
14455: PUSH
14456: LD_INT 4
14458: EQUAL
14459: OR
14460: PUSH
14461: EMPTY
14462: LIST
14463: AND
14464: IFFALSE 14475
// ComUpgrade ( building ) ;
14466: LD_VAR 0 1
14470: PPUSH
14471: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 255
14484: PUSH
14485: LD_INT 3
14487: EQUAL
14488: PUSH
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL_OW 266
14498: PUSH
14499: LD_INT 32
14501: EQUAL
14502: AND
14503: IFFALSE 14544
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14505: LD_VAR 0 1
14509: PPUSH
14510: LD_INT 42
14512: PUSH
14513: LD_INT 43
14515: PUSH
14516: LD_INT 44
14518: PUSH
14519: LD_INT 46
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 1
14530: PPUSH
14531: LD_INT 4
14533: PPUSH
14534: CALL_OW 12
14538: ARRAY
14539: PPUSH
14540: CALL_OW 208
// end ;
14544: PPOPN 2
14546: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL 36830 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14556: LD_VAR 0 1
14560: PUSH
14561: LD_INT 22
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 21
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 23
14583: PUSH
14584: LD_INT 1
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: IN
14601: IFFALSE 14617
// killCounter := killCounter + 1 ;
14603: LD_ADDR_EXP 45
14607: PUSH
14608: LD_EXP 45
14612: PUSH
14613: LD_INT 1
14615: PLUS
14616: ST_TO_ADDR
// if unit in ruAttackersInForest then
14617: LD_VAR 0 1
14621: PUSH
14622: LD_EXP 48
14626: IN
14627: IFFALSE 14645
// ruAttackersInForest := ruAttackersInForest diff unit ;
14629: LD_ADDR_EXP 48
14633: PUSH
14634: LD_EXP 48
14638: PUSH
14639: LD_VAR 0 1
14643: DIFF
14644: ST_TO_ADDR
// if unit in ruAttackers then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_EXP 47
14654: IN
14655: IFFALSE 14673
// ruAttackers := ruAttackers diff unit ;
14657: LD_ADDR_EXP 47
14661: PUSH
14662: LD_EXP 47
14666: PUSH
14667: LD_VAR 0 1
14671: DIFF
14672: ST_TO_ADDR
// if unit = JMM then
14673: LD_VAR 0 1
14677: PUSH
14678: LD_EXP 1
14682: EQUAL
14683: IFFALSE 14692
// YouLost ( JMM ) ;
14685: LD_STRING JMM
14687: PPUSH
14688: CALL_OW 104
// if unit = Joan then
14692: LD_VAR 0 1
14696: PUSH
14697: LD_EXP 15
14701: EQUAL
14702: IFFALSE 14712
// JoanStatus := 0 ;
14704: LD_ADDR_EXP 16
14708: PUSH
14709: LD_INT 0
14711: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 255
14721: PUSH
14722: LD_INT 1
14724: EQUAL
14725: PUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 247
14735: PUSH
14736: LD_INT 1
14738: EQUAL
14739: AND
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 248
14750: PUSH
14751: LD_INT 1
14753: EQUAL
14754: AND
14755: IFFALSE 14771
// unitLost = unitLost + 1 ;
14757: LD_ADDR_EXP 30
14761: PUSH
14762: LD_EXP 30
14766: PUSH
14767: LD_INT 1
14769: PLUS
14770: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 255
14780: PUSH
14781: LD_INT 3
14783: EQUAL
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: CALL_OW 247
14794: PUSH
14795: LD_INT 3
14797: EQUAL
14798: AND
14799: PUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 266
14809: PUSH
14810: LD_INT 4
14812: PUSH
14813: LD_INT 5
14815: PUSH
14816: LD_INT 32
14818: PUSH
14819: LD_INT 31
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: IN
14828: AND
14829: IFFALSE 14915
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14831: LD_ADDR_EXP 31
14835: PUSH
14836: LD_EXP 31
14840: PUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL_OW 266
14850: ADD
14851: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14852: LD_ADDR_EXP 31
14856: PUSH
14857: LD_EXP 31
14861: PUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 250
14871: ADD
14872: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14873: LD_ADDR_EXP 31
14877: PUSH
14878: LD_EXP 31
14882: PUSH
14883: LD_VAR 0 1
14887: PPUSH
14888: CALL_OW 251
14892: ADD
14893: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14894: LD_ADDR_EXP 31
14898: PUSH
14899: LD_EXP 31
14903: PUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 254
14913: ADD
14914: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14915: LD_EXP 46
14919: PUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 257
14929: PUSH
14930: LD_INT 3
14932: EQUAL
14933: AND
14934: PUSH
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 255
14944: PUSH
14945: LD_INT 3
14947: EQUAL
14948: AND
14949: PUSH
14950: LD_INT 21
14952: PPUSH
14953: CALL_OW 302
14957: AND
14958: PUSH
14959: LD_INT 21
14961: PPUSH
14962: CALL_OW 255
14966: PUSH
14967: LD_INT 3
14969: EQUAL
14970: AND
14971: IFFALSE 15053
// begin ruMechCounter := ruMechCounter - 1 ;
14973: LD_ADDR_EXP 46
14977: PUSH
14978: LD_EXP 46
14982: PUSH
14983: LD_INT 1
14985: MINUS
14986: ST_TO_ADDR
// uc_side := 3 ;
14987: LD_ADDR_OWVAR 20
14991: PUSH
14992: LD_INT 3
14994: ST_TO_ADDR
// uc_nation := 3 ;
14995: LD_ADDR_OWVAR 21
14999: PUSH
15000: LD_INT 3
15002: ST_TO_ADDR
// hc_gallery :=  ;
15003: LD_ADDR_OWVAR 33
15007: PUSH
15008: LD_STRING 
15010: ST_TO_ADDR
// hc_name :=  ;
15011: LD_ADDR_OWVAR 26
15015: PUSH
15016: LD_STRING 
15018: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15019: LD_INT 0
15021: PPUSH
15022: LD_EXP 34
15026: PPUSH
15027: LD_EXP 35
15031: PPUSH
15032: CALL_OW 12
15036: PPUSH
15037: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15041: CALL_OW 44
15045: PPUSH
15046: LD_INT 21
15048: PPUSH
15049: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 3
15065: EQUAL
15066: PUSH
15067: LD_VAR 0 1
15071: PPUSH
15072: CALL_OW 264
15076: PUSH
15077: LD_INT 52
15079: EQUAL
15080: AND
15081: PUSH
15082: LD_INT 21
15084: PPUSH
15085: CALL_OW 302
15089: AND
15090: PUSH
15091: LD_INT 21
15093: PPUSH
15094: CALL_OW 255
15098: PUSH
15099: LD_INT 3
15101: EQUAL
15102: AND
15103: IFFALSE 15124
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15105: LD_INT 21
15107: PPUSH
15108: LD_INT 22
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: LD_INT 52
15119: PPUSH
15120: CALL_OW 125
// end ;
15124: PPOPN 1
15126: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15127: LD_INT 0
15129: PPUSH
15130: PPUSH
15131: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15132: LD_VAR 0 1
15136: PPUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: CALL 36952 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 255
15155: PUSH
15156: LD_INT 3
15158: EQUAL
15159: PUSH
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 264
15169: PUSH
15170: LD_INT 51
15172: PUSH
15173: LD_INT 52
15175: PUSH
15176: LD_INT 53
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: IN
15184: NOT
15185: AND
15186: IFFALSE 15217
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15188: LD_ADDR_EXP 47
15192: PUSH
15193: LD_EXP 47
15197: PPUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_INT 1
15205: PLUS
15206: PPUSH
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 1
15216: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 264
15226: PUSH
15227: LD_INT 53
15229: EQUAL
15230: IFFALSE 15385
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15232: LD_VAR 0 1
15236: PPUSH
15237: LD_INT 60
15239: PPUSH
15240: LD_INT 85
15242: PPUSH
15243: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15247: LD_VAR 0 1
15251: PPUSH
15252: LD_INT 43
15254: PPUSH
15255: LD_INT 69
15257: PPUSH
15258: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15262: LD_VAR 0 1
15266: PPUSH
15267: LD_INT 37
15269: PPUSH
15270: LD_INT 46
15272: PPUSH
15273: CALL_OW 171
// wait ( 0 0$1 ) ;
15277: LD_INT 35
15279: PPUSH
15280: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15284: LD_INT 35
15286: PPUSH
15287: CALL_OW 67
// until not HasTask ( vehicle ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 314
15300: NOT
15301: IFFALSE 15284
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15303: LD_VAR 0 1
15307: PPUSH
15308: LD_INT 34
15310: PPUSH
15311: CALL 9866 0 2
// repeat wait ( 0 0$1 ) ;
15315: LD_INT 35
15317: PPUSH
15318: CALL_OW 67
// until not HasTask ( vehicle ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 314
15331: NOT
15332: IFFALSE 15315
// un := IsDrivenBy ( vehicle ) ;
15334: LD_ADDR_VAR 0 4
15338: PUSH
15339: LD_VAR 0 1
15343: PPUSH
15344: CALL_OW 311
15348: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15349: LD_VAR 0 4
15353: PPUSH
15354: LD_INT 96
15356: PPUSH
15357: LD_INT 77
15359: PPUSH
15360: CALL_OW 171
// AddComExitVehicle ( un ) ;
15364: LD_VAR 0 4
15368: PPUSH
15369: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15373: LD_VAR 0 4
15377: PPUSH
15378: LD_INT 17
15380: PPUSH
15381: CALL_OW 180
// end ; end ;
15385: PPOPN 5
15387: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 255
15397: PUSH
15398: LD_INT 3
15400: EQUAL
15401: IFFALSE 15432
// begin tamedApemans = tamedApemans + 1 ;
15403: LD_ADDR_EXP 32
15407: PUSH
15408: LD_EXP 32
15412: PUSH
15413: LD_INT 1
15415: PLUS
15416: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 106
15424: PPUSH
15425: LD_INT 85
15427: PPUSH
15428: CALL_OW 111
// end ; end ;
15432: PPOPN 2
15434: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15435: LD_VAR 0 2
15439: PPUSH
15440: CALL_OW 255
15444: PUSH
15445: LD_INT 3
15447: EQUAL
15448: PUSH
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL_OW 255
15458: PUSH
15459: LD_INT 3
15461: EQUAL
15462: AND
15463: PUSH
15464: LD_INT 21
15466: PPUSH
15467: CALL_OW 302
15471: AND
15472: IFFALSE 15486
// ComEnterUnit ( human , rufab ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: LD_INT 21
15481: PPUSH
15482: CALL_OW 120
// end ;
15486: PPOPN 4
15488: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15489: LD_VAR 0 1
15493: PUSH
15494: LD_INT 21
15496: EQUAL
15497: PUSH
15498: LD_VAR 0 2
15502: PPUSH
15503: CALL_OW 255
15507: PUSH
15508: LD_INT 3
15510: EQUAL
15511: AND
15512: IFFALSE 15526
// SetLives ( human , 1000 ) ;
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_INT 1000
15521: PPUSH
15522: CALL_OW 234
// end ;
15526: PPOPN 2
15528: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15529: LD_VAR 0 1
15533: PPUSH
15534: CALL 36936 0 1
// end ; end_of_file
15538: PPOPN 1
15540: END
// every 0 0$30 trigger cratesStatus = 1 do
15541: LD_EXP 38
15545: PUSH
15546: LD_INT 1
15548: EQUAL
15549: IFFALSE 15602
15551: GO 15553
15553: DISABLE
// begin enable ;
15554: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15555: LD_INT 350
15557: PUSH
15558: LD_INT 875
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: PPUSH
15568: LD_INT 2
15570: PPUSH
15571: CALL_OW 12
15575: ARRAY
15576: PPUSH
15577: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15581: LD_INT 1
15583: PPUSH
15584: LD_INT 5
15586: PPUSH
15587: CALL_OW 12
15591: PPUSH
15592: LD_INT 7
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 55
// end ;
15602: END
// every 1 1$0 trigger cratesStatus = 2 do
15603: LD_EXP 38
15607: PUSH
15608: LD_INT 2
15610: EQUAL
15611: IFFALSE 15694
15613: GO 15615
15615: DISABLE
// begin enable ;
15616: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15617: LD_INT 3150
15619: PUSH
15620: LD_INT 4550
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 1
15629: PPUSH
15630: LD_INT 2
15632: PPUSH
15633: CALL_OW 12
15637: ARRAY
15638: PPUSH
15639: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15643: LD_INT 2
15645: PUSH
15646: LD_INT 5
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 1
15655: PPUSH
15656: LD_INT 2
15658: PPUSH
15659: CALL_OW 12
15663: ARRAY
15664: PPUSH
15665: LD_INT 6
15667: PUSH
15668: LD_INT 7
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_INT 2
15680: PPUSH
15681: CALL_OW 12
15685: ARRAY
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 55
// end ;
15694: END
// every 0 0$30 + 0 0$10 do
15695: GO 15697
15697: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15698: LD_INT 4
15700: PUSH
15701: LD_INT 5
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_INT 2
15713: PPUSH
15714: CALL_OW 12
15718: ARRAY
15719: PPUSH
15720: LD_INT 7
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 55
// Wait ( 0 0$15 ) ;
15730: LD_INT 525
15732: PPUSH
15733: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15737: LD_INT 4
15739: PUSH
15740: LD_INT 5
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_INT 2
15752: PPUSH
15753: CALL_OW 12
15757: ARRAY
15758: PPUSH
15759: LD_INT 7
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: CALL_OW 55
// Wait ( 0 0$20 ) ;
15769: LD_INT 700
15771: PPUSH
15772: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15776: LD_INT 4
15778: PUSH
15779: LD_INT 5
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_INT 2
15791: PPUSH
15792: CALL_OW 12
15796: ARRAY
15797: PPUSH
15798: LD_INT 7
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: CALL_OW 55
// end ; end_of_file
15808: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15809: LD_EXP 24
15813: PUSH
15814: LD_INT 1
15816: EQUAL
15817: IFFALSE 16110
15819: GO 15821
15821: DISABLE
15822: LD_INT 0
15824: PPUSH
15825: PPUSH
15826: PPUSH
// begin enable ;
15827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15828: LD_ADDR_VAR 0 2
15832: PUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 30
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: ST_TO_ADDR
// for i in tmp do
15891: LD_ADDR_VAR 0 1
15895: PUSH
15896: LD_VAR 0 2
15900: PUSH
15901: FOR_IN
15902: IFFALSE 15935
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15904: LD_ADDR_VAR 0 3
15908: PUSH
15909: LD_VAR 0 3
15913: PUSH
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 274
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 275
15931: PLUS
15932: ST_TO_ADDR
15933: GO 15901
15935: POP
15936: POP
// strings = [ ] ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: EMPTY
15943: ST_TO_ADDR
// if tmp = 0 then
15944: LD_VAR 0 2
15948: PUSH
15949: LD_INT 0
15951: EQUAL
15952: IFFALSE 15977
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15954: LD_ADDR_EXP 27
15958: PUSH
15959: LD_EXP 27
15963: PUSH
15964: LD_STRING #Am06-1
15966: PUSH
15967: LD_EXP 25
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: ADD
15976: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15977: LD_VAR 0 2
15981: PUSH
15982: LD_EXP 25
15986: PUSH
15987: LD_VAR 0 3
15991: GREATER
15992: AND
15993: IFFALSE 16024
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15995: LD_ADDR_EXP 27
15999: PUSH
16000: LD_EXP 27
16004: PUSH
16005: LD_STRING #Am06-1
16007: PUSH
16008: LD_EXP 25
16012: PUSH
16013: LD_VAR 0 3
16017: MINUS
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: ADD
16023: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16024: LD_VAR 0 2
16028: PUSH
16029: LD_EXP 25
16033: PUSH
16034: LD_VAR 0 3
16038: LESSEQUAL
16039: AND
16040: IFFALSE 16063
// strings = strings ^ [ #Am06-1 , 0 ] ;
16042: LD_ADDR_EXP 27
16046: PUSH
16047: LD_EXP 27
16051: PUSH
16052: LD_STRING #Am06-1
16054: PUSH
16055: LD_INT 0
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: ADD
16062: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16063: LD_ADDR_EXP 26
16067: PUSH
16068: LD_EXP 26
16072: PUSH
16073: LD_INT 35
16075: MINUS
16076: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16077: LD_ADDR_EXP 27
16081: PUSH
16082: LD_EXP 27
16086: PUSH
16087: LD_STRING #Am06-2
16089: PUSH
16090: LD_EXP 26
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: ADD
16099: ST_TO_ADDR
// display_strings = strings ;
16100: LD_ADDR_OWVAR 47
16104: PUSH
16105: LD_EXP 27
16109: ST_TO_ADDR
// end ; end_of_file
16110: PPOPN 3
16112: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16113: LD_INT 0
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 2
16139: PUSH
16140: LD_INT 30
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 30
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16174: LD_INT 35
16176: PPUSH
16177: CALL_OW 67
// until depot ;
16181: LD_VAR 0 3
16185: IFFALSE 16122
// repeat wait ( 0 0$1 ) ;
16187: LD_INT 35
16189: PPUSH
16190: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 91
16211: PUSH
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: PUSH
16221: LD_INT 15
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 4
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 3
16291: PUSH
16292: LD_INT 54
16294: PUSH
16295: EMPTY
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 3
16304: PUSH
16305: LD_INT 55
16307: PUSH
16308: EMPTY
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: PUSH
16328: LD_EXP 2
16332: PUSH
16333: LD_EXP 3
16337: PUSH
16338: LD_EXP 4
16342: PUSH
16343: LD_EXP 5
16347: PUSH
16348: LD_EXP 7
16352: PUSH
16353: LD_EXP 8
16357: PUSH
16358: LD_EXP 9
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: LD_EXP 44
16376: ADD
16377: DIFF
16378: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16379: LD_VAR 0 4
16383: PUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 463
16391: NOT
16392: AND
16393: IFFALSE 16187
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16395: LD_ADDR_VAR 0 4
16399: PUSH
16400: LD_VAR 0 4
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 4
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: ST_TO_ADDR
// blockSpawn := 1 ;
16419: LD_ADDR_EXP 29
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// uc_side := 2 ;
16427: LD_ADDR_OWVAR 20
16431: PUSH
16432: LD_INT 2
16434: ST_TO_ADDR
// uc_nation := 2 ;
16435: LD_ADDR_OWVAR 21
16439: PUSH
16440: LD_INT 2
16442: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16443: LD_ADDR_EXP 19
16447: PUSH
16448: LD_STRING Kurt
16450: PPUSH
16451: LD_INT 0
16453: PPUSH
16454: LD_STRING 
16456: PPUSH
16457: CALL 41141 0 3
16461: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16462: LD_EXP 19
16466: PPUSH
16467: LD_VAR 0 4
16471: PPUSH
16472: CALL_OW 250
16476: PPUSH
16477: LD_VAR 0 4
16481: PPUSH
16482: CALL_OW 251
16486: PPUSH
16487: LD_INT 5
16489: PPUSH
16490: LD_INT 1
16492: PPUSH
16493: CALL_OW 50
// InGameOn ;
16497: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16501: LD_EXP 19
16505: PPUSH
16506: CALL_OW 87
// wait ( 0 0$2 ) ;
16510: LD_INT 70
16512: PPUSH
16513: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16517: LD_EXP 19
16521: PPUSH
16522: LD_VAR 0 4
16526: PPUSH
16527: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16531: LD_VAR 0 4
16535: PPUSH
16536: LD_EXP 19
16540: PPUSH
16541: CALL_OW 112
// wait ( 0 0$1 ) ;
16545: LD_INT 35
16547: PPUSH
16548: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16552: LD_VAR 0 4
16556: PPUSH
16557: LD_EXP 19
16561: PPUSH
16562: CALL_OW 119
// DialogueOn ;
16566: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16570: LD_EXP 19
16574: PPUSH
16575: LD_STRING D2-Kurt-1
16577: PPUSH
16578: CALL_OW 88
// if tmp = JMM then
16582: LD_VAR 0 4
16586: PUSH
16587: LD_EXP 1
16591: EQUAL
16592: IFFALSE 16684
// begin Say ( JMM , D2-JMM-1 ) ;
16594: LD_EXP 1
16598: PPUSH
16599: LD_STRING D2-JMM-1
16601: PPUSH
16602: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16606: LD_EXP 19
16610: PPUSH
16611: LD_STRING D2-Kurt-2
16613: PPUSH
16614: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16618: LD_EXP 1
16622: PPUSH
16623: LD_STRING D2-JMM-2
16625: PPUSH
16626: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16630: LD_EXP 19
16634: PPUSH
16635: LD_STRING D2-Kurt-3
16637: PPUSH
16638: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16642: LD_EXP 1
16646: PPUSH
16647: LD_STRING D2-JMM-3
16649: PPUSH
16650: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16654: LD_EXP 19
16658: PPUSH
16659: LD_STRING D2-Kurt-4
16661: PPUSH
16662: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16666: LD_EXP 1
16670: PPUSH
16671: LD_STRING D2-JMM-4
16673: PPUSH
16674: CALL_OW 88
// DialogueOff ;
16678: CALL_OW 7
// end else
16682: GO 16912
// begin if GetSex ( tmp ) = 1 then
16684: LD_VAR 0 4
16688: PPUSH
16689: CALL_OW 258
16693: PUSH
16694: LD_INT 1
16696: EQUAL
16697: IFFALSE 16713
// Say ( tmp , D2-Sol1-1 ) else
16699: LD_VAR 0 4
16703: PPUSH
16704: LD_STRING D2-Sol1-1
16706: PPUSH
16707: CALL_OW 88
16711: GO 16725
// Say ( tmp , D2-FSol1-1 ) ;
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_STRING D2-FSol1-1
16720: PPUSH
16721: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16725: LD_EXP 19
16729: PPUSH
16730: LD_STRING D2-Kurt-2
16732: PPUSH
16733: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16737: LD_VAR 0 4
16741: PPUSH
16742: CALL_OW 258
16746: PUSH
16747: LD_INT 1
16749: EQUAL
16750: IFFALSE 16766
// Say ( tmp , D2-Sol1-2 ) else
16752: LD_VAR 0 4
16756: PPUSH
16757: LD_STRING D2-Sol1-2
16759: PPUSH
16760: CALL_OW 88
16764: GO 16778
// Say ( tmp , D2-FSol1-2 ) ;
16766: LD_VAR 0 4
16770: PPUSH
16771: LD_STRING D2-FSol1-2
16773: PPUSH
16774: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16778: LD_EXP 19
16782: PPUSH
16783: LD_STRING D2-Kurt-3
16785: PPUSH
16786: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16790: LD_VAR 0 4
16794: PPUSH
16795: CALL_OW 258
16799: PUSH
16800: LD_INT 1
16802: EQUAL
16803: IFFALSE 16819
// Say ( tmp , D2-Sol1-3 ) else
16805: LD_VAR 0 4
16809: PPUSH
16810: LD_STRING D2-Sol1-3
16812: PPUSH
16813: CALL_OW 88
16817: GO 16831
// Say ( tmp , D2-FSol1-3 ) ;
16819: LD_VAR 0 4
16823: PPUSH
16824: LD_STRING D2-FSol1-3
16826: PPUSH
16827: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16831: LD_EXP 19
16835: PPUSH
16836: LD_STRING D2-Kurt-4
16838: PPUSH
16839: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16843: LD_VAR 0 4
16847: PPUSH
16848: CALL_OW 258
16852: PUSH
16853: LD_INT 1
16855: EQUAL
16856: IFFALSE 16884
// begin Say ( tmp , D2-Sol1-4 ) ;
16858: LD_VAR 0 4
16862: PPUSH
16863: LD_STRING D2-Sol1-4
16865: PPUSH
16866: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16870: LD_VAR 0 4
16874: PPUSH
16875: LD_STRING D2-Sol1-5
16877: PPUSH
16878: CALL_OW 88
// end else
16882: GO 16908
// begin Say ( tmp , D2-FSol1-4 ) ;
16884: LD_VAR 0 4
16888: PPUSH
16889: LD_STRING D2-FSol1-4
16891: PPUSH
16892: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16896: LD_VAR 0 4
16900: PPUSH
16901: LD_STRING D2-FSol1-5
16903: PPUSH
16904: CALL_OW 88
// end ; DialogueOff ;
16908: CALL_OW 7
// end ; dec := ShowQuery1 ;
16912: LD_ADDR_VAR 0 6
16916: PUSH
16917: CALL 7256 0 0
16921: ST_TO_ADDR
// if dec = 1 then
16922: LD_VAR 0 6
16926: PUSH
16927: LD_INT 1
16929: EQUAL
16930: IFFALSE 16992
// begin DialogueOn ;
16932: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16936: LD_EXP 19
16940: PPUSH
16941: LD_STRING D2a-Kurt-1
16943: PPUSH
16944: CALL_OW 88
// DialogueOff ;
16948: CALL_OW 7
// InGameOff ;
16952: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16956: LD_INT 1
16958: PPUSH
16959: LD_INT 2
16961: PPUSH
16962: LD_INT 2
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16972: LD_EXP 19
16976: PPUSH
16977: LD_INT 8
16979: PPUSH
16980: CALL_OW 113
// readyToEscape := 1 ;
16984: LD_ADDR_EXP 21
16988: PUSH
16989: LD_INT 1
16991: ST_TO_ADDR
// end ; if dec = 2 then
16992: LD_VAR 0 6
16996: PUSH
16997: LD_INT 2
16999: EQUAL
17000: IFFALSE 17468
// begin DialogueOn ;
17002: CALL_OW 6
// if tmp = JMM then
17006: LD_VAR 0 4
17010: PUSH
17011: LD_EXP 1
17015: EQUAL
17016: IFFALSE 17072
// begin Say ( JMM , D2b-JMM-1 ) ;
17018: LD_EXP 1
17022: PPUSH
17023: LD_STRING D2b-JMM-1
17025: PPUSH
17026: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17030: LD_EXP 19
17034: PPUSH
17035: LD_STRING D2b-Kurt-1
17037: PPUSH
17038: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17042: LD_EXP 1
17046: PPUSH
17047: LD_STRING D2b-JMM-2
17049: PPUSH
17050: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17054: LD_EXP 19
17058: PPUSH
17059: LD_STRING D2b-Kurt-2
17061: PPUSH
17062: CALL_OW 88
// DialogueOff ;
17066: CALL_OW 7
// end else
17070: GO 17223
// begin if GetSex ( tmp ) = 1 then
17072: LD_VAR 0 4
17076: PPUSH
17077: CALL_OW 258
17081: PUSH
17082: LD_INT 1
17084: EQUAL
17085: IFFALSE 17101
// Say ( tmp , D2b-Sol1-1 ) else
17087: LD_VAR 0 4
17091: PPUSH
17092: LD_STRING D2b-Sol1-1
17094: PPUSH
17095: CALL_OW 88
17099: GO 17113
// Say ( tmp , D2b-FSol1-1 ) ;
17101: LD_VAR 0 4
17105: PPUSH
17106: LD_STRING D2b-FSol1-1
17108: PPUSH
17109: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17113: LD_EXP 19
17117: PPUSH
17118: LD_STRING D2b-Kurt-1
17120: PPUSH
17121: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17125: LD_VAR 0 4
17129: PPUSH
17130: CALL_OW 258
17134: PUSH
17135: LD_INT 1
17137: EQUAL
17138: IFFALSE 17154
// Say ( tmp , D2b-Sol1-2 ) else
17140: LD_VAR 0 4
17144: PPUSH
17145: LD_STRING D2b-Sol1-2
17147: PPUSH
17148: CALL_OW 88
17152: GO 17166
// Say ( tmp , D2b-FSol1-2 ) ;
17154: LD_VAR 0 4
17158: PPUSH
17159: LD_STRING D2b-FSol1-2
17161: PPUSH
17162: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17166: LD_EXP 19
17170: PPUSH
17171: LD_STRING D2b-Kurt-2
17173: PPUSH
17174: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17178: LD_VAR 0 4
17182: PPUSH
17183: CALL_OW 258
17187: PUSH
17188: LD_INT 1
17190: EQUAL
17191: IFFALSE 17207
// Say ( tmp , D2c-Sol1-2 ) else
17193: LD_VAR 0 4
17197: PPUSH
17198: LD_STRING D2c-Sol1-2
17200: PPUSH
17201: CALL_OW 88
17205: GO 17219
// Say ( tmp , D2c-FSol1-2 ) ;
17207: LD_VAR 0 4
17211: PPUSH
17212: LD_STRING D2c-FSol1-2
17214: PPUSH
17215: CALL_OW 88
// DialogueOff ;
17219: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17223: LD_ADDR_VAR 0 7
17227: PUSH
17228: CALL 7277 0 0
17232: ST_TO_ADDR
// if dec2 = 1 then
17233: LD_VAR 0 7
17237: PUSH
17238: LD_INT 1
17240: EQUAL
17241: IFFALSE 17303
// begin DialogueOn ;
17243: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17247: LD_EXP 19
17251: PPUSH
17252: LD_STRING D2a-Kurt-1
17254: PPUSH
17255: CALL_OW 88
// DialogueOff ;
17259: CALL_OW 7
// InGameOff ;
17263: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17267: LD_INT 1
17269: PPUSH
17270: LD_INT 2
17272: PPUSH
17273: LD_INT 2
17275: PPUSH
17276: LD_INT 1
17278: PPUSH
17279: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17283: LD_EXP 19
17287: PPUSH
17288: LD_INT 8
17290: PPUSH
17291: CALL_OW 113
// readyToEscape := 1 ;
17295: LD_ADDR_EXP 21
17299: PUSH
17300: LD_INT 1
17302: ST_TO_ADDR
// end ; if dec2 = 2 then
17303: LD_VAR 0 7
17307: PUSH
17308: LD_INT 2
17310: EQUAL
17311: IFFALSE 17468
// begin if tmp = JMM then
17313: LD_VAR 0 4
17317: PUSH
17318: LD_EXP 1
17322: EQUAL
17323: IFFALSE 17383
// begin DialogueOn ;
17325: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17329: LD_EXP 1
17333: PPUSH
17334: LD_STRING D2c-JMM-1
17336: PPUSH
17337: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17341: LD_EXP 19
17345: PPUSH
17346: LD_STRING D2c-Kurt-1
17348: PPUSH
17349: CALL_OW 88
// DialogueOff ;
17353: CALL_OW 7
// InGameOff ;
17357: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17361: LD_EXP 19
17365: PPUSH
17366: LD_INT 8
17368: PPUSH
17369: CALL_OW 113
// readyToEscape := 1 ;
17373: LD_ADDR_EXP 21
17377: PUSH
17378: LD_INT 1
17380: ST_TO_ADDR
// end else
17381: GO 17468
// begin DialogueOn ;
17383: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17387: LD_VAR 0 4
17391: PPUSH
17392: CALL_OW 258
17396: PUSH
17397: LD_INT 1
17399: EQUAL
17400: IFFALSE 17416
// Say ( tmp , D2c-Sol1-1 ) else
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_STRING D2c-Sol1-1
17409: PPUSH
17410: CALL_OW 88
17414: GO 17428
// Say ( tmp , D2c-FSol1-1 ) ;
17416: LD_VAR 0 4
17420: PPUSH
17421: LD_STRING D2c-FSol1-1
17423: PPUSH
17424: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17428: LD_EXP 19
17432: PPUSH
17433: LD_STRING D2c-Kurt-1
17435: PPUSH
17436: CALL_OW 88
// DialogueOff ;
17440: CALL_OW 7
// InGameOff ;
17444: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17448: LD_EXP 19
17452: PPUSH
17453: LD_INT 8
17455: PPUSH
17456: CALL_OW 113
// readyToEscape := 1 ;
17460: LD_ADDR_EXP 21
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17468: LD_VAR 0 6
17472: PUSH
17473: LD_INT 3
17475: EQUAL
17476: IFFALSE 17637
// begin DialogueOn ;
17478: CALL_OW 6
// if tmp = JMM then
17482: LD_VAR 0 4
17486: PUSH
17487: LD_EXP 1
17491: EQUAL
17492: IFFALSE 17552
// begin DialogueOn ;
17494: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17498: LD_EXP 1
17502: PPUSH
17503: LD_STRING D2c-JMM-1
17505: PPUSH
17506: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17510: LD_EXP 19
17514: PPUSH
17515: LD_STRING D2c-Kurt-1
17517: PPUSH
17518: CALL_OW 88
// DialogueOff ;
17522: CALL_OW 7
// InGameOff ;
17526: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17530: LD_EXP 19
17534: PPUSH
17535: LD_INT 8
17537: PPUSH
17538: CALL_OW 113
// readyToEscape := 1 ;
17542: LD_ADDR_EXP 21
17546: PUSH
17547: LD_INT 1
17549: ST_TO_ADDR
// end else
17550: GO 17637
// begin DialogueOn ;
17552: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17556: LD_VAR 0 4
17560: PPUSH
17561: CALL_OW 258
17565: PUSH
17566: LD_INT 1
17568: EQUAL
17569: IFFALSE 17585
// Say ( tmp , D2c-Sol1-1 ) else
17571: LD_VAR 0 4
17575: PPUSH
17576: LD_STRING D2c-Sol1-1
17578: PPUSH
17579: CALL_OW 88
17583: GO 17597
// Say ( tmp , D2c-FSol1-1 ) ;
17585: LD_VAR 0 4
17589: PPUSH
17590: LD_STRING D2c-FSol1-1
17592: PPUSH
17593: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17597: LD_EXP 19
17601: PPUSH
17602: LD_STRING D2c-Kurt-1
17604: PPUSH
17605: CALL_OW 88
// DialogueOff ;
17609: CALL_OW 7
// InGameOff ;
17613: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17617: LD_EXP 19
17621: PPUSH
17622: LD_INT 8
17624: PPUSH
17625: CALL_OW 113
// readyToEscape := 1 ;
17629: LD_ADDR_EXP 21
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17637: LD_ADDR_EXP 29
17641: PUSH
17642: LD_INT 0
17644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17645: LD_INT 35
17647: PPUSH
17648: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17652: LD_EXP 19
17656: PPUSH
17657: LD_INT 8
17659: PPUSH
17660: CALL_OW 308
17664: PUSH
17665: LD_EXP 21
17669: AND
17670: PUSH
17671: LD_EXP 19
17675: PPUSH
17676: CALL_OW 301
17680: OR
17681: IFFALSE 17645
// if IsDead ( Kurt ) then
17683: LD_EXP 19
17687: PPUSH
17688: CALL_OW 301
17692: IFFALSE 17696
// exit ;
17694: GO 17751
// RemoveUnit ( Kurt ) ;
17696: LD_EXP 19
17700: PPUSH
17701: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17705: LD_EXP 19
17709: PPUSH
17710: LD_STRING Kurt
17712: PPUSH
17713: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17717: LD_INT 1
17719: PPUSH
17720: LD_INT 2
17722: PPUSH
17723: CALL_OW 81
17727: PUSH
17728: LD_INT 0
17730: EQUAL
17731: IFFALSE 17743
// kurtStatus = 1 else
17733: LD_ADDR_EXP 20
17737: PUSH
17738: LD_INT 1
17740: ST_TO_ADDR
17741: GO 17751
// kurtStatus = 2 ;
17743: LD_ADDR_EXP 20
17747: PUSH
17748: LD_INT 2
17750: ST_TO_ADDR
// end ; end_of_file
17751: LD_VAR 0 1
17755: RET
// every 0 0$2 do
17756: GO 17758
17758: DISABLE
// begin enable ;
17759: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17760: LD_INT 3
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: LD_INT 10
17768: PPUSH
17769: LD_EXP 31
17773: PPUSH
17774: CALL 7708 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17778: LD_INT 3
17780: PPUSH
17781: LD_INT 12
17783: PPUSH
17784: LD_EXP 31
17788: PPUSH
17789: CALL 9311 0 3
// if disableHealAI = 0 then
17793: LD_EXP 33
17797: PUSH
17798: LD_INT 0
17800: EQUAL
17801: IFFALSE 17822
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17803: LD_INT 3
17805: PPUSH
17806: LD_INT 9
17808: PPUSH
17809: LD_INT 10
17811: PPUSH
17812: LD_INT 32
17814: PUSH
17815: EMPTY
17816: LIST
17817: PPUSH
17818: CALL 8075 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17822: LD_INT 3
17824: PPUSH
17825: LD_INT 51
17827: PPUSH
17828: LD_INT 6
17830: PPUSH
17831: CALL 8764 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17835: LD_INT 2
17837: PPUSH
17838: CALL_OW 303
17842: PUSH
17843: LD_INT 2
17845: PPUSH
17846: CALL_OW 255
17850: PUSH
17851: LD_INT 1
17853: EQUAL
17854: OR
17855: IFFALSE 17869
// DefendDepot ( 3 , rudepo ) else
17857: LD_INT 3
17859: PPUSH
17860: LD_INT 2
17862: PPUSH
17863: CALL 8591 0 2
17867: GO 17879
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17869: LD_INT 3
17871: PPUSH
17872: LD_INT 10
17874: PPUSH
17875: CALL 8882 0 2
// end ;
17879: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17880: LD_INT 22
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 55
17902: PUSH
17903: EMPTY
17904: LIST
17905: PUSH
17906: LD_INT 3
17908: PUSH
17909: LD_INT 34
17911: PUSH
17912: LD_INT 51
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: PPUSH
17929: CALL_OW 69
17933: PUSH
17934: LD_INT 0
17936: EQUAL
17937: PUSH
17938: LD_INT 21
17940: PPUSH
17941: CALL_OW 255
17945: PUSH
17946: LD_INT 3
17948: EQUAL
17949: AND
17950: PUSH
17951: LD_INT 21
17953: PPUSH
17954: CALL_OW 302
17958: AND
17959: PUSH
17960: LD_INT 2
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_INT 3
17970: EQUAL
17971: AND
17972: PUSH
17973: LD_INT 2
17975: PPUSH
17976: CALL_OW 302
17980: AND
17981: PUSH
17982: LD_INT 21
17984: PPUSH
17985: CALL_OW 313
17989: AND
17990: PUSH
17991: LD_EXP 47
17995: PUSH
17996: LD_INT 4
17998: PUSH
17999: LD_INT 5
18001: PUSH
18002: LD_INT 6
18004: PUSH
18005: LD_INT 6
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: LD_OWVAR 67
18018: ARRAY
18019: LESS
18020: AND
18021: IFFALSE 18242
18023: GO 18025
18025: DISABLE
// begin enable ;
18026: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18027: LD_INT 2
18029: PPUSH
18030: CALL_OW 274
18034: PPUSH
18035: LD_INT 1
18037: PPUSH
18038: LD_INT 2000
18040: PPUSH
18041: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18045: LD_INT 3
18047: PPUSH
18048: LD_INT 21
18050: PPUSH
18051: LD_INT 4
18053: PUSH
18054: LD_INT 5
18056: PUSH
18057: LD_INT 6
18059: PUSH
18060: LD_INT 6
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_OWVAR 67
18073: ARRAY
18074: PUSH
18075: LD_EXP 47
18079: MINUS
18080: PPUSH
18081: LD_INT 43
18083: PUSH
18084: LD_INT 43
18086: PUSH
18087: LD_INT 44
18089: PUSH
18090: LD_INT 44
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 43
18101: PUSH
18102: LD_INT 43
18104: PUSH
18105: LD_INT 43
18107: PUSH
18108: LD_INT 44
18110: PUSH
18111: LD_INT 44
18113: PUSH
18114: LD_INT 46
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 43
18127: PUSH
18128: LD_INT 43
18130: PUSH
18131: LD_INT 43
18133: PUSH
18134: LD_INT 44
18136: PUSH
18137: LD_INT 44
18139: PUSH
18140: LD_INT 46
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 43
18153: PUSH
18154: LD_INT 43
18156: PUSH
18157: LD_INT 44
18159: PUSH
18160: LD_INT 46
18162: PUSH
18163: LD_INT 46
18165: PUSH
18166: LD_INT 46
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_OWVAR 67
18187: ARRAY
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: LD_INT 1
18194: PPUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 22
18200: PUSH
18201: LD_INT 24
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PPUSH
18211: LD_INT 2
18213: PPUSH
18214: CALL_OW 12
18218: ARRAY
18219: PUSH
18220: LD_INT 24
18222: PUSH
18223: LD_INT 24
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: LD_OWVAR 67
18236: ARRAY
18237: PPUSH
18238: CALL 7554 0 7
// end ;
18242: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18243: LD_INT 17
18245: PPUSH
18246: CALL_OW 255
18250: PUSH
18251: LD_INT 3
18253: EQUAL
18254: PUSH
18255: LD_INT 17
18257: PPUSH
18258: CALL_OW 302
18262: AND
18263: PUSH
18264: LD_INT 2
18266: PPUSH
18267: CALL_OW 255
18271: PUSH
18272: LD_INT 3
18274: EQUAL
18275: AND
18276: PUSH
18277: LD_INT 2
18279: PPUSH
18280: CALL_OW 302
18284: AND
18285: PUSH
18286: LD_EXP 47
18290: PUSH
18291: LD_INT 4
18293: PUSH
18294: LD_INT 5
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: LD_INT 7
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_OWVAR 67
18313: ARRAY
18314: LESS
18315: AND
18316: IFFALSE 18364
18318: GO 18320
18320: DISABLE
// begin enable ;
18321: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18322: LD_INT 17
18324: PPUSH
18325: LD_INT 22
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: LD_INT 42
18336: PUSH
18337: LD_INT 43
18339: PUSH
18340: LD_INT 44
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_INT 3
18353: PPUSH
18354: CALL_OW 12
18358: ARRAY
18359: PPUSH
18360: CALL_OW 185
// end ;
18364: END
// every 2 2$0 do var i , j ;
18365: GO 18367
18367: DISABLE
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18372: LD_INT 14700
18374: PUSH
18375: LD_INT 33600
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_INT 2
18387: PPUSH
18388: CALL_OW 12
18392: ARRAY
18393: PPUSH
18394: CALL_OW 67
// disableHealAI = 1 ;
18398: LD_ADDR_EXP 33
18402: PUSH
18403: LD_INT 1
18405: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18406: LD_ADDR_VAR 0 1
18410: PUSH
18411: LD_INT 22
18413: PUSH
18414: LD_INT 3
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 25
18423: PUSH
18424: LD_INT 4
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PPUSH
18435: CALL_OW 69
18439: PUSH
18440: FOR_IN
18441: IFFALSE 18454
// ComExitBuilding ( i ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 122
18452: GO 18440
18454: POP
18455: POP
// wait ( 0 0$1 ) ;
18456: LD_INT 35
18458: PPUSH
18459: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18463: LD_INT 35
18465: PPUSH
18466: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_INT 22
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 25
18487: PUSH
18488: LD_INT 4
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PPUSH
18499: CALL_OW 69
18503: PUSH
18504: FOR_IN
18505: IFFALSE 18582
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_INT 17
18514: PPUSH
18515: LD_INT 22
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 25
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 70
18543: PUSH
18544: FOR_IN
18545: IFFALSE 18578
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18547: LD_VAR 0 1
18551: PPUSH
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL_OW 250
18561: PPUSH
18562: LD_VAR 0 2
18566: PPUSH
18567: CALL_OW 251
18571: PPUSH
18572: CALL_OW 191
18576: GO 18544
18578: POP
18579: POP
18580: GO 18504
18582: POP
18583: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18584: LD_INT 22
18586: PUSH
18587: LD_INT 3
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 25
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PPUSH
18608: CALL_OW 69
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: PUSH
18617: LD_EXP 32
18621: PUSH
18622: LD_INT 6
18624: PUSH
18625: LD_INT 7
18627: PUSH
18628: LD_INT 8
18630: PUSH
18631: LD_INT 8
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: PUSH
18640: LD_OWVAR 67
18644: ARRAY
18645: GREATEREQUAL
18646: OR
18647: PUSH
18648: LD_INT 17
18650: PPUSH
18651: LD_INT 22
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 25
18663: PUSH
18664: LD_INT 12
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PPUSH
18675: CALL_OW 70
18679: PUSH
18680: LD_INT 0
18682: EQUAL
18683: OR
18684: IFFALSE 18463
// disableHealAI = 0 ;
18686: LD_ADDR_EXP 33
18690: PUSH
18691: LD_INT 0
18693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18694: LD_ADDR_VAR 0 1
18698: PUSH
18699: LD_INT 22
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 12
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PUSH
18728: FOR_IN
18729: IFFALSE 18745
// SetClass ( i , 16 ) ;
18731: LD_VAR 0 1
18735: PPUSH
18736: LD_INT 16
18738: PPUSH
18739: CALL_OW 336
18743: GO 18728
18745: POP
18746: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_INT 22
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 25
18764: PUSH
18765: LD_INT 4
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: PUSH
18781: FOR_IN
18782: IFFALSE 18798
// ComEnterUnit ( i , rulab ) ;
18784: LD_VAR 0 1
18788: PPUSH
18789: LD_INT 32
18791: PPUSH
18792: CALL_OW 120
18796: GO 18781
18798: POP
18799: POP
// end ; end_of_file
18800: PPOPN 2
18802: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18803: LD_EXP 26
18807: PUSH
18808: LD_INT 0
18810: LESSEQUAL
18811: IFFALSE 18965
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
18820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18821: LD_ADDR_VAR 0 2
18825: PUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 21
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: LD_INT 30
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// for i in tmp do
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_VAR 0 2
18893: PUSH
18894: FOR_IN
18895: IFFALSE 18928
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18897: LD_ADDR_VAR 0 3
18901: PUSH
18902: LD_VAR 0 3
18906: PUSH
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL_OW 274
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 275
18924: PLUS
18925: ST_TO_ADDR
18926: GO 18894
18928: POP
18929: POP
// if yourCrates >= needCrates then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_EXP 25
18939: GREATEREQUAL
18940: IFFALSE 18958
// FinishMission ( yourCrates , needCrates ) else
18942: LD_VAR 0 3
18946: PPUSH
18947: LD_EXP 25
18951: PPUSH
18952: CALL 18968 0 2
18956: GO 18965
// YouLost ( matmin ) ;
18958: LD_STRING matmin
18960: PPUSH
18961: CALL_OW 104
// end ;
18965: PPOPN 3
18967: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18968: LD_INT 0
18970: PPUSH
18971: PPUSH
18972: PPUSH
18973: PPUSH
// if killCounter = 0 then
18974: LD_EXP 45
18978: PUSH
18979: LD_INT 0
18981: EQUAL
18982: IFFALSE 18991
// SetAchievement ( ACH_SURV ) ;
18984: LD_STRING ACH_SURV
18986: PPUSH
18987: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18991: LD_INT 22
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 21
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 69
19019: PUSH
19020: LD_INT 0
19022: EQUAL
19023: IFFALSE 19039
// begin wait ( 3 ) ;
19025: LD_INT 3
19027: PPUSH
19028: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19032: LD_STRING ACH_BASEDESTROYER
19034: PPUSH
19035: CALL_OW 543
// end ; m1 := false ;
19039: LD_ADDR_VAR 0 4
19043: PUSH
19044: LD_INT 0
19046: ST_TO_ADDR
// m2 := false ;
19047: LD_ADDR_VAR 0 5
19051: PUSH
19052: LD_INT 0
19054: ST_TO_ADDR
// m3 := false ;
19055: LD_ADDR_VAR 0 6
19059: PUSH
19060: LD_INT 0
19062: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19063: LD_VAR 0 1
19067: PUSH
19068: LD_INT 100
19070: PUSH
19071: LD_INT 140
19073: PUSH
19074: LD_INT 180
19076: PUSH
19077: LD_INT 220
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: LD_OWVAR 67
19090: ARRAY
19091: PLUS
19092: PUSH
19093: LD_VAR 0 2
19097: GREATER
19098: IFFALSE 19130
// begin AddMedal ( cans , 1 ) ;
19100: LD_STRING cans
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19110: LD_INT 1
19112: PPUSH
19113: LD_STRING 06_crates_1
19115: PPUSH
19116: CALL_OW 39
// m1 := true ;
19120: LD_ADDR_VAR 0 4
19124: PUSH
19125: LD_INT 1
19127: ST_TO_ADDR
// end else
19128: GO 19151
// begin AddMedal ( cans , - 1 ) ;
19130: LD_STRING cans
19132: PPUSH
19133: LD_INT 1
19135: NEG
19136: PPUSH
19137: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19141: LD_INT 0
19143: PPUSH
19144: LD_STRING 06_crates_1
19146: PPUSH
19147: CALL_OW 39
// end ; if unitLost < 3 then
19151: LD_EXP 30
19155: PUSH
19156: LD_INT 3
19158: LESS
19159: IFFALSE 19181
// begin AddMedal ( people , 1 ) ;
19161: LD_STRING people
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 101
// m2 := true ;
19171: LD_ADDR_VAR 0 5
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// end else
19179: GO 19192
// AddMedal ( people , - 1 ) ;
19181: LD_STRING people
19183: PPUSH
19184: LD_INT 1
19186: NEG
19187: PPUSH
19188: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19192: LD_EXP 28
19196: PPUSH
19197: LD_STRING 06_remoteVehs_1
19199: PPUSH
19200: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19204: LD_EXP 28
19208: PUSH
19209: LD_INT 1
19211: EQUAL
19212: IFFALSE 19234
// begin AddMedal ( remote , 1 ) ;
19214: LD_STRING remote
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 101
// m3 := true ;
19224: LD_ADDR_VAR 0 6
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// end else
19232: GO 19274
// begin if GetTech ( 18 , 1 ) = state_enabled then
19234: LD_INT 18
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 321
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 19263
// AddMedal ( remote , - 1 ) else
19250: LD_STRING remote
19252: PPUSH
19253: LD_INT 1
19255: NEG
19256: PPUSH
19257: CALL_OW 101
19261: GO 19274
// AddMedal ( remote , - 2 ) ;
19263: LD_STRING remote
19265: PPUSH
19266: LD_INT 2
19268: NEG
19269: PPUSH
19270: CALL_OW 101
// end ; if m1 and m2 and m3 then
19274: LD_VAR 0 4
19278: PUSH
19279: LD_VAR 0 5
19283: AND
19284: PUSH
19285: LD_VAR 0 6
19289: AND
19290: IFFALSE 19306
// begin wait ( 3 ) ;
19292: LD_INT 3
19294: PPUSH
19295: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19299: LD_STRING ACH_ASPEED_6
19301: PPUSH
19302: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19306: LD_OWVAR 67
19310: PUSH
19311: LD_INT 3
19313: GREATEREQUAL
19314: PUSH
19315: LD_VAR 0 4
19319: AND
19320: PUSH
19321: LD_VAR 0 5
19325: AND
19326: PUSH
19327: LD_VAR 0 6
19331: AND
19332: IFFALSE 19344
// SetAchievementEX ( ACH_AMER , 6 ) ;
19334: LD_STRING ACH_AMER
19336: PPUSH
19337: LD_INT 6
19339: PPUSH
19340: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19344: LD_EXP 20
19348: PPUSH
19349: LD_STRING 06_KurtStatus_1
19351: PPUSH
19352: CALL_OW 39
// GiveMedals ( Main ) ;
19356: LD_STRING Main
19358: PPUSH
19359: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19363: LD_INT 22
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 21
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 50
19385: PUSH
19386: EMPTY
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 3
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 25
19424: PUSH
19425: LD_INT 4
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 69
19449: PPUSH
19450: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19454: LD_EXP 1
19458: PPUSH
19459: LD_EXP 42
19463: PUSH
19464: LD_STRING JMM
19466: STR
19467: PPUSH
19468: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19472: LD_EXP 2
19476: PPUSH
19477: LD_EXP 42
19481: PUSH
19482: LD_STRING Lisa
19484: STR
19485: PPUSH
19486: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19490: LD_EXP 3
19494: PPUSH
19495: LD_EXP 42
19499: PUSH
19500: LD_STRING Bobby
19502: STR
19503: PPUSH
19504: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19508: LD_EXP 4
19512: PPUSH
19513: LD_EXP 42
19517: PUSH
19518: LD_STRING Cyrus
19520: STR
19521: PPUSH
19522: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19526: LD_EXP 5
19530: PPUSH
19531: LD_EXP 42
19535: PUSH
19536: LD_STRING Frank
19538: STR
19539: PPUSH
19540: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19544: LD_EXP 6
19548: PPUSH
19549: LD_EXP 42
19553: PUSH
19554: LD_STRING Brown
19556: STR
19557: PPUSH
19558: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19562: LD_EXP 7
19566: PPUSH
19567: LD_EXP 42
19571: PUSH
19572: LD_STRING Donaldson
19574: STR
19575: PPUSH
19576: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19580: LD_EXP 8
19584: PPUSH
19585: LD_EXP 42
19589: PUSH
19590: LD_STRING Gladstone
19592: STR
19593: PPUSH
19594: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19598: LD_EXP 9
19602: PPUSH
19603: LD_EXP 42
19607: PUSH
19608: LD_STRING Denis
19610: STR
19611: PPUSH
19612: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19616: LD_EXP 15
19620: PPUSH
19621: LD_EXP 42
19625: PUSH
19626: LD_STRING Joan
19628: STR
19629: PPUSH
19630: CALL 6869 0 2
// if IsLive ( Joan ) then
19634: LD_EXP 15
19638: PPUSH
19639: CALL_OW 300
19643: IFFALSE 19657
// SaveCharacters ( Joan , Joan ) ;
19645: LD_EXP 15
19649: PPUSH
19650: LD_STRING Joan
19652: PPUSH
19653: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19657: LD_EXP 16
19661: PPUSH
19662: LD_STRING 06_JoanStatus_1
19664: PPUSH
19665: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19669: LD_INT 50
19671: PUSH
19672: EMPTY
19673: LIST
19674: PUSH
19675: LD_INT 22
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 21
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: LD_INT 25
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 25
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 3
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 25
19730: PUSH
19731: LD_INT 4
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PUSH
19756: LD_EXP 1
19760: PUSH
19761: LD_EXP 2
19765: PUSH
19766: LD_EXP 3
19770: PUSH
19771: LD_EXP 4
19775: PUSH
19776: LD_EXP 5
19780: PUSH
19781: LD_EXP 6
19785: PUSH
19786: LD_EXP 7
19790: PUSH
19791: LD_EXP 8
19795: PUSH
19796: LD_EXP 9
19800: PUSH
19801: LD_EXP 15
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: DIFF
19818: PPUSH
19819: LD_STRING 06_other_survivors
19821: PPUSH
19822: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19826: LD_INT 50
19828: PUSH
19829: EMPTY
19830: LIST
19831: PUSH
19832: LD_INT 22
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 12
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 25
19867: PUSH
19868: LD_INT 16
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 69
19890: PPUSH
19891: LD_STRING 06_other_apemans
19893: PPUSH
19894: CALL_OW 38
// YouWin ;
19898: CALL_OW 103
// end ; end_of_file
19902: LD_VAR 0 3
19906: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19907: LD_EXP 47
19911: PUSH
19912: LD_OWVAR 1
19916: PUSH
19917: LD_INT 23100
19919: PUSH
19920: LD_INT 21000
19922: PUSH
19923: LD_INT 18900
19925: PUSH
19926: LD_INT 16800
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: LD_OWVAR 67
19939: ARRAY
19940: GREATER
19941: AND
19942: IFFALSE 20278
19944: GO 19946
19946: DISABLE
19947: LD_INT 0
19949: PPUSH
19950: PPUSH
19951: PPUSH
19952: PPUSH
// begin enable ;
19953: ENABLE
// for i in ruAttackers do
19954: LD_ADDR_VAR 0 1
19958: PUSH
19959: LD_EXP 47
19963: PUSH
19964: FOR_IN
19965: IFFALSE 20276
// begin if not IsDrivenBy ( i ) then
19967: LD_VAR 0 1
19971: PPUSH
19972: CALL_OW 311
19976: NOT
19977: IFFALSE 19981
// continue ;
19979: GO 19964
// if i mod 2 = 0 then
19981: LD_VAR 0 1
19985: PUSH
19986: LD_INT 2
19988: MOD
19989: PUSH
19990: LD_INT 0
19992: EQUAL
19993: IFFALSE 20059
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 91
20002: PUSH
20003: LD_INT 52
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 82
20012: PUSH
20013: LD_INT 34
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 90
20022: PUSH
20023: LD_INT 26
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 86
20032: PUSH
20033: LD_INT 16
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 80
20042: PUSH
20043: LD_INT 12
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: ST_TO_ADDR
20057: GO 20132
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20059: LD_ADDR_VAR 0 3
20063: PUSH
20064: LD_INT 91
20066: PUSH
20067: LD_INT 52
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 68
20076: PUSH
20077: LD_INT 46
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 48
20086: PUSH
20087: LD_INT 43
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 33
20096: PUSH
20097: LD_INT 34
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 30
20106: PUSH
20107: LD_INT 19
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 38
20116: PUSH
20117: LD_INT 16
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20132: LD_VAR 0 1
20136: PPUSH
20137: CALL_OW 256
20141: PUSH
20142: LD_INT 1000
20144: EQUAL
20145: IFFALSE 20163
// AgressiveMove ( i , path ) else
20147: LD_VAR 0 1
20151: PPUSH
20152: LD_VAR 0 3
20156: PPUSH
20157: CALL 81131 0 2
20161: GO 20274
// if GetLives ( i ) < 650 then
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL_OW 256
20172: PUSH
20173: LD_INT 650
20175: LESS
20176: IFFALSE 20274
// begin if not IsInArea ( i , russianRepairArea ) then
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_INT 12
20185: PPUSH
20186: CALL_OW 308
20190: NOT
20191: IFFALSE 20260
// begin SetTag ( i , 0 ) ;
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_INT 0
20200: PPUSH
20201: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 261
20214: PUSH
20215: LD_INT 50
20217: LESS
20218: PUSH
20219: LD_INT 21
20221: PPUSH
20222: CALL_OW 302
20226: AND
20227: IFFALSE 20243
// ComMoveUnit ( i , rufab ) else
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_INT 21
20236: PPUSH
20237: CALL_OW 112
20241: GO 20258
// ComMoveXY ( i , 121 , 99 ) ;
20243: LD_VAR 0 1
20247: PPUSH
20248: LD_INT 121
20250: PPUSH
20251: LD_INT 99
20253: PPUSH
20254: CALL_OW 111
// end else
20258: GO 20274
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20260: LD_VAR 0 1
20264: PPUSH
20265: CALL_OW 311
20269: PPUSH
20270: CALL 80227 0 1
// end ; end ;
20274: GO 19964
20276: POP
20277: POP
// end ;
20278: PPOPN 4
20280: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20281: LD_INT 0
20283: PPUSH
20284: PPUSH
20285: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: DOUBLE
20292: LD_INT 1
20294: DEC
20295: ST_TO_ADDR
20296: LD_INT 4
20298: PUSH
20299: LD_INT 5
20301: PUSH
20302: LD_INT 6
20304: PUSH
20305: LD_INT 6
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: LD_OWVAR 67
20318: ARRAY
20319: PUSH
20320: FOR_TO
20321: IFFALSE 20496
// begin uc_side := 3 ;
20323: LD_ADDR_OWVAR 20
20327: PUSH
20328: LD_INT 3
20330: ST_TO_ADDR
// uc_nation := 3 ;
20331: LD_ADDR_OWVAR 21
20335: PUSH
20336: LD_INT 3
20338: ST_TO_ADDR
// InitHC_All ( ) ;
20339: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20343: LD_INT 0
20345: PPUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 5
20351: PUSH
20352: LD_INT 6
20354: PUSH
20355: LD_INT 6
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: PUSH
20364: LD_OWVAR 67
20368: ARRAY
20369: PPUSH
20370: CALL_OW 381
// un := CreateHuman ;
20374: LD_ADDR_VAR 0 3
20378: PUSH
20379: CALL_OW 44
20383: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20384: LD_VAR 0 3
20388: PPUSH
20389: LD_INT 127
20391: PPUSH
20392: LD_INT 62
20394: PPUSH
20395: LD_INT 3
20397: PPUSH
20398: LD_INT 0
20400: PPUSH
20401: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20405: LD_ADDR_EXP 48
20409: PUSH
20410: LD_EXP 48
20414: PPUSH
20415: LD_EXP 48
20419: PUSH
20420: LD_INT 1
20422: PLUS
20423: PPUSH
20424: LD_VAR 0 3
20428: PPUSH
20429: CALL_OW 1
20433: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20434: LD_VAR 0 3
20438: PPUSH
20439: LD_INT 83
20441: PPUSH
20442: LD_INT 49
20444: PPUSH
20445: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20449: LD_VAR 0 3
20453: PPUSH
20454: LD_INT 49
20456: PPUSH
20457: LD_INT 43
20459: PPUSH
20460: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20464: LD_VAR 0 3
20468: PPUSH
20469: LD_INT 31
20471: PPUSH
20472: LD_INT 15
20474: PPUSH
20475: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20479: LD_VAR 0 3
20483: PPUSH
20484: LD_INT 63
20486: PPUSH
20487: LD_INT 9
20489: PPUSH
20490: CALL_OW 174
// end ;
20494: GO 20320
20496: POP
20497: POP
// end ; end_of_file
20498: LD_VAR 0 1
20502: RET
// export function CreateNature ; var i , un ; begin
20503: LD_INT 0
20505: PPUSH
20506: PPUSH
20507: PPUSH
// for i := 1 to Difficulty + 2 do
20508: LD_ADDR_VAR 0 2
20512: PUSH
20513: DOUBLE
20514: LD_INT 1
20516: DEC
20517: ST_TO_ADDR
20518: LD_OWVAR 67
20522: PUSH
20523: LD_INT 2
20525: PLUS
20526: PUSH
20527: FOR_TO
20528: IFFALSE 20637
// begin hc_sex := sex_male ;
20530: LD_ADDR_OWVAR 27
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// uc_side := 0 ;
20538: LD_ADDR_OWVAR 20
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// uc_nation := nation_nature ;
20546: LD_ADDR_OWVAR 21
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// hc_class := class_tiger ;
20554: LD_ADDR_OWVAR 28
20558: PUSH
20559: LD_INT 14
20561: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20562: LD_ADDR_OWVAR 31
20566: PUSH
20567: LD_EXP 35
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20587: LD_ADDR_OWVAR 35
20591: PUSH
20592: LD_INT 5
20594: NEG
20595: PPUSH
20596: LD_INT 5
20598: PPUSH
20599: CALL_OW 12
20603: PUSH
20604: LD_OWVAR 67
20608: MUL
20609: ST_TO_ADDR
// un := CreateHuman ;
20610: LD_ADDR_VAR 0 3
20614: PUSH
20615: CALL_OW 44
20619: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20620: LD_VAR 0 3
20624: PPUSH
20625: LD_INT 18
20627: PPUSH
20628: LD_INT 0
20630: PPUSH
20631: CALL_OW 49
// end ;
20635: GO 20527
20637: POP
20638: POP
// for i = 1 to rand ( 3 , 4 ) do
20639: LD_ADDR_VAR 0 2
20643: PUSH
20644: DOUBLE
20645: LD_INT 1
20647: DEC
20648: ST_TO_ADDR
20649: LD_INT 3
20651: PPUSH
20652: LD_INT 4
20654: PPUSH
20655: CALL_OW 12
20659: PUSH
20660: FOR_TO
20661: IFFALSE 20731
// begin hc_class := class_phororhacos ;
20663: LD_ADDR_OWVAR 28
20667: PUSH
20668: LD_INT 18
20670: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20671: LD_ADDR_OWVAR 31
20675: PUSH
20676: LD_EXP 35
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: ST_TO_ADDR
// hc_agressivity := 0 ;
20696: LD_ADDR_OWVAR 35
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// un = CreateHuman ;
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: CALL_OW 44
20713: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20714: LD_VAR 0 3
20718: PPUSH
20719: LD_INT 18
20721: PPUSH
20722: LD_INT 0
20724: PPUSH
20725: CALL_OW 49
// end ;
20729: GO 20660
20731: POP
20732: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20733: LD_ADDR_VAR 0 2
20737: PUSH
20738: DOUBLE
20739: LD_INT 1
20741: DEC
20742: ST_TO_ADDR
20743: LD_INT 1
20745: PPUSH
20746: LD_INT 3
20748: PPUSH
20749: CALL_OW 12
20753: PUSH
20754: LD_OWVAR 67
20758: PLUS
20759: PUSH
20760: FOR_TO
20761: IFFALSE 20898
// begin hc_class := class_apeman ;
20763: LD_ADDR_OWVAR 28
20767: PUSH
20768: LD_INT 12
20770: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20771: LD_ADDR_OWVAR 31
20775: PUSH
20776: LD_INT 2
20778: PPUSH
20779: LD_INT 5
20781: PPUSH
20782: CALL_OW 12
20786: PUSH
20787: LD_INT 0
20789: PPUSH
20790: LD_INT 2
20792: PPUSH
20793: CALL_OW 12
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20810: LD_ADDR_OWVAR 35
20814: PUSH
20815: LD_INT 0
20817: PPUSH
20818: LD_INT 10
20820: PPUSH
20821: CALL_OW 12
20825: PUSH
20826: LD_INT 10
20828: PPUSH
20829: LD_INT 20
20831: PPUSH
20832: CALL_OW 12
20836: PUSH
20837: LD_INT 20
20839: PPUSH
20840: LD_INT 25
20842: PPUSH
20843: CALL_OW 12
20847: PUSH
20848: LD_INT 20
20850: PPUSH
20851: LD_INT 30
20853: PPUSH
20854: CALL_OW 12
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PUSH
20865: LD_OWVAR 67
20869: ARRAY
20870: ST_TO_ADDR
// un := CreateHuman ;
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: CALL_OW 44
20880: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20881: LD_VAR 0 3
20885: PPUSH
20886: LD_INT 19
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 49
// end ;
20896: GO 20760
20898: POP
20899: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: DOUBLE
20906: LD_INT 1
20908: DEC
20909: ST_TO_ADDR
20910: LD_INT 5
20912: PPUSH
20913: LD_INT 6
20915: PPUSH
20916: CALL_OW 12
20920: PUSH
20921: LD_OWVAR 67
20925: PLUS
20926: PUSH
20927: FOR_TO
20928: IFFALSE 21012
// begin hc_class := class_apeman ;
20930: LD_ADDR_OWVAR 28
20934: PUSH
20935: LD_INT 12
20937: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20938: LD_ADDR_OWVAR 31
20942: PUSH
20943: LD_INT 2
20945: PPUSH
20946: LD_INT 5
20948: PPUSH
20949: CALL_OW 12
20953: PUSH
20954: LD_INT 0
20956: PPUSH
20957: LD_INT 2
20959: PPUSH
20960: CALL_OW 12
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: ST_TO_ADDR
// hc_agressivity := 0 ;
20977: LD_ADDR_OWVAR 35
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// un = CreateHuman ;
20985: LD_ADDR_VAR 0 3
20989: PUSH
20990: CALL_OW 44
20994: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20995: LD_VAR 0 3
20999: PPUSH
21000: LD_INT 20
21002: PPUSH
21003: LD_INT 0
21005: PPUSH
21006: CALL_OW 49
// end ;
21010: GO 20927
21012: POP
21013: POP
// end ; end_of_file
21014: LD_VAR 0 1
21018: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21019: LD_INT 0
21021: PPUSH
// ar_miner := 81 ;
21022: LD_ADDR_EXP 56
21026: PUSH
21027: LD_INT 81
21029: ST_TO_ADDR
// ar_crane := 88 ;
21030: LD_ADDR_EXP 55
21034: PUSH
21035: LD_INT 88
21037: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21038: LD_ADDR_EXP 50
21042: PUSH
21043: LD_INT 89
21045: ST_TO_ADDR
// us_hack := 99 ;
21046: LD_ADDR_EXP 51
21050: PUSH
21051: LD_INT 99
21053: ST_TO_ADDR
// us_artillery := 97 ;
21054: LD_ADDR_EXP 52
21058: PUSH
21059: LD_INT 97
21061: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21062: LD_ADDR_EXP 53
21066: PUSH
21067: LD_INT 91
21069: ST_TO_ADDR
// ar_mortar := 92 ;
21070: LD_ADDR_EXP 54
21074: PUSH
21075: LD_INT 92
21077: ST_TO_ADDR
// ru_flamethrower := 93 ;
21078: LD_ADDR_EXP 57
21082: PUSH
21083: LD_INT 93
21085: ST_TO_ADDR
// ru_radar := 98 ;
21086: LD_ADDR_EXP 49
21090: PUSH
21091: LD_INT 98
21093: ST_TO_ADDR
// tech_Artillery := 80 ;
21094: LD_ADDR_EXP 58
21098: PUSH
21099: LD_INT 80
21101: ST_TO_ADDR
// tech_RadMat := 81 ;
21102: LD_ADDR_EXP 59
21106: PUSH
21107: LD_INT 81
21109: ST_TO_ADDR
// tech_BasicTools := 82 ;
21110: LD_ADDR_EXP 60
21114: PUSH
21115: LD_INT 82
21117: ST_TO_ADDR
// tech_Cargo := 83 ;
21118: LD_ADDR_EXP 61
21122: PUSH
21123: LD_INT 83
21125: ST_TO_ADDR
// tech_Track := 84 ;
21126: LD_ADDR_EXP 62
21130: PUSH
21131: LD_INT 84
21133: ST_TO_ADDR
// tech_Crane := 85 ;
21134: LD_ADDR_EXP 63
21138: PUSH
21139: LD_INT 85
21141: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21142: LD_ADDR_EXP 64
21146: PUSH
21147: LD_INT 86
21149: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21150: LD_ADDR_EXP 65
21154: PUSH
21155: LD_INT 87
21157: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21158: LD_ADDR_EXP 66
21162: PUSH
21163: LD_INT 88
21165: ST_TO_ADDR
// end ;
21166: LD_VAR 0 1
21170: RET
// every 1 do
21171: GO 21173
21173: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21174: CALL 21019 0 0
21178: END
// every 0 0$1 do
21179: GO 21181
21181: DISABLE
// begin enable ;
21182: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21183: LD_STRING updateTimer(
21185: PUSH
21186: LD_OWVAR 1
21190: STR
21191: PUSH
21192: LD_STRING );
21194: STR
21195: PPUSH
21196: CALL_OW 559
// end ;
21200: END
// export function SOS_MapStart ( ) ; begin
21201: LD_INT 0
21203: PPUSH
// if streamModeActive then
21204: LD_EXP 67
21208: IFFALSE 21217
// DefineStreamItems ( true ) ;
21210: LD_INT 1
21212: PPUSH
21213: CALL 22871 0 1
// UpdateFactoryWaypoints ( ) ;
21217: CALL 35732 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21221: CALL 35989 0 0
// end ;
21225: LD_VAR 0 1
21229: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21230: LD_INT 0
21232: PPUSH
// if p2 = 100 then
21233: LD_VAR 0 2
21237: PUSH
21238: LD_INT 100
21240: EQUAL
21241: IFFALSE 22244
// begin if not StreamModeActive then
21243: LD_EXP 67
21247: NOT
21248: IFFALSE 21258
// StreamModeActive := true ;
21250: LD_ADDR_EXP 67
21254: PUSH
21255: LD_INT 1
21257: ST_TO_ADDR
// if p3 = 0 then
21258: LD_VAR 0 3
21262: PUSH
21263: LD_INT 0
21265: EQUAL
21266: IFFALSE 21272
// InitStreamMode ;
21268: CALL 22407 0 0
// if p3 = 1 then
21272: LD_VAR 0 3
21276: PUSH
21277: LD_INT 1
21279: EQUAL
21280: IFFALSE 21290
// sRocket := true ;
21282: LD_ADDR_EXP 72
21286: PUSH
21287: LD_INT 1
21289: ST_TO_ADDR
// if p3 = 2 then
21290: LD_VAR 0 3
21294: PUSH
21295: LD_INT 2
21297: EQUAL
21298: IFFALSE 21308
// sSpeed := true ;
21300: LD_ADDR_EXP 71
21304: PUSH
21305: LD_INT 1
21307: ST_TO_ADDR
// if p3 = 3 then
21308: LD_VAR 0 3
21312: PUSH
21313: LD_INT 3
21315: EQUAL
21316: IFFALSE 21326
// sEngine := true ;
21318: LD_ADDR_EXP 73
21322: PUSH
21323: LD_INT 1
21325: ST_TO_ADDR
// if p3 = 4 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 4
21333: EQUAL
21334: IFFALSE 21344
// sSpec := true ;
21336: LD_ADDR_EXP 70
21340: PUSH
21341: LD_INT 1
21343: ST_TO_ADDR
// if p3 = 5 then
21344: LD_VAR 0 3
21348: PUSH
21349: LD_INT 5
21351: EQUAL
21352: IFFALSE 21362
// sLevel := true ;
21354: LD_ADDR_EXP 74
21358: PUSH
21359: LD_INT 1
21361: ST_TO_ADDR
// if p3 = 6 then
21362: LD_VAR 0 3
21366: PUSH
21367: LD_INT 6
21369: EQUAL
21370: IFFALSE 21380
// sArmoury := true ;
21372: LD_ADDR_EXP 75
21376: PUSH
21377: LD_INT 1
21379: ST_TO_ADDR
// if p3 = 7 then
21380: LD_VAR 0 3
21384: PUSH
21385: LD_INT 7
21387: EQUAL
21388: IFFALSE 21398
// sRadar := true ;
21390: LD_ADDR_EXP 76
21394: PUSH
21395: LD_INT 1
21397: ST_TO_ADDR
// if p3 = 8 then
21398: LD_VAR 0 3
21402: PUSH
21403: LD_INT 8
21405: EQUAL
21406: IFFALSE 21416
// sBunker := true ;
21408: LD_ADDR_EXP 77
21412: PUSH
21413: LD_INT 1
21415: ST_TO_ADDR
// if p3 = 9 then
21416: LD_VAR 0 3
21420: PUSH
21421: LD_INT 9
21423: EQUAL
21424: IFFALSE 21434
// sHack := true ;
21426: LD_ADDR_EXP 78
21430: PUSH
21431: LD_INT 1
21433: ST_TO_ADDR
// if p3 = 10 then
21434: LD_VAR 0 3
21438: PUSH
21439: LD_INT 10
21441: EQUAL
21442: IFFALSE 21452
// sFire := true ;
21444: LD_ADDR_EXP 79
21448: PUSH
21449: LD_INT 1
21451: ST_TO_ADDR
// if p3 = 11 then
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 11
21459: EQUAL
21460: IFFALSE 21470
// sRefresh := true ;
21462: LD_ADDR_EXP 80
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// if p3 = 12 then
21470: LD_VAR 0 3
21474: PUSH
21475: LD_INT 12
21477: EQUAL
21478: IFFALSE 21488
// sExp := true ;
21480: LD_ADDR_EXP 81
21484: PUSH
21485: LD_INT 1
21487: ST_TO_ADDR
// if p3 = 13 then
21488: LD_VAR 0 3
21492: PUSH
21493: LD_INT 13
21495: EQUAL
21496: IFFALSE 21506
// sDepot := true ;
21498: LD_ADDR_EXP 82
21502: PUSH
21503: LD_INT 1
21505: ST_TO_ADDR
// if p3 = 14 then
21506: LD_VAR 0 3
21510: PUSH
21511: LD_INT 14
21513: EQUAL
21514: IFFALSE 21524
// sFlag := true ;
21516: LD_ADDR_EXP 83
21520: PUSH
21521: LD_INT 1
21523: ST_TO_ADDR
// if p3 = 15 then
21524: LD_VAR 0 3
21528: PUSH
21529: LD_INT 15
21531: EQUAL
21532: IFFALSE 21542
// sKamikadze := true ;
21534: LD_ADDR_EXP 91
21538: PUSH
21539: LD_INT 1
21541: ST_TO_ADDR
// if p3 = 16 then
21542: LD_VAR 0 3
21546: PUSH
21547: LD_INT 16
21549: EQUAL
21550: IFFALSE 21560
// sTroll := true ;
21552: LD_ADDR_EXP 92
21556: PUSH
21557: LD_INT 1
21559: ST_TO_ADDR
// if p3 = 17 then
21560: LD_VAR 0 3
21564: PUSH
21565: LD_INT 17
21567: EQUAL
21568: IFFALSE 21578
// sSlow := true ;
21570: LD_ADDR_EXP 93
21574: PUSH
21575: LD_INT 1
21577: ST_TO_ADDR
// if p3 = 18 then
21578: LD_VAR 0 3
21582: PUSH
21583: LD_INT 18
21585: EQUAL
21586: IFFALSE 21596
// sLack := true ;
21588: LD_ADDR_EXP 94
21592: PUSH
21593: LD_INT 1
21595: ST_TO_ADDR
// if p3 = 19 then
21596: LD_VAR 0 3
21600: PUSH
21601: LD_INT 19
21603: EQUAL
21604: IFFALSE 21614
// sTank := true ;
21606: LD_ADDR_EXP 96
21610: PUSH
21611: LD_INT 1
21613: ST_TO_ADDR
// if p3 = 20 then
21614: LD_VAR 0 3
21618: PUSH
21619: LD_INT 20
21621: EQUAL
21622: IFFALSE 21632
// sRemote := true ;
21624: LD_ADDR_EXP 97
21628: PUSH
21629: LD_INT 1
21631: ST_TO_ADDR
// if p3 = 21 then
21632: LD_VAR 0 3
21636: PUSH
21637: LD_INT 21
21639: EQUAL
21640: IFFALSE 21650
// sPowell := true ;
21642: LD_ADDR_EXP 98
21646: PUSH
21647: LD_INT 1
21649: ST_TO_ADDR
// if p3 = 22 then
21650: LD_VAR 0 3
21654: PUSH
21655: LD_INT 22
21657: EQUAL
21658: IFFALSE 21668
// sTeleport := true ;
21660: LD_ADDR_EXP 101
21664: PUSH
21665: LD_INT 1
21667: ST_TO_ADDR
// if p3 = 23 then
21668: LD_VAR 0 3
21672: PUSH
21673: LD_INT 23
21675: EQUAL
21676: IFFALSE 21686
// sOilTower := true ;
21678: LD_ADDR_EXP 103
21682: PUSH
21683: LD_INT 1
21685: ST_TO_ADDR
// if p3 = 24 then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 24
21693: EQUAL
21694: IFFALSE 21704
// sShovel := true ;
21696: LD_ADDR_EXP 104
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// if p3 = 25 then
21704: LD_VAR 0 3
21708: PUSH
21709: LD_INT 25
21711: EQUAL
21712: IFFALSE 21722
// sSheik := true ;
21714: LD_ADDR_EXP 105
21718: PUSH
21719: LD_INT 1
21721: ST_TO_ADDR
// if p3 = 26 then
21722: LD_VAR 0 3
21726: PUSH
21727: LD_INT 26
21729: EQUAL
21730: IFFALSE 21740
// sEarthquake := true ;
21732: LD_ADDR_EXP 107
21736: PUSH
21737: LD_INT 1
21739: ST_TO_ADDR
// if p3 = 27 then
21740: LD_VAR 0 3
21744: PUSH
21745: LD_INT 27
21747: EQUAL
21748: IFFALSE 21758
// sAI := true ;
21750: LD_ADDR_EXP 108
21754: PUSH
21755: LD_INT 1
21757: ST_TO_ADDR
// if p3 = 28 then
21758: LD_VAR 0 3
21762: PUSH
21763: LD_INT 28
21765: EQUAL
21766: IFFALSE 21776
// sCargo := true ;
21768: LD_ADDR_EXP 111
21772: PUSH
21773: LD_INT 1
21775: ST_TO_ADDR
// if p3 = 29 then
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 29
21783: EQUAL
21784: IFFALSE 21794
// sDLaser := true ;
21786: LD_ADDR_EXP 112
21790: PUSH
21791: LD_INT 1
21793: ST_TO_ADDR
// if p3 = 30 then
21794: LD_VAR 0 3
21798: PUSH
21799: LD_INT 30
21801: EQUAL
21802: IFFALSE 21812
// sExchange := true ;
21804: LD_ADDR_EXP 113
21808: PUSH
21809: LD_INT 1
21811: ST_TO_ADDR
// if p3 = 31 then
21812: LD_VAR 0 3
21816: PUSH
21817: LD_INT 31
21819: EQUAL
21820: IFFALSE 21830
// sFac := true ;
21822: LD_ADDR_EXP 114
21826: PUSH
21827: LD_INT 1
21829: ST_TO_ADDR
// if p3 = 32 then
21830: LD_VAR 0 3
21834: PUSH
21835: LD_INT 32
21837: EQUAL
21838: IFFALSE 21848
// sPower := true ;
21840: LD_ADDR_EXP 115
21844: PUSH
21845: LD_INT 1
21847: ST_TO_ADDR
// if p3 = 33 then
21848: LD_VAR 0 3
21852: PUSH
21853: LD_INT 33
21855: EQUAL
21856: IFFALSE 21866
// sRandom := true ;
21858: LD_ADDR_EXP 116
21862: PUSH
21863: LD_INT 1
21865: ST_TO_ADDR
// if p3 = 34 then
21866: LD_VAR 0 3
21870: PUSH
21871: LD_INT 34
21873: EQUAL
21874: IFFALSE 21884
// sShield := true ;
21876: LD_ADDR_EXP 117
21880: PUSH
21881: LD_INT 1
21883: ST_TO_ADDR
// if p3 = 35 then
21884: LD_VAR 0 3
21888: PUSH
21889: LD_INT 35
21891: EQUAL
21892: IFFALSE 21902
// sTime := true ;
21894: LD_ADDR_EXP 118
21898: PUSH
21899: LD_INT 1
21901: ST_TO_ADDR
// if p3 = 36 then
21902: LD_VAR 0 3
21906: PUSH
21907: LD_INT 36
21909: EQUAL
21910: IFFALSE 21920
// sTools := true ;
21912: LD_ADDR_EXP 119
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// if p3 = 101 then
21920: LD_VAR 0 3
21924: PUSH
21925: LD_INT 101
21927: EQUAL
21928: IFFALSE 21938
// sSold := true ;
21930: LD_ADDR_EXP 84
21934: PUSH
21935: LD_INT 1
21937: ST_TO_ADDR
// if p3 = 102 then
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 102
21945: EQUAL
21946: IFFALSE 21956
// sDiff := true ;
21948: LD_ADDR_EXP 85
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// if p3 = 103 then
21956: LD_VAR 0 3
21960: PUSH
21961: LD_INT 103
21963: EQUAL
21964: IFFALSE 21974
// sFog := true ;
21966: LD_ADDR_EXP 88
21970: PUSH
21971: LD_INT 1
21973: ST_TO_ADDR
// if p3 = 104 then
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 104
21981: EQUAL
21982: IFFALSE 21992
// sReset := true ;
21984: LD_ADDR_EXP 89
21988: PUSH
21989: LD_INT 1
21991: ST_TO_ADDR
// if p3 = 105 then
21992: LD_VAR 0 3
21996: PUSH
21997: LD_INT 105
21999: EQUAL
22000: IFFALSE 22010
// sSun := true ;
22002: LD_ADDR_EXP 90
22006: PUSH
22007: LD_INT 1
22009: ST_TO_ADDR
// if p3 = 106 then
22010: LD_VAR 0 3
22014: PUSH
22015: LD_INT 106
22017: EQUAL
22018: IFFALSE 22028
// sTiger := true ;
22020: LD_ADDR_EXP 86
22024: PUSH
22025: LD_INT 1
22027: ST_TO_ADDR
// if p3 = 107 then
22028: LD_VAR 0 3
22032: PUSH
22033: LD_INT 107
22035: EQUAL
22036: IFFALSE 22046
// sBomb := true ;
22038: LD_ADDR_EXP 87
22042: PUSH
22043: LD_INT 1
22045: ST_TO_ADDR
// if p3 = 108 then
22046: LD_VAR 0 3
22050: PUSH
22051: LD_INT 108
22053: EQUAL
22054: IFFALSE 22064
// sWound := true ;
22056: LD_ADDR_EXP 95
22060: PUSH
22061: LD_INT 1
22063: ST_TO_ADDR
// if p3 = 109 then
22064: LD_VAR 0 3
22068: PUSH
22069: LD_INT 109
22071: EQUAL
22072: IFFALSE 22082
// sBetray := true ;
22074: LD_ADDR_EXP 99
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// if p3 = 110 then
22082: LD_VAR 0 3
22086: PUSH
22087: LD_INT 110
22089: EQUAL
22090: IFFALSE 22100
// sContamin := true ;
22092: LD_ADDR_EXP 100
22096: PUSH
22097: LD_INT 1
22099: ST_TO_ADDR
// if p3 = 111 then
22100: LD_VAR 0 3
22104: PUSH
22105: LD_INT 111
22107: EQUAL
22108: IFFALSE 22118
// sOil := true ;
22110: LD_ADDR_EXP 102
22114: PUSH
22115: LD_INT 1
22117: ST_TO_ADDR
// if p3 = 112 then
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 112
22125: EQUAL
22126: IFFALSE 22136
// sStu := true ;
22128: LD_ADDR_EXP 106
22132: PUSH
22133: LD_INT 1
22135: ST_TO_ADDR
// if p3 = 113 then
22136: LD_VAR 0 3
22140: PUSH
22141: LD_INT 113
22143: EQUAL
22144: IFFALSE 22154
// sBazooka := true ;
22146: LD_ADDR_EXP 109
22150: PUSH
22151: LD_INT 1
22153: ST_TO_ADDR
// if p3 = 114 then
22154: LD_VAR 0 3
22158: PUSH
22159: LD_INT 114
22161: EQUAL
22162: IFFALSE 22172
// sMortar := true ;
22164: LD_ADDR_EXP 110
22168: PUSH
22169: LD_INT 1
22171: ST_TO_ADDR
// if p3 = 115 then
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 115
22179: EQUAL
22180: IFFALSE 22190
// sRanger := true ;
22182: LD_ADDR_EXP 120
22186: PUSH
22187: LD_INT 1
22189: ST_TO_ADDR
// if p3 = 116 then
22190: LD_VAR 0 3
22194: PUSH
22195: LD_INT 116
22197: EQUAL
22198: IFFALSE 22208
// sComputer := true ;
22200: LD_ADDR_EXP 121
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// if p3 = 117 then
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 117
22215: EQUAL
22216: IFFALSE 22226
// s30 := true ;
22218: LD_ADDR_EXP 122
22222: PUSH
22223: LD_INT 1
22225: ST_TO_ADDR
// if p3 = 118 then
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 118
22233: EQUAL
22234: IFFALSE 22244
// s60 := true ;
22236: LD_ADDR_EXP 123
22240: PUSH
22241: LD_INT 1
22243: ST_TO_ADDR
// end ; if p2 = 101 then
22244: LD_VAR 0 2
22248: PUSH
22249: LD_INT 101
22251: EQUAL
22252: IFFALSE 22380
// begin case p3 of 1 :
22254: LD_VAR 0 3
22258: PUSH
22259: LD_INT 1
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22274
22267: POP
// hHackUnlimitedResources ; 2 :
22268: CALL 34478 0 0
22272: GO 22380
22274: LD_INT 2
22276: DOUBLE
22277: EQUAL
22278: IFTRUE 22282
22280: GO 22289
22282: POP
// hHackSetLevel10 ; 3 :
22283: CALL 34611 0 0
22287: GO 22380
22289: LD_INT 3
22291: DOUBLE
22292: EQUAL
22293: IFTRUE 22297
22295: GO 22304
22297: POP
// hHackSetLevel10YourUnits ; 4 :
22298: CALL 34696 0 0
22302: GO 22380
22304: LD_INT 4
22306: DOUBLE
22307: EQUAL
22308: IFTRUE 22312
22310: GO 22319
22312: POP
// hHackInvincible ; 5 :
22313: CALL 35144 0 0
22317: GO 22380
22319: LD_INT 5
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22334
22327: POP
// hHackInvisible ; 6 :
22328: CALL 35255 0 0
22332: GO 22380
22334: LD_INT 6
22336: DOUBLE
22337: EQUAL
22338: IFTRUE 22342
22340: GO 22349
22342: POP
// hHackChangeYourSide ; 7 :
22343: CALL 35312 0 0
22347: GO 22380
22349: LD_INT 7
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22364
22357: POP
// hHackChangeUnitSide ; 8 :
22358: CALL 35354 0 0
22362: GO 22380
22364: LD_INT 8
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22379
22372: POP
// hHackFog ; end ;
22373: CALL 35455 0 0
22377: GO 22380
22379: POP
// end ; end ;
22380: LD_VAR 0 7
22384: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22385: GO 22387
22387: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22388: LD_STRING initStreamRollete();
22390: PPUSH
22391: CALL_OW 559
// InitStreamMode ;
22395: CALL 22407 0 0
// DefineStreamItems ( false ) ;
22399: LD_INT 0
22401: PPUSH
22402: CALL 22871 0 1
// end ;
22406: END
// function InitStreamMode ; begin
22407: LD_INT 0
22409: PPUSH
// streamModeActive := false ;
22410: LD_ADDR_EXP 67
22414: PUSH
22415: LD_INT 0
22417: ST_TO_ADDR
// normalCounter := 36 ;
22418: LD_ADDR_EXP 68
22422: PUSH
22423: LD_INT 36
22425: ST_TO_ADDR
// hardcoreCounter := 18 ;
22426: LD_ADDR_EXP 69
22430: PUSH
22431: LD_INT 18
22433: ST_TO_ADDR
// sRocket := false ;
22434: LD_ADDR_EXP 72
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
// sSpeed := false ;
22442: LD_ADDR_EXP 71
22446: PUSH
22447: LD_INT 0
22449: ST_TO_ADDR
// sEngine := false ;
22450: LD_ADDR_EXP 73
22454: PUSH
22455: LD_INT 0
22457: ST_TO_ADDR
// sSpec := false ;
22458: LD_ADDR_EXP 70
22462: PUSH
22463: LD_INT 0
22465: ST_TO_ADDR
// sLevel := false ;
22466: LD_ADDR_EXP 74
22470: PUSH
22471: LD_INT 0
22473: ST_TO_ADDR
// sArmoury := false ;
22474: LD_ADDR_EXP 75
22478: PUSH
22479: LD_INT 0
22481: ST_TO_ADDR
// sRadar := false ;
22482: LD_ADDR_EXP 76
22486: PUSH
22487: LD_INT 0
22489: ST_TO_ADDR
// sBunker := false ;
22490: LD_ADDR_EXP 77
22494: PUSH
22495: LD_INT 0
22497: ST_TO_ADDR
// sHack := false ;
22498: LD_ADDR_EXP 78
22502: PUSH
22503: LD_INT 0
22505: ST_TO_ADDR
// sFire := false ;
22506: LD_ADDR_EXP 79
22510: PUSH
22511: LD_INT 0
22513: ST_TO_ADDR
// sRefresh := false ;
22514: LD_ADDR_EXP 80
22518: PUSH
22519: LD_INT 0
22521: ST_TO_ADDR
// sExp := false ;
22522: LD_ADDR_EXP 81
22526: PUSH
22527: LD_INT 0
22529: ST_TO_ADDR
// sDepot := false ;
22530: LD_ADDR_EXP 82
22534: PUSH
22535: LD_INT 0
22537: ST_TO_ADDR
// sFlag := false ;
22538: LD_ADDR_EXP 83
22542: PUSH
22543: LD_INT 0
22545: ST_TO_ADDR
// sKamikadze := false ;
22546: LD_ADDR_EXP 91
22550: PUSH
22551: LD_INT 0
22553: ST_TO_ADDR
// sTroll := false ;
22554: LD_ADDR_EXP 92
22558: PUSH
22559: LD_INT 0
22561: ST_TO_ADDR
// sSlow := false ;
22562: LD_ADDR_EXP 93
22566: PUSH
22567: LD_INT 0
22569: ST_TO_ADDR
// sLack := false ;
22570: LD_ADDR_EXP 94
22574: PUSH
22575: LD_INT 0
22577: ST_TO_ADDR
// sTank := false ;
22578: LD_ADDR_EXP 96
22582: PUSH
22583: LD_INT 0
22585: ST_TO_ADDR
// sRemote := false ;
22586: LD_ADDR_EXP 97
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// sPowell := false ;
22594: LD_ADDR_EXP 98
22598: PUSH
22599: LD_INT 0
22601: ST_TO_ADDR
// sTeleport := false ;
22602: LD_ADDR_EXP 101
22606: PUSH
22607: LD_INT 0
22609: ST_TO_ADDR
// sOilTower := false ;
22610: LD_ADDR_EXP 103
22614: PUSH
22615: LD_INT 0
22617: ST_TO_ADDR
// sShovel := false ;
22618: LD_ADDR_EXP 104
22622: PUSH
22623: LD_INT 0
22625: ST_TO_ADDR
// sSheik := false ;
22626: LD_ADDR_EXP 105
22630: PUSH
22631: LD_INT 0
22633: ST_TO_ADDR
// sEarthquake := false ;
22634: LD_ADDR_EXP 107
22638: PUSH
22639: LD_INT 0
22641: ST_TO_ADDR
// sAI := false ;
22642: LD_ADDR_EXP 108
22646: PUSH
22647: LD_INT 0
22649: ST_TO_ADDR
// sCargo := false ;
22650: LD_ADDR_EXP 111
22654: PUSH
22655: LD_INT 0
22657: ST_TO_ADDR
// sDLaser := false ;
22658: LD_ADDR_EXP 112
22662: PUSH
22663: LD_INT 0
22665: ST_TO_ADDR
// sExchange := false ;
22666: LD_ADDR_EXP 113
22670: PUSH
22671: LD_INT 0
22673: ST_TO_ADDR
// sFac := false ;
22674: LD_ADDR_EXP 114
22678: PUSH
22679: LD_INT 0
22681: ST_TO_ADDR
// sPower := false ;
22682: LD_ADDR_EXP 115
22686: PUSH
22687: LD_INT 0
22689: ST_TO_ADDR
// sRandom := false ;
22690: LD_ADDR_EXP 116
22694: PUSH
22695: LD_INT 0
22697: ST_TO_ADDR
// sShield := false ;
22698: LD_ADDR_EXP 117
22702: PUSH
22703: LD_INT 0
22705: ST_TO_ADDR
// sTime := false ;
22706: LD_ADDR_EXP 118
22710: PUSH
22711: LD_INT 0
22713: ST_TO_ADDR
// sTools := false ;
22714: LD_ADDR_EXP 119
22718: PUSH
22719: LD_INT 0
22721: ST_TO_ADDR
// sSold := false ;
22722: LD_ADDR_EXP 84
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
// sDiff := false ;
22730: LD_ADDR_EXP 85
22734: PUSH
22735: LD_INT 0
22737: ST_TO_ADDR
// sFog := false ;
22738: LD_ADDR_EXP 88
22742: PUSH
22743: LD_INT 0
22745: ST_TO_ADDR
// sReset := false ;
22746: LD_ADDR_EXP 89
22750: PUSH
22751: LD_INT 0
22753: ST_TO_ADDR
// sSun := false ;
22754: LD_ADDR_EXP 90
22758: PUSH
22759: LD_INT 0
22761: ST_TO_ADDR
// sTiger := false ;
22762: LD_ADDR_EXP 86
22766: PUSH
22767: LD_INT 0
22769: ST_TO_ADDR
// sBomb := false ;
22770: LD_ADDR_EXP 87
22774: PUSH
22775: LD_INT 0
22777: ST_TO_ADDR
// sWound := false ;
22778: LD_ADDR_EXP 95
22782: PUSH
22783: LD_INT 0
22785: ST_TO_ADDR
// sBetray := false ;
22786: LD_ADDR_EXP 99
22790: PUSH
22791: LD_INT 0
22793: ST_TO_ADDR
// sContamin := false ;
22794: LD_ADDR_EXP 100
22798: PUSH
22799: LD_INT 0
22801: ST_TO_ADDR
// sOil := false ;
22802: LD_ADDR_EXP 102
22806: PUSH
22807: LD_INT 0
22809: ST_TO_ADDR
// sStu := false ;
22810: LD_ADDR_EXP 106
22814: PUSH
22815: LD_INT 0
22817: ST_TO_ADDR
// sBazooka := false ;
22818: LD_ADDR_EXP 109
22822: PUSH
22823: LD_INT 0
22825: ST_TO_ADDR
// sMortar := false ;
22826: LD_ADDR_EXP 110
22830: PUSH
22831: LD_INT 0
22833: ST_TO_ADDR
// sRanger := false ;
22834: LD_ADDR_EXP 120
22838: PUSH
22839: LD_INT 0
22841: ST_TO_ADDR
// sComputer := false ;
22842: LD_ADDR_EXP 121
22846: PUSH
22847: LD_INT 0
22849: ST_TO_ADDR
// s30 := false ;
22850: LD_ADDR_EXP 122
22854: PUSH
22855: LD_INT 0
22857: ST_TO_ADDR
// s60 := false ;
22858: LD_ADDR_EXP 123
22862: PUSH
22863: LD_INT 0
22865: ST_TO_ADDR
// end ;
22866: LD_VAR 0 1
22870: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22871: LD_INT 0
22873: PPUSH
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
// result := [ ] ;
22880: LD_ADDR_VAR 0 2
22884: PUSH
22885: EMPTY
22886: ST_TO_ADDR
// if campaign_id = 1 then
22887: LD_OWVAR 69
22891: PUSH
22892: LD_INT 1
22894: EQUAL
22895: IFFALSE 26061
// begin case mission_number of 1 :
22897: LD_OWVAR 70
22901: PUSH
22902: LD_INT 1
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22986
22910: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22911: LD_ADDR_VAR 0 2
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 4
22921: PUSH
22922: LD_INT 11
22924: PUSH
22925: LD_INT 12
22927: PUSH
22928: LD_INT 15
22930: PUSH
22931: LD_INT 16
22933: PUSH
22934: LD_INT 22
22936: PUSH
22937: LD_INT 23
22939: PUSH
22940: LD_INT 26
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 101
22956: PUSH
22957: LD_INT 102
22959: PUSH
22960: LD_INT 106
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: ST_TO_ADDR
22984: GO 26059
22986: LD_INT 2
22988: DOUBLE
22989: EQUAL
22990: IFTRUE 22994
22992: GO 23078
22994: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22995: LD_ADDR_VAR 0 2
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 4
23005: PUSH
23006: LD_INT 11
23008: PUSH
23009: LD_INT 12
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 22
23020: PUSH
23021: LD_INT 23
23023: PUSH
23024: LD_INT 26
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 101
23040: PUSH
23041: LD_INT 102
23043: PUSH
23044: LD_INT 105
23046: PUSH
23047: LD_INT 106
23049: PUSH
23050: LD_INT 108
23052: PUSH
23053: LD_INT 116
23055: PUSH
23056: LD_INT 117
23058: PUSH
23059: LD_INT 118
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: ST_TO_ADDR
23076: GO 26059
23078: LD_INT 3
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23174
23086: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23087: LD_ADDR_VAR 0 2
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 11
23103: PUSH
23104: LD_INT 12
23106: PUSH
23107: LD_INT 15
23109: PUSH
23110: LD_INT 16
23112: PUSH
23113: LD_INT 22
23115: PUSH
23116: LD_INT 26
23118: PUSH
23119: LD_INT 36
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 101
23136: PUSH
23137: LD_INT 102
23139: PUSH
23140: LD_INT 105
23142: PUSH
23143: LD_INT 106
23145: PUSH
23146: LD_INT 108
23148: PUSH
23149: LD_INT 116
23151: PUSH
23152: LD_INT 117
23154: PUSH
23155: LD_INT 118
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 26059
23174: LD_INT 4
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23278
23182: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: LD_INT 5
23196: PUSH
23197: LD_INT 8
23199: PUSH
23200: LD_INT 11
23202: PUSH
23203: LD_INT 12
23205: PUSH
23206: LD_INT 15
23208: PUSH
23209: LD_INT 16
23211: PUSH
23212: LD_INT 22
23214: PUSH
23215: LD_INT 23
23217: PUSH
23218: LD_INT 26
23220: PUSH
23221: LD_INT 36
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 101
23240: PUSH
23241: LD_INT 102
23243: PUSH
23244: LD_INT 105
23246: PUSH
23247: LD_INT 106
23249: PUSH
23250: LD_INT 108
23252: PUSH
23253: LD_INT 116
23255: PUSH
23256: LD_INT 117
23258: PUSH
23259: LD_INT 118
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: ST_TO_ADDR
23276: GO 26059
23278: LD_INT 5
23280: DOUBLE
23281: EQUAL
23282: IFTRUE 23286
23284: GO 23398
23286: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 4
23297: PUSH
23298: LD_INT 5
23300: PUSH
23301: LD_INT 6
23303: PUSH
23304: LD_INT 8
23306: PUSH
23307: LD_INT 11
23309: PUSH
23310: LD_INT 12
23312: PUSH
23313: LD_INT 15
23315: PUSH
23316: LD_INT 16
23318: PUSH
23319: LD_INT 22
23321: PUSH
23322: LD_INT 23
23324: PUSH
23325: LD_INT 25
23327: PUSH
23328: LD_INT 26
23330: PUSH
23331: LD_INT 36
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 101
23352: PUSH
23353: LD_INT 102
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 108
23364: PUSH
23365: LD_INT 109
23367: PUSH
23368: LD_INT 112
23370: PUSH
23371: LD_INT 116
23373: PUSH
23374: LD_INT 117
23376: PUSH
23377: LD_INT 118
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: ST_TO_ADDR
23396: GO 26059
23398: LD_INT 6
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23538
23406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23407: LD_ADDR_VAR 0 2
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: LD_INT 4
23417: PUSH
23418: LD_INT 5
23420: PUSH
23421: LD_INT 6
23423: PUSH
23424: LD_INT 8
23426: PUSH
23427: LD_INT 11
23429: PUSH
23430: LD_INT 12
23432: PUSH
23433: LD_INT 15
23435: PUSH
23436: LD_INT 16
23438: PUSH
23439: LD_INT 20
23441: PUSH
23442: LD_INT 21
23444: PUSH
23445: LD_INT 22
23447: PUSH
23448: LD_INT 23
23450: PUSH
23451: LD_INT 25
23453: PUSH
23454: LD_INT 26
23456: PUSH
23457: LD_INT 30
23459: PUSH
23460: LD_INT 31
23462: PUSH
23463: LD_INT 32
23465: PUSH
23466: LD_INT 36
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 101
23492: PUSH
23493: LD_INT 102
23495: PUSH
23496: LD_INT 105
23498: PUSH
23499: LD_INT 106
23501: PUSH
23502: LD_INT 108
23504: PUSH
23505: LD_INT 109
23507: PUSH
23508: LD_INT 112
23510: PUSH
23511: LD_INT 116
23513: PUSH
23514: LD_INT 117
23516: PUSH
23517: LD_INT 118
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: ST_TO_ADDR
23536: GO 26059
23538: LD_INT 7
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23658
23546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: LD_INT 4
23557: PUSH
23558: LD_INT 5
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 11
23566: PUSH
23567: LD_INT 12
23569: PUSH
23570: LD_INT 15
23572: PUSH
23573: LD_INT 16
23575: PUSH
23576: LD_INT 20
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 22
23584: PUSH
23585: LD_INT 23
23587: PUSH
23588: LD_INT 25
23590: PUSH
23591: LD_INT 26
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 101
23612: PUSH
23613: LD_INT 102
23615: PUSH
23616: LD_INT 103
23618: PUSH
23619: LD_INT 105
23621: PUSH
23622: LD_INT 106
23624: PUSH
23625: LD_INT 108
23627: PUSH
23628: LD_INT 112
23630: PUSH
23631: LD_INT 116
23633: PUSH
23634: LD_INT 117
23636: PUSH
23637: LD_INT 118
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: ST_TO_ADDR
23656: GO 26059
23658: LD_INT 8
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23806
23666: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: LD_INT 4
23677: PUSH
23678: LD_INT 5
23680: PUSH
23681: LD_INT 6
23683: PUSH
23684: LD_INT 7
23686: PUSH
23687: LD_INT 8
23689: PUSH
23690: LD_INT 11
23692: PUSH
23693: LD_INT 12
23695: PUSH
23696: LD_INT 15
23698: PUSH
23699: LD_INT 16
23701: PUSH
23702: LD_INT 20
23704: PUSH
23705: LD_INT 21
23707: PUSH
23708: LD_INT 22
23710: PUSH
23711: LD_INT 23
23713: PUSH
23714: LD_INT 25
23716: PUSH
23717: LD_INT 26
23719: PUSH
23720: LD_INT 30
23722: PUSH
23723: LD_INT 31
23725: PUSH
23726: LD_INT 32
23728: PUSH
23729: LD_INT 36
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 101
23756: PUSH
23757: LD_INT 102
23759: PUSH
23760: LD_INT 103
23762: PUSH
23763: LD_INT 105
23765: PUSH
23766: LD_INT 106
23768: PUSH
23769: LD_INT 108
23771: PUSH
23772: LD_INT 109
23774: PUSH
23775: LD_INT 112
23777: PUSH
23778: LD_INT 116
23780: PUSH
23781: LD_INT 117
23783: PUSH
23784: LD_INT 118
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: ST_TO_ADDR
23804: GO 26059
23806: LD_INT 9
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23962
23814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23815: LD_ADDR_VAR 0 2
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 4
23825: PUSH
23826: LD_INT 5
23828: PUSH
23829: LD_INT 6
23831: PUSH
23832: LD_INT 7
23834: PUSH
23835: LD_INT 8
23837: PUSH
23838: LD_INT 11
23840: PUSH
23841: LD_INT 12
23843: PUSH
23844: LD_INT 15
23846: PUSH
23847: LD_INT 16
23849: PUSH
23850: LD_INT 20
23852: PUSH
23853: LD_INT 21
23855: PUSH
23856: LD_INT 22
23858: PUSH
23859: LD_INT 23
23861: PUSH
23862: LD_INT 25
23864: PUSH
23865: LD_INT 26
23867: PUSH
23868: LD_INT 28
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 36
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 101
23908: PUSH
23909: LD_INT 102
23911: PUSH
23912: LD_INT 103
23914: PUSH
23915: LD_INT 105
23917: PUSH
23918: LD_INT 106
23920: PUSH
23921: LD_INT 108
23923: PUSH
23924: LD_INT 109
23926: PUSH
23927: LD_INT 112
23929: PUSH
23930: LD_INT 114
23932: PUSH
23933: LD_INT 116
23935: PUSH
23936: LD_INT 117
23938: PUSH
23939: LD_INT 118
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: ST_TO_ADDR
23960: GO 26059
23962: LD_INT 10
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 24166
23970: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23971: LD_ADDR_VAR 0 2
23975: PUSH
23976: LD_INT 2
23978: PUSH
23979: LD_INT 4
23981: PUSH
23982: LD_INT 5
23984: PUSH
23985: LD_INT 6
23987: PUSH
23988: LD_INT 7
23990: PUSH
23991: LD_INT 8
23993: PUSH
23994: LD_INT 9
23996: PUSH
23997: LD_INT 10
23999: PUSH
24000: LD_INT 11
24002: PUSH
24003: LD_INT 12
24005: PUSH
24006: LD_INT 13
24008: PUSH
24009: LD_INT 14
24011: PUSH
24012: LD_INT 15
24014: PUSH
24015: LD_INT 16
24017: PUSH
24018: LD_INT 17
24020: PUSH
24021: LD_INT 18
24023: PUSH
24024: LD_INT 19
24026: PUSH
24027: LD_INT 20
24029: PUSH
24030: LD_INT 21
24032: PUSH
24033: LD_INT 22
24035: PUSH
24036: LD_INT 23
24038: PUSH
24039: LD_INT 24
24041: PUSH
24042: LD_INT 25
24044: PUSH
24045: LD_INT 26
24047: PUSH
24048: LD_INT 28
24050: PUSH
24051: LD_INT 30
24053: PUSH
24054: LD_INT 31
24056: PUSH
24057: LD_INT 32
24059: PUSH
24060: LD_INT 36
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 101
24096: PUSH
24097: LD_INT 102
24099: PUSH
24100: LD_INT 103
24102: PUSH
24103: LD_INT 104
24105: PUSH
24106: LD_INT 105
24108: PUSH
24109: LD_INT 106
24111: PUSH
24112: LD_INT 107
24114: PUSH
24115: LD_INT 108
24117: PUSH
24118: LD_INT 109
24120: PUSH
24121: LD_INT 110
24123: PUSH
24124: LD_INT 111
24126: PUSH
24127: LD_INT 112
24129: PUSH
24130: LD_INT 114
24132: PUSH
24133: LD_INT 116
24135: PUSH
24136: LD_INT 117
24138: PUSH
24139: LD_INT 118
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: ST_TO_ADDR
24164: GO 26059
24166: LD_INT 11
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24378
24174: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24175: LD_ADDR_VAR 0 2
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: LD_INT 4
24188: PUSH
24189: LD_INT 5
24191: PUSH
24192: LD_INT 6
24194: PUSH
24195: LD_INT 7
24197: PUSH
24198: LD_INT 8
24200: PUSH
24201: LD_INT 9
24203: PUSH
24204: LD_INT 10
24206: PUSH
24207: LD_INT 11
24209: PUSH
24210: LD_INT 12
24212: PUSH
24213: LD_INT 13
24215: PUSH
24216: LD_INT 14
24218: PUSH
24219: LD_INT 15
24221: PUSH
24222: LD_INT 16
24224: PUSH
24225: LD_INT 17
24227: PUSH
24228: LD_INT 18
24230: PUSH
24231: LD_INT 19
24233: PUSH
24234: LD_INT 20
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 22
24242: PUSH
24243: LD_INT 23
24245: PUSH
24246: LD_INT 24
24248: PUSH
24249: LD_INT 25
24251: PUSH
24252: LD_INT 26
24254: PUSH
24255: LD_INT 28
24257: PUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 31
24263: PUSH
24264: LD_INT 32
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_INT 36
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 101
24308: PUSH
24309: LD_INT 102
24311: PUSH
24312: LD_INT 103
24314: PUSH
24315: LD_INT 104
24317: PUSH
24318: LD_INT 105
24320: PUSH
24321: LD_INT 106
24323: PUSH
24324: LD_INT 107
24326: PUSH
24327: LD_INT 108
24329: PUSH
24330: LD_INT 109
24332: PUSH
24333: LD_INT 110
24335: PUSH
24336: LD_INT 111
24338: PUSH
24339: LD_INT 112
24341: PUSH
24342: LD_INT 114
24344: PUSH
24345: LD_INT 116
24347: PUSH
24348: LD_INT 117
24350: PUSH
24351: LD_INT 118
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 26059
24378: LD_INT 12
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24606
24386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: LD_INT 3
24400: PUSH
24401: LD_INT 4
24403: PUSH
24404: LD_INT 5
24406: PUSH
24407: LD_INT 6
24409: PUSH
24410: LD_INT 7
24412: PUSH
24413: LD_INT 8
24415: PUSH
24416: LD_INT 9
24418: PUSH
24419: LD_INT 10
24421: PUSH
24422: LD_INT 11
24424: PUSH
24425: LD_INT 12
24427: PUSH
24428: LD_INT 13
24430: PUSH
24431: LD_INT 14
24433: PUSH
24434: LD_INT 15
24436: PUSH
24437: LD_INT 16
24439: PUSH
24440: LD_INT 17
24442: PUSH
24443: LD_INT 18
24445: PUSH
24446: LD_INT 19
24448: PUSH
24449: LD_INT 20
24451: PUSH
24452: LD_INT 21
24454: PUSH
24455: LD_INT 22
24457: PUSH
24458: LD_INT 23
24460: PUSH
24461: LD_INT 24
24463: PUSH
24464: LD_INT 25
24466: PUSH
24467: LD_INT 26
24469: PUSH
24470: LD_INT 27
24472: PUSH
24473: LD_INT 28
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: LD_INT 31
24481: PUSH
24482: LD_INT 32
24484: PUSH
24485: LD_INT 33
24487: PUSH
24488: LD_INT 34
24490: PUSH
24491: LD_INT 36
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 101
24532: PUSH
24533: LD_INT 102
24535: PUSH
24536: LD_INT 103
24538: PUSH
24539: LD_INT 104
24541: PUSH
24542: LD_INT 105
24544: PUSH
24545: LD_INT 106
24547: PUSH
24548: LD_INT 107
24550: PUSH
24551: LD_INT 108
24553: PUSH
24554: LD_INT 109
24556: PUSH
24557: LD_INT 110
24559: PUSH
24560: LD_INT 111
24562: PUSH
24563: LD_INT 112
24565: PUSH
24566: LD_INT 113
24568: PUSH
24569: LD_INT 114
24571: PUSH
24572: LD_INT 116
24574: PUSH
24575: LD_INT 117
24577: PUSH
24578: LD_INT 118
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: ST_TO_ADDR
24604: GO 26059
24606: LD_INT 13
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24614
24612: GO 24822
24614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24615: LD_ADDR_VAR 0 2
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 3
24628: PUSH
24629: LD_INT 4
24631: PUSH
24632: LD_INT 5
24634: PUSH
24635: LD_INT 8
24637: PUSH
24638: LD_INT 9
24640: PUSH
24641: LD_INT 10
24643: PUSH
24644: LD_INT 11
24646: PUSH
24647: LD_INT 12
24649: PUSH
24650: LD_INT 14
24652: PUSH
24653: LD_INT 15
24655: PUSH
24656: LD_INT 16
24658: PUSH
24659: LD_INT 17
24661: PUSH
24662: LD_INT 18
24664: PUSH
24665: LD_INT 19
24667: PUSH
24668: LD_INT 20
24670: PUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 22
24676: PUSH
24677: LD_INT 23
24679: PUSH
24680: LD_INT 24
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 26
24688: PUSH
24689: LD_INT 27
24691: PUSH
24692: LD_INT 28
24694: PUSH
24695: LD_INT 30
24697: PUSH
24698: LD_INT 31
24700: PUSH
24701: LD_INT 32
24703: PUSH
24704: LD_INT 33
24706: PUSH
24707: LD_INT 34
24709: PUSH
24710: LD_INT 36
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 101
24748: PUSH
24749: LD_INT 102
24751: PUSH
24752: LD_INT 103
24754: PUSH
24755: LD_INT 104
24757: PUSH
24758: LD_INT 105
24760: PUSH
24761: LD_INT 106
24763: PUSH
24764: LD_INT 107
24766: PUSH
24767: LD_INT 108
24769: PUSH
24770: LD_INT 109
24772: PUSH
24773: LD_INT 110
24775: PUSH
24776: LD_INT 111
24778: PUSH
24779: LD_INT 112
24781: PUSH
24782: LD_INT 113
24784: PUSH
24785: LD_INT 114
24787: PUSH
24788: LD_INT 116
24790: PUSH
24791: LD_INT 117
24793: PUSH
24794: LD_INT 118
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 26059
24822: LD_INT 14
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 25054
24830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: LD_INT 6
24853: PUSH
24854: LD_INT 7
24856: PUSH
24857: LD_INT 8
24859: PUSH
24860: LD_INT 9
24862: PUSH
24863: LD_INT 10
24865: PUSH
24866: LD_INT 11
24868: PUSH
24869: LD_INT 12
24871: PUSH
24872: LD_INT 13
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: LD_INT 15
24880: PUSH
24881: LD_INT 16
24883: PUSH
24884: LD_INT 17
24886: PUSH
24887: LD_INT 18
24889: PUSH
24890: LD_INT 19
24892: PUSH
24893: LD_INT 20
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_INT 23
24904: PUSH
24905: LD_INT 24
24907: PUSH
24908: LD_INT 25
24910: PUSH
24911: LD_INT 26
24913: PUSH
24914: LD_INT 27
24916: PUSH
24917: LD_INT 28
24919: PUSH
24920: LD_INT 29
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: LD_INT 31
24928: PUSH
24929: LD_INT 32
24931: PUSH
24932: LD_INT 33
24934: PUSH
24935: LD_INT 34
24937: PUSH
24938: LD_INT 36
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 101
24980: PUSH
24981: LD_INT 102
24983: PUSH
24984: LD_INT 103
24986: PUSH
24987: LD_INT 104
24989: PUSH
24990: LD_INT 105
24992: PUSH
24993: LD_INT 106
24995: PUSH
24996: LD_INT 107
24998: PUSH
24999: LD_INT 108
25001: PUSH
25002: LD_INT 109
25004: PUSH
25005: LD_INT 110
25007: PUSH
25008: LD_INT 111
25010: PUSH
25011: LD_INT 112
25013: PUSH
25014: LD_INT 113
25016: PUSH
25017: LD_INT 114
25019: PUSH
25020: LD_INT 116
25022: PUSH
25023: LD_INT 117
25025: PUSH
25026: LD_INT 118
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: ST_TO_ADDR
25052: GO 26059
25054: LD_INT 15
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25286
25062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25063: LD_ADDR_VAR 0 2
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: LD_INT 4
25079: PUSH
25080: LD_INT 5
25082: PUSH
25083: LD_INT 6
25085: PUSH
25086: LD_INT 7
25088: PUSH
25089: LD_INT 8
25091: PUSH
25092: LD_INT 9
25094: PUSH
25095: LD_INT 10
25097: PUSH
25098: LD_INT 11
25100: PUSH
25101: LD_INT 12
25103: PUSH
25104: LD_INT 13
25106: PUSH
25107: LD_INT 14
25109: PUSH
25110: LD_INT 15
25112: PUSH
25113: LD_INT 16
25115: PUSH
25116: LD_INT 17
25118: PUSH
25119: LD_INT 18
25121: PUSH
25122: LD_INT 19
25124: PUSH
25125: LD_INT 20
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 23
25136: PUSH
25137: LD_INT 24
25139: PUSH
25140: LD_INT 25
25142: PUSH
25143: LD_INT 26
25145: PUSH
25146: LD_INT 27
25148: PUSH
25149: LD_INT 28
25151: PUSH
25152: LD_INT 29
25154: PUSH
25155: LD_INT 30
25157: PUSH
25158: LD_INT 31
25160: PUSH
25161: LD_INT 32
25163: PUSH
25164: LD_INT 33
25166: PUSH
25167: LD_INT 34
25169: PUSH
25170: LD_INT 36
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 101
25212: PUSH
25213: LD_INT 102
25215: PUSH
25216: LD_INT 103
25218: PUSH
25219: LD_INT 104
25221: PUSH
25222: LD_INT 105
25224: PUSH
25225: LD_INT 106
25227: PUSH
25228: LD_INT 107
25230: PUSH
25231: LD_INT 108
25233: PUSH
25234: LD_INT 109
25236: PUSH
25237: LD_INT 110
25239: PUSH
25240: LD_INT 111
25242: PUSH
25243: LD_INT 112
25245: PUSH
25246: LD_INT 113
25248: PUSH
25249: LD_INT 114
25251: PUSH
25252: LD_INT 116
25254: PUSH
25255: LD_INT 117
25257: PUSH
25258: LD_INT 118
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 26059
25286: LD_INT 16
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25430
25294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25295: LD_ADDR_VAR 0 2
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 4
25305: PUSH
25306: LD_INT 5
25308: PUSH
25309: LD_INT 7
25311: PUSH
25312: LD_INT 11
25314: PUSH
25315: LD_INT 12
25317: PUSH
25318: LD_INT 15
25320: PUSH
25321: LD_INT 16
25323: PUSH
25324: LD_INT 20
25326: PUSH
25327: LD_INT 21
25329: PUSH
25330: LD_INT 22
25332: PUSH
25333: LD_INT 23
25335: PUSH
25336: LD_INT 25
25338: PUSH
25339: LD_INT 26
25341: PUSH
25342: LD_INT 30
25344: PUSH
25345: LD_INT 31
25347: PUSH
25348: LD_INT 32
25350: PUSH
25351: LD_INT 33
25353: PUSH
25354: LD_INT 34
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 101
25380: PUSH
25381: LD_INT 102
25383: PUSH
25384: LD_INT 103
25386: PUSH
25387: LD_INT 106
25389: PUSH
25390: LD_INT 108
25392: PUSH
25393: LD_INT 112
25395: PUSH
25396: LD_INT 113
25398: PUSH
25399: LD_INT 114
25401: PUSH
25402: LD_INT 116
25404: PUSH
25405: LD_INT 117
25407: PUSH
25408: LD_INT 118
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: ST_TO_ADDR
25428: GO 26059
25430: LD_INT 17
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25662
25438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25439: LD_ADDR_VAR 0 2
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: LD_INT 4
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: LD_INT 6
25461: PUSH
25462: LD_INT 7
25464: PUSH
25465: LD_INT 8
25467: PUSH
25468: LD_INT 9
25470: PUSH
25471: LD_INT 10
25473: PUSH
25474: LD_INT 11
25476: PUSH
25477: LD_INT 12
25479: PUSH
25480: LD_INT 13
25482: PUSH
25483: LD_INT 14
25485: PUSH
25486: LD_INT 15
25488: PUSH
25489: LD_INT 16
25491: PUSH
25492: LD_INT 17
25494: PUSH
25495: LD_INT 18
25497: PUSH
25498: LD_INT 19
25500: PUSH
25501: LD_INT 20
25503: PUSH
25504: LD_INT 21
25506: PUSH
25507: LD_INT 22
25509: PUSH
25510: LD_INT 23
25512: PUSH
25513: LD_INT 24
25515: PUSH
25516: LD_INT 25
25518: PUSH
25519: LD_INT 26
25521: PUSH
25522: LD_INT 27
25524: PUSH
25525: LD_INT 28
25527: PUSH
25528: LD_INT 29
25530: PUSH
25531: LD_INT 30
25533: PUSH
25534: LD_INT 31
25536: PUSH
25537: LD_INT 32
25539: PUSH
25540: LD_INT 33
25542: PUSH
25543: LD_INT 34
25545: PUSH
25546: LD_INT 36
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 101
25588: PUSH
25589: LD_INT 102
25591: PUSH
25592: LD_INT 103
25594: PUSH
25595: LD_INT 104
25597: PUSH
25598: LD_INT 105
25600: PUSH
25601: LD_INT 106
25603: PUSH
25604: LD_INT 107
25606: PUSH
25607: LD_INT 108
25609: PUSH
25610: LD_INT 109
25612: PUSH
25613: LD_INT 110
25615: PUSH
25616: LD_INT 111
25618: PUSH
25619: LD_INT 112
25621: PUSH
25622: LD_INT 113
25624: PUSH
25625: LD_INT 114
25627: PUSH
25628: LD_INT 116
25630: PUSH
25631: LD_INT 117
25633: PUSH
25634: LD_INT 118
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: ST_TO_ADDR
25660: GO 26059
25662: LD_INT 18
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25818
25670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25671: LD_ADDR_VAR 0 2
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 4
25681: PUSH
25682: LD_INT 5
25684: PUSH
25685: LD_INT 7
25687: PUSH
25688: LD_INT 11
25690: PUSH
25691: LD_INT 12
25693: PUSH
25694: LD_INT 15
25696: PUSH
25697: LD_INT 16
25699: PUSH
25700: LD_INT 20
25702: PUSH
25703: LD_INT 21
25705: PUSH
25706: LD_INT 22
25708: PUSH
25709: LD_INT 23
25711: PUSH
25712: LD_INT 25
25714: PUSH
25715: LD_INT 26
25717: PUSH
25718: LD_INT 30
25720: PUSH
25721: LD_INT 31
25723: PUSH
25724: LD_INT 32
25726: PUSH
25727: LD_INT 33
25729: PUSH
25730: LD_INT 34
25732: PUSH
25733: LD_INT 35
25735: PUSH
25736: LD_INT 36
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 101
25764: PUSH
25765: LD_INT 102
25767: PUSH
25768: LD_INT 103
25770: PUSH
25771: LD_INT 106
25773: PUSH
25774: LD_INT 108
25776: PUSH
25777: LD_INT 112
25779: PUSH
25780: LD_INT 113
25782: PUSH
25783: LD_INT 114
25785: PUSH
25786: LD_INT 115
25788: PUSH
25789: LD_INT 116
25791: PUSH
25792: LD_INT 117
25794: PUSH
25795: LD_INT 118
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: ST_TO_ADDR
25816: GO 26059
25818: LD_INT 19
25820: DOUBLE
25821: EQUAL
25822: IFTRUE 25826
25824: GO 26058
25826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 4
25843: PUSH
25844: LD_INT 5
25846: PUSH
25847: LD_INT 6
25849: PUSH
25850: LD_INT 7
25852: PUSH
25853: LD_INT 8
25855: PUSH
25856: LD_INT 9
25858: PUSH
25859: LD_INT 10
25861: PUSH
25862: LD_INT 11
25864: PUSH
25865: LD_INT 12
25867: PUSH
25868: LD_INT 13
25870: PUSH
25871: LD_INT 14
25873: PUSH
25874: LD_INT 15
25876: PUSH
25877: LD_INT 16
25879: PUSH
25880: LD_INT 17
25882: PUSH
25883: LD_INT 18
25885: PUSH
25886: LD_INT 19
25888: PUSH
25889: LD_INT 20
25891: PUSH
25892: LD_INT 21
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_INT 23
25900: PUSH
25901: LD_INT 24
25903: PUSH
25904: LD_INT 25
25906: PUSH
25907: LD_INT 26
25909: PUSH
25910: LD_INT 27
25912: PUSH
25913: LD_INT 28
25915: PUSH
25916: LD_INT 29
25918: PUSH
25919: LD_INT 30
25921: PUSH
25922: LD_INT 31
25924: PUSH
25925: LD_INT 32
25927: PUSH
25928: LD_INT 33
25930: PUSH
25931: LD_INT 34
25933: PUSH
25934: LD_INT 35
25936: PUSH
25937: LD_INT 36
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 101
25980: PUSH
25981: LD_INT 102
25983: PUSH
25984: LD_INT 103
25986: PUSH
25987: LD_INT 104
25989: PUSH
25990: LD_INT 105
25992: PUSH
25993: LD_INT 106
25995: PUSH
25996: LD_INT 107
25998: PUSH
25999: LD_INT 108
26001: PUSH
26002: LD_INT 109
26004: PUSH
26005: LD_INT 110
26007: PUSH
26008: LD_INT 111
26010: PUSH
26011: LD_INT 112
26013: PUSH
26014: LD_INT 113
26016: PUSH
26017: LD_INT 114
26019: PUSH
26020: LD_INT 115
26022: PUSH
26023: LD_INT 116
26025: PUSH
26026: LD_INT 117
26028: PUSH
26029: LD_INT 118
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: ST_TO_ADDR
26056: GO 26059
26058: POP
// end else
26059: GO 26290
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 4
26077: PUSH
26078: LD_INT 5
26080: PUSH
26081: LD_INT 6
26083: PUSH
26084: LD_INT 7
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: LD_INT 9
26092: PUSH
26093: LD_INT 10
26095: PUSH
26096: LD_INT 11
26098: PUSH
26099: LD_INT 12
26101: PUSH
26102: LD_INT 13
26104: PUSH
26105: LD_INT 14
26107: PUSH
26108: LD_INT 15
26110: PUSH
26111: LD_INT 16
26113: PUSH
26114: LD_INT 17
26116: PUSH
26117: LD_INT 18
26119: PUSH
26120: LD_INT 19
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: LD_INT 22
26131: PUSH
26132: LD_INT 23
26134: PUSH
26135: LD_INT 24
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 26
26143: PUSH
26144: LD_INT 27
26146: PUSH
26147: LD_INT 28
26149: PUSH
26150: LD_INT 29
26152: PUSH
26153: LD_INT 30
26155: PUSH
26156: LD_INT 31
26158: PUSH
26159: LD_INT 32
26161: PUSH
26162: LD_INT 33
26164: PUSH
26165: LD_INT 34
26167: PUSH
26168: LD_INT 35
26170: PUSH
26171: LD_INT 36
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 101
26214: PUSH
26215: LD_INT 102
26217: PUSH
26218: LD_INT 103
26220: PUSH
26221: LD_INT 104
26223: PUSH
26224: LD_INT 105
26226: PUSH
26227: LD_INT 106
26229: PUSH
26230: LD_INT 107
26232: PUSH
26233: LD_INT 108
26235: PUSH
26236: LD_INT 109
26238: PUSH
26239: LD_INT 110
26241: PUSH
26242: LD_INT 111
26244: PUSH
26245: LD_INT 112
26247: PUSH
26248: LD_INT 113
26250: PUSH
26251: LD_INT 114
26253: PUSH
26254: LD_INT 115
26256: PUSH
26257: LD_INT 116
26259: PUSH
26260: LD_INT 117
26262: PUSH
26263: LD_INT 118
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: ST_TO_ADDR
// if result then
26290: LD_VAR 0 2
26294: IFFALSE 27080
// begin normal :=  ;
26296: LD_ADDR_VAR 0 5
26300: PUSH
26301: LD_STRING 
26303: ST_TO_ADDR
// hardcore :=  ;
26304: LD_ADDR_VAR 0 6
26308: PUSH
26309: LD_STRING 
26311: ST_TO_ADDR
// active :=  ;
26312: LD_ADDR_VAR 0 7
26316: PUSH
26317: LD_STRING 
26319: ST_TO_ADDR
// for i = 1 to normalCounter do
26320: LD_ADDR_VAR 0 8
26324: PUSH
26325: DOUBLE
26326: LD_INT 1
26328: DEC
26329: ST_TO_ADDR
26330: LD_EXP 68
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26437
// begin tmp := 0 ;
26338: LD_ADDR_VAR 0 3
26342: PUSH
26343: LD_STRING 0
26345: ST_TO_ADDR
// if result [ 1 ] then
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 1
26353: ARRAY
26354: IFFALSE 26419
// if result [ 1 ] [ 1 ] = i then
26356: LD_VAR 0 2
26360: PUSH
26361: LD_INT 1
26363: ARRAY
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PUSH
26369: LD_VAR 0 8
26373: EQUAL
26374: IFFALSE 26419
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_INT 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_INT 1
26396: ARRAY
26397: PPUSH
26398: LD_INT 1
26400: PPUSH
26401: CALL_OW 3
26405: PPUSH
26406: CALL_OW 1
26410: ST_TO_ADDR
// tmp := 1 ;
26411: LD_ADDR_VAR 0 3
26415: PUSH
26416: LD_STRING 1
26418: ST_TO_ADDR
// end ; normal := normal & tmp ;
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: LD_VAR 0 5
26428: PUSH
26429: LD_VAR 0 3
26433: STR
26434: ST_TO_ADDR
// end ;
26435: GO 26335
26437: POP
26438: POP
// for i = 1 to hardcoreCounter do
26439: LD_ADDR_VAR 0 8
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_EXP 69
26453: PUSH
26454: FOR_TO
26455: IFFALSE 26560
// begin tmp := 0 ;
26457: LD_ADDR_VAR 0 3
26461: PUSH
26462: LD_STRING 0
26464: ST_TO_ADDR
// if result [ 2 ] then
26465: LD_VAR 0 2
26469: PUSH
26470: LD_INT 2
26472: ARRAY
26473: IFFALSE 26542
// if result [ 2 ] [ 1 ] = 100 + i then
26475: LD_VAR 0 2
26479: PUSH
26480: LD_INT 2
26482: ARRAY
26483: PUSH
26484: LD_INT 1
26486: ARRAY
26487: PUSH
26488: LD_INT 100
26490: PUSH
26491: LD_VAR 0 8
26495: PLUS
26496: EQUAL
26497: IFFALSE 26542
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_INT 2
26511: PPUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_INT 2
26519: ARRAY
26520: PPUSH
26521: LD_INT 1
26523: PPUSH
26524: CALL_OW 3
26528: PPUSH
26529: CALL_OW 1
26533: ST_TO_ADDR
// tmp := 1 ;
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_STRING 1
26541: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26542: LD_ADDR_VAR 0 6
26546: PUSH
26547: LD_VAR 0 6
26551: PUSH
26552: LD_VAR 0 3
26556: STR
26557: ST_TO_ADDR
// end ;
26558: GO 26454
26560: POP
26561: POP
// if isGameLoad then
26562: LD_VAR 0 1
26566: IFFALSE 27041
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26568: LD_ADDR_VAR 0 4
26572: PUSH
26573: LD_EXP 72
26577: PUSH
26578: LD_EXP 71
26582: PUSH
26583: LD_EXP 73
26587: PUSH
26588: LD_EXP 70
26592: PUSH
26593: LD_EXP 74
26597: PUSH
26598: LD_EXP 75
26602: PUSH
26603: LD_EXP 76
26607: PUSH
26608: LD_EXP 77
26612: PUSH
26613: LD_EXP 78
26617: PUSH
26618: LD_EXP 79
26622: PUSH
26623: LD_EXP 80
26627: PUSH
26628: LD_EXP 81
26632: PUSH
26633: LD_EXP 82
26637: PUSH
26638: LD_EXP 83
26642: PUSH
26643: LD_EXP 91
26647: PUSH
26648: LD_EXP 92
26652: PUSH
26653: LD_EXP 93
26657: PUSH
26658: LD_EXP 94
26662: PUSH
26663: LD_EXP 96
26667: PUSH
26668: LD_EXP 97
26672: PUSH
26673: LD_EXP 98
26677: PUSH
26678: LD_EXP 101
26682: PUSH
26683: LD_EXP 103
26687: PUSH
26688: LD_EXP 104
26692: PUSH
26693: LD_EXP 105
26697: PUSH
26698: LD_EXP 107
26702: PUSH
26703: LD_EXP 108
26707: PUSH
26708: LD_EXP 111
26712: PUSH
26713: LD_EXP 112
26717: PUSH
26718: LD_EXP 113
26722: PUSH
26723: LD_EXP 114
26727: PUSH
26728: LD_EXP 115
26732: PUSH
26733: LD_EXP 116
26737: PUSH
26738: LD_EXP 117
26742: PUSH
26743: LD_EXP 118
26747: PUSH
26748: LD_EXP 119
26752: PUSH
26753: LD_EXP 84
26757: PUSH
26758: LD_EXP 85
26762: PUSH
26763: LD_EXP 88
26767: PUSH
26768: LD_EXP 89
26772: PUSH
26773: LD_EXP 90
26777: PUSH
26778: LD_EXP 86
26782: PUSH
26783: LD_EXP 87
26787: PUSH
26788: LD_EXP 95
26792: PUSH
26793: LD_EXP 99
26797: PUSH
26798: LD_EXP 100
26802: PUSH
26803: LD_EXP 102
26807: PUSH
26808: LD_EXP 106
26812: PUSH
26813: LD_EXP 109
26817: PUSH
26818: LD_EXP 110
26822: PUSH
26823: LD_EXP 120
26827: PUSH
26828: LD_EXP 121
26832: PUSH
26833: LD_EXP 122
26837: PUSH
26838: LD_EXP 123
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: ST_TO_ADDR
// tmp :=  ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_STRING 
26906: ST_TO_ADDR
// for i = 1 to normalCounter do
26907: LD_ADDR_VAR 0 8
26911: PUSH
26912: DOUBLE
26913: LD_INT 1
26915: DEC
26916: ST_TO_ADDR
26917: LD_EXP 68
26921: PUSH
26922: FOR_TO
26923: IFFALSE 26959
// begin if flags [ i ] then
26925: LD_VAR 0 4
26929: PUSH
26930: LD_VAR 0 8
26934: ARRAY
26935: IFFALSE 26957
// tmp := tmp & i & ; ;
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_VAR 0 3
26946: PUSH
26947: LD_VAR 0 8
26951: STR
26952: PUSH
26953: LD_STRING ;
26955: STR
26956: ST_TO_ADDR
// end ;
26957: GO 26922
26959: POP
26960: POP
// for i = 1 to hardcoreCounter do
26961: LD_ADDR_VAR 0 8
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_EXP 69
26975: PUSH
26976: FOR_TO
26977: IFFALSE 27023
// begin if flags [ normalCounter + i ] then
26979: LD_VAR 0 4
26983: PUSH
26984: LD_EXP 68
26988: PUSH
26989: LD_VAR 0 8
26993: PLUS
26994: ARRAY
26995: IFFALSE 27021
// tmp := tmp & ( 100 + i ) & ; ;
26997: LD_ADDR_VAR 0 3
27001: PUSH
27002: LD_VAR 0 3
27006: PUSH
27007: LD_INT 100
27009: PUSH
27010: LD_VAR 0 8
27014: PLUS
27015: STR
27016: PUSH
27017: LD_STRING ;
27019: STR
27020: ST_TO_ADDR
// end ;
27021: GO 26976
27023: POP
27024: POP
// if tmp then
27025: LD_VAR 0 3
27029: IFFALSE 27041
// active := tmp ;
27031: LD_ADDR_VAR 0 7
27035: PUSH
27036: LD_VAR 0 3
27040: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27041: LD_STRING getStreamItemsFromMission("
27043: PUSH
27044: LD_VAR 0 5
27048: STR
27049: PUSH
27050: LD_STRING ","
27052: STR
27053: PUSH
27054: LD_VAR 0 6
27058: STR
27059: PUSH
27060: LD_STRING ","
27062: STR
27063: PUSH
27064: LD_VAR 0 7
27068: STR
27069: PUSH
27070: LD_STRING ")
27072: STR
27073: PPUSH
27074: CALL_OW 559
// end else
27078: GO 27087
// ToLua ( getStreamItemsFromMission("","","") ) ;
27080: LD_STRING getStreamItemsFromMission("","","")
27082: PPUSH
27083: CALL_OW 559
// end ;
27087: LD_VAR 0 2
27091: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27092: LD_EXP 67
27096: PUSH
27097: LD_EXP 72
27101: AND
27102: IFFALSE 27226
27104: GO 27106
27106: DISABLE
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
// begin enable ;
27111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27112: LD_ADDR_VAR 0 2
27116: PUSH
27117: LD_INT 22
27119: PUSH
27120: LD_OWVAR 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 34
27134: PUSH
27135: LD_INT 7
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 34
27144: PUSH
27145: LD_INT 45
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 34
27154: PUSH
27155: LD_INT 28
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 34
27164: PUSH
27165: LD_INT 47
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PPUSH
27183: CALL_OW 69
27187: ST_TO_ADDR
// if not tmp then
27188: LD_VAR 0 2
27192: NOT
27193: IFFALSE 27197
// exit ;
27195: GO 27226
// for i in tmp do
27197: LD_ADDR_VAR 0 1
27201: PUSH
27202: LD_VAR 0 2
27206: PUSH
27207: FOR_IN
27208: IFFALSE 27224
// begin SetLives ( i , 0 ) ;
27210: LD_VAR 0 1
27214: PPUSH
27215: LD_INT 0
27217: PPUSH
27218: CALL_OW 234
// end ;
27222: GO 27207
27224: POP
27225: POP
// end ;
27226: PPOPN 2
27228: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27229: LD_EXP 67
27233: PUSH
27234: LD_EXP 73
27238: AND
27239: IFFALSE 27323
27241: GO 27243
27243: DISABLE
27244: LD_INT 0
27246: PPUSH
27247: PPUSH
// begin enable ;
27248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27249: LD_ADDR_VAR 0 2
27253: PUSH
27254: LD_INT 22
27256: PUSH
27257: LD_OWVAR 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 32
27268: PUSH
27269: LD_INT 3
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PPUSH
27280: CALL_OW 69
27284: ST_TO_ADDR
// if not tmp then
27285: LD_VAR 0 2
27289: NOT
27290: IFFALSE 27294
// exit ;
27292: GO 27323
// for i in tmp do
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: FOR_IN
27305: IFFALSE 27321
// begin SetLives ( i , 0 ) ;
27307: LD_VAR 0 1
27311: PPUSH
27312: LD_INT 0
27314: PPUSH
27315: CALL_OW 234
// end ;
27319: GO 27304
27321: POP
27322: POP
// end ;
27323: PPOPN 2
27325: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27326: LD_EXP 67
27330: PUSH
27331: LD_EXP 70
27335: AND
27336: IFFALSE 27429
27338: GO 27340
27340: DISABLE
27341: LD_INT 0
27343: PPUSH
// begin enable ;
27344: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27345: LD_ADDR_VAR 0 1
27349: PUSH
27350: LD_INT 22
27352: PUSH
27353: LD_OWVAR 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 25
27367: PUSH
27368: LD_INT 5
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 25
27377: PUSH
27378: LD_INT 9
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 25
27387: PUSH
27388: LD_INT 8
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 69
27409: PUSH
27410: FOR_IN
27411: IFFALSE 27427
// begin SetClass ( i , 1 ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_INT 1
27420: PPUSH
27421: CALL_OW 336
// end ;
27425: GO 27410
27427: POP
27428: POP
// end ;
27429: PPOPN 1
27431: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27432: LD_EXP 67
27436: PUSH
27437: LD_EXP 71
27441: AND
27442: PUSH
27443: LD_OWVAR 65
27447: PUSH
27448: LD_INT 7
27450: LESS
27451: AND
27452: IFFALSE 27466
27454: GO 27456
27456: DISABLE
// begin enable ;
27457: ENABLE
// game_speed := 7 ;
27458: LD_ADDR_OWVAR 65
27462: PUSH
27463: LD_INT 7
27465: ST_TO_ADDR
// end ;
27466: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27467: LD_EXP 67
27471: PUSH
27472: LD_EXP 74
27476: AND
27477: IFFALSE 27679
27479: GO 27481
27481: DISABLE
27482: LD_INT 0
27484: PPUSH
27485: PPUSH
27486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_INT 81
27494: PUSH
27495: LD_OWVAR 2
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 21
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL_OW 69
27522: ST_TO_ADDR
// if not tmp then
27523: LD_VAR 0 3
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27679
// if tmp > 5 then
27532: LD_VAR 0 3
27536: PUSH
27537: LD_INT 5
27539: GREATER
27540: IFFALSE 27552
// k := 5 else
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_INT 5
27549: ST_TO_ADDR
27550: GO 27562
// k := tmp ;
27552: LD_ADDR_VAR 0 2
27556: PUSH
27557: LD_VAR 0 3
27561: ST_TO_ADDR
// for i := 1 to k do
27562: LD_ADDR_VAR 0 1
27566: PUSH
27567: DOUBLE
27568: LD_INT 1
27570: DEC
27571: ST_TO_ADDR
27572: LD_VAR 0 2
27576: PUSH
27577: FOR_TO
27578: IFFALSE 27677
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27580: LD_VAR 0 3
27584: PUSH
27585: LD_VAR 0 1
27589: ARRAY
27590: PPUSH
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 4
27598: MOD
27599: PUSH
27600: LD_INT 1
27602: PLUS
27603: PPUSH
27604: CALL_OW 259
27608: PUSH
27609: LD_INT 10
27611: LESS
27612: IFFALSE 27675
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 1
27623: ARRAY
27624: PPUSH
27625: LD_VAR 0 1
27629: PUSH
27630: LD_INT 4
27632: MOD
27633: PUSH
27634: LD_INT 1
27636: PLUS
27637: PPUSH
27638: LD_VAR 0 3
27642: PUSH
27643: LD_VAR 0 1
27647: ARRAY
27648: PPUSH
27649: LD_VAR 0 1
27653: PUSH
27654: LD_INT 4
27656: MOD
27657: PUSH
27658: LD_INT 1
27660: PLUS
27661: PPUSH
27662: CALL_OW 259
27666: PUSH
27667: LD_INT 1
27669: PLUS
27670: PPUSH
27671: CALL_OW 237
27675: GO 27577
27677: POP
27678: POP
// end ;
27679: PPOPN 3
27681: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27682: LD_EXP 67
27686: PUSH
27687: LD_EXP 75
27691: AND
27692: IFFALSE 27712
27694: GO 27696
27696: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27697: LD_INT 4
27699: PPUSH
27700: LD_OWVAR 2
27704: PPUSH
27705: LD_INT 0
27707: PPUSH
27708: CALL_OW 324
27712: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27713: LD_EXP 67
27717: PUSH
27718: LD_EXP 104
27722: AND
27723: IFFALSE 27743
27725: GO 27727
27727: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27728: LD_INT 19
27730: PPUSH
27731: LD_OWVAR 2
27735: PPUSH
27736: LD_INT 0
27738: PPUSH
27739: CALL_OW 324
27743: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27744: LD_EXP 67
27748: PUSH
27749: LD_EXP 76
27753: AND
27754: IFFALSE 27856
27756: GO 27758
27758: DISABLE
27759: LD_INT 0
27761: PPUSH
27762: PPUSH
// begin enable ;
27763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27764: LD_ADDR_VAR 0 2
27768: PUSH
27769: LD_INT 22
27771: PUSH
27772: LD_OWVAR 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 34
27786: PUSH
27787: LD_INT 11
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 34
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PPUSH
27813: CALL_OW 69
27817: ST_TO_ADDR
// if not tmp then
27818: LD_VAR 0 2
27822: NOT
27823: IFFALSE 27827
// exit ;
27825: GO 27856
// for i in tmp do
27827: LD_ADDR_VAR 0 1
27831: PUSH
27832: LD_VAR 0 2
27836: PUSH
27837: FOR_IN
27838: IFFALSE 27854
// begin SetLives ( i , 0 ) ;
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_INT 0
27847: PPUSH
27848: CALL_OW 234
// end ;
27852: GO 27837
27854: POP
27855: POP
// end ;
27856: PPOPN 2
27858: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27859: LD_EXP 67
27863: PUSH
27864: LD_EXP 77
27868: AND
27869: IFFALSE 27889
27871: GO 27873
27873: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27874: LD_INT 32
27876: PPUSH
27877: LD_OWVAR 2
27881: PPUSH
27882: LD_INT 0
27884: PPUSH
27885: CALL_OW 324
27889: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27890: LD_EXP 67
27894: PUSH
27895: LD_EXP 78
27899: AND
27900: IFFALSE 28081
27902: GO 27904
27904: DISABLE
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
27909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_INT 22
27917: PUSH
27918: LD_OWVAR 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 33
27929: PUSH
27930: LD_INT 3
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PPUSH
27941: CALL_OW 69
27945: ST_TO_ADDR
// if not tmp then
27946: LD_VAR 0 2
27950: NOT
27951: IFFALSE 27955
// exit ;
27953: GO 28081
// side := 0 ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 0
27962: ST_TO_ADDR
// for i := 1 to 8 do
27963: LD_ADDR_VAR 0 1
27967: PUSH
27968: DOUBLE
27969: LD_INT 1
27971: DEC
27972: ST_TO_ADDR
27973: LD_INT 8
27975: PUSH
27976: FOR_TO
27977: IFFALSE 28025
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27979: LD_OWVAR 2
27983: PUSH
27984: LD_VAR 0 1
27988: NONEQUAL
27989: PUSH
27990: LD_OWVAR 2
27994: PPUSH
27995: LD_VAR 0 1
27999: PPUSH
28000: CALL_OW 81
28004: PUSH
28005: LD_INT 2
28007: EQUAL
28008: AND
28009: IFFALSE 28023
// begin side := i ;
28011: LD_ADDR_VAR 0 3
28015: PUSH
28016: LD_VAR 0 1
28020: ST_TO_ADDR
// break ;
28021: GO 28025
// end ;
28023: GO 27976
28025: POP
28026: POP
// if not side then
28027: LD_VAR 0 3
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28081
// for i := 1 to tmp do
28036: LD_ADDR_VAR 0 1
28040: PUSH
28041: DOUBLE
28042: LD_INT 1
28044: DEC
28045: ST_TO_ADDR
28046: LD_VAR 0 2
28050: PUSH
28051: FOR_TO
28052: IFFALSE 28079
// if Prob ( 60 ) then
28054: LD_INT 60
28056: PPUSH
28057: CALL_OW 13
28061: IFFALSE 28077
// SetSide ( i , side ) ;
28063: LD_VAR 0 1
28067: PPUSH
28068: LD_VAR 0 3
28072: PPUSH
28073: CALL_OW 235
28077: GO 28051
28079: POP
28080: POP
// end ;
28081: PPOPN 3
28083: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28084: LD_EXP 67
28088: PUSH
28089: LD_EXP 80
28093: AND
28094: IFFALSE 28213
28096: GO 28098
28098: DISABLE
28099: LD_INT 0
28101: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_OWVAR 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 21
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 23
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: PPUSH
28151: CALL_OW 69
28155: PUSH
28156: FOR_IN
28157: IFFALSE 28211
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28159: LD_VAR 0 1
28163: PPUSH
28164: CALL_OW 257
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: LD_INT 4
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: IN
28187: IFFALSE 28209
// SetClass ( un , rand ( 1 , 4 ) ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_INT 4
28199: PPUSH
28200: CALL_OW 12
28204: PPUSH
28205: CALL_OW 336
28209: GO 28156
28211: POP
28212: POP
// end ;
28213: PPOPN 1
28215: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28216: LD_EXP 67
28220: PUSH
28221: LD_EXP 79
28225: AND
28226: IFFALSE 28305
28228: GO 28230
28230: DISABLE
28231: LD_INT 0
28233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28234: LD_ADDR_VAR 0 1
28238: PUSH
28239: LD_INT 22
28241: PUSH
28242: LD_OWVAR 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 21
28253: PUSH
28254: LD_INT 3
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 69
28269: ST_TO_ADDR
// if not tmp then
28270: LD_VAR 0 1
28274: NOT
28275: IFFALSE 28279
// exit ;
28277: GO 28305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28279: LD_VAR 0 1
28283: PUSH
28284: LD_INT 1
28286: PPUSH
28287: LD_VAR 0 1
28291: PPUSH
28292: CALL_OW 12
28296: ARRAY
28297: PPUSH
28298: LD_INT 100
28300: PPUSH
28301: CALL_OW 234
// end ;
28305: PPOPN 1
28307: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28308: LD_EXP 67
28312: PUSH
28313: LD_EXP 81
28317: AND
28318: IFFALSE 28416
28320: GO 28322
28322: DISABLE
28323: LD_INT 0
28325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_OWVAR 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 21
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 69
28361: ST_TO_ADDR
// if not tmp then
28362: LD_VAR 0 1
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28416
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28371: LD_VAR 0 1
28375: PUSH
28376: LD_INT 1
28378: PPUSH
28379: LD_VAR 0 1
28383: PPUSH
28384: CALL_OW 12
28388: ARRAY
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: LD_INT 4
28395: PPUSH
28396: CALL_OW 12
28400: PPUSH
28401: LD_INT 3000
28403: PPUSH
28404: LD_INT 9000
28406: PPUSH
28407: CALL_OW 12
28411: PPUSH
28412: CALL_OW 492
// end ;
28416: PPOPN 1
28418: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28419: LD_EXP 67
28423: PUSH
28424: LD_EXP 82
28428: AND
28429: IFFALSE 28449
28431: GO 28433
28433: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28434: LD_INT 1
28436: PPUSH
28437: LD_OWVAR 2
28441: PPUSH
28442: LD_INT 0
28444: PPUSH
28445: CALL_OW 324
28449: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28450: LD_EXP 67
28454: PUSH
28455: LD_EXP 83
28459: AND
28460: IFFALSE 28543
28462: GO 28464
28464: DISABLE
28465: LD_INT 0
28467: PPUSH
28468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28469: LD_ADDR_VAR 0 2
28473: PUSH
28474: LD_INT 22
28476: PUSH
28477: LD_OWVAR 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 21
28488: PUSH
28489: LD_INT 3
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: ST_TO_ADDR
// if not tmp then
28505: LD_VAR 0 2
28509: NOT
28510: IFFALSE 28514
// exit ;
28512: GO 28543
// for i in tmp do
28514: LD_ADDR_VAR 0 1
28518: PUSH
28519: LD_VAR 0 2
28523: PUSH
28524: FOR_IN
28525: IFFALSE 28541
// SetBLevel ( i , 10 ) ;
28527: LD_VAR 0 1
28531: PPUSH
28532: LD_INT 10
28534: PPUSH
28535: CALL_OW 241
28539: GO 28524
28541: POP
28542: POP
// end ;
28543: PPOPN 2
28545: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28546: LD_EXP 67
28550: PUSH
28551: LD_EXP 84
28555: AND
28556: IFFALSE 28667
28558: GO 28560
28560: DISABLE
28561: LD_INT 0
28563: PPUSH
28564: PPUSH
28565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 22
28573: PUSH
28574: LD_OWVAR 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 25
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 69
28601: ST_TO_ADDR
// if not tmp then
28602: LD_VAR 0 3
28606: NOT
28607: IFFALSE 28611
// exit ;
28609: GO 28667
// un := tmp [ rand ( 1 , tmp ) ] ;
28611: LD_ADDR_VAR 0 2
28615: PUSH
28616: LD_VAR 0 3
28620: PUSH
28621: LD_INT 1
28623: PPUSH
28624: LD_VAR 0 3
28628: PPUSH
28629: CALL_OW 12
28633: ARRAY
28634: ST_TO_ADDR
// if Crawls ( un ) then
28635: LD_VAR 0 2
28639: PPUSH
28640: CALL_OW 318
28644: IFFALSE 28655
// ComWalk ( un ) ;
28646: LD_VAR 0 2
28650: PPUSH
28651: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28655: LD_VAR 0 2
28659: PPUSH
28660: LD_INT 5
28662: PPUSH
28663: CALL_OW 336
// end ;
28667: PPOPN 3
28669: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28670: LD_EXP 67
28674: PUSH
28675: LD_EXP 85
28679: AND
28680: PUSH
28681: LD_OWVAR 67
28685: PUSH
28686: LD_INT 4
28688: LESS
28689: AND
28690: IFFALSE 28709
28692: GO 28694
28694: DISABLE
// begin Difficulty := Difficulty + 1 ;
28695: LD_ADDR_OWVAR 67
28699: PUSH
28700: LD_OWVAR 67
28704: PUSH
28705: LD_INT 1
28707: PLUS
28708: ST_TO_ADDR
// end ;
28709: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28710: LD_EXP 67
28714: PUSH
28715: LD_EXP 86
28719: AND
28720: IFFALSE 28823
28722: GO 28724
28724: DISABLE
28725: LD_INT 0
28727: PPUSH
// begin for i := 1 to 5 do
28728: LD_ADDR_VAR 0 1
28732: PUSH
28733: DOUBLE
28734: LD_INT 1
28736: DEC
28737: ST_TO_ADDR
28738: LD_INT 5
28740: PUSH
28741: FOR_TO
28742: IFFALSE 28821
// begin uc_nation := nation_nature ;
28744: LD_ADDR_OWVAR 21
28748: PUSH
28749: LD_INT 0
28751: ST_TO_ADDR
// uc_side := 0 ;
28752: LD_ADDR_OWVAR 20
28756: PUSH
28757: LD_INT 0
28759: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28760: LD_ADDR_OWVAR 29
28764: PUSH
28765: LD_INT 12
28767: PUSH
28768: LD_INT 12
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: ST_TO_ADDR
// hc_agressivity := 20 ;
28775: LD_ADDR_OWVAR 35
28779: PUSH
28780: LD_INT 20
28782: ST_TO_ADDR
// hc_class := class_tiger ;
28783: LD_ADDR_OWVAR 28
28787: PUSH
28788: LD_INT 14
28790: ST_TO_ADDR
// hc_gallery :=  ;
28791: LD_ADDR_OWVAR 33
28795: PUSH
28796: LD_STRING 
28798: ST_TO_ADDR
// hc_name :=  ;
28799: LD_ADDR_OWVAR 26
28803: PUSH
28804: LD_STRING 
28806: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28807: CALL_OW 44
28811: PPUSH
28812: LD_INT 0
28814: PPUSH
28815: CALL_OW 51
// end ;
28819: GO 28741
28821: POP
28822: POP
// end ;
28823: PPOPN 1
28825: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28826: LD_EXP 67
28830: PUSH
28831: LD_EXP 87
28835: AND
28836: IFFALSE 28845
28838: GO 28840
28840: DISABLE
// StreamSibBomb ;
28841: CALL 28846 0 0
28845: END
// export function StreamSibBomb ; var i , x , y ; begin
28846: LD_INT 0
28848: PPUSH
28849: PPUSH
28850: PPUSH
28851: PPUSH
// result := false ;
28852: LD_ADDR_VAR 0 1
28856: PUSH
28857: LD_INT 0
28859: ST_TO_ADDR
// for i := 1 to 16 do
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: DOUBLE
28866: LD_INT 1
28868: DEC
28869: ST_TO_ADDR
28870: LD_INT 16
28872: PUSH
28873: FOR_TO
28874: IFFALSE 29073
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_INT 10
28883: PUSH
28884: LD_INT 20
28886: PUSH
28887: LD_INT 30
28889: PUSH
28890: LD_INT 40
28892: PUSH
28893: LD_INT 50
28895: PUSH
28896: LD_INT 60
28898: PUSH
28899: LD_INT 70
28901: PUSH
28902: LD_INT 80
28904: PUSH
28905: LD_INT 90
28907: PUSH
28908: LD_INT 100
28910: PUSH
28911: LD_INT 110
28913: PUSH
28914: LD_INT 120
28916: PUSH
28917: LD_INT 130
28919: PUSH
28920: LD_INT 140
28922: PUSH
28923: LD_INT 150
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PPUSH
28946: LD_INT 15
28948: PPUSH
28949: CALL_OW 12
28953: ARRAY
28954: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_INT 10
28962: PUSH
28963: LD_INT 20
28965: PUSH
28966: LD_INT 30
28968: PUSH
28969: LD_INT 40
28971: PUSH
28972: LD_INT 50
28974: PUSH
28975: LD_INT 60
28977: PUSH
28978: LD_INT 70
28980: PUSH
28981: LD_INT 80
28983: PUSH
28984: LD_INT 90
28986: PUSH
28987: LD_INT 100
28989: PUSH
28990: LD_INT 110
28992: PUSH
28993: LD_INT 120
28995: PUSH
28996: LD_INT 130
28998: PUSH
28999: LD_INT 140
29001: PUSH
29002: LD_INT 150
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: PPUSH
29025: LD_INT 15
29027: PPUSH
29028: CALL_OW 12
29032: ARRAY
29033: ST_TO_ADDR
// if ValidHex ( x , y ) then
29034: LD_VAR 0 3
29038: PPUSH
29039: LD_VAR 0 4
29043: PPUSH
29044: CALL_OW 488
29048: IFFALSE 29071
// begin result := [ x , y ] ;
29050: LD_ADDR_VAR 0 1
29054: PUSH
29055: LD_VAR 0 3
29059: PUSH
29060: LD_VAR 0 4
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// break ;
29069: GO 29073
// end ; end ;
29071: GO 28873
29073: POP
29074: POP
// if result then
29075: LD_VAR 0 1
29079: IFFALSE 29139
// begin ToLua ( playSibBomb() ) ;
29081: LD_STRING playSibBomb()
29083: PPUSH
29084: CALL_OW 559
// wait ( 0 0$14 ) ;
29088: LD_INT 490
29090: PPUSH
29091: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29095: LD_VAR 0 1
29099: PUSH
29100: LD_INT 1
29102: ARRAY
29103: PPUSH
29104: LD_VAR 0 1
29108: PUSH
29109: LD_INT 2
29111: ARRAY
29112: PPUSH
29113: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29117: LD_VAR 0 1
29121: PUSH
29122: LD_INT 1
29124: ARRAY
29125: PPUSH
29126: LD_VAR 0 1
29130: PUSH
29131: LD_INT 2
29133: ARRAY
29134: PPUSH
29135: CALL_OW 429
// end ; end ;
29139: LD_VAR 0 1
29143: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29144: LD_EXP 67
29148: PUSH
29149: LD_EXP 89
29153: AND
29154: IFFALSE 29166
29156: GO 29158
29158: DISABLE
// YouLost (  ) ;
29159: LD_STRING 
29161: PPUSH
29162: CALL_OW 104
29166: END
// every 0 0$1 trigger StreamModeActive and sFog do
29167: LD_EXP 67
29171: PUSH
29172: LD_EXP 88
29176: AND
29177: IFFALSE 29191
29179: GO 29181
29181: DISABLE
// FogOff ( your_side ) ;
29182: LD_OWVAR 2
29186: PPUSH
29187: CALL_OW 344
29191: END
// every 0 0$1 trigger StreamModeActive and sSun do
29192: LD_EXP 67
29196: PUSH
29197: LD_EXP 90
29201: AND
29202: IFFALSE 29230
29204: GO 29206
29206: DISABLE
// begin solar_recharge_percent := 0 ;
29207: LD_ADDR_OWVAR 79
29211: PUSH
29212: LD_INT 0
29214: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29215: LD_INT 10500
29217: PPUSH
29218: CALL_OW 67
// solar_recharge_percent := 100 ;
29222: LD_ADDR_OWVAR 79
29226: PUSH
29227: LD_INT 100
29229: ST_TO_ADDR
// end ;
29230: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29231: LD_EXP 67
29235: PUSH
29236: LD_EXP 91
29240: AND
29241: IFFALSE 29480
29243: GO 29245
29245: DISABLE
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
29250: PPUSH
// begin tmp := [ ] ;
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: EMPTY
29257: ST_TO_ADDR
// for i := 1 to 6 do
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: DOUBLE
29264: LD_INT 1
29266: DEC
29267: ST_TO_ADDR
29268: LD_INT 6
29270: PUSH
29271: FOR_TO
29272: IFFALSE 29377
// begin uc_nation := nation_nature ;
29274: LD_ADDR_OWVAR 21
29278: PUSH
29279: LD_INT 0
29281: ST_TO_ADDR
// uc_side := 0 ;
29282: LD_ADDR_OWVAR 20
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29290: LD_ADDR_OWVAR 29
29294: PUSH
29295: LD_INT 12
29297: PUSH
29298: LD_INT 12
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// hc_agressivity := 20 ;
29305: LD_ADDR_OWVAR 35
29309: PUSH
29310: LD_INT 20
29312: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29313: LD_ADDR_OWVAR 28
29317: PUSH
29318: LD_INT 17
29320: ST_TO_ADDR
// hc_gallery :=  ;
29321: LD_ADDR_OWVAR 33
29325: PUSH
29326: LD_STRING 
29328: ST_TO_ADDR
// hc_name :=  ;
29329: LD_ADDR_OWVAR 26
29333: PUSH
29334: LD_STRING 
29336: ST_TO_ADDR
// un := CreateHuman ;
29337: LD_ADDR_VAR 0 2
29341: PUSH
29342: CALL_OW 44
29346: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29347: LD_VAR 0 2
29351: PPUSH
29352: LD_INT 1
29354: PPUSH
29355: CALL_OW 51
// tmp := tmp ^ un ;
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_VAR 0 3
29368: PUSH
29369: LD_VAR 0 2
29373: ADD
29374: ST_TO_ADDR
// end ;
29375: GO 29271
29377: POP
29378: POP
// repeat wait ( 0 0$1 ) ;
29379: LD_INT 35
29381: PPUSH
29382: CALL_OW 67
// for un in tmp do
29386: LD_ADDR_VAR 0 2
29390: PUSH
29391: LD_VAR 0 3
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29471
// begin if IsDead ( un ) then
29399: LD_VAR 0 2
29403: PPUSH
29404: CALL_OW 301
29408: IFFALSE 29428
// begin tmp := tmp diff un ;
29410: LD_ADDR_VAR 0 3
29414: PUSH
29415: LD_VAR 0 3
29419: PUSH
29420: LD_VAR 0 2
29424: DIFF
29425: ST_TO_ADDR
// continue ;
29426: GO 29396
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29428: LD_VAR 0 2
29432: PPUSH
29433: LD_INT 3
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PPUSH
29450: CALL_OW 69
29454: PPUSH
29455: LD_VAR 0 2
29459: PPUSH
29460: CALL_OW 74
29464: PPUSH
29465: CALL_OW 115
// end ;
29469: GO 29396
29471: POP
29472: POP
// until not tmp ;
29473: LD_VAR 0 3
29477: NOT
29478: IFFALSE 29379
// end ;
29480: PPOPN 3
29482: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29483: LD_EXP 67
29487: PUSH
29488: LD_EXP 92
29492: AND
29493: IFFALSE 29547
29495: GO 29497
29497: DISABLE
// begin ToLua ( displayTroll(); ) ;
29498: LD_STRING displayTroll();
29500: PPUSH
29501: CALL_OW 559
// wait ( 3 3$00 ) ;
29505: LD_INT 6300
29507: PPUSH
29508: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29512: LD_STRING hideTroll();
29514: PPUSH
29515: CALL_OW 559
// wait ( 1 1$00 ) ;
29519: LD_INT 2100
29521: PPUSH
29522: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29526: LD_STRING displayTroll();
29528: PPUSH
29529: CALL_OW 559
// wait ( 1 1$00 ) ;
29533: LD_INT 2100
29535: PPUSH
29536: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29540: LD_STRING hideTroll();
29542: PPUSH
29543: CALL_OW 559
// end ;
29547: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29548: LD_EXP 67
29552: PUSH
29553: LD_EXP 93
29557: AND
29558: IFFALSE 29621
29560: GO 29562
29562: DISABLE
29563: LD_INT 0
29565: PPUSH
// begin p := 0 ;
29566: LD_ADDR_VAR 0 1
29570: PUSH
29571: LD_INT 0
29573: ST_TO_ADDR
// repeat game_speed := 1 ;
29574: LD_ADDR_OWVAR 65
29578: PUSH
29579: LD_INT 1
29581: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29582: LD_INT 35
29584: PPUSH
29585: CALL_OW 67
// p := p + 1 ;
29589: LD_ADDR_VAR 0 1
29593: PUSH
29594: LD_VAR 0 1
29598: PUSH
29599: LD_INT 1
29601: PLUS
29602: ST_TO_ADDR
// until p >= 60 ;
29603: LD_VAR 0 1
29607: PUSH
29608: LD_INT 60
29610: GREATEREQUAL
29611: IFFALSE 29574
// game_speed := 4 ;
29613: LD_ADDR_OWVAR 65
29617: PUSH
29618: LD_INT 4
29620: ST_TO_ADDR
// end ;
29621: PPOPN 1
29623: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29624: LD_EXP 67
29628: PUSH
29629: LD_EXP 94
29633: AND
29634: IFFALSE 29780
29636: GO 29638
29638: DISABLE
29639: LD_INT 0
29641: PPUSH
29642: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29643: LD_ADDR_VAR 0 1
29647: PUSH
29648: LD_INT 22
29650: PUSH
29651: LD_OWVAR 2
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 69
29696: ST_TO_ADDR
// if not depot then
29697: LD_VAR 0 1
29701: NOT
29702: IFFALSE 29706
// exit ;
29704: GO 29780
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29706: LD_ADDR_VAR 0 2
29710: PUSH
29711: LD_VAR 0 1
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 12
29728: ARRAY
29729: PPUSH
29730: CALL_OW 274
29734: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29735: LD_VAR 0 2
29739: PPUSH
29740: LD_INT 1
29742: PPUSH
29743: LD_INT 0
29745: PPUSH
29746: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29750: LD_VAR 0 2
29754: PPUSH
29755: LD_INT 2
29757: PPUSH
29758: LD_INT 0
29760: PPUSH
29761: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29765: LD_VAR 0 2
29769: PPUSH
29770: LD_INT 3
29772: PPUSH
29773: LD_INT 0
29775: PPUSH
29776: CALL_OW 277
// end ;
29780: PPOPN 2
29782: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29783: LD_EXP 67
29787: PUSH
29788: LD_EXP 95
29792: AND
29793: IFFALSE 29890
29795: GO 29797
29797: DISABLE
29798: LD_INT 0
29800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29801: LD_ADDR_VAR 0 1
29805: PUSH
29806: LD_INT 22
29808: PUSH
29809: LD_OWVAR 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 23
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: PPUSH
29850: CALL_OW 69
29854: ST_TO_ADDR
// if not tmp then
29855: LD_VAR 0 1
29859: NOT
29860: IFFALSE 29864
// exit ;
29862: GO 29890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29864: LD_VAR 0 1
29868: PUSH
29869: LD_INT 1
29871: PPUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL_OW 12
29881: ARRAY
29882: PPUSH
29883: LD_INT 200
29885: PPUSH
29886: CALL_OW 234
// end ;
29890: PPOPN 1
29892: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29893: LD_EXP 67
29897: PUSH
29898: LD_EXP 96
29902: AND
29903: IFFALSE 29982
29905: GO 29907
29907: DISABLE
29908: LD_INT 0
29910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29911: LD_ADDR_VAR 0 1
29915: PUSH
29916: LD_INT 22
29918: PUSH
29919: LD_OWVAR 2
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 21
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PPUSH
29942: CALL_OW 69
29946: ST_TO_ADDR
// if not tmp then
29947: LD_VAR 0 1
29951: NOT
29952: IFFALSE 29956
// exit ;
29954: GO 29982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 1
29963: PPUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 12
29973: ARRAY
29974: PPUSH
29975: LD_INT 60
29977: PPUSH
29978: CALL_OW 234
// end ;
29982: PPOPN 1
29984: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29985: LD_EXP 67
29989: PUSH
29990: LD_EXP 97
29994: AND
29995: IFFALSE 30094
29997: GO 29999
29999: DISABLE
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
// begin enable ;
30004: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30005: LD_ADDR_VAR 0 1
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_OWVAR 2
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 61
30024: PUSH
30025: EMPTY
30026: LIST
30027: PUSH
30028: LD_INT 33
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: ST_TO_ADDR
// if not tmp then
30048: LD_VAR 0 1
30052: NOT
30053: IFFALSE 30057
// exit ;
30055: GO 30094
// for i in tmp do
30057: LD_ADDR_VAR 0 2
30061: PUSH
30062: LD_VAR 0 1
30066: PUSH
30067: FOR_IN
30068: IFFALSE 30092
// if IsControledBy ( i ) then
30070: LD_VAR 0 2
30074: PPUSH
30075: CALL_OW 312
30079: IFFALSE 30090
// ComUnlink ( i ) ;
30081: LD_VAR 0 2
30085: PPUSH
30086: CALL_OW 136
30090: GO 30067
30092: POP
30093: POP
// end ;
30094: PPOPN 2
30096: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30097: LD_EXP 67
30101: PUSH
30102: LD_EXP 98
30106: AND
30107: IFFALSE 30247
30109: GO 30111
30111: DISABLE
30112: LD_INT 0
30114: PPUSH
30115: PPUSH
// begin ToLua ( displayPowell(); ) ;
30116: LD_STRING displayPowell();
30118: PPUSH
30119: CALL_OW 559
// uc_side := 0 ;
30123: LD_ADDR_OWVAR 20
30127: PUSH
30128: LD_INT 0
30130: ST_TO_ADDR
// uc_nation := 2 ;
30131: LD_ADDR_OWVAR 21
30135: PUSH
30136: LD_INT 2
30138: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30139: LD_ADDR_OWVAR 37
30143: PUSH
30144: LD_INT 14
30146: ST_TO_ADDR
// vc_engine := engine_siberite ;
30147: LD_ADDR_OWVAR 39
30151: PUSH
30152: LD_INT 3
30154: ST_TO_ADDR
// vc_control := control_apeman ;
30155: LD_ADDR_OWVAR 38
30159: PUSH
30160: LD_INT 5
30162: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30163: LD_ADDR_OWVAR 40
30167: PUSH
30168: LD_INT 29
30170: ST_TO_ADDR
// un := CreateVehicle ;
30171: LD_ADDR_VAR 0 2
30175: PUSH
30176: CALL_OW 45
30180: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_INT 1
30188: PPUSH
30189: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30193: LD_INT 35
30195: PPUSH
30196: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30200: LD_VAR 0 2
30204: PPUSH
30205: LD_INT 22
30207: PUSH
30208: LD_OWVAR 2
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PPUSH
30217: CALL_OW 69
30221: PPUSH
30222: LD_VAR 0 2
30226: PPUSH
30227: CALL_OW 74
30231: PPUSH
30232: CALL_OW 115
// until IsDead ( un ) ;
30236: LD_VAR 0 2
30240: PPUSH
30241: CALL_OW 301
30245: IFFALSE 30193
// end ;
30247: PPOPN 2
30249: END
// every 0 0$1 trigger StreamModeActive and sStu do
30250: LD_EXP 67
30254: PUSH
30255: LD_EXP 106
30259: AND
30260: IFFALSE 30276
30262: GO 30264
30264: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30265: LD_STRING displayStucuk();
30267: PPUSH
30268: CALL_OW 559
// ResetFog ;
30272: CALL_OW 335
// end ;
30276: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30277: LD_EXP 67
30281: PUSH
30282: LD_EXP 99
30286: AND
30287: IFFALSE 30428
30289: GO 30291
30291: DISABLE
30292: LD_INT 0
30294: PPUSH
30295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30296: LD_ADDR_VAR 0 2
30300: PUSH
30301: LD_INT 22
30303: PUSH
30304: LD_OWVAR 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 21
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PPUSH
30327: CALL_OW 69
30331: ST_TO_ADDR
// if not tmp then
30332: LD_VAR 0 2
30336: NOT
30337: IFFALSE 30341
// exit ;
30339: GO 30428
// un := tmp [ rand ( 1 , tmp ) ] ;
30341: LD_ADDR_VAR 0 1
30345: PUSH
30346: LD_VAR 0 2
30350: PUSH
30351: LD_INT 1
30353: PPUSH
30354: LD_VAR 0 2
30358: PPUSH
30359: CALL_OW 12
30363: ARRAY
30364: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30365: LD_VAR 0 1
30369: PPUSH
30370: LD_INT 0
30372: PPUSH
30373: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30377: LD_VAR 0 1
30381: PPUSH
30382: LD_OWVAR 3
30386: PUSH
30387: LD_VAR 0 1
30391: DIFF
30392: PPUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 74
30402: PPUSH
30403: CALL_OW 115
// wait ( 0 0$20 ) ;
30407: LD_INT 700
30409: PPUSH
30410: CALL_OW 67
// SetSide ( un , your_side ) ;
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_OWVAR 2
30423: PPUSH
30424: CALL_OW 235
// end ;
30428: PPOPN 2
30430: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30431: LD_EXP 67
30435: PUSH
30436: LD_EXP 100
30440: AND
30441: IFFALSE 30547
30443: GO 30445
30445: DISABLE
30446: LD_INT 0
30448: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30449: LD_ADDR_VAR 0 1
30453: PUSH
30454: LD_INT 22
30456: PUSH
30457: LD_OWVAR 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 30
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 69
30502: ST_TO_ADDR
// if not depot then
30503: LD_VAR 0 1
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30547
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30512: LD_VAR 0 1
30516: PUSH
30517: LD_INT 1
30519: ARRAY
30520: PPUSH
30521: CALL_OW 250
30525: PPUSH
30526: LD_VAR 0 1
30530: PUSH
30531: LD_INT 1
30533: ARRAY
30534: PPUSH
30535: CALL_OW 251
30539: PPUSH
30540: LD_INT 70
30542: PPUSH
30543: CALL_OW 495
// end ;
30547: PPOPN 1
30549: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30550: LD_EXP 67
30554: PUSH
30555: LD_EXP 101
30559: AND
30560: IFFALSE 30771
30562: GO 30564
30564: DISABLE
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_INT 22
30579: PUSH
30580: LD_OWVAR 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 21
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PPUSH
30603: CALL_OW 69
30607: ST_TO_ADDR
// if not tmp then
30608: LD_VAR 0 5
30612: NOT
30613: IFFALSE 30617
// exit ;
30615: GO 30771
// for i in tmp do
30617: LD_ADDR_VAR 0 1
30621: PUSH
30622: LD_VAR 0 5
30626: PUSH
30627: FOR_IN
30628: IFFALSE 30769
// begin d := rand ( 0 , 5 ) ;
30630: LD_ADDR_VAR 0 4
30634: PUSH
30635: LD_INT 0
30637: PPUSH
30638: LD_INT 5
30640: PPUSH
30641: CALL_OW 12
30645: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30646: LD_ADDR_VAR 0 2
30650: PUSH
30651: LD_VAR 0 1
30655: PPUSH
30656: CALL_OW 250
30660: PPUSH
30661: LD_VAR 0 4
30665: PPUSH
30666: LD_INT 3
30668: PPUSH
30669: LD_INT 12
30671: PPUSH
30672: CALL_OW 12
30676: PPUSH
30677: CALL_OW 272
30681: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: LD_VAR 0 1
30691: PPUSH
30692: CALL_OW 251
30696: PPUSH
30697: LD_VAR 0 4
30701: PPUSH
30702: LD_INT 3
30704: PPUSH
30705: LD_INT 12
30707: PPUSH
30708: CALL_OW 12
30712: PPUSH
30713: CALL_OW 273
30717: ST_TO_ADDR
// if ValidHex ( x , y ) then
30718: LD_VAR 0 2
30722: PPUSH
30723: LD_VAR 0 3
30727: PPUSH
30728: CALL_OW 488
30732: IFFALSE 30767
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30734: LD_VAR 0 1
30738: PPUSH
30739: LD_VAR 0 2
30743: PPUSH
30744: LD_VAR 0 3
30748: PPUSH
30749: LD_INT 3
30751: PPUSH
30752: LD_INT 6
30754: PPUSH
30755: CALL_OW 12
30759: PPUSH
30760: LD_INT 1
30762: PPUSH
30763: CALL_OW 483
// end ;
30767: GO 30627
30769: POP
30770: POP
// end ;
30771: PPOPN 5
30773: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30774: LD_EXP 67
30778: PUSH
30779: LD_EXP 102
30783: AND
30784: IFFALSE 30878
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
30792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30793: LD_ADDR_VAR 0 2
30797: PUSH
30798: LD_INT 22
30800: PUSH
30801: LD_OWVAR 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 32
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 21
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: PPUSH
30835: CALL_OW 69
30839: ST_TO_ADDR
// if not tmp then
30840: LD_VAR 0 2
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 30878
// for i in tmp do
30849: LD_ADDR_VAR 0 1
30853: PUSH
30854: LD_VAR 0 2
30858: PUSH
30859: FOR_IN
30860: IFFALSE 30876
// SetFuel ( i , 0 ) ;
30862: LD_VAR 0 1
30866: PPUSH
30867: LD_INT 0
30869: PPUSH
30870: CALL_OW 240
30874: GO 30859
30876: POP
30877: POP
// end ;
30878: PPOPN 2
30880: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30881: LD_EXP 67
30885: PUSH
30886: LD_EXP 103
30890: AND
30891: IFFALSE 30957
30893: GO 30895
30895: DISABLE
30896: LD_INT 0
30898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30899: LD_ADDR_VAR 0 1
30903: PUSH
30904: LD_INT 22
30906: PUSH
30907: LD_OWVAR 2
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 30
30918: PUSH
30919: LD_INT 29
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: ST_TO_ADDR
// if not tmp then
30935: LD_VAR 0 1
30939: NOT
30940: IFFALSE 30944
// exit ;
30942: GO 30957
// DestroyUnit ( tmp [ 1 ] ) ;
30944: LD_VAR 0 1
30948: PUSH
30949: LD_INT 1
30951: ARRAY
30952: PPUSH
30953: CALL_OW 65
// end ;
30957: PPOPN 1
30959: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30960: LD_EXP 67
30964: PUSH
30965: LD_EXP 105
30969: AND
30970: IFFALSE 31099
30972: GO 30974
30974: DISABLE
30975: LD_INT 0
30977: PPUSH
// begin uc_side := 0 ;
30978: LD_ADDR_OWVAR 20
30982: PUSH
30983: LD_INT 0
30985: ST_TO_ADDR
// uc_nation := nation_arabian ;
30986: LD_ADDR_OWVAR 21
30990: PUSH
30991: LD_INT 2
30993: ST_TO_ADDR
// hc_gallery :=  ;
30994: LD_ADDR_OWVAR 33
30998: PUSH
30999: LD_STRING 
31001: ST_TO_ADDR
// hc_name :=  ;
31002: LD_ADDR_OWVAR 26
31006: PUSH
31007: LD_STRING 
31009: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31010: LD_INT 1
31012: PPUSH
31013: LD_INT 11
31015: PPUSH
31016: LD_INT 10
31018: PPUSH
31019: CALL_OW 380
// un := CreateHuman ;
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: CALL_OW 44
31032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_INT 1
31040: PPUSH
31041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31045: LD_INT 35
31047: PPUSH
31048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31052: LD_VAR 0 1
31056: PPUSH
31057: LD_INT 22
31059: PUSH
31060: LD_OWVAR 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL_OW 69
31073: PPUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 74
31083: PPUSH
31084: CALL_OW 115
// until IsDead ( un ) ;
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 301
31097: IFFALSE 31045
// end ;
31099: PPOPN 1
31101: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31102: LD_EXP 67
31106: PUSH
31107: LD_EXP 107
31111: AND
31112: IFFALSE 31124
31114: GO 31116
31116: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31117: LD_STRING earthquake(getX(game), 0, 32)
31119: PPUSH
31120: CALL_OW 559
31124: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31125: LD_EXP 67
31129: PUSH
31130: LD_EXP 108
31134: AND
31135: IFFALSE 31226
31137: GO 31139
31139: DISABLE
31140: LD_INT 0
31142: PPUSH
// begin enable ;
31143: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31144: LD_ADDR_VAR 0 1
31148: PUSH
31149: LD_INT 22
31151: PUSH
31152: LD_OWVAR 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 21
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 33
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: PPUSH
31186: CALL_OW 69
31190: ST_TO_ADDR
// if not tmp then
31191: LD_VAR 0 1
31195: NOT
31196: IFFALSE 31200
// exit ;
31198: GO 31226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31200: LD_VAR 0 1
31204: PUSH
31205: LD_INT 1
31207: PPUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 12
31217: ARRAY
31218: PPUSH
31219: LD_INT 1
31221: PPUSH
31222: CALL_OW 234
// end ;
31226: PPOPN 1
31228: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31229: LD_EXP 67
31233: PUSH
31234: LD_EXP 109
31238: AND
31239: IFFALSE 31380
31241: GO 31243
31243: DISABLE
31244: LD_INT 0
31246: PPUSH
31247: PPUSH
31248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31249: LD_ADDR_VAR 0 3
31253: PUSH
31254: LD_INT 22
31256: PUSH
31257: LD_OWVAR 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 25
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: ST_TO_ADDR
// if not tmp then
31285: LD_VAR 0 3
31289: NOT
31290: IFFALSE 31294
// exit ;
31292: GO 31380
// un := tmp [ rand ( 1 , tmp ) ] ;
31294: LD_ADDR_VAR 0 2
31298: PUSH
31299: LD_VAR 0 3
31303: PUSH
31304: LD_INT 1
31306: PPUSH
31307: LD_VAR 0 3
31311: PPUSH
31312: CALL_OW 12
31316: ARRAY
31317: ST_TO_ADDR
// if Crawls ( un ) then
31318: LD_VAR 0 2
31322: PPUSH
31323: CALL_OW 318
31327: IFFALSE 31338
// ComWalk ( un ) ;
31329: LD_VAR 0 2
31333: PPUSH
31334: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31338: LD_VAR 0 2
31342: PPUSH
31343: LD_INT 9
31345: PPUSH
31346: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31350: LD_INT 28
31352: PPUSH
31353: LD_OWVAR 2
31357: PPUSH
31358: LD_INT 2
31360: PPUSH
31361: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31365: LD_INT 29
31367: PPUSH
31368: LD_OWVAR 2
31372: PPUSH
31373: LD_INT 2
31375: PPUSH
31376: CALL_OW 322
// end ;
31380: PPOPN 3
31382: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31383: LD_EXP 67
31387: PUSH
31388: LD_EXP 110
31392: AND
31393: IFFALSE 31504
31395: GO 31397
31397: DISABLE
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
31402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 22
31410: PUSH
31411: LD_OWVAR 2
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 25
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 69
31438: ST_TO_ADDR
// if not tmp then
31439: LD_VAR 0 3
31443: NOT
31444: IFFALSE 31448
// exit ;
31446: GO 31504
// un := tmp [ rand ( 1 , tmp ) ] ;
31448: LD_ADDR_VAR 0 2
31452: PUSH
31453: LD_VAR 0 3
31457: PUSH
31458: LD_INT 1
31460: PPUSH
31461: LD_VAR 0 3
31465: PPUSH
31466: CALL_OW 12
31470: ARRAY
31471: ST_TO_ADDR
// if Crawls ( un ) then
31472: LD_VAR 0 2
31476: PPUSH
31477: CALL_OW 318
31481: IFFALSE 31492
// ComWalk ( un ) ;
31483: LD_VAR 0 2
31487: PPUSH
31488: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31492: LD_VAR 0 2
31496: PPUSH
31497: LD_INT 8
31499: PPUSH
31500: CALL_OW 336
// end ;
31504: PPOPN 3
31506: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31507: LD_EXP 67
31511: PUSH
31512: LD_EXP 111
31516: AND
31517: IFFALSE 31661
31519: GO 31521
31521: DISABLE
31522: LD_INT 0
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 22
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: LD_INT 34
31558: PUSH
31559: LD_INT 12
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 34
31568: PUSH
31569: LD_INT 51
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 34
31578: PUSH
31579: LD_INT 32
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 2
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31661
// for i in tmp do
31611: LD_ADDR_VAR 0 1
31615: PUSH
31616: LD_VAR 0 2
31620: PUSH
31621: FOR_IN
31622: IFFALSE 31659
// if GetCargo ( i , mat_artifact ) = 0 then
31624: LD_VAR 0 1
31628: PPUSH
31629: LD_INT 4
31631: PPUSH
31632: CALL_OW 289
31636: PUSH
31637: LD_INT 0
31639: EQUAL
31640: IFFALSE 31657
// SetCargo ( i , mat_siberit , 100 ) ;
31642: LD_VAR 0 1
31646: PPUSH
31647: LD_INT 3
31649: PPUSH
31650: LD_INT 100
31652: PPUSH
31653: CALL_OW 290
31657: GO 31621
31659: POP
31660: POP
// end ;
31661: PPOPN 2
31663: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31664: LD_EXP 67
31668: PUSH
31669: LD_EXP 112
31673: AND
31674: IFFALSE 31857
31676: GO 31678
31678: DISABLE
31679: LD_INT 0
31681: PPUSH
31682: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31683: LD_ADDR_VAR 0 2
31687: PUSH
31688: LD_INT 22
31690: PUSH
31691: LD_OWVAR 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PPUSH
31700: CALL_OW 69
31704: ST_TO_ADDR
// if not tmp then
31705: LD_VAR 0 2
31709: NOT
31710: IFFALSE 31714
// exit ;
31712: GO 31857
// for i := 1 to 2 do
31714: LD_ADDR_VAR 0 1
31718: PUSH
31719: DOUBLE
31720: LD_INT 1
31722: DEC
31723: ST_TO_ADDR
31724: LD_INT 2
31726: PUSH
31727: FOR_TO
31728: IFFALSE 31855
// begin uc_side := your_side ;
31730: LD_ADDR_OWVAR 20
31734: PUSH
31735: LD_OWVAR 2
31739: ST_TO_ADDR
// uc_nation := nation_american ;
31740: LD_ADDR_OWVAR 21
31744: PUSH
31745: LD_INT 1
31747: ST_TO_ADDR
// vc_chassis := us_morphling ;
31748: LD_ADDR_OWVAR 37
31752: PUSH
31753: LD_INT 5
31755: ST_TO_ADDR
// vc_engine := engine_siberite ;
31756: LD_ADDR_OWVAR 39
31760: PUSH
31761: LD_INT 3
31763: ST_TO_ADDR
// vc_control := control_computer ;
31764: LD_ADDR_OWVAR 38
31768: PUSH
31769: LD_INT 3
31771: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31772: LD_ADDR_OWVAR 40
31776: PUSH
31777: LD_INT 10
31779: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31780: LD_VAR 0 2
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: PPUSH
31789: CALL_OW 310
31793: NOT
31794: IFFALSE 31841
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31796: CALL_OW 45
31800: PPUSH
31801: LD_VAR 0 2
31805: PUSH
31806: LD_INT 1
31808: ARRAY
31809: PPUSH
31810: CALL_OW 250
31814: PPUSH
31815: LD_VAR 0 2
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: PPUSH
31824: CALL_OW 251
31828: PPUSH
31829: LD_INT 12
31831: PPUSH
31832: LD_INT 1
31834: PPUSH
31835: CALL_OW 50
31839: GO 31853
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31841: CALL_OW 45
31845: PPUSH
31846: LD_INT 1
31848: PPUSH
31849: CALL_OW 51
// end ;
31853: GO 31727
31855: POP
31856: POP
// end ;
31857: PPOPN 2
31859: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31860: LD_EXP 67
31864: PUSH
31865: LD_EXP 113
31869: AND
31870: IFFALSE 32092
31872: GO 31874
31874: DISABLE
31875: LD_INT 0
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31883: LD_ADDR_VAR 0 6
31887: PUSH
31888: LD_INT 22
31890: PUSH
31891: LD_OWVAR 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 21
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 3
31912: PUSH
31913: LD_INT 23
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: PPUSH
31932: CALL_OW 69
31936: ST_TO_ADDR
// if not tmp then
31937: LD_VAR 0 6
31941: NOT
31942: IFFALSE 31946
// exit ;
31944: GO 32092
// s1 := rand ( 1 , 4 ) ;
31946: LD_ADDR_VAR 0 2
31950: PUSH
31951: LD_INT 1
31953: PPUSH
31954: LD_INT 4
31956: PPUSH
31957: CALL_OW 12
31961: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31962: LD_ADDR_VAR 0 4
31966: PUSH
31967: LD_VAR 0 6
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: PPUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: CALL_OW 259
31985: ST_TO_ADDR
// if s1 = 1 then
31986: LD_VAR 0 2
31990: PUSH
31991: LD_INT 1
31993: EQUAL
31994: IFFALSE 32014
// s2 := rand ( 2 , 4 ) else
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_INT 2
32003: PPUSH
32004: LD_INT 4
32006: PPUSH
32007: CALL_OW 12
32011: ST_TO_ADDR
32012: GO 32022
// s2 := 1 ;
32014: LD_ADDR_VAR 0 3
32018: PUSH
32019: LD_INT 1
32021: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32022: LD_ADDR_VAR 0 5
32026: PUSH
32027: LD_VAR 0 6
32031: PUSH
32032: LD_INT 1
32034: ARRAY
32035: PPUSH
32036: LD_VAR 0 3
32040: PPUSH
32041: CALL_OW 259
32045: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32046: LD_VAR 0 6
32050: PUSH
32051: LD_INT 1
32053: ARRAY
32054: PPUSH
32055: LD_VAR 0 2
32059: PPUSH
32060: LD_VAR 0 5
32064: PPUSH
32065: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32069: LD_VAR 0 6
32073: PUSH
32074: LD_INT 1
32076: ARRAY
32077: PPUSH
32078: LD_VAR 0 3
32082: PPUSH
32083: LD_VAR 0 4
32087: PPUSH
32088: CALL_OW 237
// end ;
32092: PPOPN 6
32094: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32095: LD_EXP 67
32099: PUSH
32100: LD_EXP 114
32104: AND
32105: IFFALSE 32184
32107: GO 32109
32109: DISABLE
32110: LD_INT 0
32112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32113: LD_ADDR_VAR 0 1
32117: PUSH
32118: LD_INT 22
32120: PUSH
32121: LD_OWVAR 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 30
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PPUSH
32144: CALL_OW 69
32148: ST_TO_ADDR
// if not tmp then
32149: LD_VAR 0 1
32153: NOT
32154: IFFALSE 32158
// exit ;
32156: GO 32184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32158: LD_VAR 0 1
32162: PUSH
32163: LD_INT 1
32165: PPUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 12
32175: ARRAY
32176: PPUSH
32177: LD_INT 1
32179: PPUSH
32180: CALL_OW 234
// end ;
32184: PPOPN 1
32186: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32187: LD_EXP 67
32191: PUSH
32192: LD_EXP 115
32196: AND
32197: IFFALSE 32309
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
32205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32206: LD_ADDR_VAR 0 2
32210: PUSH
32211: LD_INT 22
32213: PUSH
32214: LD_OWVAR 2
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 30
32228: PUSH
32229: LD_INT 27
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 30
32238: PUSH
32239: LD_INT 26
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 30
32248: PUSH
32249: LD_INT 28
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: ST_TO_ADDR
// if not tmp then
32271: LD_VAR 0 2
32275: NOT
32276: IFFALSE 32280
// exit ;
32278: GO 32309
// for i in tmp do
32280: LD_ADDR_VAR 0 1
32284: PUSH
32285: LD_VAR 0 2
32289: PUSH
32290: FOR_IN
32291: IFFALSE 32307
// SetLives ( i , 1 ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_INT 1
32300: PPUSH
32301: CALL_OW 234
32305: GO 32290
32307: POP
32308: POP
// end ;
32309: PPOPN 2
32311: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32312: LD_EXP 67
32316: PUSH
32317: LD_EXP 116
32321: AND
32322: IFFALSE 32609
32324: GO 32326
32326: DISABLE
32327: LD_INT 0
32329: PPUSH
32330: PPUSH
32331: PPUSH
// begin i := rand ( 1 , 7 ) ;
32332: LD_ADDR_VAR 0 1
32336: PUSH
32337: LD_INT 1
32339: PPUSH
32340: LD_INT 7
32342: PPUSH
32343: CALL_OW 12
32347: ST_TO_ADDR
// case i of 1 :
32348: LD_VAR 0 1
32352: PUSH
32353: LD_INT 1
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32371
32361: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32362: LD_STRING earthquake(getX(game), 0, 32)
32364: PPUSH
32365: CALL_OW 559
32369: GO 32609
32371: LD_INT 2
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32393
32379: POP
// begin ToLua ( displayStucuk(); ) ;
32380: LD_STRING displayStucuk();
32382: PPUSH
32383: CALL_OW 559
// ResetFog ;
32387: CALL_OW 335
// end ; 3 :
32391: GO 32609
32393: LD_INT 3
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32505
32401: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 25
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: CALL_OW 69
32437: ST_TO_ADDR
// if not tmp then
32438: LD_VAR 0 2
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32609
// un := tmp [ rand ( 1 , tmp ) ] ;
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_VAR 0 2
32456: PUSH
32457: LD_INT 1
32459: PPUSH
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 12
32469: ARRAY
32470: ST_TO_ADDR
// if Crawls ( un ) then
32471: LD_VAR 0 3
32475: PPUSH
32476: CALL_OW 318
32480: IFFALSE 32491
// ComWalk ( un ) ;
32482: LD_VAR 0 3
32486: PPUSH
32487: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32491: LD_VAR 0 3
32495: PPUSH
32496: LD_INT 8
32498: PPUSH
32499: CALL_OW 336
// end ; 4 :
32503: GO 32609
32505: LD_INT 4
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32587
32513: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32514: LD_ADDR_VAR 0 2
32518: PUSH
32519: LD_INT 22
32521: PUSH
32522: LD_OWVAR 2
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 30
32533: PUSH
32534: LD_INT 29
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PPUSH
32545: CALL_OW 69
32549: ST_TO_ADDR
// if not tmp then
32550: LD_VAR 0 2
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32609
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32559: LD_VAR 0 2
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: PPUSH
32568: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32572: LD_VAR 0 2
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: CALL_OW 65
// end ; 5 .. 7 :
32585: GO 32609
32587: LD_INT 5
32589: DOUBLE
32590: GREATEREQUAL
32591: IFFALSE 32599
32593: LD_INT 7
32595: DOUBLE
32596: LESSEQUAL
32597: IFTRUE 32601
32599: GO 32608
32601: POP
// StreamSibBomb ; end ;
32602: CALL 28846 0 0
32606: GO 32609
32608: POP
// end ;
32609: PPOPN 3
32611: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32612: LD_EXP 67
32616: PUSH
32617: LD_EXP 117
32621: AND
32622: IFFALSE 32778
32624: GO 32626
32626: DISABLE
32627: LD_INT 0
32629: PPUSH
32630: PPUSH
32631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32632: LD_ADDR_VAR 0 2
32636: PUSH
32637: LD_INT 81
32639: PUSH
32640: LD_OWVAR 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 21
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 21
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 69
32685: ST_TO_ADDR
// if not tmp then
32686: LD_VAR 0 2
32690: NOT
32691: IFFALSE 32695
// exit ;
32693: GO 32778
// p := 0 ;
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_INT 0
32702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32703: LD_INT 35
32705: PPUSH
32706: CALL_OW 67
// p := p + 1 ;
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: LD_VAR 0 3
32719: PUSH
32720: LD_INT 1
32722: PLUS
32723: ST_TO_ADDR
// for i in tmp do
32724: LD_ADDR_VAR 0 1
32728: PUSH
32729: LD_VAR 0 2
32733: PUSH
32734: FOR_IN
32735: IFFALSE 32766
// if GetLives ( i ) < 1000 then
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 256
32746: PUSH
32747: LD_INT 1000
32749: LESS
32750: IFFALSE 32764
// SetLives ( i , 1000 ) ;
32752: LD_VAR 0 1
32756: PPUSH
32757: LD_INT 1000
32759: PPUSH
32760: CALL_OW 234
32764: GO 32734
32766: POP
32767: POP
// until p > 20 ;
32768: LD_VAR 0 3
32772: PUSH
32773: LD_INT 20
32775: GREATER
32776: IFFALSE 32703
// end ;
32778: PPOPN 3
32780: END
// every 0 0$1 trigger StreamModeActive and sTime do
32781: LD_EXP 67
32785: PUSH
32786: LD_EXP 118
32790: AND
32791: IFFALSE 32826
32793: GO 32795
32795: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32796: LD_INT 28
32798: PPUSH
32799: LD_OWVAR 2
32803: PPUSH
32804: LD_INT 2
32806: PPUSH
32807: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32811: LD_INT 30
32813: PPUSH
32814: LD_OWVAR 2
32818: PPUSH
32819: LD_INT 2
32821: PPUSH
32822: CALL_OW 322
// end ;
32826: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32827: LD_EXP 67
32831: PUSH
32832: LD_EXP 119
32836: AND
32837: IFFALSE 32958
32839: GO 32841
32841: DISABLE
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32846: LD_ADDR_VAR 0 2
32850: PUSH
32851: LD_INT 22
32853: PUSH
32854: LD_OWVAR 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 21
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: LD_INT 23
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: PPUSH
32895: CALL_OW 69
32899: ST_TO_ADDR
// if not tmp then
32900: LD_VAR 0 2
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 32958
// for i in tmp do
32909: LD_ADDR_VAR 0 1
32913: PUSH
32914: LD_VAR 0 2
32918: PUSH
32919: FOR_IN
32920: IFFALSE 32956
// begin if Crawls ( i ) then
32922: LD_VAR 0 1
32926: PPUSH
32927: CALL_OW 318
32931: IFFALSE 32942
// ComWalk ( i ) ;
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 138
// SetClass ( i , 2 ) ;
32942: LD_VAR 0 1
32946: PPUSH
32947: LD_INT 2
32949: PPUSH
32950: CALL_OW 336
// end ;
32954: GO 32919
32956: POP
32957: POP
// end ;
32958: PPOPN 2
32960: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32961: LD_EXP 67
32965: PUSH
32966: LD_EXP 120
32970: AND
32971: IFFALSE 33259
32973: GO 32975
32975: DISABLE
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
32980: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32981: LD_OWVAR 2
32985: PPUSH
32986: LD_INT 9
32988: PPUSH
32989: LD_INT 1
32991: PPUSH
32992: LD_INT 1
32994: PPUSH
32995: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32999: LD_INT 9
33001: PPUSH
33002: LD_OWVAR 2
33006: PPUSH
33007: CALL_OW 343
// uc_side := 9 ;
33011: LD_ADDR_OWVAR 20
33015: PUSH
33016: LD_INT 9
33018: ST_TO_ADDR
// uc_nation := 2 ;
33019: LD_ADDR_OWVAR 21
33023: PUSH
33024: LD_INT 2
33026: ST_TO_ADDR
// hc_name := Dark Warrior ;
33027: LD_ADDR_OWVAR 26
33031: PUSH
33032: LD_STRING Dark Warrior
33034: ST_TO_ADDR
// hc_gallery :=  ;
33035: LD_ADDR_OWVAR 33
33039: PUSH
33040: LD_STRING 
33042: ST_TO_ADDR
// hc_noskilllimit := true ;
33043: LD_ADDR_OWVAR 76
33047: PUSH
33048: LD_INT 1
33050: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33051: LD_ADDR_OWVAR 31
33055: PUSH
33056: LD_INT 30
33058: PUSH
33059: LD_INT 30
33061: PUSH
33062: LD_INT 30
33064: PUSH
33065: LD_INT 30
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// un := CreateHuman ;
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: CALL_OW 44
33083: ST_TO_ADDR
// hc_noskilllimit := false ;
33084: LD_ADDR_OWVAR 76
33088: PUSH
33089: LD_INT 0
33091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33092: LD_VAR 0 3
33096: PPUSH
33097: LD_INT 1
33099: PPUSH
33100: CALL_OW 51
// ToLua ( playRanger() ) ;
33104: LD_STRING playRanger()
33106: PPUSH
33107: CALL_OW 559
// p := 0 ;
33111: LD_ADDR_VAR 0 2
33115: PUSH
33116: LD_INT 0
33118: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33119: LD_INT 35
33121: PPUSH
33122: CALL_OW 67
// p := p + 1 ;
33126: LD_ADDR_VAR 0 2
33130: PUSH
33131: LD_VAR 0 2
33135: PUSH
33136: LD_INT 1
33138: PLUS
33139: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33140: LD_VAR 0 3
33144: PPUSH
33145: CALL_OW 256
33149: PUSH
33150: LD_INT 1000
33152: LESS
33153: IFFALSE 33167
// SetLives ( un , 1000 ) ;
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_INT 1000
33162: PPUSH
33163: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33167: LD_VAR 0 3
33171: PPUSH
33172: LD_INT 81
33174: PUSH
33175: LD_OWVAR 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 91
33186: PUSH
33187: LD_VAR 0 3
33191: PUSH
33192: LD_INT 30
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PPUSH
33204: CALL_OW 69
33208: PPUSH
33209: LD_VAR 0 3
33213: PPUSH
33214: CALL_OW 74
33218: PPUSH
33219: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33223: LD_VAR 0 2
33227: PUSH
33228: LD_INT 80
33230: GREATER
33231: PUSH
33232: LD_VAR 0 3
33236: PPUSH
33237: CALL_OW 301
33241: OR
33242: IFFALSE 33119
// if un then
33244: LD_VAR 0 3
33248: IFFALSE 33259
// RemoveUnit ( un ) ;
33250: LD_VAR 0 3
33254: PPUSH
33255: CALL_OW 64
// end ;
33259: PPOPN 3
33261: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33262: LD_EXP 121
33266: IFFALSE 33382
33268: GO 33270
33270: DISABLE
33271: LD_INT 0
33273: PPUSH
33274: PPUSH
33275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33276: LD_ADDR_VAR 0 2
33280: PUSH
33281: LD_INT 81
33283: PUSH
33284: LD_OWVAR 2
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 21
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 69
33311: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33312: LD_STRING playComputer()
33314: PPUSH
33315: CALL_OW 559
// if not tmp then
33319: LD_VAR 0 2
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 33382
// for i in tmp do
33328: LD_ADDR_VAR 0 1
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: FOR_IN
33339: IFFALSE 33380
// for j := 1 to 4 do
33341: LD_ADDR_VAR 0 3
33345: PUSH
33346: DOUBLE
33347: LD_INT 1
33349: DEC
33350: ST_TO_ADDR
33351: LD_INT 4
33353: PUSH
33354: FOR_TO
33355: IFFALSE 33376
// SetSkill ( i , j , 10 ) ;
33357: LD_VAR 0 1
33361: PPUSH
33362: LD_VAR 0 3
33366: PPUSH
33367: LD_INT 10
33369: PPUSH
33370: CALL_OW 237
33374: GO 33354
33376: POP
33377: POP
33378: GO 33338
33380: POP
33381: POP
// end ;
33382: PPOPN 3
33384: END
// every 0 0$1 trigger s30 do var i , tmp ;
33385: LD_EXP 122
33389: IFFALSE 33458
33391: GO 33393
33393: DISABLE
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33398: LD_ADDR_VAR 0 2
33402: PUSH
33403: LD_INT 22
33405: PUSH
33406: LD_OWVAR 2
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PPUSH
33415: CALL_OW 69
33419: ST_TO_ADDR
// if not tmp then
33420: LD_VAR 0 2
33424: NOT
33425: IFFALSE 33429
// exit ;
33427: GO 33458
// for i in tmp do
33429: LD_ADDR_VAR 0 1
33433: PUSH
33434: LD_VAR 0 2
33438: PUSH
33439: FOR_IN
33440: IFFALSE 33456
// SetLives ( i , 300 ) ;
33442: LD_VAR 0 1
33446: PPUSH
33447: LD_INT 300
33449: PPUSH
33450: CALL_OW 234
33454: GO 33439
33456: POP
33457: POP
// end ;
33458: PPOPN 2
33460: END
// every 0 0$1 trigger s60 do var i , tmp ;
33461: LD_EXP 123
33465: IFFALSE 33534
33467: GO 33469
33469: DISABLE
33470: LD_INT 0
33472: PPUSH
33473: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33474: LD_ADDR_VAR 0 2
33478: PUSH
33479: LD_INT 22
33481: PUSH
33482: LD_OWVAR 2
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PPUSH
33491: CALL_OW 69
33495: ST_TO_ADDR
// if not tmp then
33496: LD_VAR 0 2
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33534
// for i in tmp do
33505: LD_ADDR_VAR 0 1
33509: PUSH
33510: LD_VAR 0 2
33514: PUSH
33515: FOR_IN
33516: IFFALSE 33532
// SetLives ( i , 600 ) ;
33518: LD_VAR 0 1
33522: PPUSH
33523: LD_INT 600
33525: PPUSH
33526: CALL_OW 234
33530: GO 33515
33532: POP
33533: POP
// end ;
33534: PPOPN 2
33536: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33537: LD_INT 0
33539: PPUSH
// case cmd of 301 :
33540: LD_VAR 0 1
33544: PUSH
33545: LD_INT 301
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33585
33553: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33554: LD_VAR 0 6
33558: PPUSH
33559: LD_VAR 0 7
33563: PPUSH
33564: LD_VAR 0 8
33568: PPUSH
33569: LD_VAR 0 4
33573: PPUSH
33574: LD_VAR 0 5
33578: PPUSH
33579: CALL 34786 0 5
33583: GO 33706
33585: LD_INT 302
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33630
33593: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33594: LD_VAR 0 6
33598: PPUSH
33599: LD_VAR 0 7
33603: PPUSH
33604: LD_VAR 0 8
33608: PPUSH
33609: LD_VAR 0 9
33613: PPUSH
33614: LD_VAR 0 4
33618: PPUSH
33619: LD_VAR 0 5
33623: PPUSH
33624: CALL 34877 0 6
33628: GO 33706
33630: LD_INT 303
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33675
33638: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33639: LD_VAR 0 6
33643: PPUSH
33644: LD_VAR 0 7
33648: PPUSH
33649: LD_VAR 0 8
33653: PPUSH
33654: LD_VAR 0 9
33658: PPUSH
33659: LD_VAR 0 4
33663: PPUSH
33664: LD_VAR 0 5
33668: PPUSH
33669: CALL 33711 0 6
33673: GO 33706
33675: LD_INT 304
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33705
33683: POP
// hHackTeleport ( unit , x , y ) ; end ;
33684: LD_VAR 0 2
33688: PPUSH
33689: LD_VAR 0 4
33693: PPUSH
33694: LD_VAR 0 5
33698: PPUSH
33699: CALL 35470 0 3
33703: GO 33706
33705: POP
// end ;
33706: LD_VAR 0 12
33710: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33715: LD_VAR 0 1
33719: PUSH
33720: LD_INT 1
33722: LESS
33723: PUSH
33724: LD_VAR 0 1
33728: PUSH
33729: LD_INT 3
33731: GREATER
33732: OR
33733: PUSH
33734: LD_VAR 0 5
33738: PPUSH
33739: LD_VAR 0 6
33743: PPUSH
33744: CALL_OW 428
33748: OR
33749: IFFALSE 33753
// exit ;
33751: GO 34473
// uc_side := your_side ;
33753: LD_ADDR_OWVAR 20
33757: PUSH
33758: LD_OWVAR 2
33762: ST_TO_ADDR
// uc_nation := nation ;
33763: LD_ADDR_OWVAR 21
33767: PUSH
33768: LD_VAR 0 1
33772: ST_TO_ADDR
// bc_level = 1 ;
33773: LD_ADDR_OWVAR 43
33777: PUSH
33778: LD_INT 1
33780: ST_TO_ADDR
// case btype of 1 :
33781: LD_VAR 0 2
33785: PUSH
33786: LD_INT 1
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33805
33794: POP
// bc_type := b_depot ; 2 :
33795: LD_ADDR_OWVAR 42
33799: PUSH
33800: LD_INT 0
33802: ST_TO_ADDR
33803: GO 34417
33805: LD_INT 2
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33813
33811: GO 33824
33813: POP
// bc_type := b_warehouse ; 3 :
33814: LD_ADDR_OWVAR 42
33818: PUSH
33819: LD_INT 1
33821: ST_TO_ADDR
33822: GO 34417
33824: LD_INT 3
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33843
33832: POP
// bc_type := b_lab ; 4 .. 9 :
33833: LD_ADDR_OWVAR 42
33837: PUSH
33838: LD_INT 6
33840: ST_TO_ADDR
33841: GO 34417
33843: LD_INT 4
33845: DOUBLE
33846: GREATEREQUAL
33847: IFFALSE 33855
33849: LD_INT 9
33851: DOUBLE
33852: LESSEQUAL
33853: IFTRUE 33857
33855: GO 33909
33857: POP
// begin bc_type := b_lab_half ;
33858: LD_ADDR_OWVAR 42
33862: PUSH
33863: LD_INT 7
33865: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33866: LD_ADDR_OWVAR 44
33870: PUSH
33871: LD_INT 10
33873: PUSH
33874: LD_INT 11
33876: PUSH
33877: LD_INT 12
33879: PUSH
33880: LD_INT 15
33882: PUSH
33883: LD_INT 14
33885: PUSH
33886: LD_INT 13
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: PUSH
33897: LD_VAR 0 2
33901: PUSH
33902: LD_INT 3
33904: MINUS
33905: ARRAY
33906: ST_TO_ADDR
// end ; 10 .. 13 :
33907: GO 34417
33909: LD_INT 10
33911: DOUBLE
33912: GREATEREQUAL
33913: IFFALSE 33921
33915: LD_INT 13
33917: DOUBLE
33918: LESSEQUAL
33919: IFTRUE 33923
33921: GO 34000
33923: POP
// begin bc_type := b_lab_full ;
33924: LD_ADDR_OWVAR 42
33928: PUSH
33929: LD_INT 8
33931: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33932: LD_ADDR_OWVAR 44
33936: PUSH
33937: LD_INT 10
33939: PUSH
33940: LD_INT 12
33942: PUSH
33943: LD_INT 14
33945: PUSH
33946: LD_INT 13
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: PUSH
33955: LD_VAR 0 2
33959: PUSH
33960: LD_INT 9
33962: MINUS
33963: ARRAY
33964: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33965: LD_ADDR_OWVAR 45
33969: PUSH
33970: LD_INT 11
33972: PUSH
33973: LD_INT 15
33975: PUSH
33976: LD_INT 12
33978: PUSH
33979: LD_INT 15
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: PUSH
33988: LD_VAR 0 2
33992: PUSH
33993: LD_INT 9
33995: MINUS
33996: ARRAY
33997: ST_TO_ADDR
// end ; 14 :
33998: GO 34417
34000: LD_INT 14
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34019
34008: POP
// bc_type := b_workshop ; 15 :
34009: LD_ADDR_OWVAR 42
34013: PUSH
34014: LD_INT 2
34016: ST_TO_ADDR
34017: GO 34417
34019: LD_INT 15
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34038
34027: POP
// bc_type := b_factory ; 16 :
34028: LD_ADDR_OWVAR 42
34032: PUSH
34033: LD_INT 3
34035: ST_TO_ADDR
34036: GO 34417
34038: LD_INT 16
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34057
34046: POP
// bc_type := b_ext_gun ; 17 :
34047: LD_ADDR_OWVAR 42
34051: PUSH
34052: LD_INT 17
34054: ST_TO_ADDR
34055: GO 34417
34057: LD_INT 17
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34093
34065: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34066: LD_ADDR_OWVAR 42
34070: PUSH
34071: LD_INT 19
34073: PUSH
34074: LD_INT 23
34076: PUSH
34077: LD_INT 19
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: PUSH
34085: LD_VAR 0 1
34089: ARRAY
34090: ST_TO_ADDR
34091: GO 34417
34093: LD_INT 18
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34112
34101: POP
// bc_type := b_ext_radar ; 19 :
34102: LD_ADDR_OWVAR 42
34106: PUSH
34107: LD_INT 20
34109: ST_TO_ADDR
34110: GO 34417
34112: LD_INT 19
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34131
34120: POP
// bc_type := b_ext_radio ; 20 :
34121: LD_ADDR_OWVAR 42
34125: PUSH
34126: LD_INT 22
34128: ST_TO_ADDR
34129: GO 34417
34131: LD_INT 20
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34150
34139: POP
// bc_type := b_ext_siberium ; 21 :
34140: LD_ADDR_OWVAR 42
34144: PUSH
34145: LD_INT 21
34147: ST_TO_ADDR
34148: GO 34417
34150: LD_INT 21
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34169
34158: POP
// bc_type := b_ext_computer ; 22 :
34159: LD_ADDR_OWVAR 42
34163: PUSH
34164: LD_INT 24
34166: ST_TO_ADDR
34167: GO 34417
34169: LD_INT 22
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34188
34177: POP
// bc_type := b_ext_track ; 23 :
34178: LD_ADDR_OWVAR 42
34182: PUSH
34183: LD_INT 16
34185: ST_TO_ADDR
34186: GO 34417
34188: LD_INT 23
34190: DOUBLE
34191: EQUAL
34192: IFTRUE 34196
34194: GO 34207
34196: POP
// bc_type := b_ext_laser ; 24 :
34197: LD_ADDR_OWVAR 42
34201: PUSH
34202: LD_INT 25
34204: ST_TO_ADDR
34205: GO 34417
34207: LD_INT 24
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34226
34215: POP
// bc_type := b_control_tower ; 25 :
34216: LD_ADDR_OWVAR 42
34220: PUSH
34221: LD_INT 36
34223: ST_TO_ADDR
34224: GO 34417
34226: LD_INT 25
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34234
34232: GO 34245
34234: POP
// bc_type := b_breastwork ; 26 :
34235: LD_ADDR_OWVAR 42
34239: PUSH
34240: LD_INT 31
34242: ST_TO_ADDR
34243: GO 34417
34245: LD_INT 26
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34264
34253: POP
// bc_type := b_bunker ; 27 :
34254: LD_ADDR_OWVAR 42
34258: PUSH
34259: LD_INT 32
34261: ST_TO_ADDR
34262: GO 34417
34264: LD_INT 27
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34272
34270: GO 34283
34272: POP
// bc_type := b_turret ; 28 :
34273: LD_ADDR_OWVAR 42
34277: PUSH
34278: LD_INT 33
34280: ST_TO_ADDR
34281: GO 34417
34283: LD_INT 28
34285: DOUBLE
34286: EQUAL
34287: IFTRUE 34291
34289: GO 34302
34291: POP
// bc_type := b_armoury ; 29 :
34292: LD_ADDR_OWVAR 42
34296: PUSH
34297: LD_INT 4
34299: ST_TO_ADDR
34300: GO 34417
34302: LD_INT 29
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34310
34308: GO 34321
34310: POP
// bc_type := b_barracks ; 30 :
34311: LD_ADDR_OWVAR 42
34315: PUSH
34316: LD_INT 5
34318: ST_TO_ADDR
34319: GO 34417
34321: LD_INT 30
34323: DOUBLE
34324: EQUAL
34325: IFTRUE 34329
34327: GO 34340
34329: POP
// bc_type := b_solar_power ; 31 :
34330: LD_ADDR_OWVAR 42
34334: PUSH
34335: LD_INT 27
34337: ST_TO_ADDR
34338: GO 34417
34340: LD_INT 31
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34348
34346: GO 34359
34348: POP
// bc_type := b_oil_power ; 32 :
34349: LD_ADDR_OWVAR 42
34353: PUSH
34354: LD_INT 26
34356: ST_TO_ADDR
34357: GO 34417
34359: LD_INT 32
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34378
34367: POP
// bc_type := b_siberite_power ; 33 :
34368: LD_ADDR_OWVAR 42
34372: PUSH
34373: LD_INT 28
34375: ST_TO_ADDR
34376: GO 34417
34378: LD_INT 33
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34397
34386: POP
// bc_type := b_oil_mine ; 34 :
34387: LD_ADDR_OWVAR 42
34391: PUSH
34392: LD_INT 29
34394: ST_TO_ADDR
34395: GO 34417
34397: LD_INT 34
34399: DOUBLE
34400: EQUAL
34401: IFTRUE 34405
34403: GO 34416
34405: POP
// bc_type := b_siberite_mine ; end ;
34406: LD_ADDR_OWVAR 42
34410: PUSH
34411: LD_INT 30
34413: ST_TO_ADDR
34414: GO 34417
34416: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34417: LD_ADDR_VAR 0 8
34421: PUSH
34422: LD_VAR 0 5
34426: PPUSH
34427: LD_VAR 0 6
34431: PPUSH
34432: LD_VAR 0 3
34436: PPUSH
34437: CALL_OW 47
34441: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34442: LD_OWVAR 42
34446: PUSH
34447: LD_INT 32
34449: PUSH
34450: LD_INT 33
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: IN
34457: IFFALSE 34473
// PlaceWeaponTurret ( b , weapon ) ;
34459: LD_VAR 0 8
34463: PPUSH
34464: LD_VAR 0 4
34468: PPUSH
34469: CALL_OW 431
// end ;
34473: LD_VAR 0 7
34477: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34478: LD_INT 0
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34484: LD_ADDR_VAR 0 4
34488: PUSH
34489: LD_INT 22
34491: PUSH
34492: LD_OWVAR 2
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: LD_INT 30
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 30
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 69
34537: ST_TO_ADDR
// if not tmp then
34538: LD_VAR 0 4
34542: NOT
34543: IFFALSE 34547
// exit ;
34545: GO 34606
// for i in tmp do
34547: LD_ADDR_VAR 0 2
34551: PUSH
34552: LD_VAR 0 4
34556: PUSH
34557: FOR_IN
34558: IFFALSE 34604
// for j = 1 to 3 do
34560: LD_ADDR_VAR 0 3
34564: PUSH
34565: DOUBLE
34566: LD_INT 1
34568: DEC
34569: ST_TO_ADDR
34570: LD_INT 3
34572: PUSH
34573: FOR_TO
34574: IFFALSE 34600
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34576: LD_VAR 0 2
34580: PPUSH
34581: CALL_OW 274
34585: PPUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: LD_INT 99999
34593: PPUSH
34594: CALL_OW 277
34598: GO 34573
34600: POP
34601: POP
34602: GO 34557
34604: POP
34605: POP
// end ;
34606: LD_VAR 0 1
34610: RET
// export function hHackSetLevel10 ; var i , j ; begin
34611: LD_INT 0
34613: PPUSH
34614: PPUSH
34615: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34616: LD_ADDR_VAR 0 2
34620: PUSH
34621: LD_INT 21
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PPUSH
34631: CALL_OW 69
34635: PUSH
34636: FOR_IN
34637: IFFALSE 34689
// if IsSelected ( i ) then
34639: LD_VAR 0 2
34643: PPUSH
34644: CALL_OW 306
34648: IFFALSE 34687
// begin for j := 1 to 4 do
34650: LD_ADDR_VAR 0 3
34654: PUSH
34655: DOUBLE
34656: LD_INT 1
34658: DEC
34659: ST_TO_ADDR
34660: LD_INT 4
34662: PUSH
34663: FOR_TO
34664: IFFALSE 34685
// SetSkill ( i , j , 10 ) ;
34666: LD_VAR 0 2
34670: PPUSH
34671: LD_VAR 0 3
34675: PPUSH
34676: LD_INT 10
34678: PPUSH
34679: CALL_OW 237
34683: GO 34663
34685: POP
34686: POP
// end ;
34687: GO 34636
34689: POP
34690: POP
// end ;
34691: LD_VAR 0 1
34695: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
34700: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: LD_INT 22
34708: PUSH
34709: LD_OWVAR 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 21
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PPUSH
34732: CALL_OW 69
34736: PUSH
34737: FOR_IN
34738: IFFALSE 34779
// begin for j := 1 to 4 do
34740: LD_ADDR_VAR 0 3
34744: PUSH
34745: DOUBLE
34746: LD_INT 1
34748: DEC
34749: ST_TO_ADDR
34750: LD_INT 4
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34775
// SetSkill ( i , j , 10 ) ;
34756: LD_VAR 0 2
34760: PPUSH
34761: LD_VAR 0 3
34765: PPUSH
34766: LD_INT 10
34768: PPUSH
34769: CALL_OW 237
34773: GO 34753
34775: POP
34776: POP
// end ;
34777: GO 34737
34779: POP
34780: POP
// end ;
34781: LD_VAR 0 1
34785: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34786: LD_INT 0
34788: PPUSH
// uc_side := your_side ;
34789: LD_ADDR_OWVAR 20
34793: PUSH
34794: LD_OWVAR 2
34798: ST_TO_ADDR
// uc_nation := nation ;
34799: LD_ADDR_OWVAR 21
34803: PUSH
34804: LD_VAR 0 1
34808: ST_TO_ADDR
// InitHc ;
34809: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34813: LD_INT 0
34815: PPUSH
34816: LD_VAR 0 2
34820: PPUSH
34821: LD_VAR 0 3
34825: PPUSH
34826: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34830: LD_VAR 0 4
34834: PPUSH
34835: LD_VAR 0 5
34839: PPUSH
34840: CALL_OW 428
34844: PUSH
34845: LD_INT 0
34847: EQUAL
34848: IFFALSE 34872
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34850: CALL_OW 44
34854: PPUSH
34855: LD_VAR 0 4
34859: PPUSH
34860: LD_VAR 0 5
34864: PPUSH
34865: LD_INT 1
34867: PPUSH
34868: CALL_OW 48
// end ;
34872: LD_VAR 0 6
34876: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
// uc_side := your_side ;
34881: LD_ADDR_OWVAR 20
34885: PUSH
34886: LD_OWVAR 2
34890: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34891: LD_VAR 0 1
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 4
34907: PUSH
34908: LD_INT 5
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: IN
34918: IFFALSE 34930
// uc_nation := nation_american else
34920: LD_ADDR_OWVAR 21
34924: PUSH
34925: LD_INT 1
34927: ST_TO_ADDR
34928: GO 34973
// if chassis in [ 11 , 12 , 13 , 14 ] then
34930: LD_VAR 0 1
34934: PUSH
34935: LD_INT 11
34937: PUSH
34938: LD_INT 12
34940: PUSH
34941: LD_INT 13
34943: PUSH
34944: LD_INT 14
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: IN
34953: IFFALSE 34965
// uc_nation := nation_arabian else
34955: LD_ADDR_OWVAR 21
34959: PUSH
34960: LD_INT 2
34962: ST_TO_ADDR
34963: GO 34973
// uc_nation := nation_russian ;
34965: LD_ADDR_OWVAR 21
34969: PUSH
34970: LD_INT 3
34972: ST_TO_ADDR
// vc_chassis := chassis ;
34973: LD_ADDR_OWVAR 37
34977: PUSH
34978: LD_VAR 0 1
34982: ST_TO_ADDR
// vc_engine := engine ;
34983: LD_ADDR_OWVAR 39
34987: PUSH
34988: LD_VAR 0 2
34992: ST_TO_ADDR
// vc_control := control ;
34993: LD_ADDR_OWVAR 38
34997: PUSH
34998: LD_VAR 0 3
35002: ST_TO_ADDR
// vc_weapon := weapon ;
35003: LD_ADDR_OWVAR 40
35007: PUSH
35008: LD_VAR 0 4
35012: ST_TO_ADDR
// un := CreateVehicle ;
35013: LD_ADDR_VAR 0 8
35017: PUSH
35018: CALL_OW 45
35022: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35023: LD_VAR 0 8
35027: PPUSH
35028: LD_INT 0
35030: PPUSH
35031: LD_INT 5
35033: PPUSH
35034: CALL_OW 12
35038: PPUSH
35039: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35043: LD_VAR 0 8
35047: PPUSH
35048: LD_VAR 0 5
35052: PPUSH
35053: LD_VAR 0 6
35057: PPUSH
35058: LD_INT 1
35060: PPUSH
35061: CALL_OW 48
// end ;
35065: LD_VAR 0 7
35069: RET
// export hInvincible ; every 1 do
35070: GO 35072
35072: DISABLE
// hInvincible := [ ] ;
35073: LD_ADDR_EXP 124
35077: PUSH
35078: EMPTY
35079: ST_TO_ADDR
35080: END
// every 10 do var i ;
35081: GO 35083
35083: DISABLE
35084: LD_INT 0
35086: PPUSH
// begin enable ;
35087: ENABLE
// if not hInvincible then
35088: LD_EXP 124
35092: NOT
35093: IFFALSE 35097
// exit ;
35095: GO 35141
// for i in hInvincible do
35097: LD_ADDR_VAR 0 1
35101: PUSH
35102: LD_EXP 124
35106: PUSH
35107: FOR_IN
35108: IFFALSE 35139
// if GetLives ( i ) < 1000 then
35110: LD_VAR 0 1
35114: PPUSH
35115: CALL_OW 256
35119: PUSH
35120: LD_INT 1000
35122: LESS
35123: IFFALSE 35137
// SetLives ( i , 1000 ) ;
35125: LD_VAR 0 1
35129: PPUSH
35130: LD_INT 1000
35132: PPUSH
35133: CALL_OW 234
35137: GO 35107
35139: POP
35140: POP
// end ;
35141: PPOPN 1
35143: END
// export function hHackInvincible ; var i ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35148: LD_ADDR_VAR 0 2
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 21
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PPUSH
35181: CALL_OW 69
35185: PUSH
35186: FOR_IN
35187: IFFALSE 35248
// if IsSelected ( i ) then
35189: LD_VAR 0 2
35193: PPUSH
35194: CALL_OW 306
35198: IFFALSE 35246
// begin if i in hInvincible then
35200: LD_VAR 0 2
35204: PUSH
35205: LD_EXP 124
35209: IN
35210: IFFALSE 35230
// hInvincible := hInvincible diff i else
35212: LD_ADDR_EXP 124
35216: PUSH
35217: LD_EXP 124
35221: PUSH
35222: LD_VAR 0 2
35226: DIFF
35227: ST_TO_ADDR
35228: GO 35246
// hInvincible := hInvincible union i ;
35230: LD_ADDR_EXP 124
35234: PUSH
35235: LD_EXP 124
35239: PUSH
35240: LD_VAR 0 2
35244: UNION
35245: ST_TO_ADDR
// end ;
35246: GO 35186
35248: POP
35249: POP
// end ;
35250: LD_VAR 0 1
35254: RET
// export function hHackInvisible ; var i , j ; begin
35255: LD_INT 0
35257: PPUSH
35258: PPUSH
35259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35260: LD_ADDR_VAR 0 2
35264: PUSH
35265: LD_INT 21
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PPUSH
35275: CALL_OW 69
35279: PUSH
35280: FOR_IN
35281: IFFALSE 35305
// if IsSelected ( i ) then
35283: LD_VAR 0 2
35287: PPUSH
35288: CALL_OW 306
35292: IFFALSE 35303
// ComForceInvisible ( i ) ;
35294: LD_VAR 0 2
35298: PPUSH
35299: CALL_OW 496
35303: GO 35280
35305: POP
35306: POP
// end ;
35307: LD_VAR 0 1
35311: RET
// export function hHackChangeYourSide ; begin
35312: LD_INT 0
35314: PPUSH
// if your_side = 8 then
35315: LD_OWVAR 2
35319: PUSH
35320: LD_INT 8
35322: EQUAL
35323: IFFALSE 35335
// your_side := 0 else
35325: LD_ADDR_OWVAR 2
35329: PUSH
35330: LD_INT 0
35332: ST_TO_ADDR
35333: GO 35349
// your_side := your_side + 1 ;
35335: LD_ADDR_OWVAR 2
35339: PUSH
35340: LD_OWVAR 2
35344: PUSH
35345: LD_INT 1
35347: PLUS
35348: ST_TO_ADDR
// end ;
35349: LD_VAR 0 1
35353: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
// for i in all_units do
35359: LD_ADDR_VAR 0 2
35363: PUSH
35364: LD_OWVAR 3
35368: PUSH
35369: FOR_IN
35370: IFFALSE 35448
// if IsSelected ( i ) then
35372: LD_VAR 0 2
35376: PPUSH
35377: CALL_OW 306
35381: IFFALSE 35446
// begin j := GetSide ( i ) ;
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_VAR 0 2
35392: PPUSH
35393: CALL_OW 255
35397: ST_TO_ADDR
// if j = 8 then
35398: LD_VAR 0 3
35402: PUSH
35403: LD_INT 8
35405: EQUAL
35406: IFFALSE 35418
// j := 0 else
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_INT 0
35415: ST_TO_ADDR
35416: GO 35432
// j := j + 1 ;
35418: LD_ADDR_VAR 0 3
35422: PUSH
35423: LD_VAR 0 3
35427: PUSH
35428: LD_INT 1
35430: PLUS
35431: ST_TO_ADDR
// SetSide ( i , j ) ;
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 3
35441: PPUSH
35442: CALL_OW 235
// end ;
35446: GO 35369
35448: POP
35449: POP
// end ;
35450: LD_VAR 0 1
35454: RET
// export function hHackFog ; begin
35455: LD_INT 0
35457: PPUSH
// FogOff ( true ) ;
35458: LD_INT 1
35460: PPUSH
35461: CALL_OW 344
// end ;
35465: LD_VAR 0 1
35469: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35470: LD_INT 0
35472: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35473: LD_VAR 0 1
35477: PPUSH
35478: LD_VAR 0 2
35482: PPUSH
35483: LD_VAR 0 3
35487: PPUSH
35488: LD_INT 1
35490: PPUSH
35491: LD_INT 1
35493: PPUSH
35494: CALL_OW 483
// CenterOnXY ( x , y ) ;
35498: LD_VAR 0 2
35502: PPUSH
35503: LD_VAR 0 3
35507: PPUSH
35508: CALL_OW 84
// end ;
35512: LD_VAR 0 4
35516: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35517: LD_INT 0
35519: PPUSH
35520: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35521: LD_VAR 0 1
35525: NOT
35526: PUSH
35527: LD_VAR 0 2
35531: PPUSH
35532: LD_VAR 0 3
35536: PPUSH
35537: CALL_OW 488
35541: NOT
35542: OR
35543: PUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL_OW 266
35553: PUSH
35554: LD_INT 3
35556: NONEQUAL
35557: PUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL_OW 247
35567: PUSH
35568: LD_INT 1
35570: EQUAL
35571: NOT
35572: AND
35573: OR
35574: IFFALSE 35578
// exit ;
35576: GO 35727
// if GetType ( factory ) = unit_human then
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 247
35587: PUSH
35588: LD_INT 1
35590: EQUAL
35591: IFFALSE 35608
// factory := IsInUnit ( factory ) ;
35593: LD_ADDR_VAR 0 1
35597: PUSH
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 310
35607: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35608: LD_VAR 0 1
35612: PPUSH
35613: CALL_OW 266
35617: PUSH
35618: LD_INT 3
35620: NONEQUAL
35621: IFFALSE 35625
// exit ;
35623: GO 35727
// if HexInfo ( x , y ) = factory then
35625: LD_VAR 0 2
35629: PPUSH
35630: LD_VAR 0 3
35634: PPUSH
35635: CALL_OW 428
35639: PUSH
35640: LD_VAR 0 1
35644: EQUAL
35645: IFFALSE 35672
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35647: LD_ADDR_EXP 125
35651: PUSH
35652: LD_EXP 125
35656: PPUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: LD_INT 0
35664: PPUSH
35665: CALL_OW 1
35669: ST_TO_ADDR
35670: GO 35723
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35672: LD_ADDR_EXP 125
35676: PUSH
35677: LD_EXP 125
35681: PPUSH
35682: LD_VAR 0 1
35686: PPUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 255
35696: PUSH
35697: LD_VAR 0 1
35701: PUSH
35702: LD_VAR 0 2
35706: PUSH
35707: LD_VAR 0 3
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: PPUSH
35718: CALL_OW 1
35722: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35723: CALL 35732 0 0
// end ;
35727: LD_VAR 0 4
35731: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35732: LD_INT 0
35734: PPUSH
35735: PPUSH
35736: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35737: LD_STRING resetFactoryWaypoint();
35739: PPUSH
35740: CALL_OW 559
// if factoryWaypoints then
35744: LD_EXP 125
35748: IFFALSE 35874
// begin list := PrepareArray ( factoryWaypoints ) ;
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_EXP 125
35759: PPUSH
35760: CALL 82289 0 1
35764: ST_TO_ADDR
// for i := 1 to list do
35765: LD_ADDR_VAR 0 2
35769: PUSH
35770: DOUBLE
35771: LD_INT 1
35773: DEC
35774: ST_TO_ADDR
35775: LD_VAR 0 3
35779: PUSH
35780: FOR_TO
35781: IFFALSE 35872
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35783: LD_STRING setFactoryWaypointXY(
35785: PUSH
35786: LD_VAR 0 3
35790: PUSH
35791: LD_VAR 0 2
35795: ARRAY
35796: PUSH
35797: LD_INT 1
35799: ARRAY
35800: STR
35801: PUSH
35802: LD_STRING ,
35804: STR
35805: PUSH
35806: LD_VAR 0 3
35810: PUSH
35811: LD_VAR 0 2
35815: ARRAY
35816: PUSH
35817: LD_INT 2
35819: ARRAY
35820: STR
35821: PUSH
35822: LD_STRING ,
35824: STR
35825: PUSH
35826: LD_VAR 0 3
35830: PUSH
35831: LD_VAR 0 2
35835: ARRAY
35836: PUSH
35837: LD_INT 3
35839: ARRAY
35840: STR
35841: PUSH
35842: LD_STRING ,
35844: STR
35845: PUSH
35846: LD_VAR 0 3
35850: PUSH
35851: LD_VAR 0 2
35855: ARRAY
35856: PUSH
35857: LD_INT 4
35859: ARRAY
35860: STR
35861: PUSH
35862: LD_STRING )
35864: STR
35865: PPUSH
35866: CALL_OW 559
35870: GO 35780
35872: POP
35873: POP
// end ; end ;
35874: LD_VAR 0 1
35878: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35879: LD_INT 0
35881: PPUSH
// if HexInfo ( x , y ) = warehouse then
35882: LD_VAR 0 2
35886: PPUSH
35887: LD_VAR 0 3
35891: PPUSH
35892: CALL_OW 428
35896: PUSH
35897: LD_VAR 0 1
35901: EQUAL
35902: IFFALSE 35929
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35904: LD_ADDR_EXP 126
35908: PUSH
35909: LD_EXP 126
35913: PPUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: LD_INT 0
35921: PPUSH
35922: CALL_OW 1
35926: ST_TO_ADDR
35927: GO 35980
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35929: LD_ADDR_EXP 126
35933: PUSH
35934: LD_EXP 126
35938: PPUSH
35939: LD_VAR 0 1
35943: PPUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: CALL_OW 255
35953: PUSH
35954: LD_VAR 0 1
35958: PUSH
35959: LD_VAR 0 2
35963: PUSH
35964: LD_VAR 0 3
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: PPUSH
35975: CALL_OW 1
35979: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35980: CALL 35989 0 0
// end ;
35984: LD_VAR 0 4
35988: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35989: LD_INT 0
35991: PPUSH
35992: PPUSH
35993: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35994: LD_STRING resetWarehouseGatheringPoints();
35996: PPUSH
35997: CALL_OW 559
// if warehouseGatheringPoints then
36001: LD_EXP 126
36005: IFFALSE 36131
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_EXP 126
36016: PPUSH
36017: CALL 82289 0 1
36021: ST_TO_ADDR
// for i := 1 to list do
36022: LD_ADDR_VAR 0 2
36026: PUSH
36027: DOUBLE
36028: LD_INT 1
36030: DEC
36031: ST_TO_ADDR
36032: LD_VAR 0 3
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36129
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36040: LD_STRING setWarehouseGatheringPointXY(
36042: PUSH
36043: LD_VAR 0 3
36047: PUSH
36048: LD_VAR 0 2
36052: ARRAY
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: STR
36058: PUSH
36059: LD_STRING ,
36061: STR
36062: PUSH
36063: LD_VAR 0 3
36067: PUSH
36068: LD_VAR 0 2
36072: ARRAY
36073: PUSH
36074: LD_INT 2
36076: ARRAY
36077: STR
36078: PUSH
36079: LD_STRING ,
36081: STR
36082: PUSH
36083: LD_VAR 0 3
36087: PUSH
36088: LD_VAR 0 2
36092: ARRAY
36093: PUSH
36094: LD_INT 3
36096: ARRAY
36097: STR
36098: PUSH
36099: LD_STRING ,
36101: STR
36102: PUSH
36103: LD_VAR 0 3
36107: PUSH
36108: LD_VAR 0 2
36112: ARRAY
36113: PUSH
36114: LD_INT 4
36116: ARRAY
36117: STR
36118: PUSH
36119: LD_STRING )
36121: STR
36122: PPUSH
36123: CALL_OW 559
36127: GO 36037
36129: POP
36130: POP
// end ; end ;
36131: LD_VAR 0 1
36135: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36136: LD_EXP 126
36140: IFFALSE 36827
36142: GO 36144
36144: DISABLE
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
// begin enable ;
36156: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36157: LD_ADDR_VAR 0 3
36161: PUSH
36162: LD_EXP 126
36166: PPUSH
36167: CALL 82289 0 1
36171: ST_TO_ADDR
// if not list then
36172: LD_VAR 0 3
36176: NOT
36177: IFFALSE 36181
// exit ;
36179: GO 36827
// for i := 1 to list do
36181: LD_ADDR_VAR 0 1
36185: PUSH
36186: DOUBLE
36187: LD_INT 1
36189: DEC
36190: ST_TO_ADDR
36191: LD_VAR 0 3
36195: PUSH
36196: FOR_TO
36197: IFFALSE 36825
// begin depot := list [ i ] [ 2 ] ;
36199: LD_ADDR_VAR 0 8
36203: PUSH
36204: LD_VAR 0 3
36208: PUSH
36209: LD_VAR 0 1
36213: ARRAY
36214: PUSH
36215: LD_INT 2
36217: ARRAY
36218: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36219: LD_ADDR_VAR 0 5
36223: PUSH
36224: LD_VAR 0 3
36228: PUSH
36229: LD_VAR 0 1
36233: ARRAY
36234: PUSH
36235: LD_INT 1
36237: ARRAY
36238: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36239: LD_VAR 0 8
36243: PPUSH
36244: CALL_OW 301
36248: PUSH
36249: LD_VAR 0 5
36253: PUSH
36254: LD_VAR 0 8
36258: PPUSH
36259: CALL_OW 255
36263: NONEQUAL
36264: OR
36265: IFFALSE 36294
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36267: LD_ADDR_EXP 126
36271: PUSH
36272: LD_EXP 126
36276: PPUSH
36277: LD_VAR 0 8
36281: PPUSH
36282: LD_INT 0
36284: PPUSH
36285: CALL_OW 1
36289: ST_TO_ADDR
// exit ;
36290: POP
36291: POP
36292: GO 36827
// end ; x := list [ i ] [ 3 ] ;
36294: LD_ADDR_VAR 0 6
36298: PUSH
36299: LD_VAR 0 3
36303: PUSH
36304: LD_VAR 0 1
36308: ARRAY
36309: PUSH
36310: LD_INT 3
36312: ARRAY
36313: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36314: LD_ADDR_VAR 0 7
36318: PUSH
36319: LD_VAR 0 3
36323: PUSH
36324: LD_VAR 0 1
36328: ARRAY
36329: PUSH
36330: LD_INT 4
36332: ARRAY
36333: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36334: LD_ADDR_VAR 0 9
36338: PUSH
36339: LD_VAR 0 6
36343: PPUSH
36344: LD_VAR 0 7
36348: PPUSH
36349: LD_INT 16
36351: PPUSH
36352: CALL 80873 0 3
36356: ST_TO_ADDR
// if not cratesNearbyPoint then
36357: LD_VAR 0 9
36361: NOT
36362: IFFALSE 36368
// exit ;
36364: POP
36365: POP
36366: GO 36827
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36368: LD_ADDR_VAR 0 4
36372: PUSH
36373: LD_INT 22
36375: PUSH
36376: LD_VAR 0 5
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 60
36390: PUSH
36391: EMPTY
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 91
36400: PUSH
36401: LD_VAR 0 8
36405: PUSH
36406: LD_INT 6
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 2
36416: PUSH
36417: LD_INT 25
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 25
36429: PUSH
36430: LD_INT 16
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: PPUSH
36448: CALL_OW 69
36452: PUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: CALL_OW 313
36462: PPUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 60
36468: PUSH
36469: EMPTY
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 25
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 25
36491: PUSH
36492: LD_INT 16
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PPUSH
36508: CALL_OW 72
36512: UNION
36513: ST_TO_ADDR
// if tmp then
36514: LD_VAR 0 4
36518: IFFALSE 36598
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36520: LD_ADDR_VAR 0 4
36524: PUSH
36525: LD_VAR 0 4
36529: PPUSH
36530: LD_INT 3
36532: PPUSH
36533: CALL 78840 0 2
36537: ST_TO_ADDR
// for j in tmp do
36538: LD_ADDR_VAR 0 2
36542: PUSH
36543: LD_VAR 0 4
36547: PUSH
36548: FOR_IN
36549: IFFALSE 36592
// begin if IsInUnit ( j ) then
36551: LD_VAR 0 2
36555: PPUSH
36556: CALL_OW 310
36560: IFFALSE 36571
// ComExit ( j ) ;
36562: LD_VAR 0 2
36566: PPUSH
36567: CALL 78923 0 1
// AddComCollect ( j , x , y ) ;
36571: LD_VAR 0 2
36575: PPUSH
36576: LD_VAR 0 6
36580: PPUSH
36581: LD_VAR 0 7
36585: PPUSH
36586: CALL_OW 177
// end ;
36590: GO 36548
36592: POP
36593: POP
// exit ;
36594: POP
36595: POP
36596: GO 36827
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: LD_INT 22
36605: PUSH
36606: LD_VAR 0 5
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 91
36617: PUSH
36618: LD_VAR 0 8
36622: PUSH
36623: LD_INT 8
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: LD_INT 34
36636: PUSH
36637: LD_INT 12
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 34
36646: PUSH
36647: LD_INT 51
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 34
36656: PUSH
36657: LD_INT 32
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 34
36666: PUSH
36667: LD_EXP 50
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: PPUSH
36688: CALL_OW 69
36692: ST_TO_ADDR
// if tmp then
36693: LD_VAR 0 4
36697: IFFALSE 36823
// begin for j in tmp do
36699: LD_ADDR_VAR 0 2
36703: PUSH
36704: LD_VAR 0 4
36708: PUSH
36709: FOR_IN
36710: IFFALSE 36821
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36712: LD_VAR 0 2
36716: PPUSH
36717: CALL_OW 262
36721: PUSH
36722: LD_INT 3
36724: EQUAL
36725: PUSH
36726: LD_VAR 0 2
36730: PPUSH
36731: CALL_OW 261
36735: PUSH
36736: LD_INT 20
36738: GREATER
36739: OR
36740: PUSH
36741: LD_VAR 0 2
36745: PPUSH
36746: CALL_OW 314
36750: NOT
36751: AND
36752: PUSH
36753: LD_VAR 0 2
36757: PPUSH
36758: CALL_OW 263
36762: PUSH
36763: LD_INT 1
36765: NONEQUAL
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: CALL_OW 311
36776: OR
36777: AND
36778: IFFALSE 36819
// begin ComCollect ( j , x , y ) ;
36780: LD_VAR 0 2
36784: PPUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: LD_VAR 0 7
36794: PPUSH
36795: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36799: LD_VAR 0 2
36803: PPUSH
36804: LD_VAR 0 8
36808: PPUSH
36809: CALL_OW 172
// exit ;
36813: POP
36814: POP
36815: POP
36816: POP
36817: GO 36827
// end ;
36819: GO 36709
36821: POP
36822: POP
// end ; end ;
36823: GO 36196
36825: POP
36826: POP
// end ; end_of_file
36827: PPOPN 9
36829: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36830: LD_INT 0
36832: PPUSH
36833: PPUSH
36834: PPUSH
36835: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36836: LD_VAR 0 1
36840: PPUSH
36841: CALL_OW 264
36845: PUSH
36846: LD_EXP 53
36850: EQUAL
36851: IFFALSE 36923
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36853: LD_INT 68
36855: PPUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 255
36865: PPUSH
36866: CALL_OW 321
36870: PUSH
36871: LD_INT 2
36873: EQUAL
36874: IFFALSE 36886
// eff := 70 else
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_INT 70
36883: ST_TO_ADDR
36884: GO 36894
// eff := 30 ;
36886: LD_ADDR_VAR 0 4
36890: PUSH
36891: LD_INT 30
36893: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 250
36903: PPUSH
36904: LD_VAR 0 1
36908: PPUSH
36909: CALL_OW 251
36913: PPUSH
36914: LD_VAR 0 4
36918: PPUSH
36919: CALL_OW 495
// end ; end ;
36923: LD_VAR 0 2
36927: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36928: LD_INT 0
36930: PPUSH
// end ;
36931: LD_VAR 0 4
36935: RET
// export function SOS_Command ( cmd ) ; begin
36936: LD_INT 0
36938: PPUSH
// end ;
36939: LD_VAR 0 2
36943: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36944: LD_INT 0
36946: PPUSH
// end ;
36947: LD_VAR 0 6
36951: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
// if not vehicle or not factory then
36956: LD_VAR 0 1
36960: NOT
36961: PUSH
36962: LD_VAR 0 2
36966: NOT
36967: OR
36968: IFFALSE 36972
// exit ;
36970: GO 37203
// if factoryWaypoints >= factory then
36972: LD_EXP 125
36976: PUSH
36977: LD_VAR 0 2
36981: GREATEREQUAL
36982: IFFALSE 37203
// if factoryWaypoints [ factory ] then
36984: LD_EXP 125
36988: PUSH
36989: LD_VAR 0 2
36993: ARRAY
36994: IFFALSE 37203
// begin if GetControl ( vehicle ) = control_manual then
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 263
37005: PUSH
37006: LD_INT 1
37008: EQUAL
37009: IFFALSE 37090
// begin driver := IsDrivenBy ( vehicle ) ;
37011: LD_ADDR_VAR 0 4
37015: PUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 311
37025: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37026: LD_VAR 0 4
37030: PPUSH
37031: LD_EXP 125
37035: PUSH
37036: LD_VAR 0 2
37040: ARRAY
37041: PUSH
37042: LD_INT 3
37044: ARRAY
37045: PPUSH
37046: LD_EXP 125
37050: PUSH
37051: LD_VAR 0 2
37055: ARRAY
37056: PUSH
37057: LD_INT 4
37059: ARRAY
37060: PPUSH
37061: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37065: LD_VAR 0 4
37069: PPUSH
37070: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37074: LD_VAR 0 4
37078: PPUSH
37079: LD_VAR 0 2
37083: PPUSH
37084: CALL_OW 180
// end else
37088: GO 37203
// if GetControl ( vehicle ) = control_remote then
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 263
37099: PUSH
37100: LD_INT 2
37102: EQUAL
37103: IFFALSE 37164
// begin wait ( 0 0$2 ) ;
37105: LD_INT 70
37107: PPUSH
37108: CALL_OW 67
// if Connect ( vehicle ) then
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL 49251 0 1
37121: IFFALSE 37162
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37123: LD_VAR 0 1
37127: PPUSH
37128: LD_EXP 125
37132: PUSH
37133: LD_VAR 0 2
37137: ARRAY
37138: PUSH
37139: LD_INT 3
37141: ARRAY
37142: PPUSH
37143: LD_EXP 125
37147: PUSH
37148: LD_VAR 0 2
37152: ARRAY
37153: PUSH
37154: LD_INT 4
37156: ARRAY
37157: PPUSH
37158: CALL_OW 171
// end else
37162: GO 37203
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37164: LD_VAR 0 1
37168: PPUSH
37169: LD_EXP 125
37173: PUSH
37174: LD_VAR 0 2
37178: ARRAY
37179: PUSH
37180: LD_INT 3
37182: ARRAY
37183: PPUSH
37184: LD_EXP 125
37188: PUSH
37189: LD_VAR 0 2
37193: ARRAY
37194: PUSH
37195: LD_INT 4
37197: ARRAY
37198: PPUSH
37199: CALL_OW 171
// end ; end ;
37203: LD_VAR 0 3
37207: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37208: LD_INT 0
37210: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37211: LD_VAR 0 1
37215: PUSH
37216: LD_INT 250
37218: EQUAL
37219: PUSH
37220: LD_VAR 0 2
37224: PPUSH
37225: CALL_OW 264
37229: PUSH
37230: LD_EXP 56
37234: EQUAL
37235: AND
37236: IFFALSE 37257
// MinerPlaceMine ( unit , x , y ) ;
37238: LD_VAR 0 2
37242: PPUSH
37243: LD_VAR 0 4
37247: PPUSH
37248: LD_VAR 0 5
37252: PPUSH
37253: CALL 39656 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37257: LD_VAR 0 1
37261: PUSH
37262: LD_INT 251
37264: EQUAL
37265: PUSH
37266: LD_VAR 0 2
37270: PPUSH
37271: CALL_OW 264
37275: PUSH
37276: LD_EXP 56
37280: EQUAL
37281: AND
37282: IFFALSE 37303
// MinerDetonateMine ( unit , x , y ) ;
37284: LD_VAR 0 2
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_VAR 0 5
37298: PPUSH
37299: CALL 39933 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37303: LD_VAR 0 1
37307: PUSH
37308: LD_INT 252
37310: EQUAL
37311: PUSH
37312: LD_VAR 0 2
37316: PPUSH
37317: CALL_OW 264
37321: PUSH
37322: LD_EXP 56
37326: EQUAL
37327: AND
37328: IFFALSE 37349
// MinerCreateMinefield ( unit , x , y ) ;
37330: LD_VAR 0 2
37334: PPUSH
37335: LD_VAR 0 4
37339: PPUSH
37340: LD_VAR 0 5
37344: PPUSH
37345: CALL 40350 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37349: LD_VAR 0 1
37353: PUSH
37354: LD_INT 253
37356: EQUAL
37357: PUSH
37358: LD_VAR 0 2
37362: PPUSH
37363: CALL_OW 257
37367: PUSH
37368: LD_INT 5
37370: EQUAL
37371: AND
37372: IFFALSE 37393
// ComBinocular ( unit , x , y ) ;
37374: LD_VAR 0 2
37378: PPUSH
37379: LD_VAR 0 4
37383: PPUSH
37384: LD_VAR 0 5
37388: PPUSH
37389: CALL 40721 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37393: LD_VAR 0 1
37397: PUSH
37398: LD_INT 254
37400: EQUAL
37401: PUSH
37402: LD_VAR 0 2
37406: PPUSH
37407: CALL_OW 264
37411: PUSH
37412: LD_EXP 51
37416: EQUAL
37417: AND
37418: PUSH
37419: LD_VAR 0 3
37423: PPUSH
37424: CALL_OW 263
37428: PUSH
37429: LD_INT 3
37431: EQUAL
37432: AND
37433: IFFALSE 37449
// HackDestroyVehicle ( unit , selectedUnit ) ;
37435: LD_VAR 0 2
37439: PPUSH
37440: LD_VAR 0 3
37444: PPUSH
37445: CALL 39016 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37449: LD_VAR 0 1
37453: PUSH
37454: LD_INT 255
37456: EQUAL
37457: PUSH
37458: LD_VAR 0 2
37462: PPUSH
37463: CALL_OW 264
37467: PUSH
37468: LD_INT 14
37470: PUSH
37471: LD_INT 53
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: IN
37478: AND
37479: PUSH
37480: LD_VAR 0 4
37484: PPUSH
37485: LD_VAR 0 5
37489: PPUSH
37490: CALL_OW 488
37494: AND
37495: IFFALSE 37519
// CutTreeXYR ( unit , x , y , 12 ) ;
37497: LD_VAR 0 2
37501: PPUSH
37502: LD_VAR 0 4
37506: PPUSH
37507: LD_VAR 0 5
37511: PPUSH
37512: LD_INT 12
37514: PPUSH
37515: CALL 37582 0 4
// if cmd = 256 then
37519: LD_VAR 0 1
37523: PUSH
37524: LD_INT 256
37526: EQUAL
37527: IFFALSE 37548
// SetFactoryWaypoint ( unit , x , y ) ;
37529: LD_VAR 0 2
37533: PPUSH
37534: LD_VAR 0 4
37538: PPUSH
37539: LD_VAR 0 5
37543: PPUSH
37544: CALL 35517 0 3
// if cmd = 257 then
37548: LD_VAR 0 1
37552: PUSH
37553: LD_INT 257
37555: EQUAL
37556: IFFALSE 37577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37558: LD_VAR 0 2
37562: PPUSH
37563: LD_VAR 0 4
37567: PPUSH
37568: LD_VAR 0 5
37572: PPUSH
37573: CALL 35879 0 3
// end ;
37577: LD_VAR 0 6
37581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37582: LD_INT 0
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37593: LD_VAR 0 1
37597: NOT
37598: PUSH
37599: LD_VAR 0 2
37603: PPUSH
37604: LD_VAR 0 3
37608: PPUSH
37609: CALL_OW 488
37613: NOT
37614: OR
37615: PUSH
37616: LD_VAR 0 4
37620: NOT
37621: OR
37622: IFFALSE 37626
// exit ;
37624: GO 37966
// list := [ ] ;
37626: LD_ADDR_VAR 0 13
37630: PUSH
37631: EMPTY
37632: ST_TO_ADDR
// if x - r < 0 then
37633: LD_VAR 0 2
37637: PUSH
37638: LD_VAR 0 4
37642: MINUS
37643: PUSH
37644: LD_INT 0
37646: LESS
37647: IFFALSE 37659
// min_x := 0 else
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_INT 0
37656: ST_TO_ADDR
37657: GO 37675
// min_x := x - r ;
37659: LD_ADDR_VAR 0 7
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_VAR 0 4
37673: MINUS
37674: ST_TO_ADDR
// if y - r < 0 then
37675: LD_VAR 0 3
37679: PUSH
37680: LD_VAR 0 4
37684: MINUS
37685: PUSH
37686: LD_INT 0
37688: LESS
37689: IFFALSE 37701
// min_y := 0 else
37691: LD_ADDR_VAR 0 8
37695: PUSH
37696: LD_INT 0
37698: ST_TO_ADDR
37699: GO 37717
// min_y := y - r ;
37701: LD_ADDR_VAR 0 8
37705: PUSH
37706: LD_VAR 0 3
37710: PUSH
37711: LD_VAR 0 4
37715: MINUS
37716: ST_TO_ADDR
// max_x := x + r ;
37717: LD_ADDR_VAR 0 9
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_VAR 0 4
37731: PLUS
37732: ST_TO_ADDR
// max_y := y + r ;
37733: LD_ADDR_VAR 0 10
37737: PUSH
37738: LD_VAR 0 3
37742: PUSH
37743: LD_VAR 0 4
37747: PLUS
37748: ST_TO_ADDR
// for _x = min_x to max_x do
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: DOUBLE
37755: LD_VAR 0 7
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 9
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37884
// for _y = min_y to max_y do
37769: LD_ADDR_VAR 0 12
37773: PUSH
37774: DOUBLE
37775: LD_VAR 0 8
37779: DEC
37780: ST_TO_ADDR
37781: LD_VAR 0 10
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37880
// begin if not ValidHex ( _x , _y ) then
37789: LD_VAR 0 11
37793: PPUSH
37794: LD_VAR 0 12
37798: PPUSH
37799: CALL_OW 488
37803: NOT
37804: IFFALSE 37808
// continue ;
37806: GO 37786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37808: LD_VAR 0 11
37812: PPUSH
37813: LD_VAR 0 12
37817: PPUSH
37818: CALL_OW 351
37822: PUSH
37823: LD_VAR 0 11
37827: PPUSH
37828: LD_VAR 0 12
37832: PPUSH
37833: CALL_OW 554
37837: AND
37838: IFFALSE 37878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37840: LD_ADDR_VAR 0 13
37844: PUSH
37845: LD_VAR 0 13
37849: PPUSH
37850: LD_VAR 0 13
37854: PUSH
37855: LD_INT 1
37857: PLUS
37858: PPUSH
37859: LD_VAR 0 11
37863: PUSH
37864: LD_VAR 0 12
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PPUSH
37873: CALL_OW 2
37877: ST_TO_ADDR
// end ;
37878: GO 37786
37880: POP
37881: POP
37882: GO 37766
37884: POP
37885: POP
// if not list then
37886: LD_VAR 0 13
37890: NOT
37891: IFFALSE 37895
// exit ;
37893: GO 37966
// for i in list do
37895: LD_ADDR_VAR 0 6
37899: PUSH
37900: LD_VAR 0 13
37904: PUSH
37905: FOR_IN
37906: IFFALSE 37964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37908: LD_VAR 0 1
37912: PPUSH
37913: LD_STRING M
37915: PUSH
37916: LD_VAR 0 6
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PUSH
37925: LD_VAR 0 6
37929: PUSH
37930: LD_INT 2
37932: ARRAY
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: PPUSH
37958: CALL_OW 447
37962: GO 37905
37964: POP
37965: POP
// end ;
37966: LD_VAR 0 5
37970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37971: LD_EXP 128
37975: NOT
37976: IFFALSE 38026
37978: GO 37980
37980: DISABLE
// begin initHack := true ;
37981: LD_ADDR_EXP 128
37985: PUSH
37986: LD_INT 1
37988: ST_TO_ADDR
// hackTanks := [ ] ;
37989: LD_ADDR_EXP 129
37993: PUSH
37994: EMPTY
37995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37996: LD_ADDR_EXP 130
38000: PUSH
38001: EMPTY
38002: ST_TO_ADDR
// hackLimit := 3 ;
38003: LD_ADDR_EXP 131
38007: PUSH
38008: LD_INT 3
38010: ST_TO_ADDR
// hackDist := 12 ;
38011: LD_ADDR_EXP 132
38015: PUSH
38016: LD_INT 12
38018: ST_TO_ADDR
// hackCounter := [ ] ;
38019: LD_ADDR_EXP 133
38023: PUSH
38024: EMPTY
38025: ST_TO_ADDR
// end ;
38026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38027: LD_EXP 128
38031: PUSH
38032: LD_INT 34
38034: PUSH
38035: LD_EXP 51
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PPUSH
38044: CALL_OW 69
38048: AND
38049: IFFALSE 38304
38051: GO 38053
38053: DISABLE
38054: LD_INT 0
38056: PPUSH
38057: PPUSH
// begin enable ;
38058: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38059: LD_ADDR_VAR 0 1
38063: PUSH
38064: LD_INT 34
38066: PUSH
38067: LD_EXP 51
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PPUSH
38076: CALL_OW 69
38080: PUSH
38081: FOR_IN
38082: IFFALSE 38302
// begin if not i in hackTanks then
38084: LD_VAR 0 1
38088: PUSH
38089: LD_EXP 129
38093: IN
38094: NOT
38095: IFFALSE 38178
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38097: LD_ADDR_EXP 129
38101: PUSH
38102: LD_EXP 129
38106: PPUSH
38107: LD_EXP 129
38111: PUSH
38112: LD_INT 1
38114: PLUS
38115: PPUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 1
38125: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38126: LD_ADDR_EXP 130
38130: PUSH
38131: LD_EXP 130
38135: PPUSH
38136: LD_EXP 130
38140: PUSH
38141: LD_INT 1
38143: PLUS
38144: PPUSH
38145: EMPTY
38146: PPUSH
38147: CALL_OW 1
38151: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38152: LD_ADDR_EXP 133
38156: PUSH
38157: LD_EXP 133
38161: PPUSH
38162: LD_EXP 133
38166: PUSH
38167: LD_INT 1
38169: PLUS
38170: PPUSH
38171: EMPTY
38172: PPUSH
38173: CALL_OW 1
38177: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 302
38187: NOT
38188: IFFALSE 38201
// begin HackUnlinkAll ( i ) ;
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL 38307 0 1
// continue ;
38199: GO 38081
// end ; HackCheckCapturedStatus ( i ) ;
38201: LD_VAR 0 1
38205: PPUSH
38206: CALL 38750 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38210: LD_ADDR_VAR 0 2
38214: PUSH
38215: LD_INT 81
38217: PUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 255
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 33
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 91
38244: PUSH
38245: LD_VAR 0 1
38249: PUSH
38250: LD_EXP 132
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 50
38262: PUSH
38263: EMPTY
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: PPUSH
38272: CALL_OW 69
38276: ST_TO_ADDR
// if not tmp then
38277: LD_VAR 0 2
38281: NOT
38282: IFFALSE 38286
// continue ;
38284: GO 38081
// HackLink ( i , tmp ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: CALL 38443 0 2
// end ;
38300: GO 38081
38302: POP
38303: POP
// end ;
38304: PPOPN 2
38306: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
// if not hack in hackTanks then
38312: LD_VAR 0 1
38316: PUSH
38317: LD_EXP 129
38321: IN
38322: NOT
38323: IFFALSE 38327
// exit ;
38325: GO 38438
// index := GetElementIndex ( hackTanks , hack ) ;
38327: LD_ADDR_VAR 0 4
38331: PUSH
38332: LD_EXP 129
38336: PPUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL 46065 0 2
38346: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38347: LD_EXP 130
38351: PUSH
38352: LD_VAR 0 4
38356: ARRAY
38357: IFFALSE 38438
// begin for i in hackTanksCaptured [ index ] do
38359: LD_ADDR_VAR 0 3
38363: PUSH
38364: LD_EXP 130
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PUSH
38375: FOR_IN
38376: IFFALSE 38402
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38378: LD_VAR 0 3
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: PPUSH
38387: LD_VAR 0 3
38391: PUSH
38392: LD_INT 2
38394: ARRAY
38395: PPUSH
38396: CALL_OW 235
38400: GO 38375
38402: POP
38403: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38404: LD_ADDR_EXP 130
38408: PUSH
38409: LD_EXP 130
38413: PPUSH
38414: LD_VAR 0 4
38418: PPUSH
38419: EMPTY
38420: PPUSH
38421: CALL_OW 1
38425: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38426: LD_VAR 0 1
38430: PPUSH
38431: LD_INT 0
38433: PPUSH
38434: CALL_OW 505
// end ; end ;
38438: LD_VAR 0 2
38442: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38443: LD_INT 0
38445: PPUSH
38446: PPUSH
38447: PPUSH
// if not hack in hackTanks or not vehicles then
38448: LD_VAR 0 1
38452: PUSH
38453: LD_EXP 129
38457: IN
38458: NOT
38459: PUSH
38460: LD_VAR 0 2
38464: NOT
38465: OR
38466: IFFALSE 38470
// exit ;
38468: GO 38745
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38470: LD_ADDR_VAR 0 2
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: LD_VAR 0 2
38484: PPUSH
38485: LD_INT 1
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL 46715 0 4
38495: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_EXP 129
38505: PPUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL 46065 0 2
38515: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38516: LD_EXP 130
38520: PUSH
38521: LD_VAR 0 5
38525: ARRAY
38526: PUSH
38527: LD_EXP 131
38531: LESS
38532: IFFALSE 38721
// begin for i := 1 to vehicles do
38534: LD_ADDR_VAR 0 4
38538: PUSH
38539: DOUBLE
38540: LD_INT 1
38542: DEC
38543: ST_TO_ADDR
38544: LD_VAR 0 2
38548: PUSH
38549: FOR_TO
38550: IFFALSE 38719
// begin if hackTanksCaptured [ index ] = hackLimit then
38552: LD_EXP 130
38556: PUSH
38557: LD_VAR 0 5
38561: ARRAY
38562: PUSH
38563: LD_EXP 131
38567: EQUAL
38568: IFFALSE 38572
// break ;
38570: GO 38719
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38572: LD_ADDR_EXP 133
38576: PUSH
38577: LD_EXP 133
38581: PPUSH
38582: LD_VAR 0 5
38586: PPUSH
38587: LD_EXP 133
38591: PUSH
38592: LD_VAR 0 5
38596: ARRAY
38597: PUSH
38598: LD_INT 1
38600: PLUS
38601: PPUSH
38602: CALL_OW 1
38606: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38607: LD_ADDR_EXP 130
38611: PUSH
38612: LD_EXP 130
38616: PPUSH
38617: LD_VAR 0 5
38621: PUSH
38622: LD_EXP 130
38626: PUSH
38627: LD_VAR 0 5
38631: ARRAY
38632: PUSH
38633: LD_INT 1
38635: PLUS
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PPUSH
38641: LD_VAR 0 2
38645: PUSH
38646: LD_VAR 0 4
38650: ARRAY
38651: PUSH
38652: LD_VAR 0 2
38656: PUSH
38657: LD_VAR 0 4
38661: ARRAY
38662: PPUSH
38663: CALL_OW 255
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PPUSH
38672: CALL 46280 0 3
38676: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38677: LD_VAR 0 2
38681: PUSH
38682: LD_VAR 0 4
38686: ARRAY
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 255
38697: PPUSH
38698: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38702: LD_VAR 0 2
38706: PUSH
38707: LD_VAR 0 4
38711: ARRAY
38712: PPUSH
38713: CALL_OW 141
// end ;
38717: GO 38549
38719: POP
38720: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38721: LD_VAR 0 1
38725: PPUSH
38726: LD_EXP 130
38730: PUSH
38731: LD_VAR 0 5
38735: ARRAY
38736: PUSH
38737: LD_INT 0
38739: PLUS
38740: PPUSH
38741: CALL_OW 505
// end ;
38745: LD_VAR 0 3
38749: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38750: LD_INT 0
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
// if not hack in hackTanks then
38756: LD_VAR 0 1
38760: PUSH
38761: LD_EXP 129
38765: IN
38766: NOT
38767: IFFALSE 38771
// exit ;
38769: GO 39011
// index := GetElementIndex ( hackTanks , hack ) ;
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_EXP 129
38780: PPUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL 46065 0 2
38790: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: DOUBLE
38797: LD_EXP 130
38801: PUSH
38802: LD_VAR 0 4
38806: ARRAY
38807: INC
38808: ST_TO_ADDR
38809: LD_INT 1
38811: PUSH
38812: FOR_DOWNTO
38813: IFFALSE 38985
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_EXP 130
38824: PUSH
38825: LD_VAR 0 4
38829: ARRAY
38830: PUSH
38831: LD_VAR 0 3
38835: ARRAY
38836: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38837: LD_VAR 0 5
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: PPUSH
38846: CALL_OW 302
38850: NOT
38851: PUSH
38852: LD_VAR 0 5
38856: PUSH
38857: LD_INT 1
38859: ARRAY
38860: PPUSH
38861: CALL_OW 255
38865: PUSH
38866: LD_VAR 0 1
38870: PPUSH
38871: CALL_OW 255
38875: NONEQUAL
38876: OR
38877: IFFALSE 38983
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38879: LD_VAR 0 5
38883: PUSH
38884: LD_INT 1
38886: ARRAY
38887: PPUSH
38888: CALL_OW 305
38892: PUSH
38893: LD_VAR 0 5
38897: PUSH
38898: LD_INT 1
38900: ARRAY
38901: PPUSH
38902: CALL_OW 255
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 255
38916: EQUAL
38917: AND
38918: IFFALSE 38942
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38920: LD_VAR 0 5
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: LD_VAR 0 5
38933: PUSH
38934: LD_INT 2
38936: ARRAY
38937: PPUSH
38938: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38942: LD_ADDR_EXP 130
38946: PUSH
38947: LD_EXP 130
38951: PPUSH
38952: LD_VAR 0 4
38956: PPUSH
38957: LD_EXP 130
38961: PUSH
38962: LD_VAR 0 4
38966: ARRAY
38967: PPUSH
38968: LD_VAR 0 3
38972: PPUSH
38973: CALL_OW 3
38977: PPUSH
38978: CALL_OW 1
38982: ST_TO_ADDR
// end ; end ;
38983: GO 38812
38985: POP
38986: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38987: LD_VAR 0 1
38991: PPUSH
38992: LD_EXP 130
38996: PUSH
38997: LD_VAR 0 4
39001: ARRAY
39002: PUSH
39003: LD_INT 0
39005: PLUS
39006: PPUSH
39007: CALL_OW 505
// end ;
39011: LD_VAR 0 2
39015: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
// if not hack in hackTanks then
39022: LD_VAR 0 1
39026: PUSH
39027: LD_EXP 129
39031: IN
39032: NOT
39033: IFFALSE 39037
// exit ;
39035: GO 39122
// index := GetElementIndex ( hackTanks , hack ) ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_EXP 129
39046: PPUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL 46065 0 2
39056: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39057: LD_ADDR_VAR 0 4
39061: PUSH
39062: DOUBLE
39063: LD_INT 1
39065: DEC
39066: ST_TO_ADDR
39067: LD_EXP 130
39071: PUSH
39072: LD_VAR 0 5
39076: ARRAY
39077: PUSH
39078: FOR_TO
39079: IFFALSE 39120
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39081: LD_EXP 130
39085: PUSH
39086: LD_VAR 0 5
39090: ARRAY
39091: PUSH
39092: LD_VAR 0 4
39096: ARRAY
39097: PUSH
39098: LD_INT 1
39100: ARRAY
39101: PUSH
39102: LD_VAR 0 2
39106: EQUAL
39107: IFFALSE 39118
// KillUnit ( vehicle ) ;
39109: LD_VAR 0 2
39113: PPUSH
39114: CALL_OW 66
39118: GO 39078
39120: POP
39121: POP
// end ;
39122: LD_VAR 0 3
39126: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39127: LD_EXP 134
39131: NOT
39132: IFFALSE 39167
39134: GO 39136
39136: DISABLE
// begin initMiner := true ;
39137: LD_ADDR_EXP 134
39141: PUSH
39142: LD_INT 1
39144: ST_TO_ADDR
// minersList := [ ] ;
39145: LD_ADDR_EXP 135
39149: PUSH
39150: EMPTY
39151: ST_TO_ADDR
// minerMinesList := [ ] ;
39152: LD_ADDR_EXP 136
39156: PUSH
39157: EMPTY
39158: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39159: LD_ADDR_EXP 137
39163: PUSH
39164: LD_INT 5
39166: ST_TO_ADDR
// end ;
39167: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39168: LD_EXP 134
39172: PUSH
39173: LD_INT 34
39175: PUSH
39176: LD_EXP 56
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PPUSH
39185: CALL_OW 69
39189: AND
39190: IFFALSE 39653
39192: GO 39194
39194: DISABLE
39195: LD_INT 0
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
// begin enable ;
39201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39202: LD_ADDR_VAR 0 1
39206: PUSH
39207: LD_INT 34
39209: PUSH
39210: LD_EXP 56
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PPUSH
39219: CALL_OW 69
39223: PUSH
39224: FOR_IN
39225: IFFALSE 39297
// begin if not i in minersList then
39227: LD_VAR 0 1
39231: PUSH
39232: LD_EXP 135
39236: IN
39237: NOT
39238: IFFALSE 39295
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39240: LD_ADDR_EXP 135
39244: PUSH
39245: LD_EXP 135
39249: PPUSH
39250: LD_EXP 135
39254: PUSH
39255: LD_INT 1
39257: PLUS
39258: PPUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: CALL_OW 1
39268: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39269: LD_ADDR_EXP 136
39273: PUSH
39274: LD_EXP 136
39278: PPUSH
39279: LD_EXP 136
39283: PUSH
39284: LD_INT 1
39286: PLUS
39287: PPUSH
39288: EMPTY
39289: PPUSH
39290: CALL_OW 1
39294: ST_TO_ADDR
// end end ;
39295: GO 39224
39297: POP
39298: POP
// for i := minerMinesList downto 1 do
39299: LD_ADDR_VAR 0 1
39303: PUSH
39304: DOUBLE
39305: LD_EXP 136
39309: INC
39310: ST_TO_ADDR
39311: LD_INT 1
39313: PUSH
39314: FOR_DOWNTO
39315: IFFALSE 39651
// begin if IsLive ( minersList [ i ] ) then
39317: LD_EXP 135
39321: PUSH
39322: LD_VAR 0 1
39326: ARRAY
39327: PPUSH
39328: CALL_OW 300
39332: IFFALSE 39360
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39334: LD_EXP 135
39338: PUSH
39339: LD_VAR 0 1
39343: ARRAY
39344: PPUSH
39345: LD_EXP 136
39349: PUSH
39350: LD_VAR 0 1
39354: ARRAY
39355: PPUSH
39356: CALL_OW 505
// if not minerMinesList [ i ] then
39360: LD_EXP 136
39364: PUSH
39365: LD_VAR 0 1
39369: ARRAY
39370: NOT
39371: IFFALSE 39375
// continue ;
39373: GO 39314
// for j := minerMinesList [ i ] downto 1 do
39375: LD_ADDR_VAR 0 2
39379: PUSH
39380: DOUBLE
39381: LD_EXP 136
39385: PUSH
39386: LD_VAR 0 1
39390: ARRAY
39391: INC
39392: ST_TO_ADDR
39393: LD_INT 1
39395: PUSH
39396: FOR_DOWNTO
39397: IFFALSE 39647
// begin side := GetSide ( minersList [ i ] ) ;
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_EXP 135
39408: PUSH
39409: LD_VAR 0 1
39413: ARRAY
39414: PPUSH
39415: CALL_OW 255
39419: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39420: LD_ADDR_VAR 0 4
39424: PUSH
39425: LD_EXP 136
39429: PUSH
39430: LD_VAR 0 1
39434: ARRAY
39435: PUSH
39436: LD_VAR 0 2
39440: ARRAY
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PPUSH
39446: LD_EXP 136
39450: PUSH
39451: LD_VAR 0 1
39455: ARRAY
39456: PUSH
39457: LD_VAR 0 2
39461: ARRAY
39462: PUSH
39463: LD_INT 2
39465: ARRAY
39466: PPUSH
39467: CALL_OW 428
39471: ST_TO_ADDR
// if not tmp then
39472: LD_VAR 0 4
39476: NOT
39477: IFFALSE 39481
// continue ;
39479: GO 39396
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39481: LD_VAR 0 4
39485: PUSH
39486: LD_INT 81
39488: PUSH
39489: LD_VAR 0 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PPUSH
39498: CALL_OW 69
39502: IN
39503: PUSH
39504: LD_EXP 136
39508: PUSH
39509: LD_VAR 0 1
39513: ARRAY
39514: PUSH
39515: LD_VAR 0 2
39519: ARRAY
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: PPUSH
39525: LD_EXP 136
39529: PUSH
39530: LD_VAR 0 1
39534: ARRAY
39535: PUSH
39536: LD_VAR 0 2
39540: ARRAY
39541: PUSH
39542: LD_INT 2
39544: ARRAY
39545: PPUSH
39546: CALL_OW 458
39550: AND
39551: IFFALSE 39645
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39553: LD_EXP 136
39557: PUSH
39558: LD_VAR 0 1
39562: ARRAY
39563: PUSH
39564: LD_VAR 0 2
39568: ARRAY
39569: PUSH
39570: LD_INT 1
39572: ARRAY
39573: PPUSH
39574: LD_EXP 136
39578: PUSH
39579: LD_VAR 0 1
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: PUSH
39591: LD_INT 2
39593: ARRAY
39594: PPUSH
39595: LD_VAR 0 3
39599: PPUSH
39600: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39604: LD_ADDR_EXP 136
39608: PUSH
39609: LD_EXP 136
39613: PPUSH
39614: LD_VAR 0 1
39618: PPUSH
39619: LD_EXP 136
39623: PUSH
39624: LD_VAR 0 1
39628: ARRAY
39629: PPUSH
39630: LD_VAR 0 2
39634: PPUSH
39635: CALL_OW 3
39639: PPUSH
39640: CALL_OW 1
39644: ST_TO_ADDR
// end ; end ;
39645: GO 39396
39647: POP
39648: POP
// end ;
39649: GO 39314
39651: POP
39652: POP
// end ;
39653: PPOPN 4
39655: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39656: LD_INT 0
39658: PPUSH
39659: PPUSH
// result := false ;
39660: LD_ADDR_VAR 0 4
39664: PUSH
39665: LD_INT 0
39667: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 264
39677: PUSH
39678: LD_EXP 56
39682: EQUAL
39683: NOT
39684: IFFALSE 39688
// exit ;
39686: GO 39928
// index := GetElementIndex ( minersList , unit ) ;
39688: LD_ADDR_VAR 0 5
39692: PUSH
39693: LD_EXP 135
39697: PPUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL 46065 0 2
39707: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39708: LD_EXP 136
39712: PUSH
39713: LD_VAR 0 5
39717: ARRAY
39718: PUSH
39719: LD_EXP 137
39723: GREATEREQUAL
39724: IFFALSE 39728
// exit ;
39726: GO 39928
// ComMoveXY ( unit , x , y ) ;
39728: LD_VAR 0 1
39732: PPUSH
39733: LD_VAR 0 2
39737: PPUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39747: LD_INT 35
39749: PPUSH
39750: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39754: LD_VAR 0 1
39758: PPUSH
39759: LD_VAR 0 2
39763: PPUSH
39764: LD_VAR 0 3
39768: PPUSH
39769: CALL 77334 0 3
39773: NOT
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 314
39784: AND
39785: IFFALSE 39789
// exit ;
39787: GO 39928
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39789: LD_VAR 0 2
39793: PPUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: CALL_OW 428
39803: PUSH
39804: LD_VAR 0 1
39808: EQUAL
39809: PUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 314
39819: NOT
39820: AND
39821: IFFALSE 39747
// PlaySoundXY ( x , y , PlantMine ) ;
39823: LD_VAR 0 2
39827: PPUSH
39828: LD_VAR 0 3
39832: PPUSH
39833: LD_STRING PlantMine
39835: PPUSH
39836: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39840: LD_VAR 0 2
39844: PPUSH
39845: LD_VAR 0 3
39849: PPUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 255
39859: PPUSH
39860: LD_INT 0
39862: PPUSH
39863: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39867: LD_ADDR_EXP 136
39871: PUSH
39872: LD_EXP 136
39876: PPUSH
39877: LD_VAR 0 5
39881: PUSH
39882: LD_EXP 136
39886: PUSH
39887: LD_VAR 0 5
39891: ARRAY
39892: PUSH
39893: LD_INT 1
39895: PLUS
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PPUSH
39901: LD_VAR 0 2
39905: PUSH
39906: LD_VAR 0 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PPUSH
39915: CALL 46280 0 3
39919: ST_TO_ADDR
// result := true ;
39920: LD_ADDR_VAR 0 4
39924: PUSH
39925: LD_INT 1
39927: ST_TO_ADDR
// end ;
39928: LD_VAR 0 4
39932: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39933: LD_INT 0
39935: PPUSH
39936: PPUSH
39937: PPUSH
// if not unit in minersList then
39938: LD_VAR 0 1
39942: PUSH
39943: LD_EXP 135
39947: IN
39948: NOT
39949: IFFALSE 39953
// exit ;
39951: GO 40345
// index := GetElementIndex ( minersList , unit ) ;
39953: LD_ADDR_VAR 0 6
39957: PUSH
39958: LD_EXP 135
39962: PPUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL 46065 0 2
39972: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39973: LD_ADDR_VAR 0 5
39977: PUSH
39978: DOUBLE
39979: LD_EXP 136
39983: PUSH
39984: LD_VAR 0 6
39988: ARRAY
39989: INC
39990: ST_TO_ADDR
39991: LD_INT 1
39993: PUSH
39994: FOR_DOWNTO
39995: IFFALSE 40156
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39997: LD_EXP 136
40001: PUSH
40002: LD_VAR 0 6
40006: ARRAY
40007: PUSH
40008: LD_VAR 0 5
40012: ARRAY
40013: PUSH
40014: LD_INT 1
40016: ARRAY
40017: PUSH
40018: LD_VAR 0 2
40022: EQUAL
40023: PUSH
40024: LD_EXP 136
40028: PUSH
40029: LD_VAR 0 6
40033: ARRAY
40034: PUSH
40035: LD_VAR 0 5
40039: ARRAY
40040: PUSH
40041: LD_INT 2
40043: ARRAY
40044: PUSH
40045: LD_VAR 0 3
40049: EQUAL
40050: AND
40051: IFFALSE 40154
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40053: LD_EXP 136
40057: PUSH
40058: LD_VAR 0 6
40062: ARRAY
40063: PUSH
40064: LD_VAR 0 5
40068: ARRAY
40069: PUSH
40070: LD_INT 1
40072: ARRAY
40073: PPUSH
40074: LD_EXP 136
40078: PUSH
40079: LD_VAR 0 6
40083: ARRAY
40084: PUSH
40085: LD_VAR 0 5
40089: ARRAY
40090: PUSH
40091: LD_INT 2
40093: ARRAY
40094: PPUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 255
40104: PPUSH
40105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40109: LD_ADDR_EXP 136
40113: PUSH
40114: LD_EXP 136
40118: PPUSH
40119: LD_VAR 0 6
40123: PPUSH
40124: LD_EXP 136
40128: PUSH
40129: LD_VAR 0 6
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 5
40139: PPUSH
40140: CALL_OW 3
40144: PPUSH
40145: CALL_OW 1
40149: ST_TO_ADDR
// exit ;
40150: POP
40151: POP
40152: GO 40345
// end ; end ;
40154: GO 39994
40156: POP
40157: POP
// for i := minerMinesList [ index ] downto 1 do
40158: LD_ADDR_VAR 0 5
40162: PUSH
40163: DOUBLE
40164: LD_EXP 136
40168: PUSH
40169: LD_VAR 0 6
40173: ARRAY
40174: INC
40175: ST_TO_ADDR
40176: LD_INT 1
40178: PUSH
40179: FOR_DOWNTO
40180: IFFALSE 40343
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40182: LD_EXP 136
40186: PUSH
40187: LD_VAR 0 6
40191: ARRAY
40192: PUSH
40193: LD_VAR 0 5
40197: ARRAY
40198: PUSH
40199: LD_INT 1
40201: ARRAY
40202: PPUSH
40203: LD_EXP 136
40207: PUSH
40208: LD_VAR 0 6
40212: ARRAY
40213: PUSH
40214: LD_VAR 0 5
40218: ARRAY
40219: PUSH
40220: LD_INT 2
40222: ARRAY
40223: PPUSH
40224: LD_VAR 0 2
40228: PPUSH
40229: LD_VAR 0 3
40233: PPUSH
40234: CALL_OW 298
40238: PUSH
40239: LD_INT 6
40241: LESS
40242: IFFALSE 40341
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40244: LD_EXP 136
40248: PUSH
40249: LD_VAR 0 6
40253: ARRAY
40254: PUSH
40255: LD_VAR 0 5
40259: ARRAY
40260: PUSH
40261: LD_INT 1
40263: ARRAY
40264: PPUSH
40265: LD_EXP 136
40269: PUSH
40270: LD_VAR 0 6
40274: ARRAY
40275: PUSH
40276: LD_VAR 0 5
40280: ARRAY
40281: PUSH
40282: LD_INT 2
40284: ARRAY
40285: PPUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 255
40295: PPUSH
40296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40300: LD_ADDR_EXP 136
40304: PUSH
40305: LD_EXP 136
40309: PPUSH
40310: LD_VAR 0 6
40314: PPUSH
40315: LD_EXP 136
40319: PUSH
40320: LD_VAR 0 6
40324: ARRAY
40325: PPUSH
40326: LD_VAR 0 5
40330: PPUSH
40331: CALL_OW 3
40335: PPUSH
40336: CALL_OW 1
40340: ST_TO_ADDR
// end ; end ;
40341: GO 40179
40343: POP
40344: POP
// end ;
40345: LD_VAR 0 4
40349: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40350: LD_INT 0
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40361: LD_VAR 0 1
40365: PPUSH
40366: CALL_OW 264
40370: PUSH
40371: LD_EXP 56
40375: EQUAL
40376: NOT
40377: PUSH
40378: LD_VAR 0 1
40382: PUSH
40383: LD_EXP 135
40387: IN
40388: NOT
40389: OR
40390: IFFALSE 40394
// exit ;
40392: GO 40716
// index := GetElementIndex ( minersList , unit ) ;
40394: LD_ADDR_VAR 0 6
40398: PUSH
40399: LD_EXP 135
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL 46065 0 2
40413: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40414: LD_ADDR_VAR 0 8
40418: PUSH
40419: LD_EXP 137
40423: PUSH
40424: LD_EXP 136
40428: PUSH
40429: LD_VAR 0 6
40433: ARRAY
40434: MINUS
40435: ST_TO_ADDR
// if not minesFreeAmount then
40436: LD_VAR 0 8
40440: NOT
40441: IFFALSE 40445
// exit ;
40443: GO 40716
// tmp := [ ] ;
40445: LD_ADDR_VAR 0 7
40449: PUSH
40450: EMPTY
40451: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40452: LD_ADDR_VAR 0 5
40456: PUSH
40457: DOUBLE
40458: LD_INT 1
40460: DEC
40461: ST_TO_ADDR
40462: LD_VAR 0 8
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40663
// begin _d := rand ( 0 , 5 ) ;
40470: LD_ADDR_VAR 0 11
40474: PUSH
40475: LD_INT 0
40477: PPUSH
40478: LD_INT 5
40480: PPUSH
40481: CALL_OW 12
40485: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40486: LD_ADDR_VAR 0 12
40490: PUSH
40491: LD_INT 2
40493: PPUSH
40494: LD_INT 6
40496: PPUSH
40497: CALL_OW 12
40501: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40502: LD_ADDR_VAR 0 9
40506: PUSH
40507: LD_VAR 0 2
40511: PPUSH
40512: LD_VAR 0 11
40516: PPUSH
40517: LD_VAR 0 12
40521: PPUSH
40522: CALL_OW 272
40526: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40527: LD_ADDR_VAR 0 10
40531: PUSH
40532: LD_VAR 0 3
40536: PPUSH
40537: LD_VAR 0 11
40541: PPUSH
40542: LD_VAR 0 12
40546: PPUSH
40547: CALL_OW 273
40551: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40552: LD_VAR 0 9
40556: PPUSH
40557: LD_VAR 0 10
40561: PPUSH
40562: CALL_OW 488
40566: PUSH
40567: LD_VAR 0 9
40571: PUSH
40572: LD_VAR 0 10
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_VAR 0 7
40585: IN
40586: NOT
40587: AND
40588: PUSH
40589: LD_VAR 0 9
40593: PPUSH
40594: LD_VAR 0 10
40598: PPUSH
40599: CALL_OW 458
40603: NOT
40604: AND
40605: IFFALSE 40647
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40607: LD_ADDR_VAR 0 7
40611: PUSH
40612: LD_VAR 0 7
40616: PPUSH
40617: LD_VAR 0 7
40621: PUSH
40622: LD_INT 1
40624: PLUS
40625: PPUSH
40626: LD_VAR 0 9
40630: PUSH
40631: LD_VAR 0 10
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PPUSH
40640: CALL_OW 1
40644: ST_TO_ADDR
40645: GO 40661
// i := i - 1 ;
40647: LD_ADDR_VAR 0 5
40651: PUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_INT 1
40659: MINUS
40660: ST_TO_ADDR
// end ;
40661: GO 40467
40663: POP
40664: POP
// for i in tmp do
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: LD_VAR 0 7
40674: PUSH
40675: FOR_IN
40676: IFFALSE 40714
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40678: LD_VAR 0 1
40682: PPUSH
40683: LD_VAR 0 5
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: LD_VAR 0 5
40696: PUSH
40697: LD_INT 2
40699: ARRAY
40700: PPUSH
40701: CALL 39656 0 3
40705: NOT
40706: IFFALSE 40712
// exit ;
40708: POP
40709: POP
40710: GO 40716
40712: GO 40675
40714: POP
40715: POP
// end ;
40716: LD_VAR 0 4
40720: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40721: LD_INT 0
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
// if not GetClass ( unit ) = class_sniper then
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 257
40739: PUSH
40740: LD_INT 5
40742: EQUAL
40743: NOT
40744: IFFALSE 40748
// exit ;
40746: GO 41136
// dist := 8 ;
40748: LD_ADDR_VAR 0 5
40752: PUSH
40753: LD_INT 8
40755: ST_TO_ADDR
// viewRange := 12 ;
40756: LD_ADDR_VAR 0 7
40760: PUSH
40761: LD_INT 12
40763: ST_TO_ADDR
// side := GetSide ( unit ) ;
40764: LD_ADDR_VAR 0 6
40768: PUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL_OW 255
40778: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40779: LD_INT 61
40781: PPUSH
40782: LD_VAR 0 6
40786: PPUSH
40787: CALL_OW 321
40791: PUSH
40792: LD_INT 2
40794: EQUAL
40795: IFFALSE 40805
// viewRange := 16 ;
40797: LD_ADDR_VAR 0 7
40801: PUSH
40802: LD_INT 16
40804: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: CALL_OW 297
40824: PUSH
40825: LD_VAR 0 5
40829: GREATER
40830: IFFALSE 40909
// begin ComMoveXY ( unit , x , y ) ;
40832: LD_VAR 0 1
40836: PPUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_VAR 0 3
40846: PPUSH
40847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40851: LD_INT 35
40853: PPUSH
40854: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40858: LD_VAR 0 1
40862: PPUSH
40863: LD_VAR 0 2
40867: PPUSH
40868: LD_VAR 0 3
40872: PPUSH
40873: CALL 77334 0 3
40877: NOT
40878: IFFALSE 40882
// exit ;
40880: GO 41136
// until GetDistUnitXY ( unit , x , y ) < dist ;
40882: LD_VAR 0 1
40886: PPUSH
40887: LD_VAR 0 2
40891: PPUSH
40892: LD_VAR 0 3
40896: PPUSH
40897: CALL_OW 297
40901: PUSH
40902: LD_VAR 0 5
40906: LESS
40907: IFFALSE 40851
// end ; ComTurnXY ( unit , x , y ) ;
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_VAR 0 2
40918: PPUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: CALL_OW 118
// wait ( 5 ) ;
40928: LD_INT 5
40930: PPUSH
40931: CALL_OW 67
// _d := GetDir ( unit ) ;
40935: LD_ADDR_VAR 0 10
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 254
40949: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40950: LD_ADDR_VAR 0 8
40954: PUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 250
40964: PPUSH
40965: LD_VAR 0 10
40969: PPUSH
40970: LD_VAR 0 5
40974: PPUSH
40975: CALL_OW 272
40979: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40980: LD_ADDR_VAR 0 9
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 251
40994: PPUSH
40995: LD_VAR 0 10
40999: PPUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: CALL_OW 273
41009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41010: LD_VAR 0 8
41014: PPUSH
41015: LD_VAR 0 9
41019: PPUSH
41020: CALL_OW 488
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41136
// ComAnimCustom ( unit , 1 ) ;
41029: LD_VAR 0 1
41033: PPUSH
41034: LD_INT 1
41036: PPUSH
41037: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41041: LD_VAR 0 8
41045: PPUSH
41046: LD_VAR 0 9
41050: PPUSH
41051: LD_VAR 0 6
41055: PPUSH
41056: LD_VAR 0 7
41060: PPUSH
41061: CALL_OW 330
// repeat wait ( 1 ) ;
41065: LD_INT 1
41067: PPUSH
41068: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 316
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 314
41091: OR
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 302
41102: NOT
41103: OR
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 301
41114: OR
41115: IFFALSE 41065
// RemoveSeeing ( _x , _y , side ) ;
41117: LD_VAR 0 8
41121: PPUSH
41122: LD_VAR 0 9
41126: PPUSH
41127: LD_VAR 0 6
41131: PPUSH
41132: CALL_OW 331
// end ; end_of_file
41136: LD_VAR 0 4
41140: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
// if exist_mode then
41145: LD_VAR 0 2
41149: IFFALSE 41174
// unit := CreateCharacter ( prefix & ident ) else
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_VAR 0 3
41160: PUSH
41161: LD_VAR 0 1
41165: STR
41166: PPUSH
41167: CALL_OW 34
41171: ST_TO_ADDR
41172: GO 41189
// unit := NewCharacter ( ident ) ;
41174: LD_ADDR_VAR 0 5
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 25
41188: ST_TO_ADDR
// result := unit ;
41189: LD_ADDR_VAR 0 4
41193: PUSH
41194: LD_VAR 0 5
41198: ST_TO_ADDR
// end ;
41199: LD_VAR 0 4
41203: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
// if not side or not nation then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: IFFALSE 41224
// exit ;
41222: GO 41992
// case nation of nation_american :
41224: LD_VAR 0 2
41228: PUSH
41229: LD_INT 1
41231: DOUBLE
41232: EQUAL
41233: IFTRUE 41237
41235: GO 41451
41237: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41238: LD_ADDR_VAR 0 4
41242: PUSH
41243: LD_INT 35
41245: PUSH
41246: LD_INT 45
41248: PUSH
41249: LD_INT 46
41251: PUSH
41252: LD_INT 47
41254: PUSH
41255: LD_INT 82
41257: PUSH
41258: LD_INT 83
41260: PUSH
41261: LD_INT 84
41263: PUSH
41264: LD_INT 85
41266: PUSH
41267: LD_INT 86
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 6
41278: PUSH
41279: LD_INT 15
41281: PUSH
41282: LD_INT 16
41284: PUSH
41285: LD_INT 7
41287: PUSH
41288: LD_INT 12
41290: PUSH
41291: LD_INT 13
41293: PUSH
41294: LD_INT 10
41296: PUSH
41297: LD_INT 14
41299: PUSH
41300: LD_INT 20
41302: PUSH
41303: LD_INT 21
41305: PUSH
41306: LD_INT 22
41308: PUSH
41309: LD_INT 25
41311: PUSH
41312: LD_INT 32
41314: PUSH
41315: LD_INT 27
41317: PUSH
41318: LD_INT 36
41320: PUSH
41321: LD_INT 69
41323: PUSH
41324: LD_INT 39
41326: PUSH
41327: LD_INT 34
41329: PUSH
41330: LD_INT 40
41332: PUSH
41333: LD_INT 48
41335: PUSH
41336: LD_INT 49
41338: PUSH
41339: LD_INT 50
41341: PUSH
41342: LD_INT 51
41344: PUSH
41345: LD_INT 52
41347: PUSH
41348: LD_INT 53
41350: PUSH
41351: LD_INT 54
41353: PUSH
41354: LD_INT 55
41356: PUSH
41357: LD_INT 56
41359: PUSH
41360: LD_INT 57
41362: PUSH
41363: LD_INT 58
41365: PUSH
41366: LD_INT 59
41368: PUSH
41369: LD_INT 60
41371: PUSH
41372: LD_INT 61
41374: PUSH
41375: LD_INT 62
41377: PUSH
41378: LD_INT 80
41380: PUSH
41381: LD_INT 82
41383: PUSH
41384: LD_INT 83
41386: PUSH
41387: LD_INT 84
41389: PUSH
41390: LD_INT 85
41392: PUSH
41393: LD_INT 86
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: ST_TO_ADDR
41449: GO 41916
41451: LD_INT 2
41453: DOUBLE
41454: EQUAL
41455: IFTRUE 41459
41457: GO 41685
41459: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: LD_INT 35
41467: PUSH
41468: LD_INT 45
41470: PUSH
41471: LD_INT 46
41473: PUSH
41474: LD_INT 47
41476: PUSH
41477: LD_INT 82
41479: PUSH
41480: LD_INT 83
41482: PUSH
41483: LD_INT 84
41485: PUSH
41486: LD_INT 85
41488: PUSH
41489: LD_INT 87
41491: PUSH
41492: LD_INT 70
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 11
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: LD_INT 4
41506: PUSH
41507: LD_INT 5
41509: PUSH
41510: LD_INT 6
41512: PUSH
41513: LD_INT 15
41515: PUSH
41516: LD_INT 18
41518: PUSH
41519: LD_INT 7
41521: PUSH
41522: LD_INT 17
41524: PUSH
41525: LD_INT 8
41527: PUSH
41528: LD_INT 20
41530: PUSH
41531: LD_INT 21
41533: PUSH
41534: LD_INT 22
41536: PUSH
41537: LD_INT 72
41539: PUSH
41540: LD_INT 26
41542: PUSH
41543: LD_INT 69
41545: PUSH
41546: LD_INT 39
41548: PUSH
41549: LD_INT 40
41551: PUSH
41552: LD_INT 41
41554: PUSH
41555: LD_INT 42
41557: PUSH
41558: LD_INT 43
41560: PUSH
41561: LD_INT 48
41563: PUSH
41564: LD_INT 49
41566: PUSH
41567: LD_INT 50
41569: PUSH
41570: LD_INT 51
41572: PUSH
41573: LD_INT 52
41575: PUSH
41576: LD_INT 53
41578: PUSH
41579: LD_INT 54
41581: PUSH
41582: LD_INT 55
41584: PUSH
41585: LD_INT 56
41587: PUSH
41588: LD_INT 60
41590: PUSH
41591: LD_INT 61
41593: PUSH
41594: LD_INT 62
41596: PUSH
41597: LD_INT 66
41599: PUSH
41600: LD_INT 67
41602: PUSH
41603: LD_INT 68
41605: PUSH
41606: LD_INT 81
41608: PUSH
41609: LD_INT 82
41611: PUSH
41612: LD_INT 83
41614: PUSH
41615: LD_INT 84
41617: PUSH
41618: LD_INT 85
41620: PUSH
41621: LD_INT 87
41623: PUSH
41624: LD_INT 88
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
41683: GO 41916
41685: LD_INT 3
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 41915
41693: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41694: LD_ADDR_VAR 0 4
41698: PUSH
41699: LD_INT 46
41701: PUSH
41702: LD_INT 47
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 82
41713: PUSH
41714: LD_INT 83
41716: PUSH
41717: LD_INT 84
41719: PUSH
41720: LD_INT 85
41722: PUSH
41723: LD_INT 86
41725: PUSH
41726: LD_INT 11
41728: PUSH
41729: LD_INT 9
41731: PUSH
41732: LD_INT 20
41734: PUSH
41735: LD_INT 19
41737: PUSH
41738: LD_INT 21
41740: PUSH
41741: LD_INT 24
41743: PUSH
41744: LD_INT 22
41746: PUSH
41747: LD_INT 25
41749: PUSH
41750: LD_INT 28
41752: PUSH
41753: LD_INT 29
41755: PUSH
41756: LD_INT 30
41758: PUSH
41759: LD_INT 31
41761: PUSH
41762: LD_INT 37
41764: PUSH
41765: LD_INT 38
41767: PUSH
41768: LD_INT 32
41770: PUSH
41771: LD_INT 27
41773: PUSH
41774: LD_INT 33
41776: PUSH
41777: LD_INT 69
41779: PUSH
41780: LD_INT 39
41782: PUSH
41783: LD_INT 34
41785: PUSH
41786: LD_INT 40
41788: PUSH
41789: LD_INT 71
41791: PUSH
41792: LD_INT 23
41794: PUSH
41795: LD_INT 44
41797: PUSH
41798: LD_INT 48
41800: PUSH
41801: LD_INT 49
41803: PUSH
41804: LD_INT 50
41806: PUSH
41807: LD_INT 51
41809: PUSH
41810: LD_INT 52
41812: PUSH
41813: LD_INT 53
41815: PUSH
41816: LD_INT 54
41818: PUSH
41819: LD_INT 55
41821: PUSH
41822: LD_INT 56
41824: PUSH
41825: LD_INT 57
41827: PUSH
41828: LD_INT 58
41830: PUSH
41831: LD_INT 59
41833: PUSH
41834: LD_INT 63
41836: PUSH
41837: LD_INT 64
41839: PUSH
41840: LD_INT 65
41842: PUSH
41843: LD_INT 82
41845: PUSH
41846: LD_INT 83
41848: PUSH
41849: LD_INT 84
41851: PUSH
41852: LD_INT 85
41854: PUSH
41855: LD_INT 86
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
41913: GO 41916
41915: POP
// if state > - 1 and state < 3 then
41916: LD_VAR 0 3
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: GREATER
41925: PUSH
41926: LD_VAR 0 3
41930: PUSH
41931: LD_INT 3
41933: LESS
41934: AND
41935: IFFALSE 41992
// for i in result do
41937: LD_ADDR_VAR 0 5
41941: PUSH
41942: LD_VAR 0 4
41946: PUSH
41947: FOR_IN
41948: IFFALSE 41990
// if GetTech ( i , side ) <> state then
41950: LD_VAR 0 5
41954: PPUSH
41955: LD_VAR 0 1
41959: PPUSH
41960: CALL_OW 321
41964: PUSH
41965: LD_VAR 0 3
41969: NONEQUAL
41970: IFFALSE 41988
// result := result diff i ;
41972: LD_ADDR_VAR 0 4
41976: PUSH
41977: LD_VAR 0 4
41981: PUSH
41982: LD_VAR 0 5
41986: DIFF
41987: ST_TO_ADDR
41988: GO 41947
41990: POP
41991: POP
// end ;
41992: LD_VAR 0 4
41996: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41997: LD_INT 0
41999: PPUSH
42000: PPUSH
42001: PPUSH
// result := true ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_INT 1
42009: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42010: LD_ADDR_VAR 0 5
42014: PUSH
42015: LD_VAR 0 2
42019: PPUSH
42020: CALL_OW 480
42024: ST_TO_ADDR
// if not tmp then
42025: LD_VAR 0 5
42029: NOT
42030: IFFALSE 42034
// exit ;
42032: GO 42083
// for i in tmp do
42034: LD_ADDR_VAR 0 4
42038: PUSH
42039: LD_VAR 0 5
42043: PUSH
42044: FOR_IN
42045: IFFALSE 42081
// if GetTech ( i , side ) <> state_researched then
42047: LD_VAR 0 4
42051: PPUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: CALL_OW 321
42061: PUSH
42062: LD_INT 2
42064: NONEQUAL
42065: IFFALSE 42079
// begin result := false ;
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_INT 0
42074: ST_TO_ADDR
// exit ;
42075: POP
42076: POP
42077: GO 42083
// end ;
42079: GO 42044
42081: POP
42082: POP
// end ;
42083: LD_VAR 0 3
42087: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42103: LD_VAR 0 1
42107: NOT
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 257
42118: PUSH
42119: LD_INT 9
42121: NONEQUAL
42122: OR
42123: IFFALSE 42127
// exit ;
42125: GO 42700
// side := GetSide ( unit ) ;
42127: LD_ADDR_VAR 0 9
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 255
42141: ST_TO_ADDR
// tech_space := tech_spacanom ;
42142: LD_ADDR_VAR 0 12
42146: PUSH
42147: LD_INT 29
42149: ST_TO_ADDR
// tech_time := tech_taurad ;
42150: LD_ADDR_VAR 0 13
42154: PUSH
42155: LD_INT 28
42157: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42158: LD_ADDR_VAR 0 11
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 310
42172: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42173: LD_VAR 0 11
42177: PPUSH
42178: CALL_OW 247
42182: PUSH
42183: LD_INT 2
42185: EQUAL
42186: IFFALSE 42190
// exit ;
42188: GO 42700
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42190: LD_ADDR_VAR 0 8
42194: PUSH
42195: LD_INT 81
42197: PUSH
42198: LD_VAR 0 9
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: LD_INT 21
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PPUSH
42228: CALL_OW 69
42232: ST_TO_ADDR
// if not tmp then
42233: LD_VAR 0 8
42237: NOT
42238: IFFALSE 42242
// exit ;
42240: GO 42700
// if in_unit then
42242: LD_VAR 0 11
42246: IFFALSE 42270
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42248: LD_ADDR_VAR 0 10
42252: PUSH
42253: LD_VAR 0 8
42257: PPUSH
42258: LD_VAR 0 11
42262: PPUSH
42263: CALL_OW 74
42267: ST_TO_ADDR
42268: GO 42290
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42270: LD_ADDR_VAR 0 10
42274: PUSH
42275: LD_VAR 0 8
42279: PPUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 74
42289: ST_TO_ADDR
// if not enemy then
42290: LD_VAR 0 10
42294: NOT
42295: IFFALSE 42299
// exit ;
42297: GO 42700
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42299: LD_VAR 0 11
42303: PUSH
42304: LD_VAR 0 11
42308: PPUSH
42309: LD_VAR 0 10
42313: PPUSH
42314: CALL_OW 296
42318: PUSH
42319: LD_INT 13
42321: GREATER
42322: AND
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: LD_VAR 0 10
42333: PPUSH
42334: CALL_OW 296
42338: PUSH
42339: LD_INT 12
42341: GREATER
42342: OR
42343: IFFALSE 42347
// exit ;
42345: GO 42700
// missile := [ 1 ] ;
42347: LD_ADDR_VAR 0 14
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42358: LD_VAR 0 9
42362: PPUSH
42363: LD_VAR 0 12
42367: PPUSH
42368: CALL_OW 325
42372: IFFALSE 42401
// missile := Replace ( missile , missile + 1 , 2 ) ;
42374: LD_ADDR_VAR 0 14
42378: PUSH
42379: LD_VAR 0 14
42383: PPUSH
42384: LD_VAR 0 14
42388: PUSH
42389: LD_INT 1
42391: PLUS
42392: PPUSH
42393: LD_INT 2
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42401: LD_VAR 0 9
42405: PPUSH
42406: LD_VAR 0 13
42410: PPUSH
42411: CALL_OW 325
42415: PUSH
42416: LD_VAR 0 10
42420: PPUSH
42421: CALL_OW 255
42425: PPUSH
42426: LD_VAR 0 13
42430: PPUSH
42431: CALL_OW 325
42435: NOT
42436: AND
42437: IFFALSE 42466
// missile := Replace ( missile , missile + 1 , 3 ) ;
42439: LD_ADDR_VAR 0 14
42443: PUSH
42444: LD_VAR 0 14
42448: PPUSH
42449: LD_VAR 0 14
42453: PUSH
42454: LD_INT 1
42456: PLUS
42457: PPUSH
42458: LD_INT 3
42460: PPUSH
42461: CALL_OW 1
42465: ST_TO_ADDR
// if missile < 2 then
42466: LD_VAR 0 14
42470: PUSH
42471: LD_INT 2
42473: LESS
42474: IFFALSE 42478
// exit ;
42476: GO 42700
// x := GetX ( enemy ) ;
42478: LD_ADDR_VAR 0 4
42482: PUSH
42483: LD_VAR 0 10
42487: PPUSH
42488: CALL_OW 250
42492: ST_TO_ADDR
// y := GetY ( enemy ) ;
42493: LD_ADDR_VAR 0 5
42497: PUSH
42498: LD_VAR 0 10
42502: PPUSH
42503: CALL_OW 251
42507: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42508: LD_ADDR_VAR 0 6
42512: PUSH
42513: LD_VAR 0 4
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PPUSH
42522: LD_INT 1
42524: PPUSH
42525: CALL_OW 12
42529: PLUS
42530: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42531: LD_ADDR_VAR 0 7
42535: PUSH
42536: LD_VAR 0 5
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PPUSH
42545: LD_INT 1
42547: PPUSH
42548: CALL_OW 12
42552: PLUS
42553: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42554: LD_VAR 0 6
42558: PPUSH
42559: LD_VAR 0 7
42563: PPUSH
42564: CALL_OW 488
42568: NOT
42569: IFFALSE 42591
// begin _x := x ;
42571: LD_ADDR_VAR 0 6
42575: PUSH
42576: LD_VAR 0 4
42580: ST_TO_ADDR
// _y := y ;
42581: LD_ADDR_VAR 0 7
42585: PUSH
42586: LD_VAR 0 5
42590: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: LD_INT 1
42598: PPUSH
42599: LD_VAR 0 14
42603: PPUSH
42604: CALL_OW 12
42608: ST_TO_ADDR
// case i of 1 :
42609: LD_VAR 0 3
42613: PUSH
42614: LD_INT 1
42616: DOUBLE
42617: EQUAL
42618: IFTRUE 42622
42620: GO 42639
42622: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42623: LD_VAR 0 1
42627: PPUSH
42628: LD_VAR 0 10
42632: PPUSH
42633: CALL_OW 115
42637: GO 42700
42639: LD_INT 2
42641: DOUBLE
42642: EQUAL
42643: IFTRUE 42647
42645: GO 42669
42647: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42648: LD_VAR 0 1
42652: PPUSH
42653: LD_VAR 0 6
42657: PPUSH
42658: LD_VAR 0 7
42662: PPUSH
42663: CALL_OW 153
42667: GO 42700
42669: LD_INT 3
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42699
42677: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42678: LD_VAR 0 1
42682: PPUSH
42683: LD_VAR 0 6
42687: PPUSH
42688: LD_VAR 0 7
42692: PPUSH
42693: CALL_OW 154
42697: GO 42700
42699: POP
// end ;
42700: LD_VAR 0 2
42704: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42705: LD_INT 0
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
// if not unit or not building then
42713: LD_VAR 0 1
42717: NOT
42718: PUSH
42719: LD_VAR 0 2
42723: NOT
42724: OR
42725: IFFALSE 42729
// exit ;
42727: GO 42887
// x := GetX ( building ) ;
42729: LD_ADDR_VAR 0 5
42733: PUSH
42734: LD_VAR 0 2
42738: PPUSH
42739: CALL_OW 250
42743: ST_TO_ADDR
// y := GetY ( building ) ;
42744: LD_ADDR_VAR 0 6
42748: PUSH
42749: LD_VAR 0 2
42753: PPUSH
42754: CALL_OW 251
42758: ST_TO_ADDR
// for i = 0 to 5 do
42759: LD_ADDR_VAR 0 4
42763: PUSH
42764: DOUBLE
42765: LD_INT 0
42767: DEC
42768: ST_TO_ADDR
42769: LD_INT 5
42771: PUSH
42772: FOR_TO
42773: IFFALSE 42885
// begin _x := ShiftX ( x , i , 3 ) ;
42775: LD_ADDR_VAR 0 7
42779: PUSH
42780: LD_VAR 0 5
42784: PPUSH
42785: LD_VAR 0 4
42789: PPUSH
42790: LD_INT 3
42792: PPUSH
42793: CALL_OW 272
42797: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42798: LD_ADDR_VAR 0 8
42802: PUSH
42803: LD_VAR 0 6
42807: PPUSH
42808: LD_VAR 0 4
42812: PPUSH
42813: LD_INT 3
42815: PPUSH
42816: CALL_OW 273
42820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42821: LD_VAR 0 7
42825: PPUSH
42826: LD_VAR 0 8
42830: PPUSH
42831: CALL_OW 488
42835: NOT
42836: IFFALSE 42840
// continue ;
42838: GO 42772
// if HexInfo ( _x , _y ) = 0 then
42840: LD_VAR 0 7
42844: PPUSH
42845: LD_VAR 0 8
42849: PPUSH
42850: CALL_OW 428
42854: PUSH
42855: LD_INT 0
42857: EQUAL
42858: IFFALSE 42883
// begin ComMoveXY ( unit , _x , _y ) ;
42860: LD_VAR 0 1
42864: PPUSH
42865: LD_VAR 0 7
42869: PPUSH
42870: LD_VAR 0 8
42874: PPUSH
42875: CALL_OW 111
// exit ;
42879: POP
42880: POP
42881: GO 42887
// end ; end ;
42883: GO 42772
42885: POP
42886: POP
// end ;
42887: LD_VAR 0 3
42891: RET
// export function ScanBase ( side , base_area ) ; begin
42892: LD_INT 0
42894: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_INT 81
42907: PUSH
42908: LD_VAR 0 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 70
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 3
42926: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42927: LD_INT 0
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
// result := false ;
42933: LD_ADDR_VAR 0 2
42937: PUSH
42938: LD_INT 0
42940: ST_TO_ADDR
// side := GetSide ( unit ) ;
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_VAR 0 1
42950: PPUSH
42951: CALL_OW 255
42955: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42956: LD_ADDR_VAR 0 4
42960: PUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 248
42970: ST_TO_ADDR
// case nat of 1 :
42971: LD_VAR 0 4
42975: PUSH
42976: LD_INT 1
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 42995
42984: POP
// tech := tech_lassight ; 2 :
42985: LD_ADDR_VAR 0 5
42989: PUSH
42990: LD_INT 12
42992: ST_TO_ADDR
42993: GO 43034
42995: LD_INT 2
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43014
43003: POP
// tech := tech_mortar ; 3 :
43004: LD_ADDR_VAR 0 5
43008: PUSH
43009: LD_INT 41
43011: ST_TO_ADDR
43012: GO 43034
43014: LD_INT 3
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43033
43022: POP
// tech := tech_bazooka ; end ;
43023: LD_ADDR_VAR 0 5
43027: PUSH
43028: LD_INT 44
43030: ST_TO_ADDR
43031: GO 43034
43033: POP
// if Researched ( side , tech ) then
43034: LD_VAR 0 3
43038: PPUSH
43039: LD_VAR 0 5
43043: PPUSH
43044: CALL_OW 325
43048: IFFALSE 43075
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43050: LD_ADDR_VAR 0 2
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 8
43060: PUSH
43061: LD_INT 9
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: PUSH
43069: LD_VAR 0 4
43073: ARRAY
43074: ST_TO_ADDR
// end ;
43075: LD_VAR 0 2
43079: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43080: LD_INT 0
43082: PPUSH
43083: PPUSH
43084: PPUSH
// if not mines then
43085: LD_VAR 0 2
43089: NOT
43090: IFFALSE 43094
// exit ;
43092: GO 43238
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43094: LD_ADDR_VAR 0 5
43098: PUSH
43099: LD_INT 81
43101: PUSH
43102: LD_VAR 0 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 21
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PPUSH
43132: CALL_OW 69
43136: ST_TO_ADDR
// for i in mines do
43137: LD_ADDR_VAR 0 4
43141: PUSH
43142: LD_VAR 0 2
43146: PUSH
43147: FOR_IN
43148: IFFALSE 43236
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43150: LD_VAR 0 4
43154: PUSH
43155: LD_INT 1
43157: ARRAY
43158: PPUSH
43159: LD_VAR 0 4
43163: PUSH
43164: LD_INT 2
43166: ARRAY
43167: PPUSH
43168: CALL_OW 458
43172: NOT
43173: IFFALSE 43177
// continue ;
43175: GO 43147
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43177: LD_VAR 0 4
43181: PUSH
43182: LD_INT 1
43184: ARRAY
43185: PPUSH
43186: LD_VAR 0 4
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: PPUSH
43195: CALL_OW 428
43199: PUSH
43200: LD_VAR 0 5
43204: IN
43205: IFFALSE 43234
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43207: LD_VAR 0 4
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 4
43220: PUSH
43221: LD_INT 2
43223: ARRAY
43224: PPUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: CALL_OW 456
// end ;
43234: GO 43147
43236: POP
43237: POP
// end ;
43238: LD_VAR 0 3
43242: RET
// export function Count ( array ) ; var i ; begin
43243: LD_INT 0
43245: PPUSH
43246: PPUSH
// result := 0 ;
43247: LD_ADDR_VAR 0 2
43251: PUSH
43252: LD_INT 0
43254: ST_TO_ADDR
// for i in array do
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_VAR 0 1
43264: PUSH
43265: FOR_IN
43266: IFFALSE 43290
// if i then
43268: LD_VAR 0 3
43272: IFFALSE 43288
// result := result + 1 ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_VAR 0 2
43283: PUSH
43284: LD_INT 1
43286: PLUS
43287: ST_TO_ADDR
43288: GO 43265
43290: POP
43291: POP
// end ;
43292: LD_VAR 0 2
43296: RET
// export function IsEmpty ( building ) ; begin
43297: LD_INT 0
43299: PPUSH
// if not building then
43300: LD_VAR 0 1
43304: NOT
43305: IFFALSE 43309
// exit ;
43307: GO 43352
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43309: LD_ADDR_VAR 0 2
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: LD_INT 22
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 255
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 58
43338: PUSH
43339: EMPTY
43340: LIST
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PPUSH
43346: CALL_OW 69
43350: IN
43351: ST_TO_ADDR
// end ;
43352: LD_VAR 0 2
43356: RET
// export function IsNotFull ( building ) ; var places ; begin
43357: LD_INT 0
43359: PPUSH
43360: PPUSH
// if not building then
43361: LD_VAR 0 1
43365: NOT
43366: IFFALSE 43370
// exit ;
43368: GO 43541
// result := false ;
43370: LD_ADDR_VAR 0 2
43374: PUSH
43375: LD_INT 0
43377: ST_TO_ADDR
// places := 0 ;
43378: LD_ADDR_VAR 0 3
43382: PUSH
43383: LD_INT 0
43385: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 266
43395: PUSH
43396: LD_INT 0
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43458
43402: LD_INT 1
43404: DOUBLE
43405: EQUAL
43406: IFTRUE 43458
43408: LD_INT 6
43410: DOUBLE
43411: EQUAL
43412: IFTRUE 43458
43414: LD_INT 7
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43458
43420: LD_INT 8
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43458
43426: LD_INT 4
43428: DOUBLE
43429: EQUAL
43430: IFTRUE 43458
43432: LD_INT 5
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43458
43438: LD_INT 2
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43458
43444: LD_INT 3
43446: DOUBLE
43447: EQUAL
43448: IFTRUE 43458
43450: LD_INT 35
43452: DOUBLE
43453: EQUAL
43454: IFTRUE 43458
43456: GO 43469
43458: POP
// places := 6 ; b_bunker , b_breastwork :
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_INT 6
43466: ST_TO_ADDR
43467: GO 43514
43469: LD_INT 32
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43483
43475: LD_INT 31
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43494
43483: POP
// places := 1 ; b_control_tower :
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_INT 1
43491: ST_TO_ADDR
43492: GO 43514
43494: LD_INT 36
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43513
43502: POP
// places := 3 ; end ;
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_INT 3
43510: ST_TO_ADDR
43511: GO 43514
43513: POP
// if places then
43514: LD_VAR 0 3
43518: IFFALSE 43541
// result := UnitsInside ( building ) < places ;
43520: LD_ADDR_VAR 0 2
43524: PUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 313
43534: PUSH
43535: LD_VAR 0 3
43539: LESS
43540: ST_TO_ADDR
// end ;
43541: LD_VAR 0 2
43545: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43546: LD_INT 0
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
// tmp := [ ] ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: EMPTY
43558: ST_TO_ADDR
// list := [ ] ;
43559: LD_ADDR_VAR 0 5
43563: PUSH
43564: EMPTY
43565: ST_TO_ADDR
// for i = 16 to 25 do
43566: LD_ADDR_VAR 0 4
43570: PUSH
43571: DOUBLE
43572: LD_INT 16
43574: DEC
43575: ST_TO_ADDR
43576: LD_INT 25
43578: PUSH
43579: FOR_TO
43580: IFFALSE 43653
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_VAR 0 3
43591: PUSH
43592: LD_INT 22
43594: PUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: CALL_OW 255
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 91
43611: PUSH
43612: LD_VAR 0 1
43616: PUSH
43617: LD_INT 6
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 30
43627: PUSH
43628: LD_VAR 0 4
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: PPUSH
43645: CALL_OW 69
43649: ADD
43650: ST_TO_ADDR
43651: GO 43579
43653: POP
43654: POP
// for i = 1 to tmp do
43655: LD_ADDR_VAR 0 4
43659: PUSH
43660: DOUBLE
43661: LD_INT 1
43663: DEC
43664: ST_TO_ADDR
43665: LD_VAR 0 3
43669: PUSH
43670: FOR_TO
43671: IFFALSE 43759
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43673: LD_ADDR_VAR 0 5
43677: PUSH
43678: LD_VAR 0 5
43682: PUSH
43683: LD_VAR 0 3
43687: PUSH
43688: LD_VAR 0 4
43692: ARRAY
43693: PPUSH
43694: CALL_OW 266
43698: PUSH
43699: LD_VAR 0 3
43703: PUSH
43704: LD_VAR 0 4
43708: ARRAY
43709: PPUSH
43710: CALL_OW 250
43714: PUSH
43715: LD_VAR 0 3
43719: PUSH
43720: LD_VAR 0 4
43724: ARRAY
43725: PPUSH
43726: CALL_OW 251
43730: PUSH
43731: LD_VAR 0 3
43735: PUSH
43736: LD_VAR 0 4
43740: ARRAY
43741: PPUSH
43742: CALL_OW 254
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: ADD
43756: ST_TO_ADDR
43757: GO 43670
43759: POP
43760: POP
// result := list ;
43761: LD_ADDR_VAR 0 2
43765: PUSH
43766: LD_VAR 0 5
43770: ST_TO_ADDR
// end ;
43771: LD_VAR 0 2
43775: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43776: LD_INT 0
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
// if not factory then
43785: LD_VAR 0 1
43789: NOT
43790: IFFALSE 43794
// exit ;
43792: GO 44387
// if control = control_apeman then
43794: LD_VAR 0 4
43798: PUSH
43799: LD_INT 5
43801: EQUAL
43802: IFFALSE 43911
// begin tmp := UnitsInside ( factory ) ;
43804: LD_ADDR_VAR 0 8
43808: PUSH
43809: LD_VAR 0 1
43813: PPUSH
43814: CALL_OW 313
43818: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43819: LD_VAR 0 8
43823: PPUSH
43824: LD_INT 25
43826: PUSH
43827: LD_INT 12
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PPUSH
43834: CALL_OW 72
43838: NOT
43839: IFFALSE 43849
// control := control_manual ;
43841: LD_ADDR_VAR 0 4
43845: PUSH
43846: LD_INT 1
43848: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43849: LD_ADDR_VAR 0 8
43853: PUSH
43854: LD_VAR 0 1
43858: PPUSH
43859: CALL 43546 0 1
43863: ST_TO_ADDR
// if tmp then
43864: LD_VAR 0 8
43868: IFFALSE 43911
// begin for i in tmp do
43870: LD_ADDR_VAR 0 7
43874: PUSH
43875: LD_VAR 0 8
43879: PUSH
43880: FOR_IN
43881: IFFALSE 43909
// if i [ 1 ] = b_ext_radio then
43883: LD_VAR 0 7
43887: PUSH
43888: LD_INT 1
43890: ARRAY
43891: PUSH
43892: LD_INT 22
43894: EQUAL
43895: IFFALSE 43907
// begin control := control_remote ;
43897: LD_ADDR_VAR 0 4
43901: PUSH
43902: LD_INT 2
43904: ST_TO_ADDR
// break ;
43905: GO 43909
// end ;
43907: GO 43880
43909: POP
43910: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43911: LD_VAR 0 1
43915: PPUSH
43916: LD_VAR 0 2
43920: PPUSH
43921: LD_VAR 0 3
43925: PPUSH
43926: LD_VAR 0 4
43930: PPUSH
43931: LD_VAR 0 5
43935: PPUSH
43936: CALL_OW 448
43940: IFFALSE 43975
// begin result := [ chassis , engine , control , weapon ] ;
43942: LD_ADDR_VAR 0 6
43946: PUSH
43947: LD_VAR 0 2
43951: PUSH
43952: LD_VAR 0 3
43956: PUSH
43957: LD_VAR 0 4
43961: PUSH
43962: LD_VAR 0 5
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// exit ;
43973: GO 44387
// end ; _chassis := AvailableChassisList ( factory ) ;
43975: LD_ADDR_VAR 0 9
43979: PUSH
43980: LD_VAR 0 1
43984: PPUSH
43985: CALL_OW 475
43989: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43990: LD_ADDR_VAR 0 11
43994: PUSH
43995: LD_VAR 0 1
43999: PPUSH
44000: CALL_OW 476
44004: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44005: LD_ADDR_VAR 0 12
44009: PUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 477
44019: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44020: LD_ADDR_VAR 0 10
44024: PUSH
44025: LD_VAR 0 1
44029: PPUSH
44030: CALL_OW 478
44034: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44035: LD_VAR 0 9
44039: NOT
44040: PUSH
44041: LD_VAR 0 11
44045: NOT
44046: OR
44047: PUSH
44048: LD_VAR 0 12
44052: NOT
44053: OR
44054: PUSH
44055: LD_VAR 0 10
44059: NOT
44060: OR
44061: IFFALSE 44096
// begin result := [ chassis , engine , control , weapon ] ;
44063: LD_ADDR_VAR 0 6
44067: PUSH
44068: LD_VAR 0 2
44072: PUSH
44073: LD_VAR 0 3
44077: PUSH
44078: LD_VAR 0 4
44082: PUSH
44083: LD_VAR 0 5
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: ST_TO_ADDR
// exit ;
44094: GO 44387
// end ; if not chassis in _chassis then
44096: LD_VAR 0 2
44100: PUSH
44101: LD_VAR 0 9
44105: IN
44106: NOT
44107: IFFALSE 44133
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44109: LD_ADDR_VAR 0 2
44113: PUSH
44114: LD_VAR 0 9
44118: PUSH
44119: LD_INT 1
44121: PPUSH
44122: LD_VAR 0 9
44126: PPUSH
44127: CALL_OW 12
44131: ARRAY
44132: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44133: LD_VAR 0 2
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: CALL 44392 0 2
44147: NOT
44148: IFFALSE 44207
// repeat engine := _engine [ 1 ] ;
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_VAR 0 11
44159: PUSH
44160: LD_INT 1
44162: ARRAY
44163: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44164: LD_ADDR_VAR 0 11
44168: PUSH
44169: LD_VAR 0 11
44173: PPUSH
44174: LD_INT 1
44176: PPUSH
44177: CALL_OW 3
44181: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44182: LD_VAR 0 2
44186: PPUSH
44187: LD_VAR 0 3
44191: PPUSH
44192: CALL 44392 0 2
44196: PUSH
44197: LD_VAR 0 11
44201: PUSH
44202: EMPTY
44203: EQUAL
44204: OR
44205: IFFALSE 44150
// if not control in _control then
44207: LD_VAR 0 4
44211: PUSH
44212: LD_VAR 0 12
44216: IN
44217: NOT
44218: IFFALSE 44244
// control := _control [ rand ( 1 , _control ) ] ;
44220: LD_ADDR_VAR 0 4
44224: PUSH
44225: LD_VAR 0 12
44229: PUSH
44230: LD_INT 1
44232: PPUSH
44233: LD_VAR 0 12
44237: PPUSH
44238: CALL_OW 12
44242: ARRAY
44243: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44244: LD_VAR 0 2
44248: PPUSH
44249: LD_VAR 0 5
44253: PPUSH
44254: CALL 44612 0 2
44258: NOT
44259: IFFALSE 44318
// repeat weapon := _weapon [ 1 ] ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 10
44270: PUSH
44271: LD_INT 1
44273: ARRAY
44274: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44275: LD_ADDR_VAR 0 10
44279: PUSH
44280: LD_VAR 0 10
44284: PPUSH
44285: LD_INT 1
44287: PPUSH
44288: CALL_OW 3
44292: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44293: LD_VAR 0 2
44297: PPUSH
44298: LD_VAR 0 5
44302: PPUSH
44303: CALL 44612 0 2
44307: PUSH
44308: LD_VAR 0 10
44312: PUSH
44313: EMPTY
44314: EQUAL
44315: OR
44316: IFFALSE 44261
// result := [ ] ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: EMPTY
44324: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44325: LD_VAR 0 1
44329: PPUSH
44330: LD_VAR 0 2
44334: PPUSH
44335: LD_VAR 0 3
44339: PPUSH
44340: LD_VAR 0 4
44344: PPUSH
44345: LD_VAR 0 5
44349: PPUSH
44350: CALL_OW 448
44354: IFFALSE 44387
// result := [ chassis , engine , control , weapon ] ;
44356: LD_ADDR_VAR 0 6
44360: PUSH
44361: LD_VAR 0 2
44365: PUSH
44366: LD_VAR 0 3
44370: PUSH
44371: LD_VAR 0 4
44375: PUSH
44376: LD_VAR 0 5
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// end ;
44387: LD_VAR 0 6
44391: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44392: LD_INT 0
44394: PPUSH
// if not chassis or not engine then
44395: LD_VAR 0 1
44399: NOT
44400: PUSH
44401: LD_VAR 0 2
44405: NOT
44406: OR
44407: IFFALSE 44411
// exit ;
44409: GO 44607
// case engine of engine_solar :
44411: LD_VAR 0 2
44415: PUSH
44416: LD_INT 2
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44424
44422: GO 44462
44424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44425: LD_ADDR_VAR 0 3
44429: PUSH
44430: LD_INT 11
44432: PUSH
44433: LD_INT 12
44435: PUSH
44436: LD_INT 13
44438: PUSH
44439: LD_INT 14
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: ST_TO_ADDR
44460: GO 44591
44462: LD_INT 1
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44532
44470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 11
44478: PUSH
44479: LD_INT 12
44481: PUSH
44482: LD_INT 13
44484: PUSH
44485: LD_INT 14
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: LD_INT 4
44499: PUSH
44500: LD_INT 5
44502: PUSH
44503: LD_INT 21
44505: PUSH
44506: LD_INT 23
44508: PUSH
44509: LD_INT 22
44511: PUSH
44512: LD_INT 24
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
44530: GO 44591
44532: LD_INT 3
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44590
44540: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_INT 13
44548: PUSH
44549: LD_INT 14
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 4
44560: PUSH
44561: LD_INT 5
44563: PUSH
44564: LD_INT 21
44566: PUSH
44567: LD_INT 22
44569: PUSH
44570: LD_INT 23
44572: PUSH
44573: LD_INT 24
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: ST_TO_ADDR
44588: GO 44591
44590: POP
// result := ( chassis in result ) ;
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_VAR 0 1
44600: PUSH
44601: LD_VAR 0 3
44605: IN
44606: ST_TO_ADDR
// end ;
44607: LD_VAR 0 3
44611: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44612: LD_INT 0
44614: PPUSH
// if not chassis or not weapon then
44615: LD_VAR 0 1
44619: NOT
44620: PUSH
44621: LD_VAR 0 2
44625: NOT
44626: OR
44627: IFFALSE 44631
// exit ;
44629: GO 45693
// case weapon of us_machine_gun :
44631: LD_VAR 0 2
44635: PUSH
44636: LD_INT 2
44638: DOUBLE
44639: EQUAL
44640: IFTRUE 44644
44642: GO 44674
44644: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44645: LD_ADDR_VAR 0 3
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 4
44661: PUSH
44662: LD_INT 5
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
44672: GO 45677
44674: LD_INT 3
44676: DOUBLE
44677: EQUAL
44678: IFTRUE 44682
44680: GO 44712
44682: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: LD_INT 4
44699: PUSH
44700: LD_INT 5
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
44710: GO 45677
44712: LD_INT 11
44714: DOUBLE
44715: EQUAL
44716: IFTRUE 44720
44718: GO 44750
44720: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 4
44737: PUSH
44738: LD_INT 5
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
44748: GO 45677
44750: LD_INT 4
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44758
44756: GO 44784
44758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: LD_INT 4
44772: PUSH
44773: LD_INT 5
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: ST_TO_ADDR
44782: GO 45677
44784: LD_INT 5
44786: DOUBLE
44787: EQUAL
44788: IFTRUE 44792
44790: GO 44818
44792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: LD_INT 5
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
44816: GO 45677
44818: LD_INT 9
44820: DOUBLE
44821: EQUAL
44822: IFTRUE 44826
44824: GO 44852
44826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: LD_INT 5
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
44850: GO 45677
44852: LD_INT 7
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 44886
44860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 5
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
44884: GO 45677
44886: LD_INT 12
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44894
44892: GO 44920
44894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44895: LD_ADDR_VAR 0 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 5
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
44918: GO 45677
44920: LD_INT 13
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 44954
44928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44929: LD_ADDR_VAR 0 3
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: LD_INT 4
44942: PUSH
44943: LD_INT 5
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
44952: GO 45677
44954: LD_INT 14
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44962
44960: GO 44980
44962: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44963: LD_ADDR_VAR 0 3
44967: PUSH
44968: LD_INT 4
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: ST_TO_ADDR
44978: GO 45677
44980: LD_INT 6
44982: DOUBLE
44983: EQUAL
44984: IFTRUE 44988
44986: GO 45006
44988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44989: LD_ADDR_VAR 0 3
44993: PUSH
44994: LD_INT 4
44996: PUSH
44997: LD_INT 5
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: ST_TO_ADDR
45004: GO 45677
45006: LD_INT 10
45008: DOUBLE
45009: EQUAL
45010: IFTRUE 45014
45012: GO 45032
45014: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45015: LD_ADDR_VAR 0 3
45019: PUSH
45020: LD_INT 4
45022: PUSH
45023: LD_INT 5
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: ST_TO_ADDR
45030: GO 45677
45032: LD_INT 22
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45040
45038: GO 45066
45040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45041: LD_ADDR_VAR 0 3
45045: PUSH
45046: LD_INT 11
45048: PUSH
45049: LD_INT 12
45051: PUSH
45052: LD_INT 13
45054: PUSH
45055: LD_INT 14
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
45064: GO 45677
45066: LD_INT 23
45068: DOUBLE
45069: EQUAL
45070: IFTRUE 45074
45072: GO 45100
45074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45075: LD_ADDR_VAR 0 3
45079: PUSH
45080: LD_INT 11
45082: PUSH
45083: LD_INT 12
45085: PUSH
45086: LD_INT 13
45088: PUSH
45089: LD_INT 14
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
45098: GO 45677
45100: LD_INT 24
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45134
45108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 11
45116: PUSH
45117: LD_INT 12
45119: PUSH
45120: LD_INT 13
45122: PUSH
45123: LD_INT 14
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
45132: GO 45677
45134: LD_INT 30
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45142
45140: GO 45168
45142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 11
45150: PUSH
45151: LD_INT 12
45153: PUSH
45154: LD_INT 13
45156: PUSH
45157: LD_INT 14
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
45166: GO 45677
45168: LD_INT 25
45170: DOUBLE
45171: EQUAL
45172: IFTRUE 45176
45174: GO 45194
45176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45177: LD_ADDR_VAR 0 3
45181: PUSH
45182: LD_INT 13
45184: PUSH
45185: LD_INT 14
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: ST_TO_ADDR
45192: GO 45677
45194: LD_INT 27
45196: DOUBLE
45197: EQUAL
45198: IFTRUE 45202
45200: GO 45220
45202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45203: LD_ADDR_VAR 0 3
45207: PUSH
45208: LD_INT 13
45210: PUSH
45211: LD_INT 14
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: ST_TO_ADDR
45218: GO 45677
45220: LD_EXP 54
45224: DOUBLE
45225: EQUAL
45226: IFTRUE 45230
45228: GO 45256
45230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45231: LD_ADDR_VAR 0 3
45235: PUSH
45236: LD_INT 11
45238: PUSH
45239: LD_INT 12
45241: PUSH
45242: LD_INT 13
45244: PUSH
45245: LD_INT 14
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
45254: GO 45677
45256: LD_INT 28
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45282
45264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_INT 13
45272: PUSH
45273: LD_INT 14
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: ST_TO_ADDR
45280: GO 45677
45282: LD_INT 29
45284: DOUBLE
45285: EQUAL
45286: IFTRUE 45290
45288: GO 45308
45290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45291: LD_ADDR_VAR 0 3
45295: PUSH
45296: LD_INT 13
45298: PUSH
45299: LD_INT 14
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: ST_TO_ADDR
45306: GO 45677
45308: LD_INT 31
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45334
45316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45317: LD_ADDR_VAR 0 3
45321: PUSH
45322: LD_INT 13
45324: PUSH
45325: LD_INT 14
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: ST_TO_ADDR
45332: GO 45677
45334: LD_INT 26
45336: DOUBLE
45337: EQUAL
45338: IFTRUE 45342
45340: GO 45360
45342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45343: LD_ADDR_VAR 0 3
45347: PUSH
45348: LD_INT 13
45350: PUSH
45351: LD_INT 14
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: ST_TO_ADDR
45358: GO 45677
45360: LD_INT 42
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45368
45366: GO 45394
45368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45369: LD_ADDR_VAR 0 3
45373: PUSH
45374: LD_INT 21
45376: PUSH
45377: LD_INT 22
45379: PUSH
45380: LD_INT 23
45382: PUSH
45383: LD_INT 24
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
45392: GO 45677
45394: LD_INT 43
45396: DOUBLE
45397: EQUAL
45398: IFTRUE 45402
45400: GO 45428
45402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45403: LD_ADDR_VAR 0 3
45407: PUSH
45408: LD_INT 21
45410: PUSH
45411: LD_INT 22
45413: PUSH
45414: LD_INT 23
45416: PUSH
45417: LD_INT 24
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
45426: GO 45677
45428: LD_INT 44
45430: DOUBLE
45431: EQUAL
45432: IFTRUE 45436
45434: GO 45462
45436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_INT 21
45444: PUSH
45445: LD_INT 22
45447: PUSH
45448: LD_INT 23
45450: PUSH
45451: LD_INT 24
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: ST_TO_ADDR
45460: GO 45677
45462: LD_INT 45
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45496
45470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 21
45478: PUSH
45479: LD_INT 22
45481: PUSH
45482: LD_INT 23
45484: PUSH
45485: LD_INT 24
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
45494: GO 45677
45496: LD_INT 49
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45530
45504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 21
45512: PUSH
45513: LD_INT 22
45515: PUSH
45516: LD_INT 23
45518: PUSH
45519: LD_INT 24
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
45528: GO 45677
45530: LD_INT 51
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45564
45538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 21
45546: PUSH
45547: LD_INT 22
45549: PUSH
45550: LD_INT 23
45552: PUSH
45553: LD_INT 24
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 45677
45564: LD_INT 52
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45598
45572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 21
45580: PUSH
45581: LD_INT 22
45583: PUSH
45584: LD_INT 23
45586: PUSH
45587: LD_INT 24
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
45596: GO 45677
45598: LD_INT 53
45600: DOUBLE
45601: EQUAL
45602: IFTRUE 45606
45604: GO 45624
45606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45607: LD_ADDR_VAR 0 3
45611: PUSH
45612: LD_INT 23
45614: PUSH
45615: LD_INT 24
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: ST_TO_ADDR
45622: GO 45677
45624: LD_INT 46
45626: DOUBLE
45627: EQUAL
45628: IFTRUE 45632
45630: GO 45650
45632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45633: LD_ADDR_VAR 0 3
45637: PUSH
45638: LD_INT 23
45640: PUSH
45641: LD_INT 24
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: ST_TO_ADDR
45648: GO 45677
45650: LD_INT 47
45652: DOUBLE
45653: EQUAL
45654: IFTRUE 45658
45656: GO 45676
45658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_INT 23
45666: PUSH
45667: LD_INT 24
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: ST_TO_ADDR
45674: GO 45677
45676: POP
// result := ( chassis in result ) ;
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_VAR 0 1
45686: PUSH
45687: LD_VAR 0 3
45691: IN
45692: ST_TO_ADDR
// end ;
45693: LD_VAR 0 3
45697: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45698: LD_INT 0
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
// result := array ;
45707: LD_ADDR_VAR 0 5
45711: PUSH
45712: LD_VAR 0 1
45716: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45717: LD_VAR 0 1
45721: NOT
45722: PUSH
45723: LD_VAR 0 2
45727: NOT
45728: OR
45729: PUSH
45730: LD_VAR 0 3
45734: NOT
45735: OR
45736: PUSH
45737: LD_VAR 0 2
45741: PUSH
45742: LD_VAR 0 1
45746: GREATER
45747: OR
45748: PUSH
45749: LD_VAR 0 3
45753: PUSH
45754: LD_VAR 0 1
45758: GREATER
45759: OR
45760: IFFALSE 45764
// exit ;
45762: GO 46060
// if direction then
45764: LD_VAR 0 4
45768: IFFALSE 45832
// begin d := 1 ;
45770: LD_ADDR_VAR 0 9
45774: PUSH
45775: LD_INT 1
45777: ST_TO_ADDR
// if i_from > i_to then
45778: LD_VAR 0 2
45782: PUSH
45783: LD_VAR 0 3
45787: GREATER
45788: IFFALSE 45814
// length := ( array - i_from ) + i_to else
45790: LD_ADDR_VAR 0 11
45794: PUSH
45795: LD_VAR 0 1
45799: PUSH
45800: LD_VAR 0 2
45804: MINUS
45805: PUSH
45806: LD_VAR 0 3
45810: PLUS
45811: ST_TO_ADDR
45812: GO 45830
// length := i_to - i_from ;
45814: LD_ADDR_VAR 0 11
45818: PUSH
45819: LD_VAR 0 3
45823: PUSH
45824: LD_VAR 0 2
45828: MINUS
45829: ST_TO_ADDR
// end else
45830: GO 45893
// begin d := - 1 ;
45832: LD_ADDR_VAR 0 9
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: ST_TO_ADDR
// if i_from > i_to then
45841: LD_VAR 0 2
45845: PUSH
45846: LD_VAR 0 3
45850: GREATER
45851: IFFALSE 45871
// length := i_from - i_to else
45853: LD_ADDR_VAR 0 11
45857: PUSH
45858: LD_VAR 0 2
45862: PUSH
45863: LD_VAR 0 3
45867: MINUS
45868: ST_TO_ADDR
45869: GO 45893
// length := ( array - i_to ) + i_from ;
45871: LD_ADDR_VAR 0 11
45875: PUSH
45876: LD_VAR 0 1
45880: PUSH
45881: LD_VAR 0 3
45885: MINUS
45886: PUSH
45887: LD_VAR 0 2
45891: PLUS
45892: ST_TO_ADDR
// end ; if not length then
45893: LD_VAR 0 11
45897: NOT
45898: IFFALSE 45902
// exit ;
45900: GO 46060
// tmp := array ;
45902: LD_ADDR_VAR 0 10
45906: PUSH
45907: LD_VAR 0 1
45911: ST_TO_ADDR
// for i = 1 to length do
45912: LD_ADDR_VAR 0 6
45916: PUSH
45917: DOUBLE
45918: LD_INT 1
45920: DEC
45921: ST_TO_ADDR
45922: LD_VAR 0 11
45926: PUSH
45927: FOR_TO
45928: IFFALSE 46048
// begin for j = 1 to array do
45930: LD_ADDR_VAR 0 7
45934: PUSH
45935: DOUBLE
45936: LD_INT 1
45938: DEC
45939: ST_TO_ADDR
45940: LD_VAR 0 1
45944: PUSH
45945: FOR_TO
45946: IFFALSE 46034
// begin k := j + d ;
45948: LD_ADDR_VAR 0 8
45952: PUSH
45953: LD_VAR 0 7
45957: PUSH
45958: LD_VAR 0 9
45962: PLUS
45963: ST_TO_ADDR
// if k > array then
45964: LD_VAR 0 8
45968: PUSH
45969: LD_VAR 0 1
45973: GREATER
45974: IFFALSE 45984
// k := 1 ;
45976: LD_ADDR_VAR 0 8
45980: PUSH
45981: LD_INT 1
45983: ST_TO_ADDR
// if not k then
45984: LD_VAR 0 8
45988: NOT
45989: IFFALSE 46001
// k := array ;
45991: LD_ADDR_VAR 0 8
45995: PUSH
45996: LD_VAR 0 1
46000: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46001: LD_ADDR_VAR 0 10
46005: PUSH
46006: LD_VAR 0 10
46010: PPUSH
46011: LD_VAR 0 8
46015: PPUSH
46016: LD_VAR 0 1
46020: PUSH
46021: LD_VAR 0 7
46025: ARRAY
46026: PPUSH
46027: CALL_OW 1
46031: ST_TO_ADDR
// end ;
46032: GO 45945
46034: POP
46035: POP
// array := tmp ;
46036: LD_ADDR_VAR 0 1
46040: PUSH
46041: LD_VAR 0 10
46045: ST_TO_ADDR
// end ;
46046: GO 45927
46048: POP
46049: POP
// result := array ;
46050: LD_ADDR_VAR 0 5
46054: PUSH
46055: LD_VAR 0 1
46059: ST_TO_ADDR
// end ;
46060: LD_VAR 0 5
46064: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46065: LD_INT 0
46067: PPUSH
46068: PPUSH
// result := 0 ;
46069: LD_ADDR_VAR 0 3
46073: PUSH
46074: LD_INT 0
46076: ST_TO_ADDR
// if not array or not value in array then
46077: LD_VAR 0 1
46081: NOT
46082: PUSH
46083: LD_VAR 0 2
46087: PUSH
46088: LD_VAR 0 1
46092: IN
46093: NOT
46094: OR
46095: IFFALSE 46099
// exit ;
46097: GO 46153
// for i = 1 to array do
46099: LD_ADDR_VAR 0 4
46103: PUSH
46104: DOUBLE
46105: LD_INT 1
46107: DEC
46108: ST_TO_ADDR
46109: LD_VAR 0 1
46113: PUSH
46114: FOR_TO
46115: IFFALSE 46151
// if value = array [ i ] then
46117: LD_VAR 0 2
46121: PUSH
46122: LD_VAR 0 1
46126: PUSH
46127: LD_VAR 0 4
46131: ARRAY
46132: EQUAL
46133: IFFALSE 46149
// begin result := i ;
46135: LD_ADDR_VAR 0 3
46139: PUSH
46140: LD_VAR 0 4
46144: ST_TO_ADDR
// exit ;
46145: POP
46146: POP
46147: GO 46153
// end ;
46149: GO 46114
46151: POP
46152: POP
// end ;
46153: LD_VAR 0 3
46157: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46158: LD_INT 0
46160: PPUSH
// vc_chassis := chassis ;
46161: LD_ADDR_OWVAR 37
46165: PUSH
46166: LD_VAR 0 1
46170: ST_TO_ADDR
// vc_engine := engine ;
46171: LD_ADDR_OWVAR 39
46175: PUSH
46176: LD_VAR 0 2
46180: ST_TO_ADDR
// vc_control := control ;
46181: LD_ADDR_OWVAR 38
46185: PUSH
46186: LD_VAR 0 3
46190: ST_TO_ADDR
// vc_weapon := weapon ;
46191: LD_ADDR_OWVAR 40
46195: PUSH
46196: LD_VAR 0 4
46200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46201: LD_ADDR_OWVAR 41
46205: PUSH
46206: LD_VAR 0 5
46210: ST_TO_ADDR
// end ;
46211: LD_VAR 0 6
46215: RET
// export function WantPlant ( unit ) ; var task ; begin
46216: LD_INT 0
46218: PPUSH
46219: PPUSH
// result := false ;
46220: LD_ADDR_VAR 0 2
46224: PUSH
46225: LD_INT 0
46227: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46228: LD_ADDR_VAR 0 3
46232: PUSH
46233: LD_VAR 0 1
46237: PPUSH
46238: CALL_OW 437
46242: ST_TO_ADDR
// if task then
46243: LD_VAR 0 3
46247: IFFALSE 46275
// if task [ 1 ] [ 1 ] = p then
46249: LD_VAR 0 3
46253: PUSH
46254: LD_INT 1
46256: ARRAY
46257: PUSH
46258: LD_INT 1
46260: ARRAY
46261: PUSH
46262: LD_STRING p
46264: EQUAL
46265: IFFALSE 46275
// result := true ;
46267: LD_ADDR_VAR 0 2
46271: PUSH
46272: LD_INT 1
46274: ST_TO_ADDR
// end ;
46275: LD_VAR 0 2
46279: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46280: LD_INT 0
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
// if pos < 1 then
46286: LD_VAR 0 2
46290: PUSH
46291: LD_INT 1
46293: LESS
46294: IFFALSE 46298
// exit ;
46296: GO 46601
// if pos = 1 then
46298: LD_VAR 0 2
46302: PUSH
46303: LD_INT 1
46305: EQUAL
46306: IFFALSE 46339
// result := Replace ( arr , pos [ 1 ] , value ) else
46308: LD_ADDR_VAR 0 4
46312: PUSH
46313: LD_VAR 0 1
46317: PPUSH
46318: LD_VAR 0 2
46322: PUSH
46323: LD_INT 1
46325: ARRAY
46326: PPUSH
46327: LD_VAR 0 3
46331: PPUSH
46332: CALL_OW 1
46336: ST_TO_ADDR
46337: GO 46601
// begin tmp := arr ;
46339: LD_ADDR_VAR 0 6
46343: PUSH
46344: LD_VAR 0 1
46348: ST_TO_ADDR
// s_arr := [ tmp ] ;
46349: LD_ADDR_VAR 0 7
46353: PUSH
46354: LD_VAR 0 6
46358: PUSH
46359: EMPTY
46360: LIST
46361: ST_TO_ADDR
// for i = 1 to pos - 1 do
46362: LD_ADDR_VAR 0 5
46366: PUSH
46367: DOUBLE
46368: LD_INT 1
46370: DEC
46371: ST_TO_ADDR
46372: LD_VAR 0 2
46376: PUSH
46377: LD_INT 1
46379: MINUS
46380: PUSH
46381: FOR_TO
46382: IFFALSE 46427
// begin tmp := tmp [ pos [ i ] ] ;
46384: LD_ADDR_VAR 0 6
46388: PUSH
46389: LD_VAR 0 6
46393: PUSH
46394: LD_VAR 0 2
46398: PUSH
46399: LD_VAR 0 5
46403: ARRAY
46404: ARRAY
46405: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46406: LD_ADDR_VAR 0 7
46410: PUSH
46411: LD_VAR 0 7
46415: PUSH
46416: LD_VAR 0 6
46420: PUSH
46421: EMPTY
46422: LIST
46423: ADD
46424: ST_TO_ADDR
// end ;
46425: GO 46381
46427: POP
46428: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46429: LD_ADDR_VAR 0 6
46433: PUSH
46434: LD_VAR 0 6
46438: PPUSH
46439: LD_VAR 0 2
46443: PUSH
46444: LD_VAR 0 2
46448: ARRAY
46449: PPUSH
46450: LD_VAR 0 3
46454: PPUSH
46455: CALL_OW 1
46459: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46460: LD_ADDR_VAR 0 7
46464: PUSH
46465: LD_VAR 0 7
46469: PPUSH
46470: LD_VAR 0 7
46474: PPUSH
46475: LD_VAR 0 6
46479: PPUSH
46480: CALL_OW 1
46484: ST_TO_ADDR
// for i = s_arr downto 2 do
46485: LD_ADDR_VAR 0 5
46489: PUSH
46490: DOUBLE
46491: LD_VAR 0 7
46495: INC
46496: ST_TO_ADDR
46497: LD_INT 2
46499: PUSH
46500: FOR_DOWNTO
46501: IFFALSE 46585
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46503: LD_ADDR_VAR 0 6
46507: PUSH
46508: LD_VAR 0 7
46512: PUSH
46513: LD_VAR 0 5
46517: PUSH
46518: LD_INT 1
46520: MINUS
46521: ARRAY
46522: PPUSH
46523: LD_VAR 0 2
46527: PUSH
46528: LD_VAR 0 5
46532: PUSH
46533: LD_INT 1
46535: MINUS
46536: ARRAY
46537: PPUSH
46538: LD_VAR 0 7
46542: PUSH
46543: LD_VAR 0 5
46547: ARRAY
46548: PPUSH
46549: CALL_OW 1
46553: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46554: LD_ADDR_VAR 0 7
46558: PUSH
46559: LD_VAR 0 7
46563: PPUSH
46564: LD_VAR 0 5
46568: PUSH
46569: LD_INT 1
46571: MINUS
46572: PPUSH
46573: LD_VAR 0 6
46577: PPUSH
46578: CALL_OW 1
46582: ST_TO_ADDR
// end ;
46583: GO 46500
46585: POP
46586: POP
// result := s_arr [ 1 ] ;
46587: LD_ADDR_VAR 0 4
46591: PUSH
46592: LD_VAR 0 7
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: ST_TO_ADDR
// end ; end ;
46601: LD_VAR 0 4
46605: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46606: LD_INT 0
46608: PPUSH
46609: PPUSH
// if not list then
46610: LD_VAR 0 1
46614: NOT
46615: IFFALSE 46619
// exit ;
46617: GO 46710
// i := list [ pos1 ] ;
46619: LD_ADDR_VAR 0 5
46623: PUSH
46624: LD_VAR 0 1
46628: PUSH
46629: LD_VAR 0 2
46633: ARRAY
46634: ST_TO_ADDR
// if not i then
46635: LD_VAR 0 5
46639: NOT
46640: IFFALSE 46644
// exit ;
46642: GO 46710
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46644: LD_ADDR_VAR 0 1
46648: PUSH
46649: LD_VAR 0 1
46653: PPUSH
46654: LD_VAR 0 2
46658: PPUSH
46659: LD_VAR 0 1
46663: PUSH
46664: LD_VAR 0 3
46668: ARRAY
46669: PPUSH
46670: CALL_OW 1
46674: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46675: LD_ADDR_VAR 0 1
46679: PUSH
46680: LD_VAR 0 1
46684: PPUSH
46685: LD_VAR 0 3
46689: PPUSH
46690: LD_VAR 0 5
46694: PPUSH
46695: CALL_OW 1
46699: ST_TO_ADDR
// result := list ;
46700: LD_ADDR_VAR 0 4
46704: PUSH
46705: LD_VAR 0 1
46709: ST_TO_ADDR
// end ;
46710: LD_VAR 0 4
46714: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46715: LD_INT 0
46717: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 1
46727: PPUSH
46728: CALL_OW 250
46732: PPUSH
46733: LD_VAR 0 1
46737: PPUSH
46738: CALL_OW 251
46742: PPUSH
46743: LD_VAR 0 2
46747: PPUSH
46748: LD_VAR 0 3
46752: PPUSH
46753: LD_VAR 0 4
46757: PPUSH
46758: CALL 46768 0 5
46762: ST_TO_ADDR
// end ;
46763: LD_VAR 0 5
46767: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46768: LD_INT 0
46770: PPUSH
46771: PPUSH
46772: PPUSH
46773: PPUSH
// if not list then
46774: LD_VAR 0 3
46778: NOT
46779: IFFALSE 46783
// exit ;
46781: GO 47171
// result := [ ] ;
46783: LD_ADDR_VAR 0 6
46787: PUSH
46788: EMPTY
46789: ST_TO_ADDR
// for i in list do
46790: LD_ADDR_VAR 0 7
46794: PUSH
46795: LD_VAR 0 3
46799: PUSH
46800: FOR_IN
46801: IFFALSE 47003
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46803: LD_ADDR_VAR 0 9
46807: PUSH
46808: LD_VAR 0 7
46812: PPUSH
46813: LD_VAR 0 1
46817: PPUSH
46818: LD_VAR 0 2
46822: PPUSH
46823: CALL_OW 297
46827: ST_TO_ADDR
// if not result then
46828: LD_VAR 0 6
46832: NOT
46833: IFFALSE 46859
// result := [ [ i , tmp ] ] else
46835: LD_ADDR_VAR 0 6
46839: PUSH
46840: LD_VAR 0 7
46844: PUSH
46845: LD_VAR 0 9
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: ST_TO_ADDR
46857: GO 47001
// begin if result [ result ] [ 2 ] < tmp then
46859: LD_VAR 0 6
46863: PUSH
46864: LD_VAR 0 6
46868: ARRAY
46869: PUSH
46870: LD_INT 2
46872: ARRAY
46873: PUSH
46874: LD_VAR 0 9
46878: LESS
46879: IFFALSE 46921
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46881: LD_ADDR_VAR 0 6
46885: PUSH
46886: LD_VAR 0 6
46890: PPUSH
46891: LD_VAR 0 6
46895: PUSH
46896: LD_INT 1
46898: PLUS
46899: PPUSH
46900: LD_VAR 0 7
46904: PUSH
46905: LD_VAR 0 9
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PPUSH
46914: CALL_OW 2
46918: ST_TO_ADDR
46919: GO 47001
// for j = 1 to result do
46921: LD_ADDR_VAR 0 8
46925: PUSH
46926: DOUBLE
46927: LD_INT 1
46929: DEC
46930: ST_TO_ADDR
46931: LD_VAR 0 6
46935: PUSH
46936: FOR_TO
46937: IFFALSE 46999
// begin if tmp < result [ j ] [ 2 ] then
46939: LD_VAR 0 9
46943: PUSH
46944: LD_VAR 0 6
46948: PUSH
46949: LD_VAR 0 8
46953: ARRAY
46954: PUSH
46955: LD_INT 2
46957: ARRAY
46958: LESS
46959: IFFALSE 46997
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46961: LD_ADDR_VAR 0 6
46965: PUSH
46966: LD_VAR 0 6
46970: PPUSH
46971: LD_VAR 0 8
46975: PPUSH
46976: LD_VAR 0 7
46980: PUSH
46981: LD_VAR 0 9
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PPUSH
46990: CALL_OW 2
46994: ST_TO_ADDR
// break ;
46995: GO 46999
// end ; end ;
46997: GO 46936
46999: POP
47000: POP
// end ; end ;
47001: GO 46800
47003: POP
47004: POP
// if result and not asc then
47005: LD_VAR 0 6
47009: PUSH
47010: LD_VAR 0 4
47014: NOT
47015: AND
47016: IFFALSE 47091
// begin tmp := result ;
47018: LD_ADDR_VAR 0 9
47022: PUSH
47023: LD_VAR 0 6
47027: ST_TO_ADDR
// for i = tmp downto 1 do
47028: LD_ADDR_VAR 0 7
47032: PUSH
47033: DOUBLE
47034: LD_VAR 0 9
47038: INC
47039: ST_TO_ADDR
47040: LD_INT 1
47042: PUSH
47043: FOR_DOWNTO
47044: IFFALSE 47089
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47046: LD_ADDR_VAR 0 6
47050: PUSH
47051: LD_VAR 0 6
47055: PPUSH
47056: LD_VAR 0 9
47060: PUSH
47061: LD_VAR 0 7
47065: MINUS
47066: PUSH
47067: LD_INT 1
47069: PLUS
47070: PPUSH
47071: LD_VAR 0 9
47075: PUSH
47076: LD_VAR 0 7
47080: ARRAY
47081: PPUSH
47082: CALL_OW 1
47086: ST_TO_ADDR
47087: GO 47043
47089: POP
47090: POP
// end ; tmp := [ ] ;
47091: LD_ADDR_VAR 0 9
47095: PUSH
47096: EMPTY
47097: ST_TO_ADDR
// if mode then
47098: LD_VAR 0 5
47102: IFFALSE 47171
// begin for i = 1 to result do
47104: LD_ADDR_VAR 0 7
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_VAR 0 6
47118: PUSH
47119: FOR_TO
47120: IFFALSE 47159
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47122: LD_ADDR_VAR 0 9
47126: PUSH
47127: LD_VAR 0 9
47131: PPUSH
47132: LD_VAR 0 7
47136: PPUSH
47137: LD_VAR 0 6
47141: PUSH
47142: LD_VAR 0 7
47146: ARRAY
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: PPUSH
47152: CALL_OW 1
47156: ST_TO_ADDR
47157: GO 47119
47159: POP
47160: POP
// result := tmp ;
47161: LD_ADDR_VAR 0 6
47165: PUSH
47166: LD_VAR 0 9
47170: ST_TO_ADDR
// end ; end ;
47171: LD_VAR 0 6
47175: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47184: LD_ADDR_VAR 0 5
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// if not x or not y then
47206: LD_VAR 0 2
47210: NOT
47211: PUSH
47212: LD_VAR 0 3
47216: NOT
47217: OR
47218: IFFALSE 47222
// exit ;
47220: GO 48874
// if not range then
47222: LD_VAR 0 4
47226: NOT
47227: IFFALSE 47237
// range := 10 ;
47229: LD_ADDR_VAR 0 4
47233: PUSH
47234: LD_INT 10
47236: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47237: LD_ADDR_VAR 0 8
47241: PUSH
47242: LD_INT 81
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 92
47256: PUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_VAR 0 3
47266: PUSH
47267: LD_VAR 0 4
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: LD_INT 21
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: PPUSH
47300: CALL_OW 69
47304: ST_TO_ADDR
// if not tmp then
47305: LD_VAR 0 8
47309: NOT
47310: IFFALSE 47314
// exit ;
47312: GO 48874
// for i in tmp do
47314: LD_ADDR_VAR 0 6
47318: PUSH
47319: LD_VAR 0 8
47323: PUSH
47324: FOR_IN
47325: IFFALSE 48849
// begin points := [ 0 , 0 , 0 ] ;
47327: LD_ADDR_VAR 0 9
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// bpoints := 1 ;
47346: LD_ADDR_VAR 0 10
47350: PUSH
47351: LD_INT 1
47353: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47354: LD_VAR 0 6
47358: PPUSH
47359: CALL_OW 247
47363: PUSH
47364: LD_INT 1
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47372
47370: GO 47950
47372: POP
// begin if GetClass ( i ) = 1 then
47373: LD_VAR 0 6
47377: PPUSH
47378: CALL_OW 257
47382: PUSH
47383: LD_INT 1
47385: EQUAL
47386: IFFALSE 47407
// points := [ 10 , 5 , 3 ] ;
47388: LD_ADDR_VAR 0 9
47392: PUSH
47393: LD_INT 10
47395: PUSH
47396: LD_INT 5
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47407: LD_VAR 0 6
47411: PPUSH
47412: CALL_OW 257
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: LD_INT 4
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: IN
47431: IFFALSE 47452
// points := [ 3 , 2 , 1 ] ;
47433: LD_ADDR_VAR 0 9
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47452: LD_VAR 0 6
47456: PPUSH
47457: CALL_OW 257
47461: PUSH
47462: LD_INT 5
47464: EQUAL
47465: IFFALSE 47486
// points := [ 130 , 5 , 2 ] ;
47467: LD_ADDR_VAR 0 9
47471: PUSH
47472: LD_INT 130
47474: PUSH
47475: LD_INT 5
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47486: LD_VAR 0 6
47490: PPUSH
47491: CALL_OW 257
47495: PUSH
47496: LD_INT 8
47498: EQUAL
47499: IFFALSE 47520
// points := [ 35 , 35 , 30 ] ;
47501: LD_ADDR_VAR 0 9
47505: PUSH
47506: LD_INT 35
47508: PUSH
47509: LD_INT 35
47511: PUSH
47512: LD_INT 30
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: LIST
47519: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47520: LD_VAR 0 6
47524: PPUSH
47525: CALL_OW 257
47529: PUSH
47530: LD_INT 9
47532: EQUAL
47533: IFFALSE 47554
// points := [ 20 , 55 , 40 ] ;
47535: LD_ADDR_VAR 0 9
47539: PUSH
47540: LD_INT 20
47542: PUSH
47543: LD_INT 55
47545: PUSH
47546: LD_INT 40
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47554: LD_VAR 0 6
47558: PPUSH
47559: CALL_OW 257
47563: PUSH
47564: LD_INT 12
47566: PUSH
47567: LD_INT 16
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: IN
47574: IFFALSE 47595
// points := [ 5 , 3 , 2 ] ;
47576: LD_ADDR_VAR 0 9
47580: PUSH
47581: LD_INT 5
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47595: LD_VAR 0 6
47599: PPUSH
47600: CALL_OW 257
47604: PUSH
47605: LD_INT 17
47607: EQUAL
47608: IFFALSE 47629
// points := [ 100 , 50 , 75 ] ;
47610: LD_ADDR_VAR 0 9
47614: PUSH
47615: LD_INT 100
47617: PUSH
47618: LD_INT 50
47620: PUSH
47621: LD_INT 75
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47629: LD_VAR 0 6
47633: PPUSH
47634: CALL_OW 257
47638: PUSH
47639: LD_INT 15
47641: EQUAL
47642: IFFALSE 47663
// points := [ 10 , 5 , 3 ] ;
47644: LD_ADDR_VAR 0 9
47648: PUSH
47649: LD_INT 10
47651: PUSH
47652: LD_INT 5
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47663: LD_VAR 0 6
47667: PPUSH
47668: CALL_OW 257
47672: PUSH
47673: LD_INT 14
47675: EQUAL
47676: IFFALSE 47697
// points := [ 10 , 0 , 0 ] ;
47678: LD_ADDR_VAR 0 9
47682: PUSH
47683: LD_INT 10
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 257
47706: PUSH
47707: LD_INT 11
47709: EQUAL
47710: IFFALSE 47731
// points := [ 30 , 10 , 5 ] ;
47712: LD_ADDR_VAR 0 9
47716: PUSH
47717: LD_INT 30
47719: PUSH
47720: LD_INT 10
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47731: LD_VAR 0 1
47735: PPUSH
47736: LD_INT 5
47738: PPUSH
47739: CALL_OW 321
47743: PUSH
47744: LD_INT 2
47746: EQUAL
47747: IFFALSE 47764
// bpoints := bpoints * 1.8 ;
47749: LD_ADDR_VAR 0 10
47753: PUSH
47754: LD_VAR 0 10
47758: PUSH
47759: LD_REAL  1.80000000000000E+0000
47762: MUL
47763: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47764: LD_VAR 0 6
47768: PPUSH
47769: CALL_OW 257
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: IN
47792: PUSH
47793: LD_VAR 0 1
47797: PPUSH
47798: LD_INT 51
47800: PPUSH
47801: CALL_OW 321
47805: PUSH
47806: LD_INT 2
47808: EQUAL
47809: AND
47810: IFFALSE 47827
// bpoints := bpoints * 1.2 ;
47812: LD_ADDR_VAR 0 10
47816: PUSH
47817: LD_VAR 0 10
47821: PUSH
47822: LD_REAL  1.20000000000000E+0000
47825: MUL
47826: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47827: LD_VAR 0 6
47831: PPUSH
47832: CALL_OW 257
47836: PUSH
47837: LD_INT 5
47839: PUSH
47840: LD_INT 7
47842: PUSH
47843: LD_INT 9
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: IN
47851: PUSH
47852: LD_VAR 0 1
47856: PPUSH
47857: LD_INT 52
47859: PPUSH
47860: CALL_OW 321
47864: PUSH
47865: LD_INT 2
47867: EQUAL
47868: AND
47869: IFFALSE 47886
// bpoints := bpoints * 1.5 ;
47871: LD_ADDR_VAR 0 10
47875: PUSH
47876: LD_VAR 0 10
47880: PUSH
47881: LD_REAL  1.50000000000000E+0000
47884: MUL
47885: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47886: LD_VAR 0 1
47890: PPUSH
47891: LD_INT 66
47893: PPUSH
47894: CALL_OW 321
47898: PUSH
47899: LD_INT 2
47901: EQUAL
47902: IFFALSE 47919
// bpoints := bpoints * 1.1 ;
47904: LD_ADDR_VAR 0 10
47908: PUSH
47909: LD_VAR 0 10
47913: PUSH
47914: LD_REAL  1.10000000000000E+0000
47917: MUL
47918: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47919: LD_ADDR_VAR 0 10
47923: PUSH
47924: LD_VAR 0 10
47928: PUSH
47929: LD_VAR 0 6
47933: PPUSH
47934: LD_INT 1
47936: PPUSH
47937: CALL_OW 259
47941: PUSH
47942: LD_REAL  1.15000000000000E+0000
47945: MUL
47946: MUL
47947: ST_TO_ADDR
// end ; unit_vehicle :
47948: GO 48778
47950: LD_INT 2
47952: DOUBLE
47953: EQUAL
47954: IFTRUE 47958
47956: GO 48766
47958: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47959: LD_VAR 0 6
47963: PPUSH
47964: CALL_OW 264
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 42
47974: PUSH
47975: LD_INT 24
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: IN
47983: IFFALSE 48004
// points := [ 25 , 5 , 3 ] ;
47985: LD_ADDR_VAR 0 9
47989: PUSH
47990: LD_INT 25
47992: PUSH
47993: LD_INT 5
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48004: LD_VAR 0 6
48008: PPUSH
48009: CALL_OW 264
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: LD_INT 43
48019: PUSH
48020: LD_INT 25
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: IN
48028: IFFALSE 48049
// points := [ 40 , 15 , 5 ] ;
48030: LD_ADDR_VAR 0 9
48034: PUSH
48035: LD_INT 40
48037: PUSH
48038: LD_INT 15
48040: PUSH
48041: LD_INT 5
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48049: LD_VAR 0 6
48053: PPUSH
48054: CALL_OW 264
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: LD_INT 23
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: IN
48069: IFFALSE 48090
// points := [ 7 , 25 , 8 ] ;
48071: LD_ADDR_VAR 0 9
48075: PUSH
48076: LD_INT 7
48078: PUSH
48079: LD_INT 25
48081: PUSH
48082: LD_INT 8
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48090: LD_VAR 0 6
48094: PPUSH
48095: CALL_OW 264
48099: PUSH
48100: LD_INT 5
48102: PUSH
48103: LD_INT 27
48105: PUSH
48106: LD_INT 44
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: IN
48114: IFFALSE 48135
// points := [ 14 , 50 , 16 ] ;
48116: LD_ADDR_VAR 0 9
48120: PUSH
48121: LD_INT 14
48123: PUSH
48124: LD_INT 50
48126: PUSH
48127: LD_INT 16
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48135: LD_VAR 0 6
48139: PPUSH
48140: CALL_OW 264
48144: PUSH
48145: LD_INT 6
48147: PUSH
48148: LD_INT 46
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: IN
48155: IFFALSE 48176
// points := [ 32 , 120 , 70 ] ;
48157: LD_ADDR_VAR 0 9
48161: PUSH
48162: LD_INT 32
48164: PUSH
48165: LD_INT 120
48167: PUSH
48168: LD_INT 70
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48176: LD_VAR 0 6
48180: PPUSH
48181: CALL_OW 264
48185: PUSH
48186: LD_INT 7
48188: PUSH
48189: LD_INT 28
48191: PUSH
48192: LD_INT 45
48194: PUSH
48195: LD_EXP 54
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: IN
48206: IFFALSE 48227
// points := [ 35 , 20 , 45 ] ;
48208: LD_ADDR_VAR 0 9
48212: PUSH
48213: LD_INT 35
48215: PUSH
48216: LD_INT 20
48218: PUSH
48219: LD_INT 45
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48227: LD_VAR 0 6
48231: PPUSH
48232: CALL_OW 264
48236: PUSH
48237: LD_INT 47
48239: PUSH
48240: EMPTY
48241: LIST
48242: IN
48243: IFFALSE 48264
// points := [ 67 , 45 , 75 ] ;
48245: LD_ADDR_VAR 0 9
48249: PUSH
48250: LD_INT 67
48252: PUSH
48253: LD_INT 45
48255: PUSH
48256: LD_INT 75
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48264: LD_VAR 0 6
48268: PPUSH
48269: CALL_OW 264
48273: PUSH
48274: LD_INT 26
48276: PUSH
48277: EMPTY
48278: LIST
48279: IN
48280: IFFALSE 48301
// points := [ 120 , 30 , 80 ] ;
48282: LD_ADDR_VAR 0 9
48286: PUSH
48287: LD_INT 120
48289: PUSH
48290: LD_INT 30
48292: PUSH
48293: LD_INT 80
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48301: LD_VAR 0 6
48305: PPUSH
48306: CALL_OW 264
48310: PUSH
48311: LD_INT 22
48313: PUSH
48314: EMPTY
48315: LIST
48316: IN
48317: IFFALSE 48338
// points := [ 40 , 1 , 1 ] ;
48319: LD_ADDR_VAR 0 9
48323: PUSH
48324: LD_INT 40
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48338: LD_VAR 0 6
48342: PPUSH
48343: CALL_OW 264
48347: PUSH
48348: LD_INT 29
48350: PUSH
48351: EMPTY
48352: LIST
48353: IN
48354: IFFALSE 48375
// points := [ 70 , 200 , 400 ] ;
48356: LD_ADDR_VAR 0 9
48360: PUSH
48361: LD_INT 70
48363: PUSH
48364: LD_INT 200
48366: PUSH
48367: LD_INT 400
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48375: LD_VAR 0 6
48379: PPUSH
48380: CALL_OW 264
48384: PUSH
48385: LD_INT 14
48387: PUSH
48388: LD_INT 53
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: IN
48395: IFFALSE 48416
// points := [ 40 , 10 , 20 ] ;
48397: LD_ADDR_VAR 0 9
48401: PUSH
48402: LD_INT 40
48404: PUSH
48405: LD_INT 10
48407: PUSH
48408: LD_INT 20
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48416: LD_VAR 0 6
48420: PPUSH
48421: CALL_OW 264
48425: PUSH
48426: LD_INT 9
48428: PUSH
48429: EMPTY
48430: LIST
48431: IN
48432: IFFALSE 48453
// points := [ 5 , 70 , 20 ] ;
48434: LD_ADDR_VAR 0 9
48438: PUSH
48439: LD_INT 5
48441: PUSH
48442: LD_INT 70
48444: PUSH
48445: LD_INT 20
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48453: LD_VAR 0 6
48457: PPUSH
48458: CALL_OW 264
48462: PUSH
48463: LD_INT 10
48465: PUSH
48466: EMPTY
48467: LIST
48468: IN
48469: IFFALSE 48490
// points := [ 35 , 110 , 70 ] ;
48471: LD_ADDR_VAR 0 9
48475: PUSH
48476: LD_INT 35
48478: PUSH
48479: LD_INT 110
48481: PUSH
48482: LD_INT 70
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48490: LD_VAR 0 6
48494: PPUSH
48495: CALL_OW 265
48499: PUSH
48500: LD_INT 25
48502: EQUAL
48503: IFFALSE 48524
// points := [ 80 , 65 , 100 ] ;
48505: LD_ADDR_VAR 0 9
48509: PUSH
48510: LD_INT 80
48512: PUSH
48513: LD_INT 65
48515: PUSH
48516: LD_INT 100
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48524: LD_VAR 0 6
48528: PPUSH
48529: CALL_OW 263
48533: PUSH
48534: LD_INT 1
48536: EQUAL
48537: IFFALSE 48572
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48539: LD_ADDR_VAR 0 10
48543: PUSH
48544: LD_VAR 0 10
48548: PUSH
48549: LD_VAR 0 6
48553: PPUSH
48554: CALL_OW 311
48558: PPUSH
48559: LD_INT 3
48561: PPUSH
48562: CALL_OW 259
48566: PUSH
48567: LD_INT 4
48569: MUL
48570: MUL
48571: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48572: LD_VAR 0 6
48576: PPUSH
48577: CALL_OW 263
48581: PUSH
48582: LD_INT 2
48584: EQUAL
48585: IFFALSE 48636
// begin j := IsControledBy ( i ) ;
48587: LD_ADDR_VAR 0 7
48591: PUSH
48592: LD_VAR 0 6
48596: PPUSH
48597: CALL_OW 312
48601: ST_TO_ADDR
// if j then
48602: LD_VAR 0 7
48606: IFFALSE 48636
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48608: LD_ADDR_VAR 0 10
48612: PUSH
48613: LD_VAR 0 10
48617: PUSH
48618: LD_VAR 0 7
48622: PPUSH
48623: LD_INT 3
48625: PPUSH
48626: CALL_OW 259
48630: PUSH
48631: LD_INT 3
48633: MUL
48634: MUL
48635: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 264
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: LD_INT 6
48651: PUSH
48652: LD_INT 46
48654: PUSH
48655: LD_INT 44
48657: PUSH
48658: LD_INT 47
48660: PUSH
48661: LD_INT 45
48663: PUSH
48664: LD_INT 28
48666: PUSH
48667: LD_INT 7
48669: PUSH
48670: LD_INT 27
48672: PUSH
48673: LD_INT 29
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: IN
48688: PUSH
48689: LD_VAR 0 1
48693: PPUSH
48694: LD_INT 52
48696: PPUSH
48697: CALL_OW 321
48701: PUSH
48702: LD_INT 2
48704: EQUAL
48705: AND
48706: IFFALSE 48723
// bpoints := bpoints * 1.2 ;
48708: LD_ADDR_VAR 0 10
48712: PUSH
48713: LD_VAR 0 10
48717: PUSH
48718: LD_REAL  1.20000000000000E+0000
48721: MUL
48722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48723: LD_VAR 0 6
48727: PPUSH
48728: CALL_OW 264
48732: PUSH
48733: LD_INT 6
48735: PUSH
48736: LD_INT 46
48738: PUSH
48739: LD_INT 47
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: IN
48747: IFFALSE 48764
// bpoints := bpoints * 1.2 ;
48749: LD_ADDR_VAR 0 10
48753: PUSH
48754: LD_VAR 0 10
48758: PUSH
48759: LD_REAL  1.20000000000000E+0000
48762: MUL
48763: ST_TO_ADDR
// end ; unit_building :
48764: GO 48778
48766: LD_INT 3
48768: DOUBLE
48769: EQUAL
48770: IFTRUE 48774
48772: GO 48777
48774: POP
// ; end ;
48775: GO 48778
48777: POP
// for j = 1 to 3 do
48778: LD_ADDR_VAR 0 7
48782: PUSH
48783: DOUBLE
48784: LD_INT 1
48786: DEC
48787: ST_TO_ADDR
48788: LD_INT 3
48790: PUSH
48791: FOR_TO
48792: IFFALSE 48845
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48794: LD_ADDR_VAR 0 5
48798: PUSH
48799: LD_VAR 0 5
48803: PPUSH
48804: LD_VAR 0 7
48808: PPUSH
48809: LD_VAR 0 5
48813: PUSH
48814: LD_VAR 0 7
48818: ARRAY
48819: PUSH
48820: LD_VAR 0 9
48824: PUSH
48825: LD_VAR 0 7
48829: ARRAY
48830: PUSH
48831: LD_VAR 0 10
48835: MUL
48836: PLUS
48837: PPUSH
48838: CALL_OW 1
48842: ST_TO_ADDR
48843: GO 48791
48845: POP
48846: POP
// end ;
48847: GO 47324
48849: POP
48850: POP
// result := Replace ( result , 4 , tmp ) ;
48851: LD_ADDR_VAR 0 5
48855: PUSH
48856: LD_VAR 0 5
48860: PPUSH
48861: LD_INT 4
48863: PPUSH
48864: LD_VAR 0 8
48868: PPUSH
48869: CALL_OW 1
48873: ST_TO_ADDR
// end ;
48874: LD_VAR 0 5
48878: RET
// export function DangerAtRange ( unit , range ) ; begin
48879: LD_INT 0
48881: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48882: LD_ADDR_VAR 0 3
48886: PUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 255
48896: PPUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: CALL_OW 250
48906: PPUSH
48907: LD_VAR 0 1
48911: PPUSH
48912: CALL_OW 251
48916: PPUSH
48917: LD_VAR 0 2
48921: PPUSH
48922: CALL 47176 0 4
48926: ST_TO_ADDR
// end ;
48927: LD_VAR 0 3
48931: RET
// export function DangerInArea ( side , area ) ; begin
48932: LD_INT 0
48934: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48935: LD_ADDR_VAR 0 3
48939: PUSH
48940: LD_VAR 0 2
48944: PPUSH
48945: LD_INT 81
48947: PUSH
48948: LD_VAR 0 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PPUSH
48957: CALL_OW 70
48961: ST_TO_ADDR
// end ;
48962: LD_VAR 0 3
48966: RET
// export function IsExtension ( b ) ; begin
48967: LD_INT 0
48969: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48970: LD_ADDR_VAR 0 2
48974: PUSH
48975: LD_VAR 0 1
48979: PUSH
48980: LD_INT 23
48982: PUSH
48983: LD_INT 20
48985: PUSH
48986: LD_INT 22
48988: PUSH
48989: LD_INT 17
48991: PUSH
48992: LD_INT 24
48994: PUSH
48995: LD_INT 21
48997: PUSH
48998: LD_INT 19
49000: PUSH
49001: LD_INT 16
49003: PUSH
49004: LD_INT 25
49006: PUSH
49007: LD_INT 18
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: IN
49022: ST_TO_ADDR
// end ;
49023: LD_VAR 0 2
49027: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49028: LD_INT 0
49030: PPUSH
49031: PPUSH
49032: PPUSH
// result := [ ] ;
49033: LD_ADDR_VAR 0 4
49037: PUSH
49038: EMPTY
49039: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49040: LD_ADDR_VAR 0 5
49044: PUSH
49045: LD_VAR 0 2
49049: PPUSH
49050: LD_INT 21
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PPUSH
49060: CALL_OW 70
49064: ST_TO_ADDR
// if not tmp then
49065: LD_VAR 0 5
49069: NOT
49070: IFFALSE 49074
// exit ;
49072: GO 49138
// if checkLink then
49074: LD_VAR 0 3
49078: IFFALSE 49128
// begin for i in tmp do
49080: LD_ADDR_VAR 0 6
49084: PUSH
49085: LD_VAR 0 5
49089: PUSH
49090: FOR_IN
49091: IFFALSE 49126
// if GetBase ( i ) <> base then
49093: LD_VAR 0 6
49097: PPUSH
49098: CALL_OW 274
49102: PUSH
49103: LD_VAR 0 1
49107: NONEQUAL
49108: IFFALSE 49124
// ComLinkToBase ( base , i ) ;
49110: LD_VAR 0 1
49114: PPUSH
49115: LD_VAR 0 6
49119: PPUSH
49120: CALL_OW 169
49124: GO 49090
49126: POP
49127: POP
// end ; result := tmp ;
49128: LD_ADDR_VAR 0 4
49132: PUSH
49133: LD_VAR 0 5
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 4
49142: RET
// export function ComComplete ( units , b ) ; var i ; begin
49143: LD_INT 0
49145: PPUSH
49146: PPUSH
// if not units then
49147: LD_VAR 0 1
49151: NOT
49152: IFFALSE 49156
// exit ;
49154: GO 49246
// for i in units do
49156: LD_ADDR_VAR 0 4
49160: PUSH
49161: LD_VAR 0 1
49165: PUSH
49166: FOR_IN
49167: IFFALSE 49244
// if BuildingStatus ( b ) = bs_build then
49169: LD_VAR 0 2
49173: PPUSH
49174: CALL_OW 461
49178: PUSH
49179: LD_INT 1
49181: EQUAL
49182: IFFALSE 49242
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49184: LD_VAR 0 4
49188: PPUSH
49189: LD_STRING h
49191: PUSH
49192: LD_VAR 0 2
49196: PPUSH
49197: CALL_OW 250
49201: PUSH
49202: LD_VAR 0 2
49206: PPUSH
49207: CALL_OW 251
49211: PUSH
49212: LD_VAR 0 2
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: PPUSH
49238: CALL_OW 446
49242: GO 49166
49244: POP
49245: POP
// end ;
49246: LD_VAR 0 3
49250: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49251: LD_INT 0
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49259: LD_VAR 0 1
49263: NOT
49264: PUSH
49265: LD_VAR 0 1
49269: PPUSH
49270: CALL_OW 263
49274: PUSH
49275: LD_INT 2
49277: NONEQUAL
49278: OR
49279: IFFALSE 49283
// exit ;
49281: GO 49599
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49283: LD_ADDR_VAR 0 6
49287: PUSH
49288: LD_INT 22
49290: PUSH
49291: LD_VAR 0 1
49295: PPUSH
49296: CALL_OW 255
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 30
49310: PUSH
49311: LD_INT 36
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 34
49320: PUSH
49321: LD_INT 31
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PPUSH
49337: CALL_OW 69
49341: ST_TO_ADDR
// if not tmp then
49342: LD_VAR 0 6
49346: NOT
49347: IFFALSE 49351
// exit ;
49349: GO 49599
// result := [ ] ;
49351: LD_ADDR_VAR 0 2
49355: PUSH
49356: EMPTY
49357: ST_TO_ADDR
// for i in tmp do
49358: LD_ADDR_VAR 0 3
49362: PUSH
49363: LD_VAR 0 6
49367: PUSH
49368: FOR_IN
49369: IFFALSE 49440
// begin t := UnitsInside ( i ) ;
49371: LD_ADDR_VAR 0 4
49375: PUSH
49376: LD_VAR 0 3
49380: PPUSH
49381: CALL_OW 313
49385: ST_TO_ADDR
// if t then
49386: LD_VAR 0 4
49390: IFFALSE 49438
// for j in t do
49392: LD_ADDR_VAR 0 7
49396: PUSH
49397: LD_VAR 0 4
49401: PUSH
49402: FOR_IN
49403: IFFALSE 49436
// result := Replace ( result , result + 1 , j ) ;
49405: LD_ADDR_VAR 0 2
49409: PUSH
49410: LD_VAR 0 2
49414: PPUSH
49415: LD_VAR 0 2
49419: PUSH
49420: LD_INT 1
49422: PLUS
49423: PPUSH
49424: LD_VAR 0 7
49428: PPUSH
49429: CALL_OW 1
49433: ST_TO_ADDR
49434: GO 49402
49436: POP
49437: POP
// end ;
49438: GO 49368
49440: POP
49441: POP
// if not result then
49442: LD_VAR 0 2
49446: NOT
49447: IFFALSE 49451
// exit ;
49449: GO 49599
// mech := result [ 1 ] ;
49451: LD_ADDR_VAR 0 5
49455: PUSH
49456: LD_VAR 0 2
49460: PUSH
49461: LD_INT 1
49463: ARRAY
49464: ST_TO_ADDR
// if result > 1 then
49465: LD_VAR 0 2
49469: PUSH
49470: LD_INT 1
49472: GREATER
49473: IFFALSE 49585
// begin for i = 2 to result do
49475: LD_ADDR_VAR 0 3
49479: PUSH
49480: DOUBLE
49481: LD_INT 2
49483: DEC
49484: ST_TO_ADDR
49485: LD_VAR 0 2
49489: PUSH
49490: FOR_TO
49491: IFFALSE 49583
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49493: LD_ADDR_VAR 0 4
49497: PUSH
49498: LD_VAR 0 2
49502: PUSH
49503: LD_VAR 0 3
49507: ARRAY
49508: PPUSH
49509: LD_INT 3
49511: PPUSH
49512: CALL_OW 259
49516: PUSH
49517: LD_VAR 0 2
49521: PUSH
49522: LD_VAR 0 3
49526: ARRAY
49527: PPUSH
49528: CALL_OW 432
49532: MINUS
49533: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49534: LD_VAR 0 4
49538: PUSH
49539: LD_VAR 0 5
49543: PPUSH
49544: LD_INT 3
49546: PPUSH
49547: CALL_OW 259
49551: PUSH
49552: LD_VAR 0 5
49556: PPUSH
49557: CALL_OW 432
49561: MINUS
49562: GREATEREQUAL
49563: IFFALSE 49581
// mech := result [ i ] ;
49565: LD_ADDR_VAR 0 5
49569: PUSH
49570: LD_VAR 0 2
49574: PUSH
49575: LD_VAR 0 3
49579: ARRAY
49580: ST_TO_ADDR
// end ;
49581: GO 49490
49583: POP
49584: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49585: LD_VAR 0 1
49589: PPUSH
49590: LD_VAR 0 5
49594: PPUSH
49595: CALL_OW 135
// end ;
49599: LD_VAR 0 2
49603: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49604: LD_INT 0
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
// result := [ ] ;
49619: LD_ADDR_VAR 0 7
49623: PUSH
49624: EMPTY
49625: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49626: LD_VAR 0 1
49630: PPUSH
49631: CALL_OW 266
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: IN
49646: NOT
49647: IFFALSE 49651
// exit ;
49649: GO 51285
// if name then
49651: LD_VAR 0 3
49655: IFFALSE 49671
// SetBName ( base_dep , name ) ;
49657: LD_VAR 0 1
49661: PPUSH
49662: LD_VAR 0 3
49666: PPUSH
49667: CALL_OW 500
// base := GetBase ( base_dep ) ;
49671: LD_ADDR_VAR 0 15
49675: PUSH
49676: LD_VAR 0 1
49680: PPUSH
49681: CALL_OW 274
49685: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49686: LD_ADDR_VAR 0 16
49690: PUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 255
49700: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49701: LD_ADDR_VAR 0 17
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 248
49715: ST_TO_ADDR
// if sources then
49716: LD_VAR 0 5
49720: IFFALSE 49767
// for i = 1 to 3 do
49722: LD_ADDR_VAR 0 8
49726: PUSH
49727: DOUBLE
49728: LD_INT 1
49730: DEC
49731: ST_TO_ADDR
49732: LD_INT 3
49734: PUSH
49735: FOR_TO
49736: IFFALSE 49765
// AddResourceType ( base , i , sources [ i ] ) ;
49738: LD_VAR 0 15
49742: PPUSH
49743: LD_VAR 0 8
49747: PPUSH
49748: LD_VAR 0 5
49752: PUSH
49753: LD_VAR 0 8
49757: ARRAY
49758: PPUSH
49759: CALL_OW 276
49763: GO 49735
49765: POP
49766: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49767: LD_ADDR_VAR 0 18
49771: PUSH
49772: LD_VAR 0 15
49776: PPUSH
49777: LD_VAR 0 2
49781: PPUSH
49782: LD_INT 1
49784: PPUSH
49785: CALL 49028 0 3
49789: ST_TO_ADDR
// InitHc ;
49790: CALL_OW 19
// InitUc ;
49794: CALL_OW 18
// uc_side := side ;
49798: LD_ADDR_OWVAR 20
49802: PUSH
49803: LD_VAR 0 16
49807: ST_TO_ADDR
// uc_nation := nation ;
49808: LD_ADDR_OWVAR 21
49812: PUSH
49813: LD_VAR 0 17
49817: ST_TO_ADDR
// if buildings then
49818: LD_VAR 0 18
49822: IFFALSE 51144
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49824: LD_ADDR_VAR 0 19
49828: PUSH
49829: LD_VAR 0 18
49833: PPUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 30
49839: PUSH
49840: LD_INT 29
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 30
49849: PUSH
49850: LD_INT 30
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: PPUSH
49862: CALL_OW 72
49866: ST_TO_ADDR
// if tmp then
49867: LD_VAR 0 19
49871: IFFALSE 49919
// for i in tmp do
49873: LD_ADDR_VAR 0 8
49877: PUSH
49878: LD_VAR 0 19
49882: PUSH
49883: FOR_IN
49884: IFFALSE 49917
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49886: LD_VAR 0 8
49890: PPUSH
49891: CALL_OW 250
49895: PPUSH
49896: LD_VAR 0 8
49900: PPUSH
49901: CALL_OW 251
49905: PPUSH
49906: LD_VAR 0 16
49910: PPUSH
49911: CALL_OW 441
49915: GO 49883
49917: POP
49918: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49919: LD_VAR 0 18
49923: PPUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 30
49929: PUSH
49930: LD_INT 32
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_INT 33
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: PPUSH
49952: CALL_OW 72
49956: IFFALSE 50044
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49958: LD_ADDR_VAR 0 8
49962: PUSH
49963: LD_VAR 0 18
49967: PPUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 30
49973: PUSH
49974: LD_INT 32
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 30
49983: PUSH
49984: LD_INT 33
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: PPUSH
49996: CALL_OW 72
50000: PUSH
50001: FOR_IN
50002: IFFALSE 50042
// begin if not GetBWeapon ( i ) then
50004: LD_VAR 0 8
50008: PPUSH
50009: CALL_OW 269
50013: NOT
50014: IFFALSE 50040
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50016: LD_VAR 0 8
50020: PPUSH
50021: LD_VAR 0 8
50025: PPUSH
50026: LD_VAR 0 2
50030: PPUSH
50031: CALL 51290 0 2
50035: PPUSH
50036: CALL_OW 431
// end ;
50040: GO 50001
50042: POP
50043: POP
// end ; for i = 1 to personel do
50044: LD_ADDR_VAR 0 8
50048: PUSH
50049: DOUBLE
50050: LD_INT 1
50052: DEC
50053: ST_TO_ADDR
50054: LD_VAR 0 6
50058: PUSH
50059: FOR_TO
50060: IFFALSE 51124
// begin if i > 4 then
50062: LD_VAR 0 8
50066: PUSH
50067: LD_INT 4
50069: GREATER
50070: IFFALSE 50074
// break ;
50072: GO 51124
// case i of 1 :
50074: LD_VAR 0 8
50078: PUSH
50079: LD_INT 1
50081: DOUBLE
50082: EQUAL
50083: IFTRUE 50087
50085: GO 50167
50087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50088: LD_ADDR_VAR 0 12
50092: PUSH
50093: LD_VAR 0 18
50097: PPUSH
50098: LD_INT 22
50100: PUSH
50101: LD_VAR 0 16
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 58
50112: PUSH
50113: EMPTY
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 30
50121: PUSH
50122: LD_INT 32
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 30
50131: PUSH
50132: LD_INT 4
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 30
50141: PUSH
50142: LD_INT 5
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: PPUSH
50160: CALL_OW 72
50164: ST_TO_ADDR
50165: GO 50389
50167: LD_INT 2
50169: DOUBLE
50170: EQUAL
50171: IFTRUE 50175
50173: GO 50237
50175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50176: LD_ADDR_VAR 0 12
50180: PUSH
50181: LD_VAR 0 18
50185: PPUSH
50186: LD_INT 22
50188: PUSH
50189: LD_VAR 0 16
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 30
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 30
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PPUSH
50230: CALL_OW 72
50234: ST_TO_ADDR
50235: GO 50389
50237: LD_INT 3
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50245
50243: GO 50307
50245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50246: LD_ADDR_VAR 0 12
50250: PUSH
50251: LD_VAR 0 18
50255: PPUSH
50256: LD_INT 22
50258: PUSH
50259: LD_VAR 0 16
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 30
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 30
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PPUSH
50300: CALL_OW 72
50304: ST_TO_ADDR
50305: GO 50389
50307: LD_INT 4
50309: DOUBLE
50310: EQUAL
50311: IFTRUE 50315
50313: GO 50388
50315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50316: LD_ADDR_VAR 0 12
50320: PUSH
50321: LD_VAR 0 18
50325: PPUSH
50326: LD_INT 22
50328: PUSH
50329: LD_VAR 0 16
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 30
50343: PUSH
50344: LD_INT 6
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 30
50353: PUSH
50354: LD_INT 7
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 30
50363: PUSH
50364: LD_INT 8
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PPUSH
50381: CALL_OW 72
50385: ST_TO_ADDR
50386: GO 50389
50388: POP
// if i = 1 then
50389: LD_VAR 0 8
50393: PUSH
50394: LD_INT 1
50396: EQUAL
50397: IFFALSE 50508
// begin tmp := [ ] ;
50399: LD_ADDR_VAR 0 19
50403: PUSH
50404: EMPTY
50405: ST_TO_ADDR
// for j in f do
50406: LD_ADDR_VAR 0 9
50410: PUSH
50411: LD_VAR 0 12
50415: PUSH
50416: FOR_IN
50417: IFFALSE 50490
// if GetBType ( j ) = b_bunker then
50419: LD_VAR 0 9
50423: PPUSH
50424: CALL_OW 266
50428: PUSH
50429: LD_INT 32
50431: EQUAL
50432: IFFALSE 50459
// tmp := Insert ( tmp , 1 , j ) else
50434: LD_ADDR_VAR 0 19
50438: PUSH
50439: LD_VAR 0 19
50443: PPUSH
50444: LD_INT 1
50446: PPUSH
50447: LD_VAR 0 9
50451: PPUSH
50452: CALL_OW 2
50456: ST_TO_ADDR
50457: GO 50488
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50459: LD_ADDR_VAR 0 19
50463: PUSH
50464: LD_VAR 0 19
50468: PPUSH
50469: LD_VAR 0 19
50473: PUSH
50474: LD_INT 1
50476: PLUS
50477: PPUSH
50478: LD_VAR 0 9
50482: PPUSH
50483: CALL_OW 2
50487: ST_TO_ADDR
50488: GO 50416
50490: POP
50491: POP
// if tmp then
50492: LD_VAR 0 19
50496: IFFALSE 50508
// f := tmp ;
50498: LD_ADDR_VAR 0 12
50502: PUSH
50503: LD_VAR 0 19
50507: ST_TO_ADDR
// end ; x := personel [ i ] ;
50508: LD_ADDR_VAR 0 13
50512: PUSH
50513: LD_VAR 0 6
50517: PUSH
50518: LD_VAR 0 8
50522: ARRAY
50523: ST_TO_ADDR
// if x = - 1 then
50524: LD_VAR 0 13
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: EQUAL
50533: IFFALSE 50742
// begin for j in f do
50535: LD_ADDR_VAR 0 9
50539: PUSH
50540: LD_VAR 0 12
50544: PUSH
50545: FOR_IN
50546: IFFALSE 50738
// repeat InitHc ;
50548: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50552: LD_VAR 0 9
50556: PPUSH
50557: CALL_OW 266
50561: PUSH
50562: LD_INT 5
50564: EQUAL
50565: IFFALSE 50635
// begin if UnitsInside ( j ) < 3 then
50567: LD_VAR 0 9
50571: PPUSH
50572: CALL_OW 313
50576: PUSH
50577: LD_INT 3
50579: LESS
50580: IFFALSE 50616
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50582: LD_INT 0
50584: PPUSH
50585: LD_INT 5
50587: PUSH
50588: LD_INT 8
50590: PUSH
50591: LD_INT 9
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: PUSH
50599: LD_VAR 0 17
50603: ARRAY
50604: PPUSH
50605: LD_VAR 0 4
50609: PPUSH
50610: CALL_OW 380
50614: GO 50633
// PrepareHuman ( false , i , skill ) ;
50616: LD_INT 0
50618: PPUSH
50619: LD_VAR 0 8
50623: PPUSH
50624: LD_VAR 0 4
50628: PPUSH
50629: CALL_OW 380
// end else
50633: GO 50652
// PrepareHuman ( false , i , skill ) ;
50635: LD_INT 0
50637: PPUSH
50638: LD_VAR 0 8
50642: PPUSH
50643: LD_VAR 0 4
50647: PPUSH
50648: CALL_OW 380
// un := CreateHuman ;
50652: LD_ADDR_VAR 0 14
50656: PUSH
50657: CALL_OW 44
50661: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50662: LD_ADDR_VAR 0 7
50666: PUSH
50667: LD_VAR 0 7
50671: PPUSH
50672: LD_INT 1
50674: PPUSH
50675: LD_VAR 0 14
50679: PPUSH
50680: CALL_OW 2
50684: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50685: LD_VAR 0 14
50689: PPUSH
50690: LD_VAR 0 9
50694: PPUSH
50695: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50699: LD_VAR 0 9
50703: PPUSH
50704: CALL_OW 313
50708: PUSH
50709: LD_INT 6
50711: EQUAL
50712: PUSH
50713: LD_VAR 0 9
50717: PPUSH
50718: CALL_OW 266
50722: PUSH
50723: LD_INT 32
50725: PUSH
50726: LD_INT 31
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: IN
50733: OR
50734: IFFALSE 50548
50736: GO 50545
50738: POP
50739: POP
// end else
50740: GO 51122
// for j = 1 to x do
50742: LD_ADDR_VAR 0 9
50746: PUSH
50747: DOUBLE
50748: LD_INT 1
50750: DEC
50751: ST_TO_ADDR
50752: LD_VAR 0 13
50756: PUSH
50757: FOR_TO
50758: IFFALSE 51120
// begin InitHc ;
50760: CALL_OW 19
// if not f then
50764: LD_VAR 0 12
50768: NOT
50769: IFFALSE 50858
// begin PrepareHuman ( false , i , skill ) ;
50771: LD_INT 0
50773: PPUSH
50774: LD_VAR 0 8
50778: PPUSH
50779: LD_VAR 0 4
50783: PPUSH
50784: CALL_OW 380
// un := CreateHuman ;
50788: LD_ADDR_VAR 0 14
50792: PUSH
50793: CALL_OW 44
50797: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50798: LD_ADDR_VAR 0 7
50802: PUSH
50803: LD_VAR 0 7
50807: PPUSH
50808: LD_INT 1
50810: PPUSH
50811: LD_VAR 0 14
50815: PPUSH
50816: CALL_OW 2
50820: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50821: LD_VAR 0 14
50825: PPUSH
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 250
50835: PPUSH
50836: LD_VAR 0 1
50840: PPUSH
50841: CALL_OW 251
50845: PPUSH
50846: LD_INT 10
50848: PPUSH
50849: LD_INT 0
50851: PPUSH
50852: CALL_OW 50
// continue ;
50856: GO 50757
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50858: LD_VAR 0 12
50862: PUSH
50863: LD_INT 1
50865: ARRAY
50866: PPUSH
50867: CALL_OW 313
50871: PUSH
50872: LD_VAR 0 12
50876: PUSH
50877: LD_INT 1
50879: ARRAY
50880: PPUSH
50881: CALL_OW 266
50885: PUSH
50886: LD_INT 32
50888: PUSH
50889: LD_INT 31
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: IN
50896: AND
50897: PUSH
50898: LD_VAR 0 12
50902: PUSH
50903: LD_INT 1
50905: ARRAY
50906: PPUSH
50907: CALL_OW 313
50911: PUSH
50912: LD_INT 6
50914: EQUAL
50915: OR
50916: IFFALSE 50936
// f := Delete ( f , 1 ) ;
50918: LD_ADDR_VAR 0 12
50922: PUSH
50923: LD_VAR 0 12
50927: PPUSH
50928: LD_INT 1
50930: PPUSH
50931: CALL_OW 3
50935: ST_TO_ADDR
// if not f then
50936: LD_VAR 0 12
50940: NOT
50941: IFFALSE 50959
// begin x := x + 2 ;
50943: LD_ADDR_VAR 0 13
50947: PUSH
50948: LD_VAR 0 13
50952: PUSH
50953: LD_INT 2
50955: PLUS
50956: ST_TO_ADDR
// continue ;
50957: GO 50757
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50959: LD_VAR 0 12
50963: PUSH
50964: LD_INT 1
50966: ARRAY
50967: PPUSH
50968: CALL_OW 266
50972: PUSH
50973: LD_INT 5
50975: EQUAL
50976: IFFALSE 51050
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50978: LD_VAR 0 12
50982: PUSH
50983: LD_INT 1
50985: ARRAY
50986: PPUSH
50987: CALL_OW 313
50991: PUSH
50992: LD_INT 3
50994: LESS
50995: IFFALSE 51031
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50997: LD_INT 0
50999: PPUSH
51000: LD_INT 5
51002: PUSH
51003: LD_INT 8
51005: PUSH
51006: LD_INT 9
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: PUSH
51014: LD_VAR 0 17
51018: ARRAY
51019: PPUSH
51020: LD_VAR 0 4
51024: PPUSH
51025: CALL_OW 380
51029: GO 51048
// PrepareHuman ( false , i , skill ) ;
51031: LD_INT 0
51033: PPUSH
51034: LD_VAR 0 8
51038: PPUSH
51039: LD_VAR 0 4
51043: PPUSH
51044: CALL_OW 380
// end else
51048: GO 51067
// PrepareHuman ( false , i , skill ) ;
51050: LD_INT 0
51052: PPUSH
51053: LD_VAR 0 8
51057: PPUSH
51058: LD_VAR 0 4
51062: PPUSH
51063: CALL_OW 380
// un := CreateHuman ;
51067: LD_ADDR_VAR 0 14
51071: PUSH
51072: CALL_OW 44
51076: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51077: LD_ADDR_VAR 0 7
51081: PUSH
51082: LD_VAR 0 7
51086: PPUSH
51087: LD_INT 1
51089: PPUSH
51090: LD_VAR 0 14
51094: PPUSH
51095: CALL_OW 2
51099: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51100: LD_VAR 0 14
51104: PPUSH
51105: LD_VAR 0 12
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: PPUSH
51114: CALL_OW 52
// end ;
51118: GO 50757
51120: POP
51121: POP
// end ;
51122: GO 50059
51124: POP
51125: POP
// result := result ^ buildings ;
51126: LD_ADDR_VAR 0 7
51130: PUSH
51131: LD_VAR 0 7
51135: PUSH
51136: LD_VAR 0 18
51140: ADD
51141: ST_TO_ADDR
// end else
51142: GO 51285
// begin for i = 1 to personel do
51144: LD_ADDR_VAR 0 8
51148: PUSH
51149: DOUBLE
51150: LD_INT 1
51152: DEC
51153: ST_TO_ADDR
51154: LD_VAR 0 6
51158: PUSH
51159: FOR_TO
51160: IFFALSE 51283
// begin if i > 4 then
51162: LD_VAR 0 8
51166: PUSH
51167: LD_INT 4
51169: GREATER
51170: IFFALSE 51174
// break ;
51172: GO 51283
// x := personel [ i ] ;
51174: LD_ADDR_VAR 0 13
51178: PUSH
51179: LD_VAR 0 6
51183: PUSH
51184: LD_VAR 0 8
51188: ARRAY
51189: ST_TO_ADDR
// if x = - 1 then
51190: LD_VAR 0 13
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: EQUAL
51199: IFFALSE 51203
// continue ;
51201: GO 51159
// PrepareHuman ( false , i , skill ) ;
51203: LD_INT 0
51205: PPUSH
51206: LD_VAR 0 8
51210: PPUSH
51211: LD_VAR 0 4
51215: PPUSH
51216: CALL_OW 380
// un := CreateHuman ;
51220: LD_ADDR_VAR 0 14
51224: PUSH
51225: CALL_OW 44
51229: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51230: LD_VAR 0 14
51234: PPUSH
51235: LD_VAR 0 1
51239: PPUSH
51240: CALL_OW 250
51244: PPUSH
51245: LD_VAR 0 1
51249: PPUSH
51250: CALL_OW 251
51254: PPUSH
51255: LD_INT 10
51257: PPUSH
51258: LD_INT 0
51260: PPUSH
51261: CALL_OW 50
// result := result ^ un ;
51265: LD_ADDR_VAR 0 7
51269: PUSH
51270: LD_VAR 0 7
51274: PUSH
51275: LD_VAR 0 14
51279: ADD
51280: ST_TO_ADDR
// end ;
51281: GO 51159
51283: POP
51284: POP
// end ; end ;
51285: LD_VAR 0 7
51289: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51290: LD_INT 0
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
// result := false ;
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_INT 0
51315: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51316: LD_VAR 0 1
51320: NOT
51321: PUSH
51322: LD_VAR 0 1
51326: PPUSH
51327: CALL_OW 266
51331: PUSH
51332: LD_INT 32
51334: PUSH
51335: LD_INT 33
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: IN
51342: NOT
51343: OR
51344: IFFALSE 51348
// exit ;
51346: GO 52457
// nat := GetNation ( tower ) ;
51348: LD_ADDR_VAR 0 12
51352: PUSH
51353: LD_VAR 0 1
51357: PPUSH
51358: CALL_OW 248
51362: ST_TO_ADDR
// side := GetSide ( tower ) ;
51363: LD_ADDR_VAR 0 16
51367: PUSH
51368: LD_VAR 0 1
51372: PPUSH
51373: CALL_OW 255
51377: ST_TO_ADDR
// x := GetX ( tower ) ;
51378: LD_ADDR_VAR 0 10
51382: PUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 250
51392: ST_TO_ADDR
// y := GetY ( tower ) ;
51393: LD_ADDR_VAR 0 11
51397: PUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: CALL_OW 251
51407: ST_TO_ADDR
// if not x or not y then
51408: LD_VAR 0 10
51412: NOT
51413: PUSH
51414: LD_VAR 0 11
51418: NOT
51419: OR
51420: IFFALSE 51424
// exit ;
51422: GO 52457
// weapon := 0 ;
51424: LD_ADDR_VAR 0 18
51428: PUSH
51429: LD_INT 0
51431: ST_TO_ADDR
// fac_list := [ ] ;
51432: LD_ADDR_VAR 0 17
51436: PUSH
51437: EMPTY
51438: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51439: LD_ADDR_VAR 0 6
51443: PUSH
51444: LD_VAR 0 1
51448: PPUSH
51449: CALL_OW 274
51453: PPUSH
51454: LD_VAR 0 2
51458: PPUSH
51459: LD_INT 0
51461: PPUSH
51462: CALL 49028 0 3
51466: PPUSH
51467: LD_INT 30
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PPUSH
51477: CALL_OW 72
51481: ST_TO_ADDR
// if not factories then
51482: LD_VAR 0 6
51486: NOT
51487: IFFALSE 51491
// exit ;
51489: GO 52457
// for i in factories do
51491: LD_ADDR_VAR 0 8
51495: PUSH
51496: LD_VAR 0 6
51500: PUSH
51501: FOR_IN
51502: IFFALSE 51527
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51504: LD_ADDR_VAR 0 17
51508: PUSH
51509: LD_VAR 0 17
51513: PUSH
51514: LD_VAR 0 8
51518: PPUSH
51519: CALL_OW 478
51523: UNION
51524: ST_TO_ADDR
51525: GO 51501
51527: POP
51528: POP
// if not fac_list then
51529: LD_VAR 0 17
51533: NOT
51534: IFFALSE 51538
// exit ;
51536: GO 52457
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51538: LD_ADDR_VAR 0 5
51542: PUSH
51543: LD_INT 4
51545: PUSH
51546: LD_INT 5
51548: PUSH
51549: LD_INT 9
51551: PUSH
51552: LD_INT 10
51554: PUSH
51555: LD_INT 6
51557: PUSH
51558: LD_INT 7
51560: PUSH
51561: LD_INT 11
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 27
51575: PUSH
51576: LD_INT 28
51578: PUSH
51579: LD_INT 26
51581: PUSH
51582: LD_INT 30
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 43
51593: PUSH
51594: LD_INT 44
51596: PUSH
51597: LD_INT 46
51599: PUSH
51600: LD_INT 45
51602: PUSH
51603: LD_INT 47
51605: PUSH
51606: LD_INT 49
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: PUSH
51622: LD_VAR 0 12
51626: ARRAY
51627: ST_TO_ADDR
// list := list isect fac_list ;
51628: LD_ADDR_VAR 0 5
51632: PUSH
51633: LD_VAR 0 5
51637: PUSH
51638: LD_VAR 0 17
51642: ISECT
51643: ST_TO_ADDR
// if not list then
51644: LD_VAR 0 5
51648: NOT
51649: IFFALSE 51653
// exit ;
51651: GO 52457
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51653: LD_VAR 0 12
51657: PUSH
51658: LD_INT 3
51660: EQUAL
51661: PUSH
51662: LD_INT 49
51664: PUSH
51665: LD_VAR 0 5
51669: IN
51670: AND
51671: PUSH
51672: LD_INT 31
51674: PPUSH
51675: LD_VAR 0 16
51679: PPUSH
51680: CALL_OW 321
51684: PUSH
51685: LD_INT 2
51687: EQUAL
51688: AND
51689: IFFALSE 51749
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51691: LD_INT 22
51693: PUSH
51694: LD_VAR 0 16
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 35
51705: PUSH
51706: LD_INT 49
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 91
51715: PUSH
51716: LD_VAR 0 1
51720: PUSH
51721: LD_INT 10
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: PPUSH
51734: CALL_OW 69
51738: NOT
51739: IFFALSE 51749
// weapon := ru_time_lapser ;
51741: LD_ADDR_VAR 0 18
51745: PUSH
51746: LD_INT 49
51748: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51749: LD_VAR 0 12
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: IN
51764: PUSH
51765: LD_INT 11
51767: PUSH
51768: LD_VAR 0 5
51772: IN
51773: PUSH
51774: LD_INT 30
51776: PUSH
51777: LD_VAR 0 5
51781: IN
51782: OR
51783: AND
51784: PUSH
51785: LD_INT 6
51787: PPUSH
51788: LD_VAR 0 16
51792: PPUSH
51793: CALL_OW 321
51797: PUSH
51798: LD_INT 2
51800: EQUAL
51801: AND
51802: IFFALSE 51967
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51804: LD_INT 22
51806: PUSH
51807: LD_VAR 0 16
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: LD_INT 35
51821: PUSH
51822: LD_INT 11
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 35
51831: PUSH
51832: LD_INT 30
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 91
51846: PUSH
51847: LD_VAR 0 1
51851: PUSH
51852: LD_INT 18
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: PPUSH
51865: CALL_OW 69
51869: NOT
51870: PUSH
51871: LD_INT 22
51873: PUSH
51874: LD_VAR 0 16
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 30
51888: PUSH
51889: LD_INT 32
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 30
51898: PUSH
51899: LD_INT 33
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 91
51913: PUSH
51914: LD_VAR 0 1
51918: PUSH
51919: LD_INT 12
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: PPUSH
51935: CALL_OW 69
51939: PUSH
51940: LD_INT 2
51942: GREATER
51943: AND
51944: IFFALSE 51967
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51946: LD_ADDR_VAR 0 18
51950: PUSH
51951: LD_INT 11
51953: PUSH
51954: LD_INT 30
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_VAR 0 12
51965: ARRAY
51966: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51967: LD_VAR 0 18
51971: NOT
51972: PUSH
51973: LD_INT 40
51975: PPUSH
51976: LD_VAR 0 16
51980: PPUSH
51981: CALL_OW 321
51985: PUSH
51986: LD_INT 2
51988: EQUAL
51989: AND
51990: PUSH
51991: LD_INT 7
51993: PUSH
51994: LD_VAR 0 5
51998: IN
51999: PUSH
52000: LD_INT 28
52002: PUSH
52003: LD_VAR 0 5
52007: IN
52008: OR
52009: PUSH
52010: LD_INT 45
52012: PUSH
52013: LD_VAR 0 5
52017: IN
52018: OR
52019: AND
52020: IFFALSE 52274
// begin hex := GetHexInfo ( x , y ) ;
52022: LD_ADDR_VAR 0 4
52026: PUSH
52027: LD_VAR 0 10
52031: PPUSH
52032: LD_VAR 0 11
52036: PPUSH
52037: CALL_OW 546
52041: ST_TO_ADDR
// if hex [ 1 ] then
52042: LD_VAR 0 4
52046: PUSH
52047: LD_INT 1
52049: ARRAY
52050: IFFALSE 52054
// exit ;
52052: GO 52457
// height := hex [ 2 ] ;
52054: LD_ADDR_VAR 0 15
52058: PUSH
52059: LD_VAR 0 4
52063: PUSH
52064: LD_INT 2
52066: ARRAY
52067: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52068: LD_ADDR_VAR 0 14
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// for i in tmp do
52091: LD_ADDR_VAR 0 8
52095: PUSH
52096: LD_VAR 0 14
52100: PUSH
52101: FOR_IN
52102: IFFALSE 52272
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52104: LD_ADDR_VAR 0 9
52108: PUSH
52109: LD_VAR 0 10
52113: PPUSH
52114: LD_VAR 0 8
52118: PPUSH
52119: LD_INT 5
52121: PPUSH
52122: CALL_OW 272
52126: PUSH
52127: LD_VAR 0 11
52131: PPUSH
52132: LD_VAR 0 8
52136: PPUSH
52137: LD_INT 5
52139: PPUSH
52140: CALL_OW 273
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52149: LD_VAR 0 9
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: PPUSH
52158: LD_VAR 0 9
52162: PUSH
52163: LD_INT 2
52165: ARRAY
52166: PPUSH
52167: CALL_OW 488
52171: IFFALSE 52270
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52173: LD_ADDR_VAR 0 4
52177: PUSH
52178: LD_VAR 0 9
52182: PUSH
52183: LD_INT 1
52185: ARRAY
52186: PPUSH
52187: LD_VAR 0 9
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PPUSH
52196: CALL_OW 546
52200: ST_TO_ADDR
// if hex [ 1 ] then
52201: LD_VAR 0 4
52205: PUSH
52206: LD_INT 1
52208: ARRAY
52209: IFFALSE 52213
// continue ;
52211: GO 52101
// h := hex [ 2 ] ;
52213: LD_ADDR_VAR 0 13
52217: PUSH
52218: LD_VAR 0 4
52222: PUSH
52223: LD_INT 2
52225: ARRAY
52226: ST_TO_ADDR
// if h + 7 < height then
52227: LD_VAR 0 13
52231: PUSH
52232: LD_INT 7
52234: PLUS
52235: PUSH
52236: LD_VAR 0 15
52240: LESS
52241: IFFALSE 52270
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52243: LD_ADDR_VAR 0 18
52247: PUSH
52248: LD_INT 7
52250: PUSH
52251: LD_INT 28
52253: PUSH
52254: LD_INT 45
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: PUSH
52262: LD_VAR 0 12
52266: ARRAY
52267: ST_TO_ADDR
// break ;
52268: GO 52272
// end ; end ; end ;
52270: GO 52101
52272: POP
52273: POP
// end ; if not weapon then
52274: LD_VAR 0 18
52278: NOT
52279: IFFALSE 52339
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52281: LD_ADDR_VAR 0 5
52285: PUSH
52286: LD_VAR 0 5
52290: PUSH
52291: LD_INT 11
52293: PUSH
52294: LD_INT 30
52296: PUSH
52297: LD_INT 49
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: DIFF
52305: ST_TO_ADDR
// if not list then
52306: LD_VAR 0 5
52310: NOT
52311: IFFALSE 52315
// exit ;
52313: GO 52457
// weapon := list [ rand ( 1 , list ) ] ;
52315: LD_ADDR_VAR 0 18
52319: PUSH
52320: LD_VAR 0 5
52324: PUSH
52325: LD_INT 1
52327: PPUSH
52328: LD_VAR 0 5
52332: PPUSH
52333: CALL_OW 12
52337: ARRAY
52338: ST_TO_ADDR
// end ; if weapon then
52339: LD_VAR 0 18
52343: IFFALSE 52457
// begin tmp := CostOfWeapon ( weapon ) ;
52345: LD_ADDR_VAR 0 14
52349: PUSH
52350: LD_VAR 0 18
52354: PPUSH
52355: CALL_OW 451
52359: ST_TO_ADDR
// j := GetBase ( tower ) ;
52360: LD_ADDR_VAR 0 9
52364: PUSH
52365: LD_VAR 0 1
52369: PPUSH
52370: CALL_OW 274
52374: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52375: LD_VAR 0 9
52379: PPUSH
52380: LD_INT 1
52382: PPUSH
52383: CALL_OW 275
52387: PUSH
52388: LD_VAR 0 14
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: GREATEREQUAL
52397: PUSH
52398: LD_VAR 0 9
52402: PPUSH
52403: LD_INT 2
52405: PPUSH
52406: CALL_OW 275
52410: PUSH
52411: LD_VAR 0 14
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: GREATEREQUAL
52420: AND
52421: PUSH
52422: LD_VAR 0 9
52426: PPUSH
52427: LD_INT 3
52429: PPUSH
52430: CALL_OW 275
52434: PUSH
52435: LD_VAR 0 14
52439: PUSH
52440: LD_INT 3
52442: ARRAY
52443: GREATEREQUAL
52444: AND
52445: IFFALSE 52457
// result := weapon ;
52447: LD_ADDR_VAR 0 3
52451: PUSH
52452: LD_VAR 0 18
52456: ST_TO_ADDR
// end ; end ;
52457: LD_VAR 0 3
52461: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52462: LD_INT 0
52464: PPUSH
52465: PPUSH
// result := true ;
52466: LD_ADDR_VAR 0 3
52470: PUSH
52471: LD_INT 1
52473: ST_TO_ADDR
// if array1 = array2 then
52474: LD_VAR 0 1
52478: PUSH
52479: LD_VAR 0 2
52483: EQUAL
52484: IFFALSE 52544
// begin for i = 1 to array1 do
52486: LD_ADDR_VAR 0 4
52490: PUSH
52491: DOUBLE
52492: LD_INT 1
52494: DEC
52495: ST_TO_ADDR
52496: LD_VAR 0 1
52500: PUSH
52501: FOR_TO
52502: IFFALSE 52540
// if array1 [ i ] <> array2 [ i ] then
52504: LD_VAR 0 1
52508: PUSH
52509: LD_VAR 0 4
52513: ARRAY
52514: PUSH
52515: LD_VAR 0 2
52519: PUSH
52520: LD_VAR 0 4
52524: ARRAY
52525: NONEQUAL
52526: IFFALSE 52538
// begin result := false ;
52528: LD_ADDR_VAR 0 3
52532: PUSH
52533: LD_INT 0
52535: ST_TO_ADDR
// break ;
52536: GO 52540
// end ;
52538: GO 52501
52540: POP
52541: POP
// end else
52542: GO 52552
// result := false ;
52544: LD_ADDR_VAR 0 3
52548: PUSH
52549: LD_INT 0
52551: ST_TO_ADDR
// end ;
52552: LD_VAR 0 3
52556: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52557: LD_INT 0
52559: PPUSH
52560: PPUSH
// if not array1 or not array2 then
52561: LD_VAR 0 1
52565: NOT
52566: PUSH
52567: LD_VAR 0 2
52571: NOT
52572: OR
52573: IFFALSE 52577
// exit ;
52575: GO 52641
// result := true ;
52577: LD_ADDR_VAR 0 3
52581: PUSH
52582: LD_INT 1
52584: ST_TO_ADDR
// for i = 1 to array1 do
52585: LD_ADDR_VAR 0 4
52589: PUSH
52590: DOUBLE
52591: LD_INT 1
52593: DEC
52594: ST_TO_ADDR
52595: LD_VAR 0 1
52599: PUSH
52600: FOR_TO
52601: IFFALSE 52639
// if array1 [ i ] <> array2 [ i ] then
52603: LD_VAR 0 1
52607: PUSH
52608: LD_VAR 0 4
52612: ARRAY
52613: PUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_VAR 0 4
52623: ARRAY
52624: NONEQUAL
52625: IFFALSE 52637
// begin result := false ;
52627: LD_ADDR_VAR 0 3
52631: PUSH
52632: LD_INT 0
52634: ST_TO_ADDR
// break ;
52635: GO 52639
// end ;
52637: GO 52600
52639: POP
52640: POP
// end ;
52641: LD_VAR 0 3
52645: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52646: LD_INT 0
52648: PPUSH
52649: PPUSH
52650: PPUSH
// pom := GetBase ( fac ) ;
52651: LD_ADDR_VAR 0 5
52655: PUSH
52656: LD_VAR 0 1
52660: PPUSH
52661: CALL_OW 274
52665: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52666: LD_ADDR_VAR 0 4
52670: PUSH
52671: LD_VAR 0 2
52675: PUSH
52676: LD_INT 1
52678: ARRAY
52679: PPUSH
52680: LD_VAR 0 2
52684: PUSH
52685: LD_INT 2
52687: ARRAY
52688: PPUSH
52689: LD_VAR 0 2
52693: PUSH
52694: LD_INT 3
52696: ARRAY
52697: PPUSH
52698: LD_VAR 0 2
52702: PUSH
52703: LD_INT 4
52705: ARRAY
52706: PPUSH
52707: CALL_OW 449
52711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52712: LD_ADDR_VAR 0 3
52716: PUSH
52717: LD_VAR 0 5
52721: PPUSH
52722: LD_INT 1
52724: PPUSH
52725: CALL_OW 275
52729: PUSH
52730: LD_VAR 0 4
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: GREATEREQUAL
52739: PUSH
52740: LD_VAR 0 5
52744: PPUSH
52745: LD_INT 2
52747: PPUSH
52748: CALL_OW 275
52752: PUSH
52753: LD_VAR 0 4
52757: PUSH
52758: LD_INT 2
52760: ARRAY
52761: GREATEREQUAL
52762: AND
52763: PUSH
52764: LD_VAR 0 5
52768: PPUSH
52769: LD_INT 3
52771: PPUSH
52772: CALL_OW 275
52776: PUSH
52777: LD_VAR 0 4
52781: PUSH
52782: LD_INT 3
52784: ARRAY
52785: GREATEREQUAL
52786: AND
52787: ST_TO_ADDR
// end ;
52788: LD_VAR 0 3
52792: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52793: LD_INT 0
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
// pom := GetBase ( building ) ;
52799: LD_ADDR_VAR 0 3
52803: PUSH
52804: LD_VAR 0 1
52808: PPUSH
52809: CALL_OW 274
52813: ST_TO_ADDR
// if not pom then
52814: LD_VAR 0 3
52818: NOT
52819: IFFALSE 52823
// exit ;
52821: GO 52993
// btype := GetBType ( building ) ;
52823: LD_ADDR_VAR 0 5
52827: PUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: CALL_OW 266
52837: ST_TO_ADDR
// if btype = b_armoury then
52838: LD_VAR 0 5
52842: PUSH
52843: LD_INT 4
52845: EQUAL
52846: IFFALSE 52856
// btype := b_barracks ;
52848: LD_ADDR_VAR 0 5
52852: PUSH
52853: LD_INT 5
52855: ST_TO_ADDR
// if btype = b_depot then
52856: LD_VAR 0 5
52860: PUSH
52861: LD_INT 0
52863: EQUAL
52864: IFFALSE 52874
// btype := b_warehouse ;
52866: LD_ADDR_VAR 0 5
52870: PUSH
52871: LD_INT 1
52873: ST_TO_ADDR
// if btype = b_workshop then
52874: LD_VAR 0 5
52878: PUSH
52879: LD_INT 2
52881: EQUAL
52882: IFFALSE 52892
// btype := b_factory ;
52884: LD_ADDR_VAR 0 5
52888: PUSH
52889: LD_INT 3
52891: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52892: LD_ADDR_VAR 0 4
52896: PUSH
52897: LD_VAR 0 5
52901: PPUSH
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 248
52911: PPUSH
52912: CALL_OW 450
52916: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52917: LD_ADDR_VAR 0 2
52921: PUSH
52922: LD_VAR 0 3
52926: PPUSH
52927: LD_INT 1
52929: PPUSH
52930: CALL_OW 275
52934: PUSH
52935: LD_VAR 0 4
52939: PUSH
52940: LD_INT 1
52942: ARRAY
52943: GREATEREQUAL
52944: PUSH
52945: LD_VAR 0 3
52949: PPUSH
52950: LD_INT 2
52952: PPUSH
52953: CALL_OW 275
52957: PUSH
52958: LD_VAR 0 4
52962: PUSH
52963: LD_INT 2
52965: ARRAY
52966: GREATEREQUAL
52967: AND
52968: PUSH
52969: LD_VAR 0 3
52973: PPUSH
52974: LD_INT 3
52976: PPUSH
52977: CALL_OW 275
52981: PUSH
52982: LD_VAR 0 4
52986: PUSH
52987: LD_INT 3
52989: ARRAY
52990: GREATEREQUAL
52991: AND
52992: ST_TO_ADDR
// end ;
52993: LD_VAR 0 2
52997: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52998: LD_INT 0
53000: PPUSH
53001: PPUSH
53002: PPUSH
// pom := GetBase ( building ) ;
53003: LD_ADDR_VAR 0 4
53007: PUSH
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL_OW 274
53017: ST_TO_ADDR
// if not pom then
53018: LD_VAR 0 4
53022: NOT
53023: IFFALSE 53027
// exit ;
53025: GO 53128
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53027: LD_ADDR_VAR 0 5
53031: PUSH
53032: LD_VAR 0 2
53036: PPUSH
53037: LD_VAR 0 1
53041: PPUSH
53042: CALL_OW 248
53046: PPUSH
53047: CALL_OW 450
53051: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53052: LD_ADDR_VAR 0 3
53056: PUSH
53057: LD_VAR 0 4
53061: PPUSH
53062: LD_INT 1
53064: PPUSH
53065: CALL_OW 275
53069: PUSH
53070: LD_VAR 0 5
53074: PUSH
53075: LD_INT 1
53077: ARRAY
53078: GREATEREQUAL
53079: PUSH
53080: LD_VAR 0 4
53084: PPUSH
53085: LD_INT 2
53087: PPUSH
53088: CALL_OW 275
53092: PUSH
53093: LD_VAR 0 5
53097: PUSH
53098: LD_INT 2
53100: ARRAY
53101: GREATEREQUAL
53102: AND
53103: PUSH
53104: LD_VAR 0 4
53108: PPUSH
53109: LD_INT 3
53111: PPUSH
53112: CALL_OW 275
53116: PUSH
53117: LD_VAR 0 5
53121: PUSH
53122: LD_INT 3
53124: ARRAY
53125: GREATEREQUAL
53126: AND
53127: ST_TO_ADDR
// end ;
53128: LD_VAR 0 3
53132: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53133: LD_INT 0
53135: PPUSH
53136: PPUSH
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
// result := false ;
53146: LD_ADDR_VAR 0 8
53150: PUSH
53151: LD_INT 0
53153: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53154: LD_VAR 0 5
53158: NOT
53159: PUSH
53160: LD_VAR 0 1
53164: NOT
53165: OR
53166: PUSH
53167: LD_VAR 0 2
53171: NOT
53172: OR
53173: PUSH
53174: LD_VAR 0 3
53178: NOT
53179: OR
53180: IFFALSE 53184
// exit ;
53182: GO 53998
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53184: LD_ADDR_VAR 0 14
53188: PUSH
53189: LD_VAR 0 1
53193: PPUSH
53194: LD_VAR 0 2
53198: PPUSH
53199: LD_VAR 0 3
53203: PPUSH
53204: LD_VAR 0 4
53208: PPUSH
53209: LD_VAR 0 5
53213: PUSH
53214: LD_INT 1
53216: ARRAY
53217: PPUSH
53218: CALL_OW 248
53222: PPUSH
53223: LD_INT 0
53225: PPUSH
53226: CALL 55235 0 6
53230: ST_TO_ADDR
// if not hexes then
53231: LD_VAR 0 14
53235: NOT
53236: IFFALSE 53240
// exit ;
53238: GO 53998
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53240: LD_ADDR_VAR 0 17
53244: PUSH
53245: LD_VAR 0 5
53249: PPUSH
53250: LD_INT 22
53252: PUSH
53253: LD_VAR 0 13
53257: PPUSH
53258: CALL_OW 255
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 30
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 30
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PPUSH
53299: CALL_OW 72
53303: ST_TO_ADDR
// for i = 1 to hexes do
53304: LD_ADDR_VAR 0 9
53308: PUSH
53309: DOUBLE
53310: LD_INT 1
53312: DEC
53313: ST_TO_ADDR
53314: LD_VAR 0 14
53318: PUSH
53319: FOR_TO
53320: IFFALSE 53996
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53322: LD_ADDR_VAR 0 13
53326: PUSH
53327: LD_VAR 0 14
53331: PUSH
53332: LD_VAR 0 9
53336: ARRAY
53337: PUSH
53338: LD_INT 1
53340: ARRAY
53341: PPUSH
53342: LD_VAR 0 14
53346: PUSH
53347: LD_VAR 0 9
53351: ARRAY
53352: PUSH
53353: LD_INT 2
53355: ARRAY
53356: PPUSH
53357: CALL_OW 428
53361: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53362: LD_VAR 0 14
53366: PUSH
53367: LD_VAR 0 9
53371: ARRAY
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PPUSH
53377: LD_VAR 0 14
53381: PUSH
53382: LD_VAR 0 9
53386: ARRAY
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: PPUSH
53392: CALL_OW 351
53396: PUSH
53397: LD_VAR 0 14
53401: PUSH
53402: LD_VAR 0 9
53406: ARRAY
53407: PUSH
53408: LD_INT 1
53410: ARRAY
53411: PPUSH
53412: LD_VAR 0 14
53416: PUSH
53417: LD_VAR 0 9
53421: ARRAY
53422: PUSH
53423: LD_INT 2
53425: ARRAY
53426: PPUSH
53427: CALL_OW 488
53431: NOT
53432: OR
53433: PUSH
53434: LD_VAR 0 13
53438: PPUSH
53439: CALL_OW 247
53443: PUSH
53444: LD_INT 3
53446: EQUAL
53447: OR
53448: IFFALSE 53454
// exit ;
53450: POP
53451: POP
53452: GO 53998
// if not tmp then
53454: LD_VAR 0 13
53458: NOT
53459: IFFALSE 53463
// continue ;
53461: GO 53319
// result := true ;
53463: LD_ADDR_VAR 0 8
53467: PUSH
53468: LD_INT 1
53470: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53471: LD_VAR 0 6
53475: PUSH
53476: LD_VAR 0 13
53480: PPUSH
53481: CALL_OW 247
53485: PUSH
53486: LD_INT 2
53488: EQUAL
53489: AND
53490: PUSH
53491: LD_VAR 0 13
53495: PPUSH
53496: CALL_OW 263
53500: PUSH
53501: LD_INT 1
53503: EQUAL
53504: AND
53505: IFFALSE 53669
// begin if IsDrivenBy ( tmp ) then
53507: LD_VAR 0 13
53511: PPUSH
53512: CALL_OW 311
53516: IFFALSE 53520
// continue ;
53518: GO 53319
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53520: LD_VAR 0 6
53524: PPUSH
53525: LD_INT 3
53527: PUSH
53528: LD_INT 60
53530: PUSH
53531: EMPTY
53532: LIST
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 55
53543: PUSH
53544: EMPTY
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PPUSH
53555: CALL_OW 72
53559: IFFALSE 53667
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53561: LD_ADDR_VAR 0 18
53565: PUSH
53566: LD_VAR 0 6
53570: PPUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 60
53576: PUSH
53577: EMPTY
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: LD_INT 55
53589: PUSH
53590: EMPTY
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PPUSH
53601: CALL_OW 72
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: ST_TO_ADDR
// if IsInUnit ( driver ) then
53610: LD_VAR 0 18
53614: PPUSH
53615: CALL_OW 310
53619: IFFALSE 53630
// ComExit ( driver ) ;
53621: LD_VAR 0 18
53625: PPUSH
53626: CALL 78923 0 1
// AddComEnterUnit ( driver , tmp ) ;
53630: LD_VAR 0 18
53634: PPUSH
53635: LD_VAR 0 13
53639: PPUSH
53640: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53644: LD_VAR 0 18
53648: PPUSH
53649: LD_VAR 0 7
53653: PPUSH
53654: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53658: LD_VAR 0 18
53662: PPUSH
53663: CALL_OW 181
// end ; continue ;
53667: GO 53319
// end ; if not cleaners or not tmp in cleaners then
53669: LD_VAR 0 6
53673: NOT
53674: PUSH
53675: LD_VAR 0 13
53679: PUSH
53680: LD_VAR 0 6
53684: IN
53685: NOT
53686: OR
53687: IFFALSE 53994
// begin if dep then
53689: LD_VAR 0 17
53693: IFFALSE 53829
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53695: LD_ADDR_VAR 0 16
53699: PUSH
53700: LD_VAR 0 17
53704: PUSH
53705: LD_INT 1
53707: ARRAY
53708: PPUSH
53709: CALL_OW 250
53713: PPUSH
53714: LD_VAR 0 17
53718: PUSH
53719: LD_INT 1
53721: ARRAY
53722: PPUSH
53723: CALL_OW 254
53727: PPUSH
53728: LD_INT 5
53730: PPUSH
53731: CALL_OW 272
53735: PUSH
53736: LD_VAR 0 17
53740: PUSH
53741: LD_INT 1
53743: ARRAY
53744: PPUSH
53745: CALL_OW 251
53749: PPUSH
53750: LD_VAR 0 17
53754: PUSH
53755: LD_INT 1
53757: ARRAY
53758: PPUSH
53759: CALL_OW 254
53763: PPUSH
53764: LD_INT 5
53766: PPUSH
53767: CALL_OW 273
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53776: LD_VAR 0 16
53780: PUSH
53781: LD_INT 1
53783: ARRAY
53784: PPUSH
53785: LD_VAR 0 16
53789: PUSH
53790: LD_INT 2
53792: ARRAY
53793: PPUSH
53794: CALL_OW 488
53798: IFFALSE 53829
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53800: LD_VAR 0 13
53804: PPUSH
53805: LD_VAR 0 16
53809: PUSH
53810: LD_INT 1
53812: ARRAY
53813: PPUSH
53814: LD_VAR 0 16
53818: PUSH
53819: LD_INT 2
53821: ARRAY
53822: PPUSH
53823: CALL_OW 111
// continue ;
53827: GO 53319
// end ; end ; r := GetDir ( tmp ) ;
53829: LD_ADDR_VAR 0 15
53833: PUSH
53834: LD_VAR 0 13
53838: PPUSH
53839: CALL_OW 254
53843: ST_TO_ADDR
// if r = 5 then
53844: LD_VAR 0 15
53848: PUSH
53849: LD_INT 5
53851: EQUAL
53852: IFFALSE 53862
// r := 0 ;
53854: LD_ADDR_VAR 0 15
53858: PUSH
53859: LD_INT 0
53861: ST_TO_ADDR
// for j = r to 5 do
53862: LD_ADDR_VAR 0 10
53866: PUSH
53867: DOUBLE
53868: LD_VAR 0 15
53872: DEC
53873: ST_TO_ADDR
53874: LD_INT 5
53876: PUSH
53877: FOR_TO
53878: IFFALSE 53992
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53880: LD_ADDR_VAR 0 11
53884: PUSH
53885: LD_VAR 0 13
53889: PPUSH
53890: CALL_OW 250
53894: PPUSH
53895: LD_VAR 0 10
53899: PPUSH
53900: LD_INT 2
53902: PPUSH
53903: CALL_OW 272
53907: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53908: LD_ADDR_VAR 0 12
53912: PUSH
53913: LD_VAR 0 13
53917: PPUSH
53918: CALL_OW 251
53922: PPUSH
53923: LD_VAR 0 10
53927: PPUSH
53928: LD_INT 2
53930: PPUSH
53931: CALL_OW 273
53935: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53936: LD_VAR 0 11
53940: PPUSH
53941: LD_VAR 0 12
53945: PPUSH
53946: CALL_OW 488
53950: PUSH
53951: LD_VAR 0 11
53955: PPUSH
53956: LD_VAR 0 12
53960: PPUSH
53961: CALL_OW 428
53965: NOT
53966: AND
53967: IFFALSE 53990
// begin ComMoveXY ( tmp , _x , _y ) ;
53969: LD_VAR 0 13
53973: PPUSH
53974: LD_VAR 0 11
53978: PPUSH
53979: LD_VAR 0 12
53983: PPUSH
53984: CALL_OW 111
// break ;
53988: GO 53992
// end ; end ;
53990: GO 53877
53992: POP
53993: POP
// end ; end ;
53994: GO 53319
53996: POP
53997: POP
// end ;
53998: LD_VAR 0 8
54002: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54003: LD_INT 0
54005: PPUSH
// result := true ;
54006: LD_ADDR_VAR 0 3
54010: PUSH
54011: LD_INT 1
54013: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54014: LD_VAR 0 2
54018: PUSH
54019: LD_INT 24
54021: DOUBLE
54022: EQUAL
54023: IFTRUE 54033
54025: LD_INT 33
54027: DOUBLE
54028: EQUAL
54029: IFTRUE 54033
54031: GO 54058
54033: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54034: LD_ADDR_VAR 0 3
54038: PUSH
54039: LD_INT 32
54041: PPUSH
54042: LD_VAR 0 1
54046: PPUSH
54047: CALL_OW 321
54051: PUSH
54052: LD_INT 2
54054: EQUAL
54055: ST_TO_ADDR
54056: GO 54378
54058: LD_INT 20
54060: DOUBLE
54061: EQUAL
54062: IFTRUE 54066
54064: GO 54091
54066: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54067: LD_ADDR_VAR 0 3
54071: PUSH
54072: LD_INT 6
54074: PPUSH
54075: LD_VAR 0 1
54079: PPUSH
54080: CALL_OW 321
54084: PUSH
54085: LD_INT 2
54087: EQUAL
54088: ST_TO_ADDR
54089: GO 54378
54091: LD_INT 22
54093: DOUBLE
54094: EQUAL
54095: IFTRUE 54105
54097: LD_INT 36
54099: DOUBLE
54100: EQUAL
54101: IFTRUE 54105
54103: GO 54130
54105: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54106: LD_ADDR_VAR 0 3
54110: PUSH
54111: LD_INT 15
54113: PPUSH
54114: LD_VAR 0 1
54118: PPUSH
54119: CALL_OW 321
54123: PUSH
54124: LD_INT 2
54126: EQUAL
54127: ST_TO_ADDR
54128: GO 54378
54130: LD_INT 30
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54163
54138: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_INT 20
54146: PPUSH
54147: LD_VAR 0 1
54151: PPUSH
54152: CALL_OW 321
54156: PUSH
54157: LD_INT 2
54159: EQUAL
54160: ST_TO_ADDR
54161: GO 54378
54163: LD_INT 28
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54177
54169: LD_INT 21
54171: DOUBLE
54172: EQUAL
54173: IFTRUE 54177
54175: GO 54202
54177: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54178: LD_ADDR_VAR 0 3
54182: PUSH
54183: LD_INT 21
54185: PPUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL_OW 321
54195: PUSH
54196: LD_INT 2
54198: EQUAL
54199: ST_TO_ADDR
54200: GO 54378
54202: LD_INT 16
54204: DOUBLE
54205: EQUAL
54206: IFTRUE 54210
54208: GO 54237
54210: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54211: LD_ADDR_VAR 0 3
54215: PUSH
54216: LD_EXP 62
54220: PPUSH
54221: LD_VAR 0 1
54225: PPUSH
54226: CALL_OW 321
54230: PUSH
54231: LD_INT 2
54233: EQUAL
54234: ST_TO_ADDR
54235: GO 54378
54237: LD_INT 19
54239: DOUBLE
54240: EQUAL
54241: IFTRUE 54251
54243: LD_INT 23
54245: DOUBLE
54246: EQUAL
54247: IFTRUE 54251
54249: GO 54278
54251: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54252: LD_ADDR_VAR 0 3
54256: PUSH
54257: LD_EXP 61
54261: PPUSH
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 321
54271: PUSH
54272: LD_INT 2
54274: EQUAL
54275: ST_TO_ADDR
54276: GO 54378
54278: LD_INT 17
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54286
54284: GO 54311
54286: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 39
54294: PPUSH
54295: LD_VAR 0 1
54299: PPUSH
54300: CALL_OW 321
54304: PUSH
54305: LD_INT 2
54307: EQUAL
54308: ST_TO_ADDR
54309: GO 54378
54311: LD_INT 18
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54319
54317: GO 54344
54319: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_INT 40
54327: PPUSH
54328: LD_VAR 0 1
54332: PPUSH
54333: CALL_OW 321
54337: PUSH
54338: LD_INT 2
54340: EQUAL
54341: ST_TO_ADDR
54342: GO 54378
54344: LD_INT 27
54346: DOUBLE
54347: EQUAL
54348: IFTRUE 54352
54350: GO 54377
54352: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54353: LD_ADDR_VAR 0 3
54357: PUSH
54358: LD_INT 35
54360: PPUSH
54361: LD_VAR 0 1
54365: PPUSH
54366: CALL_OW 321
54370: PUSH
54371: LD_INT 2
54373: EQUAL
54374: ST_TO_ADDR
54375: GO 54378
54377: POP
// end ;
54378: LD_VAR 0 3
54382: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54383: LD_INT 0
54385: PPUSH
54386: PPUSH
54387: PPUSH
54388: PPUSH
54389: PPUSH
54390: PPUSH
54391: PPUSH
54392: PPUSH
54393: PPUSH
54394: PPUSH
54395: PPUSH
// result := false ;
54396: LD_ADDR_VAR 0 6
54400: PUSH
54401: LD_INT 0
54403: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54404: LD_VAR 0 1
54408: NOT
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 266
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: IN
54430: NOT
54431: OR
54432: PUSH
54433: LD_VAR 0 2
54437: NOT
54438: OR
54439: PUSH
54440: LD_VAR 0 5
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 4
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: IN
54471: NOT
54472: OR
54473: PUSH
54474: LD_VAR 0 3
54478: PPUSH
54479: LD_VAR 0 4
54483: PPUSH
54484: CALL_OW 488
54488: NOT
54489: OR
54490: IFFALSE 54494
// exit ;
54492: GO 55230
// side := GetSide ( depot ) ;
54494: LD_ADDR_VAR 0 9
54498: PUSH
54499: LD_VAR 0 1
54503: PPUSH
54504: CALL_OW 255
54508: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54509: LD_VAR 0 9
54513: PPUSH
54514: LD_VAR 0 2
54518: PPUSH
54519: CALL 54003 0 2
54523: NOT
54524: IFFALSE 54528
// exit ;
54526: GO 55230
// pom := GetBase ( depot ) ;
54528: LD_ADDR_VAR 0 10
54532: PUSH
54533: LD_VAR 0 1
54537: PPUSH
54538: CALL_OW 274
54542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54543: LD_ADDR_VAR 0 11
54547: PUSH
54548: LD_VAR 0 2
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: CALL_OW 248
54562: PPUSH
54563: CALL_OW 450
54567: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54568: LD_VAR 0 10
54572: PPUSH
54573: LD_INT 1
54575: PPUSH
54576: CALL_OW 275
54580: PUSH
54581: LD_VAR 0 11
54585: PUSH
54586: LD_INT 1
54588: ARRAY
54589: GREATEREQUAL
54590: PUSH
54591: LD_VAR 0 10
54595: PPUSH
54596: LD_INT 2
54598: PPUSH
54599: CALL_OW 275
54603: PUSH
54604: LD_VAR 0 11
54608: PUSH
54609: LD_INT 2
54611: ARRAY
54612: GREATEREQUAL
54613: AND
54614: PUSH
54615: LD_VAR 0 10
54619: PPUSH
54620: LD_INT 3
54622: PPUSH
54623: CALL_OW 275
54627: PUSH
54628: LD_VAR 0 11
54632: PUSH
54633: LD_INT 3
54635: ARRAY
54636: GREATEREQUAL
54637: AND
54638: NOT
54639: IFFALSE 54643
// exit ;
54641: GO 55230
// if GetBType ( depot ) = b_depot then
54643: LD_VAR 0 1
54647: PPUSH
54648: CALL_OW 266
54652: PUSH
54653: LD_INT 0
54655: EQUAL
54656: IFFALSE 54668
// dist := 28 else
54658: LD_ADDR_VAR 0 14
54662: PUSH
54663: LD_INT 28
54665: ST_TO_ADDR
54666: GO 54676
// dist := 36 ;
54668: LD_ADDR_VAR 0 14
54672: PUSH
54673: LD_INT 36
54675: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54676: LD_VAR 0 1
54680: PPUSH
54681: LD_VAR 0 3
54685: PPUSH
54686: LD_VAR 0 4
54690: PPUSH
54691: CALL_OW 297
54695: PUSH
54696: LD_VAR 0 14
54700: GREATER
54701: IFFALSE 54705
// exit ;
54703: GO 55230
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54705: LD_ADDR_VAR 0 12
54709: PUSH
54710: LD_VAR 0 2
54714: PPUSH
54715: LD_VAR 0 3
54719: PPUSH
54720: LD_VAR 0 4
54724: PPUSH
54725: LD_VAR 0 5
54729: PPUSH
54730: LD_VAR 0 1
54734: PPUSH
54735: CALL_OW 248
54739: PPUSH
54740: LD_INT 0
54742: PPUSH
54743: CALL 55235 0 6
54747: ST_TO_ADDR
// if not hexes then
54748: LD_VAR 0 12
54752: NOT
54753: IFFALSE 54757
// exit ;
54755: GO 55230
// hex := GetHexInfo ( x , y ) ;
54757: LD_ADDR_VAR 0 15
54761: PUSH
54762: LD_VAR 0 3
54766: PPUSH
54767: LD_VAR 0 4
54771: PPUSH
54772: CALL_OW 546
54776: ST_TO_ADDR
// if hex [ 1 ] then
54777: LD_VAR 0 15
54781: PUSH
54782: LD_INT 1
54784: ARRAY
54785: IFFALSE 54789
// exit ;
54787: GO 55230
// height := hex [ 2 ] ;
54789: LD_ADDR_VAR 0 13
54793: PUSH
54794: LD_VAR 0 15
54798: PUSH
54799: LD_INT 2
54801: ARRAY
54802: ST_TO_ADDR
// for i = 1 to hexes do
54803: LD_ADDR_VAR 0 7
54807: PUSH
54808: DOUBLE
54809: LD_INT 1
54811: DEC
54812: ST_TO_ADDR
54813: LD_VAR 0 12
54817: PUSH
54818: FOR_TO
54819: IFFALSE 55149
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54821: LD_VAR 0 12
54825: PUSH
54826: LD_VAR 0 7
54830: ARRAY
54831: PUSH
54832: LD_INT 1
54834: ARRAY
54835: PPUSH
54836: LD_VAR 0 12
54840: PUSH
54841: LD_VAR 0 7
54845: ARRAY
54846: PUSH
54847: LD_INT 2
54849: ARRAY
54850: PPUSH
54851: CALL_OW 488
54855: NOT
54856: PUSH
54857: LD_VAR 0 12
54861: PUSH
54862: LD_VAR 0 7
54866: ARRAY
54867: PUSH
54868: LD_INT 1
54870: ARRAY
54871: PPUSH
54872: LD_VAR 0 12
54876: PUSH
54877: LD_VAR 0 7
54881: ARRAY
54882: PUSH
54883: LD_INT 2
54885: ARRAY
54886: PPUSH
54887: CALL_OW 428
54891: PUSH
54892: LD_INT 0
54894: GREATER
54895: OR
54896: PUSH
54897: LD_VAR 0 12
54901: PUSH
54902: LD_VAR 0 7
54906: ARRAY
54907: PUSH
54908: LD_INT 1
54910: ARRAY
54911: PPUSH
54912: LD_VAR 0 12
54916: PUSH
54917: LD_VAR 0 7
54921: ARRAY
54922: PUSH
54923: LD_INT 2
54925: ARRAY
54926: PPUSH
54927: CALL_OW 351
54931: OR
54932: IFFALSE 54938
// exit ;
54934: POP
54935: POP
54936: GO 55230
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_VAR 0 12
54947: PUSH
54948: LD_VAR 0 7
54952: ARRAY
54953: PUSH
54954: LD_INT 1
54956: ARRAY
54957: PPUSH
54958: LD_VAR 0 12
54962: PUSH
54963: LD_VAR 0 7
54967: ARRAY
54968: PUSH
54969: LD_INT 2
54971: ARRAY
54972: PPUSH
54973: CALL_OW 546
54977: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54978: LD_VAR 0 8
54982: PUSH
54983: LD_INT 1
54985: ARRAY
54986: PUSH
54987: LD_VAR 0 8
54991: PUSH
54992: LD_INT 2
54994: ARRAY
54995: PUSH
54996: LD_VAR 0 13
55000: PUSH
55001: LD_INT 2
55003: PLUS
55004: GREATER
55005: OR
55006: PUSH
55007: LD_VAR 0 8
55011: PUSH
55012: LD_INT 2
55014: ARRAY
55015: PUSH
55016: LD_VAR 0 13
55020: PUSH
55021: LD_INT 2
55023: MINUS
55024: LESS
55025: OR
55026: PUSH
55027: LD_VAR 0 8
55031: PUSH
55032: LD_INT 3
55034: ARRAY
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 8
55041: PUSH
55042: LD_INT 9
55044: PUSH
55045: LD_INT 10
55047: PUSH
55048: LD_INT 11
55050: PUSH
55051: LD_INT 12
55053: PUSH
55054: LD_INT 13
55056: PUSH
55057: LD_INT 16
55059: PUSH
55060: LD_INT 17
55062: PUSH
55063: LD_INT 18
55065: PUSH
55066: LD_INT 19
55068: PUSH
55069: LD_INT 20
55071: PUSH
55072: LD_INT 21
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: IN
55090: NOT
55091: OR
55092: PUSH
55093: LD_VAR 0 8
55097: PUSH
55098: LD_INT 5
55100: ARRAY
55101: NOT
55102: OR
55103: PUSH
55104: LD_VAR 0 8
55108: PUSH
55109: LD_INT 6
55111: ARRAY
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 7
55121: PUSH
55122: LD_INT 9
55124: PUSH
55125: LD_INT 10
55127: PUSH
55128: LD_INT 11
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: IN
55139: NOT
55140: OR
55141: IFFALSE 55147
// exit ;
55143: POP
55144: POP
55145: GO 55230
// end ;
55147: GO 54818
55149: POP
55150: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55151: LD_VAR 0 9
55155: PPUSH
55156: LD_VAR 0 3
55160: PPUSH
55161: LD_VAR 0 4
55165: PPUSH
55166: LD_INT 20
55168: PPUSH
55169: CALL 47176 0 4
55173: PUSH
55174: LD_INT 4
55176: ARRAY
55177: IFFALSE 55181
// exit ;
55179: GO 55230
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55181: LD_VAR 0 2
55185: PUSH
55186: LD_INT 29
55188: PUSH
55189: LD_INT 30
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: IN
55196: PUSH
55197: LD_VAR 0 3
55201: PPUSH
55202: LD_VAR 0 4
55206: PPUSH
55207: LD_VAR 0 9
55211: PPUSH
55212: CALL_OW 440
55216: NOT
55217: AND
55218: IFFALSE 55222
// exit ;
55220: GO 55230
// result := true ;
55222: LD_ADDR_VAR 0 6
55226: PUSH
55227: LD_INT 1
55229: ST_TO_ADDR
// end ;
55230: LD_VAR 0 6
55234: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
55267: PPUSH
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
55283: PPUSH
55284: PPUSH
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
// result = [ ] ;
55295: LD_ADDR_VAR 0 7
55299: PUSH
55300: EMPTY
55301: ST_TO_ADDR
// temp_list = [ ] ;
55302: LD_ADDR_VAR 0 9
55306: PUSH
55307: EMPTY
55308: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55309: LD_VAR 0 4
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 5
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: IN
55340: NOT
55341: PUSH
55342: LD_VAR 0 1
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: IN
55357: PUSH
55358: LD_VAR 0 5
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: IN
55377: NOT
55378: AND
55379: OR
55380: IFFALSE 55384
// exit ;
55382: GO 73775
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55384: LD_VAR 0 1
55388: PUSH
55389: LD_INT 6
55391: PUSH
55392: LD_INT 7
55394: PUSH
55395: LD_INT 8
55397: PUSH
55398: LD_INT 13
55400: PUSH
55401: LD_INT 12
55403: PUSH
55404: LD_INT 15
55406: PUSH
55407: LD_INT 11
55409: PUSH
55410: LD_INT 14
55412: PUSH
55413: LD_INT 10
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: IN
55427: IFFALSE 55437
// btype = b_lab ;
55429: LD_ADDR_VAR 0 1
55433: PUSH
55434: LD_INT 6
55436: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55437: LD_VAR 0 6
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: IN
55456: NOT
55457: PUSH
55458: LD_VAR 0 1
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 6
55477: PUSH
55478: LD_INT 36
55480: PUSH
55481: LD_INT 4
55483: PUSH
55484: LD_INT 5
55486: PUSH
55487: LD_INT 31
55489: PUSH
55490: LD_INT 32
55492: PUSH
55493: LD_INT 33
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: IN
55509: NOT
55510: PUSH
55511: LD_VAR 0 6
55515: PUSH
55516: LD_INT 1
55518: EQUAL
55519: AND
55520: OR
55521: PUSH
55522: LD_VAR 0 1
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: IN
55537: NOT
55538: PUSH
55539: LD_VAR 0 6
55543: PUSH
55544: LD_INT 2
55546: EQUAL
55547: AND
55548: OR
55549: IFFALSE 55559
// mode = 0 ;
55551: LD_ADDR_VAR 0 6
55555: PUSH
55556: LD_INT 0
55558: ST_TO_ADDR
// case mode of 0 :
55559: LD_VAR 0 6
55563: PUSH
55564: LD_INT 0
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55572
55570: GO 67025
55572: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55573: LD_ADDR_VAR 0 11
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55766: LD_ADDR_VAR 0 12
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55962: LD_ADDR_VAR 0 13
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56161: LD_ADDR_VAR 0 14
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56357: LD_ADDR_VAR 0 15
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56550: LD_ADDR_VAR 0 16
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56743: LD_ADDR_VAR 0 17
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56973: LD_ADDR_VAR 0 18
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57203: LD_ADDR_VAR 0 19
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57433: LD_ADDR_VAR 0 20
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57663: LD_ADDR_VAR 0 21
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57893: LD_ADDR_VAR 0 22
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58123: LD_ADDR_VAR 0 23
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58403: LD_ADDR_VAR 0 24
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58679: LD_ADDR_VAR 0 25
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58953: LD_ADDR_VAR 0 26
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59229: LD_ADDR_VAR 0 27
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59509: LD_ADDR_VAR 0 28
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59791: LD_ADDR_VAR 0 29
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: NEG
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60070: LD_ADDR_VAR 0 30
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60348: LD_ADDR_VAR 0 31
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60626: LD_ADDR_VAR 0 32
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60904: LD_ADDR_VAR 0 33
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61183: LD_ADDR_VAR 0 34
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 3
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61463: LD_ADDR_VAR 0 35
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61575: LD_ADDR_VAR 0 36
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61687: LD_ADDR_VAR 0 37
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61799: LD_ADDR_VAR 0 38
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61911: LD_ADDR_VAR 0 39
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62023: LD_ADDR_VAR 0 40
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62135: LD_ADDR_VAR 0 41
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: NEG
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62485: LD_ADDR_VAR 0 42
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: LD_INT 3
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: LD_INT 3
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: LD_INT 3
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62835: LD_ADDR_VAR 0 43
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: NEG
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 3
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: NEG
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63183: LD_ADDR_VAR 0 44
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 1
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 3
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 3
63457: NEG
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 3
63492: NEG
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63533: LD_ADDR_VAR 0 45
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: LD_INT 2
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63883: LD_ADDR_VAR 0 46
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 2
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 3
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 3
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: NEG
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64231: LD_ADDR_VAR 0 47
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64382: LD_ADDR_VAR 0 48
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64529: LD_ADDR_VAR 0 49
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64673: LD_ADDR_VAR 0 50
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64817: LD_ADDR_VAR 0 51
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 1
64918: NEG
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64964: LD_ADDR_VAR 0 52
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: NEG
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65115: LD_ADDR_VAR 0 53
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 2
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65345: LD_ADDR_VAR 0 54
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: LD_INT 2
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 2
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65575: LD_ADDR_VAR 0 55
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65805: LD_ADDR_VAR 0 56
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66035: LD_ADDR_VAR 0 57
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 2
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 2
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 2
66211: NEG
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: LD_INT 1
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66265: LD_ADDR_VAR 0 58
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: LD_INT 2
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 2
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66495: LD_ADDR_VAR 0 59
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: NEG
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66583: LD_ADDR_VAR 0 60
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66671: LD_ADDR_VAR 0 61
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 1
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66759: LD_ADDR_VAR 0 62
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66847: LD_ADDR_VAR 0 63
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66935: LD_ADDR_VAR 0 64
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 1
67004: NEG
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// end ; 1 :
67023: GO 72920
67025: LD_INT 1
67027: DOUBLE
67028: EQUAL
67029: IFTRUE 67033
67031: GO 69656
67033: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67034: LD_ADDR_VAR 0 11
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67078: LD_ADDR_VAR 0 12
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 3
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67119: LD_ADDR_VAR 0 13
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 3
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67159: LD_ADDR_VAR 0 14
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67200: LD_ADDR_VAR 0 15
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67244: LD_ADDR_VAR 0 16
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: LD_INT 3
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 3
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67290: LD_ADDR_VAR 0 17
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67334: LD_ADDR_VAR 0 18
67338: PUSH
67339: LD_INT 2
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 3
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67375: LD_ADDR_VAR 0 19
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: LD_INT 3
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: LD_INT 3
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67415: LD_ADDR_VAR 0 20
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 3
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67456: LD_ADDR_VAR 0 21
67460: PUSH
67461: LD_INT 2
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67500: LD_ADDR_VAR 0 22
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 3
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: NEG
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: NEG
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67546: LD_ADDR_VAR 0 23
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: LD_INT 3
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 4
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 1
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67590: LD_ADDR_VAR 0 24
67594: PUSH
67595: LD_INT 3
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 3
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 1
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: LIST
67630: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67631: LD_ADDR_VAR 0 25
67635: PUSH
67636: LD_INT 3
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 4
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67671: LD_ADDR_VAR 0 26
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: LD_INT 3
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: LIST
67711: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67712: LD_ADDR_VAR 0 27
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 3
67730: NEG
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67756: LD_ADDR_VAR 0 28
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: LD_INT 4
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: NEG
67788: PUSH
67789: LD_INT 3
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: LIST
67801: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67802: LD_ADDR_VAR 0 29
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 4
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: LD_INT 5
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 5
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 6
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 6
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: LD_INT 5
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67957: LD_ADDR_VAR 0 30
67961: PUSH
67962: LD_INT 2
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 4
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 5
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 5
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 5
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 6
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 6
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68100: LD_ADDR_VAR 0 31
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 4
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: LD_INT 4
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 5
68177: PUSH
68178: LD_INT 5
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 4
68187: PUSH
68188: LD_INT 5
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 6
68197: PUSH
68198: LD_INT 5
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 6
68207: PUSH
68208: LD_INT 6
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 5
68217: PUSH
68218: LD_INT 6
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68239: LD_ADDR_VAR 0 32
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: LD_INT 4
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 4
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 3
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 5
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 5
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 4
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: LD_INT 6
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 6
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: LD_INT 5
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68382: LD_ADDR_VAR 0 33
68386: PUSH
68387: LD_INT 2
68389: NEG
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 3
68400: NEG
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: LD_INT 1
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: NEG
68424: PUSH
68425: LD_INT 1
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 4
68434: NEG
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 5
68468: NEG
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 5
68479: NEG
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 5
68491: NEG
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 6
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 6
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68537: LD_ADDR_VAR 0 34
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 3
68568: NEG
68569: PUSH
68570: LD_INT 3
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: NEG
68581: PUSH
68582: LD_INT 4
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 4
68592: NEG
68593: PUSH
68594: LD_INT 3
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 4
68604: NEG
68605: PUSH
68606: LD_INT 4
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: NEG
68617: PUSH
68618: LD_INT 5
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 5
68628: NEG
68629: PUSH
68630: LD_INT 4
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 5
68640: NEG
68641: PUSH
68642: LD_INT 5
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 5
68652: NEG
68653: PUSH
68654: LD_INT 6
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 6
68664: NEG
68665: PUSH
68666: LD_INT 5
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 6
68676: NEG
68677: PUSH
68678: LD_INT 6
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68700: LD_ADDR_VAR 0 41
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 2
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: LD_INT 3
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: LD_INT 2
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68744: LD_ADDR_VAR 0 42
68748: PUSH
68749: LD_INT 2
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 3
68772: PUSH
68773: LD_INT 1
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68785: LD_ADDR_VAR 0 43
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 3
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: PUSH
68813: LD_INT 3
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: LIST
68824: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68825: LD_ADDR_VAR 0 44
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 2
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 1
68842: PUSH
68843: LD_INT 3
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: LIST
68865: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68866: LD_ADDR_VAR 0 45
68870: PUSH
68871: LD_INT 2
68873: NEG
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 2
68884: NEG
68885: PUSH
68886: LD_INT 1
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68910: LD_ADDR_VAR 0 46
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: LD_INT 2
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 2
68929: NEG
68930: PUSH
68931: LD_INT 3
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: LIST
68955: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68956: LD_ADDR_VAR 0 47
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: LD_INT 3
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 1
68975: NEG
68976: PUSH
68977: LD_INT 3
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68989: LD_ADDR_VAR 0 48
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 2
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69020: LD_ADDR_VAR 0 49
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: LD_INT 1
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69049: LD_ADDR_VAR 0 50
69053: PUSH
69054: LD_INT 2
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69078: LD_ADDR_VAR 0 51
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: LD_INT 2
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 2
69096: NEG
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69109: LD_ADDR_VAR 0 52
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: LD_INT 1
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: NEG
69129: PUSH
69130: LD_INT 2
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69142: LD_ADDR_VAR 0 53
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69186: LD_ADDR_VAR 0 54
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 1
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 3
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69227: LD_ADDR_VAR 0 55
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: LD_INT 2
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: LD_INT 3
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 2
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: LIST
69266: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69267: LD_ADDR_VAR 0 56
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69308: LD_ADDR_VAR 0 57
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 3
69326: NEG
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69352: LD_ADDR_VAR 0 58
69356: PUSH
69357: LD_INT 2
69359: NEG
69360: PUSH
69361: LD_INT 3
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 3
69371: NEG
69372: PUSH
69373: LD_INT 2
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 3
69383: NEG
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69398: LD_ADDR_VAR 0 59
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: LIST
69441: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69442: LD_ADDR_VAR 0 60
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 2
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69483: LD_ADDR_VAR 0 61
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 2
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: LD_INT 2
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69523: LD_ADDR_VAR 0 62
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: LIST
69563: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69564: LD_ADDR_VAR 0 63
69568: PUSH
69569: LD_INT 1
69571: NEG
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 2
69593: NEG
69594: PUSH
69595: LD_INT 1
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69608: LD_ADDR_VAR 0 64
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: NEG
69628: PUSH
69629: LD_INT 1
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 2
69639: NEG
69640: PUSH
69641: LD_INT 2
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: ST_TO_ADDR
// end ; 2 :
69654: GO 72920
69656: LD_INT 2
69658: DOUBLE
69659: EQUAL
69660: IFTRUE 69664
69662: GO 72919
69664: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69665: LD_ADDR_VAR 0 29
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 4
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 5
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 5
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 4
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 5
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: LD_INT 3
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 3
69775: PUSH
69776: LD_INT 2
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: LD_INT 3
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: LD_INT 4
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: LD_INT 4
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 3
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: PUSH
69826: LD_INT 2
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 4
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: LD_INT 4
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 3
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: LD_INT 4
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: LD_INT 5
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 5
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 4
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 2
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: NEG
69938: PUSH
69939: LD_INT 3
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 3
69993: NEG
69994: PUSH
69995: LD_INT 1
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 4
70004: NEG
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 4
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 4
70027: NEG
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: NEG
70040: PUSH
70041: LD_INT 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: NEG
70051: PUSH
70052: LD_INT 4
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 4
70062: NEG
70063: PUSH
70064: LD_INT 5
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 3
70074: NEG
70075: PUSH
70076: LD_INT 4
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 3
70086: NEG
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 4
70098: NEG
70099: PUSH
70100: LD_INT 3
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 5
70110: NEG
70111: PUSH
70112: LD_INT 4
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 5
70122: NEG
70123: PUSH
70124: LD_INT 5
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: NEG
70135: PUSH
70136: LD_INT 5
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 5
70146: NEG
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70203: LD_ADDR_VAR 0 30
70207: PUSH
70208: LD_INT 4
70210: PUSH
70211: LD_INT 4
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 4
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 5
70240: PUSH
70241: LD_INT 5
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 4
70250: PUSH
70251: LD_INT 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: LD_INT 4
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 5
70280: PUSH
70281: LD_INT 3
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: LD_INT 5
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 4
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: NEG
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: LD_INT 4
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: NEG
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: NEG
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 4
70404: NEG
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: LD_INT 1
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 4
70438: NEG
70439: PUSH
70440: LD_INT 1
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 5
70449: NEG
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 5
70460: NEG
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 5
70472: NEG
70473: PUSH
70474: LD_INT 2
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 3
70484: NEG
70485: PUSH
70486: LD_INT 2
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 3
70495: NEG
70496: PUSH
70497: LD_INT 3
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: NEG
70508: PUSH
70509: LD_INT 4
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 2
70519: NEG
70520: PUSH
70521: LD_INT 3
70523: NEG
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 2
70531: NEG
70532: PUSH
70533: LD_INT 2
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: LD_INT 2
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 4
70555: NEG
70556: PUSH
70557: LD_INT 3
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 4
70567: NEG
70568: PUSH
70569: LD_INT 4
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: LD_INT 4
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 4
70591: NEG
70592: PUSH
70593: LD_INT 2
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: LD_INT 4
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 5
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: LD_INT 4
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: LD_INT 3
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: NEG
70659: PUSH
70660: LD_INT 4
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: NEG
70671: PUSH
70672: LD_INT 5
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 2
70682: PUSH
70683: LD_INT 3
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: LD_INT 5
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70750: LD_ADDR_VAR 0 31
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: LD_INT 4
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 1
70777: PUSH
70778: LD_INT 4
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: LD_INT 5
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 0
70797: PUSH
70798: LD_INT 5
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: LD_INT 4
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 1
70818: NEG
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 5
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: NEG
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 3
70850: NEG
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 2
70873: NEG
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: LD_INT 1
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 3
70895: NEG
70896: PUSH
70897: LD_INT 1
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 4
70906: NEG
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 4
70917: NEG
70918: PUSH
70919: LD_INT 1
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: LD_INT 2
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: LD_INT 2
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 4
70952: NEG
70953: PUSH
70954: LD_INT 4
70956: NEG
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 4
70964: NEG
70965: PUSH
70966: LD_INT 5
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: NEG
70977: PUSH
70978: LD_INT 4
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 3
70988: NEG
70989: PUSH
70990: LD_INT 3
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 4
71000: NEG
71001: PUSH
71002: LD_INT 3
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 5
71012: NEG
71013: PUSH
71014: LD_INT 4
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 5
71024: NEG
71025: PUSH
71026: LD_INT 5
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 3
71036: NEG
71037: PUSH
71038: LD_INT 5
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 5
71048: NEG
71049: PUSH
71050: LD_INT 3
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: LD_INT 3
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 0
71071: PUSH
71072: LD_INT 4
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: LD_INT 2
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 0
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: LD_INT 3
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 1
71127: NEG
71128: PUSH
71129: LD_INT 4
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 2
71139: PUSH
71140: LD_INT 2
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 2
71150: NEG
71151: PUSH
71152: LD_INT 4
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: LD_INT 0
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 4
71172: PUSH
71173: LD_INT 1
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 5
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 5
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 4
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 3
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: LD_INT 2
71237: NEG
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 5
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71300: LD_ADDR_VAR 0 32
71304: PUSH
71305: LD_INT 4
71307: NEG
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 4
71318: NEG
71319: PUSH
71320: LD_INT 1
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 3
71330: NEG
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 3
71341: NEG
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 4
71352: NEG
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 5
71363: NEG
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 5
71374: NEG
71375: PUSH
71376: LD_INT 1
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 5
71386: NEG
71387: PUSH
71388: LD_INT 2
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 3
71398: NEG
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 3
71409: NEG
71410: PUSH
71411: LD_INT 3
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: NEG
71422: PUSH
71423: LD_INT 4
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 2
71433: NEG
71434: PUSH
71435: LD_INT 3
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: LD_INT 2
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 3
71457: NEG
71458: PUSH
71459: LD_INT 2
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 4
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 4
71481: NEG
71482: PUSH
71483: LD_INT 4
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 2
71493: NEG
71494: PUSH
71495: LD_INT 4
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 4
71505: NEG
71506: PUSH
71507: LD_INT 2
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: LD_INT 4
71520: NEG
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: LD_INT 5
71531: NEG
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: LD_INT 4
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 1
71550: PUSH
71551: LD_INT 3
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: LD_INT 4
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: NEG
71585: PUSH
71586: LD_INT 5
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 2
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 2
71607: NEG
71608: PUSH
71609: LD_INT 5
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: LD_INT 0
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 3
71629: PUSH
71630: LD_INT 1
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 4
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 4
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 3
71660: PUSH
71661: LD_INT 1
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 2
71680: PUSH
71681: LD_INT 1
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 2
71694: NEG
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 4
71702: PUSH
71703: LD_INT 2
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 4
71712: PUSH
71713: LD_INT 4
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 4
71722: PUSH
71723: LD_INT 3
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 5
71732: PUSH
71733: LD_INT 4
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 5
71742: PUSH
71743: LD_INT 5
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 5
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: LD_INT 4
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: PUSH
71773: LD_INT 3
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: LD_INT 3
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 3
71792: PUSH
71793: LD_INT 5
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71847: LD_ADDR_VAR 0 33
71851: PUSH
71852: LD_INT 4
71854: NEG
71855: PUSH
71856: LD_INT 4
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 4
71866: NEG
71867: PUSH
71868: LD_INT 5
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 3
71878: NEG
71879: PUSH
71880: LD_INT 4
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 3
71890: NEG
71891: PUSH
71892: LD_INT 3
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 4
71902: NEG
71903: PUSH
71904: LD_INT 3
71906: NEG
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 5
71914: NEG
71915: PUSH
71916: LD_INT 4
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 5
71926: NEG
71927: PUSH
71928: LD_INT 5
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: LD_INT 5
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 5
71950: NEG
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: LD_INT 3
71965: NEG
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 0
71973: PUSH
71974: LD_INT 4
71976: NEG
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 1
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 1
71995: PUSH
71996: LD_INT 2
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: LD_INT 2
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: NEG
72018: PUSH
72019: LD_INT 3
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 1
72029: NEG
72030: PUSH
72031: LD_INT 4
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 2
72041: PUSH
72042: LD_INT 2
72044: NEG
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 2
72052: NEG
72053: PUSH
72054: LD_INT 4
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 4
72064: PUSH
72065: LD_INT 0
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 4
72074: PUSH
72075: LD_INT 1
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 5
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 5
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 4
72105: PUSH
72106: LD_INT 1
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 3
72125: PUSH
72126: LD_INT 1
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 3
72136: PUSH
72137: LD_INT 2
72139: NEG
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 5
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 3
72157: PUSH
72158: LD_INT 3
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 3
72167: PUSH
72168: LD_INT 2
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 4
72187: PUSH
72188: LD_INT 4
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 3
72197: PUSH
72198: LD_INT 4
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 2
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 4
72227: PUSH
72228: LD_INT 2
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 0
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: PUSH
72268: LD_INT 4
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 1
72277: PUSH
72278: LD_INT 5
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 0
72287: PUSH
72288: LD_INT 5
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 1
72297: NEG
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 1
72308: NEG
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: LD_INT 5
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: LD_INT 3
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72385: LD_ADDR_VAR 0 34
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: LD_INT 5
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: LD_INT 4
72417: NEG
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 1
72425: PUSH
72426: LD_INT 3
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 0
72436: PUSH
72437: LD_INT 3
72439: NEG
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 1
72447: NEG
72448: PUSH
72449: LD_INT 4
72451: NEG
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: LD_INT 5
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 2
72471: PUSH
72472: LD_INT 3
72474: NEG
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: LD_INT 5
72486: NEG
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 3
72494: PUSH
72495: LD_INT 0
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 3
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 4
72515: PUSH
72516: LD_INT 0
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 4
72525: PUSH
72526: LD_INT 1
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: LD_INT 1
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 2
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 2
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 2
72566: PUSH
72567: LD_INT 2
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 4
72577: PUSH
72578: LD_INT 2
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 4
72587: PUSH
72588: LD_INT 4
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 4
72597: PUSH
72598: LD_INT 3
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 5
72607: PUSH
72608: LD_INT 4
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 5
72617: PUSH
72618: LD_INT 5
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 4
72627: PUSH
72628: LD_INT 5
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 4
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 3
72647: PUSH
72648: LD_INT 3
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 5
72657: PUSH
72658: LD_INT 3
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 3
72667: PUSH
72668: LD_INT 5
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 1
72697: PUSH
72698: LD_INT 3
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 1
72707: PUSH
72708: LD_INT 4
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 0
72717: PUSH
72718: LD_INT 4
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 1
72727: NEG
72728: PUSH
72729: LD_INT 3
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 1
72738: NEG
72739: PUSH
72740: LD_INT 2
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 2
72749: PUSH
72750: LD_INT 4
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 2
72759: NEG
72760: PUSH
72761: LD_INT 2
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 4
72770: NEG
72771: PUSH
72772: LD_INT 0
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 4
72781: NEG
72782: PUSH
72783: LD_INT 1
72785: NEG
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 3
72793: NEG
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 3
72804: NEG
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 4
72815: NEG
72816: PUSH
72817: LD_INT 1
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 5
72826: NEG
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 5
72837: NEG
72838: PUSH
72839: LD_INT 1
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 5
72849: NEG
72850: PUSH
72851: LD_INT 2
72853: NEG
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 3
72861: NEG
72862: PUSH
72863: LD_INT 2
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: ST_TO_ADDR
// end ; end ;
72917: GO 72920
72919: POP
// case btype of b_depot , b_warehouse :
72920: LD_VAR 0 1
72924: PUSH
72925: LD_INT 0
72927: DOUBLE
72928: EQUAL
72929: IFTRUE 72939
72931: LD_INT 1
72933: DOUBLE
72934: EQUAL
72935: IFTRUE 72939
72937: GO 73140
72939: POP
// case nation of nation_american :
72940: LD_VAR 0 5
72944: PUSH
72945: LD_INT 1
72947: DOUBLE
72948: EQUAL
72949: IFTRUE 72953
72951: GO 73009
72953: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72954: LD_ADDR_VAR 0 9
72958: PUSH
72959: LD_VAR 0 11
72963: PUSH
72964: LD_VAR 0 12
72968: PUSH
72969: LD_VAR 0 13
72973: PUSH
72974: LD_VAR 0 14
72978: PUSH
72979: LD_VAR 0 15
72983: PUSH
72984: LD_VAR 0 16
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: PUSH
72997: LD_VAR 0 4
73001: PUSH
73002: LD_INT 1
73004: PLUS
73005: ARRAY
73006: ST_TO_ADDR
73007: GO 73138
73009: LD_INT 2
73011: DOUBLE
73012: EQUAL
73013: IFTRUE 73017
73015: GO 73073
73017: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73018: LD_ADDR_VAR 0 9
73022: PUSH
73023: LD_VAR 0 17
73027: PUSH
73028: LD_VAR 0 18
73032: PUSH
73033: LD_VAR 0 19
73037: PUSH
73038: LD_VAR 0 20
73042: PUSH
73043: LD_VAR 0 21
73047: PUSH
73048: LD_VAR 0 22
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: PUSH
73061: LD_VAR 0 4
73065: PUSH
73066: LD_INT 1
73068: PLUS
73069: ARRAY
73070: ST_TO_ADDR
73071: GO 73138
73073: LD_INT 3
73075: DOUBLE
73076: EQUAL
73077: IFTRUE 73081
73079: GO 73137
73081: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73082: LD_ADDR_VAR 0 9
73086: PUSH
73087: LD_VAR 0 23
73091: PUSH
73092: LD_VAR 0 24
73096: PUSH
73097: LD_VAR 0 25
73101: PUSH
73102: LD_VAR 0 26
73106: PUSH
73107: LD_VAR 0 27
73111: PUSH
73112: LD_VAR 0 28
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: PUSH
73125: LD_VAR 0 4
73129: PUSH
73130: LD_INT 1
73132: PLUS
73133: ARRAY
73134: ST_TO_ADDR
73135: GO 73138
73137: POP
73138: GO 73693
73140: LD_INT 2
73142: DOUBLE
73143: EQUAL
73144: IFTRUE 73154
73146: LD_INT 3
73148: DOUBLE
73149: EQUAL
73150: IFTRUE 73154
73152: GO 73210
73154: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73155: LD_ADDR_VAR 0 9
73159: PUSH
73160: LD_VAR 0 29
73164: PUSH
73165: LD_VAR 0 30
73169: PUSH
73170: LD_VAR 0 31
73174: PUSH
73175: LD_VAR 0 32
73179: PUSH
73180: LD_VAR 0 33
73184: PUSH
73185: LD_VAR 0 34
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: LD_VAR 0 4
73202: PUSH
73203: LD_INT 1
73205: PLUS
73206: ARRAY
73207: ST_TO_ADDR
73208: GO 73693
73210: LD_INT 16
73212: DOUBLE
73213: EQUAL
73214: IFTRUE 73272
73216: LD_INT 17
73218: DOUBLE
73219: EQUAL
73220: IFTRUE 73272
73222: LD_INT 18
73224: DOUBLE
73225: EQUAL
73226: IFTRUE 73272
73228: LD_INT 19
73230: DOUBLE
73231: EQUAL
73232: IFTRUE 73272
73234: LD_INT 22
73236: DOUBLE
73237: EQUAL
73238: IFTRUE 73272
73240: LD_INT 20
73242: DOUBLE
73243: EQUAL
73244: IFTRUE 73272
73246: LD_INT 21
73248: DOUBLE
73249: EQUAL
73250: IFTRUE 73272
73252: LD_INT 23
73254: DOUBLE
73255: EQUAL
73256: IFTRUE 73272
73258: LD_INT 24
73260: DOUBLE
73261: EQUAL
73262: IFTRUE 73272
73264: LD_INT 25
73266: DOUBLE
73267: EQUAL
73268: IFTRUE 73272
73270: GO 73328
73272: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73273: LD_ADDR_VAR 0 9
73277: PUSH
73278: LD_VAR 0 35
73282: PUSH
73283: LD_VAR 0 36
73287: PUSH
73288: LD_VAR 0 37
73292: PUSH
73293: LD_VAR 0 38
73297: PUSH
73298: LD_VAR 0 39
73302: PUSH
73303: LD_VAR 0 40
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: PUSH
73316: LD_VAR 0 4
73320: PUSH
73321: LD_INT 1
73323: PLUS
73324: ARRAY
73325: ST_TO_ADDR
73326: GO 73693
73328: LD_INT 6
73330: DOUBLE
73331: EQUAL
73332: IFTRUE 73384
73334: LD_INT 7
73336: DOUBLE
73337: EQUAL
73338: IFTRUE 73384
73340: LD_INT 8
73342: DOUBLE
73343: EQUAL
73344: IFTRUE 73384
73346: LD_INT 13
73348: DOUBLE
73349: EQUAL
73350: IFTRUE 73384
73352: LD_INT 12
73354: DOUBLE
73355: EQUAL
73356: IFTRUE 73384
73358: LD_INT 15
73360: DOUBLE
73361: EQUAL
73362: IFTRUE 73384
73364: LD_INT 11
73366: DOUBLE
73367: EQUAL
73368: IFTRUE 73384
73370: LD_INT 14
73372: DOUBLE
73373: EQUAL
73374: IFTRUE 73384
73376: LD_INT 10
73378: DOUBLE
73379: EQUAL
73380: IFTRUE 73384
73382: GO 73440
73384: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73385: LD_ADDR_VAR 0 9
73389: PUSH
73390: LD_VAR 0 41
73394: PUSH
73395: LD_VAR 0 42
73399: PUSH
73400: LD_VAR 0 43
73404: PUSH
73405: LD_VAR 0 44
73409: PUSH
73410: LD_VAR 0 45
73414: PUSH
73415: LD_VAR 0 46
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: PUSH
73428: LD_VAR 0 4
73432: PUSH
73433: LD_INT 1
73435: PLUS
73436: ARRAY
73437: ST_TO_ADDR
73438: GO 73693
73440: LD_INT 36
73442: DOUBLE
73443: EQUAL
73444: IFTRUE 73448
73446: GO 73504
73448: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73449: LD_ADDR_VAR 0 9
73453: PUSH
73454: LD_VAR 0 47
73458: PUSH
73459: LD_VAR 0 48
73463: PUSH
73464: LD_VAR 0 49
73468: PUSH
73469: LD_VAR 0 50
73473: PUSH
73474: LD_VAR 0 51
73478: PUSH
73479: LD_VAR 0 52
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: PUSH
73492: LD_VAR 0 4
73496: PUSH
73497: LD_INT 1
73499: PLUS
73500: ARRAY
73501: ST_TO_ADDR
73502: GO 73693
73504: LD_INT 4
73506: DOUBLE
73507: EQUAL
73508: IFTRUE 73530
73510: LD_INT 5
73512: DOUBLE
73513: EQUAL
73514: IFTRUE 73530
73516: LD_INT 34
73518: DOUBLE
73519: EQUAL
73520: IFTRUE 73530
73522: LD_INT 37
73524: DOUBLE
73525: EQUAL
73526: IFTRUE 73530
73528: GO 73586
73530: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73531: LD_ADDR_VAR 0 9
73535: PUSH
73536: LD_VAR 0 53
73540: PUSH
73541: LD_VAR 0 54
73545: PUSH
73546: LD_VAR 0 55
73550: PUSH
73551: LD_VAR 0 56
73555: PUSH
73556: LD_VAR 0 57
73560: PUSH
73561: LD_VAR 0 58
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: PUSH
73574: LD_VAR 0 4
73578: PUSH
73579: LD_INT 1
73581: PLUS
73582: ARRAY
73583: ST_TO_ADDR
73584: GO 73693
73586: LD_INT 31
73588: DOUBLE
73589: EQUAL
73590: IFTRUE 73636
73592: LD_INT 32
73594: DOUBLE
73595: EQUAL
73596: IFTRUE 73636
73598: LD_INT 33
73600: DOUBLE
73601: EQUAL
73602: IFTRUE 73636
73604: LD_INT 27
73606: DOUBLE
73607: EQUAL
73608: IFTRUE 73636
73610: LD_INT 26
73612: DOUBLE
73613: EQUAL
73614: IFTRUE 73636
73616: LD_INT 28
73618: DOUBLE
73619: EQUAL
73620: IFTRUE 73636
73622: LD_INT 29
73624: DOUBLE
73625: EQUAL
73626: IFTRUE 73636
73628: LD_INT 30
73630: DOUBLE
73631: EQUAL
73632: IFTRUE 73636
73634: GO 73692
73636: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73637: LD_ADDR_VAR 0 9
73641: PUSH
73642: LD_VAR 0 59
73646: PUSH
73647: LD_VAR 0 60
73651: PUSH
73652: LD_VAR 0 61
73656: PUSH
73657: LD_VAR 0 62
73661: PUSH
73662: LD_VAR 0 63
73666: PUSH
73667: LD_VAR 0 64
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: PUSH
73680: LD_VAR 0 4
73684: PUSH
73685: LD_INT 1
73687: PLUS
73688: ARRAY
73689: ST_TO_ADDR
73690: GO 73693
73692: POP
// temp_list2 = [ ] ;
73693: LD_ADDR_VAR 0 10
73697: PUSH
73698: EMPTY
73699: ST_TO_ADDR
// for i in temp_list do
73700: LD_ADDR_VAR 0 8
73704: PUSH
73705: LD_VAR 0 9
73709: PUSH
73710: FOR_IN
73711: IFFALSE 73763
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73713: LD_ADDR_VAR 0 10
73717: PUSH
73718: LD_VAR 0 10
73722: PUSH
73723: LD_VAR 0 8
73727: PUSH
73728: LD_INT 1
73730: ARRAY
73731: PUSH
73732: LD_VAR 0 2
73736: PLUS
73737: PUSH
73738: LD_VAR 0 8
73742: PUSH
73743: LD_INT 2
73745: ARRAY
73746: PUSH
73747: LD_VAR 0 3
73751: PLUS
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: EMPTY
73758: LIST
73759: ADD
73760: ST_TO_ADDR
73761: GO 73710
73763: POP
73764: POP
// result = temp_list2 ;
73765: LD_ADDR_VAR 0 7
73769: PUSH
73770: LD_VAR 0 10
73774: ST_TO_ADDR
// end ;
73775: LD_VAR 0 7
73779: RET
// export function EnemyInRange ( unit , dist ) ; begin
73780: LD_INT 0
73782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73783: LD_ADDR_VAR 0 3
73787: PUSH
73788: LD_VAR 0 1
73792: PPUSH
73793: CALL_OW 255
73797: PPUSH
73798: LD_VAR 0 1
73802: PPUSH
73803: CALL_OW 250
73807: PPUSH
73808: LD_VAR 0 1
73812: PPUSH
73813: CALL_OW 251
73817: PPUSH
73818: LD_VAR 0 2
73822: PPUSH
73823: CALL 47176 0 4
73827: PUSH
73828: LD_INT 4
73830: ARRAY
73831: ST_TO_ADDR
// end ;
73832: LD_VAR 0 3
73836: RET
// export function PlayerSeeMe ( unit ) ; begin
73837: LD_INT 0
73839: PPUSH
// result := See ( your_side , unit ) ;
73840: LD_ADDR_VAR 0 2
73844: PUSH
73845: LD_OWVAR 2
73849: PPUSH
73850: LD_VAR 0 1
73854: PPUSH
73855: CALL_OW 292
73859: ST_TO_ADDR
// end ;
73860: LD_VAR 0 2
73864: RET
// export function ReverseDir ( unit ) ; begin
73865: LD_INT 0
73867: PPUSH
// if not unit then
73868: LD_VAR 0 1
73872: NOT
73873: IFFALSE 73877
// exit ;
73875: GO 73900
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73877: LD_ADDR_VAR 0 2
73881: PUSH
73882: LD_VAR 0 1
73886: PPUSH
73887: CALL_OW 254
73891: PUSH
73892: LD_INT 3
73894: PLUS
73895: PUSH
73896: LD_INT 6
73898: MOD
73899: ST_TO_ADDR
// end ;
73900: LD_VAR 0 2
73904: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73905: LD_INT 0
73907: PPUSH
73908: PPUSH
73909: PPUSH
73910: PPUSH
73911: PPUSH
73912: PPUSH
// if not unit or not hexes then
73913: LD_VAR 0 1
73917: NOT
73918: PUSH
73919: LD_VAR 0 2
73923: NOT
73924: OR
73925: IFFALSE 73929
// exit ;
73927: GO 74052
// dist := 9999 ;
73929: LD_ADDR_VAR 0 5
73933: PUSH
73934: LD_INT 9999
73936: ST_TO_ADDR
// for i = 1 to hexes do
73937: LD_ADDR_VAR 0 4
73941: PUSH
73942: DOUBLE
73943: LD_INT 1
73945: DEC
73946: ST_TO_ADDR
73947: LD_VAR 0 2
73951: PUSH
73952: FOR_TO
73953: IFFALSE 74040
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73955: LD_ADDR_VAR 0 6
73959: PUSH
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 2
73969: PUSH
73970: LD_VAR 0 4
73974: ARRAY
73975: PUSH
73976: LD_INT 1
73978: ARRAY
73979: PPUSH
73980: LD_VAR 0 2
73984: PUSH
73985: LD_VAR 0 4
73989: ARRAY
73990: PUSH
73991: LD_INT 2
73993: ARRAY
73994: PPUSH
73995: CALL_OW 297
73999: ST_TO_ADDR
// if tdist < dist then
74000: LD_VAR 0 6
74004: PUSH
74005: LD_VAR 0 5
74009: LESS
74010: IFFALSE 74038
// begin hex := hexes [ i ] ;
74012: LD_ADDR_VAR 0 8
74016: PUSH
74017: LD_VAR 0 2
74021: PUSH
74022: LD_VAR 0 4
74026: ARRAY
74027: ST_TO_ADDR
// dist := tdist ;
74028: LD_ADDR_VAR 0 5
74032: PUSH
74033: LD_VAR 0 6
74037: ST_TO_ADDR
// end ; end ;
74038: GO 73952
74040: POP
74041: POP
// result := hex ;
74042: LD_ADDR_VAR 0 3
74046: PUSH
74047: LD_VAR 0 8
74051: ST_TO_ADDR
// end ;
74052: LD_VAR 0 3
74056: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74057: LD_INT 0
74059: PPUSH
74060: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74061: LD_VAR 0 1
74065: NOT
74066: PUSH
74067: LD_VAR 0 1
74071: PUSH
74072: LD_INT 21
74074: PUSH
74075: LD_INT 2
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 23
74084: PUSH
74085: LD_INT 2
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PPUSH
74096: CALL_OW 69
74100: IN
74101: NOT
74102: OR
74103: IFFALSE 74107
// exit ;
74105: GO 74154
// for i = 1 to 3 do
74107: LD_ADDR_VAR 0 3
74111: PUSH
74112: DOUBLE
74113: LD_INT 1
74115: DEC
74116: ST_TO_ADDR
74117: LD_INT 3
74119: PUSH
74120: FOR_TO
74121: IFFALSE 74152
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74123: LD_VAR 0 1
74127: PPUSH
74128: CALL_OW 250
74132: PPUSH
74133: LD_VAR 0 1
74137: PPUSH
74138: CALL_OW 251
74142: PPUSH
74143: LD_INT 1
74145: PPUSH
74146: CALL_OW 453
74150: GO 74120
74152: POP
74153: POP
// end ;
74154: LD_VAR 0 2
74158: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74159: LD_INT 0
74161: PPUSH
74162: PPUSH
74163: PPUSH
74164: PPUSH
74165: PPUSH
74166: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74167: LD_VAR 0 1
74171: NOT
74172: PUSH
74173: LD_VAR 0 2
74177: NOT
74178: OR
74179: PUSH
74180: LD_VAR 0 1
74184: PPUSH
74185: CALL_OW 314
74189: OR
74190: IFFALSE 74194
// exit ;
74192: GO 74635
// x := GetX ( enemy_unit ) ;
74194: LD_ADDR_VAR 0 7
74198: PUSH
74199: LD_VAR 0 2
74203: PPUSH
74204: CALL_OW 250
74208: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74209: LD_ADDR_VAR 0 8
74213: PUSH
74214: LD_VAR 0 2
74218: PPUSH
74219: CALL_OW 251
74223: ST_TO_ADDR
// if not x or not y then
74224: LD_VAR 0 7
74228: NOT
74229: PUSH
74230: LD_VAR 0 8
74234: NOT
74235: OR
74236: IFFALSE 74240
// exit ;
74238: GO 74635
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74240: LD_ADDR_VAR 0 6
74244: PUSH
74245: LD_VAR 0 7
74249: PPUSH
74250: LD_INT 0
74252: PPUSH
74253: LD_INT 4
74255: PPUSH
74256: CALL_OW 272
74260: PUSH
74261: LD_VAR 0 8
74265: PPUSH
74266: LD_INT 0
74268: PPUSH
74269: LD_INT 4
74271: PPUSH
74272: CALL_OW 273
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_VAR 0 7
74285: PPUSH
74286: LD_INT 1
74288: PPUSH
74289: LD_INT 4
74291: PPUSH
74292: CALL_OW 272
74296: PUSH
74297: LD_VAR 0 8
74301: PPUSH
74302: LD_INT 1
74304: PPUSH
74305: LD_INT 4
74307: PPUSH
74308: CALL_OW 273
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_VAR 0 7
74321: PPUSH
74322: LD_INT 2
74324: PPUSH
74325: LD_INT 4
74327: PPUSH
74328: CALL_OW 272
74332: PUSH
74333: LD_VAR 0 8
74337: PPUSH
74338: LD_INT 2
74340: PPUSH
74341: LD_INT 4
74343: PPUSH
74344: CALL_OW 273
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_VAR 0 7
74357: PPUSH
74358: LD_INT 3
74360: PPUSH
74361: LD_INT 4
74363: PPUSH
74364: CALL_OW 272
74368: PUSH
74369: LD_VAR 0 8
74373: PPUSH
74374: LD_INT 3
74376: PPUSH
74377: LD_INT 4
74379: PPUSH
74380: CALL_OW 273
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_VAR 0 7
74393: PPUSH
74394: LD_INT 4
74396: PPUSH
74397: LD_INT 4
74399: PPUSH
74400: CALL_OW 272
74404: PUSH
74405: LD_VAR 0 8
74409: PPUSH
74410: LD_INT 4
74412: PPUSH
74413: LD_INT 4
74415: PPUSH
74416: CALL_OW 273
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_VAR 0 7
74429: PPUSH
74430: LD_INT 5
74432: PPUSH
74433: LD_INT 4
74435: PPUSH
74436: CALL_OW 272
74440: PUSH
74441: LD_VAR 0 8
74445: PPUSH
74446: LD_INT 5
74448: PPUSH
74449: LD_INT 4
74451: PPUSH
74452: CALL_OW 273
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: ST_TO_ADDR
// for i = tmp downto 1 do
74469: LD_ADDR_VAR 0 4
74473: PUSH
74474: DOUBLE
74475: LD_VAR 0 6
74479: INC
74480: ST_TO_ADDR
74481: LD_INT 1
74483: PUSH
74484: FOR_DOWNTO
74485: IFFALSE 74586
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74487: LD_VAR 0 6
74491: PUSH
74492: LD_VAR 0 4
74496: ARRAY
74497: PUSH
74498: LD_INT 1
74500: ARRAY
74501: PPUSH
74502: LD_VAR 0 6
74506: PUSH
74507: LD_VAR 0 4
74511: ARRAY
74512: PUSH
74513: LD_INT 2
74515: ARRAY
74516: PPUSH
74517: CALL_OW 488
74521: NOT
74522: PUSH
74523: LD_VAR 0 6
74527: PUSH
74528: LD_VAR 0 4
74532: ARRAY
74533: PUSH
74534: LD_INT 1
74536: ARRAY
74537: PPUSH
74538: LD_VAR 0 6
74542: PUSH
74543: LD_VAR 0 4
74547: ARRAY
74548: PUSH
74549: LD_INT 2
74551: ARRAY
74552: PPUSH
74553: CALL_OW 428
74557: PUSH
74558: LD_INT 0
74560: NONEQUAL
74561: OR
74562: IFFALSE 74584
// tmp := Delete ( tmp , i ) ;
74564: LD_ADDR_VAR 0 6
74568: PUSH
74569: LD_VAR 0 6
74573: PPUSH
74574: LD_VAR 0 4
74578: PPUSH
74579: CALL_OW 3
74583: ST_TO_ADDR
74584: GO 74484
74586: POP
74587: POP
// j := GetClosestHex ( unit , tmp ) ;
74588: LD_ADDR_VAR 0 5
74592: PUSH
74593: LD_VAR 0 1
74597: PPUSH
74598: LD_VAR 0 6
74602: PPUSH
74603: CALL 73905 0 2
74607: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74608: LD_VAR 0 1
74612: PPUSH
74613: LD_VAR 0 5
74617: PUSH
74618: LD_INT 1
74620: ARRAY
74621: PPUSH
74622: LD_VAR 0 5
74626: PUSH
74627: LD_INT 2
74629: ARRAY
74630: PPUSH
74631: CALL_OW 111
// end ;
74635: LD_VAR 0 3
74639: RET
// export function PrepareApemanSoldier ( ) ; begin
74640: LD_INT 0
74642: PPUSH
// uc_nation := 0 ;
74643: LD_ADDR_OWVAR 21
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// hc_sex := sex_male ;
74651: LD_ADDR_OWVAR 27
74655: PUSH
74656: LD_INT 1
74658: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74659: LD_ADDR_OWVAR 28
74663: PUSH
74664: LD_INT 15
74666: ST_TO_ADDR
// hc_gallery :=  ;
74667: LD_ADDR_OWVAR 33
74671: PUSH
74672: LD_STRING 
74674: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74675: LD_ADDR_OWVAR 31
74679: PUSH
74680: LD_INT 0
74682: PPUSH
74683: LD_INT 3
74685: PPUSH
74686: CALL_OW 12
74690: PUSH
74691: LD_INT 0
74693: PPUSH
74694: LD_INT 3
74696: PPUSH
74697: CALL_OW 12
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: LD_INT 0
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: ST_TO_ADDR
// end ;
74714: LD_VAR 0 1
74718: RET
// export function PrepareApemanEngineer ( ) ; begin
74719: LD_INT 0
74721: PPUSH
// uc_nation := 0 ;
74722: LD_ADDR_OWVAR 21
74726: PUSH
74727: LD_INT 0
74729: ST_TO_ADDR
// hc_sex := sex_male ;
74730: LD_ADDR_OWVAR 27
74734: PUSH
74735: LD_INT 1
74737: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74738: LD_ADDR_OWVAR 28
74742: PUSH
74743: LD_INT 16
74745: ST_TO_ADDR
// hc_gallery :=  ;
74746: LD_ADDR_OWVAR 33
74750: PUSH
74751: LD_STRING 
74753: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74754: LD_ADDR_OWVAR 31
74758: PUSH
74759: LD_INT 0
74761: PPUSH
74762: LD_INT 3
74764: PPUSH
74765: CALL_OW 12
74769: PUSH
74770: LD_INT 0
74772: PPUSH
74773: LD_INT 3
74775: PPUSH
74776: CALL_OW 12
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: ST_TO_ADDR
// end ;
74793: LD_VAR 0 1
74797: RET
// export function PrepareApeman ( agressivity ) ; begin
74798: LD_INT 0
74800: PPUSH
// uc_side := 0 ;
74801: LD_ADDR_OWVAR 20
74805: PUSH
74806: LD_INT 0
74808: ST_TO_ADDR
// uc_nation := 0 ;
74809: LD_ADDR_OWVAR 21
74813: PUSH
74814: LD_INT 0
74816: ST_TO_ADDR
// hc_sex := sex_male ;
74817: LD_ADDR_OWVAR 27
74821: PUSH
74822: LD_INT 1
74824: ST_TO_ADDR
// hc_class := class_apeman ;
74825: LD_ADDR_OWVAR 28
74829: PUSH
74830: LD_INT 12
74832: ST_TO_ADDR
// hc_gallery :=  ;
74833: LD_ADDR_OWVAR 33
74837: PUSH
74838: LD_STRING 
74840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74841: LD_ADDR_OWVAR 35
74845: PUSH
74846: LD_VAR 0 1
74850: NEG
74851: PPUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: CALL_OW 12
74861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74862: LD_ADDR_OWVAR 31
74866: PUSH
74867: LD_INT 0
74869: PPUSH
74870: LD_INT 3
74872: PPUSH
74873: CALL_OW 12
74877: PUSH
74878: LD_INT 0
74880: PPUSH
74881: LD_INT 3
74883: PPUSH
74884: CALL_OW 12
74888: PUSH
74889: LD_INT 0
74891: PUSH
74892: LD_INT 0
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: ST_TO_ADDR
// end ;
74901: LD_VAR 0 2
74905: RET
// export function PrepareTiger ( agressivity ) ; begin
74906: LD_INT 0
74908: PPUSH
// uc_side := 0 ;
74909: LD_ADDR_OWVAR 20
74913: PUSH
74914: LD_INT 0
74916: ST_TO_ADDR
// uc_nation := 0 ;
74917: LD_ADDR_OWVAR 21
74921: PUSH
74922: LD_INT 0
74924: ST_TO_ADDR
// hc_class := class_tiger ;
74925: LD_ADDR_OWVAR 28
74929: PUSH
74930: LD_INT 14
74932: ST_TO_ADDR
// hc_gallery :=  ;
74933: LD_ADDR_OWVAR 33
74937: PUSH
74938: LD_STRING 
74940: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74941: LD_ADDR_OWVAR 35
74945: PUSH
74946: LD_VAR 0 1
74950: NEG
74951: PPUSH
74952: LD_VAR 0 1
74956: PPUSH
74957: CALL_OW 12
74961: ST_TO_ADDR
// end ;
74962: LD_VAR 0 2
74966: RET
// export function PrepareEnchidna ( ) ; begin
74967: LD_INT 0
74969: PPUSH
// uc_side := 0 ;
74970: LD_ADDR_OWVAR 20
74974: PUSH
74975: LD_INT 0
74977: ST_TO_ADDR
// uc_nation := 0 ;
74978: LD_ADDR_OWVAR 21
74982: PUSH
74983: LD_INT 0
74985: ST_TO_ADDR
// hc_class := class_baggie ;
74986: LD_ADDR_OWVAR 28
74990: PUSH
74991: LD_INT 13
74993: ST_TO_ADDR
// hc_gallery :=  ;
74994: LD_ADDR_OWVAR 33
74998: PUSH
74999: LD_STRING 
75001: ST_TO_ADDR
// end ;
75002: LD_VAR 0 1
75006: RET
// export function PrepareFrog ( ) ; begin
75007: LD_INT 0
75009: PPUSH
// uc_side := 0 ;
75010: LD_ADDR_OWVAR 20
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// uc_nation := 0 ;
75018: LD_ADDR_OWVAR 21
75022: PUSH
75023: LD_INT 0
75025: ST_TO_ADDR
// hc_class := class_frog ;
75026: LD_ADDR_OWVAR 28
75030: PUSH
75031: LD_INT 19
75033: ST_TO_ADDR
// hc_gallery :=  ;
75034: LD_ADDR_OWVAR 33
75038: PUSH
75039: LD_STRING 
75041: ST_TO_ADDR
// end ;
75042: LD_VAR 0 1
75046: RET
// export function PrepareFish ( ) ; begin
75047: LD_INT 0
75049: PPUSH
// uc_side := 0 ;
75050: LD_ADDR_OWVAR 20
75054: PUSH
75055: LD_INT 0
75057: ST_TO_ADDR
// uc_nation := 0 ;
75058: LD_ADDR_OWVAR 21
75062: PUSH
75063: LD_INT 0
75065: ST_TO_ADDR
// hc_class := class_fish ;
75066: LD_ADDR_OWVAR 28
75070: PUSH
75071: LD_INT 20
75073: ST_TO_ADDR
// hc_gallery :=  ;
75074: LD_ADDR_OWVAR 33
75078: PUSH
75079: LD_STRING 
75081: ST_TO_ADDR
// end ;
75082: LD_VAR 0 1
75086: RET
// export function PrepareBird ( ) ; begin
75087: LD_INT 0
75089: PPUSH
// uc_side := 0 ;
75090: LD_ADDR_OWVAR 20
75094: PUSH
75095: LD_INT 0
75097: ST_TO_ADDR
// uc_nation := 0 ;
75098: LD_ADDR_OWVAR 21
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// hc_class := class_phororhacos ;
75106: LD_ADDR_OWVAR 28
75110: PUSH
75111: LD_INT 18
75113: ST_TO_ADDR
// hc_gallery :=  ;
75114: LD_ADDR_OWVAR 33
75118: PUSH
75119: LD_STRING 
75121: ST_TO_ADDR
// end ;
75122: LD_VAR 0 1
75126: RET
// export function PrepareHorse ( ) ; begin
75127: LD_INT 0
75129: PPUSH
// uc_side := 0 ;
75130: LD_ADDR_OWVAR 20
75134: PUSH
75135: LD_INT 0
75137: ST_TO_ADDR
// uc_nation := 0 ;
75138: LD_ADDR_OWVAR 21
75142: PUSH
75143: LD_INT 0
75145: ST_TO_ADDR
// hc_class := class_horse ;
75146: LD_ADDR_OWVAR 28
75150: PUSH
75151: LD_INT 21
75153: ST_TO_ADDR
// hc_gallery :=  ;
75154: LD_ADDR_OWVAR 33
75158: PUSH
75159: LD_STRING 
75161: ST_TO_ADDR
// end ;
75162: LD_VAR 0 1
75166: RET
// export function PrepareMastodont ( ) ; begin
75167: LD_INT 0
75169: PPUSH
// uc_side := 0 ;
75170: LD_ADDR_OWVAR 20
75174: PUSH
75175: LD_INT 0
75177: ST_TO_ADDR
// uc_nation := 0 ;
75178: LD_ADDR_OWVAR 21
75182: PUSH
75183: LD_INT 0
75185: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75186: LD_ADDR_OWVAR 37
75190: PUSH
75191: LD_INT 31
75193: ST_TO_ADDR
// vc_control := control_rider ;
75194: LD_ADDR_OWVAR 38
75198: PUSH
75199: LD_INT 4
75201: ST_TO_ADDR
// end ;
75202: LD_VAR 0 1
75206: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75207: LD_INT 0
75209: PPUSH
75210: PPUSH
75211: PPUSH
// uc_side = 0 ;
75212: LD_ADDR_OWVAR 20
75216: PUSH
75217: LD_INT 0
75219: ST_TO_ADDR
// uc_nation = 0 ;
75220: LD_ADDR_OWVAR 21
75224: PUSH
75225: LD_INT 0
75227: ST_TO_ADDR
// InitHc_All ( ) ;
75228: CALL_OW 584
// InitVc ;
75232: CALL_OW 20
// if mastodonts then
75236: LD_VAR 0 6
75240: IFFALSE 75307
// for i = 1 to mastodonts do
75242: LD_ADDR_VAR 0 11
75246: PUSH
75247: DOUBLE
75248: LD_INT 1
75250: DEC
75251: ST_TO_ADDR
75252: LD_VAR 0 6
75256: PUSH
75257: FOR_TO
75258: IFFALSE 75305
// begin vc_chassis := 31 ;
75260: LD_ADDR_OWVAR 37
75264: PUSH
75265: LD_INT 31
75267: ST_TO_ADDR
// vc_control := control_rider ;
75268: LD_ADDR_OWVAR 38
75272: PUSH
75273: LD_INT 4
75275: ST_TO_ADDR
// animal := CreateVehicle ;
75276: LD_ADDR_VAR 0 12
75280: PUSH
75281: CALL_OW 45
75285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75286: LD_VAR 0 12
75290: PPUSH
75291: LD_VAR 0 8
75295: PPUSH
75296: LD_INT 0
75298: PPUSH
75299: CALL 77442 0 3
// end ;
75303: GO 75257
75305: POP
75306: POP
// if horses then
75307: LD_VAR 0 5
75311: IFFALSE 75378
// for i = 1 to horses do
75313: LD_ADDR_VAR 0 11
75317: PUSH
75318: DOUBLE
75319: LD_INT 1
75321: DEC
75322: ST_TO_ADDR
75323: LD_VAR 0 5
75327: PUSH
75328: FOR_TO
75329: IFFALSE 75376
// begin hc_class := 21 ;
75331: LD_ADDR_OWVAR 28
75335: PUSH
75336: LD_INT 21
75338: ST_TO_ADDR
// hc_gallery :=  ;
75339: LD_ADDR_OWVAR 33
75343: PUSH
75344: LD_STRING 
75346: ST_TO_ADDR
// animal := CreateHuman ;
75347: LD_ADDR_VAR 0 12
75351: PUSH
75352: CALL_OW 44
75356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75357: LD_VAR 0 12
75361: PPUSH
75362: LD_VAR 0 8
75366: PPUSH
75367: LD_INT 0
75369: PPUSH
75370: CALL 77442 0 3
// end ;
75374: GO 75328
75376: POP
75377: POP
// if birds then
75378: LD_VAR 0 1
75382: IFFALSE 75449
// for i = 1 to birds do
75384: LD_ADDR_VAR 0 11
75388: PUSH
75389: DOUBLE
75390: LD_INT 1
75392: DEC
75393: ST_TO_ADDR
75394: LD_VAR 0 1
75398: PUSH
75399: FOR_TO
75400: IFFALSE 75447
// begin hc_class = 18 ;
75402: LD_ADDR_OWVAR 28
75406: PUSH
75407: LD_INT 18
75409: ST_TO_ADDR
// hc_gallery =  ;
75410: LD_ADDR_OWVAR 33
75414: PUSH
75415: LD_STRING 
75417: ST_TO_ADDR
// animal := CreateHuman ;
75418: LD_ADDR_VAR 0 12
75422: PUSH
75423: CALL_OW 44
75427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75428: LD_VAR 0 12
75432: PPUSH
75433: LD_VAR 0 8
75437: PPUSH
75438: LD_INT 0
75440: PPUSH
75441: CALL 77442 0 3
// end ;
75445: GO 75399
75447: POP
75448: POP
// if tigers then
75449: LD_VAR 0 2
75453: IFFALSE 75537
// for i = 1 to tigers do
75455: LD_ADDR_VAR 0 11
75459: PUSH
75460: DOUBLE
75461: LD_INT 1
75463: DEC
75464: ST_TO_ADDR
75465: LD_VAR 0 2
75469: PUSH
75470: FOR_TO
75471: IFFALSE 75535
// begin hc_class = class_tiger ;
75473: LD_ADDR_OWVAR 28
75477: PUSH
75478: LD_INT 14
75480: ST_TO_ADDR
// hc_gallery =  ;
75481: LD_ADDR_OWVAR 33
75485: PUSH
75486: LD_STRING 
75488: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75489: LD_ADDR_OWVAR 35
75493: PUSH
75494: LD_INT 7
75496: NEG
75497: PPUSH
75498: LD_INT 7
75500: PPUSH
75501: CALL_OW 12
75505: ST_TO_ADDR
// animal := CreateHuman ;
75506: LD_ADDR_VAR 0 12
75510: PUSH
75511: CALL_OW 44
75515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75516: LD_VAR 0 12
75520: PPUSH
75521: LD_VAR 0 8
75525: PPUSH
75526: LD_INT 0
75528: PPUSH
75529: CALL 77442 0 3
// end ;
75533: GO 75470
75535: POP
75536: POP
// if apemans then
75537: LD_VAR 0 3
75541: IFFALSE 75664
// for i = 1 to apemans do
75543: LD_ADDR_VAR 0 11
75547: PUSH
75548: DOUBLE
75549: LD_INT 1
75551: DEC
75552: ST_TO_ADDR
75553: LD_VAR 0 3
75557: PUSH
75558: FOR_TO
75559: IFFALSE 75662
// begin hc_class = class_apeman ;
75561: LD_ADDR_OWVAR 28
75565: PUSH
75566: LD_INT 12
75568: ST_TO_ADDR
// hc_gallery =  ;
75569: LD_ADDR_OWVAR 33
75573: PUSH
75574: LD_STRING 
75576: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75577: LD_ADDR_OWVAR 35
75581: PUSH
75582: LD_INT 2
75584: NEG
75585: PPUSH
75586: LD_INT 2
75588: PPUSH
75589: CALL_OW 12
75593: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75594: LD_ADDR_OWVAR 31
75598: PUSH
75599: LD_INT 1
75601: PPUSH
75602: LD_INT 3
75604: PPUSH
75605: CALL_OW 12
75609: PUSH
75610: LD_INT 1
75612: PPUSH
75613: LD_INT 3
75615: PPUSH
75616: CALL_OW 12
75620: PUSH
75621: LD_INT 0
75623: PUSH
75624: LD_INT 0
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: ST_TO_ADDR
// animal := CreateHuman ;
75633: LD_ADDR_VAR 0 12
75637: PUSH
75638: CALL_OW 44
75642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75643: LD_VAR 0 12
75647: PPUSH
75648: LD_VAR 0 8
75652: PPUSH
75653: LD_INT 0
75655: PPUSH
75656: CALL 77442 0 3
// end ;
75660: GO 75558
75662: POP
75663: POP
// if enchidnas then
75664: LD_VAR 0 4
75668: IFFALSE 75735
// for i = 1 to enchidnas do
75670: LD_ADDR_VAR 0 11
75674: PUSH
75675: DOUBLE
75676: LD_INT 1
75678: DEC
75679: ST_TO_ADDR
75680: LD_VAR 0 4
75684: PUSH
75685: FOR_TO
75686: IFFALSE 75733
// begin hc_class = 13 ;
75688: LD_ADDR_OWVAR 28
75692: PUSH
75693: LD_INT 13
75695: ST_TO_ADDR
// hc_gallery =  ;
75696: LD_ADDR_OWVAR 33
75700: PUSH
75701: LD_STRING 
75703: ST_TO_ADDR
// animal := CreateHuman ;
75704: LD_ADDR_VAR 0 12
75708: PUSH
75709: CALL_OW 44
75713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75714: LD_VAR 0 12
75718: PPUSH
75719: LD_VAR 0 8
75723: PPUSH
75724: LD_INT 0
75726: PPUSH
75727: CALL 77442 0 3
// end ;
75731: GO 75685
75733: POP
75734: POP
// if fishes then
75735: LD_VAR 0 7
75739: IFFALSE 75806
// for i = 1 to fishes do
75741: LD_ADDR_VAR 0 11
75745: PUSH
75746: DOUBLE
75747: LD_INT 1
75749: DEC
75750: ST_TO_ADDR
75751: LD_VAR 0 7
75755: PUSH
75756: FOR_TO
75757: IFFALSE 75804
// begin hc_class = 20 ;
75759: LD_ADDR_OWVAR 28
75763: PUSH
75764: LD_INT 20
75766: ST_TO_ADDR
// hc_gallery =  ;
75767: LD_ADDR_OWVAR 33
75771: PUSH
75772: LD_STRING 
75774: ST_TO_ADDR
// animal := CreateHuman ;
75775: LD_ADDR_VAR 0 12
75779: PUSH
75780: CALL_OW 44
75784: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75785: LD_VAR 0 12
75789: PPUSH
75790: LD_VAR 0 9
75794: PPUSH
75795: LD_INT 0
75797: PPUSH
75798: CALL 77442 0 3
// end ;
75802: GO 75756
75804: POP
75805: POP
// end ;
75806: LD_VAR 0 10
75810: RET
// export function WantHeal ( sci , unit ) ; begin
75811: LD_INT 0
75813: PPUSH
// if GetTaskList ( sci ) > 0 then
75814: LD_VAR 0 1
75818: PPUSH
75819: CALL_OW 437
75823: PUSH
75824: LD_INT 0
75826: GREATER
75827: IFFALSE 75897
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75829: LD_VAR 0 1
75833: PPUSH
75834: CALL_OW 437
75838: PUSH
75839: LD_INT 1
75841: ARRAY
75842: PUSH
75843: LD_INT 1
75845: ARRAY
75846: PUSH
75847: LD_STRING l
75849: EQUAL
75850: PUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 437
75860: PUSH
75861: LD_INT 1
75863: ARRAY
75864: PUSH
75865: LD_INT 4
75867: ARRAY
75868: PUSH
75869: LD_VAR 0 2
75873: EQUAL
75874: AND
75875: IFFALSE 75887
// result := true else
75877: LD_ADDR_VAR 0 3
75881: PUSH
75882: LD_INT 1
75884: ST_TO_ADDR
75885: GO 75895
// result := false ;
75887: LD_ADDR_VAR 0 3
75891: PUSH
75892: LD_INT 0
75894: ST_TO_ADDR
// end else
75895: GO 75905
// result := false ;
75897: LD_ADDR_VAR 0 3
75901: PUSH
75902: LD_INT 0
75904: ST_TO_ADDR
// end ;
75905: LD_VAR 0 3
75909: RET
// export function HealTarget ( sci ) ; begin
75910: LD_INT 0
75912: PPUSH
// if not sci then
75913: LD_VAR 0 1
75917: NOT
75918: IFFALSE 75922
// exit ;
75920: GO 75987
// result := 0 ;
75922: LD_ADDR_VAR 0 2
75926: PUSH
75927: LD_INT 0
75929: ST_TO_ADDR
// if GetTaskList ( sci ) then
75930: LD_VAR 0 1
75934: PPUSH
75935: CALL_OW 437
75939: IFFALSE 75987
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75941: LD_VAR 0 1
75945: PPUSH
75946: CALL_OW 437
75950: PUSH
75951: LD_INT 1
75953: ARRAY
75954: PUSH
75955: LD_INT 1
75957: ARRAY
75958: PUSH
75959: LD_STRING l
75961: EQUAL
75962: IFFALSE 75987
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75964: LD_ADDR_VAR 0 2
75968: PUSH
75969: LD_VAR 0 1
75973: PPUSH
75974: CALL_OW 437
75978: PUSH
75979: LD_INT 1
75981: ARRAY
75982: PUSH
75983: LD_INT 4
75985: ARRAY
75986: ST_TO_ADDR
// end ;
75987: LD_VAR 0 2
75991: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75992: LD_INT 0
75994: PPUSH
75995: PPUSH
75996: PPUSH
75997: PPUSH
// if not base_units then
75998: LD_VAR 0 1
76002: NOT
76003: IFFALSE 76007
// exit ;
76005: GO 76094
// result := false ;
76007: LD_ADDR_VAR 0 2
76011: PUSH
76012: LD_INT 0
76014: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76015: LD_ADDR_VAR 0 5
76019: PUSH
76020: LD_VAR 0 1
76024: PPUSH
76025: LD_INT 21
76027: PUSH
76028: LD_INT 3
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PPUSH
76035: CALL_OW 72
76039: ST_TO_ADDR
// if not tmp then
76040: LD_VAR 0 5
76044: NOT
76045: IFFALSE 76049
// exit ;
76047: GO 76094
// for i in tmp do
76049: LD_ADDR_VAR 0 3
76053: PUSH
76054: LD_VAR 0 5
76058: PUSH
76059: FOR_IN
76060: IFFALSE 76092
// begin result := EnemyInRange ( i , 22 ) ;
76062: LD_ADDR_VAR 0 2
76066: PUSH
76067: LD_VAR 0 3
76071: PPUSH
76072: LD_INT 22
76074: PPUSH
76075: CALL 73780 0 2
76079: ST_TO_ADDR
// if result then
76080: LD_VAR 0 2
76084: IFFALSE 76090
// exit ;
76086: POP
76087: POP
76088: GO 76094
// end ;
76090: GO 76059
76092: POP
76093: POP
// end ;
76094: LD_VAR 0 2
76098: RET
// export function FilterByTag ( units , tag ) ; begin
76099: LD_INT 0
76101: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76102: LD_ADDR_VAR 0 3
76106: PUSH
76107: LD_VAR 0 1
76111: PPUSH
76112: LD_INT 120
76114: PUSH
76115: LD_VAR 0 2
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PPUSH
76124: CALL_OW 72
76128: ST_TO_ADDR
// end ;
76129: LD_VAR 0 3
76133: RET
// export function IsDriver ( un ) ; begin
76134: LD_INT 0
76136: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76137: LD_ADDR_VAR 0 2
76141: PUSH
76142: LD_VAR 0 1
76146: PUSH
76147: LD_INT 55
76149: PUSH
76150: EMPTY
76151: LIST
76152: PPUSH
76153: CALL_OW 69
76157: IN
76158: ST_TO_ADDR
// end ;
76159: LD_VAR 0 2
76163: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76164: LD_INT 0
76166: PPUSH
76167: PPUSH
// list := [ ] ;
76168: LD_ADDR_VAR 0 5
76172: PUSH
76173: EMPTY
76174: ST_TO_ADDR
// case d of 0 :
76175: LD_VAR 0 3
76179: PUSH
76180: LD_INT 0
76182: DOUBLE
76183: EQUAL
76184: IFTRUE 76188
76186: GO 76321
76188: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76189: LD_ADDR_VAR 0 5
76193: PUSH
76194: LD_VAR 0 1
76198: PUSH
76199: LD_INT 4
76201: MINUS
76202: PUSH
76203: LD_VAR 0 2
76207: PUSH
76208: LD_INT 4
76210: MINUS
76211: PUSH
76212: LD_INT 2
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: LIST
76219: PUSH
76220: LD_VAR 0 1
76224: PUSH
76225: LD_INT 3
76227: MINUS
76228: PUSH
76229: LD_VAR 0 2
76233: PUSH
76234: LD_INT 1
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: LIST
76241: PUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_INT 4
76249: PLUS
76250: PUSH
76251: LD_VAR 0 2
76255: PUSH
76256: LD_INT 4
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: LIST
76263: PUSH
76264: LD_VAR 0 1
76268: PUSH
76269: LD_INT 3
76271: PLUS
76272: PUSH
76273: LD_VAR 0 2
76277: PUSH
76278: LD_INT 3
76280: PLUS
76281: PUSH
76282: LD_INT 5
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: LD_VAR 0 1
76294: PUSH
76295: LD_VAR 0 2
76299: PUSH
76300: LD_INT 4
76302: PLUS
76303: PUSH
76304: LD_INT 0
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: LIST
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: ST_TO_ADDR
// end ; 1 :
76319: GO 77019
76321: LD_INT 1
76323: DOUBLE
76324: EQUAL
76325: IFTRUE 76329
76327: GO 76462
76329: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76330: LD_ADDR_VAR 0 5
76334: PUSH
76335: LD_VAR 0 1
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 4
76347: MINUS
76348: PUSH
76349: LD_INT 3
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: PUSH
76357: LD_VAR 0 1
76361: PUSH
76362: LD_INT 3
76364: MINUS
76365: PUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_INT 3
76373: MINUS
76374: PUSH
76375: LD_INT 2
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: PUSH
76383: LD_VAR 0 1
76387: PUSH
76388: LD_INT 4
76390: MINUS
76391: PUSH
76392: LD_VAR 0 2
76396: PUSH
76397: LD_INT 1
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: LIST
76404: PUSH
76405: LD_VAR 0 1
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 3
76417: PLUS
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: PUSH
76427: LD_VAR 0 1
76431: PUSH
76432: LD_INT 4
76434: PLUS
76435: PUSH
76436: LD_VAR 0 2
76440: PUSH
76441: LD_INT 4
76443: PLUS
76444: PUSH
76445: LD_INT 5
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: LIST
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: ST_TO_ADDR
// end ; 2 :
76460: GO 77019
76462: LD_INT 2
76464: DOUBLE
76465: EQUAL
76466: IFTRUE 76470
76468: GO 76599
76470: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76471: LD_ADDR_VAR 0 5
76475: PUSH
76476: LD_VAR 0 1
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 3
76488: MINUS
76489: PUSH
76490: LD_INT 3
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: LIST
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_INT 4
76505: PLUS
76506: PUSH
76507: LD_VAR 0 2
76511: PUSH
76512: LD_INT 4
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 1
76524: PUSH
76525: LD_VAR 0 2
76529: PUSH
76530: LD_INT 4
76532: PLUS
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: LD_VAR 0 1
76546: PUSH
76547: LD_INT 3
76549: MINUS
76550: PUSH
76551: LD_VAR 0 2
76555: PUSH
76556: LD_INT 1
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: PUSH
76564: LD_VAR 0 1
76568: PUSH
76569: LD_INT 4
76571: MINUS
76572: PUSH
76573: LD_VAR 0 2
76577: PUSH
76578: LD_INT 4
76580: MINUS
76581: PUSH
76582: LD_INT 2
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: LIST
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: ST_TO_ADDR
// end ; 3 :
76597: GO 77019
76599: LD_INT 3
76601: DOUBLE
76602: EQUAL
76603: IFTRUE 76607
76605: GO 76740
76607: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76608: LD_ADDR_VAR 0 5
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_INT 3
76620: PLUS
76621: PUSH
76622: LD_VAR 0 2
76626: PUSH
76627: LD_INT 4
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 4
76642: PLUS
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 4
76651: PLUS
76652: PUSH
76653: LD_INT 5
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: LD_VAR 0 1
76665: PUSH
76666: LD_INT 4
76668: MINUS
76669: PUSH
76670: LD_VAR 0 2
76674: PUSH
76675: LD_INT 1
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: LIST
76682: PUSH
76683: LD_VAR 0 1
76687: PUSH
76688: LD_VAR 0 2
76692: PUSH
76693: LD_INT 4
76695: MINUS
76696: PUSH
76697: LD_INT 3
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: PUSH
76705: LD_VAR 0 1
76709: PUSH
76710: LD_INT 3
76712: MINUS
76713: PUSH
76714: LD_VAR 0 2
76718: PUSH
76719: LD_INT 3
76721: MINUS
76722: PUSH
76723: LD_INT 2
76725: PUSH
76726: EMPTY
76727: LIST
76728: LIST
76729: LIST
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: ST_TO_ADDR
// end ; 4 :
76738: GO 77019
76740: LD_INT 4
76742: DOUBLE
76743: EQUAL
76744: IFTRUE 76748
76746: GO 76881
76748: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: LD_VAR 0 1
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 4
76766: PLUS
76767: PUSH
76768: LD_INT 0
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: LIST
76775: PUSH
76776: LD_VAR 0 1
76780: PUSH
76781: LD_INT 3
76783: PLUS
76784: PUSH
76785: LD_VAR 0 2
76789: PUSH
76790: LD_INT 3
76792: PLUS
76793: PUSH
76794: LD_INT 5
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: PUSH
76802: LD_VAR 0 1
76806: PUSH
76807: LD_INT 4
76809: PLUS
76810: PUSH
76811: LD_VAR 0 2
76815: PUSH
76816: LD_INT 4
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: LD_VAR 0 2
76833: PUSH
76834: LD_INT 3
76836: MINUS
76837: PUSH
76838: LD_INT 3
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: LIST
76845: PUSH
76846: LD_VAR 0 1
76850: PUSH
76851: LD_INT 4
76853: MINUS
76854: PUSH
76855: LD_VAR 0 2
76859: PUSH
76860: LD_INT 4
76862: MINUS
76863: PUSH
76864: LD_INT 2
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: PUSH
76872: EMPTY
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: ST_TO_ADDR
// end ; 5 :
76879: GO 77019
76881: LD_INT 5
76883: DOUBLE
76884: EQUAL
76885: IFTRUE 76889
76887: GO 77018
76889: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76890: LD_ADDR_VAR 0 5
76894: PUSH
76895: LD_VAR 0 1
76899: PUSH
76900: LD_INT 4
76902: MINUS
76903: PUSH
76904: LD_VAR 0 2
76908: PUSH
76909: LD_INT 1
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: LIST
76916: PUSH
76917: LD_VAR 0 1
76921: PUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_INT 4
76929: MINUS
76930: PUSH
76931: LD_INT 3
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: LD_VAR 0 1
76943: PUSH
76944: LD_INT 4
76946: PLUS
76947: PUSH
76948: LD_VAR 0 2
76952: PUSH
76953: LD_INT 4
76955: PLUS
76956: PUSH
76957: LD_INT 5
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: LIST
76964: PUSH
76965: LD_VAR 0 1
76969: PUSH
76970: LD_INT 3
76972: PLUS
76973: PUSH
76974: LD_VAR 0 2
76978: PUSH
76979: LD_INT 4
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: LIST
76986: PUSH
76987: LD_VAR 0 1
76991: PUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_INT 3
76999: PLUS
77000: PUSH
77001: LD_INT 0
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: ST_TO_ADDR
// end ; end ;
77016: GO 77019
77018: POP
// result := list ;
77019: LD_ADDR_VAR 0 4
77023: PUSH
77024: LD_VAR 0 5
77028: ST_TO_ADDR
// end ;
77029: LD_VAR 0 4
77033: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77034: LD_INT 0
77036: PPUSH
77037: PPUSH
77038: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77039: LD_VAR 0 1
77043: NOT
77044: PUSH
77045: LD_VAR 0 2
77049: PUSH
77050: LD_INT 1
77052: PUSH
77053: LD_INT 2
77055: PUSH
77056: LD_INT 3
77058: PUSH
77059: LD_INT 4
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: IN
77068: NOT
77069: OR
77070: IFFALSE 77074
// exit ;
77072: GO 77166
// tmp := [ ] ;
77074: LD_ADDR_VAR 0 5
77078: PUSH
77079: EMPTY
77080: ST_TO_ADDR
// for i in units do
77081: LD_ADDR_VAR 0 4
77085: PUSH
77086: LD_VAR 0 1
77090: PUSH
77091: FOR_IN
77092: IFFALSE 77135
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77094: LD_ADDR_VAR 0 5
77098: PUSH
77099: LD_VAR 0 5
77103: PPUSH
77104: LD_VAR 0 5
77108: PUSH
77109: LD_INT 1
77111: PLUS
77112: PPUSH
77113: LD_VAR 0 4
77117: PPUSH
77118: LD_VAR 0 2
77122: PPUSH
77123: CALL_OW 259
77127: PPUSH
77128: CALL_OW 2
77132: ST_TO_ADDR
77133: GO 77091
77135: POP
77136: POP
// if not tmp then
77137: LD_VAR 0 5
77141: NOT
77142: IFFALSE 77146
// exit ;
77144: GO 77166
// result := SortListByListDesc ( units , tmp ) ;
77146: LD_ADDR_VAR 0 3
77150: PUSH
77151: LD_VAR 0 1
77155: PPUSH
77156: LD_VAR 0 5
77160: PPUSH
77161: CALL_OW 77
77165: ST_TO_ADDR
// end ;
77166: LD_VAR 0 3
77170: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77171: LD_INT 0
77173: PPUSH
77174: PPUSH
77175: PPUSH
// result := false ;
77176: LD_ADDR_VAR 0 3
77180: PUSH
77181: LD_INT 0
77183: ST_TO_ADDR
// x := GetX ( building ) ;
77184: LD_ADDR_VAR 0 4
77188: PUSH
77189: LD_VAR 0 2
77193: PPUSH
77194: CALL_OW 250
77198: ST_TO_ADDR
// y := GetY ( building ) ;
77199: LD_ADDR_VAR 0 5
77203: PUSH
77204: LD_VAR 0 2
77208: PPUSH
77209: CALL_OW 251
77213: ST_TO_ADDR
// if not building or not x or not y then
77214: LD_VAR 0 2
77218: NOT
77219: PUSH
77220: LD_VAR 0 4
77224: NOT
77225: OR
77226: PUSH
77227: LD_VAR 0 5
77231: NOT
77232: OR
77233: IFFALSE 77237
// exit ;
77235: GO 77329
// if GetTaskList ( unit ) then
77237: LD_VAR 0 1
77241: PPUSH
77242: CALL_OW 437
77246: IFFALSE 77329
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77248: LD_STRING e
77250: PUSH
77251: LD_VAR 0 1
77255: PPUSH
77256: CALL_OW 437
77260: PUSH
77261: LD_INT 1
77263: ARRAY
77264: PUSH
77265: LD_INT 1
77267: ARRAY
77268: EQUAL
77269: PUSH
77270: LD_VAR 0 4
77274: PUSH
77275: LD_VAR 0 1
77279: PPUSH
77280: CALL_OW 437
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PUSH
77289: LD_INT 2
77291: ARRAY
77292: EQUAL
77293: AND
77294: PUSH
77295: LD_VAR 0 5
77299: PUSH
77300: LD_VAR 0 1
77304: PPUSH
77305: CALL_OW 437
77309: PUSH
77310: LD_INT 1
77312: ARRAY
77313: PUSH
77314: LD_INT 3
77316: ARRAY
77317: EQUAL
77318: AND
77319: IFFALSE 77329
// result := true end ;
77321: LD_ADDR_VAR 0 3
77325: PUSH
77326: LD_INT 1
77328: ST_TO_ADDR
// end ;
77329: LD_VAR 0 3
77333: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77334: LD_INT 0
77336: PPUSH
// result := false ;
77337: LD_ADDR_VAR 0 4
77341: PUSH
77342: LD_INT 0
77344: ST_TO_ADDR
// if GetTaskList ( unit ) then
77345: LD_VAR 0 1
77349: PPUSH
77350: CALL_OW 437
77354: IFFALSE 77437
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77356: LD_STRING M
77358: PUSH
77359: LD_VAR 0 1
77363: PPUSH
77364: CALL_OW 437
77368: PUSH
77369: LD_INT 1
77371: ARRAY
77372: PUSH
77373: LD_INT 1
77375: ARRAY
77376: EQUAL
77377: PUSH
77378: LD_VAR 0 2
77382: PUSH
77383: LD_VAR 0 1
77387: PPUSH
77388: CALL_OW 437
77392: PUSH
77393: LD_INT 1
77395: ARRAY
77396: PUSH
77397: LD_INT 2
77399: ARRAY
77400: EQUAL
77401: AND
77402: PUSH
77403: LD_VAR 0 3
77407: PUSH
77408: LD_VAR 0 1
77412: PPUSH
77413: CALL_OW 437
77417: PUSH
77418: LD_INT 1
77420: ARRAY
77421: PUSH
77422: LD_INT 3
77424: ARRAY
77425: EQUAL
77426: AND
77427: IFFALSE 77437
// result := true ;
77429: LD_ADDR_VAR 0 4
77433: PUSH
77434: LD_INT 1
77436: ST_TO_ADDR
// end ; end ;
77437: LD_VAR 0 4
77441: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77442: LD_INT 0
77444: PPUSH
77445: PPUSH
77446: PPUSH
77447: PPUSH
// if not unit or not area then
77448: LD_VAR 0 1
77452: NOT
77453: PUSH
77454: LD_VAR 0 2
77458: NOT
77459: OR
77460: IFFALSE 77464
// exit ;
77462: GO 77628
// tmp := AreaToList ( area , i ) ;
77464: LD_ADDR_VAR 0 6
77468: PUSH
77469: LD_VAR 0 2
77473: PPUSH
77474: LD_VAR 0 5
77478: PPUSH
77479: CALL_OW 517
77483: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77484: LD_ADDR_VAR 0 5
77488: PUSH
77489: DOUBLE
77490: LD_INT 1
77492: DEC
77493: ST_TO_ADDR
77494: LD_VAR 0 6
77498: PUSH
77499: LD_INT 1
77501: ARRAY
77502: PUSH
77503: FOR_TO
77504: IFFALSE 77626
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77506: LD_ADDR_VAR 0 7
77510: PUSH
77511: LD_VAR 0 6
77515: PUSH
77516: LD_INT 1
77518: ARRAY
77519: PUSH
77520: LD_VAR 0 5
77524: ARRAY
77525: PUSH
77526: LD_VAR 0 6
77530: PUSH
77531: LD_INT 2
77533: ARRAY
77534: PUSH
77535: LD_VAR 0 5
77539: ARRAY
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77545: LD_VAR 0 7
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: PPUSH
77554: LD_VAR 0 7
77558: PUSH
77559: LD_INT 2
77561: ARRAY
77562: PPUSH
77563: CALL_OW 428
77567: PUSH
77568: LD_INT 0
77570: EQUAL
77571: IFFALSE 77624
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77573: LD_VAR 0 1
77577: PPUSH
77578: LD_VAR 0 7
77582: PUSH
77583: LD_INT 1
77585: ARRAY
77586: PPUSH
77587: LD_VAR 0 7
77591: PUSH
77592: LD_INT 2
77594: ARRAY
77595: PPUSH
77596: LD_VAR 0 3
77600: PPUSH
77601: CALL_OW 48
// result := IsPlaced ( unit ) ;
77605: LD_ADDR_VAR 0 4
77609: PUSH
77610: LD_VAR 0 1
77614: PPUSH
77615: CALL_OW 305
77619: ST_TO_ADDR
// exit ;
77620: POP
77621: POP
77622: GO 77628
// end ; end ;
77624: GO 77503
77626: POP
77627: POP
// end ;
77628: LD_VAR 0 4
77632: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77633: LD_INT 0
77635: PPUSH
77636: PPUSH
77637: PPUSH
// if not side or side > 8 then
77638: LD_VAR 0 1
77642: NOT
77643: PUSH
77644: LD_VAR 0 1
77648: PUSH
77649: LD_INT 8
77651: GREATER
77652: OR
77653: IFFALSE 77657
// exit ;
77655: GO 77844
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77657: LD_ADDR_VAR 0 4
77661: PUSH
77662: LD_INT 22
77664: PUSH
77665: LD_VAR 0 1
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: PUSH
77674: LD_INT 21
77676: PUSH
77677: LD_INT 3
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: EMPTY
77685: LIST
77686: LIST
77687: PPUSH
77688: CALL_OW 69
77692: ST_TO_ADDR
// if not tmp then
77693: LD_VAR 0 4
77697: NOT
77698: IFFALSE 77702
// exit ;
77700: GO 77844
// enable_addtolog := true ;
77702: LD_ADDR_OWVAR 81
77706: PUSH
77707: LD_INT 1
77709: ST_TO_ADDR
// AddToLog ( [ ) ;
77710: LD_STRING [
77712: PPUSH
77713: CALL_OW 561
// for i in tmp do
77717: LD_ADDR_VAR 0 3
77721: PUSH
77722: LD_VAR 0 4
77726: PUSH
77727: FOR_IN
77728: IFFALSE 77835
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77730: LD_STRING [
77732: PUSH
77733: LD_VAR 0 3
77737: PPUSH
77738: CALL_OW 266
77742: STR
77743: PUSH
77744: LD_STRING , 
77746: STR
77747: PUSH
77748: LD_VAR 0 3
77752: PPUSH
77753: CALL_OW 250
77757: STR
77758: PUSH
77759: LD_STRING , 
77761: STR
77762: PUSH
77763: LD_VAR 0 3
77767: PPUSH
77768: CALL_OW 251
77772: STR
77773: PUSH
77774: LD_STRING , 
77776: STR
77777: PUSH
77778: LD_VAR 0 3
77782: PPUSH
77783: CALL_OW 254
77787: STR
77788: PUSH
77789: LD_STRING , 
77791: STR
77792: PUSH
77793: LD_VAR 0 3
77797: PPUSH
77798: LD_INT 1
77800: PPUSH
77801: CALL_OW 268
77805: STR
77806: PUSH
77807: LD_STRING , 
77809: STR
77810: PUSH
77811: LD_VAR 0 3
77815: PPUSH
77816: LD_INT 2
77818: PPUSH
77819: CALL_OW 268
77823: STR
77824: PUSH
77825: LD_STRING ],
77827: STR
77828: PPUSH
77829: CALL_OW 561
// end ;
77833: GO 77727
77835: POP
77836: POP
// AddToLog ( ]; ) ;
77837: LD_STRING ];
77839: PPUSH
77840: CALL_OW 561
// end ;
77844: LD_VAR 0 2
77848: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77849: LD_INT 0
77851: PPUSH
77852: PPUSH
77853: PPUSH
77854: PPUSH
77855: PPUSH
// if not area or not rate or not max then
77856: LD_VAR 0 1
77860: NOT
77861: PUSH
77862: LD_VAR 0 2
77866: NOT
77867: OR
77868: PUSH
77869: LD_VAR 0 4
77873: NOT
77874: OR
77875: IFFALSE 77879
// exit ;
77877: GO 78068
// while 1 do
77879: LD_INT 1
77881: IFFALSE 78068
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77883: LD_ADDR_VAR 0 9
77887: PUSH
77888: LD_VAR 0 1
77892: PPUSH
77893: LD_INT 1
77895: PPUSH
77896: CALL_OW 287
77900: PUSH
77901: LD_INT 10
77903: MUL
77904: ST_TO_ADDR
// r := rate / 10 ;
77905: LD_ADDR_VAR 0 7
77909: PUSH
77910: LD_VAR 0 2
77914: PUSH
77915: LD_INT 10
77917: DIVREAL
77918: ST_TO_ADDR
// time := 1 1$00 ;
77919: LD_ADDR_VAR 0 8
77923: PUSH
77924: LD_INT 2100
77926: ST_TO_ADDR
// if amount < min then
77927: LD_VAR 0 9
77931: PUSH
77932: LD_VAR 0 3
77936: LESS
77937: IFFALSE 77955
// r := r * 2 else
77939: LD_ADDR_VAR 0 7
77943: PUSH
77944: LD_VAR 0 7
77948: PUSH
77949: LD_INT 2
77951: MUL
77952: ST_TO_ADDR
77953: GO 77981
// if amount > max then
77955: LD_VAR 0 9
77959: PUSH
77960: LD_VAR 0 4
77964: GREATER
77965: IFFALSE 77981
// r := r / 2 ;
77967: LD_ADDR_VAR 0 7
77971: PUSH
77972: LD_VAR 0 7
77976: PUSH
77977: LD_INT 2
77979: DIVREAL
77980: ST_TO_ADDR
// time := time / r ;
77981: LD_ADDR_VAR 0 8
77985: PUSH
77986: LD_VAR 0 8
77990: PUSH
77991: LD_VAR 0 7
77995: DIVREAL
77996: ST_TO_ADDR
// if time < 0 then
77997: LD_VAR 0 8
78001: PUSH
78002: LD_INT 0
78004: LESS
78005: IFFALSE 78022
// time := time * - 1 ;
78007: LD_ADDR_VAR 0 8
78011: PUSH
78012: LD_VAR 0 8
78016: PUSH
78017: LD_INT 1
78019: NEG
78020: MUL
78021: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78022: LD_VAR 0 8
78026: PUSH
78027: LD_INT 35
78029: PPUSH
78030: LD_INT 875
78032: PPUSH
78033: CALL_OW 12
78037: PLUS
78038: PPUSH
78039: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78043: LD_INT 1
78045: PPUSH
78046: LD_INT 5
78048: PPUSH
78049: CALL_OW 12
78053: PPUSH
78054: LD_VAR 0 1
78058: PPUSH
78059: LD_INT 1
78061: PPUSH
78062: CALL_OW 55
// end ;
78066: GO 77879
// end ;
78068: LD_VAR 0 5
78072: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78073: LD_INT 0
78075: PPUSH
78076: PPUSH
78077: PPUSH
78078: PPUSH
78079: PPUSH
78080: PPUSH
78081: PPUSH
78082: PPUSH
// if not turrets or not factories then
78083: LD_VAR 0 1
78087: NOT
78088: PUSH
78089: LD_VAR 0 2
78093: NOT
78094: OR
78095: IFFALSE 78099
// exit ;
78097: GO 78406
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78099: LD_ADDR_VAR 0 10
78103: PUSH
78104: LD_INT 5
78106: PUSH
78107: LD_INT 6
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 2
78116: PUSH
78117: LD_INT 4
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 3
78126: PUSH
78127: LD_INT 5
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 24
78141: PUSH
78142: LD_INT 25
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 23
78151: PUSH
78152: LD_INT 27
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 42
78165: PUSH
78166: LD_INT 43
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: LD_INT 44
78175: PUSH
78176: LD_INT 46
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PUSH
78183: LD_INT 45
78185: PUSH
78186: LD_INT 47
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: LIST
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: LIST
78202: ST_TO_ADDR
// result := [ ] ;
78203: LD_ADDR_VAR 0 3
78207: PUSH
78208: EMPTY
78209: ST_TO_ADDR
// for i in turrets do
78210: LD_ADDR_VAR 0 4
78214: PUSH
78215: LD_VAR 0 1
78219: PUSH
78220: FOR_IN
78221: IFFALSE 78404
// begin nat := GetNation ( i ) ;
78223: LD_ADDR_VAR 0 7
78227: PUSH
78228: LD_VAR 0 4
78232: PPUSH
78233: CALL_OW 248
78237: ST_TO_ADDR
// weapon := 0 ;
78238: LD_ADDR_VAR 0 8
78242: PUSH
78243: LD_INT 0
78245: ST_TO_ADDR
// if not nat then
78246: LD_VAR 0 7
78250: NOT
78251: IFFALSE 78255
// continue ;
78253: GO 78220
// for j in list [ nat ] do
78255: LD_ADDR_VAR 0 5
78259: PUSH
78260: LD_VAR 0 10
78264: PUSH
78265: LD_VAR 0 7
78269: ARRAY
78270: PUSH
78271: FOR_IN
78272: IFFALSE 78313
// if GetBWeapon ( i ) = j [ 1 ] then
78274: LD_VAR 0 4
78278: PPUSH
78279: CALL_OW 269
78283: PUSH
78284: LD_VAR 0 5
78288: PUSH
78289: LD_INT 1
78291: ARRAY
78292: EQUAL
78293: IFFALSE 78311
// begin weapon := j [ 2 ] ;
78295: LD_ADDR_VAR 0 8
78299: PUSH
78300: LD_VAR 0 5
78304: PUSH
78305: LD_INT 2
78307: ARRAY
78308: ST_TO_ADDR
// break ;
78309: GO 78313
// end ;
78311: GO 78271
78313: POP
78314: POP
// if not weapon then
78315: LD_VAR 0 8
78319: NOT
78320: IFFALSE 78324
// continue ;
78322: GO 78220
// for k in factories do
78324: LD_ADDR_VAR 0 6
78328: PUSH
78329: LD_VAR 0 2
78333: PUSH
78334: FOR_IN
78335: IFFALSE 78400
// begin weapons := AvailableWeaponList ( k ) ;
78337: LD_ADDR_VAR 0 9
78341: PUSH
78342: LD_VAR 0 6
78346: PPUSH
78347: CALL_OW 478
78351: ST_TO_ADDR
// if not weapons then
78352: LD_VAR 0 9
78356: NOT
78357: IFFALSE 78361
// continue ;
78359: GO 78334
// if weapon in weapons then
78361: LD_VAR 0 8
78365: PUSH
78366: LD_VAR 0 9
78370: IN
78371: IFFALSE 78398
// begin result := [ i , weapon ] ;
78373: LD_ADDR_VAR 0 3
78377: PUSH
78378: LD_VAR 0 4
78382: PUSH
78383: LD_VAR 0 8
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: ST_TO_ADDR
// exit ;
78392: POP
78393: POP
78394: POP
78395: POP
78396: GO 78406
// end ; end ;
78398: GO 78334
78400: POP
78401: POP
// end ;
78402: GO 78220
78404: POP
78405: POP
// end ;
78406: LD_VAR 0 3
78410: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78411: LD_INT 0
78413: PPUSH
// if not side or side > 8 then
78414: LD_VAR 0 3
78418: NOT
78419: PUSH
78420: LD_VAR 0 3
78424: PUSH
78425: LD_INT 8
78427: GREATER
78428: OR
78429: IFFALSE 78433
// exit ;
78431: GO 78492
// if not range then
78433: LD_VAR 0 4
78437: NOT
78438: IFFALSE 78449
// range := - 12 ;
78440: LD_ADDR_VAR 0 4
78444: PUSH
78445: LD_INT 12
78447: NEG
78448: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78449: LD_VAR 0 1
78453: PPUSH
78454: LD_VAR 0 2
78458: PPUSH
78459: LD_VAR 0 3
78463: PPUSH
78464: LD_VAR 0 4
78468: PPUSH
78469: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_VAR 0 2
78482: PPUSH
78483: LD_VAR 0 3
78487: PPUSH
78488: CALL_OW 331
// end ;
78492: LD_VAR 0 5
78496: RET
// export function Video ( mode ) ; begin
78497: LD_INT 0
78499: PPUSH
// ingame_video = mode ;
78500: LD_ADDR_OWVAR 52
78504: PUSH
78505: LD_VAR 0 1
78509: ST_TO_ADDR
// interface_hidden = mode ;
78510: LD_ADDR_OWVAR 54
78514: PUSH
78515: LD_VAR 0 1
78519: ST_TO_ADDR
// end ;
78520: LD_VAR 0 2
78524: RET
// export function Join ( array , element ) ; begin
78525: LD_INT 0
78527: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78528: LD_ADDR_VAR 0 3
78532: PUSH
78533: LD_VAR 0 1
78537: PPUSH
78538: LD_VAR 0 1
78542: PUSH
78543: LD_INT 1
78545: PLUS
78546: PPUSH
78547: LD_VAR 0 2
78551: PPUSH
78552: CALL_OW 1
78556: ST_TO_ADDR
// end ;
78557: LD_VAR 0 3
78561: RET
// export function JoinUnion ( array , element ) ; begin
78562: LD_INT 0
78564: PPUSH
// result := array union element ;
78565: LD_ADDR_VAR 0 3
78569: PUSH
78570: LD_VAR 0 1
78574: PUSH
78575: LD_VAR 0 2
78579: UNION
78580: ST_TO_ADDR
// end ;
78581: LD_VAR 0 3
78585: RET
// export function GetBehemoths ( side ) ; begin
78586: LD_INT 0
78588: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_INT 22
78596: PUSH
78597: LD_VAR 0 1
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: LD_INT 31
78608: PUSH
78609: LD_INT 25
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PPUSH
78620: CALL_OW 69
78624: ST_TO_ADDR
// end ;
78625: LD_VAR 0 2
78629: RET
// export function Shuffle ( array ) ; var i , index ; begin
78630: LD_INT 0
78632: PPUSH
78633: PPUSH
78634: PPUSH
// result := [ ] ;
78635: LD_ADDR_VAR 0 2
78639: PUSH
78640: EMPTY
78641: ST_TO_ADDR
// if not array then
78642: LD_VAR 0 1
78646: NOT
78647: IFFALSE 78651
// exit ;
78649: GO 78750
// Randomize ;
78651: CALL_OW 10
// for i = array downto 1 do
78655: LD_ADDR_VAR 0 3
78659: PUSH
78660: DOUBLE
78661: LD_VAR 0 1
78665: INC
78666: ST_TO_ADDR
78667: LD_INT 1
78669: PUSH
78670: FOR_DOWNTO
78671: IFFALSE 78748
// begin index := rand ( 1 , array ) ;
78673: LD_ADDR_VAR 0 4
78677: PUSH
78678: LD_INT 1
78680: PPUSH
78681: LD_VAR 0 1
78685: PPUSH
78686: CALL_OW 12
78690: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78691: LD_ADDR_VAR 0 2
78695: PUSH
78696: LD_VAR 0 2
78700: PPUSH
78701: LD_VAR 0 2
78705: PUSH
78706: LD_INT 1
78708: PLUS
78709: PPUSH
78710: LD_VAR 0 1
78714: PUSH
78715: LD_VAR 0 4
78719: ARRAY
78720: PPUSH
78721: CALL_OW 2
78725: ST_TO_ADDR
// array := Delete ( array , index ) ;
78726: LD_ADDR_VAR 0 1
78730: PUSH
78731: LD_VAR 0 1
78735: PPUSH
78736: LD_VAR 0 4
78740: PPUSH
78741: CALL_OW 3
78745: ST_TO_ADDR
// end ;
78746: GO 78670
78748: POP
78749: POP
// end ;
78750: LD_VAR 0 2
78754: RET
// export function GetBaseMaterials ( base ) ; begin
78755: LD_INT 0
78757: PPUSH
// result := [ 0 , 0 , 0 ] ;
78758: LD_ADDR_VAR 0 2
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: LD_INT 0
78768: PUSH
78769: LD_INT 0
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: LIST
78776: ST_TO_ADDR
// if not base then
78777: LD_VAR 0 1
78781: NOT
78782: IFFALSE 78786
// exit ;
78784: GO 78835
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78786: LD_ADDR_VAR 0 2
78790: PUSH
78791: LD_VAR 0 1
78795: PPUSH
78796: LD_INT 1
78798: PPUSH
78799: CALL_OW 275
78803: PUSH
78804: LD_VAR 0 1
78808: PPUSH
78809: LD_INT 2
78811: PPUSH
78812: CALL_OW 275
78816: PUSH
78817: LD_VAR 0 1
78821: PPUSH
78822: LD_INT 3
78824: PPUSH
78825: CALL_OW 275
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: LIST
78834: ST_TO_ADDR
// end ;
78835: LD_VAR 0 2
78839: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78840: LD_INT 0
78842: PPUSH
78843: PPUSH
// result := array ;
78844: LD_ADDR_VAR 0 3
78848: PUSH
78849: LD_VAR 0 1
78853: ST_TO_ADDR
// if size >= result then
78854: LD_VAR 0 2
78858: PUSH
78859: LD_VAR 0 3
78863: GREATEREQUAL
78864: IFFALSE 78868
// exit ;
78866: GO 78918
// if size then
78868: LD_VAR 0 2
78872: IFFALSE 78918
// for i := array downto size do
78874: LD_ADDR_VAR 0 4
78878: PUSH
78879: DOUBLE
78880: LD_VAR 0 1
78884: INC
78885: ST_TO_ADDR
78886: LD_VAR 0 2
78890: PUSH
78891: FOR_DOWNTO
78892: IFFALSE 78916
// result := Delete ( result , result ) ;
78894: LD_ADDR_VAR 0 3
78898: PUSH
78899: LD_VAR 0 3
78903: PPUSH
78904: LD_VAR 0 3
78908: PPUSH
78909: CALL_OW 3
78913: ST_TO_ADDR
78914: GO 78891
78916: POP
78917: POP
// end ;
78918: LD_VAR 0 3
78922: RET
// export function ComExit ( unit ) ; var tmp ; begin
78923: LD_INT 0
78925: PPUSH
78926: PPUSH
// if not IsInUnit ( unit ) then
78927: LD_VAR 0 1
78931: PPUSH
78932: CALL_OW 310
78936: NOT
78937: IFFALSE 78941
// exit ;
78939: GO 79001
// tmp := IsInUnit ( unit ) ;
78941: LD_ADDR_VAR 0 3
78945: PUSH
78946: LD_VAR 0 1
78950: PPUSH
78951: CALL_OW 310
78955: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78956: LD_VAR 0 3
78960: PPUSH
78961: CALL_OW 247
78965: PUSH
78966: LD_INT 2
78968: EQUAL
78969: IFFALSE 78982
// ComExitVehicle ( unit ) else
78971: LD_VAR 0 1
78975: PPUSH
78976: CALL_OW 121
78980: GO 78991
// ComExitBuilding ( unit ) ;
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL_OW 122
// result := tmp ;
78991: LD_ADDR_VAR 0 2
78995: PUSH
78996: LD_VAR 0 3
79000: ST_TO_ADDR
// end ;
79001: LD_VAR 0 2
79005: RET
// export function ComExitAll ( units ) ; var i ; begin
79006: LD_INT 0
79008: PPUSH
79009: PPUSH
// if not units then
79010: LD_VAR 0 1
79014: NOT
79015: IFFALSE 79019
// exit ;
79017: GO 79045
// for i in units do
79019: LD_ADDR_VAR 0 3
79023: PUSH
79024: LD_VAR 0 1
79028: PUSH
79029: FOR_IN
79030: IFFALSE 79043
// ComExit ( i ) ;
79032: LD_VAR 0 3
79036: PPUSH
79037: CALL 78923 0 1
79041: GO 79029
79043: POP
79044: POP
// end ;
79045: LD_VAR 0 2
79049: RET
// export function ResetHc ; begin
79050: LD_INT 0
79052: PPUSH
// InitHc ;
79053: CALL_OW 19
// hc_importance := 0 ;
79057: LD_ADDR_OWVAR 32
79061: PUSH
79062: LD_INT 0
79064: ST_TO_ADDR
// end ;
79065: LD_VAR 0 1
79069: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79070: LD_INT 0
79072: PPUSH
79073: PPUSH
79074: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79075: LD_ADDR_VAR 0 6
79079: PUSH
79080: LD_VAR 0 1
79084: PUSH
79085: LD_VAR 0 3
79089: PLUS
79090: PUSH
79091: LD_INT 2
79093: DIV
79094: ST_TO_ADDR
// if _x < 0 then
79095: LD_VAR 0 6
79099: PUSH
79100: LD_INT 0
79102: LESS
79103: IFFALSE 79120
// _x := _x * - 1 ;
79105: LD_ADDR_VAR 0 6
79109: PUSH
79110: LD_VAR 0 6
79114: PUSH
79115: LD_INT 1
79117: NEG
79118: MUL
79119: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79120: LD_ADDR_VAR 0 7
79124: PUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_VAR 0 4
79134: PLUS
79135: PUSH
79136: LD_INT 2
79138: DIV
79139: ST_TO_ADDR
// if _y < 0 then
79140: LD_VAR 0 7
79144: PUSH
79145: LD_INT 0
79147: LESS
79148: IFFALSE 79165
// _y := _y * - 1 ;
79150: LD_ADDR_VAR 0 7
79154: PUSH
79155: LD_VAR 0 7
79159: PUSH
79160: LD_INT 1
79162: NEG
79163: MUL
79164: ST_TO_ADDR
// result := [ _x , _y ] ;
79165: LD_ADDR_VAR 0 5
79169: PUSH
79170: LD_VAR 0 6
79174: PUSH
79175: LD_VAR 0 7
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: ST_TO_ADDR
// end ;
79184: LD_VAR 0 5
79188: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79189: LD_INT 0
79191: PPUSH
79192: PPUSH
79193: PPUSH
79194: PPUSH
// task := GetTaskList ( unit ) ;
79195: LD_ADDR_VAR 0 7
79199: PUSH
79200: LD_VAR 0 1
79204: PPUSH
79205: CALL_OW 437
79209: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79210: LD_VAR 0 7
79214: NOT
79215: PUSH
79216: LD_VAR 0 1
79220: PPUSH
79221: LD_VAR 0 2
79225: PPUSH
79226: CALL_OW 308
79230: NOT
79231: AND
79232: IFFALSE 79236
// exit ;
79234: GO 79354
// if IsInArea ( unit , area ) then
79236: LD_VAR 0 1
79240: PPUSH
79241: LD_VAR 0 2
79245: PPUSH
79246: CALL_OW 308
79250: IFFALSE 79268
// begin ComMoveToArea ( unit , goAway ) ;
79252: LD_VAR 0 1
79256: PPUSH
79257: LD_VAR 0 3
79261: PPUSH
79262: CALL_OW 113
// exit ;
79266: GO 79354
// end ; if task [ 1 ] [ 1 ] <> M then
79268: LD_VAR 0 7
79272: PUSH
79273: LD_INT 1
79275: ARRAY
79276: PUSH
79277: LD_INT 1
79279: ARRAY
79280: PUSH
79281: LD_STRING M
79283: NONEQUAL
79284: IFFALSE 79288
// exit ;
79286: GO 79354
// x := task [ 1 ] [ 2 ] ;
79288: LD_ADDR_VAR 0 5
79292: PUSH
79293: LD_VAR 0 7
79297: PUSH
79298: LD_INT 1
79300: ARRAY
79301: PUSH
79302: LD_INT 2
79304: ARRAY
79305: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79306: LD_ADDR_VAR 0 6
79310: PUSH
79311: LD_VAR 0 7
79315: PUSH
79316: LD_INT 1
79318: ARRAY
79319: PUSH
79320: LD_INT 3
79322: ARRAY
79323: ST_TO_ADDR
// if InArea ( x , y , area ) then
79324: LD_VAR 0 5
79328: PPUSH
79329: LD_VAR 0 6
79333: PPUSH
79334: LD_VAR 0 2
79338: PPUSH
79339: CALL_OW 309
79343: IFFALSE 79354
// ComStop ( unit ) ;
79345: LD_VAR 0 1
79349: PPUSH
79350: CALL_OW 141
// end ;
79354: LD_VAR 0 4
79358: RET
// export function Abs ( value ) ; begin
79359: LD_INT 0
79361: PPUSH
// result := value ;
79362: LD_ADDR_VAR 0 2
79366: PUSH
79367: LD_VAR 0 1
79371: ST_TO_ADDR
// if value < 0 then
79372: LD_VAR 0 1
79376: PUSH
79377: LD_INT 0
79379: LESS
79380: IFFALSE 79397
// result := value * - 1 ;
79382: LD_ADDR_VAR 0 2
79386: PUSH
79387: LD_VAR 0 1
79391: PUSH
79392: LD_INT 1
79394: NEG
79395: MUL
79396: ST_TO_ADDR
// end ;
79397: LD_VAR 0 2
79401: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79402: LD_INT 0
79404: PPUSH
79405: PPUSH
79406: PPUSH
79407: PPUSH
79408: PPUSH
79409: PPUSH
79410: PPUSH
79411: PPUSH
// if not unit or not building then
79412: LD_VAR 0 1
79416: NOT
79417: PUSH
79418: LD_VAR 0 2
79422: NOT
79423: OR
79424: IFFALSE 79428
// exit ;
79426: GO 79654
// x := GetX ( building ) ;
79428: LD_ADDR_VAR 0 4
79432: PUSH
79433: LD_VAR 0 2
79437: PPUSH
79438: CALL_OW 250
79442: ST_TO_ADDR
// y := GetY ( building ) ;
79443: LD_ADDR_VAR 0 6
79447: PUSH
79448: LD_VAR 0 2
79452: PPUSH
79453: CALL_OW 251
79457: ST_TO_ADDR
// d := GetDir ( building ) ;
79458: LD_ADDR_VAR 0 8
79462: PUSH
79463: LD_VAR 0 2
79467: PPUSH
79468: CALL_OW 254
79472: ST_TO_ADDR
// r := 4 ;
79473: LD_ADDR_VAR 0 9
79477: PUSH
79478: LD_INT 4
79480: ST_TO_ADDR
// for i := 1 to 5 do
79481: LD_ADDR_VAR 0 10
79485: PUSH
79486: DOUBLE
79487: LD_INT 1
79489: DEC
79490: ST_TO_ADDR
79491: LD_INT 5
79493: PUSH
79494: FOR_TO
79495: IFFALSE 79652
// begin _x := ShiftX ( x , d , r + i ) ;
79497: LD_ADDR_VAR 0 5
79501: PUSH
79502: LD_VAR 0 4
79506: PPUSH
79507: LD_VAR 0 8
79511: PPUSH
79512: LD_VAR 0 9
79516: PUSH
79517: LD_VAR 0 10
79521: PLUS
79522: PPUSH
79523: CALL_OW 272
79527: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79528: LD_ADDR_VAR 0 7
79532: PUSH
79533: LD_VAR 0 6
79537: PPUSH
79538: LD_VAR 0 8
79542: PPUSH
79543: LD_VAR 0 9
79547: PUSH
79548: LD_VAR 0 10
79552: PLUS
79553: PPUSH
79554: CALL_OW 273
79558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79559: LD_VAR 0 5
79563: PPUSH
79564: LD_VAR 0 7
79568: PPUSH
79569: CALL_OW 488
79573: PUSH
79574: LD_VAR 0 5
79578: PPUSH
79579: LD_VAR 0 7
79583: PPUSH
79584: CALL_OW 428
79588: PPUSH
79589: CALL_OW 247
79593: PUSH
79594: LD_INT 3
79596: PUSH
79597: LD_INT 2
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: IN
79604: NOT
79605: AND
79606: IFFALSE 79650
// begin ComMoveXY ( unit , _x , _y ) ;
79608: LD_VAR 0 1
79612: PPUSH
79613: LD_VAR 0 5
79617: PPUSH
79618: LD_VAR 0 7
79622: PPUSH
79623: CALL_OW 111
// result := [ _x , _y ] ;
79627: LD_ADDR_VAR 0 3
79631: PUSH
79632: LD_VAR 0 5
79636: PUSH
79637: LD_VAR 0 7
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: ST_TO_ADDR
// exit ;
79646: POP
79647: POP
79648: GO 79654
// end ; end ;
79650: GO 79494
79652: POP
79653: POP
// end ;
79654: LD_VAR 0 3
79658: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79659: LD_INT 0
79661: PPUSH
79662: PPUSH
79663: PPUSH
// result := 0 ;
79664: LD_ADDR_VAR 0 3
79668: PUSH
79669: LD_INT 0
79671: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79672: LD_VAR 0 1
79676: PUSH
79677: LD_INT 0
79679: LESS
79680: PUSH
79681: LD_VAR 0 1
79685: PUSH
79686: LD_INT 8
79688: GREATER
79689: OR
79690: PUSH
79691: LD_VAR 0 2
79695: PUSH
79696: LD_INT 0
79698: LESS
79699: OR
79700: PUSH
79701: LD_VAR 0 2
79705: PUSH
79706: LD_INT 8
79708: GREATER
79709: OR
79710: IFFALSE 79714
// exit ;
79712: GO 79789
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79714: LD_ADDR_VAR 0 4
79718: PUSH
79719: LD_INT 22
79721: PUSH
79722: LD_VAR 0 2
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: PPUSH
79731: CALL_OW 69
79735: PUSH
79736: FOR_IN
79737: IFFALSE 79787
// begin un := UnitShoot ( i ) ;
79739: LD_ADDR_VAR 0 5
79743: PUSH
79744: LD_VAR 0 4
79748: PPUSH
79749: CALL_OW 504
79753: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79754: LD_VAR 0 5
79758: PPUSH
79759: CALL_OW 255
79763: PUSH
79764: LD_VAR 0 1
79768: EQUAL
79769: IFFALSE 79785
// begin result := un ;
79771: LD_ADDR_VAR 0 3
79775: PUSH
79776: LD_VAR 0 5
79780: ST_TO_ADDR
// exit ;
79781: POP
79782: POP
79783: GO 79789
// end ; end ;
79785: GO 79736
79787: POP
79788: POP
// end ;
79789: LD_VAR 0 3
79793: RET
// export function GetCargoBay ( units ) ; begin
79794: LD_INT 0
79796: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79797: LD_ADDR_VAR 0 2
79801: PUSH
79802: LD_VAR 0 1
79806: PPUSH
79807: LD_INT 2
79809: PUSH
79810: LD_INT 34
79812: PUSH
79813: LD_INT 12
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: PUSH
79820: LD_INT 34
79822: PUSH
79823: LD_INT 51
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 34
79832: PUSH
79833: LD_INT 32
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 34
79842: PUSH
79843: LD_EXP 50
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: PPUSH
79859: CALL_OW 72
79863: ST_TO_ADDR
// end ;
79864: LD_VAR 0 2
79868: RET
// export function Negate ( value ) ; begin
79869: LD_INT 0
79871: PPUSH
// result := not value ;
79872: LD_ADDR_VAR 0 2
79876: PUSH
79877: LD_VAR 0 1
79881: NOT
79882: ST_TO_ADDR
// end ;
79883: LD_VAR 0 2
79887: RET
// export function Inc ( value ) ; begin
79888: LD_INT 0
79890: PPUSH
// result := value + 1 ;
79891: LD_ADDR_VAR 0 2
79895: PUSH
79896: LD_VAR 0 1
79900: PUSH
79901: LD_INT 1
79903: PLUS
79904: ST_TO_ADDR
// end ;
79905: LD_VAR 0 2
79909: RET
// export function Dec ( value ) ; begin
79910: LD_INT 0
79912: PPUSH
// result := value - 1 ;
79913: LD_ADDR_VAR 0 2
79917: PUSH
79918: LD_VAR 0 1
79922: PUSH
79923: LD_INT 1
79925: MINUS
79926: ST_TO_ADDR
// end ;
79927: LD_VAR 0 2
79931: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79932: LD_INT 0
79934: PPUSH
79935: PPUSH
79936: PPUSH
79937: PPUSH
79938: PPUSH
79939: PPUSH
79940: PPUSH
79941: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79942: LD_VAR 0 1
79946: PPUSH
79947: LD_VAR 0 2
79951: PPUSH
79952: CALL_OW 488
79956: NOT
79957: PUSH
79958: LD_VAR 0 3
79962: PPUSH
79963: LD_VAR 0 4
79967: PPUSH
79968: CALL_OW 488
79972: NOT
79973: OR
79974: IFFALSE 79987
// begin result := - 1 ;
79976: LD_ADDR_VAR 0 5
79980: PUSH
79981: LD_INT 1
79983: NEG
79984: ST_TO_ADDR
// exit ;
79985: GO 80222
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79987: LD_ADDR_VAR 0 12
79991: PUSH
79992: LD_VAR 0 1
79996: PPUSH
79997: LD_VAR 0 2
80001: PPUSH
80002: LD_VAR 0 3
80006: PPUSH
80007: LD_VAR 0 4
80011: PPUSH
80012: CALL 79070 0 4
80016: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80017: LD_ADDR_VAR 0 11
80021: PUSH
80022: LD_VAR 0 1
80026: PPUSH
80027: LD_VAR 0 2
80031: PPUSH
80032: LD_VAR 0 12
80036: PUSH
80037: LD_INT 1
80039: ARRAY
80040: PPUSH
80041: LD_VAR 0 12
80045: PUSH
80046: LD_INT 2
80048: ARRAY
80049: PPUSH
80050: CALL_OW 298
80054: ST_TO_ADDR
// distance := 9999 ;
80055: LD_ADDR_VAR 0 10
80059: PUSH
80060: LD_INT 9999
80062: ST_TO_ADDR
// for i := 0 to 5 do
80063: LD_ADDR_VAR 0 6
80067: PUSH
80068: DOUBLE
80069: LD_INT 0
80071: DEC
80072: ST_TO_ADDR
80073: LD_INT 5
80075: PUSH
80076: FOR_TO
80077: IFFALSE 80220
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80079: LD_ADDR_VAR 0 7
80083: PUSH
80084: LD_VAR 0 1
80088: PPUSH
80089: LD_VAR 0 6
80093: PPUSH
80094: LD_VAR 0 11
80098: PPUSH
80099: CALL_OW 272
80103: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80104: LD_ADDR_VAR 0 8
80108: PUSH
80109: LD_VAR 0 2
80113: PPUSH
80114: LD_VAR 0 6
80118: PPUSH
80119: LD_VAR 0 11
80123: PPUSH
80124: CALL_OW 273
80128: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80129: LD_VAR 0 7
80133: PPUSH
80134: LD_VAR 0 8
80138: PPUSH
80139: CALL_OW 488
80143: NOT
80144: IFFALSE 80148
// continue ;
80146: GO 80076
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80148: LD_ADDR_VAR 0 9
80152: PUSH
80153: LD_VAR 0 12
80157: PUSH
80158: LD_INT 1
80160: ARRAY
80161: PPUSH
80162: LD_VAR 0 12
80166: PUSH
80167: LD_INT 2
80169: ARRAY
80170: PPUSH
80171: LD_VAR 0 7
80175: PPUSH
80176: LD_VAR 0 8
80180: PPUSH
80181: CALL_OW 298
80185: ST_TO_ADDR
// if tmp < distance then
80186: LD_VAR 0 9
80190: PUSH
80191: LD_VAR 0 10
80195: LESS
80196: IFFALSE 80218
// begin result := i ;
80198: LD_ADDR_VAR 0 5
80202: PUSH
80203: LD_VAR 0 6
80207: ST_TO_ADDR
// distance := tmp ;
80208: LD_ADDR_VAR 0 10
80212: PUSH
80213: LD_VAR 0 9
80217: ST_TO_ADDR
// end ; end ;
80218: GO 80076
80220: POP
80221: POP
// end ;
80222: LD_VAR 0 5
80226: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80227: LD_INT 0
80229: PPUSH
80230: PPUSH
// if not driver or not IsInUnit ( driver ) then
80231: LD_VAR 0 1
80235: NOT
80236: PUSH
80237: LD_VAR 0 1
80241: PPUSH
80242: CALL_OW 310
80246: NOT
80247: OR
80248: IFFALSE 80252
// exit ;
80250: GO 80342
// vehicle := IsInUnit ( driver ) ;
80252: LD_ADDR_VAR 0 3
80256: PUSH
80257: LD_VAR 0 1
80261: PPUSH
80262: CALL_OW 310
80266: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80267: LD_VAR 0 1
80271: PPUSH
80272: LD_STRING \
80274: PUSH
80275: LD_INT 0
80277: PUSH
80278: LD_INT 0
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: LD_INT 0
80289: PUSH
80290: LD_INT 0
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: LIST
80297: LIST
80298: LIST
80299: LIST
80300: LIST
80301: PUSH
80302: LD_STRING E
80304: PUSH
80305: LD_INT 0
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: LD_VAR 0 3
80315: PUSH
80316: LD_INT 0
80318: PUSH
80319: LD_INT 0
80321: PUSH
80322: LD_INT 0
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PPUSH
80338: CALL_OW 446
// end ;
80342: LD_VAR 0 2
80346: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80347: LD_INT 0
80349: PPUSH
80350: PPUSH
// if not driver or not IsInUnit ( driver ) then
80351: LD_VAR 0 1
80355: NOT
80356: PUSH
80357: LD_VAR 0 1
80361: PPUSH
80362: CALL_OW 310
80366: NOT
80367: OR
80368: IFFALSE 80372
// exit ;
80370: GO 80462
// vehicle := IsInUnit ( driver ) ;
80372: LD_ADDR_VAR 0 3
80376: PUSH
80377: LD_VAR 0 1
80381: PPUSH
80382: CALL_OW 310
80386: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80387: LD_VAR 0 1
80391: PPUSH
80392: LD_STRING \
80394: PUSH
80395: LD_INT 0
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: LD_INT 0
80403: PUSH
80404: LD_INT 0
80406: PUSH
80407: LD_INT 0
80409: PUSH
80410: LD_INT 0
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: PUSH
80422: LD_STRING E
80424: PUSH
80425: LD_INT 0
80427: PUSH
80428: LD_INT 0
80430: PUSH
80431: LD_VAR 0 3
80435: PUSH
80436: LD_INT 0
80438: PUSH
80439: LD_INT 0
80441: PUSH
80442: LD_INT 0
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: LIST
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PPUSH
80458: CALL_OW 447
// end ;
80462: LD_VAR 0 2
80466: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80467: LD_INT 0
80469: PPUSH
80470: PPUSH
80471: PPUSH
// tmp := [ ] ;
80472: LD_ADDR_VAR 0 5
80476: PUSH
80477: EMPTY
80478: ST_TO_ADDR
// for i in units do
80479: LD_ADDR_VAR 0 4
80483: PUSH
80484: LD_VAR 0 1
80488: PUSH
80489: FOR_IN
80490: IFFALSE 80528
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80492: LD_ADDR_VAR 0 5
80496: PUSH
80497: LD_VAR 0 5
80501: PPUSH
80502: LD_VAR 0 5
80506: PUSH
80507: LD_INT 1
80509: PLUS
80510: PPUSH
80511: LD_VAR 0 4
80515: PPUSH
80516: CALL_OW 256
80520: PPUSH
80521: CALL_OW 2
80525: ST_TO_ADDR
80526: GO 80489
80528: POP
80529: POP
// if not tmp then
80530: LD_VAR 0 5
80534: NOT
80535: IFFALSE 80539
// exit ;
80537: GO 80587
// if asc then
80539: LD_VAR 0 2
80543: IFFALSE 80567
// result := SortListByListAsc ( units , tmp ) else
80545: LD_ADDR_VAR 0 3
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: LD_VAR 0 5
80559: PPUSH
80560: CALL_OW 76
80564: ST_TO_ADDR
80565: GO 80587
// result := SortListByListDesc ( units , tmp ) ;
80567: LD_ADDR_VAR 0 3
80571: PUSH
80572: LD_VAR 0 1
80576: PPUSH
80577: LD_VAR 0 5
80581: PPUSH
80582: CALL_OW 77
80586: ST_TO_ADDR
// end ;
80587: LD_VAR 0 3
80591: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80592: LD_INT 0
80594: PPUSH
80595: PPUSH
// task := GetTaskList ( mech ) ;
80596: LD_ADDR_VAR 0 4
80600: PUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: CALL_OW 437
80610: ST_TO_ADDR
// if not task then
80611: LD_VAR 0 4
80615: NOT
80616: IFFALSE 80620
// exit ;
80618: GO 80662
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80620: LD_ADDR_VAR 0 3
80624: PUSH
80625: LD_VAR 0 4
80629: PUSH
80630: LD_INT 1
80632: ARRAY
80633: PUSH
80634: LD_INT 1
80636: ARRAY
80637: PUSH
80638: LD_STRING r
80640: EQUAL
80641: PUSH
80642: LD_VAR 0 4
80646: PUSH
80647: LD_INT 1
80649: ARRAY
80650: PUSH
80651: LD_INT 4
80653: ARRAY
80654: PUSH
80655: LD_VAR 0 2
80659: EQUAL
80660: AND
80661: ST_TO_ADDR
// end ;
80662: LD_VAR 0 3
80666: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80667: LD_INT 0
80669: PPUSH
// SetDir ( unit , d ) ;
80670: LD_VAR 0 1
80674: PPUSH
80675: LD_VAR 0 4
80679: PPUSH
80680: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80684: LD_VAR 0 1
80688: PPUSH
80689: LD_VAR 0 2
80693: PPUSH
80694: LD_VAR 0 3
80698: PPUSH
80699: LD_VAR 0 5
80703: PPUSH
80704: CALL_OW 48
// end ;
80708: LD_VAR 0 6
80712: RET
// export function ToNaturalNumber ( number ) ; begin
80713: LD_INT 0
80715: PPUSH
// result := number div 1 ;
80716: LD_ADDR_VAR 0 2
80720: PUSH
80721: LD_VAR 0 1
80725: PUSH
80726: LD_INT 1
80728: DIV
80729: ST_TO_ADDR
// if number < 0 then
80730: LD_VAR 0 1
80734: PUSH
80735: LD_INT 0
80737: LESS
80738: IFFALSE 80748
// result := 0 ;
80740: LD_ADDR_VAR 0 2
80744: PUSH
80745: LD_INT 0
80747: ST_TO_ADDR
// end ;
80748: LD_VAR 0 2
80752: RET
// export function SortByClass ( units , class ) ; var un ; begin
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
// if not units or not class then
80757: LD_VAR 0 1
80761: NOT
80762: PUSH
80763: LD_VAR 0 2
80767: NOT
80768: OR
80769: IFFALSE 80773
// exit ;
80771: GO 80868
// result := [ ] ;
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: EMPTY
80779: ST_TO_ADDR
// for un in units do
80780: LD_ADDR_VAR 0 4
80784: PUSH
80785: LD_VAR 0 1
80789: PUSH
80790: FOR_IN
80791: IFFALSE 80866
// if GetClass ( un ) = class then
80793: LD_VAR 0 4
80797: PPUSH
80798: CALL_OW 257
80802: PUSH
80803: LD_VAR 0 2
80807: EQUAL
80808: IFFALSE 80835
// result := Insert ( result , 1 , un ) else
80810: LD_ADDR_VAR 0 3
80814: PUSH
80815: LD_VAR 0 3
80819: PPUSH
80820: LD_INT 1
80822: PPUSH
80823: LD_VAR 0 4
80827: PPUSH
80828: CALL_OW 2
80832: ST_TO_ADDR
80833: GO 80864
// result := Replace ( result , result + 1 , un ) ;
80835: LD_ADDR_VAR 0 3
80839: PUSH
80840: LD_VAR 0 3
80844: PPUSH
80845: LD_VAR 0 3
80849: PUSH
80850: LD_INT 1
80852: PLUS
80853: PPUSH
80854: LD_VAR 0 4
80858: PPUSH
80859: CALL_OW 1
80863: ST_TO_ADDR
80864: GO 80790
80866: POP
80867: POP
// end ;
80868: LD_VAR 0 3
80872: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80873: LD_INT 0
80875: PPUSH
80876: PPUSH
80877: PPUSH
80878: PPUSH
80879: PPUSH
80880: PPUSH
80881: PPUSH
// result := [ ] ;
80882: LD_ADDR_VAR 0 4
80886: PUSH
80887: EMPTY
80888: ST_TO_ADDR
// if x - r < 0 then
80889: LD_VAR 0 1
80893: PUSH
80894: LD_VAR 0 3
80898: MINUS
80899: PUSH
80900: LD_INT 0
80902: LESS
80903: IFFALSE 80915
// min_x := 0 else
80905: LD_ADDR_VAR 0 8
80909: PUSH
80910: LD_INT 0
80912: ST_TO_ADDR
80913: GO 80931
// min_x := x - r ;
80915: LD_ADDR_VAR 0 8
80919: PUSH
80920: LD_VAR 0 1
80924: PUSH
80925: LD_VAR 0 3
80929: MINUS
80930: ST_TO_ADDR
// if y - r < 0 then
80931: LD_VAR 0 2
80935: PUSH
80936: LD_VAR 0 3
80940: MINUS
80941: PUSH
80942: LD_INT 0
80944: LESS
80945: IFFALSE 80957
// min_y := 0 else
80947: LD_ADDR_VAR 0 7
80951: PUSH
80952: LD_INT 0
80954: ST_TO_ADDR
80955: GO 80973
// min_y := y - r ;
80957: LD_ADDR_VAR 0 7
80961: PUSH
80962: LD_VAR 0 2
80966: PUSH
80967: LD_VAR 0 3
80971: MINUS
80972: ST_TO_ADDR
// max_x := x + r ;
80973: LD_ADDR_VAR 0 9
80977: PUSH
80978: LD_VAR 0 1
80982: PUSH
80983: LD_VAR 0 3
80987: PLUS
80988: ST_TO_ADDR
// max_y := y + r ;
80989: LD_ADDR_VAR 0 10
80993: PUSH
80994: LD_VAR 0 2
80998: PUSH
80999: LD_VAR 0 3
81003: PLUS
81004: ST_TO_ADDR
// for _x = min_x to max_x do
81005: LD_ADDR_VAR 0 5
81009: PUSH
81010: DOUBLE
81011: LD_VAR 0 8
81015: DEC
81016: ST_TO_ADDR
81017: LD_VAR 0 9
81021: PUSH
81022: FOR_TO
81023: IFFALSE 81124
// for _y = min_y to max_y do
81025: LD_ADDR_VAR 0 6
81029: PUSH
81030: DOUBLE
81031: LD_VAR 0 7
81035: DEC
81036: ST_TO_ADDR
81037: LD_VAR 0 10
81041: PUSH
81042: FOR_TO
81043: IFFALSE 81120
// begin if not ValidHex ( _x , _y ) then
81045: LD_VAR 0 5
81049: PPUSH
81050: LD_VAR 0 6
81054: PPUSH
81055: CALL_OW 488
81059: NOT
81060: IFFALSE 81064
// continue ;
81062: GO 81042
// if GetResourceTypeXY ( _x , _y ) then
81064: LD_VAR 0 5
81068: PPUSH
81069: LD_VAR 0 6
81073: PPUSH
81074: CALL_OW 283
81078: IFFALSE 81118
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81080: LD_ADDR_VAR 0 4
81084: PUSH
81085: LD_VAR 0 4
81089: PPUSH
81090: LD_VAR 0 4
81094: PUSH
81095: LD_INT 1
81097: PLUS
81098: PPUSH
81099: LD_VAR 0 5
81103: PUSH
81104: LD_VAR 0 6
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PPUSH
81113: CALL_OW 1
81117: ST_TO_ADDR
// end ;
81118: GO 81042
81120: POP
81121: POP
81122: GO 81022
81124: POP
81125: POP
// end ;
81126: LD_VAR 0 4
81130: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81131: LD_INT 0
81133: PPUSH
81134: PPUSH
81135: PPUSH
81136: PPUSH
81137: PPUSH
81138: PPUSH
81139: PPUSH
81140: PPUSH
// if not units then
81141: LD_VAR 0 1
81145: NOT
81146: IFFALSE 81150
// exit ;
81148: GO 81676
// result := UnitFilter ( units , [ f_ok ] ) ;
81150: LD_ADDR_VAR 0 3
81154: PUSH
81155: LD_VAR 0 1
81159: PPUSH
81160: LD_INT 50
81162: PUSH
81163: EMPTY
81164: LIST
81165: PPUSH
81166: CALL_OW 72
81170: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81171: LD_ADDR_VAR 0 8
81175: PUSH
81176: LD_VAR 0 1
81180: PUSH
81181: LD_INT 1
81183: ARRAY
81184: PPUSH
81185: CALL_OW 255
81189: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81190: LD_ADDR_VAR 0 10
81194: PUSH
81195: LD_INT 29
81197: PUSH
81198: LD_EXP 53
81202: PUSH
81203: LD_INT 49
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: LIST
81210: ST_TO_ADDR
// if not result then
81211: LD_VAR 0 3
81215: NOT
81216: IFFALSE 81220
// exit ;
81218: GO 81676
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81220: LD_ADDR_VAR 0 5
81224: PUSH
81225: LD_INT 81
81227: PUSH
81228: LD_VAR 0 8
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: PPUSH
81237: CALL_OW 69
81241: ST_TO_ADDR
// for i in result do
81242: LD_ADDR_VAR 0 4
81246: PUSH
81247: LD_VAR 0 3
81251: PUSH
81252: FOR_IN
81253: IFFALSE 81674
// begin tag := GetTag ( i ) + 1 ;
81255: LD_ADDR_VAR 0 9
81259: PUSH
81260: LD_VAR 0 4
81264: PPUSH
81265: CALL_OW 110
81269: PUSH
81270: LD_INT 1
81272: PLUS
81273: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81274: LD_ADDR_VAR 0 7
81278: PUSH
81279: LD_VAR 0 4
81283: PPUSH
81284: CALL_OW 250
81288: PPUSH
81289: LD_VAR 0 4
81293: PPUSH
81294: CALL_OW 251
81298: PPUSH
81299: LD_INT 6
81301: PPUSH
81302: CALL 80873 0 3
81306: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81307: LD_VAR 0 4
81311: PPUSH
81312: CALL_OW 247
81316: PUSH
81317: LD_INT 2
81319: EQUAL
81320: PUSH
81321: LD_VAR 0 7
81325: AND
81326: PUSH
81327: LD_VAR 0 4
81331: PPUSH
81332: CALL_OW 264
81336: PUSH
81337: LD_VAR 0 10
81341: IN
81342: NOT
81343: AND
81344: IFFALSE 81383
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81346: LD_VAR 0 4
81350: PPUSH
81351: LD_VAR 0 7
81355: PUSH
81356: LD_INT 1
81358: ARRAY
81359: PUSH
81360: LD_INT 1
81362: ARRAY
81363: PPUSH
81364: LD_VAR 0 7
81368: PUSH
81369: LD_INT 1
81371: ARRAY
81372: PUSH
81373: LD_INT 2
81375: ARRAY
81376: PPUSH
81377: CALL_OW 116
81381: GO 81672
// if path > tag then
81383: LD_VAR 0 2
81387: PUSH
81388: LD_VAR 0 9
81392: GREATER
81393: IFFALSE 81601
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81395: LD_ADDR_VAR 0 6
81399: PUSH
81400: LD_VAR 0 5
81404: PPUSH
81405: LD_INT 91
81407: PUSH
81408: LD_VAR 0 4
81412: PUSH
81413: LD_INT 8
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: LIST
81420: PPUSH
81421: CALL_OW 72
81425: ST_TO_ADDR
// if nearEnemy then
81426: LD_VAR 0 6
81430: IFFALSE 81499
// begin if GetWeapon ( i ) = ru_time_lapser then
81432: LD_VAR 0 4
81436: PPUSH
81437: CALL_OW 264
81441: PUSH
81442: LD_INT 49
81444: EQUAL
81445: IFFALSE 81473
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81447: LD_VAR 0 4
81451: PPUSH
81452: LD_VAR 0 6
81456: PPUSH
81457: LD_VAR 0 4
81461: PPUSH
81462: CALL_OW 74
81466: PPUSH
81467: CALL_OW 112
81471: GO 81497
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81473: LD_VAR 0 4
81477: PPUSH
81478: LD_VAR 0 6
81482: PPUSH
81483: LD_VAR 0 4
81487: PPUSH
81488: CALL_OW 74
81492: PPUSH
81493: CALL_OW 115
// end else
81497: GO 81599
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81499: LD_VAR 0 4
81503: PPUSH
81504: LD_VAR 0 2
81508: PUSH
81509: LD_VAR 0 9
81513: ARRAY
81514: PUSH
81515: LD_INT 1
81517: ARRAY
81518: PPUSH
81519: LD_VAR 0 2
81523: PUSH
81524: LD_VAR 0 9
81528: ARRAY
81529: PUSH
81530: LD_INT 2
81532: ARRAY
81533: PPUSH
81534: CALL_OW 297
81538: PUSH
81539: LD_INT 6
81541: GREATER
81542: IFFALSE 81585
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81544: LD_VAR 0 4
81548: PPUSH
81549: LD_VAR 0 2
81553: PUSH
81554: LD_VAR 0 9
81558: ARRAY
81559: PUSH
81560: LD_INT 1
81562: ARRAY
81563: PPUSH
81564: LD_VAR 0 2
81568: PUSH
81569: LD_VAR 0 9
81573: ARRAY
81574: PUSH
81575: LD_INT 2
81577: ARRAY
81578: PPUSH
81579: CALL_OW 114
81583: GO 81599
// SetTag ( i , tag ) ;
81585: LD_VAR 0 4
81589: PPUSH
81590: LD_VAR 0 9
81594: PPUSH
81595: CALL_OW 109
// end else
81599: GO 81672
// if enemy then
81601: LD_VAR 0 5
81605: IFFALSE 81672
// begin if GetWeapon ( i ) = ru_time_lapser then
81607: LD_VAR 0 4
81611: PPUSH
81612: CALL_OW 264
81616: PUSH
81617: LD_INT 49
81619: EQUAL
81620: IFFALSE 81648
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81622: LD_VAR 0 4
81626: PPUSH
81627: LD_VAR 0 5
81631: PPUSH
81632: LD_VAR 0 4
81636: PPUSH
81637: CALL_OW 74
81641: PPUSH
81642: CALL_OW 112
81646: GO 81672
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81648: LD_VAR 0 4
81652: PPUSH
81653: LD_VAR 0 5
81657: PPUSH
81658: LD_VAR 0 4
81662: PPUSH
81663: CALL_OW 74
81667: PPUSH
81668: CALL_OW 115
// end ; end ;
81672: GO 81252
81674: POP
81675: POP
// end ;
81676: LD_VAR 0 3
81680: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81681: LD_INT 0
81683: PPUSH
81684: PPUSH
81685: PPUSH
// if not unit or IsInUnit ( unit ) then
81686: LD_VAR 0 1
81690: NOT
81691: PUSH
81692: LD_VAR 0 1
81696: PPUSH
81697: CALL_OW 310
81701: OR
81702: IFFALSE 81706
// exit ;
81704: GO 81797
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81706: LD_ADDR_VAR 0 4
81710: PUSH
81711: LD_VAR 0 1
81715: PPUSH
81716: CALL_OW 250
81720: PPUSH
81721: LD_VAR 0 2
81725: PPUSH
81726: LD_INT 1
81728: PPUSH
81729: CALL_OW 272
81733: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81734: LD_ADDR_VAR 0 5
81738: PUSH
81739: LD_VAR 0 1
81743: PPUSH
81744: CALL_OW 251
81748: PPUSH
81749: LD_VAR 0 2
81753: PPUSH
81754: LD_INT 1
81756: PPUSH
81757: CALL_OW 273
81761: ST_TO_ADDR
// if ValidHex ( x , y ) then
81762: LD_VAR 0 4
81766: PPUSH
81767: LD_VAR 0 5
81771: PPUSH
81772: CALL_OW 488
81776: IFFALSE 81797
// ComTurnXY ( unit , x , y ) ;
81778: LD_VAR 0 1
81782: PPUSH
81783: LD_VAR 0 4
81787: PPUSH
81788: LD_VAR 0 5
81792: PPUSH
81793: CALL_OW 118
// end ;
81797: LD_VAR 0 3
81801: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81802: LD_INT 0
81804: PPUSH
81805: PPUSH
// result := false ;
81806: LD_ADDR_VAR 0 3
81810: PUSH
81811: LD_INT 0
81813: ST_TO_ADDR
// if not units then
81814: LD_VAR 0 2
81818: NOT
81819: IFFALSE 81823
// exit ;
81821: GO 81868
// for i in units do
81823: LD_ADDR_VAR 0 4
81827: PUSH
81828: LD_VAR 0 2
81832: PUSH
81833: FOR_IN
81834: IFFALSE 81866
// if See ( side , i ) then
81836: LD_VAR 0 1
81840: PPUSH
81841: LD_VAR 0 4
81845: PPUSH
81846: CALL_OW 292
81850: IFFALSE 81864
// begin result := true ;
81852: LD_ADDR_VAR 0 3
81856: PUSH
81857: LD_INT 1
81859: ST_TO_ADDR
// exit ;
81860: POP
81861: POP
81862: GO 81868
// end ;
81864: GO 81833
81866: POP
81867: POP
// end ;
81868: LD_VAR 0 3
81872: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81873: LD_INT 0
81875: PPUSH
81876: PPUSH
81877: PPUSH
81878: PPUSH
// if not unit or not points then
81879: LD_VAR 0 1
81883: NOT
81884: PUSH
81885: LD_VAR 0 2
81889: NOT
81890: OR
81891: IFFALSE 81895
// exit ;
81893: GO 81985
// dist := 99999 ;
81895: LD_ADDR_VAR 0 5
81899: PUSH
81900: LD_INT 99999
81902: ST_TO_ADDR
// for i in points do
81903: LD_ADDR_VAR 0 4
81907: PUSH
81908: LD_VAR 0 2
81912: PUSH
81913: FOR_IN
81914: IFFALSE 81983
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81916: LD_ADDR_VAR 0 6
81920: PUSH
81921: LD_VAR 0 1
81925: PPUSH
81926: LD_VAR 0 4
81930: PUSH
81931: LD_INT 1
81933: ARRAY
81934: PPUSH
81935: LD_VAR 0 4
81939: PUSH
81940: LD_INT 2
81942: ARRAY
81943: PPUSH
81944: CALL_OW 297
81948: ST_TO_ADDR
// if tmpDist < dist then
81949: LD_VAR 0 6
81953: PUSH
81954: LD_VAR 0 5
81958: LESS
81959: IFFALSE 81981
// begin result := i ;
81961: LD_ADDR_VAR 0 3
81965: PUSH
81966: LD_VAR 0 4
81970: ST_TO_ADDR
// dist := tmpDist ;
81971: LD_ADDR_VAR 0 5
81975: PUSH
81976: LD_VAR 0 6
81980: ST_TO_ADDR
// end ; end ;
81981: GO 81913
81983: POP
81984: POP
// end ;
81985: LD_VAR 0 3
81989: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81990: LD_INT 0
81992: PPUSH
// uc_side := side ;
81993: LD_ADDR_OWVAR 20
81997: PUSH
81998: LD_VAR 0 1
82002: ST_TO_ADDR
// uc_nation := 3 ;
82003: LD_ADDR_OWVAR 21
82007: PUSH
82008: LD_INT 3
82010: ST_TO_ADDR
// vc_chassis := 25 ;
82011: LD_ADDR_OWVAR 37
82015: PUSH
82016: LD_INT 25
82018: ST_TO_ADDR
// vc_engine := engine_siberite ;
82019: LD_ADDR_OWVAR 39
82023: PUSH
82024: LD_INT 3
82026: ST_TO_ADDR
// vc_control := control_computer ;
82027: LD_ADDR_OWVAR 38
82031: PUSH
82032: LD_INT 3
82034: ST_TO_ADDR
// vc_weapon := 59 ;
82035: LD_ADDR_OWVAR 40
82039: PUSH
82040: LD_INT 59
82042: ST_TO_ADDR
// result := CreateVehicle ;
82043: LD_ADDR_VAR 0 5
82047: PUSH
82048: CALL_OW 45
82052: ST_TO_ADDR
// SetDir ( result , d ) ;
82053: LD_VAR 0 5
82057: PPUSH
82058: LD_VAR 0 4
82062: PPUSH
82063: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82067: LD_VAR 0 5
82071: PPUSH
82072: LD_VAR 0 2
82076: PPUSH
82077: LD_VAR 0 3
82081: PPUSH
82082: LD_INT 0
82084: PPUSH
82085: CALL_OW 48
// end ;
82089: LD_VAR 0 5
82093: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82094: LD_INT 0
82096: PPUSH
82097: PPUSH
82098: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82099: LD_ADDR_VAR 0 2
82103: PUSH
82104: LD_INT 0
82106: PUSH
82107: LD_INT 0
82109: PUSH
82110: LD_INT 0
82112: PUSH
82113: LD_INT 0
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82122: LD_VAR 0 1
82126: NOT
82127: PUSH
82128: LD_VAR 0 1
82132: PPUSH
82133: CALL_OW 264
82137: PUSH
82138: LD_INT 12
82140: PUSH
82141: LD_INT 51
82143: PUSH
82144: LD_INT 32
82146: PUSH
82147: LD_EXP 50
82151: PUSH
82152: EMPTY
82153: LIST
82154: LIST
82155: LIST
82156: LIST
82157: IN
82158: NOT
82159: OR
82160: IFFALSE 82164
// exit ;
82162: GO 82262
// for i := 1 to 3 do
82164: LD_ADDR_VAR 0 3
82168: PUSH
82169: DOUBLE
82170: LD_INT 1
82172: DEC
82173: ST_TO_ADDR
82174: LD_INT 3
82176: PUSH
82177: FOR_TO
82178: IFFALSE 82260
// begin tmp := GetCargo ( cargo , i ) ;
82180: LD_ADDR_VAR 0 4
82184: PUSH
82185: LD_VAR 0 1
82189: PPUSH
82190: LD_VAR 0 3
82194: PPUSH
82195: CALL_OW 289
82199: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82200: LD_ADDR_VAR 0 2
82204: PUSH
82205: LD_VAR 0 2
82209: PPUSH
82210: LD_VAR 0 3
82214: PPUSH
82215: LD_VAR 0 4
82219: PPUSH
82220: CALL_OW 1
82224: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82225: LD_ADDR_VAR 0 2
82229: PUSH
82230: LD_VAR 0 2
82234: PPUSH
82235: LD_INT 4
82237: PPUSH
82238: LD_VAR 0 2
82242: PUSH
82243: LD_INT 4
82245: ARRAY
82246: PUSH
82247: LD_VAR 0 4
82251: PLUS
82252: PPUSH
82253: CALL_OW 1
82257: ST_TO_ADDR
// end ;
82258: GO 82177
82260: POP
82261: POP
// end ;
82262: LD_VAR 0 2
82266: RET
// export function Length ( array ) ; begin
82267: LD_INT 0
82269: PPUSH
// result := array + 0 ;
82270: LD_ADDR_VAR 0 2
82274: PUSH
82275: LD_VAR 0 1
82279: PUSH
82280: LD_INT 0
82282: PLUS
82283: ST_TO_ADDR
// end ;
82284: LD_VAR 0 2
82288: RET
// export function PrepareArray ( array ) ; begin
82289: LD_INT 0
82291: PPUSH
// result := array diff 0 ;
82292: LD_ADDR_VAR 0 2
82296: PUSH
82297: LD_VAR 0 1
82301: PUSH
82302: LD_INT 0
82304: DIFF
82305: ST_TO_ADDR
// if not result [ 1 ] then
82306: LD_VAR 0 2
82310: PUSH
82311: LD_INT 1
82313: ARRAY
82314: NOT
82315: IFFALSE 82335
// result := Delete ( result , 1 ) ;
82317: LD_ADDR_VAR 0 2
82321: PUSH
82322: LD_VAR 0 2
82326: PPUSH
82327: LD_INT 1
82329: PPUSH
82330: CALL_OW 3
82334: ST_TO_ADDR
// end ; end_of_file
82335: LD_VAR 0 2
82339: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82340: LD_VAR 0 1
82344: PUSH
82345: LD_INT 200
82347: DOUBLE
82348: GREATEREQUAL
82349: IFFALSE 82357
82351: LD_INT 299
82353: DOUBLE
82354: LESSEQUAL
82355: IFTRUE 82359
82357: GO 82391
82359: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82360: LD_VAR 0 1
82364: PPUSH
82365: LD_VAR 0 2
82369: PPUSH
82370: LD_VAR 0 3
82374: PPUSH
82375: LD_VAR 0 4
82379: PPUSH
82380: LD_VAR 0 5
82384: PPUSH
82385: CALL 37208 0 5
82389: GO 82468
82391: LD_INT 300
82393: DOUBLE
82394: GREATEREQUAL
82395: IFFALSE 82403
82397: LD_INT 399
82399: DOUBLE
82400: LESSEQUAL
82401: IFTRUE 82405
82403: GO 82467
82405: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82406: LD_VAR 0 1
82410: PPUSH
82411: LD_VAR 0 2
82415: PPUSH
82416: LD_VAR 0 3
82420: PPUSH
82421: LD_VAR 0 4
82425: PPUSH
82426: LD_VAR 0 5
82430: PPUSH
82431: LD_VAR 0 6
82435: PPUSH
82436: LD_VAR 0 7
82440: PPUSH
82441: LD_VAR 0 8
82445: PPUSH
82446: LD_VAR 0 9
82450: PPUSH
82451: LD_VAR 0 10
82455: PPUSH
82456: LD_VAR 0 11
82460: PPUSH
82461: CALL 33537 0 11
82465: GO 82468
82467: POP
// end ;
82468: PPOPN 11
82470: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82471: LD_VAR 0 1
82475: PPUSH
82476: LD_VAR 0 2
82480: PPUSH
82481: LD_VAR 0 3
82485: PPUSH
82486: LD_VAR 0 4
82490: PPUSH
82491: LD_VAR 0 5
82495: PPUSH
82496: CALL 36944 0 5
// end ; end_of_file
82500: PPOPN 5
82502: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82503: LD_VAR 0 1
82507: PPUSH
82508: LD_VAR 0 2
82512: PPUSH
82513: LD_VAR 0 3
82517: PPUSH
82518: LD_VAR 0 4
82522: PPUSH
82523: LD_VAR 0 5
82527: PPUSH
82528: LD_VAR 0 6
82532: PPUSH
82533: CALL 21230 0 6
// end ;
82537: PPOPN 6
82539: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82540: LD_INT 0
82542: PPUSH
// begin if not units then
82543: LD_VAR 0 1
82547: NOT
82548: IFFALSE 82552
// exit ;
82550: GO 82552
// end ;
82552: PPOPN 7
82554: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82555: CALL 21201 0 0
// end ;
82559: PPOPN 1
82561: END
