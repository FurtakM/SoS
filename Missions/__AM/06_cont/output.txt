// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7575 0 0
// CreateNature ;
  57: CALL 20994 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10894 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42067 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42067 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42067 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42067 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42067 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42067 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42067 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42067 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42067 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42067 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42067 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42067 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 80167 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 7329 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 7329 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 7329 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 7329 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7439 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7718 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ;
6819: PPOPN 4
6821: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6822: LD_INT 10
6824: PPUSH
6825: LD_INT 22
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 70
6839: IFFALSE 7188
6841: GO 6843
6843: DISABLE
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
// begin enable ;
6850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 25
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 120
6878: PUSH
6879: LD_INT 111
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 3
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 50
6913: PUSH
6914: EMPTY
6915: LIST
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 4
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 30
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: ST_TO_ADDR
// if not tmp then
6955: LD_VAR 0 2
6959: NOT
6960: IFFALSE 7058
// begin if not bar then
6962: LD_VAR 0 3
6966: NOT
6967: IFFALSE 6972
// begin disable ;
6969: DISABLE
// exit ;
6970: GO 7188
// end ; tmp := [ ] ;
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: EMPTY
6978: ST_TO_ADDR
// for i in bar do
6979: LD_ADDR_VAR 0 1
6983: PUSH
6984: LD_VAR 0 3
6988: PUSH
6989: FOR_IN
6990: IFFALSE 7015
// tmp := tmp union UnitsInside ( i ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_VAR 0 2
7001: PUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 313
7011: UNION
7012: ST_TO_ADDR
7013: GO 6989
7015: POP
7016: POP
// if not tmp then
7017: LD_VAR 0 2
7021: NOT
7022: IFFALSE 7027
// begin disable ;
7024: DISABLE
// exit ;
7025: GO 7188
// end ; for i in tmp do
7027: LD_ADDR_VAR 0 1
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7054
// SetTag ( i , 111 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_INT 111
7047: PPUSH
7048: CALL_OW 109
7052: GO 7037
7054: POP
7055: POP
// end else
7056: GO 7188
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: LD_INT 10
7065: PPUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 70
7080: ST_TO_ADDR
// for i in tmp do
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: LD_VAR 0 2
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7186
// if IsOk ( i ) then
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL_OW 302
7103: IFFALSE 7184
// begin if IsInUnit ( i ) then
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 310
7114: IFFALSE 7125
// ComExitBuilding ( i ) ;
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 122
// wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 4
7141: PPUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 74
7151: PPUSH
7152: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 12
7178: ARRAY
7179: PPUSH
7180: CALL_OW 180
// end ;
7184: GO 7091
7186: POP
7187: POP
// end ; end ; end_of_file
7188: PPOPN 4
7190: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
7195: PPUSH
// if not characters then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7284
// speaker := characters [ rand ( 1 , characters ) ] ;
7205: LD_ADDR_VAR 0 6
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 12
7227: ARRAY
7228: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 258
7238: PUSH
7239: LD_INT 1
7241: EQUAL
7242: IFFALSE 7260
// Say ( speaker , dialogMID ) else
7244: LD_VAR 0 6
7248: PPUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: CALL_OW 88
7258: GO 7274
// Say ( speaker , dialogFID ) ;
7260: LD_VAR 0 6
7264: PPUSH
7265: LD_VAR 0 3
7269: PPUSH
7270: CALL_OW 88
// result := speaker ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 6
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 4
7288: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// for i in charactersList do
7293: LD_ADDR_VAR 0 4
7297: PUSH
7298: LD_VAR 0 1
7302: PUSH
7303: FOR_IN
7304: IFFALSE 7322
// SaveCharacters ( i , ident ) ;
7306: LD_VAR 0 4
7310: PPUSH
7311: LD_VAR 0 2
7315: PPUSH
7316: CALL_OW 38
7320: GO 7303
7322: POP
7323: POP
// end ;
7324: LD_VAR 0 3
7328: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// for i = 1 to count do
7335: LD_ADDR_VAR 0 8
7339: PUSH
7340: DOUBLE
7341: LD_INT 1
7343: DEC
7344: ST_TO_ADDR
7345: LD_VAR 0 6
7349: PUSH
7350: FOR_TO
7351: IFFALSE 7432
// begin uc_side = side ;
7353: LD_ADDR_OWVAR 20
7357: PUSH
7358: LD_VAR 0 1
7362: ST_TO_ADDR
// uc_nation = nation ;
7363: LD_ADDR_OWVAR 21
7367: PUSH
7368: LD_VAR 0 2
7372: ST_TO_ADDR
// hc_gallery =  ;
7373: LD_ADDR_OWVAR 33
7377: PUSH
7378: LD_STRING 
7380: ST_TO_ADDR
// hc_name =  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7389: LD_INT 0
7391: PPUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 380
// un = CreateHuman ;
7406: LD_ADDR_VAR 0 10
7410: PUSH
7411: CALL_OW 44
7415: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7416: LD_VAR 0 10
7420: PPUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: CALL_OW 52
// end ;
7430: GO 7350
7432: POP
7433: POP
// end ;
7434: LD_VAR 0 7
7438: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7439: LD_INT 0
7441: PPUSH
7442: PPUSH
7443: PPUSH
// uc_side := GetSide ( b ) ;
7444: LD_ADDR_OWVAR 20
7448: PUSH
7449: LD_VAR 0 2
7453: PPUSH
7454: CALL_OW 255
7458: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7459: LD_ADDR_OWVAR 21
7463: PUSH
7464: LD_VAR 0 2
7468: PPUSH
7469: CALL_OW 248
7473: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7489: LD_ADDR_VAR 0 5
7493: PUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 254
7503: PUSH
7504: LD_INT 3
7506: MINUS
7507: ST_TO_ADDR
// if dir < 0 then
7508: LD_VAR 0 5
7512: PUSH
7513: LD_INT 0
7515: LESS
7516: IFFALSE 7532
// dir := 6 + dir ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_VAR 0 5
7530: PLUS
7531: ST_TO_ADDR
// un := CreateHuman ;
7532: LD_ADDR_VAR 0 4
7536: PUSH
7537: CALL_OW 44
7541: ST_TO_ADDR
// SetDir ( un , dir ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 5
7551: PPUSH
7552: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7556: LD_VAR 0 4
7560: PPUSH
7561: LD_VAR 0 2
7565: PPUSH
7566: CALL_OW 52
// end ;
7570: LD_VAR 0 3
7574: RET
// export function PrepareDifficulty ; begin
7575: LD_INT 0
7577: PPUSH
// case Difficulty of 1 :
7578: LD_OWVAR 67
7582: PUSH
7583: LD_INT 1
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7610
7591: POP
// begin RuSolMinLevel = 2 ;
7592: LD_ADDR_EXP 35
7596: PUSH
7597: LD_INT 2
7599: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7600: LD_ADDR_EXP 36
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; 2 :
7608: GO 7671
7610: LD_INT 2
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7637
7618: POP
// begin RuSolMinLevel = 3 ;
7619: LD_ADDR_EXP 35
7623: PUSH
7624: LD_INT 3
7626: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7627: LD_ADDR_EXP 36
7631: PUSH
7632: LD_INT 5
7634: ST_TO_ADDR
// end ; 3 .. 4 :
7635: GO 7671
7637: LD_INT 3
7639: DOUBLE
7640: GREATEREQUAL
7641: IFFALSE 7649
7643: LD_INT 4
7645: DOUBLE
7646: LESSEQUAL
7647: IFTRUE 7651
7649: GO 7670
7651: POP
// begin RuSolMinLevel = 4 ;
7652: LD_ADDR_EXP 35
7656: PUSH
7657: LD_INT 4
7659: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7660: LD_ADDR_EXP 36
7664: PUSH
7665: LD_INT 6
7667: ST_TO_ADDR
// end ; end ;
7668: GO 7671
7670: POP
// end ;
7671: LD_VAR 0 1
7675: RET
// export function ShowQuery1 ; begin
7676: LD_INT 0
7678: PPUSH
// result := Query ( QKill ) ;
7679: LD_ADDR_VAR 0 1
7683: PUSH
7684: LD_STRING QKill
7686: PPUSH
7687: CALL_OW 97
7691: ST_TO_ADDR
// end ;
7692: LD_VAR 0 1
7696: RET
// export function ShowQuery2 ; begin
7697: LD_INT 0
7699: PPUSH
// result := Query ( QKill2 ) ;
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_STRING QKill2
7707: PPUSH
7708: CALL_OW 97
7712: ST_TO_ADDR
// end ;
7713: LD_VAR 0 1
7717: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_INT 48
7731: PUSH
7732: LD_INT 49
7734: PUSH
7735: LD_INT 50
7737: PUSH
7738: LD_INT 20
7740: PUSH
7741: LD_INT 1
7743: PUSH
7744: LD_INT 51
7746: PUSH
7747: LD_INT 52
7749: PUSH
7750: LD_INT 69
7752: PUSH
7753: LD_INT 39
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 40
7761: PUSH
7762: LD_INT 53
7764: PUSH
7765: LD_INT 71
7767: PUSH
7768: LD_INT 57
7770: PUSH
7771: LD_INT 58
7773: PUSH
7774: LD_INT 44
7776: PUSH
7777: LD_INT 32
7779: PUSH
7780: LD_INT 27
7782: PUSH
7783: LD_INT 23
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 59
7791: PUSH
7792: LD_INT 54
7794: PUSH
7795: LD_INT 55
7797: PUSH
7798: LD_INT 56
7800: PUSH
7801: LD_INT 63
7803: PUSH
7804: LD_INT 64
7806: PUSH
7807: LD_INT 65
7809: PUSH
7810: LD_INT 30
7812: PUSH
7813: LD_INT 31
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 82
7827: PUSH
7828: LD_INT 83
7830: PUSH
7831: LD_INT 84
7833: PUSH
7834: LD_INT 85
7836: PUSH
7837: LD_INT 86
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
// for i = 1 to list do
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 7
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7967
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7897: LD_VAR 0 7
7901: PUSH
7902: LD_VAR 0 5
7906: ARRAY
7907: PPUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 321
7917: PUSH
7918: LD_INT 1
7920: EQUAL
7921: PUSH
7922: LD_VAR 0 7
7926: PUSH
7927: LD_VAR 0 5
7931: ARRAY
7932: PPUSH
7933: LD_VAR 0 3
7937: PPUSH
7938: CALL_OW 482
7942: AND
7943: IFFALSE 7965
// AddComResearch ( lab , list [ i ] ) ;
7945: LD_VAR 0 2
7949: PPUSH
7950: LD_VAR 0 7
7954: PUSH
7955: LD_VAR 0 5
7959: ARRAY
7960: PPUSH
7961: CALL_OW 184
7965: GO 7894
7967: POP
7968: POP
// end ;
7969: LD_VAR 0 4
7973: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7979: LD_INT 22
7981: PUSH
7982: LD_VAR 0 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PPUSH
8005: CALL_OW 69
8009: PUSH
8010: LD_VAR 0 3
8014: LESSEQUAL
8015: IFFALSE 8123
// begin for i = 1 to vehCount do
8017: LD_ADDR_VAR 0 9
8021: PUSH
8022: DOUBLE
8023: LD_INT 1
8025: DEC
8026: ST_TO_ADDR
8027: LD_VAR 0 3
8031: PUSH
8032: FOR_TO
8033: IFFALSE 8121
// begin weapon := weaponTab [ i ] ;
8035: LD_ADDR_VAR 0 10
8039: PUSH
8040: LD_VAR 0 4
8044: PUSH
8045: LD_VAR 0 9
8049: ARRAY
8050: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8051: LD_VAR 0 10
8055: PUSH
8056: LD_INT 46
8058: EQUAL
8059: IFFALSE 8090
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 24
8068: PPUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 6
8078: PPUSH
8079: LD_VAR 0 10
8083: PPUSH
8084: CALL_OW 185
8088: GO 8119
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 7
8099: PPUSH
8100: LD_VAR 0 5
8104: PPUSH
8105: LD_VAR 0 6
8109: PPUSH
8110: LD_VAR 0 10
8114: PPUSH
8115: CALL_OW 185
// end ;
8119: GO 8032
8121: POP
8122: POP
// end ; end ;
8123: LD_VAR 0 8
8127: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8128: LD_INT 0
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8136: LD_ADDR_VAR 0 8
8140: PUSH
8141: LD_VAR 0 2
8145: PPUSH
8146: CALL_OW 313
8150: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8151: LD_ADDR_VAR 0 9
8155: PUSH
8156: LD_VAR 0 3
8160: PPUSH
8161: LD_INT 22
8163: PUSH
8164: LD_VAR 0 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: LD_INT 750
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 54
8198: PUSH
8199: EMPTY
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 70
8216: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8217: LD_ADDR_VAR 0 6
8221: PUSH
8222: LD_VAR 0 3
8226: PPUSH
8227: LD_INT 22
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 24
8254: PUSH
8255: LD_INT 1000
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: PPUSH
8274: CALL_OW 70
8278: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8279: LD_VAR 0 6
8283: NOT
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 25
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 24
8309: PUSH
8310: LD_INT 250
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 69
8326: NOT
8327: AND
8328: IFFALSE 8332
// exit ;
8330: GO 8490
// if buildingsList and engineerOkInside then
8332: LD_VAR 0 6
8336: PUSH
8337: LD_VAR 0 8
8341: AND
8342: IFFALSE 8353
// ComExitBuilding ( engineerOkInside ) ;
8344: LD_VAR 0 8
8348: PPUSH
8349: CALL_OW 122
// if buildingsList and engineerOkOutside then
8353: LD_VAR 0 6
8357: PUSH
8358: LD_VAR 0 9
8362: AND
8363: IFFALSE 8383
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8365: LD_VAR 0 9
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8383: LD_VAR 0 6
8387: PUSH
8388: LD_INT 0
8390: EQUAL
8391: PUSH
8392: LD_VAR 0 4
8396: PUSH
8397: LD_INT 0
8399: EQUAL
8400: AND
8401: PUSH
8402: LD_VAR 0 9
8406: AND
8407: IFFALSE 8423
// ComEnterUnit ( engineerOkOutside , depot ) ;
8409: LD_VAR 0 9
8413: PPUSH
8414: LD_VAR 0 2
8418: PPUSH
8419: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 0
8435: EQUAL
8436: AND
8437: PUSH
8438: LD_VAR 0 4
8442: AND
8443: IFFALSE 8490
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8445: LD_VAR 0 9
8449: PPUSH
8450: LD_VAR 0 4
8454: PUSH
8455: LD_INT 1
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 4
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 4
8484: ARRAY
8485: PPUSH
8486: CALL_OW 145
// end ;
8490: LD_VAR 0 5
8494: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8506: LD_ADDR_VAR 0 6
8510: PUSH
8511: LD_INT 22
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 4
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 24
8545: PUSH
8546: LD_INT 251
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 69
8563: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8564: LD_ADDR_VAR 0 7
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 23
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 50
8608: PUSH
8609: EMPTY
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8623: LD_ADDR_VAR 0 10
8627: PUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 3
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 750
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 70
8699: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8700: LD_ADDR_VAR 0 11
8704: PUSH
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 21
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 3
8734: PUSH
8735: LD_INT 25
8737: PUSH
8738: LD_INT 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 3
8751: PUSH
8752: LD_INT 24
8754: PUSH
8755: LD_INT 1000
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 70
8776: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8777: LD_VAR 0 10
8781: NOT
8782: PUSH
8783: LD_VAR 0 11
8787: NOT
8788: AND
8789: PUSH
8790: LD_VAR 0 6
8794: NOT
8795: AND
8796: IFFALSE 8800
// exit ;
8798: GO 9006
// if damageUnits and sci_list then
8800: LD_VAR 0 10
8804: PUSH
8805: LD_VAR 0 6
8809: AND
8810: IFFALSE 8826
// ComMoveToArea ( damageUnits , healArea ) ;
8812: LD_VAR 0 10
8816: PPUSH
8817: LD_VAR 0 2
8821: PPUSH
8822: CALL_OW 113
// if unitsToHeal and sci_list then
8826: LD_VAR 0 11
8830: PUSH
8831: LD_VAR 0 6
8835: AND
8836: IFFALSE 8847
// ComExitBuilding ( sci_list ) ;
8838: LD_VAR 0 6
8842: PPUSH
8843: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8847: LD_VAR 0 11
8851: PUSH
8852: LD_VAR 0 7
8856: AND
8857: IFFALSE 8877
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8859: LD_VAR 0 7
8863: PPUSH
8864: LD_VAR 0 11
8868: PUSH
8869: LD_INT 1
8871: ARRAY
8872: PPUSH
8873: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8877: LD_VAR 0 10
8881: PUSH
8882: LD_INT 0
8884: EQUAL
8885: PUSH
8886: LD_VAR 0 11
8890: PUSH
8891: LD_INT 0
8893: EQUAL
8894: AND
8895: PUSH
8896: LD_VAR 0 7
8900: AND
8901: IFFALSE 9006
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8903: LD_ADDR_VAR 0 12
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 30
8932: PUSH
8933: LD_INT 8
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8950: LD_ADDR_VAR 0 13
8954: PUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_VAR 0 12
8962: PPUSH
8963: CALL_OW 12
8967: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8968: LD_VAR 0 7
8972: PPUSH
8973: LD_INT 3
8975: PUSH
8976: LD_INT 60
8978: PUSH
8979: EMPTY
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 72
8990: PPUSH
8991: LD_VAR 0 12
8995: PUSH
8996: LD_VAR 0 13
9000: ARRAY
9001: PPUSH
9002: CALL_OW 120
// end ; end ;
9006: LD_VAR 0 5
9010: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
// tmp := [ ] ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9025: LD_ADDR_VAR 0 7
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 32
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: ST_TO_ADDR
// if bunkers then
9061: LD_VAR 0 7
9065: IFFALSE 9135
// for i in bunkers do
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_VAR 0 7
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9133
// for j in UnitsInside ( i ) do
9080: LD_ADDR_VAR 0 5
9084: PUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL_OW 313
9094: PUSH
9095: FOR_IN
9096: IFFALSE 9129
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 6
9107: PPUSH
9108: LD_VAR 0 6
9112: PUSH
9113: LD_INT 1
9115: PLUS
9116: PPUSH
9117: LD_VAR 0 5
9121: PPUSH
9122: CALL_OW 1
9126: ST_TO_ADDR
9127: GO 9095
9129: POP
9130: POP
9131: GO 9077
9133: POP
9134: POP
// if tmp then
9135: LD_VAR 0 6
9139: IFFALSE 9179
// begin ComExitBuilding ( tmp ) ;
9141: LD_VAR 0 6
9145: PPUSH
9146: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9150: LD_VAR 0 6
9154: PPUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 250
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 251
9174: PPUSH
9175: CALL_OW 174
// end ; end ;
9179: LD_VAR 0 3
9183: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
// enable ;
9189: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9190: LD_ADDR_VAR 0 6
9194: PUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: CALL_OW 435
9204: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 34
9224: PUSH
9225: LD_VAR 0 2
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9243: LD_VAR 0 5
9247: PUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: CALL_OW 435
9257: AND
9258: PUSH
9259: LD_VAR 0 6
9263: AND
9264: IFFALSE 9297
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9266: LD_VAR 0 5
9270: PUSH
9271: LD_INT 1
9273: ARRAY
9274: PPUSH
9275: LD_VAR 0 6
9279: PUSH
9280: LD_INT 1
9282: ARRAY
9283: PPUSH
9284: LD_VAR 0 6
9288: PUSH
9289: LD_INT 2
9291: ARRAY
9292: PPUSH
9293: CALL_OW 177
// end ;
9297: LD_VAR 0 4
9301: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_VAR 0 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 56
9336: PUSH
9337: EMPTY
9338: LIST
9339: PUSH
9340: LD_INT 24
9342: PUSH
9343: LD_INT 700
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 25
9388: PUSH
9389: LD_INT 8
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 25
9398: PUSH
9399: LD_INT 9
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: PUSH
9425: LD_EXP 48
9429: PUSH
9430: LD_EXP 49
9434: UNION
9435: DIFF
9436: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 2
9446: PPUSH
9447: LD_INT 22
9449: PUSH
9450: LD_VAR 0 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 30
9461: PUSH
9462: LD_INT 32
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 58
9471: PUSH
9472: EMPTY
9473: LIST
9474: PUSH
9475: LD_INT 24
9477: PUSH
9478: LD_INT 251
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: PPUSH
9491: CALL_OW 70
9495: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_INT 22
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 4
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 5
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 24
9548: PUSH
9549: LD_INT 251
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// if barrackList then
9566: LD_VAR 0 9
9570: IFFALSE 9726
// begin if turretList = 0 then
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: IFFALSE 9618
// begin if soldiersList then
9582: LD_VAR 0 6
9586: IFFALSE 9616
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9588: LD_VAR 0 6
9592: PPUSH
9593: LD_VAR 0 9
9597: PUSH
9598: LD_INT 1
9600: PPUSH
9601: LD_VAR 0 9
9605: PPUSH
9606: CALL_OW 12
9610: ARRAY
9611: PPUSH
9612: CALL_OW 120
// end else
9616: GO 9726
// begin for i in barrackList do
9618: LD_ADDR_VAR 0 4
9622: PUSH
9623: LD_VAR 0 9
9627: PUSH
9628: FOR_IN
9629: IFFALSE 9724
// begin if not turretList then
9631: LD_VAR 0 7
9635: NOT
9636: IFFALSE 9642
// exit ;
9638: POP
9639: POP
9640: GO 9726
// insideUnits = UnitsInside ( i ) ;
9642: LD_ADDR_VAR 0 10
9646: PUSH
9647: LD_VAR 0 4
9651: PPUSH
9652: CALL_OW 313
9656: ST_TO_ADDR
// if insideUnits then
9657: LD_VAR 0 10
9661: IFFALSE 9722
// begin tmp := insideUnits [ 1 ] ;
9663: LD_ADDR_VAR 0 8
9667: PUSH
9668: LD_VAR 0 10
9672: PUSH
9673: LD_INT 1
9675: ARRAY
9676: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9677: LD_VAR 0 8
9681: PPUSH
9682: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9686: LD_VAR 0 8
9690: PPUSH
9691: LD_VAR 0 7
9695: PUSH
9696: LD_INT 1
9698: ARRAY
9699: PPUSH
9700: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9704: LD_ADDR_VAR 0 7
9708: PUSH
9709: LD_VAR 0 7
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 3
9721: ST_TO_ADDR
// end ; end ;
9722: GO 9628
9724: POP
9725: POP
// end ; end ; end ;
9726: LD_VAR 0 3
9730: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9739: LD_ADDR_VAR 0 8
9743: PUSH
9744: LD_INT 22
9746: PUSH
9747: LD_VAR 0 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 34
9768: PUSH
9769: LD_INT 52
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 69
9785: ST_TO_ADDR
// if not craneList then
9786: LD_VAR 0 8
9790: NOT
9791: IFFALSE 9795
// exit ;
9793: GO 10229
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9795: LD_ADDR_VAR 0 9
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 21
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 24
9827: PUSH
9828: LD_INT 1000
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9852: LD_VAR 0 9
9856: PUSH
9857: LD_VAR 0 8
9861: PPUSH
9862: LD_INT 24
9864: PUSH
9865: LD_INT 750
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 72
9876: AND
9877: IFFALSE 9912
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9879: LD_VAR 0 8
9883: PPUSH
9884: LD_INT 24
9886: PUSH
9887: LD_INT 750
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 72
9898: PPUSH
9899: LD_VAR 0 9
9903: PUSH
9904: LD_INT 1
9906: ARRAY
9907: PPUSH
9908: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9912: LD_VAR 0 8
9916: PPUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 24
9922: PUSH
9923: LD_INT 750
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PPUSH
9934: CALL_OW 72
9938: IFFALSE 9976
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_INT 3
9947: PUSH
9948: LD_INT 24
9950: PUSH
9951: LD_INT 750
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 72
9966: PPUSH
9967: LD_VAR 0 2
9971: PPUSH
9972: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9976: LD_VAR 0 8
9980: PUSH
9981: LD_VAR 0 9
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 3
9995: AND
9996: IFFALSE 10043
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9998: LD_VAR 0 8
10002: PPUSH
10003: LD_VAR 0 3
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_INT 2
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 3
10025: PUSH
10026: LD_INT 3
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 4
10037: ARRAY
10038: PPUSH
10039: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10043: LD_ADDR_VAR 0 7
10047: PUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: LD_INT 22
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 52
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: LD_INT 750
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 70
10112: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10113: LD_ADDR_VAR 0 6
10117: PUSH
10118: LD_VAR 0 2
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_VAR 0 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 30
10140: PUSH
10141: LD_INT 0
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 30
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 70
10171: ST_TO_ADDR
// if crane then
10172: LD_VAR 0 7
10176: IFFALSE 10229
// for i in crane do
10178: LD_ADDR_VAR 0 5
10182: PUSH
10183: LD_VAR 0 7
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10227
// begin if dep then
10191: LD_VAR 0 6
10195: IFFALSE 10211
// ComMoveUnit ( i , dep ) ;
10197: LD_VAR 0 5
10201: PPUSH
10202: LD_VAR 0 6
10206: PPUSH
10207: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10211: LD_VAR 0 5
10215: PPUSH
10216: CALL_OW 311
10220: PPUSH
10221: CALL 81589 0 1
// end ;
10225: GO 10188
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 4
10233: RET
// export function BuildBulldozer ; begin
10234: LD_INT 0
10236: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10237: LD_INT 17
10239: PPUSH
10240: CALL_OW 302
10244: NOT
10245: PUSH
10246: LD_INT 17
10248: PPUSH
10249: CALL_OW 255
10253: PUSH
10254: LD_INT 3
10256: NONEQUAL
10257: OR
10258: IFFALSE 10262
// exit ;
10260: GO 10281
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10262: LD_INT 17
10264: PPUSH
10265: LD_INT 24
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_INT 53
10276: PPUSH
10277: CALL_OW 185
// end ;
10281: LD_VAR 0 1
10285: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
// if not bulldozer then
10293: LD_VAR 0 1
10297: NOT
10298: IFFALSE 10302
// exit ;
10300: GO 10584
// list := ListEnvironmentArea ( area ) ;
10302: LD_ADDR_VAR 0 5
10306: PUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL_OW 353
10316: ST_TO_ADDR
// tmp := [ ] ;
10317: LD_ADDR_VAR 0 6
10321: PUSH
10322: EMPTY
10323: ST_TO_ADDR
// for i = 1 to list do
10324: LD_ADDR_VAR 0 4
10328: PUSH
10329: DOUBLE
10330: LD_INT 1
10332: DEC
10333: ST_TO_ADDR
10334: LD_VAR 0 5
10338: PUSH
10339: FOR_TO
10340: IFFALSE 10438
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10342: LD_VAR 0 5
10346: PUSH
10347: LD_VAR 0 4
10351: ARRAY
10352: PUSH
10353: LD_INT 1
10355: ARRAY
10356: PPUSH
10357: LD_VAR 0 5
10361: PUSH
10362: LD_VAR 0 4
10366: ARRAY
10367: PUSH
10368: LD_INT 2
10370: ARRAY
10371: PPUSH
10372: CALL_OW 554
10376: IFFALSE 10436
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: LD_VAR 0 6
10387: PPUSH
10388: LD_VAR 0 6
10392: PUSH
10393: LD_INT 1
10395: PLUS
10396: PPUSH
10397: LD_VAR 0 5
10401: PUSH
10402: LD_VAR 0 4
10406: ARRAY
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PUSH
10412: LD_VAR 0 5
10416: PUSH
10417: LD_VAR 0 4
10421: ARRAY
10422: PUSH
10423: LD_INT 2
10425: ARRAY
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 1
10435: ST_TO_ADDR
// end ;
10436: GO 10339
10438: POP
10439: POP
// ComStop ( bulldozer ) ;
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10449: LD_ADDR_VAR 0 7
10453: PUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// for i = tmp downto 1 do
10478: LD_ADDR_VAR 0 4
10482: PUSH
10483: DOUBLE
10484: LD_VAR 0 6
10488: INC
10489: ST_TO_ADDR
10490: LD_INT 1
10492: PUSH
10493: FOR_DOWNTO
10494: IFFALSE 10582
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10496: LD_ADDR_VAR 0 7
10500: PUSH
10501: LD_VAR 0 7
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 7
10514: PUSH
10515: LD_INT 2
10517: ARRAY
10518: PPUSH
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL 10685 0 3
10528: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10529: LD_VAR 0 1
10533: PPUSH
10534: LD_VAR 0 7
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: LD_VAR 0 7
10547: PUSH
10548: LD_INT 2
10550: ARRAY
10551: PPUSH
10552: CALL 10589 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10556: LD_ADDR_VAR 0 6
10560: PUSH
10561: LD_VAR 0 6
10565: PPUSH
10566: LD_VAR 0 7
10570: PUSH
10571: LD_INT 3
10573: ARRAY
10574: PPUSH
10575: CALL_OW 3
10579: ST_TO_ADDR
// end ;
10580: GO 10493
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 3
10588: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10589: LD_INT 0
10591: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10592: LD_VAR 0 2
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: CALL_OW 351
10606: PUSH
10607: LD_VAR 0 2
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: CALL_OW 554
10621: AND
10622: PUSH
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: AND
10638: PUSH
10639: LD_VAR 0 2
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: CALL_OW 428
10653: PUSH
10654: LD_INT 1
10656: NEG
10657: EQUAL
10658: AND
10659: IFFALSE 10680
// AddComMoveXY ( bulldozer , x , y ) ;
10661: LD_VAR 0 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: CALL_OW 171
// end ;
10680: LD_VAR 0 4
10684: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
10693: PPUSH
// dist := 99999 ;
10694: LD_ADDR_VAR 0 6
10698: PUSH
10699: LD_INT 99999
10701: ST_TO_ADDR
// for i = 1 to list do
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_VAR 0 3
10716: PUSH
10717: FOR_TO
10718: IFFALSE 10856
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10720: LD_ADDR_VAR 0 7
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_VAR 0 3
10739: PUSH
10740: LD_VAR 0 5
10744: ARRAY
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 3
10754: PUSH
10755: LD_VAR 0 5
10759: ARRAY
10760: PUSH
10761: LD_INT 2
10763: ARRAY
10764: PPUSH
10765: CALL_OW 298
10769: ST_TO_ADDR
// if d = 0 then
10770: LD_VAR 0 7
10774: PUSH
10775: LD_INT 0
10777: EQUAL
10778: IFFALSE 10782
// continue ;
10780: GO 10717
// if d < dist then
10782: LD_VAR 0 7
10786: PUSH
10787: LD_VAR 0 6
10791: LESS
10792: IFFALSE 10854
// begin _x := list [ i ] [ 1 ] ;
10794: LD_ADDR_VAR 0 8
10798: PUSH
10799: LD_VAR 0 3
10803: PUSH
10804: LD_VAR 0 5
10808: ARRAY
10809: PUSH
10810: LD_INT 1
10812: ARRAY
10813: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10814: LD_ADDR_VAR 0 9
10818: PUSH
10819: LD_VAR 0 3
10823: PUSH
10824: LD_VAR 0 5
10828: ARRAY
10829: PUSH
10830: LD_INT 2
10832: ARRAY
10833: ST_TO_ADDR
// _i := i ;
10834: LD_ADDR_VAR 0 10
10838: PUSH
10839: LD_VAR 0 5
10843: ST_TO_ADDR
// dist := d ;
10844: LD_ADDR_VAR 0 6
10848: PUSH
10849: LD_VAR 0 7
10853: ST_TO_ADDR
// end ; end ;
10854: GO 10717
10856: POP
10857: POP
// result := [ _x , _y , _i , dist ] ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_VAR 0 8
10867: PUSH
10868: LD_VAR 0 9
10872: PUSH
10873: LD_VAR 0 10
10877: PUSH
10878: LD_VAR 0 6
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// end ; end_of_file
10889: LD_VAR 0 4
10893: RET
// export function Action ; begin
10894: LD_INT 0
10896: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10897: LD_INT 66
10899: PPUSH
10900: LD_INT 4
10902: PPUSH
10903: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10907: LD_INT 22
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 25
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: PUSH
10936: LD_INT 0
10938: EQUAL
10939: IFFALSE 10953
// SetClass ( JMM , 2 ) ;
10941: LD_EXP 1
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10953: LD_STRING M1
10955: PPUSH
10956: CALL_OW 337
// case Difficulty of 1 :
10960: LD_OWVAR 67
10964: PUSH
10965: LD_INT 1
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 10983
10973: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10974: LD_STRING M1-1
10976: PPUSH
10977: CALL_OW 337
10981: GO 11038
10983: LD_INT 2
10985: DOUBLE
10986: EQUAL
10987: IFTRUE 10991
10989: GO 11001
10991: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10992: LD_STRING M1-2
10994: PPUSH
10995: CALL_OW 337
10999: GO 11038
11001: LD_INT 3
11003: DOUBLE
11004: EQUAL
11005: IFTRUE 11009
11007: GO 11019
11009: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11010: LD_STRING M1-3
11012: PPUSH
11013: CALL_OW 337
11017: GO 11038
11019: LD_INT 4
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11037
11027: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11028: LD_STRING M1-4
11030: PPUSH
11031: CALL_OW 337
11035: GO 11038
11037: POP
// ChangeMissionObjectives ( M1cont ) ;
11038: LD_STRING M1cont
11040: PPUSH
11041: CALL_OW 337
// SaveForQuickRestart ;
11045: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11049: LD_INT 525
11051: PPUSH
11052: LD_INT 700
11054: PPUSH
11055: CALL_OW 12
11059: PPUSH
11060: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11064: LD_INT 5
11066: PPUSH
11067: LD_INT 82
11069: PPUSH
11070: LD_INT 38
11072: PPUSH
11073: LD_INT 10
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 56
// wait ( 0 0$14 ) ;
11083: LD_INT 490
11085: PPUSH
11086: CALL_OW 67
// firstCrateSpawn := true ;
11090: LD_ADDR_EXP 41
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 1
11102: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11103: LD_EXP 41
11107: IFFALSE 11496
11109: GO 11111
11111: DISABLE
11112: LD_INT 0
11114: PPUSH
// begin if IsOk ( Lisa ) then
11115: LD_EXP 2
11119: PPUSH
11120: CALL_OW 302
11124: IFFALSE 11140
// Say ( Lisa , DR0-Lisa-1 ) else
11126: LD_EXP 2
11130: PPUSH
11131: LD_STRING DR0-Lisa-1
11133: PPUSH
11134: CALL_OW 88
11138: GO 11286
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 26
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 25
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 25
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: PUSH
11231: LD_EXP 1
11235: PUSH
11236: LD_EXP 8
11240: PUSH
11241: LD_EXP 5
11245: PUSH
11246: LD_EXP 6
11250: PUSH
11251: LD_EXP 7
11255: PUSH
11256: LD_EXP 4
11260: PUSH
11261: LD_EXP 3
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: DIFF
11275: PPUSH
11276: LD_STRING DR0-Sol1-1
11278: PPUSH
11279: LD_STRING DR0-Sol1-1
11281: PPUSH
11282: CALL 7191 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11286: LD_ADDR_VAR 0 1
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 26
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 25
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: LD_INT 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 25
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 25
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: PUSH
11382: LD_EXP 1
11386: PUSH
11387: LD_EXP 8
11391: PUSH
11392: LD_EXP 5
11396: PUSH
11397: LD_EXP 2
11401: PUSH
11402: LD_EXP 6
11406: PUSH
11407: LD_EXP 7
11411: PUSH
11412: LD_EXP 4
11416: PUSH
11417: LD_EXP 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: DIFF
11432: PPUSH
11433: LD_STRING DR0-Sol2-1
11435: PPUSH
11436: LD_STRING DR0-Sol2-1
11438: PPUSH
11439: CALL 7191 0 3
11443: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11444: LD_EXP 4
11448: PPUSH
11449: CALL_OW 302
11453: IFFALSE 11467
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11455: LD_EXP 4
11459: PPUSH
11460: LD_STRING DR0-Cyrus-1
11462: PPUSH
11463: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11467: LD_EXP 2
11471: PPUSH
11472: CALL_OW 302
11476: PUSH
11477: LD_VAR 0 1
11481: OR
11482: IFFALSE 11496
// Say ( JMM , DR0-JMM-1 ) ;
11484: LD_EXP 1
11488: PPUSH
11489: LD_STRING DR0-JMM-1
11491: PPUSH
11492: CALL_OW 88
// end ;
11496: PPOPN 1
11498: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11499: LD_EXP 5
11503: PPUSH
11504: CALL_OW 302
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 16
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: AND
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 463
11550: NOT
11551: AND
11552: IFFALSE 11830
11554: GO 11556
11556: DISABLE
// begin DialogueOn ;
11557: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11561: LD_EXP 5
11565: PPUSH
11566: LD_STRING D10-Frank-1
11568: PPUSH
11569: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11573: LD_INT 22
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 21
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 2
11595: PUSH
11596: LD_INT 25
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 25
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 3
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 25
11628: PUSH
11629: LD_INT 4
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: LD_EXP 5
11662: PUSH
11663: LD_EXP 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: DIFF
11673: PPUSH
11674: LD_STRING D10-Sol1-1
11676: PPUSH
11677: LD_STRING D10-FSol1-1
11679: PPUSH
11680: CALL 7191 0 3
// Say ( Frank , D10-Frank-2 ) ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_STRING D10-Frank-2
11691: PPUSH
11692: CALL_OW 88
// if IsOk ( Lisa ) then
11696: LD_EXP 2
11700: PPUSH
11701: CALL_OW 302
11705: IFFALSE 11721
// Say ( Lisa , D10-Lisa-2 ) else
11707: LD_EXP 2
11711: PPUSH
11712: LD_STRING D10-Lisa-2
11714: PPUSH
11715: CALL_OW 88
11719: GO 11826
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11721: LD_INT 22
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 21
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: PUSH
11801: LD_EXP 1
11805: PUSH
11806: LD_EXP 5
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: DIFF
11815: PPUSH
11816: LD_STRING D10-Sol1-2
11818: PPUSH
11819: LD_STRING D10-FSol1-2
11821: PPUSH
11822: CALL 7191 0 3
// DialogueOff ;
11826: CALL_OW 7
// end ;
11830: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 463
11838: NOT
11839: IFFALSE 12122
11841: GO 11843
11843: DISABLE
// begin HarrisonSupport ;
11844: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11848: LD_EXP 18
11852: PPUSH
11853: CALL_OW 310
11857: PPUSH
11858: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11862: LD_EXP 18
11866: PPUSH
11867: LD_STRING DEng-Eng1-1
11869: PPUSH
11870: CALL_OW 88
// wait ( 1 1$0 ) ;
11874: LD_INT 2100
11876: PPUSH
11877: CALL_OW 67
// DialogueOn ;
11881: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11885: LD_EXP 15
11889: PPUSH
11890: LD_STRING DRem-Har-1
11892: PPUSH
11893: CALL_OW 94
// if contactWithRussian then
11897: LD_EXP 23
11901: IFFALSE 11917
// Say ( JMM , DRem-JMM-1 ) else
11903: LD_EXP 1
11907: PPUSH
11908: LD_STRING DRem-JMM-1
11910: PPUSH
11911: CALL_OW 88
11915: GO 11929
// Say ( JMM , DRem-JMM-1a ) ;
11917: LD_EXP 1
11921: PPUSH
11922: LD_STRING DRem-JMM-1a
11924: PPUSH
11925: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11929: LD_EXP 15
11933: PPUSH
11934: LD_STRING DRem-Har-2
11936: PPUSH
11937: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11941: LD_STRING DenisInDelta
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 30
11951: IFFALSE 11967
// Say ( JMM , DRem-JMM-2 ) else
11953: LD_EXP 1
11957: PPUSH
11958: LD_STRING DRem-JMM-2
11960: PPUSH
11961: CALL_OW 88
11965: GO 11979
// Say ( JMM , DRem-JMM-2a ) ;
11967: LD_EXP 1
11971: PPUSH
11972: LD_STRING DRem-JMM-2a
11974: PPUSH
11975: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11979: LD_EXP 15
11983: PPUSH
11984: LD_STRING DRem-Har-3
11986: PPUSH
11987: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11991: LD_EXP 1
11995: PPUSH
11996: LD_STRING DRem-JMM-3
11998: PPUSH
11999: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12003: LD_EXP 15
12007: PPUSH
12008: LD_STRING DRem-Har-4
12010: PPUSH
12011: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12015: LD_STRING DenisInDelta
12017: PPUSH
12018: LD_INT 0
12020: PPUSH
12021: CALL_OW 30
12025: IFFALSE 12085
// begin Say ( JMM , DRem-JMM-4 ) ;
12027: LD_EXP 1
12031: PPUSH
12032: LD_STRING DRem-JMM-4
12034: PPUSH
12035: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12039: LD_EXP 15
12043: PPUSH
12044: LD_STRING DRem-Har-5
12046: PPUSH
12047: CALL_OW 94
// DialogueOff ;
12051: CALL_OW 7
// wait ( 4 4$00 ) ;
12055: LD_INT 8400
12057: PPUSH
12058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12062: LD_INT 35
12064: PPUSH
12065: CALL_OW 67
// until not InBattle ( 1 ) ;
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 463
12076: NOT
12077: IFFALSE 12062
// SpawnDenis ;
12079: CALL 12123 0 0
// end else
12083: GO 12122
// begin DialogueOff ;
12085: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12089: LD_INT 36
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12102: LD_INT 15
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12115: LD_STRING MR
12117: PPUSH
12118: CALL_OW 337
// end ; end ;
12122: END
// export function SpawnDenis ; var tmp ; begin
12123: LD_INT 0
12125: PPUSH
12126: PPUSH
// PrepareDenis ;
12127: CALL 2244 0 0
// if not Denis then
12131: LD_EXP 9
12135: NOT
12136: IFFALSE 12140
// exit ;
12138: GO 12361
// CenterNowOnUnits ( Denis ) ;
12140: LD_EXP 9
12144: PPUSH
12145: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12169: LD_EXP 9
12173: PPUSH
12174: LD_VAR 0 2
12178: PPUSH
12179: LD_EXP 9
12183: PPUSH
12184: CALL_OW 74
12188: PPUSH
12189: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12193: LD_INT 35
12195: PPUSH
12196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12200: LD_INT 22
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 91
12212: PUSH
12213: LD_EXP 9
12217: PUSH
12218: LD_INT 10
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 69
12234: IFFALSE 12193
// SetSide ( Denis , 1 ) ;
12236: LD_EXP 9
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// DialogueOn ;
12248: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12252: LD_EXP 9
12256: PPUSH
12257: LD_STRING DDen-Den-1
12259: PPUSH
12260: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DDen-JMM-1
12271: PPUSH
12272: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12276: LD_EXP 9
12280: PPUSH
12281: LD_STRING DDen-Den-2
12283: PPUSH
12284: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12288: LD_EXP 1
12292: PPUSH
12293: LD_STRING DDen-JMM-2
12295: PPUSH
12296: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12300: LD_EXP 9
12304: PPUSH
12305: LD_STRING DDen-Den-3
12307: PPUSH
12308: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12312: LD_EXP 1
12316: PPUSH
12317: LD_STRING DDen-JMM-3
12319: PPUSH
12320: CALL_OW 88
// DialogueOff ;
12324: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12328: LD_INT 36
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12341: LD_INT 15
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12354: LD_STRING MR
12356: PPUSH
12357: CALL_OW 337
// end ;
12361: LD_VAR 0 1
12365: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12366: LD_INT 22
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: PUSH
12395: LD_EXP 9
12399: PPUSH
12400: CALL_OW 302
12404: AND
12405: PUSH
12406: LD_INT 1
12408: PPUSH
12409: CALL_OW 463
12413: NOT
12414: AND
12415: IFFALSE 12444
12417: GO 12419
12419: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12420: LD_EXP 9
12424: PPUSH
12425: LD_STRING DR1-Den-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING DR1-JMM-1
12439: PPUSH
12440: CALL_OW 88
// end ;
12444: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12445: LD_INT 15
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 321
12455: PUSH
12456: LD_INT 2
12458: EQUAL
12459: PUSH
12460: LD_EXP 9
12464: PPUSH
12465: CALL_OW 302
12469: AND
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 463
12478: NOT
12479: AND
12480: IFFALSE 12689
12482: GO 12484
12484: DISABLE
// begin DialogueOn ;
12485: CALL_OW 6
// if IsOK ( Denis ) then
12489: LD_EXP 9
12493: PPUSH
12494: CALL_OW 302
12498: IFFALSE 12514
// Say ( Denis , DR2-Den-1 ) else
12500: LD_EXP 9
12504: PPUSH
12505: LD_STRING DR2-Den-1
12507: PPUSH
12508: CALL_OW 88
12512: GO 12573
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12514: LD_INT 22
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 4
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PUSH
12554: LD_EXP 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: DIFF
12562: PPUSH
12563: LD_STRING DR2-Sci1-1
12565: PPUSH
12566: LD_STRING DR2-FSci1-1
12568: PPUSH
12569: CALL 7191 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12573: LD_EXP 1
12577: PPUSH
12578: LD_STRING DR2-JMM-1
12580: PPUSH
12581: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12585: LD_INT 22
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 21
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: LD_INT 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 23
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: PUSH
12636: LD_EXP 1
12640: PUSH
12641: LD_EXP 9
12645: PUSH
12646: LD_EXP 8
12650: PUSH
12651: LD_EXP 5
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: DIFF
12662: PPUSH
12663: LD_STRING DR2-Sol1-1
12665: PPUSH
12666: LD_STRING 
12668: PPUSH
12669: CALL 7191 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12673: LD_EXP 1
12677: PPUSH
12678: LD_STRING DR2-JMM-2
12680: PPUSH
12681: CALL_OW 88
// DialogueOff ;
12685: CALL_OW 7
// end ;
12689: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 36
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: PUSH
12723: LD_INT 22
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 21
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 33
12745: PUSH
12746: LD_INT 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_INT 0
12765: GREATER
12766: AND
12767: PUSH
12768: LD_EXP 24
12772: PUSH
12773: LD_INT 0
12775: EQUAL
12776: AND
12777: PUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 463
12785: NOT
12786: AND
12787: IFFALSE 12924
12789: GO 12791
12791: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 25
12814: PUSH
12815: LD_INT 3
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 26
12824: PUSH
12825: LD_INT 1
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 69
12842: PUSH
12843: LD_EXP 1
12847: PUSH
12848: LD_EXP 6
12852: PUSH
12853: LD_EXP 7
12857: PUSH
12858: LD_EXP 9
12862: PUSH
12863: LD_EXP 16
12867: PUSH
12868: LD_EXP 3
12872: PUSH
12873: LD_EXP 4
12877: PUSH
12878: LD_EXP 2
12882: PUSH
12883: LD_EXP 5
12887: PUSH
12888: LD_EXP 8
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: DIFF
12905: PPUSH
12906: LD_STRING D3a-Mech1-1
12908: PPUSH
12909: LD_STRING 
12911: PPUSH
12912: CALL 7191 0 3
// firstTower = 2 ;
12916: LD_ADDR_EXP 24
12920: PUSH
12921: LD_INT 2
12923: ST_TO_ADDR
// end ;
12924: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12925: LD_INT 22
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: PUSH
12954: LD_INT 0
12956: EQUAL
12957: IFFALSE 13088
12959: GO 12961
12961: DISABLE
12962: LD_INT 0
12964: PPUSH
// begin stop_talking := true ;
12965: LD_ADDR_OWVAR 56
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12973: LD_ADDR_VAR 0 1
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 21
12990: PUSH
12991: LD_INT 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 25
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 25
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 25
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 25
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: PUSH
13058: FOR_IN
13059: IFFALSE 13078
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13061: LD_VAR 0 1
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: LD_INT 7500
13071: PPUSH
13072: CALL_OW 591
13076: GO 13058
13078: POP
13079: POP
// stop_talking := false ;
13080: LD_ADDR_OWVAR 56
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// end ;
13088: PPOPN 1
13090: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13091: LD_INT 22
13093: PUSH
13094: LD_INT 1
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 36
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: PUSH
13120: LD_INT 22
13122: PUSH
13123: LD_INT 1
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: AND
13160: PUSH
13161: CALL 13713 0 0
13165: AND
13166: PUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL_OW 463
13174: NOT
13175: AND
13176: IFFALSE 13710
13178: GO 13180
13180: DISABLE
13181: LD_INT 0
13183: PPUSH
13184: PPUSH
13185: PPUSH
13186: PPUSH
13187: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 36
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13222: LD_ADDR_VAR 0 4
13226: PUSH
13227: LD_INT 22
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 2
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: PPUSH
13262: CALL_OW 69
13266: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: EMPTY
13273: ST_TO_ADDR
// for i in tmpControlTowers do
13274: LD_ADDR_VAR 0 1
13278: PUSH
13279: LD_VAR 0 3
13283: PUSH
13284: FOR_IN
13285: IFFALSE 13708
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13287: LD_EXP 1
13291: PPUSH
13292: CALL_OW 310
13296: PUSH
13297: LD_VAR 0 1
13301: EQUAL
13302: PUSH
13303: LD_EXP 1
13307: PPUSH
13308: CALL_OW 257
13312: PUSH
13313: LD_INT 3
13315: EQUAL
13316: AND
13317: IFFALSE 13451
// begin InGameOn ;
13319: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13323: LD_VAR 0 4
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13336: LD_EXP 1
13340: PPUSH
13341: LD_STRING D4a-JMM-1
13343: PPUSH
13344: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13348: LD_VAR 0 4
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: LD_EXP 1
13361: PPUSH
13362: CALL_OW 53
// wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13373: LD_VAR 0 4
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: LD_VAR 0 4
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 250
13395: PUSH
13396: LD_INT 3
13398: PLUS
13399: PPUSH
13400: LD_VAR 0 4
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: CALL_OW 251
13413: PUSH
13414: LD_INT 2
13416: MINUS
13417: PPUSH
13418: CALL_OW 111
// wait ( 0 0$2 ) ;
13422: LD_INT 70
13424: PPUSH
13425: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13429: LD_EXP 1
13433: PPUSH
13434: LD_STRING D4b-JMM-1
13436: PPUSH
13437: CALL_OW 88
// InGameOff ;
13441: CALL_OW 9
// exit ;
13445: POP
13446: POP
13447: GO 13710
// end else
13449: GO 13706
// begin InGameOn ;
13451: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13455: LD_ADDR_VAR 0 5
13459: PUSH
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 313
13469: PPUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 3
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 72
13484: ST_TO_ADDR
// if not tmpMechanicInside then
13485: LD_VAR 0 5
13489: NOT
13490: IFFALSE 13494
// continue ;
13492: GO 13284
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13494: LD_VAR 0 5
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PPUSH
13503: CALL_OW 258
13507: PUSH
13508: LD_INT 1
13510: EQUAL
13511: IFFALSE 13531
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13513: LD_VAR 0 5
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: LD_STRING D4a-Mech1-1
13524: PPUSH
13525: CALL_OW 88
13529: GO 13547
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13531: LD_VAR 0 5
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: LD_STRING D4a-FMech1-1
13542: PPUSH
13543: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13547: LD_VAR 0 4
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13560: LD_VAR 0 4
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: LD_VAR 0 5
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 53
// wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13589: LD_VAR 0 4
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 4
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PPUSH
13607: CALL_OW 250
13611: PUSH
13612: LD_INT 3
13614: PLUS
13615: PPUSH
13616: LD_VAR 0 4
13620: PUSH
13621: LD_INT 1
13623: ARRAY
13624: PPUSH
13625: CALL_OW 251
13629: PUSH
13630: LD_INT 2
13632: MINUS
13633: PPUSH
13634: CALL_OW 111
// wait ( 0 0$2 ) ;
13638: LD_INT 70
13640: PPUSH
13641: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13645: LD_VAR 0 5
13649: PUSH
13650: LD_INT 1
13652: ARRAY
13653: PPUSH
13654: CALL_OW 258
13658: PUSH
13659: LD_INT 1
13661: EQUAL
13662: IFFALSE 13682
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13664: LD_VAR 0 5
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: LD_STRING D4b-Mech1-1
13675: PPUSH
13676: CALL_OW 88
13680: GO 13698
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13682: LD_VAR 0 5
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: PPUSH
13691: LD_STRING D4b-FMech1-1
13693: PPUSH
13694: CALL_OW 88
// InGameOff ;
13698: CALL_OW 9
// exit ;
13702: POP
13703: POP
13704: GO 13710
// end ; end ;
13706: GO 13284
13708: POP
13709: POP
// end ;
13710: PPOPN 5
13712: END
// function CheckMehInside ; var i , j , tmp ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
// result := false ;
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13727: LD_ADDR_VAR 0 4
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 30
13744: PUSH
13745: LD_INT 36
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PPUSH
13756: CALL_OW 69
13760: ST_TO_ADDR
// if not tmp then
13761: LD_VAR 0 4
13765: NOT
13766: IFFALSE 13770
// exit ;
13768: GO 13834
// for i in tmp do
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 4
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13832
// for j in UnitsInside ( i ) do
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 313
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13828
// if GetClass ( j ) = class_mechanic then
13801: LD_VAR 0 3
13805: PPUSH
13806: CALL_OW 257
13810: PUSH
13811: LD_INT 3
13813: EQUAL
13814: IFFALSE 13826
// begin result := true ;
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// break ;
13824: GO 13828
// end ;
13826: GO 13798
13828: POP
13829: POP
13830: GO 13780
13832: POP
13833: POP
// end ;
13834: LD_VAR 0 1
13838: RET
// every 12 12$0 do
13839: GO 13841
13841: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13842: LD_INT 35
13844: PPUSH
13845: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 463
13856: NOT
13857: PUSH
13858: LD_INT 32
13860: PPUSH
13861: LD_INT 81
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 70
13875: NOT
13876: AND
13877: PUSH
13878: LD_EXP 27
13882: PUSH
13883: LD_INT 10500
13885: LESS
13886: OR
13887: IFFALSE 13842
// PrepareKurt ;
13889: CALL 16522 0 0
// end ;
13893: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13894: LD_EXP 16
13898: PPUSH
13899: CALL_OW 302
13903: PUSH
13904: LD_EXP 16
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_INT 1
13916: EQUAL
13917: AND
13918: PUSH
13919: LD_EXP 2
13923: AND
13924: IFFALSE 14089
13926: GO 13928
13928: DISABLE
// begin wait ( 0 0$50 ) ;
13929: LD_INT 1750
13931: PPUSH
13932: CALL_OW 67
// if not IsOk ( Joan ) then
13936: LD_EXP 16
13940: PPUSH
13941: CALL_OW 302
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14089
// if IsOK ( Lisa ) then
13950: LD_EXP 2
13954: PPUSH
13955: CALL_OW 302
13959: IFFALSE 14089
// begin DialogueOn ;
13961: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13965: LD_EXP 2
13969: PPUSH
13970: LD_STRING D7-Lisa-1
13972: PPUSH
13973: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13977: LD_EXP 1
13981: PPUSH
13982: LD_STRING D7-JMM-1
13984: PPUSH
13985: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13989: LD_EXP 2
13993: PPUSH
13994: LD_STRING D7-Lisa-2
13996: PPUSH
13997: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14001: LD_EXP 1
14005: PPUSH
14006: LD_STRING D7-JMM-2
14008: PPUSH
14009: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14013: LD_EXP 2
14017: PPUSH
14018: LD_STRING D7-Lisa-3
14020: PPUSH
14021: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14025: LD_EXP 1
14029: PPUSH
14030: LD_STRING D7-JMM-3
14032: PPUSH
14033: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14037: LD_EXP 2
14041: PPUSH
14042: LD_STRING D7-Lisa-4
14044: PPUSH
14045: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14049: LD_EXP 1
14053: PPUSH
14054: LD_STRING D7-JMM-4
14056: PPUSH
14057: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14061: LD_EXP 1
14065: PPUSH
14066: LD_STRING D7-JMM-4a
14068: PPUSH
14069: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14073: LD_EXP 2
14077: PPUSH
14078: LD_STRING D7-Lisa-5
14080: PPUSH
14081: CALL_OW 88
// DialogueOff ;
14085: CALL_OW 7
// end ; end ;
14089: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14090: LD_EXP 14
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 1
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_EXP 14
14112: PUSH
14113: LD_INT 10
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 3
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 25
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: PUSH
14181: LD_INT 1
14183: GREATER
14184: AND
14185: IFFALSE 14202
14187: GO 14189
14189: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14190: LD_EXP 14
14194: PPUSH
14195: LD_STRING D5-Sol1-1
14197: PPUSH
14198: CALL_OW 88
14202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 33
14215: PUSH
14216: LD_INT 2
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: PUSH
14232: LD_INT 2
14234: GREATEREQUAL
14235: IFFALSE 14255
14237: GO 14239
14239: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14240: LD_STRING MRa
14242: PPUSH
14243: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14247: LD_ADDR_EXP 29
14251: PUSH
14252: LD_INT 1
14254: ST_TO_ADDR
// end ;
14255: END
// every 2 2$00 do var i , last ;
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// begin last := 8 ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 8
14270: ST_TO_ADDR
// for i = 1 to last do
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: DOUBLE
14277: LD_INT 1
14279: DEC
14280: ST_TO_ADDR
14281: LD_VAR 0 2
14285: PUSH
14286: FOR_TO
14287: IFFALSE 14315
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14289: LD_INT 6300
14291: PPUSH
14292: LD_INT 12600
14294: PPUSH
14295: CALL_OW 12
14299: PPUSH
14300: CALL_OW 67
// PrepareRandoms ( i ) ;
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL 4129 0 1
// end ;
14313: GO 14286
14315: POP
14316: POP
// end ;
14317: PPOPN 2
14319: END
// every 5 5$20 do
14320: GO 14322
14322: DISABLE
// begin DialogueOn ;
14323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14327: LD_EXP 10
14331: PPUSH
14332: LD_STRING D12a-Sci-1
14334: PPUSH
14335: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14339: LD_EXP 1
14343: PPUSH
14344: LD_STRING D12a-JMM-1
14346: PPUSH
14347: CALL_OW 88
// DialogueOff ;
14351: CALL_OW 7
// cratesStatus := 1 ;
14355: LD_ADDR_EXP 39
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// end ;
14363: END
// every 13 13$0 do
14364: GO 14366
14366: DISABLE
// begin DialogueOn ;
14367: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14371: LD_EXP 10
14375: PPUSH
14376: LD_STRING D12b-Sci-1
14378: PPUSH
14379: CALL_OW 94
// DialogueOff ;
14383: CALL_OW 7
// cratesStatus := 2 ;
14387: LD_ADDR_EXP 39
14391: PUSH
14392: LD_INT 2
14394: ST_TO_ADDR
// BuildBulldozer ;
14395: CALL 10234 0 0
// end ;
14399: END
// every 32 32$0 do
14400: GO 14402
14402: DISABLE
// begin DialogueOn ;
14403: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14407: LD_EXP 10
14411: PPUSH
14412: LD_STRING D12c-Sci-1
14414: PPUSH
14415: CALL_OW 94
// DialogueOff ;
14419: CALL_OW 7
// wait ( 3 3$0 ) ;
14423: LD_INT 6300
14425: PPUSH
14426: CALL_OW 67
// DialogueOn ;
14430: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14434: LD_EXP 10
14438: PPUSH
14439: LD_STRING D12d-Sci-1
14441: PPUSH
14442: CALL_OW 94
// DialogueOff ;
14446: CALL_OW 7
// cratesStatus = 1 ;
14450: LD_ADDR_EXP 39
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14458: CALL 20772 0 0
// wait ( 2 2$30 ) ;
14462: LD_INT 5250
14464: PPUSH
14465: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14469: LD_INT 35
14471: PPUSH
14472: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 463
14483: NOT
14484: PUSH
14485: LD_INT 32
14487: PPUSH
14488: LD_INT 81
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: NOT
14503: AND
14504: PUSH
14505: LD_EXP 27
14509: PUSH
14510: LD_INT 6300
14512: LESS
14513: OR
14514: IFFALSE 14469
// PrepareJoan ;
14516: CALL 3085 0 0
// end ;
14520: END
// every 42 42$0 do
14521: GO 14523
14523: DISABLE
// begin DialogueOn ;
14524: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14528: LD_EXP 10
14532: PPUSH
14533: LD_STRING D12e-Sci-1
14535: PPUSH
14536: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14540: LD_EXP 1
14544: PPUSH
14545: LD_STRING D12e-JMM-1
14547: PPUSH
14548: CALL_OW 88
// DialogueOff ;
14552: CALL_OW 7
// cratesStatus := 2 ;
14556: LD_ADDR_EXP 39
14560: PUSH
14561: LD_INT 2
14563: ST_TO_ADDR
// end ; end_of_file
14564: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14565: LD_VAR 0 1
14569: PUSH
14570: LD_INT 1
14572: EQUAL
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_INT 3
14581: EQUAL
14582: AND
14583: IFFALSE 14593
// contactWithRussian := 1 ;
14585: LD_ADDR_EXP 23
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// end ;
14593: PPOPN 2
14595: END
// on BuildingComplete ( building ) do var i ;
14596: LD_INT 0
14598: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 266
14608: PUSH
14609: LD_INT 36
14611: EQUAL
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 24
14632: PUSH
14633: LD_INT 0
14635: EQUAL
14636: AND
14637: IFFALSE 14717
// begin firstTower = 1 ;
14639: LD_ADDR_EXP 24
14643: PUSH
14644: LD_INT 1
14646: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14647: LD_INT 22
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 1
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 25
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 26
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: PUSH
14698: LD_EXP 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: DIFF
14706: PPUSH
14707: LD_STRING D3b-Mech1-1
14709: PPUSH
14710: LD_STRING D3b-Mech1-1
14712: PPUSH
14713: CALL 7191 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 255
14740: PUSH
14741: LD_INT 1
14743: EQUAL
14744: AND
14745: IFFALSE 14759
// SetBName ( building , theta ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_STRING theta
14754: PPUSH
14755: CALL_OW 500
// if GetSide ( building ) = 3 then
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 3
14771: EQUAL
14772: IFFALSE 14812
// begin for i := 1 to 4 do
14774: LD_ADDR_VAR 0 2
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_INT 4
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14810
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14790: LD_ADDR_EXP 32
14794: PUSH
14795: LD_EXP 32
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 3
14807: ST_TO_ADDR
14808: GO 14787
14810: POP
14811: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 255
14821: PUSH
14822: LD_INT 3
14824: EQUAL
14825: PUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 266
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 2
14852: EQUAL
14853: OR
14854: PUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 266
14864: PUSH
14865: LD_INT 4
14867: EQUAL
14868: OR
14869: PUSH
14870: EMPTY
14871: LIST
14872: AND
14873: IFFALSE 14884
// ComUpgrade ( building ) ;
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 255
14893: PUSH
14894: LD_INT 3
14896: EQUAL
14897: PUSH
14898: LD_VAR 0 1
14902: PPUSH
14903: CALL_OW 266
14907: PUSH
14908: LD_INT 32
14910: EQUAL
14911: AND
14912: IFFALSE 14953
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14914: LD_VAR 0 1
14918: PPUSH
14919: LD_INT 42
14921: PUSH
14922: LD_INT 43
14924: PUSH
14925: LD_INT 44
14927: PUSH
14928: LD_INT 46
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 4
14942: PPUSH
14943: CALL_OW 12
14947: ARRAY
14948: PPUSH
14949: CALL_OW 208
// end ;
14953: PPOPN 2
14955: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL 37339 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 23
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: IN
15010: IFFALSE 15026
// killCounter := killCounter + 1 ;
15012: LD_ADDR_EXP 46
15016: PUSH
15017: LD_EXP 46
15021: PUSH
15022: LD_INT 1
15024: PLUS
15025: ST_TO_ADDR
// if unit in ruAttackersInForest then
15026: LD_VAR 0 1
15030: PUSH
15031: LD_EXP 49
15035: IN
15036: IFFALSE 15054
// ruAttackersInForest := ruAttackersInForest diff unit ;
15038: LD_ADDR_EXP 49
15042: PUSH
15043: LD_EXP 49
15047: PUSH
15048: LD_VAR 0 1
15052: DIFF
15053: ST_TO_ADDR
// if unit in ruAttackers then
15054: LD_VAR 0 1
15058: PUSH
15059: LD_EXP 48
15063: IN
15064: IFFALSE 15082
// ruAttackers := ruAttackers diff unit ;
15066: LD_ADDR_EXP 48
15070: PUSH
15071: LD_EXP 48
15075: PUSH
15076: LD_VAR 0 1
15080: DIFF
15081: ST_TO_ADDR
// if unit = JMM then
15082: LD_VAR 0 1
15086: PUSH
15087: LD_EXP 1
15091: EQUAL
15092: IFFALSE 15101
// YouLost ( JMM ) ;
15094: LD_STRING JMM
15096: PPUSH
15097: CALL_OW 104
// if unit = Joan then
15101: LD_VAR 0 1
15105: PUSH
15106: LD_EXP 16
15110: EQUAL
15111: IFFALSE 15121
// JoanStatus := 0 ;
15113: LD_ADDR_EXP 17
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 255
15130: PUSH
15131: LD_INT 1
15133: EQUAL
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: AND
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 248
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: AND
15164: IFFALSE 15180
// unitLost = unitLost + 1 ;
15166: LD_ADDR_EXP 31
15170: PUSH
15171: LD_EXP 31
15175: PUSH
15176: LD_INT 1
15178: PLUS
15179: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 255
15189: PUSH
15190: LD_INT 3
15192: EQUAL
15193: PUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 247
15203: PUSH
15204: LD_INT 3
15206: EQUAL
15207: AND
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 266
15218: PUSH
15219: LD_INT 4
15221: PUSH
15222: LD_INT 5
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: LD_INT 31
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: IN
15237: AND
15238: IFFALSE 15324
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15240: LD_ADDR_EXP 32
15244: PUSH
15245: LD_EXP 32
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: ADD
15260: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15261: LD_ADDR_EXP 32
15265: PUSH
15266: LD_EXP 32
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 250
15280: ADD
15281: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15282: LD_ADDR_EXP 32
15286: PUSH
15287: LD_EXP 32
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 251
15301: ADD
15302: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15303: LD_ADDR_EXP 32
15307: PUSH
15308: LD_EXP 32
15312: PUSH
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 254
15322: ADD
15323: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15324: LD_EXP 47
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 257
15338: PUSH
15339: LD_INT 3
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 255
15353: PUSH
15354: LD_INT 3
15356: EQUAL
15357: AND
15358: PUSH
15359: LD_INT 21
15361: PPUSH
15362: CALL_OW 302
15366: AND
15367: PUSH
15368: LD_INT 21
15370: PPUSH
15371: CALL_OW 255
15375: PUSH
15376: LD_INT 3
15378: EQUAL
15379: AND
15380: IFFALSE 15462
// begin ruMechCounter := ruMechCounter - 1 ;
15382: LD_ADDR_EXP 47
15386: PUSH
15387: LD_EXP 47
15391: PUSH
15392: LD_INT 1
15394: MINUS
15395: ST_TO_ADDR
// uc_side := 3 ;
15396: LD_ADDR_OWVAR 20
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// uc_nation := 3 ;
15404: LD_ADDR_OWVAR 21
15408: PUSH
15409: LD_INT 3
15411: ST_TO_ADDR
// hc_gallery :=  ;
15412: LD_ADDR_OWVAR 33
15416: PUSH
15417: LD_STRING 
15419: ST_TO_ADDR
// hc_name :=  ;
15420: LD_ADDR_OWVAR 26
15424: PUSH
15425: LD_STRING 
15427: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15428: LD_INT 0
15430: PPUSH
15431: LD_EXP 35
15435: PPUSH
15436: LD_EXP 36
15440: PPUSH
15441: CALL_OW 12
15445: PPUSH
15446: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15450: CALL_OW 44
15454: PPUSH
15455: LD_INT 21
15457: PPUSH
15458: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 255
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_INT 52
15488: EQUAL
15489: AND
15490: PUSH
15491: LD_INT 21
15493: PPUSH
15494: CALL_OW 302
15498: AND
15499: PUSH
15500: LD_INT 21
15502: PPUSH
15503: CALL_OW 255
15507: PUSH
15508: LD_INT 3
15510: EQUAL
15511: AND
15512: IFFALSE 15533
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15514: LD_INT 21
15516: PPUSH
15517: LD_INT 22
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: LD_INT 52
15528: PPUSH
15529: CALL_OW 125
// end ;
15533: PPOPN 1
15535: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15536: LD_INT 0
15538: PPUSH
15539: PPUSH
15540: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_VAR 0 2
15550: PPUSH
15551: CALL 37459 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL_OW 255
15564: PUSH
15565: LD_INT 3
15567: EQUAL
15568: PUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 264
15578: PUSH
15579: LD_INT 51
15581: PUSH
15582: LD_INT 52
15584: PUSH
15585: LD_INT 53
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: IN
15593: NOT
15594: AND
15595: IFFALSE 15626
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15597: LD_ADDR_EXP 48
15601: PUSH
15602: LD_EXP 48
15606: PPUSH
15607: LD_EXP 48
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: PPUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 264
15635: PUSH
15636: LD_INT 53
15638: EQUAL
15639: IFFALSE 15794
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 60
15648: PPUSH
15649: LD_INT 85
15651: PPUSH
15652: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: LD_INT 43
15663: PPUSH
15664: LD_INT 69
15666: PPUSH
15667: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_INT 37
15678: PPUSH
15679: LD_INT 46
15681: PPUSH
15682: CALL_OW 171
// wait ( 0 0$1 ) ;
15686: LD_INT 35
15688: PPUSH
15689: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15693: LD_INT 35
15695: PPUSH
15696: CALL_OW 67
// until not HasTask ( vehicle ) ;
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 314
15709: NOT
15710: IFFALSE 15693
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15712: LD_VAR 0 1
15716: PPUSH
15717: LD_INT 34
15719: PPUSH
15720: CALL 10286 0 2
// repeat wait ( 0 0$1 ) ;
15724: LD_INT 35
15726: PPUSH
15727: CALL_OW 67
// until not HasTask ( vehicle ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 314
15740: NOT
15741: IFFALSE 15724
// un := IsDrivenBy ( vehicle ) ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 311
15757: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15758: LD_VAR 0 4
15762: PPUSH
15763: LD_INT 96
15765: PPUSH
15766: LD_INT 77
15768: PPUSH
15769: CALL_OW 171
// AddComExitVehicle ( un ) ;
15773: LD_VAR 0 4
15777: PPUSH
15778: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_INT 17
15789: PPUSH
15790: CALL_OW 180
// end ; end ;
15794: PPOPN 5
15796: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 255
15806: PUSH
15807: LD_INT 3
15809: EQUAL
15810: IFFALSE 15841
// begin tamedApemans = tamedApemans + 1 ;
15812: LD_ADDR_EXP 33
15816: PUSH
15817: LD_EXP 33
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: LD_INT 106
15833: PPUSH
15834: LD_INT 85
15836: PPUSH
15837: CALL_OW 111
// end ; end ;
15841: PPOPN 2
15843: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: PUSH
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 255
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: AND
15872: PUSH
15873: LD_INT 21
15875: PPUSH
15876: CALL_OW 302
15880: AND
15881: IFFALSE 15895
// ComEnterUnit ( human , rufab ) ;
15883: LD_VAR 0 1
15887: PPUSH
15888: LD_INT 21
15890: PPUSH
15891: CALL_OW 120
// end ;
15895: PPOPN 4
15897: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15898: LD_VAR 0 1
15902: PUSH
15903: LD_INT 21
15905: EQUAL
15906: PUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: CALL_OW 255
15916: PUSH
15917: LD_INT 3
15919: EQUAL
15920: AND
15921: IFFALSE 15935
// SetLives ( human , 1000 ) ;
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 1000
15930: PPUSH
15931: CALL_OW 234
// end ;
15935: PPOPN 2
15937: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL 37443 0 1
// end ; end_of_file
15947: PPOPN 1
15949: END
// every 0 0$30 trigger cratesStatus = 1 do
15950: LD_EXP 39
15954: PUSH
15955: LD_INT 1
15957: EQUAL
15958: IFFALSE 16011
15960: GO 15962
15962: DISABLE
// begin enable ;
15963: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15964: LD_INT 350
15966: PUSH
15967: LD_INT 875
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PPUSH
15977: LD_INT 2
15979: PPUSH
15980: CALL_OW 12
15984: ARRAY
15985: PPUSH
15986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15990: LD_INT 1
15992: PPUSH
15993: LD_INT 5
15995: PPUSH
15996: CALL_OW 12
16000: PPUSH
16001: LD_INT 7
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 55
// end ;
16011: END
// every 1 1$0 trigger cratesStatus = 2 do
16012: LD_EXP 39
16016: PUSH
16017: LD_INT 2
16019: EQUAL
16020: IFFALSE 16103
16022: GO 16024
16024: DISABLE
// begin enable ;
16025: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16026: LD_INT 3150
16028: PUSH
16029: LD_INT 4550
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_INT 2
16041: PPUSH
16042: CALL_OW 12
16046: ARRAY
16047: PPUSH
16048: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16052: LD_INT 2
16054: PUSH
16055: LD_INT 5
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: PPUSH
16065: LD_INT 2
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: PPUSH
16074: LD_INT 6
16076: PUSH
16077: LD_INT 7
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: CALL_OW 12
16094: ARRAY
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 55
// end ;
16103: END
// every 0 0$30 + 0 0$10 do
16104: GO 16106
16106: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16107: LD_INT 4
16109: PUSH
16110: LD_INT 5
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: PPUSH
16129: LD_INT 7
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 55
// Wait ( 0 0$15 ) ;
16139: LD_INT 525
16141: PPUSH
16142: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16146: LD_INT 4
16148: PUSH
16149: LD_INT 5
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 2
16161: PPUSH
16162: CALL_OW 12
16166: ARRAY
16167: PPUSH
16168: LD_INT 7
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 55
// Wait ( 0 0$20 ) ;
16178: LD_INT 700
16180: PPUSH
16181: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16185: LD_INT 4
16187: PUSH
16188: LD_INT 5
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 12
16205: ARRAY
16206: PPUSH
16207: LD_INT 7
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 55
// end ; end_of_file
16217: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16218: LD_EXP 25
16222: PUSH
16223: LD_INT 1
16225: EQUAL
16226: IFFALSE 16519
16228: GO 16230
16230: DISABLE
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
16235: PPUSH
// begin enable ;
16236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 21
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 30
16267: PUSH
16268: LD_INT 0
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// for i in tmp do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_VAR 0 2
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16344
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_VAR 0 3
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 274
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 275
16340: PLUS
16341: ST_TO_ADDR
16342: GO 16310
16344: POP
16345: POP
// strings = [ ] ;
16346: LD_ADDR_EXP 28
16350: PUSH
16351: EMPTY
16352: ST_TO_ADDR
// if tmp = 0 then
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 0
16360: EQUAL
16361: IFFALSE 16386
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16363: LD_ADDR_EXP 28
16367: PUSH
16368: LD_EXP 28
16372: PUSH
16373: LD_STRING #Am06-1
16375: PUSH
16376: LD_EXP 26
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: ADD
16385: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16386: LD_VAR 0 2
16390: PUSH
16391: LD_EXP 26
16395: PUSH
16396: LD_VAR 0 3
16400: GREATER
16401: AND
16402: IFFALSE 16433
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16404: LD_ADDR_EXP 28
16408: PUSH
16409: LD_EXP 28
16413: PUSH
16414: LD_STRING #Am06-1
16416: PUSH
16417: LD_EXP 26
16421: PUSH
16422: LD_VAR 0 3
16426: MINUS
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: ADD
16432: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16433: LD_VAR 0 2
16437: PUSH
16438: LD_EXP 26
16442: PUSH
16443: LD_VAR 0 3
16447: LESSEQUAL
16448: AND
16449: IFFALSE 16472
// strings = strings ^ [ #Am06-1 , 0 ] ;
16451: LD_ADDR_EXP 28
16455: PUSH
16456: LD_EXP 28
16460: PUSH
16461: LD_STRING #Am06-1
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: ADD
16471: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16472: LD_ADDR_EXP 27
16476: PUSH
16477: LD_EXP 27
16481: PUSH
16482: LD_INT 35
16484: MINUS
16485: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16486: LD_ADDR_EXP 28
16490: PUSH
16491: LD_EXP 28
16495: PUSH
16496: LD_STRING #Am06-2
16498: PUSH
16499: LD_EXP 27
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: ADD
16508: ST_TO_ADDR
// display_strings = strings ;
16509: LD_ADDR_OWVAR 47
16513: PUSH
16514: LD_EXP 28
16518: ST_TO_ADDR
// end ; end_of_file
16519: PPOPN 3
16521: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 30
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PPUSH
16579: CALL_OW 69
16583: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16584: LD_INT 35
16586: PPUSH
16587: CALL_OW 67
// until depot ;
16591: LD_VAR 0 3
16595: IFFALSE 16532
// forceJMM := false ;
16597: LD_ADDR_VAR 0 8
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16605: LD_INT 35
16607: PPUSH
16608: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_INT 22
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 91
16629: PUSH
16630: LD_VAR 0 3
16634: PUSH
16635: LD_INT 1
16637: ARRAY
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 25
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 25
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 54
16712: PUSH
16713: EMPTY
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 55
16725: PUSH
16726: EMPTY
16727: LIST
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: PUSH
16746: LD_EXP 2
16750: PUSH
16751: LD_EXP 3
16755: PUSH
16756: LD_EXP 4
16760: PUSH
16761: LD_EXP 5
16765: PUSH
16766: LD_EXP 7
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_EXP 9
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: DIFF
16790: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
16791: LD_EXP 27
16795: PUSH
16796: LD_INT 21000
16798: LESS
16799: IFFALSE 16811
// begin forceJMM := true ;
16801: LD_ADDR_VAR 0 8
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// break ;
16809: GO 16827
// end ; until tmp and not InBattle ( 1 ) ;
16811: LD_VAR 0 4
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 463
16823: NOT
16824: AND
16825: IFFALSE 16605
// if not forceJMM then
16827: LD_VAR 0 8
16831: NOT
16832: IFFALSE 16860
// tmp := tmp [ rand ( 1 , tmp ) ] else
16834: LD_ADDR_VAR 0 4
16838: PUSH
16839: LD_VAR 0 4
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 4
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: ST_TO_ADDR
16858: GO 16870
// tmp := JMM ;
16860: LD_ADDR_VAR 0 4
16864: PUSH
16865: LD_EXP 1
16869: ST_TO_ADDR
// blockSpawn := 1 ;
16870: LD_ADDR_EXP 30
16874: PUSH
16875: LD_INT 1
16877: ST_TO_ADDR
// uc_side := 2 ;
16878: LD_ADDR_OWVAR 20
16882: PUSH
16883: LD_INT 2
16885: ST_TO_ADDR
// uc_nation := 2 ;
16886: LD_ADDR_OWVAR 21
16890: PUSH
16891: LD_INT 2
16893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16894: LD_ADDR_EXP 20
16898: PUSH
16899: LD_STRING Kurt
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: LD_STRING 
16907: PPUSH
16908: CALL 42067 0 3
16912: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16913: LD_EXP 20
16917: PPUSH
16918: LD_VAR 0 4
16922: PPUSH
16923: CALL_OW 250
16927: PPUSH
16928: LD_VAR 0 4
16932: PPUSH
16933: CALL_OW 251
16937: PPUSH
16938: LD_INT 5
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 50
// InGameOn ;
16948: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16952: LD_EXP 20
16956: PPUSH
16957: CALL_OW 87
// wait ( 0 0$2 ) ;
16961: LD_INT 70
16963: PPUSH
16964: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16968: LD_EXP 20
16972: PPUSH
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_EXP 20
16991: PPUSH
16992: CALL_OW 112
// wait ( 0 0$1 ) ;
16996: LD_INT 35
16998: PPUSH
16999: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17003: LD_VAR 0 4
17007: PPUSH
17008: LD_EXP 20
17012: PPUSH
17013: CALL_OW 119
// DialogueOn ;
17017: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17021: LD_EXP 20
17025: PPUSH
17026: LD_STRING D2-Kurt-1
17028: PPUSH
17029: CALL_OW 88
// if tmp = JMM then
17033: LD_VAR 0 4
17037: PUSH
17038: LD_EXP 1
17042: EQUAL
17043: IFFALSE 17135
// begin Say ( JMM , D2-JMM-1 ) ;
17045: LD_EXP 1
17049: PPUSH
17050: LD_STRING D2-JMM-1
17052: PPUSH
17053: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17057: LD_EXP 20
17061: PPUSH
17062: LD_STRING D2-Kurt-2
17064: PPUSH
17065: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17069: LD_EXP 1
17073: PPUSH
17074: LD_STRING D2-JMM-2
17076: PPUSH
17077: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17081: LD_EXP 20
17085: PPUSH
17086: LD_STRING D2-Kurt-3
17088: PPUSH
17089: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17093: LD_EXP 1
17097: PPUSH
17098: LD_STRING D2-JMM-3
17100: PPUSH
17101: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17105: LD_EXP 20
17109: PPUSH
17110: LD_STRING D2-Kurt-4
17112: PPUSH
17113: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17117: LD_EXP 1
17121: PPUSH
17122: LD_STRING D2-JMM-4
17124: PPUSH
17125: CALL_OW 88
// DialogueOff ;
17129: CALL_OW 7
// end else
17133: GO 17363
// begin if GetSex ( tmp ) = 1 then
17135: LD_VAR 0 4
17139: PPUSH
17140: CALL_OW 258
17144: PUSH
17145: LD_INT 1
17147: EQUAL
17148: IFFALSE 17164
// Say ( tmp , D2-Sol1-1 ) else
17150: LD_VAR 0 4
17154: PPUSH
17155: LD_STRING D2-Sol1-1
17157: PPUSH
17158: CALL_OW 88
17162: GO 17176
// Say ( tmp , D2-FSol1-1 ) ;
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_STRING D2-FSol1-1
17171: PPUSH
17172: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17176: LD_EXP 20
17180: PPUSH
17181: LD_STRING D2-Kurt-2
17183: PPUSH
17184: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17188: LD_VAR 0 4
17192: PPUSH
17193: CALL_OW 258
17197: PUSH
17198: LD_INT 1
17200: EQUAL
17201: IFFALSE 17217
// Say ( tmp , D2-Sol1-2 ) else
17203: LD_VAR 0 4
17207: PPUSH
17208: LD_STRING D2-Sol1-2
17210: PPUSH
17211: CALL_OW 88
17215: GO 17229
// Say ( tmp , D2-FSol1-2 ) ;
17217: LD_VAR 0 4
17221: PPUSH
17222: LD_STRING D2-FSol1-2
17224: PPUSH
17225: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17229: LD_EXP 20
17233: PPUSH
17234: LD_STRING D2-Kurt-3
17236: PPUSH
17237: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17241: LD_VAR 0 4
17245: PPUSH
17246: CALL_OW 258
17250: PUSH
17251: LD_INT 1
17253: EQUAL
17254: IFFALSE 17270
// Say ( tmp , D2-Sol1-3 ) else
17256: LD_VAR 0 4
17260: PPUSH
17261: LD_STRING D2-Sol1-3
17263: PPUSH
17264: CALL_OW 88
17268: GO 17282
// Say ( tmp , D2-FSol1-3 ) ;
17270: LD_VAR 0 4
17274: PPUSH
17275: LD_STRING D2-FSol1-3
17277: PPUSH
17278: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17282: LD_EXP 20
17286: PPUSH
17287: LD_STRING D2-Kurt-4
17289: PPUSH
17290: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 258
17303: PUSH
17304: LD_INT 1
17306: EQUAL
17307: IFFALSE 17335
// begin Say ( tmp , D2-Sol1-4 ) ;
17309: LD_VAR 0 4
17313: PPUSH
17314: LD_STRING D2-Sol1-4
17316: PPUSH
17317: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17321: LD_VAR 0 4
17325: PPUSH
17326: LD_STRING D2-Sol1-5
17328: PPUSH
17329: CALL_OW 88
// end else
17333: GO 17359
// begin Say ( tmp , D2-FSol1-4 ) ;
17335: LD_VAR 0 4
17339: PPUSH
17340: LD_STRING D2-FSol1-4
17342: PPUSH
17343: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_STRING D2-FSol1-5
17354: PPUSH
17355: CALL_OW 88
// end ; DialogueOff ;
17359: CALL_OW 7
// end ; dec := ShowQuery1 ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: CALL 7676 0 0
17372: ST_TO_ADDR
// if dec = 1 then
17373: LD_VAR 0 6
17377: PUSH
17378: LD_INT 1
17380: EQUAL
17381: IFFALSE 17443
// begin DialogueOn ;
17383: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17387: LD_EXP 20
17391: PPUSH
17392: LD_STRING D2a-Kurt-1
17394: PPUSH
17395: CALL_OW 88
// DialogueOff ;
17399: CALL_OW 7
// InGameOff ;
17403: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 2
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17423: LD_EXP 20
17427: PPUSH
17428: LD_INT 8
17430: PPUSH
17431: CALL_OW 113
// readyToEscape := 1 ;
17435: LD_ADDR_EXP 22
17439: PUSH
17440: LD_INT 1
17442: ST_TO_ADDR
// end ; if dec = 2 then
17443: LD_VAR 0 6
17447: PUSH
17448: LD_INT 2
17450: EQUAL
17451: IFFALSE 17919
// begin DialogueOn ;
17453: CALL_OW 6
// if tmp = JMM then
17457: LD_VAR 0 4
17461: PUSH
17462: LD_EXP 1
17466: EQUAL
17467: IFFALSE 17523
// begin Say ( JMM , D2b-JMM-1 ) ;
17469: LD_EXP 1
17473: PPUSH
17474: LD_STRING D2b-JMM-1
17476: PPUSH
17477: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17481: LD_EXP 20
17485: PPUSH
17486: LD_STRING D2b-Kurt-1
17488: PPUSH
17489: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17493: LD_EXP 1
17497: PPUSH
17498: LD_STRING D2b-JMM-2
17500: PPUSH
17501: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17505: LD_EXP 20
17509: PPUSH
17510: LD_STRING D2b-Kurt-2
17512: PPUSH
17513: CALL_OW 88
// DialogueOff ;
17517: CALL_OW 7
// end else
17521: GO 17674
// begin if GetSex ( tmp ) = 1 then
17523: LD_VAR 0 4
17527: PPUSH
17528: CALL_OW 258
17532: PUSH
17533: LD_INT 1
17535: EQUAL
17536: IFFALSE 17552
// Say ( tmp , D2b-Sol1-1 ) else
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_STRING D2b-Sol1-1
17545: PPUSH
17546: CALL_OW 88
17550: GO 17564
// Say ( tmp , D2b-FSol1-1 ) ;
17552: LD_VAR 0 4
17556: PPUSH
17557: LD_STRING D2b-FSol1-1
17559: PPUSH
17560: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17564: LD_EXP 20
17568: PPUSH
17569: LD_STRING D2b-Kurt-1
17571: PPUSH
17572: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17576: LD_VAR 0 4
17580: PPUSH
17581: CALL_OW 258
17585: PUSH
17586: LD_INT 1
17588: EQUAL
17589: IFFALSE 17605
// Say ( tmp , D2b-Sol1-2 ) else
17591: LD_VAR 0 4
17595: PPUSH
17596: LD_STRING D2b-Sol1-2
17598: PPUSH
17599: CALL_OW 88
17603: GO 17617
// Say ( tmp , D2b-FSol1-2 ) ;
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_STRING D2b-FSol1-2
17612: PPUSH
17613: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17617: LD_EXP 20
17621: PPUSH
17622: LD_STRING D2b-Kurt-2
17624: PPUSH
17625: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17629: LD_VAR 0 4
17633: PPUSH
17634: CALL_OW 258
17638: PUSH
17639: LD_INT 1
17641: EQUAL
17642: IFFALSE 17658
// Say ( tmp , D2c-Sol1-2 ) else
17644: LD_VAR 0 4
17648: PPUSH
17649: LD_STRING D2c-Sol1-2
17651: PPUSH
17652: CALL_OW 88
17656: GO 17670
// Say ( tmp , D2c-FSol1-2 ) ;
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_STRING D2c-FSol1-2
17665: PPUSH
17666: CALL_OW 88
// DialogueOff ;
17670: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17674: LD_ADDR_VAR 0 7
17678: PUSH
17679: CALL 7697 0 0
17683: ST_TO_ADDR
// if dec2 = 1 then
17684: LD_VAR 0 7
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17754
// begin DialogueOn ;
17694: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17698: LD_EXP 20
17702: PPUSH
17703: LD_STRING D2a-Kurt-1
17705: PPUSH
17706: CALL_OW 88
// DialogueOff ;
17710: CALL_OW 7
// InGameOff ;
17714: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 2
17723: PPUSH
17724: LD_INT 2
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_INT 8
17741: PPUSH
17742: CALL_OW 113
// readyToEscape := 1 ;
17746: LD_ADDR_EXP 22
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// end ; if dec2 = 2 then
17754: LD_VAR 0 7
17758: PUSH
17759: LD_INT 2
17761: EQUAL
17762: IFFALSE 17919
// begin if tmp = JMM then
17764: LD_VAR 0 4
17768: PUSH
17769: LD_EXP 1
17773: EQUAL
17774: IFFALSE 17834
// begin DialogueOn ;
17776: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17780: LD_EXP 1
17784: PPUSH
17785: LD_STRING D2c-JMM-1
17787: PPUSH
17788: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17792: LD_EXP 20
17796: PPUSH
17797: LD_STRING D2c-Kurt-1
17799: PPUSH
17800: CALL_OW 88
// DialogueOff ;
17804: CALL_OW 7
// InGameOff ;
17808: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17812: LD_EXP 20
17816: PPUSH
17817: LD_INT 8
17819: PPUSH
17820: CALL_OW 113
// readyToEscape := 1 ;
17824: LD_ADDR_EXP 22
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// end else
17832: GO 17919
// begin DialogueOn ;
17834: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17838: LD_VAR 0 4
17842: PPUSH
17843: CALL_OW 258
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17867
// Say ( tmp , D2c-Sol1-1 ) else
17853: LD_VAR 0 4
17857: PPUSH
17858: LD_STRING D2c-Sol1-1
17860: PPUSH
17861: CALL_OW 88
17865: GO 17879
// Say ( tmp , D2c-FSol1-1 ) ;
17867: LD_VAR 0 4
17871: PPUSH
17872: LD_STRING D2c-FSol1-1
17874: PPUSH
17875: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17879: LD_EXP 20
17883: PPUSH
17884: LD_STRING D2c-Kurt-1
17886: PPUSH
17887: CALL_OW 88
// DialogueOff ;
17891: CALL_OW 7
// InGameOff ;
17895: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17899: LD_EXP 20
17903: PPUSH
17904: LD_INT 8
17906: PPUSH
17907: CALL_OW 113
// readyToEscape := 1 ;
17911: LD_ADDR_EXP 22
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 3
17926: EQUAL
17927: IFFALSE 18088
// begin DialogueOn ;
17929: CALL_OW 6
// if tmp = JMM then
17933: LD_VAR 0 4
17937: PUSH
17938: LD_EXP 1
17942: EQUAL
17943: IFFALSE 18003
// begin DialogueOn ;
17945: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17949: LD_EXP 1
17953: PPUSH
17954: LD_STRING D2c-JMM-1
17956: PPUSH
17957: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17961: LD_EXP 20
17965: PPUSH
17966: LD_STRING D2c-Kurt-1
17968: PPUSH
17969: CALL_OW 88
// DialogueOff ;
17973: CALL_OW 7
// InGameOff ;
17977: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17981: LD_EXP 20
17985: PPUSH
17986: LD_INT 8
17988: PPUSH
17989: CALL_OW 113
// readyToEscape := 1 ;
17993: LD_ADDR_EXP 22
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// end else
18001: GO 18088
// begin DialogueOn ;
18003: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18007: LD_VAR 0 4
18011: PPUSH
18012: CALL_OW 258
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18036
// Say ( tmp , D2c-Sol1-1 ) else
18022: LD_VAR 0 4
18026: PPUSH
18027: LD_STRING D2c-Sol1-1
18029: PPUSH
18030: CALL_OW 88
18034: GO 18048
// Say ( tmp , D2c-FSol1-1 ) ;
18036: LD_VAR 0 4
18040: PPUSH
18041: LD_STRING D2c-FSol1-1
18043: PPUSH
18044: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18048: LD_EXP 20
18052: PPUSH
18053: LD_STRING D2c-Kurt-1
18055: PPUSH
18056: CALL_OW 88
// DialogueOff ;
18060: CALL_OW 7
// InGameOff ;
18064: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18068: LD_EXP 20
18072: PPUSH
18073: LD_INT 8
18075: PPUSH
18076: CALL_OW 113
// readyToEscape := 1 ;
18080: LD_ADDR_EXP 22
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18088: LD_ADDR_EXP 30
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18096: LD_INT 35
18098: PPUSH
18099: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18103: LD_EXP 20
18107: PPUSH
18108: LD_INT 8
18110: PPUSH
18111: CALL_OW 308
18115: PUSH
18116: LD_EXP 22
18120: AND
18121: PUSH
18122: LD_EXP 20
18126: PPUSH
18127: CALL_OW 301
18131: OR
18132: IFFALSE 18096
// if IsDead ( Kurt ) then
18134: LD_EXP 20
18138: PPUSH
18139: CALL_OW 301
18143: IFFALSE 18147
// exit ;
18145: GO 18202
// RemoveUnit ( Kurt ) ;
18147: LD_EXP 20
18151: PPUSH
18152: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18156: LD_EXP 20
18160: PPUSH
18161: LD_STRING Kurt
18163: PPUSH
18164: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18168: LD_INT 1
18170: PPUSH
18171: LD_INT 2
18173: PPUSH
18174: CALL_OW 81
18178: PUSH
18179: LD_INT 0
18181: EQUAL
18182: IFFALSE 18194
// kurtStatus = 1 else
18184: LD_ADDR_EXP 21
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
18192: GO 18202
// kurtStatus = 2 ;
18194: LD_ADDR_EXP 21
18198: PUSH
18199: LD_INT 2
18201: ST_TO_ADDR
// end ; end_of_file
18202: LD_VAR 0 1
18206: RET
// every 0 0$2 do
18207: GO 18209
18209: DISABLE
// begin enable ;
18210: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18211: LD_INT 3
18213: PPUSH
18214: LD_INT 2
18216: PPUSH
18217: LD_INT 10
18219: PPUSH
18220: LD_EXP 32
18224: PPUSH
18225: CALL 8128 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18229: LD_INT 3
18231: PPUSH
18232: LD_INT 12
18234: PPUSH
18235: LD_EXP 32
18239: PPUSH
18240: CALL 9731 0 3
// if disableHealAI = 0 then
18244: LD_EXP 34
18248: PUSH
18249: LD_INT 0
18251: EQUAL
18252: IFFALSE 18273
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18254: LD_INT 3
18256: PPUSH
18257: LD_INT 9
18259: PPUSH
18260: LD_INT 10
18262: PPUSH
18263: LD_INT 32
18265: PUSH
18266: EMPTY
18267: LIST
18268: PPUSH
18269: CALL 8495 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 51
18278: PPUSH
18279: LD_INT 6
18281: PPUSH
18282: CALL 9184 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 303
18293: PUSH
18294: LD_INT 2
18296: PPUSH
18297: CALL_OW 255
18301: PUSH
18302: LD_INT 1
18304: EQUAL
18305: OR
18306: IFFALSE 18320
// DefendDepot ( 3 , rudepo ) else
18308: LD_INT 3
18310: PPUSH
18311: LD_INT 2
18313: PPUSH
18314: CALL 9011 0 2
18318: GO 18330
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18320: LD_INT 3
18322: PPUSH
18323: LD_INT 10
18325: PPUSH
18326: CALL 9302 0 2
// end ;
18330: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18331: LD_INT 22
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 55
18353: PUSH
18354: EMPTY
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: LD_INT 34
18362: PUSH
18363: LD_INT 51
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: PUSH
18385: LD_INT 0
18387: EQUAL
18388: PUSH
18389: LD_INT 21
18391: PPUSH
18392: CALL_OW 255
18396: PUSH
18397: LD_INT 3
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 2
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: PUSH
18424: LD_INT 2
18426: PPUSH
18427: CALL_OW 302
18431: AND
18432: PUSH
18433: LD_INT 21
18435: PPUSH
18436: CALL_OW 313
18440: AND
18441: PUSH
18442: LD_EXP 48
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: LD_INT 5
18452: PUSH
18453: LD_INT 6
18455: PUSH
18456: LD_INT 6
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: LD_OWVAR 67
18469: ARRAY
18470: LESS
18471: AND
18472: IFFALSE 18693
18474: GO 18476
18476: DISABLE
// begin enable ;
18477: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18478: LD_INT 2
18480: PPUSH
18481: CALL_OW 274
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 2000
18491: PPUSH
18492: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18496: LD_INT 3
18498: PPUSH
18499: LD_INT 21
18501: PPUSH
18502: LD_INT 4
18504: PUSH
18505: LD_INT 5
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: LD_INT 6
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_OWVAR 67
18524: ARRAY
18525: PUSH
18526: LD_EXP 48
18530: MINUS
18531: PPUSH
18532: LD_INT 43
18534: PUSH
18535: LD_INT 43
18537: PUSH
18538: LD_INT 44
18540: PUSH
18541: LD_INT 44
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 43
18552: PUSH
18553: LD_INT 43
18555: PUSH
18556: LD_INT 43
18558: PUSH
18559: LD_INT 44
18561: PUSH
18562: LD_INT 44
18564: PUSH
18565: LD_INT 46
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 43
18578: PUSH
18579: LD_INT 43
18581: PUSH
18582: LD_INT 43
18584: PUSH
18585: LD_INT 44
18587: PUSH
18588: LD_INT 44
18590: PUSH
18591: LD_INT 46
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 43
18604: PUSH
18605: LD_INT 43
18607: PUSH
18608: LD_INT 44
18610: PUSH
18611: LD_INT 46
18613: PUSH
18614: LD_INT 46
18616: PUSH
18617: LD_INT 46
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_OWVAR 67
18638: ARRAY
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: LD_INT 22
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 24
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_INT 2
18664: PPUSH
18665: CALL_OW 12
18669: ARRAY
18670: PUSH
18671: LD_INT 24
18673: PUSH
18674: LD_INT 24
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: LD_OWVAR 67
18687: ARRAY
18688: PPUSH
18689: CALL 7974 0 7
// end ;
18693: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18694: LD_INT 17
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 3
18704: EQUAL
18705: PUSH
18706: LD_INT 17
18708: PPUSH
18709: CALL_OW 302
18713: AND
18714: PUSH
18715: LD_INT 2
18717: PPUSH
18718: CALL_OW 255
18722: PUSH
18723: LD_INT 3
18725: EQUAL
18726: AND
18727: PUSH
18728: LD_INT 2
18730: PPUSH
18731: CALL_OW 302
18735: AND
18736: PUSH
18737: LD_EXP 48
18741: PUSH
18742: LD_INT 4
18744: PUSH
18745: LD_INT 5
18747: PUSH
18748: LD_INT 6
18750: PUSH
18751: LD_INT 7
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: LD_OWVAR 67
18764: ARRAY
18765: LESS
18766: AND
18767: IFFALSE 18815
18769: GO 18771
18771: DISABLE
// begin enable ;
18772: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18773: LD_INT 17
18775: PPUSH
18776: LD_INT 22
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 42
18787: PUSH
18788: LD_INT 43
18790: PUSH
18791: LD_INT 44
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 3
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: PPUSH
18811: CALL_OW 185
// end ;
18815: END
// every 2 2$0 do var i , j ;
18816: GO 18818
18818: DISABLE
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18823: LD_INT 14700
18825: PUSH
18826: LD_INT 33600
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: PPUSH
18845: CALL_OW 67
// disableHealAI = 1 ;
18849: LD_ADDR_EXP 34
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18857: LD_ADDR_VAR 0 1
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 3
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 25
18874: PUSH
18875: LD_INT 4
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18905
// ComExitBuilding ( i ) ;
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 122
18903: GO 18891
18905: POP
18906: POP
// wait ( 0 0$1 ) ;
18907: LD_INT 35
18909: PPUSH
18910: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 25
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: PUSH
18955: FOR_IN
18956: IFFALSE 19033
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18958: LD_ADDR_VAR 0 2
18962: PUSH
18963: LD_INT 17
18965: PPUSH
18966: LD_INT 22
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 12
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 70
18994: PUSH
18995: FOR_IN
18996: IFFALSE 19029
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_VAR 0 2
19007: PPUSH
19008: CALL_OW 250
19012: PPUSH
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 251
19022: PPUSH
19023: CALL_OW 191
19027: GO 18995
19029: POP
19030: POP
19031: GO 18955
19033: POP
19034: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19035: LD_INT 22
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 4
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: LD_INT 0
19066: EQUAL
19067: PUSH
19068: LD_EXP 33
19072: PUSH
19073: LD_INT 6
19075: PUSH
19076: LD_INT 7
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: LD_INT 8
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_OWVAR 67
19095: ARRAY
19096: GREATEREQUAL
19097: OR
19098: PUSH
19099: LD_INT 17
19101: PPUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 25
19114: PUSH
19115: LD_INT 12
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PPUSH
19126: CALL_OW 70
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 18914
// disableHealAI = 0 ;
19137: LD_ADDR_EXP 34
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 25
19162: PUSH
19163: LD_INT 12
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19196
// SetClass ( i , 16 ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_INT 16
19189: PPUSH
19190: CALL_OW 336
19194: GO 19179
19196: POP
19197: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19198: LD_ADDR_VAR 0 1
19202: PUSH
19203: LD_INT 22
19205: PUSH
19206: LD_INT 3
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 25
19215: PUSH
19216: LD_INT 4
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PPUSH
19227: CALL_OW 69
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19249
// ComEnterUnit ( i , rulab ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 32
19242: PPUSH
19243: CALL_OW 120
19247: GO 19232
19249: POP
19250: POP
// end ; end_of_file
19251: PPOPN 2
19253: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19254: LD_EXP 27
19258: PUSH
19259: LD_INT 0
19261: LESSEQUAL
19262: IFFALSE 19416
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 21
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 30
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 69
19334: ST_TO_ADDR
// for i in tmp do
19335: LD_ADDR_VAR 0 1
19339: PUSH
19340: LD_VAR 0 2
19344: PUSH
19345: FOR_IN
19346: IFFALSE 19379
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19348: LD_ADDR_VAR 0 3
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 274
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 275
19375: PLUS
19376: ST_TO_ADDR
19377: GO 19345
19379: POP
19380: POP
// if yourCrates >= needCrates then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_EXP 26
19390: GREATEREQUAL
19391: IFFALSE 19409
// FinishMission ( yourCrates , needCrates ) else
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_EXP 26
19402: PPUSH
19403: CALL 19419 0 2
19407: GO 19416
// YouLost ( matmin ) ;
19409: LD_STRING matmin
19411: PPUSH
19412: CALL_OW 104
// end ;
19416: PPOPN 3
19418: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
// if killCounter = 0 then
19425: LD_EXP 46
19429: PUSH
19430: LD_INT 0
19432: EQUAL
19433: IFFALSE 19442
// SetAchievement ( ACH_SURV ) ;
19435: LD_STRING ACH_SURV
19437: PPUSH
19438: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19442: LD_INT 22
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 21
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 69
19470: PUSH
19471: LD_INT 0
19473: EQUAL
19474: IFFALSE 19490
// begin wait ( 3 ) ;
19476: LD_INT 3
19478: PPUSH
19479: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19483: LD_STRING ACH_BASEDESTROYER
19485: PPUSH
19486: CALL_OW 543
// end ; m1 := false ;
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// m2 := false ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// m3 := false ;
19506: LD_ADDR_VAR 0 6
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 100
19521: PUSH
19522: LD_INT 140
19524: PUSH
19525: LD_INT 180
19527: PUSH
19528: LD_INT 220
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_OWVAR 67
19541: ARRAY
19542: PLUS
19543: PUSH
19544: LD_VAR 0 2
19548: GREATER
19549: IFFALSE 19581
// begin AddMedal ( cans , 1 ) ;
19551: LD_STRING cans
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19561: LD_INT 1
19563: PPUSH
19564: LD_STRING 06_crates_1
19566: PPUSH
19567: CALL_OW 39
// m1 := true ;
19571: LD_ADDR_VAR 0 4
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// end else
19579: GO 19602
// begin AddMedal ( cans , - 1 ) ;
19581: LD_STRING cans
19583: PPUSH
19584: LD_INT 1
19586: NEG
19587: PPUSH
19588: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19592: LD_INT 0
19594: PPUSH
19595: LD_STRING 06_crates_1
19597: PPUSH
19598: CALL_OW 39
// end ; if unitLost < 3 then
19602: LD_EXP 31
19606: PUSH
19607: LD_INT 3
19609: LESS
19610: IFFALSE 19632
// begin AddMedal ( people , 1 ) ;
19612: LD_STRING people
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 101
// m2 := true ;
19622: LD_ADDR_VAR 0 5
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// end else
19630: GO 19643
// AddMedal ( people , - 1 ) ;
19632: LD_STRING people
19634: PPUSH
19635: LD_INT 1
19637: NEG
19638: PPUSH
19639: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19643: LD_EXP 29
19647: PPUSH
19648: LD_STRING 06_remoteVehs_1
19650: PPUSH
19651: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19655: LD_EXP 29
19659: PUSH
19660: LD_INT 1
19662: EQUAL
19663: IFFALSE 19685
// begin AddMedal ( remote , 1 ) ;
19665: LD_STRING remote
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 101
// m3 := true ;
19675: LD_ADDR_VAR 0 6
19679: PUSH
19680: LD_INT 1
19682: ST_TO_ADDR
// end else
19683: GO 19725
// begin if GetTech ( 18 , 1 ) = state_enabled then
19685: LD_INT 18
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 321
19695: PUSH
19696: LD_INT 1
19698: EQUAL
19699: IFFALSE 19714
// AddMedal ( remote , - 1 ) else
19701: LD_STRING remote
19703: PPUSH
19704: LD_INT 1
19706: NEG
19707: PPUSH
19708: CALL_OW 101
19712: GO 19725
// AddMedal ( remote , - 2 ) ;
19714: LD_STRING remote
19716: PPUSH
19717: LD_INT 2
19719: NEG
19720: PPUSH
19721: CALL_OW 101
// end ; if m1 and m2 and m3 then
19725: LD_VAR 0 4
19729: PUSH
19730: LD_VAR 0 5
19734: AND
19735: PUSH
19736: LD_VAR 0 6
19740: AND
19741: IFFALSE 19757
// begin wait ( 3 ) ;
19743: LD_INT 3
19745: PPUSH
19746: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19750: LD_STRING ACH_ASPEED_6
19752: PPUSH
19753: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19757: LD_OWVAR 67
19761: PUSH
19762: LD_INT 3
19764: GREATEREQUAL
19765: PUSH
19766: LD_VAR 0 4
19770: AND
19771: PUSH
19772: LD_VAR 0 5
19776: AND
19777: PUSH
19778: LD_VAR 0 6
19782: AND
19783: IFFALSE 19795
// SetAchievementEX ( ACH_AMER , 6 ) ;
19785: LD_STRING ACH_AMER
19787: PPUSH
19788: LD_INT 6
19790: PPUSH
19791: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19795: LD_EXP 21
19799: PPUSH
19800: LD_STRING 06_KurtStatus_1
19802: PPUSH
19803: CALL_OW 39
// GiveMedals ( Main ) ;
19807: LD_STRING Main
19809: PPUSH
19810: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19814: LD_INT 22
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 21
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 50
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: LD_INT 25
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 3
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: PPUSH
19901: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19905: LD_EXP 1
19909: PPUSH
19910: LD_EXP 43
19914: PUSH
19915: LD_STRING JMM
19917: STR
19918: PPUSH
19919: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19923: LD_EXP 2
19927: PPUSH
19928: LD_EXP 43
19932: PUSH
19933: LD_STRING Lisa
19935: STR
19936: PPUSH
19937: CALL 7289 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19941: LD_EXP 3
19945: PPUSH
19946: LD_EXP 43
19950: PUSH
19951: LD_STRING Bobby
19953: STR
19954: PPUSH
19955: CALL 7289 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19959: LD_EXP 4
19963: PPUSH
19964: LD_EXP 43
19968: PUSH
19969: LD_STRING Cyrus
19971: STR
19972: PPUSH
19973: CALL 7289 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19977: LD_EXP 5
19981: PPUSH
19982: LD_EXP 43
19986: PUSH
19987: LD_STRING Frank
19989: STR
19990: PPUSH
19991: CALL 7289 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19995: LD_EXP 6
19999: PPUSH
20000: LD_EXP 43
20004: PUSH
20005: LD_STRING Brown
20007: STR
20008: PPUSH
20009: CALL 7289 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20013: LD_EXP 7
20017: PPUSH
20018: LD_EXP 43
20022: PUSH
20023: LD_STRING Donaldson
20025: STR
20026: PPUSH
20027: CALL 7289 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20031: LD_EXP 8
20035: PPUSH
20036: LD_EXP 43
20040: PUSH
20041: LD_STRING Gladstone
20043: STR
20044: PPUSH
20045: CALL 7289 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20049: LD_EXP 9
20053: PPUSH
20054: LD_EXP 43
20058: PUSH
20059: LD_STRING Denis
20061: STR
20062: PPUSH
20063: CALL 7289 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20067: LD_EXP 16
20071: PPUSH
20072: LD_EXP 43
20076: PUSH
20077: LD_STRING Joan
20079: STR
20080: PPUSH
20081: CALL 7289 0 2
// if IsLive ( Mike ) then
20085: LD_EXP 11
20089: PPUSH
20090: CALL_OW 300
20094: IFFALSE 20114
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20096: LD_EXP 11
20100: PPUSH
20101: LD_EXP 43
20105: PUSH
20106: LD_STRING Mike
20108: STR
20109: PPUSH
20110: CALL_OW 38
// if IsLive ( Joan ) then
20114: LD_EXP 16
20118: PPUSH
20119: CALL_OW 300
20123: IFFALSE 20137
// SaveCharacters ( Joan , Joan ) ;
20125: LD_EXP 16
20129: PPUSH
20130: LD_STRING Joan
20132: PPUSH
20133: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20137: LD_EXP 17
20141: PPUSH
20142: LD_STRING 06_JoanStatus_1
20144: PPUSH
20145: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20149: LD_INT 50
20151: PUSH
20152: EMPTY
20153: LIST
20154: PUSH
20155: LD_INT 22
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 25
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 25
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 25
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 25
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: PUSH
20236: LD_EXP 1
20240: PUSH
20241: LD_EXP 2
20245: PUSH
20246: LD_EXP 3
20250: PUSH
20251: LD_EXP 4
20255: PUSH
20256: LD_EXP 5
20260: PUSH
20261: LD_EXP 6
20265: PUSH
20266: LD_EXP 7
20270: PUSH
20271: LD_EXP 8
20275: PUSH
20276: LD_EXP 9
20280: PUSH
20281: LD_EXP 16
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: DIFF
20298: PPUSH
20299: LD_STRING 06_other_survivors
20301: PPUSH
20302: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20306: LD_INT 50
20308: PUSH
20309: EMPTY
20310: LIST
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 21
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 25
20337: PUSH
20338: LD_INT 12
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 25
20347: PUSH
20348: LD_INT 16
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: PPUSH
20371: LD_STRING 06_other_apemans
20373: PPUSH
20374: CALL_OW 38
// YouWin ;
20378: CALL_OW 103
// end ; end_of_file
20382: LD_VAR 0 3
20386: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20387: LD_EXP 48
20391: PUSH
20392: LD_OWVAR 1
20396: PUSH
20397: LD_INT 23100
20399: PUSH
20400: LD_INT 21000
20402: PUSH
20403: LD_INT 18900
20405: PUSH
20406: LD_INT 16800
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_OWVAR 67
20419: ARRAY
20420: GREATER
20421: AND
20422: IFFALSE 20769
20424: GO 20426
20426: DISABLE
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
// begin enable ;
20433: ENABLE
// for i in ruAttackers do
20434: LD_ADDR_VAR 0 1
20438: PUSH
20439: LD_EXP 48
20443: PUSH
20444: FOR_IN
20445: IFFALSE 20767
// begin if not IsDrivenBy ( i ) then
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 311
20456: NOT
20457: IFFALSE 20461
// continue ;
20459: GO 20444
// if i mod 2 = 0 then
20461: LD_VAR 0 1
20465: PUSH
20466: LD_INT 2
20468: MOD
20469: PUSH
20470: LD_INT 0
20472: EQUAL
20473: IFFALSE 20528
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20475: LD_ADDR_VAR 0 3
20479: PUSH
20480: LD_INT 91
20482: PUSH
20483: LD_INT 52
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 82
20492: PUSH
20493: LD_INT 34
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 90
20502: PUSH
20503: LD_INT 26
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 86
20512: PUSH
20513: LD_INT 16
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 20623
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: LD_INT 91
20535: PUSH
20536: LD_INT 52
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 68
20545: PUSH
20546: LD_INT 46
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 48
20555: PUSH
20556: LD_INT 43
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 44
20565: PUSH
20566: LD_INT 42
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 33
20575: PUSH
20576: LD_INT 34
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 29
20585: PUSH
20586: LD_INT 23
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 19
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 38
20605: PUSH
20606: LD_INT 16
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 256
20632: PUSH
20633: LD_INT 1000
20635: EQUAL
20636: IFFALSE 20654
// AgressiveMove ( i , path ) else
20638: LD_VAR 0 1
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL 82373 0 2
20652: GO 20765
// if GetLives ( i ) < 650 then
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 256
20663: PUSH
20664: LD_INT 650
20666: LESS
20667: IFFALSE 20765
// begin if not IsInArea ( i , russianRepairArea ) then
20669: LD_VAR 0 1
20673: PPUSH
20674: LD_INT 12
20676: PPUSH
20677: CALL_OW 308
20681: NOT
20682: IFFALSE 20751
// begin SetTag ( i , 0 ) ;
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_INT 0
20691: PPUSH
20692: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 261
20705: PUSH
20706: LD_INT 50
20708: LESS
20709: PUSH
20710: LD_INT 21
20712: PPUSH
20713: CALL_OW 302
20717: AND
20718: IFFALSE 20734
// ComMoveUnit ( i , rufab ) else
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_INT 21
20727: PPUSH
20728: CALL_OW 112
20732: GO 20749
// ComMoveXY ( i , 121 , 99 ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 121
20741: PPUSH
20742: LD_INT 99
20744: PPUSH
20745: CALL_OW 111
// end else
20749: GO 20765
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 311
20760: PPUSH
20761: CALL 81469 0 1
// end ; end ;
20765: GO 20444
20767: POP
20768: POP
// end ;
20769: PPOPN 4
20771: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
20776: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: DOUBLE
20783: LD_INT 1
20785: DEC
20786: ST_TO_ADDR
20787: LD_INT 4
20789: PUSH
20790: LD_INT 5
20792: PUSH
20793: LD_INT 6
20795: PUSH
20796: LD_INT 6
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: LD_OWVAR 67
20809: ARRAY
20810: PUSH
20811: FOR_TO
20812: IFFALSE 20987
// begin uc_side := 3 ;
20814: LD_ADDR_OWVAR 20
20818: PUSH
20819: LD_INT 3
20821: ST_TO_ADDR
// uc_nation := 3 ;
20822: LD_ADDR_OWVAR 21
20826: PUSH
20827: LD_INT 3
20829: ST_TO_ADDR
// InitHC_All ( ) ;
20830: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20834: LD_INT 0
20836: PPUSH
20837: LD_INT 4
20839: PUSH
20840: LD_INT 5
20842: PUSH
20843: LD_INT 6
20845: PUSH
20846: LD_INT 6
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_OWVAR 67
20859: ARRAY
20860: PPUSH
20861: CALL_OW 381
// un := CreateHuman ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: CALL_OW 44
20874: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20875: LD_VAR 0 3
20879: PPUSH
20880: LD_INT 127
20882: PPUSH
20883: LD_INT 62
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20896: LD_ADDR_EXP 49
20900: PUSH
20901: LD_EXP 49
20905: PPUSH
20906: LD_EXP 49
20910: PUSH
20911: LD_INT 1
20913: PLUS
20914: PPUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: CALL_OW 1
20924: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 83
20932: PPUSH
20933: LD_INT 49
20935: PPUSH
20936: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 49
20947: PPUSH
20948: LD_INT 43
20950: PPUSH
20951: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 31
20962: PPUSH
20963: LD_INT 15
20965: PPUSH
20966: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 63
20977: PPUSH
20978: LD_INT 9
20980: PPUSH
20981: CALL_OW 174
// end ;
20985: GO 20811
20987: POP
20988: POP
// end ; end_of_file
20989: LD_VAR 0 1
20993: RET
// export function CreateNature ; var i , un ; begin
20994: LD_INT 0
20996: PPUSH
20997: PPUSH
20998: PPUSH
// for i := 1 to Difficulty + 2 do
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_OWVAR 67
21013: PUSH
21014: LD_INT 2
21016: PLUS
21017: PUSH
21018: FOR_TO
21019: IFFALSE 21128
// begin hc_sex := sex_male ;
21021: LD_ADDR_OWVAR 27
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// uc_side := 0 ;
21029: LD_ADDR_OWVAR 20
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// uc_nation := nation_nature ;
21037: LD_ADDR_OWVAR 21
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// hc_class := class_tiger ;
21045: LD_ADDR_OWVAR 28
21049: PUSH
21050: LD_INT 14
21052: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21053: LD_ADDR_OWVAR 31
21057: PUSH
21058: LD_EXP 36
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21078: LD_ADDR_OWVAR 35
21082: PUSH
21083: LD_INT 5
21085: NEG
21086: PPUSH
21087: LD_INT 5
21089: PPUSH
21090: CALL_OW 12
21094: PUSH
21095: LD_OWVAR 67
21099: MUL
21100: ST_TO_ADDR
// un := CreateHuman ;
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: CALL_OW 44
21110: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 18
21118: PPUSH
21119: LD_INT 0
21121: PPUSH
21122: CALL_OW 49
// end ;
21126: GO 21018
21128: POP
21129: POP
// for i = 1 to rand ( 3 , 4 ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_INT 3
21142: PPUSH
21143: LD_INT 4
21145: PPUSH
21146: CALL_OW 12
21150: PUSH
21151: FOR_TO
21152: IFFALSE 21222
// begin hc_class := class_phororhacos ;
21154: LD_ADDR_OWVAR 28
21158: PUSH
21159: LD_INT 18
21161: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21162: LD_ADDR_OWVAR 31
21166: PUSH
21167: LD_EXP 36
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: ST_TO_ADDR
// hc_agressivity := 0 ;
21187: LD_ADDR_OWVAR 35
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// un = CreateHuman ;
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: CALL_OW 44
21204: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21205: LD_VAR 0 3
21209: PPUSH
21210: LD_INT 18
21212: PPUSH
21213: LD_INT 0
21215: PPUSH
21216: CALL_OW 49
// end ;
21220: GO 21151
21222: POP
21223: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21224: LD_ADDR_VAR 0 2
21228: PUSH
21229: DOUBLE
21230: LD_INT 1
21232: DEC
21233: ST_TO_ADDR
21234: LD_INT 3
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: LD_INT 4
21242: PUSH
21243: LD_INT 5
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: PUSH
21252: LD_OWVAR 67
21256: ARRAY
21257: PUSH
21258: FOR_TO
21259: IFFALSE 21400
// begin hc_class := class_apeman ;
21261: LD_ADDR_OWVAR 28
21265: PUSH
21266: LD_INT 12
21268: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21269: LD_ADDR_OWVAR 31
21273: PUSH
21274: LD_INT 2
21276: PPUSH
21277: LD_INT 5
21279: PPUSH
21280: CALL_OW 12
21284: PUSH
21285: LD_INT 0
21287: PPUSH
21288: LD_INT 2
21290: PPUSH
21291: CALL_OW 12
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21308: LD_ADDR_OWVAR 35
21312: PUSH
21313: LD_INT 5
21315: NEG
21316: PPUSH
21317: LD_INT 10
21319: PPUSH
21320: CALL_OW 12
21324: PUSH
21325: LD_INT 10
21327: NEG
21328: PPUSH
21329: LD_INT 20
21331: PPUSH
21332: CALL_OW 12
21336: PUSH
21337: LD_INT 20
21339: NEG
21340: PPUSH
21341: LD_INT 25
21343: PPUSH
21344: CALL_OW 12
21348: PUSH
21349: LD_INT 30
21351: NEG
21352: PPUSH
21353: LD_INT 30
21355: PPUSH
21356: CALL_OW 12
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: LD_OWVAR 67
21371: ARRAY
21372: ST_TO_ADDR
// un := CreateHuman ;
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: CALL_OW 44
21382: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_INT 19
21390: PPUSH
21391: LD_INT 0
21393: PPUSH
21394: CALL_OW 49
// end ;
21398: GO 21258
21400: POP
21401: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: DOUBLE
21408: LD_INT 1
21410: DEC
21411: ST_TO_ADDR
21412: LD_INT 3
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: LD_OWVAR 67
21434: ARRAY
21435: PUSH
21436: FOR_TO
21437: IFFALSE 21530
// begin hc_class := class_apeman ;
21439: LD_ADDR_OWVAR 28
21443: PUSH
21444: LD_INT 12
21446: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21447: LD_ADDR_OWVAR 31
21451: PUSH
21452: LD_INT 2
21454: PPUSH
21455: LD_INT 5
21457: PPUSH
21458: CALL_OW 12
21462: PUSH
21463: LD_INT 0
21465: PPUSH
21466: LD_INT 2
21468: PPUSH
21469: CALL_OW 12
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21486: LD_ADDR_OWVAR 35
21490: PUSH
21491: LD_INT 15
21493: NEG
21494: PPUSH
21495: LD_INT 15
21497: PPUSH
21498: CALL_OW 12
21502: ST_TO_ADDR
// un = CreateHuman ;
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: CALL_OW 44
21512: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_INT 20
21520: PPUSH
21521: LD_INT 0
21523: PPUSH
21524: CALL_OW 49
// end ;
21528: GO 21436
21530: POP
21531: POP
// end ; end_of_file end_of_file
21532: LD_VAR 0 1
21536: RET
// export globalGameSaveCounter ; every 0 0$1 do
21537: GO 21539
21539: DISABLE
// begin enable ;
21540: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21541: LD_STRING updateTimer(
21543: PUSH
21544: LD_OWVAR 1
21548: STR
21549: PUSH
21550: LD_STRING );
21552: STR
21553: PPUSH
21554: CALL_OW 559
// end ;
21558: END
// every 0 0$1 do
21559: GO 21561
21561: DISABLE
// begin globalGameSaveCounter := 0 ;
21562: LD_ADDR_EXP 50
21566: PUSH
21567: LD_INT 0
21569: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21570: LD_STRING setGameSaveCounter(0)
21572: PPUSH
21573: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21577: LD_STRING initStreamRollete();
21579: PPUSH
21580: CALL_OW 559
// InitStreamMode ;
21584: CALL 22910 0 0
// DefineStreamItems ( false ) ;
21588: LD_INT 0
21590: PPUSH
21591: CALL 23374 0 1
// end ;
21595: END
// export function SOS_MapStart ( ) ; begin
21596: LD_INT 0
21598: PPUSH
// if streamModeActive then
21599: LD_EXP 51
21603: IFFALSE 21612
// DefineStreamItems ( true ) ;
21605: LD_INT 1
21607: PPUSH
21608: CALL 23374 0 1
// UpdateLuaVariables ( ) ;
21612: CALL 21629 0 0
// UpdateFactoryWaypoints ( ) ;
21616: CALL 36243 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21620: CALL 36500 0 0
// end ;
21624: LD_VAR 0 1
21628: RET
// function UpdateLuaVariables ( ) ; begin
21629: LD_INT 0
21631: PPUSH
// if globalGameSaveCounter then
21632: LD_EXP 50
21636: IFFALSE 21670
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21638: LD_ADDR_EXP 50
21642: PUSH
21643: LD_EXP 50
21647: PPUSH
21648: CALL 81130 0 1
21652: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21653: LD_STRING setGameSaveCounter(
21655: PUSH
21656: LD_EXP 50
21660: STR
21661: PUSH
21662: LD_STRING )
21664: STR
21665: PPUSH
21666: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21670: LD_STRING setGameDifficulty(
21672: PUSH
21673: LD_OWVAR 67
21677: STR
21678: PUSH
21679: LD_STRING )
21681: STR
21682: PPUSH
21683: CALL_OW 559
// end ;
21687: LD_VAR 0 1
21691: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21692: LD_INT 0
21694: PPUSH
// if p2 = stream_mode then
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 100
21702: EQUAL
21703: IFFALSE 22706
// begin if not StreamModeActive then
21705: LD_EXP 51
21709: NOT
21710: IFFALSE 21720
// StreamModeActive := true ;
21712: LD_ADDR_EXP 51
21716: PUSH
21717: LD_INT 1
21719: ST_TO_ADDR
// if p3 = 0 then
21720: LD_VAR 0 3
21724: PUSH
21725: LD_INT 0
21727: EQUAL
21728: IFFALSE 21734
// InitStreamMode ;
21730: CALL 22910 0 0
// if p3 = 1 then
21734: LD_VAR 0 3
21738: PUSH
21739: LD_INT 1
21741: EQUAL
21742: IFFALSE 21752
// sRocket := true ;
21744: LD_ADDR_EXP 56
21748: PUSH
21749: LD_INT 1
21751: ST_TO_ADDR
// if p3 = 2 then
21752: LD_VAR 0 3
21756: PUSH
21757: LD_INT 2
21759: EQUAL
21760: IFFALSE 21770
// sSpeed := true ;
21762: LD_ADDR_EXP 55
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// if p3 = 3 then
21770: LD_VAR 0 3
21774: PUSH
21775: LD_INT 3
21777: EQUAL
21778: IFFALSE 21788
// sEngine := true ;
21780: LD_ADDR_EXP 57
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// if p3 = 4 then
21788: LD_VAR 0 3
21792: PUSH
21793: LD_INT 4
21795: EQUAL
21796: IFFALSE 21806
// sSpec := true ;
21798: LD_ADDR_EXP 54
21802: PUSH
21803: LD_INT 1
21805: ST_TO_ADDR
// if p3 = 5 then
21806: LD_VAR 0 3
21810: PUSH
21811: LD_INT 5
21813: EQUAL
21814: IFFALSE 21824
// sLevel := true ;
21816: LD_ADDR_EXP 58
21820: PUSH
21821: LD_INT 1
21823: ST_TO_ADDR
// if p3 = 6 then
21824: LD_VAR 0 3
21828: PUSH
21829: LD_INT 6
21831: EQUAL
21832: IFFALSE 21842
// sArmoury := true ;
21834: LD_ADDR_EXP 59
21838: PUSH
21839: LD_INT 1
21841: ST_TO_ADDR
// if p3 = 7 then
21842: LD_VAR 0 3
21846: PUSH
21847: LD_INT 7
21849: EQUAL
21850: IFFALSE 21860
// sRadar := true ;
21852: LD_ADDR_EXP 60
21856: PUSH
21857: LD_INT 1
21859: ST_TO_ADDR
// if p3 = 8 then
21860: LD_VAR 0 3
21864: PUSH
21865: LD_INT 8
21867: EQUAL
21868: IFFALSE 21878
// sBunker := true ;
21870: LD_ADDR_EXP 61
21874: PUSH
21875: LD_INT 1
21877: ST_TO_ADDR
// if p3 = 9 then
21878: LD_VAR 0 3
21882: PUSH
21883: LD_INT 9
21885: EQUAL
21886: IFFALSE 21896
// sHack := true ;
21888: LD_ADDR_EXP 62
21892: PUSH
21893: LD_INT 1
21895: ST_TO_ADDR
// if p3 = 10 then
21896: LD_VAR 0 3
21900: PUSH
21901: LD_INT 10
21903: EQUAL
21904: IFFALSE 21914
// sFire := true ;
21906: LD_ADDR_EXP 63
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// if p3 = 11 then
21914: LD_VAR 0 3
21918: PUSH
21919: LD_INT 11
21921: EQUAL
21922: IFFALSE 21932
// sRefresh := true ;
21924: LD_ADDR_EXP 64
21928: PUSH
21929: LD_INT 1
21931: ST_TO_ADDR
// if p3 = 12 then
21932: LD_VAR 0 3
21936: PUSH
21937: LD_INT 12
21939: EQUAL
21940: IFFALSE 21950
// sExp := true ;
21942: LD_ADDR_EXP 65
21946: PUSH
21947: LD_INT 1
21949: ST_TO_ADDR
// if p3 = 13 then
21950: LD_VAR 0 3
21954: PUSH
21955: LD_INT 13
21957: EQUAL
21958: IFFALSE 21968
// sDepot := true ;
21960: LD_ADDR_EXP 66
21964: PUSH
21965: LD_INT 1
21967: ST_TO_ADDR
// if p3 = 14 then
21968: LD_VAR 0 3
21972: PUSH
21973: LD_INT 14
21975: EQUAL
21976: IFFALSE 21986
// sFlag := true ;
21978: LD_ADDR_EXP 67
21982: PUSH
21983: LD_INT 1
21985: ST_TO_ADDR
// if p3 = 15 then
21986: LD_VAR 0 3
21990: PUSH
21991: LD_INT 15
21993: EQUAL
21994: IFFALSE 22004
// sKamikadze := true ;
21996: LD_ADDR_EXP 75
22000: PUSH
22001: LD_INT 1
22003: ST_TO_ADDR
// if p3 = 16 then
22004: LD_VAR 0 3
22008: PUSH
22009: LD_INT 16
22011: EQUAL
22012: IFFALSE 22022
// sTroll := true ;
22014: LD_ADDR_EXP 76
22018: PUSH
22019: LD_INT 1
22021: ST_TO_ADDR
// if p3 = 17 then
22022: LD_VAR 0 3
22026: PUSH
22027: LD_INT 17
22029: EQUAL
22030: IFFALSE 22040
// sSlow := true ;
22032: LD_ADDR_EXP 77
22036: PUSH
22037: LD_INT 1
22039: ST_TO_ADDR
// if p3 = 18 then
22040: LD_VAR 0 3
22044: PUSH
22045: LD_INT 18
22047: EQUAL
22048: IFFALSE 22058
// sLack := true ;
22050: LD_ADDR_EXP 78
22054: PUSH
22055: LD_INT 1
22057: ST_TO_ADDR
// if p3 = 19 then
22058: LD_VAR 0 3
22062: PUSH
22063: LD_INT 19
22065: EQUAL
22066: IFFALSE 22076
// sTank := true ;
22068: LD_ADDR_EXP 80
22072: PUSH
22073: LD_INT 1
22075: ST_TO_ADDR
// if p3 = 20 then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 20
22083: EQUAL
22084: IFFALSE 22094
// sRemote := true ;
22086: LD_ADDR_EXP 81
22090: PUSH
22091: LD_INT 1
22093: ST_TO_ADDR
// if p3 = 21 then
22094: LD_VAR 0 3
22098: PUSH
22099: LD_INT 21
22101: EQUAL
22102: IFFALSE 22112
// sPowell := true ;
22104: LD_ADDR_EXP 82
22108: PUSH
22109: LD_INT 1
22111: ST_TO_ADDR
// if p3 = 22 then
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 22
22119: EQUAL
22120: IFFALSE 22130
// sTeleport := true ;
22122: LD_ADDR_EXP 85
22126: PUSH
22127: LD_INT 1
22129: ST_TO_ADDR
// if p3 = 23 then
22130: LD_VAR 0 3
22134: PUSH
22135: LD_INT 23
22137: EQUAL
22138: IFFALSE 22148
// sOilTower := true ;
22140: LD_ADDR_EXP 87
22144: PUSH
22145: LD_INT 1
22147: ST_TO_ADDR
// if p3 = 24 then
22148: LD_VAR 0 3
22152: PUSH
22153: LD_INT 24
22155: EQUAL
22156: IFFALSE 22166
// sShovel := true ;
22158: LD_ADDR_EXP 88
22162: PUSH
22163: LD_INT 1
22165: ST_TO_ADDR
// if p3 = 25 then
22166: LD_VAR 0 3
22170: PUSH
22171: LD_INT 25
22173: EQUAL
22174: IFFALSE 22184
// sSheik := true ;
22176: LD_ADDR_EXP 89
22180: PUSH
22181: LD_INT 1
22183: ST_TO_ADDR
// if p3 = 26 then
22184: LD_VAR 0 3
22188: PUSH
22189: LD_INT 26
22191: EQUAL
22192: IFFALSE 22202
// sEarthquake := true ;
22194: LD_ADDR_EXP 91
22198: PUSH
22199: LD_INT 1
22201: ST_TO_ADDR
// if p3 = 27 then
22202: LD_VAR 0 3
22206: PUSH
22207: LD_INT 27
22209: EQUAL
22210: IFFALSE 22220
// sAI := true ;
22212: LD_ADDR_EXP 92
22216: PUSH
22217: LD_INT 1
22219: ST_TO_ADDR
// if p3 = 28 then
22220: LD_VAR 0 3
22224: PUSH
22225: LD_INT 28
22227: EQUAL
22228: IFFALSE 22238
// sCargo := true ;
22230: LD_ADDR_EXP 95
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// if p3 = 29 then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_INT 29
22245: EQUAL
22246: IFFALSE 22256
// sDLaser := true ;
22248: LD_ADDR_EXP 96
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// if p3 = 30 then
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 30
22263: EQUAL
22264: IFFALSE 22274
// sExchange := true ;
22266: LD_ADDR_EXP 97
22270: PUSH
22271: LD_INT 1
22273: ST_TO_ADDR
// if p3 = 31 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 31
22281: EQUAL
22282: IFFALSE 22292
// sFac := true ;
22284: LD_ADDR_EXP 98
22288: PUSH
22289: LD_INT 1
22291: ST_TO_ADDR
// if p3 = 32 then
22292: LD_VAR 0 3
22296: PUSH
22297: LD_INT 32
22299: EQUAL
22300: IFFALSE 22310
// sPower := true ;
22302: LD_ADDR_EXP 99
22306: PUSH
22307: LD_INT 1
22309: ST_TO_ADDR
// if p3 = 33 then
22310: LD_VAR 0 3
22314: PUSH
22315: LD_INT 33
22317: EQUAL
22318: IFFALSE 22328
// sRandom := true ;
22320: LD_ADDR_EXP 100
22324: PUSH
22325: LD_INT 1
22327: ST_TO_ADDR
// if p3 = 34 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 34
22335: EQUAL
22336: IFFALSE 22346
// sShield := true ;
22338: LD_ADDR_EXP 101
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// if p3 = 35 then
22346: LD_VAR 0 3
22350: PUSH
22351: LD_INT 35
22353: EQUAL
22354: IFFALSE 22364
// sTime := true ;
22356: LD_ADDR_EXP 102
22360: PUSH
22361: LD_INT 1
22363: ST_TO_ADDR
// if p3 = 36 then
22364: LD_VAR 0 3
22368: PUSH
22369: LD_INT 36
22371: EQUAL
22372: IFFALSE 22382
// sTools := true ;
22374: LD_ADDR_EXP 103
22378: PUSH
22379: LD_INT 1
22381: ST_TO_ADDR
// if p3 = 101 then
22382: LD_VAR 0 3
22386: PUSH
22387: LD_INT 101
22389: EQUAL
22390: IFFALSE 22400
// sSold := true ;
22392: LD_ADDR_EXP 68
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// if p3 = 102 then
22400: LD_VAR 0 3
22404: PUSH
22405: LD_INT 102
22407: EQUAL
22408: IFFALSE 22418
// sDiff := true ;
22410: LD_ADDR_EXP 69
22414: PUSH
22415: LD_INT 1
22417: ST_TO_ADDR
// if p3 = 103 then
22418: LD_VAR 0 3
22422: PUSH
22423: LD_INT 103
22425: EQUAL
22426: IFFALSE 22436
// sFog := true ;
22428: LD_ADDR_EXP 72
22432: PUSH
22433: LD_INT 1
22435: ST_TO_ADDR
// if p3 = 104 then
22436: LD_VAR 0 3
22440: PUSH
22441: LD_INT 104
22443: EQUAL
22444: IFFALSE 22454
// sReset := true ;
22446: LD_ADDR_EXP 73
22450: PUSH
22451: LD_INT 1
22453: ST_TO_ADDR
// if p3 = 105 then
22454: LD_VAR 0 3
22458: PUSH
22459: LD_INT 105
22461: EQUAL
22462: IFFALSE 22472
// sSun := true ;
22464: LD_ADDR_EXP 74
22468: PUSH
22469: LD_INT 1
22471: ST_TO_ADDR
// if p3 = 106 then
22472: LD_VAR 0 3
22476: PUSH
22477: LD_INT 106
22479: EQUAL
22480: IFFALSE 22490
// sTiger := true ;
22482: LD_ADDR_EXP 70
22486: PUSH
22487: LD_INT 1
22489: ST_TO_ADDR
// if p3 = 107 then
22490: LD_VAR 0 3
22494: PUSH
22495: LD_INT 107
22497: EQUAL
22498: IFFALSE 22508
// sBomb := true ;
22500: LD_ADDR_EXP 71
22504: PUSH
22505: LD_INT 1
22507: ST_TO_ADDR
// if p3 = 108 then
22508: LD_VAR 0 3
22512: PUSH
22513: LD_INT 108
22515: EQUAL
22516: IFFALSE 22526
// sWound := true ;
22518: LD_ADDR_EXP 79
22522: PUSH
22523: LD_INT 1
22525: ST_TO_ADDR
// if p3 = 109 then
22526: LD_VAR 0 3
22530: PUSH
22531: LD_INT 109
22533: EQUAL
22534: IFFALSE 22544
// sBetray := true ;
22536: LD_ADDR_EXP 83
22540: PUSH
22541: LD_INT 1
22543: ST_TO_ADDR
// if p3 = 110 then
22544: LD_VAR 0 3
22548: PUSH
22549: LD_INT 110
22551: EQUAL
22552: IFFALSE 22562
// sContamin := true ;
22554: LD_ADDR_EXP 84
22558: PUSH
22559: LD_INT 1
22561: ST_TO_ADDR
// if p3 = 111 then
22562: LD_VAR 0 3
22566: PUSH
22567: LD_INT 111
22569: EQUAL
22570: IFFALSE 22580
// sOil := true ;
22572: LD_ADDR_EXP 86
22576: PUSH
22577: LD_INT 1
22579: ST_TO_ADDR
// if p3 = 112 then
22580: LD_VAR 0 3
22584: PUSH
22585: LD_INT 112
22587: EQUAL
22588: IFFALSE 22598
// sStu := true ;
22590: LD_ADDR_EXP 90
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// if p3 = 113 then
22598: LD_VAR 0 3
22602: PUSH
22603: LD_INT 113
22605: EQUAL
22606: IFFALSE 22616
// sBazooka := true ;
22608: LD_ADDR_EXP 93
22612: PUSH
22613: LD_INT 1
22615: ST_TO_ADDR
// if p3 = 114 then
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 114
22623: EQUAL
22624: IFFALSE 22634
// sMortar := true ;
22626: LD_ADDR_EXP 94
22630: PUSH
22631: LD_INT 1
22633: ST_TO_ADDR
// if p3 = 115 then
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 115
22641: EQUAL
22642: IFFALSE 22652
// sRanger := true ;
22644: LD_ADDR_EXP 104
22648: PUSH
22649: LD_INT 1
22651: ST_TO_ADDR
// if p3 = 116 then
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 116
22659: EQUAL
22660: IFFALSE 22670
// sComputer := true ;
22662: LD_ADDR_EXP 105
22666: PUSH
22667: LD_INT 1
22669: ST_TO_ADDR
// if p3 = 117 then
22670: LD_VAR 0 3
22674: PUSH
22675: LD_INT 117
22677: EQUAL
22678: IFFALSE 22688
// s30 := true ;
22680: LD_ADDR_EXP 106
22684: PUSH
22685: LD_INT 1
22687: ST_TO_ADDR
// if p3 = 118 then
22688: LD_VAR 0 3
22692: PUSH
22693: LD_INT 118
22695: EQUAL
22696: IFFALSE 22706
// s60 := true ;
22698: LD_ADDR_EXP 107
22702: PUSH
22703: LD_INT 1
22705: ST_TO_ADDR
// end ; if p2 = hack_mode then
22706: LD_VAR 0 2
22710: PUSH
22711: LD_INT 101
22713: EQUAL
22714: IFFALSE 22842
// begin case p3 of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22736
22729: POP
// hHackUnlimitedResources ; 2 :
22730: CALL 34989 0 0
22734: GO 22842
22736: LD_INT 2
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22751
22744: POP
// hHackSetLevel10 ; 3 :
22745: CALL 35122 0 0
22749: GO 22842
22751: LD_INT 3
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22766
22759: POP
// hHackSetLevel10YourUnits ; 4 :
22760: CALL 35207 0 0
22764: GO 22842
22766: LD_INT 4
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22781
22774: POP
// hHackInvincible ; 5 :
22775: CALL 35655 0 0
22779: GO 22842
22781: LD_INT 5
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22796
22789: POP
// hHackInvisible ; 6 :
22790: CALL 35766 0 0
22794: GO 22842
22796: LD_INT 6
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22811
22804: POP
// hHackChangeYourSide ; 7 :
22805: CALL 35823 0 0
22809: GO 22842
22811: LD_INT 7
22813: DOUBLE
22814: EQUAL
22815: IFTRUE 22819
22817: GO 22826
22819: POP
// hHackChangeUnitSide ; 8 :
22820: CALL 35865 0 0
22824: GO 22842
22826: LD_INT 8
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 22841
22834: POP
// hHackFog ; end ;
22835: CALL 35966 0 0
22839: GO 22842
22841: POP
// end ; if p2 = game_save_mode then
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 102
22849: EQUAL
22850: IFFALSE 22905
// begin if p3 = 1 then
22852: LD_VAR 0 3
22856: PUSH
22857: LD_INT 1
22859: EQUAL
22860: IFFALSE 22872
// globalGameSaveCounter := p4 ;
22862: LD_ADDR_EXP 50
22866: PUSH
22867: LD_VAR 0 4
22871: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22872: LD_VAR 0 3
22876: PUSH
22877: LD_INT 2
22879: EQUAL
22880: PUSH
22881: LD_EXP 50
22885: AND
22886: IFFALSE 22905
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22888: LD_STRING setGameSaveCounter(
22890: PUSH
22891: LD_EXP 50
22895: STR
22896: PUSH
22897: LD_STRING )
22899: STR
22900: PPUSH
22901: CALL_OW 559
// end ; end ;
22905: LD_VAR 0 7
22909: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22910: LD_INT 0
22912: PPUSH
// streamModeActive := false ;
22913: LD_ADDR_EXP 51
22917: PUSH
22918: LD_INT 0
22920: ST_TO_ADDR
// normalCounter := 36 ;
22921: LD_ADDR_EXP 52
22925: PUSH
22926: LD_INT 36
22928: ST_TO_ADDR
// hardcoreCounter := 18 ;
22929: LD_ADDR_EXP 53
22933: PUSH
22934: LD_INT 18
22936: ST_TO_ADDR
// sRocket := false ;
22937: LD_ADDR_EXP 56
22941: PUSH
22942: LD_INT 0
22944: ST_TO_ADDR
// sSpeed := false ;
22945: LD_ADDR_EXP 55
22949: PUSH
22950: LD_INT 0
22952: ST_TO_ADDR
// sEngine := false ;
22953: LD_ADDR_EXP 57
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// sSpec := false ;
22961: LD_ADDR_EXP 54
22965: PUSH
22966: LD_INT 0
22968: ST_TO_ADDR
// sLevel := false ;
22969: LD_ADDR_EXP 58
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
// sArmoury := false ;
22977: LD_ADDR_EXP 59
22981: PUSH
22982: LD_INT 0
22984: ST_TO_ADDR
// sRadar := false ;
22985: LD_ADDR_EXP 60
22989: PUSH
22990: LD_INT 0
22992: ST_TO_ADDR
// sBunker := false ;
22993: LD_ADDR_EXP 61
22997: PUSH
22998: LD_INT 0
23000: ST_TO_ADDR
// sHack := false ;
23001: LD_ADDR_EXP 62
23005: PUSH
23006: LD_INT 0
23008: ST_TO_ADDR
// sFire := false ;
23009: LD_ADDR_EXP 63
23013: PUSH
23014: LD_INT 0
23016: ST_TO_ADDR
// sRefresh := false ;
23017: LD_ADDR_EXP 64
23021: PUSH
23022: LD_INT 0
23024: ST_TO_ADDR
// sExp := false ;
23025: LD_ADDR_EXP 65
23029: PUSH
23030: LD_INT 0
23032: ST_TO_ADDR
// sDepot := false ;
23033: LD_ADDR_EXP 66
23037: PUSH
23038: LD_INT 0
23040: ST_TO_ADDR
// sFlag := false ;
23041: LD_ADDR_EXP 67
23045: PUSH
23046: LD_INT 0
23048: ST_TO_ADDR
// sKamikadze := false ;
23049: LD_ADDR_EXP 75
23053: PUSH
23054: LD_INT 0
23056: ST_TO_ADDR
// sTroll := false ;
23057: LD_ADDR_EXP 76
23061: PUSH
23062: LD_INT 0
23064: ST_TO_ADDR
// sSlow := false ;
23065: LD_ADDR_EXP 77
23069: PUSH
23070: LD_INT 0
23072: ST_TO_ADDR
// sLack := false ;
23073: LD_ADDR_EXP 78
23077: PUSH
23078: LD_INT 0
23080: ST_TO_ADDR
// sTank := false ;
23081: LD_ADDR_EXP 80
23085: PUSH
23086: LD_INT 0
23088: ST_TO_ADDR
// sRemote := false ;
23089: LD_ADDR_EXP 81
23093: PUSH
23094: LD_INT 0
23096: ST_TO_ADDR
// sPowell := false ;
23097: LD_ADDR_EXP 82
23101: PUSH
23102: LD_INT 0
23104: ST_TO_ADDR
// sTeleport := false ;
23105: LD_ADDR_EXP 85
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// sOilTower := false ;
23113: LD_ADDR_EXP 87
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// sShovel := false ;
23121: LD_ADDR_EXP 88
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// sSheik := false ;
23129: LD_ADDR_EXP 89
23133: PUSH
23134: LD_INT 0
23136: ST_TO_ADDR
// sEarthquake := false ;
23137: LD_ADDR_EXP 91
23141: PUSH
23142: LD_INT 0
23144: ST_TO_ADDR
// sAI := false ;
23145: LD_ADDR_EXP 92
23149: PUSH
23150: LD_INT 0
23152: ST_TO_ADDR
// sCargo := false ;
23153: LD_ADDR_EXP 95
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// sDLaser := false ;
23161: LD_ADDR_EXP 96
23165: PUSH
23166: LD_INT 0
23168: ST_TO_ADDR
// sExchange := false ;
23169: LD_ADDR_EXP 97
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// sFac := false ;
23177: LD_ADDR_EXP 98
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
// sPower := false ;
23185: LD_ADDR_EXP 99
23189: PUSH
23190: LD_INT 0
23192: ST_TO_ADDR
// sRandom := false ;
23193: LD_ADDR_EXP 100
23197: PUSH
23198: LD_INT 0
23200: ST_TO_ADDR
// sShield := false ;
23201: LD_ADDR_EXP 101
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
// sTime := false ;
23209: LD_ADDR_EXP 102
23213: PUSH
23214: LD_INT 0
23216: ST_TO_ADDR
// sTools := false ;
23217: LD_ADDR_EXP 103
23221: PUSH
23222: LD_INT 0
23224: ST_TO_ADDR
// sSold := false ;
23225: LD_ADDR_EXP 68
23229: PUSH
23230: LD_INT 0
23232: ST_TO_ADDR
// sDiff := false ;
23233: LD_ADDR_EXP 69
23237: PUSH
23238: LD_INT 0
23240: ST_TO_ADDR
// sFog := false ;
23241: LD_ADDR_EXP 72
23245: PUSH
23246: LD_INT 0
23248: ST_TO_ADDR
// sReset := false ;
23249: LD_ADDR_EXP 73
23253: PUSH
23254: LD_INT 0
23256: ST_TO_ADDR
// sSun := false ;
23257: LD_ADDR_EXP 74
23261: PUSH
23262: LD_INT 0
23264: ST_TO_ADDR
// sTiger := false ;
23265: LD_ADDR_EXP 70
23269: PUSH
23270: LD_INT 0
23272: ST_TO_ADDR
// sBomb := false ;
23273: LD_ADDR_EXP 71
23277: PUSH
23278: LD_INT 0
23280: ST_TO_ADDR
// sWound := false ;
23281: LD_ADDR_EXP 79
23285: PUSH
23286: LD_INT 0
23288: ST_TO_ADDR
// sBetray := false ;
23289: LD_ADDR_EXP 83
23293: PUSH
23294: LD_INT 0
23296: ST_TO_ADDR
// sContamin := false ;
23297: LD_ADDR_EXP 84
23301: PUSH
23302: LD_INT 0
23304: ST_TO_ADDR
// sOil := false ;
23305: LD_ADDR_EXP 86
23309: PUSH
23310: LD_INT 0
23312: ST_TO_ADDR
// sStu := false ;
23313: LD_ADDR_EXP 90
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// sBazooka := false ;
23321: LD_ADDR_EXP 93
23325: PUSH
23326: LD_INT 0
23328: ST_TO_ADDR
// sMortar := false ;
23329: LD_ADDR_EXP 94
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
// sRanger := false ;
23337: LD_ADDR_EXP 104
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// sComputer := false ;
23345: LD_ADDR_EXP 105
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// s30 := false ;
23353: LD_ADDR_EXP 106
23357: PUSH
23358: LD_INT 0
23360: ST_TO_ADDR
// s60 := false ;
23361: LD_ADDR_EXP 107
23365: PUSH
23366: LD_INT 0
23368: ST_TO_ADDR
// end ;
23369: LD_VAR 0 1
23373: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23374: LD_INT 0
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
// result := [ ] ;
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: EMPTY
23389: ST_TO_ADDR
// if campaign_id = 1 then
23390: LD_OWVAR 69
23394: PUSH
23395: LD_INT 1
23397: EQUAL
23398: IFFALSE 26564
// begin case mission_number of 1 :
23400: LD_OWVAR 70
23404: PUSH
23405: LD_INT 1
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23489
23413: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 4
23424: PUSH
23425: LD_INT 11
23427: PUSH
23428: LD_INT 12
23430: PUSH
23431: LD_INT 15
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: LD_INT 22
23439: PUSH
23440: LD_INT 23
23442: PUSH
23443: LD_INT 26
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 106
23465: PUSH
23466: LD_INT 116
23468: PUSH
23469: LD_INT 117
23471: PUSH
23472: LD_INT 118
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: ST_TO_ADDR
23487: GO 26562
23489: LD_INT 2
23491: DOUBLE
23492: EQUAL
23493: IFTRUE 23497
23495: GO 23581
23497: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 11
23511: PUSH
23512: LD_INT 12
23514: PUSH
23515: LD_INT 15
23517: PUSH
23518: LD_INT 16
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 23
23526: PUSH
23527: LD_INT 26
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 101
23543: PUSH
23544: LD_INT 102
23546: PUSH
23547: LD_INT 105
23549: PUSH
23550: LD_INT 106
23552: PUSH
23553: LD_INT 108
23555: PUSH
23556: LD_INT 116
23558: PUSH
23559: LD_INT 117
23561: PUSH
23562: LD_INT 118
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: ST_TO_ADDR
23579: GO 26562
23581: LD_INT 3
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23677
23589: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23590: LD_ADDR_VAR 0 2
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: LD_INT 11
23606: PUSH
23607: LD_INT 12
23609: PUSH
23610: LD_INT 15
23612: PUSH
23613: LD_INT 16
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 26
23621: PUSH
23622: LD_INT 36
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 101
23639: PUSH
23640: LD_INT 102
23642: PUSH
23643: LD_INT 105
23645: PUSH
23646: LD_INT 106
23648: PUSH
23649: LD_INT 108
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: ST_TO_ADDR
23675: GO 26562
23677: LD_INT 4
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23781
23685: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: LD_INT 4
23696: PUSH
23697: LD_INT 5
23699: PUSH
23700: LD_INT 8
23702: PUSH
23703: LD_INT 11
23705: PUSH
23706: LD_INT 12
23708: PUSH
23709: LD_INT 15
23711: PUSH
23712: LD_INT 16
23714: PUSH
23715: LD_INT 22
23717: PUSH
23718: LD_INT 23
23720: PUSH
23721: LD_INT 26
23723: PUSH
23724: LD_INT 36
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 101
23743: PUSH
23744: LD_INT 102
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 108
23755: PUSH
23756: LD_INT 116
23758: PUSH
23759: LD_INT 117
23761: PUSH
23762: LD_INT 118
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: ST_TO_ADDR
23779: GO 26562
23781: LD_INT 5
23783: DOUBLE
23784: EQUAL
23785: IFTRUE 23789
23787: GO 23901
23789: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23790: LD_ADDR_VAR 0 2
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: LD_INT 6
23806: PUSH
23807: LD_INT 8
23809: PUSH
23810: LD_INT 11
23812: PUSH
23813: LD_INT 12
23815: PUSH
23816: LD_INT 15
23818: PUSH
23819: LD_INT 16
23821: PUSH
23822: LD_INT 22
23824: PUSH
23825: LD_INT 23
23827: PUSH
23828: LD_INT 25
23830: PUSH
23831: LD_INT 26
23833: PUSH
23834: LD_INT 36
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 101
23855: PUSH
23856: LD_INT 102
23858: PUSH
23859: LD_INT 105
23861: PUSH
23862: LD_INT 106
23864: PUSH
23865: LD_INT 108
23867: PUSH
23868: LD_INT 109
23870: PUSH
23871: LD_INT 112
23873: PUSH
23874: LD_INT 116
23876: PUSH
23877: LD_INT 117
23879: PUSH
23880: LD_INT 118
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: ST_TO_ADDR
23899: GO 26562
23901: LD_INT 6
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 24041
23909: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: LD_INT 6
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: LD_INT 12
23935: PUSH
23936: LD_INT 15
23938: PUSH
23939: LD_INT 16
23941: PUSH
23942: LD_INT 20
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_INT 23
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 31
23965: PUSH
23966: LD_INT 32
23968: PUSH
23969: LD_INT 36
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 101
23995: PUSH
23996: LD_INT 102
23998: PUSH
23999: LD_INT 105
24001: PUSH
24002: LD_INT 106
24004: PUSH
24005: LD_INT 108
24007: PUSH
24008: LD_INT 109
24010: PUSH
24011: LD_INT 112
24013: PUSH
24014: LD_INT 116
24016: PUSH
24017: LD_INT 117
24019: PUSH
24020: LD_INT 118
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 26562
24041: LD_INT 7
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24161
24049: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: LD_INT 5
24063: PUSH
24064: LD_INT 7
24066: PUSH
24067: LD_INT 11
24069: PUSH
24070: LD_INT 12
24072: PUSH
24073: LD_INT 15
24075: PUSH
24076: LD_INT 16
24078: PUSH
24079: LD_INT 20
24081: PUSH
24082: LD_INT 21
24084: PUSH
24085: LD_INT 22
24087: PUSH
24088: LD_INT 23
24090: PUSH
24091: LD_INT 25
24093: PUSH
24094: LD_INT 26
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 101
24115: PUSH
24116: LD_INT 102
24118: PUSH
24119: LD_INT 103
24121: PUSH
24122: LD_INT 105
24124: PUSH
24125: LD_INT 106
24127: PUSH
24128: LD_INT 108
24130: PUSH
24131: LD_INT 112
24133: PUSH
24134: LD_INT 116
24136: PUSH
24137: LD_INT 117
24139: PUSH
24140: LD_INT 118
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: ST_TO_ADDR
24159: GO 26562
24161: LD_INT 8
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24309
24169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24170: LD_ADDR_VAR 0 2
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 4
24180: PUSH
24181: LD_INT 5
24183: PUSH
24184: LD_INT 6
24186: PUSH
24187: LD_INT 7
24189: PUSH
24190: LD_INT 8
24192: PUSH
24193: LD_INT 11
24195: PUSH
24196: LD_INT 12
24198: PUSH
24199: LD_INT 15
24201: PUSH
24202: LD_INT 16
24204: PUSH
24205: LD_INT 20
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_INT 23
24216: PUSH
24217: LD_INT 25
24219: PUSH
24220: LD_INT 26
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 31
24228: PUSH
24229: LD_INT 32
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 101
24259: PUSH
24260: LD_INT 102
24262: PUSH
24263: LD_INT 103
24265: PUSH
24266: LD_INT 105
24268: PUSH
24269: LD_INT 106
24271: PUSH
24272: LD_INT 108
24274: PUSH
24275: LD_INT 109
24277: PUSH
24278: LD_INT 112
24280: PUSH
24281: LD_INT 116
24283: PUSH
24284: LD_INT 117
24286: PUSH
24287: LD_INT 118
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 26562
24309: LD_INT 9
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24465
24317: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24318: LD_ADDR_VAR 0 2
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 4
24328: PUSH
24329: LD_INT 5
24331: PUSH
24332: LD_INT 6
24334: PUSH
24335: LD_INT 7
24337: PUSH
24338: LD_INT 8
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: LD_INT 15
24349: PUSH
24350: LD_INT 16
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 25
24367: PUSH
24368: LD_INT 26
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 31
24379: PUSH
24380: LD_INT 32
24382: PUSH
24383: LD_INT 36
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 101
24411: PUSH
24412: LD_INT 102
24414: PUSH
24415: LD_INT 103
24417: PUSH
24418: LD_INT 105
24420: PUSH
24421: LD_INT 106
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: LD_INT 109
24429: PUSH
24430: LD_INT 112
24432: PUSH
24433: LD_INT 114
24435: PUSH
24436: LD_INT 116
24438: PUSH
24439: LD_INT 117
24441: PUSH
24442: LD_INT 118
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
24463: GO 26562
24465: LD_INT 10
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24669
24473: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 6
24490: PUSH
24491: LD_INT 7
24493: PUSH
24494: LD_INT 8
24496: PUSH
24497: LD_INT 9
24499: PUSH
24500: LD_INT 10
24502: PUSH
24503: LD_INT 11
24505: PUSH
24506: LD_INT 12
24508: PUSH
24509: LD_INT 13
24511: PUSH
24512: LD_INT 14
24514: PUSH
24515: LD_INT 15
24517: PUSH
24518: LD_INT 16
24520: PUSH
24521: LD_INT 17
24523: PUSH
24524: LD_INT 18
24526: PUSH
24527: LD_INT 19
24529: PUSH
24530: LD_INT 20
24532: PUSH
24533: LD_INT 21
24535: PUSH
24536: LD_INT 22
24538: PUSH
24539: LD_INT 23
24541: PUSH
24542: LD_INT 24
24544: PUSH
24545: LD_INT 25
24547: PUSH
24548: LD_INT 26
24550: PUSH
24551: LD_INT 28
24553: PUSH
24554: LD_INT 30
24556: PUSH
24557: LD_INT 31
24559: PUSH
24560: LD_INT 32
24562: PUSH
24563: LD_INT 36
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 101
24599: PUSH
24600: LD_INT 102
24602: PUSH
24603: LD_INT 103
24605: PUSH
24606: LD_INT 104
24608: PUSH
24609: LD_INT 105
24611: PUSH
24612: LD_INT 106
24614: PUSH
24615: LD_INT 107
24617: PUSH
24618: LD_INT 108
24620: PUSH
24621: LD_INT 109
24623: PUSH
24624: LD_INT 110
24626: PUSH
24627: LD_INT 111
24629: PUSH
24630: LD_INT 112
24632: PUSH
24633: LD_INT 114
24635: PUSH
24636: LD_INT 116
24638: PUSH
24639: LD_INT 117
24641: PUSH
24642: LD_INT 118
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: ST_TO_ADDR
24667: GO 26562
24669: LD_INT 11
24671: DOUBLE
24672: EQUAL
24673: IFTRUE 24677
24675: GO 24881
24677: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: LD_INT 4
24691: PUSH
24692: LD_INT 5
24694: PUSH
24695: LD_INT 6
24697: PUSH
24698: LD_INT 7
24700: PUSH
24701: LD_INT 8
24703: PUSH
24704: LD_INT 9
24706: PUSH
24707: LD_INT 10
24709: PUSH
24710: LD_INT 11
24712: PUSH
24713: LD_INT 12
24715: PUSH
24716: LD_INT 13
24718: PUSH
24719: LD_INT 14
24721: PUSH
24722: LD_INT 15
24724: PUSH
24725: LD_INT 16
24727: PUSH
24728: LD_INT 17
24730: PUSH
24731: LD_INT 18
24733: PUSH
24734: LD_INT 19
24736: PUSH
24737: LD_INT 20
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 22
24745: PUSH
24746: LD_INT 23
24748: PUSH
24749: LD_INT 24
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 26
24757: PUSH
24758: LD_INT 28
24760: PUSH
24761: LD_INT 30
24763: PUSH
24764: LD_INT 31
24766: PUSH
24767: LD_INT 32
24769: PUSH
24770: LD_INT 34
24772: PUSH
24773: LD_INT 36
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 101
24811: PUSH
24812: LD_INT 102
24814: PUSH
24815: LD_INT 103
24817: PUSH
24818: LD_INT 104
24820: PUSH
24821: LD_INT 105
24823: PUSH
24824: LD_INT 106
24826: PUSH
24827: LD_INT 107
24829: PUSH
24830: LD_INT 108
24832: PUSH
24833: LD_INT 109
24835: PUSH
24836: LD_INT 110
24838: PUSH
24839: LD_INT 111
24841: PUSH
24842: LD_INT 112
24844: PUSH
24845: LD_INT 114
24847: PUSH
24848: LD_INT 116
24850: PUSH
24851: LD_INT 117
24853: PUSH
24854: LD_INT 118
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 26562
24881: LD_INT 12
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 25109
24889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24890: LD_ADDR_VAR 0 2
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: LD_INT 6
24912: PUSH
24913: LD_INT 7
24915: PUSH
24916: LD_INT 8
24918: PUSH
24919: LD_INT 9
24921: PUSH
24922: LD_INT 10
24924: PUSH
24925: LD_INT 11
24927: PUSH
24928: LD_INT 12
24930: PUSH
24931: LD_INT 13
24933: PUSH
24934: LD_INT 14
24936: PUSH
24937: LD_INT 15
24939: PUSH
24940: LD_INT 16
24942: PUSH
24943: LD_INT 17
24945: PUSH
24946: LD_INT 18
24948: PUSH
24949: LD_INT 19
24951: PUSH
24952: LD_INT 20
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: LD_INT 25
24969: PUSH
24970: LD_INT 26
24972: PUSH
24973: LD_INT 27
24975: PUSH
24976: LD_INT 28
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: LD_INT 31
24984: PUSH
24985: LD_INT 32
24987: PUSH
24988: LD_INT 33
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_INT 36
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 101
25035: PUSH
25036: LD_INT 102
25038: PUSH
25039: LD_INT 103
25041: PUSH
25042: LD_INT 104
25044: PUSH
25045: LD_INT 105
25047: PUSH
25048: LD_INT 106
25050: PUSH
25051: LD_INT 107
25053: PUSH
25054: LD_INT 108
25056: PUSH
25057: LD_INT 109
25059: PUSH
25060: LD_INT 110
25062: PUSH
25063: LD_INT 111
25065: PUSH
25066: LD_INT 112
25068: PUSH
25069: LD_INT 113
25071: PUSH
25072: LD_INT 114
25074: PUSH
25075: LD_INT 116
25077: PUSH
25078: LD_INT 117
25080: PUSH
25081: LD_INT 118
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 26562
25109: LD_INT 13
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25325
25117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 4
25134: PUSH
25135: LD_INT 5
25137: PUSH
25138: LD_INT 8
25140: PUSH
25141: LD_INT 9
25143: PUSH
25144: LD_INT 10
25146: PUSH
25147: LD_INT 11
25149: PUSH
25150: LD_INT 12
25152: PUSH
25153: LD_INT 14
25155: PUSH
25156: LD_INT 15
25158: PUSH
25159: LD_INT 16
25161: PUSH
25162: LD_INT 17
25164: PUSH
25165: LD_INT 18
25167: PUSH
25168: LD_INT 19
25170: PUSH
25171: LD_INT 20
25173: PUSH
25174: LD_INT 21
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_INT 23
25182: PUSH
25183: LD_INT 24
25185: PUSH
25186: LD_INT 25
25188: PUSH
25189: LD_INT 26
25191: PUSH
25192: LD_INT 27
25194: PUSH
25195: LD_INT 28
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 31
25203: PUSH
25204: LD_INT 32
25206: PUSH
25207: LD_INT 33
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 36
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 101
25251: PUSH
25252: LD_INT 102
25254: PUSH
25255: LD_INT 103
25257: PUSH
25258: LD_INT 104
25260: PUSH
25261: LD_INT 105
25263: PUSH
25264: LD_INT 106
25266: PUSH
25267: LD_INT 107
25269: PUSH
25270: LD_INT 108
25272: PUSH
25273: LD_INT 109
25275: PUSH
25276: LD_INT 110
25278: PUSH
25279: LD_INT 111
25281: PUSH
25282: LD_INT 112
25284: PUSH
25285: LD_INT 113
25287: PUSH
25288: LD_INT 114
25290: PUSH
25291: LD_INT 116
25293: PUSH
25294: LD_INT 117
25296: PUSH
25297: LD_INT 118
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 26562
25325: LD_INT 14
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25557
25333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: LD_INT 4
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: LD_INT 6
25356: PUSH
25357: LD_INT 7
25359: PUSH
25360: LD_INT 8
25362: PUSH
25363: LD_INT 9
25365: PUSH
25366: LD_INT 10
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 12
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: LD_INT 15
25383: PUSH
25384: LD_INT 16
25386: PUSH
25387: LD_INT 17
25389: PUSH
25390: LD_INT 18
25392: PUSH
25393: LD_INT 19
25395: PUSH
25396: LD_INT 20
25398: PUSH
25399: LD_INT 21
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_INT 23
25407: PUSH
25408: LD_INT 24
25410: PUSH
25411: LD_INT 25
25413: PUSH
25414: LD_INT 26
25416: PUSH
25417: LD_INT 27
25419: PUSH
25420: LD_INT 28
25422: PUSH
25423: LD_INT 29
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: LD_INT 31
25431: PUSH
25432: LD_INT 32
25434: PUSH
25435: LD_INT 33
25437: PUSH
25438: LD_INT 34
25440: PUSH
25441: LD_INT 36
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 101
25483: PUSH
25484: LD_INT 102
25486: PUSH
25487: LD_INT 103
25489: PUSH
25490: LD_INT 104
25492: PUSH
25493: LD_INT 105
25495: PUSH
25496: LD_INT 106
25498: PUSH
25499: LD_INT 107
25501: PUSH
25502: LD_INT 108
25504: PUSH
25505: LD_INT 109
25507: PUSH
25508: LD_INT 110
25510: PUSH
25511: LD_INT 111
25513: PUSH
25514: LD_INT 112
25516: PUSH
25517: LD_INT 113
25519: PUSH
25520: LD_INT 114
25522: PUSH
25523: LD_INT 116
25525: PUSH
25526: LD_INT 117
25528: PUSH
25529: LD_INT 118
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: ST_TO_ADDR
25555: GO 26562
25557: LD_INT 15
25559: DOUBLE
25560: EQUAL
25561: IFTRUE 25565
25563: GO 25789
25565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25566: LD_ADDR_VAR 0 2
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: LD_INT 6
25588: PUSH
25589: LD_INT 7
25591: PUSH
25592: LD_INT 8
25594: PUSH
25595: LD_INT 9
25597: PUSH
25598: LD_INT 10
25600: PUSH
25601: LD_INT 11
25603: PUSH
25604: LD_INT 12
25606: PUSH
25607: LD_INT 13
25609: PUSH
25610: LD_INT 14
25612: PUSH
25613: LD_INT 15
25615: PUSH
25616: LD_INT 16
25618: PUSH
25619: LD_INT 17
25621: PUSH
25622: LD_INT 18
25624: PUSH
25625: LD_INT 19
25627: PUSH
25628: LD_INT 20
25630: PUSH
25631: LD_INT 21
25633: PUSH
25634: LD_INT 22
25636: PUSH
25637: LD_INT 23
25639: PUSH
25640: LD_INT 24
25642: PUSH
25643: LD_INT 25
25645: PUSH
25646: LD_INT 26
25648: PUSH
25649: LD_INT 27
25651: PUSH
25652: LD_INT 28
25654: PUSH
25655: LD_INT 29
25657: PUSH
25658: LD_INT 30
25660: PUSH
25661: LD_INT 31
25663: PUSH
25664: LD_INT 32
25666: PUSH
25667: LD_INT 33
25669: PUSH
25670: LD_INT 34
25672: PUSH
25673: LD_INT 36
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 101
25715: PUSH
25716: LD_INT 102
25718: PUSH
25719: LD_INT 103
25721: PUSH
25722: LD_INT 104
25724: PUSH
25725: LD_INT 105
25727: PUSH
25728: LD_INT 106
25730: PUSH
25731: LD_INT 107
25733: PUSH
25734: LD_INT 108
25736: PUSH
25737: LD_INT 109
25739: PUSH
25740: LD_INT 110
25742: PUSH
25743: LD_INT 111
25745: PUSH
25746: LD_INT 112
25748: PUSH
25749: LD_INT 113
25751: PUSH
25752: LD_INT 114
25754: PUSH
25755: LD_INT 116
25757: PUSH
25758: LD_INT 117
25760: PUSH
25761: LD_INT 118
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: ST_TO_ADDR
25787: GO 26562
25789: LD_INT 16
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25933
25797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25798: LD_ADDR_VAR 0 2
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: LD_INT 5
25811: PUSH
25812: LD_INT 7
25814: PUSH
25815: LD_INT 11
25817: PUSH
25818: LD_INT 12
25820: PUSH
25821: LD_INT 15
25823: PUSH
25824: LD_INT 16
25826: PUSH
25827: LD_INT 20
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_INT 23
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 26
25844: PUSH
25845: LD_INT 30
25847: PUSH
25848: LD_INT 31
25850: PUSH
25851: LD_INT 32
25853: PUSH
25854: LD_INT 33
25856: PUSH
25857: LD_INT 34
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 101
25883: PUSH
25884: LD_INT 102
25886: PUSH
25887: LD_INT 103
25889: PUSH
25890: LD_INT 106
25892: PUSH
25893: LD_INT 108
25895: PUSH
25896: LD_INT 112
25898: PUSH
25899: LD_INT 113
25901: PUSH
25902: LD_INT 114
25904: PUSH
25905: LD_INT 116
25907: PUSH
25908: LD_INT 117
25910: PUSH
25911: LD_INT 118
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: ST_TO_ADDR
25931: GO 26562
25933: LD_INT 17
25935: DOUBLE
25936: EQUAL
25937: IFTRUE 25941
25939: GO 26165
25941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: LD_INT 4
25958: PUSH
25959: LD_INT 5
25961: PUSH
25962: LD_INT 6
25964: PUSH
25965: LD_INT 7
25967: PUSH
25968: LD_INT 8
25970: PUSH
25971: LD_INT 9
25973: PUSH
25974: LD_INT 10
25976: PUSH
25977: LD_INT 11
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: LD_INT 13
25985: PUSH
25986: LD_INT 14
25988: PUSH
25989: LD_INT 15
25991: PUSH
25992: LD_INT 16
25994: PUSH
25995: LD_INT 17
25997: PUSH
25998: LD_INT 18
26000: PUSH
26001: LD_INT 19
26003: PUSH
26004: LD_INT 20
26006: PUSH
26007: LD_INT 21
26009: PUSH
26010: LD_INT 22
26012: PUSH
26013: LD_INT 23
26015: PUSH
26016: LD_INT 24
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 26
26024: PUSH
26025: LD_INT 27
26027: PUSH
26028: LD_INT 28
26030: PUSH
26031: LD_INT 29
26033: PUSH
26034: LD_INT 30
26036: PUSH
26037: LD_INT 31
26039: PUSH
26040: LD_INT 32
26042: PUSH
26043: LD_INT 33
26045: PUSH
26046: LD_INT 34
26048: PUSH
26049: LD_INT 36
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 101
26091: PUSH
26092: LD_INT 102
26094: PUSH
26095: LD_INT 103
26097: PUSH
26098: LD_INT 104
26100: PUSH
26101: LD_INT 105
26103: PUSH
26104: LD_INT 106
26106: PUSH
26107: LD_INT 107
26109: PUSH
26110: LD_INT 108
26112: PUSH
26113: LD_INT 109
26115: PUSH
26116: LD_INT 110
26118: PUSH
26119: LD_INT 111
26121: PUSH
26122: LD_INT 112
26124: PUSH
26125: LD_INT 113
26127: PUSH
26128: LD_INT 114
26130: PUSH
26131: LD_INT 116
26133: PUSH
26134: LD_INT 117
26136: PUSH
26137: LD_INT 118
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: ST_TO_ADDR
26163: GO 26562
26165: LD_INT 18
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26321
26173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: LD_INT 5
26187: PUSH
26188: LD_INT 7
26190: PUSH
26191: LD_INT 11
26193: PUSH
26194: LD_INT 12
26196: PUSH
26197: LD_INT 15
26199: PUSH
26200: LD_INT 16
26202: PUSH
26203: LD_INT 20
26205: PUSH
26206: LD_INT 21
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_INT 23
26214: PUSH
26215: LD_INT 25
26217: PUSH
26218: LD_INT 26
26220: PUSH
26221: LD_INT 30
26223: PUSH
26224: LD_INT 31
26226: PUSH
26227: LD_INT 32
26229: PUSH
26230: LD_INT 33
26232: PUSH
26233: LD_INT 34
26235: PUSH
26236: LD_INT 35
26238: PUSH
26239: LD_INT 36
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 101
26267: PUSH
26268: LD_INT 102
26270: PUSH
26271: LD_INT 103
26273: PUSH
26274: LD_INT 106
26276: PUSH
26277: LD_INT 108
26279: PUSH
26280: LD_INT 112
26282: PUSH
26283: LD_INT 113
26285: PUSH
26286: LD_INT 114
26288: PUSH
26289: LD_INT 115
26291: PUSH
26292: LD_INT 116
26294: PUSH
26295: LD_INT 117
26297: PUSH
26298: LD_INT 118
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26562
26321: LD_INT 19
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26561
26329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26330: LD_ADDR_VAR 0 2
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 3
26343: PUSH
26344: LD_INT 4
26346: PUSH
26347: LD_INT 5
26349: PUSH
26350: LD_INT 6
26352: PUSH
26353: LD_INT 7
26355: PUSH
26356: LD_INT 8
26358: PUSH
26359: LD_INT 9
26361: PUSH
26362: LD_INT 10
26364: PUSH
26365: LD_INT 11
26367: PUSH
26368: LD_INT 12
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: LD_INT 15
26379: PUSH
26380: LD_INT 16
26382: PUSH
26383: LD_INT 17
26385: PUSH
26386: LD_INT 18
26388: PUSH
26389: LD_INT 19
26391: PUSH
26392: LD_INT 20
26394: PUSH
26395: LD_INT 21
26397: PUSH
26398: LD_INT 22
26400: PUSH
26401: LD_INT 23
26403: PUSH
26404: LD_INT 24
26406: PUSH
26407: LD_INT 25
26409: PUSH
26410: LD_INT 26
26412: PUSH
26413: LD_INT 27
26415: PUSH
26416: LD_INT 28
26418: PUSH
26419: LD_INT 29
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 31
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: LD_INT 33
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 35
26439: PUSH
26440: LD_INT 36
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 101
26483: PUSH
26484: LD_INT 102
26486: PUSH
26487: LD_INT 103
26489: PUSH
26490: LD_INT 104
26492: PUSH
26493: LD_INT 105
26495: PUSH
26496: LD_INT 106
26498: PUSH
26499: LD_INT 107
26501: PUSH
26502: LD_INT 108
26504: PUSH
26505: LD_INT 109
26507: PUSH
26508: LD_INT 110
26510: PUSH
26511: LD_INT 111
26513: PUSH
26514: LD_INT 112
26516: PUSH
26517: LD_INT 113
26519: PUSH
26520: LD_INT 114
26522: PUSH
26523: LD_INT 115
26525: PUSH
26526: LD_INT 116
26528: PUSH
26529: LD_INT 117
26531: PUSH
26532: LD_INT 118
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: ST_TO_ADDR
26559: GO 26562
26561: POP
// end else
26562: GO 26793
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 2
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: LD_INT 5
26583: PUSH
26584: LD_INT 6
26586: PUSH
26587: LD_INT 7
26589: PUSH
26590: LD_INT 8
26592: PUSH
26593: LD_INT 9
26595: PUSH
26596: LD_INT 10
26598: PUSH
26599: LD_INT 11
26601: PUSH
26602: LD_INT 12
26604: PUSH
26605: LD_INT 13
26607: PUSH
26608: LD_INT 14
26610: PUSH
26611: LD_INT 15
26613: PUSH
26614: LD_INT 16
26616: PUSH
26617: LD_INT 17
26619: PUSH
26620: LD_INT 18
26622: PUSH
26623: LD_INT 19
26625: PUSH
26626: LD_INT 20
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 24
26640: PUSH
26641: LD_INT 25
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: LD_INT 27
26649: PUSH
26650: LD_INT 28
26652: PUSH
26653: LD_INT 29
26655: PUSH
26656: LD_INT 30
26658: PUSH
26659: LD_INT 31
26661: PUSH
26662: LD_INT 32
26664: PUSH
26665: LD_INT 33
26667: PUSH
26668: LD_INT 34
26670: PUSH
26671: LD_INT 35
26673: PUSH
26674: LD_INT 36
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 101
26717: PUSH
26718: LD_INT 102
26720: PUSH
26721: LD_INT 103
26723: PUSH
26724: LD_INT 104
26726: PUSH
26727: LD_INT 105
26729: PUSH
26730: LD_INT 106
26732: PUSH
26733: LD_INT 107
26735: PUSH
26736: LD_INT 108
26738: PUSH
26739: LD_INT 109
26741: PUSH
26742: LD_INT 110
26744: PUSH
26745: LD_INT 111
26747: PUSH
26748: LD_INT 112
26750: PUSH
26751: LD_INT 113
26753: PUSH
26754: LD_INT 114
26756: PUSH
26757: LD_INT 115
26759: PUSH
26760: LD_INT 116
26762: PUSH
26763: LD_INT 117
26765: PUSH
26766: LD_INT 118
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// if result then
26793: LD_VAR 0 2
26797: IFFALSE 27583
// begin normal :=  ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: LD_STRING 
26806: ST_TO_ADDR
// hardcore :=  ;
26807: LD_ADDR_VAR 0 6
26811: PUSH
26812: LD_STRING 
26814: ST_TO_ADDR
// active :=  ;
26815: LD_ADDR_VAR 0 7
26819: PUSH
26820: LD_STRING 
26822: ST_TO_ADDR
// for i = 1 to normalCounter do
26823: LD_ADDR_VAR 0 8
26827: PUSH
26828: DOUBLE
26829: LD_INT 1
26831: DEC
26832: ST_TO_ADDR
26833: LD_EXP 52
26837: PUSH
26838: FOR_TO
26839: IFFALSE 26940
// begin tmp := 0 ;
26841: LD_ADDR_VAR 0 3
26845: PUSH
26846: LD_STRING 0
26848: ST_TO_ADDR
// if result [ 1 ] then
26849: LD_VAR 0 2
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: IFFALSE 26922
// if result [ 1 ] [ 1 ] = i then
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 8
26876: EQUAL
26877: IFFALSE 26922
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_INT 1
26891: PPUSH
26892: LD_VAR 0 2
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: LD_INT 1
26903: PPUSH
26904: CALL_OW 3
26908: PPUSH
26909: CALL_OW 1
26913: ST_TO_ADDR
// tmp := 1 ;
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_STRING 1
26921: ST_TO_ADDR
// end ; normal := normal & tmp ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 5
26931: PUSH
26932: LD_VAR 0 3
26936: STR
26937: ST_TO_ADDR
// end ;
26938: GO 26838
26940: POP
26941: POP
// for i = 1 to hardcoreCounter do
26942: LD_ADDR_VAR 0 8
26946: PUSH
26947: DOUBLE
26948: LD_INT 1
26950: DEC
26951: ST_TO_ADDR
26952: LD_EXP 53
26956: PUSH
26957: FOR_TO
26958: IFFALSE 27063
// begin tmp := 0 ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_STRING 0
26967: ST_TO_ADDR
// if result [ 2 ] then
26968: LD_VAR 0 2
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: IFFALSE 27045
// if result [ 2 ] [ 1 ] = 100 + i then
26978: LD_VAR 0 2
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_VAR 0 8
26998: PLUS
26999: EQUAL
27000: IFFALSE 27045
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27002: LD_ADDR_VAR 0 2
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: LD_INT 2
27014: PPUSH
27015: LD_VAR 0 2
27019: PUSH
27020: LD_INT 2
27022: ARRAY
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 3
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// tmp := 1 ;
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_STRING 1
27044: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27045: LD_ADDR_VAR 0 6
27049: PUSH
27050: LD_VAR 0 6
27054: PUSH
27055: LD_VAR 0 3
27059: STR
27060: ST_TO_ADDR
// end ;
27061: GO 26957
27063: POP
27064: POP
// if isGameLoad then
27065: LD_VAR 0 1
27069: IFFALSE 27544
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27071: LD_ADDR_VAR 0 4
27075: PUSH
27076: LD_EXP 56
27080: PUSH
27081: LD_EXP 55
27085: PUSH
27086: LD_EXP 57
27090: PUSH
27091: LD_EXP 54
27095: PUSH
27096: LD_EXP 58
27100: PUSH
27101: LD_EXP 59
27105: PUSH
27106: LD_EXP 60
27110: PUSH
27111: LD_EXP 61
27115: PUSH
27116: LD_EXP 62
27120: PUSH
27121: LD_EXP 63
27125: PUSH
27126: LD_EXP 64
27130: PUSH
27131: LD_EXP 65
27135: PUSH
27136: LD_EXP 66
27140: PUSH
27141: LD_EXP 67
27145: PUSH
27146: LD_EXP 75
27150: PUSH
27151: LD_EXP 76
27155: PUSH
27156: LD_EXP 77
27160: PUSH
27161: LD_EXP 78
27165: PUSH
27166: LD_EXP 80
27170: PUSH
27171: LD_EXP 81
27175: PUSH
27176: LD_EXP 82
27180: PUSH
27181: LD_EXP 85
27185: PUSH
27186: LD_EXP 87
27190: PUSH
27191: LD_EXP 88
27195: PUSH
27196: LD_EXP 89
27200: PUSH
27201: LD_EXP 91
27205: PUSH
27206: LD_EXP 92
27210: PUSH
27211: LD_EXP 95
27215: PUSH
27216: LD_EXP 96
27220: PUSH
27221: LD_EXP 97
27225: PUSH
27226: LD_EXP 98
27230: PUSH
27231: LD_EXP 99
27235: PUSH
27236: LD_EXP 100
27240: PUSH
27241: LD_EXP 101
27245: PUSH
27246: LD_EXP 102
27250: PUSH
27251: LD_EXP 103
27255: PUSH
27256: LD_EXP 68
27260: PUSH
27261: LD_EXP 69
27265: PUSH
27266: LD_EXP 72
27270: PUSH
27271: LD_EXP 73
27275: PUSH
27276: LD_EXP 74
27280: PUSH
27281: LD_EXP 70
27285: PUSH
27286: LD_EXP 71
27290: PUSH
27291: LD_EXP 79
27295: PUSH
27296: LD_EXP 83
27300: PUSH
27301: LD_EXP 84
27305: PUSH
27306: LD_EXP 86
27310: PUSH
27311: LD_EXP 90
27315: PUSH
27316: LD_EXP 93
27320: PUSH
27321: LD_EXP 94
27325: PUSH
27326: LD_EXP 104
27330: PUSH
27331: LD_EXP 105
27335: PUSH
27336: LD_EXP 106
27340: PUSH
27341: LD_EXP 107
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// tmp :=  ;
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_STRING 
27409: ST_TO_ADDR
// for i = 1 to normalCounter do
27410: LD_ADDR_VAR 0 8
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: LD_EXP 52
27424: PUSH
27425: FOR_TO
27426: IFFALSE 27462
// begin if flags [ i ] then
27428: LD_VAR 0 4
27432: PUSH
27433: LD_VAR 0 8
27437: ARRAY
27438: IFFALSE 27460
// tmp := tmp & i & ; ;
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_VAR 0 3
27449: PUSH
27450: LD_VAR 0 8
27454: STR
27455: PUSH
27456: LD_STRING ;
27458: STR
27459: ST_TO_ADDR
// end ;
27460: GO 27425
27462: POP
27463: POP
// for i = 1 to hardcoreCounter do
27464: LD_ADDR_VAR 0 8
27468: PUSH
27469: DOUBLE
27470: LD_INT 1
27472: DEC
27473: ST_TO_ADDR
27474: LD_EXP 53
27478: PUSH
27479: FOR_TO
27480: IFFALSE 27526
// begin if flags [ normalCounter + i ] then
27482: LD_VAR 0 4
27486: PUSH
27487: LD_EXP 52
27491: PUSH
27492: LD_VAR 0 8
27496: PLUS
27497: ARRAY
27498: IFFALSE 27524
// tmp := tmp & ( 100 + i ) & ; ;
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_VAR 0 3
27509: PUSH
27510: LD_INT 100
27512: PUSH
27513: LD_VAR 0 8
27517: PLUS
27518: STR
27519: PUSH
27520: LD_STRING ;
27522: STR
27523: ST_TO_ADDR
// end ;
27524: GO 27479
27526: POP
27527: POP
// if tmp then
27528: LD_VAR 0 3
27532: IFFALSE 27544
// active := tmp ;
27534: LD_ADDR_VAR 0 7
27538: PUSH
27539: LD_VAR 0 3
27543: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27544: LD_STRING getStreamItemsFromMission("
27546: PUSH
27547: LD_VAR 0 5
27551: STR
27552: PUSH
27553: LD_STRING ","
27555: STR
27556: PUSH
27557: LD_VAR 0 6
27561: STR
27562: PUSH
27563: LD_STRING ","
27565: STR
27566: PUSH
27567: LD_VAR 0 7
27571: STR
27572: PUSH
27573: LD_STRING ")
27575: STR
27576: PPUSH
27577: CALL_OW 559
// end else
27581: GO 27590
// ToLua ( getStreamItemsFromMission("","","") ) ;
27583: LD_STRING getStreamItemsFromMission("","","")
27585: PPUSH
27586: CALL_OW 559
// end ;
27590: LD_VAR 0 2
27594: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27595: LD_EXP 51
27599: PUSH
27600: LD_EXP 56
27604: AND
27605: IFFALSE 27729
27607: GO 27609
27609: DISABLE
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
// begin enable ;
27614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_INT 22
27622: PUSH
27623: LD_OWVAR 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 34
27637: PUSH
27638: LD_INT 7
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 34
27647: PUSH
27648: LD_INT 45
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 34
27657: PUSH
27658: LD_INT 28
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 34
27667: PUSH
27668: LD_INT 47
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// if not tmp then
27691: LD_VAR 0 2
27695: NOT
27696: IFFALSE 27700
// exit ;
27698: GO 27729
// for i in tmp do
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_VAR 0 2
27709: PUSH
27710: FOR_IN
27711: IFFALSE 27727
// begin SetLives ( i , 0 ) ;
27713: LD_VAR 0 1
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: CALL_OW 234
// end ;
27725: GO 27710
27727: POP
27728: POP
// end ;
27729: PPOPN 2
27731: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27732: LD_EXP 51
27736: PUSH
27737: LD_EXP 57
27741: AND
27742: IFFALSE 27826
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
// begin enable ;
27751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 32
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PPUSH
27783: CALL_OW 69
27787: ST_TO_ADDR
// if not tmp then
27788: LD_VAR 0 2
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27826
// for i in tmp do
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: FOR_IN
27808: IFFALSE 27824
// begin SetLives ( i , 0 ) ;
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_INT 0
27817: PPUSH
27818: CALL_OW 234
// end ;
27822: GO 27807
27824: POP
27825: POP
// end ;
27826: PPOPN 2
27828: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27829: LD_EXP 51
27833: PUSH
27834: LD_EXP 54
27838: AND
27839: IFFALSE 27932
27841: GO 27843
27843: DISABLE
27844: LD_INT 0
27846: PPUSH
// begin enable ;
27847: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_OWVAR 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 25
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 25
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 25
27890: PUSH
27891: LD_INT 8
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: PUSH
27913: FOR_IN
27914: IFFALSE 27930
// begin SetClass ( i , 1 ) ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL_OW 336
// end ;
27928: GO 27913
27930: POP
27931: POP
// end ;
27932: PPOPN 1
27934: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27935: LD_EXP 51
27939: PUSH
27940: LD_EXP 55
27944: AND
27945: PUSH
27946: LD_OWVAR 65
27950: PUSH
27951: LD_INT 7
27953: LESS
27954: AND
27955: IFFALSE 27969
27957: GO 27959
27959: DISABLE
// begin enable ;
27960: ENABLE
// game_speed := 7 ;
27961: LD_ADDR_OWVAR 65
27965: PUSH
27966: LD_INT 7
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27970: LD_EXP 51
27974: PUSH
27975: LD_EXP 58
27979: AND
27980: IFFALSE 28182
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_INT 81
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 21
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 3
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28182
// if tmp > 5 then
28035: LD_VAR 0 3
28039: PUSH
28040: LD_INT 5
28042: GREATER
28043: IFFALSE 28055
// k := 5 else
28045: LD_ADDR_VAR 0 2
28049: PUSH
28050: LD_INT 5
28052: ST_TO_ADDR
28053: GO 28065
// k := tmp ;
28055: LD_ADDR_VAR 0 2
28059: PUSH
28060: LD_VAR 0 3
28064: ST_TO_ADDR
// for i := 1 to k do
28065: LD_ADDR_VAR 0 1
28069: PUSH
28070: DOUBLE
28071: LD_INT 1
28073: DEC
28074: ST_TO_ADDR
28075: LD_VAR 0 2
28079: PUSH
28080: FOR_TO
28081: IFFALSE 28180
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28083: LD_VAR 0 3
28087: PUSH
28088: LD_VAR 0 1
28092: ARRAY
28093: PPUSH
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 4
28101: MOD
28102: PUSH
28103: LD_INT 1
28105: PLUS
28106: PPUSH
28107: CALL_OW 259
28111: PUSH
28112: LD_INT 10
28114: LESS
28115: IFFALSE 28178
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28117: LD_VAR 0 3
28121: PUSH
28122: LD_VAR 0 1
28126: ARRAY
28127: PPUSH
28128: LD_VAR 0 1
28132: PUSH
28133: LD_INT 4
28135: MOD
28136: PUSH
28137: LD_INT 1
28139: PLUS
28140: PPUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PPUSH
28152: LD_VAR 0 1
28156: PUSH
28157: LD_INT 4
28159: MOD
28160: PUSH
28161: LD_INT 1
28163: PLUS
28164: PPUSH
28165: CALL_OW 259
28169: PUSH
28170: LD_INT 1
28172: PLUS
28173: PPUSH
28174: CALL_OW 237
28178: GO 28080
28180: POP
28181: POP
// end ;
28182: PPOPN 3
28184: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28185: LD_EXP 51
28189: PUSH
28190: LD_EXP 59
28194: AND
28195: IFFALSE 28215
28197: GO 28199
28199: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28200: LD_INT 4
28202: PPUSH
28203: LD_OWVAR 2
28207: PPUSH
28208: LD_INT 0
28210: PPUSH
28211: CALL_OW 324
28215: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28216: LD_EXP 51
28220: PUSH
28221: LD_EXP 88
28225: AND
28226: IFFALSE 28246
28228: GO 28230
28230: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28231: LD_INT 19
28233: PPUSH
28234: LD_OWVAR 2
28238: PPUSH
28239: LD_INT 0
28241: PPUSH
28242: CALL_OW 324
28246: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28247: LD_EXP 51
28251: PUSH
28252: LD_EXP 60
28256: AND
28257: IFFALSE 28359
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
// begin enable ;
28266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28267: LD_ADDR_VAR 0 2
28271: PUSH
28272: LD_INT 22
28274: PUSH
28275: LD_OWVAR 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 34
28289: PUSH
28290: LD_INT 11
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 34
28299: PUSH
28300: LD_INT 30
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: ST_TO_ADDR
// if not tmp then
28321: LD_VAR 0 2
28325: NOT
28326: IFFALSE 28330
// exit ;
28328: GO 28359
// for i in tmp do
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_VAR 0 2
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28357
// begin SetLives ( i , 0 ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_INT 0
28350: PPUSH
28351: CALL_OW 234
// end ;
28355: GO 28340
28357: POP
28358: POP
// end ;
28359: PPOPN 2
28361: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28362: LD_EXP 51
28366: PUSH
28367: LD_EXP 61
28371: AND
28372: IFFALSE 28392
28374: GO 28376
28376: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28377: LD_INT 32
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 0
28387: PPUSH
28388: CALL_OW 324
28392: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28393: LD_EXP 51
28397: PUSH
28398: LD_EXP 62
28402: AND
28403: IFFALSE 28584
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
28412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28413: LD_ADDR_VAR 0 2
28417: PUSH
28418: LD_INT 22
28420: PUSH
28421: LD_OWVAR 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 33
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: ST_TO_ADDR
// if not tmp then
28449: LD_VAR 0 2
28453: NOT
28454: IFFALSE 28458
// exit ;
28456: GO 28584
// side := 0 ;
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
// for i := 1 to 8 do
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: DOUBLE
28472: LD_INT 1
28474: DEC
28475: ST_TO_ADDR
28476: LD_INT 8
28478: PUSH
28479: FOR_TO
28480: IFFALSE 28528
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28482: LD_OWVAR 2
28486: PUSH
28487: LD_VAR 0 1
28491: NONEQUAL
28492: PUSH
28493: LD_OWVAR 2
28497: PPUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 81
28507: PUSH
28508: LD_INT 2
28510: EQUAL
28511: AND
28512: IFFALSE 28526
// begin side := i ;
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_VAR 0 1
28523: ST_TO_ADDR
// break ;
28524: GO 28528
// end ;
28526: GO 28479
28528: POP
28529: POP
// if not side then
28530: LD_VAR 0 3
28534: NOT
28535: IFFALSE 28539
// exit ;
28537: GO 28584
// for i := 1 to tmp do
28539: LD_ADDR_VAR 0 1
28543: PUSH
28544: DOUBLE
28545: LD_INT 1
28547: DEC
28548: ST_TO_ADDR
28549: LD_VAR 0 2
28553: PUSH
28554: FOR_TO
28555: IFFALSE 28582
// if Prob ( 60 ) then
28557: LD_INT 60
28559: PPUSH
28560: CALL_OW 13
28564: IFFALSE 28580
// SetSide ( i , side ) ;
28566: LD_VAR 0 1
28570: PPUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: CALL_OW 235
28580: GO 28554
28582: POP
28583: POP
// end ;
28584: PPOPN 3
28586: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28587: LD_EXP 51
28591: PUSH
28592: LD_EXP 64
28596: AND
28597: IFFALSE 28716
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28605: LD_ADDR_VAR 0 1
28609: PUSH
28610: LD_INT 22
28612: PUSH
28613: LD_OWVAR 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 21
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: LD_INT 23
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: PPUSH
28654: CALL_OW 69
28658: PUSH
28659: FOR_IN
28660: IFFALSE 28714
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 257
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 4
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: IN
28690: IFFALSE 28712
// SetClass ( un , rand ( 1 , 4 ) ) ;
28692: LD_VAR 0 1
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: LD_INT 4
28702: PPUSH
28703: CALL_OW 12
28707: PPUSH
28708: CALL_OW 336
28712: GO 28659
28714: POP
28715: POP
// end ;
28716: PPOPN 1
28718: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28719: LD_EXP 51
28723: PUSH
28724: LD_EXP 63
28728: AND
28729: IFFALSE 28808
28731: GO 28733
28733: DISABLE
28734: LD_INT 0
28736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_INT 22
28744: PUSH
28745: LD_OWVAR 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 21
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// if not tmp then
28773: LD_VAR 0 1
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 28808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28782: LD_VAR 0 1
28786: PUSH
28787: LD_INT 1
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 12
28799: ARRAY
28800: PPUSH
28801: LD_INT 100
28803: PPUSH
28804: CALL_OW 234
// end ;
28808: PPOPN 1
28810: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28811: LD_EXP 51
28815: PUSH
28816: LD_EXP 65
28820: AND
28821: IFFALSE 28919
28823: GO 28825
28825: DISABLE
28826: LD_INT 0
28828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28829: LD_ADDR_VAR 0 1
28833: PUSH
28834: LD_INT 22
28836: PUSH
28837: LD_OWVAR 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 21
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: ST_TO_ADDR
// if not tmp then
28865: LD_VAR 0 1
28869: NOT
28870: IFFALSE 28874
// exit ;
28872: GO 28919
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28874: LD_VAR 0 1
28878: PUSH
28879: LD_INT 1
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 12
28891: ARRAY
28892: PPUSH
28893: LD_INT 1
28895: PPUSH
28896: LD_INT 4
28898: PPUSH
28899: CALL_OW 12
28903: PPUSH
28904: LD_INT 3000
28906: PPUSH
28907: LD_INT 9000
28909: PPUSH
28910: CALL_OW 12
28914: PPUSH
28915: CALL_OW 492
// end ;
28919: PPOPN 1
28921: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28922: LD_EXP 51
28926: PUSH
28927: LD_EXP 66
28931: AND
28932: IFFALSE 28952
28934: GO 28936
28936: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28937: LD_INT 1
28939: PPUSH
28940: LD_OWVAR 2
28944: PPUSH
28945: LD_INT 0
28947: PPUSH
28948: CALL_OW 324
28952: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28953: LD_EXP 51
28957: PUSH
28958: LD_EXP 67
28962: AND
28963: IFFALSE 29046
28965: GO 28967
28967: DISABLE
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28972: LD_ADDR_VAR 0 2
28976: PUSH
28977: LD_INT 22
28979: PUSH
28980: LD_OWVAR 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 69
29007: ST_TO_ADDR
// if not tmp then
29008: LD_VAR 0 2
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29046
// for i in tmp do
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: LD_VAR 0 2
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29044
// SetBLevel ( i , 10 ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_INT 10
29037: PPUSH
29038: CALL_OW 241
29042: GO 29027
29044: POP
29045: POP
// end ;
29046: PPOPN 2
29048: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29049: LD_EXP 51
29053: PUSH
29054: LD_EXP 68
29058: AND
29059: IFFALSE 29170
29061: GO 29063
29063: DISABLE
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
29068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 22
29076: PUSH
29077: LD_OWVAR 2
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 25
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 69
29104: ST_TO_ADDR
// if not tmp then
29105: LD_VAR 0 3
29109: NOT
29110: IFFALSE 29114
// exit ;
29112: GO 29170
// un := tmp [ rand ( 1 , tmp ) ] ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_VAR 0 3
29123: PUSH
29124: LD_INT 1
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 12
29136: ARRAY
29137: ST_TO_ADDR
// if Crawls ( un ) then
29138: LD_VAR 0 2
29142: PPUSH
29143: CALL_OW 318
29147: IFFALSE 29158
// ComWalk ( un ) ;
29149: LD_VAR 0 2
29153: PPUSH
29154: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_INT 5
29165: PPUSH
29166: CALL_OW 336
// end ;
29170: PPOPN 3
29172: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29173: LD_EXP 51
29177: PUSH
29178: LD_EXP 69
29182: AND
29183: PUSH
29184: LD_OWVAR 67
29188: PUSH
29189: LD_INT 4
29191: LESS
29192: AND
29193: IFFALSE 29212
29195: GO 29197
29197: DISABLE
// begin Difficulty := Difficulty + 1 ;
29198: LD_ADDR_OWVAR 67
29202: PUSH
29203: LD_OWVAR 67
29207: PUSH
29208: LD_INT 1
29210: PLUS
29211: ST_TO_ADDR
// end ;
29212: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29213: LD_EXP 51
29217: PUSH
29218: LD_EXP 70
29222: AND
29223: IFFALSE 29326
29225: GO 29227
29227: DISABLE
29228: LD_INT 0
29230: PPUSH
// begin for i := 1 to 5 do
29231: LD_ADDR_VAR 0 1
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_INT 5
29243: PUSH
29244: FOR_TO
29245: IFFALSE 29324
// begin uc_nation := nation_nature ;
29247: LD_ADDR_OWVAR 21
29251: PUSH
29252: LD_INT 0
29254: ST_TO_ADDR
// uc_side := 0 ;
29255: LD_ADDR_OWVAR 20
29259: PUSH
29260: LD_INT 0
29262: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29263: LD_ADDR_OWVAR 29
29267: PUSH
29268: LD_INT 12
29270: PUSH
29271: LD_INT 12
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: ST_TO_ADDR
// hc_agressivity := 20 ;
29278: LD_ADDR_OWVAR 35
29282: PUSH
29283: LD_INT 20
29285: ST_TO_ADDR
// hc_class := class_tiger ;
29286: LD_ADDR_OWVAR 28
29290: PUSH
29291: LD_INT 14
29293: ST_TO_ADDR
// hc_gallery :=  ;
29294: LD_ADDR_OWVAR 33
29298: PUSH
29299: LD_STRING 
29301: ST_TO_ADDR
// hc_name :=  ;
29302: LD_ADDR_OWVAR 26
29306: PUSH
29307: LD_STRING 
29309: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29310: CALL_OW 44
29314: PPUSH
29315: LD_INT 0
29317: PPUSH
29318: CALL_OW 51
// end ;
29322: GO 29244
29324: POP
29325: POP
// end ;
29326: PPOPN 1
29328: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29329: LD_EXP 51
29333: PUSH
29334: LD_EXP 71
29338: AND
29339: IFFALSE 29348
29341: GO 29343
29343: DISABLE
// StreamSibBomb ;
29344: CALL 29349 0 0
29348: END
// export function StreamSibBomb ; var i , x , y ; begin
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
// result := false ;
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
// for i := 1 to 16 do
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: DOUBLE
29369: LD_INT 1
29371: DEC
29372: ST_TO_ADDR
29373: LD_INT 16
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29576
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 10
29386: PUSH
29387: LD_INT 20
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: LD_INT 40
29395: PUSH
29396: LD_INT 50
29398: PUSH
29399: LD_INT 60
29401: PUSH
29402: LD_INT 70
29404: PUSH
29405: LD_INT 80
29407: PUSH
29408: LD_INT 90
29410: PUSH
29411: LD_INT 100
29413: PUSH
29414: LD_INT 110
29416: PUSH
29417: LD_INT 120
29419: PUSH
29420: LD_INT 130
29422: PUSH
29423: LD_INT 140
29425: PUSH
29426: LD_INT 150
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PPUSH
29449: LD_INT 15
29451: PPUSH
29452: CALL_OW 12
29456: ARRAY
29457: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_INT 10
29465: PUSH
29466: LD_INT 20
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 40
29474: PUSH
29475: LD_INT 50
29477: PUSH
29478: LD_INT 60
29480: PUSH
29481: LD_INT 70
29483: PUSH
29484: LD_INT 80
29486: PUSH
29487: LD_INT 90
29489: PUSH
29490: LD_INT 100
29492: PUSH
29493: LD_INT 110
29495: PUSH
29496: LD_INT 120
29498: PUSH
29499: LD_INT 130
29501: PUSH
29502: LD_INT 140
29504: PUSH
29505: LD_INT 150
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PPUSH
29528: LD_INT 15
29530: PPUSH
29531: CALL_OW 12
29535: ARRAY
29536: ST_TO_ADDR
// if ValidHex ( x , y ) then
29537: LD_VAR 0 3
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: CALL_OW 488
29551: IFFALSE 29574
// begin result := [ x , y ] ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_VAR 0 4
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// break ;
29572: GO 29576
// end ; end ;
29574: GO 29376
29576: POP
29577: POP
// if result then
29578: LD_VAR 0 1
29582: IFFALSE 29642
// begin ToLua ( playSibBomb() ) ;
29584: LD_STRING playSibBomb()
29586: PPUSH
29587: CALL_OW 559
// wait ( 0 0$14 ) ;
29591: LD_INT 490
29593: PPUSH
29594: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 2
29614: ARRAY
29615: PPUSH
29616: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29620: LD_VAR 0 1
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PPUSH
29629: LD_VAR 0 1
29633: PUSH
29634: LD_INT 2
29636: ARRAY
29637: PPUSH
29638: CALL_OW 429
// end ; end ;
29642: LD_VAR 0 1
29646: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29647: LD_EXP 51
29651: PUSH
29652: LD_EXP 73
29656: AND
29657: IFFALSE 29669
29659: GO 29661
29661: DISABLE
// YouLost (  ) ;
29662: LD_STRING 
29664: PPUSH
29665: CALL_OW 104
29669: END
// every 0 0$1 trigger StreamModeActive and sFog do
29670: LD_EXP 51
29674: PUSH
29675: LD_EXP 72
29679: AND
29680: IFFALSE 29694
29682: GO 29684
29684: DISABLE
// FogOff ( your_side ) ;
29685: LD_OWVAR 2
29689: PPUSH
29690: CALL_OW 344
29694: END
// every 0 0$1 trigger StreamModeActive and sSun do
29695: LD_EXP 51
29699: PUSH
29700: LD_EXP 74
29704: AND
29705: IFFALSE 29733
29707: GO 29709
29709: DISABLE
// begin solar_recharge_percent := 0 ;
29710: LD_ADDR_OWVAR 79
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29718: LD_INT 10500
29720: PPUSH
29721: CALL_OW 67
// solar_recharge_percent := 100 ;
29725: LD_ADDR_OWVAR 79
29729: PUSH
29730: LD_INT 100
29732: ST_TO_ADDR
// end ;
29733: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29734: LD_EXP 51
29738: PUSH
29739: LD_EXP 75
29743: AND
29744: IFFALSE 29983
29746: GO 29748
29748: DISABLE
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
29753: PPUSH
// begin tmp := [ ] ;
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
// for i := 1 to 6 do
29761: LD_ADDR_VAR 0 1
29765: PUSH
29766: DOUBLE
29767: LD_INT 1
29769: DEC
29770: ST_TO_ADDR
29771: LD_INT 6
29773: PUSH
29774: FOR_TO
29775: IFFALSE 29880
// begin uc_nation := nation_nature ;
29777: LD_ADDR_OWVAR 21
29781: PUSH
29782: LD_INT 0
29784: ST_TO_ADDR
// uc_side := 0 ;
29785: LD_ADDR_OWVAR 20
29789: PUSH
29790: LD_INT 0
29792: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29793: LD_ADDR_OWVAR 29
29797: PUSH
29798: LD_INT 12
29800: PUSH
29801: LD_INT 12
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// hc_agressivity := 20 ;
29808: LD_ADDR_OWVAR 35
29812: PUSH
29813: LD_INT 20
29815: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29816: LD_ADDR_OWVAR 28
29820: PUSH
29821: LD_INT 17
29823: ST_TO_ADDR
// hc_gallery :=  ;
29824: LD_ADDR_OWVAR 33
29828: PUSH
29829: LD_STRING 
29831: ST_TO_ADDR
// hc_name :=  ;
29832: LD_ADDR_OWVAR 26
29836: PUSH
29837: LD_STRING 
29839: ST_TO_ADDR
// un := CreateHuman ;
29840: LD_ADDR_VAR 0 2
29844: PUSH
29845: CALL_OW 44
29849: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29850: LD_VAR 0 2
29854: PPUSH
29855: LD_INT 1
29857: PPUSH
29858: CALL_OW 51
// tmp := tmp ^ un ;
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: LD_VAR 0 2
29876: ADD
29877: ST_TO_ADDR
// end ;
29878: GO 29774
29880: POP
29881: POP
// repeat wait ( 0 0$1 ) ;
29882: LD_INT 35
29884: PPUSH
29885: CALL_OW 67
// for un in tmp do
29889: LD_ADDR_VAR 0 2
29893: PUSH
29894: LD_VAR 0 3
29898: PUSH
29899: FOR_IN
29900: IFFALSE 29974
// begin if IsDead ( un ) then
29902: LD_VAR 0 2
29906: PPUSH
29907: CALL_OW 301
29911: IFFALSE 29931
// begin tmp := tmp diff un ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_VAR 0 2
29927: DIFF
29928: ST_TO_ADDR
// continue ;
29929: GO 29899
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29931: LD_VAR 0 2
29935: PPUSH
29936: LD_INT 3
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PPUSH
29953: CALL_OW 69
29957: PPUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: CALL_OW 74
29967: PPUSH
29968: CALL_OW 115
// end ;
29972: GO 29899
29974: POP
29975: POP
// until not tmp ;
29976: LD_VAR 0 3
29980: NOT
29981: IFFALSE 29882
// end ;
29983: PPOPN 3
29985: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29986: LD_EXP 51
29990: PUSH
29991: LD_EXP 76
29995: AND
29996: IFFALSE 30050
29998: GO 30000
30000: DISABLE
// begin ToLua ( displayTroll(); ) ;
30001: LD_STRING displayTroll();
30003: PPUSH
30004: CALL_OW 559
// wait ( 3 3$00 ) ;
30008: LD_INT 6300
30010: PPUSH
30011: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30015: LD_STRING hideTroll();
30017: PPUSH
30018: CALL_OW 559
// wait ( 1 1$00 ) ;
30022: LD_INT 2100
30024: PPUSH
30025: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30029: LD_STRING displayTroll();
30031: PPUSH
30032: CALL_OW 559
// wait ( 1 1$00 ) ;
30036: LD_INT 2100
30038: PPUSH
30039: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30043: LD_STRING hideTroll();
30045: PPUSH
30046: CALL_OW 559
// end ;
30050: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30051: LD_EXP 51
30055: PUSH
30056: LD_EXP 77
30060: AND
30061: IFFALSE 30124
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
// begin p := 0 ;
30069: LD_ADDR_VAR 0 1
30073: PUSH
30074: LD_INT 0
30076: ST_TO_ADDR
// repeat game_speed := 1 ;
30077: LD_ADDR_OWVAR 65
30081: PUSH
30082: LD_INT 1
30084: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30085: LD_INT 35
30087: PPUSH
30088: CALL_OW 67
// p := p + 1 ;
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_VAR 0 1
30101: PUSH
30102: LD_INT 1
30104: PLUS
30105: ST_TO_ADDR
// until p >= 60 ;
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 60
30113: GREATEREQUAL
30114: IFFALSE 30077
// game_speed := 4 ;
30116: LD_ADDR_OWVAR 65
30120: PUSH
30121: LD_INT 4
30123: ST_TO_ADDR
// end ;
30124: PPOPN 1
30126: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30127: LD_EXP 51
30131: PUSH
30132: LD_EXP 78
30136: AND
30137: IFFALSE 30283
30139: GO 30141
30141: DISABLE
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30146: LD_ADDR_VAR 0 1
30150: PUSH
30151: LD_INT 22
30153: PUSH
30154: LD_OWVAR 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: ST_TO_ADDR
// if not depot then
30200: LD_VAR 0 1
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30283
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: LD_INT 1
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 12
30231: ARRAY
30232: PPUSH
30233: CALL_OW 274
30237: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_INT 0
30248: PPUSH
30249: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_INT 2
30260: PPUSH
30261: LD_INT 0
30263: PPUSH
30264: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30268: LD_VAR 0 2
30272: PPUSH
30273: LD_INT 3
30275: PPUSH
30276: LD_INT 0
30278: PPUSH
30279: CALL_OW 277
// end ;
30283: PPOPN 2
30285: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30286: LD_EXP 51
30290: PUSH
30291: LD_EXP 79
30295: AND
30296: IFFALSE 30393
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 22
30311: PUSH
30312: LD_OWVAR 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 21
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: PPUSH
30353: CALL_OW 69
30357: ST_TO_ADDR
// if not tmp then
30358: LD_VAR 0 1
30362: NOT
30363: IFFALSE 30367
// exit ;
30365: GO 30393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30367: LD_VAR 0 1
30371: PUSH
30372: LD_INT 1
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 12
30384: ARRAY
30385: PPUSH
30386: LD_INT 200
30388: PPUSH
30389: CALL_OW 234
// end ;
30393: PPOPN 1
30395: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30396: LD_EXP 51
30400: PUSH
30401: LD_EXP 80
30405: AND
30406: IFFALSE 30485
30408: GO 30410
30410: DISABLE
30411: LD_INT 0
30413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_OWVAR 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PPUSH
30445: CALL_OW 69
30449: ST_TO_ADDR
// if not tmp then
30450: LD_VAR 0 1
30454: NOT
30455: IFFALSE 30459
// exit ;
30457: GO 30485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30459: LD_VAR 0 1
30463: PUSH
30464: LD_INT 1
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 12
30476: ARRAY
30477: PPUSH
30478: LD_INT 60
30480: PPUSH
30481: CALL_OW 234
// end ;
30485: PPOPN 1
30487: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30488: LD_EXP 51
30492: PUSH
30493: LD_EXP 81
30497: AND
30498: IFFALSE 30597
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
// begin enable ;
30507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30508: LD_ADDR_VAR 0 1
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 61
30527: PUSH
30528: EMPTY
30529: LIST
30530: PUSH
30531: LD_INT 33
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 69
30550: ST_TO_ADDR
// if not tmp then
30551: LD_VAR 0 1
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30597
// for i in tmp do
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_VAR 0 1
30569: PUSH
30570: FOR_IN
30571: IFFALSE 30595
// if IsControledBy ( i ) then
30573: LD_VAR 0 2
30577: PPUSH
30578: CALL_OW 312
30582: IFFALSE 30593
// ComUnlink ( i ) ;
30584: LD_VAR 0 2
30588: PPUSH
30589: CALL_OW 136
30593: GO 30570
30595: POP
30596: POP
// end ;
30597: PPOPN 2
30599: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30600: LD_EXP 51
30604: PUSH
30605: LD_EXP 82
30609: AND
30610: IFFALSE 30750
30612: GO 30614
30614: DISABLE
30615: LD_INT 0
30617: PPUSH
30618: PPUSH
// begin ToLua ( displayPowell(); ) ;
30619: LD_STRING displayPowell();
30621: PPUSH
30622: CALL_OW 559
// uc_side := 0 ;
30626: LD_ADDR_OWVAR 20
30630: PUSH
30631: LD_INT 0
30633: ST_TO_ADDR
// uc_nation := 2 ;
30634: LD_ADDR_OWVAR 21
30638: PUSH
30639: LD_INT 2
30641: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30642: LD_ADDR_OWVAR 37
30646: PUSH
30647: LD_INT 14
30649: ST_TO_ADDR
// vc_engine := engine_siberite ;
30650: LD_ADDR_OWVAR 39
30654: PUSH
30655: LD_INT 3
30657: ST_TO_ADDR
// vc_control := control_apeman ;
30658: LD_ADDR_OWVAR 38
30662: PUSH
30663: LD_INT 5
30665: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30666: LD_ADDR_OWVAR 40
30670: PUSH
30671: LD_INT 29
30673: ST_TO_ADDR
// un := CreateVehicle ;
30674: LD_ADDR_VAR 0 2
30678: PUSH
30679: CALL_OW 45
30683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30684: LD_VAR 0 2
30688: PPUSH
30689: LD_INT 1
30691: PPUSH
30692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30696: LD_INT 35
30698: PPUSH
30699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30703: LD_VAR 0 2
30707: PPUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: PPUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: CALL_OW 74
30734: PPUSH
30735: CALL_OW 115
// until IsDead ( un ) ;
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 301
30748: IFFALSE 30696
// end ;
30750: PPOPN 2
30752: END
// every 0 0$1 trigger StreamModeActive and sStu do
30753: LD_EXP 51
30757: PUSH
30758: LD_EXP 90
30762: AND
30763: IFFALSE 30779
30765: GO 30767
30767: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30768: LD_STRING displayStucuk();
30770: PPUSH
30771: CALL_OW 559
// ResetFog ;
30775: CALL_OW 335
// end ;
30779: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30780: LD_EXP 51
30784: PUSH
30785: LD_EXP 83
30789: AND
30790: IFFALSE 30931
30792: GO 30794
30794: DISABLE
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30799: LD_ADDR_VAR 0 2
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_OWVAR 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 21
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 69
30834: ST_TO_ADDR
// if not tmp then
30835: LD_VAR 0 2
30839: NOT
30840: IFFALSE 30844
// exit ;
30842: GO 30931
// un := tmp [ rand ( 1 , tmp ) ] ;
30844: LD_ADDR_VAR 0 1
30848: PUSH
30849: LD_VAR 0 2
30853: PUSH
30854: LD_INT 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: CALL_OW 12
30866: ARRAY
30867: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_INT 0
30875: PPUSH
30876: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30880: LD_VAR 0 1
30884: PPUSH
30885: LD_OWVAR 3
30889: PUSH
30890: LD_VAR 0 1
30894: DIFF
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 74
30905: PPUSH
30906: CALL_OW 115
// wait ( 0 0$20 ) ;
30910: LD_INT 700
30912: PPUSH
30913: CALL_OW 67
// SetSide ( un , your_side ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_OWVAR 2
30926: PPUSH
30927: CALL_OW 235
// end ;
30931: PPOPN 2
30933: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30934: LD_EXP 51
30938: PUSH
30939: LD_EXP 84
30943: AND
30944: IFFALSE 31050
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30952: LD_ADDR_VAR 0 1
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_OWVAR 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PPUSH
31001: CALL_OW 69
31005: ST_TO_ADDR
// if not depot then
31006: LD_VAR 0 1
31010: NOT
31011: IFFALSE 31015
// exit ;
31013: GO 31050
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31015: LD_VAR 0 1
31019: PUSH
31020: LD_INT 1
31022: ARRAY
31023: PPUSH
31024: CALL_OW 250
31028: PPUSH
31029: LD_VAR 0 1
31033: PUSH
31034: LD_INT 1
31036: ARRAY
31037: PPUSH
31038: CALL_OW 251
31042: PPUSH
31043: LD_INT 70
31045: PPUSH
31046: CALL_OW 495
// end ;
31050: PPOPN 1
31052: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31053: LD_EXP 51
31057: PUSH
31058: LD_EXP 85
31062: AND
31063: IFFALSE 31274
31065: GO 31067
31067: DISABLE
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_OWVAR 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL_OW 69
31110: ST_TO_ADDR
// if not tmp then
31111: LD_VAR 0 5
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31274
// for i in tmp do
31120: LD_ADDR_VAR 0 1
31124: PUSH
31125: LD_VAR 0 5
31129: PUSH
31130: FOR_IN
31131: IFFALSE 31272
// begin d := rand ( 0 , 5 ) ;
31133: LD_ADDR_VAR 0 4
31137: PUSH
31138: LD_INT 0
31140: PPUSH
31141: LD_INT 5
31143: PPUSH
31144: CALL_OW 12
31148: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31149: LD_ADDR_VAR 0 2
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 250
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_INT 3
31171: PPUSH
31172: LD_INT 12
31174: PPUSH
31175: CALL_OW 12
31179: PPUSH
31180: CALL_OW 272
31184: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_VAR 0 1
31194: PPUSH
31195: CALL_OW 251
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: LD_INT 3
31207: PPUSH
31208: LD_INT 12
31210: PPUSH
31211: CALL_OW 12
31215: PPUSH
31216: CALL_OW 273
31220: ST_TO_ADDR
// if ValidHex ( x , y ) then
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 488
31235: IFFALSE 31270
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: LD_INT 3
31254: PPUSH
31255: LD_INT 6
31257: PPUSH
31258: CALL_OW 12
31262: PPUSH
31263: LD_INT 1
31265: PPUSH
31266: CALL_OW 483
// end ;
31270: GO 31130
31272: POP
31273: POP
// end ;
31274: PPOPN 5
31276: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31277: LD_EXP 51
31281: PUSH
31282: LD_EXP 86
31286: AND
31287: IFFALSE 31381
31289: GO 31291
31291: DISABLE
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_INT 22
31303: PUSH
31304: LD_OWVAR 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 32
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 21
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: PPUSH
31338: CALL_OW 69
31342: ST_TO_ADDR
// if not tmp then
31343: LD_VAR 0 2
31347: NOT
31348: IFFALSE 31352
// exit ;
31350: GO 31381
// for i in tmp do
31352: LD_ADDR_VAR 0 1
31356: PUSH
31357: LD_VAR 0 2
31361: PUSH
31362: FOR_IN
31363: IFFALSE 31379
// SetFuel ( i , 0 ) ;
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_INT 0
31372: PPUSH
31373: CALL_OW 240
31377: GO 31362
31379: POP
31380: POP
// end ;
31381: PPOPN 2
31383: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31384: LD_EXP 51
31388: PUSH
31389: LD_EXP 87
31393: AND
31394: IFFALSE 31460
31396: GO 31398
31398: DISABLE
31399: LD_INT 0
31401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31402: LD_ADDR_VAR 0 1
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 30
31421: PUSH
31422: LD_INT 29
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PPUSH
31433: CALL_OW 69
31437: ST_TO_ADDR
// if not tmp then
31438: LD_VAR 0 1
31442: NOT
31443: IFFALSE 31447
// exit ;
31445: GO 31460
// DestroyUnit ( tmp [ 1 ] ) ;
31447: LD_VAR 0 1
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: CALL_OW 65
// end ;
31460: PPOPN 1
31462: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31463: LD_EXP 51
31467: PUSH
31468: LD_EXP 89
31472: AND
31473: IFFALSE 31602
31475: GO 31477
31477: DISABLE
31478: LD_INT 0
31480: PPUSH
// begin uc_side := 0 ;
31481: LD_ADDR_OWVAR 20
31485: PUSH
31486: LD_INT 0
31488: ST_TO_ADDR
// uc_nation := nation_arabian ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_INT 2
31496: ST_TO_ADDR
// hc_gallery :=  ;
31497: LD_ADDR_OWVAR 33
31501: PUSH
31502: LD_STRING 
31504: ST_TO_ADDR
// hc_name :=  ;
31505: LD_ADDR_OWVAR 26
31509: PUSH
31510: LD_STRING 
31512: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31513: LD_INT 1
31515: PPUSH
31516: LD_INT 11
31518: PPUSH
31519: LD_INT 10
31521: PPUSH
31522: CALL_OW 380
// un := CreateHuman ;
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: CALL_OW 44
31535: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_INT 1
31543: PPUSH
31544: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31548: LD_INT 35
31550: PPUSH
31551: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31555: LD_VAR 0 1
31559: PPUSH
31560: LD_INT 22
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 69
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 74
31586: PPUSH
31587: CALL_OW 115
// until IsDead ( un ) ;
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 301
31600: IFFALSE 31548
// end ;
31602: PPOPN 1
31604: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31605: LD_EXP 51
31609: PUSH
31610: LD_EXP 91
31614: AND
31615: IFFALSE 31627
31617: GO 31619
31619: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31620: LD_STRING earthquake(getX(game), 0, 32)
31622: PPUSH
31623: CALL_OW 559
31627: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31628: LD_EXP 51
31632: PUSH
31633: LD_EXP 92
31637: AND
31638: IFFALSE 31729
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
// begin enable ;
31646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_INT 22
31654: PUSH
31655: LD_OWVAR 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 21
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 33
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL_OW 69
31693: ST_TO_ADDR
// if not tmp then
31694: LD_VAR 0 1
31698: NOT
31699: IFFALSE 31703
// exit ;
31701: GO 31729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31703: LD_VAR 0 1
31707: PUSH
31708: LD_INT 1
31710: PPUSH
31711: LD_VAR 0 1
31715: PPUSH
31716: CALL_OW 12
31720: ARRAY
31721: PPUSH
31722: LD_INT 1
31724: PPUSH
31725: CALL_OW 234
// end ;
31729: PPOPN 1
31731: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31732: LD_EXP 51
31736: PUSH
31737: LD_EXP 93
31741: AND
31742: IFFALSE 31883
31744: GO 31746
31746: DISABLE
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31752: LD_ADDR_VAR 0 3
31756: PUSH
31757: LD_INT 22
31759: PUSH
31760: LD_OWVAR 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 25
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PPUSH
31783: CALL_OW 69
31787: ST_TO_ADDR
// if not tmp then
31788: LD_VAR 0 3
31792: NOT
31793: IFFALSE 31797
// exit ;
31795: GO 31883
// un := tmp [ rand ( 1 , tmp ) ] ;
31797: LD_ADDR_VAR 0 2
31801: PUSH
31802: LD_VAR 0 3
31806: PUSH
31807: LD_INT 1
31809: PPUSH
31810: LD_VAR 0 3
31814: PPUSH
31815: CALL_OW 12
31819: ARRAY
31820: ST_TO_ADDR
// if Crawls ( un ) then
31821: LD_VAR 0 2
31825: PPUSH
31826: CALL_OW 318
31830: IFFALSE 31841
// ComWalk ( un ) ;
31832: LD_VAR 0 2
31836: PPUSH
31837: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31841: LD_VAR 0 2
31845: PPUSH
31846: LD_INT 9
31848: PPUSH
31849: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31853: LD_INT 28
31855: PPUSH
31856: LD_OWVAR 2
31860: PPUSH
31861: LD_INT 2
31863: PPUSH
31864: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31868: LD_INT 29
31870: PPUSH
31871: LD_OWVAR 2
31875: PPUSH
31876: LD_INT 2
31878: PPUSH
31879: CALL_OW 322
// end ;
31883: PPOPN 3
31885: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31886: LD_EXP 51
31890: PUSH
31891: LD_EXP 94
31895: AND
31896: IFFALSE 32007
31898: GO 31900
31900: DISABLE
31901: LD_INT 0
31903: PPUSH
31904: PPUSH
31905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31906: LD_ADDR_VAR 0 3
31910: PUSH
31911: LD_INT 22
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PPUSH
31937: CALL_OW 69
31941: ST_TO_ADDR
// if not tmp then
31942: LD_VAR 0 3
31946: NOT
31947: IFFALSE 31951
// exit ;
31949: GO 32007
// un := tmp [ rand ( 1 , tmp ) ] ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 1
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: CALL_OW 12
31973: ARRAY
31974: ST_TO_ADDR
// if Crawls ( un ) then
31975: LD_VAR 0 2
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( un ) ;
31986: LD_VAR 0 2
31990: PPUSH
31991: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_INT 8
32002: PPUSH
32003: CALL_OW 336
// end ;
32007: PPOPN 3
32009: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32010: LD_EXP 51
32014: PUSH
32015: LD_EXP 95
32019: AND
32020: IFFALSE 32164
32022: GO 32024
32024: DISABLE
32025: LD_INT 0
32027: PPUSH
32028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_INT 22
32036: PUSH
32037: LD_OWVAR 2
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 21
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 34
32061: PUSH
32062: LD_INT 12
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 34
32071: PUSH
32072: LD_INT 51
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 34
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 69
32104: ST_TO_ADDR
// if not tmp then
32105: LD_VAR 0 2
32109: NOT
32110: IFFALSE 32114
// exit ;
32112: GO 32164
// for i in tmp do
32114: LD_ADDR_VAR 0 1
32118: PUSH
32119: LD_VAR 0 2
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32162
// if GetCargo ( i , mat_artifact ) = 0 then
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_INT 4
32134: PPUSH
32135: CALL_OW 289
32139: PUSH
32140: LD_INT 0
32142: EQUAL
32143: IFFALSE 32160
// SetCargo ( i , mat_siberit , 100 ) ;
32145: LD_VAR 0 1
32149: PPUSH
32150: LD_INT 3
32152: PPUSH
32153: LD_INT 100
32155: PPUSH
32156: CALL_OW 290
32160: GO 32124
32162: POP
32163: POP
// end ;
32164: PPOPN 2
32166: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32167: LD_EXP 51
32171: PUSH
32172: LD_EXP 96
32176: AND
32177: IFFALSE 32360
32179: GO 32181
32181: DISABLE
32182: LD_INT 0
32184: PPUSH
32185: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32186: LD_ADDR_VAR 0 2
32190: PUSH
32191: LD_INT 22
32193: PUSH
32194: LD_OWVAR 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: ST_TO_ADDR
// if not tmp then
32208: LD_VAR 0 2
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 32360
// for i := 1 to 2 do
32217: LD_ADDR_VAR 0 1
32221: PUSH
32222: DOUBLE
32223: LD_INT 1
32225: DEC
32226: ST_TO_ADDR
32227: LD_INT 2
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32358
// begin uc_side := your_side ;
32233: LD_ADDR_OWVAR 20
32237: PUSH
32238: LD_OWVAR 2
32242: ST_TO_ADDR
// uc_nation := nation_american ;
32243: LD_ADDR_OWVAR 21
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// vc_chassis := us_morphling ;
32251: LD_ADDR_OWVAR 37
32255: PUSH
32256: LD_INT 5
32258: ST_TO_ADDR
// vc_engine := engine_siberite ;
32259: LD_ADDR_OWVAR 39
32263: PUSH
32264: LD_INT 3
32266: ST_TO_ADDR
// vc_control := control_computer ;
32267: LD_ADDR_OWVAR 38
32271: PUSH
32272: LD_INT 3
32274: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32275: LD_ADDR_OWVAR 40
32279: PUSH
32280: LD_INT 10
32282: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32283: LD_VAR 0 2
32287: PUSH
32288: LD_INT 1
32290: ARRAY
32291: PPUSH
32292: CALL_OW 310
32296: NOT
32297: IFFALSE 32344
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32299: CALL_OW 45
32303: PPUSH
32304: LD_VAR 0 2
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: PPUSH
32313: CALL_OW 250
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: CALL_OW 251
32331: PPUSH
32332: LD_INT 12
32334: PPUSH
32335: LD_INT 1
32337: PPUSH
32338: CALL_OW 50
32342: GO 32356
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32344: CALL_OW 45
32348: PPUSH
32349: LD_INT 1
32351: PPUSH
32352: CALL_OW 51
// end ;
32356: GO 32230
32358: POP
32359: POP
// end ;
32360: PPOPN 2
32362: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32363: LD_EXP 51
32367: PUSH
32368: LD_EXP 97
32372: AND
32373: IFFALSE 32595
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32386: LD_ADDR_VAR 0 6
32390: PUSH
32391: LD_INT 22
32393: PUSH
32394: LD_OWVAR 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 21
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 23
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 69
32439: ST_TO_ADDR
// if not tmp then
32440: LD_VAR 0 6
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32595
// s1 := rand ( 1 , 4 ) ;
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 1
32456: PPUSH
32457: LD_INT 4
32459: PPUSH
32460: CALL_OW 12
32464: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 6
32474: PUSH
32475: LD_INT 1
32477: ARRAY
32478: PPUSH
32479: LD_VAR 0 2
32483: PPUSH
32484: CALL_OW 259
32488: ST_TO_ADDR
// if s1 = 1 then
32489: LD_VAR 0 2
32493: PUSH
32494: LD_INT 1
32496: EQUAL
32497: IFFALSE 32517
// s2 := rand ( 2 , 4 ) else
32499: LD_ADDR_VAR 0 3
32503: PUSH
32504: LD_INT 2
32506: PPUSH
32507: LD_INT 4
32509: PPUSH
32510: CALL_OW 12
32514: ST_TO_ADDR
32515: GO 32525
// s2 := 1 ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 1
32524: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 6
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: PPUSH
32539: LD_VAR 0 3
32543: PPUSH
32544: CALL_OW 259
32548: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32549: LD_VAR 0 6
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: PPUSH
32558: LD_VAR 0 2
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32572: LD_VAR 0 6
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: CALL_OW 237
// end ;
32595: PPOPN 6
32597: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32598: LD_EXP 51
32602: PUSH
32603: LD_EXP 98
32607: AND
32608: IFFALSE 32687
32610: GO 32612
32612: DISABLE
32613: LD_INT 0
32615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32616: LD_ADDR_VAR 0 1
32620: PUSH
32621: LD_INT 22
32623: PUSH
32624: LD_OWVAR 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 30
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PPUSH
32647: CALL_OW 69
32651: ST_TO_ADDR
// if not tmp then
32652: LD_VAR 0 1
32656: NOT
32657: IFFALSE 32661
// exit ;
32659: GO 32687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32661: LD_VAR 0 1
32665: PUSH
32666: LD_INT 1
32668: PPUSH
32669: LD_VAR 0 1
32673: PPUSH
32674: CALL_OW 12
32678: ARRAY
32679: PPUSH
32680: LD_INT 1
32682: PPUSH
32683: CALL_OW 234
// end ;
32687: PPOPN 1
32689: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32690: LD_EXP 51
32694: PUSH
32695: LD_EXP 99
32699: AND
32700: IFFALSE 32812
32702: GO 32704
32704: DISABLE
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 22
32716: PUSH
32717: LD_OWVAR 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 27
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 30
32741: PUSH
32742: LD_INT 26
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 30
32751: PUSH
32752: LD_INT 28
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PPUSH
32769: CALL_OW 69
32773: ST_TO_ADDR
// if not tmp then
32774: LD_VAR 0 2
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 32812
// for i in tmp do
32783: LD_ADDR_VAR 0 1
32787: PUSH
32788: LD_VAR 0 2
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32810
// SetLives ( i , 1 ) ;
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_INT 1
32803: PPUSH
32804: CALL_OW 234
32808: GO 32793
32810: POP
32811: POP
// end ;
32812: PPOPN 2
32814: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32815: LD_EXP 51
32819: PUSH
32820: LD_EXP 100
32824: AND
32825: IFFALSE 33112
32827: GO 32829
32829: DISABLE
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
// begin i := rand ( 1 , 7 ) ;
32835: LD_ADDR_VAR 0 1
32839: PUSH
32840: LD_INT 1
32842: PPUSH
32843: LD_INT 7
32845: PPUSH
32846: CALL_OW 12
32850: ST_TO_ADDR
// case i of 1 :
32851: LD_VAR 0 1
32855: PUSH
32856: LD_INT 1
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32874
32864: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32865: LD_STRING earthquake(getX(game), 0, 32)
32867: PPUSH
32868: CALL_OW 559
32872: GO 33112
32874: LD_INT 2
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32896
32882: POP
// begin ToLua ( displayStucuk(); ) ;
32883: LD_STRING displayStucuk();
32885: PPUSH
32886: CALL_OW 559
// ResetFog ;
32890: CALL_OW 335
// end ; 3 :
32894: GO 33112
32896: LD_INT 3
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 33008
32904: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32905: LD_ADDR_VAR 0 2
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: LD_OWVAR 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 25
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PPUSH
32936: CALL_OW 69
32940: ST_TO_ADDR
// if not tmp then
32941: LD_VAR 0 2
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 33112
// un := tmp [ rand ( 1 , tmp ) ] ;
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_VAR 0 2
32959: PUSH
32960: LD_INT 1
32962: PPUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: CALL_OW 12
32972: ARRAY
32973: ST_TO_ADDR
// if Crawls ( un ) then
32974: LD_VAR 0 3
32978: PPUSH
32979: CALL_OW 318
32983: IFFALSE 32994
// ComWalk ( un ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32994: LD_VAR 0 3
32998: PPUSH
32999: LD_INT 8
33001: PPUSH
33002: CALL_OW 336
// end ; 4 :
33006: GO 33112
33008: LD_INT 4
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33090
33016: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33017: LD_ADDR_VAR 0 2
33021: PUSH
33022: LD_INT 22
33024: PUSH
33025: LD_OWVAR 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 30
33036: PUSH
33037: LD_INT 29
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: ST_TO_ADDR
// if not tmp then
33053: LD_VAR 0 2
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33112
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33062: LD_VAR 0 2
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: PPUSH
33071: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33075: LD_VAR 0 2
33079: PUSH
33080: LD_INT 1
33082: ARRAY
33083: PPUSH
33084: CALL_OW 65
// end ; 5 .. 7 :
33088: GO 33112
33090: LD_INT 5
33092: DOUBLE
33093: GREATEREQUAL
33094: IFFALSE 33102
33096: LD_INT 7
33098: DOUBLE
33099: LESSEQUAL
33100: IFTRUE 33104
33102: GO 33111
33104: POP
// StreamSibBomb ; end ;
33105: CALL 29349 0 0
33109: GO 33112
33111: POP
// end ;
33112: PPOPN 3
33114: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33115: LD_EXP 51
33119: PUSH
33120: LD_EXP 101
33124: AND
33125: IFFALSE 33281
33127: GO 33129
33129: DISABLE
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33135: LD_ADDR_VAR 0 2
33139: PUSH
33140: LD_INT 81
33142: PUSH
33143: LD_OWVAR 2
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 21
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: ST_TO_ADDR
// if not tmp then
33189: LD_VAR 0 2
33193: NOT
33194: IFFALSE 33198
// exit ;
33196: GO 33281
// p := 0 ;
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 0
33205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33206: LD_INT 35
33208: PPUSH
33209: CALL_OW 67
// p := p + 1 ;
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_VAR 0 3
33222: PUSH
33223: LD_INT 1
33225: PLUS
33226: ST_TO_ADDR
// for i in tmp do
33227: LD_ADDR_VAR 0 1
33231: PUSH
33232: LD_VAR 0 2
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33269
// if GetLives ( i ) < 1000 then
33240: LD_VAR 0 1
33244: PPUSH
33245: CALL_OW 256
33249: PUSH
33250: LD_INT 1000
33252: LESS
33253: IFFALSE 33267
// SetLives ( i , 1000 ) ;
33255: LD_VAR 0 1
33259: PPUSH
33260: LD_INT 1000
33262: PPUSH
33263: CALL_OW 234
33267: GO 33237
33269: POP
33270: POP
// until p > 20 ;
33271: LD_VAR 0 3
33275: PUSH
33276: LD_INT 20
33278: GREATER
33279: IFFALSE 33206
// end ;
33281: PPOPN 3
33283: END
// every 0 0$1 trigger StreamModeActive and sTime do
33284: LD_EXP 51
33288: PUSH
33289: LD_EXP 102
33293: AND
33294: IFFALSE 33329
33296: GO 33298
33298: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33299: LD_INT 28
33301: PPUSH
33302: LD_OWVAR 2
33306: PPUSH
33307: LD_INT 2
33309: PPUSH
33310: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33314: LD_INT 30
33316: PPUSH
33317: LD_OWVAR 2
33321: PPUSH
33322: LD_INT 2
33324: PPUSH
33325: CALL_OW 322
// end ;
33329: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33330: LD_EXP 51
33334: PUSH
33335: LD_EXP 103
33339: AND
33340: IFFALSE 33461
33342: GO 33344
33344: DISABLE
33345: LD_INT 0
33347: PPUSH
33348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33349: LD_ADDR_VAR 0 2
33353: PUSH
33354: LD_INT 22
33356: PUSH
33357: LD_OWVAR 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 21
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 23
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: PPUSH
33398: CALL_OW 69
33402: ST_TO_ADDR
// if not tmp then
33403: LD_VAR 0 2
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 33461
// for i in tmp do
33412: LD_ADDR_VAR 0 1
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33459
// begin if Crawls ( i ) then
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 318
33434: IFFALSE 33445
// ComWalk ( i ) ;
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 138
// SetClass ( i , 2 ) ;
33445: LD_VAR 0 1
33449: PPUSH
33450: LD_INT 2
33452: PPUSH
33453: CALL_OW 336
// end ;
33457: GO 33422
33459: POP
33460: POP
// end ;
33461: PPOPN 2
33463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33464: LD_EXP 51
33468: PUSH
33469: LD_EXP 104
33473: AND
33474: IFFALSE 33762
33476: GO 33478
33478: DISABLE
33479: LD_INT 0
33481: PPUSH
33482: PPUSH
33483: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33484: LD_OWVAR 2
33488: PPUSH
33489: LD_INT 9
33491: PPUSH
33492: LD_INT 1
33494: PPUSH
33495: LD_INT 1
33497: PPUSH
33498: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33502: LD_INT 9
33504: PPUSH
33505: LD_OWVAR 2
33509: PPUSH
33510: CALL_OW 343
// uc_side := 9 ;
33514: LD_ADDR_OWVAR 20
33518: PUSH
33519: LD_INT 9
33521: ST_TO_ADDR
// uc_nation := 2 ;
33522: LD_ADDR_OWVAR 21
33526: PUSH
33527: LD_INT 2
33529: ST_TO_ADDR
// hc_name := Dark Warrior ;
33530: LD_ADDR_OWVAR 26
33534: PUSH
33535: LD_STRING Dark Warrior
33537: ST_TO_ADDR
// hc_gallery :=  ;
33538: LD_ADDR_OWVAR 33
33542: PUSH
33543: LD_STRING 
33545: ST_TO_ADDR
// hc_noskilllimit := true ;
33546: LD_ADDR_OWVAR 76
33550: PUSH
33551: LD_INT 1
33553: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33554: LD_ADDR_OWVAR 31
33558: PUSH
33559: LD_INT 30
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 30
33567: PUSH
33568: LD_INT 30
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// un := CreateHuman ;
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: CALL_OW 44
33586: ST_TO_ADDR
// hc_noskilllimit := false ;
33587: LD_ADDR_OWVAR 76
33591: PUSH
33592: LD_INT 0
33594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33595: LD_VAR 0 3
33599: PPUSH
33600: LD_INT 1
33602: PPUSH
33603: CALL_OW 51
// ToLua ( playRanger() ) ;
33607: LD_STRING playRanger()
33609: PPUSH
33610: CALL_OW 559
// p := 0 ;
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: LD_INT 0
33621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33622: LD_INT 35
33624: PPUSH
33625: CALL_OW 67
// p := p + 1 ;
33629: LD_ADDR_VAR 0 2
33633: PUSH
33634: LD_VAR 0 2
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33643: LD_VAR 0 3
33647: PPUSH
33648: CALL_OW 256
33652: PUSH
33653: LD_INT 1000
33655: LESS
33656: IFFALSE 33670
// SetLives ( un , 1000 ) ;
33658: LD_VAR 0 3
33662: PPUSH
33663: LD_INT 1000
33665: PPUSH
33666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33670: LD_VAR 0 3
33674: PPUSH
33675: LD_INT 81
33677: PUSH
33678: LD_OWVAR 2
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 91
33689: PUSH
33690: LD_VAR 0 3
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 69
33711: PPUSH
33712: LD_VAR 0 3
33716: PPUSH
33717: CALL_OW 74
33721: PPUSH
33722: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33726: LD_VAR 0 2
33730: PUSH
33731: LD_INT 80
33733: GREATER
33734: PUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 301
33744: OR
33745: IFFALSE 33622
// if un then
33747: LD_VAR 0 3
33751: IFFALSE 33762
// RemoveUnit ( un ) ;
33753: LD_VAR 0 3
33757: PPUSH
33758: CALL_OW 64
// end ;
33762: PPOPN 3
33764: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33765: LD_EXP 105
33769: IFFALSE 33885
33771: GO 33773
33773: DISABLE
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33779: LD_ADDR_VAR 0 2
33783: PUSH
33784: LD_INT 81
33786: PUSH
33787: LD_OWVAR 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 21
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PPUSH
33810: CALL_OW 69
33814: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33815: LD_STRING playComputer()
33817: PPUSH
33818: CALL_OW 559
// if not tmp then
33822: LD_VAR 0 2
33826: NOT
33827: IFFALSE 33831
// exit ;
33829: GO 33885
// for i in tmp do
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: FOR_IN
33842: IFFALSE 33883
// for j := 1 to 4 do
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: DOUBLE
33850: LD_INT 1
33852: DEC
33853: ST_TO_ADDR
33854: LD_INT 4
33856: PUSH
33857: FOR_TO
33858: IFFALSE 33879
// SetSkill ( i , j , 10 ) ;
33860: LD_VAR 0 1
33864: PPUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: LD_INT 10
33872: PPUSH
33873: CALL_OW 237
33877: GO 33857
33879: POP
33880: POP
33881: GO 33841
33883: POP
33884: POP
// end ;
33885: PPOPN 3
33887: END
// every 0 0$1 trigger s30 do var i , tmp ;
33888: LD_EXP 106
33892: IFFALSE 33961
33894: GO 33896
33896: DISABLE
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 22
33908: PUSH
33909: LD_OWVAR 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PPUSH
33918: CALL_OW 69
33922: ST_TO_ADDR
// if not tmp then
33923: LD_VAR 0 2
33927: NOT
33928: IFFALSE 33932
// exit ;
33930: GO 33961
// for i in tmp do
33932: LD_ADDR_VAR 0 1
33936: PUSH
33937: LD_VAR 0 2
33941: PUSH
33942: FOR_IN
33943: IFFALSE 33959
// SetLives ( i , 300 ) ;
33945: LD_VAR 0 1
33949: PPUSH
33950: LD_INT 300
33952: PPUSH
33953: CALL_OW 234
33957: GO 33942
33959: POP
33960: POP
// end ;
33961: PPOPN 2
33963: END
// every 0 0$1 trigger s60 do var i , tmp ;
33964: LD_EXP 107
33968: IFFALSE 34037
33970: GO 33972
33972: DISABLE
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33977: LD_ADDR_VAR 0 2
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_OWVAR 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 69
33998: ST_TO_ADDR
// if not tmp then
33999: LD_VAR 0 2
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34037
// for i in tmp do
34008: LD_ADDR_VAR 0 1
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34035
// SetLives ( i , 600 ) ;
34021: LD_VAR 0 1
34025: PPUSH
34026: LD_INT 600
34028: PPUSH
34029: CALL_OW 234
34033: GO 34018
34035: POP
34036: POP
// end ;
34037: PPOPN 2
34039: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34040: LD_INT 0
34042: PPUSH
// case cmd of 301 :
34043: LD_VAR 0 1
34047: PUSH
34048: LD_INT 301
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34088
34056: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34057: LD_VAR 0 6
34061: PPUSH
34062: LD_VAR 0 7
34066: PPUSH
34067: LD_VAR 0 8
34071: PPUSH
34072: LD_VAR 0 4
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL 35297 0 5
34086: GO 34209
34088: LD_INT 302
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34096
34094: GO 34133
34096: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34097: LD_VAR 0 6
34101: PPUSH
34102: LD_VAR 0 7
34106: PPUSH
34107: LD_VAR 0 8
34111: PPUSH
34112: LD_VAR 0 9
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: LD_VAR 0 5
34126: PPUSH
34127: CALL 35388 0 6
34131: GO 34209
34133: LD_INT 303
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34178
34141: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34142: LD_VAR 0 6
34146: PPUSH
34147: LD_VAR 0 7
34151: PPUSH
34152: LD_VAR 0 8
34156: PPUSH
34157: LD_VAR 0 9
34161: PPUSH
34162: LD_VAR 0 4
34166: PPUSH
34167: LD_VAR 0 5
34171: PPUSH
34172: CALL 34214 0 6
34176: GO 34209
34178: LD_INT 304
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34208
34186: POP
// hHackTeleport ( unit , x , y ) ; end ;
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 4
34196: PPUSH
34197: LD_VAR 0 5
34201: PPUSH
34202: CALL 35981 0 3
34206: GO 34209
34208: POP
// end ;
34209: LD_VAR 0 12
34213: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34218: LD_VAR 0 1
34222: PUSH
34223: LD_INT 1
34225: LESS
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: LD_INT 3
34234: GREATER
34235: OR
34236: PUSH
34237: LD_VAR 0 5
34241: PPUSH
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 428
34251: OR
34252: IFFALSE 34256
// exit ;
34254: GO 34984
// uc_side := your_side ;
34256: LD_ADDR_OWVAR 20
34260: PUSH
34261: LD_OWVAR 2
34265: ST_TO_ADDR
// uc_nation := nation ;
34266: LD_ADDR_OWVAR 21
34270: PUSH
34271: LD_VAR 0 1
34275: ST_TO_ADDR
// bc_level = 1 ;
34276: LD_ADDR_OWVAR 43
34280: PUSH
34281: LD_INT 1
34283: ST_TO_ADDR
// case btype of 1 :
34284: LD_VAR 0 2
34288: PUSH
34289: LD_INT 1
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34308
34297: POP
// bc_type := b_depot ; 2 :
34298: LD_ADDR_OWVAR 42
34302: PUSH
34303: LD_INT 0
34305: ST_TO_ADDR
34306: GO 34928
34308: LD_INT 2
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34316
34314: GO 34327
34316: POP
// bc_type := b_warehouse ; 3 :
34317: LD_ADDR_OWVAR 42
34321: PUSH
34322: LD_INT 1
34324: ST_TO_ADDR
34325: GO 34928
34327: LD_INT 3
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34346
34335: POP
// bc_type := b_lab ; 4 .. 9 :
34336: LD_ADDR_OWVAR 42
34340: PUSH
34341: LD_INT 6
34343: ST_TO_ADDR
34344: GO 34928
34346: LD_INT 4
34348: DOUBLE
34349: GREATEREQUAL
34350: IFFALSE 34358
34352: LD_INT 9
34354: DOUBLE
34355: LESSEQUAL
34356: IFTRUE 34360
34358: GO 34420
34360: POP
// begin bc_type := b_lab_half ;
34361: LD_ADDR_OWVAR 42
34365: PUSH
34366: LD_INT 7
34368: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34369: LD_ADDR_OWVAR 44
34373: PUSH
34374: LD_INT 10
34376: PUSH
34377: LD_INT 11
34379: PUSH
34380: LD_INT 12
34382: PUSH
34383: LD_INT 15
34385: PUSH
34386: LD_INT 14
34388: PUSH
34389: LD_INT 13
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_INT 3
34407: MINUS
34408: ARRAY
34409: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34410: LD_ADDR_OWVAR 45
34414: PUSH
34415: LD_INT 9
34417: ST_TO_ADDR
// end ; 10 .. 13 :
34418: GO 34928
34420: LD_INT 10
34422: DOUBLE
34423: GREATEREQUAL
34424: IFFALSE 34432
34426: LD_INT 13
34428: DOUBLE
34429: LESSEQUAL
34430: IFTRUE 34434
34432: GO 34511
34434: POP
// begin bc_type := b_lab_full ;
34435: LD_ADDR_OWVAR 42
34439: PUSH
34440: LD_INT 8
34442: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34443: LD_ADDR_OWVAR 44
34447: PUSH
34448: LD_INT 10
34450: PUSH
34451: LD_INT 12
34453: PUSH
34454: LD_INT 14
34456: PUSH
34457: LD_INT 13
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: PUSH
34466: LD_VAR 0 2
34470: PUSH
34471: LD_INT 9
34473: MINUS
34474: ARRAY
34475: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34476: LD_ADDR_OWVAR 45
34480: PUSH
34481: LD_INT 11
34483: PUSH
34484: LD_INT 15
34486: PUSH
34487: LD_INT 12
34489: PUSH
34490: LD_INT 15
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_INT 9
34506: MINUS
34507: ARRAY
34508: ST_TO_ADDR
// end ; 14 :
34509: GO 34928
34511: LD_INT 14
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34530
34519: POP
// bc_type := b_workshop ; 15 :
34520: LD_ADDR_OWVAR 42
34524: PUSH
34525: LD_INT 2
34527: ST_TO_ADDR
34528: GO 34928
34530: LD_INT 15
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34549
34538: POP
// bc_type := b_factory ; 16 :
34539: LD_ADDR_OWVAR 42
34543: PUSH
34544: LD_INT 3
34546: ST_TO_ADDR
34547: GO 34928
34549: LD_INT 16
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34568
34557: POP
// bc_type := b_ext_gun ; 17 :
34558: LD_ADDR_OWVAR 42
34562: PUSH
34563: LD_INT 17
34565: ST_TO_ADDR
34566: GO 34928
34568: LD_INT 17
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34604
34576: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34577: LD_ADDR_OWVAR 42
34581: PUSH
34582: LD_INT 19
34584: PUSH
34585: LD_INT 23
34587: PUSH
34588: LD_INT 19
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PUSH
34596: LD_VAR 0 1
34600: ARRAY
34601: ST_TO_ADDR
34602: GO 34928
34604: LD_INT 18
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34623
34612: POP
// bc_type := b_ext_radar ; 19 :
34613: LD_ADDR_OWVAR 42
34617: PUSH
34618: LD_INT 20
34620: ST_TO_ADDR
34621: GO 34928
34623: LD_INT 19
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34631
34629: GO 34642
34631: POP
// bc_type := b_ext_radio ; 20 :
34632: LD_ADDR_OWVAR 42
34636: PUSH
34637: LD_INT 22
34639: ST_TO_ADDR
34640: GO 34928
34642: LD_INT 20
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34661
34650: POP
// bc_type := b_ext_siberium ; 21 :
34651: LD_ADDR_OWVAR 42
34655: PUSH
34656: LD_INT 21
34658: ST_TO_ADDR
34659: GO 34928
34661: LD_INT 21
34663: DOUBLE
34664: EQUAL
34665: IFTRUE 34669
34667: GO 34680
34669: POP
// bc_type := b_ext_computer ; 22 :
34670: LD_ADDR_OWVAR 42
34674: PUSH
34675: LD_INT 24
34677: ST_TO_ADDR
34678: GO 34928
34680: LD_INT 22
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34699
34688: POP
// bc_type := b_ext_track ; 23 :
34689: LD_ADDR_OWVAR 42
34693: PUSH
34694: LD_INT 16
34696: ST_TO_ADDR
34697: GO 34928
34699: LD_INT 23
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34718
34707: POP
// bc_type := b_ext_laser ; 24 :
34708: LD_ADDR_OWVAR 42
34712: PUSH
34713: LD_INT 25
34715: ST_TO_ADDR
34716: GO 34928
34718: LD_INT 24
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34737
34726: POP
// bc_type := b_control_tower ; 25 :
34727: LD_ADDR_OWVAR 42
34731: PUSH
34732: LD_INT 36
34734: ST_TO_ADDR
34735: GO 34928
34737: LD_INT 25
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34756
34745: POP
// bc_type := b_breastwork ; 26 :
34746: LD_ADDR_OWVAR 42
34750: PUSH
34751: LD_INT 31
34753: ST_TO_ADDR
34754: GO 34928
34756: LD_INT 26
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34775
34764: POP
// bc_type := b_bunker ; 27 :
34765: LD_ADDR_OWVAR 42
34769: PUSH
34770: LD_INT 32
34772: ST_TO_ADDR
34773: GO 34928
34775: LD_INT 27
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34794
34783: POP
// bc_type := b_turret ; 28 :
34784: LD_ADDR_OWVAR 42
34788: PUSH
34789: LD_INT 33
34791: ST_TO_ADDR
34792: GO 34928
34794: LD_INT 28
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34813
34802: POP
// bc_type := b_armoury ; 29 :
34803: LD_ADDR_OWVAR 42
34807: PUSH
34808: LD_INT 4
34810: ST_TO_ADDR
34811: GO 34928
34813: LD_INT 29
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34832
34821: POP
// bc_type := b_barracks ; 30 :
34822: LD_ADDR_OWVAR 42
34826: PUSH
34827: LD_INT 5
34829: ST_TO_ADDR
34830: GO 34928
34832: LD_INT 30
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34851
34840: POP
// bc_type := b_solar_power ; 31 :
34841: LD_ADDR_OWVAR 42
34845: PUSH
34846: LD_INT 27
34848: ST_TO_ADDR
34849: GO 34928
34851: LD_INT 31
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34870
34859: POP
// bc_type := b_oil_power ; 32 :
34860: LD_ADDR_OWVAR 42
34864: PUSH
34865: LD_INT 26
34867: ST_TO_ADDR
34868: GO 34928
34870: LD_INT 32
34872: DOUBLE
34873: EQUAL
34874: IFTRUE 34878
34876: GO 34889
34878: POP
// bc_type := b_siberite_power ; 33 :
34879: LD_ADDR_OWVAR 42
34883: PUSH
34884: LD_INT 28
34886: ST_TO_ADDR
34887: GO 34928
34889: LD_INT 33
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34908
34897: POP
// bc_type := b_oil_mine ; 34 :
34898: LD_ADDR_OWVAR 42
34902: PUSH
34903: LD_INT 29
34905: ST_TO_ADDR
34906: GO 34928
34908: LD_INT 34
34910: DOUBLE
34911: EQUAL
34912: IFTRUE 34916
34914: GO 34927
34916: POP
// bc_type := b_siberite_mine ; end ;
34917: LD_ADDR_OWVAR 42
34921: PUSH
34922: LD_INT 30
34924: ST_TO_ADDR
34925: GO 34928
34927: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34928: LD_ADDR_VAR 0 8
34932: PUSH
34933: LD_VAR 0 5
34937: PPUSH
34938: LD_VAR 0 6
34942: PPUSH
34943: LD_VAR 0 3
34947: PPUSH
34948: CALL_OW 47
34952: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34953: LD_OWVAR 42
34957: PUSH
34958: LD_INT 32
34960: PUSH
34961: LD_INT 33
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: IN
34968: IFFALSE 34984
// PlaceWeaponTurret ( b , weapon ) ;
34970: LD_VAR 0 8
34974: PPUSH
34975: LD_VAR 0 4
34979: PPUSH
34980: CALL_OW 431
// end ;
34984: LD_VAR 0 7
34988: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34989: LD_INT 0
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34995: LD_ADDR_VAR 0 4
34999: PUSH
35000: LD_INT 22
35002: PUSH
35003: LD_OWVAR 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 30
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 30
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL_OW 69
35048: ST_TO_ADDR
// if not tmp then
35049: LD_VAR 0 4
35053: NOT
35054: IFFALSE 35058
// exit ;
35056: GO 35117
// for i in tmp do
35058: LD_ADDR_VAR 0 2
35062: PUSH
35063: LD_VAR 0 4
35067: PUSH
35068: FOR_IN
35069: IFFALSE 35115
// for j = 1 to 3 do
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: DOUBLE
35077: LD_INT 1
35079: DEC
35080: ST_TO_ADDR
35081: LD_INT 3
35083: PUSH
35084: FOR_TO
35085: IFFALSE 35111
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 274
35096: PPUSH
35097: LD_VAR 0 3
35101: PPUSH
35102: LD_INT 99999
35104: PPUSH
35105: CALL_OW 277
35109: GO 35084
35111: POP
35112: POP
35113: GO 35068
35115: POP
35116: POP
// end ;
35117: LD_VAR 0 1
35121: RET
// export function hHackSetLevel10 ; var i , j ; begin
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
35126: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35127: LD_ADDR_VAR 0 2
35131: PUSH
35132: LD_INT 21
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PPUSH
35142: CALL_OW 69
35146: PUSH
35147: FOR_IN
35148: IFFALSE 35200
// if IsSelected ( i ) then
35150: LD_VAR 0 2
35154: PPUSH
35155: CALL_OW 306
35159: IFFALSE 35198
// begin for j := 1 to 4 do
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: DOUBLE
35167: LD_INT 1
35169: DEC
35170: ST_TO_ADDR
35171: LD_INT 4
35173: PUSH
35174: FOR_TO
35175: IFFALSE 35196
// SetSkill ( i , j , 10 ) ;
35177: LD_VAR 0 2
35181: PPUSH
35182: LD_VAR 0 3
35186: PPUSH
35187: LD_INT 10
35189: PPUSH
35190: CALL_OW 237
35194: GO 35174
35196: POP
35197: POP
// end ;
35198: GO 35147
35200: POP
35201: POP
// end ;
35202: LD_VAR 0 1
35206: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35207: LD_INT 0
35209: PPUSH
35210: PPUSH
35211: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35212: LD_ADDR_VAR 0 2
35216: PUSH
35217: LD_INT 22
35219: PUSH
35220: LD_OWVAR 2
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 21
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PPUSH
35243: CALL_OW 69
35247: PUSH
35248: FOR_IN
35249: IFFALSE 35290
// begin for j := 1 to 4 do
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_INT 4
35263: PUSH
35264: FOR_TO
35265: IFFALSE 35286
// SetSkill ( i , j , 10 ) ;
35267: LD_VAR 0 2
35271: PPUSH
35272: LD_VAR 0 3
35276: PPUSH
35277: LD_INT 10
35279: PPUSH
35280: CALL_OW 237
35284: GO 35264
35286: POP
35287: POP
// end ;
35288: GO 35248
35290: POP
35291: POP
// end ;
35292: LD_VAR 0 1
35296: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35297: LD_INT 0
35299: PPUSH
// uc_side := your_side ;
35300: LD_ADDR_OWVAR 20
35304: PUSH
35305: LD_OWVAR 2
35309: ST_TO_ADDR
// uc_nation := nation ;
35310: LD_ADDR_OWVAR 21
35314: PUSH
35315: LD_VAR 0 1
35319: ST_TO_ADDR
// InitHc ;
35320: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35324: LD_INT 0
35326: PPUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35341: LD_VAR 0 4
35345: PPUSH
35346: LD_VAR 0 5
35350: PPUSH
35351: CALL_OW 428
35355: PUSH
35356: LD_INT 0
35358: EQUAL
35359: IFFALSE 35383
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35361: CALL_OW 44
35365: PPUSH
35366: LD_VAR 0 4
35370: PPUSH
35371: LD_VAR 0 5
35375: PPUSH
35376: LD_INT 1
35378: PPUSH
35379: CALL_OW 48
// end ;
35383: LD_VAR 0 6
35387: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35388: LD_INT 0
35390: PPUSH
35391: PPUSH
// uc_side := your_side ;
35392: LD_ADDR_OWVAR 20
35396: PUSH
35397: LD_OWVAR 2
35401: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35402: LD_VAR 0 1
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 3
35415: PUSH
35416: LD_INT 4
35418: PUSH
35419: LD_INT 5
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: IN
35429: IFFALSE 35441
// uc_nation := nation_american else
35431: LD_ADDR_OWVAR 21
35435: PUSH
35436: LD_INT 1
35438: ST_TO_ADDR
35439: GO 35484
// if chassis in [ 11 , 12 , 13 , 14 ] then
35441: LD_VAR 0 1
35445: PUSH
35446: LD_INT 11
35448: PUSH
35449: LD_INT 12
35451: PUSH
35452: LD_INT 13
35454: PUSH
35455: LD_INT 14
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: IN
35464: IFFALSE 35476
// uc_nation := nation_arabian else
35466: LD_ADDR_OWVAR 21
35470: PUSH
35471: LD_INT 2
35473: ST_TO_ADDR
35474: GO 35484
// uc_nation := nation_russian ;
35476: LD_ADDR_OWVAR 21
35480: PUSH
35481: LD_INT 3
35483: ST_TO_ADDR
// vc_chassis := chassis ;
35484: LD_ADDR_OWVAR 37
35488: PUSH
35489: LD_VAR 0 1
35493: ST_TO_ADDR
// vc_engine := engine ;
35494: LD_ADDR_OWVAR 39
35498: PUSH
35499: LD_VAR 0 2
35503: ST_TO_ADDR
// vc_control := control ;
35504: LD_ADDR_OWVAR 38
35508: PUSH
35509: LD_VAR 0 3
35513: ST_TO_ADDR
// vc_weapon := weapon ;
35514: LD_ADDR_OWVAR 40
35518: PUSH
35519: LD_VAR 0 4
35523: ST_TO_ADDR
// un := CreateVehicle ;
35524: LD_ADDR_VAR 0 8
35528: PUSH
35529: CALL_OW 45
35533: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35534: LD_VAR 0 8
35538: PPUSH
35539: LD_INT 0
35541: PPUSH
35542: LD_INT 5
35544: PPUSH
35545: CALL_OW 12
35549: PPUSH
35550: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35554: LD_VAR 0 8
35558: PPUSH
35559: LD_VAR 0 5
35563: PPUSH
35564: LD_VAR 0 6
35568: PPUSH
35569: LD_INT 1
35571: PPUSH
35572: CALL_OW 48
// end ;
35576: LD_VAR 0 7
35580: RET
// export hInvincible ; every 1 do
35581: GO 35583
35583: DISABLE
// hInvincible := [ ] ;
35584: LD_ADDR_EXP 108
35588: PUSH
35589: EMPTY
35590: ST_TO_ADDR
35591: END
// every 10 do var i ;
35592: GO 35594
35594: DISABLE
35595: LD_INT 0
35597: PPUSH
// begin enable ;
35598: ENABLE
// if not hInvincible then
35599: LD_EXP 108
35603: NOT
35604: IFFALSE 35608
// exit ;
35606: GO 35652
// for i in hInvincible do
35608: LD_ADDR_VAR 0 1
35612: PUSH
35613: LD_EXP 108
35617: PUSH
35618: FOR_IN
35619: IFFALSE 35650
// if GetLives ( i ) < 1000 then
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 256
35630: PUSH
35631: LD_INT 1000
35633: LESS
35634: IFFALSE 35648
// SetLives ( i , 1000 ) ;
35636: LD_VAR 0 1
35640: PPUSH
35641: LD_INT 1000
35643: PPUSH
35644: CALL_OW 234
35648: GO 35618
35650: POP
35651: POP
// end ;
35652: PPOPN 1
35654: END
// export function hHackInvincible ; var i ; begin
35655: LD_INT 0
35657: PPUSH
35658: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35659: LD_ADDR_VAR 0 2
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 21
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 21
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: PPUSH
35692: CALL_OW 69
35696: PUSH
35697: FOR_IN
35698: IFFALSE 35759
// if IsSelected ( i ) then
35700: LD_VAR 0 2
35704: PPUSH
35705: CALL_OW 306
35709: IFFALSE 35757
// begin if i in hInvincible then
35711: LD_VAR 0 2
35715: PUSH
35716: LD_EXP 108
35720: IN
35721: IFFALSE 35741
// hInvincible := hInvincible diff i else
35723: LD_ADDR_EXP 108
35727: PUSH
35728: LD_EXP 108
35732: PUSH
35733: LD_VAR 0 2
35737: DIFF
35738: ST_TO_ADDR
35739: GO 35757
// hInvincible := hInvincible union i ;
35741: LD_ADDR_EXP 108
35745: PUSH
35746: LD_EXP 108
35750: PUSH
35751: LD_VAR 0 2
35755: UNION
35756: ST_TO_ADDR
// end ;
35757: GO 35697
35759: POP
35760: POP
// end ;
35761: LD_VAR 0 1
35765: RET
// export function hHackInvisible ; var i , j ; begin
35766: LD_INT 0
35768: PPUSH
35769: PPUSH
35770: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35771: LD_ADDR_VAR 0 2
35775: PUSH
35776: LD_INT 21
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: PUSH
35791: FOR_IN
35792: IFFALSE 35816
// if IsSelected ( i ) then
35794: LD_VAR 0 2
35798: PPUSH
35799: CALL_OW 306
35803: IFFALSE 35814
// ComForceInvisible ( i ) ;
35805: LD_VAR 0 2
35809: PPUSH
35810: CALL_OW 496
35814: GO 35791
35816: POP
35817: POP
// end ;
35818: LD_VAR 0 1
35822: RET
// export function hHackChangeYourSide ; begin
35823: LD_INT 0
35825: PPUSH
// if your_side = 8 then
35826: LD_OWVAR 2
35830: PUSH
35831: LD_INT 8
35833: EQUAL
35834: IFFALSE 35846
// your_side := 0 else
35836: LD_ADDR_OWVAR 2
35840: PUSH
35841: LD_INT 0
35843: ST_TO_ADDR
35844: GO 35860
// your_side := your_side + 1 ;
35846: LD_ADDR_OWVAR 2
35850: PUSH
35851: LD_OWVAR 2
35855: PUSH
35856: LD_INT 1
35858: PLUS
35859: ST_TO_ADDR
// end ;
35860: LD_VAR 0 1
35864: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35865: LD_INT 0
35867: PPUSH
35868: PPUSH
35869: PPUSH
// for i in all_units do
35870: LD_ADDR_VAR 0 2
35874: PUSH
35875: LD_OWVAR 3
35879: PUSH
35880: FOR_IN
35881: IFFALSE 35959
// if IsSelected ( i ) then
35883: LD_VAR 0 2
35887: PPUSH
35888: CALL_OW 306
35892: IFFALSE 35957
// begin j := GetSide ( i ) ;
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_VAR 0 2
35903: PPUSH
35904: CALL_OW 255
35908: ST_TO_ADDR
// if j = 8 then
35909: LD_VAR 0 3
35913: PUSH
35914: LD_INT 8
35916: EQUAL
35917: IFFALSE 35929
// j := 0 else
35919: LD_ADDR_VAR 0 3
35923: PUSH
35924: LD_INT 0
35926: ST_TO_ADDR
35927: GO 35943
// j := j + 1 ;
35929: LD_ADDR_VAR 0 3
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_INT 1
35941: PLUS
35942: ST_TO_ADDR
// SetSide ( i , j ) ;
35943: LD_VAR 0 2
35947: PPUSH
35948: LD_VAR 0 3
35952: PPUSH
35953: CALL_OW 235
// end ;
35957: GO 35880
35959: POP
35960: POP
// end ;
35961: LD_VAR 0 1
35965: RET
// export function hHackFog ; begin
35966: LD_INT 0
35968: PPUSH
// FogOff ( true ) ;
35969: LD_INT 1
35971: PPUSH
35972: CALL_OW 344
// end ;
35976: LD_VAR 0 1
35980: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35981: LD_INT 0
35983: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35984: LD_VAR 0 1
35988: PPUSH
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_VAR 0 3
35998: PPUSH
35999: LD_INT 1
36001: PPUSH
36002: LD_INT 1
36004: PPUSH
36005: CALL_OW 483
// CenterOnXY ( x , y ) ;
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_VAR 0 3
36018: PPUSH
36019: CALL_OW 84
// end ;
36023: LD_VAR 0 4
36027: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36028: LD_INT 0
36030: PPUSH
36031: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36032: LD_VAR 0 1
36036: NOT
36037: PUSH
36038: LD_VAR 0 2
36042: PPUSH
36043: LD_VAR 0 3
36047: PPUSH
36048: CALL_OW 488
36052: NOT
36053: OR
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 266
36064: PUSH
36065: LD_INT 3
36067: NONEQUAL
36068: PUSH
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 247
36078: PUSH
36079: LD_INT 1
36081: EQUAL
36082: NOT
36083: AND
36084: OR
36085: IFFALSE 36089
// exit ;
36087: GO 36238
// if GetType ( factory ) = unit_human then
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 247
36098: PUSH
36099: LD_INT 1
36101: EQUAL
36102: IFFALSE 36119
// factory := IsInUnit ( factory ) ;
36104: LD_ADDR_VAR 0 1
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 310
36118: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 266
36128: PUSH
36129: LD_INT 3
36131: NONEQUAL
36132: IFFALSE 36136
// exit ;
36134: GO 36238
// if HexInfo ( x , y ) = factory then
36136: LD_VAR 0 2
36140: PPUSH
36141: LD_VAR 0 3
36145: PPUSH
36146: CALL_OW 428
36150: PUSH
36151: LD_VAR 0 1
36155: EQUAL
36156: IFFALSE 36183
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36158: LD_ADDR_EXP 109
36162: PUSH
36163: LD_EXP 109
36167: PPUSH
36168: LD_VAR 0 1
36172: PPUSH
36173: LD_INT 0
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
36181: GO 36234
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36183: LD_ADDR_EXP 109
36187: PUSH
36188: LD_EXP 109
36192: PPUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 255
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 3
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: PPUSH
36229: CALL_OW 1
36233: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36234: CALL 36243 0 0
// end ;
36238: LD_VAR 0 4
36242: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
36247: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36248: LD_STRING resetFactoryWaypoint();
36250: PPUSH
36251: CALL_OW 559
// if factoryWaypoints then
36255: LD_EXP 109
36259: IFFALSE 36385
// begin list := PrepareArray ( factoryWaypoints ) ;
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_EXP 109
36270: PPUSH
36271: CALL 83527 0 1
36275: ST_TO_ADDR
// for i := 1 to list do
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: DOUBLE
36282: LD_INT 1
36284: DEC
36285: ST_TO_ADDR
36286: LD_VAR 0 3
36290: PUSH
36291: FOR_TO
36292: IFFALSE 36383
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36294: LD_STRING setFactoryWaypointXY(
36296: PUSH
36297: LD_VAR 0 3
36301: PUSH
36302: LD_VAR 0 2
36306: ARRAY
36307: PUSH
36308: LD_INT 1
36310: ARRAY
36311: STR
36312: PUSH
36313: LD_STRING ,
36315: STR
36316: PUSH
36317: LD_VAR 0 3
36321: PUSH
36322: LD_VAR 0 2
36326: ARRAY
36327: PUSH
36328: LD_INT 2
36330: ARRAY
36331: STR
36332: PUSH
36333: LD_STRING ,
36335: STR
36336: PUSH
36337: LD_VAR 0 3
36341: PUSH
36342: LD_VAR 0 2
36346: ARRAY
36347: PUSH
36348: LD_INT 3
36350: ARRAY
36351: STR
36352: PUSH
36353: LD_STRING ,
36355: STR
36356: PUSH
36357: LD_VAR 0 3
36361: PUSH
36362: LD_VAR 0 2
36366: ARRAY
36367: PUSH
36368: LD_INT 4
36370: ARRAY
36371: STR
36372: PUSH
36373: LD_STRING )
36375: STR
36376: PPUSH
36377: CALL_OW 559
36381: GO 36291
36383: POP
36384: POP
// end ; end ;
36385: LD_VAR 0 1
36389: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36390: LD_INT 0
36392: PPUSH
// if HexInfo ( x , y ) = warehouse then
36393: LD_VAR 0 2
36397: PPUSH
36398: LD_VAR 0 3
36402: PPUSH
36403: CALL_OW 428
36407: PUSH
36408: LD_VAR 0 1
36412: EQUAL
36413: IFFALSE 36440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36415: LD_ADDR_EXP 110
36419: PUSH
36420: LD_EXP 110
36424: PPUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: LD_INT 0
36432: PPUSH
36433: CALL_OW 1
36437: ST_TO_ADDR
36438: GO 36491
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36440: LD_ADDR_EXP 110
36444: PUSH
36445: LD_EXP 110
36449: PPUSH
36450: LD_VAR 0 1
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 255
36464: PUSH
36465: LD_VAR 0 1
36469: PUSH
36470: LD_VAR 0 2
36474: PUSH
36475: LD_VAR 0 3
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: PPUSH
36486: CALL_OW 1
36490: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36491: CALL 36500 0 0
// end ;
36495: LD_VAR 0 4
36499: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36500: LD_INT 0
36502: PPUSH
36503: PPUSH
36504: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36505: LD_STRING resetWarehouseGatheringPoints();
36507: PPUSH
36508: CALL_OW 559
// if warehouseGatheringPoints then
36512: LD_EXP 110
36516: IFFALSE 36642
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_EXP 110
36527: PPUSH
36528: CALL 83527 0 1
36532: ST_TO_ADDR
// for i := 1 to list do
36533: LD_ADDR_VAR 0 2
36537: PUSH
36538: DOUBLE
36539: LD_INT 1
36541: DEC
36542: ST_TO_ADDR
36543: LD_VAR 0 3
36547: PUSH
36548: FOR_TO
36549: IFFALSE 36640
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36551: LD_STRING setWarehouseGatheringPointXY(
36553: PUSH
36554: LD_VAR 0 3
36558: PUSH
36559: LD_VAR 0 2
36563: ARRAY
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: STR
36569: PUSH
36570: LD_STRING ,
36572: STR
36573: PUSH
36574: LD_VAR 0 3
36578: PUSH
36579: LD_VAR 0 2
36583: ARRAY
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: STR
36589: PUSH
36590: LD_STRING ,
36592: STR
36593: PUSH
36594: LD_VAR 0 3
36598: PUSH
36599: LD_VAR 0 2
36603: ARRAY
36604: PUSH
36605: LD_INT 3
36607: ARRAY
36608: STR
36609: PUSH
36610: LD_STRING ,
36612: STR
36613: PUSH
36614: LD_VAR 0 3
36618: PUSH
36619: LD_VAR 0 2
36623: ARRAY
36624: PUSH
36625: LD_INT 4
36627: ARRAY
36628: STR
36629: PUSH
36630: LD_STRING )
36632: STR
36633: PPUSH
36634: CALL_OW 559
36638: GO 36548
36640: POP
36641: POP
// end ; end ;
36642: LD_VAR 0 1
36646: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36647: LD_EXP 110
36651: IFFALSE 37336
36653: GO 36655
36655: DISABLE
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
// begin enable ;
36667: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_EXP 110
36677: PPUSH
36678: CALL 83527 0 1
36682: ST_TO_ADDR
// if not list then
36683: LD_VAR 0 3
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 37336
// for i := 1 to list do
36692: LD_ADDR_VAR 0 1
36696: PUSH
36697: DOUBLE
36698: LD_INT 1
36700: DEC
36701: ST_TO_ADDR
36702: LD_VAR 0 3
36706: PUSH
36707: FOR_TO
36708: IFFALSE 37334
// begin depot := list [ i ] [ 2 ] ;
36710: LD_ADDR_VAR 0 8
36714: PUSH
36715: LD_VAR 0 3
36719: PUSH
36720: LD_VAR 0 1
36724: ARRAY
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36730: LD_ADDR_VAR 0 5
36734: PUSH
36735: LD_VAR 0 3
36739: PUSH
36740: LD_VAR 0 1
36744: ARRAY
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36750: LD_VAR 0 8
36754: PPUSH
36755: CALL_OW 301
36759: PUSH
36760: LD_VAR 0 5
36764: PUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: CALL_OW 255
36774: NONEQUAL
36775: OR
36776: IFFALSE 36805
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36778: LD_ADDR_EXP 110
36782: PUSH
36783: LD_EXP 110
36787: PPUSH
36788: LD_VAR 0 8
36792: PPUSH
36793: LD_INT 0
36795: PPUSH
36796: CALL_OW 1
36800: ST_TO_ADDR
// exit ;
36801: POP
36802: POP
36803: GO 37336
// end ; x := list [ i ] [ 3 ] ;
36805: LD_ADDR_VAR 0 6
36809: PUSH
36810: LD_VAR 0 3
36814: PUSH
36815: LD_VAR 0 1
36819: ARRAY
36820: PUSH
36821: LD_INT 3
36823: ARRAY
36824: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36825: LD_ADDR_VAR 0 7
36829: PUSH
36830: LD_VAR 0 3
36834: PUSH
36835: LD_VAR 0 1
36839: ARRAY
36840: PUSH
36841: LD_INT 4
36843: ARRAY
36844: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_VAR 0 6
36854: PPUSH
36855: LD_VAR 0 7
36859: PPUSH
36860: LD_INT 16
36862: PPUSH
36863: CALL 82115 0 3
36867: ST_TO_ADDR
// if not cratesNearbyPoint then
36868: LD_VAR 0 9
36872: NOT
36873: IFFALSE 36879
// exit ;
36875: POP
36876: POP
36877: GO 37336
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36879: LD_ADDR_VAR 0 4
36883: PUSH
36884: LD_INT 22
36886: PUSH
36887: LD_VAR 0 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: PUSH
36899: LD_INT 60
36901: PUSH
36902: EMPTY
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 91
36911: PUSH
36912: LD_VAR 0 8
36916: PUSH
36917: LD_INT 6
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 25
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 25
36940: PUSH
36941: LD_INT 16
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: PUSH
36964: LD_VAR 0 8
36968: PPUSH
36969: CALL_OW 313
36973: PPUSH
36974: LD_INT 3
36976: PUSH
36977: LD_INT 60
36979: PUSH
36980: EMPTY
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 25
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 25
37002: PUSH
37003: LD_INT 16
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PPUSH
37019: CALL_OW 72
37023: UNION
37024: ST_TO_ADDR
// if tmp then
37025: LD_VAR 0 4
37029: IFFALSE 37109
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37031: LD_ADDR_VAR 0 4
37035: PUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_INT 3
37043: PPUSH
37044: CALL 80084 0 2
37048: ST_TO_ADDR
// for j in tmp do
37049: LD_ADDR_VAR 0 2
37053: PUSH
37054: LD_VAR 0 4
37058: PUSH
37059: FOR_IN
37060: IFFALSE 37103
// begin if IsInUnit ( j ) then
37062: LD_VAR 0 2
37066: PPUSH
37067: CALL_OW 310
37071: IFFALSE 37082
// ComExit ( j ) ;
37073: LD_VAR 0 2
37077: PPUSH
37078: CALL 80167 0 1
// AddComCollect ( j , x , y ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_VAR 0 6
37091: PPUSH
37092: LD_VAR 0 7
37096: PPUSH
37097: CALL_OW 177
// end ;
37101: GO 37059
37103: POP
37104: POP
// exit ;
37105: POP
37106: POP
37107: GO 37336
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37109: LD_ADDR_VAR 0 4
37113: PUSH
37114: LD_INT 22
37116: PUSH
37117: LD_VAR 0 5
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 91
37128: PUSH
37129: LD_VAR 0 8
37133: PUSH
37134: LD_INT 8
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 34
37147: PUSH
37148: LD_INT 12
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 34
37157: PUSH
37158: LD_INT 51
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 34
37167: PUSH
37168: LD_INT 32
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 34
37177: PUSH
37178: LD_INT 89
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 69
37201: ST_TO_ADDR
// if tmp then
37202: LD_VAR 0 4
37206: IFFALSE 37332
// begin for j in tmp do
37208: LD_ADDR_VAR 0 2
37212: PUSH
37213: LD_VAR 0 4
37217: PUSH
37218: FOR_IN
37219: IFFALSE 37330
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37221: LD_VAR 0 2
37225: PPUSH
37226: CALL_OW 262
37230: PUSH
37231: LD_INT 3
37233: EQUAL
37234: PUSH
37235: LD_VAR 0 2
37239: PPUSH
37240: CALL_OW 261
37244: PUSH
37245: LD_INT 20
37247: GREATER
37248: OR
37249: PUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: CALL_OW 314
37259: NOT
37260: AND
37261: PUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL_OW 263
37271: PUSH
37272: LD_INT 1
37274: NONEQUAL
37275: PUSH
37276: LD_VAR 0 2
37280: PPUSH
37281: CALL_OW 311
37285: OR
37286: AND
37287: IFFALSE 37328
// begin ComCollect ( j , x , y ) ;
37289: LD_VAR 0 2
37293: PPUSH
37294: LD_VAR 0 6
37298: PPUSH
37299: LD_VAR 0 7
37303: PPUSH
37304: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37308: LD_VAR 0 2
37312: PPUSH
37313: LD_VAR 0 8
37317: PPUSH
37318: CALL_OW 172
// exit ;
37322: POP
37323: POP
37324: POP
37325: POP
37326: GO 37336
// end ;
37328: GO 37218
37330: POP
37331: POP
// end ; end ;
37332: GO 36707
37334: POP
37335: POP
// end ; end_of_file
37336: PPOPN 9
37338: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37339: LD_INT 0
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 264
37354: PUSH
37355: LD_INT 91
37357: EQUAL
37358: IFFALSE 37430
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37360: LD_INT 68
37362: PPUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 255
37372: PPUSH
37373: CALL_OW 321
37377: PUSH
37378: LD_INT 2
37380: EQUAL
37381: IFFALSE 37393
// eff := 70 else
37383: LD_ADDR_VAR 0 4
37387: PUSH
37388: LD_INT 70
37390: ST_TO_ADDR
37391: GO 37401
// eff := 30 ;
37393: LD_ADDR_VAR 0 4
37397: PUSH
37398: LD_INT 30
37400: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 250
37410: PPUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL_OW 251
37420: PPUSH
37421: LD_VAR 0 4
37425: PPUSH
37426: CALL_OW 495
// end ; end ;
37430: LD_VAR 0 2
37434: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37435: LD_INT 0
37437: PPUSH
// end ;
37438: LD_VAR 0 4
37442: RET
// export function SOS_Command ( cmd ) ; begin
37443: LD_INT 0
37445: PPUSH
// end ;
37446: LD_VAR 0 2
37450: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37451: LD_INT 0
37453: PPUSH
// end ;
37454: LD_VAR 0 6
37458: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37459: LD_INT 0
37461: PPUSH
37462: PPUSH
// if not vehicle or not factory then
37463: LD_VAR 0 1
37467: NOT
37468: PUSH
37469: LD_VAR 0 2
37473: NOT
37474: OR
37475: IFFALSE 37479
// exit ;
37477: GO 37710
// if factoryWaypoints >= factory then
37479: LD_EXP 109
37483: PUSH
37484: LD_VAR 0 2
37488: GREATEREQUAL
37489: IFFALSE 37710
// if factoryWaypoints [ factory ] then
37491: LD_EXP 109
37495: PUSH
37496: LD_VAR 0 2
37500: ARRAY
37501: IFFALSE 37710
// begin if GetControl ( vehicle ) = control_manual then
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 263
37512: PUSH
37513: LD_INT 1
37515: EQUAL
37516: IFFALSE 37597
// begin driver := IsDrivenBy ( vehicle ) ;
37518: LD_ADDR_VAR 0 4
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 311
37532: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_EXP 109
37542: PUSH
37543: LD_VAR 0 2
37547: ARRAY
37548: PUSH
37549: LD_INT 3
37551: ARRAY
37552: PPUSH
37553: LD_EXP 109
37557: PUSH
37558: LD_VAR 0 2
37562: ARRAY
37563: PUSH
37564: LD_INT 4
37566: ARRAY
37567: PPUSH
37568: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37572: LD_VAR 0 4
37576: PPUSH
37577: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37581: LD_VAR 0 4
37585: PPUSH
37586: LD_VAR 0 2
37590: PPUSH
37591: CALL_OW 180
// end else
37595: GO 37710
// if GetControl ( vehicle ) = control_remote then
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 263
37606: PUSH
37607: LD_INT 2
37609: EQUAL
37610: IFFALSE 37671
// begin wait ( 0 0$2 ) ;
37612: LD_INT 70
37614: PPUSH
37615: CALL_OW 67
// if Connect ( vehicle ) then
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL 50375 0 1
37628: IFFALSE 37669
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37630: LD_VAR 0 1
37634: PPUSH
37635: LD_EXP 109
37639: PUSH
37640: LD_VAR 0 2
37644: ARRAY
37645: PUSH
37646: LD_INT 3
37648: ARRAY
37649: PPUSH
37650: LD_EXP 109
37654: PUSH
37655: LD_VAR 0 2
37659: ARRAY
37660: PUSH
37661: LD_INT 4
37663: ARRAY
37664: PPUSH
37665: CALL_OW 171
// end else
37669: GO 37710
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37671: LD_VAR 0 1
37675: PPUSH
37676: LD_EXP 109
37680: PUSH
37681: LD_VAR 0 2
37685: ARRAY
37686: PUSH
37687: LD_INT 3
37689: ARRAY
37690: PPUSH
37691: LD_EXP 109
37695: PUSH
37696: LD_VAR 0 2
37700: ARRAY
37701: PUSH
37702: LD_INT 4
37704: ARRAY
37705: PPUSH
37706: CALL_OW 171
// end ; end ;
37710: LD_VAR 0 3
37714: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37715: LD_INT 0
37717: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37718: LD_VAR 0 1
37722: PUSH
37723: LD_INT 250
37725: EQUAL
37726: PUSH
37727: LD_VAR 0 2
37731: PPUSH
37732: CALL_OW 264
37736: PUSH
37737: LD_INT 81
37739: EQUAL
37740: AND
37741: IFFALSE 37762
// MinerPlaceMine ( unit , x , y ) ;
37743: LD_VAR 0 2
37747: PPUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: LD_VAR 0 5
37757: PPUSH
37758: CALL 40586 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37762: LD_VAR 0 1
37766: PUSH
37767: LD_INT 251
37769: EQUAL
37770: PUSH
37771: LD_VAR 0 2
37775: PPUSH
37776: CALL_OW 264
37780: PUSH
37781: LD_INT 81
37783: EQUAL
37784: AND
37785: IFFALSE 37806
// MinerDetonateMine ( unit , x , y ) ;
37787: LD_VAR 0 2
37791: PPUSH
37792: LD_VAR 0 4
37796: PPUSH
37797: LD_VAR 0 5
37801: PPUSH
37802: CALL 40861 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37806: LD_VAR 0 1
37810: PUSH
37811: LD_INT 252
37813: EQUAL
37814: PUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_INT 81
37827: EQUAL
37828: AND
37829: IFFALSE 37850
// MinerCreateMinefield ( unit , x , y ) ;
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_VAR 0 4
37840: PPUSH
37841: LD_VAR 0 5
37845: PPUSH
37846: CALL 41278 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37850: LD_VAR 0 1
37854: PUSH
37855: LD_INT 253
37857: EQUAL
37858: PUSH
37859: LD_VAR 0 2
37863: PPUSH
37864: CALL_OW 257
37868: PUSH
37869: LD_INT 5
37871: EQUAL
37872: AND
37873: IFFALSE 37894
// ComBinocular ( unit , x , y ) ;
37875: LD_VAR 0 2
37879: PPUSH
37880: LD_VAR 0 4
37884: PPUSH
37885: LD_VAR 0 5
37889: PPUSH
37890: CALL 41647 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37894: LD_VAR 0 1
37898: PUSH
37899: LD_INT 254
37901: EQUAL
37902: PUSH
37903: LD_VAR 0 2
37907: PPUSH
37908: CALL_OW 264
37912: PUSH
37913: LD_INT 99
37915: EQUAL
37916: AND
37917: PUSH
37918: LD_VAR 0 3
37922: PPUSH
37923: CALL_OW 263
37927: PUSH
37928: LD_INT 3
37930: EQUAL
37931: AND
37932: IFFALSE 37948
// HackDestroyVehicle ( unit , selectedUnit ) ;
37934: LD_VAR 0 2
37938: PPUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: CALL 39950 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37948: LD_VAR 0 1
37952: PUSH
37953: LD_INT 255
37955: EQUAL
37956: PUSH
37957: LD_VAR 0 2
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 14
37969: PUSH
37970: LD_INT 53
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: IN
37977: AND
37978: PUSH
37979: LD_VAR 0 4
37983: PPUSH
37984: LD_VAR 0 5
37988: PPUSH
37989: CALL_OW 488
37993: AND
37994: IFFALSE 38018
// CutTreeXYR ( unit , x , y , 12 ) ;
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_VAR 0 4
38005: PPUSH
38006: LD_VAR 0 5
38010: PPUSH
38011: LD_INT 12
38013: PPUSH
38014: CALL 38113 0 4
// if cmd = 256 then
38018: LD_VAR 0 1
38022: PUSH
38023: LD_INT 256
38025: EQUAL
38026: IFFALSE 38047
// SetFactoryWaypoint ( unit , x , y ) ;
38028: LD_VAR 0 2
38032: PPUSH
38033: LD_VAR 0 4
38037: PPUSH
38038: LD_VAR 0 5
38042: PPUSH
38043: CALL 36028 0 3
// if cmd = 257 then
38047: LD_VAR 0 1
38051: PUSH
38052: LD_INT 257
38054: EQUAL
38055: IFFALSE 38076
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38057: LD_VAR 0 2
38061: PPUSH
38062: LD_VAR 0 4
38066: PPUSH
38067: LD_VAR 0 5
38071: PPUSH
38072: CALL 36390 0 3
// if cmd = 258 then
38076: LD_VAR 0 1
38080: PUSH
38081: LD_INT 258
38083: EQUAL
38084: IFFALSE 38108
// BurnTreeXYR ( unit , x , y , 8 ) ;
38086: LD_VAR 0 2
38090: PPUSH
38091: LD_VAR 0 4
38095: PPUSH
38096: LD_VAR 0 5
38100: PPUSH
38101: LD_INT 8
38103: PPUSH
38104: CALL 38507 0 4
// end ;
38108: LD_VAR 0 6
38112: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38113: LD_INT 0
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38124: LD_VAR 0 1
38128: PPUSH
38129: CALL_OW 302
38133: NOT
38134: PUSH
38135: LD_VAR 0 2
38139: PPUSH
38140: LD_VAR 0 3
38144: PPUSH
38145: CALL_OW 488
38149: NOT
38150: OR
38151: PUSH
38152: LD_VAR 0 4
38156: NOT
38157: OR
38158: IFFALSE 38162
// exit ;
38160: GO 38502
// list := [ ] ;
38162: LD_ADDR_VAR 0 13
38166: PUSH
38167: EMPTY
38168: ST_TO_ADDR
// if x - r < 0 then
38169: LD_VAR 0 2
38173: PUSH
38174: LD_VAR 0 4
38178: MINUS
38179: PUSH
38180: LD_INT 0
38182: LESS
38183: IFFALSE 38195
// min_x := 0 else
38185: LD_ADDR_VAR 0 7
38189: PUSH
38190: LD_INT 0
38192: ST_TO_ADDR
38193: GO 38211
// min_x := x - r ;
38195: LD_ADDR_VAR 0 7
38199: PUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_VAR 0 4
38209: MINUS
38210: ST_TO_ADDR
// if y - r < 0 then
38211: LD_VAR 0 3
38215: PUSH
38216: LD_VAR 0 4
38220: MINUS
38221: PUSH
38222: LD_INT 0
38224: LESS
38225: IFFALSE 38237
// min_y := 0 else
38227: LD_ADDR_VAR 0 8
38231: PUSH
38232: LD_INT 0
38234: ST_TO_ADDR
38235: GO 38253
// min_y := y - r ;
38237: LD_ADDR_VAR 0 8
38241: PUSH
38242: LD_VAR 0 3
38246: PUSH
38247: LD_VAR 0 4
38251: MINUS
38252: ST_TO_ADDR
// max_x := x + r ;
38253: LD_ADDR_VAR 0 9
38257: PUSH
38258: LD_VAR 0 2
38262: PUSH
38263: LD_VAR 0 4
38267: PLUS
38268: ST_TO_ADDR
// max_y := y + r ;
38269: LD_ADDR_VAR 0 10
38273: PUSH
38274: LD_VAR 0 3
38278: PUSH
38279: LD_VAR 0 4
38283: PLUS
38284: ST_TO_ADDR
// for _x = min_x to max_x do
38285: LD_ADDR_VAR 0 11
38289: PUSH
38290: DOUBLE
38291: LD_VAR 0 7
38295: DEC
38296: ST_TO_ADDR
38297: LD_VAR 0 9
38301: PUSH
38302: FOR_TO
38303: IFFALSE 38420
// for _y = min_y to max_y do
38305: LD_ADDR_VAR 0 12
38309: PUSH
38310: DOUBLE
38311: LD_VAR 0 8
38315: DEC
38316: ST_TO_ADDR
38317: LD_VAR 0 10
38321: PUSH
38322: FOR_TO
38323: IFFALSE 38416
// begin if not ValidHex ( _x , _y ) then
38325: LD_VAR 0 11
38329: PPUSH
38330: LD_VAR 0 12
38334: PPUSH
38335: CALL_OW 488
38339: NOT
38340: IFFALSE 38344
// continue ;
38342: GO 38322
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38344: LD_VAR 0 11
38348: PPUSH
38349: LD_VAR 0 12
38353: PPUSH
38354: CALL_OW 351
38358: PUSH
38359: LD_VAR 0 11
38363: PPUSH
38364: LD_VAR 0 12
38368: PPUSH
38369: CALL_OW 554
38373: AND
38374: IFFALSE 38414
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38376: LD_ADDR_VAR 0 13
38380: PUSH
38381: LD_VAR 0 13
38385: PPUSH
38386: LD_VAR 0 13
38390: PUSH
38391: LD_INT 1
38393: PLUS
38394: PPUSH
38395: LD_VAR 0 11
38399: PUSH
38400: LD_VAR 0 12
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PPUSH
38409: CALL_OW 2
38413: ST_TO_ADDR
// end ;
38414: GO 38322
38416: POP
38417: POP
38418: GO 38302
38420: POP
38421: POP
// if not list then
38422: LD_VAR 0 13
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 38502
// for i in list do
38431: LD_ADDR_VAR 0 6
38435: PUSH
38436: LD_VAR 0 13
38440: PUSH
38441: FOR_IN
38442: IFFALSE 38500
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38444: LD_VAR 0 1
38448: PPUSH
38449: LD_STRING M
38451: PUSH
38452: LD_VAR 0 6
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: PUSH
38461: LD_VAR 0 6
38465: PUSH
38466: LD_INT 2
38468: ARRAY
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: PPUSH
38494: CALL_OW 447
38498: GO 38441
38500: POP
38501: POP
// end ;
38502: LD_VAR 0 5
38506: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38507: LD_INT 0
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38518: LD_VAR 0 1
38522: PPUSH
38523: CALL_OW 302
38527: NOT
38528: PUSH
38529: LD_VAR 0 2
38533: PPUSH
38534: LD_VAR 0 3
38538: PPUSH
38539: CALL_OW 488
38543: NOT
38544: OR
38545: PUSH
38546: LD_VAR 0 4
38550: NOT
38551: OR
38552: IFFALSE 38556
// exit ;
38554: GO 38904
// list := [ ] ;
38556: LD_ADDR_VAR 0 13
38560: PUSH
38561: EMPTY
38562: ST_TO_ADDR
// if x - r < 0 then
38563: LD_VAR 0 2
38567: PUSH
38568: LD_VAR 0 4
38572: MINUS
38573: PUSH
38574: LD_INT 0
38576: LESS
38577: IFFALSE 38589
// min_x := 0 else
38579: LD_ADDR_VAR 0 7
38583: PUSH
38584: LD_INT 0
38586: ST_TO_ADDR
38587: GO 38605
// min_x := x - r ;
38589: LD_ADDR_VAR 0 7
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_VAR 0 4
38603: MINUS
38604: ST_TO_ADDR
// if y - r < 0 then
38605: LD_VAR 0 3
38609: PUSH
38610: LD_VAR 0 4
38614: MINUS
38615: PUSH
38616: LD_INT 0
38618: LESS
38619: IFFALSE 38631
// min_y := 0 else
38621: LD_ADDR_VAR 0 8
38625: PUSH
38626: LD_INT 0
38628: ST_TO_ADDR
38629: GO 38647
// min_y := y - r ;
38631: LD_ADDR_VAR 0 8
38635: PUSH
38636: LD_VAR 0 3
38640: PUSH
38641: LD_VAR 0 4
38645: MINUS
38646: ST_TO_ADDR
// max_x := x + r ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_VAR 0 2
38656: PUSH
38657: LD_VAR 0 4
38661: PLUS
38662: ST_TO_ADDR
// max_y := y + r ;
38663: LD_ADDR_VAR 0 10
38667: PUSH
38668: LD_VAR 0 3
38672: PUSH
38673: LD_VAR 0 4
38677: PLUS
38678: ST_TO_ADDR
// for _x = min_x to max_x do
38679: LD_ADDR_VAR 0 11
38683: PUSH
38684: DOUBLE
38685: LD_VAR 0 7
38689: DEC
38690: ST_TO_ADDR
38691: LD_VAR 0 9
38695: PUSH
38696: FOR_TO
38697: IFFALSE 38814
// for _y = min_y to max_y do
38699: LD_ADDR_VAR 0 12
38703: PUSH
38704: DOUBLE
38705: LD_VAR 0 8
38709: DEC
38710: ST_TO_ADDR
38711: LD_VAR 0 10
38715: PUSH
38716: FOR_TO
38717: IFFALSE 38810
// begin if not ValidHex ( _x , _y ) then
38719: LD_VAR 0 11
38723: PPUSH
38724: LD_VAR 0 12
38728: PPUSH
38729: CALL_OW 488
38733: NOT
38734: IFFALSE 38738
// continue ;
38736: GO 38716
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38738: LD_VAR 0 11
38742: PPUSH
38743: LD_VAR 0 12
38747: PPUSH
38748: CALL_OW 351
38752: PUSH
38753: LD_VAR 0 11
38757: PPUSH
38758: LD_VAR 0 12
38762: PPUSH
38763: CALL_OW 554
38767: AND
38768: IFFALSE 38808
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38770: LD_ADDR_VAR 0 13
38774: PUSH
38775: LD_VAR 0 13
38779: PPUSH
38780: LD_VAR 0 13
38784: PUSH
38785: LD_INT 1
38787: PLUS
38788: PPUSH
38789: LD_VAR 0 11
38793: PUSH
38794: LD_VAR 0 12
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PPUSH
38803: CALL_OW 2
38807: ST_TO_ADDR
// end ;
38808: GO 38716
38810: POP
38811: POP
38812: GO 38696
38814: POP
38815: POP
// if not list then
38816: LD_VAR 0 13
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 38904
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38825: LD_ADDR_VAR 0 13
38829: PUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: LD_VAR 0 13
38839: PPUSH
38840: LD_INT 1
38842: PPUSH
38843: LD_INT 1
38845: PPUSH
38846: CALL 47517 0 4
38850: ST_TO_ADDR
// ComStop ( flame ) ;
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 141
// for i in list do
38860: LD_ADDR_VAR 0 6
38864: PUSH
38865: LD_VAR 0 13
38869: PUSH
38870: FOR_IN
38871: IFFALSE 38902
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_VAR 0 6
38882: PUSH
38883: LD_INT 1
38885: ARRAY
38886: PPUSH
38887: LD_VAR 0 6
38891: PUSH
38892: LD_INT 2
38894: ARRAY
38895: PPUSH
38896: CALL_OW 176
38900: GO 38870
38902: POP
38903: POP
// end ;
38904: LD_VAR 0 5
38908: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38909: LD_EXP 112
38913: NOT
38914: IFFALSE 38964
38916: GO 38918
38918: DISABLE
// begin initHack := true ;
38919: LD_ADDR_EXP 112
38923: PUSH
38924: LD_INT 1
38926: ST_TO_ADDR
// hackTanks := [ ] ;
38927: LD_ADDR_EXP 113
38931: PUSH
38932: EMPTY
38933: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38934: LD_ADDR_EXP 114
38938: PUSH
38939: EMPTY
38940: ST_TO_ADDR
// hackLimit := 3 ;
38941: LD_ADDR_EXP 115
38945: PUSH
38946: LD_INT 3
38948: ST_TO_ADDR
// hackDist := 12 ;
38949: LD_ADDR_EXP 116
38953: PUSH
38954: LD_INT 12
38956: ST_TO_ADDR
// hackCounter := [ ] ;
38957: LD_ADDR_EXP 117
38961: PUSH
38962: EMPTY
38963: ST_TO_ADDR
// end ;
38964: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38965: LD_EXP 112
38969: PUSH
38970: LD_INT 34
38972: PUSH
38973: LD_INT 99
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PPUSH
38980: CALL_OW 69
38984: AND
38985: IFFALSE 39238
38987: GO 38989
38989: DISABLE
38990: LD_INT 0
38992: PPUSH
38993: PPUSH
// begin enable ;
38994: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38995: LD_ADDR_VAR 0 1
38999: PUSH
39000: LD_INT 34
39002: PUSH
39003: LD_INT 99
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PPUSH
39010: CALL_OW 69
39014: PUSH
39015: FOR_IN
39016: IFFALSE 39236
// begin if not i in hackTanks then
39018: LD_VAR 0 1
39022: PUSH
39023: LD_EXP 113
39027: IN
39028: NOT
39029: IFFALSE 39112
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39031: LD_ADDR_EXP 113
39035: PUSH
39036: LD_EXP 113
39040: PPUSH
39041: LD_EXP 113
39045: PUSH
39046: LD_INT 1
39048: PLUS
39049: PPUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 1
39059: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39060: LD_ADDR_EXP 114
39064: PUSH
39065: LD_EXP 114
39069: PPUSH
39070: LD_EXP 114
39074: PUSH
39075: LD_INT 1
39077: PLUS
39078: PPUSH
39079: EMPTY
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39086: LD_ADDR_EXP 117
39090: PUSH
39091: LD_EXP 117
39095: PPUSH
39096: LD_EXP 117
39100: PUSH
39101: LD_INT 1
39103: PLUS
39104: PPUSH
39105: EMPTY
39106: PPUSH
39107: CALL_OW 1
39111: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 302
39121: NOT
39122: IFFALSE 39135
// begin HackUnlinkAll ( i ) ;
39124: LD_VAR 0 1
39128: PPUSH
39129: CALL 39241 0 1
// continue ;
39133: GO 39015
// end ; HackCheckCapturedStatus ( i ) ;
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL 39684 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39144: LD_ADDR_VAR 0 2
39148: PUSH
39149: LD_INT 81
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 255
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 33
39168: PUSH
39169: LD_INT 3
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 91
39178: PUSH
39179: LD_VAR 0 1
39183: PUSH
39184: LD_EXP 116
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 50
39196: PUSH
39197: EMPTY
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: PPUSH
39206: CALL_OW 69
39210: ST_TO_ADDR
// if not tmp then
39211: LD_VAR 0 2
39215: NOT
39216: IFFALSE 39220
// continue ;
39218: GO 39015
// HackLink ( i , tmp ) ;
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_VAR 0 2
39229: PPUSH
39230: CALL 39377 0 2
// end ;
39234: GO 39015
39236: POP
39237: POP
// end ;
39238: PPOPN 2
39240: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
// if not hack in hackTanks then
39246: LD_VAR 0 1
39250: PUSH
39251: LD_EXP 113
39255: IN
39256: NOT
39257: IFFALSE 39261
// exit ;
39259: GO 39372
// index := GetElementIndex ( hackTanks , hack ) ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_EXP 113
39270: PPUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL 46814 0 2
39280: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39281: LD_EXP 114
39285: PUSH
39286: LD_VAR 0 4
39290: ARRAY
39291: IFFALSE 39372
// begin for i in hackTanksCaptured [ index ] do
39293: LD_ADDR_VAR 0 3
39297: PUSH
39298: LD_EXP 114
39302: PUSH
39303: LD_VAR 0 4
39307: ARRAY
39308: PUSH
39309: FOR_IN
39310: IFFALSE 39336
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39312: LD_VAR 0 3
39316: PUSH
39317: LD_INT 1
39319: ARRAY
39320: PPUSH
39321: LD_VAR 0 3
39325: PUSH
39326: LD_INT 2
39328: ARRAY
39329: PPUSH
39330: CALL_OW 235
39334: GO 39309
39336: POP
39337: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39338: LD_ADDR_EXP 114
39342: PUSH
39343: LD_EXP 114
39347: PPUSH
39348: LD_VAR 0 4
39352: PPUSH
39353: EMPTY
39354: PPUSH
39355: CALL_OW 1
39359: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39360: LD_VAR 0 1
39364: PPUSH
39365: LD_INT 0
39367: PPUSH
39368: CALL_OW 505
// end ; end ;
39372: LD_VAR 0 2
39376: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39377: LD_INT 0
39379: PPUSH
39380: PPUSH
39381: PPUSH
// if not hack in hackTanks or not vehicles then
39382: LD_VAR 0 1
39386: PUSH
39387: LD_EXP 113
39391: IN
39392: NOT
39393: PUSH
39394: LD_VAR 0 2
39398: NOT
39399: OR
39400: IFFALSE 39404
// exit ;
39402: GO 39679
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39404: LD_ADDR_VAR 0 2
39408: PUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_INT 1
39421: PPUSH
39422: LD_INT 1
39424: PPUSH
39425: CALL 47464 0 4
39429: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39430: LD_ADDR_VAR 0 5
39434: PUSH
39435: LD_EXP 113
39439: PPUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL 46814 0 2
39449: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39450: LD_EXP 114
39454: PUSH
39455: LD_VAR 0 5
39459: ARRAY
39460: PUSH
39461: LD_EXP 115
39465: LESS
39466: IFFALSE 39655
// begin for i := 1 to vehicles do
39468: LD_ADDR_VAR 0 4
39472: PUSH
39473: DOUBLE
39474: LD_INT 1
39476: DEC
39477: ST_TO_ADDR
39478: LD_VAR 0 2
39482: PUSH
39483: FOR_TO
39484: IFFALSE 39653
// begin if hackTanksCaptured [ index ] = hackLimit then
39486: LD_EXP 114
39490: PUSH
39491: LD_VAR 0 5
39495: ARRAY
39496: PUSH
39497: LD_EXP 115
39501: EQUAL
39502: IFFALSE 39506
// break ;
39504: GO 39653
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39506: LD_ADDR_EXP 117
39510: PUSH
39511: LD_EXP 117
39515: PPUSH
39516: LD_VAR 0 5
39520: PPUSH
39521: LD_EXP 117
39525: PUSH
39526: LD_VAR 0 5
39530: ARRAY
39531: PUSH
39532: LD_INT 1
39534: PLUS
39535: PPUSH
39536: CALL_OW 1
39540: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39541: LD_ADDR_EXP 114
39545: PUSH
39546: LD_EXP 114
39550: PPUSH
39551: LD_VAR 0 5
39555: PUSH
39556: LD_EXP 114
39560: PUSH
39561: LD_VAR 0 5
39565: ARRAY
39566: PUSH
39567: LD_INT 1
39569: PLUS
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PPUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_VAR 0 4
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 2
39590: PUSH
39591: LD_VAR 0 4
39595: ARRAY
39596: PPUSH
39597: CALL_OW 255
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL 47029 0 3
39610: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39611: LD_VAR 0 2
39615: PUSH
39616: LD_VAR 0 4
39620: ARRAY
39621: PPUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 255
39631: PPUSH
39632: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39636: LD_VAR 0 2
39640: PUSH
39641: LD_VAR 0 4
39645: ARRAY
39646: PPUSH
39647: CALL_OW 141
// end ;
39651: GO 39483
39653: POP
39654: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39655: LD_VAR 0 1
39659: PPUSH
39660: LD_EXP 114
39664: PUSH
39665: LD_VAR 0 5
39669: ARRAY
39670: PUSH
39671: LD_INT 0
39673: PLUS
39674: PPUSH
39675: CALL_OW 505
// end ;
39679: LD_VAR 0 3
39683: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
// if not hack in hackTanks then
39690: LD_VAR 0 1
39694: PUSH
39695: LD_EXP 113
39699: IN
39700: NOT
39701: IFFALSE 39705
// exit ;
39703: GO 39945
// index := GetElementIndex ( hackTanks , hack ) ;
39705: LD_ADDR_VAR 0 4
39709: PUSH
39710: LD_EXP 113
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL 46814 0 2
39724: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: DOUBLE
39731: LD_EXP 114
39735: PUSH
39736: LD_VAR 0 4
39740: ARRAY
39741: INC
39742: ST_TO_ADDR
39743: LD_INT 1
39745: PUSH
39746: FOR_DOWNTO
39747: IFFALSE 39919
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_EXP 114
39758: PUSH
39759: LD_VAR 0 4
39763: ARRAY
39764: PUSH
39765: LD_VAR 0 3
39769: ARRAY
39770: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39771: LD_VAR 0 5
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: PPUSH
39780: CALL_OW 302
39784: NOT
39785: PUSH
39786: LD_VAR 0 5
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: PPUSH
39795: CALL_OW 255
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 255
39809: NONEQUAL
39810: OR
39811: IFFALSE 39917
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39813: LD_VAR 0 5
39817: PUSH
39818: LD_INT 1
39820: ARRAY
39821: PPUSH
39822: CALL_OW 305
39826: PUSH
39827: LD_VAR 0 5
39831: PUSH
39832: LD_INT 1
39834: ARRAY
39835: PPUSH
39836: CALL_OW 255
39840: PUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 255
39850: EQUAL
39851: AND
39852: IFFALSE 39876
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39854: LD_VAR 0 5
39858: PUSH
39859: LD_INT 1
39861: ARRAY
39862: PPUSH
39863: LD_VAR 0 5
39867: PUSH
39868: LD_INT 2
39870: ARRAY
39871: PPUSH
39872: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39876: LD_ADDR_EXP 114
39880: PUSH
39881: LD_EXP 114
39885: PPUSH
39886: LD_VAR 0 4
39890: PPUSH
39891: LD_EXP 114
39895: PUSH
39896: LD_VAR 0 4
39900: ARRAY
39901: PPUSH
39902: LD_VAR 0 3
39906: PPUSH
39907: CALL_OW 3
39911: PPUSH
39912: CALL_OW 1
39916: ST_TO_ADDR
// end ; end ;
39917: GO 39746
39919: POP
39920: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_EXP 114
39930: PUSH
39931: LD_VAR 0 4
39935: ARRAY
39936: PUSH
39937: LD_INT 0
39939: PLUS
39940: PPUSH
39941: CALL_OW 505
// end ;
39945: LD_VAR 0 2
39949: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39950: LD_INT 0
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
// if not hack in hackTanks then
39956: LD_VAR 0 1
39960: PUSH
39961: LD_EXP 113
39965: IN
39966: NOT
39967: IFFALSE 39971
// exit ;
39969: GO 40056
// index := GetElementIndex ( hackTanks , hack ) ;
39971: LD_ADDR_VAR 0 5
39975: PUSH
39976: LD_EXP 113
39980: PPUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: CALL 46814 0 2
39990: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39991: LD_ADDR_VAR 0 4
39995: PUSH
39996: DOUBLE
39997: LD_INT 1
39999: DEC
40000: ST_TO_ADDR
40001: LD_EXP 114
40005: PUSH
40006: LD_VAR 0 5
40010: ARRAY
40011: PUSH
40012: FOR_TO
40013: IFFALSE 40054
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40015: LD_EXP 114
40019: PUSH
40020: LD_VAR 0 5
40024: ARRAY
40025: PUSH
40026: LD_VAR 0 4
40030: ARRAY
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PUSH
40036: LD_VAR 0 2
40040: EQUAL
40041: IFFALSE 40052
// KillUnit ( vehicle ) ;
40043: LD_VAR 0 2
40047: PPUSH
40048: CALL_OW 66
40052: GO 40012
40054: POP
40055: POP
// end ;
40056: LD_VAR 0 3
40060: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40061: LD_EXP 118
40065: NOT
40066: IFFALSE 40101
40068: GO 40070
40070: DISABLE
// begin initMiner := true ;
40071: LD_ADDR_EXP 118
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// minersList := [ ] ;
40079: LD_ADDR_EXP 119
40083: PUSH
40084: EMPTY
40085: ST_TO_ADDR
// minerMinesList := [ ] ;
40086: LD_ADDR_EXP 120
40090: PUSH
40091: EMPTY
40092: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40093: LD_ADDR_EXP 121
40097: PUSH
40098: LD_INT 5
40100: ST_TO_ADDR
// end ;
40101: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40102: LD_EXP 118
40106: PUSH
40107: LD_INT 34
40109: PUSH
40110: LD_INT 81
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PPUSH
40117: CALL_OW 69
40121: AND
40122: IFFALSE 40583
40124: GO 40126
40126: DISABLE
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
// begin enable ;
40133: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40134: LD_ADDR_VAR 0 1
40138: PUSH
40139: LD_INT 34
40141: PUSH
40142: LD_INT 81
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 69
40153: PUSH
40154: FOR_IN
40155: IFFALSE 40227
// begin if not i in minersList then
40157: LD_VAR 0 1
40161: PUSH
40162: LD_EXP 119
40166: IN
40167: NOT
40168: IFFALSE 40225
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40170: LD_ADDR_EXP 119
40174: PUSH
40175: LD_EXP 119
40179: PPUSH
40180: LD_EXP 119
40184: PUSH
40185: LD_INT 1
40187: PLUS
40188: PPUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 1
40198: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40199: LD_ADDR_EXP 120
40203: PUSH
40204: LD_EXP 120
40208: PPUSH
40209: LD_EXP 120
40213: PUSH
40214: LD_INT 1
40216: PLUS
40217: PPUSH
40218: EMPTY
40219: PPUSH
40220: CALL_OW 1
40224: ST_TO_ADDR
// end end ;
40225: GO 40154
40227: POP
40228: POP
// for i := minerMinesList downto 1 do
40229: LD_ADDR_VAR 0 1
40233: PUSH
40234: DOUBLE
40235: LD_EXP 120
40239: INC
40240: ST_TO_ADDR
40241: LD_INT 1
40243: PUSH
40244: FOR_DOWNTO
40245: IFFALSE 40581
// begin if IsLive ( minersList [ i ] ) then
40247: LD_EXP 119
40251: PUSH
40252: LD_VAR 0 1
40256: ARRAY
40257: PPUSH
40258: CALL_OW 300
40262: IFFALSE 40290
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40264: LD_EXP 119
40268: PUSH
40269: LD_VAR 0 1
40273: ARRAY
40274: PPUSH
40275: LD_EXP 120
40279: PUSH
40280: LD_VAR 0 1
40284: ARRAY
40285: PPUSH
40286: CALL_OW 505
// if not minerMinesList [ i ] then
40290: LD_EXP 120
40294: PUSH
40295: LD_VAR 0 1
40299: ARRAY
40300: NOT
40301: IFFALSE 40305
// continue ;
40303: GO 40244
// for j := minerMinesList [ i ] downto 1 do
40305: LD_ADDR_VAR 0 2
40309: PUSH
40310: DOUBLE
40311: LD_EXP 120
40315: PUSH
40316: LD_VAR 0 1
40320: ARRAY
40321: INC
40322: ST_TO_ADDR
40323: LD_INT 1
40325: PUSH
40326: FOR_DOWNTO
40327: IFFALSE 40577
// begin side := GetSide ( minersList [ i ] ) ;
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: LD_EXP 119
40338: PUSH
40339: LD_VAR 0 1
40343: ARRAY
40344: PPUSH
40345: CALL_OW 255
40349: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_EXP 120
40359: PUSH
40360: LD_VAR 0 1
40364: ARRAY
40365: PUSH
40366: LD_VAR 0 2
40370: ARRAY
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: PPUSH
40376: LD_EXP 120
40380: PUSH
40381: LD_VAR 0 1
40385: ARRAY
40386: PUSH
40387: LD_VAR 0 2
40391: ARRAY
40392: PUSH
40393: LD_INT 2
40395: ARRAY
40396: PPUSH
40397: CALL_OW 428
40401: ST_TO_ADDR
// if not tmp then
40402: LD_VAR 0 4
40406: NOT
40407: IFFALSE 40411
// continue ;
40409: GO 40326
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40411: LD_VAR 0 4
40415: PUSH
40416: LD_INT 81
40418: PUSH
40419: LD_VAR 0 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PPUSH
40428: CALL_OW 69
40432: IN
40433: PUSH
40434: LD_EXP 120
40438: PUSH
40439: LD_VAR 0 1
40443: ARRAY
40444: PUSH
40445: LD_VAR 0 2
40449: ARRAY
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: PPUSH
40455: LD_EXP 120
40459: PUSH
40460: LD_VAR 0 1
40464: ARRAY
40465: PUSH
40466: LD_VAR 0 2
40470: ARRAY
40471: PUSH
40472: LD_INT 2
40474: ARRAY
40475: PPUSH
40476: CALL_OW 458
40480: AND
40481: IFFALSE 40575
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40483: LD_EXP 120
40487: PUSH
40488: LD_VAR 0 1
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 2
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PPUSH
40504: LD_EXP 120
40508: PUSH
40509: LD_VAR 0 1
40513: ARRAY
40514: PUSH
40515: LD_VAR 0 2
40519: ARRAY
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: PPUSH
40525: LD_VAR 0 3
40529: PPUSH
40530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40534: LD_ADDR_EXP 120
40538: PUSH
40539: LD_EXP 120
40543: PPUSH
40544: LD_VAR 0 1
40548: PPUSH
40549: LD_EXP 120
40553: PUSH
40554: LD_VAR 0 1
40558: ARRAY
40559: PPUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: CALL_OW 3
40569: PPUSH
40570: CALL_OW 1
40574: ST_TO_ADDR
// end ; end ;
40575: GO 40326
40577: POP
40578: POP
// end ;
40579: GO 40244
40581: POP
40582: POP
// end ;
40583: PPOPN 4
40585: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40586: LD_INT 0
40588: PPUSH
40589: PPUSH
// result := false ;
40590: LD_ADDR_VAR 0 4
40594: PUSH
40595: LD_INT 0
40597: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 264
40607: PUSH
40608: LD_INT 81
40610: EQUAL
40611: NOT
40612: IFFALSE 40616
// exit ;
40614: GO 40856
// index := GetElementIndex ( minersList , unit ) ;
40616: LD_ADDR_VAR 0 5
40620: PUSH
40621: LD_EXP 119
40625: PPUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL 46814 0 2
40635: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40636: LD_EXP 120
40640: PUSH
40641: LD_VAR 0 5
40645: ARRAY
40646: PUSH
40647: LD_EXP 121
40651: GREATEREQUAL
40652: IFFALSE 40656
// exit ;
40654: GO 40856
// ComMoveXY ( unit , x , y ) ;
40656: LD_VAR 0 1
40660: PPUSH
40661: LD_VAR 0 2
40665: PPUSH
40666: LD_VAR 0 3
40670: PPUSH
40671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40675: LD_INT 35
40677: PPUSH
40678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40682: LD_VAR 0 1
40686: PPUSH
40687: LD_VAR 0 2
40691: PPUSH
40692: LD_VAR 0 3
40696: PPUSH
40697: CALL 78566 0 3
40701: NOT
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 314
40712: AND
40713: IFFALSE 40717
// exit ;
40715: GO 40856
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40717: LD_VAR 0 2
40721: PPUSH
40722: LD_VAR 0 3
40726: PPUSH
40727: CALL_OW 428
40731: PUSH
40732: LD_VAR 0 1
40736: EQUAL
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 314
40747: NOT
40748: AND
40749: IFFALSE 40675
// PlaySoundXY ( x , y , PlantMine ) ;
40751: LD_VAR 0 2
40755: PPUSH
40756: LD_VAR 0 3
40760: PPUSH
40761: LD_STRING PlantMine
40763: PPUSH
40764: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_VAR 0 3
40777: PPUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 255
40787: PPUSH
40788: LD_INT 0
40790: PPUSH
40791: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40795: LD_ADDR_EXP 120
40799: PUSH
40800: LD_EXP 120
40804: PPUSH
40805: LD_VAR 0 5
40809: PUSH
40810: LD_EXP 120
40814: PUSH
40815: LD_VAR 0 5
40819: ARRAY
40820: PUSH
40821: LD_INT 1
40823: PLUS
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PPUSH
40829: LD_VAR 0 2
40833: PUSH
40834: LD_VAR 0 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PPUSH
40843: CALL 47029 0 3
40847: ST_TO_ADDR
// result := true ;
40848: LD_ADDR_VAR 0 4
40852: PUSH
40853: LD_INT 1
40855: ST_TO_ADDR
// end ;
40856: LD_VAR 0 4
40860: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40861: LD_INT 0
40863: PPUSH
40864: PPUSH
40865: PPUSH
// if not unit in minersList then
40866: LD_VAR 0 1
40870: PUSH
40871: LD_EXP 119
40875: IN
40876: NOT
40877: IFFALSE 40881
// exit ;
40879: GO 41273
// index := GetElementIndex ( minersList , unit ) ;
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_EXP 119
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL 46814 0 2
40900: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40901: LD_ADDR_VAR 0 5
40905: PUSH
40906: DOUBLE
40907: LD_EXP 120
40911: PUSH
40912: LD_VAR 0 6
40916: ARRAY
40917: INC
40918: ST_TO_ADDR
40919: LD_INT 1
40921: PUSH
40922: FOR_DOWNTO
40923: IFFALSE 41084
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40925: LD_EXP 120
40929: PUSH
40930: LD_VAR 0 6
40934: ARRAY
40935: PUSH
40936: LD_VAR 0 5
40940: ARRAY
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: PUSH
40946: LD_VAR 0 2
40950: EQUAL
40951: PUSH
40952: LD_EXP 120
40956: PUSH
40957: LD_VAR 0 6
40961: ARRAY
40962: PUSH
40963: LD_VAR 0 5
40967: ARRAY
40968: PUSH
40969: LD_INT 2
40971: ARRAY
40972: PUSH
40973: LD_VAR 0 3
40977: EQUAL
40978: AND
40979: IFFALSE 41082
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40981: LD_EXP 120
40985: PUSH
40986: LD_VAR 0 6
40990: ARRAY
40991: PUSH
40992: LD_VAR 0 5
40996: ARRAY
40997: PUSH
40998: LD_INT 1
41000: ARRAY
41001: PPUSH
41002: LD_EXP 120
41006: PUSH
41007: LD_VAR 0 6
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 5
41017: ARRAY
41018: PUSH
41019: LD_INT 2
41021: ARRAY
41022: PPUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 255
41032: PPUSH
41033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41037: LD_ADDR_EXP 120
41041: PUSH
41042: LD_EXP 120
41046: PPUSH
41047: LD_VAR 0 6
41051: PPUSH
41052: LD_EXP 120
41056: PUSH
41057: LD_VAR 0 6
41061: ARRAY
41062: PPUSH
41063: LD_VAR 0 5
41067: PPUSH
41068: CALL_OW 3
41072: PPUSH
41073: CALL_OW 1
41077: ST_TO_ADDR
// exit ;
41078: POP
41079: POP
41080: GO 41273
// end ; end ;
41082: GO 40922
41084: POP
41085: POP
// for i := minerMinesList [ index ] downto 1 do
41086: LD_ADDR_VAR 0 5
41090: PUSH
41091: DOUBLE
41092: LD_EXP 120
41096: PUSH
41097: LD_VAR 0 6
41101: ARRAY
41102: INC
41103: ST_TO_ADDR
41104: LD_INT 1
41106: PUSH
41107: FOR_DOWNTO
41108: IFFALSE 41271
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41110: LD_EXP 120
41114: PUSH
41115: LD_VAR 0 6
41119: ARRAY
41120: PUSH
41121: LD_VAR 0 5
41125: ARRAY
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PPUSH
41131: LD_EXP 120
41135: PUSH
41136: LD_VAR 0 6
41140: ARRAY
41141: PUSH
41142: LD_VAR 0 5
41146: ARRAY
41147: PUSH
41148: LD_INT 2
41150: ARRAY
41151: PPUSH
41152: LD_VAR 0 2
41156: PPUSH
41157: LD_VAR 0 3
41161: PPUSH
41162: CALL_OW 298
41166: PUSH
41167: LD_INT 6
41169: LESS
41170: IFFALSE 41269
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41172: LD_EXP 120
41176: PUSH
41177: LD_VAR 0 6
41181: ARRAY
41182: PUSH
41183: LD_VAR 0 5
41187: ARRAY
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: PPUSH
41193: LD_EXP 120
41197: PUSH
41198: LD_VAR 0 6
41202: ARRAY
41203: PUSH
41204: LD_VAR 0 5
41208: ARRAY
41209: PUSH
41210: LD_INT 2
41212: ARRAY
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 255
41223: PPUSH
41224: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41228: LD_ADDR_EXP 120
41232: PUSH
41233: LD_EXP 120
41237: PPUSH
41238: LD_VAR 0 6
41242: PPUSH
41243: LD_EXP 120
41247: PUSH
41248: LD_VAR 0 6
41252: ARRAY
41253: PPUSH
41254: LD_VAR 0 5
41258: PPUSH
41259: CALL_OW 3
41263: PPUSH
41264: CALL_OW 1
41268: ST_TO_ADDR
// end ; end ;
41269: GO 41107
41271: POP
41272: POP
// end ;
41273: LD_VAR 0 4
41277: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 264
41298: PUSH
41299: LD_INT 81
41301: EQUAL
41302: NOT
41303: PUSH
41304: LD_VAR 0 1
41308: PUSH
41309: LD_EXP 119
41313: IN
41314: NOT
41315: OR
41316: IFFALSE 41320
// exit ;
41318: GO 41642
// index := GetElementIndex ( minersList , unit ) ;
41320: LD_ADDR_VAR 0 6
41324: PUSH
41325: LD_EXP 119
41329: PPUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: CALL 46814 0 2
41339: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41340: LD_ADDR_VAR 0 8
41344: PUSH
41345: LD_EXP 121
41349: PUSH
41350: LD_EXP 120
41354: PUSH
41355: LD_VAR 0 6
41359: ARRAY
41360: MINUS
41361: ST_TO_ADDR
// if not minesFreeAmount then
41362: LD_VAR 0 8
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41642
// tmp := [ ] ;
41371: LD_ADDR_VAR 0 7
41375: PUSH
41376: EMPTY
41377: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: DOUBLE
41384: LD_INT 1
41386: DEC
41387: ST_TO_ADDR
41388: LD_VAR 0 8
41392: PUSH
41393: FOR_TO
41394: IFFALSE 41589
// begin _d := rand ( 0 , 5 ) ;
41396: LD_ADDR_VAR 0 11
41400: PUSH
41401: LD_INT 0
41403: PPUSH
41404: LD_INT 5
41406: PPUSH
41407: CALL_OW 12
41411: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41412: LD_ADDR_VAR 0 12
41416: PUSH
41417: LD_INT 2
41419: PPUSH
41420: LD_INT 6
41422: PPUSH
41423: CALL_OW 12
41427: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41428: LD_ADDR_VAR 0 9
41432: PUSH
41433: LD_VAR 0 2
41437: PPUSH
41438: LD_VAR 0 11
41442: PPUSH
41443: LD_VAR 0 12
41447: PPUSH
41448: CALL_OW 272
41452: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41453: LD_ADDR_VAR 0 10
41457: PUSH
41458: LD_VAR 0 3
41462: PPUSH
41463: LD_VAR 0 11
41467: PPUSH
41468: LD_VAR 0 12
41472: PPUSH
41473: CALL_OW 273
41477: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41478: LD_VAR 0 9
41482: PPUSH
41483: LD_VAR 0 10
41487: PPUSH
41488: CALL_OW 488
41492: PUSH
41493: LD_VAR 0 9
41497: PUSH
41498: LD_VAR 0 10
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_VAR 0 7
41511: IN
41512: NOT
41513: AND
41514: PUSH
41515: LD_VAR 0 9
41519: PPUSH
41520: LD_VAR 0 10
41524: PPUSH
41525: CALL_OW 458
41529: NOT
41530: AND
41531: IFFALSE 41573
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41533: LD_ADDR_VAR 0 7
41537: PUSH
41538: LD_VAR 0 7
41542: PPUSH
41543: LD_VAR 0 7
41547: PUSH
41548: LD_INT 1
41550: PLUS
41551: PPUSH
41552: LD_VAR 0 9
41556: PUSH
41557: LD_VAR 0 10
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PPUSH
41566: CALL_OW 1
41570: ST_TO_ADDR
41571: GO 41587
// i := i - 1 ;
41573: LD_ADDR_VAR 0 5
41577: PUSH
41578: LD_VAR 0 5
41582: PUSH
41583: LD_INT 1
41585: MINUS
41586: ST_TO_ADDR
// end ;
41587: GO 41393
41589: POP
41590: POP
// for i in tmp do
41591: LD_ADDR_VAR 0 5
41595: PUSH
41596: LD_VAR 0 7
41600: PUSH
41601: FOR_IN
41602: IFFALSE 41640
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41604: LD_VAR 0 1
41608: PPUSH
41609: LD_VAR 0 5
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 5
41622: PUSH
41623: LD_INT 2
41625: ARRAY
41626: PPUSH
41627: CALL 40586 0 3
41631: NOT
41632: IFFALSE 41638
// exit ;
41634: POP
41635: POP
41636: GO 41642
41638: GO 41601
41640: POP
41641: POP
// end ;
41642: LD_VAR 0 4
41646: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41647: LD_INT 0
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
// if not GetClass ( unit ) = class_sniper then
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 257
41665: PUSH
41666: LD_INT 5
41668: EQUAL
41669: NOT
41670: IFFALSE 41674
// exit ;
41672: GO 42062
// dist := 8 ;
41674: LD_ADDR_VAR 0 5
41678: PUSH
41679: LD_INT 8
41681: ST_TO_ADDR
// viewRange := 12 ;
41682: LD_ADDR_VAR 0 7
41686: PUSH
41687: LD_INT 12
41689: ST_TO_ADDR
// side := GetSide ( unit ) ;
41690: LD_ADDR_VAR 0 6
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 255
41704: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41705: LD_INT 61
41707: PPUSH
41708: LD_VAR 0 6
41712: PPUSH
41713: CALL_OW 321
41717: PUSH
41718: LD_INT 2
41720: EQUAL
41721: IFFALSE 41731
// viewRange := 16 ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: LD_INT 16
41730: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41731: LD_VAR 0 1
41735: PPUSH
41736: LD_VAR 0 2
41740: PPUSH
41741: LD_VAR 0 3
41745: PPUSH
41746: CALL_OW 297
41750: PUSH
41751: LD_VAR 0 5
41755: GREATER
41756: IFFALSE 41835
// begin ComMoveXY ( unit , x , y ) ;
41758: LD_VAR 0 1
41762: PPUSH
41763: LD_VAR 0 2
41767: PPUSH
41768: LD_VAR 0 3
41772: PPUSH
41773: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41777: LD_INT 35
41779: PPUSH
41780: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41784: LD_VAR 0 1
41788: PPUSH
41789: LD_VAR 0 2
41793: PPUSH
41794: LD_VAR 0 3
41798: PPUSH
41799: CALL 78566 0 3
41803: NOT
41804: IFFALSE 41808
// exit ;
41806: GO 42062
// until GetDistUnitXY ( unit , x , y ) < dist ;
41808: LD_VAR 0 1
41812: PPUSH
41813: LD_VAR 0 2
41817: PPUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 297
41827: PUSH
41828: LD_VAR 0 5
41832: LESS
41833: IFFALSE 41777
// end ; ComTurnXY ( unit , x , y ) ;
41835: LD_VAR 0 1
41839: PPUSH
41840: LD_VAR 0 2
41844: PPUSH
41845: LD_VAR 0 3
41849: PPUSH
41850: CALL_OW 118
// wait ( 5 ) ;
41854: LD_INT 5
41856: PPUSH
41857: CALL_OW 67
// _d := GetDir ( unit ) ;
41861: LD_ADDR_VAR 0 10
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 254
41875: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41876: LD_ADDR_VAR 0 8
41880: PUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 250
41890: PPUSH
41891: LD_VAR 0 10
41895: PPUSH
41896: LD_VAR 0 5
41900: PPUSH
41901: CALL_OW 272
41905: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41906: LD_ADDR_VAR 0 9
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 251
41920: PPUSH
41921: LD_VAR 0 10
41925: PPUSH
41926: LD_VAR 0 5
41930: PPUSH
41931: CALL_OW 273
41935: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41936: LD_VAR 0 8
41940: PPUSH
41941: LD_VAR 0 9
41945: PPUSH
41946: CALL_OW 488
41950: NOT
41951: IFFALSE 41955
// exit ;
41953: GO 42062
// ComAnimCustom ( unit , 1 ) ;
41955: LD_VAR 0 1
41959: PPUSH
41960: LD_INT 1
41962: PPUSH
41963: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41967: LD_VAR 0 8
41971: PPUSH
41972: LD_VAR 0 9
41976: PPUSH
41977: LD_VAR 0 6
41981: PPUSH
41982: LD_VAR 0 7
41986: PPUSH
41987: CALL_OW 330
// repeat wait ( 1 ) ;
41991: LD_INT 1
41993: PPUSH
41994: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41998: LD_VAR 0 1
42002: PPUSH
42003: CALL_OW 316
42007: PUSH
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 314
42017: OR
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 302
42028: NOT
42029: OR
42030: PUSH
42031: LD_VAR 0 1
42035: PPUSH
42036: CALL_OW 301
42040: OR
42041: IFFALSE 41991
// RemoveSeeing ( _x , _y , side ) ;
42043: LD_VAR 0 8
42047: PPUSH
42048: LD_VAR 0 9
42052: PPUSH
42053: LD_VAR 0 6
42057: PPUSH
42058: CALL_OW 331
// end ; end_of_file
42062: LD_VAR 0 4
42066: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42067: LD_INT 0
42069: PPUSH
42070: PPUSH
// if exist_mode then
42071: LD_VAR 0 2
42075: IFFALSE 42100
// unit := CreateCharacter ( prefix & ident ) else
42077: LD_ADDR_VAR 0 5
42081: PUSH
42082: LD_VAR 0 3
42086: PUSH
42087: LD_VAR 0 1
42091: STR
42092: PPUSH
42093: CALL_OW 34
42097: ST_TO_ADDR
42098: GO 42115
// unit := NewCharacter ( ident ) ;
42100: LD_ADDR_VAR 0 5
42104: PUSH
42105: LD_VAR 0 1
42109: PPUSH
42110: CALL_OW 25
42114: ST_TO_ADDR
// result := unit ;
42115: LD_ADDR_VAR 0 4
42119: PUSH
42120: LD_VAR 0 5
42124: ST_TO_ADDR
// end ;
42125: LD_VAR 0 4
42129: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42130: LD_INT 0
42132: PPUSH
42133: PPUSH
// if not side or not nation then
42134: LD_VAR 0 1
42138: NOT
42139: PUSH
42140: LD_VAR 0 2
42144: NOT
42145: OR
42146: IFFALSE 42150
// exit ;
42148: GO 42918
// case nation of nation_american :
42150: LD_VAR 0 2
42154: PUSH
42155: LD_INT 1
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42163
42161: GO 42377
42163: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42164: LD_ADDR_VAR 0 4
42168: PUSH
42169: LD_INT 35
42171: PUSH
42172: LD_INT 45
42174: PUSH
42175: LD_INT 46
42177: PUSH
42178: LD_INT 47
42180: PUSH
42181: LD_INT 82
42183: PUSH
42184: LD_INT 83
42186: PUSH
42187: LD_INT 84
42189: PUSH
42190: LD_INT 85
42192: PUSH
42193: LD_INT 86
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 6
42204: PUSH
42205: LD_INT 15
42207: PUSH
42208: LD_INT 16
42210: PUSH
42211: LD_INT 7
42213: PUSH
42214: LD_INT 12
42216: PUSH
42217: LD_INT 13
42219: PUSH
42220: LD_INT 10
42222: PUSH
42223: LD_INT 14
42225: PUSH
42226: LD_INT 20
42228: PUSH
42229: LD_INT 21
42231: PUSH
42232: LD_INT 22
42234: PUSH
42235: LD_INT 25
42237: PUSH
42238: LD_INT 32
42240: PUSH
42241: LD_INT 27
42243: PUSH
42244: LD_INT 36
42246: PUSH
42247: LD_INT 69
42249: PUSH
42250: LD_INT 39
42252: PUSH
42253: LD_INT 34
42255: PUSH
42256: LD_INT 40
42258: PUSH
42259: LD_INT 48
42261: PUSH
42262: LD_INT 49
42264: PUSH
42265: LD_INT 50
42267: PUSH
42268: LD_INT 51
42270: PUSH
42271: LD_INT 52
42273: PUSH
42274: LD_INT 53
42276: PUSH
42277: LD_INT 54
42279: PUSH
42280: LD_INT 55
42282: PUSH
42283: LD_INT 56
42285: PUSH
42286: LD_INT 57
42288: PUSH
42289: LD_INT 58
42291: PUSH
42292: LD_INT 59
42294: PUSH
42295: LD_INT 60
42297: PUSH
42298: LD_INT 61
42300: PUSH
42301: LD_INT 62
42303: PUSH
42304: LD_INT 80
42306: PUSH
42307: LD_INT 82
42309: PUSH
42310: LD_INT 83
42312: PUSH
42313: LD_INT 84
42315: PUSH
42316: LD_INT 85
42318: PUSH
42319: LD_INT 86
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
42375: GO 42842
42377: LD_INT 2
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42385
42383: GO 42611
42385: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42386: LD_ADDR_VAR 0 4
42390: PUSH
42391: LD_INT 35
42393: PUSH
42394: LD_INT 45
42396: PUSH
42397: LD_INT 46
42399: PUSH
42400: LD_INT 47
42402: PUSH
42403: LD_INT 82
42405: PUSH
42406: LD_INT 83
42408: PUSH
42409: LD_INT 84
42411: PUSH
42412: LD_INT 85
42414: PUSH
42415: LD_INT 87
42417: PUSH
42418: LD_INT 70
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 11
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 4
42432: PUSH
42433: LD_INT 5
42435: PUSH
42436: LD_INT 6
42438: PUSH
42439: LD_INT 15
42441: PUSH
42442: LD_INT 18
42444: PUSH
42445: LD_INT 7
42447: PUSH
42448: LD_INT 17
42450: PUSH
42451: LD_INT 8
42453: PUSH
42454: LD_INT 20
42456: PUSH
42457: LD_INT 21
42459: PUSH
42460: LD_INT 22
42462: PUSH
42463: LD_INT 72
42465: PUSH
42466: LD_INT 26
42468: PUSH
42469: LD_INT 69
42471: PUSH
42472: LD_INT 39
42474: PUSH
42475: LD_INT 40
42477: PUSH
42478: LD_INT 41
42480: PUSH
42481: LD_INT 42
42483: PUSH
42484: LD_INT 43
42486: PUSH
42487: LD_INT 48
42489: PUSH
42490: LD_INT 49
42492: PUSH
42493: LD_INT 50
42495: PUSH
42496: LD_INT 51
42498: PUSH
42499: LD_INT 52
42501: PUSH
42502: LD_INT 53
42504: PUSH
42505: LD_INT 54
42507: PUSH
42508: LD_INT 55
42510: PUSH
42511: LD_INT 56
42513: PUSH
42514: LD_INT 60
42516: PUSH
42517: LD_INT 61
42519: PUSH
42520: LD_INT 62
42522: PUSH
42523: LD_INT 66
42525: PUSH
42526: LD_INT 67
42528: PUSH
42529: LD_INT 68
42531: PUSH
42532: LD_INT 81
42534: PUSH
42535: LD_INT 82
42537: PUSH
42538: LD_INT 83
42540: PUSH
42541: LD_INT 84
42543: PUSH
42544: LD_INT 85
42546: PUSH
42547: LD_INT 87
42549: PUSH
42550: LD_INT 88
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
42609: GO 42842
42611: LD_INT 3
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42841
42619: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42620: LD_ADDR_VAR 0 4
42624: PUSH
42625: LD_INT 46
42627: PUSH
42628: LD_INT 47
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 82
42639: PUSH
42640: LD_INT 83
42642: PUSH
42643: LD_INT 84
42645: PUSH
42646: LD_INT 85
42648: PUSH
42649: LD_INT 86
42651: PUSH
42652: LD_INT 11
42654: PUSH
42655: LD_INT 9
42657: PUSH
42658: LD_INT 20
42660: PUSH
42661: LD_INT 19
42663: PUSH
42664: LD_INT 21
42666: PUSH
42667: LD_INT 24
42669: PUSH
42670: LD_INT 22
42672: PUSH
42673: LD_INT 25
42675: PUSH
42676: LD_INT 28
42678: PUSH
42679: LD_INT 29
42681: PUSH
42682: LD_INT 30
42684: PUSH
42685: LD_INT 31
42687: PUSH
42688: LD_INT 37
42690: PUSH
42691: LD_INT 38
42693: PUSH
42694: LD_INT 32
42696: PUSH
42697: LD_INT 27
42699: PUSH
42700: LD_INT 33
42702: PUSH
42703: LD_INT 69
42705: PUSH
42706: LD_INT 39
42708: PUSH
42709: LD_INT 34
42711: PUSH
42712: LD_INT 40
42714: PUSH
42715: LD_INT 71
42717: PUSH
42718: LD_INT 23
42720: PUSH
42721: LD_INT 44
42723: PUSH
42724: LD_INT 48
42726: PUSH
42727: LD_INT 49
42729: PUSH
42730: LD_INT 50
42732: PUSH
42733: LD_INT 51
42735: PUSH
42736: LD_INT 52
42738: PUSH
42739: LD_INT 53
42741: PUSH
42742: LD_INT 54
42744: PUSH
42745: LD_INT 55
42747: PUSH
42748: LD_INT 56
42750: PUSH
42751: LD_INT 57
42753: PUSH
42754: LD_INT 58
42756: PUSH
42757: LD_INT 59
42759: PUSH
42760: LD_INT 63
42762: PUSH
42763: LD_INT 64
42765: PUSH
42766: LD_INT 65
42768: PUSH
42769: LD_INT 82
42771: PUSH
42772: LD_INT 83
42774: PUSH
42775: LD_INT 84
42777: PUSH
42778: LD_INT 85
42780: PUSH
42781: LD_INT 86
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
42839: GO 42842
42841: POP
// if state > - 1 and state < 3 then
42842: LD_VAR 0 3
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: GREATER
42851: PUSH
42852: LD_VAR 0 3
42856: PUSH
42857: LD_INT 3
42859: LESS
42860: AND
42861: IFFALSE 42918
// for i in result do
42863: LD_ADDR_VAR 0 5
42867: PUSH
42868: LD_VAR 0 4
42872: PUSH
42873: FOR_IN
42874: IFFALSE 42916
// if GetTech ( i , side ) <> state then
42876: LD_VAR 0 5
42880: PPUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 321
42890: PUSH
42891: LD_VAR 0 3
42895: NONEQUAL
42896: IFFALSE 42914
// result := result diff i ;
42898: LD_ADDR_VAR 0 4
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_VAR 0 5
42912: DIFF
42913: ST_TO_ADDR
42914: GO 42873
42916: POP
42917: POP
// end ;
42918: LD_VAR 0 4
42922: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
42927: PPUSH
// result := true ;
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_INT 1
42935: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_VAR 0 2
42945: PPUSH
42946: CALL_OW 480
42950: ST_TO_ADDR
// if not tmp then
42951: LD_VAR 0 5
42955: NOT
42956: IFFALSE 42960
// exit ;
42958: GO 43009
// for i in tmp do
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: LD_VAR 0 5
42969: PUSH
42970: FOR_IN
42971: IFFALSE 43007
// if GetTech ( i , side ) <> state_researched then
42973: LD_VAR 0 4
42977: PPUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 321
42987: PUSH
42988: LD_INT 2
42990: NONEQUAL
42991: IFFALSE 43005
// begin result := false ;
42993: LD_ADDR_VAR 0 3
42997: PUSH
42998: LD_INT 0
43000: ST_TO_ADDR
// exit ;
43001: POP
43002: POP
43003: GO 43009
// end ;
43005: GO 42970
43007: POP
43008: POP
// end ;
43009: LD_VAR 0 3
43013: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43014: LD_INT 0
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43029: LD_VAR 0 1
43033: NOT
43034: PUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 257
43044: PUSH
43045: LD_INT 9
43047: NONEQUAL
43048: OR
43049: IFFALSE 43053
// exit ;
43051: GO 43626
// side := GetSide ( unit ) ;
43053: LD_ADDR_VAR 0 9
43057: PUSH
43058: LD_VAR 0 1
43062: PPUSH
43063: CALL_OW 255
43067: ST_TO_ADDR
// tech_space := tech_spacanom ;
43068: LD_ADDR_VAR 0 12
43072: PUSH
43073: LD_INT 29
43075: ST_TO_ADDR
// tech_time := tech_taurad ;
43076: LD_ADDR_VAR 0 13
43080: PUSH
43081: LD_INT 28
43083: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43084: LD_ADDR_VAR 0 11
43088: PUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: CALL_OW 310
43098: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43099: LD_VAR 0 11
43103: PPUSH
43104: CALL_OW 247
43108: PUSH
43109: LD_INT 2
43111: EQUAL
43112: IFFALSE 43116
// exit ;
43114: GO 43626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43116: LD_ADDR_VAR 0 8
43120: PUSH
43121: LD_INT 81
43123: PUSH
43124: LD_VAR 0 9
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 21
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PPUSH
43154: CALL_OW 69
43158: ST_TO_ADDR
// if not tmp then
43159: LD_VAR 0 8
43163: NOT
43164: IFFALSE 43168
// exit ;
43166: GO 43626
// if in_unit then
43168: LD_VAR 0 11
43172: IFFALSE 43196
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43174: LD_ADDR_VAR 0 10
43178: PUSH
43179: LD_VAR 0 8
43183: PPUSH
43184: LD_VAR 0 11
43188: PPUSH
43189: CALL_OW 74
43193: ST_TO_ADDR
43194: GO 43216
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43196: LD_ADDR_VAR 0 10
43200: PUSH
43201: LD_VAR 0 8
43205: PPUSH
43206: LD_VAR 0 1
43210: PPUSH
43211: CALL_OW 74
43215: ST_TO_ADDR
// if not enemy then
43216: LD_VAR 0 10
43220: NOT
43221: IFFALSE 43225
// exit ;
43223: GO 43626
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43225: LD_VAR 0 11
43229: PUSH
43230: LD_VAR 0 11
43234: PPUSH
43235: LD_VAR 0 10
43239: PPUSH
43240: CALL_OW 296
43244: PUSH
43245: LD_INT 13
43247: GREATER
43248: AND
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_VAR 0 10
43259: PPUSH
43260: CALL_OW 296
43264: PUSH
43265: LD_INT 12
43267: GREATER
43268: OR
43269: IFFALSE 43273
// exit ;
43271: GO 43626
// missile := [ 1 ] ;
43273: LD_ADDR_VAR 0 14
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43284: LD_VAR 0 9
43288: PPUSH
43289: LD_VAR 0 12
43293: PPUSH
43294: CALL_OW 325
43298: IFFALSE 43327
// missile := Replace ( missile , missile + 1 , 2 ) ;
43300: LD_ADDR_VAR 0 14
43304: PUSH
43305: LD_VAR 0 14
43309: PPUSH
43310: LD_VAR 0 14
43314: PUSH
43315: LD_INT 1
43317: PLUS
43318: PPUSH
43319: LD_INT 2
43321: PPUSH
43322: CALL_OW 1
43326: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43327: LD_VAR 0 9
43331: PPUSH
43332: LD_VAR 0 13
43336: PPUSH
43337: CALL_OW 325
43341: PUSH
43342: LD_VAR 0 10
43346: PPUSH
43347: CALL_OW 255
43351: PPUSH
43352: LD_VAR 0 13
43356: PPUSH
43357: CALL_OW 325
43361: NOT
43362: AND
43363: IFFALSE 43392
// missile := Replace ( missile , missile + 1 , 3 ) ;
43365: LD_ADDR_VAR 0 14
43369: PUSH
43370: LD_VAR 0 14
43374: PPUSH
43375: LD_VAR 0 14
43379: PUSH
43380: LD_INT 1
43382: PLUS
43383: PPUSH
43384: LD_INT 3
43386: PPUSH
43387: CALL_OW 1
43391: ST_TO_ADDR
// if missile < 2 then
43392: LD_VAR 0 14
43396: PUSH
43397: LD_INT 2
43399: LESS
43400: IFFALSE 43404
// exit ;
43402: GO 43626
// x := GetX ( enemy ) ;
43404: LD_ADDR_VAR 0 4
43408: PUSH
43409: LD_VAR 0 10
43413: PPUSH
43414: CALL_OW 250
43418: ST_TO_ADDR
// y := GetY ( enemy ) ;
43419: LD_ADDR_VAR 0 5
43423: PUSH
43424: LD_VAR 0 10
43428: PPUSH
43429: CALL_OW 251
43433: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43434: LD_ADDR_VAR 0 6
43438: PUSH
43439: LD_VAR 0 4
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PPUSH
43448: LD_INT 1
43450: PPUSH
43451: CALL_OW 12
43455: PLUS
43456: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43457: LD_ADDR_VAR 0 7
43461: PUSH
43462: LD_VAR 0 5
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PPUSH
43471: LD_INT 1
43473: PPUSH
43474: CALL_OW 12
43478: PLUS
43479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43480: LD_VAR 0 6
43484: PPUSH
43485: LD_VAR 0 7
43489: PPUSH
43490: CALL_OW 488
43494: NOT
43495: IFFALSE 43517
// begin _x := x ;
43497: LD_ADDR_VAR 0 6
43501: PUSH
43502: LD_VAR 0 4
43506: ST_TO_ADDR
// _y := y ;
43507: LD_ADDR_VAR 0 7
43511: PUSH
43512: LD_VAR 0 5
43516: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 1
43524: PPUSH
43525: LD_VAR 0 14
43529: PPUSH
43530: CALL_OW 12
43534: ST_TO_ADDR
// case i of 1 :
43535: LD_VAR 0 3
43539: PUSH
43540: LD_INT 1
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43548
43546: GO 43565
43548: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43549: LD_VAR 0 1
43553: PPUSH
43554: LD_VAR 0 10
43558: PPUSH
43559: CALL_OW 115
43563: GO 43626
43565: LD_INT 2
43567: DOUBLE
43568: EQUAL
43569: IFTRUE 43573
43571: GO 43595
43573: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43574: LD_VAR 0 1
43578: PPUSH
43579: LD_VAR 0 6
43583: PPUSH
43584: LD_VAR 0 7
43588: PPUSH
43589: CALL_OW 153
43593: GO 43626
43595: LD_INT 3
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43603
43601: GO 43625
43603: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43604: LD_VAR 0 1
43608: PPUSH
43609: LD_VAR 0 6
43613: PPUSH
43614: LD_VAR 0 7
43618: PPUSH
43619: CALL_OW 154
43623: GO 43626
43625: POP
// end ;
43626: LD_VAR 0 2
43630: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43631: LD_INT 0
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
// if not unit or not building then
43639: LD_VAR 0 1
43643: NOT
43644: PUSH
43645: LD_VAR 0 2
43649: NOT
43650: OR
43651: IFFALSE 43655
// exit ;
43653: GO 43813
// x := GetX ( building ) ;
43655: LD_ADDR_VAR 0 5
43659: PUSH
43660: LD_VAR 0 2
43664: PPUSH
43665: CALL_OW 250
43669: ST_TO_ADDR
// y := GetY ( building ) ;
43670: LD_ADDR_VAR 0 6
43674: PUSH
43675: LD_VAR 0 2
43679: PPUSH
43680: CALL_OW 251
43684: ST_TO_ADDR
// for i = 0 to 5 do
43685: LD_ADDR_VAR 0 4
43689: PUSH
43690: DOUBLE
43691: LD_INT 0
43693: DEC
43694: ST_TO_ADDR
43695: LD_INT 5
43697: PUSH
43698: FOR_TO
43699: IFFALSE 43811
// begin _x := ShiftX ( x , i , 3 ) ;
43701: LD_ADDR_VAR 0 7
43705: PUSH
43706: LD_VAR 0 5
43710: PPUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: LD_INT 3
43718: PPUSH
43719: CALL_OW 272
43723: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43724: LD_ADDR_VAR 0 8
43728: PUSH
43729: LD_VAR 0 6
43733: PPUSH
43734: LD_VAR 0 4
43738: PPUSH
43739: LD_INT 3
43741: PPUSH
43742: CALL_OW 273
43746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43747: LD_VAR 0 7
43751: PPUSH
43752: LD_VAR 0 8
43756: PPUSH
43757: CALL_OW 488
43761: NOT
43762: IFFALSE 43766
// continue ;
43764: GO 43698
// if HexInfo ( _x , _y ) = 0 then
43766: LD_VAR 0 7
43770: PPUSH
43771: LD_VAR 0 8
43775: PPUSH
43776: CALL_OW 428
43780: PUSH
43781: LD_INT 0
43783: EQUAL
43784: IFFALSE 43809
// begin ComMoveXY ( unit , _x , _y ) ;
43786: LD_VAR 0 1
43790: PPUSH
43791: LD_VAR 0 7
43795: PPUSH
43796: LD_VAR 0 8
43800: PPUSH
43801: CALL_OW 111
// exit ;
43805: POP
43806: POP
43807: GO 43813
// end ; end ;
43809: GO 43698
43811: POP
43812: POP
// end ;
43813: LD_VAR 0 3
43817: RET
// export function ScanBase ( side , base_area ) ; begin
43818: LD_INT 0
43820: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_VAR 0 2
43830: PPUSH
43831: LD_INT 81
43833: PUSH
43834: LD_VAR 0 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PPUSH
43843: CALL_OW 70
43847: ST_TO_ADDR
// end ;
43848: LD_VAR 0 3
43852: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43853: LD_INT 0
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
// result := false ;
43859: LD_ADDR_VAR 0 2
43863: PUSH
43864: LD_INT 0
43866: ST_TO_ADDR
// side := GetSide ( unit ) ;
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 255
43881: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43882: LD_ADDR_VAR 0 4
43886: PUSH
43887: LD_VAR 0 1
43891: PPUSH
43892: CALL_OW 248
43896: ST_TO_ADDR
// case nat of 1 :
43897: LD_VAR 0 4
43901: PUSH
43902: LD_INT 1
43904: DOUBLE
43905: EQUAL
43906: IFTRUE 43910
43908: GO 43921
43910: POP
// tech := tech_lassight ; 2 :
43911: LD_ADDR_VAR 0 5
43915: PUSH
43916: LD_INT 12
43918: ST_TO_ADDR
43919: GO 43960
43921: LD_INT 2
43923: DOUBLE
43924: EQUAL
43925: IFTRUE 43929
43927: GO 43940
43929: POP
// tech := tech_mortar ; 3 :
43930: LD_ADDR_VAR 0 5
43934: PUSH
43935: LD_INT 41
43937: ST_TO_ADDR
43938: GO 43960
43940: LD_INT 3
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43959
43948: POP
// tech := tech_bazooka ; end ;
43949: LD_ADDR_VAR 0 5
43953: PUSH
43954: LD_INT 44
43956: ST_TO_ADDR
43957: GO 43960
43959: POP
// if Researched ( side , tech ) then
43960: LD_VAR 0 3
43964: PPUSH
43965: LD_VAR 0 5
43969: PPUSH
43970: CALL_OW 325
43974: IFFALSE 44001
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43976: LD_ADDR_VAR 0 2
43980: PUSH
43981: LD_INT 5
43983: PUSH
43984: LD_INT 8
43986: PUSH
43987: LD_INT 9
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: PUSH
43995: LD_VAR 0 4
43999: ARRAY
44000: ST_TO_ADDR
// end ;
44001: LD_VAR 0 2
44005: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
44010: PPUSH
// if not mines then
44011: LD_VAR 0 2
44015: NOT
44016: IFFALSE 44020
// exit ;
44018: GO 44164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44020: LD_ADDR_VAR 0 5
44024: PUSH
44025: LD_INT 81
44027: PUSH
44028: LD_VAR 0 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: LD_INT 21
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PPUSH
44058: CALL_OW 69
44062: ST_TO_ADDR
// for i in mines do
44063: LD_ADDR_VAR 0 4
44067: PUSH
44068: LD_VAR 0 2
44072: PUSH
44073: FOR_IN
44074: IFFALSE 44162
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44076: LD_VAR 0 4
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PPUSH
44085: LD_VAR 0 4
44089: PUSH
44090: LD_INT 2
44092: ARRAY
44093: PPUSH
44094: CALL_OW 458
44098: NOT
44099: IFFALSE 44103
// continue ;
44101: GO 44073
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44103: LD_VAR 0 4
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PPUSH
44112: LD_VAR 0 4
44116: PUSH
44117: LD_INT 2
44119: ARRAY
44120: PPUSH
44121: CALL_OW 428
44125: PUSH
44126: LD_VAR 0 5
44130: IN
44131: IFFALSE 44160
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44133: LD_VAR 0 4
44137: PUSH
44138: LD_INT 1
44140: ARRAY
44141: PPUSH
44142: LD_VAR 0 4
44146: PUSH
44147: LD_INT 2
44149: ARRAY
44150: PPUSH
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 456
// end ;
44160: GO 44073
44162: POP
44163: POP
// end ;
44164: LD_VAR 0 3
44168: RET
// export function Count ( array ) ; begin
44169: LD_INT 0
44171: PPUSH
// result := array + 0 ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_INT 0
44184: PLUS
44185: ST_TO_ADDR
// end ;
44186: LD_VAR 0 2
44190: RET
// export function IsEmpty ( building ) ; begin
44191: LD_INT 0
44193: PPUSH
// if not building then
44194: LD_VAR 0 1
44198: NOT
44199: IFFALSE 44203
// exit ;
44201: GO 44246
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44203: LD_ADDR_VAR 0 2
44207: PUSH
44208: LD_VAR 0 1
44212: PUSH
44213: LD_INT 22
44215: PUSH
44216: LD_VAR 0 1
44220: PPUSH
44221: CALL_OW 255
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 58
44232: PUSH
44233: EMPTY
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PPUSH
44240: CALL_OW 69
44244: IN
44245: ST_TO_ADDR
// end ;
44246: LD_VAR 0 2
44250: RET
// export function IsNotFull ( building ) ; var places ; begin
44251: LD_INT 0
44253: PPUSH
44254: PPUSH
// if not building then
44255: LD_VAR 0 1
44259: NOT
44260: IFFALSE 44264
// exit ;
44262: GO 44292
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44264: LD_ADDR_VAR 0 2
44268: PUSH
44269: LD_VAR 0 1
44273: PPUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 62
44279: PUSH
44280: EMPTY
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PPUSH
44287: CALL_OW 72
44291: ST_TO_ADDR
// end ;
44292: LD_VAR 0 2
44296: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44297: LD_INT 0
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
// tmp := [ ] ;
44303: LD_ADDR_VAR 0 3
44307: PUSH
44308: EMPTY
44309: ST_TO_ADDR
// list := [ ] ;
44310: LD_ADDR_VAR 0 5
44314: PUSH
44315: EMPTY
44316: ST_TO_ADDR
// for i = 16 to 25 do
44317: LD_ADDR_VAR 0 4
44321: PUSH
44322: DOUBLE
44323: LD_INT 16
44325: DEC
44326: ST_TO_ADDR
44327: LD_INT 25
44329: PUSH
44330: FOR_TO
44331: IFFALSE 44404
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44333: LD_ADDR_VAR 0 3
44337: PUSH
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 22
44345: PUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: CALL_OW 255
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 91
44362: PUSH
44363: LD_VAR 0 1
44367: PUSH
44368: LD_INT 6
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 30
44378: PUSH
44379: LD_VAR 0 4
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: PPUSH
44396: CALL_OW 69
44400: ADD
44401: ST_TO_ADDR
44402: GO 44330
44404: POP
44405: POP
// for i = 1 to tmp do
44406: LD_ADDR_VAR 0 4
44410: PUSH
44411: DOUBLE
44412: LD_INT 1
44414: DEC
44415: ST_TO_ADDR
44416: LD_VAR 0 3
44420: PUSH
44421: FOR_TO
44422: IFFALSE 44510
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44424: LD_ADDR_VAR 0 5
44428: PUSH
44429: LD_VAR 0 5
44433: PUSH
44434: LD_VAR 0 3
44438: PUSH
44439: LD_VAR 0 4
44443: ARRAY
44444: PPUSH
44445: CALL_OW 266
44449: PUSH
44450: LD_VAR 0 3
44454: PUSH
44455: LD_VAR 0 4
44459: ARRAY
44460: PPUSH
44461: CALL_OW 250
44465: PUSH
44466: LD_VAR 0 3
44470: PUSH
44471: LD_VAR 0 4
44475: ARRAY
44476: PPUSH
44477: CALL_OW 251
44481: PUSH
44482: LD_VAR 0 3
44486: PUSH
44487: LD_VAR 0 4
44491: ARRAY
44492: PPUSH
44493: CALL_OW 254
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: ADD
44507: ST_TO_ADDR
44508: GO 44421
44510: POP
44511: POP
// result := list ;
44512: LD_ADDR_VAR 0 2
44516: PUSH
44517: LD_VAR 0 5
44521: ST_TO_ADDR
// end ;
44522: LD_VAR 0 2
44526: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44527: LD_INT 0
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
// if not factory then
44536: LD_VAR 0 1
44540: NOT
44541: IFFALSE 44545
// exit ;
44543: GO 45138
// if control = control_apeman then
44545: LD_VAR 0 4
44549: PUSH
44550: LD_INT 5
44552: EQUAL
44553: IFFALSE 44662
// begin tmp := UnitsInside ( factory ) ;
44555: LD_ADDR_VAR 0 8
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 313
44569: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44570: LD_VAR 0 8
44574: PPUSH
44575: LD_INT 25
44577: PUSH
44578: LD_INT 12
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PPUSH
44585: CALL_OW 72
44589: NOT
44590: IFFALSE 44600
// control := control_manual ;
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: LD_INT 1
44599: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44600: LD_ADDR_VAR 0 8
44604: PUSH
44605: LD_VAR 0 1
44609: PPUSH
44610: CALL 44297 0 1
44614: ST_TO_ADDR
// if tmp then
44615: LD_VAR 0 8
44619: IFFALSE 44662
// begin for i in tmp do
44621: LD_ADDR_VAR 0 7
44625: PUSH
44626: LD_VAR 0 8
44630: PUSH
44631: FOR_IN
44632: IFFALSE 44660
// if i [ 1 ] = b_ext_radio then
44634: LD_VAR 0 7
44638: PUSH
44639: LD_INT 1
44641: ARRAY
44642: PUSH
44643: LD_INT 22
44645: EQUAL
44646: IFFALSE 44658
// begin control := control_remote ;
44648: LD_ADDR_VAR 0 4
44652: PUSH
44653: LD_INT 2
44655: ST_TO_ADDR
// break ;
44656: GO 44660
// end ;
44658: GO 44631
44660: POP
44661: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44662: LD_VAR 0 1
44666: PPUSH
44667: LD_VAR 0 2
44671: PPUSH
44672: LD_VAR 0 3
44676: PPUSH
44677: LD_VAR 0 4
44681: PPUSH
44682: LD_VAR 0 5
44686: PPUSH
44687: CALL_OW 448
44691: IFFALSE 44726
// begin result := [ chassis , engine , control , weapon ] ;
44693: LD_ADDR_VAR 0 6
44697: PUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_VAR 0 3
44707: PUSH
44708: LD_VAR 0 4
44712: PUSH
44713: LD_VAR 0 5
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// exit ;
44724: GO 45138
// end ; _chassis := AvailableChassisList ( factory ) ;
44726: LD_ADDR_VAR 0 9
44730: PUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL_OW 475
44740: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44741: LD_ADDR_VAR 0 11
44745: PUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: CALL_OW 476
44755: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44756: LD_ADDR_VAR 0 12
44760: PUSH
44761: LD_VAR 0 1
44765: PPUSH
44766: CALL_OW 477
44770: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44771: LD_ADDR_VAR 0 10
44775: PUSH
44776: LD_VAR 0 1
44780: PPUSH
44781: CALL_OW 478
44785: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44786: LD_VAR 0 9
44790: NOT
44791: PUSH
44792: LD_VAR 0 11
44796: NOT
44797: OR
44798: PUSH
44799: LD_VAR 0 12
44803: NOT
44804: OR
44805: PUSH
44806: LD_VAR 0 10
44810: NOT
44811: OR
44812: IFFALSE 44847
// begin result := [ chassis , engine , control , weapon ] ;
44814: LD_ADDR_VAR 0 6
44818: PUSH
44819: LD_VAR 0 2
44823: PUSH
44824: LD_VAR 0 3
44828: PUSH
44829: LD_VAR 0 4
44833: PUSH
44834: LD_VAR 0 5
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// exit ;
44845: GO 45138
// end ; if not chassis in _chassis then
44847: LD_VAR 0 2
44851: PUSH
44852: LD_VAR 0 9
44856: IN
44857: NOT
44858: IFFALSE 44884
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44860: LD_ADDR_VAR 0 2
44864: PUSH
44865: LD_VAR 0 9
44869: PUSH
44870: LD_INT 1
44872: PPUSH
44873: LD_VAR 0 9
44877: PPUSH
44878: CALL_OW 12
44882: ARRAY
44883: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44884: LD_VAR 0 2
44888: PPUSH
44889: LD_VAR 0 3
44893: PPUSH
44894: CALL 45143 0 2
44898: NOT
44899: IFFALSE 44958
// repeat engine := _engine [ 1 ] ;
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_VAR 0 11
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44915: LD_ADDR_VAR 0 11
44919: PUSH
44920: LD_VAR 0 11
44924: PPUSH
44925: LD_INT 1
44927: PPUSH
44928: CALL_OW 3
44932: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44933: LD_VAR 0 2
44937: PPUSH
44938: LD_VAR 0 3
44942: PPUSH
44943: CALL 45143 0 2
44947: PUSH
44948: LD_VAR 0 11
44952: PUSH
44953: EMPTY
44954: EQUAL
44955: OR
44956: IFFALSE 44901
// if not control in _control then
44958: LD_VAR 0 4
44962: PUSH
44963: LD_VAR 0 12
44967: IN
44968: NOT
44969: IFFALSE 44995
// control := _control [ rand ( 1 , _control ) ] ;
44971: LD_ADDR_VAR 0 4
44975: PUSH
44976: LD_VAR 0 12
44980: PUSH
44981: LD_INT 1
44983: PPUSH
44984: LD_VAR 0 12
44988: PPUSH
44989: CALL_OW 12
44993: ARRAY
44994: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44995: LD_VAR 0 2
44999: PPUSH
45000: LD_VAR 0 5
45004: PPUSH
45005: CALL 45363 0 2
45009: NOT
45010: IFFALSE 45069
// repeat weapon := _weapon [ 1 ] ;
45012: LD_ADDR_VAR 0 5
45016: PUSH
45017: LD_VAR 0 10
45021: PUSH
45022: LD_INT 1
45024: ARRAY
45025: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45026: LD_ADDR_VAR 0 10
45030: PUSH
45031: LD_VAR 0 10
45035: PPUSH
45036: LD_INT 1
45038: PPUSH
45039: CALL_OW 3
45043: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45044: LD_VAR 0 2
45048: PPUSH
45049: LD_VAR 0 5
45053: PPUSH
45054: CALL 45363 0 2
45058: PUSH
45059: LD_VAR 0 10
45063: PUSH
45064: EMPTY
45065: EQUAL
45066: OR
45067: IFFALSE 45012
// result := [ ] ;
45069: LD_ADDR_VAR 0 6
45073: PUSH
45074: EMPTY
45075: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45076: LD_VAR 0 1
45080: PPUSH
45081: LD_VAR 0 2
45085: PPUSH
45086: LD_VAR 0 3
45090: PPUSH
45091: LD_VAR 0 4
45095: PPUSH
45096: LD_VAR 0 5
45100: PPUSH
45101: CALL_OW 448
45105: IFFALSE 45138
// result := [ chassis , engine , control , weapon ] ;
45107: LD_ADDR_VAR 0 6
45111: PUSH
45112: LD_VAR 0 2
45116: PUSH
45117: LD_VAR 0 3
45121: PUSH
45122: LD_VAR 0 4
45126: PUSH
45127: LD_VAR 0 5
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// end ;
45138: LD_VAR 0 6
45142: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45143: LD_INT 0
45145: PPUSH
// if not chassis or not engine then
45146: LD_VAR 0 1
45150: NOT
45151: PUSH
45152: LD_VAR 0 2
45156: NOT
45157: OR
45158: IFFALSE 45162
// exit ;
45160: GO 45358
// case engine of engine_solar :
45162: LD_VAR 0 2
45166: PUSH
45167: LD_INT 2
45169: DOUBLE
45170: EQUAL
45171: IFTRUE 45175
45173: GO 45213
45175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_INT 11
45183: PUSH
45184: LD_INT 12
45186: PUSH
45187: LD_INT 13
45189: PUSH
45190: LD_INT 14
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
45211: GO 45342
45213: LD_INT 1
45215: DOUBLE
45216: EQUAL
45217: IFTRUE 45221
45219: GO 45283
45221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45222: LD_ADDR_VAR 0 3
45226: PUSH
45227: LD_INT 11
45229: PUSH
45230: LD_INT 12
45232: PUSH
45233: LD_INT 13
45235: PUSH
45236: LD_INT 14
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: LD_INT 4
45250: PUSH
45251: LD_INT 5
45253: PUSH
45254: LD_INT 21
45256: PUSH
45257: LD_INT 23
45259: PUSH
45260: LD_INT 22
45262: PUSH
45263: LD_INT 24
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: ST_TO_ADDR
45281: GO 45342
45283: LD_INT 3
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45341
45291: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 13
45299: PUSH
45300: LD_INT 14
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 4
45311: PUSH
45312: LD_INT 5
45314: PUSH
45315: LD_INT 21
45317: PUSH
45318: LD_INT 22
45320: PUSH
45321: LD_INT 23
45323: PUSH
45324: LD_INT 24
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
45339: GO 45342
45341: POP
// result := ( chassis in result ) ;
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_VAR 0 1
45351: PUSH
45352: LD_VAR 0 3
45356: IN
45357: ST_TO_ADDR
// end ;
45358: LD_VAR 0 3
45362: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45363: LD_INT 0
45365: PPUSH
// if not chassis or not weapon then
45366: LD_VAR 0 1
45370: NOT
45371: PUSH
45372: LD_VAR 0 2
45376: NOT
45377: OR
45378: IFFALSE 45382
// exit ;
45380: GO 46442
// case weapon of us_machine_gun :
45382: LD_VAR 0 2
45386: PUSH
45387: LD_INT 2
45389: DOUBLE
45390: EQUAL
45391: IFTRUE 45395
45393: GO 45425
45395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45396: LD_ADDR_VAR 0 3
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 4
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
45423: GO 46426
45425: LD_INT 3
45427: DOUBLE
45428: EQUAL
45429: IFTRUE 45433
45431: GO 45463
45433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45434: LD_ADDR_VAR 0 3
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 5
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
45461: GO 46426
45463: LD_INT 11
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45471
45469: GO 45501
45471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45472: LD_ADDR_VAR 0 3
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: LD_INT 4
45488: PUSH
45489: LD_INT 5
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
45499: GO 46426
45501: LD_INT 4
45503: DOUBLE
45504: EQUAL
45505: IFTRUE 45509
45507: GO 45535
45509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45510: LD_ADDR_VAR 0 3
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 3
45520: PUSH
45521: LD_INT 4
45523: PUSH
45524: LD_INT 5
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
45533: GO 46426
45535: LD_INT 5
45537: DOUBLE
45538: EQUAL
45539: IFTRUE 45543
45541: GO 45569
45543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: LD_INT 4
45557: PUSH
45558: LD_INT 5
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
45567: GO 46426
45569: LD_INT 9
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45603
45577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: LD_INT 4
45591: PUSH
45592: LD_INT 5
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
45601: GO 46426
45603: LD_INT 7
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 45637
45611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45612: LD_ADDR_VAR 0 3
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: LD_INT 4
45625: PUSH
45626: LD_INT 5
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
45635: GO 46426
45637: LD_INT 12
45639: DOUBLE
45640: EQUAL
45641: IFTRUE 45645
45643: GO 45671
45645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45646: LD_ADDR_VAR 0 3
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: LD_INT 5
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
45669: GO 46426
45671: LD_INT 13
45673: DOUBLE
45674: EQUAL
45675: IFTRUE 45679
45677: GO 45705
45679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45680: LD_ADDR_VAR 0 3
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 4
45693: PUSH
45694: LD_INT 5
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
45703: GO 46426
45705: LD_INT 14
45707: DOUBLE
45708: EQUAL
45709: IFTRUE 45713
45711: GO 45731
45713: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45714: LD_ADDR_VAR 0 3
45718: PUSH
45719: LD_INT 4
45721: PUSH
45722: LD_INT 5
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: ST_TO_ADDR
45729: GO 46426
45731: LD_INT 6
45733: DOUBLE
45734: EQUAL
45735: IFTRUE 45739
45737: GO 45757
45739: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_INT 4
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: ST_TO_ADDR
45755: GO 46426
45757: LD_INT 10
45759: DOUBLE
45760: EQUAL
45761: IFTRUE 45765
45763: GO 45783
45765: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45766: LD_ADDR_VAR 0 3
45770: PUSH
45771: LD_INT 4
45773: PUSH
45774: LD_INT 5
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: ST_TO_ADDR
45781: GO 46426
45783: LD_INT 22
45785: DOUBLE
45786: EQUAL
45787: IFTRUE 45791
45789: GO 45817
45791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45792: LD_ADDR_VAR 0 3
45796: PUSH
45797: LD_INT 11
45799: PUSH
45800: LD_INT 12
45802: PUSH
45803: LD_INT 13
45805: PUSH
45806: LD_INT 14
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
45815: GO 46426
45817: LD_INT 23
45819: DOUBLE
45820: EQUAL
45821: IFTRUE 45825
45823: GO 45851
45825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45826: LD_ADDR_VAR 0 3
45830: PUSH
45831: LD_INT 11
45833: PUSH
45834: LD_INT 12
45836: PUSH
45837: LD_INT 13
45839: PUSH
45840: LD_INT 14
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
45849: GO 46426
45851: LD_INT 24
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45859
45857: GO 45885
45859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45860: LD_ADDR_VAR 0 3
45864: PUSH
45865: LD_INT 11
45867: PUSH
45868: LD_INT 12
45870: PUSH
45871: LD_INT 13
45873: PUSH
45874: LD_INT 14
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
45883: GO 46426
45885: LD_INT 30
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45919
45893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_INT 11
45901: PUSH
45902: LD_INT 12
45904: PUSH
45905: LD_INT 13
45907: PUSH
45908: LD_INT 14
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
45917: GO 46426
45919: LD_INT 25
45921: DOUBLE
45922: EQUAL
45923: IFTRUE 45927
45925: GO 45945
45927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45928: LD_ADDR_VAR 0 3
45932: PUSH
45933: LD_INT 13
45935: PUSH
45936: LD_INT 14
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: ST_TO_ADDR
45943: GO 46426
45945: LD_INT 27
45947: DOUBLE
45948: EQUAL
45949: IFTRUE 45953
45951: GO 45971
45953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45954: LD_ADDR_VAR 0 3
45958: PUSH
45959: LD_INT 13
45961: PUSH
45962: LD_INT 14
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: ST_TO_ADDR
45969: GO 46426
45971: LD_INT 92
45973: DOUBLE
45974: EQUAL
45975: IFTRUE 45979
45977: GO 46005
45979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45980: LD_ADDR_VAR 0 3
45984: PUSH
45985: LD_INT 11
45987: PUSH
45988: LD_INT 12
45990: PUSH
45991: LD_INT 13
45993: PUSH
45994: LD_INT 14
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
46003: GO 46426
46005: LD_INT 28
46007: DOUBLE
46008: EQUAL
46009: IFTRUE 46013
46011: GO 46031
46013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46014: LD_ADDR_VAR 0 3
46018: PUSH
46019: LD_INT 13
46021: PUSH
46022: LD_INT 14
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: ST_TO_ADDR
46029: GO 46426
46031: LD_INT 29
46033: DOUBLE
46034: EQUAL
46035: IFTRUE 46039
46037: GO 46057
46039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46040: LD_ADDR_VAR 0 3
46044: PUSH
46045: LD_INT 13
46047: PUSH
46048: LD_INT 14
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: ST_TO_ADDR
46055: GO 46426
46057: LD_INT 31
46059: DOUBLE
46060: EQUAL
46061: IFTRUE 46065
46063: GO 46083
46065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46066: LD_ADDR_VAR 0 3
46070: PUSH
46071: LD_INT 13
46073: PUSH
46074: LD_INT 14
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: ST_TO_ADDR
46081: GO 46426
46083: LD_INT 26
46085: DOUBLE
46086: EQUAL
46087: IFTRUE 46091
46089: GO 46109
46091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46092: LD_ADDR_VAR 0 3
46096: PUSH
46097: LD_INT 13
46099: PUSH
46100: LD_INT 14
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: ST_TO_ADDR
46107: GO 46426
46109: LD_INT 42
46111: DOUBLE
46112: EQUAL
46113: IFTRUE 46117
46115: GO 46143
46117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46118: LD_ADDR_VAR 0 3
46122: PUSH
46123: LD_INT 21
46125: PUSH
46126: LD_INT 22
46128: PUSH
46129: LD_INT 23
46131: PUSH
46132: LD_INT 24
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
46141: GO 46426
46143: LD_INT 43
46145: DOUBLE
46146: EQUAL
46147: IFTRUE 46151
46149: GO 46177
46151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46152: LD_ADDR_VAR 0 3
46156: PUSH
46157: LD_INT 21
46159: PUSH
46160: LD_INT 22
46162: PUSH
46163: LD_INT 23
46165: PUSH
46166: LD_INT 24
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
46175: GO 46426
46177: LD_INT 44
46179: DOUBLE
46180: EQUAL
46181: IFTRUE 46185
46183: GO 46211
46185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46186: LD_ADDR_VAR 0 3
46190: PUSH
46191: LD_INT 21
46193: PUSH
46194: LD_INT 22
46196: PUSH
46197: LD_INT 23
46199: PUSH
46200: LD_INT 24
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
46209: GO 46426
46211: LD_INT 45
46213: DOUBLE
46214: EQUAL
46215: IFTRUE 46219
46217: GO 46245
46219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: LD_INT 21
46227: PUSH
46228: LD_INT 22
46230: PUSH
46231: LD_INT 23
46233: PUSH
46234: LD_INT 24
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
46243: GO 46426
46245: LD_INT 49
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46279
46253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46254: LD_ADDR_VAR 0 3
46258: PUSH
46259: LD_INT 21
46261: PUSH
46262: LD_INT 22
46264: PUSH
46265: LD_INT 23
46267: PUSH
46268: LD_INT 24
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
46277: GO 46426
46279: LD_INT 51
46281: DOUBLE
46282: EQUAL
46283: IFTRUE 46287
46285: GO 46313
46287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46288: LD_ADDR_VAR 0 3
46292: PUSH
46293: LD_INT 21
46295: PUSH
46296: LD_INT 22
46298: PUSH
46299: LD_INT 23
46301: PUSH
46302: LD_INT 24
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
46311: GO 46426
46313: LD_INT 52
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46321
46319: GO 46347
46321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46322: LD_ADDR_VAR 0 3
46326: PUSH
46327: LD_INT 21
46329: PUSH
46330: LD_INT 22
46332: PUSH
46333: LD_INT 23
46335: PUSH
46336: LD_INT 24
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
46345: GO 46426
46347: LD_INT 53
46349: DOUBLE
46350: EQUAL
46351: IFTRUE 46355
46353: GO 46373
46355: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46356: LD_ADDR_VAR 0 3
46360: PUSH
46361: LD_INT 23
46363: PUSH
46364: LD_INT 24
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: ST_TO_ADDR
46371: GO 46426
46373: LD_INT 46
46375: DOUBLE
46376: EQUAL
46377: IFTRUE 46381
46379: GO 46399
46381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46382: LD_ADDR_VAR 0 3
46386: PUSH
46387: LD_INT 23
46389: PUSH
46390: LD_INT 24
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: ST_TO_ADDR
46397: GO 46426
46399: LD_INT 47
46401: DOUBLE
46402: EQUAL
46403: IFTRUE 46407
46405: GO 46425
46407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46408: LD_ADDR_VAR 0 3
46412: PUSH
46413: LD_INT 23
46415: PUSH
46416: LD_INT 24
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: ST_TO_ADDR
46423: GO 46426
46425: POP
// result := ( chassis in result ) ;
46426: LD_ADDR_VAR 0 3
46430: PUSH
46431: LD_VAR 0 1
46435: PUSH
46436: LD_VAR 0 3
46440: IN
46441: ST_TO_ADDR
// end ;
46442: LD_VAR 0 3
46446: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46447: LD_INT 0
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
// result := array ;
46456: LD_ADDR_VAR 0 5
46460: PUSH
46461: LD_VAR 0 1
46465: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46466: LD_VAR 0 1
46470: NOT
46471: PUSH
46472: LD_VAR 0 2
46476: NOT
46477: OR
46478: PUSH
46479: LD_VAR 0 3
46483: NOT
46484: OR
46485: PUSH
46486: LD_VAR 0 2
46490: PUSH
46491: LD_VAR 0 1
46495: GREATER
46496: OR
46497: PUSH
46498: LD_VAR 0 3
46502: PUSH
46503: LD_VAR 0 1
46507: GREATER
46508: OR
46509: IFFALSE 46513
// exit ;
46511: GO 46809
// if direction then
46513: LD_VAR 0 4
46517: IFFALSE 46581
// begin d := 1 ;
46519: LD_ADDR_VAR 0 9
46523: PUSH
46524: LD_INT 1
46526: ST_TO_ADDR
// if i_from > i_to then
46527: LD_VAR 0 2
46531: PUSH
46532: LD_VAR 0 3
46536: GREATER
46537: IFFALSE 46563
// length := ( array - i_from ) + i_to else
46539: LD_ADDR_VAR 0 11
46543: PUSH
46544: LD_VAR 0 1
46548: PUSH
46549: LD_VAR 0 2
46553: MINUS
46554: PUSH
46555: LD_VAR 0 3
46559: PLUS
46560: ST_TO_ADDR
46561: GO 46579
// length := i_to - i_from ;
46563: LD_ADDR_VAR 0 11
46567: PUSH
46568: LD_VAR 0 3
46572: PUSH
46573: LD_VAR 0 2
46577: MINUS
46578: ST_TO_ADDR
// end else
46579: GO 46642
// begin d := - 1 ;
46581: LD_ADDR_VAR 0 9
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: ST_TO_ADDR
// if i_from > i_to then
46590: LD_VAR 0 2
46594: PUSH
46595: LD_VAR 0 3
46599: GREATER
46600: IFFALSE 46620
// length := i_from - i_to else
46602: LD_ADDR_VAR 0 11
46606: PUSH
46607: LD_VAR 0 2
46611: PUSH
46612: LD_VAR 0 3
46616: MINUS
46617: ST_TO_ADDR
46618: GO 46642
// length := ( array - i_to ) + i_from ;
46620: LD_ADDR_VAR 0 11
46624: PUSH
46625: LD_VAR 0 1
46629: PUSH
46630: LD_VAR 0 3
46634: MINUS
46635: PUSH
46636: LD_VAR 0 2
46640: PLUS
46641: ST_TO_ADDR
// end ; if not length then
46642: LD_VAR 0 11
46646: NOT
46647: IFFALSE 46651
// exit ;
46649: GO 46809
// tmp := array ;
46651: LD_ADDR_VAR 0 10
46655: PUSH
46656: LD_VAR 0 1
46660: ST_TO_ADDR
// for i = 1 to length do
46661: LD_ADDR_VAR 0 6
46665: PUSH
46666: DOUBLE
46667: LD_INT 1
46669: DEC
46670: ST_TO_ADDR
46671: LD_VAR 0 11
46675: PUSH
46676: FOR_TO
46677: IFFALSE 46797
// begin for j = 1 to array do
46679: LD_ADDR_VAR 0 7
46683: PUSH
46684: DOUBLE
46685: LD_INT 1
46687: DEC
46688: ST_TO_ADDR
46689: LD_VAR 0 1
46693: PUSH
46694: FOR_TO
46695: IFFALSE 46783
// begin k := j + d ;
46697: LD_ADDR_VAR 0 8
46701: PUSH
46702: LD_VAR 0 7
46706: PUSH
46707: LD_VAR 0 9
46711: PLUS
46712: ST_TO_ADDR
// if k > array then
46713: LD_VAR 0 8
46717: PUSH
46718: LD_VAR 0 1
46722: GREATER
46723: IFFALSE 46733
// k := 1 ;
46725: LD_ADDR_VAR 0 8
46729: PUSH
46730: LD_INT 1
46732: ST_TO_ADDR
// if not k then
46733: LD_VAR 0 8
46737: NOT
46738: IFFALSE 46750
// k := array ;
46740: LD_ADDR_VAR 0 8
46744: PUSH
46745: LD_VAR 0 1
46749: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46750: LD_ADDR_VAR 0 10
46754: PUSH
46755: LD_VAR 0 10
46759: PPUSH
46760: LD_VAR 0 8
46764: PPUSH
46765: LD_VAR 0 1
46769: PUSH
46770: LD_VAR 0 7
46774: ARRAY
46775: PPUSH
46776: CALL_OW 1
46780: ST_TO_ADDR
// end ;
46781: GO 46694
46783: POP
46784: POP
// array := tmp ;
46785: LD_ADDR_VAR 0 1
46789: PUSH
46790: LD_VAR 0 10
46794: ST_TO_ADDR
// end ;
46795: GO 46676
46797: POP
46798: POP
// result := array ;
46799: LD_ADDR_VAR 0 5
46803: PUSH
46804: LD_VAR 0 1
46808: ST_TO_ADDR
// end ;
46809: LD_VAR 0 5
46813: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46814: LD_INT 0
46816: PPUSH
46817: PPUSH
// result := 0 ;
46818: LD_ADDR_VAR 0 3
46822: PUSH
46823: LD_INT 0
46825: ST_TO_ADDR
// if not array or not value in array then
46826: LD_VAR 0 1
46830: NOT
46831: PUSH
46832: LD_VAR 0 2
46836: PUSH
46837: LD_VAR 0 1
46841: IN
46842: NOT
46843: OR
46844: IFFALSE 46848
// exit ;
46846: GO 46902
// for i = 1 to array do
46848: LD_ADDR_VAR 0 4
46852: PUSH
46853: DOUBLE
46854: LD_INT 1
46856: DEC
46857: ST_TO_ADDR
46858: LD_VAR 0 1
46862: PUSH
46863: FOR_TO
46864: IFFALSE 46900
// if value = array [ i ] then
46866: LD_VAR 0 2
46870: PUSH
46871: LD_VAR 0 1
46875: PUSH
46876: LD_VAR 0 4
46880: ARRAY
46881: EQUAL
46882: IFFALSE 46898
// begin result := i ;
46884: LD_ADDR_VAR 0 3
46888: PUSH
46889: LD_VAR 0 4
46893: ST_TO_ADDR
// exit ;
46894: POP
46895: POP
46896: GO 46902
// end ;
46898: GO 46863
46900: POP
46901: POP
// end ;
46902: LD_VAR 0 3
46906: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46907: LD_INT 0
46909: PPUSH
// vc_chassis := chassis ;
46910: LD_ADDR_OWVAR 37
46914: PUSH
46915: LD_VAR 0 1
46919: ST_TO_ADDR
// vc_engine := engine ;
46920: LD_ADDR_OWVAR 39
46924: PUSH
46925: LD_VAR 0 2
46929: ST_TO_ADDR
// vc_control := control ;
46930: LD_ADDR_OWVAR 38
46934: PUSH
46935: LD_VAR 0 3
46939: ST_TO_ADDR
// vc_weapon := weapon ;
46940: LD_ADDR_OWVAR 40
46944: PUSH
46945: LD_VAR 0 4
46949: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46950: LD_ADDR_OWVAR 41
46954: PUSH
46955: LD_VAR 0 5
46959: ST_TO_ADDR
// end ;
46960: LD_VAR 0 6
46964: RET
// export function WantPlant ( unit ) ; var task ; begin
46965: LD_INT 0
46967: PPUSH
46968: PPUSH
// result := false ;
46969: LD_ADDR_VAR 0 2
46973: PUSH
46974: LD_INT 0
46976: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46977: LD_ADDR_VAR 0 3
46981: PUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 437
46991: ST_TO_ADDR
// if task then
46992: LD_VAR 0 3
46996: IFFALSE 47024
// if task [ 1 ] [ 1 ] = p then
46998: LD_VAR 0 3
47002: PUSH
47003: LD_INT 1
47005: ARRAY
47006: PUSH
47007: LD_INT 1
47009: ARRAY
47010: PUSH
47011: LD_STRING p
47013: EQUAL
47014: IFFALSE 47024
// result := true ;
47016: LD_ADDR_VAR 0 2
47020: PUSH
47021: LD_INT 1
47023: ST_TO_ADDR
// end ;
47024: LD_VAR 0 2
47028: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47029: LD_INT 0
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
// if pos < 1 then
47035: LD_VAR 0 2
47039: PUSH
47040: LD_INT 1
47042: LESS
47043: IFFALSE 47047
// exit ;
47045: GO 47350
// if pos = 1 then
47047: LD_VAR 0 2
47051: PUSH
47052: LD_INT 1
47054: EQUAL
47055: IFFALSE 47088
// result := Replace ( arr , pos [ 1 ] , value ) else
47057: LD_ADDR_VAR 0 4
47061: PUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: LD_VAR 0 2
47071: PUSH
47072: LD_INT 1
47074: ARRAY
47075: PPUSH
47076: LD_VAR 0 3
47080: PPUSH
47081: CALL_OW 1
47085: ST_TO_ADDR
47086: GO 47350
// begin tmp := arr ;
47088: LD_ADDR_VAR 0 6
47092: PUSH
47093: LD_VAR 0 1
47097: ST_TO_ADDR
// s_arr := [ tmp ] ;
47098: LD_ADDR_VAR 0 7
47102: PUSH
47103: LD_VAR 0 6
47107: PUSH
47108: EMPTY
47109: LIST
47110: ST_TO_ADDR
// for i = 1 to pos - 1 do
47111: LD_ADDR_VAR 0 5
47115: PUSH
47116: DOUBLE
47117: LD_INT 1
47119: DEC
47120: ST_TO_ADDR
47121: LD_VAR 0 2
47125: PUSH
47126: LD_INT 1
47128: MINUS
47129: PUSH
47130: FOR_TO
47131: IFFALSE 47176
// begin tmp := tmp [ pos [ i ] ] ;
47133: LD_ADDR_VAR 0 6
47137: PUSH
47138: LD_VAR 0 6
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_VAR 0 5
47152: ARRAY
47153: ARRAY
47154: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47155: LD_ADDR_VAR 0 7
47159: PUSH
47160: LD_VAR 0 7
47164: PUSH
47165: LD_VAR 0 6
47169: PUSH
47170: EMPTY
47171: LIST
47172: ADD
47173: ST_TO_ADDR
// end ;
47174: GO 47130
47176: POP
47177: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47178: LD_ADDR_VAR 0 6
47182: PUSH
47183: LD_VAR 0 6
47187: PPUSH
47188: LD_VAR 0 2
47192: PUSH
47193: LD_VAR 0 2
47197: ARRAY
47198: PPUSH
47199: LD_VAR 0 3
47203: PPUSH
47204: CALL_OW 1
47208: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47209: LD_ADDR_VAR 0 7
47213: PUSH
47214: LD_VAR 0 7
47218: PPUSH
47219: LD_VAR 0 7
47223: PPUSH
47224: LD_VAR 0 6
47228: PPUSH
47229: CALL_OW 1
47233: ST_TO_ADDR
// for i = s_arr downto 2 do
47234: LD_ADDR_VAR 0 5
47238: PUSH
47239: DOUBLE
47240: LD_VAR 0 7
47244: INC
47245: ST_TO_ADDR
47246: LD_INT 2
47248: PUSH
47249: FOR_DOWNTO
47250: IFFALSE 47334
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47252: LD_ADDR_VAR 0 6
47256: PUSH
47257: LD_VAR 0 7
47261: PUSH
47262: LD_VAR 0 5
47266: PUSH
47267: LD_INT 1
47269: MINUS
47270: ARRAY
47271: PPUSH
47272: LD_VAR 0 2
47276: PUSH
47277: LD_VAR 0 5
47281: PUSH
47282: LD_INT 1
47284: MINUS
47285: ARRAY
47286: PPUSH
47287: LD_VAR 0 7
47291: PUSH
47292: LD_VAR 0 5
47296: ARRAY
47297: PPUSH
47298: CALL_OW 1
47302: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47303: LD_ADDR_VAR 0 7
47307: PUSH
47308: LD_VAR 0 7
47312: PPUSH
47313: LD_VAR 0 5
47317: PUSH
47318: LD_INT 1
47320: MINUS
47321: PPUSH
47322: LD_VAR 0 6
47326: PPUSH
47327: CALL_OW 1
47331: ST_TO_ADDR
// end ;
47332: GO 47249
47334: POP
47335: POP
// result := s_arr [ 1 ] ;
47336: LD_ADDR_VAR 0 4
47340: PUSH
47341: LD_VAR 0 7
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: ST_TO_ADDR
// end ; end ;
47350: LD_VAR 0 4
47354: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47355: LD_INT 0
47357: PPUSH
47358: PPUSH
// if not list then
47359: LD_VAR 0 1
47363: NOT
47364: IFFALSE 47368
// exit ;
47366: GO 47459
// i := list [ pos1 ] ;
47368: LD_ADDR_VAR 0 5
47372: PUSH
47373: LD_VAR 0 1
47377: PUSH
47378: LD_VAR 0 2
47382: ARRAY
47383: ST_TO_ADDR
// if not i then
47384: LD_VAR 0 5
47388: NOT
47389: IFFALSE 47393
// exit ;
47391: GO 47459
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47393: LD_ADDR_VAR 0 1
47397: PUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: LD_VAR 0 2
47407: PPUSH
47408: LD_VAR 0 1
47412: PUSH
47413: LD_VAR 0 3
47417: ARRAY
47418: PPUSH
47419: CALL_OW 1
47423: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47424: LD_ADDR_VAR 0 1
47428: PUSH
47429: LD_VAR 0 1
47433: PPUSH
47434: LD_VAR 0 3
47438: PPUSH
47439: LD_VAR 0 5
47443: PPUSH
47444: CALL_OW 1
47448: ST_TO_ADDR
// result := list ;
47449: LD_ADDR_VAR 0 4
47453: PUSH
47454: LD_VAR 0 1
47458: ST_TO_ADDR
// end ;
47459: LD_VAR 0 4
47463: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47464: LD_INT 0
47466: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47467: LD_ADDR_VAR 0 5
47471: PUSH
47472: LD_VAR 0 1
47476: PPUSH
47477: CALL_OW 250
47481: PPUSH
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL_OW 251
47491: PPUSH
47492: LD_VAR 0 2
47496: PPUSH
47497: LD_VAR 0 3
47501: PPUSH
47502: LD_VAR 0 4
47506: PPUSH
47507: CALL 47885 0 5
47511: ST_TO_ADDR
// end ;
47512: LD_VAR 0 5
47516: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47517: LD_INT 0
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
// if not list or not unit then
47523: LD_VAR 0 2
47527: NOT
47528: PUSH
47529: LD_VAR 0 1
47533: NOT
47534: OR
47535: IFFALSE 47539
// exit ;
47537: GO 47880
// result := [ ] ;
47539: LD_ADDR_VAR 0 5
47543: PUSH
47544: EMPTY
47545: ST_TO_ADDR
// for i in list do
47546: LD_ADDR_VAR 0 6
47550: PUSH
47551: LD_VAR 0 2
47555: PUSH
47556: FOR_IN
47557: IFFALSE 47775
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47559: LD_ADDR_VAR 0 8
47563: PUSH
47564: LD_VAR 0 1
47568: PPUSH
47569: LD_VAR 0 6
47573: PUSH
47574: LD_INT 1
47576: ARRAY
47577: PPUSH
47578: LD_VAR 0 6
47582: PUSH
47583: LD_INT 2
47585: ARRAY
47586: PPUSH
47587: CALL_OW 297
47591: ST_TO_ADDR
// if not Count ( result ) then
47592: LD_VAR 0 5
47596: PPUSH
47597: CALL 44169 0 1
47601: NOT
47602: IFFALSE 47635
// begin result := Join ( result , [ i , tmp ] ) ;
47604: LD_ADDR_VAR 0 5
47608: PUSH
47609: LD_VAR 0 5
47613: PPUSH
47614: LD_VAR 0 6
47618: PUSH
47619: LD_VAR 0 8
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PPUSH
47628: CALL 79769 0 2
47632: ST_TO_ADDR
// continue ;
47633: GO 47556
// end ; if result [ result ] [ 2 ] <= tmp then
47635: LD_VAR 0 5
47639: PUSH
47640: LD_VAR 0 5
47644: ARRAY
47645: PUSH
47646: LD_INT 2
47648: ARRAY
47649: PUSH
47650: LD_VAR 0 8
47654: LESSEQUAL
47655: IFFALSE 47688
// result := Join ( result , [ i , tmp ] ) else
47657: LD_ADDR_VAR 0 5
47661: PUSH
47662: LD_VAR 0 5
47666: PPUSH
47667: LD_VAR 0 6
47671: PUSH
47672: LD_VAR 0 8
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PPUSH
47681: CALL 79769 0 2
47685: ST_TO_ADDR
47686: GO 47773
// begin for j := 1 to Count ( result ) do
47688: LD_ADDR_VAR 0 7
47692: PUSH
47693: DOUBLE
47694: LD_INT 1
47696: DEC
47697: ST_TO_ADDR
47698: LD_VAR 0 5
47702: PPUSH
47703: CALL 44169 0 1
47707: PUSH
47708: FOR_TO
47709: IFFALSE 47771
// begin if tmp < result [ j ] [ 2 ] then
47711: LD_VAR 0 8
47715: PUSH
47716: LD_VAR 0 5
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: PUSH
47727: LD_INT 2
47729: ARRAY
47730: LESS
47731: IFFALSE 47769
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47733: LD_ADDR_VAR 0 5
47737: PUSH
47738: LD_VAR 0 5
47742: PPUSH
47743: LD_VAR 0 7
47747: PPUSH
47748: LD_VAR 0 6
47752: PUSH
47753: LD_VAR 0 8
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PPUSH
47762: CALL_OW 2
47766: ST_TO_ADDR
// break ;
47767: GO 47771
// end ; end ;
47769: GO 47708
47771: POP
47772: POP
// end ; end ;
47773: GO 47556
47775: POP
47776: POP
// if result and not asc then
47777: LD_VAR 0 5
47781: PUSH
47782: LD_VAR 0 3
47786: NOT
47787: AND
47788: IFFALSE 47805
// result := ReverseArray ( result ) ;
47790: LD_ADDR_VAR 0 5
47794: PUSH
47795: LD_VAR 0 5
47799: PPUSH
47800: CALL 75045 0 1
47804: ST_TO_ADDR
// tmp := [ ] ;
47805: LD_ADDR_VAR 0 8
47809: PUSH
47810: EMPTY
47811: ST_TO_ADDR
// if mode then
47812: LD_VAR 0 4
47816: IFFALSE 47880
// begin for i := 1 to result do
47818: LD_ADDR_VAR 0 6
47822: PUSH
47823: DOUBLE
47824: LD_INT 1
47826: DEC
47827: ST_TO_ADDR
47828: LD_VAR 0 5
47832: PUSH
47833: FOR_TO
47834: IFFALSE 47868
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47836: LD_ADDR_VAR 0 8
47840: PUSH
47841: LD_VAR 0 8
47845: PPUSH
47846: LD_VAR 0 5
47850: PUSH
47851: LD_VAR 0 6
47855: ARRAY
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: PPUSH
47861: CALL 79769 0 2
47865: ST_TO_ADDR
47866: GO 47833
47868: POP
47869: POP
// result := tmp ;
47870: LD_ADDR_VAR 0 5
47874: PUSH
47875: LD_VAR 0 8
47879: ST_TO_ADDR
// end ; end ;
47880: LD_VAR 0 5
47884: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47885: LD_INT 0
47887: PPUSH
47888: PPUSH
47889: PPUSH
47890: PPUSH
// if not list then
47891: LD_VAR 0 3
47895: NOT
47896: IFFALSE 47900
// exit ;
47898: GO 48288
// result := [ ] ;
47900: LD_ADDR_VAR 0 6
47904: PUSH
47905: EMPTY
47906: ST_TO_ADDR
// for i in list do
47907: LD_ADDR_VAR 0 7
47911: PUSH
47912: LD_VAR 0 3
47916: PUSH
47917: FOR_IN
47918: IFFALSE 48120
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_VAR 0 7
47929: PPUSH
47930: LD_VAR 0 1
47934: PPUSH
47935: LD_VAR 0 2
47939: PPUSH
47940: CALL_OW 297
47944: ST_TO_ADDR
// if not result then
47945: LD_VAR 0 6
47949: NOT
47950: IFFALSE 47976
// result := [ [ i , tmp ] ] else
47952: LD_ADDR_VAR 0 6
47956: PUSH
47957: LD_VAR 0 7
47961: PUSH
47962: LD_VAR 0 9
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: ST_TO_ADDR
47974: GO 48118
// begin if result [ result ] [ 2 ] < tmp then
47976: LD_VAR 0 6
47980: PUSH
47981: LD_VAR 0 6
47985: ARRAY
47986: PUSH
47987: LD_INT 2
47989: ARRAY
47990: PUSH
47991: LD_VAR 0 9
47995: LESS
47996: IFFALSE 48038
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47998: LD_ADDR_VAR 0 6
48002: PUSH
48003: LD_VAR 0 6
48007: PPUSH
48008: LD_VAR 0 6
48012: PUSH
48013: LD_INT 1
48015: PLUS
48016: PPUSH
48017: LD_VAR 0 7
48021: PUSH
48022: LD_VAR 0 9
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PPUSH
48031: CALL_OW 2
48035: ST_TO_ADDR
48036: GO 48118
// for j = 1 to result do
48038: LD_ADDR_VAR 0 8
48042: PUSH
48043: DOUBLE
48044: LD_INT 1
48046: DEC
48047: ST_TO_ADDR
48048: LD_VAR 0 6
48052: PUSH
48053: FOR_TO
48054: IFFALSE 48116
// begin if tmp < result [ j ] [ 2 ] then
48056: LD_VAR 0 9
48060: PUSH
48061: LD_VAR 0 6
48065: PUSH
48066: LD_VAR 0 8
48070: ARRAY
48071: PUSH
48072: LD_INT 2
48074: ARRAY
48075: LESS
48076: IFFALSE 48114
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48078: LD_ADDR_VAR 0 6
48082: PUSH
48083: LD_VAR 0 6
48087: PPUSH
48088: LD_VAR 0 8
48092: PPUSH
48093: LD_VAR 0 7
48097: PUSH
48098: LD_VAR 0 9
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PPUSH
48107: CALL_OW 2
48111: ST_TO_ADDR
// break ;
48112: GO 48116
// end ; end ;
48114: GO 48053
48116: POP
48117: POP
// end ; end ;
48118: GO 47917
48120: POP
48121: POP
// if result and not asc then
48122: LD_VAR 0 6
48126: PUSH
48127: LD_VAR 0 4
48131: NOT
48132: AND
48133: IFFALSE 48208
// begin tmp := result ;
48135: LD_ADDR_VAR 0 9
48139: PUSH
48140: LD_VAR 0 6
48144: ST_TO_ADDR
// for i = tmp downto 1 do
48145: LD_ADDR_VAR 0 7
48149: PUSH
48150: DOUBLE
48151: LD_VAR 0 9
48155: INC
48156: ST_TO_ADDR
48157: LD_INT 1
48159: PUSH
48160: FOR_DOWNTO
48161: IFFALSE 48206
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48163: LD_ADDR_VAR 0 6
48167: PUSH
48168: LD_VAR 0 6
48172: PPUSH
48173: LD_VAR 0 9
48177: PUSH
48178: LD_VAR 0 7
48182: MINUS
48183: PUSH
48184: LD_INT 1
48186: PLUS
48187: PPUSH
48188: LD_VAR 0 9
48192: PUSH
48193: LD_VAR 0 7
48197: ARRAY
48198: PPUSH
48199: CALL_OW 1
48203: ST_TO_ADDR
48204: GO 48160
48206: POP
48207: POP
// end ; tmp := [ ] ;
48208: LD_ADDR_VAR 0 9
48212: PUSH
48213: EMPTY
48214: ST_TO_ADDR
// if mode then
48215: LD_VAR 0 5
48219: IFFALSE 48288
// begin for i = 1 to result do
48221: LD_ADDR_VAR 0 7
48225: PUSH
48226: DOUBLE
48227: LD_INT 1
48229: DEC
48230: ST_TO_ADDR
48231: LD_VAR 0 6
48235: PUSH
48236: FOR_TO
48237: IFFALSE 48276
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48239: LD_ADDR_VAR 0 9
48243: PUSH
48244: LD_VAR 0 9
48248: PPUSH
48249: LD_VAR 0 7
48253: PPUSH
48254: LD_VAR 0 6
48258: PUSH
48259: LD_VAR 0 7
48263: ARRAY
48264: PUSH
48265: LD_INT 1
48267: ARRAY
48268: PPUSH
48269: CALL_OW 1
48273: ST_TO_ADDR
48274: GO 48236
48276: POP
48277: POP
// result := tmp ;
48278: LD_ADDR_VAR 0 6
48282: PUSH
48283: LD_VAR 0 9
48287: ST_TO_ADDR
// end ; end ;
48288: LD_VAR 0 6
48292: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48293: LD_INT 0
48295: PPUSH
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48301: LD_ADDR_VAR 0 5
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// if not x or not y then
48323: LD_VAR 0 2
48327: NOT
48328: PUSH
48329: LD_VAR 0 3
48333: NOT
48334: OR
48335: IFFALSE 48339
// exit ;
48337: GO 49989
// if not range then
48339: LD_VAR 0 4
48343: NOT
48344: IFFALSE 48354
// range := 10 ;
48346: LD_ADDR_VAR 0 4
48350: PUSH
48351: LD_INT 10
48353: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48354: LD_ADDR_VAR 0 8
48358: PUSH
48359: LD_INT 81
48361: PUSH
48362: LD_VAR 0 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 92
48373: PUSH
48374: LD_VAR 0 2
48378: PUSH
48379: LD_VAR 0 3
48383: PUSH
48384: LD_VAR 0 4
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 21
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: PPUSH
48417: CALL_OW 69
48421: ST_TO_ADDR
// if not tmp then
48422: LD_VAR 0 8
48426: NOT
48427: IFFALSE 48431
// exit ;
48429: GO 49989
// for i in tmp do
48431: LD_ADDR_VAR 0 6
48435: PUSH
48436: LD_VAR 0 8
48440: PUSH
48441: FOR_IN
48442: IFFALSE 49964
// begin points := [ 0 , 0 , 0 ] ;
48444: LD_ADDR_VAR 0 9
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// bpoints := 1 ;
48463: LD_ADDR_VAR 0 10
48467: PUSH
48468: LD_INT 1
48470: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48471: LD_VAR 0 6
48475: PPUSH
48476: CALL_OW 247
48480: PUSH
48481: LD_INT 1
48483: DOUBLE
48484: EQUAL
48485: IFTRUE 48489
48487: GO 49067
48489: POP
// begin if GetClass ( i ) = 1 then
48490: LD_VAR 0 6
48494: PPUSH
48495: CALL_OW 257
48499: PUSH
48500: LD_INT 1
48502: EQUAL
48503: IFFALSE 48524
// points := [ 10 , 5 , 3 ] ;
48505: LD_ADDR_VAR 0 9
48509: PUSH
48510: LD_INT 10
48512: PUSH
48513: LD_INT 5
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48524: LD_VAR 0 6
48528: PPUSH
48529: CALL_OW 257
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: LD_INT 4
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: IN
48548: IFFALSE 48569
// points := [ 3 , 2 , 1 ] ;
48550: LD_ADDR_VAR 0 9
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48569: LD_VAR 0 6
48573: PPUSH
48574: CALL_OW 257
48578: PUSH
48579: LD_INT 5
48581: EQUAL
48582: IFFALSE 48603
// points := [ 130 , 5 , 2 ] ;
48584: LD_ADDR_VAR 0 9
48588: PUSH
48589: LD_INT 130
48591: PUSH
48592: LD_INT 5
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48603: LD_VAR 0 6
48607: PPUSH
48608: CALL_OW 257
48612: PUSH
48613: LD_INT 8
48615: EQUAL
48616: IFFALSE 48637
// points := [ 35 , 35 , 30 ] ;
48618: LD_ADDR_VAR 0 9
48622: PUSH
48623: LD_INT 35
48625: PUSH
48626: LD_INT 35
48628: PUSH
48629: LD_INT 30
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48637: LD_VAR 0 6
48641: PPUSH
48642: CALL_OW 257
48646: PUSH
48647: LD_INT 9
48649: EQUAL
48650: IFFALSE 48671
// points := [ 20 , 55 , 40 ] ;
48652: LD_ADDR_VAR 0 9
48656: PUSH
48657: LD_INT 20
48659: PUSH
48660: LD_INT 55
48662: PUSH
48663: LD_INT 40
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48671: LD_VAR 0 6
48675: PPUSH
48676: CALL_OW 257
48680: PUSH
48681: LD_INT 12
48683: PUSH
48684: LD_INT 16
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: IN
48691: IFFALSE 48712
// points := [ 5 , 3 , 2 ] ;
48693: LD_ADDR_VAR 0 9
48697: PUSH
48698: LD_INT 5
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48712: LD_VAR 0 6
48716: PPUSH
48717: CALL_OW 257
48721: PUSH
48722: LD_INT 17
48724: EQUAL
48725: IFFALSE 48746
// points := [ 100 , 50 , 75 ] ;
48727: LD_ADDR_VAR 0 9
48731: PUSH
48732: LD_INT 100
48734: PUSH
48735: LD_INT 50
48737: PUSH
48738: LD_INT 75
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48746: LD_VAR 0 6
48750: PPUSH
48751: CALL_OW 257
48755: PUSH
48756: LD_INT 15
48758: EQUAL
48759: IFFALSE 48780
// points := [ 10 , 5 , 3 ] ;
48761: LD_ADDR_VAR 0 9
48765: PUSH
48766: LD_INT 10
48768: PUSH
48769: LD_INT 5
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48780: LD_VAR 0 6
48784: PPUSH
48785: CALL_OW 257
48789: PUSH
48790: LD_INT 14
48792: EQUAL
48793: IFFALSE 48814
// points := [ 10 , 0 , 0 ] ;
48795: LD_ADDR_VAR 0 9
48799: PUSH
48800: LD_INT 10
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48814: LD_VAR 0 6
48818: PPUSH
48819: CALL_OW 257
48823: PUSH
48824: LD_INT 11
48826: EQUAL
48827: IFFALSE 48848
// points := [ 30 , 10 , 5 ] ;
48829: LD_ADDR_VAR 0 9
48833: PUSH
48834: LD_INT 30
48836: PUSH
48837: LD_INT 10
48839: PUSH
48840: LD_INT 5
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48848: LD_VAR 0 1
48852: PPUSH
48853: LD_INT 5
48855: PPUSH
48856: CALL_OW 321
48860: PUSH
48861: LD_INT 2
48863: EQUAL
48864: IFFALSE 48881
// bpoints := bpoints * 1.8 ;
48866: LD_ADDR_VAR 0 10
48870: PUSH
48871: LD_VAR 0 10
48875: PUSH
48876: LD_REAL  1.80000000000000E+0000
48879: MUL
48880: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48881: LD_VAR 0 6
48885: PPUSH
48886: CALL_OW 257
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: LD_INT 4
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: IN
48909: PUSH
48910: LD_VAR 0 1
48914: PPUSH
48915: LD_INT 51
48917: PPUSH
48918: CALL_OW 321
48922: PUSH
48923: LD_INT 2
48925: EQUAL
48926: AND
48927: IFFALSE 48944
// bpoints := bpoints * 1.2 ;
48929: LD_ADDR_VAR 0 10
48933: PUSH
48934: LD_VAR 0 10
48938: PUSH
48939: LD_REAL  1.20000000000000E+0000
48942: MUL
48943: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48944: LD_VAR 0 6
48948: PPUSH
48949: CALL_OW 257
48953: PUSH
48954: LD_INT 5
48956: PUSH
48957: LD_INT 7
48959: PUSH
48960: LD_INT 9
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: IN
48968: PUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: LD_INT 52
48976: PPUSH
48977: CALL_OW 321
48981: PUSH
48982: LD_INT 2
48984: EQUAL
48985: AND
48986: IFFALSE 49003
// bpoints := bpoints * 1.5 ;
48988: LD_ADDR_VAR 0 10
48992: PUSH
48993: LD_VAR 0 10
48997: PUSH
48998: LD_REAL  1.50000000000000E+0000
49001: MUL
49002: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49003: LD_VAR 0 1
49007: PPUSH
49008: LD_INT 66
49010: PPUSH
49011: CALL_OW 321
49015: PUSH
49016: LD_INT 2
49018: EQUAL
49019: IFFALSE 49036
// bpoints := bpoints * 1.1 ;
49021: LD_ADDR_VAR 0 10
49025: PUSH
49026: LD_VAR 0 10
49030: PUSH
49031: LD_REAL  1.10000000000000E+0000
49034: MUL
49035: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49036: LD_ADDR_VAR 0 10
49040: PUSH
49041: LD_VAR 0 10
49045: PUSH
49046: LD_VAR 0 6
49050: PPUSH
49051: LD_INT 1
49053: PPUSH
49054: CALL_OW 259
49058: PUSH
49059: LD_REAL  1.15000000000000E+0000
49062: MUL
49063: MUL
49064: ST_TO_ADDR
// end ; unit_vehicle :
49065: GO 49893
49067: LD_INT 2
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49075
49073: GO 49881
49075: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49076: LD_VAR 0 6
49080: PPUSH
49081: CALL_OW 264
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 42
49091: PUSH
49092: LD_INT 24
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: IN
49100: IFFALSE 49121
// points := [ 25 , 5 , 3 ] ;
49102: LD_ADDR_VAR 0 9
49106: PUSH
49107: LD_INT 25
49109: PUSH
49110: LD_INT 5
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49121: LD_VAR 0 6
49125: PPUSH
49126: CALL_OW 264
49130: PUSH
49131: LD_INT 4
49133: PUSH
49134: LD_INT 43
49136: PUSH
49137: LD_INT 25
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: IN
49145: IFFALSE 49166
// points := [ 40 , 15 , 5 ] ;
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_INT 40
49154: PUSH
49155: LD_INT 15
49157: PUSH
49158: LD_INT 5
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49166: LD_VAR 0 6
49170: PPUSH
49171: CALL_OW 264
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: LD_INT 23
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: IN
49186: IFFALSE 49207
// points := [ 7 , 25 , 8 ] ;
49188: LD_ADDR_VAR 0 9
49192: PUSH
49193: LD_INT 7
49195: PUSH
49196: LD_INT 25
49198: PUSH
49199: LD_INT 8
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49207: LD_VAR 0 6
49211: PPUSH
49212: CALL_OW 264
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: LD_INT 27
49222: PUSH
49223: LD_INT 44
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: IN
49231: IFFALSE 49252
// points := [ 14 , 50 , 16 ] ;
49233: LD_ADDR_VAR 0 9
49237: PUSH
49238: LD_INT 14
49240: PUSH
49241: LD_INT 50
49243: PUSH
49244: LD_INT 16
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49252: LD_VAR 0 6
49256: PPUSH
49257: CALL_OW 264
49261: PUSH
49262: LD_INT 6
49264: PUSH
49265: LD_INT 46
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: IN
49272: IFFALSE 49293
// points := [ 32 , 120 , 70 ] ;
49274: LD_ADDR_VAR 0 9
49278: PUSH
49279: LD_INT 32
49281: PUSH
49282: LD_INT 120
49284: PUSH
49285: LD_INT 70
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49293: LD_VAR 0 6
49297: PPUSH
49298: CALL_OW 264
49302: PUSH
49303: LD_INT 7
49305: PUSH
49306: LD_INT 28
49308: PUSH
49309: LD_INT 45
49311: PUSH
49312: LD_INT 92
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: IN
49321: IFFALSE 49342
// points := [ 35 , 20 , 45 ] ;
49323: LD_ADDR_VAR 0 9
49327: PUSH
49328: LD_INT 35
49330: PUSH
49331: LD_INT 20
49333: PUSH
49334: LD_INT 45
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49342: LD_VAR 0 6
49346: PPUSH
49347: CALL_OW 264
49351: PUSH
49352: LD_INT 47
49354: PUSH
49355: EMPTY
49356: LIST
49357: IN
49358: IFFALSE 49379
// points := [ 67 , 45 , 75 ] ;
49360: LD_ADDR_VAR 0 9
49364: PUSH
49365: LD_INT 67
49367: PUSH
49368: LD_INT 45
49370: PUSH
49371: LD_INT 75
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49379: LD_VAR 0 6
49383: PPUSH
49384: CALL_OW 264
49388: PUSH
49389: LD_INT 26
49391: PUSH
49392: EMPTY
49393: LIST
49394: IN
49395: IFFALSE 49416
// points := [ 120 , 30 , 80 ] ;
49397: LD_ADDR_VAR 0 9
49401: PUSH
49402: LD_INT 120
49404: PUSH
49405: LD_INT 30
49407: PUSH
49408: LD_INT 80
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49416: LD_VAR 0 6
49420: PPUSH
49421: CALL_OW 264
49425: PUSH
49426: LD_INT 22
49428: PUSH
49429: EMPTY
49430: LIST
49431: IN
49432: IFFALSE 49453
// points := [ 40 , 1 , 1 ] ;
49434: LD_ADDR_VAR 0 9
49438: PUSH
49439: LD_INT 40
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49453: LD_VAR 0 6
49457: PPUSH
49458: CALL_OW 264
49462: PUSH
49463: LD_INT 29
49465: PUSH
49466: EMPTY
49467: LIST
49468: IN
49469: IFFALSE 49490
// points := [ 70 , 200 , 400 ] ;
49471: LD_ADDR_VAR 0 9
49475: PUSH
49476: LD_INT 70
49478: PUSH
49479: LD_INT 200
49481: PUSH
49482: LD_INT 400
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49490: LD_VAR 0 6
49494: PPUSH
49495: CALL_OW 264
49499: PUSH
49500: LD_INT 14
49502: PUSH
49503: LD_INT 53
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: IN
49510: IFFALSE 49531
// points := [ 40 , 10 , 20 ] ;
49512: LD_ADDR_VAR 0 9
49516: PUSH
49517: LD_INT 40
49519: PUSH
49520: LD_INT 10
49522: PUSH
49523: LD_INT 20
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49531: LD_VAR 0 6
49535: PPUSH
49536: CALL_OW 264
49540: PUSH
49541: LD_INT 9
49543: PUSH
49544: EMPTY
49545: LIST
49546: IN
49547: IFFALSE 49568
// points := [ 5 , 70 , 20 ] ;
49549: LD_ADDR_VAR 0 9
49553: PUSH
49554: LD_INT 5
49556: PUSH
49557: LD_INT 70
49559: PUSH
49560: LD_INT 20
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49568: LD_VAR 0 6
49572: PPUSH
49573: CALL_OW 264
49577: PUSH
49578: LD_INT 10
49580: PUSH
49581: EMPTY
49582: LIST
49583: IN
49584: IFFALSE 49605
// points := [ 35 , 110 , 70 ] ;
49586: LD_ADDR_VAR 0 9
49590: PUSH
49591: LD_INT 35
49593: PUSH
49594: LD_INT 110
49596: PUSH
49597: LD_INT 70
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49605: LD_VAR 0 6
49609: PPUSH
49610: CALL_OW 265
49614: PUSH
49615: LD_INT 25
49617: EQUAL
49618: IFFALSE 49639
// points := [ 80 , 65 , 100 ] ;
49620: LD_ADDR_VAR 0 9
49624: PUSH
49625: LD_INT 80
49627: PUSH
49628: LD_INT 65
49630: PUSH
49631: LD_INT 100
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49639: LD_VAR 0 6
49643: PPUSH
49644: CALL_OW 263
49648: PUSH
49649: LD_INT 1
49651: EQUAL
49652: IFFALSE 49687
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49654: LD_ADDR_VAR 0 10
49658: PUSH
49659: LD_VAR 0 10
49663: PUSH
49664: LD_VAR 0 6
49668: PPUSH
49669: CALL_OW 311
49673: PPUSH
49674: LD_INT 3
49676: PPUSH
49677: CALL_OW 259
49681: PUSH
49682: LD_INT 4
49684: MUL
49685: MUL
49686: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49687: LD_VAR 0 6
49691: PPUSH
49692: CALL_OW 263
49696: PUSH
49697: LD_INT 2
49699: EQUAL
49700: IFFALSE 49751
// begin j := IsControledBy ( i ) ;
49702: LD_ADDR_VAR 0 7
49706: PUSH
49707: LD_VAR 0 6
49711: PPUSH
49712: CALL_OW 312
49716: ST_TO_ADDR
// if j then
49717: LD_VAR 0 7
49721: IFFALSE 49751
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49723: LD_ADDR_VAR 0 10
49727: PUSH
49728: LD_VAR 0 10
49732: PUSH
49733: LD_VAR 0 7
49737: PPUSH
49738: LD_INT 3
49740: PPUSH
49741: CALL_OW 259
49745: PUSH
49746: LD_INT 3
49748: MUL
49749: MUL
49750: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49751: LD_VAR 0 6
49755: PPUSH
49756: CALL_OW 264
49760: PUSH
49761: LD_INT 5
49763: PUSH
49764: LD_INT 6
49766: PUSH
49767: LD_INT 46
49769: PUSH
49770: LD_INT 44
49772: PUSH
49773: LD_INT 47
49775: PUSH
49776: LD_INT 45
49778: PUSH
49779: LD_INT 28
49781: PUSH
49782: LD_INT 7
49784: PUSH
49785: LD_INT 27
49787: PUSH
49788: LD_INT 29
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: IN
49803: PUSH
49804: LD_VAR 0 1
49808: PPUSH
49809: LD_INT 52
49811: PPUSH
49812: CALL_OW 321
49816: PUSH
49817: LD_INT 2
49819: EQUAL
49820: AND
49821: IFFALSE 49838
// bpoints := bpoints * 1.2 ;
49823: LD_ADDR_VAR 0 10
49827: PUSH
49828: LD_VAR 0 10
49832: PUSH
49833: LD_REAL  1.20000000000000E+0000
49836: MUL
49837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49838: LD_VAR 0 6
49842: PPUSH
49843: CALL_OW 264
49847: PUSH
49848: LD_INT 6
49850: PUSH
49851: LD_INT 46
49853: PUSH
49854: LD_INT 47
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: IN
49862: IFFALSE 49879
// bpoints := bpoints * 1.2 ;
49864: LD_ADDR_VAR 0 10
49868: PUSH
49869: LD_VAR 0 10
49873: PUSH
49874: LD_REAL  1.20000000000000E+0000
49877: MUL
49878: ST_TO_ADDR
// end ; unit_building :
49879: GO 49893
49881: LD_INT 3
49883: DOUBLE
49884: EQUAL
49885: IFTRUE 49889
49887: GO 49892
49889: POP
// ; end ;
49890: GO 49893
49892: POP
// for j = 1 to 3 do
49893: LD_ADDR_VAR 0 7
49897: PUSH
49898: DOUBLE
49899: LD_INT 1
49901: DEC
49902: ST_TO_ADDR
49903: LD_INT 3
49905: PUSH
49906: FOR_TO
49907: IFFALSE 49960
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49909: LD_ADDR_VAR 0 5
49913: PUSH
49914: LD_VAR 0 5
49918: PPUSH
49919: LD_VAR 0 7
49923: PPUSH
49924: LD_VAR 0 5
49928: PUSH
49929: LD_VAR 0 7
49933: ARRAY
49934: PUSH
49935: LD_VAR 0 9
49939: PUSH
49940: LD_VAR 0 7
49944: ARRAY
49945: PUSH
49946: LD_VAR 0 10
49950: MUL
49951: PLUS
49952: PPUSH
49953: CALL_OW 1
49957: ST_TO_ADDR
49958: GO 49906
49960: POP
49961: POP
// end ;
49962: GO 48441
49964: POP
49965: POP
// result := Replace ( result , 4 , tmp ) ;
49966: LD_ADDR_VAR 0 5
49970: PUSH
49971: LD_VAR 0 5
49975: PPUSH
49976: LD_INT 4
49978: PPUSH
49979: LD_VAR 0 8
49983: PPUSH
49984: CALL_OW 1
49988: ST_TO_ADDR
// end ;
49989: LD_VAR 0 5
49993: RET
// export function DangerAtRange ( unit , range ) ; begin
49994: LD_INT 0
49996: PPUSH
// if not unit then
49997: LD_VAR 0 1
50001: NOT
50002: IFFALSE 50006
// exit ;
50004: GO 50051
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50006: LD_ADDR_VAR 0 3
50010: PUSH
50011: LD_VAR 0 1
50015: PPUSH
50016: CALL_OW 255
50020: PPUSH
50021: LD_VAR 0 1
50025: PPUSH
50026: CALL_OW 250
50030: PPUSH
50031: LD_VAR 0 1
50035: PPUSH
50036: CALL_OW 251
50040: PPUSH
50041: LD_VAR 0 2
50045: PPUSH
50046: CALL 48293 0 4
50050: ST_TO_ADDR
// end ;
50051: LD_VAR 0 3
50055: RET
// export function DangerInArea ( side , area ) ; begin
50056: LD_INT 0
50058: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50059: LD_ADDR_VAR 0 3
50063: PUSH
50064: LD_VAR 0 2
50068: PPUSH
50069: LD_INT 81
50071: PUSH
50072: LD_VAR 0 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PPUSH
50081: CALL_OW 70
50085: ST_TO_ADDR
// end ;
50086: LD_VAR 0 3
50090: RET
// export function IsExtension ( b ) ; begin
50091: LD_INT 0
50093: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50094: LD_ADDR_VAR 0 2
50098: PUSH
50099: LD_VAR 0 1
50103: PUSH
50104: LD_INT 23
50106: PUSH
50107: LD_INT 20
50109: PUSH
50110: LD_INT 22
50112: PUSH
50113: LD_INT 17
50115: PUSH
50116: LD_INT 24
50118: PUSH
50119: LD_INT 21
50121: PUSH
50122: LD_INT 19
50124: PUSH
50125: LD_INT 16
50127: PUSH
50128: LD_INT 25
50130: PUSH
50131: LD_INT 18
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: IN
50146: ST_TO_ADDR
// end ;
50147: LD_VAR 0 2
50151: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50152: LD_INT 0
50154: PPUSH
50155: PPUSH
50156: PPUSH
// result := [ ] ;
50157: LD_ADDR_VAR 0 4
50161: PUSH
50162: EMPTY
50163: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50164: LD_ADDR_VAR 0 5
50168: PUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: LD_INT 21
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PPUSH
50184: CALL_OW 70
50188: ST_TO_ADDR
// if not tmp then
50189: LD_VAR 0 5
50193: NOT
50194: IFFALSE 50198
// exit ;
50196: GO 50262
// if checkLink then
50198: LD_VAR 0 3
50202: IFFALSE 50252
// begin for i in tmp do
50204: LD_ADDR_VAR 0 6
50208: PUSH
50209: LD_VAR 0 5
50213: PUSH
50214: FOR_IN
50215: IFFALSE 50250
// if GetBase ( i ) <> base then
50217: LD_VAR 0 6
50221: PPUSH
50222: CALL_OW 274
50226: PUSH
50227: LD_VAR 0 1
50231: NONEQUAL
50232: IFFALSE 50248
// ComLinkToBase ( base , i ) ;
50234: LD_VAR 0 1
50238: PPUSH
50239: LD_VAR 0 6
50243: PPUSH
50244: CALL_OW 169
50248: GO 50214
50250: POP
50251: POP
// end ; result := tmp ;
50252: LD_ADDR_VAR 0 4
50256: PUSH
50257: LD_VAR 0 5
50261: ST_TO_ADDR
// end ;
50262: LD_VAR 0 4
50266: RET
// export function ComComplete ( units , b ) ; var i ; begin
50267: LD_INT 0
50269: PPUSH
50270: PPUSH
// if not units then
50271: LD_VAR 0 1
50275: NOT
50276: IFFALSE 50280
// exit ;
50278: GO 50370
// for i in units do
50280: LD_ADDR_VAR 0 4
50284: PUSH
50285: LD_VAR 0 1
50289: PUSH
50290: FOR_IN
50291: IFFALSE 50368
// if BuildingStatus ( b ) = bs_build then
50293: LD_VAR 0 2
50297: PPUSH
50298: CALL_OW 461
50302: PUSH
50303: LD_INT 1
50305: EQUAL
50306: IFFALSE 50366
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50308: LD_VAR 0 4
50312: PPUSH
50313: LD_STRING h
50315: PUSH
50316: LD_VAR 0 2
50320: PPUSH
50321: CALL_OW 250
50325: PUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: CALL_OW 251
50335: PUSH
50336: LD_VAR 0 2
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: PPUSH
50362: CALL_OW 446
50366: GO 50290
50368: POP
50369: POP
// end ;
50370: LD_VAR 0 3
50374: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50375: LD_INT 0
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50383: LD_VAR 0 1
50387: NOT
50388: PUSH
50389: LD_VAR 0 1
50393: PPUSH
50394: CALL_OW 263
50398: PUSH
50399: LD_INT 2
50401: NONEQUAL
50402: OR
50403: IFFALSE 50407
// exit ;
50405: GO 50723
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50407: LD_ADDR_VAR 0 6
50411: PUSH
50412: LD_INT 22
50414: PUSH
50415: LD_VAR 0 1
50419: PPUSH
50420: CALL_OW 255
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 30
50434: PUSH
50435: LD_INT 36
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 34
50444: PUSH
50445: LD_INT 31
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PPUSH
50461: CALL_OW 69
50465: ST_TO_ADDR
// if not tmp then
50466: LD_VAR 0 6
50470: NOT
50471: IFFALSE 50475
// exit ;
50473: GO 50723
// result := [ ] ;
50475: LD_ADDR_VAR 0 2
50479: PUSH
50480: EMPTY
50481: ST_TO_ADDR
// for i in tmp do
50482: LD_ADDR_VAR 0 3
50486: PUSH
50487: LD_VAR 0 6
50491: PUSH
50492: FOR_IN
50493: IFFALSE 50564
// begin t := UnitsInside ( i ) ;
50495: LD_ADDR_VAR 0 4
50499: PUSH
50500: LD_VAR 0 3
50504: PPUSH
50505: CALL_OW 313
50509: ST_TO_ADDR
// if t then
50510: LD_VAR 0 4
50514: IFFALSE 50562
// for j in t do
50516: LD_ADDR_VAR 0 7
50520: PUSH
50521: LD_VAR 0 4
50525: PUSH
50526: FOR_IN
50527: IFFALSE 50560
// result := Replace ( result , result + 1 , j ) ;
50529: LD_ADDR_VAR 0 2
50533: PUSH
50534: LD_VAR 0 2
50538: PPUSH
50539: LD_VAR 0 2
50543: PUSH
50544: LD_INT 1
50546: PLUS
50547: PPUSH
50548: LD_VAR 0 7
50552: PPUSH
50553: CALL_OW 1
50557: ST_TO_ADDR
50558: GO 50526
50560: POP
50561: POP
// end ;
50562: GO 50492
50564: POP
50565: POP
// if not result then
50566: LD_VAR 0 2
50570: NOT
50571: IFFALSE 50575
// exit ;
50573: GO 50723
// mech := result [ 1 ] ;
50575: LD_ADDR_VAR 0 5
50579: PUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_INT 1
50587: ARRAY
50588: ST_TO_ADDR
// if result > 1 then
50589: LD_VAR 0 2
50593: PUSH
50594: LD_INT 1
50596: GREATER
50597: IFFALSE 50709
// begin for i = 2 to result do
50599: LD_ADDR_VAR 0 3
50603: PUSH
50604: DOUBLE
50605: LD_INT 2
50607: DEC
50608: ST_TO_ADDR
50609: LD_VAR 0 2
50613: PUSH
50614: FOR_TO
50615: IFFALSE 50707
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50617: LD_ADDR_VAR 0 4
50621: PUSH
50622: LD_VAR 0 2
50626: PUSH
50627: LD_VAR 0 3
50631: ARRAY
50632: PPUSH
50633: LD_INT 3
50635: PPUSH
50636: CALL_OW 259
50640: PUSH
50641: LD_VAR 0 2
50645: PUSH
50646: LD_VAR 0 3
50650: ARRAY
50651: PPUSH
50652: CALL_OW 432
50656: MINUS
50657: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50658: LD_VAR 0 4
50662: PUSH
50663: LD_VAR 0 5
50667: PPUSH
50668: LD_INT 3
50670: PPUSH
50671: CALL_OW 259
50675: PUSH
50676: LD_VAR 0 5
50680: PPUSH
50681: CALL_OW 432
50685: MINUS
50686: GREATEREQUAL
50687: IFFALSE 50705
// mech := result [ i ] ;
50689: LD_ADDR_VAR 0 5
50693: PUSH
50694: LD_VAR 0 2
50698: PUSH
50699: LD_VAR 0 3
50703: ARRAY
50704: ST_TO_ADDR
// end ;
50705: GO 50614
50707: POP
50708: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50709: LD_VAR 0 1
50713: PPUSH
50714: LD_VAR 0 5
50718: PPUSH
50719: CALL_OW 135
// end ;
50723: LD_VAR 0 2
50727: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50728: LD_INT 0
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
// result := [ ] ;
50743: LD_ADDR_VAR 0 7
50747: PUSH
50748: EMPTY
50749: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50750: LD_VAR 0 1
50754: PPUSH
50755: CALL_OW 266
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: IN
50770: NOT
50771: IFFALSE 50775
// exit ;
50773: GO 52409
// if name then
50775: LD_VAR 0 3
50779: IFFALSE 50795
// SetBName ( base_dep , name ) ;
50781: LD_VAR 0 1
50785: PPUSH
50786: LD_VAR 0 3
50790: PPUSH
50791: CALL_OW 500
// base := GetBase ( base_dep ) ;
50795: LD_ADDR_VAR 0 15
50799: PUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: CALL_OW 274
50809: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50810: LD_ADDR_VAR 0 16
50814: PUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 255
50824: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50825: LD_ADDR_VAR 0 17
50829: PUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 248
50839: ST_TO_ADDR
// if sources then
50840: LD_VAR 0 5
50844: IFFALSE 50891
// for i = 1 to 3 do
50846: LD_ADDR_VAR 0 8
50850: PUSH
50851: DOUBLE
50852: LD_INT 1
50854: DEC
50855: ST_TO_ADDR
50856: LD_INT 3
50858: PUSH
50859: FOR_TO
50860: IFFALSE 50889
// AddResourceType ( base , i , sources [ i ] ) ;
50862: LD_VAR 0 15
50866: PPUSH
50867: LD_VAR 0 8
50871: PPUSH
50872: LD_VAR 0 5
50876: PUSH
50877: LD_VAR 0 8
50881: ARRAY
50882: PPUSH
50883: CALL_OW 276
50887: GO 50859
50889: POP
50890: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50891: LD_ADDR_VAR 0 18
50895: PUSH
50896: LD_VAR 0 15
50900: PPUSH
50901: LD_VAR 0 2
50905: PPUSH
50906: LD_INT 1
50908: PPUSH
50909: CALL 50152 0 3
50913: ST_TO_ADDR
// InitHc ;
50914: CALL_OW 19
// InitUc ;
50918: CALL_OW 18
// uc_side := side ;
50922: LD_ADDR_OWVAR 20
50926: PUSH
50927: LD_VAR 0 16
50931: ST_TO_ADDR
// uc_nation := nation ;
50932: LD_ADDR_OWVAR 21
50936: PUSH
50937: LD_VAR 0 17
50941: ST_TO_ADDR
// if buildings then
50942: LD_VAR 0 18
50946: IFFALSE 52268
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50948: LD_ADDR_VAR 0 19
50952: PUSH
50953: LD_VAR 0 18
50957: PPUSH
50958: LD_INT 2
50960: PUSH
50961: LD_INT 30
50963: PUSH
50964: LD_INT 29
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 30
50973: PUSH
50974: LD_INT 30
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: PPUSH
50986: CALL_OW 72
50990: ST_TO_ADDR
// if tmp then
50991: LD_VAR 0 19
50995: IFFALSE 51043
// for i in tmp do
50997: LD_ADDR_VAR 0 8
51001: PUSH
51002: LD_VAR 0 19
51006: PUSH
51007: FOR_IN
51008: IFFALSE 51041
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51010: LD_VAR 0 8
51014: PPUSH
51015: CALL_OW 250
51019: PPUSH
51020: LD_VAR 0 8
51024: PPUSH
51025: CALL_OW 251
51029: PPUSH
51030: LD_VAR 0 16
51034: PPUSH
51035: CALL_OW 441
51039: GO 51007
51041: POP
51042: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51043: LD_VAR 0 18
51047: PPUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 30
51053: PUSH
51054: LD_INT 32
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 30
51063: PUSH
51064: LD_INT 33
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: PPUSH
51076: CALL_OW 72
51080: IFFALSE 51168
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51082: LD_ADDR_VAR 0 8
51086: PUSH
51087: LD_VAR 0 18
51091: PPUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 30
51097: PUSH
51098: LD_INT 32
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 30
51107: PUSH
51108: LD_INT 33
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PPUSH
51120: CALL_OW 72
51124: PUSH
51125: FOR_IN
51126: IFFALSE 51166
// begin if not GetBWeapon ( i ) then
51128: LD_VAR 0 8
51132: PPUSH
51133: CALL_OW 269
51137: NOT
51138: IFFALSE 51164
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51140: LD_VAR 0 8
51144: PPUSH
51145: LD_VAR 0 8
51149: PPUSH
51150: LD_VAR 0 2
51154: PPUSH
51155: CALL 52414 0 2
51159: PPUSH
51160: CALL_OW 431
// end ;
51164: GO 51125
51166: POP
51167: POP
// end ; for i = 1 to personel do
51168: LD_ADDR_VAR 0 8
51172: PUSH
51173: DOUBLE
51174: LD_INT 1
51176: DEC
51177: ST_TO_ADDR
51178: LD_VAR 0 6
51182: PUSH
51183: FOR_TO
51184: IFFALSE 52248
// begin if i > 4 then
51186: LD_VAR 0 8
51190: PUSH
51191: LD_INT 4
51193: GREATER
51194: IFFALSE 51198
// break ;
51196: GO 52248
// case i of 1 :
51198: LD_VAR 0 8
51202: PUSH
51203: LD_INT 1
51205: DOUBLE
51206: EQUAL
51207: IFTRUE 51211
51209: GO 51291
51211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51212: LD_ADDR_VAR 0 12
51216: PUSH
51217: LD_VAR 0 18
51221: PPUSH
51222: LD_INT 22
51224: PUSH
51225: LD_VAR 0 16
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 58
51236: PUSH
51237: EMPTY
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 30
51245: PUSH
51246: LD_INT 32
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 30
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 30
51265: PUSH
51266: LD_INT 5
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: PPUSH
51284: CALL_OW 72
51288: ST_TO_ADDR
51289: GO 51513
51291: LD_INT 2
51293: DOUBLE
51294: EQUAL
51295: IFTRUE 51299
51297: GO 51361
51299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51300: LD_ADDR_VAR 0 12
51304: PUSH
51305: LD_VAR 0 18
51309: PPUSH
51310: LD_INT 22
51312: PUSH
51313: LD_VAR 0 16
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 30
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 30
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PPUSH
51354: CALL_OW 72
51358: ST_TO_ADDR
51359: GO 51513
51361: LD_INT 3
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51369
51367: GO 51431
51369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51370: LD_ADDR_VAR 0 12
51374: PUSH
51375: LD_VAR 0 18
51379: PPUSH
51380: LD_INT 22
51382: PUSH
51383: LD_VAR 0 16
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 30
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 30
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PPUSH
51424: CALL_OW 72
51428: ST_TO_ADDR
51429: GO 51513
51431: LD_INT 4
51433: DOUBLE
51434: EQUAL
51435: IFTRUE 51439
51437: GO 51512
51439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51440: LD_ADDR_VAR 0 12
51444: PUSH
51445: LD_VAR 0 18
51449: PPUSH
51450: LD_INT 22
51452: PUSH
51453: LD_VAR 0 16
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 30
51467: PUSH
51468: LD_INT 6
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 30
51477: PUSH
51478: LD_INT 7
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 30
51487: PUSH
51488: LD_INT 8
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PPUSH
51505: CALL_OW 72
51509: ST_TO_ADDR
51510: GO 51513
51512: POP
// if i = 1 then
51513: LD_VAR 0 8
51517: PUSH
51518: LD_INT 1
51520: EQUAL
51521: IFFALSE 51632
// begin tmp := [ ] ;
51523: LD_ADDR_VAR 0 19
51527: PUSH
51528: EMPTY
51529: ST_TO_ADDR
// for j in f do
51530: LD_ADDR_VAR 0 9
51534: PUSH
51535: LD_VAR 0 12
51539: PUSH
51540: FOR_IN
51541: IFFALSE 51614
// if GetBType ( j ) = b_bunker then
51543: LD_VAR 0 9
51547: PPUSH
51548: CALL_OW 266
51552: PUSH
51553: LD_INT 32
51555: EQUAL
51556: IFFALSE 51583
// tmp := Insert ( tmp , 1 , j ) else
51558: LD_ADDR_VAR 0 19
51562: PUSH
51563: LD_VAR 0 19
51567: PPUSH
51568: LD_INT 1
51570: PPUSH
51571: LD_VAR 0 9
51575: PPUSH
51576: CALL_OW 2
51580: ST_TO_ADDR
51581: GO 51612
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51583: LD_ADDR_VAR 0 19
51587: PUSH
51588: LD_VAR 0 19
51592: PPUSH
51593: LD_VAR 0 19
51597: PUSH
51598: LD_INT 1
51600: PLUS
51601: PPUSH
51602: LD_VAR 0 9
51606: PPUSH
51607: CALL_OW 2
51611: ST_TO_ADDR
51612: GO 51540
51614: POP
51615: POP
// if tmp then
51616: LD_VAR 0 19
51620: IFFALSE 51632
// f := tmp ;
51622: LD_ADDR_VAR 0 12
51626: PUSH
51627: LD_VAR 0 19
51631: ST_TO_ADDR
// end ; x := personel [ i ] ;
51632: LD_ADDR_VAR 0 13
51636: PUSH
51637: LD_VAR 0 6
51641: PUSH
51642: LD_VAR 0 8
51646: ARRAY
51647: ST_TO_ADDR
// if x = - 1 then
51648: LD_VAR 0 13
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: EQUAL
51657: IFFALSE 51866
// begin for j in f do
51659: LD_ADDR_VAR 0 9
51663: PUSH
51664: LD_VAR 0 12
51668: PUSH
51669: FOR_IN
51670: IFFALSE 51862
// repeat InitHc ;
51672: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51676: LD_VAR 0 9
51680: PPUSH
51681: CALL_OW 266
51685: PUSH
51686: LD_INT 5
51688: EQUAL
51689: IFFALSE 51759
// begin if UnitsInside ( j ) < 3 then
51691: LD_VAR 0 9
51695: PPUSH
51696: CALL_OW 313
51700: PUSH
51701: LD_INT 3
51703: LESS
51704: IFFALSE 51740
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51706: LD_INT 0
51708: PPUSH
51709: LD_INT 5
51711: PUSH
51712: LD_INT 8
51714: PUSH
51715: LD_INT 9
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: LD_VAR 0 17
51727: ARRAY
51728: PPUSH
51729: LD_VAR 0 4
51733: PPUSH
51734: CALL_OW 380
51738: GO 51757
// PrepareHuman ( false , i , skill ) ;
51740: LD_INT 0
51742: PPUSH
51743: LD_VAR 0 8
51747: PPUSH
51748: LD_VAR 0 4
51752: PPUSH
51753: CALL_OW 380
// end else
51757: GO 51776
// PrepareHuman ( false , i , skill ) ;
51759: LD_INT 0
51761: PPUSH
51762: LD_VAR 0 8
51766: PPUSH
51767: LD_VAR 0 4
51771: PPUSH
51772: CALL_OW 380
// un := CreateHuman ;
51776: LD_ADDR_VAR 0 14
51780: PUSH
51781: CALL_OW 44
51785: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51786: LD_ADDR_VAR 0 7
51790: PUSH
51791: LD_VAR 0 7
51795: PPUSH
51796: LD_INT 1
51798: PPUSH
51799: LD_VAR 0 14
51803: PPUSH
51804: CALL_OW 2
51808: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51809: LD_VAR 0 14
51813: PPUSH
51814: LD_VAR 0 9
51818: PPUSH
51819: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51823: LD_VAR 0 9
51827: PPUSH
51828: CALL_OW 313
51832: PUSH
51833: LD_INT 6
51835: EQUAL
51836: PUSH
51837: LD_VAR 0 9
51841: PPUSH
51842: CALL_OW 266
51846: PUSH
51847: LD_INT 32
51849: PUSH
51850: LD_INT 31
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: IN
51857: OR
51858: IFFALSE 51672
51860: GO 51669
51862: POP
51863: POP
// end else
51864: GO 52246
// for j = 1 to x do
51866: LD_ADDR_VAR 0 9
51870: PUSH
51871: DOUBLE
51872: LD_INT 1
51874: DEC
51875: ST_TO_ADDR
51876: LD_VAR 0 13
51880: PUSH
51881: FOR_TO
51882: IFFALSE 52244
// begin InitHc ;
51884: CALL_OW 19
// if not f then
51888: LD_VAR 0 12
51892: NOT
51893: IFFALSE 51982
// begin PrepareHuman ( false , i , skill ) ;
51895: LD_INT 0
51897: PPUSH
51898: LD_VAR 0 8
51902: PPUSH
51903: LD_VAR 0 4
51907: PPUSH
51908: CALL_OW 380
// un := CreateHuman ;
51912: LD_ADDR_VAR 0 14
51916: PUSH
51917: CALL_OW 44
51921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51922: LD_ADDR_VAR 0 7
51926: PUSH
51927: LD_VAR 0 7
51931: PPUSH
51932: LD_INT 1
51934: PPUSH
51935: LD_VAR 0 14
51939: PPUSH
51940: CALL_OW 2
51944: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51945: LD_VAR 0 14
51949: PPUSH
51950: LD_VAR 0 1
51954: PPUSH
51955: CALL_OW 250
51959: PPUSH
51960: LD_VAR 0 1
51964: PPUSH
51965: CALL_OW 251
51969: PPUSH
51970: LD_INT 10
51972: PPUSH
51973: LD_INT 0
51975: PPUSH
51976: CALL_OW 50
// continue ;
51980: GO 51881
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51982: LD_VAR 0 12
51986: PUSH
51987: LD_INT 1
51989: ARRAY
51990: PPUSH
51991: CALL_OW 313
51995: PUSH
51996: LD_VAR 0 12
52000: PUSH
52001: LD_INT 1
52003: ARRAY
52004: PPUSH
52005: CALL_OW 266
52009: PUSH
52010: LD_INT 32
52012: PUSH
52013: LD_INT 31
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: IN
52020: AND
52021: PUSH
52022: LD_VAR 0 12
52026: PUSH
52027: LD_INT 1
52029: ARRAY
52030: PPUSH
52031: CALL_OW 313
52035: PUSH
52036: LD_INT 6
52038: EQUAL
52039: OR
52040: IFFALSE 52060
// f := Delete ( f , 1 ) ;
52042: LD_ADDR_VAR 0 12
52046: PUSH
52047: LD_VAR 0 12
52051: PPUSH
52052: LD_INT 1
52054: PPUSH
52055: CALL_OW 3
52059: ST_TO_ADDR
// if not f then
52060: LD_VAR 0 12
52064: NOT
52065: IFFALSE 52083
// begin x := x + 2 ;
52067: LD_ADDR_VAR 0 13
52071: PUSH
52072: LD_VAR 0 13
52076: PUSH
52077: LD_INT 2
52079: PLUS
52080: ST_TO_ADDR
// continue ;
52081: GO 51881
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52083: LD_VAR 0 12
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PPUSH
52092: CALL_OW 266
52096: PUSH
52097: LD_INT 5
52099: EQUAL
52100: IFFALSE 52174
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52102: LD_VAR 0 12
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: PPUSH
52111: CALL_OW 313
52115: PUSH
52116: LD_INT 3
52118: LESS
52119: IFFALSE 52155
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52121: LD_INT 0
52123: PPUSH
52124: LD_INT 5
52126: PUSH
52127: LD_INT 8
52129: PUSH
52130: LD_INT 9
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: PUSH
52138: LD_VAR 0 17
52142: ARRAY
52143: PPUSH
52144: LD_VAR 0 4
52148: PPUSH
52149: CALL_OW 380
52153: GO 52172
// PrepareHuman ( false , i , skill ) ;
52155: LD_INT 0
52157: PPUSH
52158: LD_VAR 0 8
52162: PPUSH
52163: LD_VAR 0 4
52167: PPUSH
52168: CALL_OW 380
// end else
52172: GO 52191
// PrepareHuman ( false , i , skill ) ;
52174: LD_INT 0
52176: PPUSH
52177: LD_VAR 0 8
52181: PPUSH
52182: LD_VAR 0 4
52186: PPUSH
52187: CALL_OW 380
// un := CreateHuman ;
52191: LD_ADDR_VAR 0 14
52195: PUSH
52196: CALL_OW 44
52200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52201: LD_ADDR_VAR 0 7
52205: PUSH
52206: LD_VAR 0 7
52210: PPUSH
52211: LD_INT 1
52213: PPUSH
52214: LD_VAR 0 14
52218: PPUSH
52219: CALL_OW 2
52223: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52224: LD_VAR 0 14
52228: PPUSH
52229: LD_VAR 0 12
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: PPUSH
52238: CALL_OW 52
// end ;
52242: GO 51881
52244: POP
52245: POP
// end ;
52246: GO 51183
52248: POP
52249: POP
// result := result ^ buildings ;
52250: LD_ADDR_VAR 0 7
52254: PUSH
52255: LD_VAR 0 7
52259: PUSH
52260: LD_VAR 0 18
52264: ADD
52265: ST_TO_ADDR
// end else
52266: GO 52409
// begin for i = 1 to personel do
52268: LD_ADDR_VAR 0 8
52272: PUSH
52273: DOUBLE
52274: LD_INT 1
52276: DEC
52277: ST_TO_ADDR
52278: LD_VAR 0 6
52282: PUSH
52283: FOR_TO
52284: IFFALSE 52407
// begin if i > 4 then
52286: LD_VAR 0 8
52290: PUSH
52291: LD_INT 4
52293: GREATER
52294: IFFALSE 52298
// break ;
52296: GO 52407
// x := personel [ i ] ;
52298: LD_ADDR_VAR 0 13
52302: PUSH
52303: LD_VAR 0 6
52307: PUSH
52308: LD_VAR 0 8
52312: ARRAY
52313: ST_TO_ADDR
// if x = - 1 then
52314: LD_VAR 0 13
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: EQUAL
52323: IFFALSE 52327
// continue ;
52325: GO 52283
// PrepareHuman ( false , i , skill ) ;
52327: LD_INT 0
52329: PPUSH
52330: LD_VAR 0 8
52334: PPUSH
52335: LD_VAR 0 4
52339: PPUSH
52340: CALL_OW 380
// un := CreateHuman ;
52344: LD_ADDR_VAR 0 14
52348: PUSH
52349: CALL_OW 44
52353: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52354: LD_VAR 0 14
52358: PPUSH
52359: LD_VAR 0 1
52363: PPUSH
52364: CALL_OW 250
52368: PPUSH
52369: LD_VAR 0 1
52373: PPUSH
52374: CALL_OW 251
52378: PPUSH
52379: LD_INT 10
52381: PPUSH
52382: LD_INT 0
52384: PPUSH
52385: CALL_OW 50
// result := result ^ un ;
52389: LD_ADDR_VAR 0 7
52393: PUSH
52394: LD_VAR 0 7
52398: PUSH
52399: LD_VAR 0 14
52403: ADD
52404: ST_TO_ADDR
// end ;
52405: GO 52283
52407: POP
52408: POP
// end ; end ;
52409: LD_VAR 0 7
52413: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52414: LD_INT 0
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
52420: PPUSH
52421: PPUSH
52422: PPUSH
52423: PPUSH
52424: PPUSH
52425: PPUSH
52426: PPUSH
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
// result := false ;
52432: LD_ADDR_VAR 0 3
52436: PUSH
52437: LD_INT 0
52439: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52440: LD_VAR 0 1
52444: NOT
52445: PUSH
52446: LD_VAR 0 1
52450: PPUSH
52451: CALL_OW 266
52455: PUSH
52456: LD_INT 32
52458: PUSH
52459: LD_INT 33
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: IN
52466: NOT
52467: OR
52468: IFFALSE 52472
// exit ;
52470: GO 53581
// nat := GetNation ( tower ) ;
52472: LD_ADDR_VAR 0 12
52476: PUSH
52477: LD_VAR 0 1
52481: PPUSH
52482: CALL_OW 248
52486: ST_TO_ADDR
// side := GetSide ( tower ) ;
52487: LD_ADDR_VAR 0 16
52491: PUSH
52492: LD_VAR 0 1
52496: PPUSH
52497: CALL_OW 255
52501: ST_TO_ADDR
// x := GetX ( tower ) ;
52502: LD_ADDR_VAR 0 10
52506: PUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 250
52516: ST_TO_ADDR
// y := GetY ( tower ) ;
52517: LD_ADDR_VAR 0 11
52521: PUSH
52522: LD_VAR 0 1
52526: PPUSH
52527: CALL_OW 251
52531: ST_TO_ADDR
// if not x or not y then
52532: LD_VAR 0 10
52536: NOT
52537: PUSH
52538: LD_VAR 0 11
52542: NOT
52543: OR
52544: IFFALSE 52548
// exit ;
52546: GO 53581
// weapon := 0 ;
52548: LD_ADDR_VAR 0 18
52552: PUSH
52553: LD_INT 0
52555: ST_TO_ADDR
// fac_list := [ ] ;
52556: LD_ADDR_VAR 0 17
52560: PUSH
52561: EMPTY
52562: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52563: LD_ADDR_VAR 0 6
52567: PUSH
52568: LD_VAR 0 1
52572: PPUSH
52573: CALL_OW 274
52577: PPUSH
52578: LD_VAR 0 2
52582: PPUSH
52583: LD_INT 0
52585: PPUSH
52586: CALL 50152 0 3
52590: PPUSH
52591: LD_INT 30
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PPUSH
52601: CALL_OW 72
52605: ST_TO_ADDR
// if not factories then
52606: LD_VAR 0 6
52610: NOT
52611: IFFALSE 52615
// exit ;
52613: GO 53581
// for i in factories do
52615: LD_ADDR_VAR 0 8
52619: PUSH
52620: LD_VAR 0 6
52624: PUSH
52625: FOR_IN
52626: IFFALSE 52651
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52628: LD_ADDR_VAR 0 17
52632: PUSH
52633: LD_VAR 0 17
52637: PUSH
52638: LD_VAR 0 8
52642: PPUSH
52643: CALL_OW 478
52647: UNION
52648: ST_TO_ADDR
52649: GO 52625
52651: POP
52652: POP
// if not fac_list then
52653: LD_VAR 0 17
52657: NOT
52658: IFFALSE 52662
// exit ;
52660: GO 53581
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52662: LD_ADDR_VAR 0 5
52666: PUSH
52667: LD_INT 4
52669: PUSH
52670: LD_INT 5
52672: PUSH
52673: LD_INT 9
52675: PUSH
52676: LD_INT 10
52678: PUSH
52679: LD_INT 6
52681: PUSH
52682: LD_INT 7
52684: PUSH
52685: LD_INT 11
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 27
52699: PUSH
52700: LD_INT 28
52702: PUSH
52703: LD_INT 26
52705: PUSH
52706: LD_INT 30
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 43
52717: PUSH
52718: LD_INT 44
52720: PUSH
52721: LD_INT 46
52723: PUSH
52724: LD_INT 45
52726: PUSH
52727: LD_INT 47
52729: PUSH
52730: LD_INT 49
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 12
52750: ARRAY
52751: ST_TO_ADDR
// list := list isect fac_list ;
52752: LD_ADDR_VAR 0 5
52756: PUSH
52757: LD_VAR 0 5
52761: PUSH
52762: LD_VAR 0 17
52766: ISECT
52767: ST_TO_ADDR
// if not list then
52768: LD_VAR 0 5
52772: NOT
52773: IFFALSE 52777
// exit ;
52775: GO 53581
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52777: LD_VAR 0 12
52781: PUSH
52782: LD_INT 3
52784: EQUAL
52785: PUSH
52786: LD_INT 49
52788: PUSH
52789: LD_VAR 0 5
52793: IN
52794: AND
52795: PUSH
52796: LD_INT 31
52798: PPUSH
52799: LD_VAR 0 16
52803: PPUSH
52804: CALL_OW 321
52808: PUSH
52809: LD_INT 2
52811: EQUAL
52812: AND
52813: IFFALSE 52873
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52815: LD_INT 22
52817: PUSH
52818: LD_VAR 0 16
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 35
52829: PUSH
52830: LD_INT 49
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 91
52839: PUSH
52840: LD_VAR 0 1
52844: PUSH
52845: LD_INT 10
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: PPUSH
52858: CALL_OW 69
52862: NOT
52863: IFFALSE 52873
// weapon := ru_time_lapser ;
52865: LD_ADDR_VAR 0 18
52869: PUSH
52870: LD_INT 49
52872: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52873: LD_VAR 0 12
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: IN
52888: PUSH
52889: LD_INT 11
52891: PUSH
52892: LD_VAR 0 5
52896: IN
52897: PUSH
52898: LD_INT 30
52900: PUSH
52901: LD_VAR 0 5
52905: IN
52906: OR
52907: AND
52908: PUSH
52909: LD_INT 6
52911: PPUSH
52912: LD_VAR 0 16
52916: PPUSH
52917: CALL_OW 321
52921: PUSH
52922: LD_INT 2
52924: EQUAL
52925: AND
52926: IFFALSE 53091
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52928: LD_INT 22
52930: PUSH
52931: LD_VAR 0 16
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 35
52945: PUSH
52946: LD_INT 11
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 35
52955: PUSH
52956: LD_INT 30
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 91
52970: PUSH
52971: LD_VAR 0 1
52975: PUSH
52976: LD_INT 18
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: PPUSH
52989: CALL_OW 69
52993: NOT
52994: PUSH
52995: LD_INT 22
52997: PUSH
52998: LD_VAR 0 16
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: LD_INT 30
53012: PUSH
53013: LD_INT 32
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 30
53022: PUSH
53023: LD_INT 33
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 91
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_INT 12
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: PPUSH
53059: CALL_OW 69
53063: PUSH
53064: LD_INT 2
53066: GREATER
53067: AND
53068: IFFALSE 53091
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53070: LD_ADDR_VAR 0 18
53074: PUSH
53075: LD_INT 11
53077: PUSH
53078: LD_INT 30
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_VAR 0 12
53089: ARRAY
53090: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53091: LD_VAR 0 18
53095: NOT
53096: PUSH
53097: LD_INT 40
53099: PPUSH
53100: LD_VAR 0 16
53104: PPUSH
53105: CALL_OW 321
53109: PUSH
53110: LD_INT 2
53112: EQUAL
53113: AND
53114: PUSH
53115: LD_INT 7
53117: PUSH
53118: LD_VAR 0 5
53122: IN
53123: PUSH
53124: LD_INT 28
53126: PUSH
53127: LD_VAR 0 5
53131: IN
53132: OR
53133: PUSH
53134: LD_INT 45
53136: PUSH
53137: LD_VAR 0 5
53141: IN
53142: OR
53143: AND
53144: IFFALSE 53398
// begin hex := GetHexInfo ( x , y ) ;
53146: LD_ADDR_VAR 0 4
53150: PUSH
53151: LD_VAR 0 10
53155: PPUSH
53156: LD_VAR 0 11
53160: PPUSH
53161: CALL_OW 546
53165: ST_TO_ADDR
// if hex [ 1 ] then
53166: LD_VAR 0 4
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: IFFALSE 53178
// exit ;
53176: GO 53581
// height := hex [ 2 ] ;
53178: LD_ADDR_VAR 0 15
53182: PUSH
53183: LD_VAR 0 4
53187: PUSH
53188: LD_INT 2
53190: ARRAY
53191: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53192: LD_ADDR_VAR 0 14
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: LD_INT 5
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// for i in tmp do
53215: LD_ADDR_VAR 0 8
53219: PUSH
53220: LD_VAR 0 14
53224: PUSH
53225: FOR_IN
53226: IFFALSE 53396
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53228: LD_ADDR_VAR 0 9
53232: PUSH
53233: LD_VAR 0 10
53237: PPUSH
53238: LD_VAR 0 8
53242: PPUSH
53243: LD_INT 5
53245: PPUSH
53246: CALL_OW 272
53250: PUSH
53251: LD_VAR 0 11
53255: PPUSH
53256: LD_VAR 0 8
53260: PPUSH
53261: LD_INT 5
53263: PPUSH
53264: CALL_OW 273
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53273: LD_VAR 0 9
53277: PUSH
53278: LD_INT 1
53280: ARRAY
53281: PPUSH
53282: LD_VAR 0 9
53286: PUSH
53287: LD_INT 2
53289: ARRAY
53290: PPUSH
53291: CALL_OW 488
53295: IFFALSE 53394
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53297: LD_ADDR_VAR 0 4
53301: PUSH
53302: LD_VAR 0 9
53306: PUSH
53307: LD_INT 1
53309: ARRAY
53310: PPUSH
53311: LD_VAR 0 9
53315: PUSH
53316: LD_INT 2
53318: ARRAY
53319: PPUSH
53320: CALL_OW 546
53324: ST_TO_ADDR
// if hex [ 1 ] then
53325: LD_VAR 0 4
53329: PUSH
53330: LD_INT 1
53332: ARRAY
53333: IFFALSE 53337
// continue ;
53335: GO 53225
// h := hex [ 2 ] ;
53337: LD_ADDR_VAR 0 13
53341: PUSH
53342: LD_VAR 0 4
53346: PUSH
53347: LD_INT 2
53349: ARRAY
53350: ST_TO_ADDR
// if h + 7 < height then
53351: LD_VAR 0 13
53355: PUSH
53356: LD_INT 7
53358: PLUS
53359: PUSH
53360: LD_VAR 0 15
53364: LESS
53365: IFFALSE 53394
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53367: LD_ADDR_VAR 0 18
53371: PUSH
53372: LD_INT 7
53374: PUSH
53375: LD_INT 28
53377: PUSH
53378: LD_INT 45
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: PUSH
53386: LD_VAR 0 12
53390: ARRAY
53391: ST_TO_ADDR
// break ;
53392: GO 53396
// end ; end ; end ;
53394: GO 53225
53396: POP
53397: POP
// end ; if not weapon then
53398: LD_VAR 0 18
53402: NOT
53403: IFFALSE 53463
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53405: LD_ADDR_VAR 0 5
53409: PUSH
53410: LD_VAR 0 5
53414: PUSH
53415: LD_INT 11
53417: PUSH
53418: LD_INT 30
53420: PUSH
53421: LD_INT 49
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: DIFF
53429: ST_TO_ADDR
// if not list then
53430: LD_VAR 0 5
53434: NOT
53435: IFFALSE 53439
// exit ;
53437: GO 53581
// weapon := list [ rand ( 1 , list ) ] ;
53439: LD_ADDR_VAR 0 18
53443: PUSH
53444: LD_VAR 0 5
53448: PUSH
53449: LD_INT 1
53451: PPUSH
53452: LD_VAR 0 5
53456: PPUSH
53457: CALL_OW 12
53461: ARRAY
53462: ST_TO_ADDR
// end ; if weapon then
53463: LD_VAR 0 18
53467: IFFALSE 53581
// begin tmp := CostOfWeapon ( weapon ) ;
53469: LD_ADDR_VAR 0 14
53473: PUSH
53474: LD_VAR 0 18
53478: PPUSH
53479: CALL_OW 451
53483: ST_TO_ADDR
// j := GetBase ( tower ) ;
53484: LD_ADDR_VAR 0 9
53488: PUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL_OW 274
53498: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53499: LD_VAR 0 9
53503: PPUSH
53504: LD_INT 1
53506: PPUSH
53507: CALL_OW 275
53511: PUSH
53512: LD_VAR 0 14
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: GREATEREQUAL
53521: PUSH
53522: LD_VAR 0 9
53526: PPUSH
53527: LD_INT 2
53529: PPUSH
53530: CALL_OW 275
53534: PUSH
53535: LD_VAR 0 14
53539: PUSH
53540: LD_INT 2
53542: ARRAY
53543: GREATEREQUAL
53544: AND
53545: PUSH
53546: LD_VAR 0 9
53550: PPUSH
53551: LD_INT 3
53553: PPUSH
53554: CALL_OW 275
53558: PUSH
53559: LD_VAR 0 14
53563: PUSH
53564: LD_INT 3
53566: ARRAY
53567: GREATEREQUAL
53568: AND
53569: IFFALSE 53581
// result := weapon ;
53571: LD_ADDR_VAR 0 3
53575: PUSH
53576: LD_VAR 0 18
53580: ST_TO_ADDR
// end ; end ;
53581: LD_VAR 0 3
53585: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53586: LD_INT 0
53588: PPUSH
53589: PPUSH
// result := true ;
53590: LD_ADDR_VAR 0 3
53594: PUSH
53595: LD_INT 1
53597: ST_TO_ADDR
// if array1 = array2 then
53598: LD_VAR 0 1
53602: PUSH
53603: LD_VAR 0 2
53607: EQUAL
53608: IFFALSE 53668
// begin for i = 1 to array1 do
53610: LD_ADDR_VAR 0 4
53614: PUSH
53615: DOUBLE
53616: LD_INT 1
53618: DEC
53619: ST_TO_ADDR
53620: LD_VAR 0 1
53624: PUSH
53625: FOR_TO
53626: IFFALSE 53664
// if array1 [ i ] <> array2 [ i ] then
53628: LD_VAR 0 1
53632: PUSH
53633: LD_VAR 0 4
53637: ARRAY
53638: PUSH
53639: LD_VAR 0 2
53643: PUSH
53644: LD_VAR 0 4
53648: ARRAY
53649: NONEQUAL
53650: IFFALSE 53662
// begin result := false ;
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_INT 0
53659: ST_TO_ADDR
// break ;
53660: GO 53664
// end ;
53662: GO 53625
53664: POP
53665: POP
// end else
53666: GO 53676
// result := false ;
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_INT 0
53675: ST_TO_ADDR
// end ;
53676: LD_VAR 0 3
53680: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53681: LD_INT 0
53683: PPUSH
53684: PPUSH
// if not array1 or not array2 then
53685: LD_VAR 0 1
53689: NOT
53690: PUSH
53691: LD_VAR 0 2
53695: NOT
53696: OR
53697: IFFALSE 53701
// exit ;
53699: GO 53765
// result := true ;
53701: LD_ADDR_VAR 0 3
53705: PUSH
53706: LD_INT 1
53708: ST_TO_ADDR
// for i = 1 to array1 do
53709: LD_ADDR_VAR 0 4
53713: PUSH
53714: DOUBLE
53715: LD_INT 1
53717: DEC
53718: ST_TO_ADDR
53719: LD_VAR 0 1
53723: PUSH
53724: FOR_TO
53725: IFFALSE 53763
// if array1 [ i ] <> array2 [ i ] then
53727: LD_VAR 0 1
53731: PUSH
53732: LD_VAR 0 4
53736: ARRAY
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: LD_VAR 0 4
53747: ARRAY
53748: NONEQUAL
53749: IFFALSE 53761
// begin result := false ;
53751: LD_ADDR_VAR 0 3
53755: PUSH
53756: LD_INT 0
53758: ST_TO_ADDR
// break ;
53759: GO 53763
// end ;
53761: GO 53724
53763: POP
53764: POP
// end ;
53765: LD_VAR 0 3
53769: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53770: LD_INT 0
53772: PPUSH
53773: PPUSH
53774: PPUSH
// pom := GetBase ( fac ) ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: LD_VAR 0 1
53784: PPUSH
53785: CALL_OW 274
53789: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53790: LD_ADDR_VAR 0 4
53794: PUSH
53795: LD_VAR 0 2
53799: PUSH
53800: LD_INT 1
53802: ARRAY
53803: PPUSH
53804: LD_VAR 0 2
53808: PUSH
53809: LD_INT 2
53811: ARRAY
53812: PPUSH
53813: LD_VAR 0 2
53817: PUSH
53818: LD_INT 3
53820: ARRAY
53821: PPUSH
53822: LD_VAR 0 2
53826: PUSH
53827: LD_INT 4
53829: ARRAY
53830: PPUSH
53831: CALL_OW 449
53835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53836: LD_ADDR_VAR 0 3
53840: PUSH
53841: LD_VAR 0 5
53845: PPUSH
53846: LD_INT 1
53848: PPUSH
53849: CALL_OW 275
53853: PUSH
53854: LD_VAR 0 4
53858: PUSH
53859: LD_INT 1
53861: ARRAY
53862: GREATEREQUAL
53863: PUSH
53864: LD_VAR 0 5
53868: PPUSH
53869: LD_INT 2
53871: PPUSH
53872: CALL_OW 275
53876: PUSH
53877: LD_VAR 0 4
53881: PUSH
53882: LD_INT 2
53884: ARRAY
53885: GREATEREQUAL
53886: AND
53887: PUSH
53888: LD_VAR 0 5
53892: PPUSH
53893: LD_INT 3
53895: PPUSH
53896: CALL_OW 275
53900: PUSH
53901: LD_VAR 0 4
53905: PUSH
53906: LD_INT 3
53908: ARRAY
53909: GREATEREQUAL
53910: AND
53911: ST_TO_ADDR
// end ;
53912: LD_VAR 0 3
53916: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53917: LD_INT 0
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
// pom := GetBase ( building ) ;
53923: LD_ADDR_VAR 0 3
53927: PUSH
53928: LD_VAR 0 1
53932: PPUSH
53933: CALL_OW 274
53937: ST_TO_ADDR
// if not pom then
53938: LD_VAR 0 3
53942: NOT
53943: IFFALSE 53947
// exit ;
53945: GO 54117
// btype := GetBType ( building ) ;
53947: LD_ADDR_VAR 0 5
53951: PUSH
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 266
53961: ST_TO_ADDR
// if btype = b_armoury then
53962: LD_VAR 0 5
53966: PUSH
53967: LD_INT 4
53969: EQUAL
53970: IFFALSE 53980
// btype := b_barracks ;
53972: LD_ADDR_VAR 0 5
53976: PUSH
53977: LD_INT 5
53979: ST_TO_ADDR
// if btype = b_depot then
53980: LD_VAR 0 5
53984: PUSH
53985: LD_INT 0
53987: EQUAL
53988: IFFALSE 53998
// btype := b_warehouse ;
53990: LD_ADDR_VAR 0 5
53994: PUSH
53995: LD_INT 1
53997: ST_TO_ADDR
// if btype = b_workshop then
53998: LD_VAR 0 5
54002: PUSH
54003: LD_INT 2
54005: EQUAL
54006: IFFALSE 54016
// btype := b_factory ;
54008: LD_ADDR_VAR 0 5
54012: PUSH
54013: LD_INT 3
54015: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54016: LD_ADDR_VAR 0 4
54020: PUSH
54021: LD_VAR 0 5
54025: PPUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: CALL_OW 248
54035: PPUSH
54036: CALL_OW 450
54040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54041: LD_ADDR_VAR 0 2
54045: PUSH
54046: LD_VAR 0 3
54050: PPUSH
54051: LD_INT 1
54053: PPUSH
54054: CALL_OW 275
54058: PUSH
54059: LD_VAR 0 4
54063: PUSH
54064: LD_INT 1
54066: ARRAY
54067: GREATEREQUAL
54068: PUSH
54069: LD_VAR 0 3
54073: PPUSH
54074: LD_INT 2
54076: PPUSH
54077: CALL_OW 275
54081: PUSH
54082: LD_VAR 0 4
54086: PUSH
54087: LD_INT 2
54089: ARRAY
54090: GREATEREQUAL
54091: AND
54092: PUSH
54093: LD_VAR 0 3
54097: PPUSH
54098: LD_INT 3
54100: PPUSH
54101: CALL_OW 275
54105: PUSH
54106: LD_VAR 0 4
54110: PUSH
54111: LD_INT 3
54113: ARRAY
54114: GREATEREQUAL
54115: AND
54116: ST_TO_ADDR
// end ;
54117: LD_VAR 0 2
54121: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54122: LD_INT 0
54124: PPUSH
54125: PPUSH
54126: PPUSH
// pom := GetBase ( building ) ;
54127: LD_ADDR_VAR 0 4
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: CALL_OW 274
54141: ST_TO_ADDR
// if not pom then
54142: LD_VAR 0 4
54146: NOT
54147: IFFALSE 54151
// exit ;
54149: GO 54252
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54151: LD_ADDR_VAR 0 5
54155: PUSH
54156: LD_VAR 0 2
54160: PPUSH
54161: LD_VAR 0 1
54165: PPUSH
54166: CALL_OW 248
54170: PPUSH
54171: CALL_OW 450
54175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_VAR 0 4
54185: PPUSH
54186: LD_INT 1
54188: PPUSH
54189: CALL_OW 275
54193: PUSH
54194: LD_VAR 0 5
54198: PUSH
54199: LD_INT 1
54201: ARRAY
54202: GREATEREQUAL
54203: PUSH
54204: LD_VAR 0 4
54208: PPUSH
54209: LD_INT 2
54211: PPUSH
54212: CALL_OW 275
54216: PUSH
54217: LD_VAR 0 5
54221: PUSH
54222: LD_INT 2
54224: ARRAY
54225: GREATEREQUAL
54226: AND
54227: PUSH
54228: LD_VAR 0 4
54232: PPUSH
54233: LD_INT 3
54235: PPUSH
54236: CALL_OW 275
54240: PUSH
54241: LD_VAR 0 5
54245: PUSH
54246: LD_INT 3
54248: ARRAY
54249: GREATEREQUAL
54250: AND
54251: ST_TO_ADDR
// end ;
54252: LD_VAR 0 3
54256: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54257: LD_INT 0
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
// result := false ;
54270: LD_ADDR_VAR 0 8
54274: PUSH
54275: LD_INT 0
54277: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54278: LD_VAR 0 5
54282: NOT
54283: PUSH
54284: LD_VAR 0 1
54288: NOT
54289: OR
54290: PUSH
54291: LD_VAR 0 2
54295: NOT
54296: OR
54297: PUSH
54298: LD_VAR 0 3
54302: NOT
54303: OR
54304: IFFALSE 54308
// exit ;
54306: GO 55122
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54308: LD_ADDR_VAR 0 14
54312: PUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: LD_VAR 0 2
54322: PPUSH
54323: LD_VAR 0 3
54327: PPUSH
54328: LD_VAR 0 4
54332: PPUSH
54333: LD_VAR 0 5
54337: PUSH
54338: LD_INT 1
54340: ARRAY
54341: PPUSH
54342: CALL_OW 248
54346: PPUSH
54347: LD_INT 0
54349: PPUSH
54350: CALL 56375 0 6
54354: ST_TO_ADDR
// if not hexes then
54355: LD_VAR 0 14
54359: NOT
54360: IFFALSE 54364
// exit ;
54362: GO 55122
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54364: LD_ADDR_VAR 0 17
54368: PUSH
54369: LD_VAR 0 5
54373: PPUSH
54374: LD_INT 22
54376: PUSH
54377: LD_VAR 0 13
54381: PPUSH
54382: CALL_OW 255
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 30
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 30
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PPUSH
54423: CALL_OW 72
54427: ST_TO_ADDR
// for i = 1 to hexes do
54428: LD_ADDR_VAR 0 9
54432: PUSH
54433: DOUBLE
54434: LD_INT 1
54436: DEC
54437: ST_TO_ADDR
54438: LD_VAR 0 14
54442: PUSH
54443: FOR_TO
54444: IFFALSE 55120
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54446: LD_ADDR_VAR 0 13
54450: PUSH
54451: LD_VAR 0 14
54455: PUSH
54456: LD_VAR 0 9
54460: ARRAY
54461: PUSH
54462: LD_INT 1
54464: ARRAY
54465: PPUSH
54466: LD_VAR 0 14
54470: PUSH
54471: LD_VAR 0 9
54475: ARRAY
54476: PUSH
54477: LD_INT 2
54479: ARRAY
54480: PPUSH
54481: CALL_OW 428
54485: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54486: LD_VAR 0 14
54490: PUSH
54491: LD_VAR 0 9
54495: ARRAY
54496: PUSH
54497: LD_INT 1
54499: ARRAY
54500: PPUSH
54501: LD_VAR 0 14
54505: PUSH
54506: LD_VAR 0 9
54510: ARRAY
54511: PUSH
54512: LD_INT 2
54514: ARRAY
54515: PPUSH
54516: CALL_OW 351
54520: PUSH
54521: LD_VAR 0 14
54525: PUSH
54526: LD_VAR 0 9
54530: ARRAY
54531: PUSH
54532: LD_INT 1
54534: ARRAY
54535: PPUSH
54536: LD_VAR 0 14
54540: PUSH
54541: LD_VAR 0 9
54545: ARRAY
54546: PUSH
54547: LD_INT 2
54549: ARRAY
54550: PPUSH
54551: CALL_OW 488
54555: NOT
54556: OR
54557: PUSH
54558: LD_VAR 0 13
54562: PPUSH
54563: CALL_OW 247
54567: PUSH
54568: LD_INT 3
54570: EQUAL
54571: OR
54572: IFFALSE 54578
// exit ;
54574: POP
54575: POP
54576: GO 55122
// if not tmp then
54578: LD_VAR 0 13
54582: NOT
54583: IFFALSE 54587
// continue ;
54585: GO 54443
// result := true ;
54587: LD_ADDR_VAR 0 8
54591: PUSH
54592: LD_INT 1
54594: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54595: LD_VAR 0 6
54599: PUSH
54600: LD_VAR 0 13
54604: PPUSH
54605: CALL_OW 247
54609: PUSH
54610: LD_INT 2
54612: EQUAL
54613: AND
54614: PUSH
54615: LD_VAR 0 13
54619: PPUSH
54620: CALL_OW 263
54624: PUSH
54625: LD_INT 1
54627: EQUAL
54628: AND
54629: IFFALSE 54793
// begin if IsDrivenBy ( tmp ) then
54631: LD_VAR 0 13
54635: PPUSH
54636: CALL_OW 311
54640: IFFALSE 54644
// continue ;
54642: GO 54443
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54644: LD_VAR 0 6
54648: PPUSH
54649: LD_INT 3
54651: PUSH
54652: LD_INT 60
54654: PUSH
54655: EMPTY
54656: LIST
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 55
54667: PUSH
54668: EMPTY
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PPUSH
54679: CALL_OW 72
54683: IFFALSE 54791
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54685: LD_ADDR_VAR 0 18
54689: PUSH
54690: LD_VAR 0 6
54694: PPUSH
54695: LD_INT 3
54697: PUSH
54698: LD_INT 60
54700: PUSH
54701: EMPTY
54702: LIST
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: LD_INT 55
54713: PUSH
54714: EMPTY
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PPUSH
54725: CALL_OW 72
54729: PUSH
54730: LD_INT 1
54732: ARRAY
54733: ST_TO_ADDR
// if IsInUnit ( driver ) then
54734: LD_VAR 0 18
54738: PPUSH
54739: CALL_OW 310
54743: IFFALSE 54754
// ComExit ( driver ) ;
54745: LD_VAR 0 18
54749: PPUSH
54750: CALL 80167 0 1
// AddComEnterUnit ( driver , tmp ) ;
54754: LD_VAR 0 18
54758: PPUSH
54759: LD_VAR 0 13
54763: PPUSH
54764: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54768: LD_VAR 0 18
54772: PPUSH
54773: LD_VAR 0 7
54777: PPUSH
54778: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54782: LD_VAR 0 18
54786: PPUSH
54787: CALL_OW 181
// end ; continue ;
54791: GO 54443
// end ; if not cleaners or not tmp in cleaners then
54793: LD_VAR 0 6
54797: NOT
54798: PUSH
54799: LD_VAR 0 13
54803: PUSH
54804: LD_VAR 0 6
54808: IN
54809: NOT
54810: OR
54811: IFFALSE 55118
// begin if dep then
54813: LD_VAR 0 17
54817: IFFALSE 54953
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54819: LD_ADDR_VAR 0 16
54823: PUSH
54824: LD_VAR 0 17
54828: PUSH
54829: LD_INT 1
54831: ARRAY
54832: PPUSH
54833: CALL_OW 250
54837: PPUSH
54838: LD_VAR 0 17
54842: PUSH
54843: LD_INT 1
54845: ARRAY
54846: PPUSH
54847: CALL_OW 254
54851: PPUSH
54852: LD_INT 5
54854: PPUSH
54855: CALL_OW 272
54859: PUSH
54860: LD_VAR 0 17
54864: PUSH
54865: LD_INT 1
54867: ARRAY
54868: PPUSH
54869: CALL_OW 251
54873: PPUSH
54874: LD_VAR 0 17
54878: PUSH
54879: LD_INT 1
54881: ARRAY
54882: PPUSH
54883: CALL_OW 254
54887: PPUSH
54888: LD_INT 5
54890: PPUSH
54891: CALL_OW 273
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54900: LD_VAR 0 16
54904: PUSH
54905: LD_INT 1
54907: ARRAY
54908: PPUSH
54909: LD_VAR 0 16
54913: PUSH
54914: LD_INT 2
54916: ARRAY
54917: PPUSH
54918: CALL_OW 488
54922: IFFALSE 54953
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54924: LD_VAR 0 13
54928: PPUSH
54929: LD_VAR 0 16
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_VAR 0 16
54942: PUSH
54943: LD_INT 2
54945: ARRAY
54946: PPUSH
54947: CALL_OW 111
// continue ;
54951: GO 54443
// end ; end ; r := GetDir ( tmp ) ;
54953: LD_ADDR_VAR 0 15
54957: PUSH
54958: LD_VAR 0 13
54962: PPUSH
54963: CALL_OW 254
54967: ST_TO_ADDR
// if r = 5 then
54968: LD_VAR 0 15
54972: PUSH
54973: LD_INT 5
54975: EQUAL
54976: IFFALSE 54986
// r := 0 ;
54978: LD_ADDR_VAR 0 15
54982: PUSH
54983: LD_INT 0
54985: ST_TO_ADDR
// for j = r to 5 do
54986: LD_ADDR_VAR 0 10
54990: PUSH
54991: DOUBLE
54992: LD_VAR 0 15
54996: DEC
54997: ST_TO_ADDR
54998: LD_INT 5
55000: PUSH
55001: FOR_TO
55002: IFFALSE 55116
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55004: LD_ADDR_VAR 0 11
55008: PUSH
55009: LD_VAR 0 13
55013: PPUSH
55014: CALL_OW 250
55018: PPUSH
55019: LD_VAR 0 10
55023: PPUSH
55024: LD_INT 2
55026: PPUSH
55027: CALL_OW 272
55031: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55032: LD_ADDR_VAR 0 12
55036: PUSH
55037: LD_VAR 0 13
55041: PPUSH
55042: CALL_OW 251
55046: PPUSH
55047: LD_VAR 0 10
55051: PPUSH
55052: LD_INT 2
55054: PPUSH
55055: CALL_OW 273
55059: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55060: LD_VAR 0 11
55064: PPUSH
55065: LD_VAR 0 12
55069: PPUSH
55070: CALL_OW 488
55074: PUSH
55075: LD_VAR 0 11
55079: PPUSH
55080: LD_VAR 0 12
55084: PPUSH
55085: CALL_OW 428
55089: NOT
55090: AND
55091: IFFALSE 55114
// begin ComMoveXY ( tmp , _x , _y ) ;
55093: LD_VAR 0 13
55097: PPUSH
55098: LD_VAR 0 11
55102: PPUSH
55103: LD_VAR 0 12
55107: PPUSH
55108: CALL_OW 111
// break ;
55112: GO 55116
// end ; end ;
55114: GO 55001
55116: POP
55117: POP
// end ; end ;
55118: GO 54443
55120: POP
55121: POP
// end ;
55122: LD_VAR 0 8
55126: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55127: LD_INT 0
55129: PPUSH
// result := true ;
55130: LD_ADDR_VAR 0 3
55134: PUSH
55135: LD_INT 1
55137: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55138: LD_VAR 0 2
55142: PUSH
55143: LD_INT 24
55145: DOUBLE
55146: EQUAL
55147: IFTRUE 55157
55149: LD_INT 33
55151: DOUBLE
55152: EQUAL
55153: IFTRUE 55157
55155: GO 55182
55157: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55158: LD_ADDR_VAR 0 3
55162: PUSH
55163: LD_INT 32
55165: PPUSH
55166: LD_VAR 0 1
55170: PPUSH
55171: CALL_OW 321
55175: PUSH
55176: LD_INT 2
55178: EQUAL
55179: ST_TO_ADDR
55180: GO 55498
55182: LD_INT 20
55184: DOUBLE
55185: EQUAL
55186: IFTRUE 55190
55188: GO 55215
55190: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55191: LD_ADDR_VAR 0 3
55195: PUSH
55196: LD_INT 6
55198: PPUSH
55199: LD_VAR 0 1
55203: PPUSH
55204: CALL_OW 321
55208: PUSH
55209: LD_INT 2
55211: EQUAL
55212: ST_TO_ADDR
55213: GO 55498
55215: LD_INT 22
55217: DOUBLE
55218: EQUAL
55219: IFTRUE 55229
55221: LD_INT 36
55223: DOUBLE
55224: EQUAL
55225: IFTRUE 55229
55227: GO 55254
55229: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55230: LD_ADDR_VAR 0 3
55234: PUSH
55235: LD_INT 15
55237: PPUSH
55238: LD_VAR 0 1
55242: PPUSH
55243: CALL_OW 321
55247: PUSH
55248: LD_INT 2
55250: EQUAL
55251: ST_TO_ADDR
55252: GO 55498
55254: LD_INT 30
55256: DOUBLE
55257: EQUAL
55258: IFTRUE 55262
55260: GO 55287
55262: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55263: LD_ADDR_VAR 0 3
55267: PUSH
55268: LD_INT 20
55270: PPUSH
55271: LD_VAR 0 1
55275: PPUSH
55276: CALL_OW 321
55280: PUSH
55281: LD_INT 2
55283: EQUAL
55284: ST_TO_ADDR
55285: GO 55498
55287: LD_INT 28
55289: DOUBLE
55290: EQUAL
55291: IFTRUE 55301
55293: LD_INT 21
55295: DOUBLE
55296: EQUAL
55297: IFTRUE 55301
55299: GO 55326
55301: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55302: LD_ADDR_VAR 0 3
55306: PUSH
55307: LD_INT 21
55309: PPUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 321
55319: PUSH
55320: LD_INT 2
55322: EQUAL
55323: ST_TO_ADDR
55324: GO 55498
55326: LD_INT 16
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55334
55332: GO 55359
55334: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55335: LD_ADDR_VAR 0 3
55339: PUSH
55340: LD_INT 84
55342: PPUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: CALL_OW 321
55352: PUSH
55353: LD_INT 2
55355: EQUAL
55356: ST_TO_ADDR
55357: GO 55498
55359: LD_INT 19
55361: DOUBLE
55362: EQUAL
55363: IFTRUE 55373
55365: LD_INT 23
55367: DOUBLE
55368: EQUAL
55369: IFTRUE 55373
55371: GO 55398
55373: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55374: LD_ADDR_VAR 0 3
55378: PUSH
55379: LD_INT 83
55381: PPUSH
55382: LD_VAR 0 1
55386: PPUSH
55387: CALL_OW 321
55391: PUSH
55392: LD_INT 2
55394: EQUAL
55395: ST_TO_ADDR
55396: GO 55498
55398: LD_INT 17
55400: DOUBLE
55401: EQUAL
55402: IFTRUE 55406
55404: GO 55431
55406: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55407: LD_ADDR_VAR 0 3
55411: PUSH
55412: LD_INT 39
55414: PPUSH
55415: LD_VAR 0 1
55419: PPUSH
55420: CALL_OW 321
55424: PUSH
55425: LD_INT 2
55427: EQUAL
55428: ST_TO_ADDR
55429: GO 55498
55431: LD_INT 18
55433: DOUBLE
55434: EQUAL
55435: IFTRUE 55439
55437: GO 55464
55439: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55440: LD_ADDR_VAR 0 3
55444: PUSH
55445: LD_INT 40
55447: PPUSH
55448: LD_VAR 0 1
55452: PPUSH
55453: CALL_OW 321
55457: PUSH
55458: LD_INT 2
55460: EQUAL
55461: ST_TO_ADDR
55462: GO 55498
55464: LD_INT 27
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55472
55470: GO 55497
55472: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55473: LD_ADDR_VAR 0 3
55477: PUSH
55478: LD_INT 35
55480: PPUSH
55481: LD_VAR 0 1
55485: PPUSH
55486: CALL_OW 321
55490: PUSH
55491: LD_INT 2
55493: EQUAL
55494: ST_TO_ADDR
55495: GO 55498
55497: POP
// end ;
55498: LD_VAR 0 3
55502: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55503: LD_INT 0
55505: PPUSH
55506: PPUSH
55507: PPUSH
55508: PPUSH
55509: PPUSH
55510: PPUSH
55511: PPUSH
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
// result := false ;
55516: LD_ADDR_VAR 0 6
55520: PUSH
55521: LD_INT 0
55523: ST_TO_ADDR
// if btype = b_depot then
55524: LD_VAR 0 2
55528: PUSH
55529: LD_INT 0
55531: EQUAL
55532: IFFALSE 55544
// begin result := true ;
55534: LD_ADDR_VAR 0 6
55538: PUSH
55539: LD_INT 1
55541: ST_TO_ADDR
// exit ;
55542: GO 56370
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55544: LD_VAR 0 1
55548: NOT
55549: PUSH
55550: LD_VAR 0 1
55554: PPUSH
55555: CALL_OW 266
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: IN
55570: NOT
55571: OR
55572: PUSH
55573: LD_VAR 0 2
55577: NOT
55578: OR
55579: PUSH
55580: LD_VAR 0 5
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: LD_INT 4
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: IN
55611: NOT
55612: OR
55613: PUSH
55614: LD_VAR 0 3
55618: PPUSH
55619: LD_VAR 0 4
55623: PPUSH
55624: CALL_OW 488
55628: NOT
55629: OR
55630: IFFALSE 55634
// exit ;
55632: GO 56370
// side := GetSide ( depot ) ;
55634: LD_ADDR_VAR 0 9
55638: PUSH
55639: LD_VAR 0 1
55643: PPUSH
55644: CALL_OW 255
55648: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55649: LD_VAR 0 9
55653: PPUSH
55654: LD_VAR 0 2
55658: PPUSH
55659: CALL 55127 0 2
55663: NOT
55664: IFFALSE 55668
// exit ;
55666: GO 56370
// pom := GetBase ( depot ) ;
55668: LD_ADDR_VAR 0 10
55672: PUSH
55673: LD_VAR 0 1
55677: PPUSH
55678: CALL_OW 274
55682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55683: LD_ADDR_VAR 0 11
55687: PUSH
55688: LD_VAR 0 2
55692: PPUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 248
55702: PPUSH
55703: CALL_OW 450
55707: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55708: LD_VAR 0 10
55712: PPUSH
55713: LD_INT 1
55715: PPUSH
55716: CALL_OW 275
55720: PUSH
55721: LD_VAR 0 11
55725: PUSH
55726: LD_INT 1
55728: ARRAY
55729: GREATEREQUAL
55730: PUSH
55731: LD_VAR 0 10
55735: PPUSH
55736: LD_INT 2
55738: PPUSH
55739: CALL_OW 275
55743: PUSH
55744: LD_VAR 0 11
55748: PUSH
55749: LD_INT 2
55751: ARRAY
55752: GREATEREQUAL
55753: AND
55754: PUSH
55755: LD_VAR 0 10
55759: PPUSH
55760: LD_INT 3
55762: PPUSH
55763: CALL_OW 275
55767: PUSH
55768: LD_VAR 0 11
55772: PUSH
55773: LD_INT 3
55775: ARRAY
55776: GREATEREQUAL
55777: AND
55778: NOT
55779: IFFALSE 55783
// exit ;
55781: GO 56370
// if GetBType ( depot ) = b_depot then
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 266
55792: PUSH
55793: LD_INT 0
55795: EQUAL
55796: IFFALSE 55808
// dist := 28 else
55798: LD_ADDR_VAR 0 14
55802: PUSH
55803: LD_INT 28
55805: ST_TO_ADDR
55806: GO 55816
// dist := 36 ;
55808: LD_ADDR_VAR 0 14
55812: PUSH
55813: LD_INT 36
55815: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55816: LD_VAR 0 1
55820: PPUSH
55821: LD_VAR 0 3
55825: PPUSH
55826: LD_VAR 0 4
55830: PPUSH
55831: CALL_OW 297
55835: PUSH
55836: LD_VAR 0 14
55840: GREATER
55841: IFFALSE 55845
// exit ;
55843: GO 56370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55845: LD_ADDR_VAR 0 12
55849: PUSH
55850: LD_VAR 0 2
55854: PPUSH
55855: LD_VAR 0 3
55859: PPUSH
55860: LD_VAR 0 4
55864: PPUSH
55865: LD_VAR 0 5
55869: PPUSH
55870: LD_VAR 0 1
55874: PPUSH
55875: CALL_OW 248
55879: PPUSH
55880: LD_INT 0
55882: PPUSH
55883: CALL 56375 0 6
55887: ST_TO_ADDR
// if not hexes then
55888: LD_VAR 0 12
55892: NOT
55893: IFFALSE 55897
// exit ;
55895: GO 56370
// hex := GetHexInfo ( x , y ) ;
55897: LD_ADDR_VAR 0 15
55901: PUSH
55902: LD_VAR 0 3
55906: PPUSH
55907: LD_VAR 0 4
55911: PPUSH
55912: CALL_OW 546
55916: ST_TO_ADDR
// if hex [ 1 ] then
55917: LD_VAR 0 15
55921: PUSH
55922: LD_INT 1
55924: ARRAY
55925: IFFALSE 55929
// exit ;
55927: GO 56370
// height := hex [ 2 ] ;
55929: LD_ADDR_VAR 0 13
55933: PUSH
55934: LD_VAR 0 15
55938: PUSH
55939: LD_INT 2
55941: ARRAY
55942: ST_TO_ADDR
// for i = 1 to hexes do
55943: LD_ADDR_VAR 0 7
55947: PUSH
55948: DOUBLE
55949: LD_INT 1
55951: DEC
55952: ST_TO_ADDR
55953: LD_VAR 0 12
55957: PUSH
55958: FOR_TO
55959: IFFALSE 56289
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55961: LD_VAR 0 12
55965: PUSH
55966: LD_VAR 0 7
55970: ARRAY
55971: PUSH
55972: LD_INT 1
55974: ARRAY
55975: PPUSH
55976: LD_VAR 0 12
55980: PUSH
55981: LD_VAR 0 7
55985: ARRAY
55986: PUSH
55987: LD_INT 2
55989: ARRAY
55990: PPUSH
55991: CALL_OW 488
55995: NOT
55996: PUSH
55997: LD_VAR 0 12
56001: PUSH
56002: LD_VAR 0 7
56006: ARRAY
56007: PUSH
56008: LD_INT 1
56010: ARRAY
56011: PPUSH
56012: LD_VAR 0 12
56016: PUSH
56017: LD_VAR 0 7
56021: ARRAY
56022: PUSH
56023: LD_INT 2
56025: ARRAY
56026: PPUSH
56027: CALL_OW 428
56031: PUSH
56032: LD_INT 0
56034: GREATER
56035: OR
56036: PUSH
56037: LD_VAR 0 12
56041: PUSH
56042: LD_VAR 0 7
56046: ARRAY
56047: PUSH
56048: LD_INT 1
56050: ARRAY
56051: PPUSH
56052: LD_VAR 0 12
56056: PUSH
56057: LD_VAR 0 7
56061: ARRAY
56062: PUSH
56063: LD_INT 2
56065: ARRAY
56066: PPUSH
56067: CALL_OW 351
56071: OR
56072: IFFALSE 56078
// exit ;
56074: POP
56075: POP
56076: GO 56370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56078: LD_ADDR_VAR 0 8
56082: PUSH
56083: LD_VAR 0 12
56087: PUSH
56088: LD_VAR 0 7
56092: ARRAY
56093: PUSH
56094: LD_INT 1
56096: ARRAY
56097: PPUSH
56098: LD_VAR 0 12
56102: PUSH
56103: LD_VAR 0 7
56107: ARRAY
56108: PUSH
56109: LD_INT 2
56111: ARRAY
56112: PPUSH
56113: CALL_OW 546
56117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56118: LD_VAR 0 8
56122: PUSH
56123: LD_INT 1
56125: ARRAY
56126: PUSH
56127: LD_VAR 0 8
56131: PUSH
56132: LD_INT 2
56134: ARRAY
56135: PUSH
56136: LD_VAR 0 13
56140: PUSH
56141: LD_INT 2
56143: PLUS
56144: GREATER
56145: OR
56146: PUSH
56147: LD_VAR 0 8
56151: PUSH
56152: LD_INT 2
56154: ARRAY
56155: PUSH
56156: LD_VAR 0 13
56160: PUSH
56161: LD_INT 2
56163: MINUS
56164: LESS
56165: OR
56166: PUSH
56167: LD_VAR 0 8
56171: PUSH
56172: LD_INT 3
56174: ARRAY
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 8
56181: PUSH
56182: LD_INT 9
56184: PUSH
56185: LD_INT 10
56187: PUSH
56188: LD_INT 11
56190: PUSH
56191: LD_INT 12
56193: PUSH
56194: LD_INT 13
56196: PUSH
56197: LD_INT 16
56199: PUSH
56200: LD_INT 17
56202: PUSH
56203: LD_INT 18
56205: PUSH
56206: LD_INT 19
56208: PUSH
56209: LD_INT 20
56211: PUSH
56212: LD_INT 21
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: IN
56230: NOT
56231: OR
56232: PUSH
56233: LD_VAR 0 8
56237: PUSH
56238: LD_INT 5
56240: ARRAY
56241: NOT
56242: OR
56243: PUSH
56244: LD_VAR 0 8
56248: PUSH
56249: LD_INT 6
56251: ARRAY
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 7
56261: PUSH
56262: LD_INT 9
56264: PUSH
56265: LD_INT 10
56267: PUSH
56268: LD_INT 11
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: IN
56279: NOT
56280: OR
56281: IFFALSE 56287
// exit ;
56283: POP
56284: POP
56285: GO 56370
// end ;
56287: GO 55958
56289: POP
56290: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56291: LD_VAR 0 9
56295: PPUSH
56296: LD_VAR 0 3
56300: PPUSH
56301: LD_VAR 0 4
56305: PPUSH
56306: LD_INT 20
56308: PPUSH
56309: CALL 48293 0 4
56313: PUSH
56314: LD_INT 4
56316: ARRAY
56317: IFFALSE 56321
// exit ;
56319: GO 56370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56321: LD_VAR 0 2
56325: PUSH
56326: LD_INT 29
56328: PUSH
56329: LD_INT 30
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: IN
56336: PUSH
56337: LD_VAR 0 3
56341: PPUSH
56342: LD_VAR 0 4
56346: PPUSH
56347: LD_VAR 0 9
56351: PPUSH
56352: CALL_OW 440
56356: NOT
56357: AND
56358: IFFALSE 56362
// exit ;
56360: GO 56370
// result := true ;
56362: LD_ADDR_VAR 0 6
56366: PUSH
56367: LD_INT 1
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 6
56374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56375: LD_INT 0
56377: PPUSH
56378: PPUSH
56379: PPUSH
56380: PPUSH
56381: PPUSH
56382: PPUSH
56383: PPUSH
56384: PPUSH
56385: PPUSH
56386: PPUSH
56387: PPUSH
56388: PPUSH
56389: PPUSH
56390: PPUSH
56391: PPUSH
56392: PPUSH
56393: PPUSH
56394: PPUSH
56395: PPUSH
56396: PPUSH
56397: PPUSH
56398: PPUSH
56399: PPUSH
56400: PPUSH
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
56409: PPUSH
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
56414: PPUSH
56415: PPUSH
56416: PPUSH
56417: PPUSH
56418: PPUSH
56419: PPUSH
56420: PPUSH
56421: PPUSH
56422: PPUSH
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
56428: PPUSH
56429: PPUSH
56430: PPUSH
56431: PPUSH
56432: PPUSH
56433: PPUSH
56434: PPUSH
// result = [ ] ;
56435: LD_ADDR_VAR 0 7
56439: PUSH
56440: EMPTY
56441: ST_TO_ADDR
// temp_list = [ ] ;
56442: LD_ADDR_VAR 0 9
56446: PUSH
56447: EMPTY
56448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56449: LD_VAR 0 4
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 4
56468: PUSH
56469: LD_INT 5
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: IN
56480: NOT
56481: PUSH
56482: LD_VAR 0 1
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: IN
56497: PUSH
56498: LD_VAR 0 5
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: IN
56517: NOT
56518: AND
56519: OR
56520: IFFALSE 56524
// exit ;
56522: GO 74915
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56524: LD_VAR 0 1
56528: PUSH
56529: LD_INT 6
56531: PUSH
56532: LD_INT 7
56534: PUSH
56535: LD_INT 8
56537: PUSH
56538: LD_INT 13
56540: PUSH
56541: LD_INT 12
56543: PUSH
56544: LD_INT 15
56546: PUSH
56547: LD_INT 11
56549: PUSH
56550: LD_INT 14
56552: PUSH
56553: LD_INT 10
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: IN
56567: IFFALSE 56577
// btype = b_lab ;
56569: LD_ADDR_VAR 0 1
56573: PUSH
56574: LD_INT 6
56576: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56577: LD_VAR 0 6
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: IN
56596: NOT
56597: PUSH
56598: LD_VAR 0 1
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 6
56617: PUSH
56618: LD_INT 36
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: LD_INT 31
56629: PUSH
56630: LD_INT 32
56632: PUSH
56633: LD_INT 33
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: IN
56649: NOT
56650: PUSH
56651: LD_VAR 0 6
56655: PUSH
56656: LD_INT 1
56658: EQUAL
56659: AND
56660: OR
56661: PUSH
56662: LD_VAR 0 1
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: IN
56677: NOT
56678: PUSH
56679: LD_VAR 0 6
56683: PUSH
56684: LD_INT 2
56686: EQUAL
56687: AND
56688: OR
56689: IFFALSE 56699
// mode = 0 ;
56691: LD_ADDR_VAR 0 6
56695: PUSH
56696: LD_INT 0
56698: ST_TO_ADDR
// case mode of 0 :
56699: LD_VAR 0 6
56703: PUSH
56704: LD_INT 0
56706: DOUBLE
56707: EQUAL
56708: IFTRUE 56712
56710: GO 68165
56712: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56713: LD_ADDR_VAR 0 11
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56906: LD_ADDR_VAR 0 12
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57102: LD_ADDR_VAR 0 13
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57301: LD_ADDR_VAR 0 14
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57497: LD_ADDR_VAR 0 15
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57690: LD_ADDR_VAR 0 16
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57883: LD_ADDR_VAR 0 17
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58113: LD_ADDR_VAR 0 18
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58343: LD_ADDR_VAR 0 19
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58573: LD_ADDR_VAR 0 20
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58803: LD_ADDR_VAR 0 21
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59033: LD_ADDR_VAR 0 22
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59263: LD_ADDR_VAR 0 23
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59543: LD_ADDR_VAR 0 24
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59819: LD_ADDR_VAR 0 25
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60093: LD_ADDR_VAR 0 26
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60369: LD_ADDR_VAR 0 27
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: NEG
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60649: LD_ADDR_VAR 0 28
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60931: LD_ADDR_VAR 0 29
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61210: LD_ADDR_VAR 0 30
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61488: LD_ADDR_VAR 0 31
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 2
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61766: LD_ADDR_VAR 0 32
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 2
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62044: LD_ADDR_VAR 0 33
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62323: LD_ADDR_VAR 0 34
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 2
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62603: LD_ADDR_VAR 0 35
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62715: LD_ADDR_VAR 0 36
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62827: LD_ADDR_VAR 0 37
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62939: LD_ADDR_VAR 0 38
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63051: LD_ADDR_VAR 0 39
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63163: LD_ADDR_VAR 0 40
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63275: LD_ADDR_VAR 0 41
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: LD_INT 3
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 3
63549: NEG
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 3
63572: NEG
63573: PUSH
63574: LD_INT 2
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: NEG
63585: PUSH
63586: LD_INT 3
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63625: LD_ADDR_VAR 0 42
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 3
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 3
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: LD_INT 3
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63975: LD_ADDR_VAR 0 43
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 3
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 3
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 3
64271: NEG
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64323: LD_ADDR_VAR 0 44
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 3
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 3
64597: NEG
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 3
64608: NEG
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 3
64620: NEG
64621: PUSH
64622: LD_INT 2
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 3
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64673: LD_ADDR_VAR 0 45
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: LD_INT 3
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 3
64970: NEG
64971: PUSH
64972: LD_INT 2
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: LD_INT 3
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65023: LD_ADDR_VAR 0 46
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65371: LD_ADDR_VAR 0 47
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 2
65498: NEG
65499: PUSH
65500: LD_INT 2
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65522: LD_ADDR_VAR 0 48
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65669: LD_ADDR_VAR 0 49
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65813: LD_ADDR_VAR 0 50
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65957: LD_ADDR_VAR 0 51
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66104: LD_ADDR_VAR 0 52
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: NEG
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66255: LD_ADDR_VAR 0 53
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 2
66431: NEG
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: LD_INT 2
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66485: LD_ADDR_VAR 0 54
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 2
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 2
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 2
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: PUSH
66631: LD_INT 2
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 2
66661: NEG
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66715: LD_ADDR_VAR 0 55
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 2
66891: NEG
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 2
66914: NEG
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66945: LD_ADDR_VAR 0 56
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: LD_INT 2
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67175: LD_ADDR_VAR 0 57
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 2
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 1
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67405: LD_ADDR_VAR 0 58
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 2
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 2
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67635: LD_ADDR_VAR 0 59
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67723: LD_ADDR_VAR 0 60
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: LD_INT 1
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: NEG
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67811: LD_ADDR_VAR 0 61
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67899: LD_ADDR_VAR 0 62
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67987: LD_ADDR_VAR 0 63
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: NEG
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68075: LD_ADDR_VAR 0 64
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 1
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: ST_TO_ADDR
// end ; 1 :
68163: GO 74060
68165: LD_INT 1
68167: DOUBLE
68168: EQUAL
68169: IFTRUE 68173
68171: GO 70796
68173: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68174: LD_ADDR_VAR 0 11
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68218: LD_ADDR_VAR 0 12
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 1
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: LIST
68258: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68259: LD_ADDR_VAR 0 13
68263: PUSH
68264: LD_INT 3
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 3
68276: PUSH
68277: LD_INT 3
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 2
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: LIST
68298: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68299: LD_ADDR_VAR 0 14
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: LD_INT 3
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68340: LD_ADDR_VAR 0 15
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: NEG
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68384: LD_ADDR_VAR 0 16
68388: PUSH
68389: LD_INT 2
68391: NEG
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: LD_INT 2
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: LIST
68429: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68430: LD_ADDR_VAR 0 17
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: LD_INT 3
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68474: LD_ADDR_VAR 0 18
68478: PUSH
68479: LD_INT 2
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 3
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68515: LD_ADDR_VAR 0 19
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 3
68532: PUSH
68533: LD_INT 3
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68555: LD_ADDR_VAR 0 20
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 3
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68596: LD_ADDR_VAR 0 21
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 3
68625: NEG
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68640: LD_ADDR_VAR 0 22
68644: PUSH
68645: LD_INT 2
68647: NEG
68648: PUSH
68649: LD_INT 3
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: LD_INT 3
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68686: LD_ADDR_VAR 0 23
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 1
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68730: LD_ADDR_VAR 0 24
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 4
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68771: LD_ADDR_VAR 0 25
68775: PUSH
68776: LD_INT 3
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 4
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 3
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68811: LD_ADDR_VAR 0 26
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: LD_INT 3
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: LIST
68851: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68852: LD_ADDR_VAR 0 27
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 3
68870: NEG
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 4
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68896: LD_ADDR_VAR 0 28
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 3
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68942: LD_ADDR_VAR 0 29
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 3
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 1
68983: NEG
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 4
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: NEG
69018: PUSH
69019: LD_INT 5
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: LD_INT 5
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: LD_INT 4
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: LD_INT 6
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 6
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: LD_INT 5
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69097: LD_ADDR_VAR 0 30
69101: PUSH
69102: LD_INT 2
69104: PUSH
69105: LD_INT 1
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 3
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: LD_INT 1
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: LD_INT 1
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: LD_INT 1
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 4
69166: PUSH
69167: LD_INT 1
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 5
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 5
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 6
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 6
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69240: LD_ADDR_VAR 0 31
69244: PUSH
69245: LD_INT 3
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: LD_INT 3
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: LD_INT 3
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 4
69277: PUSH
69278: LD_INT 3
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 4
69287: PUSH
69288: LD_INT 4
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 3
69297: PUSH
69298: LD_INT 4
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 5
69307: PUSH
69308: LD_INT 4
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 5
69317: PUSH
69318: LD_INT 5
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 4
69327: PUSH
69328: LD_INT 5
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 6
69337: PUSH
69338: LD_INT 5
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 6
69347: PUSH
69348: LD_INT 6
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 5
69357: PUSH
69358: LD_INT 6
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69379: LD_ADDR_VAR 0 32
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: LD_INT 3
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: LD_INT 3
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 4
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: LD_INT 4
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: NEG
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 5
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: LD_INT 5
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: PUSH
69470: LD_INT 4
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 1
69479: PUSH
69480: LD_INT 6
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 6
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 5
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69522: LD_ADDR_VAR 0 33
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: LD_INT 1
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 3
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 4
69597: NEG
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 5
69608: NEG
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 5
69619: NEG
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 5
69631: NEG
69632: PUSH
69633: LD_INT 1
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 6
69642: NEG
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 6
69653: NEG
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69677: LD_ADDR_VAR 0 34
69681: PUSH
69682: LD_INT 2
69684: NEG
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: LD_INT 2
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 3
69720: NEG
69721: PUSH
69722: LD_INT 4
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: NEG
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 4
69744: NEG
69745: PUSH
69746: LD_INT 4
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 4
69756: NEG
69757: PUSH
69758: LD_INT 5
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 5
69768: NEG
69769: PUSH
69770: LD_INT 4
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 5
69780: NEG
69781: PUSH
69782: LD_INT 5
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 5
69792: NEG
69793: PUSH
69794: LD_INT 6
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 6
69804: NEG
69805: PUSH
69806: LD_INT 5
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 6
69816: NEG
69817: PUSH
69818: LD_INT 6
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69840: LD_ADDR_VAR 0 41
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 2
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 3
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: PUSH
69871: LD_INT 2
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69884: LD_ADDR_VAR 0 42
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 2
69901: PUSH
69902: LD_INT 1
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69925: LD_ADDR_VAR 0 43
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: LD_INT 2
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: PUSH
69953: LD_INT 3
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: LIST
69964: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69965: LD_ADDR_VAR 0 44
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 1
69982: PUSH
69983: LD_INT 3
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: LD_INT 2
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: LIST
70005: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70006: LD_ADDR_VAR 0 45
70010: PUSH
70011: LD_INT 2
70013: NEG
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 3
70035: NEG
70036: PUSH
70037: LD_INT 1
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: LIST
70049: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70050: LD_ADDR_VAR 0 46
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 2
70069: NEG
70070: PUSH
70071: LD_INT 3
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 3
70081: NEG
70082: PUSH
70083: LD_INT 2
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: LIST
70095: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70096: LD_ADDR_VAR 0 47
70100: PUSH
70101: LD_INT 2
70103: NEG
70104: PUSH
70105: LD_INT 3
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 1
70115: NEG
70116: PUSH
70117: LD_INT 3
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70129: LD_ADDR_VAR 0 48
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: LD_INT 1
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70160: LD_ADDR_VAR 0 49
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70189: LD_ADDR_VAR 0 50
70193: PUSH
70194: LD_INT 2
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: LD_INT 3
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70218: LD_ADDR_VAR 0 51
70222: PUSH
70223: LD_INT 1
70225: NEG
70226: PUSH
70227: LD_INT 2
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: NEG
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70249: LD_ADDR_VAR 0 52
70253: PUSH
70254: LD_INT 3
70256: NEG
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 3
70268: NEG
70269: PUSH
70270: LD_INT 2
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70282: LD_ADDR_VAR 0 53
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 3
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 1
70312: PUSH
70313: LD_INT 2
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: LIST
70325: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70326: LD_ADDR_VAR 0 54
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70367: LD_ADDR_VAR 0 55
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 2
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70407: LD_ADDR_VAR 0 56
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 3
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 3
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: LIST
70447: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70448: LD_ADDR_VAR 0 57
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 3
70466: NEG
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 3
70477: NEG
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70492: LD_ADDR_VAR 0 58
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: LD_INT 3
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 3
70511: NEG
70512: PUSH
70513: LD_INT 2
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 3
70523: NEG
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: LIST
70537: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70538: LD_ADDR_VAR 0 59
70542: PUSH
70543: LD_INT 1
70545: NEG
70546: PUSH
70547: LD_INT 2
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 2
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: LIST
70581: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70582: LD_ADDR_VAR 0 60
70586: PUSH
70587: LD_INT 1
70589: PUSH
70590: LD_INT 1
70592: NEG
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 2
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 2
70610: PUSH
70611: LD_INT 1
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70623: LD_ADDR_VAR 0 61
70627: PUSH
70628: LD_INT 2
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 2
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: LD_INT 2
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70663: LD_ADDR_VAR 0 62
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 2
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 1
70690: NEG
70691: PUSH
70692: LD_INT 1
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70704: LD_ADDR_VAR 0 63
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 2
70722: NEG
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 1
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: LIST
70747: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70748: LD_ADDR_VAR 0 64
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 2
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 2
70767: NEG
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 2
70779: NEG
70780: PUSH
70781: LD_INT 2
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: LIST
70793: ST_TO_ADDR
// end ; 2 :
70794: GO 74060
70796: LD_INT 2
70798: DOUBLE
70799: EQUAL
70800: IFTRUE 70804
70802: GO 74059
70804: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70805: LD_ADDR_VAR 0 29
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 4
70822: PUSH
70823: LD_INT 1
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 5
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 5
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 4
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 3
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 3
70884: PUSH
70885: LD_INT 2
70887: NEG
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 5
70895: PUSH
70896: LD_INT 2
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 3
70905: PUSH
70906: LD_INT 3
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 4
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 2
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 2
70965: PUSH
70966: LD_INT 2
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 4
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 2
70985: PUSH
70986: LD_INT 4
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 4
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: LD_INT 4
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: LD_INT 5
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: LD_INT 5
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 1
71045: NEG
71046: PUSH
71047: LD_INT 4
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: LD_INT 3
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: LD_INT 5
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: NEG
71078: PUSH
71079: LD_INT 3
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: NEG
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 3
71099: NEG
71100: PUSH
71101: LD_INT 1
71103: NEG
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 2
71111: NEG
71112: PUSH
71113: LD_INT 0
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 2
71122: NEG
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 3
71133: NEG
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 4
71144: NEG
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 4
71155: NEG
71156: PUSH
71157: LD_INT 1
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 4
71167: NEG
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 2
71179: NEG
71180: PUSH
71181: LD_INT 2
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 4
71190: NEG
71191: PUSH
71192: LD_INT 4
71194: NEG
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: LD_INT 5
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 3
71214: NEG
71215: PUSH
71216: LD_INT 4
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: LD_INT 3
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: LD_INT 3
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 5
71250: NEG
71251: PUSH
71252: LD_INT 4
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 5
71262: NEG
71263: PUSH
71264: LD_INT 5
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 3
71274: NEG
71275: PUSH
71276: LD_INT 5
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 5
71286: NEG
71287: PUSH
71288: LD_INT 3
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71343: LD_ADDR_VAR 0 30
71347: PUSH
71348: LD_INT 4
71350: PUSH
71351: LD_INT 4
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 4
71360: PUSH
71361: LD_INT 3
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 5
71370: PUSH
71371: LD_INT 4
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 5
71380: PUSH
71381: LD_INT 5
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: PUSH
71391: LD_INT 5
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: LD_INT 4
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: LD_INT 3
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 5
71420: PUSH
71421: LD_INT 3
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: LD_INT 5
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: LD_INT 3
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_INT 2
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: LD_INT 4
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 4
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 1
71490: NEG
71491: PUSH
71492: LD_INT 3
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 1
71501: NEG
71502: PUSH
71503: LD_INT 2
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 2
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 2
71522: NEG
71523: PUSH
71524: LD_INT 2
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 4
71533: NEG
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 4
71544: NEG
71545: PUSH
71546: LD_INT 1
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: NEG
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 3
71567: NEG
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 4
71578: NEG
71579: PUSH
71580: LD_INT 1
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 5
71589: NEG
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 5
71600: NEG
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 5
71612: NEG
71613: PUSH
71614: LD_INT 2
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 3
71624: NEG
71625: PUSH
71626: LD_INT 2
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 3
71635: NEG
71636: PUSH
71637: LD_INT 3
71639: NEG
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 3
71647: NEG
71648: PUSH
71649: LD_INT 4
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 2
71659: NEG
71660: PUSH
71661: LD_INT 3
71663: NEG
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 2
71671: NEG
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: NEG
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 4
71695: NEG
71696: PUSH
71697: LD_INT 3
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 4
71707: NEG
71708: PUSH
71709: LD_INT 4
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: LD_INT 4
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 4
71731: NEG
71732: PUSH
71733: LD_INT 2
71735: NEG
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 0
71743: PUSH
71744: LD_INT 4
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 5
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 1
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 1
71798: NEG
71799: PUSH
71800: LD_INT 4
71802: NEG
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 1
71810: NEG
71811: PUSH
71812: LD_INT 5
71814: NEG
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 2
71822: PUSH
71823: LD_INT 3
71825: NEG
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 2
71833: NEG
71834: PUSH
71835: LD_INT 5
71837: NEG
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71890: LD_ADDR_VAR 0 31
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 4
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 1
71917: PUSH
71918: LD_INT 4
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: PUSH
71928: LD_INT 5
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: LD_INT 5
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 1
71947: NEG
71948: PUSH
71949: LD_INT 4
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 1
71958: NEG
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 2
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 2
71979: NEG
71980: PUSH
71981: LD_INT 3
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 3
71990: NEG
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 3
72001: NEG
72002: PUSH
72003: LD_INT 1
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 2
72013: NEG
72014: PUSH
72015: LD_INT 0
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: NEG
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 3
72035: NEG
72036: PUSH
72037: LD_INT 1
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 4
72046: NEG
72047: PUSH
72048: LD_INT 0
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: LD_INT 1
72061: NEG
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 4
72069: NEG
72070: PUSH
72071: LD_INT 2
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: NEG
72082: PUSH
72083: LD_INT 2
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 4
72092: NEG
72093: PUSH
72094: LD_INT 4
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 4
72104: NEG
72105: PUSH
72106: LD_INT 5
72108: NEG
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 3
72116: NEG
72117: PUSH
72118: LD_INT 4
72120: NEG
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 3
72128: NEG
72129: PUSH
72130: LD_INT 3
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 4
72140: NEG
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 5
72152: NEG
72153: PUSH
72154: LD_INT 4
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 5
72164: NEG
72165: PUSH
72166: LD_INT 5
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 3
72176: NEG
72177: PUSH
72178: LD_INT 5
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 5
72188: NEG
72189: PUSH
72190: LD_INT 3
72192: NEG
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: LD_INT 3
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: LD_INT 4
72214: NEG
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 1
72222: PUSH
72223: LD_INT 3
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: LD_INT 2
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: LD_INT 2
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: LD_INT 3
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: NEG
72268: PUSH
72269: LD_INT 4
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 2
72279: PUSH
72280: LD_INT 2
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 2
72290: NEG
72291: PUSH
72292: LD_INT 4
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 4
72312: PUSH
72313: LD_INT 1
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 5
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 5
72333: PUSH
72334: LD_INT 1
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: LD_INT 1
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 3
72363: PUSH
72364: LD_INT 1
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 3
72374: PUSH
72375: LD_INT 2
72377: NEG
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 5
72385: PUSH
72386: LD_INT 2
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72440: LD_ADDR_VAR 0 32
72444: PUSH
72445: LD_INT 4
72447: NEG
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 4
72458: NEG
72459: PUSH
72460: LD_INT 1
72462: NEG
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 3
72470: NEG
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 3
72481: NEG
72482: PUSH
72483: LD_INT 1
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 4
72492: NEG
72493: PUSH
72494: LD_INT 1
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 5
72503: NEG
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 5
72514: NEG
72515: PUSH
72516: LD_INT 1
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 5
72526: NEG
72527: PUSH
72528: LD_INT 2
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 3
72538: NEG
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 3
72549: NEG
72550: PUSH
72551: LD_INT 3
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 3
72561: NEG
72562: PUSH
72563: LD_INT 4
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: NEG
72574: PUSH
72575: LD_INT 3
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 2
72585: NEG
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 3
72597: NEG
72598: PUSH
72599: LD_INT 2
72601: NEG
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 4
72609: NEG
72610: PUSH
72611: LD_INT 3
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 4
72621: NEG
72622: PUSH
72623: LD_INT 4
72625: NEG
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 2
72633: NEG
72634: PUSH
72635: LD_INT 4
72637: NEG
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 4
72645: NEG
72646: PUSH
72647: LD_INT 2
72649: NEG
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: LD_INT 4
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 0
72668: PUSH
72669: LD_INT 5
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 1
72679: PUSH
72680: LD_INT 4
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 1
72690: PUSH
72691: LD_INT 3
72693: NEG
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: LD_INT 3
72704: NEG
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: LD_INT 4
72716: NEG
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 1
72724: NEG
72725: PUSH
72726: LD_INT 5
72728: NEG
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 2
72736: PUSH
72737: LD_INT 3
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 2
72747: NEG
72748: PUSH
72749: LD_INT 5
72751: NEG
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: LD_INT 0
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: LD_INT 1
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 4
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 4
72790: PUSH
72791: LD_INT 1
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 3
72800: PUSH
72801: LD_INT 1
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: PUSH
72821: LD_INT 1
72823: NEG
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 2
72831: PUSH
72832: LD_INT 2
72834: NEG
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 4
72842: PUSH
72843: LD_INT 2
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 4
72852: PUSH
72853: LD_INT 4
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: LD_INT 3
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 5
72872: PUSH
72873: LD_INT 4
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 5
72882: PUSH
72883: LD_INT 5
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 4
72892: PUSH
72893: LD_INT 5
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: LD_INT 4
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 3
72912: PUSH
72913: LD_INT 3
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 5
72922: PUSH
72923: LD_INT 3
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 3
72932: PUSH
72933: LD_INT 5
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72987: LD_ADDR_VAR 0 33
72991: PUSH
72992: LD_INT 4
72994: NEG
72995: PUSH
72996: LD_INT 4
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 4
73006: NEG
73007: PUSH
73008: LD_INT 5
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 3
73018: NEG
73019: PUSH
73020: LD_INT 4
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 3
73030: NEG
73031: PUSH
73032: LD_INT 3
73034: NEG
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 4
73042: NEG
73043: PUSH
73044: LD_INT 3
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 5
73054: NEG
73055: PUSH
73056: LD_INT 4
73058: NEG
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 5
73066: NEG
73067: PUSH
73068: LD_INT 5
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 3
73078: NEG
73079: PUSH
73080: LD_INT 5
73082: NEG
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 5
73090: NEG
73091: PUSH
73092: LD_INT 3
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 0
73102: PUSH
73103: LD_INT 3
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 4
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: LD_INT 3
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: LD_INT 2
73138: NEG
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 0
73146: PUSH
73147: LD_INT 2
73149: NEG
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 1
73157: NEG
73158: PUSH
73159: LD_INT 3
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 1
73169: NEG
73170: PUSH
73171: LD_INT 4
73173: NEG
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 2
73181: PUSH
73182: LD_INT 2
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 2
73192: NEG
73193: PUSH
73194: LD_INT 4
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 4
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 4
73214: PUSH
73215: LD_INT 1
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 5
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 5
73235: PUSH
73236: LD_INT 1
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 4
73245: PUSH
73246: LD_INT 1
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 3
73255: PUSH
73256: LD_INT 0
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 3
73265: PUSH
73266: LD_INT 1
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 3
73276: PUSH
73277: LD_INT 2
73279: NEG
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 5
73287: PUSH
73288: LD_INT 2
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: LD_INT 3
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 3
73307: PUSH
73308: LD_INT 2
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 4
73317: PUSH
73318: LD_INT 3
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 4
73327: PUSH
73328: LD_INT 4
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 3
73337: PUSH
73338: LD_INT 4
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 2
73347: PUSH
73348: LD_INT 3
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 2
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 4
73367: PUSH
73368: LD_INT 2
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: PUSH
73378: LD_INT 4
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 0
73387: PUSH
73388: LD_INT 4
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 0
73397: PUSH
73398: LD_INT 3
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 1
73407: PUSH
73408: LD_INT 4
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: LD_INT 5
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 0
73427: PUSH
73428: LD_INT 5
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 1
73437: NEG
73438: PUSH
73439: LD_INT 4
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 1
73448: NEG
73449: PUSH
73450: LD_INT 3
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: LD_INT 5
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 2
73469: NEG
73470: PUSH
73471: LD_INT 3
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73525: LD_ADDR_VAR 0 34
73529: PUSH
73530: LD_INT 0
73532: PUSH
73533: LD_INT 4
73535: NEG
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: LD_INT 5
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 1
73554: PUSH
73555: LD_INT 4
73557: NEG
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 1
73565: PUSH
73566: LD_INT 3
73568: NEG
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: LD_INT 3
73579: NEG
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 1
73587: NEG
73588: PUSH
73589: LD_INT 4
73591: NEG
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 1
73599: NEG
73600: PUSH
73601: LD_INT 5
73603: NEG
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 2
73611: PUSH
73612: LD_INT 3
73614: NEG
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 2
73622: NEG
73623: PUSH
73624: LD_INT 5
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 3
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 3
73644: PUSH
73645: LD_INT 1
73647: NEG
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 4
73655: PUSH
73656: LD_INT 0
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 4
73665: PUSH
73666: LD_INT 1
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 3
73675: PUSH
73676: LD_INT 1
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 2
73695: PUSH
73696: LD_INT 1
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 2
73706: PUSH
73707: LD_INT 2
73709: NEG
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 4
73717: PUSH
73718: LD_INT 2
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 4
73727: PUSH
73728: LD_INT 4
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 4
73737: PUSH
73738: LD_INT 3
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 5
73747: PUSH
73748: LD_INT 4
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 5
73757: PUSH
73758: LD_INT 5
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 4
73767: PUSH
73768: LD_INT 5
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 3
73777: PUSH
73778: LD_INT 4
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 3
73787: PUSH
73788: LD_INT 3
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 5
73797: PUSH
73798: LD_INT 3
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: LD_INT 3
73807: PUSH
73808: LD_INT 5
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 0
73817: PUSH
73818: LD_INT 3
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 0
73827: PUSH
73828: LD_INT 2
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 1
73837: PUSH
73838: LD_INT 3
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 1
73847: PUSH
73848: LD_INT 4
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: LD_INT 4
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 1
73867: NEG
73868: PUSH
73869: LD_INT 3
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 1
73878: NEG
73879: PUSH
73880: LD_INT 2
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 2
73889: PUSH
73890: LD_INT 4
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 2
73899: NEG
73900: PUSH
73901: LD_INT 2
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 4
73910: NEG
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 4
73921: NEG
73922: PUSH
73923: LD_INT 1
73925: NEG
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 3
73933: NEG
73934: PUSH
73935: LD_INT 0
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 3
73944: NEG
73945: PUSH
73946: LD_INT 1
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 4
73955: NEG
73956: PUSH
73957: LD_INT 1
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 5
73966: NEG
73967: PUSH
73968: LD_INT 0
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 5
73977: NEG
73978: PUSH
73979: LD_INT 1
73981: NEG
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 5
73989: NEG
73990: PUSH
73991: LD_INT 2
73993: NEG
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 3
74001: NEG
74002: PUSH
74003: LD_INT 2
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: ST_TO_ADDR
// end ; end ;
74057: GO 74060
74059: POP
// case btype of b_depot , b_warehouse :
74060: LD_VAR 0 1
74064: PUSH
74065: LD_INT 0
74067: DOUBLE
74068: EQUAL
74069: IFTRUE 74079
74071: LD_INT 1
74073: DOUBLE
74074: EQUAL
74075: IFTRUE 74079
74077: GO 74280
74079: POP
// case nation of nation_american :
74080: LD_VAR 0 5
74084: PUSH
74085: LD_INT 1
74087: DOUBLE
74088: EQUAL
74089: IFTRUE 74093
74091: GO 74149
74093: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74094: LD_ADDR_VAR 0 9
74098: PUSH
74099: LD_VAR 0 11
74103: PUSH
74104: LD_VAR 0 12
74108: PUSH
74109: LD_VAR 0 13
74113: PUSH
74114: LD_VAR 0 14
74118: PUSH
74119: LD_VAR 0 15
74123: PUSH
74124: LD_VAR 0 16
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: PUSH
74137: LD_VAR 0 4
74141: PUSH
74142: LD_INT 1
74144: PLUS
74145: ARRAY
74146: ST_TO_ADDR
74147: GO 74278
74149: LD_INT 2
74151: DOUBLE
74152: EQUAL
74153: IFTRUE 74157
74155: GO 74213
74157: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74158: LD_ADDR_VAR 0 9
74162: PUSH
74163: LD_VAR 0 17
74167: PUSH
74168: LD_VAR 0 18
74172: PUSH
74173: LD_VAR 0 19
74177: PUSH
74178: LD_VAR 0 20
74182: PUSH
74183: LD_VAR 0 21
74187: PUSH
74188: LD_VAR 0 22
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: PUSH
74201: LD_VAR 0 4
74205: PUSH
74206: LD_INT 1
74208: PLUS
74209: ARRAY
74210: ST_TO_ADDR
74211: GO 74278
74213: LD_INT 3
74215: DOUBLE
74216: EQUAL
74217: IFTRUE 74221
74219: GO 74277
74221: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74222: LD_ADDR_VAR 0 9
74226: PUSH
74227: LD_VAR 0 23
74231: PUSH
74232: LD_VAR 0 24
74236: PUSH
74237: LD_VAR 0 25
74241: PUSH
74242: LD_VAR 0 26
74246: PUSH
74247: LD_VAR 0 27
74251: PUSH
74252: LD_VAR 0 28
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: LD_VAR 0 4
74269: PUSH
74270: LD_INT 1
74272: PLUS
74273: ARRAY
74274: ST_TO_ADDR
74275: GO 74278
74277: POP
74278: GO 74833
74280: LD_INT 2
74282: DOUBLE
74283: EQUAL
74284: IFTRUE 74294
74286: LD_INT 3
74288: DOUBLE
74289: EQUAL
74290: IFTRUE 74294
74292: GO 74350
74294: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74295: LD_ADDR_VAR 0 9
74299: PUSH
74300: LD_VAR 0 29
74304: PUSH
74305: LD_VAR 0 30
74309: PUSH
74310: LD_VAR 0 31
74314: PUSH
74315: LD_VAR 0 32
74319: PUSH
74320: LD_VAR 0 33
74324: PUSH
74325: LD_VAR 0 34
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: LD_VAR 0 4
74342: PUSH
74343: LD_INT 1
74345: PLUS
74346: ARRAY
74347: ST_TO_ADDR
74348: GO 74833
74350: LD_INT 16
74352: DOUBLE
74353: EQUAL
74354: IFTRUE 74412
74356: LD_INT 17
74358: DOUBLE
74359: EQUAL
74360: IFTRUE 74412
74362: LD_INT 18
74364: DOUBLE
74365: EQUAL
74366: IFTRUE 74412
74368: LD_INT 19
74370: DOUBLE
74371: EQUAL
74372: IFTRUE 74412
74374: LD_INT 22
74376: DOUBLE
74377: EQUAL
74378: IFTRUE 74412
74380: LD_INT 20
74382: DOUBLE
74383: EQUAL
74384: IFTRUE 74412
74386: LD_INT 21
74388: DOUBLE
74389: EQUAL
74390: IFTRUE 74412
74392: LD_INT 23
74394: DOUBLE
74395: EQUAL
74396: IFTRUE 74412
74398: LD_INT 24
74400: DOUBLE
74401: EQUAL
74402: IFTRUE 74412
74404: LD_INT 25
74406: DOUBLE
74407: EQUAL
74408: IFTRUE 74412
74410: GO 74468
74412: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74413: LD_ADDR_VAR 0 9
74417: PUSH
74418: LD_VAR 0 35
74422: PUSH
74423: LD_VAR 0 36
74427: PUSH
74428: LD_VAR 0 37
74432: PUSH
74433: LD_VAR 0 38
74437: PUSH
74438: LD_VAR 0 39
74442: PUSH
74443: LD_VAR 0 40
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: PUSH
74456: LD_VAR 0 4
74460: PUSH
74461: LD_INT 1
74463: PLUS
74464: ARRAY
74465: ST_TO_ADDR
74466: GO 74833
74468: LD_INT 6
74470: DOUBLE
74471: EQUAL
74472: IFTRUE 74524
74474: LD_INT 7
74476: DOUBLE
74477: EQUAL
74478: IFTRUE 74524
74480: LD_INT 8
74482: DOUBLE
74483: EQUAL
74484: IFTRUE 74524
74486: LD_INT 13
74488: DOUBLE
74489: EQUAL
74490: IFTRUE 74524
74492: LD_INT 12
74494: DOUBLE
74495: EQUAL
74496: IFTRUE 74524
74498: LD_INT 15
74500: DOUBLE
74501: EQUAL
74502: IFTRUE 74524
74504: LD_INT 11
74506: DOUBLE
74507: EQUAL
74508: IFTRUE 74524
74510: LD_INT 14
74512: DOUBLE
74513: EQUAL
74514: IFTRUE 74524
74516: LD_INT 10
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74524
74522: GO 74580
74524: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74525: LD_ADDR_VAR 0 9
74529: PUSH
74530: LD_VAR 0 41
74534: PUSH
74535: LD_VAR 0 42
74539: PUSH
74540: LD_VAR 0 43
74544: PUSH
74545: LD_VAR 0 44
74549: PUSH
74550: LD_VAR 0 45
74554: PUSH
74555: LD_VAR 0 46
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: LD_VAR 0 4
74572: PUSH
74573: LD_INT 1
74575: PLUS
74576: ARRAY
74577: ST_TO_ADDR
74578: GO 74833
74580: LD_INT 36
74582: DOUBLE
74583: EQUAL
74584: IFTRUE 74588
74586: GO 74644
74588: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74589: LD_ADDR_VAR 0 9
74593: PUSH
74594: LD_VAR 0 47
74598: PUSH
74599: LD_VAR 0 48
74603: PUSH
74604: LD_VAR 0 49
74608: PUSH
74609: LD_VAR 0 50
74613: PUSH
74614: LD_VAR 0 51
74618: PUSH
74619: LD_VAR 0 52
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: PUSH
74632: LD_VAR 0 4
74636: PUSH
74637: LD_INT 1
74639: PLUS
74640: ARRAY
74641: ST_TO_ADDR
74642: GO 74833
74644: LD_INT 4
74646: DOUBLE
74647: EQUAL
74648: IFTRUE 74670
74650: LD_INT 5
74652: DOUBLE
74653: EQUAL
74654: IFTRUE 74670
74656: LD_INT 34
74658: DOUBLE
74659: EQUAL
74660: IFTRUE 74670
74662: LD_INT 37
74664: DOUBLE
74665: EQUAL
74666: IFTRUE 74670
74668: GO 74726
74670: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74671: LD_ADDR_VAR 0 9
74675: PUSH
74676: LD_VAR 0 53
74680: PUSH
74681: LD_VAR 0 54
74685: PUSH
74686: LD_VAR 0 55
74690: PUSH
74691: LD_VAR 0 56
74695: PUSH
74696: LD_VAR 0 57
74700: PUSH
74701: LD_VAR 0 58
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: PUSH
74714: LD_VAR 0 4
74718: PUSH
74719: LD_INT 1
74721: PLUS
74722: ARRAY
74723: ST_TO_ADDR
74724: GO 74833
74726: LD_INT 31
74728: DOUBLE
74729: EQUAL
74730: IFTRUE 74776
74732: LD_INT 32
74734: DOUBLE
74735: EQUAL
74736: IFTRUE 74776
74738: LD_INT 33
74740: DOUBLE
74741: EQUAL
74742: IFTRUE 74776
74744: LD_INT 27
74746: DOUBLE
74747: EQUAL
74748: IFTRUE 74776
74750: LD_INT 26
74752: DOUBLE
74753: EQUAL
74754: IFTRUE 74776
74756: LD_INT 28
74758: DOUBLE
74759: EQUAL
74760: IFTRUE 74776
74762: LD_INT 29
74764: DOUBLE
74765: EQUAL
74766: IFTRUE 74776
74768: LD_INT 30
74770: DOUBLE
74771: EQUAL
74772: IFTRUE 74776
74774: GO 74832
74776: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74777: LD_ADDR_VAR 0 9
74781: PUSH
74782: LD_VAR 0 59
74786: PUSH
74787: LD_VAR 0 60
74791: PUSH
74792: LD_VAR 0 61
74796: PUSH
74797: LD_VAR 0 62
74801: PUSH
74802: LD_VAR 0 63
74806: PUSH
74807: LD_VAR 0 64
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: PUSH
74820: LD_VAR 0 4
74824: PUSH
74825: LD_INT 1
74827: PLUS
74828: ARRAY
74829: ST_TO_ADDR
74830: GO 74833
74832: POP
// temp_list2 = [ ] ;
74833: LD_ADDR_VAR 0 10
74837: PUSH
74838: EMPTY
74839: ST_TO_ADDR
// for i in temp_list do
74840: LD_ADDR_VAR 0 8
74844: PUSH
74845: LD_VAR 0 9
74849: PUSH
74850: FOR_IN
74851: IFFALSE 74903
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74853: LD_ADDR_VAR 0 10
74857: PUSH
74858: LD_VAR 0 10
74862: PUSH
74863: LD_VAR 0 8
74867: PUSH
74868: LD_INT 1
74870: ARRAY
74871: PUSH
74872: LD_VAR 0 2
74876: PLUS
74877: PUSH
74878: LD_VAR 0 8
74882: PUSH
74883: LD_INT 2
74885: ARRAY
74886: PUSH
74887: LD_VAR 0 3
74891: PLUS
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: EMPTY
74898: LIST
74899: ADD
74900: ST_TO_ADDR
74901: GO 74850
74903: POP
74904: POP
// result = temp_list2 ;
74905: LD_ADDR_VAR 0 7
74909: PUSH
74910: LD_VAR 0 10
74914: ST_TO_ADDR
// end ;
74915: LD_VAR 0 7
74919: RET
// export function EnemyInRange ( unit , dist ) ; begin
74920: LD_INT 0
74922: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74923: LD_ADDR_VAR 0 3
74927: PUSH
74928: LD_VAR 0 1
74932: PPUSH
74933: CALL_OW 255
74937: PPUSH
74938: LD_VAR 0 1
74942: PPUSH
74943: CALL_OW 250
74947: PPUSH
74948: LD_VAR 0 1
74952: PPUSH
74953: CALL_OW 251
74957: PPUSH
74958: LD_VAR 0 2
74962: PPUSH
74963: CALL 48293 0 4
74967: PUSH
74968: LD_INT 4
74970: ARRAY
74971: ST_TO_ADDR
// end ;
74972: LD_VAR 0 3
74976: RET
// export function PlayerSeeMe ( unit ) ; begin
74977: LD_INT 0
74979: PPUSH
// result := See ( your_side , unit ) ;
74980: LD_ADDR_VAR 0 2
74984: PUSH
74985: LD_OWVAR 2
74989: PPUSH
74990: LD_VAR 0 1
74994: PPUSH
74995: CALL_OW 292
74999: ST_TO_ADDR
// end ;
75000: LD_VAR 0 2
75004: RET
// export function ReverseDir ( unit ) ; begin
75005: LD_INT 0
75007: PPUSH
// if not unit then
75008: LD_VAR 0 1
75012: NOT
75013: IFFALSE 75017
// exit ;
75015: GO 75040
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75017: LD_ADDR_VAR 0 2
75021: PUSH
75022: LD_VAR 0 1
75026: PPUSH
75027: CALL_OW 254
75031: PUSH
75032: LD_INT 3
75034: PLUS
75035: PUSH
75036: LD_INT 6
75038: MOD
75039: ST_TO_ADDR
// end ;
75040: LD_VAR 0 2
75044: RET
// export function ReverseArray ( array ) ; var i ; begin
75045: LD_INT 0
75047: PPUSH
75048: PPUSH
// if not array then
75049: LD_VAR 0 1
75053: NOT
75054: IFFALSE 75058
// exit ;
75056: GO 75113
// result := [ ] ;
75058: LD_ADDR_VAR 0 2
75062: PUSH
75063: EMPTY
75064: ST_TO_ADDR
// for i := array downto 1 do
75065: LD_ADDR_VAR 0 3
75069: PUSH
75070: DOUBLE
75071: LD_VAR 0 1
75075: INC
75076: ST_TO_ADDR
75077: LD_INT 1
75079: PUSH
75080: FOR_DOWNTO
75081: IFFALSE 75111
// result := Join ( result , array [ i ] ) ;
75083: LD_ADDR_VAR 0 2
75087: PUSH
75088: LD_VAR 0 2
75092: PPUSH
75093: LD_VAR 0 1
75097: PUSH
75098: LD_VAR 0 3
75102: ARRAY
75103: PPUSH
75104: CALL 79769 0 2
75108: ST_TO_ADDR
75109: GO 75080
75111: POP
75112: POP
// end ;
75113: LD_VAR 0 2
75117: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75118: LD_INT 0
75120: PPUSH
75121: PPUSH
75122: PPUSH
75123: PPUSH
75124: PPUSH
75125: PPUSH
// if not unit or not hexes then
75126: LD_VAR 0 1
75130: NOT
75131: PUSH
75132: LD_VAR 0 2
75136: NOT
75137: OR
75138: IFFALSE 75142
// exit ;
75140: GO 75265
// dist := 9999 ;
75142: LD_ADDR_VAR 0 5
75146: PUSH
75147: LD_INT 9999
75149: ST_TO_ADDR
// for i = 1 to hexes do
75150: LD_ADDR_VAR 0 4
75154: PUSH
75155: DOUBLE
75156: LD_INT 1
75158: DEC
75159: ST_TO_ADDR
75160: LD_VAR 0 2
75164: PUSH
75165: FOR_TO
75166: IFFALSE 75253
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75168: LD_ADDR_VAR 0 6
75172: PUSH
75173: LD_VAR 0 1
75177: PPUSH
75178: LD_VAR 0 2
75182: PUSH
75183: LD_VAR 0 4
75187: ARRAY
75188: PUSH
75189: LD_INT 1
75191: ARRAY
75192: PPUSH
75193: LD_VAR 0 2
75197: PUSH
75198: LD_VAR 0 4
75202: ARRAY
75203: PUSH
75204: LD_INT 2
75206: ARRAY
75207: PPUSH
75208: CALL_OW 297
75212: ST_TO_ADDR
// if tdist < dist then
75213: LD_VAR 0 6
75217: PUSH
75218: LD_VAR 0 5
75222: LESS
75223: IFFALSE 75251
// begin hex := hexes [ i ] ;
75225: LD_ADDR_VAR 0 8
75229: PUSH
75230: LD_VAR 0 2
75234: PUSH
75235: LD_VAR 0 4
75239: ARRAY
75240: ST_TO_ADDR
// dist := tdist ;
75241: LD_ADDR_VAR 0 5
75245: PUSH
75246: LD_VAR 0 6
75250: ST_TO_ADDR
// end ; end ;
75251: GO 75165
75253: POP
75254: POP
// result := hex ;
75255: LD_ADDR_VAR 0 3
75259: PUSH
75260: LD_VAR 0 8
75264: ST_TO_ADDR
// end ;
75265: LD_VAR 0 3
75269: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75270: LD_INT 0
75272: PPUSH
75273: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75274: LD_VAR 0 1
75278: NOT
75279: PUSH
75280: LD_VAR 0 1
75284: PUSH
75285: LD_INT 21
75287: PUSH
75288: LD_INT 2
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 23
75297: PUSH
75298: LD_INT 2
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PPUSH
75309: CALL_OW 69
75313: IN
75314: NOT
75315: OR
75316: IFFALSE 75320
// exit ;
75318: GO 75367
// for i = 1 to 3 do
75320: LD_ADDR_VAR 0 3
75324: PUSH
75325: DOUBLE
75326: LD_INT 1
75328: DEC
75329: ST_TO_ADDR
75330: LD_INT 3
75332: PUSH
75333: FOR_TO
75334: IFFALSE 75365
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75336: LD_VAR 0 1
75340: PPUSH
75341: CALL_OW 250
75345: PPUSH
75346: LD_VAR 0 1
75350: PPUSH
75351: CALL_OW 251
75355: PPUSH
75356: LD_INT 1
75358: PPUSH
75359: CALL_OW 453
75363: GO 75333
75365: POP
75366: POP
// end ;
75367: LD_VAR 0 2
75371: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75372: LD_INT 0
75374: PPUSH
75375: PPUSH
75376: PPUSH
75377: PPUSH
75378: PPUSH
75379: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
75380: LD_VAR 0 1
75384: NOT
75385: PUSH
75386: LD_VAR 0 2
75390: NOT
75391: OR
75392: PUSH
75393: LD_VAR 0 1
75397: PPUSH
75398: CALL_OW 314
75402: OR
75403: IFFALSE 75407
// exit ;
75405: GO 75874
// if GetLives ( i ) < 250 then
75407: LD_VAR 0 4
75411: PPUSH
75412: CALL_OW 256
75416: PUSH
75417: LD_INT 250
75419: LESS
75420: IFFALSE 75433
// begin ComAutodestruct ( i ) ;
75422: LD_VAR 0 4
75426: PPUSH
75427: CALL 75270 0 1
// exit ;
75431: GO 75874
// end ; x := GetX ( enemy_unit ) ;
75433: LD_ADDR_VAR 0 7
75437: PUSH
75438: LD_VAR 0 2
75442: PPUSH
75443: CALL_OW 250
75447: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75448: LD_ADDR_VAR 0 8
75452: PUSH
75453: LD_VAR 0 2
75457: PPUSH
75458: CALL_OW 251
75462: ST_TO_ADDR
// if not x or not y then
75463: LD_VAR 0 7
75467: NOT
75468: PUSH
75469: LD_VAR 0 8
75473: NOT
75474: OR
75475: IFFALSE 75479
// exit ;
75477: GO 75874
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75479: LD_ADDR_VAR 0 6
75483: PUSH
75484: LD_VAR 0 7
75488: PPUSH
75489: LD_INT 0
75491: PPUSH
75492: LD_INT 4
75494: PPUSH
75495: CALL_OW 272
75499: PUSH
75500: LD_VAR 0 8
75504: PPUSH
75505: LD_INT 0
75507: PPUSH
75508: LD_INT 4
75510: PPUSH
75511: CALL_OW 273
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PUSH
75520: LD_VAR 0 7
75524: PPUSH
75525: LD_INT 1
75527: PPUSH
75528: LD_INT 4
75530: PPUSH
75531: CALL_OW 272
75535: PUSH
75536: LD_VAR 0 8
75540: PPUSH
75541: LD_INT 1
75543: PPUSH
75544: LD_INT 4
75546: PPUSH
75547: CALL_OW 273
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_VAR 0 7
75560: PPUSH
75561: LD_INT 2
75563: PPUSH
75564: LD_INT 4
75566: PPUSH
75567: CALL_OW 272
75571: PUSH
75572: LD_VAR 0 8
75576: PPUSH
75577: LD_INT 2
75579: PPUSH
75580: LD_INT 4
75582: PPUSH
75583: CALL_OW 273
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: LD_VAR 0 7
75596: PPUSH
75597: LD_INT 3
75599: PPUSH
75600: LD_INT 4
75602: PPUSH
75603: CALL_OW 272
75607: PUSH
75608: LD_VAR 0 8
75612: PPUSH
75613: LD_INT 3
75615: PPUSH
75616: LD_INT 4
75618: PPUSH
75619: CALL_OW 273
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_VAR 0 7
75632: PPUSH
75633: LD_INT 4
75635: PPUSH
75636: LD_INT 4
75638: PPUSH
75639: CALL_OW 272
75643: PUSH
75644: LD_VAR 0 8
75648: PPUSH
75649: LD_INT 4
75651: PPUSH
75652: LD_INT 4
75654: PPUSH
75655: CALL_OW 273
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_VAR 0 7
75668: PPUSH
75669: LD_INT 5
75671: PPUSH
75672: LD_INT 4
75674: PPUSH
75675: CALL_OW 272
75679: PUSH
75680: LD_VAR 0 8
75684: PPUSH
75685: LD_INT 5
75687: PPUSH
75688: LD_INT 4
75690: PPUSH
75691: CALL_OW 273
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: ST_TO_ADDR
// for i = tmp downto 1 do
75708: LD_ADDR_VAR 0 4
75712: PUSH
75713: DOUBLE
75714: LD_VAR 0 6
75718: INC
75719: ST_TO_ADDR
75720: LD_INT 1
75722: PUSH
75723: FOR_DOWNTO
75724: IFFALSE 75825
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75726: LD_VAR 0 6
75730: PUSH
75731: LD_VAR 0 4
75735: ARRAY
75736: PUSH
75737: LD_INT 1
75739: ARRAY
75740: PPUSH
75741: LD_VAR 0 6
75745: PUSH
75746: LD_VAR 0 4
75750: ARRAY
75751: PUSH
75752: LD_INT 2
75754: ARRAY
75755: PPUSH
75756: CALL_OW 488
75760: NOT
75761: PUSH
75762: LD_VAR 0 6
75766: PUSH
75767: LD_VAR 0 4
75771: ARRAY
75772: PUSH
75773: LD_INT 1
75775: ARRAY
75776: PPUSH
75777: LD_VAR 0 6
75781: PUSH
75782: LD_VAR 0 4
75786: ARRAY
75787: PUSH
75788: LD_INT 2
75790: ARRAY
75791: PPUSH
75792: CALL_OW 428
75796: PUSH
75797: LD_INT 0
75799: NONEQUAL
75800: OR
75801: IFFALSE 75823
// tmp := Delete ( tmp , i ) ;
75803: LD_ADDR_VAR 0 6
75807: PUSH
75808: LD_VAR 0 6
75812: PPUSH
75813: LD_VAR 0 4
75817: PPUSH
75818: CALL_OW 3
75822: ST_TO_ADDR
75823: GO 75723
75825: POP
75826: POP
// j := GetClosestHex ( unit , tmp ) ;
75827: LD_ADDR_VAR 0 5
75831: PUSH
75832: LD_VAR 0 1
75836: PPUSH
75837: LD_VAR 0 6
75841: PPUSH
75842: CALL 75118 0 2
75846: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75847: LD_VAR 0 1
75851: PPUSH
75852: LD_VAR 0 5
75856: PUSH
75857: LD_INT 1
75859: ARRAY
75860: PPUSH
75861: LD_VAR 0 5
75865: PUSH
75866: LD_INT 2
75868: ARRAY
75869: PPUSH
75870: CALL_OW 111
// end ;
75874: LD_VAR 0 3
75878: RET
// export function PrepareApemanSoldier ( ) ; begin
75879: LD_INT 0
75881: PPUSH
// uc_nation := 0 ;
75882: LD_ADDR_OWVAR 21
75886: PUSH
75887: LD_INT 0
75889: ST_TO_ADDR
// hc_sex := sex_male ;
75890: LD_ADDR_OWVAR 27
75894: PUSH
75895: LD_INT 1
75897: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75898: LD_ADDR_OWVAR 28
75902: PUSH
75903: LD_INT 15
75905: ST_TO_ADDR
// hc_gallery :=  ;
75906: LD_ADDR_OWVAR 33
75910: PUSH
75911: LD_STRING 
75913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75914: LD_ADDR_OWVAR 31
75918: PUSH
75919: LD_INT 0
75921: PPUSH
75922: LD_INT 3
75924: PPUSH
75925: CALL_OW 12
75929: PUSH
75930: LD_INT 0
75932: PPUSH
75933: LD_INT 3
75935: PPUSH
75936: CALL_OW 12
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: LD_INT 0
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: ST_TO_ADDR
// end ;
75953: LD_VAR 0 1
75957: RET
// export function PrepareApemanEngineer ( ) ; begin
75958: LD_INT 0
75960: PPUSH
// uc_nation := 0 ;
75961: LD_ADDR_OWVAR 21
75965: PUSH
75966: LD_INT 0
75968: ST_TO_ADDR
// hc_sex := sex_male ;
75969: LD_ADDR_OWVAR 27
75973: PUSH
75974: LD_INT 1
75976: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75977: LD_ADDR_OWVAR 28
75981: PUSH
75982: LD_INT 16
75984: ST_TO_ADDR
// hc_gallery :=  ;
75985: LD_ADDR_OWVAR 33
75989: PUSH
75990: LD_STRING 
75992: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75993: LD_ADDR_OWVAR 31
75997: PUSH
75998: LD_INT 0
76000: PPUSH
76001: LD_INT 3
76003: PPUSH
76004: CALL_OW 12
76008: PUSH
76009: LD_INT 0
76011: PPUSH
76012: LD_INT 3
76014: PPUSH
76015: CALL_OW 12
76019: PUSH
76020: LD_INT 0
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: ST_TO_ADDR
// end ;
76032: LD_VAR 0 1
76036: RET
// export function PrepareApeman ( agressivity ) ; begin
76037: LD_INT 0
76039: PPUSH
// uc_side := 0 ;
76040: LD_ADDR_OWVAR 20
76044: PUSH
76045: LD_INT 0
76047: ST_TO_ADDR
// uc_nation := 0 ;
76048: LD_ADDR_OWVAR 21
76052: PUSH
76053: LD_INT 0
76055: ST_TO_ADDR
// hc_sex := sex_male ;
76056: LD_ADDR_OWVAR 27
76060: PUSH
76061: LD_INT 1
76063: ST_TO_ADDR
// hc_class := class_apeman ;
76064: LD_ADDR_OWVAR 28
76068: PUSH
76069: LD_INT 12
76071: ST_TO_ADDR
// hc_gallery :=  ;
76072: LD_ADDR_OWVAR 33
76076: PUSH
76077: LD_STRING 
76079: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76080: LD_ADDR_OWVAR 35
76084: PUSH
76085: LD_VAR 0 1
76089: NEG
76090: PPUSH
76091: LD_VAR 0 1
76095: PPUSH
76096: CALL_OW 12
76100: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76101: LD_ADDR_OWVAR 31
76105: PUSH
76106: LD_INT 0
76108: PPUSH
76109: LD_INT 3
76111: PPUSH
76112: CALL_OW 12
76116: PUSH
76117: LD_INT 0
76119: PPUSH
76120: LD_INT 3
76122: PPUSH
76123: CALL_OW 12
76127: PUSH
76128: LD_INT 0
76130: PUSH
76131: LD_INT 0
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: ST_TO_ADDR
// end ;
76140: LD_VAR 0 2
76144: RET
// export function PrepareTiger ( agressivity ) ; begin
76145: LD_INT 0
76147: PPUSH
// uc_side := 0 ;
76148: LD_ADDR_OWVAR 20
76152: PUSH
76153: LD_INT 0
76155: ST_TO_ADDR
// uc_nation := 0 ;
76156: LD_ADDR_OWVAR 21
76160: PUSH
76161: LD_INT 0
76163: ST_TO_ADDR
// hc_class := class_tiger ;
76164: LD_ADDR_OWVAR 28
76168: PUSH
76169: LD_INT 14
76171: ST_TO_ADDR
// hc_gallery :=  ;
76172: LD_ADDR_OWVAR 33
76176: PUSH
76177: LD_STRING 
76179: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76180: LD_ADDR_OWVAR 35
76184: PUSH
76185: LD_VAR 0 1
76189: NEG
76190: PPUSH
76191: LD_VAR 0 1
76195: PPUSH
76196: CALL_OW 12
76200: ST_TO_ADDR
// end ;
76201: LD_VAR 0 2
76205: RET
// export function PrepareEnchidna ( ) ; begin
76206: LD_INT 0
76208: PPUSH
// uc_side := 0 ;
76209: LD_ADDR_OWVAR 20
76213: PUSH
76214: LD_INT 0
76216: ST_TO_ADDR
// uc_nation := 0 ;
76217: LD_ADDR_OWVAR 21
76221: PUSH
76222: LD_INT 0
76224: ST_TO_ADDR
// hc_class := class_baggie ;
76225: LD_ADDR_OWVAR 28
76229: PUSH
76230: LD_INT 13
76232: ST_TO_ADDR
// hc_gallery :=  ;
76233: LD_ADDR_OWVAR 33
76237: PUSH
76238: LD_STRING 
76240: ST_TO_ADDR
// end ;
76241: LD_VAR 0 1
76245: RET
// export function PrepareFrog ( ) ; begin
76246: LD_INT 0
76248: PPUSH
// uc_side := 0 ;
76249: LD_ADDR_OWVAR 20
76253: PUSH
76254: LD_INT 0
76256: ST_TO_ADDR
// uc_nation := 0 ;
76257: LD_ADDR_OWVAR 21
76261: PUSH
76262: LD_INT 0
76264: ST_TO_ADDR
// hc_class := class_frog ;
76265: LD_ADDR_OWVAR 28
76269: PUSH
76270: LD_INT 19
76272: ST_TO_ADDR
// hc_gallery :=  ;
76273: LD_ADDR_OWVAR 33
76277: PUSH
76278: LD_STRING 
76280: ST_TO_ADDR
// end ;
76281: LD_VAR 0 1
76285: RET
// export function PrepareFish ( ) ; begin
76286: LD_INT 0
76288: PPUSH
// uc_side := 0 ;
76289: LD_ADDR_OWVAR 20
76293: PUSH
76294: LD_INT 0
76296: ST_TO_ADDR
// uc_nation := 0 ;
76297: LD_ADDR_OWVAR 21
76301: PUSH
76302: LD_INT 0
76304: ST_TO_ADDR
// hc_class := class_fish ;
76305: LD_ADDR_OWVAR 28
76309: PUSH
76310: LD_INT 20
76312: ST_TO_ADDR
// hc_gallery :=  ;
76313: LD_ADDR_OWVAR 33
76317: PUSH
76318: LD_STRING 
76320: ST_TO_ADDR
// end ;
76321: LD_VAR 0 1
76325: RET
// export function PrepareBird ( ) ; begin
76326: LD_INT 0
76328: PPUSH
// uc_side := 0 ;
76329: LD_ADDR_OWVAR 20
76333: PUSH
76334: LD_INT 0
76336: ST_TO_ADDR
// uc_nation := 0 ;
76337: LD_ADDR_OWVAR 21
76341: PUSH
76342: LD_INT 0
76344: ST_TO_ADDR
// hc_class := class_phororhacos ;
76345: LD_ADDR_OWVAR 28
76349: PUSH
76350: LD_INT 18
76352: ST_TO_ADDR
// hc_gallery :=  ;
76353: LD_ADDR_OWVAR 33
76357: PUSH
76358: LD_STRING 
76360: ST_TO_ADDR
// end ;
76361: LD_VAR 0 1
76365: RET
// export function PrepareHorse ( ) ; begin
76366: LD_INT 0
76368: PPUSH
// uc_side := 0 ;
76369: LD_ADDR_OWVAR 20
76373: PUSH
76374: LD_INT 0
76376: ST_TO_ADDR
// uc_nation := 0 ;
76377: LD_ADDR_OWVAR 21
76381: PUSH
76382: LD_INT 0
76384: ST_TO_ADDR
// hc_class := class_horse ;
76385: LD_ADDR_OWVAR 28
76389: PUSH
76390: LD_INT 21
76392: ST_TO_ADDR
// hc_gallery :=  ;
76393: LD_ADDR_OWVAR 33
76397: PUSH
76398: LD_STRING 
76400: ST_TO_ADDR
// end ;
76401: LD_VAR 0 1
76405: RET
// export function PrepareMastodont ( ) ; begin
76406: LD_INT 0
76408: PPUSH
// uc_side := 0 ;
76409: LD_ADDR_OWVAR 20
76413: PUSH
76414: LD_INT 0
76416: ST_TO_ADDR
// uc_nation := 0 ;
76417: LD_ADDR_OWVAR 21
76421: PUSH
76422: LD_INT 0
76424: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76425: LD_ADDR_OWVAR 37
76429: PUSH
76430: LD_INT 31
76432: ST_TO_ADDR
// vc_control := control_rider ;
76433: LD_ADDR_OWVAR 38
76437: PUSH
76438: LD_INT 4
76440: ST_TO_ADDR
// end ;
76441: LD_VAR 0 1
76445: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76446: LD_INT 0
76448: PPUSH
76449: PPUSH
76450: PPUSH
// uc_side = 0 ;
76451: LD_ADDR_OWVAR 20
76455: PUSH
76456: LD_INT 0
76458: ST_TO_ADDR
// uc_nation = 0 ;
76459: LD_ADDR_OWVAR 21
76463: PUSH
76464: LD_INT 0
76466: ST_TO_ADDR
// InitHc_All ( ) ;
76467: CALL_OW 584
// InitVc ;
76471: CALL_OW 20
// if mastodonts then
76475: LD_VAR 0 6
76479: IFFALSE 76546
// for i = 1 to mastodonts do
76481: LD_ADDR_VAR 0 11
76485: PUSH
76486: DOUBLE
76487: LD_INT 1
76489: DEC
76490: ST_TO_ADDR
76491: LD_VAR 0 6
76495: PUSH
76496: FOR_TO
76497: IFFALSE 76544
// begin vc_chassis := 31 ;
76499: LD_ADDR_OWVAR 37
76503: PUSH
76504: LD_INT 31
76506: ST_TO_ADDR
// vc_control := control_rider ;
76507: LD_ADDR_OWVAR 38
76511: PUSH
76512: LD_INT 4
76514: ST_TO_ADDR
// animal := CreateVehicle ;
76515: LD_ADDR_VAR 0 12
76519: PUSH
76520: CALL_OW 45
76524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76525: LD_VAR 0 12
76529: PPUSH
76530: LD_VAR 0 8
76534: PPUSH
76535: LD_INT 0
76537: PPUSH
76538: CALL 78674 0 3
// end ;
76542: GO 76496
76544: POP
76545: POP
// if horses then
76546: LD_VAR 0 5
76550: IFFALSE 76617
// for i = 1 to horses do
76552: LD_ADDR_VAR 0 11
76556: PUSH
76557: DOUBLE
76558: LD_INT 1
76560: DEC
76561: ST_TO_ADDR
76562: LD_VAR 0 5
76566: PUSH
76567: FOR_TO
76568: IFFALSE 76615
// begin hc_class := 21 ;
76570: LD_ADDR_OWVAR 28
76574: PUSH
76575: LD_INT 21
76577: ST_TO_ADDR
// hc_gallery :=  ;
76578: LD_ADDR_OWVAR 33
76582: PUSH
76583: LD_STRING 
76585: ST_TO_ADDR
// animal := CreateHuman ;
76586: LD_ADDR_VAR 0 12
76590: PUSH
76591: CALL_OW 44
76595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76596: LD_VAR 0 12
76600: PPUSH
76601: LD_VAR 0 8
76605: PPUSH
76606: LD_INT 0
76608: PPUSH
76609: CALL 78674 0 3
// end ;
76613: GO 76567
76615: POP
76616: POP
// if birds then
76617: LD_VAR 0 1
76621: IFFALSE 76688
// for i = 1 to birds do
76623: LD_ADDR_VAR 0 11
76627: PUSH
76628: DOUBLE
76629: LD_INT 1
76631: DEC
76632: ST_TO_ADDR
76633: LD_VAR 0 1
76637: PUSH
76638: FOR_TO
76639: IFFALSE 76686
// begin hc_class := 18 ;
76641: LD_ADDR_OWVAR 28
76645: PUSH
76646: LD_INT 18
76648: ST_TO_ADDR
// hc_gallery =  ;
76649: LD_ADDR_OWVAR 33
76653: PUSH
76654: LD_STRING 
76656: ST_TO_ADDR
// animal := CreateHuman ;
76657: LD_ADDR_VAR 0 12
76661: PUSH
76662: CALL_OW 44
76666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76667: LD_VAR 0 12
76671: PPUSH
76672: LD_VAR 0 8
76676: PPUSH
76677: LD_INT 0
76679: PPUSH
76680: CALL 78674 0 3
// end ;
76684: GO 76638
76686: POP
76687: POP
// if tigers then
76688: LD_VAR 0 2
76692: IFFALSE 76776
// for i = 1 to tigers do
76694: LD_ADDR_VAR 0 11
76698: PUSH
76699: DOUBLE
76700: LD_INT 1
76702: DEC
76703: ST_TO_ADDR
76704: LD_VAR 0 2
76708: PUSH
76709: FOR_TO
76710: IFFALSE 76774
// begin hc_class = class_tiger ;
76712: LD_ADDR_OWVAR 28
76716: PUSH
76717: LD_INT 14
76719: ST_TO_ADDR
// hc_gallery =  ;
76720: LD_ADDR_OWVAR 33
76724: PUSH
76725: LD_STRING 
76727: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76728: LD_ADDR_OWVAR 35
76732: PUSH
76733: LD_INT 7
76735: NEG
76736: PPUSH
76737: LD_INT 7
76739: PPUSH
76740: CALL_OW 12
76744: ST_TO_ADDR
// animal := CreateHuman ;
76745: LD_ADDR_VAR 0 12
76749: PUSH
76750: CALL_OW 44
76754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76755: LD_VAR 0 12
76759: PPUSH
76760: LD_VAR 0 8
76764: PPUSH
76765: LD_INT 0
76767: PPUSH
76768: CALL 78674 0 3
// end ;
76772: GO 76709
76774: POP
76775: POP
// if apemans then
76776: LD_VAR 0 3
76780: IFFALSE 76903
// for i = 1 to apemans do
76782: LD_ADDR_VAR 0 11
76786: PUSH
76787: DOUBLE
76788: LD_INT 1
76790: DEC
76791: ST_TO_ADDR
76792: LD_VAR 0 3
76796: PUSH
76797: FOR_TO
76798: IFFALSE 76901
// begin hc_class = class_apeman ;
76800: LD_ADDR_OWVAR 28
76804: PUSH
76805: LD_INT 12
76807: ST_TO_ADDR
// hc_gallery =  ;
76808: LD_ADDR_OWVAR 33
76812: PUSH
76813: LD_STRING 
76815: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76816: LD_ADDR_OWVAR 35
76820: PUSH
76821: LD_INT 2
76823: NEG
76824: PPUSH
76825: LD_INT 2
76827: PPUSH
76828: CALL_OW 12
76832: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76833: LD_ADDR_OWVAR 31
76837: PUSH
76838: LD_INT 1
76840: PPUSH
76841: LD_INT 3
76843: PPUSH
76844: CALL_OW 12
76848: PUSH
76849: LD_INT 1
76851: PPUSH
76852: LD_INT 3
76854: PPUSH
76855: CALL_OW 12
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: LD_INT 0
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: ST_TO_ADDR
// animal := CreateHuman ;
76872: LD_ADDR_VAR 0 12
76876: PUSH
76877: CALL_OW 44
76881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76882: LD_VAR 0 12
76886: PPUSH
76887: LD_VAR 0 8
76891: PPUSH
76892: LD_INT 0
76894: PPUSH
76895: CALL 78674 0 3
// end ;
76899: GO 76797
76901: POP
76902: POP
// if enchidnas then
76903: LD_VAR 0 4
76907: IFFALSE 76974
// for i = 1 to enchidnas do
76909: LD_ADDR_VAR 0 11
76913: PUSH
76914: DOUBLE
76915: LD_INT 1
76917: DEC
76918: ST_TO_ADDR
76919: LD_VAR 0 4
76923: PUSH
76924: FOR_TO
76925: IFFALSE 76972
// begin hc_class = 13 ;
76927: LD_ADDR_OWVAR 28
76931: PUSH
76932: LD_INT 13
76934: ST_TO_ADDR
// hc_gallery =  ;
76935: LD_ADDR_OWVAR 33
76939: PUSH
76940: LD_STRING 
76942: ST_TO_ADDR
// animal := CreateHuman ;
76943: LD_ADDR_VAR 0 12
76947: PUSH
76948: CALL_OW 44
76952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76953: LD_VAR 0 12
76957: PPUSH
76958: LD_VAR 0 8
76962: PPUSH
76963: LD_INT 0
76965: PPUSH
76966: CALL 78674 0 3
// end ;
76970: GO 76924
76972: POP
76973: POP
// if fishes then
76974: LD_VAR 0 7
76978: IFFALSE 77045
// for i = 1 to fishes do
76980: LD_ADDR_VAR 0 11
76984: PUSH
76985: DOUBLE
76986: LD_INT 1
76988: DEC
76989: ST_TO_ADDR
76990: LD_VAR 0 7
76994: PUSH
76995: FOR_TO
76996: IFFALSE 77043
// begin hc_class = 20 ;
76998: LD_ADDR_OWVAR 28
77002: PUSH
77003: LD_INT 20
77005: ST_TO_ADDR
// hc_gallery =  ;
77006: LD_ADDR_OWVAR 33
77010: PUSH
77011: LD_STRING 
77013: ST_TO_ADDR
// animal := CreateHuman ;
77014: LD_ADDR_VAR 0 12
77018: PUSH
77019: CALL_OW 44
77023: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77024: LD_VAR 0 12
77028: PPUSH
77029: LD_VAR 0 9
77033: PPUSH
77034: LD_INT 0
77036: PPUSH
77037: CALL 78674 0 3
// end ;
77041: GO 76995
77043: POP
77044: POP
// end ;
77045: LD_VAR 0 10
77049: RET
// export function WantHeal ( sci , unit ) ; begin
77050: LD_INT 0
77052: PPUSH
// if GetTaskList ( sci ) > 0 then
77053: LD_VAR 0 1
77057: PPUSH
77058: CALL_OW 437
77062: PUSH
77063: LD_INT 0
77065: GREATER
77066: IFFALSE 77136
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77068: LD_VAR 0 1
77072: PPUSH
77073: CALL_OW 437
77077: PUSH
77078: LD_INT 1
77080: ARRAY
77081: PUSH
77082: LD_INT 1
77084: ARRAY
77085: PUSH
77086: LD_STRING l
77088: EQUAL
77089: PUSH
77090: LD_VAR 0 1
77094: PPUSH
77095: CALL_OW 437
77099: PUSH
77100: LD_INT 1
77102: ARRAY
77103: PUSH
77104: LD_INT 4
77106: ARRAY
77107: PUSH
77108: LD_VAR 0 2
77112: EQUAL
77113: AND
77114: IFFALSE 77126
// result := true else
77116: LD_ADDR_VAR 0 3
77120: PUSH
77121: LD_INT 1
77123: ST_TO_ADDR
77124: GO 77134
// result := false ;
77126: LD_ADDR_VAR 0 3
77130: PUSH
77131: LD_INT 0
77133: ST_TO_ADDR
// end else
77134: GO 77144
// result := false ;
77136: LD_ADDR_VAR 0 3
77140: PUSH
77141: LD_INT 0
77143: ST_TO_ADDR
// end ;
77144: LD_VAR 0 3
77148: RET
// export function HealTarget ( sci ) ; begin
77149: LD_INT 0
77151: PPUSH
// if not sci then
77152: LD_VAR 0 1
77156: NOT
77157: IFFALSE 77161
// exit ;
77159: GO 77226
// result := 0 ;
77161: LD_ADDR_VAR 0 2
77165: PUSH
77166: LD_INT 0
77168: ST_TO_ADDR
// if GetTaskList ( sci ) then
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 437
77178: IFFALSE 77226
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77180: LD_VAR 0 1
77184: PPUSH
77185: CALL_OW 437
77189: PUSH
77190: LD_INT 1
77192: ARRAY
77193: PUSH
77194: LD_INT 1
77196: ARRAY
77197: PUSH
77198: LD_STRING l
77200: EQUAL
77201: IFFALSE 77226
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77203: LD_ADDR_VAR 0 2
77207: PUSH
77208: LD_VAR 0 1
77212: PPUSH
77213: CALL_OW 437
77217: PUSH
77218: LD_INT 1
77220: ARRAY
77221: PUSH
77222: LD_INT 4
77224: ARRAY
77225: ST_TO_ADDR
// end ;
77226: LD_VAR 0 2
77230: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77231: LD_INT 0
77233: PPUSH
77234: PPUSH
77235: PPUSH
77236: PPUSH
// if not base_units then
77237: LD_VAR 0 1
77241: NOT
77242: IFFALSE 77246
// exit ;
77244: GO 77333
// result := false ;
77246: LD_ADDR_VAR 0 2
77250: PUSH
77251: LD_INT 0
77253: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77254: LD_ADDR_VAR 0 5
77258: PUSH
77259: LD_VAR 0 1
77263: PPUSH
77264: LD_INT 21
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PPUSH
77274: CALL_OW 72
77278: ST_TO_ADDR
// if not tmp then
77279: LD_VAR 0 5
77283: NOT
77284: IFFALSE 77288
// exit ;
77286: GO 77333
// for i in tmp do
77288: LD_ADDR_VAR 0 3
77292: PUSH
77293: LD_VAR 0 5
77297: PUSH
77298: FOR_IN
77299: IFFALSE 77331
// begin result := EnemyInRange ( i , 22 ) ;
77301: LD_ADDR_VAR 0 2
77305: PUSH
77306: LD_VAR 0 3
77310: PPUSH
77311: LD_INT 22
77313: PPUSH
77314: CALL 74920 0 2
77318: ST_TO_ADDR
// if result then
77319: LD_VAR 0 2
77323: IFFALSE 77329
// exit ;
77325: POP
77326: POP
77327: GO 77333
// end ;
77329: GO 77298
77331: POP
77332: POP
// end ;
77333: LD_VAR 0 2
77337: RET
// export function FilterByTag ( units , tag ) ; begin
77338: LD_INT 0
77340: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77341: LD_ADDR_VAR 0 3
77345: PUSH
77346: LD_VAR 0 1
77350: PPUSH
77351: LD_INT 120
77353: PUSH
77354: LD_VAR 0 2
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: PPUSH
77363: CALL_OW 72
77367: ST_TO_ADDR
// end ;
77368: LD_VAR 0 3
77372: RET
// export function IsDriver ( un ) ; begin
77373: LD_INT 0
77375: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77376: LD_ADDR_VAR 0 2
77380: PUSH
77381: LD_VAR 0 1
77385: PUSH
77386: LD_INT 55
77388: PUSH
77389: EMPTY
77390: LIST
77391: PPUSH
77392: CALL_OW 69
77396: IN
77397: ST_TO_ADDR
// end ;
77398: LD_VAR 0 2
77402: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77403: LD_INT 0
77405: PPUSH
77406: PPUSH
// list := [ ] ;
77407: LD_ADDR_VAR 0 5
77411: PUSH
77412: EMPTY
77413: ST_TO_ADDR
// case d of 0 :
77414: LD_VAR 0 3
77418: PUSH
77419: LD_INT 0
77421: DOUBLE
77422: EQUAL
77423: IFTRUE 77427
77425: GO 77560
77427: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77428: LD_ADDR_VAR 0 5
77432: PUSH
77433: LD_VAR 0 1
77437: PUSH
77438: LD_INT 4
77440: MINUS
77441: PUSH
77442: LD_VAR 0 2
77446: PUSH
77447: LD_INT 4
77449: MINUS
77450: PUSH
77451: LD_INT 2
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: PUSH
77459: LD_VAR 0 1
77463: PUSH
77464: LD_INT 3
77466: MINUS
77467: PUSH
77468: LD_VAR 0 2
77472: PUSH
77473: LD_INT 1
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: LIST
77480: PUSH
77481: LD_VAR 0 1
77485: PUSH
77486: LD_INT 4
77488: PLUS
77489: PUSH
77490: LD_VAR 0 2
77494: PUSH
77495: LD_INT 4
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: LIST
77502: PUSH
77503: LD_VAR 0 1
77507: PUSH
77508: LD_INT 3
77510: PLUS
77511: PUSH
77512: LD_VAR 0 2
77516: PUSH
77517: LD_INT 3
77519: PLUS
77520: PUSH
77521: LD_INT 5
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: LIST
77528: PUSH
77529: LD_VAR 0 1
77533: PUSH
77534: LD_VAR 0 2
77538: PUSH
77539: LD_INT 4
77541: PLUS
77542: PUSH
77543: LD_INT 0
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: LIST
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: ST_TO_ADDR
// end ; 1 :
77558: GO 78258
77560: LD_INT 1
77562: DOUBLE
77563: EQUAL
77564: IFTRUE 77568
77566: GO 77701
77568: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77569: LD_ADDR_VAR 0 5
77573: PUSH
77574: LD_VAR 0 1
77578: PUSH
77579: LD_VAR 0 2
77583: PUSH
77584: LD_INT 4
77586: MINUS
77587: PUSH
77588: LD_INT 3
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: LIST
77595: PUSH
77596: LD_VAR 0 1
77600: PUSH
77601: LD_INT 3
77603: MINUS
77604: PUSH
77605: LD_VAR 0 2
77609: PUSH
77610: LD_INT 3
77612: MINUS
77613: PUSH
77614: LD_INT 2
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: LIST
77621: PUSH
77622: LD_VAR 0 1
77626: PUSH
77627: LD_INT 4
77629: MINUS
77630: PUSH
77631: LD_VAR 0 2
77635: PUSH
77636: LD_INT 1
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: LIST
77643: PUSH
77644: LD_VAR 0 1
77648: PUSH
77649: LD_VAR 0 2
77653: PUSH
77654: LD_INT 3
77656: PLUS
77657: PUSH
77658: LD_INT 0
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: LIST
77665: PUSH
77666: LD_VAR 0 1
77670: PUSH
77671: LD_INT 4
77673: PLUS
77674: PUSH
77675: LD_VAR 0 2
77679: PUSH
77680: LD_INT 4
77682: PLUS
77683: PUSH
77684: LD_INT 5
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: LIST
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: ST_TO_ADDR
// end ; 2 :
77699: GO 78258
77701: LD_INT 2
77703: DOUBLE
77704: EQUAL
77705: IFTRUE 77709
77707: GO 77838
77709: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77710: LD_ADDR_VAR 0 5
77714: PUSH
77715: LD_VAR 0 1
77719: PUSH
77720: LD_VAR 0 2
77724: PUSH
77725: LD_INT 3
77727: MINUS
77728: PUSH
77729: LD_INT 3
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: LIST
77736: PUSH
77737: LD_VAR 0 1
77741: PUSH
77742: LD_INT 4
77744: PLUS
77745: PUSH
77746: LD_VAR 0 2
77750: PUSH
77751: LD_INT 4
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: LIST
77758: PUSH
77759: LD_VAR 0 1
77763: PUSH
77764: LD_VAR 0 2
77768: PUSH
77769: LD_INT 4
77771: PLUS
77772: PUSH
77773: LD_INT 0
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: LIST
77780: PUSH
77781: LD_VAR 0 1
77785: PUSH
77786: LD_INT 3
77788: MINUS
77789: PUSH
77790: LD_VAR 0 2
77794: PUSH
77795: LD_INT 1
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: LIST
77802: PUSH
77803: LD_VAR 0 1
77807: PUSH
77808: LD_INT 4
77810: MINUS
77811: PUSH
77812: LD_VAR 0 2
77816: PUSH
77817: LD_INT 4
77819: MINUS
77820: PUSH
77821: LD_INT 2
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: LIST
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: ST_TO_ADDR
// end ; 3 :
77836: GO 78258
77838: LD_INT 3
77840: DOUBLE
77841: EQUAL
77842: IFTRUE 77846
77844: GO 77979
77846: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77847: LD_ADDR_VAR 0 5
77851: PUSH
77852: LD_VAR 0 1
77856: PUSH
77857: LD_INT 3
77859: PLUS
77860: PUSH
77861: LD_VAR 0 2
77865: PUSH
77866: LD_INT 4
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: PUSH
77874: LD_VAR 0 1
77878: PUSH
77879: LD_INT 4
77881: PLUS
77882: PUSH
77883: LD_VAR 0 2
77887: PUSH
77888: LD_INT 4
77890: PLUS
77891: PUSH
77892: LD_INT 5
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: LIST
77899: PUSH
77900: LD_VAR 0 1
77904: PUSH
77905: LD_INT 4
77907: MINUS
77908: PUSH
77909: LD_VAR 0 2
77913: PUSH
77914: LD_INT 1
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: LIST
77921: PUSH
77922: LD_VAR 0 1
77926: PUSH
77927: LD_VAR 0 2
77931: PUSH
77932: LD_INT 4
77934: MINUS
77935: PUSH
77936: LD_INT 3
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: LIST
77943: PUSH
77944: LD_VAR 0 1
77948: PUSH
77949: LD_INT 3
77951: MINUS
77952: PUSH
77953: LD_VAR 0 2
77957: PUSH
77958: LD_INT 3
77960: MINUS
77961: PUSH
77962: LD_INT 2
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: LIST
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: ST_TO_ADDR
// end ; 4 :
77977: GO 78258
77979: LD_INT 4
77981: DOUBLE
77982: EQUAL
77983: IFTRUE 77987
77985: GO 78120
77987: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77988: LD_ADDR_VAR 0 5
77992: PUSH
77993: LD_VAR 0 1
77997: PUSH
77998: LD_VAR 0 2
78002: PUSH
78003: LD_INT 4
78005: PLUS
78006: PUSH
78007: LD_INT 0
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: LIST
78014: PUSH
78015: LD_VAR 0 1
78019: PUSH
78020: LD_INT 3
78022: PLUS
78023: PUSH
78024: LD_VAR 0 2
78028: PUSH
78029: LD_INT 3
78031: PLUS
78032: PUSH
78033: LD_INT 5
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: PUSH
78041: LD_VAR 0 1
78045: PUSH
78046: LD_INT 4
78048: PLUS
78049: PUSH
78050: LD_VAR 0 2
78054: PUSH
78055: LD_INT 4
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: LIST
78062: PUSH
78063: LD_VAR 0 1
78067: PUSH
78068: LD_VAR 0 2
78072: PUSH
78073: LD_INT 3
78075: MINUS
78076: PUSH
78077: LD_INT 3
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: LIST
78084: PUSH
78085: LD_VAR 0 1
78089: PUSH
78090: LD_INT 4
78092: MINUS
78093: PUSH
78094: LD_VAR 0 2
78098: PUSH
78099: LD_INT 4
78101: MINUS
78102: PUSH
78103: LD_INT 2
78105: PUSH
78106: EMPTY
78107: LIST
78108: LIST
78109: LIST
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: ST_TO_ADDR
// end ; 5 :
78118: GO 78258
78120: LD_INT 5
78122: DOUBLE
78123: EQUAL
78124: IFTRUE 78128
78126: GO 78257
78128: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78129: LD_ADDR_VAR 0 5
78133: PUSH
78134: LD_VAR 0 1
78138: PUSH
78139: LD_INT 4
78141: MINUS
78142: PUSH
78143: LD_VAR 0 2
78147: PUSH
78148: LD_INT 1
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: LIST
78155: PUSH
78156: LD_VAR 0 1
78160: PUSH
78161: LD_VAR 0 2
78165: PUSH
78166: LD_INT 4
78168: MINUS
78169: PUSH
78170: LD_INT 3
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: LIST
78177: PUSH
78178: LD_VAR 0 1
78182: PUSH
78183: LD_INT 4
78185: PLUS
78186: PUSH
78187: LD_VAR 0 2
78191: PUSH
78192: LD_INT 4
78194: PLUS
78195: PUSH
78196: LD_INT 5
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: LIST
78203: PUSH
78204: LD_VAR 0 1
78208: PUSH
78209: LD_INT 3
78211: PLUS
78212: PUSH
78213: LD_VAR 0 2
78217: PUSH
78218: LD_INT 4
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: LIST
78225: PUSH
78226: LD_VAR 0 1
78230: PUSH
78231: LD_VAR 0 2
78235: PUSH
78236: LD_INT 3
78238: PLUS
78239: PUSH
78240: LD_INT 0
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: LIST
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: ST_TO_ADDR
// end ; end ;
78255: GO 78258
78257: POP
// result := list ;
78258: LD_ADDR_VAR 0 4
78262: PUSH
78263: LD_VAR 0 5
78267: ST_TO_ADDR
// end ;
78268: LD_VAR 0 4
78272: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78273: LD_INT 0
78275: PPUSH
78276: PPUSH
78277: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78278: LD_VAR 0 1
78282: NOT
78283: PUSH
78284: LD_VAR 0 2
78288: PUSH
78289: LD_INT 1
78291: PUSH
78292: LD_INT 2
78294: PUSH
78295: LD_INT 3
78297: PUSH
78298: LD_INT 4
78300: PUSH
78301: EMPTY
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: IN
78307: NOT
78308: OR
78309: IFFALSE 78313
// exit ;
78311: GO 78396
// tmp := [ ] ;
78313: LD_ADDR_VAR 0 5
78317: PUSH
78318: EMPTY
78319: ST_TO_ADDR
// for i in units do
78320: LD_ADDR_VAR 0 4
78324: PUSH
78325: LD_VAR 0 1
78329: PUSH
78330: FOR_IN
78331: IFFALSE 78365
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78333: LD_ADDR_VAR 0 5
78337: PUSH
78338: LD_VAR 0 5
78342: PPUSH
78343: LD_VAR 0 4
78347: PPUSH
78348: LD_VAR 0 2
78352: PPUSH
78353: CALL_OW 259
78357: PPUSH
78358: CALL 79769 0 2
78362: ST_TO_ADDR
78363: GO 78330
78365: POP
78366: POP
// if not tmp then
78367: LD_VAR 0 5
78371: NOT
78372: IFFALSE 78376
// exit ;
78374: GO 78396
// result := SortListByListDesc ( units , tmp ) ;
78376: LD_ADDR_VAR 0 3
78380: PUSH
78381: LD_VAR 0 1
78385: PPUSH
78386: LD_VAR 0 5
78390: PPUSH
78391: CALL_OW 77
78395: ST_TO_ADDR
// end ;
78396: LD_VAR 0 3
78400: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78401: LD_INT 0
78403: PPUSH
78404: PPUSH
78405: PPUSH
// result := false ;
78406: LD_ADDR_VAR 0 3
78410: PUSH
78411: LD_INT 0
78413: ST_TO_ADDR
// if not building then
78414: LD_VAR 0 2
78418: NOT
78419: IFFALSE 78423
// exit ;
78421: GO 78561
// x := GetX ( building ) ;
78423: LD_ADDR_VAR 0 4
78427: PUSH
78428: LD_VAR 0 2
78432: PPUSH
78433: CALL_OW 250
78437: ST_TO_ADDR
// y := GetY ( building ) ;
78438: LD_ADDR_VAR 0 5
78442: PUSH
78443: LD_VAR 0 2
78447: PPUSH
78448: CALL_OW 251
78452: ST_TO_ADDR
// if not x or not y then
78453: LD_VAR 0 4
78457: NOT
78458: PUSH
78459: LD_VAR 0 5
78463: NOT
78464: OR
78465: IFFALSE 78469
// exit ;
78467: GO 78561
// if GetTaskList ( unit ) then
78469: LD_VAR 0 1
78473: PPUSH
78474: CALL_OW 437
78478: IFFALSE 78561
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78480: LD_STRING e
78482: PUSH
78483: LD_VAR 0 1
78487: PPUSH
78488: CALL_OW 437
78492: PUSH
78493: LD_INT 1
78495: ARRAY
78496: PUSH
78497: LD_INT 1
78499: ARRAY
78500: EQUAL
78501: PUSH
78502: LD_VAR 0 4
78506: PUSH
78507: LD_VAR 0 1
78511: PPUSH
78512: CALL_OW 437
78516: PUSH
78517: LD_INT 1
78519: ARRAY
78520: PUSH
78521: LD_INT 2
78523: ARRAY
78524: EQUAL
78525: AND
78526: PUSH
78527: LD_VAR 0 5
78531: PUSH
78532: LD_VAR 0 1
78536: PPUSH
78537: CALL_OW 437
78541: PUSH
78542: LD_INT 1
78544: ARRAY
78545: PUSH
78546: LD_INT 3
78548: ARRAY
78549: EQUAL
78550: AND
78551: IFFALSE 78561
// result := true end ;
78553: LD_ADDR_VAR 0 3
78557: PUSH
78558: LD_INT 1
78560: ST_TO_ADDR
// end ;
78561: LD_VAR 0 3
78565: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78566: LD_INT 0
78568: PPUSH
// result := false ;
78569: LD_ADDR_VAR 0 4
78573: PUSH
78574: LD_INT 0
78576: ST_TO_ADDR
// if GetTaskList ( unit ) then
78577: LD_VAR 0 1
78581: PPUSH
78582: CALL_OW 437
78586: IFFALSE 78669
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78588: LD_STRING M
78590: PUSH
78591: LD_VAR 0 1
78595: PPUSH
78596: CALL_OW 437
78600: PUSH
78601: LD_INT 1
78603: ARRAY
78604: PUSH
78605: LD_INT 1
78607: ARRAY
78608: EQUAL
78609: PUSH
78610: LD_VAR 0 2
78614: PUSH
78615: LD_VAR 0 1
78619: PPUSH
78620: CALL_OW 437
78624: PUSH
78625: LD_INT 1
78627: ARRAY
78628: PUSH
78629: LD_INT 2
78631: ARRAY
78632: EQUAL
78633: AND
78634: PUSH
78635: LD_VAR 0 3
78639: PUSH
78640: LD_VAR 0 1
78644: PPUSH
78645: CALL_OW 437
78649: PUSH
78650: LD_INT 1
78652: ARRAY
78653: PUSH
78654: LD_INT 3
78656: ARRAY
78657: EQUAL
78658: AND
78659: IFFALSE 78669
// result := true ;
78661: LD_ADDR_VAR 0 4
78665: PUSH
78666: LD_INT 1
78668: ST_TO_ADDR
// end ; end ;
78669: LD_VAR 0 4
78673: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78674: LD_INT 0
78676: PPUSH
78677: PPUSH
78678: PPUSH
78679: PPUSH
// if not unit or not area then
78680: LD_VAR 0 1
78684: NOT
78685: PUSH
78686: LD_VAR 0 2
78690: NOT
78691: OR
78692: IFFALSE 78696
// exit ;
78694: GO 78872
// tmp := AreaToList ( area , i ) ;
78696: LD_ADDR_VAR 0 6
78700: PUSH
78701: LD_VAR 0 2
78705: PPUSH
78706: LD_VAR 0 5
78710: PPUSH
78711: CALL_OW 517
78715: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78716: LD_ADDR_VAR 0 5
78720: PUSH
78721: DOUBLE
78722: LD_INT 1
78724: DEC
78725: ST_TO_ADDR
78726: LD_VAR 0 6
78730: PUSH
78731: LD_INT 1
78733: ARRAY
78734: PUSH
78735: FOR_TO
78736: IFFALSE 78870
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78738: LD_ADDR_VAR 0 7
78742: PUSH
78743: LD_VAR 0 6
78747: PUSH
78748: LD_INT 1
78750: ARRAY
78751: PUSH
78752: LD_VAR 0 5
78756: ARRAY
78757: PUSH
78758: LD_VAR 0 6
78762: PUSH
78763: LD_INT 2
78765: ARRAY
78766: PUSH
78767: LD_VAR 0 5
78771: ARRAY
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78777: LD_INT 92
78779: PUSH
78780: LD_VAR 0 7
78784: PUSH
78785: LD_INT 1
78787: ARRAY
78788: PUSH
78789: LD_VAR 0 7
78793: PUSH
78794: LD_INT 2
78796: ARRAY
78797: PUSH
78798: LD_INT 2
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: PPUSH
78807: CALL_OW 69
78811: PUSH
78812: LD_INT 0
78814: EQUAL
78815: IFFALSE 78868
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78817: LD_VAR 0 1
78821: PPUSH
78822: LD_VAR 0 7
78826: PUSH
78827: LD_INT 1
78829: ARRAY
78830: PPUSH
78831: LD_VAR 0 7
78835: PUSH
78836: LD_INT 2
78838: ARRAY
78839: PPUSH
78840: LD_VAR 0 3
78844: PPUSH
78845: CALL_OW 48
// result := IsPlaced ( unit ) ;
78849: LD_ADDR_VAR 0 4
78853: PUSH
78854: LD_VAR 0 1
78858: PPUSH
78859: CALL_OW 305
78863: ST_TO_ADDR
// exit ;
78864: POP
78865: POP
78866: GO 78872
// end ; end ;
78868: GO 78735
78870: POP
78871: POP
// end ;
78872: LD_VAR 0 4
78876: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78877: LD_INT 0
78879: PPUSH
78880: PPUSH
78881: PPUSH
// if not side or side > 8 then
78882: LD_VAR 0 1
78886: NOT
78887: PUSH
78888: LD_VAR 0 1
78892: PUSH
78893: LD_INT 8
78895: GREATER
78896: OR
78897: IFFALSE 78901
// exit ;
78899: GO 79088
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78901: LD_ADDR_VAR 0 4
78905: PUSH
78906: LD_INT 22
78908: PUSH
78909: LD_VAR 0 1
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: PUSH
78918: LD_INT 21
78920: PUSH
78921: LD_INT 3
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PPUSH
78932: CALL_OW 69
78936: ST_TO_ADDR
// if not tmp then
78937: LD_VAR 0 4
78941: NOT
78942: IFFALSE 78946
// exit ;
78944: GO 79088
// enable_addtolog := true ;
78946: LD_ADDR_OWVAR 81
78950: PUSH
78951: LD_INT 1
78953: ST_TO_ADDR
// AddToLog ( [ ) ;
78954: LD_STRING [
78956: PPUSH
78957: CALL_OW 561
// for i in tmp do
78961: LD_ADDR_VAR 0 3
78965: PUSH
78966: LD_VAR 0 4
78970: PUSH
78971: FOR_IN
78972: IFFALSE 79079
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78974: LD_STRING [
78976: PUSH
78977: LD_VAR 0 3
78981: PPUSH
78982: CALL_OW 266
78986: STR
78987: PUSH
78988: LD_STRING , 
78990: STR
78991: PUSH
78992: LD_VAR 0 3
78996: PPUSH
78997: CALL_OW 250
79001: STR
79002: PUSH
79003: LD_STRING , 
79005: STR
79006: PUSH
79007: LD_VAR 0 3
79011: PPUSH
79012: CALL_OW 251
79016: STR
79017: PUSH
79018: LD_STRING , 
79020: STR
79021: PUSH
79022: LD_VAR 0 3
79026: PPUSH
79027: CALL_OW 254
79031: STR
79032: PUSH
79033: LD_STRING , 
79035: STR
79036: PUSH
79037: LD_VAR 0 3
79041: PPUSH
79042: LD_INT 1
79044: PPUSH
79045: CALL_OW 268
79049: STR
79050: PUSH
79051: LD_STRING , 
79053: STR
79054: PUSH
79055: LD_VAR 0 3
79059: PPUSH
79060: LD_INT 2
79062: PPUSH
79063: CALL_OW 268
79067: STR
79068: PUSH
79069: LD_STRING ],
79071: STR
79072: PPUSH
79073: CALL_OW 561
// end ;
79077: GO 78971
79079: POP
79080: POP
// AddToLog ( ]; ) ;
79081: LD_STRING ];
79083: PPUSH
79084: CALL_OW 561
// end ;
79088: LD_VAR 0 2
79092: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79093: LD_INT 0
79095: PPUSH
79096: PPUSH
79097: PPUSH
79098: PPUSH
79099: PPUSH
// if not area or not rate or not max then
79100: LD_VAR 0 1
79104: NOT
79105: PUSH
79106: LD_VAR 0 2
79110: NOT
79111: OR
79112: PUSH
79113: LD_VAR 0 4
79117: NOT
79118: OR
79119: IFFALSE 79123
// exit ;
79121: GO 79312
// while 1 do
79123: LD_INT 1
79125: IFFALSE 79312
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79127: LD_ADDR_VAR 0 9
79131: PUSH
79132: LD_VAR 0 1
79136: PPUSH
79137: LD_INT 1
79139: PPUSH
79140: CALL_OW 287
79144: PUSH
79145: LD_INT 10
79147: MUL
79148: ST_TO_ADDR
// r := rate / 10 ;
79149: LD_ADDR_VAR 0 7
79153: PUSH
79154: LD_VAR 0 2
79158: PUSH
79159: LD_INT 10
79161: DIVREAL
79162: ST_TO_ADDR
// time := 1 1$00 ;
79163: LD_ADDR_VAR 0 8
79167: PUSH
79168: LD_INT 2100
79170: ST_TO_ADDR
// if amount < min then
79171: LD_VAR 0 9
79175: PUSH
79176: LD_VAR 0 3
79180: LESS
79181: IFFALSE 79199
// r := r * 2 else
79183: LD_ADDR_VAR 0 7
79187: PUSH
79188: LD_VAR 0 7
79192: PUSH
79193: LD_INT 2
79195: MUL
79196: ST_TO_ADDR
79197: GO 79225
// if amount > max then
79199: LD_VAR 0 9
79203: PUSH
79204: LD_VAR 0 4
79208: GREATER
79209: IFFALSE 79225
// r := r / 2 ;
79211: LD_ADDR_VAR 0 7
79215: PUSH
79216: LD_VAR 0 7
79220: PUSH
79221: LD_INT 2
79223: DIVREAL
79224: ST_TO_ADDR
// time := time / r ;
79225: LD_ADDR_VAR 0 8
79229: PUSH
79230: LD_VAR 0 8
79234: PUSH
79235: LD_VAR 0 7
79239: DIVREAL
79240: ST_TO_ADDR
// if time < 0 then
79241: LD_VAR 0 8
79245: PUSH
79246: LD_INT 0
79248: LESS
79249: IFFALSE 79266
// time := time * - 1 ;
79251: LD_ADDR_VAR 0 8
79255: PUSH
79256: LD_VAR 0 8
79260: PUSH
79261: LD_INT 1
79263: NEG
79264: MUL
79265: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79266: LD_VAR 0 8
79270: PUSH
79271: LD_INT 35
79273: PPUSH
79274: LD_INT 875
79276: PPUSH
79277: CALL_OW 12
79281: PLUS
79282: PPUSH
79283: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79287: LD_INT 1
79289: PPUSH
79290: LD_INT 5
79292: PPUSH
79293: CALL_OW 12
79297: PPUSH
79298: LD_VAR 0 1
79302: PPUSH
79303: LD_INT 1
79305: PPUSH
79306: CALL_OW 55
// end ;
79310: GO 79123
// end ;
79312: LD_VAR 0 5
79316: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79317: LD_INT 0
79319: PPUSH
79320: PPUSH
79321: PPUSH
79322: PPUSH
79323: PPUSH
79324: PPUSH
79325: PPUSH
79326: PPUSH
// if not turrets or not factories then
79327: LD_VAR 0 1
79331: NOT
79332: PUSH
79333: LD_VAR 0 2
79337: NOT
79338: OR
79339: IFFALSE 79343
// exit ;
79341: GO 79650
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79343: LD_ADDR_VAR 0 10
79347: PUSH
79348: LD_INT 5
79350: PUSH
79351: LD_INT 6
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PUSH
79358: LD_INT 2
79360: PUSH
79361: LD_INT 4
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 3
79370: PUSH
79371: LD_INT 5
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 24
79385: PUSH
79386: LD_INT 25
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: PUSH
79393: LD_INT 23
79395: PUSH
79396: LD_INT 27
79398: PUSH
79399: EMPTY
79400: LIST
79401: LIST
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 42
79409: PUSH
79410: LD_INT 43
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 44
79419: PUSH
79420: LD_INT 46
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 45
79429: PUSH
79430: LD_INT 47
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: LIST
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: LIST
79446: ST_TO_ADDR
// result := [ ] ;
79447: LD_ADDR_VAR 0 3
79451: PUSH
79452: EMPTY
79453: ST_TO_ADDR
// for i in turrets do
79454: LD_ADDR_VAR 0 4
79458: PUSH
79459: LD_VAR 0 1
79463: PUSH
79464: FOR_IN
79465: IFFALSE 79648
// begin nat := GetNation ( i ) ;
79467: LD_ADDR_VAR 0 7
79471: PUSH
79472: LD_VAR 0 4
79476: PPUSH
79477: CALL_OW 248
79481: ST_TO_ADDR
// weapon := 0 ;
79482: LD_ADDR_VAR 0 8
79486: PUSH
79487: LD_INT 0
79489: ST_TO_ADDR
// if not nat then
79490: LD_VAR 0 7
79494: NOT
79495: IFFALSE 79499
// continue ;
79497: GO 79464
// for j in list [ nat ] do
79499: LD_ADDR_VAR 0 5
79503: PUSH
79504: LD_VAR 0 10
79508: PUSH
79509: LD_VAR 0 7
79513: ARRAY
79514: PUSH
79515: FOR_IN
79516: IFFALSE 79557
// if GetBWeapon ( i ) = j [ 1 ] then
79518: LD_VAR 0 4
79522: PPUSH
79523: CALL_OW 269
79527: PUSH
79528: LD_VAR 0 5
79532: PUSH
79533: LD_INT 1
79535: ARRAY
79536: EQUAL
79537: IFFALSE 79555
// begin weapon := j [ 2 ] ;
79539: LD_ADDR_VAR 0 8
79543: PUSH
79544: LD_VAR 0 5
79548: PUSH
79549: LD_INT 2
79551: ARRAY
79552: ST_TO_ADDR
// break ;
79553: GO 79557
// end ;
79555: GO 79515
79557: POP
79558: POP
// if not weapon then
79559: LD_VAR 0 8
79563: NOT
79564: IFFALSE 79568
// continue ;
79566: GO 79464
// for k in factories do
79568: LD_ADDR_VAR 0 6
79572: PUSH
79573: LD_VAR 0 2
79577: PUSH
79578: FOR_IN
79579: IFFALSE 79644
// begin weapons := AvailableWeaponList ( k ) ;
79581: LD_ADDR_VAR 0 9
79585: PUSH
79586: LD_VAR 0 6
79590: PPUSH
79591: CALL_OW 478
79595: ST_TO_ADDR
// if not weapons then
79596: LD_VAR 0 9
79600: NOT
79601: IFFALSE 79605
// continue ;
79603: GO 79578
// if weapon in weapons then
79605: LD_VAR 0 8
79609: PUSH
79610: LD_VAR 0 9
79614: IN
79615: IFFALSE 79642
// begin result := [ i , weapon ] ;
79617: LD_ADDR_VAR 0 3
79621: PUSH
79622: LD_VAR 0 4
79626: PUSH
79627: LD_VAR 0 8
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: ST_TO_ADDR
// exit ;
79636: POP
79637: POP
79638: POP
79639: POP
79640: GO 79650
// end ; end ;
79642: GO 79578
79644: POP
79645: POP
// end ;
79646: GO 79464
79648: POP
79649: POP
// end ;
79650: LD_VAR 0 3
79654: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79655: LD_INT 0
79657: PPUSH
// if not side or side > 8 then
79658: LD_VAR 0 3
79662: NOT
79663: PUSH
79664: LD_VAR 0 3
79668: PUSH
79669: LD_INT 8
79671: GREATER
79672: OR
79673: IFFALSE 79677
// exit ;
79675: GO 79736
// if not range then
79677: LD_VAR 0 4
79681: NOT
79682: IFFALSE 79693
// range := - 12 ;
79684: LD_ADDR_VAR 0 4
79688: PUSH
79689: LD_INT 12
79691: NEG
79692: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79693: LD_VAR 0 1
79697: PPUSH
79698: LD_VAR 0 2
79702: PPUSH
79703: LD_VAR 0 3
79707: PPUSH
79708: LD_VAR 0 4
79712: PPUSH
79713: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79717: LD_VAR 0 1
79721: PPUSH
79722: LD_VAR 0 2
79726: PPUSH
79727: LD_VAR 0 3
79731: PPUSH
79732: CALL_OW 331
// end ;
79736: LD_VAR 0 5
79740: RET
// export function Video ( mode ) ; begin
79741: LD_INT 0
79743: PPUSH
// ingame_video = mode ;
79744: LD_ADDR_OWVAR 52
79748: PUSH
79749: LD_VAR 0 1
79753: ST_TO_ADDR
// interface_hidden = mode ;
79754: LD_ADDR_OWVAR 54
79758: PUSH
79759: LD_VAR 0 1
79763: ST_TO_ADDR
// end ;
79764: LD_VAR 0 2
79768: RET
// export function Join ( array , element ) ; begin
79769: LD_INT 0
79771: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79772: LD_ADDR_VAR 0 3
79776: PUSH
79777: LD_VAR 0 1
79781: PPUSH
79782: LD_VAR 0 1
79786: PUSH
79787: LD_INT 1
79789: PLUS
79790: PPUSH
79791: LD_VAR 0 2
79795: PPUSH
79796: CALL_OW 1
79800: ST_TO_ADDR
// end ;
79801: LD_VAR 0 3
79805: RET
// export function JoinUnion ( array , element ) ; begin
79806: LD_INT 0
79808: PPUSH
// result := array union element ;
79809: LD_ADDR_VAR 0 3
79813: PUSH
79814: LD_VAR 0 1
79818: PUSH
79819: LD_VAR 0 2
79823: UNION
79824: ST_TO_ADDR
// end ;
79825: LD_VAR 0 3
79829: RET
// export function GetBehemoths ( side ) ; begin
79830: LD_INT 0
79832: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79833: LD_ADDR_VAR 0 2
79837: PUSH
79838: LD_INT 22
79840: PUSH
79841: LD_VAR 0 1
79845: PUSH
79846: EMPTY
79847: LIST
79848: LIST
79849: PUSH
79850: LD_INT 31
79852: PUSH
79853: LD_INT 25
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PPUSH
79864: CALL_OW 69
79868: ST_TO_ADDR
// end ;
79869: LD_VAR 0 2
79873: RET
// export function Shuffle ( array ) ; var i , index ; begin
79874: LD_INT 0
79876: PPUSH
79877: PPUSH
79878: PPUSH
// result := [ ] ;
79879: LD_ADDR_VAR 0 2
79883: PUSH
79884: EMPTY
79885: ST_TO_ADDR
// if not array then
79886: LD_VAR 0 1
79890: NOT
79891: IFFALSE 79895
// exit ;
79893: GO 79994
// Randomize ;
79895: CALL_OW 10
// for i = array downto 1 do
79899: LD_ADDR_VAR 0 3
79903: PUSH
79904: DOUBLE
79905: LD_VAR 0 1
79909: INC
79910: ST_TO_ADDR
79911: LD_INT 1
79913: PUSH
79914: FOR_DOWNTO
79915: IFFALSE 79992
// begin index := rand ( 1 , array ) ;
79917: LD_ADDR_VAR 0 4
79921: PUSH
79922: LD_INT 1
79924: PPUSH
79925: LD_VAR 0 1
79929: PPUSH
79930: CALL_OW 12
79934: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79935: LD_ADDR_VAR 0 2
79939: PUSH
79940: LD_VAR 0 2
79944: PPUSH
79945: LD_VAR 0 2
79949: PUSH
79950: LD_INT 1
79952: PLUS
79953: PPUSH
79954: LD_VAR 0 1
79958: PUSH
79959: LD_VAR 0 4
79963: ARRAY
79964: PPUSH
79965: CALL_OW 2
79969: ST_TO_ADDR
// array := Delete ( array , index ) ;
79970: LD_ADDR_VAR 0 1
79974: PUSH
79975: LD_VAR 0 1
79979: PPUSH
79980: LD_VAR 0 4
79984: PPUSH
79985: CALL_OW 3
79989: ST_TO_ADDR
// end ;
79990: GO 79914
79992: POP
79993: POP
// end ;
79994: LD_VAR 0 2
79998: RET
// export function GetBaseMaterials ( base ) ; begin
79999: LD_INT 0
80001: PPUSH
// result := [ 0 , 0 , 0 ] ;
80002: LD_ADDR_VAR 0 2
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: LD_INT 0
80012: PUSH
80013: LD_INT 0
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: LIST
80020: ST_TO_ADDR
// if not base then
80021: LD_VAR 0 1
80025: NOT
80026: IFFALSE 80030
// exit ;
80028: GO 80079
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80030: LD_ADDR_VAR 0 2
80034: PUSH
80035: LD_VAR 0 1
80039: PPUSH
80040: LD_INT 1
80042: PPUSH
80043: CALL_OW 275
80047: PUSH
80048: LD_VAR 0 1
80052: PPUSH
80053: LD_INT 2
80055: PPUSH
80056: CALL_OW 275
80060: PUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: LD_INT 3
80068: PPUSH
80069: CALL_OW 275
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: LIST
80078: ST_TO_ADDR
// end ;
80079: LD_VAR 0 2
80083: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80084: LD_INT 0
80086: PPUSH
80087: PPUSH
// result := array ;
80088: LD_ADDR_VAR 0 3
80092: PUSH
80093: LD_VAR 0 1
80097: ST_TO_ADDR
// if size >= result then
80098: LD_VAR 0 2
80102: PUSH
80103: LD_VAR 0 3
80107: GREATEREQUAL
80108: IFFALSE 80112
// exit ;
80110: GO 80162
// if size then
80112: LD_VAR 0 2
80116: IFFALSE 80162
// for i := array downto size do
80118: LD_ADDR_VAR 0 4
80122: PUSH
80123: DOUBLE
80124: LD_VAR 0 1
80128: INC
80129: ST_TO_ADDR
80130: LD_VAR 0 2
80134: PUSH
80135: FOR_DOWNTO
80136: IFFALSE 80160
// result := Delete ( result , result ) ;
80138: LD_ADDR_VAR 0 3
80142: PUSH
80143: LD_VAR 0 3
80147: PPUSH
80148: LD_VAR 0 3
80152: PPUSH
80153: CALL_OW 3
80157: ST_TO_ADDR
80158: GO 80135
80160: POP
80161: POP
// end ;
80162: LD_VAR 0 3
80166: RET
// export function ComExit ( unit ) ; var tmp ; begin
80167: LD_INT 0
80169: PPUSH
80170: PPUSH
// if not IsInUnit ( unit ) then
80171: LD_VAR 0 1
80175: PPUSH
80176: CALL_OW 310
80180: NOT
80181: IFFALSE 80185
// exit ;
80183: GO 80245
// tmp := IsInUnit ( unit ) ;
80185: LD_ADDR_VAR 0 3
80189: PUSH
80190: LD_VAR 0 1
80194: PPUSH
80195: CALL_OW 310
80199: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80200: LD_VAR 0 3
80204: PPUSH
80205: CALL_OW 247
80209: PUSH
80210: LD_INT 2
80212: EQUAL
80213: IFFALSE 80226
// ComExitVehicle ( unit ) else
80215: LD_VAR 0 1
80219: PPUSH
80220: CALL_OW 121
80224: GO 80235
// ComExitBuilding ( unit ) ;
80226: LD_VAR 0 1
80230: PPUSH
80231: CALL_OW 122
// result := tmp ;
80235: LD_ADDR_VAR 0 2
80239: PUSH
80240: LD_VAR 0 3
80244: ST_TO_ADDR
// end ;
80245: LD_VAR 0 2
80249: RET
// export function ComExitAll ( units ) ; var i ; begin
80250: LD_INT 0
80252: PPUSH
80253: PPUSH
// if not units then
80254: LD_VAR 0 1
80258: NOT
80259: IFFALSE 80263
// exit ;
80261: GO 80289
// for i in units do
80263: LD_ADDR_VAR 0 3
80267: PUSH
80268: LD_VAR 0 1
80272: PUSH
80273: FOR_IN
80274: IFFALSE 80287
// ComExit ( i ) ;
80276: LD_VAR 0 3
80280: PPUSH
80281: CALL 80167 0 1
80285: GO 80273
80287: POP
80288: POP
// end ;
80289: LD_VAR 0 2
80293: RET
// export function ResetHc ; begin
80294: LD_INT 0
80296: PPUSH
// InitHc ;
80297: CALL_OW 19
// hc_importance := 0 ;
80301: LD_ADDR_OWVAR 32
80305: PUSH
80306: LD_INT 0
80308: ST_TO_ADDR
// end ;
80309: LD_VAR 0 1
80313: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80314: LD_INT 0
80316: PPUSH
80317: PPUSH
80318: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80319: LD_ADDR_VAR 0 6
80323: PUSH
80324: LD_VAR 0 1
80328: PUSH
80329: LD_VAR 0 3
80333: PLUS
80334: PUSH
80335: LD_INT 2
80337: DIV
80338: ST_TO_ADDR
// if _x < 0 then
80339: LD_VAR 0 6
80343: PUSH
80344: LD_INT 0
80346: LESS
80347: IFFALSE 80364
// _x := _x * - 1 ;
80349: LD_ADDR_VAR 0 6
80353: PUSH
80354: LD_VAR 0 6
80358: PUSH
80359: LD_INT 1
80361: NEG
80362: MUL
80363: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80364: LD_ADDR_VAR 0 7
80368: PUSH
80369: LD_VAR 0 2
80373: PUSH
80374: LD_VAR 0 4
80378: PLUS
80379: PUSH
80380: LD_INT 2
80382: DIV
80383: ST_TO_ADDR
// if _y < 0 then
80384: LD_VAR 0 7
80388: PUSH
80389: LD_INT 0
80391: LESS
80392: IFFALSE 80409
// _y := _y * - 1 ;
80394: LD_ADDR_VAR 0 7
80398: PUSH
80399: LD_VAR 0 7
80403: PUSH
80404: LD_INT 1
80406: NEG
80407: MUL
80408: ST_TO_ADDR
// result := [ _x , _y ] ;
80409: LD_ADDR_VAR 0 5
80413: PUSH
80414: LD_VAR 0 6
80418: PUSH
80419: LD_VAR 0 7
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: ST_TO_ADDR
// end ;
80428: LD_VAR 0 5
80432: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80433: LD_INT 0
80435: PPUSH
80436: PPUSH
80437: PPUSH
80438: PPUSH
// task := GetTaskList ( unit ) ;
80439: LD_ADDR_VAR 0 7
80443: PUSH
80444: LD_VAR 0 1
80448: PPUSH
80449: CALL_OW 437
80453: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80454: LD_VAR 0 7
80458: NOT
80459: PUSH
80460: LD_VAR 0 1
80464: PPUSH
80465: LD_VAR 0 2
80469: PPUSH
80470: CALL_OW 308
80474: NOT
80475: AND
80476: IFFALSE 80480
// exit ;
80478: GO 80598
// if IsInArea ( unit , area ) then
80480: LD_VAR 0 1
80484: PPUSH
80485: LD_VAR 0 2
80489: PPUSH
80490: CALL_OW 308
80494: IFFALSE 80512
// begin ComMoveToArea ( unit , goAway ) ;
80496: LD_VAR 0 1
80500: PPUSH
80501: LD_VAR 0 3
80505: PPUSH
80506: CALL_OW 113
// exit ;
80510: GO 80598
// end ; if task [ 1 ] [ 1 ] <> M then
80512: LD_VAR 0 7
80516: PUSH
80517: LD_INT 1
80519: ARRAY
80520: PUSH
80521: LD_INT 1
80523: ARRAY
80524: PUSH
80525: LD_STRING M
80527: NONEQUAL
80528: IFFALSE 80532
// exit ;
80530: GO 80598
// x := task [ 1 ] [ 2 ] ;
80532: LD_ADDR_VAR 0 5
80536: PUSH
80537: LD_VAR 0 7
80541: PUSH
80542: LD_INT 1
80544: ARRAY
80545: PUSH
80546: LD_INT 2
80548: ARRAY
80549: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80550: LD_ADDR_VAR 0 6
80554: PUSH
80555: LD_VAR 0 7
80559: PUSH
80560: LD_INT 1
80562: ARRAY
80563: PUSH
80564: LD_INT 3
80566: ARRAY
80567: ST_TO_ADDR
// if InArea ( x , y , area ) then
80568: LD_VAR 0 5
80572: PPUSH
80573: LD_VAR 0 6
80577: PPUSH
80578: LD_VAR 0 2
80582: PPUSH
80583: CALL_OW 309
80587: IFFALSE 80598
// ComStop ( unit ) ;
80589: LD_VAR 0 1
80593: PPUSH
80594: CALL_OW 141
// end ;
80598: LD_VAR 0 4
80602: RET
// export function Abs ( value ) ; begin
80603: LD_INT 0
80605: PPUSH
// result := value ;
80606: LD_ADDR_VAR 0 2
80610: PUSH
80611: LD_VAR 0 1
80615: ST_TO_ADDR
// if value < 0 then
80616: LD_VAR 0 1
80620: PUSH
80621: LD_INT 0
80623: LESS
80624: IFFALSE 80641
// result := value * - 1 ;
80626: LD_ADDR_VAR 0 2
80630: PUSH
80631: LD_VAR 0 1
80635: PUSH
80636: LD_INT 1
80638: NEG
80639: MUL
80640: ST_TO_ADDR
// end ;
80641: LD_VAR 0 2
80645: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80646: LD_INT 0
80648: PPUSH
80649: PPUSH
80650: PPUSH
80651: PPUSH
80652: PPUSH
80653: PPUSH
80654: PPUSH
80655: PPUSH
// if not unit or not building then
80656: LD_VAR 0 1
80660: NOT
80661: PUSH
80662: LD_VAR 0 2
80666: NOT
80667: OR
80668: IFFALSE 80672
// exit ;
80670: GO 80898
// x := GetX ( building ) ;
80672: LD_ADDR_VAR 0 4
80676: PUSH
80677: LD_VAR 0 2
80681: PPUSH
80682: CALL_OW 250
80686: ST_TO_ADDR
// y := GetY ( building ) ;
80687: LD_ADDR_VAR 0 6
80691: PUSH
80692: LD_VAR 0 2
80696: PPUSH
80697: CALL_OW 251
80701: ST_TO_ADDR
// d := GetDir ( building ) ;
80702: LD_ADDR_VAR 0 8
80706: PUSH
80707: LD_VAR 0 2
80711: PPUSH
80712: CALL_OW 254
80716: ST_TO_ADDR
// r := 4 ;
80717: LD_ADDR_VAR 0 9
80721: PUSH
80722: LD_INT 4
80724: ST_TO_ADDR
// for i := 1 to 5 do
80725: LD_ADDR_VAR 0 10
80729: PUSH
80730: DOUBLE
80731: LD_INT 1
80733: DEC
80734: ST_TO_ADDR
80735: LD_INT 5
80737: PUSH
80738: FOR_TO
80739: IFFALSE 80896
// begin _x := ShiftX ( x , d , r + i ) ;
80741: LD_ADDR_VAR 0 5
80745: PUSH
80746: LD_VAR 0 4
80750: PPUSH
80751: LD_VAR 0 8
80755: PPUSH
80756: LD_VAR 0 9
80760: PUSH
80761: LD_VAR 0 10
80765: PLUS
80766: PPUSH
80767: CALL_OW 272
80771: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80772: LD_ADDR_VAR 0 7
80776: PUSH
80777: LD_VAR 0 6
80781: PPUSH
80782: LD_VAR 0 8
80786: PPUSH
80787: LD_VAR 0 9
80791: PUSH
80792: LD_VAR 0 10
80796: PLUS
80797: PPUSH
80798: CALL_OW 273
80802: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80803: LD_VAR 0 5
80807: PPUSH
80808: LD_VAR 0 7
80812: PPUSH
80813: CALL_OW 488
80817: PUSH
80818: LD_VAR 0 5
80822: PPUSH
80823: LD_VAR 0 7
80827: PPUSH
80828: CALL_OW 428
80832: PPUSH
80833: CALL_OW 247
80837: PUSH
80838: LD_INT 3
80840: PUSH
80841: LD_INT 2
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: IN
80848: NOT
80849: AND
80850: IFFALSE 80894
// begin ComMoveXY ( unit , _x , _y ) ;
80852: LD_VAR 0 1
80856: PPUSH
80857: LD_VAR 0 5
80861: PPUSH
80862: LD_VAR 0 7
80866: PPUSH
80867: CALL_OW 111
// result := [ _x , _y ] ;
80871: LD_ADDR_VAR 0 3
80875: PUSH
80876: LD_VAR 0 5
80880: PUSH
80881: LD_VAR 0 7
80885: PUSH
80886: EMPTY
80887: LIST
80888: LIST
80889: ST_TO_ADDR
// exit ;
80890: POP
80891: POP
80892: GO 80898
// end ; end ;
80894: GO 80738
80896: POP
80897: POP
// end ;
80898: LD_VAR 0 3
80902: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80903: LD_INT 0
80905: PPUSH
80906: PPUSH
80907: PPUSH
// result := 0 ;
80908: LD_ADDR_VAR 0 3
80912: PUSH
80913: LD_INT 0
80915: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80916: LD_VAR 0 1
80920: PUSH
80921: LD_INT 0
80923: LESS
80924: PUSH
80925: LD_VAR 0 1
80929: PUSH
80930: LD_INT 8
80932: GREATER
80933: OR
80934: PUSH
80935: LD_VAR 0 2
80939: PUSH
80940: LD_INT 0
80942: LESS
80943: OR
80944: PUSH
80945: LD_VAR 0 2
80949: PUSH
80950: LD_INT 8
80952: GREATER
80953: OR
80954: IFFALSE 80958
// exit ;
80956: GO 81033
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80958: LD_ADDR_VAR 0 4
80962: PUSH
80963: LD_INT 22
80965: PUSH
80966: LD_VAR 0 2
80970: PUSH
80971: EMPTY
80972: LIST
80973: LIST
80974: PPUSH
80975: CALL_OW 69
80979: PUSH
80980: FOR_IN
80981: IFFALSE 81031
// begin un := UnitShoot ( i ) ;
80983: LD_ADDR_VAR 0 5
80987: PUSH
80988: LD_VAR 0 4
80992: PPUSH
80993: CALL_OW 504
80997: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80998: LD_VAR 0 5
81002: PPUSH
81003: CALL_OW 255
81007: PUSH
81008: LD_VAR 0 1
81012: EQUAL
81013: IFFALSE 81029
// begin result := un ;
81015: LD_ADDR_VAR 0 3
81019: PUSH
81020: LD_VAR 0 5
81024: ST_TO_ADDR
// exit ;
81025: POP
81026: POP
81027: GO 81033
// end ; end ;
81029: GO 80980
81031: POP
81032: POP
// end ;
81033: LD_VAR 0 3
81037: RET
// export function GetCargoBay ( units ) ; begin
81038: LD_INT 0
81040: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81041: LD_ADDR_VAR 0 2
81045: PUSH
81046: LD_VAR 0 1
81050: PPUSH
81051: LD_INT 2
81053: PUSH
81054: LD_INT 34
81056: PUSH
81057: LD_INT 12
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: PUSH
81064: LD_INT 34
81066: PUSH
81067: LD_INT 51
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PUSH
81074: LD_INT 34
81076: PUSH
81077: LD_INT 32
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: PUSH
81084: LD_INT 34
81086: PUSH
81087: LD_INT 89
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: LIST
81098: LIST
81099: LIST
81100: PPUSH
81101: CALL_OW 72
81105: ST_TO_ADDR
// end ;
81106: LD_VAR 0 2
81110: RET
// export function Negate ( value ) ; begin
81111: LD_INT 0
81113: PPUSH
// result := not value ;
81114: LD_ADDR_VAR 0 2
81118: PUSH
81119: LD_VAR 0 1
81123: NOT
81124: ST_TO_ADDR
// end ;
81125: LD_VAR 0 2
81129: RET
// export function Inc ( value ) ; begin
81130: LD_INT 0
81132: PPUSH
// result := value + 1 ;
81133: LD_ADDR_VAR 0 2
81137: PUSH
81138: LD_VAR 0 1
81142: PUSH
81143: LD_INT 1
81145: PLUS
81146: ST_TO_ADDR
// end ;
81147: LD_VAR 0 2
81151: RET
// export function Dec ( value ) ; begin
81152: LD_INT 0
81154: PPUSH
// result := value - 1 ;
81155: LD_ADDR_VAR 0 2
81159: PUSH
81160: LD_VAR 0 1
81164: PUSH
81165: LD_INT 1
81167: MINUS
81168: ST_TO_ADDR
// end ;
81169: LD_VAR 0 2
81173: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81174: LD_INT 0
81176: PPUSH
81177: PPUSH
81178: PPUSH
81179: PPUSH
81180: PPUSH
81181: PPUSH
81182: PPUSH
81183: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81184: LD_VAR 0 1
81188: PPUSH
81189: LD_VAR 0 2
81193: PPUSH
81194: CALL_OW 488
81198: NOT
81199: PUSH
81200: LD_VAR 0 3
81204: PPUSH
81205: LD_VAR 0 4
81209: PPUSH
81210: CALL_OW 488
81214: NOT
81215: OR
81216: IFFALSE 81229
// begin result := - 1 ;
81218: LD_ADDR_VAR 0 5
81222: PUSH
81223: LD_INT 1
81225: NEG
81226: ST_TO_ADDR
// exit ;
81227: GO 81464
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81229: LD_ADDR_VAR 0 12
81233: PUSH
81234: LD_VAR 0 1
81238: PPUSH
81239: LD_VAR 0 2
81243: PPUSH
81244: LD_VAR 0 3
81248: PPUSH
81249: LD_VAR 0 4
81253: PPUSH
81254: CALL 80314 0 4
81258: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81259: LD_ADDR_VAR 0 11
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: LD_VAR 0 2
81273: PPUSH
81274: LD_VAR 0 12
81278: PUSH
81279: LD_INT 1
81281: ARRAY
81282: PPUSH
81283: LD_VAR 0 12
81287: PUSH
81288: LD_INT 2
81290: ARRAY
81291: PPUSH
81292: CALL_OW 298
81296: ST_TO_ADDR
// distance := 9999 ;
81297: LD_ADDR_VAR 0 10
81301: PUSH
81302: LD_INT 9999
81304: ST_TO_ADDR
// for i := 0 to 5 do
81305: LD_ADDR_VAR 0 6
81309: PUSH
81310: DOUBLE
81311: LD_INT 0
81313: DEC
81314: ST_TO_ADDR
81315: LD_INT 5
81317: PUSH
81318: FOR_TO
81319: IFFALSE 81462
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81321: LD_ADDR_VAR 0 7
81325: PUSH
81326: LD_VAR 0 1
81330: PPUSH
81331: LD_VAR 0 6
81335: PPUSH
81336: LD_VAR 0 11
81340: PPUSH
81341: CALL_OW 272
81345: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81346: LD_ADDR_VAR 0 8
81350: PUSH
81351: LD_VAR 0 2
81355: PPUSH
81356: LD_VAR 0 6
81360: PPUSH
81361: LD_VAR 0 11
81365: PPUSH
81366: CALL_OW 273
81370: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81371: LD_VAR 0 7
81375: PPUSH
81376: LD_VAR 0 8
81380: PPUSH
81381: CALL_OW 488
81385: NOT
81386: IFFALSE 81390
// continue ;
81388: GO 81318
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81390: LD_ADDR_VAR 0 9
81394: PUSH
81395: LD_VAR 0 12
81399: PUSH
81400: LD_INT 1
81402: ARRAY
81403: PPUSH
81404: LD_VAR 0 12
81408: PUSH
81409: LD_INT 2
81411: ARRAY
81412: PPUSH
81413: LD_VAR 0 7
81417: PPUSH
81418: LD_VAR 0 8
81422: PPUSH
81423: CALL_OW 298
81427: ST_TO_ADDR
// if tmp < distance then
81428: LD_VAR 0 9
81432: PUSH
81433: LD_VAR 0 10
81437: LESS
81438: IFFALSE 81460
// begin result := i ;
81440: LD_ADDR_VAR 0 5
81444: PUSH
81445: LD_VAR 0 6
81449: ST_TO_ADDR
// distance := tmp ;
81450: LD_ADDR_VAR 0 10
81454: PUSH
81455: LD_VAR 0 9
81459: ST_TO_ADDR
// end ; end ;
81460: GO 81318
81462: POP
81463: POP
// end ;
81464: LD_VAR 0 5
81468: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81469: LD_INT 0
81471: PPUSH
81472: PPUSH
// if not driver or not IsInUnit ( driver ) then
81473: LD_VAR 0 1
81477: NOT
81478: PUSH
81479: LD_VAR 0 1
81483: PPUSH
81484: CALL_OW 310
81488: NOT
81489: OR
81490: IFFALSE 81494
// exit ;
81492: GO 81584
// vehicle := IsInUnit ( driver ) ;
81494: LD_ADDR_VAR 0 3
81498: PUSH
81499: LD_VAR 0 1
81503: PPUSH
81504: CALL_OW 310
81508: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81509: LD_VAR 0 1
81513: PPUSH
81514: LD_STRING \
81516: PUSH
81517: LD_INT 0
81519: PUSH
81520: LD_INT 0
81522: PUSH
81523: LD_INT 0
81525: PUSH
81526: LD_INT 0
81528: PUSH
81529: LD_INT 0
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: LIST
81539: LIST
81540: LIST
81541: LIST
81542: LIST
81543: PUSH
81544: LD_STRING E
81546: PUSH
81547: LD_INT 0
81549: PUSH
81550: LD_INT 0
81552: PUSH
81553: LD_VAR 0 3
81557: PUSH
81558: LD_INT 0
81560: PUSH
81561: LD_INT 0
81563: PUSH
81564: LD_INT 0
81566: PUSH
81567: EMPTY
81568: LIST
81569: LIST
81570: LIST
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: PUSH
81576: EMPTY
81577: LIST
81578: LIST
81579: PPUSH
81580: CALL_OW 446
// end ;
81584: LD_VAR 0 2
81588: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81589: LD_INT 0
81591: PPUSH
81592: PPUSH
// if not driver or not IsInUnit ( driver ) then
81593: LD_VAR 0 1
81597: NOT
81598: PUSH
81599: LD_VAR 0 1
81603: PPUSH
81604: CALL_OW 310
81608: NOT
81609: OR
81610: IFFALSE 81614
// exit ;
81612: GO 81704
// vehicle := IsInUnit ( driver ) ;
81614: LD_ADDR_VAR 0 3
81618: PUSH
81619: LD_VAR 0 1
81623: PPUSH
81624: CALL_OW 310
81628: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81629: LD_VAR 0 1
81633: PPUSH
81634: LD_STRING \
81636: PUSH
81637: LD_INT 0
81639: PUSH
81640: LD_INT 0
81642: PUSH
81643: LD_INT 0
81645: PUSH
81646: LD_INT 0
81648: PUSH
81649: LD_INT 0
81651: PUSH
81652: LD_INT 0
81654: PUSH
81655: EMPTY
81656: LIST
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: LIST
81662: LIST
81663: PUSH
81664: LD_STRING E
81666: PUSH
81667: LD_INT 0
81669: PUSH
81670: LD_INT 0
81672: PUSH
81673: LD_VAR 0 3
81677: PUSH
81678: LD_INT 0
81680: PUSH
81681: LD_INT 0
81683: PUSH
81684: LD_INT 0
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: LIST
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PPUSH
81700: CALL_OW 447
// end ;
81704: LD_VAR 0 2
81708: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81709: LD_INT 0
81711: PPUSH
81712: PPUSH
81713: PPUSH
// tmp := [ ] ;
81714: LD_ADDR_VAR 0 5
81718: PUSH
81719: EMPTY
81720: ST_TO_ADDR
// for i in units do
81721: LD_ADDR_VAR 0 4
81725: PUSH
81726: LD_VAR 0 1
81730: PUSH
81731: FOR_IN
81732: IFFALSE 81770
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81734: LD_ADDR_VAR 0 5
81738: PUSH
81739: LD_VAR 0 5
81743: PPUSH
81744: LD_VAR 0 5
81748: PUSH
81749: LD_INT 1
81751: PLUS
81752: PPUSH
81753: LD_VAR 0 4
81757: PPUSH
81758: CALL_OW 256
81762: PPUSH
81763: CALL_OW 2
81767: ST_TO_ADDR
81768: GO 81731
81770: POP
81771: POP
// if not tmp then
81772: LD_VAR 0 5
81776: NOT
81777: IFFALSE 81781
// exit ;
81779: GO 81829
// if asc then
81781: LD_VAR 0 2
81785: IFFALSE 81809
// result := SortListByListAsc ( units , tmp ) else
81787: LD_ADDR_VAR 0 3
81791: PUSH
81792: LD_VAR 0 1
81796: PPUSH
81797: LD_VAR 0 5
81801: PPUSH
81802: CALL_OW 76
81806: ST_TO_ADDR
81807: GO 81829
// result := SortListByListDesc ( units , tmp ) ;
81809: LD_ADDR_VAR 0 3
81813: PUSH
81814: LD_VAR 0 1
81818: PPUSH
81819: LD_VAR 0 5
81823: PPUSH
81824: CALL_OW 77
81828: ST_TO_ADDR
// end ;
81829: LD_VAR 0 3
81833: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81834: LD_INT 0
81836: PPUSH
81837: PPUSH
// task := GetTaskList ( mech ) ;
81838: LD_ADDR_VAR 0 4
81842: PUSH
81843: LD_VAR 0 1
81847: PPUSH
81848: CALL_OW 437
81852: ST_TO_ADDR
// if not task then
81853: LD_VAR 0 4
81857: NOT
81858: IFFALSE 81862
// exit ;
81860: GO 81904
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81862: LD_ADDR_VAR 0 3
81866: PUSH
81867: LD_VAR 0 4
81871: PUSH
81872: LD_INT 1
81874: ARRAY
81875: PUSH
81876: LD_INT 1
81878: ARRAY
81879: PUSH
81880: LD_STRING r
81882: EQUAL
81883: PUSH
81884: LD_VAR 0 4
81888: PUSH
81889: LD_INT 1
81891: ARRAY
81892: PUSH
81893: LD_INT 4
81895: ARRAY
81896: PUSH
81897: LD_VAR 0 2
81901: EQUAL
81902: AND
81903: ST_TO_ADDR
// end ;
81904: LD_VAR 0 3
81908: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81909: LD_INT 0
81911: PPUSH
// SetDir ( unit , d ) ;
81912: LD_VAR 0 1
81916: PPUSH
81917: LD_VAR 0 4
81921: PPUSH
81922: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81926: LD_VAR 0 1
81930: PPUSH
81931: LD_VAR 0 2
81935: PPUSH
81936: LD_VAR 0 3
81940: PPUSH
81941: LD_VAR 0 5
81945: PPUSH
81946: CALL_OW 48
// end ;
81950: LD_VAR 0 6
81954: RET
// export function ToNaturalNumber ( number ) ; begin
81955: LD_INT 0
81957: PPUSH
// result := number div 1 ;
81958: LD_ADDR_VAR 0 2
81962: PUSH
81963: LD_VAR 0 1
81967: PUSH
81968: LD_INT 1
81970: DIV
81971: ST_TO_ADDR
// if number < 0 then
81972: LD_VAR 0 1
81976: PUSH
81977: LD_INT 0
81979: LESS
81980: IFFALSE 81990
// result := 0 ;
81982: LD_ADDR_VAR 0 2
81986: PUSH
81987: LD_INT 0
81989: ST_TO_ADDR
// end ;
81990: LD_VAR 0 2
81994: RET
// export function SortByClass ( units , class ) ; var un ; begin
81995: LD_INT 0
81997: PPUSH
81998: PPUSH
// if not units or not class then
81999: LD_VAR 0 1
82003: NOT
82004: PUSH
82005: LD_VAR 0 2
82009: NOT
82010: OR
82011: IFFALSE 82015
// exit ;
82013: GO 82110
// result := [ ] ;
82015: LD_ADDR_VAR 0 3
82019: PUSH
82020: EMPTY
82021: ST_TO_ADDR
// for un in units do
82022: LD_ADDR_VAR 0 4
82026: PUSH
82027: LD_VAR 0 1
82031: PUSH
82032: FOR_IN
82033: IFFALSE 82108
// if GetClass ( un ) = class then
82035: LD_VAR 0 4
82039: PPUSH
82040: CALL_OW 257
82044: PUSH
82045: LD_VAR 0 2
82049: EQUAL
82050: IFFALSE 82077
// result := Insert ( result , 1 , un ) else
82052: LD_ADDR_VAR 0 3
82056: PUSH
82057: LD_VAR 0 3
82061: PPUSH
82062: LD_INT 1
82064: PPUSH
82065: LD_VAR 0 4
82069: PPUSH
82070: CALL_OW 2
82074: ST_TO_ADDR
82075: GO 82106
// result := Replace ( result , result + 1 , un ) ;
82077: LD_ADDR_VAR 0 3
82081: PUSH
82082: LD_VAR 0 3
82086: PPUSH
82087: LD_VAR 0 3
82091: PUSH
82092: LD_INT 1
82094: PLUS
82095: PPUSH
82096: LD_VAR 0 4
82100: PPUSH
82101: CALL_OW 1
82105: ST_TO_ADDR
82106: GO 82032
82108: POP
82109: POP
// end ;
82110: LD_VAR 0 3
82114: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82115: LD_INT 0
82117: PPUSH
82118: PPUSH
82119: PPUSH
82120: PPUSH
82121: PPUSH
82122: PPUSH
82123: PPUSH
// result := [ ] ;
82124: LD_ADDR_VAR 0 4
82128: PUSH
82129: EMPTY
82130: ST_TO_ADDR
// if x - r < 0 then
82131: LD_VAR 0 1
82135: PUSH
82136: LD_VAR 0 3
82140: MINUS
82141: PUSH
82142: LD_INT 0
82144: LESS
82145: IFFALSE 82157
// min_x := 0 else
82147: LD_ADDR_VAR 0 8
82151: PUSH
82152: LD_INT 0
82154: ST_TO_ADDR
82155: GO 82173
// min_x := x - r ;
82157: LD_ADDR_VAR 0 8
82161: PUSH
82162: LD_VAR 0 1
82166: PUSH
82167: LD_VAR 0 3
82171: MINUS
82172: ST_TO_ADDR
// if y - r < 0 then
82173: LD_VAR 0 2
82177: PUSH
82178: LD_VAR 0 3
82182: MINUS
82183: PUSH
82184: LD_INT 0
82186: LESS
82187: IFFALSE 82199
// min_y := 0 else
82189: LD_ADDR_VAR 0 7
82193: PUSH
82194: LD_INT 0
82196: ST_TO_ADDR
82197: GO 82215
// min_y := y - r ;
82199: LD_ADDR_VAR 0 7
82203: PUSH
82204: LD_VAR 0 2
82208: PUSH
82209: LD_VAR 0 3
82213: MINUS
82214: ST_TO_ADDR
// max_x := x + r ;
82215: LD_ADDR_VAR 0 9
82219: PUSH
82220: LD_VAR 0 1
82224: PUSH
82225: LD_VAR 0 3
82229: PLUS
82230: ST_TO_ADDR
// max_y := y + r ;
82231: LD_ADDR_VAR 0 10
82235: PUSH
82236: LD_VAR 0 2
82240: PUSH
82241: LD_VAR 0 3
82245: PLUS
82246: ST_TO_ADDR
// for _x = min_x to max_x do
82247: LD_ADDR_VAR 0 5
82251: PUSH
82252: DOUBLE
82253: LD_VAR 0 8
82257: DEC
82258: ST_TO_ADDR
82259: LD_VAR 0 9
82263: PUSH
82264: FOR_TO
82265: IFFALSE 82366
// for _y = min_y to max_y do
82267: LD_ADDR_VAR 0 6
82271: PUSH
82272: DOUBLE
82273: LD_VAR 0 7
82277: DEC
82278: ST_TO_ADDR
82279: LD_VAR 0 10
82283: PUSH
82284: FOR_TO
82285: IFFALSE 82362
// begin if not ValidHex ( _x , _y ) then
82287: LD_VAR 0 5
82291: PPUSH
82292: LD_VAR 0 6
82296: PPUSH
82297: CALL_OW 488
82301: NOT
82302: IFFALSE 82306
// continue ;
82304: GO 82284
// if GetResourceTypeXY ( _x , _y ) then
82306: LD_VAR 0 5
82310: PPUSH
82311: LD_VAR 0 6
82315: PPUSH
82316: CALL_OW 283
82320: IFFALSE 82360
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82322: LD_ADDR_VAR 0 4
82326: PUSH
82327: LD_VAR 0 4
82331: PPUSH
82332: LD_VAR 0 4
82336: PUSH
82337: LD_INT 1
82339: PLUS
82340: PPUSH
82341: LD_VAR 0 5
82345: PUSH
82346: LD_VAR 0 6
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: PPUSH
82355: CALL_OW 1
82359: ST_TO_ADDR
// end ;
82360: GO 82284
82362: POP
82363: POP
82364: GO 82264
82366: POP
82367: POP
// end ;
82368: LD_VAR 0 4
82372: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82373: LD_INT 0
82375: PPUSH
82376: PPUSH
82377: PPUSH
82378: PPUSH
82379: PPUSH
82380: PPUSH
82381: PPUSH
82382: PPUSH
// if not units then
82383: LD_VAR 0 1
82387: NOT
82388: IFFALSE 82392
// exit ;
82390: GO 82916
// result := UnitFilter ( units , [ f_ok ] ) ;
82392: LD_ADDR_VAR 0 3
82396: PUSH
82397: LD_VAR 0 1
82401: PPUSH
82402: LD_INT 50
82404: PUSH
82405: EMPTY
82406: LIST
82407: PPUSH
82408: CALL_OW 72
82412: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82413: LD_ADDR_VAR 0 8
82417: PUSH
82418: LD_VAR 0 1
82422: PUSH
82423: LD_INT 1
82425: ARRAY
82426: PPUSH
82427: CALL_OW 255
82431: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82432: LD_ADDR_VAR 0 10
82436: PUSH
82437: LD_INT 29
82439: PUSH
82440: LD_INT 91
82442: PUSH
82443: LD_INT 49
82445: PUSH
82446: EMPTY
82447: LIST
82448: LIST
82449: LIST
82450: ST_TO_ADDR
// if not result then
82451: LD_VAR 0 3
82455: NOT
82456: IFFALSE 82460
// exit ;
82458: GO 82916
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82460: LD_ADDR_VAR 0 5
82464: PUSH
82465: LD_INT 81
82467: PUSH
82468: LD_VAR 0 8
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PPUSH
82477: CALL_OW 69
82481: ST_TO_ADDR
// for i in result do
82482: LD_ADDR_VAR 0 4
82486: PUSH
82487: LD_VAR 0 3
82491: PUSH
82492: FOR_IN
82493: IFFALSE 82914
// begin tag := GetTag ( i ) + 1 ;
82495: LD_ADDR_VAR 0 9
82499: PUSH
82500: LD_VAR 0 4
82504: PPUSH
82505: CALL_OW 110
82509: PUSH
82510: LD_INT 1
82512: PLUS
82513: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
82514: LD_ADDR_VAR 0 7
82518: PUSH
82519: LD_VAR 0 4
82523: PPUSH
82524: CALL_OW 250
82528: PPUSH
82529: LD_VAR 0 4
82533: PPUSH
82534: CALL_OW 251
82538: PPUSH
82539: LD_INT 6
82541: PPUSH
82542: CALL 82115 0 3
82546: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
82547: LD_VAR 0 4
82551: PPUSH
82552: CALL_OW 247
82556: PUSH
82557: LD_INT 2
82559: EQUAL
82560: PUSH
82561: LD_VAR 0 7
82565: AND
82566: PUSH
82567: LD_VAR 0 4
82571: PPUSH
82572: CALL_OW 264
82576: PUSH
82577: LD_VAR 0 10
82581: IN
82582: NOT
82583: AND
82584: IFFALSE 82623
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82586: LD_VAR 0 4
82590: PPUSH
82591: LD_VAR 0 7
82595: PUSH
82596: LD_INT 1
82598: ARRAY
82599: PUSH
82600: LD_INT 1
82602: ARRAY
82603: PPUSH
82604: LD_VAR 0 7
82608: PUSH
82609: LD_INT 1
82611: ARRAY
82612: PUSH
82613: LD_INT 2
82615: ARRAY
82616: PPUSH
82617: CALL_OW 116
82621: GO 82912
// if path > tag then
82623: LD_VAR 0 2
82627: PUSH
82628: LD_VAR 0 9
82632: GREATER
82633: IFFALSE 82841
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82635: LD_ADDR_VAR 0 6
82639: PUSH
82640: LD_VAR 0 5
82644: PPUSH
82645: LD_INT 91
82647: PUSH
82648: LD_VAR 0 4
82652: PUSH
82653: LD_INT 8
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: LIST
82660: PPUSH
82661: CALL_OW 72
82665: ST_TO_ADDR
// if nearEnemy then
82666: LD_VAR 0 6
82670: IFFALSE 82739
// begin if GetWeapon ( i ) = ru_time_lapser then
82672: LD_VAR 0 4
82676: PPUSH
82677: CALL_OW 264
82681: PUSH
82682: LD_INT 49
82684: EQUAL
82685: IFFALSE 82713
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82687: LD_VAR 0 4
82691: PPUSH
82692: LD_VAR 0 6
82696: PPUSH
82697: LD_VAR 0 4
82701: PPUSH
82702: CALL_OW 74
82706: PPUSH
82707: CALL_OW 112
82711: GO 82737
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82713: LD_VAR 0 4
82717: PPUSH
82718: LD_VAR 0 6
82722: PPUSH
82723: LD_VAR 0 4
82727: PPUSH
82728: CALL_OW 74
82732: PPUSH
82733: CALL 83841 0 2
// end else
82737: GO 82839
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82739: LD_VAR 0 4
82743: PPUSH
82744: LD_VAR 0 2
82748: PUSH
82749: LD_VAR 0 9
82753: ARRAY
82754: PUSH
82755: LD_INT 1
82757: ARRAY
82758: PPUSH
82759: LD_VAR 0 2
82763: PUSH
82764: LD_VAR 0 9
82768: ARRAY
82769: PUSH
82770: LD_INT 2
82772: ARRAY
82773: PPUSH
82774: CALL_OW 297
82778: PUSH
82779: LD_INT 6
82781: GREATER
82782: IFFALSE 82825
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82784: LD_VAR 0 4
82788: PPUSH
82789: LD_VAR 0 2
82793: PUSH
82794: LD_VAR 0 9
82798: ARRAY
82799: PUSH
82800: LD_INT 1
82802: ARRAY
82803: PPUSH
82804: LD_VAR 0 2
82808: PUSH
82809: LD_VAR 0 9
82813: ARRAY
82814: PUSH
82815: LD_INT 2
82817: ARRAY
82818: PPUSH
82819: CALL_OW 114
82823: GO 82839
// SetTag ( i , tag ) ;
82825: LD_VAR 0 4
82829: PPUSH
82830: LD_VAR 0 9
82834: PPUSH
82835: CALL_OW 109
// end else
82839: GO 82912
// if enemy then
82841: LD_VAR 0 5
82845: IFFALSE 82912
// begin if GetWeapon ( i ) = ru_time_lapser then
82847: LD_VAR 0 4
82851: PPUSH
82852: CALL_OW 264
82856: PUSH
82857: LD_INT 49
82859: EQUAL
82860: IFFALSE 82888
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82862: LD_VAR 0 4
82866: PPUSH
82867: LD_VAR 0 5
82871: PPUSH
82872: LD_VAR 0 4
82876: PPUSH
82877: CALL_OW 74
82881: PPUSH
82882: CALL_OW 112
82886: GO 82912
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82888: LD_VAR 0 4
82892: PPUSH
82893: LD_VAR 0 5
82897: PPUSH
82898: LD_VAR 0 4
82902: PPUSH
82903: CALL_OW 74
82907: PPUSH
82908: CALL 83841 0 2
// end ; end ;
82912: GO 82492
82914: POP
82915: POP
// end ;
82916: LD_VAR 0 3
82920: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82921: LD_INT 0
82923: PPUSH
82924: PPUSH
82925: PPUSH
// if not unit or IsInUnit ( unit ) then
82926: LD_VAR 0 1
82930: NOT
82931: PUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 310
82941: OR
82942: IFFALSE 82946
// exit ;
82944: GO 83037
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82946: LD_ADDR_VAR 0 4
82950: PUSH
82951: LD_VAR 0 1
82955: PPUSH
82956: CALL_OW 250
82960: PPUSH
82961: LD_VAR 0 2
82965: PPUSH
82966: LD_INT 1
82968: PPUSH
82969: CALL_OW 272
82973: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82974: LD_ADDR_VAR 0 5
82978: PUSH
82979: LD_VAR 0 1
82983: PPUSH
82984: CALL_OW 251
82988: PPUSH
82989: LD_VAR 0 2
82993: PPUSH
82994: LD_INT 1
82996: PPUSH
82997: CALL_OW 273
83001: ST_TO_ADDR
// if ValidHex ( x , y ) then
83002: LD_VAR 0 4
83006: PPUSH
83007: LD_VAR 0 5
83011: PPUSH
83012: CALL_OW 488
83016: IFFALSE 83037
// ComTurnXY ( unit , x , y ) ;
83018: LD_VAR 0 1
83022: PPUSH
83023: LD_VAR 0 4
83027: PPUSH
83028: LD_VAR 0 5
83032: PPUSH
83033: CALL_OW 118
// end ;
83037: LD_VAR 0 3
83041: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83042: LD_INT 0
83044: PPUSH
83045: PPUSH
// result := false ;
83046: LD_ADDR_VAR 0 3
83050: PUSH
83051: LD_INT 0
83053: ST_TO_ADDR
// if not units then
83054: LD_VAR 0 2
83058: NOT
83059: IFFALSE 83063
// exit ;
83061: GO 83108
// for i in units do
83063: LD_ADDR_VAR 0 4
83067: PUSH
83068: LD_VAR 0 2
83072: PUSH
83073: FOR_IN
83074: IFFALSE 83106
// if See ( side , i ) then
83076: LD_VAR 0 1
83080: PPUSH
83081: LD_VAR 0 4
83085: PPUSH
83086: CALL_OW 292
83090: IFFALSE 83104
// begin result := true ;
83092: LD_ADDR_VAR 0 3
83096: PUSH
83097: LD_INT 1
83099: ST_TO_ADDR
// exit ;
83100: POP
83101: POP
83102: GO 83108
// end ;
83104: GO 83073
83106: POP
83107: POP
// end ;
83108: LD_VAR 0 3
83112: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83113: LD_INT 0
83115: PPUSH
83116: PPUSH
83117: PPUSH
83118: PPUSH
// if not unit or not points then
83119: LD_VAR 0 1
83123: NOT
83124: PUSH
83125: LD_VAR 0 2
83129: NOT
83130: OR
83131: IFFALSE 83135
// exit ;
83133: GO 83225
// dist := 99999 ;
83135: LD_ADDR_VAR 0 5
83139: PUSH
83140: LD_INT 99999
83142: ST_TO_ADDR
// for i in points do
83143: LD_ADDR_VAR 0 4
83147: PUSH
83148: LD_VAR 0 2
83152: PUSH
83153: FOR_IN
83154: IFFALSE 83223
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83156: LD_ADDR_VAR 0 6
83160: PUSH
83161: LD_VAR 0 1
83165: PPUSH
83166: LD_VAR 0 4
83170: PUSH
83171: LD_INT 1
83173: ARRAY
83174: PPUSH
83175: LD_VAR 0 4
83179: PUSH
83180: LD_INT 2
83182: ARRAY
83183: PPUSH
83184: CALL_OW 297
83188: ST_TO_ADDR
// if tmpDist < dist then
83189: LD_VAR 0 6
83193: PUSH
83194: LD_VAR 0 5
83198: LESS
83199: IFFALSE 83221
// begin result := i ;
83201: LD_ADDR_VAR 0 3
83205: PUSH
83206: LD_VAR 0 4
83210: ST_TO_ADDR
// dist := tmpDist ;
83211: LD_ADDR_VAR 0 5
83215: PUSH
83216: LD_VAR 0 6
83220: ST_TO_ADDR
// end ; end ;
83221: GO 83153
83223: POP
83224: POP
// end ;
83225: LD_VAR 0 3
83229: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83230: LD_INT 0
83232: PPUSH
// uc_side := side ;
83233: LD_ADDR_OWVAR 20
83237: PUSH
83238: LD_VAR 0 1
83242: ST_TO_ADDR
// uc_nation := 3 ;
83243: LD_ADDR_OWVAR 21
83247: PUSH
83248: LD_INT 3
83250: ST_TO_ADDR
// vc_chassis := 25 ;
83251: LD_ADDR_OWVAR 37
83255: PUSH
83256: LD_INT 25
83258: ST_TO_ADDR
// vc_engine := engine_siberite ;
83259: LD_ADDR_OWVAR 39
83263: PUSH
83264: LD_INT 3
83266: ST_TO_ADDR
// vc_control := control_computer ;
83267: LD_ADDR_OWVAR 38
83271: PUSH
83272: LD_INT 3
83274: ST_TO_ADDR
// vc_weapon := 59 ;
83275: LD_ADDR_OWVAR 40
83279: PUSH
83280: LD_INT 59
83282: ST_TO_ADDR
// result := CreateVehicle ;
83283: LD_ADDR_VAR 0 5
83287: PUSH
83288: CALL_OW 45
83292: ST_TO_ADDR
// SetDir ( result , d ) ;
83293: LD_VAR 0 5
83297: PPUSH
83298: LD_VAR 0 4
83302: PPUSH
83303: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83307: LD_VAR 0 5
83311: PPUSH
83312: LD_VAR 0 2
83316: PPUSH
83317: LD_VAR 0 3
83321: PPUSH
83322: LD_INT 0
83324: PPUSH
83325: CALL_OW 48
// end ;
83329: LD_VAR 0 5
83333: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83334: LD_INT 0
83336: PPUSH
83337: PPUSH
83338: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83339: LD_ADDR_VAR 0 2
83343: PUSH
83344: LD_INT 0
83346: PUSH
83347: LD_INT 0
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: LD_INT 0
83355: PUSH
83356: EMPTY
83357: LIST
83358: LIST
83359: LIST
83360: LIST
83361: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83362: LD_VAR 0 1
83366: NOT
83367: PUSH
83368: LD_VAR 0 1
83372: PPUSH
83373: CALL_OW 264
83377: PUSH
83378: LD_INT 12
83380: PUSH
83381: LD_INT 51
83383: PUSH
83384: LD_INT 32
83386: PUSH
83387: LD_INT 89
83389: PUSH
83390: EMPTY
83391: LIST
83392: LIST
83393: LIST
83394: LIST
83395: IN
83396: NOT
83397: OR
83398: IFFALSE 83402
// exit ;
83400: GO 83500
// for i := 1 to 3 do
83402: LD_ADDR_VAR 0 3
83406: PUSH
83407: DOUBLE
83408: LD_INT 1
83410: DEC
83411: ST_TO_ADDR
83412: LD_INT 3
83414: PUSH
83415: FOR_TO
83416: IFFALSE 83498
// begin tmp := GetCargo ( cargo , i ) ;
83418: LD_ADDR_VAR 0 4
83422: PUSH
83423: LD_VAR 0 1
83427: PPUSH
83428: LD_VAR 0 3
83432: PPUSH
83433: CALL_OW 289
83437: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83438: LD_ADDR_VAR 0 2
83442: PUSH
83443: LD_VAR 0 2
83447: PPUSH
83448: LD_VAR 0 3
83452: PPUSH
83453: LD_VAR 0 4
83457: PPUSH
83458: CALL_OW 1
83462: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83463: LD_ADDR_VAR 0 2
83467: PUSH
83468: LD_VAR 0 2
83472: PPUSH
83473: LD_INT 4
83475: PPUSH
83476: LD_VAR 0 2
83480: PUSH
83481: LD_INT 4
83483: ARRAY
83484: PUSH
83485: LD_VAR 0 4
83489: PLUS
83490: PPUSH
83491: CALL_OW 1
83495: ST_TO_ADDR
// end ;
83496: GO 83415
83498: POP
83499: POP
// end ;
83500: LD_VAR 0 2
83504: RET
// export function Length ( array ) ; begin
83505: LD_INT 0
83507: PPUSH
// result := array + 0 ;
83508: LD_ADDR_VAR 0 2
83512: PUSH
83513: LD_VAR 0 1
83517: PUSH
83518: LD_INT 0
83520: PLUS
83521: ST_TO_ADDR
// end ;
83522: LD_VAR 0 2
83526: RET
// export function PrepareArray ( array ) ; begin
83527: LD_INT 0
83529: PPUSH
// result := array diff 0 ;
83530: LD_ADDR_VAR 0 2
83534: PUSH
83535: LD_VAR 0 1
83539: PUSH
83540: LD_INT 0
83542: DIFF
83543: ST_TO_ADDR
// if not result [ 1 ] then
83544: LD_VAR 0 2
83548: PUSH
83549: LD_INT 1
83551: ARRAY
83552: NOT
83553: IFFALSE 83573
// result := Delete ( result , 1 ) ;
83555: LD_ADDR_VAR 0 2
83559: PUSH
83560: LD_VAR 0 2
83564: PPUSH
83565: LD_INT 1
83567: PPUSH
83568: CALL_OW 3
83572: ST_TO_ADDR
// end ;
83573: LD_VAR 0 2
83577: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83578: LD_INT 0
83580: PPUSH
83581: PPUSH
83582: PPUSH
83583: PPUSH
// sibRocketRange := 25 ;
83584: LD_ADDR_VAR 0 6
83588: PUSH
83589: LD_INT 25
83591: ST_TO_ADDR
// result := false ;
83592: LD_ADDR_VAR 0 4
83596: PUSH
83597: LD_INT 0
83599: ST_TO_ADDR
// for i := 0 to 5 do
83600: LD_ADDR_VAR 0 5
83604: PUSH
83605: DOUBLE
83606: LD_INT 0
83608: DEC
83609: ST_TO_ADDR
83610: LD_INT 5
83612: PUSH
83613: FOR_TO
83614: IFFALSE 83681
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83616: LD_VAR 0 1
83620: PPUSH
83621: LD_VAR 0 5
83625: PPUSH
83626: LD_VAR 0 6
83630: PPUSH
83631: CALL_OW 272
83635: PPUSH
83636: LD_VAR 0 2
83640: PPUSH
83641: LD_VAR 0 5
83645: PPUSH
83646: LD_VAR 0 6
83650: PPUSH
83651: CALL_OW 273
83655: PPUSH
83656: LD_VAR 0 3
83660: PPUSH
83661: CALL_OW 309
83665: IFFALSE 83679
// begin result := true ;
83667: LD_ADDR_VAR 0 4
83671: PUSH
83672: LD_INT 1
83674: ST_TO_ADDR
// exit ;
83675: POP
83676: POP
83677: GO 83683
// end ;
83679: GO 83613
83681: POP
83682: POP
// end ;
83683: LD_VAR 0 4
83687: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83688: LD_INT 0
83690: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83691: LD_VAR 0 1
83695: PPUSH
83696: LD_VAR 0 2
83700: PPUSH
83701: LD_INT 0
83703: PPUSH
83704: LD_INT 0
83706: PPUSH
83707: LD_INT 1
83709: PPUSH
83710: LD_INT 0
83712: PPUSH
83713: CALL_OW 587
// end ;
83717: LD_VAR 0 3
83721: RET
// export function CenterOnNow ( unit ) ; begin
83722: LD_INT 0
83724: PPUSH
// result := IsInUnit ( unit ) ;
83725: LD_ADDR_VAR 0 2
83729: PUSH
83730: LD_VAR 0 1
83734: PPUSH
83735: CALL_OW 310
83739: ST_TO_ADDR
// if not result then
83740: LD_VAR 0 2
83744: NOT
83745: IFFALSE 83757
// result := unit ;
83747: LD_ADDR_VAR 0 2
83751: PUSH
83752: LD_VAR 0 1
83756: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83757: LD_VAR 0 1
83761: PPUSH
83762: CALL_OW 87
// end ;
83766: LD_VAR 0 2
83770: RET
// export function ComMoveHex ( unit , hex ) ; begin
83771: LD_INT 0
83773: PPUSH
// if not hex then
83774: LD_VAR 0 2
83778: NOT
83779: IFFALSE 83783
// exit ;
83781: GO 83836
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83783: LD_VAR 0 2
83787: PUSH
83788: LD_INT 1
83790: ARRAY
83791: PPUSH
83792: LD_VAR 0 2
83796: PUSH
83797: LD_INT 2
83799: ARRAY
83800: PPUSH
83801: CALL_OW 428
83805: IFFALSE 83809
// exit ;
83807: GO 83836
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83809: LD_VAR 0 1
83813: PPUSH
83814: LD_VAR 0 2
83818: PUSH
83819: LD_INT 1
83821: ARRAY
83822: PPUSH
83823: LD_VAR 0 2
83827: PUSH
83828: LD_INT 2
83830: ARRAY
83831: PPUSH
83832: CALL_OW 111
// end ;
83836: LD_VAR 0 3
83840: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83841: LD_INT 0
83843: PPUSH
83844: PPUSH
83845: PPUSH
// if not unit or not enemy then
83846: LD_VAR 0 1
83850: NOT
83851: PUSH
83852: LD_VAR 0 2
83856: NOT
83857: OR
83858: IFFALSE 83862
// exit ;
83860: GO 83986
// x := GetX ( enemy ) ;
83862: LD_ADDR_VAR 0 4
83866: PUSH
83867: LD_VAR 0 2
83871: PPUSH
83872: CALL_OW 250
83876: ST_TO_ADDR
// y := GetY ( enemy ) ;
83877: LD_ADDR_VAR 0 5
83881: PUSH
83882: LD_VAR 0 2
83886: PPUSH
83887: CALL_OW 251
83891: ST_TO_ADDR
// if ValidHex ( x , y ) then
83892: LD_VAR 0 4
83896: PPUSH
83897: LD_VAR 0 5
83901: PPUSH
83902: CALL_OW 488
83906: IFFALSE 83986
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
83908: LD_VAR 0 2
83912: PPUSH
83913: CALL_OW 247
83917: PUSH
83918: LD_INT 3
83920: PUSH
83921: LD_INT 2
83923: PUSH
83924: EMPTY
83925: LIST
83926: LIST
83927: IN
83928: PUSH
83929: LD_VAR 0 1
83933: PPUSH
83934: CALL_OW 255
83938: PPUSH
83939: LD_VAR 0 2
83943: PPUSH
83944: CALL_OW 292
83948: AND
83949: IFFALSE 83967
// ComAttackUnit ( unit , enemy ) else
83951: LD_VAR 0 1
83955: PPUSH
83956: LD_VAR 0 2
83960: PPUSH
83961: CALL_OW 115
83965: GO 83986
// ComAgressiveMove ( unit , x , y ) ;
83967: LD_VAR 0 1
83971: PPUSH
83972: LD_VAR 0 4
83976: PPUSH
83977: LD_VAR 0 5
83981: PPUSH
83982: CALL_OW 114
// end ; end_of_file
83986: LD_VAR 0 3
83990: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83991: LD_VAR 0 1
83995: PUSH
83996: LD_INT 200
83998: DOUBLE
83999: GREATEREQUAL
84000: IFFALSE 84008
84002: LD_INT 299
84004: DOUBLE
84005: LESSEQUAL
84006: IFTRUE 84010
84008: GO 84042
84010: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84011: LD_VAR 0 1
84015: PPUSH
84016: LD_VAR 0 2
84020: PPUSH
84021: LD_VAR 0 3
84025: PPUSH
84026: LD_VAR 0 4
84030: PPUSH
84031: LD_VAR 0 5
84035: PPUSH
84036: CALL 37715 0 5
84040: GO 84119
84042: LD_INT 300
84044: DOUBLE
84045: GREATEREQUAL
84046: IFFALSE 84054
84048: LD_INT 399
84050: DOUBLE
84051: LESSEQUAL
84052: IFTRUE 84056
84054: GO 84118
84056: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84057: LD_VAR 0 1
84061: PPUSH
84062: LD_VAR 0 2
84066: PPUSH
84067: LD_VAR 0 3
84071: PPUSH
84072: LD_VAR 0 4
84076: PPUSH
84077: LD_VAR 0 5
84081: PPUSH
84082: LD_VAR 0 6
84086: PPUSH
84087: LD_VAR 0 7
84091: PPUSH
84092: LD_VAR 0 8
84096: PPUSH
84097: LD_VAR 0 9
84101: PPUSH
84102: LD_VAR 0 10
84106: PPUSH
84107: LD_VAR 0 11
84111: PPUSH
84112: CALL 34040 0 11
84116: GO 84119
84118: POP
// end ;
84119: PPOPN 11
84121: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84122: LD_VAR 0 1
84126: PPUSH
84127: LD_VAR 0 2
84131: PPUSH
84132: LD_VAR 0 3
84136: PPUSH
84137: LD_VAR 0 4
84141: PPUSH
84142: LD_VAR 0 5
84146: PPUSH
84147: CALL 37451 0 5
// end ; end_of_file
84151: PPOPN 5
84153: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84154: LD_VAR 0 1
84158: PPUSH
84159: LD_VAR 0 2
84163: PPUSH
84164: LD_VAR 0 3
84168: PPUSH
84169: LD_VAR 0 4
84173: PPUSH
84174: LD_VAR 0 5
84178: PPUSH
84179: LD_VAR 0 6
84183: PPUSH
84184: CALL 21692 0 6
// end ;
84188: PPOPN 6
84190: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84191: LD_INT 0
84193: PPUSH
// begin if not units then
84194: LD_VAR 0 1
84198: NOT
84199: IFFALSE 84203
// exit ;
84201: GO 84203
// end ;
84203: PPOPN 7
84205: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84206: CALL 21596 0 0
// end ;
84210: PPOPN 1
84212: END
