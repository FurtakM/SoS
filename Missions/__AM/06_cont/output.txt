// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// cratesStatus = 2 ;
 112: LD_ADDR_EXP 38
 116: PUSH
 117: LD_INT 2
 119: ST_TO_ADDR
// timerStatus = 1 ;
 120: LD_ADDR_EXP 24
 124: PUSH
 125: LD_INT 1
 127: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: LD_INT 350
 135: PUSH
 136: LD_INT 500
 138: PUSH
 139: LD_INT 700
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PUSH
 147: LD_OWVAR 67
 151: ARRAY
 152: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 153: LD_ADDR_EXP 26
 157: PUSH
 158: LD_INT 105000
 160: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 161: LD_ADDR_EXP 28
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// sendedConvoys = 0 ;
 169: LD_ADDR_EXP 39
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// tamedApemans = 0 ;
 177: LD_ADDR_EXP 32
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// ignoreTarget := [ ] ;
 185: LD_ADDR_EXP 45
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// arrivals := [ ] ;
 192: LD_ADDR_EXP 46
 196: PUSH
 197: EMPTY
 198: ST_TO_ADDR
// unitLost = 0 ;
 199: LD_ADDR_EXP 30
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 207: LD_ADDR_EXP 31
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianTanks = [ ] ;
 214: LD_ADDR_EXP 36
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 221: LD_ADDR_EXP 37
 225: PUSH
 226: EMPTY
 227: ST_TO_ADDR
// disableHealAI = 0 ;
 228: LD_ADDR_EXP 33
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// strings = [ ] ;
 236: LD_ADDR_EXP 27
 240: PUSH
 241: EMPTY
 242: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 243: LD_INT 4
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 343
// PrepareDifficulty ;
 253: CALL 6307 0 0
// PrepareNature ;
 257: CALL 23213 0 0
// PrepareRussian ;
 261: CALL 5492 0 0
// PrepareVehicles ;
 265: CALL 1512 0 0
// PrepareHeroes ;
 269: CALL 520 0 0
// PrepareOthers ;
 273: CALL 1933 0 0
// PreparePlayerApemans ;
 277: CALL 2075 0 0
// end ;
 281: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 282: LD_EXP 42
 286: PUSH
 287: LD_INT 1
 289: EQUAL
 290: IFFALSE 517
 292: GO 294
 294: DISABLE
 295: LD_INT 0
 297: PPUSH
// begin enable ;
 298: ENABLE
// fogoff ( true ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: FOR_IN
 341: IFFALSE 357
// SetLives ( i , 1000 ) ;
 343: LD_VAR 0 1
 347: PPUSH
 348: LD_INT 1000
 350: PPUSH
 351: CALL_OW 234
 355: GO 340
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 30
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 418
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: CALL_OW 274
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: LD_INT 9999
 411: PPUSH
 412: CALL_OW 277
 416: GO 393
 418: POP
 419: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 420: LD_ADDR_VAR 0 1
 424: PUSH
 425: LD_INT 22
 427: PUSH
 428: LD_INT 1
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 0
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PPUSH
 449: CALL_OW 69
 453: PUSH
 454: FOR_IN
 455: IFFALSE 479
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 274
 466: PPUSH
 467: LD_INT 2
 469: PPUSH
 470: LD_INT 9999
 472: PPUSH
 473: CALL_OW 277
 477: GO 454
 479: POP
 480: POP
// if IsSelected ( rudepo ) then
 481: LD_INT 2
 483: PPUSH
 484: CALL_OW 306
 488: IFFALSE 498
// your_side = 3 ;
 490: LD_ADDR_OWVAR 2
 494: PUSH
 495: LD_INT 3
 497: ST_TO_ADDR
// if IsSelected ( JMM ) then
 498: LD_EXP 1
 502: PPUSH
 503: CALL_OW 306
 507: IFFALSE 517
// your_side = 1 ;
 509: LD_ADDR_OWVAR 2
 513: PUSH
 514: LD_INT 1
 516: ST_TO_ADDR
// end ; end_of_file
 517: PPOPN 1
 519: END
// export function PrepareHeroes ; var veh ; begin
 520: LD_INT 0
 522: PPUSH
 523: PPUSH
// uc_side = 1 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// uc_nation = 1 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 1
 539: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 540: LD_ADDR_EXP 1
 544: PUSH
 545: LD_STRING JMM
 547: PPUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL 5869 0 2
 555: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 556: LD_ADDR_EXP 14
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: CALL 5869 0 2
 571: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_STRING DeltaDoctor
 579: PPUSH
 580: CALL_OW 34
 584: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_INT 22
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 21
 602: PUSH
 603: LD_INT 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 58
 612: PUSH
 613: EMPTY
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: ST_TO_ADDR
// if veh > 0 then
 626: LD_VAR 0 2
 630: PUSH
 631: LD_INT 0
 633: GREATER
 634: IFFALSE 656
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 636: LD_EXP 1
 640: PPUSH
 641: LD_VAR 0 2
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: PPUSH
 650: CALL_OW 52
// end else
 654: GO 671
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 656: LD_EXP 1
 660: PPUSH
 661: LD_INT 2
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 671: LD_STRING LisaIn06
 673: PPUSH
 674: LD_INT 0
 676: PPUSH
 677: CALL_OW 30
 681: PUSH
 682: LD_INT 1
 684: EQUAL
 685: IFFALSE 789
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 687: LD_ADDR_VAR 0 2
 691: PUSH
 692: LD_INT 22
 694: PUSH
 695: LD_INT 1
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: PUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PUSH
 712: LD_INT 58
 714: PUSH
 715: EMPTY
 716: LIST
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 728: LD_ADDR_EXP 2
 732: PUSH
 733: LD_STRING Lisa
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL 5869 0 2
 743: ST_TO_ADDR
// if veh > 0 then
 744: LD_VAR 0 2
 748: PUSH
 749: LD_INT 0
 751: GREATER
 752: IFFALSE 774
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 754: LD_EXP 2
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 1
 766: ARRAY
 767: PPUSH
 768: CALL_OW 52
// end else
 772: GO 789
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 774: LD_EXP 2
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 789: LD_STRING BobbyIn06
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 30
 799: PUSH
 800: LD_INT 1
 802: EQUAL
 803: IFFALSE 907
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: PPUSH
 841: CALL_OW 69
 845: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 846: LD_ADDR_EXP 3
 850: PUSH
 851: LD_STRING Bobby
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: CALL 5869 0 2
 861: ST_TO_ADDR
// if veh > 0 then
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 0
 869: GREATER
 870: IFFALSE 892
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 872: LD_EXP 3
 876: PPUSH
 877: LD_VAR 0 2
 881: PUSH
 882: LD_INT 1
 884: ARRAY
 885: PPUSH
 886: CALL_OW 52
// end else
 890: GO 907
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 907: LD_STRING CyrusIn06
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 30
 917: PUSH
 918: LD_INT 1
 920: EQUAL
 921: IFFALSE 1025
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: LD_INT 22
 930: PUSH
 931: LD_INT 1
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 21
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 58
 950: PUSH
 951: EMPTY
 952: LIST
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PPUSH
 959: CALL_OW 69
 963: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 964: LD_ADDR_EXP 4
 968: PUSH
 969: LD_STRING Cyrus
 971: PPUSH
 972: LD_INT 1
 974: PPUSH
 975: CALL 5869 0 2
 979: ST_TO_ADDR
// if veh > 0 then
 980: LD_VAR 0 2
 984: PUSH
 985: LD_INT 0
 987: GREATER
 988: IFFALSE 1010
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 990: LD_EXP 4
 994: PPUSH
 995: LD_VAR 0 2
 999: PUSH
1000: LD_INT 1
1002: ARRAY
1003: PPUSH
1004: CALL_OW 52
// end else
1008: GO 1025
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1010: LD_EXP 4
1014: PPUSH
1015: LD_INT 2
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1025: LD_STRING FrankIn06
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 30
1035: PUSH
1036: LD_INT 1
1038: EQUAL
1039: IFFALSE 1143
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1041: LD_ADDR_VAR 0 2
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 21
1058: PUSH
1059: LD_INT 2
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 58
1068: PUSH
1069: EMPTY
1070: LIST
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: PPUSH
1077: CALL_OW 69
1081: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1082: LD_ADDR_EXP 5
1086: PUSH
1087: LD_STRING Frank
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: CALL 5869 0 2
1097: ST_TO_ADDR
// if veh > 0 then
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 0
1105: GREATER
1106: IFFALSE 1128
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1108: LD_EXP 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 52
// end else
1126: GO 1143
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1128: LD_EXP 5
1132: PPUSH
1133: LD_INT 2
1135: PPUSH
1136: LD_INT 0
1138: PPUSH
1139: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1143: LD_STRING BrownIn06
1145: PPUSH
1146: LD_INT 0
1148: PPUSH
1149: CALL_OW 30
1153: PUSH
1154: LD_INT 1
1156: EQUAL
1157: IFFALSE 1261
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1159: LD_ADDR_VAR 0 2
1163: PUSH
1164: LD_INT 22
1166: PUSH
1167: LD_INT 1
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 2
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: LD_INT 58
1186: PUSH
1187: EMPTY
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1200: LD_ADDR_EXP 6
1204: PUSH
1205: LD_STRING Brown
1207: PPUSH
1208: LD_INT 1
1210: PPUSH
1211: CALL 5869 0 2
1215: ST_TO_ADDR
// if veh > 0 then
1216: LD_VAR 0 2
1220: PUSH
1221: LD_INT 0
1223: GREATER
1224: IFFALSE 1246
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1226: LD_EXP 6
1230: PPUSH
1231: LD_VAR 0 2
1235: PUSH
1236: LD_INT 1
1238: ARRAY
1239: PPUSH
1240: CALL_OW 52
// end else
1244: GO 1261
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1246: LD_EXP 6
1250: PPUSH
1251: LD_INT 2
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1261: LD_STRING DonaldsonIn06
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL_OW 30
1271: PUSH
1272: LD_INT 1
1274: EQUAL
1275: IFFALSE 1379
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 21
1294: PUSH
1295: LD_INT 2
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 58
1304: PUSH
1305: EMPTY
1306: LIST
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: PPUSH
1313: CALL_OW 69
1317: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1318: LD_ADDR_EXP 7
1322: PUSH
1323: LD_STRING Donaldson
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL 5869 0 2
1333: ST_TO_ADDR
// if veh > 0 then
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 0
1341: GREATER
1342: IFFALSE 1364
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1344: LD_EXP 7
1348: PPUSH
1349: LD_VAR 0 2
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: CALL_OW 52
// end else
1362: GO 1379
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1364: LD_EXP 7
1368: PPUSH
1369: LD_INT 2
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1379: LD_STRING GladstoneIn06
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 30
1389: PUSH
1390: LD_INT 1
1392: EQUAL
1393: IFFALSE 1497
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_INT 1
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: LD_INT 21
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_INT 58
1422: PUSH
1423: EMPTY
1424: LIST
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1436: LD_ADDR_EXP 8
1440: PUSH
1441: LD_STRING Gladstone
1443: PPUSH
1444: LD_INT 1
1446: PPUSH
1447: CALL 5869 0 2
1451: ST_TO_ADDR
// if veh > 0 then
1452: LD_VAR 0 2
1456: PUSH
1457: LD_INT 0
1459: GREATER
1460: IFFALSE 1482
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1462: LD_EXP 8
1466: PPUSH
1467: LD_VAR 0 2
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 52
// end else
1480: GO 1497
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1482: LD_EXP 8
1486: PPUSH
1487: LD_INT 2
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1497: LD_INT 66
1499: PPUSH
1500: LD_INT 4
1502: PPUSH
1503: CALL_OW 86
// end ;
1507: LD_VAR 0 1
1511: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1512: LD_INT 0
1514: PPUSH
1515: PPUSH
1516: PPUSH
1517: PPUSH
1518: PPUSH
1519: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1520: LD_ADDR_VAR 0 5
1524: PUSH
1525: LD_STRING 06_VehiclesIn06_1
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1535: LD_ADDR_EXP 40
1539: PUSH
1540: LD_STRING 06_ResourcesInCargo06_1
1542: PPUSH
1543: EMPTY
1544: PPUSH
1545: CALL_OW 30
1549: ST_TO_ADDR
// cargoList = [ ] ;
1550: LD_ADDR_VAR 0 6
1554: PUSH
1555: EMPTY
1556: ST_TO_ADDR
// uc_side = 1 ;
1557: LD_ADDR_OWVAR 20
1561: PUSH
1562: LD_INT 1
1564: ST_TO_ADDR
// if vehicles > 0 then
1565: LD_VAR 0 5
1569: PUSH
1570: LD_INT 0
1572: GREATER
1573: IFFALSE 1928
// begin for i := 1 to vehicles do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_VAR 0 5
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1740
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1593: LD_ADDR_OWVAR 21
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1613: LD_ADDR_OWVAR 37
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 2
1631: ARRAY
1632: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1633: LD_ADDR_OWVAR 39
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1653: LD_ADDR_OWVAR 38
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: ARRAY
1668: PUSH
1669: LD_INT 4
1671: ARRAY
1672: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1673: LD_ADDR_OWVAR 40
1677: PUSH
1678: LD_VAR 0 5
1682: PUSH
1683: LD_VAR 0 2
1687: ARRAY
1688: PUSH
1689: LD_INT 5
1691: ARRAY
1692: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1693: LD_ADDR_OWVAR 41
1697: PUSH
1698: LD_INT 40
1700: ST_TO_ADDR
// veh = CreateVehicle ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: CALL_OW 45
1710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1711: LD_VAR 0 4
1715: PPUSH
1716: LD_INT 3
1718: PPUSH
1719: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1723: LD_VAR 0 4
1727: PPUSH
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 49
// end ;
1738: GO 1590
1740: POP
1741: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1742: LD_ADDR_VAR 0 6
1746: PUSH
1747: LD_INT 22
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 21
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 34
1769: PUSH
1770: LD_INT 12
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: ST_TO_ADDR
// if cargoList > 0 then
1787: LD_VAR 0 6
1791: PUSH
1792: LD_INT 0
1794: GREATER
1795: IFFALSE 1928
// for i = 1 to cargoList do
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: DOUBLE
1803: LD_INT 1
1805: DEC
1806: ST_TO_ADDR
1807: LD_VAR 0 6
1811: PUSH
1812: FOR_TO
1813: IFFALSE 1926
// begin if resources > 0 then
1815: LD_EXP 40
1819: PUSH
1820: LD_INT 0
1822: GREATER
1823: IFFALSE 1924
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1825: LD_VAR 0 6
1829: PUSH
1830: LD_VAR 0 2
1834: ARRAY
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: LD_EXP 40
1843: PUSH
1844: LD_VAR 0 2
1848: ARRAY
1849: PUSH
1850: LD_INT 1
1852: ARRAY
1853: PPUSH
1854: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1858: LD_VAR 0 6
1862: PUSH
1863: LD_VAR 0 2
1867: ARRAY
1868: PPUSH
1869: LD_INT 2
1871: PPUSH
1872: LD_EXP 40
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 2
1885: ARRAY
1886: PPUSH
1887: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1891: LD_VAR 0 6
1895: PUSH
1896: LD_VAR 0 2
1900: ARRAY
1901: PPUSH
1902: LD_INT 3
1904: PPUSH
1905: LD_EXP 40
1909: PUSH
1910: LD_VAR 0 2
1914: ARRAY
1915: PUSH
1916: LD_INT 3
1918: ARRAY
1919: PPUSH
1920: CALL_OW 291
// end ; end ;
1924: GO 1812
1926: POP
1927: POP
// end ; end ;
1928: LD_VAR 0 1
1932: RET
// export function PrepareOthers ; var i , veh ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
// uc_side = 1 ;
1938: LD_ADDR_OWVAR 20
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// uc_nation = 1 ;
1946: LD_ADDR_OWVAR 21
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1954: LD_ADDR_EXP 11
1958: PUSH
1959: LD_STRING OthersIn06
1961: PPUSH
1962: CALL_OW 31
1966: ST_TO_ADDR
// for i in others do
1967: LD_ADDR_VAR 0 2
1971: PUSH
1972: LD_EXP 11
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2068
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: LD_INT 22
1987: PUSH
1988: LD_INT 1
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 21
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 58
2007: PUSH
2008: EMPTY
2009: LIST
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: PPUSH
2016: CALL_OW 69
2020: ST_TO_ADDR
// if veh > 0 then
2021: LD_VAR 0 3
2025: PUSH
2026: LD_INT 0
2028: GREATER
2029: IFFALSE 2051
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: CALL_OW 52
// end else
2049: GO 2066
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2051: LD_VAR 0 2
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: CALL_OW 49
// end ; end ;
2066: GO 1977
2068: POP
2069: POP
// end ;
2070: LD_VAR 0 1
2074: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2075: LD_INT 0
2077: PPUSH
2078: PPUSH
2079: PPUSH
// uc_side = 1 ;
2080: LD_ADDR_OWVAR 20
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// uc_nation = 0 ;
2088: LD_ADDR_OWVAR 21
2092: PUSH
2093: LD_INT 0
2095: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2096: LD_ADDR_EXP 12
2100: PUSH
2101: LD_STRING ApeIn06
2103: PPUSH
2104: CALL_OW 31
2108: ST_TO_ADDR
// for i in ape do
2109: LD_ADDR_VAR 0 2
2113: PUSH
2114: LD_EXP 12
2118: PUSH
2119: FOR_IN
2120: IFFALSE 2139
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2122: LD_VAR 0 2
2126: PPUSH
2127: LD_INT 2
2129: PPUSH
2130: LD_INT 0
2132: PPUSH
2133: CALL_OW 49
2137: GO 2119
2139: POP
2140: POP
// end ;
2141: LD_VAR 0 1
2145: RET
// export function PrepareDenis ; var xy , i ; begin
2146: LD_INT 0
2148: PPUSH
2149: PPUSH
2150: PPUSH
// uc_side = 4 ;
2151: LD_ADDR_OWVAR 20
2155: PUSH
2156: LD_INT 4
2158: ST_TO_ADDR
// uc_nation = 1 ;
2159: LD_ADDR_OWVAR 21
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: LD_INT 63
2174: PUSH
2175: LD_INT 1
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 70
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PUSH
2192: LD_INT 83
2194: PUSH
2195: LD_INT 1
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 16
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 27
2214: PUSH
2215: LD_INT 1
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: LD_INT 38
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 5
2234: PUSH
2235: LD_INT 1
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 54
2244: PUSH
2245: LD_INT 1
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2262: LD_ADDR_EXP 9
2266: PUSH
2267: LD_STRING Denis
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: CALL 5869 0 2
2277: ST_TO_ADDR
// for i = 1 to xy do
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_VAR 0 2
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2393
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2296: LD_VAR 0 2
2300: PUSH
2301: LD_VAR 0 3
2305: ARRAY
2306: PUSH
2307: LD_INT 1
2309: ARRAY
2310: PPUSH
2311: LD_VAR 0 2
2315: PUSH
2316: LD_VAR 0 3
2320: ARRAY
2321: PUSH
2322: LD_INT 2
2324: ARRAY
2325: PPUSH
2326: CALL_OW 428
2330: PUSH
2331: LD_INT 0
2333: EQUAL
2334: IFFALSE 2391
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2336: LD_EXP 9
2340: PPUSH
2341: LD_VAR 0 2
2345: PUSH
2346: LD_VAR 0 3
2350: ARRAY
2351: PUSH
2352: LD_INT 1
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_VAR 0 3
2365: ARRAY
2366: PUSH
2367: LD_INT 2
2369: ARRAY
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 48
// if IsPlaced ( Denis ) then
2378: LD_EXP 9
2382: PPUSH
2383: CALL_OW 305
2387: IFFALSE 2391
// break ;
2389: GO 2393
// end ;
2391: GO 2293
2393: POP
2394: POP
// SetClass ( Denis , 4 ) ;
2395: LD_EXP 9
2399: PPUSH
2400: LD_INT 4
2402: PPUSH
2403: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2407: LD_EXP 9
2411: PPUSH
2412: LD_INT 750
2414: PPUSH
2415: CALL_OW 234
// end ;
2419: LD_VAR 0 1
2423: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2424: LD_INT 0
2426: PPUSH
2427: PPUSH
2428: PPUSH
2429: PPUSH
2430: PPUSH
// area := HarrisonSupportArea ;
2431: LD_ADDR_VAR 0 4
2435: PUSH
2436: LD_INT 3
2438: ST_TO_ADDR
// dir := 2 ;
2439: LD_ADDR_VAR 0 5
2443: PUSH
2444: LD_INT 2
2446: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2447: LD_VAR 0 4
2451: PPUSH
2452: LD_INT 21
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PPUSH
2462: CALL_OW 70
2466: IFFALSE 2484
// begin area := HarrisonSupportArea2 ;
2468: LD_ADDR_VAR 0 4
2472: PUSH
2473: LD_INT 31
2475: ST_TO_ADDR
// dir := 1 ;
2476: LD_ADDR_VAR 0 5
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// end ; uc_side = 1 ;
2484: LD_ADDR_OWVAR 20
2488: PUSH
2489: LD_INT 1
2491: ST_TO_ADDR
// uc_nation = 1 ;
2492: LD_ADDR_OWVAR 21
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// vc_engine = 1 ;
2500: LD_ADDR_OWVAR 39
2504: PUSH
2505: LD_INT 1
2507: ST_TO_ADDR
// vc_control = 1 ;
2508: LD_ADDR_OWVAR 38
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2516: LD_ADDR_OWVAR 40
2520: PUSH
2521: LD_INT 4
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: LD_INT 2
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_OWVAR 67
2539: ARRAY
2540: ST_TO_ADDR
// vc_chassis = 2 ;
2541: LD_ADDR_OWVAR 37
2545: PUSH
2546: LD_INT 2
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 3
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2559: LD_VAR 0 3
2563: PPUSH
2564: LD_VAR 0 5
2568: PPUSH
2569: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2573: LD_VAR 0 3
2577: PPUSH
2578: LD_VAR 0 4
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2590: LD_VAR 0 3
2594: PPUSH
2595: LD_INT 50
2597: PPUSH
2598: CALL_OW 240
// hc_class := 2 ;
2602: LD_ADDR_OWVAR 28
2606: PUSH
2607: LD_INT 2
2609: ST_TO_ADDR
// hc_sex := sex_male ;
2610: LD_ADDR_OWVAR 27
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2618: LD_ADDR_OWVAR 33
2622: PUSH
2623: LD_STRING SecondCharsGal
2625: ST_TO_ADDR
// hc_face_number := 52 ;
2626: LD_ADDR_OWVAR 34
2630: PUSH
2631: LD_INT 52
2633: ST_TO_ADDR
// hc_name := Craig Brown ;
2634: LD_ADDR_OWVAR 26
2638: PUSH
2639: LD_STRING Craig Brown
2641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2642: LD_ADDR_OWVAR 29
2646: PUSH
2647: LD_INT 10
2649: PUSH
2650: LD_INT 10
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2657: LD_ADDR_OWVAR 30
2661: PUSH
2662: LD_INT 0
2664: PUSH
2665: LD_INT 2
2667: PUSH
2668: LD_INT 0
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2680: LD_ADDR_OWVAR 31
2684: PUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: LD_INT 0
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2703: LD_ADDR_EXP 17
2707: PUSH
2708: CALL_OW 44
2712: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2713: LD_EXP 17
2717: PPUSH
2718: LD_VAR 0 3
2722: PPUSH
2723: CALL_OW 52
// vc_engine = 1 ;
2727: LD_ADDR_OWVAR 39
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
// vc_control = 1 ;
2735: LD_ADDR_OWVAR 38
2739: PUSH
2740: LD_INT 1
2742: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2743: LD_ADDR_OWVAR 40
2747: PUSH
2748: LD_INT 3
2750: ST_TO_ADDR
// vc_chassis = 2 ;
2751: LD_ADDR_OWVAR 37
2755: PUSH
2756: LD_INT 2
2758: ST_TO_ADDR
// veh = CreateVehicle ;
2759: LD_ADDR_VAR 0 3
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2769: LD_VAR 0 3
2773: PPUSH
2774: LD_VAR 0 5
2778: PPUSH
2779: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2783: LD_VAR 0 3
2787: PPUSH
2788: LD_VAR 0 4
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2800: LD_VAR 0 3
2804: PPUSH
2805: LD_INT 50
2807: PPUSH
2808: CALL_OW 240
// hc_class := 1 ;
2812: LD_ADDR_OWVAR 28
2816: PUSH
2817: LD_INT 1
2819: ST_TO_ADDR
// hc_sex := sex_female ;
2820: LD_ADDR_OWVAR 27
2824: PUSH
2825: LD_INT 2
2827: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2828: LD_ADDR_OWVAR 33
2832: PUSH
2833: LD_STRING SecondCharsGal
2835: ST_TO_ADDR
// hc_face_number := 45 ;
2836: LD_ADDR_OWVAR 34
2840: PUSH
2841: LD_INT 45
2843: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2844: LD_ADDR_OWVAR 29
2848: PUSH
2849: LD_INT 11
2851: PUSH
2852: LD_INT 10
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2859: LD_ADDR_OWVAR 26
2863: PUSH
2864: LD_STRING Ingrid Jonsson
2866: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2867: LD_ADDR_OWVAR 30
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2890: LD_ADDR_OWVAR 31
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 1
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2913: LD_ADDR_EXP 18
2917: PUSH
2918: CALL_OW 44
2922: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2923: LD_EXP 18
2927: PPUSH
2928: LD_VAR 0 3
2932: PPUSH
2933: CALL_OW 52
// end ;
2937: LD_VAR 0 1
2941: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
2948: PPUSH
// j = 0 ;
2949: LD_ADDR_VAR 0 3
2953: PUSH
2954: LD_INT 0
2956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2957: LD_INT 35
2959: PPUSH
2960: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2964: LD_ADDR_VAR 0 2
2968: PUSH
2969: LD_INT 22
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: PUSH
2979: LD_INT 21
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 26
2991: PUSH
2992: LD_INT 1
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 25
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 25
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 25
3034: PUSH
3035: LD_INT 4
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 69
3059: PUSH
3060: FOR_IN
3061: IFFALSE 3187
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3063: LD_INT 22
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 21
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 21
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 59
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 91
3121: PUSH
3122: LD_VAR 0 2
3126: PUSH
3127: LD_INT 25
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: PPUSH
3140: CALL_OW 69
3144: NOT
3145: PUSH
3146: LD_VAR 0 2
3150: PPUSH
3151: LD_EXP 1
3155: PPUSH
3156: CALL_OW 296
3160: PUSH
3161: LD_INT 15
3163: LESS
3164: AND
3165: IFFALSE 3185
// begin tmp = i ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: LD_VAR 0 2
3176: ST_TO_ADDR
// j = 1 ;
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: LD_INT 1
3184: ST_TO_ADDR
// end ; end ;
3185: GO 3060
3187: POP
3188: POP
// until j = 1 ;
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 1
3196: EQUAL
3197: IFFALSE 2957
// blockSpawn = 1 ;
3199: LD_ADDR_EXP 29
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// uc_side = 4 ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_INT 4
3214: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3215: LD_ADDR_EXP 15
3219: PUSH
3220: LD_STRING Joan
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL 5869 0 2
3230: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3231: LD_EXP 15
3235: PPUSH
3236: LD_VAR 0 4
3240: PPUSH
3241: CALL_OW 250
3245: PPUSH
3246: LD_VAR 0 4
3250: PPUSH
3251: CALL_OW 251
3255: PPUSH
3256: LD_INT 5
3258: PPUSH
3259: LD_INT 1
3261: PPUSH
3262: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3266: LD_EXP 15
3270: PPUSH
3271: LD_INT 250
3273: PPUSH
3274: CALL_OW 234
// InGameOn ;
3278: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 87
// wait ( 0 0$2 ) ;
3291: LD_INT 70
3293: PPUSH
3294: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3298: LD_VAR 0 4
3302: PPUSH
3303: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3307: LD_VAR 0 4
3311: PPUSH
3312: CALL_OW 122
// wait ( 0 0$1 ) ;
3316: LD_INT 35
3318: PPUSH
3319: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3323: LD_VAR 0 4
3327: PPUSH
3328: LD_EXP 15
3332: PPUSH
3333: CALL_OW 112
// wait ( 0 0$2 ) ;
3337: LD_INT 70
3339: PPUSH
3340: CALL_OW 67
// DialogueOn ;
3344: CALL_OW 6
// if tmp = JMM then
3348: LD_VAR 0 4
3352: PUSH
3353: LD_EXP 1
3357: EQUAL
3358: IFFALSE 3507
// begin ComTurnUnit ( JMM , Joan ) ;
3360: LD_EXP 1
3364: PPUSH
3365: LD_EXP 15
3369: PPUSH
3370: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3374: LD_EXP 1
3378: PPUSH
3379: LD_STRING D5b-JMM-1
3381: PPUSH
3382: CALL_OW 88
// DialogueOff ;
3386: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3390: LD_EXP 15
3394: PPUSH
3395: LD_INT 500
3397: PPUSH
3398: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3402: LD_EXP 15
3406: PPUSH
3407: LD_EXP 1
3411: PPUSH
3412: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3416: LD_EXP 1
3420: PPUSH
3421: LD_EXP 15
3425: PPUSH
3426: CALL_OW 119
// wait ( 0 0$1 ) ;
3430: LD_INT 35
3432: PPUSH
3433: CALL_OW 67
// DialogueOn ;
3437: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3441: LD_EXP 15
3445: PPUSH
3446: LD_STRING D5b-Joan-1
3448: PPUSH
3449: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3453: LD_EXP 1
3457: PPUSH
3458: LD_STRING D5b-JMM-2
3460: PPUSH
3461: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3465: LD_EXP 15
3469: PPUSH
3470: LD_STRING D5b-Joan-2
3472: PPUSH
3473: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3477: LD_EXP 1
3481: PPUSH
3482: LD_STRING D5b-JMM-3
3484: PPUSH
3485: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3489: LD_EXP 15
3493: PPUSH
3494: LD_STRING D5b-Joan-3
3496: PPUSH
3497: CALL_OW 88
// DialogueOff ;
3501: CALL_OW 7
// end else
3505: GO 3842
// begin ComTurnUnit ( tmp , Joan ) ;
3507: LD_VAR 0 4
3511: PPUSH
3512: LD_EXP 15
3516: PPUSH
3517: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3521: LD_VAR 0 4
3525: PPUSH
3526: LD_STRING D5a-Sol1-1
3528: PPUSH
3529: CALL_OW 88
// DialogueOff ;
3533: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3537: LD_EXP 15
3541: PPUSH
3542: LD_INT 500
3544: PPUSH
3545: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3549: LD_EXP 15
3553: PPUSH
3554: LD_VAR 0 4
3558: PPUSH
3559: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3563: LD_VAR 0 4
3567: PPUSH
3568: LD_EXP 15
3572: PPUSH
3573: CALL_OW 119
// wait ( 0 0$1 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// DialogueOn ;
3584: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3588: LD_EXP 15
3592: PPUSH
3593: LD_STRING D5a-Joan-1
3595: PPUSH
3596: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_STRING D5a-Sol1-2
3607: PPUSH
3608: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D5a-Joan-2
3619: PPUSH
3620: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3624: LD_VAR 0 4
3628: PPUSH
3629: LD_STRING D5a-Sol1-3
3631: PPUSH
3632: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3636: LD_EXP 15
3640: PPUSH
3641: LD_STRING D5a-Joan-3
3643: PPUSH
3644: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3648: LD_VAR 0 4
3652: PPUSH
3653: LD_STRING D5a-Sol1-4
3655: PPUSH
3656: CALL_OW 88
// DialogueOff ;
3660: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3664: LD_EXP 1
3668: PPUSH
3669: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3673: LD_EXP 1
3677: PPUSH
3678: CALL_OW 122
// wait ( 0 0$1 ) ;
3682: LD_INT 35
3684: PPUSH
3685: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3696: LD_EXP 15
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PPUSH
3710: LD_EXP 1
3714: PPUSH
3715: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3719: LD_EXP 15
3723: PPUSH
3724: LD_EXP 1
3728: PPUSH
3729: CALL_OW 296
3733: PUSH
3734: LD_INT 5
3736: LESS
3737: IFFALSE 3689
// ComTurnUnit ( Joan , JMM ) ;
3739: LD_EXP 15
3743: PPUSH
3744: LD_EXP 1
3748: PPUSH
3749: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3753: LD_EXP 1
3757: PPUSH
3758: LD_EXP 15
3762: PPUSH
3763: CALL_OW 119
// wait ( 0 0$1 ) ;
3767: LD_INT 35
3769: PPUSH
3770: CALL_OW 67
// DialogueOn ;
3774: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3778: LD_EXP 15
3782: PPUSH
3783: LD_STRING D5a-Joan-4
3785: PPUSH
3786: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3790: LD_EXP 1
3794: PPUSH
3795: LD_STRING D5a-JMM-4
3797: PPUSH
3798: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3802: LD_EXP 15
3806: PPUSH
3807: LD_STRING D5a-Joan-5
3809: PPUSH
3810: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3814: LD_EXP 1
3818: PPUSH
3819: LD_STRING D5a-JMM-5
3821: PPUSH
3822: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3826: LD_EXP 15
3830: PPUSH
3831: LD_STRING D5a-Joan-6
3833: PPUSH
3834: CALL_OW 88
// DialogueOff ;
3838: CALL_OW 7
// end ; DialogueOn ;
3842: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3846: LD_EXP 1
3850: PPUSH
3851: LD_STRING D6-JMM-1
3853: PPUSH
3854: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3858: LD_EXP 15
3862: PPUSH
3863: LD_STRING D6-Joan-1
3865: PPUSH
3866: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3870: LD_EXP 1
3874: PPUSH
3875: LD_STRING D6-JMM-2
3877: PPUSH
3878: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3882: LD_EXP 15
3886: PPUSH
3887: LD_STRING D6-Joan-2
3889: PPUSH
3890: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3894: LD_EXP 1
3898: PPUSH
3899: LD_STRING D6-JMM-3
3901: PPUSH
3902: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_STRING D6-Joan-3
3913: PPUSH
3914: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3918: LD_EXP 1
3922: PPUSH
3923: LD_STRING D6-JMM-4
3925: PPUSH
3926: CALL_OW 88
// DialogueOff ;
3930: CALL_OW 7
// InGameOff ;
3934: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3938: LD_EXP 15
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3950: LD_STRING MJ
3952: PPUSH
3953: CALL_OW 337
// JoanStatus = 1 ;
3957: LD_ADDR_EXP 16
3961: PUSH
3962: LD_INT 1
3964: ST_TO_ADDR
// blockSpawn = 0 ;
3965: LD_ADDR_EXP 29
3969: PUSH
3970: LD_INT 0
3972: ST_TO_ADDR
// end ;
3973: LD_VAR 0 1
3977: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3978: LD_INT 0
3980: PPUSH
3981: PPUSH
// repeat wait ( 0 0$7 ) ;
3982: LD_INT 245
3984: PPUSH
3985: CALL_OW 67
// until blockSpawn = 0 ;
3989: LD_EXP 29
3993: PUSH
3994: LD_INT 0
3996: EQUAL
3997: IFFALSE 3982
// uc_side = 1 ;
3999: LD_ADDR_OWVAR 20
4003: PUSH
4004: LD_INT 1
4006: ST_TO_ADDR
// uc_nation = 1 ;
4007: LD_ADDR_OWVAR 21
4011: PUSH
4012: LD_INT 1
4014: ST_TO_ADDR
// InitHc ;
4015: CALL_OW 19
// if number = 1 then
4019: LD_VAR 0 1
4023: PUSH
4024: LD_INT 1
4026: EQUAL
4027: IFFALSE 4203
// begin hc_class := 3 ;
4029: LD_ADDR_OWVAR 28
4033: PUSH
4034: LD_INT 3
4036: ST_TO_ADDR
// hc_sex := sex_male ;
4037: LD_ADDR_OWVAR 27
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4045: LD_ADDR_OWVAR 33
4049: PUSH
4050: LD_STRING SecondCharsGal
4052: ST_TO_ADDR
// hc_face_number := 55 ;
4053: LD_ADDR_OWVAR 34
4057: PUSH
4058: LD_INT 55
4060: ST_TO_ADDR
// hc_name := George McCarthy ;
4061: LD_ADDR_OWVAR 26
4065: PUSH
4066: LD_STRING George McCarthy
4068: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4069: LD_ADDR_OWVAR 29
4073: PUSH
4074: LD_INT 11
4076: PUSH
4077: LD_INT 10
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4084: LD_ADDR_OWVAR 30
4088: PUSH
4089: LD_INT 0
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 2
4097: PUSH
4098: LD_INT 0
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4107: LD_ADDR_OWVAR 31
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
// un = CreateHuman ;
4130: LD_ADDR_VAR 0 3
4134: PUSH
4135: CALL_OW 44
4139: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4140: LD_VAR 0 3
4144: PPUSH
4145: LD_INT 23
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4155: LD_VAR 0 3
4159: PPUSH
4160: CALL_OW 87
// wait ( 0 0$1 ) ;
4164: LD_INT 35
4166: PPUSH
4167: CALL_OW 67
// DialogueOn ;
4171: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4175: LD_VAR 0 3
4179: PPUSH
4180: LD_STRING D11d-Sol4-1
4182: PPUSH
4183: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4187: LD_EXP 1
4191: PPUSH
4192: LD_STRING D11d-JMM-1
4194: PPUSH
4195: CALL_OW 88
// DialogueOff ;
4199: CALL_OW 7
// end ; if number = 2 then
4203: LD_VAR 0 1
4207: PUSH
4208: LD_INT 2
4210: EQUAL
4211: IFFALSE 4387
// begin hc_class := 1 ;
4213: LD_ADDR_OWVAR 28
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// hc_sex := sex_male ;
4221: LD_ADDR_OWVAR 27
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4229: LD_ADDR_OWVAR 33
4233: PUSH
4234: LD_STRING AmGalRemake
4236: ST_TO_ADDR
// hc_face_number := 7 ;
4237: LD_ADDR_OWVAR 34
4241: PUSH
4242: LD_INT 7
4244: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4245: LD_ADDR_OWVAR 26
4249: PUSH
4250: LD_STRING Bobby Jordan
4252: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4253: LD_ADDR_OWVAR 29
4257: PUSH
4258: LD_INT 9
4260: PUSH
4261: LD_INT 11
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4268: LD_ADDR_OWVAR 30
4272: PUSH
4273: LD_INT 1
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4291: LD_ADDR_OWVAR 31
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: LD_INT 1
4301: PUSH
4302: LD_INT 1
4304: PUSH
4305: LD_INT 1
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: ST_TO_ADDR
// un = CreateHuman ;
4314: LD_ADDR_VAR 0 3
4318: PUSH
4319: CALL_OW 44
4323: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4324: LD_VAR 0 3
4328: PPUSH
4329: LD_INT 24
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: CALL_OW 49
// wait ( 0 0$1 ) ;
4339: LD_INT 35
4341: PPUSH
4342: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: CALL_OW 87
// DialogueOn ;
4355: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4359: LD_VAR 0 3
4363: PPUSH
4364: LD_STRING D11b-Sol3-1
4366: PPUSH
4367: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4371: LD_EXP 1
4375: PPUSH
4376: LD_STRING D11b-JMM-1
4378: PPUSH
4379: CALL_OW 88
// DialogueOff ;
4383: CALL_OW 7
// end ; if number = 3 then
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 3
4394: EQUAL
4395: IFFALSE 4559
// begin hc_class := 1 ;
4397: LD_ADDR_OWVAR 28
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// hc_sex := sex_male ;
4405: LD_ADDR_OWVAR 27
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// hc_gallery := DJ ;
4413: LD_ADDR_OWVAR 33
4417: PUSH
4418: LD_STRING DJ
4420: ST_TO_ADDR
// hc_face_number := 1 ;
4421: LD_ADDR_OWVAR 34
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// hc_name := Darius Dajay ;
4429: LD_ADDR_OWVAR 26
4433: PUSH
4434: LD_STRING Darius Dajay
4436: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4437: LD_ADDR_OWVAR 29
4441: PUSH
4442: LD_INT 11
4444: PUSH
4445: LD_INT 11
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4452: LD_ADDR_OWVAR 30
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4475: LD_ADDR_OWVAR 31
4479: PUSH
4480: LD_INT 4
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: ST_TO_ADDR
// un = CreateHuman ;
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: CALL_OW 44
4507: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4508: LD_VAR 0 3
4512: PPUSH
4513: LD_INT 25
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: CALL_OW 87
// wait ( 0 0$1 ) ;
4532: LD_INT 35
4534: PPUSH
4535: CALL_OW 67
// DialogueOn ;
4539: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_STRING D11f-Sol5-1
4550: PPUSH
4551: CALL_OW 88
// DialogueOff ;
4555: CALL_OW 7
// end ; if number = 4 then
4559: LD_VAR 0 1
4563: PUSH
4564: LD_INT 4
4566: EQUAL
4567: IFFALSE 4731
// begin hc_class := 3 ;
4569: LD_ADDR_OWVAR 28
4573: PUSH
4574: LD_INT 3
4576: ST_TO_ADDR
// hc_sex := sex_female ;
4577: LD_ADDR_OWVAR 27
4581: PUSH
4582: LD_INT 2
4584: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4585: LD_ADDR_OWVAR 33
4589: PUSH
4590: LD_STRING SecondCharsGal
4592: ST_TO_ADDR
// hc_face_number := 46 ;
4593: LD_ADDR_OWVAR 34
4597: PUSH
4598: LD_INT 46
4600: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4601: LD_ADDR_OWVAR 26
4605: PUSH
4606: LD_STRING Sylvia Creak
4608: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4609: LD_ADDR_OWVAR 29
4613: PUSH
4614: LD_INT 10
4616: PUSH
4617: LD_INT 9
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4624: LD_ADDR_OWVAR 30
4628: PUSH
4629: LD_INT 0
4631: PUSH
4632: LD_INT 1
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: LD_INT 1
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4647: LD_ADDR_OWVAR 31
4651: PUSH
4652: LD_INT 1
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: LD_INT 1
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: ST_TO_ADDR
// un = CreateHuman ;
4670: LD_ADDR_VAR 0 3
4674: PUSH
4675: CALL_OW 44
4679: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4680: LD_VAR 0 3
4684: PPUSH
4685: LD_INT 26
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4695: LD_VAR 0 3
4699: PPUSH
4700: CALL_OW 87
// wait ( 0 0$1 ) ;
4704: LD_INT 35
4706: PPUSH
4707: CALL_OW 67
// DialogueOn ;
4711: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4715: LD_VAR 0 3
4719: PPUSH
4720: LD_STRING D11e-FSol4-1
4722: PPUSH
4723: CALL_OW 88
// DialogueOff ;
4727: CALL_OW 7
// end ; if number = 5 then
4731: LD_VAR 0 1
4735: PUSH
4736: LD_INT 5
4738: EQUAL
4739: IFFALSE 4915
// begin hc_class := 1 ;
4741: LD_ADDR_OWVAR 28
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
// hc_sex := sex_female ;
4749: LD_ADDR_OWVAR 27
4753: PUSH
4754: LD_INT 2
4756: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4757: LD_ADDR_OWVAR 33
4761: PUSH
4762: LD_STRING SecondCharsGal
4764: ST_TO_ADDR
// hc_face_number := 37 ;
4765: LD_ADDR_OWVAR 34
4769: PUSH
4770: LD_INT 37
4772: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4773: LD_ADDR_OWVAR 26
4777: PUSH
4778: LD_STRING Margherite Simpson
4780: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4781: LD_ADDR_OWVAR 29
4785: PUSH
4786: LD_INT 11
4788: PUSH
4789: LD_INT 10
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4796: LD_ADDR_OWVAR 30
4800: PUSH
4801: LD_INT 1
4803: PUSH
4804: LD_INT 1
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4819: LD_ADDR_OWVAR 31
4823: PUSH
4824: LD_INT 1
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 1
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: ST_TO_ADDR
// un = CreateHuman ;
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: CALL_OW 44
4851: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4852: LD_VAR 0 3
4856: PPUSH
4857: LD_INT 27
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4867: LD_VAR 0 3
4871: PPUSH
4872: CALL_OW 87
// wait ( 0 0$1 ) ;
4876: LD_INT 35
4878: PPUSH
4879: CALL_OW 67
// DialogueOn ;
4883: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_STRING D11c-FSol3-1
4894: PPUSH
4895: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4899: LD_EXP 1
4903: PPUSH
4904: LD_STRING D11c-JMM-1
4906: PPUSH
4907: CALL_OW 88
// DialogueOff ;
4911: CALL_OW 7
// end ; if number = 6 then
4915: LD_VAR 0 1
4919: PUSH
4920: LD_INT 6
4922: EQUAL
4923: IFFALSE 5097
// begin hc_class := 1 ;
4925: LD_ADDR_OWVAR 28
4929: PUSH
4930: LD_INT 1
4932: ST_TO_ADDR
// hc_sex := sex_male ;
4933: LD_ADDR_OWVAR 27
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4941: LD_ADDR_OWVAR 33
4945: PUSH
4946: LD_STRING AmGalRemake
4948: ST_TO_ADDR
// hc_face_number := 1 ;
4949: LD_ADDR_OWVAR 34
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// hc_name := Charles Brown ;
4957: LD_ADDR_OWVAR 26
4961: PUSH
4962: LD_STRING Charles Brown
4964: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4965: LD_ADDR_OWVAR 29
4969: PUSH
4970: LD_INT 12
4972: PUSH
4973: LD_INT 11
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4980: LD_ADDR_OWVAR 30
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: LD_INT 0
4990: PUSH
4991: LD_INT 0
4993: PUSH
4994: LD_INT 0
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5003: LD_ADDR_OWVAR 31
5007: PUSH
5008: LD_INT 3
5010: PUSH
5011: LD_INT 0
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: ST_TO_ADDR
// un = CreateHuman ;
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: CALL_OW 44
5035: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5036: LD_VAR 0 3
5040: PPUSH
5041: LD_INT 28
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5051: LD_VAR 0 3
5055: PPUSH
5056: CALL_OW 87
// wait ( 0 0$1 ) ;
5060: LD_INT 35
5062: PPUSH
5063: CALL_OW 67
// DialogueOn ;
5067: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5071: LD_VAR 0 3
5075: PPUSH
5076: LD_STRING D4-Sol1-5
5078: PPUSH
5079: CALL_OW 88
// DialogueOff ;
5083: CALL_OW 7
// tempCharles = un ;
5087: LD_ADDR_EXP 13
5091: PUSH
5092: LD_VAR 0 3
5096: ST_TO_ADDR
// end ; if number = 7 then
5097: LD_VAR 0 1
5101: PUSH
5102: LD_INT 7
5104: EQUAL
5105: IFFALSE 5355
// begin hc_class := 1 ;
5107: LD_ADDR_OWVAR 28
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// hc_sex := sex_female ;
5115: LD_ADDR_OWVAR 27
5119: PUSH
5120: LD_INT 2
5122: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5123: LD_ADDR_OWVAR 33
5127: PUSH
5128: LD_STRING AmGalRemake
5130: ST_TO_ADDR
// hc_face_number := 2 ;
5131: LD_ADDR_OWVAR 34
5135: PUSH
5136: LD_INT 2
5138: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5139: LD_ADDR_OWVAR 26
5143: PUSH
5144: LD_STRING Rebecca Macdonald
5146: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5147: LD_ADDR_OWVAR 29
5151: PUSH
5152: LD_INT 10
5154: PUSH
5155: LD_INT 10
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5162: LD_ADDR_OWVAR 30
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: LD_INT 1
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5185: LD_ADDR_OWVAR 31
5189: PUSH
5190: LD_INT 1
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: ST_TO_ADDR
// un = CreateHuman ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: CALL_OW 44
5217: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5218: LD_VAR 0 3
5222: PPUSH
5223: LD_INT 29
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5233: LD_VAR 0 3
5237: PPUSH
5238: CALL_OW 87
// wait ( 0 0$1 ) ;
5242: LD_INT 35
5244: PPUSH
5245: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5249: LD_INT 30
5251: PPUSH
5252: LD_INT 22
5254: PUSH
5255: LD_INT 3
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: IFFALSE 5355
// begin DialogueOn ;
5268: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5272: LD_VAR 0 3
5276: PPUSH
5277: CALL_OW 250
5281: PPUSH
5282: LD_VAR 0 3
5286: PPUSH
5287: CALL_OW 251
5291: PPUSH
5292: LD_INT 1
5294: PPUSH
5295: LD_INT 15
5297: NEG
5298: PPUSH
5299: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5303: LD_VAR 0 3
5307: PPUSH
5308: CALL_OW 250
5312: PPUSH
5313: LD_VAR 0 3
5317: PPUSH
5318: CALL_OW 251
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5330: LD_VAR 0 3
5334: PPUSH
5335: LD_STRING D11a-FSol2-1
5337: PPUSH
5338: CALL_OW 88
// ComCrawl ( un ) ;
5342: LD_VAR 0 3
5346: PPUSH
5347: CALL_OW 137
// DialogueOff ;
5351: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5355: LD_ADDR_EXP 45
5359: PUSH
5360: LD_EXP 45
5364: PUSH
5365: LD_VAR 0 3
5369: UNION
5370: ST_TO_ADDR
// arrivals := arrivals union un ;
5371: LD_ADDR_EXP 46
5375: PUSH
5376: LD_EXP 46
5380: PUSH
5381: LD_VAR 0 3
5385: UNION
5386: ST_TO_ADDR
// end ;
5387: LD_VAR 0 2
5391: RET
// every 0 0$1 do var i ;
5392: GO 5394
5394: DISABLE
5395: LD_INT 0
5397: PPUSH
// begin enable ;
5398: ENABLE
// if not ignoreTarget then
5399: LD_EXP 45
5403: NOT
5404: IFFALSE 5408
// exit ;
5406: GO 5489
// for i in ignoreTarget do
5408: LD_ADDR_VAR 0 1
5412: PUSH
5413: LD_EXP 45
5417: PUSH
5418: FOR_IN
5419: IFFALSE 5487
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5421: LD_INT 22
5423: PUSH
5424: LD_INT 1
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 91
5433: PUSH
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 10
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 69
5455: PUSH
5456: LD_EXP 45
5460: DIFF
5461: PUSH
5462: LD_INT 1
5464: GREATER
5465: IFFALSE 5485
// begin ignoreTarget := ignoreTarget diff i ;
5467: LD_ADDR_EXP 45
5471: PUSH
5472: LD_EXP 45
5476: PUSH
5477: LD_VAR 0 1
5481: DIFF
5482: ST_TO_ADDR
// break ;
5483: GO 5487
// end ;
5485: GO 5418
5487: POP
5488: POP
// end ; end_of_file
5489: PPOPN 1
5491: END
// export function PrepareRussian ; var i ; begin
5492: LD_INT 0
5494: PPUSH
5495: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: LD_EXP 34
5509: PPUSH
5510: LD_EXP 35
5514: PPUSH
5515: CALL_OW 12
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: LD_INT 4
5525: PPUSH
5526: CALL 6061 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 8
5538: PPUSH
5539: LD_EXP 34
5543: PPUSH
5544: LD_EXP 35
5548: PPUSH
5549: CALL_OW 12
5553: PPUSH
5554: LD_INT 1
5556: PPUSH
5557: LD_INT 4
5559: PPUSH
5560: CALL 6061 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5564: LD_INT 3
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: LD_INT 67
5572: PPUSH
5573: LD_EXP 34
5577: PPUSH
5578: LD_EXP 35
5582: PPUSH
5583: CALL_OW 12
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL 6061 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 3
5603: PPUSH
5604: LD_INT 21
5606: PPUSH
5607: LD_EXP 34
5611: PPUSH
5612: LD_EXP 35
5616: PPUSH
5617: CALL_OW 12
5621: PPUSH
5622: LD_INT 3
5624: PPUSH
5625: LD_INT 6
5627: PPUSH
5628: CALL 6061 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5632: LD_INT 3
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: LD_INT 17
5640: PPUSH
5641: LD_EXP 34
5645: PPUSH
5646: LD_EXP 35
5650: PPUSH
5651: CALL_OW 12
5655: PPUSH
5656: LD_INT 3
5658: PPUSH
5659: LD_INT 6
5661: PPUSH
5662: CALL 6061 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5666: LD_INT 3
5668: PPUSH
5669: LD_INT 3
5671: PPUSH
5672: LD_INT 32
5674: PPUSH
5675: LD_EXP 34
5679: PPUSH
5680: LD_EXP 35
5684: PPUSH
5685: CALL_OW 12
5689: PPUSH
5690: LD_INT 4
5692: PPUSH
5693: LD_INT 2
5695: PPUSH
5696: CALL 6061 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5700: LD_ADDR_VAR 0 2
5704: PUSH
5705: LD_INT 22
5707: PUSH
5708: LD_INT 3
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 21
5717: PUSH
5718: LD_INT 3
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 30
5727: PUSH
5728: LD_INT 32
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: PPUSH
5740: CALL_OW 69
5744: PUSH
5745: FOR_IN
5746: IFFALSE 5786
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_EXP 34
5763: PPUSH
5764: LD_EXP 35
5768: PPUSH
5769: CALL_OW 12
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: CALL 6061 0 6
5784: GO 5745
5786: POP
5787: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 3
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 21
5805: PUSH
5806: LD_INT 3
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 30
5815: PUSH
5816: LD_INT 31
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: PPUSH
5828: CALL_OW 69
5832: PUSH
5833: FOR_IN
5834: IFFALSE 5862
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5836: LD_EXP 34
5840: PPUSH
5841: LD_EXP 35
5845: PPUSH
5846: CALL_OW 12
5850: PPUSH
5851: LD_VAR 0 2
5855: PPUSH
5856: CALL 6171 0 2
5860: GO 5833
5862: POP
5863: POP
// end ; end_of_file
5864: LD_VAR 0 1
5868: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5869: LD_INT 0
5871: PPUSH
5872: PPUSH
// if exist_mode then
5873: LD_VAR 0 2
5877: IFFALSE 5902
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: LD_EXP 44
5888: PUSH
5889: LD_VAR 0 1
5893: STR
5894: PPUSH
5895: CALL_OW 34
5899: ST_TO_ADDR
// end else
5900: GO 5917
// begin unit := NewCharacter ( ident ) ;
5902: LD_ADDR_VAR 0 4
5906: PUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 25
5916: ST_TO_ADDR
// end ; result := unit ;
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_VAR 0 4
5926: ST_TO_ADDR
// end ;
5927: LD_VAR 0 3
5931: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
5937: LD_ADDR_VAR 0 6
5941: PUSH
5942: LD_VAR 0 1
5946: PUSH
5947: LD_INT 1
5949: PPUSH
5950: LD_VAR 0 1
5954: PPUSH
5955: CALL_OW 12
5959: ARRAY
5960: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5961: LD_VAR 0 6
5965: PPUSH
5966: CALL_OW 258
5970: PUSH
5971: LD_INT 1
5973: EQUAL
5974: IFFALSE 5992
// Say ( speaker , dialogMID ) else
5976: LD_VAR 0 6
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL_OW 88
5990: GO 6006
// Say ( speaker , dialogFID ) ;
5992: LD_VAR 0 6
5996: PPUSH
5997: LD_VAR 0 3
6001: PPUSH
6002: CALL_OW 88
// result := speaker ;
6006: LD_ADDR_VAR 0 4
6010: PUSH
6011: LD_VAR 0 6
6015: ST_TO_ADDR
// end ;
6016: LD_VAR 0 4
6020: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
// for i in charactersList do
6025: LD_ADDR_VAR 0 4
6029: PUSH
6030: LD_VAR 0 1
6034: PUSH
6035: FOR_IN
6036: IFFALSE 6054
// SaveCharacters ( i , ident ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_VAR 0 2
6047: PPUSH
6048: CALL_OW 38
6052: GO 6035
6054: POP
6055: POP
// end ;
6056: LD_VAR 0 3
6060: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
// for i = 1 to count do
6067: LD_ADDR_VAR 0 8
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_VAR 0 6
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6164
// begin uc_side = side ;
6085: LD_ADDR_OWVAR 20
6089: PUSH
6090: LD_VAR 0 1
6094: ST_TO_ADDR
// uc_nation = nation ;
6095: LD_ADDR_OWVAR 21
6099: PUSH
6100: LD_VAR 0 2
6104: ST_TO_ADDR
// hc_gallery =  ;
6105: LD_ADDR_OWVAR 33
6109: PUSH
6110: LD_STRING 
6112: ST_TO_ADDR
// hc_name =  ;
6113: LD_ADDR_OWVAR 26
6117: PUSH
6118: LD_STRING 
6120: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6121: LD_INT 0
6123: PPUSH
6124: LD_VAR 0 5
6128: PPUSH
6129: LD_VAR 0 4
6133: PPUSH
6134: CALL_OW 380
// un = CreateHuman ;
6138: LD_ADDR_VAR 0 10
6142: PUSH
6143: CALL_OW 44
6147: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6148: LD_VAR 0 10
6152: PPUSH
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 52
// end ;
6162: GO 6082
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 7
6170: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6171: LD_INT 0
6173: PPUSH
6174: PPUSH
6175: PPUSH
// uc_side := GetSide ( b ) ;
6176: LD_ADDR_OWVAR 20
6180: PUSH
6181: LD_VAR 0 2
6185: PPUSH
6186: CALL_OW 255
6190: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6191: LD_ADDR_OWVAR 21
6195: PUSH
6196: LD_VAR 0 2
6200: PPUSH
6201: CALL_OW 248
6205: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6206: LD_INT 0
6208: PPUSH
6209: LD_INT 1
6211: PPUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: LD_VAR 0 2
6230: PPUSH
6231: CALL_OW 254
6235: PUSH
6236: LD_INT 3
6238: MINUS
6239: ST_TO_ADDR
// if dir < 0 then
6240: LD_VAR 0 5
6244: PUSH
6245: LD_INT 0
6247: LESS
6248: IFFALSE 6264
// dir := 6 + dir ;
6250: LD_ADDR_VAR 0 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_VAR 0 5
6262: PLUS
6263: ST_TO_ADDR
// un := CreateHuman ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: CALL_OW 44
6273: ST_TO_ADDR
// SetDir ( un , dir ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_VAR 0 5
6283: PPUSH
6284: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6288: LD_VAR 0 4
6292: PPUSH
6293: LD_VAR 0 2
6297: PPUSH
6298: CALL_OW 52
// end ;
6302: LD_VAR 0 3
6306: RET
// export function PrepareDifficulty ; begin
6307: LD_INT 0
6309: PPUSH
// if Difficulty = 1 then
6310: LD_OWVAR 67
6314: PUSH
6315: LD_INT 1
6317: EQUAL
6318: IFFALSE 6336
// begin RuSolMinLevel = 2 ;
6320: LD_ADDR_EXP 34
6324: PUSH
6325: LD_INT 2
6327: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6328: LD_ADDR_EXP 35
6332: PUSH
6333: LD_INT 4
6335: ST_TO_ADDR
// end ; if Difficulty = 2 then
6336: LD_OWVAR 67
6340: PUSH
6341: LD_INT 2
6343: EQUAL
6344: IFFALSE 6362
// begin RuSolMinLevel = 3 ;
6346: LD_ADDR_EXP 34
6350: PUSH
6351: LD_INT 3
6353: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6354: LD_ADDR_EXP 35
6358: PUSH
6359: LD_INT 5
6361: ST_TO_ADDR
// end ; if Difficulty = 3 then
6362: LD_OWVAR 67
6366: PUSH
6367: LD_INT 3
6369: EQUAL
6370: IFFALSE 6388
// begin RuSolMinLevel = 3 ;
6372: LD_ADDR_EXP 34
6376: PUSH
6377: LD_INT 3
6379: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6380: LD_ADDR_EXP 35
6384: PUSH
6385: LD_INT 6
6387: ST_TO_ADDR
// end ; end ;
6388: LD_VAR 0 1
6392: RET
// export function ShowQuery1 ; begin
6393: LD_INT 0
6395: PPUSH
// case query ( QKill ) of 1 :
6396: LD_STRING QKill
6398: PPUSH
6399: CALL_OW 97
6403: PUSH
6404: LD_INT 1
6406: DOUBLE
6407: EQUAL
6408: IFTRUE 6412
6410: GO 6423
6412: POP
// begin result = 1 ;
6413: LD_ADDR_VAR 0 1
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// end ; 2 :
6421: GO 6462
6423: LD_INT 2
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6442
6431: POP
// begin result = 2 ;
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_INT 2
6439: ST_TO_ADDR
// end ; 3 :
6440: GO 6462
6442: LD_INT 3
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6461
6450: POP
// begin result = 3 ;
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 3
6458: ST_TO_ADDR
// end ; end ;
6459: GO 6462
6461: POP
// end ;
6462: LD_VAR 0 1
6466: RET
// export function ShowQuery2 ; begin
6467: LD_INT 0
6469: PPUSH
// case query ( QKill2 ) of 1 :
6470: LD_STRING QKill2
6472: PPUSH
6473: CALL_OW 97
6477: PUSH
6478: LD_INT 1
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6497
6486: POP
// begin result = 1 ;
6487: LD_ADDR_VAR 0 1
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// end ; 2 :
6495: GO 6517
6497: LD_INT 2
6499: DOUBLE
6500: EQUAL
6501: IFTRUE 6505
6503: GO 6516
6505: POP
// begin result = 2 ;
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_INT 2
6513: ST_TO_ADDR
// end ; end ;
6514: GO 6517
6516: POP
// end ;
6517: LD_VAR 0 1
6521: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6529: LD_ADDR_VAR 0 8
6533: PUSH
6534: LD_INT 48
6536: PUSH
6537: LD_INT 49
6539: PUSH
6540: LD_INT 50
6542: PUSH
6543: LD_INT 20
6545: PUSH
6546: LD_INT 1
6548: PUSH
6549: LD_INT 51
6551: PUSH
6552: LD_INT 52
6554: PUSH
6555: LD_INT 69
6557: PUSH
6558: LD_INT 39
6560: PUSH
6561: LD_INT 34
6563: PUSH
6564: LD_INT 40
6566: PUSH
6567: LD_INT 53
6569: PUSH
6570: LD_INT 71
6572: PUSH
6573: LD_INT 57
6575: PUSH
6576: LD_INT 58
6578: PUSH
6579: LD_INT 44
6581: PUSH
6582: LD_INT 32
6584: PUSH
6585: LD_INT 27
6587: PUSH
6588: LD_INT 23
6590: PUSH
6591: LD_INT 33
6593: PUSH
6594: LD_INT 59
6596: PUSH
6597: LD_INT 54
6599: PUSH
6600: LD_INT 55
6602: PUSH
6603: LD_INT 56
6605: PUSH
6606: LD_INT 63
6608: PUSH
6609: LD_INT 64
6611: PUSH
6612: LD_INT 65
6614: PUSH
6615: LD_INT 30
6617: PUSH
6618: LD_INT 31
6620: PUSH
6621: LD_INT 21
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 25
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6664: LD_ADDR_VAR 0 5
6668: PUSH
6669: DOUBLE
6670: LD_INT 1
6672: DEC
6673: ST_TO_ADDR
6674: LD_VAR 0 8
6678: PUSH
6679: FOR_TO
6680: IFFALSE 6756
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6682: LD_VAR 0 8
6686: PUSH
6687: LD_VAR 0 5
6691: ARRAY
6692: PPUSH
6693: LD_VAR 0 1
6697: PPUSH
6698: CALL_OW 321
6702: PUSH
6703: LD_INT 1
6705: EQUAL
6706: PUSH
6707: LD_VAR 0 8
6711: PUSH
6712: LD_VAR 0 5
6716: ARRAY
6717: PPUSH
6718: LD_VAR 0 3
6722: PPUSH
6723: CALL_OW 482
6727: PUSH
6728: LD_INT 1
6730: EQUAL
6731: AND
6732: IFFALSE 6754
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6734: LD_VAR 0 2
6738: PPUSH
6739: LD_VAR 0 8
6743: PUSH
6744: LD_VAR 0 5
6748: ARRAY
6749: PPUSH
6750: CALL_OW 184
6754: GO 6679
6756: POP
6757: POP
// end ;
6758: LD_VAR 0 4
6762: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6763: LD_INT 0
6765: PPUSH
6766: PPUSH
6767: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6768: LD_INT 22
6770: PUSH
6771: LD_VAR 0 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 21
6782: PUSH
6783: LD_INT 2
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 69
6798: PUSH
6799: LD_VAR 0 3
6803: LESSEQUAL
6804: IFFALSE 6912
// begin for i = 1 to vehCount do
6806: LD_ADDR_VAR 0 9
6810: PUSH
6811: DOUBLE
6812: LD_INT 1
6814: DEC
6815: ST_TO_ADDR
6816: LD_VAR 0 3
6820: PUSH
6821: FOR_TO
6822: IFFALSE 6910
// begin weapon = weaponTab [ i ] ;
6824: LD_ADDR_VAR 0 10
6828: PUSH
6829: LD_VAR 0 4
6833: PUSH
6834: LD_VAR 0 9
6838: ARRAY
6839: ST_TO_ADDR
// if weapon = 46 then
6840: LD_VAR 0 10
6844: PUSH
6845: LD_INT 46
6847: EQUAL
6848: IFFALSE 6879
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_INT 24
6857: PPUSH
6858: LD_VAR 0 5
6862: PPUSH
6863: LD_VAR 0 6
6867: PPUSH
6868: LD_VAR 0 10
6872: PPUSH
6873: CALL_OW 185
// end else
6877: GO 6908
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6879: LD_VAR 0 2
6883: PPUSH
6884: LD_VAR 0 7
6888: PPUSH
6889: LD_VAR 0 5
6893: PPUSH
6894: LD_VAR 0 6
6898: PPUSH
6899: LD_VAR 0 10
6903: PPUSH
6904: CALL_OW 185
// end ; end ;
6908: GO 6821
6910: POP
6911: POP
// end ; end ;
6912: LD_VAR 0 8
6916: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
6921: PPUSH
6922: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6923: LD_ADDR_VAR 0 8
6927: PUSH
6928: LD_INT 22
6930: PUSH
6931: LD_VAR 0 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 21
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: LD_INT 24
6955: PUSH
6956: LD_INT 650
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: ST_TO_ADDR
// if damageVehicles > 0 then
6977: LD_VAR 0 8
6981: PUSH
6982: LD_INT 0
6984: GREATER
6985: IFFALSE 7006
// ComMoveXY ( damageVehicles , repX , repY ) ;
6987: LD_VAR 0 8
6991: PPUSH
6992: LD_VAR 0 3
6996: PPUSH
6997: LD_VAR 0 4
7001: PPUSH
7002: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7006: LD_VAR 0 8
7010: PPUSH
7011: LD_INT 95
7013: PUSH
7014: LD_VAR 0 2
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 58
7028: PUSH
7029: EMPTY
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 72
7044: PUSH
7045: LD_INT 0
7047: GREATER
7048: IFFALSE 7115
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7050: LD_ADDR_VAR 0 6
7054: PUSH
7055: LD_VAR 0 8
7059: PPUSH
7060: LD_INT 95
7062: PUSH
7063: LD_VAR 0 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 3
7074: PUSH
7075: LD_INT 58
7077: PUSH
7078: EMPTY
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 72
7093: PUSH
7094: FOR_IN
7095: IFFALSE 7113
// ComExitVehicle ( UnitsInside ( i ) ) ;
7097: LD_VAR 0 6
7101: PPUSH
7102: CALL_OW 313
7106: PPUSH
7107: CALL_OW 121
7111: GO 7094
7113: POP
7114: POP
// end ;
7115: LD_VAR 0 5
7119: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7120: LD_INT 0
7122: PPUSH
7123: PPUSH
7124: PPUSH
7125: PPUSH
7126: PPUSH
7127: PPUSH
7128: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 21
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 660
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 58
7171: PUSH
7172: EMPTY
7173: LIST
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 34
7180: PUSH
7181: LD_INT 43
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 34
7190: PUSH
7191: LD_INT 44
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 34
7200: PUSH
7201: LD_INT 46
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 69
7229: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 21
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 24
7254: PUSH
7255: LD_INT 1000
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 3
7264: PUSH
7265: LD_INT 58
7267: PUSH
7268: EMPTY
7269: LIST
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: LD_INT 34
7276: PUSH
7277: LD_INT 43
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 34
7286: PUSH
7287: LD_INT 44
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 34
7296: PUSH
7297: LD_INT 46
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 69
7325: PUSH
7326: LD_INT 5
7328: PUSH
7329: LD_INT 6
7331: PUSH
7332: LD_INT 6
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: LD_OWVAR 67
7344: ARRAY
7345: EQUAL
7346: IFFALSE 7602
// if seeEnemy = 0 then
7348: LD_VAR 0 11
7352: PUSH
7353: LD_INT 0
7355: EQUAL
7356: IFFALSE 7602
// repeat wait ( 0 0$1 ) ;
7358: LD_INT 35
7360: PPUSH
7361: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7365: LD_ADDR_VAR 0 8
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_VAR 0 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 21
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 24
7394: PUSH
7395: LD_INT 660
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 3
7404: PUSH
7405: LD_INT 58
7407: PUSH
7408: EMPTY
7409: LIST
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 34
7416: PUSH
7417: LD_INT 43
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 34
7426: PUSH
7427: LD_INT 44
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 34
7436: PUSH
7437: LD_INT 46
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 69
7465: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7466: LD_INT 22
7468: PUSH
7469: LD_VAR 0 1
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 95
7480: PUSH
7481: LD_VAR 0 2
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PPUSH
7494: CALL_OW 69
7498: NOT
7499: PUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 0
7507: EQUAL
7508: AND
7509: IFFALSE 7564
// for i := 1 to wayX do
7511: LD_ADDR_VAR 0 6
7515: PUSH
7516: DOUBLE
7517: LD_INT 1
7519: DEC
7520: ST_TO_ADDR
7521: LD_VAR 0 3
7525: PUSH
7526: FOR_TO
7527: IFFALSE 7562
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7529: LD_VAR 0 8
7533: PPUSH
7534: LD_VAR 0 3
7538: PUSH
7539: LD_VAR 0 6
7543: ARRAY
7544: PPUSH
7545: LD_VAR 0 4
7549: PUSH
7550: LD_VAR 0 6
7554: ARRAY
7555: PPUSH
7556: CALL_OW 114
7560: GO 7526
7562: POP
7563: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7564: LD_INT 22
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 95
7578: PUSH
7579: LD_VAR 0 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PPUSH
7592: CALL_OW 69
7596: PUSH
7597: LD_INT 0
7599: GREATER
7600: IFFALSE 7358
// seeEnemy = 1 ;
7602: LD_ADDR_VAR 0 11
7606: PUSH
7607: LD_INT 1
7609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// for j in vehiclesOK do
7617: LD_ADDR_VAR 0 7
7621: PUSH
7622: LD_VAR 0 8
7626: PUSH
7627: FOR_IN
7628: IFFALSE 7841
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7630: LD_ADDR_VAR 0 9
7634: PUSH
7635: LD_INT 81
7637: PUSH
7638: LD_VAR 0 1
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 101
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 69
7665: PUSH
7666: LD_EXP 45
7670: DIFF
7671: PPUSH
7672: LD_VAR 0 7
7676: PPUSH
7677: CALL_OW 74
7681: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7682: LD_ADDR_VAR 0 10
7686: PUSH
7687: LD_INT 81
7689: PUSH
7690: LD_VAR 0 1
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 101
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 2
7711: PUSH
7712: LD_INT 59
7714: PUSH
7715: EMPTY
7716: LIST
7717: PUSH
7718: LD_INT 21
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 21
7730: PUSH
7731: LD_INT 2
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: PPUSH
7752: CALL_OW 69
7756: PUSH
7757: LD_EXP 45
7761: DIFF
7762: PPUSH
7763: LD_VAR 0 7
7767: PPUSH
7768: CALL_OW 74
7772: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7773: LD_VAR 0 7
7777: PPUSH
7778: LD_VAR 0 9
7782: PPUSH
7783: CALL_OW 296
7787: PUSH
7788: LD_INT 8
7790: PLUS
7791: PUSH
7792: LD_VAR 0 7
7796: PPUSH
7797: LD_VAR 0 10
7801: PPUSH
7802: CALL_OW 296
7806: LESS
7807: IFFALSE 7825
// ComAttackUnit ( j , target1 ) else
7809: LD_VAR 0 7
7813: PPUSH
7814: LD_VAR 0 9
7818: PPUSH
7819: CALL_OW 115
7823: GO 7839
// ComAttackUnit ( j , target2 ) ;
7825: LD_VAR 0 7
7829: PPUSH
7830: LD_VAR 0 10
7834: PPUSH
7835: CALL_OW 115
// end ;
7839: GO 7627
7841: POP
7842: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7843: LD_INT 22
7845: PUSH
7846: LD_VAR 0 1
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 21
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 24
7867: PUSH
7868: LD_INT 1000
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: LD_INT 58
7880: PUSH
7881: EMPTY
7882: LIST
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: LD_INT 34
7889: PUSH
7890: LD_INT 43
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 34
7899: PUSH
7900: LD_INT 44
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 34
7909: PUSH
7910: LD_INT 46
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: PUSH
7939: LD_INT 0
7941: EQUAL
7942: IFFALSE 7610
// seeEnemy = 0 ;
7944: LD_ADDR_VAR 0 11
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// end ;
7952: LD_VAR 0 5
7956: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7957: LD_INT 0
7959: PPUSH
7960: PPUSH
7961: PPUSH
7962: PPUSH
7963: PPUSH
7964: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_VAR 0 2
7974: PPUSH
7975: CALL_OW 313
7979: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_VAR 0 3
7989: PPUSH
7990: LD_INT 22
7992: PUSH
7993: LD_VAR 0 1
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 24
8014: PUSH
8015: LD_INT 750
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: LD_INT 54
8027: PUSH
8028: EMPTY
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 70
8045: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8046: LD_ADDR_VAR 0 6
8050: PUSH
8051: LD_VAR 0 3
8055: PPUSH
8056: LD_INT 22
8058: PUSH
8059: LD_VAR 0 1
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 21
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 3
8080: PUSH
8081: LD_INT 24
8083: PUSH
8084: LD_INT 1000
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: PPUSH
8103: CALL_OW 70
8107: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8108: LD_VAR 0 6
8112: NOT
8113: PUSH
8114: LD_INT 22
8116: PUSH
8117: LD_VAR 0 1
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 25
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 24
8138: PUSH
8139: LD_INT 250
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: PPUSH
8151: CALL_OW 69
8155: NOT
8156: AND
8157: IFFALSE 8161
// exit ;
8159: GO 8343
// if buildings_list > 0 and engineerOkInside then
8161: LD_VAR 0 6
8165: PUSH
8166: LD_INT 0
8168: GREATER
8169: PUSH
8170: LD_VAR 0 8
8174: AND
8175: IFFALSE 8186
// ComExitBuilding ( engineerOkInside ) ;
8177: LD_VAR 0 8
8181: PPUSH
8182: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8186: LD_VAR 0 6
8190: PUSH
8191: LD_INT 0
8193: GREATER
8194: PUSH
8195: LD_VAR 0 9
8199: PUSH
8200: LD_INT 0
8202: GREATER
8203: AND
8204: IFFALSE 8224
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8206: LD_VAR 0 9
8210: PPUSH
8211: LD_VAR 0 6
8215: PUSH
8216: LD_INT 1
8218: ARRAY
8219: PPUSH
8220: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 0
8231: EQUAL
8232: PUSH
8233: LD_VAR 0 4
8237: PUSH
8238: LD_INT 0
8240: EQUAL
8241: AND
8242: PUSH
8243: LD_VAR 0 9
8247: PUSH
8248: LD_INT 0
8250: GREATER
8251: AND
8252: IFFALSE 8268
// ComEnterUnit ( engineerOkOutside , building ) ;
8254: LD_VAR 0 9
8258: PPUSH
8259: LD_VAR 0 2
8263: PPUSH
8264: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8268: LD_VAR 0 9
8272: PUSH
8273: LD_INT 0
8275: GREATER
8276: PUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 0
8284: EQUAL
8285: AND
8286: PUSH
8287: LD_VAR 0 4
8291: PUSH
8292: LD_INT 0
8294: GREATER
8295: AND
8296: IFFALSE 8343
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8298: LD_VAR 0 9
8302: PPUSH
8303: LD_VAR 0 4
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 4
8316: PUSH
8317: LD_INT 2
8319: ARRAY
8320: PPUSH
8321: LD_VAR 0 4
8325: PUSH
8326: LD_INT 3
8328: ARRAY
8329: PPUSH
8330: LD_VAR 0 4
8334: PUSH
8335: LD_INT 4
8337: ARRAY
8338: PPUSH
8339: CALL_OW 145
// end ;
8343: LD_VAR 0 5
8347: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
8354: PPUSH
8355: PPUSH
8356: PPUSH
8357: PPUSH
8358: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8359: LD_ADDR_VAR 0 6
8363: PUSH
8364: LD_INT 22
8366: PUSH
8367: LD_VAR 0 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 25
8378: PUSH
8379: LD_INT 4
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 23
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 251
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PPUSH
8412: CALL_OW 69
8416: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8417: LD_ADDR_VAR 0 7
8421: PUSH
8422: LD_VAR 0 3
8426: PPUSH
8427: LD_INT 22
8429: PUSH
8430: LD_VAR 0 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 23
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 4
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 50
8461: PUSH
8462: EMPTY
8463: LIST
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 70
8475: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8476: LD_ADDR_VAR 0 10
8480: PUSH
8481: LD_VAR 0 3
8485: PPUSH
8486: LD_INT 22
8488: PUSH
8489: LD_VAR 0 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 21
8500: PUSH
8501: LD_INT 1
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 3
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 24
8530: PUSH
8531: LD_INT 750
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 70
8552: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8553: LD_ADDR_VAR 0 11
8557: PUSH
8558: LD_VAR 0 2
8562: PPUSH
8563: LD_INT 22
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 21
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 3
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 3
8604: PUSH
8605: LD_INT 24
8607: PUSH
8608: LD_INT 1000
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: PPUSH
8625: CALL_OW 70
8629: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8630: LD_VAR 0 10
8634: NOT
8635: PUSH
8636: LD_VAR 0 11
8640: NOT
8641: AND
8642: PUSH
8643: LD_VAR 0 6
8647: NOT
8648: AND
8649: IFFALSE 8653
// exit ;
8651: GO 8887
// if damageUnits > 0 and sci_list > 0 then
8653: LD_VAR 0 10
8657: PUSH
8658: LD_INT 0
8660: GREATER
8661: PUSH
8662: LD_VAR 0 6
8666: PUSH
8667: LD_INT 0
8669: GREATER
8670: AND
8671: IFFALSE 8687
// ComMoveToArea ( damageUnits , healArea ) ;
8673: LD_VAR 0 10
8677: PPUSH
8678: LD_VAR 0 2
8682: PPUSH
8683: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8687: LD_VAR 0 11
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: PUSH
8696: LD_VAR 0 6
8700: PUSH
8701: LD_INT 0
8703: GREATER
8704: AND
8705: IFFALSE 8716
// ComExitBuilding ( sci_list ) ;
8707: LD_VAR 0 6
8711: PPUSH
8712: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8716: LD_VAR 0 11
8720: PUSH
8721: LD_INT 0
8723: GREATER
8724: PUSH
8725: LD_VAR 0 7
8729: PUSH
8730: LD_INT 0
8732: GREATER
8733: AND
8734: IFFALSE 8754
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8736: LD_VAR 0 7
8740: PPUSH
8741: LD_VAR 0 11
8745: PUSH
8746: LD_INT 1
8748: ARRAY
8749: PPUSH
8750: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8754: LD_VAR 0 10
8758: PUSH
8759: LD_INT 0
8761: EQUAL
8762: PUSH
8763: LD_VAR 0 11
8767: PUSH
8768: LD_INT 0
8770: EQUAL
8771: AND
8772: PUSH
8773: LD_VAR 0 7
8777: PUSH
8778: LD_INT 0
8780: GREATER
8781: AND
8782: IFFALSE 8887
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8784: LD_ADDR_VAR 0 12
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 21
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 30
8813: PUSH
8814: LD_INT 8
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: PPUSH
8826: CALL_OW 69
8830: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8831: LD_ADDR_VAR 0 13
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: LD_VAR 0 12
8843: PPUSH
8844: CALL_OW 12
8848: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8849: LD_VAR 0 7
8853: PPUSH
8854: LD_INT 3
8856: PUSH
8857: LD_INT 60
8859: PUSH
8860: EMPTY
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 72
8871: PPUSH
8872: LD_VAR 0 12
8876: PUSH
8877: LD_VAR 0 13
8881: ARRAY
8882: PPUSH
8883: CALL_OW 120
// end ; end ;
8887: LD_VAR 0 5
8891: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
// tmpTab = [ ] ;
8898: LD_ADDR_VAR 0 6
8902: PUSH
8903: EMPTY
8904: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8905: LD_INT 22
8907: PUSH
8908: LD_VAR 0 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 30
8919: PUSH
8920: LD_INT 32
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PUSH
8936: LD_INT 0
8938: GREATER
8939: IFFALSE 9022
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8941: LD_ADDR_VAR 0 4
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_VAR 0 1
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 30
8960: PUSH
8961: LD_INT 32
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9020
// begin for j in UnitsInside ( i ) do
8980: LD_ADDR_VAR 0 5
8984: PUSH
8985: LD_VAR 0 4
8989: PPUSH
8990: CALL_OW 313
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9016
// tmpTab = tmpTab ^ j ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 6
9007: PUSH
9008: LD_VAR 0 5
9012: ADD
9013: ST_TO_ADDR
9014: GO 8995
9016: POP
9017: POP
// end ;
9018: GO 8977
9020: POP
9021: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9022: LD_VAR 0 6
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 250
9036: PPUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 251
9046: PPUSH
9047: CALL_OW 114
// end ;
9051: LD_VAR 0 3
9055: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9056: LD_INT 0
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
// enable ;
9062: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9063: LD_ADDR_VAR 0 7
9067: PUSH
9068: LD_VAR 0 3
9072: PPUSH
9073: CALL_OW 435
9077: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9078: LD_ADDR_VAR 0 6
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_VAR 0 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 34
9097: PUSH
9098: LD_VAR 0 2
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 69
9115: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9116: LD_VAR 0 6
9120: PUSH
9121: LD_INT 0
9123: GREATER
9124: PUSH
9125: LD_VAR 0 3
9129: PPUSH
9130: CALL_OW 435
9134: AND
9135: PUSH
9136: LD_VAR 0 7
9140: PUSH
9141: LD_INT 0
9143: GREATER
9144: AND
9145: IFFALSE 9194
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9147: LD_VAR 0 6
9151: PUSH
9152: LD_INT 1
9154: ARRAY
9155: PPUSH
9156: LD_VAR 0 7
9160: PUSH
9161: LD_INT 1
9163: ARRAY
9164: PPUSH
9165: LD_VAR 0 7
9169: PUSH
9170: LD_INT 2
9172: ARRAY
9173: PPUSH
9174: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9178: LD_VAR 0 6
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: LD_INT 100
9189: PPUSH
9190: CALL_OW 240
// end ; end ;
9194: LD_VAR 0 4
9198: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9199: LD_INT 0
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
9207: PPUSH
9208: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9209: LD_ADDR_VAR 0 6
9213: PUSH
9214: LD_VAR 0 2
9218: PPUSH
9219: LD_INT 22
9221: PUSH
9222: LD_VAR 0 1
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 56
9233: PUSH
9234: EMPTY
9235: LIST
9236: PUSH
9237: LD_INT 24
9239: PUSH
9240: LD_INT 700
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 3
9249: PUSH
9250: LD_INT 60
9252: PUSH
9253: EMPTY
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 5
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 25
9285: PUSH
9286: LD_INT 8
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 25
9295: PUSH
9296: LD_INT 9
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PPUSH
9317: CALL_OW 70
9321: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9322: LD_ADDR_VAR 0 7
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_INT 22
9334: PUSH
9335: LD_VAR 0 1
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 30
9346: PUSH
9347: LD_INT 32
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 58
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: LD_INT 24
9362: PUSH
9363: LD_INT 251
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PPUSH
9376: CALL_OW 70
9380: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9381: LD_ADDR_VAR 0 9
9385: PUSH
9386: LD_VAR 0 2
9390: PPUSH
9391: LD_INT 22
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 2
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 4
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 5
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 24
9433: PUSH
9434: LD_INT 251
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: ST_TO_ADDR
// if barrackList > 0 then
9451: LD_VAR 0 9
9455: PUSH
9456: LD_INT 0
9458: GREATER
9459: IFFALSE 9607
// begin if turretList = 0 then
9461: LD_VAR 0 7
9465: PUSH
9466: LD_INT 0
9468: EQUAL
9469: IFFALSE 9511
// begin if soldiers_list > 0 then
9471: LD_VAR 0 6
9475: PUSH
9476: LD_INT 0
9478: GREATER
9479: IFFALSE 9509
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9481: LD_VAR 0 6
9485: PPUSH
9486: LD_VAR 0 9
9490: PUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_VAR 0 9
9498: PPUSH
9499: CALL_OW 12
9503: ARRAY
9504: PPUSH
9505: CALL_OW 120
// end else
9509: GO 9607
// begin for i in barrackList do
9511: LD_ADDR_VAR 0 4
9515: PUSH
9516: LD_VAR 0 9
9520: PUSH
9521: FOR_IN
9522: IFFALSE 9605
// begin insideUnits = UnitsInside ( i ) ;
9524: LD_ADDR_VAR 0 10
9528: PUSH
9529: LD_VAR 0 4
9533: PPUSH
9534: CALL_OW 313
9538: ST_TO_ADDR
// if insideUnits > 0 then
9539: LD_VAR 0 10
9543: PUSH
9544: LD_INT 0
9546: GREATER
9547: IFFALSE 9571
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9549: LD_VAR 0 10
9553: PUSH
9554: LD_INT 1
9556: ARRAY
9557: PPUSH
9558: LD_VAR 0 7
9562: PUSH
9563: LD_INT 1
9565: ARRAY
9566: PPUSH
9567: CALL_OW 120
// if soldiers_list > 0 then
9571: LD_VAR 0 6
9575: PUSH
9576: LD_INT 0
9578: GREATER
9579: IFFALSE 9603
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9581: LD_VAR 0 6
9585: PUSH
9586: LD_INT 1
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 7
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PPUSH
9599: CALL_OW 120
// end ;
9603: GO 9521
9605: POP
9606: POP
// end ; end ; end ;
9607: LD_VAR 0 3
9611: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9612: LD_INT 0
9614: PPUSH
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9619: LD_ADDR_VAR 0 6
9623: PUSH
9624: LD_INT 22
9626: PUSH
9627: LD_VAR 0 1
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: LD_INT 30
9641: PUSH
9642: LD_INT 31
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 30
9651: PUSH
9652: LD_INT 32
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 33
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 30
9671: PUSH
9672: LD_INT 4
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 30
9681: PUSH
9682: LD_INT 5
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9706: LD_ADDR_VAR 0 7
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_VAR 0 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 58
9735: PUSH
9736: EMPTY
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: PPUSH
9744: CALL_OW 69
9748: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9749: LD_VAR 0 6
9753: PUSH
9754: LD_INT 0
9756: GREATER
9757: PUSH
9758: LD_VAR 0 7
9762: PUSH
9763: LD_INT 0
9765: GREATER
9766: AND
9767: IFFALSE 9837
// begin for i in turretsList do
9769: LD_ADDR_VAR 0 4
9773: PUSH
9774: LD_VAR 0 6
9778: PUSH
9779: FOR_IN
9780: IFFALSE 9835
// begin for j in enemyBuildings do
9782: LD_ADDR_VAR 0 5
9786: PUSH
9787: LD_VAR 0 7
9791: PUSH
9792: FOR_IN
9793: IFFALSE 9831
// begin if GetDistUnits ( i , j ) < 20 then
9795: LD_VAR 0 4
9799: PPUSH
9800: LD_VAR 0 5
9804: PPUSH
9805: CALL_OW 296
9809: PUSH
9810: LD_INT 20
9812: LESS
9813: IFFALSE 9829
// begin ComAttackUnit ( i , j ) ;
9815: LD_VAR 0 4
9819: PPUSH
9820: LD_VAR 0 5
9824: PPUSH
9825: CALL_OW 115
// end ; end ;
9829: GO 9792
9831: POP
9832: POP
// end ;
9833: GO 9779
9835: POP
9836: POP
// end ; end ;
9837: LD_VAR 0 3
9841: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
9848: PPUSH
9849: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9850: LD_ADDR_VAR 0 8
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_VAR 0 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 2
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 34
9879: PUSH
9880: LD_INT 52
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PPUSH
9892: CALL_OW 69
9896: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9897: LD_ADDR_VAR 0 9
9901: PUSH
9902: LD_INT 22
9904: PUSH
9905: LD_VAR 0 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 3
9926: PUSH
9927: LD_INT 24
9929: PUSH
9930: LD_INT 1000
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9954: LD_VAR 0 9
9958: PUSH
9959: LD_INT 0
9961: GREATER
9962: PUSH
9963: LD_VAR 0 8
9967: PPUSH
9968: LD_INT 24
9970: PUSH
9971: LD_INT 750
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 72
9982: PUSH
9983: LD_INT 0
9985: GREATER
9986: AND
9987: IFFALSE 10022
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9989: LD_VAR 0 8
9993: PPUSH
9994: LD_INT 24
9996: PUSH
9997: LD_INT 750
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 72
10008: PPUSH
10009: LD_VAR 0 9
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10022: LD_VAR 0 8
10026: PPUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 24
10032: PUSH
10033: LD_INT 750
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: PUSH
10049: LD_INT 0
10051: GREATER
10052: IFFALSE 10090
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10054: LD_VAR 0 8
10058: PPUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 24
10064: PUSH
10065: LD_INT 750
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10090: LD_VAR 0 8
10094: PUSH
10095: LD_INT 0
10097: GREATER
10098: PUSH
10099: LD_VAR 0 9
10103: PUSH
10104: LD_INT 0
10106: EQUAL
10107: AND
10108: PUSH
10109: LD_VAR 0 3
10113: PUSH
10114: LD_INT 0
10116: GREATER
10117: AND
10118: IFFALSE 10165
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10120: LD_VAR 0 8
10124: PPUSH
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: PPUSH
10143: LD_VAR 0 3
10147: PUSH
10148: LD_INT 3
10150: ARRAY
10151: PPUSH
10152: LD_VAR 0 3
10156: PUSH
10157: LD_INT 4
10159: ARRAY
10160: PPUSH
10161: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10165: LD_VAR 0 2
10169: PPUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 34
10194: PUSH
10195: LD_INT 52
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 24
10207: PUSH
10208: LD_INT 750
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 70
10229: PUSH
10230: LD_INT 0
10232: GREATER
10233: IFFALSE 10435
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10235: LD_ADDR_VAR 0 5
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: LD_INT 22
10247: PUSH
10248: LD_VAR 0 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 21
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 34
10269: PUSH
10270: LD_INT 52
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: LD_INT 24
10282: PUSH
10283: LD_INT 750
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: PPUSH
10300: CALL_OW 70
10304: PUSH
10305: FOR_IN
10306: IFFALSE 10433
// begin mechTmp = UnitsInside ( i ) ;
10308: LD_ADDR_VAR 0 6
10312: PUSH
10313: LD_VAR 0 5
10317: PPUSH
10318: CALL_OW 313
10322: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10323: LD_VAR 0 6
10327: PPUSH
10328: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10332: LD_VAR 0 6
10336: PPUSH
10337: LD_VAR 0 7
10341: PPUSH
10342: CALL_OW 189
// wait ( 0 0$2 ) ;
10346: LD_INT 70
10348: PPUSH
10349: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10353: LD_VAR 0 6
10357: PPUSH
10358: LD_VAR 0 2
10362: PPUSH
10363: LD_INT 22
10365: PUSH
10366: LD_VAR 0 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 21
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 34
10387: PUSH
10388: LD_INT 52
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 24
10397: PUSH
10398: LD_INT 1000
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 58
10407: PUSH
10408: EMPTY
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: PPUSH
10418: CALL_OW 70
10422: PUSH
10423: LD_INT 1
10425: ARRAY
10426: PPUSH
10427: CALL_OW 180
// end ;
10431: GO 10305
10433: POP
10434: POP
// end ; end ;
10435: LD_VAR 0 4
10439: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10440: LD_INT 0
10442: PPUSH
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
// for i = 1 to medicCount do
10453: LD_ADDR_VAR 0 14
10457: PUSH
10458: DOUBLE
10459: LD_INT 1
10461: DEC
10462: ST_TO_ADDR
10463: LD_VAR 0 7
10467: PUSH
10468: FOR_TO
10469: IFFALSE 10551
// begin uc_side = side ;
10471: LD_ADDR_OWVAR 20
10475: PUSH
10476: LD_VAR 0 1
10480: ST_TO_ADDR
// uc_nation = nation ;
10481: LD_ADDR_OWVAR 21
10485: PUSH
10486: LD_VAR 0 2
10490: ST_TO_ADDR
// hc_name =  ;
10491: LD_ADDR_OWVAR 26
10495: PUSH
10496: LD_STRING 
10498: ST_TO_ADDR
// hc_gallery =  ;
10499: LD_ADDR_OWVAR 33
10503: PUSH
10504: LD_STRING 
10506: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10507: LD_INT 0
10509: PPUSH
10510: LD_INT 4
10512: PPUSH
10513: LD_VAR 0 8
10517: PPUSH
10518: CALL_OW 380
// un = CreateHuman ;
10522: LD_ADDR_VAR 0 16
10526: PUSH
10527: CALL_OW 44
10531: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10532: LD_VAR 0 16
10536: PPUSH
10537: LD_VAR 0 9
10541: PPUSH
10542: LD_INT 0
10544: PPUSH
10545: CALL_OW 49
// end ;
10549: GO 10468
10551: POP
10552: POP
// for i = 1 to soldierCount do
10553: LD_ADDR_VAR 0 14
10557: PUSH
10558: DOUBLE
10559: LD_INT 1
10561: DEC
10562: ST_TO_ADDR
10563: LD_VAR 0 3
10567: PUSH
10568: FOR_TO
10569: IFFALSE 10651
// begin uc_side = side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_VAR 0 1
10580: ST_TO_ADDR
// uc_nation = nation ;
10581: LD_ADDR_OWVAR 21
10585: PUSH
10586: LD_VAR 0 2
10590: ST_TO_ADDR
// hc_name =  ;
10591: LD_ADDR_OWVAR 26
10595: PUSH
10596: LD_STRING 
10598: ST_TO_ADDR
// hc_gallery =  ;
10599: LD_ADDR_OWVAR 33
10603: PUSH
10604: LD_STRING 
10606: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: LD_VAR 0 8
10617: PPUSH
10618: CALL_OW 380
// un = CreateHuman ;
10622: LD_ADDR_VAR 0 16
10626: PUSH
10627: CALL_OW 44
10631: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10632: LD_VAR 0 16
10636: PPUSH
10637: LD_VAR 0 9
10641: PPUSH
10642: LD_INT 0
10644: PPUSH
10645: CALL_OW 49
// end ;
10649: GO 10568
10651: POP
10652: POP
// for i = 1 to sniperCount do
10653: LD_ADDR_VAR 0 14
10657: PUSH
10658: DOUBLE
10659: LD_INT 1
10661: DEC
10662: ST_TO_ADDR
10663: LD_VAR 0 4
10667: PUSH
10668: FOR_TO
10669: IFFALSE 10751
// begin uc_side = side ;
10671: LD_ADDR_OWVAR 20
10675: PUSH
10676: LD_VAR 0 1
10680: ST_TO_ADDR
// uc_nation = nation ;
10681: LD_ADDR_OWVAR 21
10685: PUSH
10686: LD_VAR 0 2
10690: ST_TO_ADDR
// hc_name =  ;
10691: LD_ADDR_OWVAR 26
10695: PUSH
10696: LD_STRING 
10698: ST_TO_ADDR
// hc_gallery =  ;
10699: LD_ADDR_OWVAR 33
10703: PUSH
10704: LD_STRING 
10706: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10707: LD_INT 0
10709: PPUSH
10710: LD_INT 5
10712: PPUSH
10713: LD_VAR 0 8
10717: PPUSH
10718: CALL_OW 380
// un = CreateHuman ;
10722: LD_ADDR_VAR 0 16
10726: PUSH
10727: CALL_OW 44
10731: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10732: LD_VAR 0 16
10736: PPUSH
10737: LD_VAR 0 9
10741: PPUSH
10742: LD_INT 0
10744: PPUSH
10745: CALL_OW 49
// end ;
10749: GO 10668
10751: POP
10752: POP
// for i = 1 to bazookCount do
10753: LD_ADDR_VAR 0 14
10757: PUSH
10758: DOUBLE
10759: LD_INT 1
10761: DEC
10762: ST_TO_ADDR
10763: LD_VAR 0 5
10767: PUSH
10768: FOR_TO
10769: IFFALSE 10851
// begin uc_side = side ;
10771: LD_ADDR_OWVAR 20
10775: PUSH
10776: LD_VAR 0 1
10780: ST_TO_ADDR
// uc_nation = nation ;
10781: LD_ADDR_OWVAR 21
10785: PUSH
10786: LD_VAR 0 2
10790: ST_TO_ADDR
// hc_name =  ;
10791: LD_ADDR_OWVAR 26
10795: PUSH
10796: LD_STRING 
10798: ST_TO_ADDR
// hc_gallery =  ;
10799: LD_ADDR_OWVAR 33
10803: PUSH
10804: LD_STRING 
10806: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10807: LD_INT 0
10809: PPUSH
10810: LD_INT 9
10812: PPUSH
10813: LD_VAR 0 8
10817: PPUSH
10818: CALL_OW 380
// un = CreateHuman ;
10822: LD_ADDR_VAR 0 16
10826: PUSH
10827: CALL_OW 44
10831: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10832: LD_VAR 0 16
10836: PPUSH
10837: LD_VAR 0 9
10841: PPUSH
10842: LD_INT 0
10844: PPUSH
10845: CALL_OW 49
// end ;
10849: GO 10768
10851: POP
10852: POP
// for i = 1 to mortalCount do
10853: LD_ADDR_VAR 0 14
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_VAR 0 6
10867: PUSH
10868: FOR_TO
10869: IFFALSE 10951
// begin uc_side = side ;
10871: LD_ADDR_OWVAR 20
10875: PUSH
10876: LD_VAR 0 1
10880: ST_TO_ADDR
// uc_nation = nation ;
10881: LD_ADDR_OWVAR 21
10885: PUSH
10886: LD_VAR 0 2
10890: ST_TO_ADDR
// hc_name =  ;
10891: LD_ADDR_OWVAR 26
10895: PUSH
10896: LD_STRING 
10898: ST_TO_ADDR
// hc_gallery =  ;
10899: LD_ADDR_OWVAR 33
10903: PUSH
10904: LD_STRING 
10906: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10907: LD_INT 0
10909: PPUSH
10910: LD_INT 8
10912: PPUSH
10913: LD_VAR 0 8
10917: PPUSH
10918: CALL_OW 380
// un = CreateHuman ;
10922: LD_ADDR_VAR 0 16
10926: PUSH
10927: CALL_OW 44
10931: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10932: LD_VAR 0 16
10936: PPUSH
10937: LD_VAR 0 9
10941: PPUSH
10942: LD_INT 0
10944: PPUSH
10945: CALL_OW 49
// end ;
10949: GO 10868
10951: POP
10952: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10953: LD_ADDR_VAR 0 19
10957: PUSH
10958: LD_INT 22
10960: PUSH
10961: LD_VAR 0 1
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: LD_INT 25
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 25
10985: PUSH
10986: LD_INT 5
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 25
10995: PUSH
10996: LD_INT 8
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 9
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 69
11028: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11029: LD_ADDR_VAR 0 18
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 1
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 25
11048: PUSH
11049: LD_INT 4
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 69
11064: ST_TO_ADDR
// for i in medic_list do
11065: LD_ADDR_VAR 0 14
11069: PUSH
11070: LD_VAR 0 18
11074: PUSH
11075: FOR_IN
11076: IFFALSE 11094
// ComMoveToArea ( i , healArea ) ;
11078: LD_VAR 0 14
11082: PPUSH
11083: LD_VAR 0 10
11087: PPUSH
11088: CALL_OW 113
11092: GO 11075
11094: POP
11095: POP
// if strategy = 1 then
11096: LD_VAR 0 12
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: IFFALSE 11821
// begin repeat wait ( 0 0$3 ) ;
11106: LD_INT 105
11108: PPUSH
11109: CALL_OW 67
// for i in soldiersOK_list do
11113: LD_ADDR_VAR 0 14
11117: PUSH
11118: LD_VAR 0 19
11122: PUSH
11123: FOR_IN
11124: IFFALSE 11158
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11126: LD_VAR 0 14
11130: PPUSH
11131: LD_INT 80
11133: PPUSH
11134: LD_INT 109
11136: PPUSH
11137: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11141: LD_VAR 0 14
11145: PPUSH
11146: LD_INT 39
11148: PPUSH
11149: LD_INT 49
11151: PPUSH
11152: CALL_OW 174
// end ;
11156: GO 11123
11158: POP
11159: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11160: LD_INT 13
11162: PPUSH
11163: LD_INT 22
11165: PUSH
11166: LD_VAR 0 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 70
11179: PUSH
11180: LD_INT 0
11182: GREATER
11183: IFFALSE 11106
// repeat wait ( 0 0$1 ) ;
11185: LD_INT 35
11187: PPUSH
11188: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11192: LD_ADDR_VAR 0 17
11196: PUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 1
11211: PUSH
11212: LD_INT 3
11214: PUSH
11215: LD_INT 24
11217: PUSH
11218: LD_INT 550
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 24
11231: PUSH
11232: LD_INT 250
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11253: LD_ADDR_VAR 0 19
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_VAR 0 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 25
11285: PUSH
11286: LD_INT 5
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 8
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 25
11305: PUSH
11306: LD_INT 9
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 24
11322: PUSH
11323: LD_INT 1000
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: PPUSH
11335: CALL_OW 69
11339: ST_TO_ADDR
// if medicCount > 0 then
11340: LD_VAR 0 7
11344: PUSH
11345: LD_INT 0
11347: GREATER
11348: IFFALSE 11422
// begin if damageUnit_list > 0 then
11350: LD_VAR 0 17
11354: PUSH
11355: LD_INT 0
11357: GREATER
11358: IFFALSE 11422
// begin for i in damageUnit_list do
11360: LD_ADDR_VAR 0 14
11364: PUSH
11365: LD_VAR 0 17
11369: PUSH
11370: FOR_IN
11371: IFFALSE 11420
// begin ComMoveToArea ( i , healArea ) ;
11373: LD_VAR 0 14
11377: PPUSH
11378: LD_VAR 0 10
11382: PPUSH
11383: CALL_OW 113
// for j in medic_list do
11387: LD_ADDR_VAR 0 15
11391: PUSH
11392: LD_VAR 0 18
11396: PUSH
11397: FOR_IN
11398: IFFALSE 11416
// AddComHeal ( j , i ) ;
11400: LD_VAR 0 15
11404: PPUSH
11405: LD_VAR 0 14
11409: PPUSH
11410: CALL_OW 188
11414: GO 11397
11416: POP
11417: POP
// end ;
11418: GO 11370
11420: POP
11421: POP
// end ; end ; for i in soldiersOK_list do
11422: LD_ADDR_VAR 0 14
11426: PUSH
11427: LD_VAR 0 19
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11615
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11435: LD_ADDR_VAR 0 22
11439: PUSH
11440: LD_INT 22
11442: PUSH
11443: LD_VAR 0 11
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PPUSH
11452: CALL_OW 69
11456: PUSH
11457: LD_EXP 45
11461: DIFF
11462: PPUSH
11463: LD_VAR 0 14
11467: PPUSH
11468: CALL_OW 74
11472: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11473: LD_ADDR_VAR 0 23
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 11
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 59
11495: PUSH
11496: EMPTY
11497: LIST
11498: PUSH
11499: LD_INT 21
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: PPUSH
11532: CALL_OW 69
11536: PPUSH
11537: LD_VAR 0 14
11541: PPUSH
11542: CALL_OW 74
11546: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11547: LD_VAR 0 14
11551: PPUSH
11552: LD_VAR 0 22
11556: PPUSH
11557: CALL_OW 296
11561: PUSH
11562: LD_INT 8
11564: PLUS
11565: PUSH
11566: LD_VAR 0 14
11570: PPUSH
11571: LD_VAR 0 23
11575: PPUSH
11576: CALL_OW 296
11580: LESS
11581: IFFALSE 11599
// begin ComAttackUnit ( i , target1 ) ;
11583: LD_VAR 0 14
11587: PPUSH
11588: LD_VAR 0 22
11592: PPUSH
11593: CALL_OW 115
// end else
11597: GO 11613
// begin ComAttackUnit ( i , target2 ) ;
11599: LD_VAR 0 14
11603: PPUSH
11604: LD_VAR 0 23
11608: PPUSH
11609: CALL_OW 115
// end ; end ;
11613: GO 11432
11615: POP
11616: POP
// for i in soldiersOK_list do
11617: LD_ADDR_VAR 0 14
11621: PUSH
11622: LD_VAR 0 19
11626: PUSH
11627: FOR_IN
11628: IFFALSE 11810
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11630: LD_ADDR_VAR 0 22
11634: PUSH
11635: LD_INT 22
11637: PUSH
11638: LD_VAR 0 11
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: PUSH
11652: LD_EXP 45
11656: DIFF
11657: PPUSH
11658: LD_VAR 0 14
11662: PPUSH
11663: CALL_OW 74
11667: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11668: LD_ADDR_VAR 0 23
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_VAR 0 11
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 2
11687: PUSH
11688: LD_INT 59
11690: PUSH
11691: EMPTY
11692: LIST
11693: PUSH
11694: LD_INT 21
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 21
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: PPUSH
11727: CALL_OW 69
11731: PPUSH
11732: LD_VAR 0 14
11736: PPUSH
11737: CALL_OW 74
11741: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11742: LD_VAR 0 14
11746: PPUSH
11747: LD_VAR 0 22
11751: PPUSH
11752: CALL_OW 296
11756: PUSH
11757: LD_INT 8
11759: PLUS
11760: PUSH
11761: LD_VAR 0 14
11765: PPUSH
11766: LD_VAR 0 23
11770: PPUSH
11771: CALL_OW 296
11775: LESS
11776: IFFALSE 11794
// begin ComAttackUnit ( i , target1 ) ;
11778: LD_VAR 0 14
11782: PPUSH
11783: LD_VAR 0 22
11787: PPUSH
11788: CALL_OW 115
// end else
11792: GO 11808
// begin ComAttackUnit ( i , target2 ) ;
11794: LD_VAR 0 14
11798: PPUSH
11799: LD_VAR 0 23
11803: PPUSH
11804: CALL_OW 115
// end ; end ;
11808: GO 11627
11810: POP
11811: POP
// until soldiersOK_list = [ ] ;
11812: LD_VAR 0 19
11816: PUSH
11817: EMPTY
11818: EQUAL
11819: IFFALSE 11185
// end ; if strategy = 2 then
11821: LD_VAR 0 12
11825: PUSH
11826: LD_INT 2
11828: EQUAL
11829: IFFALSE 12534
// begin repeat wait ( 0 0$1 ) ;
11831: LD_INT 35
11833: PPUSH
11834: CALL_OW 67
// for i in soldiersOK_list do
11838: LD_ADDR_VAR 0 14
11842: PUSH
11843: LD_VAR 0 19
11847: PUSH
11848: FOR_IN
11849: IFFALSE 11883
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11851: LD_VAR 0 14
11855: PPUSH
11856: LD_INT 117
11858: PPUSH
11859: LD_INT 97
11861: PPUSH
11862: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11866: LD_VAR 0 14
11870: PPUSH
11871: LD_INT 94
11873: PPUSH
11874: LD_INT 50
11876: PPUSH
11877: CALL_OW 174
// end ;
11881: GO 11848
11883: POP
11884: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11885: LD_INT 14
11887: PPUSH
11888: LD_INT 22
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 70
11904: PUSH
11905: LD_INT 0
11907: GREATER
11908: IFFALSE 11831
// repeat wait ( 0 0$3 ) ;
11910: LD_INT 105
11912: PPUSH
11913: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11917: LD_ADDR_VAR 0 17
11921: PUSH
11922: LD_INT 22
11924: PUSH
11925: LD_VAR 0 1
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 1
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 24
11942: PUSH
11943: LD_INT 550
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 24
11956: PUSH
11957: LD_INT 250
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 69
11977: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11978: LD_ADDR_VAR 0 19
11982: PUSH
11983: LD_INT 22
11985: PUSH
11986: LD_VAR 0 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 5
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 8
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 25
12030: PUSH
12031: LD_INT 9
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 24
12047: PUSH
12048: LD_INT 1000
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: PPUSH
12060: CALL_OW 69
12064: ST_TO_ADDR
// if medicCount > 0 then
12065: LD_VAR 0 7
12069: PUSH
12070: LD_INT 0
12072: GREATER
12073: IFFALSE 12147
// begin if damageUnit_list > 0 then
12075: LD_VAR 0 17
12079: PUSH
12080: LD_INT 0
12082: GREATER
12083: IFFALSE 12147
// begin for i in damageUnit_list do
12085: LD_ADDR_VAR 0 14
12089: PUSH
12090: LD_VAR 0 17
12094: PUSH
12095: FOR_IN
12096: IFFALSE 12145
// begin ComMoveToArea ( i , healArea ) ;
12098: LD_VAR 0 14
12102: PPUSH
12103: LD_VAR 0 10
12107: PPUSH
12108: CALL_OW 113
// for j in medic_list do
12112: LD_ADDR_VAR 0 15
12116: PUSH
12117: LD_VAR 0 18
12121: PUSH
12122: FOR_IN
12123: IFFALSE 12141
// AddComHeal ( j , i ) ;
12125: LD_VAR 0 15
12129: PPUSH
12130: LD_VAR 0 14
12134: PPUSH
12135: CALL_OW 188
12139: GO 12122
12141: POP
12142: POP
// end ;
12143: GO 12095
12145: POP
12146: POP
// end ; end ; for i in soldiersOK_list do
12147: LD_ADDR_VAR 0 14
12151: PUSH
12152: LD_VAR 0 19
12156: PUSH
12157: FOR_IN
12158: IFFALSE 12334
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12160: LD_ADDR_VAR 0 22
12164: PUSH
12165: LD_INT 22
12167: PUSH
12168: LD_VAR 0 11
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PPUSH
12182: LD_VAR 0 14
12186: PPUSH
12187: CALL_OW 74
12191: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12192: LD_ADDR_VAR 0 23
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_VAR 0 11
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: LD_INT 59
12214: PUSH
12215: EMPTY
12216: LIST
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 21
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: PPUSH
12256: LD_VAR 0 14
12260: PPUSH
12261: CALL_OW 74
12265: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12266: LD_VAR 0 14
12270: PPUSH
12271: LD_VAR 0 22
12275: PPUSH
12276: CALL_OW 296
12280: PUSH
12281: LD_INT 8
12283: PLUS
12284: PUSH
12285: LD_VAR 0 14
12289: PPUSH
12290: LD_VAR 0 23
12294: PPUSH
12295: CALL_OW 296
12299: LESS
12300: IFFALSE 12318
// begin ComAttackUnit ( i , target1 ) ;
12302: LD_VAR 0 14
12306: PPUSH
12307: LD_VAR 0 22
12311: PPUSH
12312: CALL_OW 115
// end else
12316: GO 12332
// begin ComAttackUnit ( i , target2 ) ;
12318: LD_VAR 0 14
12322: PPUSH
12323: LD_VAR 0 23
12327: PPUSH
12328: CALL_OW 115
// end ; end ;
12332: GO 12157
12334: POP
12335: POP
// for i in soldiersOK_list do
12336: LD_ADDR_VAR 0 14
12340: PUSH
12341: LD_VAR 0 19
12345: PUSH
12346: FOR_IN
12347: IFFALSE 12523
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12349: LD_ADDR_VAR 0 22
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_VAR 0 11
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 69
12370: PPUSH
12371: LD_VAR 0 14
12375: PPUSH
12376: CALL_OW 74
12380: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12381: LD_ADDR_VAR 0 23
12385: PUSH
12386: LD_INT 22
12388: PUSH
12389: LD_VAR 0 11
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: LD_INT 59
12403: PUSH
12404: EMPTY
12405: LIST
12406: PUSH
12407: LD_INT 21
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 21
12419: PUSH
12420: LD_INT 2
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: PPUSH
12440: CALL_OW 69
12444: PPUSH
12445: LD_VAR 0 14
12449: PPUSH
12450: CALL_OW 74
12454: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12455: LD_VAR 0 14
12459: PPUSH
12460: LD_VAR 0 22
12464: PPUSH
12465: CALL_OW 296
12469: PUSH
12470: LD_INT 8
12472: PLUS
12473: PUSH
12474: LD_VAR 0 14
12478: PPUSH
12479: LD_VAR 0 23
12483: PPUSH
12484: CALL_OW 296
12488: LESS
12489: IFFALSE 12507
// begin ComAttackUnit ( i , target1 ) ;
12491: LD_VAR 0 14
12495: PPUSH
12496: LD_VAR 0 22
12500: PPUSH
12501: CALL_OW 115
// end else
12505: GO 12521
// begin ComAttackUnit ( i , target2 ) ;
12507: LD_VAR 0 14
12511: PPUSH
12512: LD_VAR 0 23
12516: PPUSH
12517: CALL_OW 115
// end ; end ;
12521: GO 12346
12523: POP
12524: POP
// until soldiersOK_list = [ ] ;
12525: LD_VAR 0 19
12529: PUSH
12530: EMPTY
12531: EQUAL
12532: IFFALSE 11910
// end ; end ; end_of_file
12534: LD_VAR 0 13
12538: RET
// every 0 0$01 do
12539: GO 12541
12541: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12542: LD_INT 22
12544: PUSH
12545: LD_INT 1
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 25
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PUSH
12571: LD_INT 0
12573: EQUAL
12574: IFFALSE 12588
// SetClass ( JMM , 2 ) ;
12576: LD_EXP 1
12580: PPUSH
12581: LD_INT 2
12583: PPUSH
12584: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12588: LD_STRING M1
12590: PPUSH
12591: CALL_OW 337
// case difficulty of 1 :
12595: LD_OWVAR 67
12599: PUSH
12600: LD_INT 1
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12618
12608: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12609: LD_STRING M1-1
12611: PPUSH
12612: CALL_OW 337
12616: GO 12655
12618: LD_INT 2
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12636
12626: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12627: LD_STRING M1-2
12629: PPUSH
12630: CALL_OW 337
12634: GO 12655
12636: LD_INT 3
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12654
12644: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12645: LD_STRING M1-3
12647: PPUSH
12648: CALL_OW 337
12652: GO 12655
12654: POP
// ChangeMissionObjectives ( M1cont ) ;
12655: LD_STRING M1cont
12657: PPUSH
12658: CALL_OW 337
// SaveForQuickRestart ;
12662: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12666: LD_INT 525
12668: PPUSH
12669: LD_INT 700
12671: PPUSH
12672: CALL_OW 12
12676: PPUSH
12677: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12681: LD_INT 5
12683: PPUSH
12684: LD_INT 82
12686: PPUSH
12687: LD_INT 38
12689: PPUSH
12690: LD_INT 10
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: CALL_OW 56
// wait ( 0 0$14 ) ;
12700: LD_INT 490
12702: PPUSH
12703: CALL_OW 67
// firstCrateSpawn := true ;
12707: LD_ADDR_EXP 41
12711: PUSH
12712: LD_INT 1
12714: ST_TO_ADDR
// end ;
12715: END
// every 0 0$02 trigger firstCrateSpawn do
12716: LD_EXP 41
12720: IFFALSE 13083
12722: GO 12724
12724: DISABLE
// begin if IsOk ( Lisa ) then
12725: LD_EXP 2
12729: PPUSH
12730: CALL_OW 302
12734: IFFALSE 12750
// Say ( Lisa , DR0-Lisa-1 ) else
12736: LD_EXP 2
12740: PPUSH
12741: LD_STRING DR0-Lisa-1
12743: PPUSH
12744: CALL_OW 88
12748: GO 12896
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12750: LD_INT 22
12752: PUSH
12753: LD_INT 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 21
12762: PUSH
12763: LD_INT 1
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 1
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 25
12785: PUSH
12786: LD_INT 1
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 25
12795: PUSH
12796: LD_INT 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 25
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: LD_INT 25
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PUSH
12841: LD_EXP 1
12845: PUSH
12846: LD_EXP 8
12850: PUSH
12851: LD_EXP 5
12855: PUSH
12856: LD_EXP 6
12860: PUSH
12861: LD_EXP 7
12865: PUSH
12866: LD_EXP 4
12870: PUSH
12871: LD_EXP 3
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: DIFF
12885: PPUSH
12886: LD_STRING DR0-Sol1-1
12888: PPUSH
12889: LD_STRING DR0-Sol1-1
12891: PPUSH
12892: CALL 5932 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12896: LD_INT 22
12898: PUSH
12899: LD_INT 1
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 21
12908: PUSH
12909: LD_INT 1
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 26
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 1
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 25
12951: PUSH
12952: LD_INT 3
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 25
12961: PUSH
12962: LD_INT 4
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PPUSH
12982: CALL_OW 69
12986: PUSH
12987: LD_EXP 1
12991: PUSH
12992: LD_EXP 8
12996: PUSH
12997: LD_EXP 5
13001: PUSH
13002: LD_EXP 2
13006: PUSH
13007: LD_EXP 6
13011: PUSH
13012: LD_EXP 7
13016: PUSH
13017: LD_EXP 4
13021: PUSH
13022: LD_EXP 3
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: DIFF
13037: PPUSH
13038: LD_STRING DR0-Sol2-1
13040: PPUSH
13041: LD_STRING DR0-Sol2-1
13043: PPUSH
13044: CALL 5932 0 3
// if IsOk ( Cyrus ) then
13048: LD_EXP 4
13052: PPUSH
13053: CALL_OW 302
13057: IFFALSE 13071
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13059: LD_EXP 4
13063: PPUSH
13064: LD_STRING DR0-Cyrus-1
13066: PPUSH
13067: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13071: LD_EXP 1
13075: PPUSH
13076: LD_STRING DR0-JMM-1
13078: PPUSH
13079: CALL_OW 88
// end ;
13083: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13084: LD_EXP 5
13088: PPUSH
13089: CALL_OW 302
13093: PUSH
13094: LD_INT 22
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 25
13106: PUSH
13107: LD_INT 16
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: PUSH
13123: LD_INT 0
13125: GREATER
13126: AND
13127: PUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 463
13135: NOT
13136: AND
13137: IFFALSE 13415
13139: GO 13141
13141: DISABLE
// begin DialogueOn ;
13142: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13146: LD_EXP 5
13150: PPUSH
13151: LD_STRING D10-Frank-1
13153: PPUSH
13154: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13158: LD_INT 22
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 21
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 25
13183: PUSH
13184: LD_INT 1
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 25
13193: PUSH
13194: LD_INT 2
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 25
13203: PUSH
13204: LD_INT 3
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 69
13237: PUSH
13238: LD_EXP 1
13242: PUSH
13243: LD_EXP 5
13247: PUSH
13248: LD_EXP 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: DIFF
13258: PPUSH
13259: LD_STRING D10-Sol1-1
13261: PPUSH
13262: LD_STRING D10-FSol1-1
13264: PPUSH
13265: CALL 5932 0 3
// Say ( Frank , D10-Frank-2 ) ;
13269: LD_EXP 5
13273: PPUSH
13274: LD_STRING D10-Frank-2
13276: PPUSH
13277: CALL_OW 88
// if IsOK ( Lisa ) then
13281: LD_EXP 2
13285: PPUSH
13286: CALL_OW 302
13290: IFFALSE 13306
// begin Say ( Lisa , D10-Lisa-2 ) ;
13292: LD_EXP 2
13296: PPUSH
13297: LD_STRING D10-Lisa-2
13299: PPUSH
13300: CALL_OW 88
// end else
13304: GO 13411
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13306: LD_INT 22
13308: PUSH
13309: LD_INT 1
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 21
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 25
13331: PUSH
13332: LD_INT 1
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 25
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 3
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 25
13361: PUSH
13362: LD_INT 4
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 69
13385: PUSH
13386: LD_EXP 1
13390: PUSH
13391: LD_EXP 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: DIFF
13400: PPUSH
13401: LD_STRING D10-Sol1-2
13403: PPUSH
13404: LD_STRING D10-FSol1-2
13406: PPUSH
13407: CALL 5932 0 3
// end ; DialogueOff ;
13411: CALL_OW 7
// end ;
13415: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 463
13423: NOT
13424: IFFALSE 13687
13426: GO 13428
13428: DISABLE
// begin HarrisonSupport ;
13429: CALL 2424 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13433: LD_EXP 17
13437: PPUSH
13438: CALL_OW 310
13442: PPUSH
13443: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13447: LD_EXP 17
13451: PPUSH
13452: LD_STRING DEng-Eng1-1
13454: PPUSH
13455: CALL_OW 88
// wait ( 1 1$0 ) ;
13459: LD_INT 2100
13461: PPUSH
13462: CALL_OW 67
// DialogueOn ;
13466: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13470: LD_EXP 14
13474: PPUSH
13475: LD_STRING DRem-Har-1
13477: PPUSH
13478: CALL_OW 94
// if contactWithRussian = 1 then
13482: LD_EXP 22
13486: PUSH
13487: LD_INT 1
13489: EQUAL
13490: IFFALSE 13506
// begin Say ( JMM , DRem-JMM-1 ) ;
13492: LD_EXP 1
13496: PPUSH
13497: LD_STRING DRem-JMM-1
13499: PPUSH
13500: CALL_OW 88
// end else
13504: GO 13518
// begin Say ( JMM , DRem-JMM-1a ) ;
13506: LD_EXP 1
13510: PPUSH
13511: LD_STRING DRem-JMM-1a
13513: PPUSH
13514: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13518: LD_EXP 14
13522: PPUSH
13523: LD_STRING DRem-Har-2
13525: PPUSH
13526: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13530: LD_STRING DenisInDelta
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 30
13540: PUSH
13541: LD_INT 1
13543: EQUAL
13544: IFFALSE 13560
// begin Say ( JMM , DRem-JMM-2 ) ;
13546: LD_EXP 1
13550: PPUSH
13551: LD_STRING DRem-JMM-2
13553: PPUSH
13554: CALL_OW 88
// end else
13558: GO 13572
// begin Say ( JMM , DRem-JMM-2a ) ;
13560: LD_EXP 1
13564: PPUSH
13565: LD_STRING DRem-JMM-2a
13567: PPUSH
13568: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13572: LD_EXP 14
13576: PPUSH
13577: LD_STRING DRem-Har-3
13579: PPUSH
13580: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13584: LD_EXP 1
13588: PPUSH
13589: LD_STRING DRem-JMM-3
13591: PPUSH
13592: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13596: LD_EXP 14
13600: PPUSH
13601: LD_STRING DRem-Har-4
13603: PPUSH
13604: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13608: LD_STRING DenisInDelta
13610: PPUSH
13611: LD_INT 0
13613: PPUSH
13614: CALL_OW 30
13618: PUSH
13619: LD_INT 1
13621: EQUAL
13622: IFFALSE 13650
// begin Say ( JMM , DRem-JMM-4 ) ;
13624: LD_EXP 1
13628: PPUSH
13629: LD_STRING DRem-JMM-4
13631: PPUSH
13632: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13636: LD_EXP 14
13640: PPUSH
13641: LD_STRING DRem-Har-5
13643: PPUSH
13644: CALL_OW 94
// end else
13648: GO 13683
// begin SetRestrict ( 36 , 1 , true ) ;
13650: LD_INT 36
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13663: LD_INT 15
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13676: LD_STRING MR
13678: PPUSH
13679: CALL_OW 337
// end ; DialogueOff ;
13683: CALL_OW 7
// end ;
13687: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13688: LD_STRING DenisInDelta
13690: PPUSH
13691: LD_INT 0
13693: PPUSH
13694: CALL_OW 30
13698: PUSH
13699: LD_INT 1
13701: EQUAL
13702: PUSH
13703: LD_INT 1
13705: PPUSH
13706: CALL_OW 463
13710: NOT
13711: AND
13712: IFFALSE 13945
13714: GO 13716
13716: DISABLE
13717: LD_INT 0
13719: PPUSH
// begin PrepareDenis ;
13720: CALL 2146 0 0
// CenterNowOnUnits ( Denis ) ;
13724: LD_EXP 9
13728: PPUSH
13729: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_INT 1
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13753: LD_EXP 9
13757: PPUSH
13758: LD_VAR 0 1
13762: PPUSH
13763: LD_EXP 9
13767: PPUSH
13768: CALL_OW 74
13772: PPUSH
13773: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13777: LD_INT 35
13779: PPUSH
13780: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13784: LD_INT 22
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 91
13796: PUSH
13797: LD_EXP 9
13801: PUSH
13802: LD_INT 10
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: IFFALSE 13777
// SetSide ( Denis , 1 ) ;
13820: LD_EXP 9
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 235
// DialogueOn ;
13832: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13836: LD_EXP 9
13840: PPUSH
13841: LD_STRING DDen-Den-1
13843: PPUSH
13844: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13848: LD_EXP 1
13852: PPUSH
13853: LD_STRING DDen-JMM-1
13855: PPUSH
13856: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13860: LD_EXP 9
13864: PPUSH
13865: LD_STRING DDen-Den-2
13867: PPUSH
13868: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13872: LD_EXP 1
13876: PPUSH
13877: LD_STRING DDen-JMM-2
13879: PPUSH
13880: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13884: LD_EXP 9
13888: PPUSH
13889: LD_STRING DDen-Den-3
13891: PPUSH
13892: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13896: LD_EXP 1
13900: PPUSH
13901: LD_STRING DDen-JMM-3
13903: PPUSH
13904: CALL_OW 88
// DialogueOff ;
13908: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13912: LD_INT 36
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13925: LD_INT 15
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13938: LD_STRING MR
13940: PPUSH
13941: CALL_OW 337
// end ;
13945: PPOPN 1
13947: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13948: CALL 14003 0 0
13952: PUSH
13953: LD_EXP 9
13957: PPUSH
13958: CALL_OW 302
13962: AND
13963: PUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 463
13971: NOT
13972: AND
13973: IFFALSE 14002
13975: GO 13977
13977: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13978: LD_EXP 9
13982: PPUSH
13983: LD_STRING DR1-Den-1
13985: PPUSH
13986: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13990: LD_EXP 1
13994: PPUSH
13995: LD_STRING DR1-JMM-1
13997: PPUSH
13998: CALL_OW 88
// end ;
14002: END
// function CheckOptoLab ; var i ; begin
14003: LD_INT 0
14005: PPUSH
14006: PPUSH
// result = false ;
14007: LD_ADDR_VAR 0 1
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14015: LD_ADDR_VAR 0 2
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 2
14032: PUSH
14033: LD_INT 30
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 30
14045: PUSH
14046: LD_INT 8
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 69
14066: PUSH
14067: FOR_IN
14068: IFFALSE 14120
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 268
14082: PUSH
14083: LD_INT 15
14085: EQUAL
14086: PUSH
14087: LD_VAR 0 2
14091: PPUSH
14092: LD_INT 2
14094: PPUSH
14095: CALL_OW 268
14099: PUSH
14100: LD_INT 15
14102: EQUAL
14103: OR
14104: IFFALSE 14116
// begin result = true ;
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// break ;
14114: GO 14120
// end ; break ;
14116: GO 14120
// end ;
14118: GO 14067
14120: POP
14121: POP
// end ;
14122: LD_VAR 0 1
14126: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14127: LD_INT 15
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 321
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: PUSH
14142: LD_EXP 9
14146: PPUSH
14147: CALL_OW 302
14151: AND
14152: PUSH
14153: LD_INT 1
14155: PPUSH
14156: CALL_OW 463
14160: NOT
14161: AND
14162: IFFALSE 14394
14164: GO 14166
14166: DISABLE
// begin DialogueOn ;
14167: CALL_OW 6
// if IsOK ( Denis ) then
14171: LD_EXP 9
14175: PPUSH
14176: CALL_OW 302
14180: IFFALSE 14196
// begin Say ( Denis , DR2-Den-1 ) ;
14182: LD_EXP 9
14186: PPUSH
14187: LD_STRING DR2-Den-1
14189: PPUSH
14190: CALL_OW 88
// end else
14194: GO 14255
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14196: LD_INT 22
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 1
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 25
14218: PUSH
14219: LD_INT 4
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PUSH
14236: LD_EXP 1
14240: PUSH
14241: EMPTY
14242: LIST
14243: DIFF
14244: PPUSH
14245: LD_STRING DR2-Sci1-1
14247: PPUSH
14248: LD_STRING DR2-FSci1-1
14250: PPUSH
14251: CALL 5932 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14255: LD_EXP 1
14259: PPUSH
14260: LD_STRING DR2-JMM-1
14262: PPUSH
14263: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14267: LD_INT 22
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: LD_INT 25
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 25
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 25
14322: PUSH
14323: LD_INT 4
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: LD_EXP 1
14351: PUSH
14352: LD_EXP 9
14356: PUSH
14357: LD_EXP 8
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: DIFF
14367: PPUSH
14368: LD_STRING DR2-Sol1-1
14370: PPUSH
14371: LD_STRING DR2-Sol1-11
14373: PPUSH
14374: CALL 5932 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14378: LD_EXP 1
14382: PPUSH
14383: LD_STRING DR2-JMM-2
14385: PPUSH
14386: CALL_OW 88
// DialogueOff ;
14390: CALL_OW 7
// end ;
14394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14395: LD_INT 22
14397: PUSH
14398: LD_INT 1
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 30
14407: PUSH
14408: LD_INT 36
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: PUSH
14424: LD_INT 0
14426: EQUAL
14427: PUSH
14428: LD_INT 22
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 33
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: PUSH
14468: LD_INT 0
14470: GREATER
14471: AND
14472: PUSH
14473: LD_EXP 23
14477: PUSH
14478: LD_INT 0
14480: EQUAL
14481: AND
14482: PUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 463
14490: NOT
14491: AND
14492: IFFALSE 14618
14494: GO 14496
14496: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14497: LD_INT 22
14499: PUSH
14500: LD_INT 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 21
14509: PUSH
14510: LD_INT 1
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 25
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: PUSH
14537: LD_EXP 1
14541: PUSH
14542: LD_EXP 6
14546: PUSH
14547: LD_EXP 7
14551: PUSH
14552: LD_EXP 9
14556: PUSH
14557: LD_EXP 15
14561: PUSH
14562: LD_EXP 3
14566: PUSH
14567: LD_EXP 4
14571: PUSH
14572: LD_EXP 2
14576: PUSH
14577: LD_EXP 5
14581: PUSH
14582: LD_EXP 8
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: DIFF
14599: PPUSH
14600: LD_STRING D3a-Mech1-1
14602: PPUSH
14603: LD_STRING D3a-Mech1-1
14605: PPUSH
14606: CALL 5932 0 3
// firstTower = 2 ;
14610: LD_ADDR_EXP 23
14614: PUSH
14615: LD_INT 2
14617: ST_TO_ADDR
// end ;
14618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14619: LD_INT 22
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: PUSH
14648: LD_INT 0
14650: EQUAL
14651: IFFALSE 14766
14653: GO 14655
14655: DISABLE
14656: LD_INT 0
14658: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14659: LD_ADDR_VAR 0 1
14663: PUSH
14664: LD_INT 22
14666: PUSH
14667: LD_INT 1
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 2
14686: PUSH
14687: LD_INT 25
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 25
14699: PUSH
14700: LD_INT 2
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 25
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 25
14719: PUSH
14720: LD_INT 4
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: FOR_IN
14745: IFFALSE 14764
// AddExperience ( i , 1 , 10000 ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_INT 10000
14757: PPUSH
14758: CALL_OW 492
14762: GO 14744
14764: POP
14765: POP
// end ;
14766: PPOPN 1
14768: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14769: LD_INT 22
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 30
14781: PUSH
14782: LD_INT 36
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PPUSH
14793: CALL_OW 69
14797: PUSH
14798: LD_INT 0
14800: GREATER
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 21
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 33
14824: PUSH
14825: LD_INT 2
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: PUSH
14842: LD_INT 0
14844: GREATER
14845: AND
14846: PUSH
14847: CALL 15439 0 0
14851: AND
14852: PUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 463
14860: NOT
14861: AND
14862: IFFALSE 15436
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 36
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14908: LD_ADDR_VAR 0 4
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 1
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 2
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 33
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14953: LD_ADDR_VAR 0 5
14957: PUSH
14958: EMPTY
14959: ST_TO_ADDR
// for i in tmpControlTowers do
14960: LD_ADDR_VAR 0 1
14964: PUSH
14965: LD_VAR 0 3
14969: PUSH
14970: FOR_IN
14971: IFFALSE 15434
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14973: LD_EXP 1
14977: PPUSH
14978: CALL_OW 310
14982: PUSH
14983: LD_VAR 0 1
14987: EQUAL
14988: PUSH
14989: LD_EXP 1
14993: PPUSH
14994: CALL_OW 257
14998: PUSH
14999: LD_INT 3
15001: EQUAL
15002: AND
15003: IFFALSE 15133
// begin InGameOn ;
15005: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15009: LD_VAR 0 4
15013: PUSH
15014: LD_INT 1
15016: ARRAY
15017: PPUSH
15018: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15022: LD_EXP 1
15026: PPUSH
15027: LD_STRING D4a-JMM-1
15029: PPUSH
15030: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15034: LD_VAR 0 4
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: LD_EXP 1
15047: PPUSH
15048: CALL_OW 53
// wait ( 0 0$1 ) ;
15052: LD_INT 35
15054: PPUSH
15055: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15059: LD_VAR 0 4
15063: PUSH
15064: LD_INT 1
15066: ARRAY
15067: PPUSH
15068: LD_VAR 0 4
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: PPUSH
15077: CALL_OW 250
15081: PUSH
15082: LD_INT 3
15084: PLUS
15085: PPUSH
15086: LD_VAR 0 4
15090: PUSH
15091: LD_INT 1
15093: ARRAY
15094: PPUSH
15095: CALL_OW 251
15099: PUSH
15100: LD_INT 2
15102: MINUS
15103: PPUSH
15104: CALL_OW 111
// wait ( 0 0$2 ) ;
15108: LD_INT 70
15110: PPUSH
15111: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15115: LD_EXP 1
15119: PPUSH
15120: LD_STRING D4b-JMM-1
15122: PPUSH
15123: CALL_OW 88
// InGameOff ;
15127: CALL_OW 9
// end else
15131: GO 15432
// begin InGameOn ;
15133: CALL_OW 8
// for j in UnitsInside ( i ) do
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: CALL_OW 313
15151: PUSH
15152: FOR_IN
15153: IFFALSE 15188
// if GetClass ( j ) = 3 then
15155: LD_VAR 0 2
15159: PPUSH
15160: CALL_OW 257
15164: PUSH
15165: LD_INT 3
15167: EQUAL
15168: IFFALSE 15186
// tmpMechanicInside = tmpMechanicInside ^ j ;
15170: LD_ADDR_VAR 0 5
15174: PUSH
15175: LD_VAR 0 5
15179: PUSH
15180: LD_VAR 0 2
15184: ADD
15185: ST_TO_ADDR
15186: GO 15152
15188: POP
15189: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15190: LD_VAR 0 5
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 258
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15225
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15209: LD_VAR 0 5
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: LD_STRING D4a-Mech1-1
15220: PPUSH
15221: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15225: LD_VAR 0 5
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: CALL_OW 258
15238: PUSH
15239: LD_INT 2
15241: EQUAL
15242: IFFALSE 15260
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15244: LD_VAR 0 5
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_STRING D4a-FMech1-1
15255: PPUSH
15256: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15260: LD_VAR 0 4
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: PPUSH
15269: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15273: LD_VAR 0 4
15277: PUSH
15278: LD_INT 1
15280: ARRAY
15281: PPUSH
15282: LD_VAR 0 5
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: CALL_OW 53
// wait ( 0 0$1 ) ;
15295: LD_INT 35
15297: PPUSH
15298: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15302: LD_VAR 0 4
15306: PUSH
15307: LD_INT 1
15309: ARRAY
15310: PPUSH
15311: LD_VAR 0 4
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: CALL_OW 250
15324: PUSH
15325: LD_INT 3
15327: PLUS
15328: PPUSH
15329: LD_VAR 0 4
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: CALL_OW 251
15342: PUSH
15343: LD_INT 2
15345: MINUS
15346: PPUSH
15347: CALL_OW 111
// wait ( 0 0$2 ) ;
15351: LD_INT 70
15353: PPUSH
15354: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15358: LD_VAR 0 5
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: CALL_OW 258
15371: PUSH
15372: LD_INT 1
15374: EQUAL
15375: IFFALSE 15393
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15377: LD_VAR 0 5
15381: PUSH
15382: LD_INT 1
15384: ARRAY
15385: PPUSH
15386: LD_STRING D4b-Mech1-1
15388: PPUSH
15389: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15393: LD_VAR 0 5
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: PPUSH
15402: CALL_OW 258
15406: PUSH
15407: LD_INT 2
15409: EQUAL
15410: IFFALSE 15428
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15412: LD_VAR 0 5
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: LD_STRING D4b-FMech1-1
15423: PPUSH
15424: CALL_OW 88
// InGameOff ;
15428: CALL_OW 9
// end ; end ;
15432: GO 14970
15434: POP
15435: POP
// end ;
15436: PPOPN 5
15438: END
// function CheckMehInside ; var i , j ; begin
15439: LD_INT 0
15441: PPUSH
15442: PPUSH
15443: PPUSH
// result = false ;
15444: LD_ADDR_VAR 0 1
15448: PUSH
15449: LD_INT 0
15451: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15452: LD_ADDR_VAR 0 2
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 36
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15538
// begin for j in UnitsInside ( i ) do
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 313
15503: PUSH
15504: FOR_IN
15505: IFFALSE 15534
// begin if GetClass ( j ) = 3 then
15507: LD_VAR 0 3
15511: PPUSH
15512: CALL_OW 257
15516: PUSH
15517: LD_INT 3
15519: EQUAL
15520: IFFALSE 15532
// begin result = true ;
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// break ;
15530: GO 15534
// end ; end ;
15532: GO 15504
15534: POP
15535: POP
// end ;
15536: GO 15486
15538: POP
15539: POP
// end ;
15540: LD_VAR 0 1
15544: RET
// every 25 25$0 do
15545: GO 15547
15547: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15548: LD_INT 35
15550: PPUSH
15551: CALL_OW 67
// until not InBattle ( 1 ) ;
15555: LD_INT 1
15557: PPUSH
15558: CALL_OW 463
15562: NOT
15563: IFFALSE 15548
// PrepareKurt ;
15565: CALL 19030 0 0
// end ;
15569: END
// every 35 35$0 do
15570: GO 15572
15572: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15573: LD_INT 35
15575: PPUSH
15576: CALL_OW 67
// until not InBattle ( 1 ) ;
15580: LD_INT 1
15582: PPUSH
15583: CALL_OW 463
15587: NOT
15588: IFFALSE 15573
// PrepareJoan ;
15590: CALL 2942 0 0
// wait ( 1 1$0 ) ;
15594: LD_INT 2100
15596: PPUSH
15597: CALL_OW 67
// if IsOK ( Lisa ) then
15601: LD_EXP 2
15605: PPUSH
15606: CALL_OW 302
15610: IFFALSE 15740
// begin DialogueOn ;
15612: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15616: LD_EXP 2
15620: PPUSH
15621: LD_STRING D7-Lisa-1
15623: PPUSH
15624: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15628: LD_EXP 1
15632: PPUSH
15633: LD_STRING D7-JMM-1
15635: PPUSH
15636: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15640: LD_EXP 2
15644: PPUSH
15645: LD_STRING D7-Lisa-2
15647: PPUSH
15648: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15652: LD_EXP 1
15656: PPUSH
15657: LD_STRING D7-JMM-2
15659: PPUSH
15660: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15664: LD_EXP 2
15668: PPUSH
15669: LD_STRING D7-Lisa-3
15671: PPUSH
15672: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15676: LD_EXP 1
15680: PPUSH
15681: LD_STRING D7-JMM-3
15683: PPUSH
15684: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15688: LD_EXP 2
15692: PPUSH
15693: LD_STRING D7-Lisa-4
15695: PPUSH
15696: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15700: LD_EXP 1
15704: PPUSH
15705: LD_STRING D7-JMM-4
15707: PPUSH
15708: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15712: LD_EXP 1
15716: PPUSH
15717: LD_STRING D7-JMM-4a
15719: PPUSH
15720: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15724: LD_EXP 2
15728: PPUSH
15729: LD_STRING D7-Lisa-5
15731: PPUSH
15732: CALL_OW 88
// DialogueOff ;
15736: CALL_OW 7
// end ; end ;
15740: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15741: LD_EXP 13
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 91
15758: PUSH
15759: LD_EXP 13
15763: PUSH
15764: LD_INT 10
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: LD_INT 25
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 25
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 25
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 25
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PUSH
15832: LD_INT 1
15834: GREATER
15835: AND
15836: IFFALSE 15853
15838: GO 15840
15840: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15841: LD_EXP 13
15845: PPUSH
15846: LD_STRING D5-Sol1-1
15848: PPUSH
15849: CALL_OW 88
// end ;
15853: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15854: LD_INT 22
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 33
15866: PUSH
15867: LD_INT 2
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: PUSH
15883: LD_INT 2
15885: GREATEREQUAL
15886: IFFALSE 15906
15888: GO 15890
15890: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15891: LD_STRING MRa
15893: PPUSH
15894: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15898: LD_ADDR_EXP 28
15902: PUSH
15903: LD_INT 1
15905: ST_TO_ADDR
// end ;
15906: END
// every 0 0$10 do var i , last ;
15907: GO 15909
15909: DISABLE
15910: LD_INT 0
15912: PPUSH
15913: PPUSH
// begin last := 7 ;
15914: LD_ADDR_VAR 0 2
15918: PUSH
15919: LD_INT 7
15921: ST_TO_ADDR
// for i = 1 to last do
15922: LD_ADDR_VAR 0 1
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_VAR 0 2
15936: PUSH
15937: FOR_TO
15938: IFFALSE 15966
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15940: LD_INT 6300
15942: PPUSH
15943: LD_INT 14700
15945: PPUSH
15946: CALL_OW 12
15950: PPUSH
15951: CALL_OW 67
// PrepareRandoms ( i ) ;
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL 3978 0 1
// end ;
15964: GO 15937
15966: POP
15967: POP
// end ;
15968: PPOPN 2
15970: END
// every 5 5$20 do
15971: GO 15973
15973: DISABLE
// begin DialogueOn ;
15974: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15978: LD_EXP 10
15982: PPUSH
15983: LD_STRING D12a-Sci-1
15985: PPUSH
15986: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15990: LD_EXP 1
15994: PPUSH
15995: LD_STRING D12a-JMM-1
15997: PPUSH
15998: CALL_OW 88
// DialogueOff ;
16002: CALL_OW 7
// cratesStatus = 1 ;
16006: LD_ADDR_EXP 38
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// end ;
16014: END
// every 13 13$0 do
16015: GO 16017
16017: DISABLE
// begin DialogueOn ;
16018: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16022: LD_EXP 10
16026: PPUSH
16027: LD_STRING D12b-Sci-1
16029: PPUSH
16030: CALL_OW 94
// DialogueOff ;
16034: CALL_OW 7
// cratesStatus = 2 ;
16038: LD_ADDR_EXP 38
16042: PUSH
16043: LD_INT 2
16045: ST_TO_ADDR
// end ;
16046: END
// every 32 32$0 do
16047: GO 16049
16049: DISABLE
// begin DialogueOn ;
16050: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16054: LD_EXP 10
16058: PPUSH
16059: LD_STRING D12c-Sci-1
16061: PPUSH
16062: CALL_OW 94
// DialogueOff ;
16066: CALL_OW 7
// wait ( 3 3$0 ) ;
16070: LD_INT 6300
16072: PPUSH
16073: CALL_OW 67
// DialogueOn ;
16077: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16081: LD_EXP 10
16085: PPUSH
16086: LD_STRING D12d-Sci-1
16088: PPUSH
16089: CALL_OW 94
// DialogueOff ;
16093: CALL_OW 7
// cratesStatus = 1 ;
16097: LD_ADDR_EXP 38
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// end ;
16105: END
// every 42 42$0 do
16106: GO 16108
16108: DISABLE
// begin DialogueOn ;
16109: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16113: LD_EXP 10
16117: PPUSH
16118: LD_STRING D12e-Sci-1
16120: PPUSH
16121: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16125: LD_EXP 1
16129: PPUSH
16130: LD_STRING D12e-JMM-1
16132: PPUSH
16133: CALL_OW 88
// DialogueOff ;
16137: CALL_OW 7
// cratesStatus = 2 ;
16141: LD_ADDR_EXP 38
16145: PUSH
16146: LD_INT 2
16148: ST_TO_ADDR
// end ;
16149: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16150: LD_INT 22
16152: PUSH
16153: LD_INT 6
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 21
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 34
16172: PUSH
16173: LD_INT 51
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: LIST
16184: PPUSH
16185: CALL_OW 69
16189: PUSH
16190: LD_INT 0
16192: GREATER
16193: IFFALSE 16276
16195: GO 16197
16197: DISABLE
16198: LD_INT 0
16200: PPUSH
// begin enable ;
16201: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16202: LD_ADDR_VAR 0 1
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 6
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 2
16219: PUSH
16220: LD_INT 21
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16274
// ComAgressiveMove ( i , 138 , 168 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 138
16264: PPUSH
16265: LD_INT 168
16267: PPUSH
16268: CALL_OW 114
16272: GO 16254
16274: POP
16275: POP
// end ;
16276: PPOPN 1
16278: END
// every 0 0$1 do var i ;
16279: GO 16281
16281: DISABLE
16282: LD_INT 0
16284: PPUSH
// begin enable ;
16285: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16286: LD_ADDR_VAR 0 1
16290: PUSH
16291: LD_INT 4
16293: PPUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 22
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 22
16309: PUSH
16310: LD_INT 6
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: PPUSH
16325: CALL_OW 70
16329: PUSH
16330: FOR_IN
16331: IFFALSE 16395
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16333: LD_INT 4
16335: PPUSH
16336: LD_INT 22
16338: PUSH
16339: LD_INT 6
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 34
16348: PUSH
16349: LD_INT 51
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PPUSH
16360: CALL_OW 70
16364: PUSH
16365: LD_INT 0
16367: GREATER
16368: IFFALSE 16384
// sendedConvoys = sendedConvoys + 1 ;
16370: LD_ADDR_EXP 39
16374: PUSH
16375: LD_EXP 39
16379: PUSH
16380: LD_INT 1
16382: PLUS
16383: ST_TO_ADDR
// RemoveUnit ( i ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 64
// end ;
16393: GO 16330
16395: POP
16396: POP
// end ; end_of_file
16397: PPOPN 1
16399: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 1
16407: EQUAL
16408: PUSH
16409: LD_VAR 0 2
16413: PUSH
16414: LD_INT 3
16416: EQUAL
16417: AND
16418: IFFALSE 16428
// contactWithRussian = 1 ;
16420: LD_ADDR_EXP 22
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// end ;
16428: PPOPN 2
16430: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 266
16440: PUSH
16441: LD_INT 36
16443: EQUAL
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: LD_INT 1
16457: EQUAL
16458: AND
16459: PUSH
16460: LD_INT 22
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 21
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 33
16482: PUSH
16483: LD_INT 2
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: PUSH
16500: LD_INT 0
16502: EQUAL
16503: AND
16504: PUSH
16505: LD_EXP 23
16509: PUSH
16510: LD_INT 0
16512: EQUAL
16513: AND
16514: IFFALSE 16594
// begin firstTower = 1 ;
16516: LD_ADDR_EXP 23
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16524: LD_INT 22
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 21
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 25
16546: PUSH
16547: LD_INT 3
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 26
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 69
16574: PUSH
16575: LD_EXP 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: DIFF
16583: PPUSH
16584: LD_STRING D3b-Mech1-1
16586: PPUSH
16587: LD_STRING D3b-Mech1-1
16589: PPUSH
16590: CALL 5932 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 266
16603: PUSH
16604: LD_INT 0
16606: EQUAL
16607: PUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 255
16617: PUSH
16618: LD_INT 1
16620: EQUAL
16621: AND
16622: IFFALSE 16636
// SetBName ( building , theta ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_STRING theta
16631: PPUSH
16632: CALL_OW 500
// if GetSide ( building ) = 3 then
16636: LD_VAR 0 1
16640: PPUSH
16641: CALL_OW 255
16645: PUSH
16646: LD_INT 3
16648: EQUAL
16649: IFFALSE 16723
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16651: LD_ADDR_EXP 31
16655: PUSH
16656: LD_EXP 31
16660: PPUSH
16661: LD_INT 1
16663: PPUSH
16664: CALL_OW 3
16668: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16669: LD_ADDR_EXP 31
16673: PUSH
16674: LD_EXP 31
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 3
16686: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16687: LD_ADDR_EXP 31
16691: PUSH
16692: LD_EXP 31
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 3
16704: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16705: LD_ADDR_EXP 31
16709: PUSH
16710: LD_EXP 31
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 3
16722: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 255
16732: PUSH
16733: LD_INT 3
16735: EQUAL
16736: PUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 266
16746: PUSH
16747: LD_INT 0
16749: EQUAL
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 266
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: OR
16765: PUSH
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 266
16775: PUSH
16776: LD_INT 4
16778: EQUAL
16779: OR
16780: PUSH
16781: EMPTY
16782: LIST
16783: AND
16784: IFFALSE 16795
// ComUpgrade ( building ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 255
16804: PUSH
16805: LD_INT 3
16807: EQUAL
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 266
16818: PUSH
16819: LD_INT 32
16821: EQUAL
16822: AND
16823: IFFALSE 16864
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_INT 42
16832: PUSH
16833: LD_INT 43
16835: PUSH
16836: LD_INT 44
16838: PUSH
16839: LD_INT 46
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: PPUSH
16851: LD_INT 4
16853: PPUSH
16854: CALL_OW 12
16858: ARRAY
16859: PPUSH
16860: CALL_OW 208
// end ; end ;
16864: PPOPN 1
16866: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_EXP 1
16876: EQUAL
16877: IFFALSE 16886
// YouLost ( JMM ) ;
16879: LD_STRING JMM
16881: PPUSH
16882: CALL_OW 104
// if unit = Joan then
16886: LD_VAR 0 1
16890: PUSH
16891: LD_EXP 15
16895: EQUAL
16896: IFFALSE 16906
// JoanStatus = 0 ;
16898: LD_ADDR_EXP 16
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 255
16915: PUSH
16916: LD_INT 1
16918: EQUAL
16919: PUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 247
16929: PUSH
16930: LD_INT 1
16932: EQUAL
16933: AND
16934: IFFALSE 17010
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16936: LD_VAR 0 1
16940: PPUSH
16941: CALL_OW 257
16945: PUSH
16946: LD_INT 1
16948: EQUAL
16949: PUSH
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 257
16959: PUSH
16960: LD_INT 2
16962: EQUAL
16963: OR
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 257
16974: PUSH
16975: LD_INT 3
16977: EQUAL
16978: OR
16979: PUSH
16980: LD_VAR 0 1
16984: PPUSH
16985: CALL_OW 257
16989: PUSH
16990: LD_INT 4
16992: EQUAL
16993: OR
16994: IFFALSE 17010
// unitLost = unitLost + 1 ;
16996: LD_ADDR_EXP 30
17000: PUSH
17001: LD_EXP 30
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 255
17019: PUSH
17020: LD_INT 3
17022: EQUAL
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 247
17033: PUSH
17034: LD_INT 3
17036: EQUAL
17037: AND
17038: IFFALSE 17730
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 266
17049: PUSH
17050: LD_INT 31
17052: EQUAL
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 266
17063: PUSH
17064: LD_INT 32
17066: EQUAL
17067: OR
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 266
17078: PUSH
17079: LD_INT 36
17081: EQUAL
17082: OR
17083: PUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 266
17093: PUSH
17094: LD_INT 0
17096: EQUAL
17097: OR
17098: PUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 266
17108: PUSH
17109: LD_INT 24
17111: EQUAL
17112: OR
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 266
17123: PUSH
17124: LD_INT 17
17126: EQUAL
17127: OR
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 266
17138: PUSH
17139: LD_INT 25
17141: EQUAL
17142: OR
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 266
17153: PUSH
17154: LD_INT 19
17156: EQUAL
17157: OR
17158: PUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 266
17168: PUSH
17169: LD_INT 20
17171: EQUAL
17172: OR
17173: PUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 266
17183: PUSH
17184: LD_INT 18
17186: EQUAL
17187: OR
17188: PUSH
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL_OW 266
17198: PUSH
17199: LD_INT 21
17201: EQUAL
17202: OR
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 266
17213: PUSH
17214: LD_INT 23
17216: EQUAL
17217: OR
17218: PUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 266
17228: PUSH
17229: LD_INT 16
17231: EQUAL
17232: OR
17233: PUSH
17234: LD_VAR 0 1
17238: PPUSH
17239: CALL_OW 266
17243: PUSH
17244: LD_INT 6
17246: EQUAL
17247: OR
17248: PUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 266
17258: PUSH
17259: LD_INT 29
17261: EQUAL
17262: OR
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 266
17273: PUSH
17274: LD_INT 26
17276: EQUAL
17277: OR
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 266
17288: PUSH
17289: LD_INT 30
17291: EQUAL
17292: OR
17293: PUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 266
17303: PUSH
17304: LD_INT 28
17306: EQUAL
17307: OR
17308: PUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 266
17318: PUSH
17319: LD_INT 27
17321: EQUAL
17322: OR
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 266
17333: PUSH
17334: LD_INT 33
17336: EQUAL
17337: OR
17338: PUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 266
17348: PUSH
17349: LD_INT 2
17351: EQUAL
17352: OR
17353: PUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 266
17363: PUSH
17364: LD_INT 4
17366: EQUAL
17367: OR
17368: IFFALSE 17454
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17370: LD_ADDR_EXP 31
17374: PUSH
17375: LD_EXP 31
17379: PUSH
17380: LD_VAR 0 1
17384: PPUSH
17385: CALL_OW 266
17389: ADD
17390: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17391: LD_ADDR_EXP 31
17395: PUSH
17396: LD_EXP 31
17400: PUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 250
17410: ADD
17411: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17412: LD_ADDR_EXP 31
17416: PUSH
17417: LD_EXP 31
17421: PUSH
17422: LD_VAR 0 1
17426: PPUSH
17427: CALL_OW 251
17431: ADD
17432: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17433: LD_ADDR_EXP 31
17437: PUSH
17438: LD_EXP 31
17442: PUSH
17443: LD_VAR 0 1
17447: PPUSH
17448: CALL_OW 254
17452: ADD
17453: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 266
17463: PUSH
17464: LD_INT 1
17466: EQUAL
17467: IFFALSE 17546
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17469: LD_ADDR_EXP 31
17473: PUSH
17474: LD_EXP 31
17478: PUSH
17479: LD_INT 0
17481: ADD
17482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17483: LD_ADDR_EXP 31
17487: PUSH
17488: LD_EXP 31
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 250
17502: ADD
17503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17504: LD_ADDR_EXP 31
17508: PUSH
17509: LD_EXP 31
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 251
17523: ADD
17524: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17525: LD_ADDR_EXP 31
17529: PUSH
17530: LD_EXP 31
17534: PUSH
17535: LD_VAR 0 1
17539: PPUSH
17540: CALL_OW 254
17544: ADD
17545: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 266
17555: PUSH
17556: LD_INT 3
17558: EQUAL
17559: IFFALSE 17638
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17561: LD_ADDR_EXP 31
17565: PUSH
17566: LD_EXP 31
17570: PUSH
17571: LD_INT 2
17573: ADD
17574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17575: LD_ADDR_EXP 31
17579: PUSH
17580: LD_EXP 31
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 250
17594: ADD
17595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17596: LD_ADDR_EXP 31
17600: PUSH
17601: LD_EXP 31
17605: PUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 251
17615: ADD
17616: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17617: LD_ADDR_EXP 31
17621: PUSH
17622: LD_EXP 31
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 254
17636: ADD
17637: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 266
17647: PUSH
17648: LD_INT 5
17650: EQUAL
17651: IFFALSE 17730
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17653: LD_ADDR_EXP 31
17657: PUSH
17658: LD_EXP 31
17662: PUSH
17663: LD_INT 4
17665: ADD
17666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17667: LD_ADDR_EXP 31
17671: PUSH
17672: LD_EXP 31
17676: PUSH
17677: LD_VAR 0 1
17681: PPUSH
17682: CALL_OW 250
17686: ADD
17687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17688: LD_ADDR_EXP 31
17692: PUSH
17693: LD_EXP 31
17697: PUSH
17698: LD_VAR 0 1
17702: PPUSH
17703: CALL_OW 251
17707: ADD
17708: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17709: LD_ADDR_EXP 31
17713: PUSH
17714: LD_EXP 31
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL_OW 254
17728: ADD
17729: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 257
17739: PUSH
17740: LD_INT 3
17742: EQUAL
17743: PUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 255
17753: PUSH
17754: LD_INT 3
17756: EQUAL
17757: AND
17758: PUSH
17759: LD_INT 21
17761: PPUSH
17762: CALL_OW 302
17766: AND
17767: PUSH
17768: LD_INT 21
17770: PPUSH
17771: CALL_OW 255
17775: PUSH
17776: LD_INT 3
17778: EQUAL
17779: AND
17780: IFFALSE 17848
// begin uc_side = 3 ;
17782: LD_ADDR_OWVAR 20
17786: PUSH
17787: LD_INT 3
17789: ST_TO_ADDR
// uc_nation = 3 ;
17790: LD_ADDR_OWVAR 21
17794: PUSH
17795: LD_INT 3
17797: ST_TO_ADDR
// hc_gallery :=  ;
17798: LD_ADDR_OWVAR 33
17802: PUSH
17803: LD_STRING 
17805: ST_TO_ADDR
// hc_name :=  ;
17806: LD_ADDR_OWVAR 26
17810: PUSH
17811: LD_STRING 
17813: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17814: LD_INT 0
17816: PPUSH
17817: LD_EXP 34
17821: PPUSH
17822: LD_EXP 35
17826: PPUSH
17827: CALL_OW 12
17831: PPUSH
17832: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17836: CALL_OW 44
17840: PPUSH
17841: LD_INT 21
17843: PPUSH
17844: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17848: LD_VAR 0 1
17852: PPUSH
17853: CALL_OW 255
17857: PUSH
17858: LD_INT 3
17860: EQUAL
17861: PUSH
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 264
17871: PUSH
17872: LD_INT 52
17874: EQUAL
17875: AND
17876: PUSH
17877: LD_INT 21
17879: PPUSH
17880: CALL_OW 302
17884: AND
17885: PUSH
17886: LD_INT 21
17888: PPUSH
17889: CALL_OW 255
17893: PUSH
17894: LD_INT 3
17896: EQUAL
17897: AND
17898: IFFALSE 17919
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17900: LD_INT 21
17902: PPUSH
17903: LD_INT 22
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 52
17914: PPUSH
17915: CALL_OW 125
// end ;
17919: PPOPN 1
17921: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17922: LD_INT 0
17924: PPUSH
17925: PPUSH
17926: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 264
17936: PUSH
17937: LD_INT 51
17939: EQUAL
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 255
17950: PUSH
17951: LD_INT 3
17953: EQUAL
17954: AND
17955: IFFALSE 18017
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17957: LD_ADDR_VAR 0 5
17961: PUSH
17962: LD_INT 2
17964: PPUSH
17965: CALL_OW 274
17969: PPUSH
17970: LD_INT 1
17972: PPUSH
17973: CALL_OW 275
17977: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17978: LD_INT 2
17980: PPUSH
17981: CALL_OW 274
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 100
17996: MINUS
17997: PPUSH
17998: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: LD_INT 1
18009: PPUSH
18010: LD_INT 100
18012: PPUSH
18013: CALL_OW 291
// end ; if building = rufabsupp then
18017: LD_VAR 0 2
18021: PUSH
18022: LD_INT 17
18024: EQUAL
18025: IFFALSE 18039
// SetSide ( vehicle , 6 ) ;
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_INT 6
18034: PPUSH
18035: CALL_OW 235
// end ;
18039: PPOPN 5
18041: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 255
18051: PUSH
18052: LD_INT 3
18054: EQUAL
18055: IFFALSE 18086
// begin tamedApemans = tamedApemans + 1 ;
18057: LD_ADDR_EXP 32
18061: PUSH
18062: LD_EXP 32
18066: PUSH
18067: LD_INT 1
18069: PLUS
18070: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 106
18078: PPUSH
18079: LD_INT 85
18081: PPUSH
18082: CALL_OW 111
// end ; end ;
18086: PPOPN 2
18088: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 255
18102: PUSH
18103: LD_INT 3
18105: EQUAL
18106: PUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 247
18116: PUSH
18117: LD_INT 2
18119: EQUAL
18120: AND
18121: IFFALSE 18230
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18123: LD_VAR 0 1
18127: PPUSH
18128: CALL_OW 264
18132: PUSH
18133: LD_INT 42
18135: EQUAL
18136: PUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: CALL_OW 264
18146: PUSH
18147: LD_INT 43
18149: EQUAL
18150: OR
18151: PUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 264
18161: PUSH
18162: LD_INT 44
18164: EQUAL
18165: OR
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 264
18176: PUSH
18177: LD_INT 46
18179: EQUAL
18180: OR
18181: IFFALSE 18230
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18183: LD_INT 21
18185: PPUSH
18186: LD_VAR 0 1
18190: PPUSH
18191: CALL_OW 265
18195: PPUSH
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 262
18205: PPUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 263
18215: PPUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 264
18225: PPUSH
18226: CALL_OW 185
// end ;
18230: PPOPN 3
18232: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 255
18242: PUSH
18243: LD_INT 3
18245: EQUAL
18246: PUSH
18247: LD_VAR 0 2
18251: PPUSH
18252: CALL_OW 255
18256: PUSH
18257: LD_INT 3
18259: EQUAL
18260: AND
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 302
18271: AND
18272: IFFALSE 18314
// begin ComRepairVehicle ( human , vehicle ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18288: LD_VAR 0 2
18292: PPUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18302: LD_VAR 0 1
18306: PPUSH
18307: LD_INT 100
18309: PPUSH
18310: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 255
18323: PUSH
18324: LD_INT 3
18326: EQUAL
18327: PUSH
18328: LD_VAR 0 2
18332: PPUSH
18333: CALL_OW 255
18337: PUSH
18338: LD_INT 3
18340: EQUAL
18341: AND
18342: PUSH
18343: LD_INT 21
18345: PPUSH
18346: CALL_OW 302
18350: AND
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 302
18361: NOT
18362: AND
18363: IFFALSE 18377
// ComEnterUnit ( human , rufab ) ;
18365: LD_VAR 0 2
18369: PPUSH
18370: LD_INT 21
18372: PPUSH
18373: CALL_OW 120
// end ;
18377: PPOPN 2
18379: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18380: LD_VAR 0 1
18384: PUSH
18385: LD_INT 21
18387: EQUAL
18388: PUSH
18389: LD_VAR 0 2
18393: PPUSH
18394: CALL_OW 255
18398: PUSH
18399: LD_INT 3
18401: EQUAL
18402: AND
18403: IFFALSE 18417
// SetLives ( human , 1000 ) ;
18405: LD_VAR 0 2
18409: PPUSH
18410: LD_INT 1000
18412: PPUSH
18413: CALL_OW 234
// end ; end_of_file
18417: PPOPN 2
18419: END
// every 0 0$30 trigger cratesStatus = 1 do
18420: LD_EXP 38
18424: PUSH
18425: LD_INT 1
18427: EQUAL
18428: IFFALSE 18511
18430: GO 18432
18432: DISABLE
// begin enable ;
18433: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18434: LD_INT 350
18436: PUSH
18437: LD_INT 1050
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: PPUSH
18447: LD_INT 2
18449: PPUSH
18450: CALL_OW 12
18454: ARRAY
18455: PPUSH
18456: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18460: LD_INT 4
18462: PUSH
18463: LD_INT 5
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: PPUSH
18473: LD_INT 2
18475: PPUSH
18476: CALL_OW 12
18480: ARRAY
18481: PPUSH
18482: LD_INT 6
18484: PUSH
18485: LD_INT 7
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 1
18494: PPUSH
18495: LD_INT 2
18497: PPUSH
18498: CALL_OW 12
18502: ARRAY
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 55
// end ;
18511: END
// every 1 1$0 trigger cratesStatus = 2 do
18512: LD_EXP 38
18516: PUSH
18517: LD_INT 2
18519: EQUAL
18520: IFFALSE 18603
18522: GO 18524
18524: DISABLE
// begin enable ;
18525: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18526: LD_INT 3150
18528: PUSH
18529: LD_INT 4550
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: PPUSH
18539: LD_INT 2
18541: PPUSH
18542: CALL_OW 12
18546: ARRAY
18547: PPUSH
18548: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18552: LD_INT 2
18554: PUSH
18555: LD_INT 5
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: PPUSH
18565: LD_INT 2
18567: PPUSH
18568: CALL_OW 12
18572: ARRAY
18573: PPUSH
18574: LD_INT 6
18576: PUSH
18577: LD_INT 7
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_INT 2
18589: PPUSH
18590: CALL_OW 12
18594: ARRAY
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 55
// end ;
18603: END
// every 0 0$30 + 0 0$10 do
18604: GO 18606
18606: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18607: LD_INT 4
18609: PUSH
18610: LD_INT 5
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 2
18622: PPUSH
18623: CALL_OW 12
18627: ARRAY
18628: PPUSH
18629: LD_INT 7
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 55
// Wait ( 0 0$15 ) ;
18639: LD_INT 525
18641: PPUSH
18642: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18646: LD_INT 4
18648: PUSH
18649: LD_INT 5
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PPUSH
18659: LD_INT 2
18661: PPUSH
18662: CALL_OW 12
18666: ARRAY
18667: PPUSH
18668: LD_INT 7
18670: PPUSH
18671: LD_INT 1
18673: PPUSH
18674: CALL_OW 55
// Wait ( 0 0$20 ) ;
18678: LD_INT 700
18680: PPUSH
18681: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18685: LD_INT 4
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: PPUSH
18698: LD_INT 2
18700: PPUSH
18701: CALL_OW 12
18705: ARRAY
18706: PPUSH
18707: LD_INT 7
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 55
// end ; end_of_file
18717: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18718: LD_EXP 24
18722: PUSH
18723: LD_INT 1
18725: EQUAL
18726: IFFALSE 19027
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
18734: PPUSH
18735: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18736: LD_ADDR_VAR 0 2
18740: PUSH
18741: LD_INT 22
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 21
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 30
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 30
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: ST_TO_ADDR
// for i in tmp do
18799: LD_ADDR_VAR 0 1
18803: PUSH
18804: LD_VAR 0 2
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18843
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_VAR 0 3
18821: PUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 274
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: CALL_OW 275
18839: PLUS
18840: ST_TO_ADDR
18841: GO 18809
18843: POP
18844: POP
// strings = [ ] ;
18845: LD_ADDR_EXP 27
18849: PUSH
18850: EMPTY
18851: ST_TO_ADDR
// if tmp = 0 then
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 0
18859: EQUAL
18860: IFFALSE 18885
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18862: LD_ADDR_EXP 27
18866: PUSH
18867: LD_EXP 27
18871: PUSH
18872: LD_STRING #Am06-1
18874: PUSH
18875: LD_EXP 25
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: ADD
18884: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18885: LD_VAR 0 2
18889: PUSH
18890: LD_INT 0
18892: GREATER
18893: PUSH
18894: LD_EXP 25
18898: PUSH
18899: LD_VAR 0 3
18903: GREATER
18904: AND
18905: IFFALSE 18936
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18907: LD_ADDR_EXP 27
18911: PUSH
18912: LD_EXP 27
18916: PUSH
18917: LD_STRING #Am06-1
18919: PUSH
18920: LD_EXP 25
18924: PUSH
18925: LD_VAR 0 3
18929: MINUS
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: ADD
18935: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18936: LD_VAR 0 2
18940: PUSH
18941: LD_INT 0
18943: GREATER
18944: PUSH
18945: LD_EXP 25
18949: PUSH
18950: LD_VAR 0 3
18954: LESSEQUAL
18955: AND
18956: IFFALSE 18979
// strings = strings ^ [ #Am06-1 , 0 ] ;
18958: LD_ADDR_EXP 27
18962: PUSH
18963: LD_EXP 27
18967: PUSH
18968: LD_STRING #Am06-1
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: ADD
18978: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18979: LD_ADDR_EXP 26
18983: PUSH
18984: LD_EXP 26
18988: PUSH
18989: LD_INT 35
18991: MINUS
18992: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18993: LD_ADDR_EXP 27
18997: PUSH
18998: LD_EXP 27
19002: PUSH
19003: LD_STRING #Am06-2
19005: PUSH
19006: LD_EXP 26
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: ADD
19015: ST_TO_ADDR
// display_strings = strings ;
19016: LD_ADDR_OWVAR 47
19020: PUSH
19021: LD_EXP 27
19025: ST_TO_ADDR
// enable ;
19026: ENABLE
// end ; end_of_file
19027: PPOPN 3
19029: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
19034: PPUSH
19035: PPUSH
19036: PPUSH
19037: PPUSH
19038: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19039: LD_ADDR_VAR 0 3
19043: PUSH
19044: LD_INT 22
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 30
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19091: LD_INT 35
19093: PPUSH
19094: CALL_OW 67
// until depot ;
19098: LD_VAR 0 3
19102: IFFALSE 19039
// repeat wait ( 0 0$1 ) ;
19104: LD_INT 35
19106: PPUSH
19107: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 91
19128: PUSH
19129: LD_VAR 0 3
19133: PUSH
19134: LD_INT 1
19136: ARRAY
19137: PUSH
19138: LD_INT 15
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 21
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 25
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 25
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 25
19191: PUSH
19192: LD_INT 4
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 3
19208: PUSH
19209: LD_INT 54
19211: PUSH
19212: EMPTY
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: LD_INT 55
19224: PUSH
19225: EMPTY
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PUSH
19245: LD_EXP 2
19249: PUSH
19250: LD_EXP 3
19254: PUSH
19255: LD_EXP 4
19259: PUSH
19260: LD_EXP 5
19264: PUSH
19265: LD_EXP 7
19269: PUSH
19270: LD_EXP 8
19274: PUSH
19275: LD_EXP 9
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: LD_EXP 46
19293: ADD
19294: DIFF
19295: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19296: LD_VAR 0 4
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: CALL_OW 463
19308: NOT
19309: AND
19310: IFFALSE 19104
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19312: LD_ADDR_VAR 0 4
19316: PUSH
19317: LD_VAR 0 4
19321: PUSH
19322: LD_INT 1
19324: PPUSH
19325: LD_VAR 0 4
19329: PPUSH
19330: CALL_OW 12
19334: ARRAY
19335: ST_TO_ADDR
// blockSpawn = 1 ;
19336: LD_ADDR_EXP 29
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// uc_side = 2 ;
19344: LD_ADDR_OWVAR 20
19348: PUSH
19349: LD_INT 2
19351: ST_TO_ADDR
// uc_nation = 2 ;
19352: LD_ADDR_OWVAR 21
19356: PUSH
19357: LD_INT 2
19359: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19360: LD_ADDR_EXP 19
19364: PUSH
19365: LD_STRING Kurt
19367: PPUSH
19368: LD_INT 0
19370: PPUSH
19371: CALL 5869 0 2
19375: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19376: LD_EXP 19
19380: PPUSH
19381: LD_VAR 0 4
19385: PPUSH
19386: CALL_OW 250
19390: PPUSH
19391: LD_VAR 0 4
19395: PPUSH
19396: CALL_OW 251
19400: PPUSH
19401: LD_INT 5
19403: PPUSH
19404: LD_INT 1
19406: PPUSH
19407: CALL_OW 50
// InGameOn ;
19411: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19415: LD_EXP 19
19419: PPUSH
19420: CALL_OW 87
// wait ( 0 0$2 ) ;
19424: LD_INT 70
19426: PPUSH
19427: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19431: LD_EXP 19
19435: PPUSH
19436: LD_VAR 0 4
19440: PPUSH
19441: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19445: LD_VAR 0 4
19449: PPUSH
19450: LD_EXP 19
19454: PPUSH
19455: CALL_OW 112
// wait ( 0 0$1 ) ;
19459: LD_INT 35
19461: PPUSH
19462: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19466: LD_VAR 0 4
19470: PPUSH
19471: LD_EXP 19
19475: PPUSH
19476: CALL_OW 119
// DialogueOn ;
19480: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19484: LD_EXP 19
19488: PPUSH
19489: LD_STRING D2-Kurt-1
19491: PPUSH
19492: CALL_OW 88
// if tmp = JMM then
19496: LD_VAR 0 4
19500: PUSH
19501: LD_EXP 1
19505: EQUAL
19506: IFFALSE 19598
// begin Say ( JMM , D2-JMM-1 ) ;
19508: LD_EXP 1
19512: PPUSH
19513: LD_STRING D2-JMM-1
19515: PPUSH
19516: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19520: LD_EXP 19
19524: PPUSH
19525: LD_STRING D2-Kurt-2
19527: PPUSH
19528: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19532: LD_EXP 1
19536: PPUSH
19537: LD_STRING D2-JMM-2
19539: PPUSH
19540: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19544: LD_EXP 19
19548: PPUSH
19549: LD_STRING D2-Kurt-3
19551: PPUSH
19552: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19556: LD_EXP 1
19560: PPUSH
19561: LD_STRING D2-JMM-3
19563: PPUSH
19564: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19568: LD_EXP 19
19572: PPUSH
19573: LD_STRING D2-Kurt-4
19575: PPUSH
19576: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19580: LD_EXP 1
19584: PPUSH
19585: LD_STRING D2-JMM-4
19587: PPUSH
19588: CALL_OW 88
// DialogueOff ;
19592: CALL_OW 7
// end else
19596: GO 19908
// begin if GetSex ( tmp ) = 1 then
19598: LD_VAR 0 4
19602: PPUSH
19603: CALL_OW 258
19607: PUSH
19608: LD_INT 1
19610: EQUAL
19611: IFFALSE 19625
// Say ( tmp , D2-Sol1-1 ) ;
19613: LD_VAR 0 4
19617: PPUSH
19618: LD_STRING D2-Sol1-1
19620: PPUSH
19621: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19625: LD_VAR 0 4
19629: PPUSH
19630: CALL_OW 258
19634: PUSH
19635: LD_INT 2
19637: EQUAL
19638: IFFALSE 19652
// Say ( tmp , D2-FSol1-1 ) ;
19640: LD_VAR 0 4
19644: PPUSH
19645: LD_STRING D2-FSol1-1
19647: PPUSH
19648: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19652: LD_EXP 19
19656: PPUSH
19657: LD_STRING D2-Kurt-2
19659: PPUSH
19660: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19664: LD_VAR 0 4
19668: PPUSH
19669: CALL_OW 258
19673: PUSH
19674: LD_INT 1
19676: EQUAL
19677: IFFALSE 19691
// Say ( tmp , D2-Sol1-2 ) ;
19679: LD_VAR 0 4
19683: PPUSH
19684: LD_STRING D2-Sol1-2
19686: PPUSH
19687: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19691: LD_VAR 0 4
19695: PPUSH
19696: CALL_OW 258
19700: PUSH
19701: LD_INT 2
19703: EQUAL
19704: IFFALSE 19718
// Say ( tmp , D2-FSol1-2 ) ;
19706: LD_VAR 0 4
19710: PPUSH
19711: LD_STRING D2-FSol1-2
19713: PPUSH
19714: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19718: LD_EXP 19
19722: PPUSH
19723: LD_STRING D2-Kurt-3
19725: PPUSH
19726: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19730: LD_VAR 0 4
19734: PPUSH
19735: CALL_OW 258
19739: PUSH
19740: LD_INT 1
19742: EQUAL
19743: IFFALSE 19757
// Say ( tmp , D2-Sol1-3 ) ;
19745: LD_VAR 0 4
19749: PPUSH
19750: LD_STRING D2-Sol1-3
19752: PPUSH
19753: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19757: LD_VAR 0 4
19761: PPUSH
19762: CALL_OW 258
19766: PUSH
19767: LD_INT 2
19769: EQUAL
19770: IFFALSE 19784
// Say ( tmp , D2-FSol1-3 ) ;
19772: LD_VAR 0 4
19776: PPUSH
19777: LD_STRING D2-FSol1-3
19779: PPUSH
19780: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19784: LD_EXP 19
19788: PPUSH
19789: LD_STRING D2-Kurt-4
19791: PPUSH
19792: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19796: LD_VAR 0 4
19800: PPUSH
19801: CALL_OW 258
19805: PUSH
19806: LD_INT 1
19808: EQUAL
19809: IFFALSE 19823
// Say ( tmp , D2-Sol1-4 ) ;
19811: LD_VAR 0 4
19815: PPUSH
19816: LD_STRING D2-Sol1-4
19818: PPUSH
19819: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19823: LD_VAR 0 4
19827: PPUSH
19828: CALL_OW 258
19832: PUSH
19833: LD_INT 2
19835: EQUAL
19836: IFFALSE 19850
// Say ( tmp , D2-FSol1-4 ) ;
19838: LD_VAR 0 4
19842: PPUSH
19843: LD_STRING D2-FSol1-4
19845: PPUSH
19846: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19850: LD_VAR 0 4
19854: PPUSH
19855: CALL_OW 258
19859: PUSH
19860: LD_INT 1
19862: EQUAL
19863: IFFALSE 19877
// Say ( tmp , D2-Sol1-5 ) ;
19865: LD_VAR 0 4
19869: PPUSH
19870: LD_STRING D2-Sol1-5
19872: PPUSH
19873: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 258
19886: PUSH
19887: LD_INT 2
19889: EQUAL
19890: IFFALSE 19904
// Say ( tmp , D2-FSol1-5 ) ;
19892: LD_VAR 0 4
19896: PPUSH
19897: LD_STRING D2-FSol1-5
19899: PPUSH
19900: CALL_OW 88
// DialogueOff ;
19904: CALL_OW 7
// end ; dec = ShowQuery1 ;
19908: LD_ADDR_VAR 0 6
19912: PUSH
19913: CALL 6393 0 0
19917: ST_TO_ADDR
// if dec = 1 then
19918: LD_VAR 0 6
19922: PUSH
19923: LD_INT 1
19925: EQUAL
19926: IFFALSE 19968
// begin DialogueOn ;
19928: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19932: LD_EXP 19
19936: PPUSH
19937: LD_STRING D2a-Kurt-1
19939: PPUSH
19940: CALL_OW 88
// DialogueOff ;
19944: CALL_OW 7
// InGameOff ;
19948: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19952: LD_INT 1
19954: PPUSH
19955: LD_INT 2
19957: PPUSH
19958: LD_INT 2
19960: PPUSH
19961: LD_INT 1
19963: PPUSH
19964: CALL_OW 80
// end ; if dec = 2 then
19968: LD_VAR 0 6
19972: PUSH
19973: LD_INT 2
19975: EQUAL
19976: IFFALSE 20476
// begin DialogueOn ;
19978: CALL_OW 6
// if tmp = JMM then
19982: LD_VAR 0 4
19986: PUSH
19987: LD_EXP 1
19991: EQUAL
19992: IFFALSE 20048
// begin Say ( JMM , D2b-JMM-1 ) ;
19994: LD_EXP 1
19998: PPUSH
19999: LD_STRING D2b-JMM-1
20001: PPUSH
20002: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20006: LD_EXP 19
20010: PPUSH
20011: LD_STRING D2b-Kurt-1
20013: PPUSH
20014: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20018: LD_EXP 1
20022: PPUSH
20023: LD_STRING D2b-JMM-2
20025: PPUSH
20026: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20030: LD_EXP 19
20034: PPUSH
20035: LD_STRING D2b-Kurt-2
20037: PPUSH
20038: CALL_OW 88
// DialogueOff ;
20042: CALL_OW 7
// end else
20046: GO 20238
// begin if GetSex ( tmp ) = 1 then
20048: LD_VAR 0 4
20052: PPUSH
20053: CALL_OW 258
20057: PUSH
20058: LD_INT 1
20060: EQUAL
20061: IFFALSE 20075
// Say ( tmp , D2b-Sol1-1 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_STRING D2b-Sol1-1
20070: PPUSH
20071: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 258
20084: PUSH
20085: LD_INT 2
20087: EQUAL
20088: IFFALSE 20102
// Say ( tmp , D2b-FSol1-1 ) ;
20090: LD_VAR 0 4
20094: PPUSH
20095: LD_STRING D2b-FSol1-1
20097: PPUSH
20098: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20102: LD_EXP 19
20106: PPUSH
20107: LD_STRING D2b-Kurt-1
20109: PPUSH
20110: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20114: LD_VAR 0 4
20118: PPUSH
20119: CALL_OW 258
20123: PUSH
20124: LD_INT 1
20126: EQUAL
20127: IFFALSE 20141
// Say ( tmp , D2b-Sol1-2 ) ;
20129: LD_VAR 0 4
20133: PPUSH
20134: LD_STRING D2b-Sol1-2
20136: PPUSH
20137: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20141: LD_VAR 0 4
20145: PPUSH
20146: CALL_OW 258
20150: PUSH
20151: LD_INT 2
20153: EQUAL
20154: IFFALSE 20168
// Say ( tmp , D2b-FSol1-2 ) ;
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_STRING D2b-FSol1-2
20163: PPUSH
20164: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20168: LD_EXP 19
20172: PPUSH
20173: LD_STRING D2b-Kurt-2
20175: PPUSH
20176: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20180: LD_VAR 0 4
20184: PPUSH
20185: CALL_OW 258
20189: PUSH
20190: LD_INT 1
20192: EQUAL
20193: IFFALSE 20207
// Say ( tmp , D2c-Sol1-2 ) ;
20195: LD_VAR 0 4
20199: PPUSH
20200: LD_STRING D2c-Sol1-2
20202: PPUSH
20203: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20207: LD_VAR 0 4
20211: PPUSH
20212: CALL_OW 258
20216: PUSH
20217: LD_INT 2
20219: EQUAL
20220: IFFALSE 20234
// Say ( tmp , D2c-FSol1-2 ) ;
20222: LD_VAR 0 4
20226: PPUSH
20227: LD_STRING D2c-FSol1-2
20229: PPUSH
20230: CALL_OW 88
// DialogueOff ;
20234: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20238: LD_ADDR_VAR 0 7
20242: PUSH
20243: CALL 6467 0 0
20247: ST_TO_ADDR
// if dec2 = 1 then
20248: LD_VAR 0 7
20252: PUSH
20253: LD_INT 1
20255: EQUAL
20256: IFFALSE 20298
// begin DialogueOn ;
20258: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20262: LD_EXP 19
20266: PPUSH
20267: LD_STRING D2a-Kurt-1
20269: PPUSH
20270: CALL_OW 88
// DialogueOff ;
20274: CALL_OW 7
// InGameOff ;
20278: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20282: LD_INT 1
20284: PPUSH
20285: LD_INT 2
20287: PPUSH
20288: LD_INT 2
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: CALL_OW 80
// end ; if dec2 = 2 then
20298: LD_VAR 0 7
20302: PUSH
20303: LD_INT 2
20305: EQUAL
20306: IFFALSE 20476
// begin if tmp = JMM then
20308: LD_VAR 0 4
20312: PUSH
20313: LD_EXP 1
20317: EQUAL
20318: IFFALSE 20378
// begin DialogueOn ;
20320: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20324: LD_EXP 1
20328: PPUSH
20329: LD_STRING D2c-JMM-1
20331: PPUSH
20332: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20336: LD_EXP 19
20340: PPUSH
20341: LD_STRING D2c-Kurt-1
20343: PPUSH
20344: CALL_OW 88
// DialogueOff ;
20348: CALL_OW 7
// InGameOff ;
20352: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20356: LD_EXP 19
20360: PPUSH
20361: LD_INT 8
20363: PPUSH
20364: CALL_OW 113
// readyToEscape = 1 ;
20368: LD_ADDR_EXP 21
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// end else
20376: GO 20476
// begin DialogueOn ;
20378: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20382: LD_VAR 0 4
20386: PPUSH
20387: CALL_OW 258
20391: PUSH
20392: LD_INT 1
20394: EQUAL
20395: IFFALSE 20409
// Say ( tmp , D2c-Sol1-1 ) ;
20397: LD_VAR 0 4
20401: PPUSH
20402: LD_STRING D2c-Sol1-1
20404: PPUSH
20405: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20409: LD_VAR 0 4
20413: PPUSH
20414: CALL_OW 258
20418: PUSH
20419: LD_INT 2
20421: EQUAL
20422: IFFALSE 20436
// Say ( tmp , D2c-FSol1-1 ) ;
20424: LD_VAR 0 4
20428: PPUSH
20429: LD_STRING D2c-FSol1-1
20431: PPUSH
20432: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20436: LD_EXP 19
20440: PPUSH
20441: LD_STRING D2c-Kurt-1
20443: PPUSH
20444: CALL_OW 88
// DialogueOff ;
20448: CALL_OW 7
// InGameOff ;
20452: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20456: LD_EXP 19
20460: PPUSH
20461: LD_INT 8
20463: PPUSH
20464: CALL_OW 113
// readyToEscape = 1 ;
20468: LD_ADDR_EXP 21
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20476: LD_VAR 0 6
20480: PUSH
20481: LD_INT 3
20483: EQUAL
20484: IFFALSE 20658
// begin DialogueOn ;
20486: CALL_OW 6
// if tmp = JMM then
20490: LD_VAR 0 4
20494: PUSH
20495: LD_EXP 1
20499: EQUAL
20500: IFFALSE 20560
// begin DialogueOn ;
20502: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20506: LD_EXP 1
20510: PPUSH
20511: LD_STRING D2c-JMM-1
20513: PPUSH
20514: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20518: LD_EXP 19
20522: PPUSH
20523: LD_STRING D2c-Kurt-1
20525: PPUSH
20526: CALL_OW 88
// DialogueOff ;
20530: CALL_OW 7
// InGameOff ;
20534: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20538: LD_EXP 19
20542: PPUSH
20543: LD_INT 8
20545: PPUSH
20546: CALL_OW 113
// readyToEscape = 1 ;
20550: LD_ADDR_EXP 21
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// end else
20558: GO 20658
// begin DialogueOn ;
20560: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20564: LD_VAR 0 4
20568: PPUSH
20569: CALL_OW 258
20573: PUSH
20574: LD_INT 1
20576: EQUAL
20577: IFFALSE 20591
// Say ( tmp , D2c-Sol1-1 ) ;
20579: LD_VAR 0 4
20583: PPUSH
20584: LD_STRING D2c-Sol1-1
20586: PPUSH
20587: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20591: LD_VAR 0 4
20595: PPUSH
20596: CALL_OW 258
20600: PUSH
20601: LD_INT 2
20603: EQUAL
20604: IFFALSE 20618
// Say ( tmp , D2c-FSol1-1 ) ;
20606: LD_VAR 0 4
20610: PPUSH
20611: LD_STRING D2c-FSol1-1
20613: PPUSH
20614: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20618: LD_EXP 19
20622: PPUSH
20623: LD_STRING D2c-Kurt-1
20625: PPUSH
20626: CALL_OW 88
// DialogueOff ;
20630: CALL_OW 7
// InGameOff ;
20634: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20638: LD_EXP 19
20642: PPUSH
20643: LD_INT 8
20645: PPUSH
20646: CALL_OW 113
// readyToEscape = 1 ;
20650: LD_ADDR_EXP 21
20654: PUSH
20655: LD_INT 1
20657: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20658: LD_ADDR_EXP 29
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20666: LD_INT 35
20668: PPUSH
20669: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20673: LD_EXP 19
20677: PPUSH
20678: LD_INT 8
20680: PPUSH
20681: CALL_OW 308
20685: PUSH
20686: LD_EXP 21
20690: AND
20691: PUSH
20692: LD_EXP 19
20696: PPUSH
20697: CALL_OW 301
20701: OR
20702: IFFALSE 20666
// if IsDead ( Kurt ) then
20704: LD_EXP 19
20708: PPUSH
20709: CALL_OW 301
20713: IFFALSE 20717
// exit ;
20715: GO 20786
// RemoveUnit ( Kurt ) ;
20717: LD_EXP 19
20721: PPUSH
20722: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20726: LD_EXP 19
20730: PPUSH
20731: LD_STRING Kurt
20733: PPUSH
20734: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20738: LD_INT 1
20740: PPUSH
20741: LD_INT 2
20743: PPUSH
20744: CALL_OW 81
20748: PUSH
20749: LD_INT 0
20751: EQUAL
20752: IFFALSE 20762
// KurtStatus = 1 ;
20754: LD_ADDR_EXP 20
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20762: LD_INT 1
20764: PPUSH
20765: LD_INT 2
20767: PPUSH
20768: CALL_OW 81
20772: PUSH
20773: LD_INT 2
20775: EQUAL
20776: IFFALSE 20786
// KurtStatus = 2 ;
20778: LD_ADDR_EXP 20
20782: PUSH
20783: LD_INT 2
20785: ST_TO_ADDR
// end ; end_of_file
20786: LD_VAR 0 1
20790: RET
// every 0 0$1 do
20791: GO 20793
20793: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20794: LD_INT 3
20796: PPUSH
20797: LD_INT 32
20799: PPUSH
20800: LD_INT 3
20802: PPUSH
20803: CALL 6522 0 3
20807: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20808: GO 20810
20810: DISABLE
20811: LD_INT 0
20813: PPUSH
// begin enemyWayX = [ ] ;
20814: LD_ADDR_EXP 47
20818: PUSH
20819: EMPTY
20820: ST_TO_ADDR
// enemyWayY = [ ] ;
20821: LD_ADDR_EXP 48
20825: PUSH
20826: EMPTY
20827: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20828: LD_ADDR_VAR 0 1
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 2
20838: PPUSH
20839: CALL_OW 12
20843: ST_TO_ADDR
// if rnd = 1 then
20844: LD_VAR 0 1
20848: PUSH
20849: LD_INT 1
20851: EQUAL
20852: IFFALSE 20892
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20854: LD_ADDR_EXP 47
20858: PUSH
20859: LD_INT 93
20861: PUSH
20862: LD_INT 84
20864: PUSH
20865: LD_INT 104
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20873: LD_ADDR_EXP 48
20877: PUSH
20878: LD_INT 51
20880: PUSH
20881: LD_INT 35
20883: PUSH
20884: LD_INT 28
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: ST_TO_ADDR
// end ; if rnd = 2 then
20892: LD_VAR 0 1
20896: PUSH
20897: LD_INT 2
20899: EQUAL
20900: IFFALSE 20956
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20902: LD_ADDR_EXP 47
20906: PUSH
20907: LD_INT 93
20909: PUSH
20910: LD_INT 52
20912: PUSH
20913: LD_INT 34
20915: PUSH
20916: LD_INT 28
20918: PUSH
20919: LD_INT 30
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20929: LD_ADDR_EXP 48
20933: PUSH
20934: LD_INT 51
20936: PUSH
20937: LD_INT 45
20939: PUSH
20940: LD_INT 35
20942: PUSH
20943: LD_INT 26
20945: PUSH
20946: LD_INT 20
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: ST_TO_ADDR
// end ; enable ;
20956: ENABLE
// end ;
20957: PPOPN 1
20959: END
// every 0 0$1 do
20960: GO 20962
20962: DISABLE
// begin enable ;
20963: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20964: LD_INT 3
20966: PPUSH
20967: LD_INT 2
20969: PPUSH
20970: LD_INT 10
20972: PPUSH
20973: LD_EXP 31
20977: PPUSH
20978: CALL 7957 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20982: LD_INT 3
20984: PPUSH
20985: LD_INT 12
20987: PPUSH
20988: LD_EXP 31
20992: PPUSH
20993: CALL 9842 0 3
// if disableHealAI = 0 then
20997: LD_EXP 33
21001: PUSH
21002: LD_INT 0
21004: EQUAL
21005: IFFALSE 21026
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21007: LD_INT 3
21009: PPUSH
21010: LD_INT 9
21012: PPUSH
21013: LD_INT 10
21015: PPUSH
21016: LD_INT 32
21018: PUSH
21019: EMPTY
21020: LIST
21021: PPUSH
21022: CALL 8348 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21026: LD_INT 3
21028: PPUSH
21029: LD_INT 51
21031: PPUSH
21032: LD_INT 6
21034: PPUSH
21035: CALL 9056 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21039: LD_INT 3
21041: PPUSH
21042: LD_INT 12
21044: PPUSH
21045: LD_INT 121
21047: PPUSH
21048: LD_INT 100
21050: PPUSH
21051: CALL 6917 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21055: LD_INT 3
21057: PPUSH
21058: LD_INT 22
21060: PPUSH
21061: LD_EXP 47
21065: PPUSH
21066: LD_EXP 48
21070: PPUSH
21071: CALL 7120 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21075: LD_INT 3
21077: PPUSH
21078: LD_INT 10
21080: PPUSH
21081: CALL 9199 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21085: LD_INT 3
21087: PPUSH
21088: LD_INT 1
21090: PPUSH
21091: CALL 9612 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21095: LD_INT 2
21097: PPUSH
21098: CALL_OW 303
21102: PUSH
21103: LD_INT 2
21105: PPUSH
21106: CALL_OW 255
21110: PUSH
21111: LD_INT 1
21113: EQUAL
21114: OR
21115: IFFALSE 21127
// DefendDepot ( 3 , rudepo ) ;
21117: LD_INT 3
21119: PPUSH
21120: LD_INT 2
21122: PPUSH
21123: CALL 8892 0 2
// end ;
21127: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21128: LD_INT 22
21130: PUSH
21131: LD_INT 3
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 21
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 55
21150: PUSH
21151: EMPTY
21152: LIST
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 34
21159: PUSH
21160: LD_INT 51
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: PUSH
21182: LD_INT 0
21184: EQUAL
21185: PUSH
21186: LD_INT 21
21188: PPUSH
21189: CALL_OW 255
21193: PUSH
21194: LD_INT 3
21196: EQUAL
21197: AND
21198: PUSH
21199: LD_INT 21
21201: PPUSH
21202: CALL_OW 302
21206: AND
21207: PUSH
21208: LD_INT 2
21210: PPUSH
21211: CALL_OW 255
21215: PUSH
21216: LD_INT 3
21218: EQUAL
21219: AND
21220: PUSH
21221: LD_INT 2
21223: PPUSH
21224: CALL_OW 302
21228: AND
21229: IFFALSE 21413
21231: GO 21233
21233: DISABLE
// begin enable ;
21234: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21235: LD_INT 2
21237: PPUSH
21238: CALL_OW 274
21242: PPUSH
21243: LD_INT 1
21245: PPUSH
21246: LD_INT 1000
21248: PPUSH
21249: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21253: LD_INT 3
21255: PPUSH
21256: LD_INT 21
21258: PPUSH
21259: LD_INT 5
21261: PUSH
21262: LD_INT 6
21264: PUSH
21265: LD_INT 6
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: PUSH
21273: LD_OWVAR 67
21277: ARRAY
21278: PPUSH
21279: LD_INT 43
21281: PUSH
21282: LD_INT 43
21284: PUSH
21285: LD_INT 44
21287: PUSH
21288: LD_INT 44
21290: PUSH
21291: LD_INT 46
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 43
21303: PUSH
21304: LD_INT 43
21306: PUSH
21307: LD_INT 43
21309: PUSH
21310: LD_INT 44
21312: PUSH
21313: LD_INT 44
21315: PUSH
21316: LD_INT 46
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 43
21329: PUSH
21330: LD_INT 43
21332: PUSH
21333: LD_INT 43
21335: PUSH
21336: LD_INT 44
21338: PUSH
21339: LD_INT 44
21341: PUSH
21342: LD_INT 46
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: PUSH
21358: LD_OWVAR 67
21362: ARRAY
21363: PPUSH
21364: LD_INT 1
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: LD_INT 22
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_INT 24
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: PPUSH
21386: LD_INT 2
21388: PPUSH
21389: CALL_OW 12
21393: ARRAY
21394: PUSH
21395: LD_INT 24
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: PUSH
21403: LD_OWVAR 67
21407: ARRAY
21408: PPUSH
21409: CALL 6763 0 7
// end ;
21413: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21414: LD_INT 17
21416: PPUSH
21417: CALL_OW 255
21421: PUSH
21422: LD_INT 3
21424: EQUAL
21425: PUSH
21426: LD_INT 17
21428: PPUSH
21429: CALL_OW 302
21433: AND
21434: PUSH
21435: LD_INT 2
21437: PPUSH
21438: CALL_OW 255
21442: PUSH
21443: LD_INT 3
21445: EQUAL
21446: AND
21447: PUSH
21448: LD_INT 2
21450: PPUSH
21451: CALL_OW 302
21455: AND
21456: IFFALSE 21523
21458: GO 21460
21460: DISABLE
// begin enable ;
21461: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21462: LD_INT 17
21464: PPUSH
21465: LD_INT 22
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: LD_INT 42
21476: PUSH
21477: LD_INT 43
21479: PUSH
21480: LD_INT 44
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: PPUSH
21491: LD_INT 3
21493: PPUSH
21494: CALL_OW 12
21498: ARRAY
21499: PPUSH
21500: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21504: LD_INT 17
21506: PPUSH
21507: LD_INT 22
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: LD_INT 51
21518: PPUSH
21519: CALL_OW 185
// end ;
21523: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21524: LD_INT 17
21526: PPUSH
21527: CALL_OW 302
21531: PUSH
21532: LD_INT 17
21534: PPUSH
21535: CALL_OW 255
21539: PUSH
21540: LD_INT 3
21542: EQUAL
21543: AND
21544: PUSH
21545: LD_INT 2
21547: PPUSH
21548: CALL_OW 302
21552: AND
21553: PUSH
21554: LD_INT 2
21556: PPUSH
21557: CALL_OW 255
21561: PUSH
21562: LD_INT 3
21564: EQUAL
21565: AND
21566: PUSH
21567: LD_INT 17
21569: PPUSH
21570: CALL_OW 313
21574: NOT
21575: AND
21576: IFFALSE 21670
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
// begin for i = 1 to 6 do
21584: LD_ADDR_VAR 0 1
21588: PUSH
21589: DOUBLE
21590: LD_INT 1
21592: DEC
21593: ST_TO_ADDR
21594: LD_INT 6
21596: PUSH
21597: FOR_TO
21598: IFFALSE 21668
// begin uc_side = 3 ;
21600: LD_ADDR_OWVAR 20
21604: PUSH
21605: LD_INT 3
21607: ST_TO_ADDR
// uc_nation = 3 ;
21608: LD_ADDR_OWVAR 21
21612: PUSH
21613: LD_INT 3
21615: ST_TO_ADDR
// hc_gallery :=  ;
21616: LD_ADDR_OWVAR 33
21620: PUSH
21621: LD_STRING 
21623: ST_TO_ADDR
// hc_name :=  ;
21624: LD_ADDR_OWVAR 26
21628: PUSH
21629: LD_STRING 
21631: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21632: LD_INT 0
21634: PPUSH
21635: LD_EXP 34
21639: PPUSH
21640: LD_EXP 35
21644: PPUSH
21645: CALL_OW 12
21649: PPUSH
21650: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21654: CALL_OW 44
21658: PPUSH
21659: LD_INT 17
21661: PPUSH
21662: CALL_OW 52
// end ;
21666: GO 21597
21668: POP
21669: POP
// end ;
21670: PPOPN 1
21672: END
// every 2 2$0 do var i , j ;
21673: GO 21675
21675: DISABLE
21676: LD_INT 0
21678: PPUSH
21679: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21680: LD_INT 14700
21682: PUSH
21683: LD_INT 33600
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: PPUSH
21693: LD_INT 2
21695: PPUSH
21696: CALL_OW 12
21700: ARRAY
21701: PPUSH
21702: CALL_OW 67
// disableHealAI = 1 ;
21706: LD_ADDR_EXP 33
21710: PUSH
21711: LD_INT 1
21713: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21714: LD_ADDR_VAR 0 1
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 25
21731: PUSH
21732: LD_INT 4
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PPUSH
21743: CALL_OW 69
21747: PUSH
21748: FOR_IN
21749: IFFALSE 21762
// ComExitBuilding ( i ) ;
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 122
21760: GO 21748
21762: POP
21763: POP
// wait ( 0 0$1 ) ;
21764: LD_INT 35
21766: PPUSH
21767: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21771: LD_INT 35
21773: PPUSH
21774: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21778: LD_ADDR_VAR 0 1
21782: PUSH
21783: LD_INT 22
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 25
21795: PUSH
21796: LD_INT 4
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PPUSH
21807: CALL_OW 69
21811: PUSH
21812: FOR_IN
21813: IFFALSE 21890
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_INT 17
21822: PPUSH
21823: LD_INT 22
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 25
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 70
21851: PUSH
21852: FOR_IN
21853: IFFALSE 21886
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21855: LD_VAR 0 1
21859: PPUSH
21860: LD_VAR 0 2
21864: PPUSH
21865: CALL_OW 250
21869: PPUSH
21870: LD_VAR 0 2
21874: PPUSH
21875: CALL_OW 251
21879: PPUSH
21880: CALL_OW 191
// end ;
21884: GO 21852
21886: POP
21887: POP
// end ;
21888: GO 21812
21890: POP
21891: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21892: LD_INT 22
21894: PUSH
21895: LD_INT 3
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 25
21904: PUSH
21905: LD_INT 4
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: PUSH
21921: LD_INT 0
21923: EQUAL
21924: PUSH
21925: LD_EXP 32
21929: PUSH
21930: LD_INT 6
21932: PUSH
21933: LD_INT 7
21935: PUSH
21936: LD_INT 8
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: LD_OWVAR 67
21948: ARRAY
21949: GREATEREQUAL
21950: OR
21951: PUSH
21952: LD_INT 17
21954: PPUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 25
21967: PUSH
21968: LD_INT 12
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PPUSH
21979: CALL_OW 70
21983: PUSH
21984: LD_INT 0
21986: EQUAL
21987: OR
21988: IFFALSE 21771
// disableHealAI = 0 ;
21990: LD_ADDR_EXP 33
21994: PUSH
21995: LD_INT 0
21997: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21998: LD_ADDR_VAR 0 1
22002: PUSH
22003: LD_INT 22
22005: PUSH
22006: LD_INT 3
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 25
22015: PUSH
22016: LD_INT 12
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PPUSH
22027: CALL_OW 69
22031: PUSH
22032: FOR_IN
22033: IFFALSE 22049
// SetClass ( i , 16 ) ;
22035: LD_VAR 0 1
22039: PPUSH
22040: LD_INT 16
22042: PPUSH
22043: CALL_OW 336
22047: GO 22032
22049: POP
22050: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22051: LD_ADDR_VAR 0 1
22055: PUSH
22056: LD_INT 22
22058: PUSH
22059: LD_INT 3
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 25
22068: PUSH
22069: LD_INT 4
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PPUSH
22080: CALL_OW 69
22084: PUSH
22085: FOR_IN
22086: IFFALSE 22105
// ComMoveXY ( i , 113 , 94 ) ;
22088: LD_VAR 0 1
22092: PPUSH
22093: LD_INT 113
22095: PPUSH
22096: LD_INT 94
22098: PPUSH
22099: CALL_OW 111
22103: GO 22085
22105: POP
22106: POP
// end ;
22107: PPOPN 2
22109: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22110: LD_INT 21
22112: PPUSH
22113: CALL_OW 255
22117: PUSH
22118: LD_INT 3
22120: EQUAL
22121: PUSH
22122: LD_INT 21
22124: PPUSH
22125: CALL_OW 302
22129: AND
22130: PUSH
22131: LD_INT 22
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 34
22143: PUSH
22144: LD_INT 51
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PPUSH
22155: CALL_OW 69
22159: PUSH
22160: LD_INT 0
22162: EQUAL
22163: AND
22164: IFFALSE 22196
22166: GO 22168
22168: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22169: LD_INT 21
22171: PPUSH
22172: LD_INT 23
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: LD_INT 1
22180: PPUSH
22181: LD_INT 51
22183: PPUSH
22184: CALL_OW 185
// wait ( 5 5$0 ) ;
22188: LD_INT 10500
22190: PPUSH
22191: CALL_OW 67
// enable ;
22195: ENABLE
// end ; end_of_file
22196: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22197: LD_EXP 26
22201: PUSH
22202: LD_INT 0
22204: LESSEQUAL
22205: IFFALSE 22354
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
22214: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: LD_INT 22
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 3
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 30
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 30
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: PPUSH
22273: CALL_OW 69
22277: ST_TO_ADDR
// for i in tmp do
22278: LD_ADDR_VAR 0 1
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: FOR_IN
22289: IFFALSE 22322
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22291: LD_ADDR_VAR 0 3
22295: PUSH
22296: LD_VAR 0 3
22300: PUSH
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 274
22310: PPUSH
22311: LD_INT 1
22313: PPUSH
22314: CALL_OW 275
22318: PLUS
22319: ST_TO_ADDR
22320: GO 22288
22322: POP
22323: POP
// if yourCrates >= needCrates then
22324: LD_VAR 0 3
22328: PUSH
22329: LD_EXP 25
22333: GREATEREQUAL
22334: IFFALSE 22347
// begin FinishMission ( yourCrates ) ;
22336: LD_VAR 0 3
22340: PPUSH
22341: CALL 22357 0 1
// end else
22345: GO 22354
// begin YouLost ( matmin ) ;
22347: LD_STRING matmin
22349: PPUSH
22350: CALL_OW 104
// end ; end ;
22354: PPOPN 3
22356: END
// export function FinishMission ( crates ) ; begin
22357: LD_INT 0
22359: PPUSH
// if crates + 100 > crates then
22360: LD_VAR 0 1
22364: PUSH
22365: LD_INT 100
22367: PLUS
22368: PUSH
22369: LD_VAR 0 1
22373: GREATER
22374: IFFALSE 22398
// begin AddMedal ( cans , 1 ) ;
22376: LD_STRING cans
22378: PPUSH
22379: LD_INT 1
22381: PPUSH
22382: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22386: LD_INT 1
22388: PPUSH
22389: LD_STRING 06_crates_1
22391: PPUSH
22392: CALL_OW 39
// end else
22396: GO 22419
// begin AddMedal ( cans , - 1 ) ;
22398: LD_STRING cans
22400: PPUSH
22401: LD_INT 1
22403: NEG
22404: PPUSH
22405: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22409: LD_INT 0
22411: PPUSH
22412: LD_STRING 06_crates_1
22414: PPUSH
22415: CALL_OW 39
// end ; if unitLost < 3 then
22419: LD_EXP 30
22423: PUSH
22424: LD_INT 3
22426: LESS
22427: IFFALSE 22441
// begin AddMedal ( people , 1 ) ;
22429: LD_STRING people
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 101
// end else
22439: GO 22452
// begin AddMedal ( people , - 1 ) ;
22441: LD_STRING people
22443: PPUSH
22444: LD_INT 1
22446: NEG
22447: PPUSH
22448: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22452: LD_EXP 28
22456: PPUSH
22457: LD_STRING 06_remoteVehs_1
22459: PPUSH
22460: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22464: LD_EXP 28
22468: PUSH
22469: LD_INT 1
22471: EQUAL
22472: IFFALSE 22486
// begin AddMedal ( remote , 1 ) ;
22474: LD_STRING remote
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 101
// end else
22484: GO 22526
// begin if GetTech ( 18 , 1 ) = state_enabled then
22486: LD_INT 18
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: CALL_OW 321
22496: PUSH
22497: LD_INT 1
22499: EQUAL
22500: IFFALSE 22515
// begin AddMedal ( remote , - 1 ) ;
22502: LD_STRING remote
22504: PPUSH
22505: LD_INT 1
22507: NEG
22508: PPUSH
22509: CALL_OW 101
// end else
22513: GO 22526
// begin AddMedal ( remote , - 2 ) ;
22515: LD_STRING remote
22517: PPUSH
22518: LD_INT 2
22520: NEG
22521: PPUSH
22522: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22526: LD_EXP 20
22530: PPUSH
22531: LD_STRING 06_KurtStatus_1
22533: PPUSH
22534: CALL_OW 39
// GiveMedals ( Main ) ;
22538: LD_STRING Main
22540: PPUSH
22541: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22545: LD_INT 22
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 21
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 50
22567: PUSH
22568: EMPTY
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 25
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 25
22606: PUSH
22607: LD_INT 4
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: PPUSH
22627: CALL_OW 69
22631: PPUSH
22632: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22636: LD_EXP 1
22640: PPUSH
22641: LD_EXP 43
22645: PUSH
22646: LD_STRING JMM
22648: STR
22649: PPUSH
22650: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22654: LD_EXP 2
22658: PPUSH
22659: LD_EXP 43
22663: PUSH
22664: LD_STRING Lisa
22666: STR
22667: PPUSH
22668: CALL 6021 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22672: LD_EXP 3
22676: PPUSH
22677: LD_EXP 43
22681: PUSH
22682: LD_STRING Bobby
22684: STR
22685: PPUSH
22686: CALL 6021 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22690: LD_EXP 4
22694: PPUSH
22695: LD_EXP 43
22699: PUSH
22700: LD_STRING Cyrus
22702: STR
22703: PPUSH
22704: CALL 6021 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22708: LD_EXP 5
22712: PPUSH
22713: LD_EXP 43
22717: PUSH
22718: LD_STRING Frank
22720: STR
22721: PPUSH
22722: CALL 6021 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22726: LD_EXP 6
22730: PPUSH
22731: LD_EXP 43
22735: PUSH
22736: LD_STRING Brown
22738: STR
22739: PPUSH
22740: CALL 6021 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22744: LD_EXP 7
22748: PPUSH
22749: LD_EXP 43
22753: PUSH
22754: LD_STRING Donaldson
22756: STR
22757: PPUSH
22758: CALL 6021 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22762: LD_EXP 8
22766: PPUSH
22767: LD_EXP 43
22771: PUSH
22772: LD_STRING Gladstone
22774: STR
22775: PPUSH
22776: CALL 6021 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22780: LD_EXP 9
22784: PPUSH
22785: LD_EXP 43
22789: PUSH
22790: LD_STRING Denis
22792: STR
22793: PPUSH
22794: CALL 6021 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22798: LD_EXP 15
22802: PPUSH
22803: LD_EXP 43
22807: PUSH
22808: LD_STRING Joan
22810: STR
22811: PPUSH
22812: CALL 6021 0 2
// if IsLive ( Joan ) then
22816: LD_EXP 15
22820: PPUSH
22821: CALL_OW 300
22825: IFFALSE 22839
// SaveCharacters ( Joan , Joan ) ;
22827: LD_EXP 15
22831: PPUSH
22832: LD_STRING Joan
22834: PPUSH
22835: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22839: LD_EXP 16
22843: PPUSH
22844: LD_STRING 06_JoanStatus_1
22846: PPUSH
22847: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22851: LD_INT 50
22853: PUSH
22854: EMPTY
22855: LIST
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 21
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 25
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 25
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 25
22902: PUSH
22903: LD_INT 3
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 25
22912: PUSH
22913: LD_INT 4
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: PPUSH
22933: CALL_OW 69
22937: PUSH
22938: LD_EXP 1
22942: PUSH
22943: LD_EXP 2
22947: PUSH
22948: LD_EXP 3
22952: PUSH
22953: LD_EXP 4
22957: PUSH
22958: LD_EXP 5
22962: PUSH
22963: LD_EXP 6
22967: PUSH
22968: LD_EXP 7
22972: PUSH
22973: LD_EXP 8
22977: PUSH
22978: LD_EXP 9
22982: PUSH
22983: LD_EXP 15
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: DIFF
23000: PPUSH
23001: LD_STRING 06_other_survivors
23003: PPUSH
23004: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23008: LD_INT 50
23010: PUSH
23011: EMPTY
23012: LIST
23013: PUSH
23014: LD_INT 22
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 21
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 25
23039: PUSH
23040: LD_INT 12
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 16
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: PPUSH
23068: CALL_OW 69
23072: PPUSH
23073: LD_STRING 06_other_apemans
23075: PPUSH
23076: CALL_OW 38
// YouWin ;
23080: CALL_OW 103
// end ; end_of_file
23084: LD_VAR 0 2
23088: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23089: LD_EXP 39
23093: PUSH
23094: LD_INT 3
23096: EQUAL
23097: IFFALSE 23212
23099: GO 23101
23101: DISABLE
// begin enable ;
23102: ENABLE
// sendedConvoys = 0 ;
23103: LD_ADDR_EXP 39
23107: PUSH
23108: LD_INT 0
23110: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23111: LD_INT 6
23113: PPUSH
23114: LD_INT 3
23116: PPUSH
23117: LD_INT 5
23119: PPUSH
23120: LD_INT 10
23122: PPUSH
23123: CALL_OW 12
23127: PUSH
23128: LD_INT 5
23130: PPUSH
23131: LD_INT 11
23133: PPUSH
23134: CALL_OW 12
23138: PUSH
23139: LD_INT 8
23141: PPUSH
23142: LD_INT 12
23144: PPUSH
23145: CALL_OW 12
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_OWVAR 67
23159: ARRAY
23160: PPUSH
23161: LD_INT 0
23163: PPUSH
23164: LD_INT 0
23166: PPUSH
23167: LD_INT 0
23169: PPUSH
23170: LD_INT 0
23172: PPUSH
23173: LD_EXP 34
23177: PPUSH
23178: LD_EXP 35
23182: PPUSH
23183: CALL_OW 12
23187: PPUSH
23188: LD_INT 16
23190: PPUSH
23191: LD_INT 15
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: LD_INT 2
23202: PPUSH
23203: CALL_OW 12
23207: PPUSH
23208: CALL 10440 0 12
// end ; end_of_file
23212: END
// export function PrepareNature ; var i , un ; begin
23213: LD_INT 0
23215: PPUSH
23216: PPUSH
23217: PPUSH
// for i = 1 to Difficulty + 2 do
23218: LD_ADDR_VAR 0 2
23222: PUSH
23223: DOUBLE
23224: LD_INT 1
23226: DEC
23227: ST_TO_ADDR
23228: LD_OWVAR 67
23232: PUSH
23233: LD_INT 2
23235: PLUS
23236: PUSH
23237: FOR_TO
23238: IFFALSE 23347
// begin hc_sex = sex_male ;
23240: LD_ADDR_OWVAR 27
23244: PUSH
23245: LD_INT 1
23247: ST_TO_ADDR
// uc_side = 0 ;
23248: LD_ADDR_OWVAR 20
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// uc_nation = nation_nature ;
23256: LD_ADDR_OWVAR 21
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// hc_class = class_tiger ;
23264: LD_ADDR_OWVAR 28
23268: PUSH
23269: LD_INT 14
23271: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23272: LD_ADDR_OWVAR 31
23276: PUSH
23277: LD_EXP 35
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23297: LD_ADDR_OWVAR 35
23301: PUSH
23302: LD_INT 5
23304: NEG
23305: PPUSH
23306: LD_INT 5
23308: PPUSH
23309: CALL_OW 12
23313: PUSH
23314: LD_OWVAR 67
23318: MUL
23319: ST_TO_ADDR
// un = CreateHuman ;
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: CALL_OW 44
23329: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23330: LD_VAR 0 3
23334: PPUSH
23335: LD_INT 18
23337: PPUSH
23338: LD_INT 0
23340: PPUSH
23341: CALL_OW 49
// end ;
23345: GO 23237
23347: POP
23348: POP
// for i = 1 to rand ( 3 , 4 ) do
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: DOUBLE
23355: LD_INT 1
23357: DEC
23358: ST_TO_ADDR
23359: LD_INT 3
23361: PPUSH
23362: LD_INT 4
23364: PPUSH
23365: CALL_OW 12
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23465
// begin hc_sex = sex_male ;
23373: LD_ADDR_OWVAR 27
23377: PUSH
23378: LD_INT 1
23380: ST_TO_ADDR
// uc_side = 0 ;
23381: LD_ADDR_OWVAR 20
23385: PUSH
23386: LD_INT 0
23388: ST_TO_ADDR
// uc_nation = nation_nature ;
23389: LD_ADDR_OWVAR 21
23393: PUSH
23394: LD_INT 0
23396: ST_TO_ADDR
// hc_class = 18 ;
23397: LD_ADDR_OWVAR 28
23401: PUSH
23402: LD_INT 18
23404: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23405: LD_ADDR_OWVAR 31
23409: PUSH
23410: LD_EXP 35
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: ST_TO_ADDR
// hc_agressivity = 0 ;
23430: LD_ADDR_OWVAR 35
23434: PUSH
23435: LD_INT 0
23437: ST_TO_ADDR
// un = CreateHuman ;
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: CALL_OW 44
23447: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23448: LD_VAR 0 3
23452: PPUSH
23453: LD_INT 18
23455: PPUSH
23456: LD_INT 0
23458: PPUSH
23459: CALL_OW 49
// end ;
23463: GO 23370
23465: POP
23466: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23467: LD_ADDR_VAR 0 2
23471: PUSH
23472: DOUBLE
23473: LD_INT 1
23475: DEC
23476: ST_TO_ADDR
23477: LD_INT 1
23479: PPUSH
23480: LD_INT 3
23482: PPUSH
23483: CALL_OW 12
23487: PUSH
23488: LD_OWVAR 67
23492: PLUS
23493: PUSH
23494: FOR_TO
23495: IFFALSE 23644
// begin hc_sex = sex_male ;
23497: LD_ADDR_OWVAR 27
23501: PUSH
23502: LD_INT 1
23504: ST_TO_ADDR
// uc_side = 0 ;
23505: LD_ADDR_OWVAR 20
23509: PUSH
23510: LD_INT 0
23512: ST_TO_ADDR
// uc_nation = nation_nature ;
23513: LD_ADDR_OWVAR 21
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// hc_class = class_apeman ;
23521: LD_ADDR_OWVAR 28
23525: PUSH
23526: LD_INT 12
23528: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23529: LD_ADDR_OWVAR 31
23533: PUSH
23534: LD_INT 2
23536: PPUSH
23537: LD_INT 5
23539: PPUSH
23540: CALL_OW 12
23544: PUSH
23545: LD_INT 0
23547: PPUSH
23548: LD_INT 2
23550: PPUSH
23551: CALL_OW 12
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23568: LD_ADDR_OWVAR 35
23572: PUSH
23573: LD_INT 20
23575: PPUSH
23576: LD_INT 30
23578: PPUSH
23579: CALL_OW 12
23583: PUSH
23584: LD_INT 30
23586: PPUSH
23587: LD_INT 40
23589: PPUSH
23590: CALL_OW 12
23594: PUSH
23595: LD_INT 40
23597: PPUSH
23598: LD_INT 50
23600: PPUSH
23601: CALL_OW 12
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: PUSH
23611: LD_OWVAR 67
23615: ARRAY
23616: ST_TO_ADDR
// un = CreateHuman ;
23617: LD_ADDR_VAR 0 3
23621: PUSH
23622: CALL_OW 44
23626: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23627: LD_VAR 0 3
23631: PPUSH
23632: LD_INT 19
23634: PPUSH
23635: LD_INT 0
23637: PPUSH
23638: CALL_OW 49
// end ;
23642: GO 23494
23644: POP
23645: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: DOUBLE
23652: LD_INT 1
23654: DEC
23655: ST_TO_ADDR
23656: LD_INT 5
23658: PPUSH
23659: LD_INT 6
23661: PPUSH
23662: CALL_OW 12
23666: PUSH
23667: LD_OWVAR 67
23671: PLUS
23672: PUSH
23673: FOR_TO
23674: IFFALSE 23782
// begin hc_sex = sex_male ;
23676: LD_ADDR_OWVAR 27
23680: PUSH
23681: LD_INT 1
23683: ST_TO_ADDR
// uc_side = 0 ;
23684: LD_ADDR_OWVAR 20
23688: PUSH
23689: LD_INT 0
23691: ST_TO_ADDR
// uc_nation = nation_nature ;
23692: LD_ADDR_OWVAR 21
23696: PUSH
23697: LD_INT 0
23699: ST_TO_ADDR
// hc_class = class_apeman ;
23700: LD_ADDR_OWVAR 28
23704: PUSH
23705: LD_INT 12
23707: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23708: LD_ADDR_OWVAR 31
23712: PUSH
23713: LD_INT 2
23715: PPUSH
23716: LD_INT 5
23718: PPUSH
23719: CALL_OW 12
23723: PUSH
23724: LD_INT 0
23726: PPUSH
23727: LD_INT 2
23729: PPUSH
23730: CALL_OW 12
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: ST_TO_ADDR
// hc_agressivity = 0 ;
23747: LD_ADDR_OWVAR 35
23751: PUSH
23752: LD_INT 0
23754: ST_TO_ADDR
// un = CreateHuman ;
23755: LD_ADDR_VAR 0 3
23759: PUSH
23760: CALL_OW 44
23764: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23765: LD_VAR 0 3
23769: PPUSH
23770: LD_INT 20
23772: PPUSH
23773: LD_INT 0
23775: PPUSH
23776: CALL_OW 49
// end ;
23780: GO 23673
23782: POP
23783: POP
// end ; end_of_file
23784: LD_VAR 0 1
23788: RET
