// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7203 0 0
// CreateNature ;
  57: CALL 19579 0 0
// PrepareRussian ;
  61: CALL 5702 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9842 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 38053 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 38053 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 38053 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 38053 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 38053 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 38053 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 38053 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 38053 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 38053 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 38053 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3196: LD_INT 81
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 92
3208: PUSH
3209: LD_VAR 0 3
3213: PPUSH
3214: CALL_OW 250
3218: PUSH
3219: LD_VAR 0 3
3223: PPUSH
3224: CALL_OW 251
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: NOT
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 92
3270: PUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: CALL_OW 250
3280: PUSH
3281: LD_VAR 0 3
3285: PPUSH
3286: CALL_OW 251
3290: PUSH
3291: LD_INT 20
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: AND
3310: IFFALSE 3189
// blockSpawn := 1 ;
3312: LD_ADDR_EXP 29
3316: PUSH
3317: LD_INT 1
3319: ST_TO_ADDR
// uc_side := 4 ;
3320: LD_ADDR_OWVAR 20
3324: PUSH
3325: LD_INT 4
3327: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3328: LD_ADDR_EXP 15
3332: PUSH
3333: LD_STRING Joan
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: LD_EXP 43
3343: PPUSH
3344: CALL 38053 0 3
3348: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_VAR 0 3
3358: PPUSH
3359: CALL_OW 250
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: CALL_OW 251
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_INT 250
3391: PPUSH
3392: CALL_OW 234
// InGameOn ;
3396: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3400: LD_EXP 15
3404: PPUSH
3405: CALL_OW 87
// wait ( 0 0$2 ) ;
3409: LD_INT 70
3411: PPUSH
3412: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3425: LD_VAR 0 3
3429: PPUSH
3430: CALL_OW 122
// wait ( 0 0$1 ) ;
3434: LD_INT 35
3436: PPUSH
3437: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_EXP 15
3450: PPUSH
3451: CALL_OW 112
// wait ( 0 0$2 ) ;
3455: LD_INT 70
3457: PPUSH
3458: CALL_OW 67
// DialogueOn ;
3462: CALL_OW 6
// if tmp = JMM then
3466: LD_VAR 0 3
3470: PUSH
3471: LD_EXP 1
3475: EQUAL
3476: IFFALSE 3625
// begin ComTurnUnit ( JMM , Joan ) ;
3478: LD_EXP 1
3482: PPUSH
3483: LD_EXP 15
3487: PPUSH
3488: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D5b-JMM-1
3499: PPUSH
3500: CALL_OW 88
// DialogueOff ;
3504: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3508: LD_EXP 15
3512: PPUSH
3513: LD_INT 500
3515: PPUSH
3516: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 1
3529: PPUSH
3530: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_EXP 15
3543: PPUSH
3544: CALL_OW 119
// wait ( 0 0$1 ) ;
3548: LD_INT 35
3550: PPUSH
3551: CALL_OW 67
// DialogueOn ;
3555: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-1
3566: PPUSH
3567: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D5b-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D5b-Joan-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D5b-JMM-3
3602: PPUSH
3603: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D5b-Joan-3
3614: PPUSH
3615: CALL_OW 88
// DialogueOff ;
3619: CALL_OW 7
// end else
3623: GO 3990
// begin ComTurnUnit ( tmp , Joan ) ;
3625: LD_VAR 0 3
3629: PPUSH
3630: LD_EXP 15
3634: PPUSH
3635: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_STRING D5a-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// DialogueOff ;
3651: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3655: LD_EXP 15
3659: PPUSH
3660: LD_INT 500
3662: PPUSH
3663: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3667: LD_EXP 15
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 119
// wait ( 0 0$1 ) ;
3695: LD_INT 35
3697: PPUSH
3698: CALL_OW 67
// DialogueOn ;
3702: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-1
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-2
3725: PPUSH
3726: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_STRING D5a-Joan-2
3737: PPUSH
3738: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_STRING D5a-Sol1-3
3749: PPUSH
3750: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3754: LD_EXP 15
3758: PPUSH
3759: LD_STRING D5a-Joan-3
3761: PPUSH
3762: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3766: LD_VAR 0 3
3770: PPUSH
3771: LD_STRING D5a-Sol1-4
3773: PPUSH
3774: CALL_OW 88
// DialogueOff ;
3778: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3782: LD_EXP 1
3786: PUSH
3787: LD_INT 55
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: IN
3798: IFFALSE 3821
// begin ComMoveUnit ( JMM , Joan ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_EXP 15
3809: PPUSH
3810: CALL_OW 112
// wait ( 0 0$05 ) ;
3814: LD_INT 175
3816: PPUSH
3817: CALL_OW 67
// end ; ComExit ( JMM ) ;
3821: LD_EXP 1
3825: PPUSH
3826: CALL 75178 0 1
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3844: LD_EXP 15
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3867: LD_EXP 15
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 296
3881: PUSH
3882: LD_INT 5
3884: LESS
3885: IFFALSE 3837
// ComTurnUnit ( Joan , JMM ) ;
3887: LD_EXP 15
3891: PPUSH
3892: LD_EXP 1
3896: PPUSH
3897: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_EXP 15
3910: PPUSH
3911: CALL_OW 119
// wait ( 0 0$1 ) ;
3915: LD_INT 35
3917: PPUSH
3918: CALL_OW 67
// DialogueOn ;
3922: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-4
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D5a-JMM-4
3945: PPUSH
3946: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3950: LD_EXP 15
3954: PPUSH
3955: LD_STRING D5a-Joan-5
3957: PPUSH
3958: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3962: LD_EXP 1
3966: PPUSH
3967: LD_STRING D5a-JMM-5
3969: PPUSH
3970: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3974: LD_EXP 15
3978: PPUSH
3979: LD_STRING D5a-Joan-6
3981: PPUSH
3982: CALL_OW 88
// DialogueOff ;
3986: CALL_OW 7
// end ; DialogueOn ;
3990: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-2
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4030: LD_EXP 15
4034: PPUSH
4035: LD_STRING D6-Joan-2
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D6-JMM-3
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4054: LD_EXP 15
4058: PPUSH
4059: LD_STRING D6-Joan-3
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D6-JMM-4
4073: PPUSH
4074: CALL_OW 88
// DialogueOff ;
4078: CALL_OW 7
// InGameOff ;
4082: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4086: LD_EXP 15
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4098: LD_STRING MJ
4100: PPUSH
4101: CALL_OW 337
// joanStatus = 1 ;
4105: LD_ADDR_EXP 16
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// blockSpawn = 0 ;
4113: LD_ADDR_EXP 29
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
// if not number or number > 8 then
4130: LD_VAR 0 1
4134: NOT
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 8
4143: GREATER
4144: OR
4145: IFFALSE 4149
// exit ;
4147: GO 5697
// repeat wait ( 0 0$7 ) ;
4149: LD_INT 245
4151: PPUSH
4152: CALL_OW 67
// until blockSpawn = 0 ;
4156: LD_EXP 29
4160: PUSH
4161: LD_INT 0
4163: EQUAL
4164: IFFALSE 4149
// uc_side := 1 ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// uc_nation := 1 ;
4174: LD_ADDR_OWVAR 21
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// InitHc ;
4182: CALL_OW 19
// if number = 1 then
4186: LD_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: EQUAL
4194: IFFALSE 4370
// begin hc_class := 3 ;
4196: LD_ADDR_OWVAR 28
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// hc_sex := sex_male ;
4204: LD_ADDR_OWVAR 27
4208: PUSH
4209: LD_INT 1
4211: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4212: LD_ADDR_OWVAR 33
4216: PUSH
4217: LD_STRING SecondCharsGal
4219: ST_TO_ADDR
// hc_face_number := 55 ;
4220: LD_ADDR_OWVAR 34
4224: PUSH
4225: LD_INT 55
4227: ST_TO_ADDR
// hc_name := George McCarthy ;
4228: LD_ADDR_OWVAR 26
4232: PUSH
4233: LD_STRING George McCarthy
4235: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4236: LD_ADDR_OWVAR 29
4240: PUSH
4241: LD_INT 11
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4251: LD_ADDR_OWVAR 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 2
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4274: LD_ADDR_OWVAR 31
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 2
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: ST_TO_ADDR
// un = CreateHuman ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: CALL_OW 44
4306: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_INT 23
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL_OW 87
// wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// DialogueOn ;
4338: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_STRING D11d-Sol4-1
4349: PPUSH
4350: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D11d-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// end ; if number = 2 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 2
4377: EQUAL
4378: IFFALSE 4554
// begin hc_class := 1 ;
4380: LD_ADDR_OWVAR 28
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// hc_sex := sex_male ;
4388: LD_ADDR_OWVAR 27
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING AmGalRemake
4403: ST_TO_ADDR
// hc_face_number := 7 ;
4404: LD_ADDR_OWVAR 34
4408: PUSH
4409: LD_INT 7
4411: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING Bobby Jordan
4419: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4420: LD_ADDR_OWVAR 29
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4435: LD_ADDR_OWVAR 30
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4458: LD_ADDR_OWVAR 31
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 24
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 49
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL_OW 87
// DialogueOn ;
4522: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4526: LD_VAR 0 3
4530: PPUSH
4531: LD_STRING D11b-Sol3-1
4533: PPUSH
4534: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4538: LD_EXP 1
4542: PPUSH
4543: LD_STRING D11b-JMM-1
4545: PPUSH
4546: CALL_OW 88
// DialogueOff ;
4550: CALL_OW 7
// end ; if number = 3 then
4554: LD_VAR 0 1
4558: PUSH
4559: LD_INT 3
4561: EQUAL
4562: IFFALSE 4726
// begin hc_class := 1 ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// hc_sex := sex_male ;
4572: LD_ADDR_OWVAR 27
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// hc_gallery := DJ ;
4580: LD_ADDR_OWVAR 33
4584: PUSH
4585: LD_STRING DJ
4587: ST_TO_ADDR
// hc_face_number := 1 ;
4588: LD_ADDR_OWVAR 34
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// hc_name := Darius Dajay ;
4596: LD_ADDR_OWVAR 26
4600: PUSH
4601: LD_STRING Darius Dajay
4603: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4604: LD_ADDR_OWVAR 29
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4619: LD_ADDR_OWVAR 30
4623: PUSH
4624: LD_INT 2
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// un = CreateHuman ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: CALL_OW 44
4674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_INT 25
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 87
// wait ( 0 0$1 ) ;
4699: LD_INT 35
4701: PPUSH
4702: CALL_OW 67
// DialogueOn ;
4706: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_STRING D11f-Sol5-1
4717: PPUSH
4718: CALL_OW 88
// DialogueOff ;
4722: CALL_OW 7
// end ; if number = 4 then
4726: LD_VAR 0 1
4730: PUSH
4731: LD_INT 4
4733: EQUAL
4734: IFFALSE 4871
// begin hc_class := 2 ;
4736: LD_ADDR_OWVAR 28
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// hc_sex := sex_female ;
4744: LD_ADDR_OWVAR 27
4748: PUSH
4749: LD_INT 2
4751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4752: LD_ADDR_OWVAR 33
4756: PUSH
4757: LD_STRING SecondCharsGal
4759: ST_TO_ADDR
// hc_face_number := 46 ;
4760: LD_ADDR_OWVAR 34
4764: PUSH
4765: LD_INT 46
4767: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4768: LD_ADDR_OWVAR 26
4772: PUSH
4773: LD_STRING Sylvia Creak
4775: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4776: LD_ADDR_OWVAR 29
4780: PUSH
4781: LD_INT 10
4783: PUSH
4784: LD_INT 9
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4791: LD_ADDR_OWVAR 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4814: LD_ADDR_OWVAR 31
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
// un = CreateHuman ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: CALL_OW 44
4846: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 26
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 87
// end ; if number = 5 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 5
4878: EQUAL
4879: IFFALSE 5055
// begin hc_class := 1 ;
4881: LD_ADDR_OWVAR 28
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// hc_sex := sex_female ;
4889: LD_ADDR_OWVAR 27
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING SecondCharsGal
4904: ST_TO_ADDR
// hc_face_number := 37 ;
4905: LD_ADDR_OWVAR 34
4909: PUSH
4910: LD_INT 37
4912: ST_TO_ADDR
// hc_name := Malena Johnson ;
4913: LD_ADDR_OWVAR 26
4917: PUSH
4918: LD_STRING Malena Johnson
4920: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4921: LD_ADDR_OWVAR 29
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4936: LD_ADDR_OWVAR 30
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4959: LD_ADDR_OWVAR 31
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: ST_TO_ADDR
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 27
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: CALL_OW 87
// wait ( 0 0$1 ) ;
5016: LD_INT 35
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_STRING D11c-FSol3-1
5034: PPUSH
5035: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D11c-JMM-1
5046: PPUSH
5047: CALL_OW 88
// DialogueOff ;
5051: CALL_OW 7
// end ; if number = 6 then
5055: LD_VAR 0 1
5059: PUSH
5060: LD_INT 6
5062: EQUAL
5063: IFFALSE 5237
// begin hc_class := 1 ;
5065: LD_ADDR_OWVAR 28
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// hc_sex := sex_male ;
5073: LD_ADDR_OWVAR 27
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5081: LD_ADDR_OWVAR 33
5085: PUSH
5086: LD_STRING AmGalRemake
5088: ST_TO_ADDR
// hc_face_number := 1 ;
5089: LD_ADDR_OWVAR 34
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_name := Charles Brown ;
5097: LD_ADDR_OWVAR 26
5101: PUSH
5102: LD_STRING Charles Brown
5104: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5105: LD_ADDR_OWVAR 29
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5120: LD_ADDR_OWVAR 30
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5143: LD_ADDR_OWVAR 31
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 0
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// un = CreateHuman ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 28
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 87
// wait ( 0 0$1 ) ;
5200: LD_INT 35
5202: PPUSH
5203: CALL_OW 67
// DialogueOn ;
5207: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_STRING D4-Sol1-5
5218: PPUSH
5219: CALL_OW 88
// DialogueOff ;
5223: CALL_OW 7
// tempCharles = un ;
5227: LD_ADDR_EXP 13
5231: PUSH
5232: LD_VAR 0 3
5236: ST_TO_ADDR
// end ; if number = 7 then
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 7
5244: EQUAL
5245: IFFALSE 5517
// begin hc_class := 1 ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// hc_sex := sex_female ;
5255: LD_ADDR_OWVAR 27
5259: PUSH
5260: LD_INT 2
5262: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5263: LD_ADDR_OWVAR 33
5267: PUSH
5268: LD_STRING AmGalRemake
5270: ST_TO_ADDR
// hc_face_number := 2 ;
5271: LD_ADDR_OWVAR 34
5275: PUSH
5276: LD_INT 2
5278: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5279: LD_ADDR_OWVAR 26
5283: PUSH
5284: LD_STRING Rebecca Macdonald
5286: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5287: LD_ADDR_OWVAR 29
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5302: LD_ADDR_OWVAR 30
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5325: LD_ADDR_OWVAR 31
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// un = CreateHuman ;
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5358: LD_VAR 0 3
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5373: LD_VAR 0 3
5377: PPUSH
5378: CALL_OW 87
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5389: LD_INT 30
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL_OW 70
5406: IFFALSE 5517
// begin DialogueOn ;
5408: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 250
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 251
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 15
5437: NEG
5438: PPUSH
5439: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 250
5452: PPUSH
5453: LD_VAR 0 3
5457: PPUSH
5458: CALL_OW 251
5462: PPUSH
5463: LD_INT 1
5465: PPUSH
5466: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5470: LD_VAR 0 3
5474: PPUSH
5475: LD_STRING D11a-FSol2-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5486: LD_INT 3
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: CALL_OW 471
// wait ( 0 0$2 ) ;
5498: LD_INT 70
5500: PPUSH
5501: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5505: LD_INT 3
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 472
// end ; end ; if number = 8 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 8
5524: EQUAL
5525: IFFALSE 5681
// begin hc_class := 1 ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// hc_sex := sex_female ;
5535: LD_ADDR_OWVAR 27
5539: PUSH
5540: LD_INT 2
5542: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5543: LD_ADDR_OWVAR 33
5547: PUSH
5548: LD_STRING SecondCharsGal
5550: ST_TO_ADDR
// hc_face_number := 45 ;
5551: LD_ADDR_OWVAR 34
5555: PUSH
5556: LD_INT 45
5558: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5559: LD_ADDR_OWVAR 26
5563: PUSH
5564: LD_STRING Margherite Simpson
5566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5567: LD_ADDR_OWVAR 29
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 10
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5582: LD_ADDR_OWVAR 30
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: LD_INT 2
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5605: LD_ADDR_OWVAR 31
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 0
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// un = CreateHuman ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 44
5637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 33
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 87
// wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_STRING D11e-FSol4-1
5676: PPUSH
5677: CALL_OW 88
// end ; arrivals := arrivals union un ;
5681: LD_ADDR_EXP 44
5685: PUSH
5686: LD_EXP 44
5690: PUSH
5691: LD_VAR 0 3
5695: UNION
5696: ST_TO_ADDR
// end ; end_of_file
5697: LD_VAR 0 2
5701: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// ruAttackers := [ ] ;
5706: LD_ADDR_EXP 47
5710: PUSH
5711: EMPTY
5712: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5713: LD_ADDR_EXP 48
5717: PUSH
5718: EMPTY
5719: ST_TO_ADDR
// if Difficulty < 3 then
5720: LD_OWVAR 67
5724: PUSH
5725: LD_INT 3
5727: LESS
5728: IFFALSE 5745
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5730: LD_INT 130
5732: PPUSH
5733: LD_INT 81
5735: PPUSH
5736: CALL_OW 428
5740: PPUSH
5741: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_EXP 34
5758: PPUSH
5759: LD_EXP 35
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: LD_EXP 34
5792: PPUSH
5793: LD_EXP 35
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 67
5821: PPUSH
5822: LD_EXP 34
5826: PPUSH
5827: LD_EXP 35
5831: PPUSH
5832: CALL_OW 12
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 21
5855: PPUSH
5856: LD_EXP 34
5860: PPUSH
5861: LD_EXP 35
5865: PPUSH
5866: CALL_OW 12
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 17
5889: PPUSH
5890: LD_EXP 34
5894: PPUSH
5895: LD_EXP 35
5899: PPUSH
5900: CALL_OW 12
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_INT 6
5910: PPUSH
5911: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 32
5923: PPUSH
5924: LD_EXP 34
5928: PPUSH
5929: LD_EXP 35
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: LD_INT 4
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL 6957 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6035
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 34
6012: PPUSH
6013: LD_EXP 35
6017: PPUSH
6018: CALL_OW 12
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL 6957 0 6
6033: GO 5994
6035: POP
6036: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6037: LD_ADDR_VAR 0 2
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 21
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 31
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6111
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6085: LD_EXP 34
6089: PPUSH
6090: LD_EXP 35
6094: PPUSH
6095: CALL_OW 12
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: CALL 7067 0 2
6109: GO 6082
6111: POP
6112: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6113: LD_INT 3
6115: PPUSH
6116: LD_INT 32
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7346 0 3
// end ;
6126: LD_VAR 0 1
6130: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: IFFALSE 6236
6161: GO 6163
6163: DISABLE
6164: LD_INT 0
6166: PPUSH
// begin enable ;
6167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6168: LD_ADDR_VAR 0 1
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6234
// if GetFuel ( i ) < 3 then
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 261
6214: PUSH
6215: LD_INT 3
6217: LESS
6218: IFFALSE 6232
// SetFuel ( i , 3 ) ;
6220: LD_VAR 0 1
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 240
6232: GO 6202
6234: POP
6235: POP
// end ;
6236: PPOPN 1
6238: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6239: LD_OWVAR 67
6243: PUSH
6244: LD_INT 1
6246: GREATER
6247: IFFALSE 6816
6249: GO 6251
6251: DISABLE
6252: LD_INT 0
6254: PPUSH
6255: PPUSH
6256: PPUSH
6257: PPUSH
// begin uc_side := 3 ;
6258: LD_ADDR_OWVAR 20
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// uc_nation := 3 ;
6266: LD_ADDR_OWVAR 21
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// for i := 1 to 2 do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_INT 2
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6402
// begin InitHC_All ( ) ;
6290: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_OWVAR 67
6319: ARRAY
6320: PPUSH
6321: CALL_OW 381
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 91
6342: PPUSH
6343: LD_INT 87
6345: PPUSH
6346: LD_INT 3
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6356: LD_ADDR_EXP 48
6360: PUSH
6361: LD_EXP 48
6365: PPUSH
6366: LD_EXP 48
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: PPUSH
6375: LD_VAR 0 2
6379: PPUSH
6380: CALL_OW 1
6384: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_INT 46
6392: PPUSH
6393: LD_INT 78
6395: PPUSH
6396: CALL_OW 114
// end ;
6400: GO 6287
6402: POP
6403: POP
// if Difficulty > 2 then
6404: LD_OWVAR 67
6408: PUSH
6409: LD_INT 2
6411: GREATER
6412: IFFALSE 6544
// begin for i := 1 to 3 do
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 3
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6542
// begin InitHC_All ( ) ;
6430: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_OWVAR 67
6459: ARRAY
6460: PPUSH
6461: CALL_OW 381
// un := CreateHuman ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: LD_INT 91
6482: PPUSH
6483: LD_INT 87
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 0
6491: PPUSH
6492: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6496: LD_ADDR_EXP 48
6500: PUSH
6501: LD_EXP 48
6505: PPUSH
6506: LD_EXP 48
6510: PUSH
6511: LD_INT 1
6513: PLUS
6514: PPUSH
6515: LD_VAR 0 2
6519: PPUSH
6520: CALL_OW 1
6524: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6525: LD_VAR 0 2
6529: PPUSH
6530: LD_INT 89
6532: PPUSH
6533: LD_INT 148
6535: PPUSH
6536: CALL_OW 114
// end ;
6540: GO 6427
6542: POP
6543: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 61
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 49
6561: PUSH
6562: LD_INT 85
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 76
6571: PUSH
6572: LD_INT 99
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_INT 135
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 111
6591: PUSH
6592: LD_INT 155
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 147
6601: PUSH
6602: LD_INT 158
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6617: LD_INT 1050
6619: PPUSH
6620: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_EXP 48
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6807
// begin un := ruAttackersInForest [ i ] ;
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 48
6651: PUSH
6652: LD_VAR 0 1
6656: ARRAY
6657: ST_TO_ADDR
// tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 2
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6673: LD_VAR 0 2
6677: PPUSH
6678: CALL_OW 302
6682: PUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 314
6692: NOT
6693: AND
6694: IFFALSE 6805
// begin if tag <> i then
6696: LD_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: NONEQUAL
6706: IFFALSE 6734
// begin SetTag ( un , i ) ;
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 109
// tag := i ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: LD_VAR 0 1
6731: ST_TO_ADDR
// end else
6732: GO 6766
// begin SetTag ( un , i + 1 ) ;
6734: LD_VAR 0 2
6738: PPUSH
6739: LD_VAR 0 1
6743: PUSH
6744: LD_INT 1
6746: PLUS
6747: PPUSH
6748: CALL_OW 109
// tag := i + 1 ;
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: LD_VAR 0 1
6761: PUSH
6762: LD_INT 1
6764: PLUS
6765: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6766: LD_VAR 0 2
6770: PPUSH
6771: LD_VAR 0 3
6775: PUSH
6776: LD_VAR 0 4
6780: ARRAY
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ARRAY
6796: PUSH
6797: LD_INT 2
6799: ARRAY
6800: PPUSH
6801: CALL_OW 114
// end ; end ;
6805: GO 6639
6807: POP
6808: POP
// until not ruAttackersInForest ;
6809: LD_EXP 48
6813: NOT
6814: IFFALSE 6617
// end ; end_of_file
6816: PPOPN 4
6818: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
// if not characters then
6824: LD_VAR 0 1
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6912
// speaker := characters [ rand ( 1 , characters ) ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 258
6866: PUSH
6867: LD_INT 1
6869: EQUAL
6870: IFFALSE 6888
// Say ( speaker , dialogMID ) else
6872: LD_VAR 0 6
6876: PPUSH
6877: LD_VAR 0 2
6881: PPUSH
6882: CALL_OW 88
6886: GO 6902
// Say ( speaker , dialogFID ) ;
6888: LD_VAR 0 6
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: CALL_OW 88
// result := speaker ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 6
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 4
6916: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
// for i in charactersList do
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: FOR_IN
6932: IFFALSE 6950
// SaveCharacters ( i , ident ) ;
6934: LD_VAR 0 4
6938: PPUSH
6939: LD_VAR 0 2
6943: PPUSH
6944: CALL_OW 38
6948: GO 6931
6950: POP
6951: POP
// end ;
6952: LD_VAR 0 3
6956: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6957: LD_INT 0
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
// for i = 1 to count do
6963: LD_ADDR_VAR 0 8
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_VAR 0 6
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7060
// begin uc_side = side ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// uc_nation = nation ;
6991: LD_ADDR_OWVAR 21
6995: PUSH
6996: LD_VAR 0 2
7000: ST_TO_ADDR
// hc_gallery =  ;
7001: LD_ADDR_OWVAR 33
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// hc_name =  ;
7009: LD_ADDR_OWVAR 26
7013: PUSH
7014: LD_STRING 
7016: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7017: LD_INT 0
7019: PPUSH
7020: LD_VAR 0 5
7024: PPUSH
7025: LD_VAR 0 4
7029: PPUSH
7030: CALL_OW 380
// un = CreateHuman ;
7034: LD_ADDR_VAR 0 10
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7044: LD_VAR 0 10
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 52
// end ;
7058: GO 6978
7060: POP
7061: POP
// end ;
7062: LD_VAR 0 7
7066: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// uc_side := GetSide ( b ) ;
7072: LD_ADDR_OWVAR 20
7076: PUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 255
7086: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7087: LD_ADDR_OWVAR 21
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 248
7101: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_VAR 0 2
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: LD_INT 3
7134: MINUS
7135: ST_TO_ADDR
// if dir < 0 then
7136: LD_VAR 0 5
7140: PUSH
7141: LD_INT 0
7143: LESS
7144: IFFALSE 7160
// dir := 6 + dir ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: LD_INT 6
7153: PUSH
7154: LD_VAR 0 5
7158: PLUS
7159: ST_TO_ADDR
// un := CreateHuman ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: CALL_OW 44
7169: ST_TO_ADDR
// SetDir ( un , dir ) ;
7170: LD_VAR 0 4
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 52
// end ;
7198: LD_VAR 0 3
7202: RET
// export function PrepareDifficulty ; begin
7203: LD_INT 0
7205: PPUSH
// case Difficulty of 1 :
7206: LD_OWVAR 67
7210: PUSH
7211: LD_INT 1
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7238
7219: POP
// begin RuSolMinLevel = 2 ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 2
7227: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7228: LD_ADDR_EXP 35
7232: PUSH
7233: LD_INT 3
7235: ST_TO_ADDR
// end ; 2 :
7236: GO 7299
7238: LD_INT 2
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7265
7246: POP
// begin RuSolMinLevel = 3 ;
7247: LD_ADDR_EXP 34
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7255: LD_ADDR_EXP 35
7259: PUSH
7260: LD_INT 5
7262: ST_TO_ADDR
// end ; 3 .. 4 :
7263: GO 7299
7265: LD_INT 3
7267: DOUBLE
7268: GREATEREQUAL
7269: IFFALSE 7277
7271: LD_INT 4
7273: DOUBLE
7274: LESSEQUAL
7275: IFTRUE 7279
7277: GO 7298
7279: POP
// begin RuSolMinLevel = 4 ;
7280: LD_ADDR_EXP 34
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7288: LD_ADDR_EXP 35
7292: PUSH
7293: LD_INT 6
7295: ST_TO_ADDR
// end ; end ;
7296: GO 7299
7298: POP
// end ;
7299: LD_VAR 0 1
7303: RET
// export function ShowQuery1 ; begin
7304: LD_INT 0
7306: PPUSH
// result := Query ( QKill ) ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_STRING QKill
7314: PPUSH
7315: CALL_OW 97
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 1
7324: RET
// export function ShowQuery2 ; begin
7325: LD_INT 0
7327: PPUSH
// result := Query ( QKill2 ) ;
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_STRING QKill2
7335: PPUSH
7336: CALL_OW 97
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 1
7345: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7352: LD_ADDR_VAR 0 7
7356: PUSH
7357: LD_INT 48
7359: PUSH
7360: LD_INT 49
7362: PUSH
7363: LD_INT 50
7365: PUSH
7366: LD_INT 20
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: LD_INT 51
7374: PUSH
7375: LD_INT 52
7377: PUSH
7378: LD_INT 69
7380: PUSH
7381: LD_INT 39
7383: PUSH
7384: LD_INT 34
7386: PUSH
7387: LD_INT 40
7389: PUSH
7390: LD_INT 53
7392: PUSH
7393: LD_INT 71
7395: PUSH
7396: LD_INT 57
7398: PUSH
7399: LD_INT 58
7401: PUSH
7402: LD_INT 44
7404: PUSH
7405: LD_INT 32
7407: PUSH
7408: LD_INT 27
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 33
7416: PUSH
7417: LD_INT 59
7419: PUSH
7420: LD_INT 54
7422: PUSH
7423: LD_INT 55
7425: PUSH
7426: LD_INT 56
7428: PUSH
7429: LD_INT 63
7431: PUSH
7432: LD_INT 64
7434: PUSH
7435: LD_INT 65
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 31
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// for i = 1 to list do
7487: LD_ADDR_VAR 0 5
7491: PUSH
7492: DOUBLE
7493: LD_INT 1
7495: DEC
7496: ST_TO_ADDR
7497: LD_VAR 0 7
7501: PUSH
7502: FOR_TO
7503: IFFALSE 7575
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7505: LD_VAR 0 7
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 321
7525: PUSH
7526: LD_INT 1
7528: EQUAL
7529: PUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 482
7550: AND
7551: IFFALSE 7573
// AddComResearch ( lab , list [ i ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 7
7562: PUSH
7563: LD_VAR 0 5
7567: ARRAY
7568: PPUSH
7569: CALL_OW 184
7573: GO 7502
7575: POP
7576: POP
// end ;
7577: LD_VAR 0 4
7581: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7587: LD_INT 22
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: PUSH
7618: LD_VAR 0 3
7622: LESSEQUAL
7623: IFFALSE 7731
// begin for i = 1 to vehCount do
7625: LD_ADDR_VAR 0 9
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 3
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7729
// begin weapon := weaponTab [ i ] ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_VAR 0 4
7652: PUSH
7653: LD_VAR 0 9
7657: ARRAY
7658: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 46
7666: EQUAL
7667: IFFALSE 7698
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 24
7676: PPUSH
7677: LD_VAR 0 5
7681: PPUSH
7682: LD_VAR 0 6
7686: PPUSH
7687: LD_VAR 0 10
7691: PPUSH
7692: CALL_OW 185
7696: GO 7727
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_VAR 0 7
7707: PPUSH
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_VAR 0 6
7717: PPUSH
7718: LD_VAR 0 10
7722: PPUSH
7723: CALL_OW 185
// end ;
7727: GO 7640
7729: POP
7730: POP
// end ; end ;
7731: LD_VAR 0 8
7735: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7744: LD_ADDR_VAR 0 8
7748: PUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL_OW 313
7758: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_VAR 0 3
7768: PPUSH
7769: LD_INT 22
7771: PUSH
7772: LD_VAR 0 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: LD_INT 750
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 70
7824: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7825: LD_ADDR_VAR 0 6
7829: PUSH
7830: LD_VAR 0 3
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 21
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1000
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: PPUSH
7882: CALL_OW 70
7886: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7887: LD_VAR 0 6
7891: NOT
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 250
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: NOT
7935: AND
7936: IFFALSE 7940
// exit ;
7938: GO 8098
// if buildingsList and engineerOkInside then
7940: LD_VAR 0 6
7944: PUSH
7945: LD_VAR 0 8
7949: AND
7950: IFFALSE 7961
// ComExitBuilding ( engineerOkInside ) ;
7952: LD_VAR 0 8
7956: PPUSH
7957: CALL_OW 122
// if buildingsList and engineerOkOutside then
7961: LD_VAR 0 6
7965: PUSH
7966: LD_VAR 0 9
7970: AND
7971: IFFALSE 7991
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7973: LD_VAR 0 9
7977: PPUSH
7978: LD_VAR 0 6
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PPUSH
7987: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 0
7998: EQUAL
7999: PUSH
8000: LD_VAR 0 4
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: AND
8009: PUSH
8010: LD_VAR 0 9
8014: AND
8015: IFFALSE 8031
// ComEnterUnit ( engineerOkOutside , depot ) ;
8017: LD_VAR 0 9
8021: PPUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8031: LD_VAR 0 9
8035: PUSH
8036: LD_VAR 0 6
8040: PUSH
8041: LD_INT 0
8043: EQUAL
8044: AND
8045: PUSH
8046: LD_VAR 0 4
8050: AND
8051: IFFALSE 8098
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8053: LD_VAR 0 9
8057: PPUSH
8058: LD_VAR 0 4
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 4
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PPUSH
8076: LD_VAR 0 4
8080: PUSH
8081: LD_INT 3
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 4
8089: PUSH
8090: LD_INT 4
8092: ARRAY
8093: PPUSH
8094: CALL_OW 145
// end ;
8098: LD_VAR 0 5
8102: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8114: LD_ADDR_VAR 0 6
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 1
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 4
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 23
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 24
8153: PUSH
8154: LD_INT 251
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 23
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 70
8230: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8231: LD_ADDR_VAR 0 10
8235: PUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 750
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 70
8307: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8308: LD_ADDR_VAR 0 11
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 1000
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 70
8384: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8385: LD_VAR 0 10
8389: NOT
8390: PUSH
8391: LD_VAR 0 11
8395: NOT
8396: AND
8397: PUSH
8398: LD_VAR 0 6
8402: NOT
8403: AND
8404: IFFALSE 8408
// exit ;
8406: GO 8614
// if damageUnits and sci_list then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_VAR 0 6
8417: AND
8418: IFFALSE 8434
// ComMoveToArea ( damageUnits , healArea ) ;
8420: LD_VAR 0 10
8424: PPUSH
8425: LD_VAR 0 2
8429: PPUSH
8430: CALL_OW 113
// if unitsToHeal and sci_list then
8434: LD_VAR 0 11
8438: PUSH
8439: LD_VAR 0 6
8443: AND
8444: IFFALSE 8455
// ComExitBuilding ( sci_list ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8455: LD_VAR 0 11
8459: PUSH
8460: LD_VAR 0 7
8464: AND
8465: IFFALSE 8485
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8467: LD_VAR 0 7
8471: PPUSH
8472: LD_VAR 0 11
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8485: LD_VAR 0 10
8489: PUSH
8490: LD_INT 0
8492: EQUAL
8493: PUSH
8494: LD_VAR 0 11
8498: PUSH
8499: LD_INT 0
8501: EQUAL
8502: AND
8503: PUSH
8504: LD_VAR 0 7
8508: AND
8509: IFFALSE 8614
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8511: LD_ADDR_VAR 0 12
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_VAR 0 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 30
8540: PUSH
8541: LD_INT 8
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8558: LD_ADDR_VAR 0 13
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 12
8570: PPUSH
8571: CALL_OW 12
8575: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8576: LD_VAR 0 7
8580: PPUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 60
8586: PUSH
8587: EMPTY
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 72
8598: PPUSH
8599: LD_VAR 0 12
8603: PUSH
8604: LD_VAR 0 13
8608: ARRAY
8609: PPUSH
8610: CALL_OW 120
// end ; end ;
8614: LD_VAR 0 5
8618: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
// tmp := [ ] ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: EMPTY
8632: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8633: LD_ADDR_VAR 0 7
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 32
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: ST_TO_ADDR
// if bunkers then
8669: LD_VAR 0 7
8673: IFFALSE 8743
// for i in bunkers do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: LD_VAR 0 7
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8741
// for j in UnitsInside ( i ) do
8688: LD_ADDR_VAR 0 5
8692: PUSH
8693: LD_VAR 0 4
8697: PPUSH
8698: CALL_OW 313
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8737
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8706: LD_ADDR_VAR 0 6
8710: PUSH
8711: LD_VAR 0 6
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_INT 1
8723: PLUS
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 1
8734: ST_TO_ADDR
8735: GO 8703
8737: POP
8738: POP
8739: GO 8685
8741: POP
8742: POP
// if tmp then
8743: LD_VAR 0 6
8747: IFFALSE 8787
// begin ComExitBuilding ( tmp ) ;
8749: LD_VAR 0 6
8753: PPUSH
8754: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8758: LD_VAR 0 6
8762: PPUSH
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 250
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 251
8782: PPUSH
8783: CALL_OW 174
// end ; end ;
8787: LD_VAR 0 3
8791: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// enable ;
8797: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 435
8812: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 34
8832: PUSH
8833: LD_VAR 0 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_VAR 0 3
8860: PPUSH
8861: CALL_OW 435
8865: AND
8866: PUSH
8867: LD_VAR 0 6
8871: AND
8872: IFFALSE 8905
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: LD_VAR 0 6
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: CALL_OW 177
// end ;
8905: LD_VAR 0 4
8909: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8920: LD_ADDR_VAR 0 6
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 56
8944: PUSH
8945: EMPTY
8946: LIST
8947: PUSH
8948: LD_INT 24
8950: PUSH
8951: LD_INT 700
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: LD_INT 60
8963: PUSH
8964: EMPTY
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 2
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 5
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 25
8996: PUSH
8997: LD_INT 8
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 25
9006: PUSH
9007: LD_INT 9
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 70
9032: PUSH
9033: LD_EXP 47
9037: PUSH
9038: LD_EXP 48
9042: UNION
9043: DIFF
9044: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_VAR 0 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: EMPTY
9081: LIST
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 251
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 70
9103: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9104: LD_ADDR_VAR 0 9
9108: PUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 22
9116: PUSH
9117: LD_VAR 0 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 5
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: LD_INT 251
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 70
9173: ST_TO_ADDR
// if barrackList then
9174: LD_VAR 0 9
9178: IFFALSE 9334
// begin if turretList = 0 then
9180: LD_VAR 0 7
9184: PUSH
9185: LD_INT 0
9187: EQUAL
9188: IFFALSE 9226
// begin if soldiersList then
9190: LD_VAR 0 6
9194: IFFALSE 9224
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9196: LD_VAR 0 6
9200: PPUSH
9201: LD_VAR 0 9
9205: PUSH
9206: LD_INT 1
9208: PPUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 12
9218: ARRAY
9219: PPUSH
9220: CALL_OW 120
// end else
9224: GO 9334
// begin for i in barrackList do
9226: LD_ADDR_VAR 0 4
9230: PUSH
9231: LD_VAR 0 9
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9332
// begin if not turretList then
9239: LD_VAR 0 7
9243: NOT
9244: IFFALSE 9250
// exit ;
9246: POP
9247: POP
9248: GO 9334
// insideUnits = UnitsInside ( i ) ;
9250: LD_ADDR_VAR 0 10
9254: PUSH
9255: LD_VAR 0 4
9259: PPUSH
9260: CALL_OW 313
9264: ST_TO_ADDR
// if insideUnits then
9265: LD_VAR 0 10
9269: IFFALSE 9330
// begin tmp := insideUnits [ 1 ] ;
9271: LD_ADDR_VAR 0 8
9275: PUSH
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9285: LD_VAR 0 8
9289: PPUSH
9290: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9294: LD_VAR 0 8
9298: PPUSH
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9312: LD_ADDR_VAR 0 7
9316: PUSH
9317: LD_VAR 0 7
9321: PPUSH
9322: LD_INT 1
9324: PPUSH
9325: CALL_OW 3
9329: ST_TO_ADDR
// end ; end ;
9330: GO 9236
9332: POP
9333: POP
// end ; end ; end ;
9334: LD_VAR 0 3
9338: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9339: LD_INT 0
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 34
9376: PUSH
9377: LD_INT 52
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 69
9393: ST_TO_ADDR
// if not craneList then
9394: LD_VAR 0 8
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9837
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9403: LD_ADDR_VAR 0 9
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_VAR 0 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 3
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 1000
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9460: LD_VAR 0 9
9464: PUSH
9465: LD_VAR 0 8
9469: PPUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 750
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 72
9484: AND
9485: IFFALSE 9520
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9487: LD_VAR 0 8
9491: PPUSH
9492: LD_INT 24
9494: PUSH
9495: LD_INT 750
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 72
9506: PPUSH
9507: LD_VAR 0 9
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: IFFALSE 9584
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9548: LD_VAR 0 8
9552: PPUSH
9553: LD_INT 3
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 750
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 72
9574: PPUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9584: LD_VAR 0 8
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: AND
9598: PUSH
9599: LD_VAR 0 3
9603: AND
9604: IFFALSE 9651
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9606: LD_VAR 0 8
9610: PPUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PPUSH
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 2
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 3
9636: ARRAY
9637: PPUSH
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 4
9645: ARRAY
9646: PPUSH
9647: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9651: LD_ADDR_VAR 0 7
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 34
9685: PUSH
9686: LD_INT 52
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 70
9720: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9721: LD_ADDR_VAR 0 6
9725: PUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 22
9733: PUSH
9734: LD_VAR 0 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 0
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 30
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 70
9779: ST_TO_ADDR
// if crane then
9780: LD_VAR 0 7
9784: IFFALSE 9837
// for i in crane do
9786: LD_ADDR_VAR 0 5
9790: PUSH
9791: LD_VAR 0 7
9795: PUSH
9796: FOR_IN
9797: IFFALSE 9835
// begin if dep then
9799: LD_VAR 0 6
9803: IFFALSE 9819
// ComMoveUnit ( i , dep ) ;
9805: LD_VAR 0 5
9809: PPUSH
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 311
9828: PPUSH
9829: CALL 76401 0 1
// end ;
9833: GO 9796
9835: POP
9836: POP
// end ; end_of_file
9837: LD_VAR 0 4
9841: RET
// export function Action ; begin
9842: LD_INT 0
9844: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9845: LD_INT 66
9847: PPUSH
9848: LD_INT 4
9850: PPUSH
9851: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9855: LD_INT 22
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: PUSH
9884: LD_INT 0
9886: EQUAL
9887: IFFALSE 9901
// SetClass ( JMM , 2 ) ;
9889: LD_EXP 1
9893: PPUSH
9894: LD_INT 2
9896: PPUSH
9897: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9901: LD_STRING M1
9903: PPUSH
9904: CALL_OW 337
// case Difficulty of 1 :
9908: LD_OWVAR 67
9912: PUSH
9913: LD_INT 1
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 9931
9921: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9922: LD_STRING M1-1
9924: PPUSH
9925: CALL_OW 337
9929: GO 9974
9931: LD_INT 2
9933: DOUBLE
9934: EQUAL
9935: IFTRUE 9939
9937: GO 9949
9939: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9940: LD_STRING M1-2
9942: PPUSH
9943: CALL_OW 337
9947: GO 9974
9949: LD_INT 3
9951: DOUBLE
9952: GREATEREQUAL
9953: IFFALSE 9961
9955: LD_INT 4
9957: DOUBLE
9958: LESSEQUAL
9959: IFTRUE 9963
9961: GO 9973
9963: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9964: LD_STRING M1-3
9966: PPUSH
9967: CALL_OW 337
9971: GO 9974
9973: POP
// ChangeMissionObjectives ( M1cont ) ;
9974: LD_STRING M1cont
9976: PPUSH
9977: CALL_OW 337
// wait ( 0 0$2 ) ;
9981: LD_INT 70
9983: PPUSH
9984: CALL_OW 67
// SaveForQuickRestart ;
9988: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9992: LD_INT 525
9994: PPUSH
9995: LD_INT 700
9997: PPUSH
9998: CALL_OW 12
10002: PPUSH
10003: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10007: LD_INT 5
10009: PPUSH
10010: LD_INT 82
10012: PPUSH
10013: LD_INT 38
10015: PPUSH
10016: LD_INT 10
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 56
// wait ( 0 0$14 ) ;
10026: LD_INT 490
10028: PPUSH
10029: CALL_OW 67
// firstCrateSpawn := true ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// end ;
10041: LD_VAR 0 1
10045: RET
// every 0 0$02 trigger firstCrateSpawn do
10046: LD_EXP 40
10050: IFFALSE 10413
10052: GO 10054
10054: DISABLE
// begin if IsOk ( Lisa ) then
10055: LD_EXP 2
10059: PPUSH
10060: CALL_OW 302
10064: IFFALSE 10080
// Say ( Lisa , DR0-Lisa-1 ) else
10066: LD_EXP 2
10070: PPUSH
10071: LD_STRING DR0-Lisa-1
10073: PPUSH
10074: CALL_OW 88
10078: GO 10226
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10080: LD_INT 22
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 26
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 3
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 4
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PUSH
10171: LD_EXP 1
10175: PUSH
10176: LD_EXP 8
10180: PUSH
10181: LD_EXP 5
10185: PUSH
10186: LD_EXP 6
10190: PUSH
10191: LD_EXP 7
10195: PUSH
10196: LD_EXP 4
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: DIFF
10215: PPUSH
10216: LD_STRING DR0-Sol1-1
10218: PPUSH
10219: LD_STRING DR0-Sol1-1
10221: PPUSH
10222: CALL 6819 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10226: LD_INT 22
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 26
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 25
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 25
10271: PUSH
10272: LD_INT 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 25
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_EXP 1
10321: PUSH
10322: LD_EXP 8
10326: PUSH
10327: LD_EXP 5
10331: PUSH
10332: LD_EXP 2
10336: PUSH
10337: LD_EXP 6
10341: PUSH
10342: LD_EXP 7
10346: PUSH
10347: LD_EXP 4
10351: PUSH
10352: LD_EXP 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: DIFF
10367: PPUSH
10368: LD_STRING DR0-Sol2-1
10370: PPUSH
10371: LD_STRING DR0-Sol2-1
10373: PPUSH
10374: CALL 6819 0 3
// if IsOk ( Cyrus ) then
10378: LD_EXP 4
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10401
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10389: LD_EXP 4
10393: PPUSH
10394: LD_STRING DR0-Cyrus-1
10396: PPUSH
10397: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10401: LD_EXP 1
10405: PPUSH
10406: LD_STRING DR0-JMM-1
10408: PPUSH
10409: CALL_OW 88
// end ;
10413: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10414: LD_EXP 5
10418: PPUSH
10419: CALL_OW 302
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 16
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PUSH
10453: LD_INT 0
10455: GREATER
10456: AND
10457: PUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 463
10465: NOT
10466: AND
10467: IFFALSE 10745
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10476: LD_EXP 5
10480: PPUSH
10481: LD_STRING D10-Frank-1
10483: PPUSH
10484: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10488: LD_INT 22
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: PUSH
10568: LD_EXP 1
10572: PUSH
10573: LD_EXP 5
10577: PUSH
10578: LD_EXP 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: DIFF
10588: PPUSH
10589: LD_STRING D10-Sol1-1
10591: PPUSH
10592: LD_STRING D10-FSol1-1
10594: PPUSH
10595: CALL 6819 0 3
// Say ( Frank , D10-Frank-2 ) ;
10599: LD_EXP 5
10603: PPUSH
10604: LD_STRING D10-Frank-2
10606: PPUSH
10607: CALL_OW 88
// if IsOK ( Lisa ) then
10611: LD_EXP 2
10615: PPUSH
10616: CALL_OW 302
10620: IFFALSE 10636
// begin Say ( Lisa , D10-Lisa-2 ) ;
10622: LD_EXP 2
10626: PPUSH
10627: LD_STRING D10-Lisa-2
10629: PPUSH
10630: CALL_OW 88
// end else
10634: GO 10741
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 2
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 25
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: PUSH
10716: LD_EXP 1
10720: PUSH
10721: LD_EXP 5
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: DIFF
10730: PPUSH
10731: LD_STRING D10-Sol1-2
10733: PPUSH
10734: LD_STRING D10-FSol1-2
10736: PPUSH
10737: CALL 6819 0 3
// end ; DialogueOff ;
10741: CALL_OW 7
// end ;
10745: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 463
10753: NOT
10754: IFFALSE 11049
10756: GO 10758
10758: DISABLE
// begin HarrisonSupport ;
10759: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10763: LD_EXP 17
10767: PPUSH
10768: CALL_OW 310
10772: PPUSH
10773: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10777: LD_EXP 17
10781: PPUSH
10782: LD_STRING DEng-Eng1-1
10784: PPUSH
10785: CALL_OW 88
// wait ( 1 1$0 ) ;
10789: LD_INT 2100
10791: PPUSH
10792: CALL_OW 67
// DialogueOn ;
10796: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_STRING DRem-Har-1
10807: PPUSH
10808: CALL_OW 94
// if contactWithRussian = 1 then
10812: LD_EXP 22
10816: PUSH
10817: LD_INT 1
10819: EQUAL
10820: IFFALSE 10836
// begin Say ( JMM , DRem-JMM-1 ) ;
10822: LD_EXP 1
10826: PPUSH
10827: LD_STRING DRem-JMM-1
10829: PPUSH
10830: CALL_OW 88
// end else
10834: GO 10848
// begin Say ( JMM , DRem-JMM-1a ) ;
10836: LD_EXP 1
10840: PPUSH
10841: LD_STRING DRem-JMM-1a
10843: PPUSH
10844: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10848: LD_EXP 14
10852: PPUSH
10853: LD_STRING DRem-Har-2
10855: PPUSH
10856: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10860: LD_STRING DenisInDelta
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 30
10870: PUSH
10871: LD_INT 1
10873: EQUAL
10874: IFFALSE 10890
// begin Say ( JMM , DRem-JMM-2 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING DRem-JMM-2
10883: PPUSH
10884: CALL_OW 88
// end else
10888: GO 10902
// begin Say ( JMM , DRem-JMM-2a ) ;
10890: LD_EXP 1
10894: PPUSH
10895: LD_STRING DRem-JMM-2a
10897: PPUSH
10898: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10902: LD_EXP 14
10906: PPUSH
10907: LD_STRING DRem-Har-3
10909: PPUSH
10910: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING DRem-JMM-3
10921: PPUSH
10922: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10926: LD_EXP 14
10930: PPUSH
10931: LD_STRING DRem-Har-4
10933: PPUSH
10934: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10938: LD_STRING DenisInDelta
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 30
10948: PUSH
10949: LD_INT 1
10951: EQUAL
10952: IFFALSE 11012
// begin Say ( JMM , DRem-JMM-4 ) ;
10954: LD_EXP 1
10958: PPUSH
10959: LD_STRING DRem-JMM-4
10961: PPUSH
10962: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10966: LD_EXP 14
10970: PPUSH
10971: LD_STRING DRem-Har-5
10973: PPUSH
10974: CALL_OW 94
// DialogueOff ;
10978: CALL_OW 7
// wait ( 4 4$00 ) ;
10982: LD_INT 8400
10984: PPUSH
10985: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10989: LD_INT 35
10991: PPUSH
10992: CALL_OW 67
// until not InBattle ( 1 ) ;
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 463
11003: NOT
11004: IFFALSE 10989
// SpawnDenis ;
11006: CALL 11050 0 0
// end else
11010: GO 11049
// begin DialogueOff ;
11012: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11016: LD_INT 36
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11029: LD_INT 15
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11042: LD_STRING MR
11044: PPUSH
11045: CALL_OW 337
// end ; end ;
11049: END
// export function SpawnDenis ; var tmp ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
// PrepareDenis ;
11054: CALL 2199 0 0
// if not Denis then
11058: LD_EXP 9
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11288
// CenterNowOnUnits ( Denis ) ;
11067: LD_EXP 9
11071: PPUSH
11072: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11096: LD_EXP 9
11100: PPUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: LD_EXP 9
11110: PPUSH
11111: CALL_OW 74
11115: PPUSH
11116: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11120: LD_INT 35
11122: PPUSH
11123: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11127: LD_INT 22
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 91
11139: PUSH
11140: LD_EXP 9
11144: PUSH
11145: LD_INT 10
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: IFFALSE 11120
// SetSide ( Denis , 1 ) ;
11163: LD_EXP 9
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 235
// DialogueOn ;
11175: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DDen-Den-1
11186: PPUSH
11187: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11191: LD_EXP 1
11195: PPUSH
11196: LD_STRING DDen-JMM-1
11198: PPUSH
11199: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11203: LD_EXP 9
11207: PPUSH
11208: LD_STRING DDen-Den-2
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11215: LD_EXP 1
11219: PPUSH
11220: LD_STRING DDen-JMM-2
11222: PPUSH
11223: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11227: LD_EXP 9
11231: PPUSH
11232: LD_STRING DDen-Den-3
11234: PPUSH
11235: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11239: LD_EXP 1
11243: PPUSH
11244: LD_STRING DDen-JMM-3
11246: PPUSH
11247: CALL_OW 88
// DialogueOff ;
11251: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11255: LD_INT 36
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11268: LD_INT 15
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11281: LD_STRING MR
11283: PPUSH
11284: CALL_OW 337
// end ;
11288: LD_VAR 0 1
11292: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11293: LD_INT 22
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 15
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: PUSH
11322: LD_EXP 9
11326: PPUSH
11327: CALL_OW 302
11331: AND
11332: PUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 463
11340: NOT
11341: AND
11342: IFFALSE 11371
11344: GO 11346
11346: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11347: LD_EXP 9
11351: PPUSH
11352: LD_STRING DR1-Den-1
11354: PPUSH
11355: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11359: LD_EXP 1
11363: PPUSH
11364: LD_STRING DR1-JMM-1
11366: PPUSH
11367: CALL_OW 88
// end ;
11371: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11372: LD_INT 15
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 321
11382: PUSH
11383: LD_INT 2
11385: EQUAL
11386: PUSH
11387: LD_EXP 9
11391: PPUSH
11392: CALL_OW 302
11396: AND
11397: PUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 463
11405: NOT
11406: AND
11407: IFFALSE 11639
11409: GO 11411
11411: DISABLE
// begin DialogueOn ;
11412: CALL_OW 6
// if IsOK ( Denis ) then
11416: LD_EXP 9
11420: PPUSH
11421: CALL_OW 302
11425: IFFALSE 11441
// Say ( Denis , DR2-Den-1 ) else
11427: LD_EXP 9
11431: PPUSH
11432: LD_STRING DR2-Den-1
11434: PPUSH
11435: CALL_OW 88
11439: GO 11500
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11441: LD_INT 22
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 25
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_EXP 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: DIFF
11489: PPUSH
11490: LD_STRING DR2-Sci1-1
11492: PPUSH
11493: LD_STRING DR2-FSci1-1
11495: PPUSH
11496: CALL 6819 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11500: LD_EXP 1
11504: PPUSH
11505: LD_STRING DR2-JMM-1
11507: PPUSH
11508: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11512: LD_INT 22
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 3
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: LD_EXP 1
11596: PUSH
11597: LD_EXP 9
11601: PUSH
11602: LD_EXP 8
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: DIFF
11612: PPUSH
11613: LD_STRING DR2-Sol1-1
11615: PPUSH
11616: LD_STRING DR2-Sol1-11
11618: PPUSH
11619: CALL 6819 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11623: LD_EXP 1
11627: PPUSH
11628: LD_STRING DR2-JMM-2
11630: PPUSH
11631: CALL_OW 88
// DialogueOff ;
11635: CALL_OW 7
// end ;
11639: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11640: LD_INT 22
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 36
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: PUSH
11669: LD_INT 0
11671: EQUAL
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 21
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 33
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PUSH
11713: LD_INT 0
11715: GREATER
11716: AND
11717: PUSH
11718: LD_EXP 23
11722: PUSH
11723: LD_INT 0
11725: EQUAL
11726: AND
11727: PUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 463
11735: NOT
11736: AND
11737: IFFALSE 11874
11739: GO 11741
11741: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11742: LD_INT 22
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: PUSH
11793: LD_EXP 1
11797: PUSH
11798: LD_EXP 6
11802: PUSH
11803: LD_EXP 7
11807: PUSH
11808: LD_EXP 9
11812: PUSH
11813: LD_EXP 15
11817: PUSH
11818: LD_EXP 3
11822: PUSH
11823: LD_EXP 4
11827: PUSH
11828: LD_EXP 2
11832: PUSH
11833: LD_EXP 5
11837: PUSH
11838: LD_EXP 8
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: DIFF
11855: PPUSH
11856: LD_STRING D3a-Mech1-1
11858: PPUSH
11859: LD_STRING D3a-Mech1-1
11861: PPUSH
11862: CALL 6819 0 3
// firstTower = 2 ;
11866: LD_ADDR_EXP 23
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// end ;
11874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11875: LD_INT 22
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: PUSH
11904: LD_INT 0
11906: EQUAL
11907: IFFALSE 12022
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12020
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 7500
12013: PPUSH
12014: CALL_OW 591
12018: GO 12000
12020: POP
12021: POP
// end ;
12022: PPOPN 1
12024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12025: LD_INT 22
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 36
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 33
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: AND
12094: PUSH
12095: CALL 12647 0 0
12099: AND
12100: PUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 463
12108: NOT
12109: AND
12110: IFFALSE 12644
12112: GO 12114
12114: DISABLE
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 36
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12156: LD_ADDR_VAR 0 4
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12201: LD_ADDR_VAR 0 5
12205: PUSH
12206: EMPTY
12207: ST_TO_ADDR
// for i in tmpControlTowers do
12208: LD_ADDR_VAR 0 1
12212: PUSH
12213: LD_VAR 0 3
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12642
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 310
12230: PUSH
12231: LD_VAR 0 1
12235: EQUAL
12236: PUSH
12237: LD_EXP 1
12241: PPUSH
12242: CALL_OW 257
12246: PUSH
12247: LD_INT 3
12249: EQUAL
12250: AND
12251: IFFALSE 12385
// begin InGameOn ;
12253: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12257: LD_VAR 0 4
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING D4a-JMM-1
12277: PPUSH
12278: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12282: LD_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_EXP 1
12295: PPUSH
12296: CALL_OW 53
// wait ( 0 0$1 ) ;
12300: LD_INT 35
12302: PPUSH
12303: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: CALL_OW 250
12329: PUSH
12330: LD_INT 3
12332: PLUS
12333: PPUSH
12334: LD_VAR 0 4
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: PPUSH
12343: CALL_OW 251
12347: PUSH
12348: LD_INT 2
12350: MINUS
12351: PPUSH
12352: CALL_OW 111
// wait ( 0 0$2 ) ;
12356: LD_INT 70
12358: PPUSH
12359: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12363: LD_EXP 1
12367: PPUSH
12368: LD_STRING D4b-JMM-1
12370: PPUSH
12371: CALL_OW 88
// InGameOff ;
12375: CALL_OW 9
// exit ;
12379: POP
12380: POP
12381: GO 12644
// end else
12383: GO 12640
// begin InGameOn ;
12385: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12389: LD_ADDR_VAR 0 5
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 313
12403: PPUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PPUSH
12414: CALL_OW 72
12418: ST_TO_ADDR
// if not tmpMechanicInside then
12419: LD_VAR 0 5
12423: NOT
12424: IFFALSE 12428
// continue ;
12426: GO 12218
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: PPUSH
12437: CALL_OW 258
12441: PUSH
12442: LD_INT 1
12444: EQUAL
12445: IFFALSE 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: LD_STRING D4a-Mech1-1
12458: PPUSH
12459: CALL_OW 88
12463: GO 12481
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12465: LD_VAR 0 5
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: LD_STRING D4a-FMech1-1
12476: PPUSH
12477: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12481: LD_VAR 0 4
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 5
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: CALL_OW 53
// wait ( 0 0$1 ) ;
12516: LD_INT 35
12518: PPUSH
12519: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12523: LD_VAR 0 4
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PPUSH
12541: CALL_OW 250
12545: PUSH
12546: LD_INT 3
12548: PLUS
12549: PPUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 251
12563: PUSH
12564: LD_INT 2
12566: MINUS
12567: PPUSH
12568: CALL_OW 111
// wait ( 0 0$2 ) ;
12572: LD_INT 70
12574: PPUSH
12575: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 258
12592: PUSH
12593: LD_INT 1
12595: EQUAL
12596: IFFALSE 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12598: LD_VAR 0 5
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: LD_STRING D4b-Mech1-1
12609: PPUSH
12610: CALL_OW 88
12614: GO 12632
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12616: LD_VAR 0 5
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_STRING D4b-FMech1-1
12627: PPUSH
12628: CALL_OW 88
// InGameOff ;
12632: CALL_OW 9
// exit ;
12636: POP
12637: POP
12638: GO 12644
// end ; end ;
12640: GO 12218
12642: POP
12643: POP
// end ;
12644: PPOPN 5
12646: END
// function CheckMehInside ; var i , j , tmp ; begin
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
// result := false ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 30
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 4
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12768
// for i in tmp do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12766
// for j in UnitsInside ( i ) do
12717: LD_ADDR_VAR 0 3
12721: PUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: FOR_IN
12733: IFFALSE 12762
// if GetClass ( j ) = class_mechanic then
12735: LD_VAR 0 3
12739: PPUSH
12740: CALL_OW 257
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 12760
// begin result := true ;
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// break ;
12758: GO 12762
// end ;
12760: GO 12732
12762: POP
12763: POP
12764: GO 12714
12766: POP
12767: POP
// end ;
12768: LD_VAR 0 1
12772: RET
// every 12 12$0 do
12773: GO 12775
12775: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12776: LD_INT 35
12778: PPUSH
12779: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 463
12790: NOT
12791: PUSH
12792: LD_INT 32
12794: PPUSH
12795: LD_INT 81
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 70
12809: NOT
12810: AND
12811: IFFALSE 12776
// PrepareKurt ;
12813: CALL 15237 0 0
// end ;
12817: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12818: LD_EXP 15
12822: PPUSH
12823: CALL_OW 302
12827: PUSH
12828: LD_EXP 15
12832: PPUSH
12833: CALL_OW 255
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: AND
12842: PUSH
12843: LD_EXP 2
12847: AND
12848: IFFALSE 13013
12850: GO 12852
12852: DISABLE
// begin wait ( 0 0$50 ) ;
12853: LD_INT 1750
12855: PPUSH
12856: CALL_OW 67
// if not IsOk ( Joan ) then
12860: LD_EXP 15
12864: PPUSH
12865: CALL_OW 302
12869: NOT
12870: IFFALSE 12874
// exit ;
12872: GO 13013
// if IsOK ( Lisa ) then
12874: LD_EXP 2
12878: PPUSH
12879: CALL_OW 302
12883: IFFALSE 13013
// begin DialogueOn ;
12885: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12889: LD_EXP 2
12893: PPUSH
12894: LD_STRING D7-Lisa-1
12896: PPUSH
12897: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12901: LD_EXP 1
12905: PPUSH
12906: LD_STRING D7-JMM-1
12908: PPUSH
12909: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12913: LD_EXP 2
12917: PPUSH
12918: LD_STRING D7-Lisa-2
12920: PPUSH
12921: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12925: LD_EXP 1
12929: PPUSH
12930: LD_STRING D7-JMM-2
12932: PPUSH
12933: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12937: LD_EXP 2
12941: PPUSH
12942: LD_STRING D7-Lisa-3
12944: PPUSH
12945: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12949: LD_EXP 1
12953: PPUSH
12954: LD_STRING D7-JMM-3
12956: PPUSH
12957: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12961: LD_EXP 2
12965: PPUSH
12966: LD_STRING D7-Lisa-4
12968: PPUSH
12969: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12973: LD_EXP 1
12977: PPUSH
12978: LD_STRING D7-JMM-4
12980: PPUSH
12981: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12985: LD_EXP 1
12989: PPUSH
12990: LD_STRING D7-JMM-4a
12992: PPUSH
12993: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12997: LD_EXP 2
13001: PPUSH
13002: LD_STRING D7-Lisa-5
13004: PPUSH
13005: CALL_OW 88
// DialogueOff ;
13009: CALL_OW 7
// end ; end ;
13013: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13014: LD_EXP 13
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 91
13031: PUSH
13032: LD_EXP 13
13036: PUSH
13037: LD_INT 10
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 25
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: LD_INT 1
13107: GREATER
13108: AND
13109: IFFALSE 13126
13111: GO 13113
13113: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13114: LD_EXP 13
13118: PPUSH
13119: LD_STRING D5-Sol1-1
13121: PPUSH
13122: CALL_OW 88
13126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13127: LD_INT 22
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: PUSH
13156: LD_INT 2
13158: GREATEREQUAL
13159: IFFALSE 13179
13161: GO 13163
13163: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13164: LD_STRING MRa
13166: PPUSH
13167: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13171: LD_ADDR_EXP 28
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end ;
13179: END
// every 2 2$00 do var i , last ;
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
// begin last := 8 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_INT 8
13194: ST_TO_ADDR
// for i = 1 to last do
13195: LD_ADDR_VAR 0 1
13199: PUSH
13200: DOUBLE
13201: LD_INT 1
13203: DEC
13204: ST_TO_ADDR
13205: LD_VAR 0 2
13209: PUSH
13210: FOR_TO
13211: IFFALSE 13239
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13213: LD_INT 6300
13215: PPUSH
13216: LD_INT 12600
13218: PPUSH
13219: CALL_OW 12
13223: PPUSH
13224: CALL_OW 67
// PrepareRandoms ( i ) ;
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL 4126 0 1
// end ;
13237: GO 13210
13239: POP
13240: POP
// end ;
13241: PPOPN 2
13243: END
// every 5 5$20 do
13244: GO 13246
13246: DISABLE
// begin DialogueOn ;
13247: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13251: LD_EXP 10
13255: PPUSH
13256: LD_STRING D12a-Sci-1
13258: PPUSH
13259: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13263: LD_EXP 1
13267: PPUSH
13268: LD_STRING D12a-JMM-1
13270: PPUSH
13271: CALL_OW 88
// DialogueOff ;
13275: CALL_OW 7
// cratesStatus = 1 ;
13279: LD_ADDR_EXP 38
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// end ;
13287: END
// every 13 13$0 do
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13295: LD_EXP 10
13299: PPUSH
13300: LD_STRING D12b-Sci-1
13302: PPUSH
13303: CALL_OW 94
// DialogueOff ;
13307: CALL_OW 7
// cratesStatus = 2 ;
13311: LD_ADDR_EXP 38
13315: PUSH
13316: LD_INT 2
13318: ST_TO_ADDR
// end ;
13319: END
// every 32 32$0 do
13320: GO 13322
13322: DISABLE
// begin DialogueOn ;
13323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13327: LD_EXP 10
13331: PPUSH
13332: LD_STRING D12c-Sci-1
13334: PPUSH
13335: CALL_OW 94
// DialogueOff ;
13339: CALL_OW 7
// wait ( 3 3$0 ) ;
13343: LD_INT 6300
13345: PPUSH
13346: CALL_OW 67
// DialogueOn ;
13350: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13354: LD_EXP 10
13358: PPUSH
13359: LD_STRING D12d-Sci-1
13361: PPUSH
13362: CALL_OW 94
// DialogueOff ;
13366: CALL_OW 7
// cratesStatus = 1 ;
13370: LD_ADDR_EXP 38
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13378: CALL 19357 0 0
// wait ( 2 2$30 ) ;
13382: LD_INT 5250
13384: PPUSH
13385: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13389: LD_INT 35
13391: PPUSH
13392: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 463
13403: NOT
13404: PUSH
13405: LD_INT 32
13407: PPUSH
13408: LD_INT 81
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 70
13422: NOT
13423: AND
13424: IFFALSE 13389
// PrepareJoan ;
13426: CALL 3034 0 0
// end ;
13430: END
// every 42 42$0 do
13431: GO 13433
13433: DISABLE
// begin DialogueOn ;
13434: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13438: LD_EXP 10
13442: PPUSH
13443: LD_STRING D12e-Sci-1
13445: PPUSH
13446: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13450: LD_EXP 1
13454: PPUSH
13455: LD_STRING D12e-JMM-1
13457: PPUSH
13458: CALL_OW 88
// DialogueOff ;
13462: CALL_OW 7
// cratesStatus := 2 ;
13466: LD_ADDR_EXP 38
13470: PUSH
13471: LD_INT 2
13473: ST_TO_ADDR
// end ; end_of_file
13474: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13475: LD_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: PUSH
13484: LD_VAR 0 2
13488: PUSH
13489: LD_INT 3
13491: EQUAL
13492: AND
13493: IFFALSE 13503
// contactWithRussian := 1 ;
13495: LD_ADDR_EXP 22
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// end ;
13503: PPOPN 2
13505: END
// on BuildingComplete ( building ) do var i ;
13506: LD_INT 0
13508: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 266
13518: PUSH
13519: LD_INT 36
13521: EQUAL
13522: PUSH
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 23
13542: PUSH
13543: LD_INT 0
13545: EQUAL
13546: AND
13547: IFFALSE 13627
// begin firstTower = 1 ;
13549: LD_ADDR_EXP 23
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 26
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_EXP 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: DIFF
13616: PPUSH
13617: LD_STRING D3b-Mech1-1
13619: PPUSH
13620: LD_STRING D3b-Mech1-1
13622: PPUSH
13623: CALL 6819 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 255
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: AND
13655: IFFALSE 13669
// SetBName ( building , theta ) ;
13657: LD_VAR 0 1
13661: PPUSH
13662: LD_STRING theta
13664: PPUSH
13665: CALL_OW 500
// if GetSide ( building ) = 3 then
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 255
13678: PUSH
13679: LD_INT 3
13681: EQUAL
13682: IFFALSE 13722
// begin for i := 1 to 4 do
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: DOUBLE
13690: LD_INT 1
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 4
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13720
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13700: LD_ADDR_EXP 31
13704: PUSH
13705: LD_EXP 31
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 3
13717: ST_TO_ADDR
13718: GO 13697
13720: POP
13721: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: LD_INT 3
13734: EQUAL
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 266
13745: PUSH
13746: LD_INT 0
13748: EQUAL
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: PUSH
13760: LD_INT 2
13762: EQUAL
13763: OR
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 266
13774: PUSH
13775: LD_INT 4
13777: EQUAL
13778: OR
13779: PUSH
13780: EMPTY
13781: LIST
13782: AND
13783: IFFALSE 13794
// ComUpgrade ( building ) ;
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13794: LD_VAR 0 1
13798: PPUSH
13799: CALL_OW 255
13803: PUSH
13804: LD_INT 3
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 266
13817: PUSH
13818: LD_INT 32
13820: EQUAL
13821: AND
13822: IFFALSE 13863
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 42
13831: PUSH
13832: LD_INT 43
13834: PUSH
13835: LD_INT 44
13837: PUSH
13838: LD_INT 46
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: PPUSH
13859: CALL_OW 208
// end ;
13863: PPOPN 2
13865: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: IN
13911: IFFALSE 13927
// killCounter := killCounter + 1 ;
13913: LD_ADDR_EXP 45
13917: PUSH
13918: LD_EXP 45
13922: PUSH
13923: LD_INT 1
13925: PLUS
13926: ST_TO_ADDR
// if unit in ruAttackersInForest then
13927: LD_VAR 0 1
13931: PUSH
13932: LD_EXP 48
13936: IN
13937: IFFALSE 13955
// ruAttackersInForest := ruAttackersInForest diff unit ;
13939: LD_ADDR_EXP 48
13943: PUSH
13944: LD_EXP 48
13948: PUSH
13949: LD_VAR 0 1
13953: DIFF
13954: ST_TO_ADDR
// if unit in ruAttackers then
13955: LD_VAR 0 1
13959: PUSH
13960: LD_EXP 47
13964: IN
13965: IFFALSE 13983
// ruAttackers := ruAttackers diff unit ;
13967: LD_ADDR_EXP 47
13971: PUSH
13972: LD_EXP 47
13976: PUSH
13977: LD_VAR 0 1
13981: DIFF
13982: ST_TO_ADDR
// if unit = JMM then
13983: LD_VAR 0 1
13987: PUSH
13988: LD_EXP 1
13992: EQUAL
13993: IFFALSE 14002
// YouLost ( JMM ) ;
13995: LD_STRING JMM
13997: PPUSH
13998: CALL_OW 104
// if unit = Joan then
14002: LD_VAR 0 1
14006: PUSH
14007: LD_EXP 15
14011: EQUAL
14012: IFFALSE 14022
// JoanStatus := 0 ;
14014: LD_ADDR_EXP 16
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 255
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: PUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 247
14045: PUSH
14046: LD_INT 1
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 248
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: IFFALSE 14081
// unitLost = unitLost + 1 ;
14067: LD_ADDR_EXP 30
14071: PUSH
14072: LD_EXP 30
14076: PUSH
14077: LD_INT 1
14079: PLUS
14080: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 255
14090: PUSH
14091: LD_INT 3
14093: EQUAL
14094: PUSH
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 247
14104: PUSH
14105: LD_INT 3
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 266
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: LD_INT 5
14125: PUSH
14126: LD_INT 32
14128: PUSH
14129: LD_INT 31
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: IN
14138: AND
14139: IFFALSE 14225
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14141: LD_ADDR_EXP 31
14145: PUSH
14146: LD_EXP 31
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 266
14160: ADD
14161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14162: LD_ADDR_EXP 31
14166: PUSH
14167: LD_EXP 31
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: ADD
14182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14183: LD_ADDR_EXP 31
14187: PUSH
14188: LD_EXP 31
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 251
14202: ADD
14203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14204: LD_ADDR_EXP 31
14208: PUSH
14209: LD_EXP 31
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 254
14223: ADD
14224: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14225: LD_EXP 46
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 257
14239: PUSH
14240: LD_INT 3
14242: EQUAL
14243: AND
14244: PUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 255
14254: PUSH
14255: LD_INT 3
14257: EQUAL
14258: AND
14259: PUSH
14260: LD_INT 21
14262: PPUSH
14263: CALL_OW 302
14267: AND
14268: PUSH
14269: LD_INT 21
14271: PPUSH
14272: CALL_OW 255
14276: PUSH
14277: LD_INT 3
14279: EQUAL
14280: AND
14281: IFFALSE 14363
// begin ruMechCounter := ruMechCounter - 1 ;
14283: LD_ADDR_EXP 46
14287: PUSH
14288: LD_EXP 46
14292: PUSH
14293: LD_INT 1
14295: MINUS
14296: ST_TO_ADDR
// uc_side := 3 ;
14297: LD_ADDR_OWVAR 20
14301: PUSH
14302: LD_INT 3
14304: ST_TO_ADDR
// uc_nation := 3 ;
14305: LD_ADDR_OWVAR 21
14309: PUSH
14310: LD_INT 3
14312: ST_TO_ADDR
// hc_gallery :=  ;
14313: LD_ADDR_OWVAR 33
14317: PUSH
14318: LD_STRING 
14320: ST_TO_ADDR
// hc_name :=  ;
14321: LD_ADDR_OWVAR 26
14325: PUSH
14326: LD_STRING 
14328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14329: LD_INT 0
14331: PPUSH
14332: LD_EXP 34
14336: PPUSH
14337: LD_EXP 35
14341: PPUSH
14342: CALL_OW 12
14346: PPUSH
14347: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14351: CALL_OW 44
14355: PPUSH
14356: LD_INT 21
14358: PPUSH
14359: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 255
14372: PUSH
14373: LD_INT 3
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 264
14386: PUSH
14387: LD_INT 52
14389: EQUAL
14390: AND
14391: PUSH
14392: LD_INT 21
14394: PPUSH
14395: CALL_OW 302
14399: AND
14400: PUSH
14401: LD_INT 21
14403: PPUSH
14404: CALL_OW 255
14408: PUSH
14409: LD_INT 3
14411: EQUAL
14412: AND
14413: IFFALSE 14434
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14415: LD_INT 21
14417: PPUSH
14418: LD_INT 22
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 52
14429: PPUSH
14430: CALL_OW 125
// end ;
14434: PPOPN 1
14436: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 255
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 264
14465: PUSH
14466: LD_INT 51
14468: PUSH
14469: LD_INT 52
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: IN
14476: NOT
14477: AND
14478: IFFALSE 14509
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14480: LD_ADDR_EXP 47
14484: PUSH
14485: LD_EXP 47
14489: PPUSH
14490: LD_EXP 47
14494: PUSH
14495: LD_INT 1
14497: PLUS
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 1
14508: ST_TO_ADDR
// end ;
14509: PPOPN 5
14511: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 255
14521: PUSH
14522: LD_INT 3
14524: EQUAL
14525: IFFALSE 14556
// begin tamedApemans = tamedApemans + 1 ;
14527: LD_ADDR_EXP 32
14531: PUSH
14532: LD_EXP 32
14536: PUSH
14537: LD_INT 1
14539: PLUS
14540: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: LD_INT 106
14548: PPUSH
14549: LD_INT 85
14551: PPUSH
14552: CALL_OW 111
// end ; end ;
14556: PPOPN 2
14558: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 3
14571: EQUAL
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 255
14582: PUSH
14583: LD_INT 3
14585: EQUAL
14586: AND
14587: PUSH
14588: LD_INT 21
14590: PPUSH
14591: CALL_OW 302
14595: AND
14596: IFFALSE 14610
// ComEnterUnit ( human , rufab ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_INT 21
14605: PPUSH
14606: CALL_OW 120
// end ;
14610: PPOPN 4
14612: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 21
14620: EQUAL
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 255
14631: PUSH
14632: LD_INT 3
14634: EQUAL
14635: AND
14636: IFFALSE 14650
// SetLives ( human , 1000 ) ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_INT 1000
14645: PPUSH
14646: CALL_OW 234
// end ;
14650: PPOPN 2
14652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL 34154 0 1
// end ; end_of_file
14662: PPOPN 1
14664: END
// every 0 0$30 trigger cratesStatus = 1 do
14665: LD_EXP 38
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: IFFALSE 14726
14675: GO 14677
14677: DISABLE
// begin enable ;
14678: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14679: LD_INT 350
14681: PUSH
14682: LD_INT 875
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 12
14699: ARRAY
14700: PPUSH
14701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14705: LD_INT 1
14707: PPUSH
14708: LD_INT 5
14710: PPUSH
14711: CALL_OW 12
14715: PPUSH
14716: LD_INT 7
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 55
// end ;
14726: END
// every 1 1$0 trigger cratesStatus = 2 do
14727: LD_EXP 38
14731: PUSH
14732: LD_INT 2
14734: EQUAL
14735: IFFALSE 14818
14737: GO 14739
14739: DISABLE
// begin enable ;
14740: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14741: LD_INT 3150
14743: PUSH
14744: LD_INT 4550
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 12
14761: ARRAY
14762: PPUSH
14763: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14767: LD_INT 2
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 1
14779: PPUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 12
14787: ARRAY
14788: PPUSH
14789: LD_INT 6
14791: PUSH
14792: LD_INT 7
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 1
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 12
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 55
// end ;
14818: END
// every 0 0$30 + 0 0$10 do
14819: GO 14821
14821: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14822: LD_INT 4
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 1
14834: PPUSH
14835: LD_INT 2
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: PPUSH
14844: LD_INT 7
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 55
// Wait ( 0 0$15 ) ;
14854: LD_INT 525
14856: PPUSH
14857: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14861: LD_INT 4
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 12
14881: ARRAY
14882: PPUSH
14883: LD_INT 7
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 55
// Wait ( 0 0$20 ) ;
14893: LD_INT 700
14895: PPUSH
14896: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 1
14912: PPUSH
14913: LD_INT 2
14915: PPUSH
14916: CALL_OW 12
14920: ARRAY
14921: PPUSH
14922: LD_INT 7
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 55
// end ; end_of_file
14932: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14933: LD_EXP 24
14937: PUSH
14938: LD_INT 1
14940: EQUAL
14941: IFFALSE 15234
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
// begin enable ;
14951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 0
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// for i in tmp do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_VAR 0 2
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15059
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 274
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 275
15055: PLUS
15056: ST_TO_ADDR
15057: GO 15025
15059: POP
15060: POP
// strings = [ ] ;
15061: LD_ADDR_EXP 27
15065: PUSH
15066: EMPTY
15067: ST_TO_ADDR
// if tmp = 0 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 0
15075: EQUAL
15076: IFFALSE 15101
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: LD_EXP 27
15087: PUSH
15088: LD_STRING #Am06-1
15090: PUSH
15091: LD_EXP 25
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ADD
15100: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15101: LD_VAR 0 2
15105: PUSH
15106: LD_EXP 25
15110: PUSH
15111: LD_VAR 0 3
15115: GREATER
15116: AND
15117: IFFALSE 15148
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15119: LD_ADDR_EXP 27
15123: PUSH
15124: LD_EXP 27
15128: PUSH
15129: LD_STRING #Am06-1
15131: PUSH
15132: LD_EXP 25
15136: PUSH
15137: LD_VAR 0 3
15141: MINUS
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ADD
15147: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15148: LD_VAR 0 2
15152: PUSH
15153: LD_EXP 25
15157: PUSH
15158: LD_VAR 0 3
15162: LESSEQUAL
15163: AND
15164: IFFALSE 15187
// strings = strings ^ [ #Am06-1 , 0 ] ;
15166: LD_ADDR_EXP 27
15170: PUSH
15171: LD_EXP 27
15175: PUSH
15176: LD_STRING #Am06-1
15178: PUSH
15179: LD_INT 0
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: ADD
15186: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15187: LD_ADDR_EXP 26
15191: PUSH
15192: LD_EXP 26
15196: PUSH
15197: LD_INT 35
15199: MINUS
15200: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15201: LD_ADDR_EXP 27
15205: PUSH
15206: LD_EXP 27
15210: PUSH
15211: LD_STRING #Am06-2
15213: PUSH
15214: LD_EXP 26
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ADD
15223: ST_TO_ADDR
// display_strings = strings ;
15224: LD_ADDR_OWVAR 47
15228: PUSH
15229: LD_EXP 27
15233: ST_TO_ADDR
// end ; end_of_file
15234: PPOPN 3
15236: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// until depot ;
15305: LD_VAR 0 3
15309: IFFALSE 15246
// repeat wait ( 0 0$1 ) ;
15311: LD_INT 35
15313: PPUSH
15314: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 91
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 25
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 25
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: LD_INT 54
15418: PUSH
15419: EMPTY
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 55
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_EXP 2
15456: PUSH
15457: LD_EXP 3
15461: PUSH
15462: LD_EXP 4
15466: PUSH
15467: LD_EXP 5
15471: PUSH
15472: LD_EXP 7
15476: PUSH
15477: LD_EXP 8
15481: PUSH
15482: LD_EXP 9
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: LD_EXP 44
15500: ADD
15501: DIFF
15502: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15503: LD_VAR 0 4
15507: PUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 463
15515: NOT
15516: AND
15517: IFFALSE 15311
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15519: LD_ADDR_VAR 0 4
15523: PUSH
15524: LD_VAR 0 4
15528: PUSH
15529: LD_INT 1
15531: PPUSH
15532: LD_VAR 0 4
15536: PPUSH
15537: CALL_OW 12
15541: ARRAY
15542: ST_TO_ADDR
// blockSpawn := 1 ;
15543: LD_ADDR_EXP 29
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_side := 2 ;
15551: LD_ADDR_OWVAR 20
15555: PUSH
15556: LD_INT 2
15558: ST_TO_ADDR
// uc_nation := 2 ;
15559: LD_ADDR_OWVAR 21
15563: PUSH
15564: LD_INT 2
15566: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_STRING Kurt
15574: PPUSH
15575: LD_INT 0
15577: PPUSH
15578: LD_STRING 
15580: PPUSH
15581: CALL 38053 0 3
15585: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15586: LD_EXP 19
15590: PPUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: CALL_OW 250
15600: PPUSH
15601: LD_VAR 0 4
15605: PPUSH
15606: CALL_OW 251
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 50
// InGameOn ;
15621: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15625: LD_EXP 19
15629: PPUSH
15630: CALL_OW 87
// wait ( 0 0$2 ) ;
15634: LD_INT 70
15636: PPUSH
15637: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15641: LD_EXP 19
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15655: LD_VAR 0 4
15659: PPUSH
15660: LD_EXP 19
15664: PPUSH
15665: CALL_OW 112
// wait ( 0 0$1 ) ;
15669: LD_INT 35
15671: PPUSH
15672: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_EXP 19
15685: PPUSH
15686: CALL_OW 119
// DialogueOn ;
15690: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15694: LD_EXP 19
15698: PPUSH
15699: LD_STRING D2-Kurt-1
15701: PPUSH
15702: CALL_OW 88
// if tmp = JMM then
15706: LD_VAR 0 4
15710: PUSH
15711: LD_EXP 1
15715: EQUAL
15716: IFFALSE 15808
// begin Say ( JMM , D2-JMM-1 ) ;
15718: LD_EXP 1
15722: PPUSH
15723: LD_STRING D2-JMM-1
15725: PPUSH
15726: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15730: LD_EXP 19
15734: PPUSH
15735: LD_STRING D2-Kurt-2
15737: PPUSH
15738: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15742: LD_EXP 1
15746: PPUSH
15747: LD_STRING D2-JMM-2
15749: PPUSH
15750: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15754: LD_EXP 19
15758: PPUSH
15759: LD_STRING D2-Kurt-3
15761: PPUSH
15762: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15766: LD_EXP 1
15770: PPUSH
15771: LD_STRING D2-JMM-3
15773: PPUSH
15774: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15778: LD_EXP 19
15782: PPUSH
15783: LD_STRING D2-Kurt-4
15785: PPUSH
15786: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15790: LD_EXP 1
15794: PPUSH
15795: LD_STRING D2-JMM-4
15797: PPUSH
15798: CALL_OW 88
// DialogueOff ;
15802: CALL_OW 7
// end else
15806: GO 16036
// begin if GetSex ( tmp ) = 1 then
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 258
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: IFFALSE 15837
// Say ( tmp , D2-Sol1-1 ) else
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_STRING D2-Sol1-1
15830: PPUSH
15831: CALL_OW 88
15835: GO 15849
// Say ( tmp , D2-FSol1-1 ) ;
15837: LD_VAR 0 4
15841: PPUSH
15842: LD_STRING D2-FSol1-1
15844: PPUSH
15845: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15849: LD_EXP 19
15853: PPUSH
15854: LD_STRING D2-Kurt-2
15856: PPUSH
15857: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15861: LD_VAR 0 4
15865: PPUSH
15866: CALL_OW 258
15870: PUSH
15871: LD_INT 1
15873: EQUAL
15874: IFFALSE 15890
// Say ( tmp , D2-Sol1-2 ) else
15876: LD_VAR 0 4
15880: PPUSH
15881: LD_STRING D2-Sol1-2
15883: PPUSH
15884: CALL_OW 88
15888: GO 15902
// Say ( tmp , D2-FSol1-2 ) ;
15890: LD_VAR 0 4
15894: PPUSH
15895: LD_STRING D2-FSol1-2
15897: PPUSH
15898: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15902: LD_EXP 19
15906: PPUSH
15907: LD_STRING D2-Kurt-3
15909: PPUSH
15910: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15914: LD_VAR 0 4
15918: PPUSH
15919: CALL_OW 258
15923: PUSH
15924: LD_INT 1
15926: EQUAL
15927: IFFALSE 15943
// Say ( tmp , D2-Sol1-3 ) else
15929: LD_VAR 0 4
15933: PPUSH
15934: LD_STRING D2-Sol1-3
15936: PPUSH
15937: CALL_OW 88
15941: GO 15955
// Say ( tmp , D2-FSol1-3 ) ;
15943: LD_VAR 0 4
15947: PPUSH
15948: LD_STRING D2-FSol1-3
15950: PPUSH
15951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15955: LD_EXP 19
15959: PPUSH
15960: LD_STRING D2-Kurt-4
15962: PPUSH
15963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15967: LD_VAR 0 4
15971: PPUSH
15972: CALL_OW 258
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: IFFALSE 16008
// begin Say ( tmp , D2-Sol1-4 ) ;
15982: LD_VAR 0 4
15986: PPUSH
15987: LD_STRING D2-Sol1-4
15989: PPUSH
15990: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_STRING D2-Sol1-5
16001: PPUSH
16002: CALL_OW 88
// end else
16006: GO 16032
// begin Say ( tmp , D2-FSol1-4 ) ;
16008: LD_VAR 0 4
16012: PPUSH
16013: LD_STRING D2-FSol1-4
16015: PPUSH
16016: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16020: LD_VAR 0 4
16024: PPUSH
16025: LD_STRING D2-FSol1-5
16027: PPUSH
16028: CALL_OW 88
// end ; DialogueOff ;
16032: CALL_OW 7
// end ; dec := ShowQuery1 ;
16036: LD_ADDR_VAR 0 6
16040: PUSH
16041: CALL 7304 0 0
16045: ST_TO_ADDR
// if dec = 1 then
16046: LD_VAR 0 6
16050: PUSH
16051: LD_INT 1
16053: EQUAL
16054: IFFALSE 16116
// begin DialogueOn ;
16056: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16060: LD_EXP 19
16064: PPUSH
16065: LD_STRING D2a-Kurt-1
16067: PPUSH
16068: CALL_OW 88
// DialogueOff ;
16072: CALL_OW 7
// InGameOff ;
16076: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16080: LD_INT 1
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: LD_INT 2
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16096: LD_EXP 19
16100: PPUSH
16101: LD_INT 8
16103: PPUSH
16104: CALL_OW 113
// readyToEscape := 1 ;
16108: LD_ADDR_EXP 21
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// end ; if dec = 2 then
16116: LD_VAR 0 6
16120: PUSH
16121: LD_INT 2
16123: EQUAL
16124: IFFALSE 16592
// begin DialogueOn ;
16126: CALL_OW 6
// if tmp = JMM then
16130: LD_VAR 0 4
16134: PUSH
16135: LD_EXP 1
16139: EQUAL
16140: IFFALSE 16196
// begin Say ( JMM , D2b-JMM-1 ) ;
16142: LD_EXP 1
16146: PPUSH
16147: LD_STRING D2b-JMM-1
16149: PPUSH
16150: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16154: LD_EXP 19
16158: PPUSH
16159: LD_STRING D2b-Kurt-1
16161: PPUSH
16162: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16166: LD_EXP 1
16170: PPUSH
16171: LD_STRING D2b-JMM-2
16173: PPUSH
16174: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16178: LD_EXP 19
16182: PPUSH
16183: LD_STRING D2b-Kurt-2
16185: PPUSH
16186: CALL_OW 88
// DialogueOff ;
16190: CALL_OW 7
// end else
16194: GO 16347
// begin if GetSex ( tmp ) = 1 then
16196: LD_VAR 0 4
16200: PPUSH
16201: CALL_OW 258
16205: PUSH
16206: LD_INT 1
16208: EQUAL
16209: IFFALSE 16225
// Say ( tmp , D2b-Sol1-1 ) else
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_STRING D2b-Sol1-1
16218: PPUSH
16219: CALL_OW 88
16223: GO 16237
// Say ( tmp , D2b-FSol1-1 ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_STRING D2b-FSol1-1
16232: PPUSH
16233: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16237: LD_EXP 19
16241: PPUSH
16242: LD_STRING D2b-Kurt-1
16244: PPUSH
16245: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16249: LD_VAR 0 4
16253: PPUSH
16254: CALL_OW 258
16258: PUSH
16259: LD_INT 1
16261: EQUAL
16262: IFFALSE 16278
// Say ( tmp , D2b-Sol1-2 ) else
16264: LD_VAR 0 4
16268: PPUSH
16269: LD_STRING D2b-Sol1-2
16271: PPUSH
16272: CALL_OW 88
16276: GO 16290
// Say ( tmp , D2b-FSol1-2 ) ;
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_STRING D2b-FSol1-2
16285: PPUSH
16286: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16290: LD_EXP 19
16294: PPUSH
16295: LD_STRING D2b-Kurt-2
16297: PPUSH
16298: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16302: LD_VAR 0 4
16306: PPUSH
16307: CALL_OW 258
16311: PUSH
16312: LD_INT 1
16314: EQUAL
16315: IFFALSE 16331
// Say ( tmp , D2c-Sol1-2 ) else
16317: LD_VAR 0 4
16321: PPUSH
16322: LD_STRING D2c-Sol1-2
16324: PPUSH
16325: CALL_OW 88
16329: GO 16343
// Say ( tmp , D2c-FSol1-2 ) ;
16331: LD_VAR 0 4
16335: PPUSH
16336: LD_STRING D2c-FSol1-2
16338: PPUSH
16339: CALL_OW 88
// DialogueOff ;
16343: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16347: LD_ADDR_VAR 0 7
16351: PUSH
16352: CALL 7325 0 0
16356: ST_TO_ADDR
// if dec2 = 1 then
16357: LD_VAR 0 7
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: IFFALSE 16427
// begin DialogueOn ;
16367: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16371: LD_EXP 19
16375: PPUSH
16376: LD_STRING D2a-Kurt-1
16378: PPUSH
16379: CALL_OW 88
// DialogueOff ;
16383: CALL_OW 7
// InGameOff ;
16387: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16391: LD_INT 1
16393: PPUSH
16394: LD_INT 2
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16407: LD_EXP 19
16411: PPUSH
16412: LD_INT 8
16414: PPUSH
16415: CALL_OW 113
// readyToEscape := 1 ;
16419: LD_ADDR_EXP 21
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if dec2 = 2 then
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16592
// begin if tmp = JMM then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 1
16446: EQUAL
16447: IFFALSE 16507
// begin DialogueOn ;
16449: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16453: LD_EXP 1
16457: PPUSH
16458: LD_STRING D2c-JMM-1
16460: PPUSH
16461: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16465: LD_EXP 19
16469: PPUSH
16470: LD_STRING D2c-Kurt-1
16472: PPUSH
16473: CALL_OW 88
// DialogueOff ;
16477: CALL_OW 7
// InGameOff ;
16481: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16485: LD_EXP 19
16489: PPUSH
16490: LD_INT 8
16492: PPUSH
16493: CALL_OW 113
// readyToEscape := 1 ;
16497: LD_ADDR_EXP 21
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end else
16505: GO 16592
// begin DialogueOn ;
16507: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16511: LD_VAR 0 4
16515: PPUSH
16516: CALL_OW 258
16520: PUSH
16521: LD_INT 1
16523: EQUAL
16524: IFFALSE 16540
// Say ( tmp , D2c-Sol1-1 ) else
16526: LD_VAR 0 4
16530: PPUSH
16531: LD_STRING D2c-Sol1-1
16533: PPUSH
16534: CALL_OW 88
16538: GO 16552
// Say ( tmp , D2c-FSol1-1 ) ;
16540: LD_VAR 0 4
16544: PPUSH
16545: LD_STRING D2c-FSol1-1
16547: PPUSH
16548: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16552: LD_EXP 19
16556: PPUSH
16557: LD_STRING D2c-Kurt-1
16559: PPUSH
16560: CALL_OW 88
// DialogueOff ;
16564: CALL_OW 7
// InGameOff ;
16568: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16572: LD_EXP 19
16576: PPUSH
16577: LD_INT 8
16579: PPUSH
16580: CALL_OW 113
// readyToEscape := 1 ;
16584: LD_ADDR_EXP 21
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16592: LD_VAR 0 6
16596: PUSH
16597: LD_INT 3
16599: EQUAL
16600: IFFALSE 16761
// begin DialogueOn ;
16602: CALL_OW 6
// if tmp = JMM then
16606: LD_VAR 0 4
16610: PUSH
16611: LD_EXP 1
16615: EQUAL
16616: IFFALSE 16676
// begin DialogueOn ;
16618: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2c-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING D2c-Kurt-1
16641: PPUSH
16642: CALL_OW 88
// DialogueOff ;
16646: CALL_OW 7
// InGameOff ;
16650: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16654: LD_EXP 19
16658: PPUSH
16659: LD_INT 8
16661: PPUSH
16662: CALL_OW 113
// readyToEscape := 1 ;
16666: LD_ADDR_EXP 21
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// end else
16674: GO 16761
// begin DialogueOn ;
16676: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16680: LD_VAR 0 4
16684: PPUSH
16685: CALL_OW 258
16689: PUSH
16690: LD_INT 1
16692: EQUAL
16693: IFFALSE 16709
// Say ( tmp , D2c-Sol1-1 ) else
16695: LD_VAR 0 4
16699: PPUSH
16700: LD_STRING D2c-Sol1-1
16702: PPUSH
16703: CALL_OW 88
16707: GO 16721
// Say ( tmp , D2c-FSol1-1 ) ;
16709: LD_VAR 0 4
16713: PPUSH
16714: LD_STRING D2c-FSol1-1
16716: PPUSH
16717: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16721: LD_EXP 19
16725: PPUSH
16726: LD_STRING D2c-Kurt-1
16728: PPUSH
16729: CALL_OW 88
// DialogueOff ;
16733: CALL_OW 7
// InGameOff ;
16737: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16741: LD_EXP 19
16745: PPUSH
16746: LD_INT 8
16748: PPUSH
16749: CALL_OW 113
// readyToEscape := 1 ;
16753: LD_ADDR_EXP 21
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16761: LD_ADDR_EXP 29
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16776: LD_EXP 19
16780: PPUSH
16781: LD_INT 8
16783: PPUSH
16784: CALL_OW 308
16788: PUSH
16789: LD_EXP 21
16793: AND
16794: PUSH
16795: LD_EXP 19
16799: PPUSH
16800: CALL_OW 301
16804: OR
16805: IFFALSE 16769
// if IsDead ( Kurt ) then
16807: LD_EXP 19
16811: PPUSH
16812: CALL_OW 301
16816: IFFALSE 16820
// exit ;
16818: GO 16875
// RemoveUnit ( Kurt ) ;
16820: LD_EXP 19
16824: PPUSH
16825: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16829: LD_EXP 19
16833: PPUSH
16834: LD_STRING Kurt
16836: PPUSH
16837: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 2
16846: PPUSH
16847: CALL_OW 81
16851: PUSH
16852: LD_INT 0
16854: EQUAL
16855: IFFALSE 16867
// kurtStatus = 1 else
16857: LD_ADDR_EXP 20
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
16865: GO 16875
// kurtStatus = 2 ;
16867: LD_ADDR_EXP 20
16871: PUSH
16872: LD_INT 2
16874: ST_TO_ADDR
// end ; end_of_file
16875: LD_VAR 0 1
16879: RET
// every 0 0$2 do
16880: GO 16882
16882: DISABLE
// begin enable ;
16883: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16884: LD_INT 3
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: LD_INT 10
16892: PPUSH
16893: LD_EXP 31
16897: PPUSH
16898: CALL 7736 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16902: LD_INT 3
16904: PPUSH
16905: LD_INT 12
16907: PPUSH
16908: LD_EXP 31
16912: PPUSH
16913: CALL 9339 0 3
// if disableHealAI = 0 then
16917: LD_EXP 33
16921: PUSH
16922: LD_INT 0
16924: EQUAL
16925: IFFALSE 16946
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 9
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_INT 32
16938: PUSH
16939: EMPTY
16940: LIST
16941: PPUSH
16942: CALL 8103 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 51
16951: PPUSH
16952: LD_INT 6
16954: PPUSH
16955: CALL 8792 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 303
16966: PUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_INT 1
16977: EQUAL
16978: OR
16979: IFFALSE 16993
// DefendDepot ( 3 , rudepo ) else
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL 8619 0 2
16991: GO 17003
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16993: LD_INT 3
16995: PPUSH
16996: LD_INT 10
16998: PPUSH
16999: CALL 8910 0 2
// end ;
17003: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17004: LD_INT 22
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 55
17026: PUSH
17027: EMPTY
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: LD_INT 34
17035: PUSH
17036: LD_INT 51
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: LD_INT 0
17060: EQUAL
17061: PUSH
17062: LD_INT 21
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 3
17072: EQUAL
17073: AND
17074: PUSH
17075: LD_INT 21
17077: PPUSH
17078: CALL_OW 302
17082: AND
17083: PUSH
17084: LD_INT 2
17086: PPUSH
17087: CALL_OW 255
17091: PUSH
17092: LD_INT 3
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 2
17099: PPUSH
17100: CALL_OW 302
17104: AND
17105: PUSH
17106: LD_INT 21
17108: PPUSH
17109: CALL_OW 313
17113: AND
17114: PUSH
17115: LD_EXP 47
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 6
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_OWVAR 67
17142: ARRAY
17143: LESS
17144: AND
17145: IFFALSE 17366
17147: GO 17149
17149: DISABLE
// begin enable ;
17150: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17151: LD_INT 2
17153: PPUSH
17154: CALL_OW 274
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 2000
17164: PPUSH
17165: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17169: LD_INT 3
17171: PPUSH
17172: LD_INT 21
17174: PPUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: LD_INT 6
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_OWVAR 67
17197: ARRAY
17198: PUSH
17199: LD_EXP 47
17203: MINUS
17204: PPUSH
17205: LD_INT 43
17207: PUSH
17208: LD_INT 43
17210: PUSH
17211: LD_INT 44
17213: PUSH
17214: LD_INT 44
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 43
17225: PUSH
17226: LD_INT 43
17228: PUSH
17229: LD_INT 43
17231: PUSH
17232: LD_INT 44
17234: PUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 46
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 43
17251: PUSH
17252: LD_INT 43
17254: PUSH
17255: LD_INT 43
17257: PUSH
17258: LD_INT 44
17260: PUSH
17261: LD_INT 44
17263: PUSH
17264: LD_INT 46
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 43
17277: PUSH
17278: LD_INT 43
17280: PUSH
17281: LD_INT 44
17283: PUSH
17284: LD_INT 46
17286: PUSH
17287: LD_INT 46
17289: PUSH
17290: LD_INT 46
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_OWVAR 67
17311: ARRAY
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 24
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ARRAY
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 24
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: LD_OWVAR 67
17360: ARRAY
17361: PPUSH
17362: CALL 7582 0 7
// end ;
17366: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17367: LD_INT 17
17369: PPUSH
17370: CALL_OW 255
17374: PUSH
17375: LD_INT 3
17377: EQUAL
17378: PUSH
17379: LD_INT 17
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_INT 2
17390: PPUSH
17391: CALL_OW 255
17395: PUSH
17396: LD_INT 3
17398: EQUAL
17399: AND
17400: PUSH
17401: LD_INT 2
17403: PPUSH
17404: CALL_OW 302
17408: AND
17409: PUSH
17410: LD_EXP 47
17414: PUSH
17415: LD_INT 4
17417: PUSH
17418: LD_INT 5
17420: PUSH
17421: LD_INT 6
17423: PUSH
17424: LD_INT 7
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: LESS
17439: AND
17440: IFFALSE 17488
17442: GO 17444
17444: DISABLE
// begin enable ;
17445: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17446: LD_INT 17
17448: PPUSH
17449: LD_INT 22
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 42
17460: PUSH
17461: LD_INT 43
17463: PUSH
17464: LD_INT 44
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: PPUSH
17484: CALL_OW 185
// end ;
17488: END
// every 2 2$0 do var i , j ;
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17496: LD_INT 14700
17498: PUSH
17499: LD_INT 33600
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 12
17516: ARRAY
17517: PPUSH
17518: CALL_OW 67
// disableHealAI = 1 ;
17522: LD_ADDR_EXP 33
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17578
// ComExitBuilding ( i ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 122
17576: GO 17564
17578: POP
17579: POP
// wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 4
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17706
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_INT 17
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 25
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 70
17667: PUSH
17668: FOR_IN
17669: IFFALSE 17702
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 250
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 251
17695: PPUSH
17696: CALL_OW 191
17700: GO 17668
17702: POP
17703: POP
17704: GO 17628
17706: POP
17707: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 4
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: PUSH
17737: LD_INT 0
17739: EQUAL
17740: PUSH
17741: LD_EXP 32
17745: PUSH
17746: LD_INT 6
17748: PUSH
17749: LD_INT 7
17751: PUSH
17752: LD_INT 8
17754: PUSH
17755: LD_INT 8
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: LD_OWVAR 67
17768: ARRAY
17769: GREATEREQUAL
17770: OR
17771: PUSH
17772: LD_INT 17
17774: PPUSH
17775: LD_INT 22
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 12
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 70
17803: PUSH
17804: LD_INT 0
17806: EQUAL
17807: OR
17808: IFFALSE 17587
// disableHealAI = 0 ;
17810: LD_ADDR_EXP 33
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 12
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17869
// SetClass ( i , 16 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 16
17862: PPUSH
17863: CALL_OW 336
17867: GO 17852
17869: POP
17870: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 25
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PUSH
17905: FOR_IN
17906: IFFALSE 17922
// ComEnterUnit ( i , rulab ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 32
17915: PPUSH
17916: CALL_OW 120
17920: GO 17905
17922: POP
17923: POP
// end ; end_of_file
17924: PPOPN 2
17926: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17927: LD_EXP 26
17931: PUSH
17932: LD_INT 0
17934: LESSEQUAL
17935: IFFALSE 18084
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// for i in tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18052
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 274
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 275
18048: PLUS
18049: ST_TO_ADDR
18050: GO 18018
18052: POP
18053: POP
// if yourCrates >= needCrates then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_EXP 25
18063: GREATEREQUAL
18064: IFFALSE 18077
// FinishMission ( yourCrates ) else
18066: LD_VAR 0 3
18070: PPUSH
18071: CALL 18087 0 1
18075: GO 18084
// YouLost ( matmin ) ;
18077: LD_STRING matmin
18079: PPUSH
18080: CALL_OW 104
// end ;
18084: PPOPN 3
18086: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// if killCounter = 0 then
18093: LD_EXP 45
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: IFFALSE 18110
// SetAchievement ( ACH_SURV ) ;
18103: LD_STRING ACH_SURV
18105: PPUSH
18106: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PUSH
18139: LD_INT 0
18141: EQUAL
18142: IFFALSE 18158
// begin wait ( 3 ) ;
18144: LD_INT 3
18146: PPUSH
18147: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18151: LD_STRING ACH_BASEDESTROYER
18153: PPUSH
18154: CALL_OW 543
// end ; m1 := false ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// m2 := false ;
18166: LD_ADDR_VAR 0 4
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// m3 := false ;
18174: LD_ADDR_VAR 0 5
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// if crates + 100 > crates then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 100
18189: PLUS
18190: PUSH
18191: LD_VAR 0 1
18195: GREATER
18196: IFFALSE 18228
// begin AddMedal ( cans , 1 ) ;
18198: LD_STRING cans
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_STRING 06_crates_1
18213: PPUSH
18214: CALL_OW 39
// m1 := true ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
// end else
18226: GO 18249
// begin AddMedal ( cans , - 1 ) ;
18228: LD_STRING cans
18230: PPUSH
18231: LD_INT 1
18233: NEG
18234: PPUSH
18235: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18239: LD_INT 0
18241: PPUSH
18242: LD_STRING 06_crates_1
18244: PPUSH
18245: CALL_OW 39
// end ; if unitLost < 3 then
18249: LD_EXP 30
18253: PUSH
18254: LD_INT 3
18256: LESS
18257: IFFALSE 18279
// begin AddMedal ( people , 1 ) ;
18259: LD_STRING people
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 101
// m2 := true ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_INT 1
18276: ST_TO_ADDR
// end else
18277: GO 18290
// AddMedal ( people , - 1 ) ;
18279: LD_STRING people
18281: PPUSH
18282: LD_INT 1
18284: NEG
18285: PPUSH
18286: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18290: LD_EXP 28
18294: PPUSH
18295: LD_STRING 06_remoteVehs_1
18297: PPUSH
18298: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18302: LD_EXP 28
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18332
// begin AddMedal ( remote , 1 ) ;
18312: LD_STRING remote
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// m3 := true ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// end else
18330: GO 18372
// begin if GetTech ( 18 , 1 ) = state_enabled then
18332: LD_INT 18
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 321
18342: PUSH
18343: LD_INT 1
18345: EQUAL
18346: IFFALSE 18361
// AddMedal ( remote , - 1 ) else
18348: LD_STRING remote
18350: PPUSH
18351: LD_INT 1
18353: NEG
18354: PPUSH
18355: CALL_OW 101
18359: GO 18372
// AddMedal ( remote , - 2 ) ;
18361: LD_STRING remote
18363: PPUSH
18364: LD_INT 2
18366: NEG
18367: PPUSH
18368: CALL_OW 101
// end ; if m1 and m2 and m3 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_VAR 0 4
18381: AND
18382: PUSH
18383: LD_VAR 0 5
18387: AND
18388: IFFALSE 18404
// begin wait ( 3 ) ;
18390: LD_INT 3
18392: PPUSH
18393: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18397: LD_STRING ACH_ASPEED_6
18399: PPUSH
18400: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18404: LD_OWVAR 67
18408: PUSH
18409: LD_INT 3
18411: GREATEREQUAL
18412: PUSH
18413: LD_VAR 0 3
18417: AND
18418: PUSH
18419: LD_VAR 0 4
18423: AND
18424: PUSH
18425: LD_VAR 0 5
18429: AND
18430: IFFALSE 18442
// SetAchievementEX ( ACH_AMER , 6 ) ;
18432: LD_STRING ACH_AMER
18434: PPUSH
18435: LD_INT 6
18437: PPUSH
18438: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18442: LD_EXP 20
18446: PPUSH
18447: LD_STRING 06_KurtStatus_1
18449: PPUSH
18450: CALL_OW 39
// GiveMedals ( Main ) ;
18454: LD_STRING Main
18456: PPUSH
18457: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18461: LD_INT 22
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 50
18483: PUSH
18484: EMPTY
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 4
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PPUSH
18548: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18552: LD_EXP 1
18556: PPUSH
18557: LD_EXP 42
18561: PUSH
18562: LD_STRING JMM
18564: STR
18565: PPUSH
18566: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18570: LD_EXP 2
18574: PPUSH
18575: LD_EXP 42
18579: PUSH
18580: LD_STRING Lisa
18582: STR
18583: PPUSH
18584: CALL 6917 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18588: LD_EXP 3
18592: PPUSH
18593: LD_EXP 42
18597: PUSH
18598: LD_STRING Bobby
18600: STR
18601: PPUSH
18602: CALL 6917 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18606: LD_EXP 4
18610: PPUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_STRING Cyrus
18618: STR
18619: PPUSH
18620: CALL 6917 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18624: LD_EXP 5
18628: PPUSH
18629: LD_EXP 42
18633: PUSH
18634: LD_STRING Frank
18636: STR
18637: PPUSH
18638: CALL 6917 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18642: LD_EXP 6
18646: PPUSH
18647: LD_EXP 42
18651: PUSH
18652: LD_STRING Brown
18654: STR
18655: PPUSH
18656: CALL 6917 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18660: LD_EXP 7
18664: PPUSH
18665: LD_EXP 42
18669: PUSH
18670: LD_STRING Donaldson
18672: STR
18673: PPUSH
18674: CALL 6917 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18678: LD_EXP 8
18682: PPUSH
18683: LD_EXP 42
18687: PUSH
18688: LD_STRING Gladstone
18690: STR
18691: PPUSH
18692: CALL 6917 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18696: LD_EXP 9
18700: PPUSH
18701: LD_EXP 42
18705: PUSH
18706: LD_STRING Denis
18708: STR
18709: PPUSH
18710: CALL 6917 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18714: LD_EXP 15
18718: PPUSH
18719: LD_EXP 42
18723: PUSH
18724: LD_STRING Joan
18726: STR
18727: PPUSH
18728: CALL 6917 0 2
// if IsLive ( Joan ) then
18732: LD_EXP 15
18736: PPUSH
18737: CALL_OW 300
18741: IFFALSE 18755
// SaveCharacters ( Joan , Joan ) ;
18743: LD_EXP 15
18747: PPUSH
18748: LD_STRING Joan
18750: PPUSH
18751: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18755: LD_EXP 16
18759: PPUSH
18760: LD_STRING 06_JoanStatus_1
18762: PPUSH
18763: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18767: LD_INT 50
18769: PUSH
18770: EMPTY
18771: LIST
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PUSH
18854: LD_EXP 1
18858: PUSH
18859: LD_EXP 2
18863: PUSH
18864: LD_EXP 3
18868: PUSH
18869: LD_EXP 4
18873: PUSH
18874: LD_EXP 5
18878: PUSH
18879: LD_EXP 6
18883: PUSH
18884: LD_EXP 7
18888: PUSH
18889: LD_EXP 8
18893: PUSH
18894: LD_EXP 9
18898: PUSH
18899: LD_EXP 15
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: DIFF
18916: PPUSH
18917: LD_STRING 06_other_survivors
18919: PPUSH
18920: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18924: LD_INT 50
18926: PUSH
18927: EMPTY
18928: LIST
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 12
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PPUSH
18989: LD_STRING 06_other_apemans
18991: PPUSH
18992: CALL_OW 38
// YouWin ;
18996: CALL_OW 103
// end ; end_of_file
19000: LD_VAR 0 2
19004: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19005: LD_EXP 47
19009: PUSH
19010: LD_OWVAR 1
19014: PUSH
19015: LD_INT 23100
19017: PUSH
19018: LD_INT 21000
19020: PUSH
19021: LD_INT 18900
19023: PUSH
19024: LD_INT 16800
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: PUSH
19033: LD_OWVAR 67
19037: ARRAY
19038: GREATER
19039: AND
19040: IFFALSE 19354
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
// begin enable ;
19051: ENABLE
// for i in ruAttackers do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 47
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19352
// begin if not IsDrivenBy ( i ) then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 311
19074: NOT
19075: IFFALSE 19079
// continue ;
19077: GO 19062
// if i mod 2 = 0 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 2
19086: MOD
19087: PUSH
19088: LD_INT 0
19090: EQUAL
19091: IFFALSE 19146
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_INT 91
19100: PUSH
19101: LD_INT 52
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 82
19110: PUSH
19111: LD_INT 34
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 90
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 80
19130: PUSH
19131: LD_INT 12
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 19208
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_INT 91
19153: PUSH
19154: LD_INT 52
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 68
19163: PUSH
19164: LD_INT 46
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 48
19173: PUSH
19174: LD_INT 43
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 33
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 19
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 256
19217: PUSH
19218: LD_INT 1000
19220: EQUAL
19221: IFFALSE 19239
// AgressiveMove ( i , path ) else
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL 77185 0 2
19237: GO 19350
// if GetLives ( i ) < 650 then
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 256
19248: PUSH
19249: LD_INT 650
19251: LESS
19252: IFFALSE 19350
// begin if not IsInArea ( i , russianRepairArea ) then
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 12
19261: PPUSH
19262: CALL_OW 308
19266: NOT
19267: IFFALSE 19336
// begin SetTag ( i , 0 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 261
19290: PUSH
19291: LD_INT 50
19293: LESS
19294: PUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL_OW 302
19302: AND
19303: IFFALSE 19319
// ComMoveUnit ( i , rufab ) else
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_INT 21
19312: PPUSH
19313: CALL_OW 112
19317: GO 19334
// ComMoveXY ( i , 121 , 99 ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_INT 121
19326: PPUSH
19327: LD_INT 99
19329: PPUSH
19330: CALL_OW 111
// end else
19334: GO 19350
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 311
19345: PPUSH
19346: CALL 76281 0 1
// end ; end ;
19350: GO 19062
19352: POP
19353: POP
// end ;
19354: PPOPN 4
19356: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: LD_INT 6
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: LD_OWVAR 67
19394: ARRAY
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19572
// begin uc_side := 3 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 3
19406: ST_TO_ADDR
// uc_nation := 3 ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 3
19414: ST_TO_ADDR
// InitHC_All ( ) ;
19415: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19419: LD_INT 0
19421: PPUSH
19422: LD_INT 4
19424: PUSH
19425: LD_INT 5
19427: PUSH
19428: LD_INT 6
19430: PUSH
19431: LD_INT 6
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_OWVAR 67
19444: ARRAY
19445: PPUSH
19446: CALL_OW 381
// un := CreateHuman ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: CALL_OW 44
19459: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 127
19467: PPUSH
19468: LD_INT 62
19470: PPUSH
19471: LD_INT 3
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_EXP 48
19490: PPUSH
19491: LD_EXP 48
19495: PUSH
19496: LD_INT 1
19498: PLUS
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: CALL_OW 1
19509: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 83
19517: PPUSH
19518: LD_INT 49
19520: PPUSH
19521: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19525: LD_VAR 0 3
19529: PPUSH
19530: LD_INT 49
19532: PPUSH
19533: LD_INT 43
19535: PPUSH
19536: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 31
19547: PPUSH
19548: LD_INT 15
19550: PPUSH
19551: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 63
19562: PPUSH
19563: LD_INT 9
19565: PPUSH
19566: CALL_OW 174
// end ;
19570: GO 19396
19572: POP
19573: POP
// end ; end_of_file
19574: LD_VAR 0 1
19578: RET
// export function CreateNature ; var i , un ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// for i := 1 to Difficulty + 2 do
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_OWVAR 67
19598: PUSH
19599: LD_INT 2
19601: PLUS
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19713
// begin hc_sex := sex_male ;
19606: LD_ADDR_OWVAR 27
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// uc_side := 0 ;
19614: LD_ADDR_OWVAR 20
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// uc_nation := nation_nature ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// hc_class := class_tiger ;
19630: LD_ADDR_OWVAR 28
19634: PUSH
19635: LD_INT 14
19637: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19638: LD_ADDR_OWVAR 31
19642: PUSH
19643: LD_EXP 35
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19663: LD_ADDR_OWVAR 35
19667: PUSH
19668: LD_INT 5
19670: NEG
19671: PPUSH
19672: LD_INT 5
19674: PPUSH
19675: CALL_OW 12
19679: PUSH
19680: LD_OWVAR 67
19684: MUL
19685: ST_TO_ADDR
// un := CreateHuman ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: CALL_OW 44
19695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 18
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 49
// end ;
19711: GO 19603
19713: POP
19714: POP
// for i = 1 to rand ( 3 , 4 ) do
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 4
19730: PPUSH
19731: CALL_OW 12
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19807
// begin hc_class := class_phororhacos ;
19739: LD_ADDR_OWVAR 28
19743: PUSH
19744: LD_INT 18
19746: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19747: LD_ADDR_OWVAR 31
19751: PUSH
19752: LD_EXP 35
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// hc_agressivity := 0 ;
19772: LD_ADDR_OWVAR 35
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// un = CreateHuman ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: CALL_OW 44
19789: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 18
19797: PPUSH
19798: LD_INT 0
19800: PPUSH
19801: CALL_OW 49
// end ;
19805: GO 19736
19807: POP
19808: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: DOUBLE
19815: LD_INT 1
19817: DEC
19818: ST_TO_ADDR
19819: LD_INT 1
19821: PPUSH
19822: LD_INT 3
19824: PPUSH
19825: CALL_OW 12
19829: PUSH
19830: LD_OWVAR 67
19834: PLUS
19835: PUSH
19836: FOR_TO
19837: IFFALSE 19974
// begin hc_class := class_apeman ;
19839: LD_ADDR_OWVAR 28
19843: PUSH
19844: LD_INT 12
19846: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19847: LD_ADDR_OWVAR 31
19851: PUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 5
19857: PPUSH
19858: CALL_OW 12
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 2
19868: PPUSH
19869: CALL_OW 12
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19886: LD_ADDR_OWVAR 35
19890: PUSH
19891: LD_INT 20
19893: PPUSH
19894: LD_INT 30
19896: PPUSH
19897: CALL_OW 12
19901: PUSH
19902: LD_INT 30
19904: PPUSH
19905: LD_INT 40
19907: PPUSH
19908: CALL_OW 12
19912: PUSH
19913: LD_INT 40
19915: PPUSH
19916: LD_INT 50
19918: PPUSH
19919: CALL_OW 12
19923: PUSH
19924: LD_INT 45
19926: PPUSH
19927: LD_INT 55
19929: PPUSH
19930: CALL_OW 12
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_OWVAR 67
19945: ARRAY
19946: ST_TO_ADDR
// un := CreateHuman ;
19947: LD_ADDR_VAR 0 3
19951: PUSH
19952: CALL_OW 44
19956: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 19
19964: PPUSH
19965: LD_INT 0
19967: PPUSH
19968: CALL_OW 49
// end ;
19972: GO 19836
19974: POP
19975: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_INT 5
19988: PPUSH
19989: LD_INT 6
19991: PPUSH
19992: CALL_OW 12
19996: PUSH
19997: LD_OWVAR 67
20001: PLUS
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20088
// begin hc_class := class_apeman ;
20006: LD_ADDR_OWVAR 28
20010: PUSH
20011: LD_INT 12
20013: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20014: LD_ADDR_OWVAR 31
20018: PUSH
20019: LD_INT 2
20021: PPUSH
20022: LD_INT 5
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: LD_INT 0
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 12
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// hc_agressivity := 0 ;
20053: LD_ADDR_OWVAR 35
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// un = CreateHuman ;
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: CALL_OW 44
20070: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 20
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 49
// end ;
20086: GO 20003
20088: POP
20089: POP
// end ; end_of_file
20090: LD_VAR 0 1
20094: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20095: LD_INT 0
20097: PPUSH
// ar_miner := 81 ;
20098: LD_ADDR_EXP 56
20102: PUSH
20103: LD_INT 81
20105: ST_TO_ADDR
// ar_crane := 88 ;
20106: LD_ADDR_EXP 55
20110: PUSH
20111: LD_INT 88
20113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20114: LD_ADDR_EXP 50
20118: PUSH
20119: LD_INT 89
20121: ST_TO_ADDR
// us_hack := 99 ;
20122: LD_ADDR_EXP 51
20126: PUSH
20127: LD_INT 99
20129: ST_TO_ADDR
// us_artillery := 97 ;
20130: LD_ADDR_EXP 52
20134: PUSH
20135: LD_INT 97
20137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20138: LD_ADDR_EXP 53
20142: PUSH
20143: LD_INT 91
20145: ST_TO_ADDR
// ar_mortar := 92 ;
20146: LD_ADDR_EXP 54
20150: PUSH
20151: LD_INT 92
20153: ST_TO_ADDR
// ru_radar := 98 ;
20154: LD_ADDR_EXP 49
20158: PUSH
20159: LD_INT 98
20161: ST_TO_ADDR
// tech_Artillery := 80 ;
20162: LD_ADDR_EXP 57
20166: PUSH
20167: LD_INT 80
20169: ST_TO_ADDR
// tech_RadMat := 81 ;
20170: LD_ADDR_EXP 58
20174: PUSH
20175: LD_INT 81
20177: ST_TO_ADDR
// tech_BasicTools := 82 ;
20178: LD_ADDR_EXP 59
20182: PUSH
20183: LD_INT 82
20185: ST_TO_ADDR
// tech_Cargo := 83 ;
20186: LD_ADDR_EXP 60
20190: PUSH
20191: LD_INT 83
20193: ST_TO_ADDR
// tech_Track := 84 ;
20194: LD_ADDR_EXP 61
20198: PUSH
20199: LD_INT 84
20201: ST_TO_ADDR
// tech_Crane := 85 ;
20202: LD_ADDR_EXP 62
20206: PUSH
20207: LD_INT 85
20209: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20210: LD_ADDR_EXP 63
20214: PUSH
20215: LD_INT 86
20217: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20218: LD_ADDR_EXP 64
20222: PUSH
20223: LD_INT 87
20225: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20226: LD_ADDR_EXP 65
20230: PUSH
20231: LD_INT 88
20233: ST_TO_ADDR
// class_mastodont := 31 ;
20234: LD_ADDR_EXP 66
20238: PUSH
20239: LD_INT 31
20241: ST_TO_ADDR
// class_horse := 21 ;
20242: LD_ADDR_EXP 67
20246: PUSH
20247: LD_INT 21
20249: ST_TO_ADDR
// end ;
20250: LD_VAR 0 1
20254: RET
// every 1 do
20255: GO 20257
20257: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20258: CALL 20095 0 0
20262: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20263: LD_INT 0
20265: PPUSH
// if p2 = 100 then
20266: LD_VAR 0 2
20270: PUSH
20271: LD_INT 100
20273: EQUAL
20274: IFFALSE 21277
// begin if not StreamModeActive then
20276: LD_EXP 68
20280: NOT
20281: IFFALSE 20291
// StreamModeActive := true ;
20283: LD_ADDR_EXP 68
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 0 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 0
20298: EQUAL
20299: IFFALSE 20305
// InitStreamMode ;
20301: CALL 21437 0 0
// if p3 = 1 then
20305: LD_VAR 0 3
20309: PUSH
20310: LD_INT 1
20312: EQUAL
20313: IFFALSE 20323
// sRocket := true ;
20315: LD_ADDR_EXP 73
20319: PUSH
20320: LD_INT 1
20322: ST_TO_ADDR
// if p3 = 2 then
20323: LD_VAR 0 3
20327: PUSH
20328: LD_INT 2
20330: EQUAL
20331: IFFALSE 20341
// sSpeed := true ;
20333: LD_ADDR_EXP 72
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if p3 = 3 then
20341: LD_VAR 0 3
20345: PUSH
20346: LD_INT 3
20348: EQUAL
20349: IFFALSE 20359
// sEngine := true ;
20351: LD_ADDR_EXP 74
20355: PUSH
20356: LD_INT 1
20358: ST_TO_ADDR
// if p3 = 4 then
20359: LD_VAR 0 3
20363: PUSH
20364: LD_INT 4
20366: EQUAL
20367: IFFALSE 20377
// sSpec := true ;
20369: LD_ADDR_EXP 71
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// if p3 = 5 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 5
20384: EQUAL
20385: IFFALSE 20395
// sLevel := true ;
20387: LD_ADDR_EXP 75
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 6 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 6
20402: EQUAL
20403: IFFALSE 20413
// sArmoury := true ;
20405: LD_ADDR_EXP 76
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 7 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 7
20420: EQUAL
20421: IFFALSE 20431
// sRadar := true ;
20423: LD_ADDR_EXP 77
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 8 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 8
20438: EQUAL
20439: IFFALSE 20449
// sBunker := true ;
20441: LD_ADDR_EXP 78
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 9 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 9
20456: EQUAL
20457: IFFALSE 20467
// sHack := true ;
20459: LD_ADDR_EXP 79
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 10 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 10
20474: EQUAL
20475: IFFALSE 20485
// sFire := true ;
20477: LD_ADDR_EXP 80
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 11 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 11
20492: EQUAL
20493: IFFALSE 20503
// sRefresh := true ;
20495: LD_ADDR_EXP 81
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 12 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 12
20510: EQUAL
20511: IFFALSE 20521
// sExp := true ;
20513: LD_ADDR_EXP 82
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 13 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 13
20528: EQUAL
20529: IFFALSE 20539
// sDepot := true ;
20531: LD_ADDR_EXP 83
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 14 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 14
20546: EQUAL
20547: IFFALSE 20557
// sFlag := true ;
20549: LD_ADDR_EXP 84
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 15 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 15
20564: EQUAL
20565: IFFALSE 20575
// sKamikadze := true ;
20567: LD_ADDR_EXP 92
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 16 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 16
20582: EQUAL
20583: IFFALSE 20593
// sTroll := true ;
20585: LD_ADDR_EXP 93
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 17 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 17
20600: EQUAL
20601: IFFALSE 20611
// sSlow := true ;
20603: LD_ADDR_EXP 94
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 18 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 18
20618: EQUAL
20619: IFFALSE 20629
// sLack := true ;
20621: LD_ADDR_EXP 95
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 19 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 19
20636: EQUAL
20637: IFFALSE 20647
// sTank := true ;
20639: LD_ADDR_EXP 97
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 20 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 20
20654: EQUAL
20655: IFFALSE 20665
// sRemote := true ;
20657: LD_ADDR_EXP 98
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 21 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 21
20672: EQUAL
20673: IFFALSE 20683
// sPowell := true ;
20675: LD_ADDR_EXP 99
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 22 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 22
20690: EQUAL
20691: IFFALSE 20701
// sTeleport := true ;
20693: LD_ADDR_EXP 102
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 23 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 23
20708: EQUAL
20709: IFFALSE 20719
// sOilTower := true ;
20711: LD_ADDR_EXP 104
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// if p3 = 24 then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_INT 24
20726: EQUAL
20727: IFFALSE 20737
// sShovel := true ;
20729: LD_ADDR_EXP 105
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 25 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 25
20744: EQUAL
20745: IFFALSE 20755
// sSheik := true ;
20747: LD_ADDR_EXP 106
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if p3 = 26 then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 26
20762: EQUAL
20763: IFFALSE 20773
// sEarthquake := true ;
20765: LD_ADDR_EXP 108
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// if p3 = 27 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 27
20780: EQUAL
20781: IFFALSE 20791
// sAI := true ;
20783: LD_ADDR_EXP 109
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// if p3 = 28 then
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 28
20798: EQUAL
20799: IFFALSE 20809
// sCargo := true ;
20801: LD_ADDR_EXP 112
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// if p3 = 29 then
20809: LD_VAR 0 3
20813: PUSH
20814: LD_INT 29
20816: EQUAL
20817: IFFALSE 20827
// sDLaser := true ;
20819: LD_ADDR_EXP 113
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// if p3 = 30 then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_INT 30
20834: EQUAL
20835: IFFALSE 20845
// sExchange := true ;
20837: LD_ADDR_EXP 114
20841: PUSH
20842: LD_INT 1
20844: ST_TO_ADDR
// if p3 = 31 then
20845: LD_VAR 0 3
20849: PUSH
20850: LD_INT 31
20852: EQUAL
20853: IFFALSE 20863
// sFac := true ;
20855: LD_ADDR_EXP 115
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// if p3 = 32 then
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 32
20870: EQUAL
20871: IFFALSE 20881
// sPower := true ;
20873: LD_ADDR_EXP 116
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// if p3 = 33 then
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 33
20888: EQUAL
20889: IFFALSE 20899
// sRandom := true ;
20891: LD_ADDR_EXP 117
20895: PUSH
20896: LD_INT 1
20898: ST_TO_ADDR
// if p3 = 34 then
20899: LD_VAR 0 3
20903: PUSH
20904: LD_INT 34
20906: EQUAL
20907: IFFALSE 20917
// sShield := true ;
20909: LD_ADDR_EXP 118
20913: PUSH
20914: LD_INT 1
20916: ST_TO_ADDR
// if p3 = 35 then
20917: LD_VAR 0 3
20921: PUSH
20922: LD_INT 35
20924: EQUAL
20925: IFFALSE 20935
// sTime := true ;
20927: LD_ADDR_EXP 119
20931: PUSH
20932: LD_INT 1
20934: ST_TO_ADDR
// if p3 = 36 then
20935: LD_VAR 0 3
20939: PUSH
20940: LD_INT 36
20942: EQUAL
20943: IFFALSE 20953
// sTools := true ;
20945: LD_ADDR_EXP 120
20949: PUSH
20950: LD_INT 1
20952: ST_TO_ADDR
// if p3 = 101 then
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 101
20960: EQUAL
20961: IFFALSE 20971
// sSold := true ;
20963: LD_ADDR_EXP 85
20967: PUSH
20968: LD_INT 1
20970: ST_TO_ADDR
// if p3 = 102 then
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 102
20978: EQUAL
20979: IFFALSE 20989
// sDiff := true ;
20981: LD_ADDR_EXP 86
20985: PUSH
20986: LD_INT 1
20988: ST_TO_ADDR
// if p3 = 103 then
20989: LD_VAR 0 3
20993: PUSH
20994: LD_INT 103
20996: EQUAL
20997: IFFALSE 21007
// sFog := true ;
20999: LD_ADDR_EXP 89
21003: PUSH
21004: LD_INT 1
21006: ST_TO_ADDR
// if p3 = 104 then
21007: LD_VAR 0 3
21011: PUSH
21012: LD_INT 104
21014: EQUAL
21015: IFFALSE 21025
// sReset := true ;
21017: LD_ADDR_EXP 90
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// if p3 = 105 then
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 105
21032: EQUAL
21033: IFFALSE 21043
// sSun := true ;
21035: LD_ADDR_EXP 91
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// if p3 = 106 then
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 106
21050: EQUAL
21051: IFFALSE 21061
// sTiger := true ;
21053: LD_ADDR_EXP 87
21057: PUSH
21058: LD_INT 1
21060: ST_TO_ADDR
// if p3 = 107 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_INT 107
21068: EQUAL
21069: IFFALSE 21079
// sBomb := true ;
21071: LD_ADDR_EXP 88
21075: PUSH
21076: LD_INT 1
21078: ST_TO_ADDR
// if p3 = 108 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_INT 108
21086: EQUAL
21087: IFFALSE 21097
// sWound := true ;
21089: LD_ADDR_EXP 96
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// if p3 = 109 then
21097: LD_VAR 0 3
21101: PUSH
21102: LD_INT 109
21104: EQUAL
21105: IFFALSE 21115
// sBetray := true ;
21107: LD_ADDR_EXP 100
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
// if p3 = 110 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 110
21122: EQUAL
21123: IFFALSE 21133
// sContamin := true ;
21125: LD_ADDR_EXP 101
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// if p3 = 111 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 111
21140: EQUAL
21141: IFFALSE 21151
// sOil := true ;
21143: LD_ADDR_EXP 103
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if p3 = 112 then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 112
21158: EQUAL
21159: IFFALSE 21169
// sStu := true ;
21161: LD_ADDR_EXP 107
21165: PUSH
21166: LD_INT 1
21168: ST_TO_ADDR
// if p3 = 113 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 113
21176: EQUAL
21177: IFFALSE 21187
// sBazooka := true ;
21179: LD_ADDR_EXP 110
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 114 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 114
21194: EQUAL
21195: IFFALSE 21205
// sMortar := true ;
21197: LD_ADDR_EXP 111
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 115 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 115
21212: EQUAL
21213: IFFALSE 21223
// sRanger := true ;
21215: LD_ADDR_EXP 121
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// if p3 = 116 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 116
21230: EQUAL
21231: IFFALSE 21241
// sComputer := true ;
21233: LD_ADDR_EXP 122
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if p3 = 117 then
21241: LD_VAR 0 3
21245: PUSH
21246: LD_INT 117
21248: EQUAL
21249: IFFALSE 21259
// s30 := true ;
21251: LD_ADDR_EXP 123
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// if p3 = 118 then
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 118
21266: EQUAL
21267: IFFALSE 21277
// s60 := true ;
21269: LD_ADDR_EXP 124
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// end ; if p2 = 101 then
21277: LD_VAR 0 2
21281: PUSH
21282: LD_INT 101
21284: EQUAL
21285: IFFALSE 21413
// begin case p3 of 1 :
21287: LD_VAR 0 3
21291: PUSH
21292: LD_INT 1
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21307
21300: POP
// hHackUnlimitedResources ; 2 :
21301: CALL 33009 0 0
21305: GO 21413
21307: LD_INT 2
21309: DOUBLE
21310: EQUAL
21311: IFTRUE 21315
21313: GO 21322
21315: POP
// hHackSetLevel10 ; 3 :
21316: CALL 33142 0 0
21320: GO 21413
21322: LD_INT 3
21324: DOUBLE
21325: EQUAL
21326: IFTRUE 21330
21328: GO 21337
21330: POP
// hHackSetLevel10YourUnits ; 4 :
21331: CALL 33227 0 0
21335: GO 21413
21337: LD_INT 4
21339: DOUBLE
21340: EQUAL
21341: IFTRUE 21345
21343: GO 21352
21345: POP
// hHackInvincible ; 5 :
21346: CALL 33675 0 0
21350: GO 21413
21352: LD_INT 5
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21367
21360: POP
// hHackInvisible ; 6 :
21361: CALL 33786 0 0
21365: GO 21413
21367: LD_INT 6
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21382
21375: POP
// hHackChangeYourSide ; 7 :
21376: CALL 33843 0 0
21380: GO 21413
21382: LD_INT 7
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21397
21390: POP
// hHackChangeUnitSide ; 8 :
21391: CALL 33885 0 0
21395: GO 21413
21397: LD_INT 8
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21412
21405: POP
// hHackFog ; end ;
21406: CALL 33986 0 0
21410: GO 21413
21412: POP
// end ; end ;
21413: LD_VAR 0 7
21417: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21418: GO 21420
21420: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21421: LD_STRING initStreamRollete();
21423: PPUSH
21424: CALL_OW 559
// InitStreamMode ;
21428: CALL 21437 0 0
// DefineStreamItems ( ) ;
21432: CALL 21901 0 0
// end ;
21436: END
// function InitStreamMode ; begin
21437: LD_INT 0
21439: PPUSH
// streamModeActive := false ;
21440: LD_ADDR_EXP 68
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// normalCounter := 36 ;
21448: LD_ADDR_EXP 69
21452: PUSH
21453: LD_INT 36
21455: ST_TO_ADDR
// hardcoreCounter := 16 ;
21456: LD_ADDR_EXP 70
21460: PUSH
21461: LD_INT 16
21463: ST_TO_ADDR
// sRocket := false ;
21464: LD_ADDR_EXP 73
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sSpeed := false ;
21472: LD_ADDR_EXP 72
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sEngine := false ;
21480: LD_ADDR_EXP 74
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sSpec := false ;
21488: LD_ADDR_EXP 71
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sLevel := false ;
21496: LD_ADDR_EXP 75
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sArmoury := false ;
21504: LD_ADDR_EXP 76
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sRadar := false ;
21512: LD_ADDR_EXP 77
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sBunker := false ;
21520: LD_ADDR_EXP 78
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sHack := false ;
21528: LD_ADDR_EXP 79
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sFire := false ;
21536: LD_ADDR_EXP 80
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sRefresh := false ;
21544: LD_ADDR_EXP 81
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sExp := false ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sDepot := false ;
21560: LD_ADDR_EXP 83
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sFlag := false ;
21568: LD_ADDR_EXP 84
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sKamikadze := false ;
21576: LD_ADDR_EXP 92
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sTroll := false ;
21584: LD_ADDR_EXP 93
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sSlow := false ;
21592: LD_ADDR_EXP 94
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sLack := false ;
21600: LD_ADDR_EXP 95
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sTank := false ;
21608: LD_ADDR_EXP 97
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sRemote := false ;
21616: LD_ADDR_EXP 98
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sPowell := false ;
21624: LD_ADDR_EXP 99
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sTeleport := false ;
21632: LD_ADDR_EXP 102
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sOilTower := false ;
21640: LD_ADDR_EXP 104
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sShovel := false ;
21648: LD_ADDR_EXP 105
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sSheik := false ;
21656: LD_ADDR_EXP 106
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// sEarthquake := false ;
21664: LD_ADDR_EXP 108
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// sAI := false ;
21672: LD_ADDR_EXP 109
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// sCargo := false ;
21680: LD_ADDR_EXP 112
21684: PUSH
21685: LD_INT 0
21687: ST_TO_ADDR
// sDLaser := false ;
21688: LD_ADDR_EXP 113
21692: PUSH
21693: LD_INT 0
21695: ST_TO_ADDR
// sExchange := false ;
21696: LD_ADDR_EXP 114
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// sFac := false ;
21704: LD_ADDR_EXP 115
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// sPower := false ;
21712: LD_ADDR_EXP 116
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// sRandom := false ;
21720: LD_ADDR_EXP 117
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// sShield := false ;
21728: LD_ADDR_EXP 118
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sTime := false ;
21736: LD_ADDR_EXP 119
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sTools := false ;
21744: LD_ADDR_EXP 120
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sSold := false ;
21752: LD_ADDR_EXP 85
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sDiff := false ;
21760: LD_ADDR_EXP 86
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sFog := false ;
21768: LD_ADDR_EXP 89
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sReset := false ;
21776: LD_ADDR_EXP 90
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sSun := false ;
21784: LD_ADDR_EXP 91
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sTiger := false ;
21792: LD_ADDR_EXP 87
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sBomb := false ;
21800: LD_ADDR_EXP 88
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sWound := false ;
21808: LD_ADDR_EXP 96
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sBetray := false ;
21816: LD_ADDR_EXP 100
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sContamin := false ;
21824: LD_ADDR_EXP 101
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sOil := false ;
21832: LD_ADDR_EXP 103
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sStu := false ;
21840: LD_ADDR_EXP 107
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sBazooka := false ;
21848: LD_ADDR_EXP 110
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sMortar := false ;
21856: LD_ADDR_EXP 111
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sRanger := false ;
21864: LD_ADDR_EXP 121
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sComputer := false ;
21872: LD_ADDR_EXP 122
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// s30 := false ;
21880: LD_ADDR_EXP 123
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// s60 := false ;
21888: LD_ADDR_EXP 124
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// end ;
21896: LD_VAR 0 1
21900: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21901: LD_INT 0
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
// result := [ ] ;
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: EMPTY
21914: ST_TO_ADDR
// if campaign_id = 1 then
21915: LD_OWVAR 69
21919: PUSH
21920: LD_INT 1
21922: EQUAL
21923: IFFALSE 25089
// begin case mission_number of 1 :
21925: LD_OWVAR 70
21929: PUSH
21930: LD_INT 1
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22014
21938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 4
21949: PUSH
21950: LD_INT 11
21952: PUSH
21953: LD_INT 12
21955: PUSH
21956: LD_INT 15
21958: PUSH
21959: LD_INT 16
21961: PUSH
21962: LD_INT 22
21964: PUSH
21965: LD_INT 23
21967: PUSH
21968: LD_INT 26
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 101
21984: PUSH
21985: LD_INT 102
21987: PUSH
21988: LD_INT 106
21990: PUSH
21991: LD_INT 116
21993: PUSH
21994: LD_INT 117
21996: PUSH
21997: LD_INT 118
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: ST_TO_ADDR
22012: GO 25087
22014: LD_INT 2
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22106
22022: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22023: LD_ADDR_VAR 0 1
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: LD_INT 4
22033: PUSH
22034: LD_INT 11
22036: PUSH
22037: LD_INT 12
22039: PUSH
22040: LD_INT 15
22042: PUSH
22043: LD_INT 16
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_INT 23
22051: PUSH
22052: LD_INT 26
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 101
22068: PUSH
22069: LD_INT 102
22071: PUSH
22072: LD_INT 105
22074: PUSH
22075: LD_INT 106
22077: PUSH
22078: LD_INT 108
22080: PUSH
22081: LD_INT 116
22083: PUSH
22084: LD_INT 117
22086: PUSH
22087: LD_INT 118
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: ST_TO_ADDR
22104: GO 25087
22106: LD_INT 3
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22202
22114: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22115: LD_ADDR_VAR 0 1
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 4
22125: PUSH
22126: LD_INT 5
22128: PUSH
22129: LD_INT 11
22131: PUSH
22132: LD_INT 12
22134: PUSH
22135: LD_INT 15
22137: PUSH
22138: LD_INT 16
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_INT 26
22146: PUSH
22147: LD_INT 36
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 101
22164: PUSH
22165: LD_INT 102
22167: PUSH
22168: LD_INT 105
22170: PUSH
22171: LD_INT 106
22173: PUSH
22174: LD_INT 108
22176: PUSH
22177: LD_INT 116
22179: PUSH
22180: LD_INT 117
22182: PUSH
22183: LD_INT 118
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: ST_TO_ADDR
22200: GO 25087
22202: LD_INT 4
22204: DOUBLE
22205: EQUAL
22206: IFTRUE 22210
22208: GO 22306
22210: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22211: LD_ADDR_VAR 0 1
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 4
22221: PUSH
22222: LD_INT 5
22224: PUSH
22225: LD_INT 8
22227: PUSH
22228: LD_INT 11
22230: PUSH
22231: LD_INT 12
22233: PUSH
22234: LD_INT 15
22236: PUSH
22237: LD_INT 16
22239: PUSH
22240: LD_INT 22
22242: PUSH
22243: LD_INT 23
22245: PUSH
22246: LD_INT 26
22248: PUSH
22249: LD_INT 36
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 101
22268: PUSH
22269: LD_INT 102
22271: PUSH
22272: LD_INT 105
22274: PUSH
22275: LD_INT 106
22277: PUSH
22278: LD_INT 108
22280: PUSH
22281: LD_INT 116
22283: PUSH
22284: LD_INT 117
22286: PUSH
22287: LD_INT 118
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: ST_TO_ADDR
22304: GO 25087
22306: LD_INT 5
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22426
22314: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22315: LD_ADDR_VAR 0 1
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: LD_INT 5
22328: PUSH
22329: LD_INT 6
22331: PUSH
22332: LD_INT 8
22334: PUSH
22335: LD_INT 11
22337: PUSH
22338: LD_INT 12
22340: PUSH
22341: LD_INT 15
22343: PUSH
22344: LD_INT 16
22346: PUSH
22347: LD_INT 22
22349: PUSH
22350: LD_INT 23
22352: PUSH
22353: LD_INT 25
22355: PUSH
22356: LD_INT 26
22358: PUSH
22359: LD_INT 36
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 101
22380: PUSH
22381: LD_INT 102
22383: PUSH
22384: LD_INT 105
22386: PUSH
22387: LD_INT 106
22389: PUSH
22390: LD_INT 108
22392: PUSH
22393: LD_INT 109
22395: PUSH
22396: LD_INT 112
22398: PUSH
22399: LD_INT 116
22401: PUSH
22402: LD_INT 117
22404: PUSH
22405: LD_INT 118
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: ST_TO_ADDR
22424: GO 25087
22426: LD_INT 6
22428: DOUBLE
22429: EQUAL
22430: IFTRUE 22434
22432: GO 22566
22434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 4
22445: PUSH
22446: LD_INT 5
22448: PUSH
22449: LD_INT 6
22451: PUSH
22452: LD_INT 8
22454: PUSH
22455: LD_INT 11
22457: PUSH
22458: LD_INT 12
22460: PUSH
22461: LD_INT 15
22463: PUSH
22464: LD_INT 16
22466: PUSH
22467: LD_INT 20
22469: PUSH
22470: LD_INT 21
22472: PUSH
22473: LD_INT 22
22475: PUSH
22476: LD_INT 23
22478: PUSH
22479: LD_INT 25
22481: PUSH
22482: LD_INT 26
22484: PUSH
22485: LD_INT 30
22487: PUSH
22488: LD_INT 31
22490: PUSH
22491: LD_INT 32
22493: PUSH
22494: LD_INT 36
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 101
22520: PUSH
22521: LD_INT 102
22523: PUSH
22524: LD_INT 105
22526: PUSH
22527: LD_INT 106
22529: PUSH
22530: LD_INT 108
22532: PUSH
22533: LD_INT 109
22535: PUSH
22536: LD_INT 112
22538: PUSH
22539: LD_INT 116
22541: PUSH
22542: LD_INT 117
22544: PUSH
22545: LD_INT 118
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: ST_TO_ADDR
22564: GO 25087
22566: LD_INT 7
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22574
22572: GO 22686
22574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22575: LD_ADDR_VAR 0 1
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: LD_INT 4
22585: PUSH
22586: LD_INT 5
22588: PUSH
22589: LD_INT 7
22591: PUSH
22592: LD_INT 11
22594: PUSH
22595: LD_INT 12
22597: PUSH
22598: LD_INT 15
22600: PUSH
22601: LD_INT 16
22603: PUSH
22604: LD_INT 20
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 25
22618: PUSH
22619: LD_INT 26
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 101
22640: PUSH
22641: LD_INT 102
22643: PUSH
22644: LD_INT 103
22646: PUSH
22647: LD_INT 105
22649: PUSH
22650: LD_INT 106
22652: PUSH
22653: LD_INT 108
22655: PUSH
22656: LD_INT 112
22658: PUSH
22659: LD_INT 116
22661: PUSH
22662: LD_INT 117
22664: PUSH
22665: LD_INT 118
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
22684: GO 25087
22686: LD_INT 8
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22834
22694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22695: LD_ADDR_VAR 0 1
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: LD_INT 4
22705: PUSH
22706: LD_INT 5
22708: PUSH
22709: LD_INT 6
22711: PUSH
22712: LD_INT 7
22714: PUSH
22715: LD_INT 8
22717: PUSH
22718: LD_INT 11
22720: PUSH
22721: LD_INT 12
22723: PUSH
22724: LD_INT 15
22726: PUSH
22727: LD_INT 16
22729: PUSH
22730: LD_INT 20
22732: PUSH
22733: LD_INT 21
22735: PUSH
22736: LD_INT 22
22738: PUSH
22739: LD_INT 23
22741: PUSH
22742: LD_INT 25
22744: PUSH
22745: LD_INT 26
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 31
22753: PUSH
22754: LD_INT 32
22756: PUSH
22757: LD_INT 36
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 101
22784: PUSH
22785: LD_INT 102
22787: PUSH
22788: LD_INT 103
22790: PUSH
22791: LD_INT 105
22793: PUSH
22794: LD_INT 106
22796: PUSH
22797: LD_INT 108
22799: PUSH
22800: LD_INT 109
22802: PUSH
22803: LD_INT 112
22805: PUSH
22806: LD_INT 116
22808: PUSH
22809: LD_INT 117
22811: PUSH
22812: LD_INT 118
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 25087
22834: LD_INT 9
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22990
22842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22843: LD_ADDR_VAR 0 1
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 4
22853: PUSH
22854: LD_INT 5
22856: PUSH
22857: LD_INT 6
22859: PUSH
22860: LD_INT 7
22862: PUSH
22863: LD_INT 8
22865: PUSH
22866: LD_INT 11
22868: PUSH
22869: LD_INT 12
22871: PUSH
22872: LD_INT 15
22874: PUSH
22875: LD_INT 16
22877: PUSH
22878: LD_INT 20
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_INT 23
22889: PUSH
22890: LD_INT 25
22892: PUSH
22893: LD_INT 26
22895: PUSH
22896: LD_INT 28
22898: PUSH
22899: LD_INT 30
22901: PUSH
22902: LD_INT 31
22904: PUSH
22905: LD_INT 32
22907: PUSH
22908: LD_INT 36
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 101
22936: PUSH
22937: LD_INT 102
22939: PUSH
22940: LD_INT 103
22942: PUSH
22943: LD_INT 105
22945: PUSH
22946: LD_INT 106
22948: PUSH
22949: LD_INT 108
22951: PUSH
22952: LD_INT 109
22954: PUSH
22955: LD_INT 112
22957: PUSH
22958: LD_INT 114
22960: PUSH
22961: LD_INT 116
22963: PUSH
22964: LD_INT 117
22966: PUSH
22967: LD_INT 118
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: ST_TO_ADDR
22988: GO 25087
22990: LD_INT 10
22992: DOUBLE
22993: EQUAL
22994: IFTRUE 22998
22996: GO 23194
22998: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22999: LD_ADDR_VAR 0 1
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: LD_INT 4
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 6
23015: PUSH
23016: LD_INT 7
23018: PUSH
23019: LD_INT 8
23021: PUSH
23022: LD_INT 9
23024: PUSH
23025: LD_INT 10
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 13
23036: PUSH
23037: LD_INT 14
23039: PUSH
23040: LD_INT 15
23042: PUSH
23043: LD_INT 16
23045: PUSH
23046: LD_INT 17
23048: PUSH
23049: LD_INT 18
23051: PUSH
23052: LD_INT 19
23054: PUSH
23055: LD_INT 20
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_INT 23
23066: PUSH
23067: LD_INT 24
23069: PUSH
23070: LD_INT 25
23072: PUSH
23073: LD_INT 26
23075: PUSH
23076: LD_INT 28
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 31
23084: PUSH
23085: LD_INT 32
23087: PUSH
23088: LD_INT 36
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 101
23124: PUSH
23125: LD_INT 102
23127: PUSH
23128: LD_INT 103
23130: PUSH
23131: LD_INT 104
23133: PUSH
23134: LD_INT 105
23136: PUSH
23137: LD_INT 106
23139: PUSH
23140: LD_INT 107
23142: PUSH
23143: LD_INT 108
23145: PUSH
23146: LD_INT 109
23148: PUSH
23149: LD_INT 110
23151: PUSH
23152: LD_INT 111
23154: PUSH
23155: LD_INT 112
23157: PUSH
23158: LD_INT 114
23160: PUSH
23161: LD_INT 116
23163: PUSH
23164: LD_INT 117
23166: PUSH
23167: LD_INT 118
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: ST_TO_ADDR
23192: GO 25087
23194: LD_INT 11
23196: DOUBLE
23197: EQUAL
23198: IFTRUE 23202
23200: GO 23406
23202: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 4
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: LD_INT 6
23222: PUSH
23223: LD_INT 7
23225: PUSH
23226: LD_INT 8
23228: PUSH
23229: LD_INT 9
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 13
23243: PUSH
23244: LD_INT 14
23246: PUSH
23247: LD_INT 15
23249: PUSH
23250: LD_INT 16
23252: PUSH
23253: LD_INT 17
23255: PUSH
23256: LD_INT 18
23258: PUSH
23259: LD_INT 19
23261: PUSH
23262: LD_INT 20
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_INT 23
23273: PUSH
23274: LD_INT 24
23276: PUSH
23277: LD_INT 25
23279: PUSH
23280: LD_INT 26
23282: PUSH
23283: LD_INT 28
23285: PUSH
23286: LD_INT 30
23288: PUSH
23289: LD_INT 31
23291: PUSH
23292: LD_INT 32
23294: PUSH
23295: LD_INT 34
23297: PUSH
23298: LD_INT 36
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 101
23336: PUSH
23337: LD_INT 102
23339: PUSH
23340: LD_INT 103
23342: PUSH
23343: LD_INT 104
23345: PUSH
23346: LD_INT 105
23348: PUSH
23349: LD_INT 106
23351: PUSH
23352: LD_INT 107
23354: PUSH
23355: LD_INT 108
23357: PUSH
23358: LD_INT 109
23360: PUSH
23361: LD_INT 110
23363: PUSH
23364: LD_INT 111
23366: PUSH
23367: LD_INT 112
23369: PUSH
23370: LD_INT 114
23372: PUSH
23373: LD_INT 116
23375: PUSH
23376: LD_INT 117
23378: PUSH
23379: LD_INT 118
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 25087
23406: LD_INT 12
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23634
23414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23415: LD_ADDR_VAR 0 1
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: LD_INT 4
23431: PUSH
23432: LD_INT 5
23434: PUSH
23435: LD_INT 6
23437: PUSH
23438: LD_INT 7
23440: PUSH
23441: LD_INT 8
23443: PUSH
23444: LD_INT 9
23446: PUSH
23447: LD_INT 10
23449: PUSH
23450: LD_INT 11
23452: PUSH
23453: LD_INT 12
23455: PUSH
23456: LD_INT 13
23458: PUSH
23459: LD_INT 14
23461: PUSH
23462: LD_INT 15
23464: PUSH
23465: LD_INT 16
23467: PUSH
23468: LD_INT 17
23470: PUSH
23471: LD_INT 18
23473: PUSH
23474: LD_INT 19
23476: PUSH
23477: LD_INT 20
23479: PUSH
23480: LD_INT 21
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: LD_INT 25
23494: PUSH
23495: LD_INT 26
23497: PUSH
23498: LD_INT 27
23500: PUSH
23501: LD_INT 28
23503: PUSH
23504: LD_INT 30
23506: PUSH
23507: LD_INT 31
23509: PUSH
23510: LD_INT 32
23512: PUSH
23513: LD_INT 33
23515: PUSH
23516: LD_INT 34
23518: PUSH
23519: LD_INT 36
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 101
23560: PUSH
23561: LD_INT 102
23563: PUSH
23564: LD_INT 103
23566: PUSH
23567: LD_INT 104
23569: PUSH
23570: LD_INT 105
23572: PUSH
23573: LD_INT 106
23575: PUSH
23576: LD_INT 107
23578: PUSH
23579: LD_INT 108
23581: PUSH
23582: LD_INT 109
23584: PUSH
23585: LD_INT 110
23587: PUSH
23588: LD_INT 111
23590: PUSH
23591: LD_INT 112
23593: PUSH
23594: LD_INT 113
23596: PUSH
23597: LD_INT 114
23599: PUSH
23600: LD_INT 116
23602: PUSH
23603: LD_INT 117
23605: PUSH
23606: LD_INT 118
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: ST_TO_ADDR
23632: GO 25087
23634: LD_INT 13
23636: DOUBLE
23637: EQUAL
23638: IFTRUE 23642
23640: GO 23850
23642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23643: LD_ADDR_VAR 0 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 3
23656: PUSH
23657: LD_INT 4
23659: PUSH
23660: LD_INT 5
23662: PUSH
23663: LD_INT 8
23665: PUSH
23666: LD_INT 9
23668: PUSH
23669: LD_INT 10
23671: PUSH
23672: LD_INT 11
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 14
23680: PUSH
23681: LD_INT 15
23683: PUSH
23684: LD_INT 16
23686: PUSH
23687: LD_INT 17
23689: PUSH
23690: LD_INT 18
23692: PUSH
23693: LD_INT 19
23695: PUSH
23696: LD_INT 20
23698: PUSH
23699: LD_INT 21
23701: PUSH
23702: LD_INT 22
23704: PUSH
23705: LD_INT 23
23707: PUSH
23708: LD_INT 24
23710: PUSH
23711: LD_INT 25
23713: PUSH
23714: LD_INT 26
23716: PUSH
23717: LD_INT 27
23719: PUSH
23720: LD_INT 28
23722: PUSH
23723: LD_INT 30
23725: PUSH
23726: LD_INT 31
23728: PUSH
23729: LD_INT 32
23731: PUSH
23732: LD_INT 33
23734: PUSH
23735: LD_INT 34
23737: PUSH
23738: LD_INT 36
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 101
23776: PUSH
23777: LD_INT 102
23779: PUSH
23780: LD_INT 103
23782: PUSH
23783: LD_INT 104
23785: PUSH
23786: LD_INT 105
23788: PUSH
23789: LD_INT 106
23791: PUSH
23792: LD_INT 107
23794: PUSH
23795: LD_INT 108
23797: PUSH
23798: LD_INT 109
23800: PUSH
23801: LD_INT 110
23803: PUSH
23804: LD_INT 111
23806: PUSH
23807: LD_INT 112
23809: PUSH
23810: LD_INT 113
23812: PUSH
23813: LD_INT 114
23815: PUSH
23816: LD_INT 116
23818: PUSH
23819: LD_INT 117
23821: PUSH
23822: LD_INT 118
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: ST_TO_ADDR
23848: GO 25087
23850: LD_INT 14
23852: DOUBLE
23853: EQUAL
23854: IFTRUE 23858
23856: GO 24082
23858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23859: LD_ADDR_VAR 0 1
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 3
23872: PUSH
23873: LD_INT 4
23875: PUSH
23876: LD_INT 5
23878: PUSH
23879: LD_INT 6
23881: PUSH
23882: LD_INT 7
23884: PUSH
23885: LD_INT 8
23887: PUSH
23888: LD_INT 9
23890: PUSH
23891: LD_INT 10
23893: PUSH
23894: LD_INT 11
23896: PUSH
23897: LD_INT 12
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: LD_INT 15
23908: PUSH
23909: LD_INT 16
23911: PUSH
23912: LD_INT 17
23914: PUSH
23915: LD_INT 18
23917: PUSH
23918: LD_INT 19
23920: PUSH
23921: LD_INT 20
23923: PUSH
23924: LD_INT 21
23926: PUSH
23927: LD_INT 22
23929: PUSH
23930: LD_INT 23
23932: PUSH
23933: LD_INT 24
23935: PUSH
23936: LD_INT 25
23938: PUSH
23939: LD_INT 26
23941: PUSH
23942: LD_INT 27
23944: PUSH
23945: LD_INT 28
23947: PUSH
23948: LD_INT 29
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 31
23956: PUSH
23957: LD_INT 32
23959: PUSH
23960: LD_INT 33
23962: PUSH
23963: LD_INT 34
23965: PUSH
23966: LD_INT 36
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 101
24008: PUSH
24009: LD_INT 102
24011: PUSH
24012: LD_INT 103
24014: PUSH
24015: LD_INT 104
24017: PUSH
24018: LD_INT 105
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 107
24026: PUSH
24027: LD_INT 108
24029: PUSH
24030: LD_INT 109
24032: PUSH
24033: LD_INT 110
24035: PUSH
24036: LD_INT 111
24038: PUSH
24039: LD_INT 112
24041: PUSH
24042: LD_INT 113
24044: PUSH
24045: LD_INT 114
24047: PUSH
24048: LD_INT 116
24050: PUSH
24051: LD_INT 117
24053: PUSH
24054: LD_INT 118
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: ST_TO_ADDR
24080: GO 25087
24082: LD_INT 15
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24090
24088: GO 24314
24090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24091: LD_ADDR_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: LD_INT 6
24113: PUSH
24114: LD_INT 7
24116: PUSH
24117: LD_INT 8
24119: PUSH
24120: LD_INT 9
24122: PUSH
24123: LD_INT 10
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 13
24134: PUSH
24135: LD_INT 14
24137: PUSH
24138: LD_INT 15
24140: PUSH
24141: LD_INT 16
24143: PUSH
24144: LD_INT 17
24146: PUSH
24147: LD_INT 18
24149: PUSH
24150: LD_INT 19
24152: PUSH
24153: LD_INT 20
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_INT 23
24164: PUSH
24165: LD_INT 24
24167: PUSH
24168: LD_INT 25
24170: PUSH
24171: LD_INT 26
24173: PUSH
24174: LD_INT 27
24176: PUSH
24177: LD_INT 28
24179: PUSH
24180: LD_INT 29
24182: PUSH
24183: LD_INT 30
24185: PUSH
24186: LD_INT 31
24188: PUSH
24189: LD_INT 32
24191: PUSH
24192: LD_INT 33
24194: PUSH
24195: LD_INT 34
24197: PUSH
24198: LD_INT 36
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 101
24240: PUSH
24241: LD_INT 102
24243: PUSH
24244: LD_INT 103
24246: PUSH
24247: LD_INT 104
24249: PUSH
24250: LD_INT 105
24252: PUSH
24253: LD_INT 106
24255: PUSH
24256: LD_INT 107
24258: PUSH
24259: LD_INT 108
24261: PUSH
24262: LD_INT 109
24264: PUSH
24265: LD_INT 110
24267: PUSH
24268: LD_INT 111
24270: PUSH
24271: LD_INT 112
24273: PUSH
24274: LD_INT 113
24276: PUSH
24277: LD_INT 114
24279: PUSH
24280: LD_INT 116
24282: PUSH
24283: LD_INT 117
24285: PUSH
24286: LD_INT 118
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 25087
24314: LD_INT 16
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24458
24322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24323: LD_ADDR_VAR 0 1
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 4
24333: PUSH
24334: LD_INT 5
24336: PUSH
24337: LD_INT 7
24339: PUSH
24340: LD_INT 11
24342: PUSH
24343: LD_INT 12
24345: PUSH
24346: LD_INT 15
24348: PUSH
24349: LD_INT 16
24351: PUSH
24352: LD_INT 20
24354: PUSH
24355: LD_INT 21
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: LD_INT 23
24363: PUSH
24364: LD_INT 25
24366: PUSH
24367: LD_INT 26
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 31
24375: PUSH
24376: LD_INT 32
24378: PUSH
24379: LD_INT 33
24381: PUSH
24382: LD_INT 34
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 101
24408: PUSH
24409: LD_INT 102
24411: PUSH
24412: LD_INT 103
24414: PUSH
24415: LD_INT 106
24417: PUSH
24418: LD_INT 108
24420: PUSH
24421: LD_INT 112
24423: PUSH
24424: LD_INT 113
24426: PUSH
24427: LD_INT 114
24429: PUSH
24430: LD_INT 116
24432: PUSH
24433: LD_INT 117
24435: PUSH
24436: LD_INT 118
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: ST_TO_ADDR
24456: GO 25087
24458: LD_INT 17
24460: DOUBLE
24461: EQUAL
24462: IFTRUE 24466
24464: GO 24690
24466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24467: LD_ADDR_VAR 0 1
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: LD_INT 6
24489: PUSH
24490: LD_INT 7
24492: PUSH
24493: LD_INT 8
24495: PUSH
24496: LD_INT 9
24498: PUSH
24499: LD_INT 10
24501: PUSH
24502: LD_INT 11
24504: PUSH
24505: LD_INT 12
24507: PUSH
24508: LD_INT 13
24510: PUSH
24511: LD_INT 14
24513: PUSH
24514: LD_INT 15
24516: PUSH
24517: LD_INT 16
24519: PUSH
24520: LD_INT 17
24522: PUSH
24523: LD_INT 18
24525: PUSH
24526: LD_INT 19
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: LD_INT 21
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_INT 23
24540: PUSH
24541: LD_INT 24
24543: PUSH
24544: LD_INT 25
24546: PUSH
24547: LD_INT 26
24549: PUSH
24550: LD_INT 27
24552: PUSH
24553: LD_INT 28
24555: PUSH
24556: LD_INT 29
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 31
24564: PUSH
24565: LD_INT 32
24567: PUSH
24568: LD_INT 33
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 36
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 101
24616: PUSH
24617: LD_INT 102
24619: PUSH
24620: LD_INT 103
24622: PUSH
24623: LD_INT 104
24625: PUSH
24626: LD_INT 105
24628: PUSH
24629: LD_INT 106
24631: PUSH
24632: LD_INT 107
24634: PUSH
24635: LD_INT 108
24637: PUSH
24638: LD_INT 109
24640: PUSH
24641: LD_INT 110
24643: PUSH
24644: LD_INT 111
24646: PUSH
24647: LD_INT 112
24649: PUSH
24650: LD_INT 113
24652: PUSH
24653: LD_INT 114
24655: PUSH
24656: LD_INT 116
24658: PUSH
24659: LD_INT 117
24661: PUSH
24662: LD_INT 118
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: ST_TO_ADDR
24688: GO 25087
24690: LD_INT 18
24692: DOUBLE
24693: EQUAL
24694: IFTRUE 24698
24696: GO 24846
24698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24699: LD_ADDR_VAR 0 1
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 4
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: LD_INT 7
24715: PUSH
24716: LD_INT 11
24718: PUSH
24719: LD_INT 12
24721: PUSH
24722: LD_INT 15
24724: PUSH
24725: LD_INT 16
24727: PUSH
24728: LD_INT 20
24730: PUSH
24731: LD_INT 21
24733: PUSH
24734: LD_INT 22
24736: PUSH
24737: LD_INT 23
24739: PUSH
24740: LD_INT 25
24742: PUSH
24743: LD_INT 26
24745: PUSH
24746: LD_INT 30
24748: PUSH
24749: LD_INT 31
24751: PUSH
24752: LD_INT 32
24754: PUSH
24755: LD_INT 33
24757: PUSH
24758: LD_INT 34
24760: PUSH
24761: LD_INT 35
24763: PUSH
24764: LD_INT 36
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 101
24792: PUSH
24793: LD_INT 102
24795: PUSH
24796: LD_INT 103
24798: PUSH
24799: LD_INT 106
24801: PUSH
24802: LD_INT 108
24804: PUSH
24805: LD_INT 112
24807: PUSH
24808: LD_INT 113
24810: PUSH
24811: LD_INT 114
24813: PUSH
24814: LD_INT 115
24816: PUSH
24817: LD_INT 116
24819: PUSH
24820: LD_INT 117
24822: PUSH
24823: LD_INT 118
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: ST_TO_ADDR
24844: GO 25087
24846: LD_INT 19
24848: DOUBLE
24849: EQUAL
24850: IFTRUE 24854
24852: GO 25086
24854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24855: LD_ADDR_VAR 0 1
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 3
24868: PUSH
24869: LD_INT 4
24871: PUSH
24872: LD_INT 5
24874: PUSH
24875: LD_INT 6
24877: PUSH
24878: LD_INT 7
24880: PUSH
24881: LD_INT 8
24883: PUSH
24884: LD_INT 9
24886: PUSH
24887: LD_INT 10
24889: PUSH
24890: LD_INT 11
24892: PUSH
24893: LD_INT 12
24895: PUSH
24896: LD_INT 13
24898: PUSH
24899: LD_INT 14
24901: PUSH
24902: LD_INT 15
24904: PUSH
24905: LD_INT 16
24907: PUSH
24908: LD_INT 17
24910: PUSH
24911: LD_INT 18
24913: PUSH
24914: LD_INT 19
24916: PUSH
24917: LD_INT 20
24919: PUSH
24920: LD_INT 21
24922: PUSH
24923: LD_INT 22
24925: PUSH
24926: LD_INT 23
24928: PUSH
24929: LD_INT 24
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 26
24937: PUSH
24938: LD_INT 27
24940: PUSH
24941: LD_INT 28
24943: PUSH
24944: LD_INT 29
24946: PUSH
24947: LD_INT 30
24949: PUSH
24950: LD_INT 31
24952: PUSH
24953: LD_INT 32
24955: PUSH
24956: LD_INT 33
24958: PUSH
24959: LD_INT 34
24961: PUSH
24962: LD_INT 35
24964: PUSH
24965: LD_INT 36
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 101
25008: PUSH
25009: LD_INT 102
25011: PUSH
25012: LD_INT 103
25014: PUSH
25015: LD_INT 104
25017: PUSH
25018: LD_INT 105
25020: PUSH
25021: LD_INT 106
25023: PUSH
25024: LD_INT 107
25026: PUSH
25027: LD_INT 108
25029: PUSH
25030: LD_INT 109
25032: PUSH
25033: LD_INT 110
25035: PUSH
25036: LD_INT 111
25038: PUSH
25039: LD_INT 112
25041: PUSH
25042: LD_INT 113
25044: PUSH
25045: LD_INT 114
25047: PUSH
25048: LD_INT 115
25050: PUSH
25051: LD_INT 116
25053: PUSH
25054: LD_INT 117
25056: PUSH
25057: LD_INT 118
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 25087
25086: POP
// end else
25087: GO 25318
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25089: LD_ADDR_VAR 0 1
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 3
25102: PUSH
25103: LD_INT 4
25105: PUSH
25106: LD_INT 5
25108: PUSH
25109: LD_INT 6
25111: PUSH
25112: LD_INT 7
25114: PUSH
25115: LD_INT 8
25117: PUSH
25118: LD_INT 9
25120: PUSH
25121: LD_INT 10
25123: PUSH
25124: LD_INT 11
25126: PUSH
25127: LD_INT 12
25129: PUSH
25130: LD_INT 13
25132: PUSH
25133: LD_INT 14
25135: PUSH
25136: LD_INT 15
25138: PUSH
25139: LD_INT 16
25141: PUSH
25142: LD_INT 17
25144: PUSH
25145: LD_INT 18
25147: PUSH
25148: LD_INT 19
25150: PUSH
25151: LD_INT 20
25153: PUSH
25154: LD_INT 21
25156: PUSH
25157: LD_INT 22
25159: PUSH
25160: LD_INT 23
25162: PUSH
25163: LD_INT 24
25165: PUSH
25166: LD_INT 25
25168: PUSH
25169: LD_INT 26
25171: PUSH
25172: LD_INT 27
25174: PUSH
25175: LD_INT 28
25177: PUSH
25178: LD_INT 29
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 31
25186: PUSH
25187: LD_INT 32
25189: PUSH
25190: LD_INT 33
25192: PUSH
25193: LD_INT 34
25195: PUSH
25196: LD_INT 35
25198: PUSH
25199: LD_INT 36
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 101
25242: PUSH
25243: LD_INT 102
25245: PUSH
25246: LD_INT 103
25248: PUSH
25249: LD_INT 104
25251: PUSH
25252: LD_INT 105
25254: PUSH
25255: LD_INT 106
25257: PUSH
25258: LD_INT 107
25260: PUSH
25261: LD_INT 108
25263: PUSH
25264: LD_INT 109
25266: PUSH
25267: LD_INT 110
25269: PUSH
25270: LD_INT 111
25272: PUSH
25273: LD_INT 112
25275: PUSH
25276: LD_INT 113
25278: PUSH
25279: LD_INT 114
25281: PUSH
25282: LD_INT 115
25284: PUSH
25285: LD_INT 116
25287: PUSH
25288: LD_INT 117
25290: PUSH
25291: LD_INT 118
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: ST_TO_ADDR
// if result then
25318: LD_VAR 0 1
25322: IFFALSE 25611
// begin normal :=  ;
25324: LD_ADDR_VAR 0 3
25328: PUSH
25329: LD_STRING 
25331: ST_TO_ADDR
// hardcore :=  ;
25332: LD_ADDR_VAR 0 4
25336: PUSH
25337: LD_STRING 
25339: ST_TO_ADDR
// for i = 1 to normalCounter do
25340: LD_ADDR_VAR 0 5
25344: PUSH
25345: DOUBLE
25346: LD_INT 1
25348: DEC
25349: ST_TO_ADDR
25350: LD_EXP 69
25354: PUSH
25355: FOR_TO
25356: IFFALSE 25457
// begin tmp := 0 ;
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: LD_STRING 0
25365: ST_TO_ADDR
// if result [ 1 ] then
25366: LD_VAR 0 1
25370: PUSH
25371: LD_INT 1
25373: ARRAY
25374: IFFALSE 25439
// if result [ 1 ] [ 1 ] = i then
25376: LD_VAR 0 1
25380: PUSH
25381: LD_INT 1
25383: ARRAY
25384: PUSH
25385: LD_INT 1
25387: ARRAY
25388: PUSH
25389: LD_VAR 0 5
25393: EQUAL
25394: IFFALSE 25439
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25396: LD_ADDR_VAR 0 1
25400: PUSH
25401: LD_VAR 0 1
25405: PPUSH
25406: LD_INT 1
25408: PPUSH
25409: LD_VAR 0 1
25413: PUSH
25414: LD_INT 1
25416: ARRAY
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL_OW 3
25425: PPUSH
25426: CALL_OW 1
25430: ST_TO_ADDR
// tmp := 1 ;
25431: LD_ADDR_VAR 0 2
25435: PUSH
25436: LD_STRING 1
25438: ST_TO_ADDR
// end ; normal := normal & tmp ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_VAR 0 3
25448: PUSH
25449: LD_VAR 0 2
25453: STR
25454: ST_TO_ADDR
// end ;
25455: GO 25355
25457: POP
25458: POP
// for i = 1 to hardcoreCounter do
25459: LD_ADDR_VAR 0 5
25463: PUSH
25464: DOUBLE
25465: LD_INT 1
25467: DEC
25468: ST_TO_ADDR
25469: LD_EXP 70
25473: PUSH
25474: FOR_TO
25475: IFFALSE 25580
// begin tmp := 0 ;
25477: LD_ADDR_VAR 0 2
25481: PUSH
25482: LD_STRING 0
25484: ST_TO_ADDR
// if result [ 2 ] then
25485: LD_VAR 0 1
25489: PUSH
25490: LD_INT 2
25492: ARRAY
25493: IFFALSE 25562
// if result [ 2 ] [ 1 ] = 100 + i then
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 2
25502: ARRAY
25503: PUSH
25504: LD_INT 1
25506: ARRAY
25507: PUSH
25508: LD_INT 100
25510: PUSH
25511: LD_VAR 0 5
25515: PLUS
25516: EQUAL
25517: IFFALSE 25562
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25519: LD_ADDR_VAR 0 1
25523: PUSH
25524: LD_VAR 0 1
25528: PPUSH
25529: LD_INT 2
25531: PPUSH
25532: LD_VAR 0 1
25536: PUSH
25537: LD_INT 2
25539: ARRAY
25540: PPUSH
25541: LD_INT 1
25543: PPUSH
25544: CALL_OW 3
25548: PPUSH
25549: CALL_OW 1
25553: ST_TO_ADDR
// tmp := 1 ;
25554: LD_ADDR_VAR 0 2
25558: PUSH
25559: LD_STRING 1
25561: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25562: LD_ADDR_VAR 0 4
25566: PUSH
25567: LD_VAR 0 4
25571: PUSH
25572: LD_VAR 0 2
25576: STR
25577: ST_TO_ADDR
// end ;
25578: GO 25474
25580: POP
25581: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25582: LD_STRING getStreamItemsFromMission("
25584: PUSH
25585: LD_VAR 0 3
25589: STR
25590: PUSH
25591: LD_STRING ","
25593: STR
25594: PUSH
25595: LD_VAR 0 4
25599: STR
25600: PUSH
25601: LD_STRING ")
25603: STR
25604: PPUSH
25605: CALL_OW 559
// end else
25609: GO 25618
// ToLua ( getStreamItemsFromMission("","") ) ;
25611: LD_STRING getStreamItemsFromMission("","")
25613: PPUSH
25614: CALL_OW 559
// end ;
25618: LD_VAR 0 1
25622: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25623: LD_EXP 68
25627: PUSH
25628: LD_EXP 73
25632: AND
25633: IFFALSE 25757
25635: GO 25637
25637: DISABLE
25638: LD_INT 0
25640: PPUSH
25641: PPUSH
// begin enable ;
25642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25643: LD_ADDR_VAR 0 2
25647: PUSH
25648: LD_INT 22
25650: PUSH
25651: LD_OWVAR 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: LD_INT 34
25665: PUSH
25666: LD_INT 7
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 34
25675: PUSH
25676: LD_INT 45
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 34
25685: PUSH
25686: LD_INT 28
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 34
25695: PUSH
25696: LD_INT 47
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PPUSH
25714: CALL_OW 69
25718: ST_TO_ADDR
// if not tmp then
25719: LD_VAR 0 2
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 25757
// for i in tmp do
25728: LD_ADDR_VAR 0 1
25732: PUSH
25733: LD_VAR 0 2
25737: PUSH
25738: FOR_IN
25739: IFFALSE 25755
// begin SetLives ( i , 0 ) ;
25741: LD_VAR 0 1
25745: PPUSH
25746: LD_INT 0
25748: PPUSH
25749: CALL_OW 234
// end ;
25753: GO 25738
25755: POP
25756: POP
// end ;
25757: PPOPN 2
25759: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25760: LD_EXP 68
25764: PUSH
25765: LD_EXP 74
25769: AND
25770: IFFALSE 25854
25772: GO 25774
25774: DISABLE
25775: LD_INT 0
25777: PPUSH
25778: PPUSH
// begin enable ;
25779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25780: LD_ADDR_VAR 0 2
25784: PUSH
25785: LD_INT 22
25787: PUSH
25788: LD_OWVAR 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 32
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PPUSH
25811: CALL_OW 69
25815: ST_TO_ADDR
// if not tmp then
25816: LD_VAR 0 2
25820: NOT
25821: IFFALSE 25825
// exit ;
25823: GO 25854
// for i in tmp do
25825: LD_ADDR_VAR 0 1
25829: PUSH
25830: LD_VAR 0 2
25834: PUSH
25835: FOR_IN
25836: IFFALSE 25852
// begin SetLives ( i , 0 ) ;
25838: LD_VAR 0 1
25842: PPUSH
25843: LD_INT 0
25845: PPUSH
25846: CALL_OW 234
// end ;
25850: GO 25835
25852: POP
25853: POP
// end ;
25854: PPOPN 2
25856: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25857: LD_EXP 68
25861: PUSH
25862: LD_EXP 71
25866: AND
25867: IFFALSE 25960
25869: GO 25871
25871: DISABLE
25872: LD_INT 0
25874: PPUSH
// begin enable ;
25875: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_INT 22
25883: PUSH
25884: LD_OWVAR 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 25
25898: PUSH
25899: LD_INT 5
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 25
25908: PUSH
25909: LD_INT 9
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 25
25918: PUSH
25919: LD_INT 8
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 69
25940: PUSH
25941: FOR_IN
25942: IFFALSE 25958
// begin SetClass ( i , 1 ) ;
25944: LD_VAR 0 1
25948: PPUSH
25949: LD_INT 1
25951: PPUSH
25952: CALL_OW 336
// end ;
25956: GO 25941
25958: POP
25959: POP
// end ;
25960: PPOPN 1
25962: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25963: LD_EXP 68
25967: PUSH
25968: LD_EXP 72
25972: AND
25973: PUSH
25974: LD_OWVAR 65
25978: PUSH
25979: LD_INT 7
25981: LESS
25982: AND
25983: IFFALSE 25997
25985: GO 25987
25987: DISABLE
// begin enable ;
25988: ENABLE
// game_speed := 7 ;
25989: LD_ADDR_OWVAR 65
25993: PUSH
25994: LD_INT 7
25996: ST_TO_ADDR
// end ;
25997: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25998: LD_EXP 68
26002: PUSH
26003: LD_EXP 75
26007: AND
26008: IFFALSE 26210
26010: GO 26012
26012: DISABLE
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
26017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_INT 81
26025: PUSH
26026: LD_OWVAR 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 21
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 69
26053: ST_TO_ADDR
// if not tmp then
26054: LD_VAR 0 3
26058: NOT
26059: IFFALSE 26063
// exit ;
26061: GO 26210
// if tmp > 5 then
26063: LD_VAR 0 3
26067: PUSH
26068: LD_INT 5
26070: GREATER
26071: IFFALSE 26083
// k := 5 else
26073: LD_ADDR_VAR 0 2
26077: PUSH
26078: LD_INT 5
26080: ST_TO_ADDR
26081: GO 26093
// k := tmp ;
26083: LD_ADDR_VAR 0 2
26087: PUSH
26088: LD_VAR 0 3
26092: ST_TO_ADDR
// for i := 1 to k do
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: DOUBLE
26099: LD_INT 1
26101: DEC
26102: ST_TO_ADDR
26103: LD_VAR 0 2
26107: PUSH
26108: FOR_TO
26109: IFFALSE 26208
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26111: LD_VAR 0 3
26115: PUSH
26116: LD_VAR 0 1
26120: ARRAY
26121: PPUSH
26122: LD_VAR 0 1
26126: PUSH
26127: LD_INT 4
26129: MOD
26130: PUSH
26131: LD_INT 1
26133: PLUS
26134: PPUSH
26135: CALL_OW 259
26139: PUSH
26140: LD_INT 10
26142: LESS
26143: IFFALSE 26206
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26145: LD_VAR 0 3
26149: PUSH
26150: LD_VAR 0 1
26154: ARRAY
26155: PPUSH
26156: LD_VAR 0 1
26160: PUSH
26161: LD_INT 4
26163: MOD
26164: PUSH
26165: LD_INT 1
26167: PLUS
26168: PPUSH
26169: LD_VAR 0 3
26173: PUSH
26174: LD_VAR 0 1
26178: ARRAY
26179: PPUSH
26180: LD_VAR 0 1
26184: PUSH
26185: LD_INT 4
26187: MOD
26188: PUSH
26189: LD_INT 1
26191: PLUS
26192: PPUSH
26193: CALL_OW 259
26197: PUSH
26198: LD_INT 1
26200: PLUS
26201: PPUSH
26202: CALL_OW 237
26206: GO 26108
26208: POP
26209: POP
// end ;
26210: PPOPN 3
26212: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26213: LD_EXP 68
26217: PUSH
26218: LD_EXP 76
26222: AND
26223: IFFALSE 26243
26225: GO 26227
26227: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26228: LD_INT 4
26230: PPUSH
26231: LD_OWVAR 2
26235: PPUSH
26236: LD_INT 0
26238: PPUSH
26239: CALL_OW 324
26243: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26244: LD_EXP 68
26248: PUSH
26249: LD_EXP 105
26253: AND
26254: IFFALSE 26274
26256: GO 26258
26258: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26259: LD_INT 19
26261: PPUSH
26262: LD_OWVAR 2
26266: PPUSH
26267: LD_INT 0
26269: PPUSH
26270: CALL_OW 324
26274: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26275: LD_EXP 68
26279: PUSH
26280: LD_EXP 77
26284: AND
26285: IFFALSE 26387
26287: GO 26289
26289: DISABLE
26290: LD_INT 0
26292: PPUSH
26293: PPUSH
// begin enable ;
26294: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26295: LD_ADDR_VAR 0 2
26299: PUSH
26300: LD_INT 22
26302: PUSH
26303: LD_OWVAR 2
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: LD_INT 34
26317: PUSH
26318: LD_INT 11
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 34
26327: PUSH
26328: LD_INT 30
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PPUSH
26344: CALL_OW 69
26348: ST_TO_ADDR
// if not tmp then
26349: LD_VAR 0 2
26353: NOT
26354: IFFALSE 26358
// exit ;
26356: GO 26387
// for i in tmp do
26358: LD_ADDR_VAR 0 1
26362: PUSH
26363: LD_VAR 0 2
26367: PUSH
26368: FOR_IN
26369: IFFALSE 26385
// begin SetLives ( i , 0 ) ;
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_INT 0
26378: PPUSH
26379: CALL_OW 234
// end ;
26383: GO 26368
26385: POP
26386: POP
// end ;
26387: PPOPN 2
26389: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26390: LD_EXP 68
26394: PUSH
26395: LD_EXP 78
26399: AND
26400: IFFALSE 26420
26402: GO 26404
26404: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26405: LD_INT 32
26407: PPUSH
26408: LD_OWVAR 2
26412: PPUSH
26413: LD_INT 0
26415: PPUSH
26416: CALL_OW 324
26420: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26421: LD_EXP 68
26425: PUSH
26426: LD_EXP 79
26430: AND
26431: IFFALSE 26612
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
26439: PPUSH
26440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26441: LD_ADDR_VAR 0 2
26445: PUSH
26446: LD_INT 22
26448: PUSH
26449: LD_OWVAR 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 33
26460: PUSH
26461: LD_INT 3
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PPUSH
26472: CALL_OW 69
26476: ST_TO_ADDR
// if not tmp then
26477: LD_VAR 0 2
26481: NOT
26482: IFFALSE 26486
// exit ;
26484: GO 26612
// side := 0 ;
26486: LD_ADDR_VAR 0 3
26490: PUSH
26491: LD_INT 0
26493: ST_TO_ADDR
// for i := 1 to 8 do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: DOUBLE
26500: LD_INT 1
26502: DEC
26503: ST_TO_ADDR
26504: LD_INT 8
26506: PUSH
26507: FOR_TO
26508: IFFALSE 26556
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26510: LD_OWVAR 2
26514: PUSH
26515: LD_VAR 0 1
26519: NONEQUAL
26520: PUSH
26521: LD_OWVAR 2
26525: PPUSH
26526: LD_VAR 0 1
26530: PPUSH
26531: CALL_OW 81
26535: PUSH
26536: LD_INT 2
26538: EQUAL
26539: AND
26540: IFFALSE 26554
// begin side := i ;
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_VAR 0 1
26551: ST_TO_ADDR
// break ;
26552: GO 26556
// end ;
26554: GO 26507
26556: POP
26557: POP
// if not side then
26558: LD_VAR 0 3
26562: NOT
26563: IFFALSE 26567
// exit ;
26565: GO 26612
// for i := 1 to tmp do
26567: LD_ADDR_VAR 0 1
26571: PUSH
26572: DOUBLE
26573: LD_INT 1
26575: DEC
26576: ST_TO_ADDR
26577: LD_VAR 0 2
26581: PUSH
26582: FOR_TO
26583: IFFALSE 26610
// if Prob ( 60 ) then
26585: LD_INT 60
26587: PPUSH
26588: CALL_OW 13
26592: IFFALSE 26608
// SetSide ( i , side ) ;
26594: LD_VAR 0 1
26598: PPUSH
26599: LD_VAR 0 3
26603: PPUSH
26604: CALL_OW 235
26608: GO 26582
26610: POP
26611: POP
// end ;
26612: PPOPN 3
26614: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26615: LD_EXP 68
26619: PUSH
26620: LD_EXP 81
26624: AND
26625: IFFALSE 26744
26627: GO 26629
26629: DISABLE
26630: LD_INT 0
26632: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26633: LD_ADDR_VAR 0 1
26637: PUSH
26638: LD_INT 22
26640: PUSH
26641: LD_OWVAR 2
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 21
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 3
26662: PUSH
26663: LD_INT 23
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 69
26686: PUSH
26687: FOR_IN
26688: IFFALSE 26742
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26690: LD_VAR 0 1
26694: PPUSH
26695: CALL_OW 257
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 3
26708: PUSH
26709: LD_INT 4
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: IN
26718: IFFALSE 26740
// SetClass ( un , rand ( 1 , 4 ) ) ;
26720: LD_VAR 0 1
26724: PPUSH
26725: LD_INT 1
26727: PPUSH
26728: LD_INT 4
26730: PPUSH
26731: CALL_OW 12
26735: PPUSH
26736: CALL_OW 336
26740: GO 26687
26742: POP
26743: POP
// end ;
26744: PPOPN 1
26746: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26747: LD_EXP 68
26751: PUSH
26752: LD_EXP 80
26756: AND
26757: IFFALSE 26836
26759: GO 26761
26761: DISABLE
26762: LD_INT 0
26764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26765: LD_ADDR_VAR 0 1
26769: PUSH
26770: LD_INT 22
26772: PUSH
26773: LD_OWVAR 2
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 21
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PPUSH
26796: CALL_OW 69
26800: ST_TO_ADDR
// if not tmp then
26801: LD_VAR 0 1
26805: NOT
26806: IFFALSE 26810
// exit ;
26808: GO 26836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26810: LD_VAR 0 1
26814: PUSH
26815: LD_INT 1
26817: PPUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 12
26827: ARRAY
26828: PPUSH
26829: LD_INT 100
26831: PPUSH
26832: CALL_OW 234
// end ;
26836: PPOPN 1
26838: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26839: LD_EXP 68
26843: PUSH
26844: LD_EXP 82
26848: AND
26849: IFFALSE 26947
26851: GO 26853
26853: DISABLE
26854: LD_INT 0
26856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26857: LD_ADDR_VAR 0 1
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_OWVAR 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 1
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 26947
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26902: LD_VAR 0 1
26906: PUSH
26907: LD_INT 1
26909: PPUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 12
26919: ARRAY
26920: PPUSH
26921: LD_INT 1
26923: PPUSH
26924: LD_INT 4
26926: PPUSH
26927: CALL_OW 12
26931: PPUSH
26932: LD_INT 3000
26934: PPUSH
26935: LD_INT 9000
26937: PPUSH
26938: CALL_OW 12
26942: PPUSH
26943: CALL_OW 492
// end ;
26947: PPOPN 1
26949: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26950: LD_EXP 68
26954: PUSH
26955: LD_EXP 83
26959: AND
26960: IFFALSE 26980
26962: GO 26964
26964: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26965: LD_INT 1
26967: PPUSH
26968: LD_OWVAR 2
26972: PPUSH
26973: LD_INT 0
26975: PPUSH
26976: CALL_OW 324
26980: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26981: LD_EXP 68
26985: PUSH
26986: LD_EXP 84
26990: AND
26991: IFFALSE 27074
26993: GO 26995
26995: DISABLE
26996: LD_INT 0
26998: PPUSH
26999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27000: LD_ADDR_VAR 0 2
27004: PUSH
27005: LD_INT 22
27007: PUSH
27008: LD_OWVAR 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PPUSH
27031: CALL_OW 69
27035: ST_TO_ADDR
// if not tmp then
27036: LD_VAR 0 2
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 27074
// for i in tmp do
27045: LD_ADDR_VAR 0 1
27049: PUSH
27050: LD_VAR 0 2
27054: PUSH
27055: FOR_IN
27056: IFFALSE 27072
// SetBLevel ( i , 10 ) ;
27058: LD_VAR 0 1
27062: PPUSH
27063: LD_INT 10
27065: PPUSH
27066: CALL_OW 241
27070: GO 27055
27072: POP
27073: POP
// end ;
27074: PPOPN 2
27076: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27077: LD_EXP 68
27081: PUSH
27082: LD_EXP 85
27086: AND
27087: IFFALSE 27198
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_INT 22
27104: PUSH
27105: LD_OWVAR 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 25
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 69
27132: ST_TO_ADDR
// if not tmp then
27133: LD_VAR 0 3
27137: NOT
27138: IFFALSE 27142
// exit ;
27140: GO 27198
// un := tmp [ rand ( 1 , tmp ) ] ;
27142: LD_ADDR_VAR 0 2
27146: PUSH
27147: LD_VAR 0 3
27151: PUSH
27152: LD_INT 1
27154: PPUSH
27155: LD_VAR 0 3
27159: PPUSH
27160: CALL_OW 12
27164: ARRAY
27165: ST_TO_ADDR
// if Crawls ( un ) then
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 318
27175: IFFALSE 27186
// ComWalk ( un ) ;
27177: LD_VAR 0 2
27181: PPUSH
27182: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27186: LD_VAR 0 2
27190: PPUSH
27191: LD_INT 5
27193: PPUSH
27194: CALL_OW 336
// end ;
27198: PPOPN 3
27200: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27201: LD_EXP 68
27205: PUSH
27206: LD_EXP 86
27210: AND
27211: PUSH
27212: LD_OWVAR 67
27216: PUSH
27217: LD_INT 4
27219: LESS
27220: AND
27221: IFFALSE 27240
27223: GO 27225
27225: DISABLE
// begin Difficulty := Difficulty + 1 ;
27226: LD_ADDR_OWVAR 67
27230: PUSH
27231: LD_OWVAR 67
27235: PUSH
27236: LD_INT 1
27238: PLUS
27239: ST_TO_ADDR
// end ;
27240: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27241: LD_EXP 68
27245: PUSH
27246: LD_EXP 87
27250: AND
27251: IFFALSE 27354
27253: GO 27255
27255: DISABLE
27256: LD_INT 0
27258: PPUSH
// begin for i := 1 to 5 do
27259: LD_ADDR_VAR 0 1
27263: PUSH
27264: DOUBLE
27265: LD_INT 1
27267: DEC
27268: ST_TO_ADDR
27269: LD_INT 5
27271: PUSH
27272: FOR_TO
27273: IFFALSE 27352
// begin uc_nation := nation_nature ;
27275: LD_ADDR_OWVAR 21
27279: PUSH
27280: LD_INT 0
27282: ST_TO_ADDR
// uc_side := 0 ;
27283: LD_ADDR_OWVAR 20
27287: PUSH
27288: LD_INT 0
27290: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27291: LD_ADDR_OWVAR 29
27295: PUSH
27296: LD_INT 12
27298: PUSH
27299: LD_INT 12
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: ST_TO_ADDR
// hc_agressivity := 20 ;
27306: LD_ADDR_OWVAR 35
27310: PUSH
27311: LD_INT 20
27313: ST_TO_ADDR
// hc_class := class_tiger ;
27314: LD_ADDR_OWVAR 28
27318: PUSH
27319: LD_INT 14
27321: ST_TO_ADDR
// hc_gallery :=  ;
27322: LD_ADDR_OWVAR 33
27326: PUSH
27327: LD_STRING 
27329: ST_TO_ADDR
// hc_name :=  ;
27330: LD_ADDR_OWVAR 26
27334: PUSH
27335: LD_STRING 
27337: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27338: CALL_OW 44
27342: PPUSH
27343: LD_INT 0
27345: PPUSH
27346: CALL_OW 51
// end ;
27350: GO 27272
27352: POP
27353: POP
// end ;
27354: PPOPN 1
27356: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27357: LD_EXP 68
27361: PUSH
27362: LD_EXP 88
27366: AND
27367: IFFALSE 27376
27369: GO 27371
27371: DISABLE
// StreamSibBomb ;
27372: CALL 27377 0 0
27376: END
// export function StreamSibBomb ; var i , x , y ; begin
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
// result := false ;
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: LD_INT 0
27390: ST_TO_ADDR
// for i := 1 to 16 do
27391: LD_ADDR_VAR 0 2
27395: PUSH
27396: DOUBLE
27397: LD_INT 1
27399: DEC
27400: ST_TO_ADDR
27401: LD_INT 16
27403: PUSH
27404: FOR_TO
27405: IFFALSE 27604
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_INT 10
27414: PUSH
27415: LD_INT 20
27417: PUSH
27418: LD_INT 30
27420: PUSH
27421: LD_INT 40
27423: PUSH
27424: LD_INT 50
27426: PUSH
27427: LD_INT 60
27429: PUSH
27430: LD_INT 70
27432: PUSH
27433: LD_INT 80
27435: PUSH
27436: LD_INT 90
27438: PUSH
27439: LD_INT 100
27441: PUSH
27442: LD_INT 110
27444: PUSH
27445: LD_INT 120
27447: PUSH
27448: LD_INT 130
27450: PUSH
27451: LD_INT 140
27453: PUSH
27454: LD_INT 150
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PPUSH
27477: LD_INT 15
27479: PPUSH
27480: CALL_OW 12
27484: ARRAY
27485: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27486: LD_ADDR_VAR 0 4
27490: PUSH
27491: LD_INT 10
27493: PUSH
27494: LD_INT 20
27496: PUSH
27497: LD_INT 30
27499: PUSH
27500: LD_INT 40
27502: PUSH
27503: LD_INT 50
27505: PUSH
27506: LD_INT 60
27508: PUSH
27509: LD_INT 70
27511: PUSH
27512: LD_INT 80
27514: PUSH
27515: LD_INT 90
27517: PUSH
27518: LD_INT 100
27520: PUSH
27521: LD_INT 110
27523: PUSH
27524: LD_INT 120
27526: PUSH
27527: LD_INT 130
27529: PUSH
27530: LD_INT 140
27532: PUSH
27533: LD_INT 150
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: PPUSH
27556: LD_INT 15
27558: PPUSH
27559: CALL_OW 12
27563: ARRAY
27564: ST_TO_ADDR
// if ValidHex ( x , y ) then
27565: LD_VAR 0 3
27569: PPUSH
27570: LD_VAR 0 4
27574: PPUSH
27575: CALL_OW 488
27579: IFFALSE 27602
// begin result := [ x , y ] ;
27581: LD_ADDR_VAR 0 1
27585: PUSH
27586: LD_VAR 0 3
27590: PUSH
27591: LD_VAR 0 4
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// break ;
27600: GO 27604
// end ; end ;
27602: GO 27404
27604: POP
27605: POP
// if result then
27606: LD_VAR 0 1
27610: IFFALSE 27670
// begin ToLua ( playSibBomb() ) ;
27612: LD_STRING playSibBomb()
27614: PPUSH
27615: CALL_OW 559
// wait ( 0 0$14 ) ;
27619: LD_INT 490
27621: PPUSH
27622: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27626: LD_VAR 0 1
27630: PUSH
27631: LD_INT 1
27633: ARRAY
27634: PPUSH
27635: LD_VAR 0 1
27639: PUSH
27640: LD_INT 2
27642: ARRAY
27643: PPUSH
27644: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27648: LD_VAR 0 1
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: LD_VAR 0 1
27661: PUSH
27662: LD_INT 2
27664: ARRAY
27665: PPUSH
27666: CALL_OW 429
// end ; end ;
27670: LD_VAR 0 1
27674: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27675: LD_EXP 68
27679: PUSH
27680: LD_EXP 90
27684: AND
27685: IFFALSE 27697
27687: GO 27689
27689: DISABLE
// YouLost (  ) ;
27690: LD_STRING 
27692: PPUSH
27693: CALL_OW 104
27697: END
// every 0 0$1 trigger StreamModeActive and sFog do
27698: LD_EXP 68
27702: PUSH
27703: LD_EXP 89
27707: AND
27708: IFFALSE 27722
27710: GO 27712
27712: DISABLE
// FogOff ( your_side ) ;
27713: LD_OWVAR 2
27717: PPUSH
27718: CALL_OW 344
27722: END
// every 0 0$1 trigger StreamModeActive and sSun do
27723: LD_EXP 68
27727: PUSH
27728: LD_EXP 91
27732: AND
27733: IFFALSE 27761
27735: GO 27737
27737: DISABLE
// begin solar_recharge_percent := 0 ;
27738: LD_ADDR_OWVAR 79
27742: PUSH
27743: LD_INT 0
27745: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27746: LD_INT 10500
27748: PPUSH
27749: CALL_OW 67
// solar_recharge_percent := 100 ;
27753: LD_ADDR_OWVAR 79
27757: PUSH
27758: LD_INT 100
27760: ST_TO_ADDR
// end ;
27761: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27762: LD_EXP 68
27766: PUSH
27767: LD_EXP 92
27771: AND
27772: IFFALSE 28011
27774: GO 27776
27776: DISABLE
27777: LD_INT 0
27779: PPUSH
27780: PPUSH
27781: PPUSH
// begin tmp := [ ] ;
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: EMPTY
27788: ST_TO_ADDR
// for i := 1 to 6 do
27789: LD_ADDR_VAR 0 1
27793: PUSH
27794: DOUBLE
27795: LD_INT 1
27797: DEC
27798: ST_TO_ADDR
27799: LD_INT 6
27801: PUSH
27802: FOR_TO
27803: IFFALSE 27908
// begin uc_nation := nation_nature ;
27805: LD_ADDR_OWVAR 21
27809: PUSH
27810: LD_INT 0
27812: ST_TO_ADDR
// uc_side := 0 ;
27813: LD_ADDR_OWVAR 20
27817: PUSH
27818: LD_INT 0
27820: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27821: LD_ADDR_OWVAR 29
27825: PUSH
27826: LD_INT 12
27828: PUSH
27829: LD_INT 12
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// hc_agressivity := 20 ;
27836: LD_ADDR_OWVAR 35
27840: PUSH
27841: LD_INT 20
27843: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27844: LD_ADDR_OWVAR 28
27848: PUSH
27849: LD_INT 17
27851: ST_TO_ADDR
// hc_gallery :=  ;
27852: LD_ADDR_OWVAR 33
27856: PUSH
27857: LD_STRING 
27859: ST_TO_ADDR
// hc_name :=  ;
27860: LD_ADDR_OWVAR 26
27864: PUSH
27865: LD_STRING 
27867: ST_TO_ADDR
// un := CreateHuman ;
27868: LD_ADDR_VAR 0 2
27872: PUSH
27873: CALL_OW 44
27877: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27878: LD_VAR 0 2
27882: PPUSH
27883: LD_INT 1
27885: PPUSH
27886: CALL_OW 51
// tmp := tmp ^ un ;
27890: LD_ADDR_VAR 0 3
27894: PUSH
27895: LD_VAR 0 3
27899: PUSH
27900: LD_VAR 0 2
27904: ADD
27905: ST_TO_ADDR
// end ;
27906: GO 27802
27908: POP
27909: POP
// repeat wait ( 0 0$1 ) ;
27910: LD_INT 35
27912: PPUSH
27913: CALL_OW 67
// for un in tmp do
27917: LD_ADDR_VAR 0 2
27921: PUSH
27922: LD_VAR 0 3
27926: PUSH
27927: FOR_IN
27928: IFFALSE 28002
// begin if IsDead ( un ) then
27930: LD_VAR 0 2
27934: PPUSH
27935: CALL_OW 301
27939: IFFALSE 27959
// begin tmp := tmp diff un ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_VAR 0 3
27950: PUSH
27951: LD_VAR 0 2
27955: DIFF
27956: ST_TO_ADDR
// continue ;
27957: GO 27927
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27959: LD_VAR 0 2
27963: PPUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 22
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PPUSH
27981: CALL_OW 69
27985: PPUSH
27986: LD_VAR 0 2
27990: PPUSH
27991: CALL_OW 74
27995: PPUSH
27996: CALL_OW 115
// end ;
28000: GO 27927
28002: POP
28003: POP
// until not tmp ;
28004: LD_VAR 0 3
28008: NOT
28009: IFFALSE 27910
// end ;
28011: PPOPN 3
28013: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28014: LD_EXP 68
28018: PUSH
28019: LD_EXP 93
28023: AND
28024: IFFALSE 28078
28026: GO 28028
28028: DISABLE
// begin ToLua ( displayTroll(); ) ;
28029: LD_STRING displayTroll();
28031: PPUSH
28032: CALL_OW 559
// wait ( 3 3$00 ) ;
28036: LD_INT 6300
28038: PPUSH
28039: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28043: LD_STRING hideTroll();
28045: PPUSH
28046: CALL_OW 559
// wait ( 1 1$00 ) ;
28050: LD_INT 2100
28052: PPUSH
28053: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28057: LD_STRING displayTroll();
28059: PPUSH
28060: CALL_OW 559
// wait ( 1 1$00 ) ;
28064: LD_INT 2100
28066: PPUSH
28067: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28071: LD_STRING hideTroll();
28073: PPUSH
28074: CALL_OW 559
// end ;
28078: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28079: LD_EXP 68
28083: PUSH
28084: LD_EXP 94
28088: AND
28089: IFFALSE 28152
28091: GO 28093
28093: DISABLE
28094: LD_INT 0
28096: PPUSH
// begin p := 0 ;
28097: LD_ADDR_VAR 0 1
28101: PUSH
28102: LD_INT 0
28104: ST_TO_ADDR
// repeat game_speed := 1 ;
28105: LD_ADDR_OWVAR 65
28109: PUSH
28110: LD_INT 1
28112: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28113: LD_INT 35
28115: PPUSH
28116: CALL_OW 67
// p := p + 1 ;
28120: LD_ADDR_VAR 0 1
28124: PUSH
28125: LD_VAR 0 1
28129: PUSH
28130: LD_INT 1
28132: PLUS
28133: ST_TO_ADDR
// until p >= 60 ;
28134: LD_VAR 0 1
28138: PUSH
28139: LD_INT 60
28141: GREATEREQUAL
28142: IFFALSE 28105
// game_speed := 4 ;
28144: LD_ADDR_OWVAR 65
28148: PUSH
28149: LD_INT 4
28151: ST_TO_ADDR
// end ;
28152: PPOPN 1
28154: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28155: LD_EXP 68
28159: PUSH
28160: LD_EXP 95
28164: AND
28165: IFFALSE 28311
28167: GO 28169
28169: DISABLE
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28174: LD_ADDR_VAR 0 1
28178: PUSH
28179: LD_INT 22
28181: PUSH
28182: LD_OWVAR 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: LD_INT 30
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 30
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PPUSH
28223: CALL_OW 69
28227: ST_TO_ADDR
// if not depot then
28228: LD_VAR 0 1
28232: NOT
28233: IFFALSE 28237
// exit ;
28235: GO 28311
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28237: LD_ADDR_VAR 0 2
28241: PUSH
28242: LD_VAR 0 1
28246: PUSH
28247: LD_INT 1
28249: PPUSH
28250: LD_VAR 0 1
28254: PPUSH
28255: CALL_OW 12
28259: ARRAY
28260: PPUSH
28261: CALL_OW 274
28265: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28266: LD_VAR 0 2
28270: PPUSH
28271: LD_INT 1
28273: PPUSH
28274: LD_INT 0
28276: PPUSH
28277: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28281: LD_VAR 0 2
28285: PPUSH
28286: LD_INT 2
28288: PPUSH
28289: LD_INT 0
28291: PPUSH
28292: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28296: LD_VAR 0 2
28300: PPUSH
28301: LD_INT 3
28303: PPUSH
28304: LD_INT 0
28306: PPUSH
28307: CALL_OW 277
// end ;
28311: PPOPN 2
28313: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28314: LD_EXP 68
28318: PUSH
28319: LD_EXP 96
28323: AND
28324: IFFALSE 28421
28326: GO 28328
28328: DISABLE
28329: LD_INT 0
28331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_OWVAR 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 21
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 23
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 69
28385: ST_TO_ADDR
// if not tmp then
28386: LD_VAR 0 1
28390: NOT
28391: IFFALSE 28395
// exit ;
28393: GO 28421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28395: LD_VAR 0 1
28399: PUSH
28400: LD_INT 1
28402: PPUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 12
28412: ARRAY
28413: PPUSH
28414: LD_INT 200
28416: PPUSH
28417: CALL_OW 234
// end ;
28421: PPOPN 1
28423: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28424: LD_EXP 68
28428: PUSH
28429: LD_EXP 97
28433: AND
28434: IFFALSE 28513
28436: GO 28438
28438: DISABLE
28439: LD_INT 0
28441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28442: LD_ADDR_VAR 0 1
28446: PUSH
28447: LD_INT 22
28449: PUSH
28450: LD_OWVAR 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 21
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PPUSH
28473: CALL_OW 69
28477: ST_TO_ADDR
// if not tmp then
28478: LD_VAR 0 1
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 28513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28487: LD_VAR 0 1
28491: PUSH
28492: LD_INT 1
28494: PPUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 12
28504: ARRAY
28505: PPUSH
28506: LD_INT 60
28508: PPUSH
28509: CALL_OW 234
// end ;
28513: PPOPN 1
28515: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28516: LD_EXP 68
28520: PUSH
28521: LD_EXP 98
28525: AND
28526: IFFALSE 28625
28528: GO 28530
28530: DISABLE
28531: LD_INT 0
28533: PPUSH
28534: PPUSH
// begin enable ;
28535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28536: LD_ADDR_VAR 0 1
28540: PUSH
28541: LD_INT 22
28543: PUSH
28544: LD_OWVAR 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 61
28555: PUSH
28556: EMPTY
28557: LIST
28558: PUSH
28559: LD_INT 33
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 69
28578: ST_TO_ADDR
// if not tmp then
28579: LD_VAR 0 1
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 28625
// for i in tmp do
28588: LD_ADDR_VAR 0 2
28592: PUSH
28593: LD_VAR 0 1
28597: PUSH
28598: FOR_IN
28599: IFFALSE 28623
// if IsControledBy ( i ) then
28601: LD_VAR 0 2
28605: PPUSH
28606: CALL_OW 312
28610: IFFALSE 28621
// ComUnlink ( i ) ;
28612: LD_VAR 0 2
28616: PPUSH
28617: CALL_OW 136
28621: GO 28598
28623: POP
28624: POP
// end ;
28625: PPOPN 2
28627: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28628: LD_EXP 68
28632: PUSH
28633: LD_EXP 99
28637: AND
28638: IFFALSE 28778
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
// begin ToLua ( displayPowell(); ) ;
28647: LD_STRING displayPowell();
28649: PPUSH
28650: CALL_OW 559
// uc_side := 0 ;
28654: LD_ADDR_OWVAR 20
28658: PUSH
28659: LD_INT 0
28661: ST_TO_ADDR
// uc_nation := 2 ;
28662: LD_ADDR_OWVAR 21
28666: PUSH
28667: LD_INT 2
28669: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28670: LD_ADDR_OWVAR 37
28674: PUSH
28675: LD_INT 14
28677: ST_TO_ADDR
// vc_engine := engine_siberite ;
28678: LD_ADDR_OWVAR 39
28682: PUSH
28683: LD_INT 3
28685: ST_TO_ADDR
// vc_control := control_apeman ;
28686: LD_ADDR_OWVAR 38
28690: PUSH
28691: LD_INT 5
28693: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28694: LD_ADDR_OWVAR 40
28698: PUSH
28699: LD_INT 29
28701: ST_TO_ADDR
// un := CreateVehicle ;
28702: LD_ADDR_VAR 0 2
28706: PUSH
28707: CALL_OW 45
28711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28712: LD_VAR 0 2
28716: PPUSH
28717: LD_INT 1
28719: PPUSH
28720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28724: LD_INT 35
28726: PPUSH
28727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28731: LD_VAR 0 2
28735: PPUSH
28736: LD_INT 22
28738: PUSH
28739: LD_OWVAR 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 69
28752: PPUSH
28753: LD_VAR 0 2
28757: PPUSH
28758: CALL_OW 74
28762: PPUSH
28763: CALL_OW 115
// until IsDead ( un ) ;
28767: LD_VAR 0 2
28771: PPUSH
28772: CALL_OW 301
28776: IFFALSE 28724
// end ;
28778: PPOPN 2
28780: END
// every 0 0$1 trigger StreamModeActive and sStu do
28781: LD_EXP 68
28785: PUSH
28786: LD_EXP 107
28790: AND
28791: IFFALSE 28807
28793: GO 28795
28795: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28796: LD_STRING displayStucuk();
28798: PPUSH
28799: CALL_OW 559
// ResetFog ;
28803: CALL_OW 335
// end ;
28807: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28808: LD_EXP 68
28812: PUSH
28813: LD_EXP 100
28817: AND
28818: IFFALSE 28959
28820: GO 28822
28822: DISABLE
28823: LD_INT 0
28825: PPUSH
28826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28827: LD_ADDR_VAR 0 2
28831: PUSH
28832: LD_INT 22
28834: PUSH
28835: LD_OWVAR 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 21
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PPUSH
28858: CALL_OW 69
28862: ST_TO_ADDR
// if not tmp then
28863: LD_VAR 0 2
28867: NOT
28868: IFFALSE 28872
// exit ;
28870: GO 28959
// un := tmp [ rand ( 1 , tmp ) ] ;
28872: LD_ADDR_VAR 0 1
28876: PUSH
28877: LD_VAR 0 2
28881: PUSH
28882: LD_INT 1
28884: PPUSH
28885: LD_VAR 0 2
28889: PPUSH
28890: CALL_OW 12
28894: ARRAY
28895: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_INT 0
28903: PPUSH
28904: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28908: LD_VAR 0 1
28912: PPUSH
28913: LD_OWVAR 3
28917: PUSH
28918: LD_VAR 0 1
28922: DIFF
28923: PPUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: CALL_OW 74
28933: PPUSH
28934: CALL_OW 115
// wait ( 0 0$20 ) ;
28938: LD_INT 700
28940: PPUSH
28941: CALL_OW 67
// SetSide ( un , your_side ) ;
28945: LD_VAR 0 1
28949: PPUSH
28950: LD_OWVAR 2
28954: PPUSH
28955: CALL_OW 235
// end ;
28959: PPOPN 2
28961: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28962: LD_EXP 68
28966: PUSH
28967: LD_EXP 101
28971: AND
28972: IFFALSE 29078
28974: GO 28976
28976: DISABLE
28977: LD_INT 0
28979: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28980: LD_ADDR_VAR 0 1
28984: PUSH
28985: LD_INT 22
28987: PUSH
28988: LD_OWVAR 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 30
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 30
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PPUSH
29029: CALL_OW 69
29033: ST_TO_ADDR
// if not depot then
29034: LD_VAR 0 1
29038: NOT
29039: IFFALSE 29043
// exit ;
29041: GO 29078
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29043: LD_VAR 0 1
29047: PUSH
29048: LD_INT 1
29050: ARRAY
29051: PPUSH
29052: CALL_OW 250
29056: PPUSH
29057: LD_VAR 0 1
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: PPUSH
29066: CALL_OW 251
29070: PPUSH
29071: LD_INT 70
29073: PPUSH
29074: CALL_OW 495
// end ;
29078: PPOPN 1
29080: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29081: LD_EXP 68
29085: PUSH
29086: LD_EXP 102
29090: AND
29091: IFFALSE 29302
29093: GO 29095
29095: DISABLE
29096: LD_INT 0
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29103: LD_ADDR_VAR 0 5
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_OWVAR 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 21
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: ST_TO_ADDR
// if not tmp then
29139: LD_VAR 0 5
29143: NOT
29144: IFFALSE 29148
// exit ;
29146: GO 29302
// for i in tmp do
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_VAR 0 5
29157: PUSH
29158: FOR_IN
29159: IFFALSE 29300
// begin d := rand ( 0 , 5 ) ;
29161: LD_ADDR_VAR 0 4
29165: PUSH
29166: LD_INT 0
29168: PPUSH
29169: LD_INT 5
29171: PPUSH
29172: CALL_OW 12
29176: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29177: LD_ADDR_VAR 0 2
29181: PUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 250
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: LD_INT 3
29199: PPUSH
29200: LD_INT 12
29202: PPUSH
29203: CALL_OW 12
29207: PPUSH
29208: CALL_OW 272
29212: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 251
29227: PPUSH
29228: LD_VAR 0 4
29232: PPUSH
29233: LD_INT 3
29235: PPUSH
29236: LD_INT 12
29238: PPUSH
29239: CALL_OW 12
29243: PPUSH
29244: CALL_OW 273
29248: ST_TO_ADDR
// if ValidHex ( x , y ) then
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: CALL_OW 488
29263: IFFALSE 29298
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: LD_VAR 0 2
29274: PPUSH
29275: LD_VAR 0 3
29279: PPUSH
29280: LD_INT 3
29282: PPUSH
29283: LD_INT 6
29285: PPUSH
29286: CALL_OW 12
29290: PPUSH
29291: LD_INT 1
29293: PPUSH
29294: CALL_OW 483
// end ;
29298: GO 29158
29300: POP
29301: POP
// end ;
29302: PPOPN 5
29304: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29305: LD_EXP 68
29309: PUSH
29310: LD_EXP 103
29314: AND
29315: IFFALSE 29409
29317: GO 29319
29319: DISABLE
29320: LD_INT 0
29322: PPUSH
29323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29324: LD_ADDR_VAR 0 2
29328: PUSH
29329: LD_INT 22
29331: PUSH
29332: LD_OWVAR 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 32
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 21
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: ST_TO_ADDR
// if not tmp then
29371: LD_VAR 0 2
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 29409
// for i in tmp do
29380: LD_ADDR_VAR 0 1
29384: PUSH
29385: LD_VAR 0 2
29389: PUSH
29390: FOR_IN
29391: IFFALSE 29407
// SetFuel ( i , 0 ) ;
29393: LD_VAR 0 1
29397: PPUSH
29398: LD_INT 0
29400: PPUSH
29401: CALL_OW 240
29405: GO 29390
29407: POP
29408: POP
// end ;
29409: PPOPN 2
29411: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29412: LD_EXP 68
29416: PUSH
29417: LD_EXP 104
29421: AND
29422: IFFALSE 29488
29424: GO 29426
29426: DISABLE
29427: LD_INT 0
29429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29430: LD_ADDR_VAR 0 1
29434: PUSH
29435: LD_INT 22
29437: PUSH
29438: LD_OWVAR 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 30
29449: PUSH
29450: LD_INT 29
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PPUSH
29461: CALL_OW 69
29465: ST_TO_ADDR
// if not tmp then
29466: LD_VAR 0 1
29470: NOT
29471: IFFALSE 29475
// exit ;
29473: GO 29488
// DestroyUnit ( tmp [ 1 ] ) ;
29475: LD_VAR 0 1
29479: PUSH
29480: LD_INT 1
29482: ARRAY
29483: PPUSH
29484: CALL_OW 65
// end ;
29488: PPOPN 1
29490: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29491: LD_EXP 68
29495: PUSH
29496: LD_EXP 106
29500: AND
29501: IFFALSE 29630
29503: GO 29505
29505: DISABLE
29506: LD_INT 0
29508: PPUSH
// begin uc_side := 0 ;
29509: LD_ADDR_OWVAR 20
29513: PUSH
29514: LD_INT 0
29516: ST_TO_ADDR
// uc_nation := nation_arabian ;
29517: LD_ADDR_OWVAR 21
29521: PUSH
29522: LD_INT 2
29524: ST_TO_ADDR
// hc_gallery :=  ;
29525: LD_ADDR_OWVAR 33
29529: PUSH
29530: LD_STRING 
29532: ST_TO_ADDR
// hc_name :=  ;
29533: LD_ADDR_OWVAR 26
29537: PUSH
29538: LD_STRING 
29540: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29541: LD_INT 1
29543: PPUSH
29544: LD_INT 11
29546: PPUSH
29547: LD_INT 10
29549: PPUSH
29550: CALL_OW 380
// un := CreateHuman ;
29554: LD_ADDR_VAR 0 1
29558: PUSH
29559: CALL_OW 44
29563: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29564: LD_VAR 0 1
29568: PPUSH
29569: LD_INT 1
29571: PPUSH
29572: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29576: LD_INT 35
29578: PPUSH
29579: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: LD_INT 22
29590: PUSH
29591: LD_OWVAR 2
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 69
29604: PPUSH
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 74
29614: PPUSH
29615: CALL_OW 115
// until IsDead ( un ) ;
29619: LD_VAR 0 1
29623: PPUSH
29624: CALL_OW 301
29628: IFFALSE 29576
// end ;
29630: PPOPN 1
29632: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29633: LD_EXP 68
29637: PUSH
29638: LD_EXP 108
29642: AND
29643: IFFALSE 29655
29645: GO 29647
29647: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29648: LD_STRING earthquake(getX(game), 0, 32)
29650: PPUSH
29651: CALL_OW 559
29655: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29656: LD_EXP 68
29660: PUSH
29661: LD_EXP 109
29665: AND
29666: IFFALSE 29757
29668: GO 29670
29670: DISABLE
29671: LD_INT 0
29673: PPUSH
// begin enable ;
29674: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29675: LD_ADDR_VAR 0 1
29679: PUSH
29680: LD_INT 22
29682: PUSH
29683: LD_OWVAR 2
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 21
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 33
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: PPUSH
29717: CALL_OW 69
29721: ST_TO_ADDR
// if not tmp then
29722: LD_VAR 0 1
29726: NOT
29727: IFFALSE 29731
// exit ;
29729: GO 29757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29731: LD_VAR 0 1
29735: PUSH
29736: LD_INT 1
29738: PPUSH
29739: LD_VAR 0 1
29743: PPUSH
29744: CALL_OW 12
29748: ARRAY
29749: PPUSH
29750: LD_INT 1
29752: PPUSH
29753: CALL_OW 234
// end ;
29757: PPOPN 1
29759: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29760: LD_EXP 68
29764: PUSH
29765: LD_EXP 110
29769: AND
29770: IFFALSE 29911
29772: GO 29774
29774: DISABLE
29775: LD_INT 0
29777: PPUSH
29778: PPUSH
29779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_INT 22
29787: PUSH
29788: LD_OWVAR 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 25
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// if not tmp then
29816: LD_VAR 0 3
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 29911
// un := tmp [ rand ( 1 , tmp ) ] ;
29825: LD_ADDR_VAR 0 2
29829: PUSH
29830: LD_VAR 0 3
29834: PUSH
29835: LD_INT 1
29837: PPUSH
29838: LD_VAR 0 3
29842: PPUSH
29843: CALL_OW 12
29847: ARRAY
29848: ST_TO_ADDR
// if Crawls ( un ) then
29849: LD_VAR 0 2
29853: PPUSH
29854: CALL_OW 318
29858: IFFALSE 29869
// ComWalk ( un ) ;
29860: LD_VAR 0 2
29864: PPUSH
29865: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29869: LD_VAR 0 2
29873: PPUSH
29874: LD_INT 9
29876: PPUSH
29877: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29881: LD_INT 28
29883: PPUSH
29884: LD_OWVAR 2
29888: PPUSH
29889: LD_INT 2
29891: PPUSH
29892: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29896: LD_INT 29
29898: PPUSH
29899: LD_OWVAR 2
29903: PPUSH
29904: LD_INT 2
29906: PPUSH
29907: CALL_OW 322
// end ;
29911: PPOPN 3
29913: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29914: LD_EXP 68
29918: PUSH
29919: LD_EXP 111
29923: AND
29924: IFFALSE 30035
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
29933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29934: LD_ADDR_VAR 0 3
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_OWVAR 2
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 25
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 69
29969: ST_TO_ADDR
// if not tmp then
29970: LD_VAR 0 3
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30035
// un := tmp [ rand ( 1 , tmp ) ] ;
29979: LD_ADDR_VAR 0 2
29983: PUSH
29984: LD_VAR 0 3
29988: PUSH
29989: LD_INT 1
29991: PPUSH
29992: LD_VAR 0 3
29996: PPUSH
29997: CALL_OW 12
30001: ARRAY
30002: ST_TO_ADDR
// if Crawls ( un ) then
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 318
30012: IFFALSE 30023
// ComWalk ( un ) ;
30014: LD_VAR 0 2
30018: PPUSH
30019: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30023: LD_VAR 0 2
30027: PPUSH
30028: LD_INT 8
30030: PPUSH
30031: CALL_OW 336
// end ;
30035: PPOPN 3
30037: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30038: LD_EXP 68
30042: PUSH
30043: LD_EXP 112
30047: AND
30048: IFFALSE 30192
30050: GO 30052
30052: DISABLE
30053: LD_INT 0
30055: PPUSH
30056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30057: LD_ADDR_VAR 0 2
30061: PUSH
30062: LD_INT 22
30064: PUSH
30065: LD_OWVAR 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 21
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 34
30089: PUSH
30090: LD_INT 12
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 34
30099: PUSH
30100: LD_INT 51
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 34
30109: PUSH
30110: LD_INT 32
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: PPUSH
30128: CALL_OW 69
30132: ST_TO_ADDR
// if not tmp then
30133: LD_VAR 0 2
30137: NOT
30138: IFFALSE 30142
// exit ;
30140: GO 30192
// for i in tmp do
30142: LD_ADDR_VAR 0 1
30146: PUSH
30147: LD_VAR 0 2
30151: PUSH
30152: FOR_IN
30153: IFFALSE 30190
// if GetCargo ( i , mat_artifact ) = 0 then
30155: LD_VAR 0 1
30159: PPUSH
30160: LD_INT 4
30162: PPUSH
30163: CALL_OW 289
30167: PUSH
30168: LD_INT 0
30170: EQUAL
30171: IFFALSE 30188
// SetCargo ( i , mat_siberit , 100 ) ;
30173: LD_VAR 0 1
30177: PPUSH
30178: LD_INT 3
30180: PPUSH
30181: LD_INT 100
30183: PPUSH
30184: CALL_OW 290
30188: GO 30152
30190: POP
30191: POP
// end ;
30192: PPOPN 2
30194: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30195: LD_EXP 68
30199: PUSH
30200: LD_EXP 113
30204: AND
30205: IFFALSE 30388
30207: GO 30209
30209: DISABLE
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30214: LD_ADDR_VAR 0 2
30218: PUSH
30219: LD_INT 22
30221: PUSH
30222: LD_OWVAR 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: ST_TO_ADDR
// if not tmp then
30236: LD_VAR 0 2
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30388
// for i := 1 to 2 do
30245: LD_ADDR_VAR 0 1
30249: PUSH
30250: DOUBLE
30251: LD_INT 1
30253: DEC
30254: ST_TO_ADDR
30255: LD_INT 2
30257: PUSH
30258: FOR_TO
30259: IFFALSE 30386
// begin uc_side := your_side ;
30261: LD_ADDR_OWVAR 20
30265: PUSH
30266: LD_OWVAR 2
30270: ST_TO_ADDR
// uc_nation := nation_american ;
30271: LD_ADDR_OWVAR 21
30275: PUSH
30276: LD_INT 1
30278: ST_TO_ADDR
// vc_chassis := us_morphling ;
30279: LD_ADDR_OWVAR 37
30283: PUSH
30284: LD_INT 5
30286: ST_TO_ADDR
// vc_engine := engine_siberite ;
30287: LD_ADDR_OWVAR 39
30291: PUSH
30292: LD_INT 3
30294: ST_TO_ADDR
// vc_control := control_computer ;
30295: LD_ADDR_OWVAR 38
30299: PUSH
30300: LD_INT 3
30302: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30303: LD_ADDR_OWVAR 40
30307: PUSH
30308: LD_INT 10
30310: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30311: LD_VAR 0 2
30315: PUSH
30316: LD_INT 1
30318: ARRAY
30319: PPUSH
30320: CALL_OW 310
30324: NOT
30325: IFFALSE 30372
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30327: CALL_OW 45
30331: PPUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: CALL_OW 250
30345: PPUSH
30346: LD_VAR 0 2
30350: PUSH
30351: LD_INT 1
30353: ARRAY
30354: PPUSH
30355: CALL_OW 251
30359: PPUSH
30360: LD_INT 12
30362: PPUSH
30363: LD_INT 1
30365: PPUSH
30366: CALL_OW 50
30370: GO 30384
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30372: CALL_OW 45
30376: PPUSH
30377: LD_INT 1
30379: PPUSH
30380: CALL_OW 51
// end ;
30384: GO 30258
30386: POP
30387: POP
// end ;
30388: PPOPN 2
30390: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30391: LD_EXP 68
30395: PUSH
30396: LD_EXP 114
30400: AND
30401: IFFALSE 30623
30403: GO 30405
30405: DISABLE
30406: LD_INT 0
30408: PPUSH
30409: PPUSH
30410: PPUSH
30411: PPUSH
30412: PPUSH
30413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30414: LD_ADDR_VAR 0 6
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_OWVAR 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: LD_INT 23
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: PPUSH
30463: CALL_OW 69
30467: ST_TO_ADDR
// if not tmp then
30468: LD_VAR 0 6
30472: NOT
30473: IFFALSE 30477
// exit ;
30475: GO 30623
// s1 := rand ( 1 , 4 ) ;
30477: LD_ADDR_VAR 0 2
30481: PUSH
30482: LD_INT 1
30484: PPUSH
30485: LD_INT 4
30487: PPUSH
30488: CALL_OW 12
30492: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30493: LD_ADDR_VAR 0 4
30497: PUSH
30498: LD_VAR 0 6
30502: PUSH
30503: LD_INT 1
30505: ARRAY
30506: PPUSH
30507: LD_VAR 0 2
30511: PPUSH
30512: CALL_OW 259
30516: ST_TO_ADDR
// if s1 = 1 then
30517: LD_VAR 0 2
30521: PUSH
30522: LD_INT 1
30524: EQUAL
30525: IFFALSE 30545
// s2 := rand ( 2 , 4 ) else
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_INT 2
30534: PPUSH
30535: LD_INT 4
30537: PPUSH
30538: CALL_OW 12
30542: ST_TO_ADDR
30543: GO 30553
// s2 := 1 ;
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_INT 1
30552: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30553: LD_ADDR_VAR 0 5
30557: PUSH
30558: LD_VAR 0 6
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: CALL_OW 259
30576: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30577: LD_VAR 0 6
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PPUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: LD_VAR 0 5
30595: PPUSH
30596: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30600: LD_VAR 0 6
30604: PUSH
30605: LD_INT 1
30607: ARRAY
30608: PPUSH
30609: LD_VAR 0 3
30613: PPUSH
30614: LD_VAR 0 4
30618: PPUSH
30619: CALL_OW 237
// end ;
30623: PPOPN 6
30625: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30626: LD_EXP 68
30630: PUSH
30631: LD_EXP 115
30635: AND
30636: IFFALSE 30715
30638: GO 30640
30640: DISABLE
30641: LD_INT 0
30643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30644: LD_ADDR_VAR 0 1
30648: PUSH
30649: LD_INT 22
30651: PUSH
30652: LD_OWVAR 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 30
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 69
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 1
30684: NOT
30685: IFFALSE 30689
// exit ;
30687: GO 30715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30689: LD_VAR 0 1
30693: PUSH
30694: LD_INT 1
30696: PPUSH
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL_OW 12
30706: ARRAY
30707: PPUSH
30708: LD_INT 1
30710: PPUSH
30711: CALL_OW 234
// end ;
30715: PPOPN 1
30717: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30718: LD_EXP 68
30722: PUSH
30723: LD_EXP 116
30727: AND
30728: IFFALSE 30840
30730: GO 30732
30732: DISABLE
30733: LD_INT 0
30735: PPUSH
30736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30737: LD_ADDR_VAR 0 2
30741: PUSH
30742: LD_INT 22
30744: PUSH
30745: LD_OWVAR 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: LD_INT 30
30759: PUSH
30760: LD_INT 27
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: LD_INT 26
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 30
30779: PUSH
30780: LD_INT 28
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PPUSH
30797: CALL_OW 69
30801: ST_TO_ADDR
// if not tmp then
30802: LD_VAR 0 2
30806: NOT
30807: IFFALSE 30811
// exit ;
30809: GO 30840
// for i in tmp do
30811: LD_ADDR_VAR 0 1
30815: PUSH
30816: LD_VAR 0 2
30820: PUSH
30821: FOR_IN
30822: IFFALSE 30838
// SetLives ( i , 1 ) ;
30824: LD_VAR 0 1
30828: PPUSH
30829: LD_INT 1
30831: PPUSH
30832: CALL_OW 234
30836: GO 30821
30838: POP
30839: POP
// end ;
30840: PPOPN 2
30842: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30843: LD_EXP 68
30847: PUSH
30848: LD_EXP 117
30852: AND
30853: IFFALSE 31140
30855: GO 30857
30857: DISABLE
30858: LD_INT 0
30860: PPUSH
30861: PPUSH
30862: PPUSH
// begin i := rand ( 1 , 7 ) ;
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: LD_INT 1
30870: PPUSH
30871: LD_INT 7
30873: PPUSH
30874: CALL_OW 12
30878: ST_TO_ADDR
// case i of 1 :
30879: LD_VAR 0 1
30883: PUSH
30884: LD_INT 1
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30902
30892: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30893: LD_STRING earthquake(getX(game), 0, 32)
30895: PPUSH
30896: CALL_OW 559
30900: GO 31140
30902: LD_INT 2
30904: DOUBLE
30905: EQUAL
30906: IFTRUE 30910
30908: GO 30924
30910: POP
// begin ToLua ( displayStucuk(); ) ;
30911: LD_STRING displayStucuk();
30913: PPUSH
30914: CALL_OW 559
// ResetFog ;
30918: CALL_OW 335
// end ; 3 :
30922: GO 31140
30924: LD_INT 3
30926: DOUBLE
30927: EQUAL
30928: IFTRUE 30932
30930: GO 31036
30932: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_OWVAR 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 25
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PPUSH
30964: CALL_OW 69
30968: ST_TO_ADDR
// if not tmp then
30969: LD_VAR 0 2
30973: NOT
30974: IFFALSE 30978
// exit ;
30976: GO 31140
// un := tmp [ rand ( 1 , tmp ) ] ;
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_VAR 0 2
30987: PUSH
30988: LD_INT 1
30990: PPUSH
30991: LD_VAR 0 2
30995: PPUSH
30996: CALL_OW 12
31000: ARRAY
31001: ST_TO_ADDR
// if Crawls ( un ) then
31002: LD_VAR 0 3
31006: PPUSH
31007: CALL_OW 318
31011: IFFALSE 31022
// ComWalk ( un ) ;
31013: LD_VAR 0 3
31017: PPUSH
31018: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31022: LD_VAR 0 3
31026: PPUSH
31027: LD_INT 8
31029: PPUSH
31030: CALL_OW 336
// end ; 4 :
31034: GO 31140
31036: LD_INT 4
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31118
31044: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31045: LD_ADDR_VAR 0 2
31049: PUSH
31050: LD_INT 22
31052: PUSH
31053: LD_OWVAR 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 30
31064: PUSH
31065: LD_INT 29
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PPUSH
31076: CALL_OW 69
31080: ST_TO_ADDR
// if not tmp then
31081: LD_VAR 0 2
31085: NOT
31086: IFFALSE 31090
// exit ;
31088: GO 31140
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31090: LD_VAR 0 2
31094: PUSH
31095: LD_INT 1
31097: ARRAY
31098: PPUSH
31099: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31103: LD_VAR 0 2
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: CALL_OW 65
// end ; 5 .. 7 :
31116: GO 31140
31118: LD_INT 5
31120: DOUBLE
31121: GREATEREQUAL
31122: IFFALSE 31130
31124: LD_INT 7
31126: DOUBLE
31127: LESSEQUAL
31128: IFTRUE 31132
31130: GO 31139
31132: POP
// StreamSibBomb ; end ;
31133: CALL 27377 0 0
31137: GO 31140
31139: POP
// end ;
31140: PPOPN 3
31142: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31143: LD_EXP 68
31147: PUSH
31148: LD_EXP 118
31152: AND
31153: IFFALSE 31309
31155: GO 31157
31157: DISABLE
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
31162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31163: LD_ADDR_VAR 0 2
31167: PUSH
31168: LD_INT 81
31170: PUSH
31171: LD_OWVAR 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 21
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 21
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PPUSH
31212: CALL_OW 69
31216: ST_TO_ADDR
// if not tmp then
31217: LD_VAR 0 2
31221: NOT
31222: IFFALSE 31226
// exit ;
31224: GO 31309
// p := 0 ;
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31234: LD_INT 35
31236: PPUSH
31237: CALL_OW 67
// p := p + 1 ;
31241: LD_ADDR_VAR 0 3
31245: PUSH
31246: LD_VAR 0 3
31250: PUSH
31251: LD_INT 1
31253: PLUS
31254: ST_TO_ADDR
// for i in tmp do
31255: LD_ADDR_VAR 0 1
31259: PUSH
31260: LD_VAR 0 2
31264: PUSH
31265: FOR_IN
31266: IFFALSE 31297
// if GetLives ( i ) < 1000 then
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 256
31277: PUSH
31278: LD_INT 1000
31280: LESS
31281: IFFALSE 31295
// SetLives ( i , 1000 ) ;
31283: LD_VAR 0 1
31287: PPUSH
31288: LD_INT 1000
31290: PPUSH
31291: CALL_OW 234
31295: GO 31265
31297: POP
31298: POP
// until p > 20 ;
31299: LD_VAR 0 3
31303: PUSH
31304: LD_INT 20
31306: GREATER
31307: IFFALSE 31234
// end ;
31309: PPOPN 3
31311: END
// every 0 0$1 trigger StreamModeActive and sTime do
31312: LD_EXP 68
31316: PUSH
31317: LD_EXP 119
31321: AND
31322: IFFALSE 31357
31324: GO 31326
31326: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31327: LD_INT 28
31329: PPUSH
31330: LD_OWVAR 2
31334: PPUSH
31335: LD_INT 2
31337: PPUSH
31338: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31342: LD_INT 30
31344: PPUSH
31345: LD_OWVAR 2
31349: PPUSH
31350: LD_INT 2
31352: PPUSH
31353: CALL_OW 322
// end ;
31357: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31358: LD_EXP 68
31362: PUSH
31363: LD_EXP 120
31367: AND
31368: IFFALSE 31489
31370: GO 31372
31372: DISABLE
31373: LD_INT 0
31375: PPUSH
31376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31377: LD_ADDR_VAR 0 2
31381: PUSH
31382: LD_INT 22
31384: PUSH
31385: LD_OWVAR 2
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 21
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: LD_INT 23
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: PPUSH
31426: CALL_OW 69
31430: ST_TO_ADDR
// if not tmp then
31431: LD_VAR 0 2
31435: NOT
31436: IFFALSE 31440
// exit ;
31438: GO 31489
// for i in tmp do
31440: LD_ADDR_VAR 0 1
31444: PUSH
31445: LD_VAR 0 2
31449: PUSH
31450: FOR_IN
31451: IFFALSE 31487
// begin if Crawls ( i ) then
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 318
31462: IFFALSE 31473
// ComWalk ( i ) ;
31464: LD_VAR 0 1
31468: PPUSH
31469: CALL_OW 138
// SetClass ( i , 2 ) ;
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_INT 2
31480: PPUSH
31481: CALL_OW 336
// end ;
31485: GO 31450
31487: POP
31488: POP
// end ;
31489: PPOPN 2
31491: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31492: LD_EXP 68
31496: PUSH
31497: LD_EXP 121
31501: AND
31502: IFFALSE 31790
31504: GO 31506
31506: DISABLE
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31512: LD_OWVAR 2
31516: PPUSH
31517: LD_INT 9
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: LD_INT 1
31525: PPUSH
31526: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31530: LD_INT 9
31532: PPUSH
31533: LD_OWVAR 2
31537: PPUSH
31538: CALL_OW 343
// uc_side := 9 ;
31542: LD_ADDR_OWVAR 20
31546: PUSH
31547: LD_INT 9
31549: ST_TO_ADDR
// uc_nation := 2 ;
31550: LD_ADDR_OWVAR 21
31554: PUSH
31555: LD_INT 2
31557: ST_TO_ADDR
// hc_name := Dark Warrior ;
31558: LD_ADDR_OWVAR 26
31562: PUSH
31563: LD_STRING Dark Warrior
31565: ST_TO_ADDR
// hc_gallery :=  ;
31566: LD_ADDR_OWVAR 33
31570: PUSH
31571: LD_STRING 
31573: ST_TO_ADDR
// hc_noskilllimit := true ;
31574: LD_ADDR_OWVAR 76
31578: PUSH
31579: LD_INT 1
31581: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31582: LD_ADDR_OWVAR 31
31586: PUSH
31587: LD_INT 30
31589: PUSH
31590: LD_INT 30
31592: PUSH
31593: LD_INT 30
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: ST_TO_ADDR
// un := CreateHuman ;
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: CALL_OW 44
31614: ST_TO_ADDR
// hc_noskilllimit := false ;
31615: LD_ADDR_OWVAR 76
31619: PUSH
31620: LD_INT 0
31622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31623: LD_VAR 0 3
31627: PPUSH
31628: LD_INT 1
31630: PPUSH
31631: CALL_OW 51
// ToLua ( playRanger() ) ;
31635: LD_STRING playRanger()
31637: PPUSH
31638: CALL_OW 559
// p := 0 ;
31642: LD_ADDR_VAR 0 2
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31650: LD_INT 35
31652: PPUSH
31653: CALL_OW 67
// p := p + 1 ;
31657: LD_ADDR_VAR 0 2
31661: PUSH
31662: LD_VAR 0 2
31666: PUSH
31667: LD_INT 1
31669: PLUS
31670: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31671: LD_VAR 0 3
31675: PPUSH
31676: CALL_OW 256
31680: PUSH
31681: LD_INT 1000
31683: LESS
31684: IFFALSE 31698
// SetLives ( un , 1000 ) ;
31686: LD_VAR 0 3
31690: PPUSH
31691: LD_INT 1000
31693: PPUSH
31694: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31698: LD_VAR 0 3
31702: PPUSH
31703: LD_INT 81
31705: PUSH
31706: LD_OWVAR 2
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 91
31717: PUSH
31718: LD_VAR 0 3
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PPUSH
31735: CALL_OW 69
31739: PPUSH
31740: LD_VAR 0 3
31744: PPUSH
31745: CALL_OW 74
31749: PPUSH
31750: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31754: LD_VAR 0 2
31758: PUSH
31759: LD_INT 80
31761: GREATER
31762: PUSH
31763: LD_VAR 0 3
31767: PPUSH
31768: CALL_OW 301
31772: OR
31773: IFFALSE 31650
// if un then
31775: LD_VAR 0 3
31779: IFFALSE 31790
// RemoveUnit ( un ) ;
31781: LD_VAR 0 3
31785: PPUSH
31786: CALL_OW 64
// end ;
31790: PPOPN 3
31792: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31793: LD_EXP 122
31797: IFFALSE 31913
31799: GO 31801
31801: DISABLE
31802: LD_INT 0
31804: PPUSH
31805: PPUSH
31806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_INT 81
31814: PUSH
31815: LD_OWVAR 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 21
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 69
31842: ST_TO_ADDR
// if not tmp then
31843: LD_VAR 0 2
31847: NOT
31848: IFFALSE 31852
// exit ;
31850: GO 31913
// ToLua ( playComputer() ) ;
31852: LD_STRING playComputer()
31854: PPUSH
31855: CALL_OW 559
// for i in tmp do
31859: LD_ADDR_VAR 0 1
31863: PUSH
31864: LD_VAR 0 2
31868: PUSH
31869: FOR_IN
31870: IFFALSE 31911
// for j := 1 to 4 do
31872: LD_ADDR_VAR 0 3
31876: PUSH
31877: DOUBLE
31878: LD_INT 1
31880: DEC
31881: ST_TO_ADDR
31882: LD_INT 4
31884: PUSH
31885: FOR_TO
31886: IFFALSE 31907
// SetSkill ( i , j , 10 ) ;
31888: LD_VAR 0 1
31892: PPUSH
31893: LD_VAR 0 3
31897: PPUSH
31898: LD_INT 10
31900: PPUSH
31901: CALL_OW 237
31905: GO 31885
31907: POP
31908: POP
31909: GO 31869
31911: POP
31912: POP
// end ;
31913: PPOPN 3
31915: END
// every 0 0$1 trigger s30 do var i , tmp ;
31916: LD_EXP 123
31920: IFFALSE 31989
31922: GO 31924
31924: DISABLE
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31929: LD_ADDR_VAR 0 2
31933: PUSH
31934: LD_INT 22
31936: PUSH
31937: LD_OWVAR 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PPUSH
31946: CALL_OW 69
31950: ST_TO_ADDR
// if not tmp then
31951: LD_VAR 0 2
31955: NOT
31956: IFFALSE 31960
// exit ;
31958: GO 31989
// for i in tmp do
31960: LD_ADDR_VAR 0 1
31964: PUSH
31965: LD_VAR 0 2
31969: PUSH
31970: FOR_IN
31971: IFFALSE 31987
// SetLives ( i , 300 ) ;
31973: LD_VAR 0 1
31977: PPUSH
31978: LD_INT 300
31980: PPUSH
31981: CALL_OW 234
31985: GO 31970
31987: POP
31988: POP
// end ;
31989: PPOPN 2
31991: END
// every 0 0$1 trigger s60 do var i , tmp ;
31992: LD_EXP 124
31996: IFFALSE 32065
31998: GO 32000
32000: DISABLE
32001: LD_INT 0
32003: PPUSH
32004: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32005: LD_ADDR_VAR 0 2
32009: PUSH
32010: LD_INT 22
32012: PUSH
32013: LD_OWVAR 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PPUSH
32022: CALL_OW 69
32026: ST_TO_ADDR
// if not tmp then
32027: LD_VAR 0 2
32031: NOT
32032: IFFALSE 32036
// exit ;
32034: GO 32065
// for i in tmp do
32036: LD_ADDR_VAR 0 1
32040: PUSH
32041: LD_VAR 0 2
32045: PUSH
32046: FOR_IN
32047: IFFALSE 32063
// SetLives ( i , 600 ) ;
32049: LD_VAR 0 1
32053: PPUSH
32054: LD_INT 600
32056: PPUSH
32057: CALL_OW 234
32061: GO 32046
32063: POP
32064: POP
// end ;
32065: PPOPN 2
32067: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32068: LD_INT 0
32070: PPUSH
// case cmd of 301 :
32071: LD_VAR 0 1
32075: PUSH
32076: LD_INT 301
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32116
32084: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32085: LD_VAR 0 6
32089: PPUSH
32090: LD_VAR 0 7
32094: PPUSH
32095: LD_VAR 0 8
32099: PPUSH
32100: LD_VAR 0 4
32104: PPUSH
32105: LD_VAR 0 5
32109: PPUSH
32110: CALL 33317 0 5
32114: GO 32237
32116: LD_INT 302
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32161
32124: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32125: LD_VAR 0 6
32129: PPUSH
32130: LD_VAR 0 7
32134: PPUSH
32135: LD_VAR 0 8
32139: PPUSH
32140: LD_VAR 0 9
32144: PPUSH
32145: LD_VAR 0 4
32149: PPUSH
32150: LD_VAR 0 5
32154: PPUSH
32155: CALL 33408 0 6
32159: GO 32237
32161: LD_INT 303
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32206
32169: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32170: LD_VAR 0 6
32174: PPUSH
32175: LD_VAR 0 7
32179: PPUSH
32180: LD_VAR 0 8
32184: PPUSH
32185: LD_VAR 0 9
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: LD_VAR 0 5
32199: PPUSH
32200: CALL 32242 0 6
32204: GO 32237
32206: LD_INT 304
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32236
32214: POP
// hHackTeleport ( unit , x , y ) ; end ;
32215: LD_VAR 0 2
32219: PPUSH
32220: LD_VAR 0 4
32224: PPUSH
32225: LD_VAR 0 5
32229: PPUSH
32230: CALL 34001 0 3
32234: GO 32237
32236: POP
// end ;
32237: LD_VAR 0 12
32241: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32242: LD_INT 0
32244: PPUSH
32245: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32246: LD_VAR 0 1
32250: PUSH
32251: LD_INT 1
32253: LESS
32254: PUSH
32255: LD_VAR 0 1
32259: PUSH
32260: LD_INT 3
32262: GREATER
32263: OR
32264: PUSH
32265: LD_VAR 0 5
32269: PPUSH
32270: LD_VAR 0 6
32274: PPUSH
32275: CALL_OW 428
32279: OR
32280: IFFALSE 32284
// exit ;
32282: GO 33004
// uc_side := your_side ;
32284: LD_ADDR_OWVAR 20
32288: PUSH
32289: LD_OWVAR 2
32293: ST_TO_ADDR
// uc_nation := nation ;
32294: LD_ADDR_OWVAR 21
32298: PUSH
32299: LD_VAR 0 1
32303: ST_TO_ADDR
// bc_level = 1 ;
32304: LD_ADDR_OWVAR 43
32308: PUSH
32309: LD_INT 1
32311: ST_TO_ADDR
// case btype of 1 :
32312: LD_VAR 0 2
32316: PUSH
32317: LD_INT 1
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32325
32323: GO 32336
32325: POP
// bc_type := b_depot ; 2 :
32326: LD_ADDR_OWVAR 42
32330: PUSH
32331: LD_INT 0
32333: ST_TO_ADDR
32334: GO 32948
32336: LD_INT 2
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32355
32344: POP
// bc_type := b_warehouse ; 3 :
32345: LD_ADDR_OWVAR 42
32349: PUSH
32350: LD_INT 1
32352: ST_TO_ADDR
32353: GO 32948
32355: LD_INT 3
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32374
32363: POP
// bc_type := b_lab ; 4 .. 9 :
32364: LD_ADDR_OWVAR 42
32368: PUSH
32369: LD_INT 6
32371: ST_TO_ADDR
32372: GO 32948
32374: LD_INT 4
32376: DOUBLE
32377: GREATEREQUAL
32378: IFFALSE 32386
32380: LD_INT 9
32382: DOUBLE
32383: LESSEQUAL
32384: IFTRUE 32388
32386: GO 32440
32388: POP
// begin bc_type := b_lab_half ;
32389: LD_ADDR_OWVAR 42
32393: PUSH
32394: LD_INT 7
32396: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32397: LD_ADDR_OWVAR 44
32401: PUSH
32402: LD_INT 10
32404: PUSH
32405: LD_INT 11
32407: PUSH
32408: LD_INT 12
32410: PUSH
32411: LD_INT 15
32413: PUSH
32414: LD_INT 14
32416: PUSH
32417: LD_INT 13
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: PUSH
32428: LD_VAR 0 2
32432: PUSH
32433: LD_INT 3
32435: MINUS
32436: ARRAY
32437: ST_TO_ADDR
// end ; 10 .. 13 :
32438: GO 32948
32440: LD_INT 10
32442: DOUBLE
32443: GREATEREQUAL
32444: IFFALSE 32452
32446: LD_INT 13
32448: DOUBLE
32449: LESSEQUAL
32450: IFTRUE 32454
32452: GO 32531
32454: POP
// begin bc_type := b_lab_full ;
32455: LD_ADDR_OWVAR 42
32459: PUSH
32460: LD_INT 8
32462: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32463: LD_ADDR_OWVAR 44
32467: PUSH
32468: LD_INT 10
32470: PUSH
32471: LD_INT 12
32473: PUSH
32474: LD_INT 14
32476: PUSH
32477: LD_INT 13
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: PUSH
32486: LD_VAR 0 2
32490: PUSH
32491: LD_INT 9
32493: MINUS
32494: ARRAY
32495: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32496: LD_ADDR_OWVAR 45
32500: PUSH
32501: LD_INT 11
32503: PUSH
32504: LD_INT 15
32506: PUSH
32507: LD_INT 12
32509: PUSH
32510: LD_INT 15
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: PUSH
32519: LD_VAR 0 2
32523: PUSH
32524: LD_INT 9
32526: MINUS
32527: ARRAY
32528: ST_TO_ADDR
// end ; 14 :
32529: GO 32948
32531: LD_INT 14
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32550
32539: POP
// bc_type := b_workshop ; 15 :
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 2
32547: ST_TO_ADDR
32548: GO 32948
32550: LD_INT 15
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32569
32558: POP
// bc_type := b_factory ; 16 :
32559: LD_ADDR_OWVAR 42
32563: PUSH
32564: LD_INT 3
32566: ST_TO_ADDR
32567: GO 32948
32569: LD_INT 16
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32588
32577: POP
// bc_type := b_ext_gun ; 17 :
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 17
32585: ST_TO_ADDR
32586: GO 32948
32588: LD_INT 17
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32624
32596: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 19
32604: PUSH
32605: LD_INT 23
32607: PUSH
32608: LD_INT 19
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: LIST
32615: PUSH
32616: LD_VAR 0 1
32620: ARRAY
32621: ST_TO_ADDR
32622: GO 32948
32624: LD_INT 18
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_ext_radar ; 19 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 20
32640: ST_TO_ADDR
32641: GO 32948
32643: LD_INT 19
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_ext_radio ; 20 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 22
32659: ST_TO_ADDR
32660: GO 32948
32662: LD_INT 20
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_ext_siberium ; 21 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 21
32678: ST_TO_ADDR
32679: GO 32948
32681: LD_INT 21
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_ext_computer ; 22 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 24
32697: ST_TO_ADDR
32698: GO 32948
32700: LD_INT 22
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_ext_track ; 23 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 16
32716: ST_TO_ADDR
32717: GO 32948
32719: LD_INT 23
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_ext_laser ; 24 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 25
32735: ST_TO_ADDR
32736: GO 32948
32738: LD_INT 24
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32757
32746: POP
// bc_type := b_control_tower ; 25 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 36
32754: ST_TO_ADDR
32755: GO 32948
32757: LD_INT 25
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// bc_type := b_breastwork ; 26 :
32766: LD_ADDR_OWVAR 42
32770: PUSH
32771: LD_INT 31
32773: ST_TO_ADDR
32774: GO 32948
32776: LD_INT 26
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// bc_type := b_bunker ; 27 :
32785: LD_ADDR_OWVAR 42
32789: PUSH
32790: LD_INT 32
32792: ST_TO_ADDR
32793: GO 32948
32795: LD_INT 27
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// bc_type := b_turret ; 28 :
32804: LD_ADDR_OWVAR 42
32808: PUSH
32809: LD_INT 33
32811: ST_TO_ADDR
32812: GO 32948
32814: LD_INT 28
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// bc_type := b_armoury ; 29 :
32823: LD_ADDR_OWVAR 42
32827: PUSH
32828: LD_INT 4
32830: ST_TO_ADDR
32831: GO 32948
32833: LD_INT 29
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32852
32841: POP
// bc_type := b_barracks ; 30 :
32842: LD_ADDR_OWVAR 42
32846: PUSH
32847: LD_INT 5
32849: ST_TO_ADDR
32850: GO 32948
32852: LD_INT 30
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32860
32858: GO 32871
32860: POP
// bc_type := b_solar_power ; 31 :
32861: LD_ADDR_OWVAR 42
32865: PUSH
32866: LD_INT 27
32868: ST_TO_ADDR
32869: GO 32948
32871: LD_INT 31
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32890
32879: POP
// bc_type := b_oil_power ; 32 :
32880: LD_ADDR_OWVAR 42
32884: PUSH
32885: LD_INT 26
32887: ST_TO_ADDR
32888: GO 32948
32890: LD_INT 32
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32909
32898: POP
// bc_type := b_siberite_power ; 33 :
32899: LD_ADDR_OWVAR 42
32903: PUSH
32904: LD_INT 28
32906: ST_TO_ADDR
32907: GO 32948
32909: LD_INT 33
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32928
32917: POP
// bc_type := b_oil_mine ; 34 :
32918: LD_ADDR_OWVAR 42
32922: PUSH
32923: LD_INT 29
32925: ST_TO_ADDR
32926: GO 32948
32928: LD_INT 34
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32936
32934: GO 32947
32936: POP
// bc_type := b_siberite_mine ; end ;
32937: LD_ADDR_OWVAR 42
32941: PUSH
32942: LD_INT 30
32944: ST_TO_ADDR
32945: GO 32948
32947: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32948: LD_ADDR_VAR 0 8
32952: PUSH
32953: LD_VAR 0 5
32957: PPUSH
32958: LD_VAR 0 6
32962: PPUSH
32963: LD_VAR 0 3
32967: PPUSH
32968: CALL_OW 47
32972: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32973: LD_OWVAR 42
32977: PUSH
32978: LD_INT 32
32980: PUSH
32981: LD_INT 33
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: IN
32988: IFFALSE 33004
// PlaceWeaponTurret ( b , weapon ) ;
32990: LD_VAR 0 8
32994: PPUSH
32995: LD_VAR 0 4
32999: PPUSH
33000: CALL_OW 431
// end ;
33004: LD_VAR 0 7
33008: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33009: LD_INT 0
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33015: LD_ADDR_VAR 0 4
33019: PUSH
33020: LD_INT 22
33022: PUSH
33023: LD_OWVAR 2
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 30
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 30
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 69
33068: ST_TO_ADDR
// if not tmp then
33069: LD_VAR 0 4
33073: NOT
33074: IFFALSE 33078
// exit ;
33076: GO 33137
// for i in tmp do
33078: LD_ADDR_VAR 0 2
33082: PUSH
33083: LD_VAR 0 4
33087: PUSH
33088: FOR_IN
33089: IFFALSE 33135
// for j = 1 to 3 do
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: DOUBLE
33097: LD_INT 1
33099: DEC
33100: ST_TO_ADDR
33101: LD_INT 3
33103: PUSH
33104: FOR_TO
33105: IFFALSE 33131
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33107: LD_VAR 0 2
33111: PPUSH
33112: CALL_OW 274
33116: PPUSH
33117: LD_VAR 0 3
33121: PPUSH
33122: LD_INT 99999
33124: PPUSH
33125: CALL_OW 277
33129: GO 33104
33131: POP
33132: POP
33133: GO 33088
33135: POP
33136: POP
// end ;
33137: LD_VAR 0 1
33141: RET
// export function hHackSetLevel10 ; var i , j ; begin
33142: LD_INT 0
33144: PPUSH
33145: PPUSH
33146: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33147: LD_ADDR_VAR 0 2
33151: PUSH
33152: LD_INT 21
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PPUSH
33162: CALL_OW 69
33166: PUSH
33167: FOR_IN
33168: IFFALSE 33220
// if IsSelected ( i ) then
33170: LD_VAR 0 2
33174: PPUSH
33175: CALL_OW 306
33179: IFFALSE 33218
// begin for j := 1 to 4 do
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: DOUBLE
33187: LD_INT 1
33189: DEC
33190: ST_TO_ADDR
33191: LD_INT 4
33193: PUSH
33194: FOR_TO
33195: IFFALSE 33216
// SetSkill ( i , j , 10 ) ;
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_VAR 0 3
33206: PPUSH
33207: LD_INT 10
33209: PPUSH
33210: CALL_OW 237
33214: GO 33194
33216: POP
33217: POP
// end ;
33218: GO 33167
33220: POP
33221: POP
// end ;
33222: LD_VAR 0 1
33226: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33227: LD_INT 0
33229: PPUSH
33230: PPUSH
33231: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33232: LD_ADDR_VAR 0 2
33236: PUSH
33237: LD_INT 22
33239: PUSH
33240: LD_OWVAR 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 21
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PPUSH
33263: CALL_OW 69
33267: PUSH
33268: FOR_IN
33269: IFFALSE 33310
// begin for j := 1 to 4 do
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: DOUBLE
33277: LD_INT 1
33279: DEC
33280: ST_TO_ADDR
33281: LD_INT 4
33283: PUSH
33284: FOR_TO
33285: IFFALSE 33306
// SetSkill ( i , j , 10 ) ;
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_VAR 0 3
33296: PPUSH
33297: LD_INT 10
33299: PPUSH
33300: CALL_OW 237
33304: GO 33284
33306: POP
33307: POP
// end ;
33308: GO 33268
33310: POP
33311: POP
// end ;
33312: LD_VAR 0 1
33316: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33317: LD_INT 0
33319: PPUSH
// uc_side := your_side ;
33320: LD_ADDR_OWVAR 20
33324: PUSH
33325: LD_OWVAR 2
33329: ST_TO_ADDR
// uc_nation := nation ;
33330: LD_ADDR_OWVAR 21
33334: PUSH
33335: LD_VAR 0 1
33339: ST_TO_ADDR
// InitHc ;
33340: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33344: LD_INT 0
33346: PPUSH
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 3
33356: PPUSH
33357: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33361: LD_VAR 0 4
33365: PPUSH
33366: LD_VAR 0 5
33370: PPUSH
33371: CALL_OW 428
33375: PUSH
33376: LD_INT 0
33378: EQUAL
33379: IFFALSE 33403
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33381: CALL_OW 44
33385: PPUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: LD_VAR 0 5
33395: PPUSH
33396: LD_INT 1
33398: PPUSH
33399: CALL_OW 48
// end ;
33403: LD_VAR 0 6
33407: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33408: LD_INT 0
33410: PPUSH
33411: PPUSH
// uc_side := your_side ;
33412: LD_ADDR_OWVAR 20
33416: PUSH
33417: LD_OWVAR 2
33421: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33422: LD_VAR 0 1
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: LD_INT 4
33438: PUSH
33439: LD_INT 5
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: IN
33449: IFFALSE 33461
// uc_nation := nation_american else
33451: LD_ADDR_OWVAR 21
33455: PUSH
33456: LD_INT 1
33458: ST_TO_ADDR
33459: GO 33504
// if chassis in [ 11 , 12 , 13 , 14 ] then
33461: LD_VAR 0 1
33465: PUSH
33466: LD_INT 11
33468: PUSH
33469: LD_INT 12
33471: PUSH
33472: LD_INT 13
33474: PUSH
33475: LD_INT 14
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: IN
33484: IFFALSE 33496
// uc_nation := nation_arabian else
33486: LD_ADDR_OWVAR 21
33490: PUSH
33491: LD_INT 2
33493: ST_TO_ADDR
33494: GO 33504
// uc_nation := nation_russian ;
33496: LD_ADDR_OWVAR 21
33500: PUSH
33501: LD_INT 3
33503: ST_TO_ADDR
// vc_chassis := chassis ;
33504: LD_ADDR_OWVAR 37
33508: PUSH
33509: LD_VAR 0 1
33513: ST_TO_ADDR
// vc_engine := engine ;
33514: LD_ADDR_OWVAR 39
33518: PUSH
33519: LD_VAR 0 2
33523: ST_TO_ADDR
// vc_control := control ;
33524: LD_ADDR_OWVAR 38
33528: PUSH
33529: LD_VAR 0 3
33533: ST_TO_ADDR
// vc_weapon := weapon ;
33534: LD_ADDR_OWVAR 40
33538: PUSH
33539: LD_VAR 0 4
33543: ST_TO_ADDR
// un := CreateVehicle ;
33544: LD_ADDR_VAR 0 8
33548: PUSH
33549: CALL_OW 45
33553: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33554: LD_VAR 0 8
33558: PPUSH
33559: LD_INT 0
33561: PPUSH
33562: LD_INT 5
33564: PPUSH
33565: CALL_OW 12
33569: PPUSH
33570: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33574: LD_VAR 0 8
33578: PPUSH
33579: LD_VAR 0 5
33583: PPUSH
33584: LD_VAR 0 6
33588: PPUSH
33589: LD_INT 1
33591: PPUSH
33592: CALL_OW 48
// end ;
33596: LD_VAR 0 7
33600: RET
// export hInvincible ; every 1 do
33601: GO 33603
33603: DISABLE
// hInvincible := [ ] ;
33604: LD_ADDR_EXP 125
33608: PUSH
33609: EMPTY
33610: ST_TO_ADDR
33611: END
// every 10 do var i ;
33612: GO 33614
33614: DISABLE
33615: LD_INT 0
33617: PPUSH
// begin enable ;
33618: ENABLE
// if not hInvincible then
33619: LD_EXP 125
33623: NOT
33624: IFFALSE 33628
// exit ;
33626: GO 33672
// for i in hInvincible do
33628: LD_ADDR_VAR 0 1
33632: PUSH
33633: LD_EXP 125
33637: PUSH
33638: FOR_IN
33639: IFFALSE 33670
// if GetLives ( i ) < 1000 then
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL_OW 256
33650: PUSH
33651: LD_INT 1000
33653: LESS
33654: IFFALSE 33668
// SetLives ( i , 1000 ) ;
33656: LD_VAR 0 1
33660: PPUSH
33661: LD_INT 1000
33663: PPUSH
33664: CALL_OW 234
33668: GO 33638
33670: POP
33671: POP
// end ;
33672: PPOPN 1
33674: END
// export function hHackInvincible ; var i ; begin
33675: LD_INT 0
33677: PPUSH
33678: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33679: LD_ADDR_VAR 0 2
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 21
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: PPUSH
33712: CALL_OW 69
33716: PUSH
33717: FOR_IN
33718: IFFALSE 33779
// if IsSelected ( i ) then
33720: LD_VAR 0 2
33724: PPUSH
33725: CALL_OW 306
33729: IFFALSE 33777
// begin if i in hInvincible then
33731: LD_VAR 0 2
33735: PUSH
33736: LD_EXP 125
33740: IN
33741: IFFALSE 33761
// hInvincible := hInvincible diff i else
33743: LD_ADDR_EXP 125
33747: PUSH
33748: LD_EXP 125
33752: PUSH
33753: LD_VAR 0 2
33757: DIFF
33758: ST_TO_ADDR
33759: GO 33777
// hInvincible := hInvincible union i ;
33761: LD_ADDR_EXP 125
33765: PUSH
33766: LD_EXP 125
33770: PUSH
33771: LD_VAR 0 2
33775: UNION
33776: ST_TO_ADDR
// end ;
33777: GO 33717
33779: POP
33780: POP
// end ;
33781: LD_VAR 0 1
33785: RET
// export function hHackInvisible ; var i , j ; begin
33786: LD_INT 0
33788: PPUSH
33789: PPUSH
33790: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33791: LD_ADDR_VAR 0 2
33795: PUSH
33796: LD_INT 21
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PPUSH
33806: CALL_OW 69
33810: PUSH
33811: FOR_IN
33812: IFFALSE 33836
// if IsSelected ( i ) then
33814: LD_VAR 0 2
33818: PPUSH
33819: CALL_OW 306
33823: IFFALSE 33834
// ComForceInvisible ( i ) ;
33825: LD_VAR 0 2
33829: PPUSH
33830: CALL_OW 496
33834: GO 33811
33836: POP
33837: POP
// end ;
33838: LD_VAR 0 1
33842: RET
// export function hHackChangeYourSide ; begin
33843: LD_INT 0
33845: PPUSH
// if your_side = 8 then
33846: LD_OWVAR 2
33850: PUSH
33851: LD_INT 8
33853: EQUAL
33854: IFFALSE 33866
// your_side := 0 else
33856: LD_ADDR_OWVAR 2
33860: PUSH
33861: LD_INT 0
33863: ST_TO_ADDR
33864: GO 33880
// your_side := your_side + 1 ;
33866: LD_ADDR_OWVAR 2
33870: PUSH
33871: LD_OWVAR 2
33875: PUSH
33876: LD_INT 1
33878: PLUS
33879: ST_TO_ADDR
// end ;
33880: LD_VAR 0 1
33884: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33885: LD_INT 0
33887: PPUSH
33888: PPUSH
33889: PPUSH
// for i in all_units do
33890: LD_ADDR_VAR 0 2
33894: PUSH
33895: LD_OWVAR 3
33899: PUSH
33900: FOR_IN
33901: IFFALSE 33979
// if IsSelected ( i ) then
33903: LD_VAR 0 2
33907: PPUSH
33908: CALL_OW 306
33912: IFFALSE 33977
// begin j := GetSide ( i ) ;
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_VAR 0 2
33923: PPUSH
33924: CALL_OW 255
33928: ST_TO_ADDR
// if j = 8 then
33929: LD_VAR 0 3
33933: PUSH
33934: LD_INT 8
33936: EQUAL
33937: IFFALSE 33949
// j := 0 else
33939: LD_ADDR_VAR 0 3
33943: PUSH
33944: LD_INT 0
33946: ST_TO_ADDR
33947: GO 33963
// j := j + 1 ;
33949: LD_ADDR_VAR 0 3
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: LD_INT 1
33961: PLUS
33962: ST_TO_ADDR
// SetSide ( i , j ) ;
33963: LD_VAR 0 2
33967: PPUSH
33968: LD_VAR 0 3
33972: PPUSH
33973: CALL_OW 235
// end ;
33977: GO 33900
33979: POP
33980: POP
// end ;
33981: LD_VAR 0 1
33985: RET
// export function hHackFog ; begin
33986: LD_INT 0
33988: PPUSH
// FogOff ( true ) ;
33989: LD_INT 1
33991: PPUSH
33992: CALL_OW 344
// end ;
33996: LD_VAR 0 1
34000: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34001: LD_INT 0
34003: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34004: LD_VAR 0 1
34008: PPUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 3
34018: PPUSH
34019: LD_INT 1
34021: PPUSH
34022: LD_INT 1
34024: PPUSH
34025: CALL_OW 483
// CenterOnXY ( x , y ) ;
34029: LD_VAR 0 2
34033: PPUSH
34034: LD_VAR 0 3
34038: PPUSH
34039: CALL_OW 84
// end ; end_of_file
34043: LD_VAR 0 4
34047: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34048: LD_INT 0
34050: PPUSH
34051: PPUSH
34052: PPUSH
34053: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL_OW 264
34063: PUSH
34064: LD_EXP 53
34068: EQUAL
34069: IFFALSE 34141
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34071: LD_INT 68
34073: PPUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 255
34083: PPUSH
34084: CALL_OW 321
34088: PUSH
34089: LD_INT 2
34091: EQUAL
34092: IFFALSE 34104
// eff := 70 else
34094: LD_ADDR_VAR 0 4
34098: PUSH
34099: LD_INT 70
34101: ST_TO_ADDR
34102: GO 34112
// eff := 30 ;
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_INT 30
34111: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 250
34121: PPUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 251
34131: PPUSH
34132: LD_VAR 0 4
34136: PPUSH
34137: CALL_OW 495
// end ; end ;
34141: LD_VAR 0 2
34145: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34146: LD_INT 0
34148: PPUSH
// end ;
34149: LD_VAR 0 4
34153: RET
// export function SOS_Command ( cmd ) ; begin
34154: LD_INT 0
34156: PPUSH
// end ;
34157: LD_VAR 0 2
34161: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34162: LD_INT 0
34164: PPUSH
// end ;
34165: LD_VAR 0 6
34169: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34170: LD_INT 0
34172: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34173: LD_VAR 0 1
34177: PUSH
34178: LD_INT 250
34180: EQUAL
34181: PUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: CALL_OW 264
34191: PUSH
34192: LD_EXP 56
34196: EQUAL
34197: AND
34198: IFFALSE 34219
// MinerPlaceMine ( unit , x , y ) ;
34200: LD_VAR 0 2
34204: PPUSH
34205: LD_VAR 0 4
34209: PPUSH
34210: LD_VAR 0 5
34214: PPUSH
34215: CALL 36568 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34219: LD_VAR 0 1
34223: PUSH
34224: LD_INT 251
34226: EQUAL
34227: PUSH
34228: LD_VAR 0 2
34232: PPUSH
34233: CALL_OW 264
34237: PUSH
34238: LD_EXP 56
34242: EQUAL
34243: AND
34244: IFFALSE 34265
// MinerDetonateMine ( unit , x , y ) ;
34246: LD_VAR 0 2
34250: PPUSH
34251: LD_VAR 0 4
34255: PPUSH
34256: LD_VAR 0 5
34260: PPUSH
34261: CALL 36845 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34265: LD_VAR 0 1
34269: PUSH
34270: LD_INT 252
34272: EQUAL
34273: PUSH
34274: LD_VAR 0 2
34278: PPUSH
34279: CALL_OW 264
34283: PUSH
34284: LD_EXP 56
34288: EQUAL
34289: AND
34290: IFFALSE 34311
// MinerCreateMinefield ( unit , x , y ) ;
34292: LD_VAR 0 2
34296: PPUSH
34297: LD_VAR 0 4
34301: PPUSH
34302: LD_VAR 0 5
34306: PPUSH
34307: CALL 37262 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34311: LD_VAR 0 1
34315: PUSH
34316: LD_INT 253
34318: EQUAL
34319: PUSH
34320: LD_VAR 0 2
34324: PPUSH
34325: CALL_OW 257
34329: PUSH
34330: LD_INT 5
34332: EQUAL
34333: AND
34334: IFFALSE 34355
// ComBinocular ( unit , x , y ) ;
34336: LD_VAR 0 2
34340: PPUSH
34341: LD_VAR 0 4
34345: PPUSH
34346: LD_VAR 0 5
34350: PPUSH
34351: CALL 37633 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34355: LD_VAR 0 1
34359: PUSH
34360: LD_INT 254
34362: EQUAL
34363: PUSH
34364: LD_VAR 0 2
34368: PPUSH
34369: CALL_OW 264
34373: PUSH
34374: LD_EXP 51
34378: EQUAL
34379: AND
34380: PUSH
34381: LD_VAR 0 3
34385: PPUSH
34386: CALL_OW 263
34390: PUSH
34391: LD_INT 3
34393: EQUAL
34394: AND
34395: IFFALSE 34411
// HackDestroyVehicle ( unit , selectedUnit ) ;
34397: LD_VAR 0 2
34401: PPUSH
34402: LD_VAR 0 3
34406: PPUSH
34407: CALL 35928 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34411: LD_VAR 0 1
34415: PUSH
34416: LD_INT 255
34418: EQUAL
34419: PUSH
34420: LD_VAR 0 2
34424: PPUSH
34425: CALL_OW 264
34429: PUSH
34430: LD_INT 14
34432: PUSH
34433: LD_INT 53
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: IN
34440: AND
34441: PUSH
34442: LD_VAR 0 4
34446: PPUSH
34447: LD_VAR 0 5
34451: PPUSH
34452: CALL_OW 488
34456: AND
34457: IFFALSE 34481
// CutTreeXYR ( unit , x , y , 12 ) ;
34459: LD_VAR 0 2
34463: PPUSH
34464: LD_VAR 0 4
34468: PPUSH
34469: LD_VAR 0 5
34473: PPUSH
34474: LD_INT 12
34476: PPUSH
34477: CALL 34494 0 4
// end ;
34481: LD_VAR 0 6
34485: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34486: LD_INT 0
34488: PPUSH
// end ;
34489: LD_VAR 0 4
34493: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34505: LD_VAR 0 1
34509: NOT
34510: PUSH
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_VAR 0 3
34520: PPUSH
34521: CALL_OW 488
34525: NOT
34526: OR
34527: PUSH
34528: LD_VAR 0 4
34532: NOT
34533: OR
34534: IFFALSE 34538
// exit ;
34536: GO 34878
// list := [ ] ;
34538: LD_ADDR_VAR 0 13
34542: PUSH
34543: EMPTY
34544: ST_TO_ADDR
// if x - r < 0 then
34545: LD_VAR 0 2
34549: PUSH
34550: LD_VAR 0 4
34554: MINUS
34555: PUSH
34556: LD_INT 0
34558: LESS
34559: IFFALSE 34571
// min_x := 0 else
34561: LD_ADDR_VAR 0 7
34565: PUSH
34566: LD_INT 0
34568: ST_TO_ADDR
34569: GO 34587
// min_x := x - r ;
34571: LD_ADDR_VAR 0 7
34575: PUSH
34576: LD_VAR 0 2
34580: PUSH
34581: LD_VAR 0 4
34585: MINUS
34586: ST_TO_ADDR
// if y - r < 0 then
34587: LD_VAR 0 3
34591: PUSH
34592: LD_VAR 0 4
34596: MINUS
34597: PUSH
34598: LD_INT 0
34600: LESS
34601: IFFALSE 34613
// min_y := 0 else
34603: LD_ADDR_VAR 0 8
34607: PUSH
34608: LD_INT 0
34610: ST_TO_ADDR
34611: GO 34629
// min_y := y - r ;
34613: LD_ADDR_VAR 0 8
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: LD_VAR 0 4
34627: MINUS
34628: ST_TO_ADDR
// max_x := x + r ;
34629: LD_ADDR_VAR 0 9
34633: PUSH
34634: LD_VAR 0 2
34638: PUSH
34639: LD_VAR 0 4
34643: PLUS
34644: ST_TO_ADDR
// max_y := y + r ;
34645: LD_ADDR_VAR 0 10
34649: PUSH
34650: LD_VAR 0 3
34654: PUSH
34655: LD_VAR 0 4
34659: PLUS
34660: ST_TO_ADDR
// for _x = min_x to max_x do
34661: LD_ADDR_VAR 0 11
34665: PUSH
34666: DOUBLE
34667: LD_VAR 0 7
34671: DEC
34672: ST_TO_ADDR
34673: LD_VAR 0 9
34677: PUSH
34678: FOR_TO
34679: IFFALSE 34796
// for _y = min_y to max_y do
34681: LD_ADDR_VAR 0 12
34685: PUSH
34686: DOUBLE
34687: LD_VAR 0 8
34691: DEC
34692: ST_TO_ADDR
34693: LD_VAR 0 10
34697: PUSH
34698: FOR_TO
34699: IFFALSE 34792
// begin if not ValidHex ( _x , _y ) then
34701: LD_VAR 0 11
34705: PPUSH
34706: LD_VAR 0 12
34710: PPUSH
34711: CALL_OW 488
34715: NOT
34716: IFFALSE 34720
// continue ;
34718: GO 34698
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34720: LD_VAR 0 11
34724: PPUSH
34725: LD_VAR 0 12
34729: PPUSH
34730: CALL_OW 351
34734: PUSH
34735: LD_VAR 0 11
34739: PPUSH
34740: LD_VAR 0 12
34744: PPUSH
34745: CALL_OW 554
34749: AND
34750: IFFALSE 34790
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34752: LD_ADDR_VAR 0 13
34756: PUSH
34757: LD_VAR 0 13
34761: PPUSH
34762: LD_VAR 0 13
34766: PUSH
34767: LD_INT 1
34769: PLUS
34770: PPUSH
34771: LD_VAR 0 11
34775: PUSH
34776: LD_VAR 0 12
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PPUSH
34785: CALL_OW 2
34789: ST_TO_ADDR
// end ;
34790: GO 34698
34792: POP
34793: POP
34794: GO 34678
34796: POP
34797: POP
// if not list then
34798: LD_VAR 0 13
34802: NOT
34803: IFFALSE 34807
// exit ;
34805: GO 34878
// for i in list do
34807: LD_ADDR_VAR 0 6
34811: PUSH
34812: LD_VAR 0 13
34816: PUSH
34817: FOR_IN
34818: IFFALSE 34876
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34820: LD_VAR 0 1
34824: PPUSH
34825: LD_STRING M
34827: PUSH
34828: LD_VAR 0 6
34832: PUSH
34833: LD_INT 1
34835: ARRAY
34836: PUSH
34837: LD_VAR 0 6
34841: PUSH
34842: LD_INT 2
34844: ARRAY
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: EMPTY
34868: LIST
34869: PPUSH
34870: CALL_OW 447
34874: GO 34817
34876: POP
34877: POP
// end ;
34878: LD_VAR 0 5
34882: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34883: LD_EXP 128
34887: NOT
34888: IFFALSE 34938
34890: GO 34892
34892: DISABLE
// begin initHack := true ;
34893: LD_ADDR_EXP 128
34897: PUSH
34898: LD_INT 1
34900: ST_TO_ADDR
// hackTanks := [ ] ;
34901: LD_ADDR_EXP 129
34905: PUSH
34906: EMPTY
34907: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34908: LD_ADDR_EXP 130
34912: PUSH
34913: EMPTY
34914: ST_TO_ADDR
// hackLimit := 3 ;
34915: LD_ADDR_EXP 131
34919: PUSH
34920: LD_INT 3
34922: ST_TO_ADDR
// hackDist := 12 ;
34923: LD_ADDR_EXP 132
34927: PUSH
34928: LD_INT 12
34930: ST_TO_ADDR
// hackCounter := [ ] ;
34931: LD_ADDR_EXP 133
34935: PUSH
34936: EMPTY
34937: ST_TO_ADDR
// end ;
34938: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34939: LD_EXP 128
34943: PUSH
34944: LD_INT 34
34946: PUSH
34947: LD_EXP 51
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PPUSH
34956: CALL_OW 69
34960: AND
34961: IFFALSE 35216
34963: GO 34965
34965: DISABLE
34966: LD_INT 0
34968: PPUSH
34969: PPUSH
// begin enable ;
34970: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34971: LD_ADDR_VAR 0 1
34975: PUSH
34976: LD_INT 34
34978: PUSH
34979: LD_EXP 51
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 69
34992: PUSH
34993: FOR_IN
34994: IFFALSE 35214
// begin if not i in hackTanks then
34996: LD_VAR 0 1
35000: PUSH
35001: LD_EXP 129
35005: IN
35006: NOT
35007: IFFALSE 35090
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35009: LD_ADDR_EXP 129
35013: PUSH
35014: LD_EXP 129
35018: PPUSH
35019: LD_EXP 129
35023: PUSH
35024: LD_INT 1
35026: PLUS
35027: PPUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 1
35037: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35038: LD_ADDR_EXP 130
35042: PUSH
35043: LD_EXP 130
35047: PPUSH
35048: LD_EXP 130
35052: PUSH
35053: LD_INT 1
35055: PLUS
35056: PPUSH
35057: EMPTY
35058: PPUSH
35059: CALL_OW 1
35063: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35064: LD_ADDR_EXP 133
35068: PUSH
35069: LD_EXP 133
35073: PPUSH
35074: LD_EXP 133
35078: PUSH
35079: LD_INT 1
35081: PLUS
35082: PPUSH
35083: EMPTY
35084: PPUSH
35085: CALL_OW 1
35089: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 302
35099: NOT
35100: IFFALSE 35113
// begin HackUnlinkAll ( i ) ;
35102: LD_VAR 0 1
35106: PPUSH
35107: CALL 35219 0 1
// continue ;
35111: GO 34993
// end ; HackCheckCapturedStatus ( i ) ;
35113: LD_VAR 0 1
35117: PPUSH
35118: CALL 35662 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35122: LD_ADDR_VAR 0 2
35126: PUSH
35127: LD_INT 81
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 255
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 33
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 91
35156: PUSH
35157: LD_VAR 0 1
35161: PUSH
35162: LD_EXP 132
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 50
35174: PUSH
35175: EMPTY
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: PPUSH
35184: CALL_OW 69
35188: ST_TO_ADDR
// if not tmp then
35189: LD_VAR 0 2
35193: NOT
35194: IFFALSE 35198
// continue ;
35196: GO 34993
// HackLink ( i , tmp ) ;
35198: LD_VAR 0 1
35202: PPUSH
35203: LD_VAR 0 2
35207: PPUSH
35208: CALL 35355 0 2
// end ;
35212: GO 34993
35214: POP
35215: POP
// end ;
35216: PPOPN 2
35218: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35219: LD_INT 0
35221: PPUSH
35222: PPUSH
35223: PPUSH
// if not hack in hackTanks then
35224: LD_VAR 0 1
35228: PUSH
35229: LD_EXP 129
35233: IN
35234: NOT
35235: IFFALSE 35239
// exit ;
35237: GO 35350
// index := GetElementIndex ( hackTanks , hack ) ;
35239: LD_ADDR_VAR 0 4
35243: PUSH
35244: LD_EXP 129
35248: PPUSH
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL 42824 0 2
35258: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35259: LD_EXP 130
35263: PUSH
35264: LD_VAR 0 4
35268: ARRAY
35269: IFFALSE 35350
// begin for i in hackTanksCaptured [ index ] do
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_EXP 130
35280: PUSH
35281: LD_VAR 0 4
35285: ARRAY
35286: PUSH
35287: FOR_IN
35288: IFFALSE 35314
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35290: LD_VAR 0 3
35294: PUSH
35295: LD_INT 1
35297: ARRAY
35298: PPUSH
35299: LD_VAR 0 3
35303: PUSH
35304: LD_INT 2
35306: ARRAY
35307: PPUSH
35308: CALL_OW 235
35312: GO 35287
35314: POP
35315: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35316: LD_ADDR_EXP 130
35320: PUSH
35321: LD_EXP 130
35325: PPUSH
35326: LD_VAR 0 4
35330: PPUSH
35331: EMPTY
35332: PPUSH
35333: CALL_OW 1
35337: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35338: LD_VAR 0 1
35342: PPUSH
35343: LD_INT 0
35345: PPUSH
35346: CALL_OW 505
// end ; end ;
35350: LD_VAR 0 2
35354: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35355: LD_INT 0
35357: PPUSH
35358: PPUSH
35359: PPUSH
// if not hack in hackTanks or not vehicles then
35360: LD_VAR 0 1
35364: PUSH
35365: LD_EXP 129
35369: IN
35370: NOT
35371: PUSH
35372: LD_VAR 0 2
35376: NOT
35377: OR
35378: IFFALSE 35382
// exit ;
35380: GO 35657
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35382: LD_ADDR_VAR 0 2
35386: PUSH
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_VAR 0 2
35396: PPUSH
35397: LD_INT 1
35399: PPUSH
35400: LD_INT 1
35402: PPUSH
35403: CALL 43474 0 4
35407: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35408: LD_ADDR_VAR 0 5
35412: PUSH
35413: LD_EXP 129
35417: PPUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL 42824 0 2
35427: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35428: LD_EXP 130
35432: PUSH
35433: LD_VAR 0 5
35437: ARRAY
35438: PUSH
35439: LD_EXP 131
35443: LESS
35444: IFFALSE 35633
// begin for i := 1 to vehicles do
35446: LD_ADDR_VAR 0 4
35450: PUSH
35451: DOUBLE
35452: LD_INT 1
35454: DEC
35455: ST_TO_ADDR
35456: LD_VAR 0 2
35460: PUSH
35461: FOR_TO
35462: IFFALSE 35631
// begin if hackTanksCaptured [ index ] = hackLimit then
35464: LD_EXP 130
35468: PUSH
35469: LD_VAR 0 5
35473: ARRAY
35474: PUSH
35475: LD_EXP 131
35479: EQUAL
35480: IFFALSE 35484
// break ;
35482: GO 35631
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35484: LD_ADDR_EXP 133
35488: PUSH
35489: LD_EXP 133
35493: PPUSH
35494: LD_VAR 0 5
35498: PPUSH
35499: LD_EXP 133
35503: PUSH
35504: LD_VAR 0 5
35508: ARRAY
35509: PUSH
35510: LD_INT 1
35512: PLUS
35513: PPUSH
35514: CALL_OW 1
35518: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35519: LD_ADDR_EXP 130
35523: PUSH
35524: LD_EXP 130
35528: PPUSH
35529: LD_VAR 0 5
35533: PUSH
35534: LD_EXP 130
35538: PUSH
35539: LD_VAR 0 5
35543: ARRAY
35544: PUSH
35545: LD_INT 1
35547: PLUS
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PPUSH
35553: LD_VAR 0 2
35557: PUSH
35558: LD_VAR 0 4
35562: ARRAY
35563: PUSH
35564: LD_VAR 0 2
35568: PUSH
35569: LD_VAR 0 4
35573: ARRAY
35574: PPUSH
35575: CALL_OW 255
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL 43039 0 3
35588: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 4
35598: ARRAY
35599: PPUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 255
35609: PPUSH
35610: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35614: LD_VAR 0 2
35618: PUSH
35619: LD_VAR 0 4
35623: ARRAY
35624: PPUSH
35625: CALL_OW 141
// end ;
35629: GO 35461
35631: POP
35632: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_EXP 130
35642: PUSH
35643: LD_VAR 0 5
35647: ARRAY
35648: PUSH
35649: LD_INT 0
35651: PLUS
35652: PPUSH
35653: CALL_OW 505
// end ;
35657: LD_VAR 0 3
35661: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35662: LD_INT 0
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
// if not hack in hackTanks then
35668: LD_VAR 0 1
35672: PUSH
35673: LD_EXP 129
35677: IN
35678: NOT
35679: IFFALSE 35683
// exit ;
35681: GO 35923
// index := GetElementIndex ( hackTanks , hack ) ;
35683: LD_ADDR_VAR 0 4
35687: PUSH
35688: LD_EXP 129
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL 42824 0 2
35702: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35703: LD_ADDR_VAR 0 3
35707: PUSH
35708: DOUBLE
35709: LD_EXP 130
35713: PUSH
35714: LD_VAR 0 4
35718: ARRAY
35719: INC
35720: ST_TO_ADDR
35721: LD_INT 1
35723: PUSH
35724: FOR_DOWNTO
35725: IFFALSE 35897
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35727: LD_ADDR_VAR 0 5
35731: PUSH
35732: LD_EXP 130
35736: PUSH
35737: LD_VAR 0 4
35741: ARRAY
35742: PUSH
35743: LD_VAR 0 3
35747: ARRAY
35748: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35749: LD_VAR 0 5
35753: PUSH
35754: LD_INT 1
35756: ARRAY
35757: PPUSH
35758: CALL_OW 302
35762: NOT
35763: PUSH
35764: LD_VAR 0 5
35768: PUSH
35769: LD_INT 1
35771: ARRAY
35772: PPUSH
35773: CALL_OW 255
35777: PUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 255
35787: NONEQUAL
35788: OR
35789: IFFALSE 35895
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35791: LD_VAR 0 5
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: CALL_OW 305
35804: PUSH
35805: LD_VAR 0 5
35809: PUSH
35810: LD_INT 1
35812: ARRAY
35813: PPUSH
35814: CALL_OW 255
35818: PUSH
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 255
35828: EQUAL
35829: AND
35830: IFFALSE 35854
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35832: LD_VAR 0 5
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PPUSH
35841: LD_VAR 0 5
35845: PUSH
35846: LD_INT 2
35848: ARRAY
35849: PPUSH
35850: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35854: LD_ADDR_EXP 130
35858: PUSH
35859: LD_EXP 130
35863: PPUSH
35864: LD_VAR 0 4
35868: PPUSH
35869: LD_EXP 130
35873: PUSH
35874: LD_VAR 0 4
35878: ARRAY
35879: PPUSH
35880: LD_VAR 0 3
35884: PPUSH
35885: CALL_OW 3
35889: PPUSH
35890: CALL_OW 1
35894: ST_TO_ADDR
// end ; end ;
35895: GO 35724
35897: POP
35898: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35899: LD_VAR 0 1
35903: PPUSH
35904: LD_EXP 130
35908: PUSH
35909: LD_VAR 0 4
35913: ARRAY
35914: PUSH
35915: LD_INT 0
35917: PLUS
35918: PPUSH
35919: CALL_OW 505
// end ;
35923: LD_VAR 0 2
35927: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35928: LD_INT 0
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
// if not hack in hackTanks then
35934: LD_VAR 0 1
35938: PUSH
35939: LD_EXP 129
35943: IN
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36034
// index := GetElementIndex ( hackTanks , hack ) ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_EXP 129
35958: PPUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL 42824 0 2
35968: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35969: LD_ADDR_VAR 0 4
35973: PUSH
35974: DOUBLE
35975: LD_INT 1
35977: DEC
35978: ST_TO_ADDR
35979: LD_EXP 130
35983: PUSH
35984: LD_VAR 0 5
35988: ARRAY
35989: PUSH
35990: FOR_TO
35991: IFFALSE 36032
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35993: LD_EXP 130
35997: PUSH
35998: LD_VAR 0 5
36002: ARRAY
36003: PUSH
36004: LD_VAR 0 4
36008: ARRAY
36009: PUSH
36010: LD_INT 1
36012: ARRAY
36013: PUSH
36014: LD_VAR 0 2
36018: EQUAL
36019: IFFALSE 36030
// KillUnit ( vehicle ) ;
36021: LD_VAR 0 2
36025: PPUSH
36026: CALL_OW 66
36030: GO 35990
36032: POP
36033: POP
// end ;
36034: LD_VAR 0 3
36038: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36039: LD_EXP 134
36043: NOT
36044: IFFALSE 36079
36046: GO 36048
36048: DISABLE
// begin initMiner := true ;
36049: LD_ADDR_EXP 134
36053: PUSH
36054: LD_INT 1
36056: ST_TO_ADDR
// minersList := [ ] ;
36057: LD_ADDR_EXP 135
36061: PUSH
36062: EMPTY
36063: ST_TO_ADDR
// minerMinesList := [ ] ;
36064: LD_ADDR_EXP 136
36068: PUSH
36069: EMPTY
36070: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36071: LD_ADDR_EXP 137
36075: PUSH
36076: LD_INT 5
36078: ST_TO_ADDR
// end ;
36079: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36080: LD_EXP 134
36084: PUSH
36085: LD_INT 34
36087: PUSH
36088: LD_EXP 56
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PPUSH
36097: CALL_OW 69
36101: AND
36102: IFFALSE 36565
36104: GO 36106
36106: DISABLE
36107: LD_INT 0
36109: PPUSH
36110: PPUSH
36111: PPUSH
36112: PPUSH
// begin enable ;
36113: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36114: LD_ADDR_VAR 0 1
36118: PUSH
36119: LD_INT 34
36121: PUSH
36122: LD_EXP 56
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PPUSH
36131: CALL_OW 69
36135: PUSH
36136: FOR_IN
36137: IFFALSE 36209
// begin if not i in minersList then
36139: LD_VAR 0 1
36143: PUSH
36144: LD_EXP 135
36148: IN
36149: NOT
36150: IFFALSE 36207
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36152: LD_ADDR_EXP 135
36156: PUSH
36157: LD_EXP 135
36161: PPUSH
36162: LD_EXP 135
36166: PUSH
36167: LD_INT 1
36169: PLUS
36170: PPUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36181: LD_ADDR_EXP 136
36185: PUSH
36186: LD_EXP 136
36190: PPUSH
36191: LD_EXP 136
36195: PUSH
36196: LD_INT 1
36198: PLUS
36199: PPUSH
36200: EMPTY
36201: PPUSH
36202: CALL_OW 1
36206: ST_TO_ADDR
// end end ;
36207: GO 36136
36209: POP
36210: POP
// for i := minerMinesList downto 1 do
36211: LD_ADDR_VAR 0 1
36215: PUSH
36216: DOUBLE
36217: LD_EXP 136
36221: INC
36222: ST_TO_ADDR
36223: LD_INT 1
36225: PUSH
36226: FOR_DOWNTO
36227: IFFALSE 36563
// begin if IsLive ( minersList [ i ] ) then
36229: LD_EXP 135
36233: PUSH
36234: LD_VAR 0 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 300
36244: IFFALSE 36272
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36246: LD_EXP 135
36250: PUSH
36251: LD_VAR 0 1
36255: ARRAY
36256: PPUSH
36257: LD_EXP 136
36261: PUSH
36262: LD_VAR 0 1
36266: ARRAY
36267: PPUSH
36268: CALL_OW 505
// if not minerMinesList [ i ] then
36272: LD_EXP 136
36276: PUSH
36277: LD_VAR 0 1
36281: ARRAY
36282: NOT
36283: IFFALSE 36287
// continue ;
36285: GO 36226
// for j := minerMinesList [ i ] downto 1 do
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: DOUBLE
36293: LD_EXP 136
36297: PUSH
36298: LD_VAR 0 1
36302: ARRAY
36303: INC
36304: ST_TO_ADDR
36305: LD_INT 1
36307: PUSH
36308: FOR_DOWNTO
36309: IFFALSE 36559
// begin side := GetSide ( minersList [ i ] ) ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_EXP 135
36320: PUSH
36321: LD_VAR 0 1
36325: ARRAY
36326: PPUSH
36327: CALL_OW 255
36331: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36332: LD_ADDR_VAR 0 4
36336: PUSH
36337: LD_EXP 136
36341: PUSH
36342: LD_VAR 0 1
36346: ARRAY
36347: PUSH
36348: LD_VAR 0 2
36352: ARRAY
36353: PUSH
36354: LD_INT 1
36356: ARRAY
36357: PPUSH
36358: LD_EXP 136
36362: PUSH
36363: LD_VAR 0 1
36367: ARRAY
36368: PUSH
36369: LD_VAR 0 2
36373: ARRAY
36374: PUSH
36375: LD_INT 2
36377: ARRAY
36378: PPUSH
36379: CALL_OW 428
36383: ST_TO_ADDR
// if not tmp then
36384: LD_VAR 0 4
36388: NOT
36389: IFFALSE 36393
// continue ;
36391: GO 36308
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36393: LD_VAR 0 4
36397: PUSH
36398: LD_INT 81
36400: PUSH
36401: LD_VAR 0 3
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PPUSH
36410: CALL_OW 69
36414: IN
36415: PUSH
36416: LD_EXP 136
36420: PUSH
36421: LD_VAR 0 1
36425: ARRAY
36426: PUSH
36427: LD_VAR 0 2
36431: ARRAY
36432: PUSH
36433: LD_INT 1
36435: ARRAY
36436: PPUSH
36437: LD_EXP 136
36441: PUSH
36442: LD_VAR 0 1
36446: ARRAY
36447: PUSH
36448: LD_VAR 0 2
36452: ARRAY
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PPUSH
36458: CALL_OW 458
36462: AND
36463: IFFALSE 36557
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36465: LD_EXP 136
36469: PUSH
36470: LD_VAR 0 1
36474: ARRAY
36475: PUSH
36476: LD_VAR 0 2
36480: ARRAY
36481: PUSH
36482: LD_INT 1
36484: ARRAY
36485: PPUSH
36486: LD_EXP 136
36490: PUSH
36491: LD_VAR 0 1
36495: ARRAY
36496: PUSH
36497: LD_VAR 0 2
36501: ARRAY
36502: PUSH
36503: LD_INT 2
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 3
36511: PPUSH
36512: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36516: LD_ADDR_EXP 136
36520: PUSH
36521: LD_EXP 136
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: LD_EXP 136
36535: PUSH
36536: LD_VAR 0 1
36540: ARRAY
36541: PPUSH
36542: LD_VAR 0 2
36546: PPUSH
36547: CALL_OW 3
36551: PPUSH
36552: CALL_OW 1
36556: ST_TO_ADDR
// end ; end ;
36557: GO 36308
36559: POP
36560: POP
// end ;
36561: GO 36226
36563: POP
36564: POP
// end ;
36565: PPOPN 4
36567: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36568: LD_INT 0
36570: PPUSH
36571: PPUSH
// result := false ;
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: LD_INT 0
36579: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36580: LD_VAR 0 1
36584: PPUSH
36585: CALL_OW 264
36589: PUSH
36590: LD_EXP 56
36594: EQUAL
36595: NOT
36596: IFFALSE 36600
// exit ;
36598: GO 36840
// index := GetElementIndex ( minersList , unit ) ;
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: LD_EXP 135
36609: PPUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL 42824 0 2
36619: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36620: LD_EXP 136
36624: PUSH
36625: LD_VAR 0 5
36629: ARRAY
36630: PUSH
36631: LD_EXP 137
36635: GREATEREQUAL
36636: IFFALSE 36640
// exit ;
36638: GO 36840
// ComMoveXY ( unit , x , y ) ;
36640: LD_VAR 0 1
36644: PPUSH
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36659: LD_INT 35
36661: PPUSH
36662: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36666: LD_VAR 0 1
36670: PPUSH
36671: LD_VAR 0 2
36675: PPUSH
36676: LD_VAR 0 3
36680: PPUSH
36681: CALL 73596 0 3
36685: NOT
36686: PUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: CALL_OW 314
36696: AND
36697: IFFALSE 36701
// exit ;
36699: GO 36840
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36701: LD_VAR 0 2
36705: PPUSH
36706: LD_VAR 0 3
36710: PPUSH
36711: CALL_OW 428
36715: PUSH
36716: LD_VAR 0 1
36720: EQUAL
36721: PUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 314
36731: NOT
36732: AND
36733: IFFALSE 36659
// PlaySoundXY ( x , y , PlantMine ) ;
36735: LD_VAR 0 2
36739: PPUSH
36740: LD_VAR 0 3
36744: PPUSH
36745: LD_STRING PlantMine
36747: PPUSH
36748: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36752: LD_VAR 0 2
36756: PPUSH
36757: LD_VAR 0 3
36761: PPUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: PPUSH
36772: LD_INT 0
36774: PPUSH
36775: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36779: LD_ADDR_EXP 136
36783: PUSH
36784: LD_EXP 136
36788: PPUSH
36789: LD_VAR 0 5
36793: PUSH
36794: LD_EXP 136
36798: PUSH
36799: LD_VAR 0 5
36803: ARRAY
36804: PUSH
36805: LD_INT 1
36807: PLUS
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PPUSH
36813: LD_VAR 0 2
36817: PUSH
36818: LD_VAR 0 3
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PPUSH
36827: CALL 43039 0 3
36831: ST_TO_ADDR
// result := true ;
36832: LD_ADDR_VAR 0 4
36836: PUSH
36837: LD_INT 1
36839: ST_TO_ADDR
// end ;
36840: LD_VAR 0 4
36844: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
36849: PPUSH
// if not unit in minersList then
36850: LD_VAR 0 1
36854: PUSH
36855: LD_EXP 135
36859: IN
36860: NOT
36861: IFFALSE 36865
// exit ;
36863: GO 37257
// index := GetElementIndex ( minersList , unit ) ;
36865: LD_ADDR_VAR 0 6
36869: PUSH
36870: LD_EXP 135
36874: PPUSH
36875: LD_VAR 0 1
36879: PPUSH
36880: CALL 42824 0 2
36884: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: DOUBLE
36891: LD_EXP 136
36895: PUSH
36896: LD_VAR 0 6
36900: ARRAY
36901: INC
36902: ST_TO_ADDR
36903: LD_INT 1
36905: PUSH
36906: FOR_DOWNTO
36907: IFFALSE 37068
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36909: LD_EXP 136
36913: PUSH
36914: LD_VAR 0 6
36918: ARRAY
36919: PUSH
36920: LD_VAR 0 5
36924: ARRAY
36925: PUSH
36926: LD_INT 1
36928: ARRAY
36929: PUSH
36930: LD_VAR 0 2
36934: EQUAL
36935: PUSH
36936: LD_EXP 136
36940: PUSH
36941: LD_VAR 0 6
36945: ARRAY
36946: PUSH
36947: LD_VAR 0 5
36951: ARRAY
36952: PUSH
36953: LD_INT 2
36955: ARRAY
36956: PUSH
36957: LD_VAR 0 3
36961: EQUAL
36962: AND
36963: IFFALSE 37066
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36965: LD_EXP 136
36969: PUSH
36970: LD_VAR 0 6
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 5
36980: ARRAY
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: LD_EXP 136
36990: PUSH
36991: LD_VAR 0 6
36995: ARRAY
36996: PUSH
36997: LD_VAR 0 5
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 255
37016: PPUSH
37017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37021: LD_ADDR_EXP 136
37025: PUSH
37026: LD_EXP 136
37030: PPUSH
37031: LD_VAR 0 6
37035: PPUSH
37036: LD_EXP 136
37040: PUSH
37041: LD_VAR 0 6
37045: ARRAY
37046: PPUSH
37047: LD_VAR 0 5
37051: PPUSH
37052: CALL_OW 3
37056: PPUSH
37057: CALL_OW 1
37061: ST_TO_ADDR
// exit ;
37062: POP
37063: POP
37064: GO 37257
// end ; end ;
37066: GO 36906
37068: POP
37069: POP
// for i := minerMinesList [ index ] downto 1 do
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: DOUBLE
37076: LD_EXP 136
37080: PUSH
37081: LD_VAR 0 6
37085: ARRAY
37086: INC
37087: ST_TO_ADDR
37088: LD_INT 1
37090: PUSH
37091: FOR_DOWNTO
37092: IFFALSE 37255
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37094: LD_EXP 136
37098: PUSH
37099: LD_VAR 0 6
37103: ARRAY
37104: PUSH
37105: LD_VAR 0 5
37109: ARRAY
37110: PUSH
37111: LD_INT 1
37113: ARRAY
37114: PPUSH
37115: LD_EXP 136
37119: PUSH
37120: LD_VAR 0 6
37124: ARRAY
37125: PUSH
37126: LD_VAR 0 5
37130: ARRAY
37131: PUSH
37132: LD_INT 2
37134: ARRAY
37135: PPUSH
37136: LD_VAR 0 2
37140: PPUSH
37141: LD_VAR 0 3
37145: PPUSH
37146: CALL_OW 298
37150: PUSH
37151: LD_INT 6
37153: LESS
37154: IFFALSE 37253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37156: LD_EXP 136
37160: PUSH
37161: LD_VAR 0 6
37165: ARRAY
37166: PUSH
37167: LD_VAR 0 5
37171: ARRAY
37172: PUSH
37173: LD_INT 1
37175: ARRAY
37176: PPUSH
37177: LD_EXP 136
37181: PUSH
37182: LD_VAR 0 6
37186: ARRAY
37187: PUSH
37188: LD_VAR 0 5
37192: ARRAY
37193: PUSH
37194: LD_INT 2
37196: ARRAY
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 255
37207: PPUSH
37208: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37212: LD_ADDR_EXP 136
37216: PUSH
37217: LD_EXP 136
37221: PPUSH
37222: LD_VAR 0 6
37226: PPUSH
37227: LD_EXP 136
37231: PUSH
37232: LD_VAR 0 6
37236: ARRAY
37237: PPUSH
37238: LD_VAR 0 5
37242: PPUSH
37243: CALL_OW 3
37247: PPUSH
37248: CALL_OW 1
37252: ST_TO_ADDR
// end ; end ;
37253: GO 37091
37255: POP
37256: POP
// end ;
37257: LD_VAR 0 4
37261: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 264
37282: PUSH
37283: LD_EXP 56
37287: EQUAL
37288: NOT
37289: PUSH
37290: LD_VAR 0 1
37294: PUSH
37295: LD_EXP 135
37299: IN
37300: NOT
37301: OR
37302: IFFALSE 37306
// exit ;
37304: GO 37628
// index := GetElementIndex ( minersList , unit ) ;
37306: LD_ADDR_VAR 0 6
37310: PUSH
37311: LD_EXP 135
37315: PPUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL 42824 0 2
37325: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37326: LD_ADDR_VAR 0 8
37330: PUSH
37331: LD_EXP 137
37335: PUSH
37336: LD_EXP 136
37340: PUSH
37341: LD_VAR 0 6
37345: ARRAY
37346: MINUS
37347: ST_TO_ADDR
// if not minesFreeAmount then
37348: LD_VAR 0 8
37352: NOT
37353: IFFALSE 37357
// exit ;
37355: GO 37628
// tmp := [ ] ;
37357: LD_ADDR_VAR 0 7
37361: PUSH
37362: EMPTY
37363: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37364: LD_ADDR_VAR 0 5
37368: PUSH
37369: DOUBLE
37370: LD_INT 1
37372: DEC
37373: ST_TO_ADDR
37374: LD_VAR 0 8
37378: PUSH
37379: FOR_TO
37380: IFFALSE 37575
// begin _d := rand ( 0 , 5 ) ;
37382: LD_ADDR_VAR 0 11
37386: PUSH
37387: LD_INT 0
37389: PPUSH
37390: LD_INT 5
37392: PPUSH
37393: CALL_OW 12
37397: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37398: LD_ADDR_VAR 0 12
37402: PUSH
37403: LD_INT 2
37405: PPUSH
37406: LD_INT 6
37408: PPUSH
37409: CALL_OW 12
37413: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37414: LD_ADDR_VAR 0 9
37418: PUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: LD_VAR 0 11
37428: PPUSH
37429: LD_VAR 0 12
37433: PPUSH
37434: CALL_OW 272
37438: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37439: LD_ADDR_VAR 0 10
37443: PUSH
37444: LD_VAR 0 3
37448: PPUSH
37449: LD_VAR 0 11
37453: PPUSH
37454: LD_VAR 0 12
37458: PPUSH
37459: CALL_OW 273
37463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37464: LD_VAR 0 9
37468: PPUSH
37469: LD_VAR 0 10
37473: PPUSH
37474: CALL_OW 488
37478: PUSH
37479: LD_VAR 0 9
37483: PUSH
37484: LD_VAR 0 10
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_VAR 0 7
37497: IN
37498: NOT
37499: AND
37500: PUSH
37501: LD_VAR 0 9
37505: PPUSH
37506: LD_VAR 0 10
37510: PPUSH
37511: CALL_OW 458
37515: NOT
37516: AND
37517: IFFALSE 37559
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37519: LD_ADDR_VAR 0 7
37523: PUSH
37524: LD_VAR 0 7
37528: PPUSH
37529: LD_VAR 0 7
37533: PUSH
37534: LD_INT 1
37536: PLUS
37537: PPUSH
37538: LD_VAR 0 9
37542: PUSH
37543: LD_VAR 0 10
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PPUSH
37552: CALL_OW 1
37556: ST_TO_ADDR
37557: GO 37573
// i := i - 1 ;
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_INT 1
37571: MINUS
37572: ST_TO_ADDR
// end ;
37573: GO 37379
37575: POP
37576: POP
// for i in tmp do
37577: LD_ADDR_VAR 0 5
37581: PUSH
37582: LD_VAR 0 7
37586: PUSH
37587: FOR_IN
37588: IFFALSE 37626
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_VAR 0 5
37599: PUSH
37600: LD_INT 1
37602: ARRAY
37603: PPUSH
37604: LD_VAR 0 5
37608: PUSH
37609: LD_INT 2
37611: ARRAY
37612: PPUSH
37613: CALL 36568 0 3
37617: NOT
37618: IFFALSE 37624
// exit ;
37620: POP
37621: POP
37622: GO 37628
37624: GO 37587
37626: POP
37627: POP
// end ;
37628: LD_VAR 0 4
37632: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
// if not GetClass ( unit ) = class_sniper then
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 257
37651: PUSH
37652: LD_INT 5
37654: EQUAL
37655: NOT
37656: IFFALSE 37660
// exit ;
37658: GO 38048
// dist := 8 ;
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: LD_INT 8
37667: ST_TO_ADDR
// viewRange := 12 ;
37668: LD_ADDR_VAR 0 7
37672: PUSH
37673: LD_INT 12
37675: ST_TO_ADDR
// side := GetSide ( unit ) ;
37676: LD_ADDR_VAR 0 6
37680: PUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL_OW 255
37690: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37691: LD_INT 61
37693: PPUSH
37694: LD_VAR 0 6
37698: PPUSH
37699: CALL_OW 321
37703: PUSH
37704: LD_INT 2
37706: EQUAL
37707: IFFALSE 37717
// viewRange := 16 ;
37709: LD_ADDR_VAR 0 7
37713: PUSH
37714: LD_INT 16
37716: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37717: LD_VAR 0 1
37721: PPUSH
37722: LD_VAR 0 2
37726: PPUSH
37727: LD_VAR 0 3
37731: PPUSH
37732: CALL_OW 297
37736: PUSH
37737: LD_VAR 0 5
37741: GREATER
37742: IFFALSE 37821
// begin ComMoveXY ( unit , x , y ) ;
37744: LD_VAR 0 1
37748: PPUSH
37749: LD_VAR 0 2
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37763: LD_INT 35
37765: PPUSH
37766: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37770: LD_VAR 0 1
37774: PPUSH
37775: LD_VAR 0 2
37779: PPUSH
37780: LD_VAR 0 3
37784: PPUSH
37785: CALL 73596 0 3
37789: NOT
37790: IFFALSE 37794
// exit ;
37792: GO 38048
// until GetDistUnitXY ( unit , x , y ) < dist ;
37794: LD_VAR 0 1
37798: PPUSH
37799: LD_VAR 0 2
37803: PPUSH
37804: LD_VAR 0 3
37808: PPUSH
37809: CALL_OW 297
37813: PUSH
37814: LD_VAR 0 5
37818: LESS
37819: IFFALSE 37763
// end ; ComTurnXY ( unit , x , y ) ;
37821: LD_VAR 0 1
37825: PPUSH
37826: LD_VAR 0 2
37830: PPUSH
37831: LD_VAR 0 3
37835: PPUSH
37836: CALL_OW 118
// wait ( 5 ) ;
37840: LD_INT 5
37842: PPUSH
37843: CALL_OW 67
// _d := GetDir ( unit ) ;
37847: LD_ADDR_VAR 0 10
37851: PUSH
37852: LD_VAR 0 1
37856: PPUSH
37857: CALL_OW 254
37861: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37862: LD_ADDR_VAR 0 8
37866: PUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 250
37876: PPUSH
37877: LD_VAR 0 10
37881: PPUSH
37882: LD_VAR 0 5
37886: PPUSH
37887: CALL_OW 272
37891: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37892: LD_ADDR_VAR 0 9
37896: PUSH
37897: LD_VAR 0 1
37901: PPUSH
37902: CALL_OW 251
37906: PPUSH
37907: LD_VAR 0 10
37911: PPUSH
37912: LD_VAR 0 5
37916: PPUSH
37917: CALL_OW 273
37921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37922: LD_VAR 0 8
37926: PPUSH
37927: LD_VAR 0 9
37931: PPUSH
37932: CALL_OW 488
37936: NOT
37937: IFFALSE 37941
// exit ;
37939: GO 38048
// ComAnimCustom ( unit , 1 ) ;
37941: LD_VAR 0 1
37945: PPUSH
37946: LD_INT 1
37948: PPUSH
37949: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37953: LD_VAR 0 8
37957: PPUSH
37958: LD_VAR 0 9
37962: PPUSH
37963: LD_VAR 0 6
37967: PPUSH
37968: LD_VAR 0 7
37972: PPUSH
37973: CALL_OW 330
// repeat wait ( 1 ) ;
37977: LD_INT 1
37979: PPUSH
37980: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37984: LD_VAR 0 1
37988: PPUSH
37989: CALL_OW 316
37993: PUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 314
38003: OR
38004: PUSH
38005: LD_VAR 0 1
38009: PPUSH
38010: CALL_OW 302
38014: NOT
38015: OR
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 301
38026: OR
38027: IFFALSE 37977
// RemoveSeeing ( _x , _y , side ) ;
38029: LD_VAR 0 8
38033: PPUSH
38034: LD_VAR 0 9
38038: PPUSH
38039: LD_VAR 0 6
38043: PPUSH
38044: CALL_OW 331
// end ; end_of_file
38048: LD_VAR 0 4
38052: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
// if exist_mode then
38057: LD_VAR 0 2
38061: IFFALSE 38086
// unit := CreateCharacter ( prefix & ident ) else
38063: LD_ADDR_VAR 0 5
38067: PUSH
38068: LD_VAR 0 3
38072: PUSH
38073: LD_VAR 0 1
38077: STR
38078: PPUSH
38079: CALL_OW 34
38083: ST_TO_ADDR
38084: GO 38101
// unit := NewCharacter ( ident ) ;
38086: LD_ADDR_VAR 0 5
38090: PUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 25
38100: ST_TO_ADDR
// result := unit ;
38101: LD_ADDR_VAR 0 4
38105: PUSH
38106: LD_VAR 0 5
38110: ST_TO_ADDR
// end ;
38111: LD_VAR 0 4
38115: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38116: LD_INT 0
38118: PPUSH
38119: PPUSH
// if not side or not nation then
38120: LD_VAR 0 1
38124: NOT
38125: PUSH
38126: LD_VAR 0 2
38130: NOT
38131: OR
38132: IFFALSE 38136
// exit ;
38134: GO 38904
// case nation of nation_american :
38136: LD_VAR 0 2
38140: PUSH
38141: LD_INT 1
38143: DOUBLE
38144: EQUAL
38145: IFTRUE 38149
38147: GO 38363
38149: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38150: LD_ADDR_VAR 0 4
38154: PUSH
38155: LD_INT 35
38157: PUSH
38158: LD_INT 45
38160: PUSH
38161: LD_INT 46
38163: PUSH
38164: LD_INT 47
38166: PUSH
38167: LD_INT 82
38169: PUSH
38170: LD_INT 83
38172: PUSH
38173: LD_INT 84
38175: PUSH
38176: LD_INT 85
38178: PUSH
38179: LD_INT 86
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 6
38190: PUSH
38191: LD_INT 15
38193: PUSH
38194: LD_INT 16
38196: PUSH
38197: LD_INT 7
38199: PUSH
38200: LD_INT 12
38202: PUSH
38203: LD_INT 13
38205: PUSH
38206: LD_INT 10
38208: PUSH
38209: LD_INT 14
38211: PUSH
38212: LD_INT 20
38214: PUSH
38215: LD_INT 21
38217: PUSH
38218: LD_INT 22
38220: PUSH
38221: LD_INT 25
38223: PUSH
38224: LD_INT 32
38226: PUSH
38227: LD_INT 27
38229: PUSH
38230: LD_INT 36
38232: PUSH
38233: LD_INT 69
38235: PUSH
38236: LD_INT 39
38238: PUSH
38239: LD_INT 34
38241: PUSH
38242: LD_INT 40
38244: PUSH
38245: LD_INT 48
38247: PUSH
38248: LD_INT 49
38250: PUSH
38251: LD_INT 50
38253: PUSH
38254: LD_INT 51
38256: PUSH
38257: LD_INT 52
38259: PUSH
38260: LD_INT 53
38262: PUSH
38263: LD_INT 54
38265: PUSH
38266: LD_INT 55
38268: PUSH
38269: LD_INT 56
38271: PUSH
38272: LD_INT 57
38274: PUSH
38275: LD_INT 58
38277: PUSH
38278: LD_INT 59
38280: PUSH
38281: LD_INT 60
38283: PUSH
38284: LD_INT 61
38286: PUSH
38287: LD_INT 62
38289: PUSH
38290: LD_INT 80
38292: PUSH
38293: LD_INT 82
38295: PUSH
38296: LD_INT 83
38298: PUSH
38299: LD_INT 84
38301: PUSH
38302: LD_INT 85
38304: PUSH
38305: LD_INT 86
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: ST_TO_ADDR
38361: GO 38828
38363: LD_INT 2
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38597
38371: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38372: LD_ADDR_VAR 0 4
38376: PUSH
38377: LD_INT 35
38379: PUSH
38380: LD_INT 45
38382: PUSH
38383: LD_INT 46
38385: PUSH
38386: LD_INT 47
38388: PUSH
38389: LD_INT 82
38391: PUSH
38392: LD_INT 83
38394: PUSH
38395: LD_INT 84
38397: PUSH
38398: LD_INT 85
38400: PUSH
38401: LD_INT 87
38403: PUSH
38404: LD_INT 70
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 11
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: LD_INT 4
38418: PUSH
38419: LD_INT 5
38421: PUSH
38422: LD_INT 6
38424: PUSH
38425: LD_INT 15
38427: PUSH
38428: LD_INT 18
38430: PUSH
38431: LD_INT 7
38433: PUSH
38434: LD_INT 17
38436: PUSH
38437: LD_INT 8
38439: PUSH
38440: LD_INT 20
38442: PUSH
38443: LD_INT 21
38445: PUSH
38446: LD_INT 22
38448: PUSH
38449: LD_INT 72
38451: PUSH
38452: LD_INT 26
38454: PUSH
38455: LD_INT 69
38457: PUSH
38458: LD_INT 39
38460: PUSH
38461: LD_INT 40
38463: PUSH
38464: LD_INT 41
38466: PUSH
38467: LD_INT 42
38469: PUSH
38470: LD_INT 43
38472: PUSH
38473: LD_INT 48
38475: PUSH
38476: LD_INT 49
38478: PUSH
38479: LD_INT 50
38481: PUSH
38482: LD_INT 51
38484: PUSH
38485: LD_INT 52
38487: PUSH
38488: LD_INT 53
38490: PUSH
38491: LD_INT 54
38493: PUSH
38494: LD_INT 55
38496: PUSH
38497: LD_INT 56
38499: PUSH
38500: LD_INT 60
38502: PUSH
38503: LD_INT 61
38505: PUSH
38506: LD_INT 62
38508: PUSH
38509: LD_INT 66
38511: PUSH
38512: LD_INT 67
38514: PUSH
38515: LD_INT 68
38517: PUSH
38518: LD_INT 81
38520: PUSH
38521: LD_INT 82
38523: PUSH
38524: LD_INT 83
38526: PUSH
38527: LD_INT 84
38529: PUSH
38530: LD_INT 85
38532: PUSH
38533: LD_INT 87
38535: PUSH
38536: LD_INT 88
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: ST_TO_ADDR
38595: GO 38828
38597: LD_INT 3
38599: DOUBLE
38600: EQUAL
38601: IFTRUE 38605
38603: GO 38827
38605: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38606: LD_ADDR_VAR 0 4
38610: PUSH
38611: LD_INT 46
38613: PUSH
38614: LD_INT 47
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 82
38625: PUSH
38626: LD_INT 83
38628: PUSH
38629: LD_INT 84
38631: PUSH
38632: LD_INT 85
38634: PUSH
38635: LD_INT 86
38637: PUSH
38638: LD_INT 11
38640: PUSH
38641: LD_INT 9
38643: PUSH
38644: LD_INT 20
38646: PUSH
38647: LD_INT 19
38649: PUSH
38650: LD_INT 21
38652: PUSH
38653: LD_INT 24
38655: PUSH
38656: LD_INT 22
38658: PUSH
38659: LD_INT 25
38661: PUSH
38662: LD_INT 28
38664: PUSH
38665: LD_INT 29
38667: PUSH
38668: LD_INT 30
38670: PUSH
38671: LD_INT 31
38673: PUSH
38674: LD_INT 37
38676: PUSH
38677: LD_INT 38
38679: PUSH
38680: LD_INT 32
38682: PUSH
38683: LD_INT 27
38685: PUSH
38686: LD_INT 33
38688: PUSH
38689: LD_INT 69
38691: PUSH
38692: LD_INT 39
38694: PUSH
38695: LD_INT 34
38697: PUSH
38698: LD_INT 40
38700: PUSH
38701: LD_INT 71
38703: PUSH
38704: LD_INT 23
38706: PUSH
38707: LD_INT 44
38709: PUSH
38710: LD_INT 48
38712: PUSH
38713: LD_INT 49
38715: PUSH
38716: LD_INT 50
38718: PUSH
38719: LD_INT 51
38721: PUSH
38722: LD_INT 52
38724: PUSH
38725: LD_INT 53
38727: PUSH
38728: LD_INT 54
38730: PUSH
38731: LD_INT 55
38733: PUSH
38734: LD_INT 56
38736: PUSH
38737: LD_INT 57
38739: PUSH
38740: LD_INT 58
38742: PUSH
38743: LD_INT 59
38745: PUSH
38746: LD_INT 63
38748: PUSH
38749: LD_INT 64
38751: PUSH
38752: LD_INT 65
38754: PUSH
38755: LD_INT 82
38757: PUSH
38758: LD_INT 83
38760: PUSH
38761: LD_INT 84
38763: PUSH
38764: LD_INT 85
38766: PUSH
38767: LD_INT 86
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
38825: GO 38828
38827: POP
// if state > - 1 and state < 3 then
38828: LD_VAR 0 3
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: GREATER
38837: PUSH
38838: LD_VAR 0 3
38842: PUSH
38843: LD_INT 3
38845: LESS
38846: AND
38847: IFFALSE 38904
// for i in result do
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_VAR 0 4
38858: PUSH
38859: FOR_IN
38860: IFFALSE 38902
// if GetTech ( i , side ) <> state then
38862: LD_VAR 0 5
38866: PPUSH
38867: LD_VAR 0 1
38871: PPUSH
38872: CALL_OW 321
38876: PUSH
38877: LD_VAR 0 3
38881: NONEQUAL
38882: IFFALSE 38900
// result := result diff i ;
38884: LD_ADDR_VAR 0 4
38888: PUSH
38889: LD_VAR 0 4
38893: PUSH
38894: LD_VAR 0 5
38898: DIFF
38899: ST_TO_ADDR
38900: GO 38859
38902: POP
38903: POP
// end ;
38904: LD_VAR 0 4
38908: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38909: LD_INT 0
38911: PPUSH
38912: PPUSH
38913: PPUSH
// result := true ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_INT 1
38921: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38922: LD_ADDR_VAR 0 5
38926: PUSH
38927: LD_VAR 0 2
38931: PPUSH
38932: CALL_OW 480
38936: ST_TO_ADDR
// if not tmp then
38937: LD_VAR 0 5
38941: NOT
38942: IFFALSE 38946
// exit ;
38944: GO 38995
// for i in tmp do
38946: LD_ADDR_VAR 0 4
38950: PUSH
38951: LD_VAR 0 5
38955: PUSH
38956: FOR_IN
38957: IFFALSE 38993
// if GetTech ( i , side ) <> state_researched then
38959: LD_VAR 0 4
38963: PPUSH
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 321
38973: PUSH
38974: LD_INT 2
38976: NONEQUAL
38977: IFFALSE 38991
// begin result := false ;
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_INT 0
38986: ST_TO_ADDR
// exit ;
38987: POP
38988: POP
38989: GO 38995
// end ;
38991: GO 38956
38993: POP
38994: POP
// end ;
38995: LD_VAR 0 3
38999: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39000: LD_INT 0
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39015: LD_VAR 0 1
39019: NOT
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 257
39030: PUSH
39031: LD_INT 9
39033: NONEQUAL
39034: OR
39035: IFFALSE 39039
// exit ;
39037: GO 39612
// side := GetSide ( unit ) ;
39039: LD_ADDR_VAR 0 9
39043: PUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 255
39053: ST_TO_ADDR
// tech_space := tech_spacanom ;
39054: LD_ADDR_VAR 0 12
39058: PUSH
39059: LD_INT 29
39061: ST_TO_ADDR
// tech_time := tech_taurad ;
39062: LD_ADDR_VAR 0 13
39066: PUSH
39067: LD_INT 28
39069: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39070: LD_ADDR_VAR 0 11
39074: PUSH
39075: LD_VAR 0 1
39079: PPUSH
39080: CALL_OW 310
39084: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39085: LD_VAR 0 11
39089: PPUSH
39090: CALL_OW 247
39094: PUSH
39095: LD_INT 2
39097: EQUAL
39098: IFFALSE 39102
// exit ;
39100: GO 39612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39102: LD_ADDR_VAR 0 8
39106: PUSH
39107: LD_INT 81
39109: PUSH
39110: LD_VAR 0 9
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 21
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PPUSH
39140: CALL_OW 69
39144: ST_TO_ADDR
// if not tmp then
39145: LD_VAR 0 8
39149: NOT
39150: IFFALSE 39154
// exit ;
39152: GO 39612
// if in_unit then
39154: LD_VAR 0 11
39158: IFFALSE 39182
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39160: LD_ADDR_VAR 0 10
39164: PUSH
39165: LD_VAR 0 8
39169: PPUSH
39170: LD_VAR 0 11
39174: PPUSH
39175: CALL_OW 74
39179: ST_TO_ADDR
39180: GO 39202
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39182: LD_ADDR_VAR 0 10
39186: PUSH
39187: LD_VAR 0 8
39191: PPUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 74
39201: ST_TO_ADDR
// if not enemy then
39202: LD_VAR 0 10
39206: NOT
39207: IFFALSE 39211
// exit ;
39209: GO 39612
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39211: LD_VAR 0 11
39215: PUSH
39216: LD_VAR 0 11
39220: PPUSH
39221: LD_VAR 0 10
39225: PPUSH
39226: CALL_OW 296
39230: PUSH
39231: LD_INT 13
39233: GREATER
39234: AND
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: LD_VAR 0 10
39245: PPUSH
39246: CALL_OW 296
39250: PUSH
39251: LD_INT 12
39253: GREATER
39254: OR
39255: IFFALSE 39259
// exit ;
39257: GO 39612
// missile := [ 1 ] ;
39259: LD_ADDR_VAR 0 14
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39270: LD_VAR 0 9
39274: PPUSH
39275: LD_VAR 0 12
39279: PPUSH
39280: CALL_OW 325
39284: IFFALSE 39313
// missile := Insert ( missile , missile + 1 , 2 ) ;
39286: LD_ADDR_VAR 0 14
39290: PUSH
39291: LD_VAR 0 14
39295: PPUSH
39296: LD_VAR 0 14
39300: PUSH
39301: LD_INT 1
39303: PLUS
39304: PPUSH
39305: LD_INT 2
39307: PPUSH
39308: CALL_OW 2
39312: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39313: LD_VAR 0 9
39317: PPUSH
39318: LD_VAR 0 13
39322: PPUSH
39323: CALL_OW 325
39327: PUSH
39328: LD_VAR 0 10
39332: PPUSH
39333: CALL_OW 255
39337: PPUSH
39338: LD_VAR 0 13
39342: PPUSH
39343: CALL_OW 325
39347: NOT
39348: AND
39349: IFFALSE 39378
// missile := Insert ( missile , missile + 1 , 3 ) ;
39351: LD_ADDR_VAR 0 14
39355: PUSH
39356: LD_VAR 0 14
39360: PPUSH
39361: LD_VAR 0 14
39365: PUSH
39366: LD_INT 1
39368: PLUS
39369: PPUSH
39370: LD_INT 3
39372: PPUSH
39373: CALL_OW 2
39377: ST_TO_ADDR
// if missile < 2 then
39378: LD_VAR 0 14
39382: PUSH
39383: LD_INT 2
39385: LESS
39386: IFFALSE 39390
// exit ;
39388: GO 39612
// x := GetX ( enemy ) ;
39390: LD_ADDR_VAR 0 4
39394: PUSH
39395: LD_VAR 0 10
39399: PPUSH
39400: CALL_OW 250
39404: ST_TO_ADDR
// y := GetY ( enemy ) ;
39405: LD_ADDR_VAR 0 5
39409: PUSH
39410: LD_VAR 0 10
39414: PPUSH
39415: CALL_OW 251
39419: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39420: LD_ADDR_VAR 0 6
39424: PUSH
39425: LD_VAR 0 4
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PPUSH
39434: LD_INT 1
39436: PPUSH
39437: CALL_OW 12
39441: PLUS
39442: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39443: LD_ADDR_VAR 0 7
39447: PUSH
39448: LD_VAR 0 5
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PPUSH
39457: LD_INT 1
39459: PPUSH
39460: CALL_OW 12
39464: PLUS
39465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39466: LD_VAR 0 6
39470: PPUSH
39471: LD_VAR 0 7
39475: PPUSH
39476: CALL_OW 488
39480: NOT
39481: IFFALSE 39503
// begin _x := x ;
39483: LD_ADDR_VAR 0 6
39487: PUSH
39488: LD_VAR 0 4
39492: ST_TO_ADDR
// _y := y ;
39493: LD_ADDR_VAR 0 7
39497: PUSH
39498: LD_VAR 0 5
39502: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39503: LD_ADDR_VAR 0 3
39507: PUSH
39508: LD_INT 1
39510: PPUSH
39511: LD_VAR 0 14
39515: PPUSH
39516: CALL_OW 12
39520: ST_TO_ADDR
// case i of 1 :
39521: LD_VAR 0 3
39525: PUSH
39526: LD_INT 1
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39534
39532: GO 39551
39534: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39535: LD_VAR 0 1
39539: PPUSH
39540: LD_VAR 0 10
39544: PPUSH
39545: CALL_OW 115
39549: GO 39612
39551: LD_INT 2
39553: DOUBLE
39554: EQUAL
39555: IFTRUE 39559
39557: GO 39581
39559: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39560: LD_VAR 0 1
39564: PPUSH
39565: LD_VAR 0 6
39569: PPUSH
39570: LD_VAR 0 7
39574: PPUSH
39575: CALL_OW 153
39579: GO 39612
39581: LD_INT 3
39583: DOUBLE
39584: EQUAL
39585: IFTRUE 39589
39587: GO 39611
39589: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39590: LD_VAR 0 1
39594: PPUSH
39595: LD_VAR 0 6
39599: PPUSH
39600: LD_VAR 0 7
39604: PPUSH
39605: CALL_OW 154
39609: GO 39612
39611: POP
// end ;
39612: LD_VAR 0 2
39616: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39617: LD_INT 0
39619: PPUSH
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
// if not unit or not building then
39625: LD_VAR 0 1
39629: NOT
39630: PUSH
39631: LD_VAR 0 2
39635: NOT
39636: OR
39637: IFFALSE 39641
// exit ;
39639: GO 39799
// x := GetX ( building ) ;
39641: LD_ADDR_VAR 0 5
39645: PUSH
39646: LD_VAR 0 2
39650: PPUSH
39651: CALL_OW 250
39655: ST_TO_ADDR
// y := GetY ( building ) ;
39656: LD_ADDR_VAR 0 6
39660: PUSH
39661: LD_VAR 0 2
39665: PPUSH
39666: CALL_OW 251
39670: ST_TO_ADDR
// for i = 0 to 5 do
39671: LD_ADDR_VAR 0 4
39675: PUSH
39676: DOUBLE
39677: LD_INT 0
39679: DEC
39680: ST_TO_ADDR
39681: LD_INT 5
39683: PUSH
39684: FOR_TO
39685: IFFALSE 39797
// begin _x := ShiftX ( x , i , 3 ) ;
39687: LD_ADDR_VAR 0 7
39691: PUSH
39692: LD_VAR 0 5
39696: PPUSH
39697: LD_VAR 0 4
39701: PPUSH
39702: LD_INT 3
39704: PPUSH
39705: CALL_OW 272
39709: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39710: LD_ADDR_VAR 0 8
39714: PUSH
39715: LD_VAR 0 6
39719: PPUSH
39720: LD_VAR 0 4
39724: PPUSH
39725: LD_INT 3
39727: PPUSH
39728: CALL_OW 273
39732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39733: LD_VAR 0 7
39737: PPUSH
39738: LD_VAR 0 8
39742: PPUSH
39743: CALL_OW 488
39747: NOT
39748: IFFALSE 39752
// continue ;
39750: GO 39684
// if HexInfo ( _x , _y ) = 0 then
39752: LD_VAR 0 7
39756: PPUSH
39757: LD_VAR 0 8
39761: PPUSH
39762: CALL_OW 428
39766: PUSH
39767: LD_INT 0
39769: EQUAL
39770: IFFALSE 39795
// begin ComMoveXY ( unit , _x , _y ) ;
39772: LD_VAR 0 1
39776: PPUSH
39777: LD_VAR 0 7
39781: PPUSH
39782: LD_VAR 0 8
39786: PPUSH
39787: CALL_OW 111
// exit ;
39791: POP
39792: POP
39793: GO 39799
// end ; end ;
39795: GO 39684
39797: POP
39798: POP
// end ;
39799: LD_VAR 0 3
39803: RET
// export function ScanBase ( side , base_area ) ; begin
39804: LD_INT 0
39806: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_VAR 0 2
39816: PPUSH
39817: LD_INT 81
39819: PUSH
39820: LD_VAR 0 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PPUSH
39829: CALL_OW 70
39833: ST_TO_ADDR
// end ;
39834: LD_VAR 0 3
39838: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39839: LD_INT 0
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
// result := false ;
39845: LD_ADDR_VAR 0 2
39849: PUSH
39850: LD_INT 0
39852: ST_TO_ADDR
// side := GetSide ( unit ) ;
39853: LD_ADDR_VAR 0 3
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 255
39867: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 248
39882: ST_TO_ADDR
// case nat of 1 :
39883: LD_VAR 0 4
39887: PUSH
39888: LD_INT 1
39890: DOUBLE
39891: EQUAL
39892: IFTRUE 39896
39894: GO 39907
39896: POP
// tech := tech_lassight ; 2 :
39897: LD_ADDR_VAR 0 5
39901: PUSH
39902: LD_INT 12
39904: ST_TO_ADDR
39905: GO 39946
39907: LD_INT 2
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39926
39915: POP
// tech := tech_mortar ; 3 :
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: LD_INT 41
39923: ST_TO_ADDR
39924: GO 39946
39926: LD_INT 3
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 39945
39934: POP
// tech := tech_bazooka ; end ;
39935: LD_ADDR_VAR 0 5
39939: PUSH
39940: LD_INT 44
39942: ST_TO_ADDR
39943: GO 39946
39945: POP
// if Researched ( side , tech ) then
39946: LD_VAR 0 3
39950: PPUSH
39951: LD_VAR 0 5
39955: PPUSH
39956: CALL_OW 325
39960: IFFALSE 39987
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39962: LD_ADDR_VAR 0 2
39966: PUSH
39967: LD_INT 5
39969: PUSH
39970: LD_INT 8
39972: PUSH
39973: LD_INT 9
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: PUSH
39981: LD_VAR 0 4
39985: ARRAY
39986: ST_TO_ADDR
// end ;
39987: LD_VAR 0 2
39991: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
39996: PPUSH
// if not mines then
39997: LD_VAR 0 2
40001: NOT
40002: IFFALSE 40006
// exit ;
40004: GO 40150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40006: LD_ADDR_VAR 0 5
40010: PUSH
40011: LD_INT 81
40013: PUSH
40014: LD_VAR 0 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 3
40025: PUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PPUSH
40044: CALL_OW 69
40048: ST_TO_ADDR
// for i in mines do
40049: LD_ADDR_VAR 0 4
40053: PUSH
40054: LD_VAR 0 2
40058: PUSH
40059: FOR_IN
40060: IFFALSE 40148
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40062: LD_VAR 0 4
40066: PUSH
40067: LD_INT 1
40069: ARRAY
40070: PPUSH
40071: LD_VAR 0 4
40075: PUSH
40076: LD_INT 2
40078: ARRAY
40079: PPUSH
40080: CALL_OW 458
40084: NOT
40085: IFFALSE 40089
// continue ;
40087: GO 40059
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40089: LD_VAR 0 4
40093: PUSH
40094: LD_INT 1
40096: ARRAY
40097: PPUSH
40098: LD_VAR 0 4
40102: PUSH
40103: LD_INT 2
40105: ARRAY
40106: PPUSH
40107: CALL_OW 428
40111: PUSH
40112: LD_VAR 0 5
40116: IN
40117: IFFALSE 40146
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40119: LD_VAR 0 4
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PPUSH
40128: LD_VAR 0 4
40132: PUSH
40133: LD_INT 2
40135: ARRAY
40136: PPUSH
40137: LD_VAR 0 1
40141: PPUSH
40142: CALL_OW 456
// end ;
40146: GO 40059
40148: POP
40149: POP
// end ;
40150: LD_VAR 0 3
40154: RET
// export function Count ( array ) ; var i ; begin
40155: LD_INT 0
40157: PPUSH
40158: PPUSH
// result := 0 ;
40159: LD_ADDR_VAR 0 2
40163: PUSH
40164: LD_INT 0
40166: ST_TO_ADDR
// for i in array do
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_VAR 0 1
40176: PUSH
40177: FOR_IN
40178: IFFALSE 40202
// if i then
40180: LD_VAR 0 3
40184: IFFALSE 40200
// result := result + 1 ;
40186: LD_ADDR_VAR 0 2
40190: PUSH
40191: LD_VAR 0 2
40195: PUSH
40196: LD_INT 1
40198: PLUS
40199: ST_TO_ADDR
40200: GO 40177
40202: POP
40203: POP
// end ;
40204: LD_VAR 0 2
40208: RET
// export function IsEmpty ( building ) ; begin
40209: LD_INT 0
40211: PPUSH
// if not building then
40212: LD_VAR 0 1
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 40264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40221: LD_ADDR_VAR 0 2
40225: PUSH
40226: LD_VAR 0 1
40230: PUSH
40231: LD_INT 22
40233: PUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 255
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 58
40250: PUSH
40251: EMPTY
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PPUSH
40258: CALL_OW 69
40262: IN
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 2
40268: RET
// export function IsNotFull ( building ) ; begin
40269: LD_INT 0
40271: PPUSH
// if not building then
40272: LD_VAR 0 1
40276: NOT
40277: IFFALSE 40281
// exit ;
40279: GO 40300
// result := UnitsInside ( building ) < 6 ;
40281: LD_ADDR_VAR 0 2
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 313
40295: PUSH
40296: LD_INT 6
40298: LESS
40299: ST_TO_ADDR
// end ;
40300: LD_VAR 0 2
40304: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
// tmp := [ ] ;
40311: LD_ADDR_VAR 0 3
40315: PUSH
40316: EMPTY
40317: ST_TO_ADDR
// list := [ ] ;
40318: LD_ADDR_VAR 0 5
40322: PUSH
40323: EMPTY
40324: ST_TO_ADDR
// for i = 16 to 25 do
40325: LD_ADDR_VAR 0 4
40329: PUSH
40330: DOUBLE
40331: LD_INT 16
40333: DEC
40334: ST_TO_ADDR
40335: LD_INT 25
40337: PUSH
40338: FOR_TO
40339: IFFALSE 40412
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_VAR 0 3
40350: PUSH
40351: LD_INT 22
40353: PUSH
40354: LD_VAR 0 1
40358: PPUSH
40359: CALL_OW 255
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 91
40370: PUSH
40371: LD_VAR 0 1
40375: PUSH
40376: LD_INT 6
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 30
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: PUSH
40401: EMPTY
40402: LIST
40403: PPUSH
40404: CALL_OW 69
40408: ADD
40409: ST_TO_ADDR
40410: GO 40338
40412: POP
40413: POP
// for i = 1 to tmp do
40414: LD_ADDR_VAR 0 4
40418: PUSH
40419: DOUBLE
40420: LD_INT 1
40422: DEC
40423: ST_TO_ADDR
40424: LD_VAR 0 3
40428: PUSH
40429: FOR_TO
40430: IFFALSE 40518
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40432: LD_ADDR_VAR 0 5
40436: PUSH
40437: LD_VAR 0 5
40441: PUSH
40442: LD_VAR 0 3
40446: PUSH
40447: LD_VAR 0 4
40451: ARRAY
40452: PPUSH
40453: CALL_OW 266
40457: PUSH
40458: LD_VAR 0 3
40462: PUSH
40463: LD_VAR 0 4
40467: ARRAY
40468: PPUSH
40469: CALL_OW 250
40473: PUSH
40474: LD_VAR 0 3
40478: PUSH
40479: LD_VAR 0 4
40483: ARRAY
40484: PPUSH
40485: CALL_OW 251
40489: PUSH
40490: LD_VAR 0 3
40494: PUSH
40495: LD_VAR 0 4
40499: ARRAY
40500: PPUSH
40501: CALL_OW 254
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: PUSH
40512: EMPTY
40513: LIST
40514: ADD
40515: ST_TO_ADDR
40516: GO 40429
40518: POP
40519: POP
// result := list ;
40520: LD_ADDR_VAR 0 2
40524: PUSH
40525: LD_VAR 0 5
40529: ST_TO_ADDR
// end ;
40530: LD_VAR 0 2
40534: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40535: LD_INT 0
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
// if not factory then
40544: LD_VAR 0 1
40548: NOT
40549: IFFALSE 40553
// exit ;
40551: GO 41146
// if control = control_apeman then
40553: LD_VAR 0 4
40557: PUSH
40558: LD_INT 5
40560: EQUAL
40561: IFFALSE 40670
// begin tmp := UnitsInside ( factory ) ;
40563: LD_ADDR_VAR 0 8
40567: PUSH
40568: LD_VAR 0 1
40572: PPUSH
40573: CALL_OW 313
40577: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40578: LD_VAR 0 8
40582: PPUSH
40583: LD_INT 25
40585: PUSH
40586: LD_INT 12
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 72
40597: NOT
40598: IFFALSE 40608
// control := control_manual ;
40600: LD_ADDR_VAR 0 4
40604: PUSH
40605: LD_INT 1
40607: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40608: LD_ADDR_VAR 0 8
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL 40305 0 1
40622: ST_TO_ADDR
// if tmp then
40623: LD_VAR 0 8
40627: IFFALSE 40670
// begin for i in tmp do
40629: LD_ADDR_VAR 0 7
40633: PUSH
40634: LD_VAR 0 8
40638: PUSH
40639: FOR_IN
40640: IFFALSE 40668
// if i [ 1 ] = b_ext_radio then
40642: LD_VAR 0 7
40646: PUSH
40647: LD_INT 1
40649: ARRAY
40650: PUSH
40651: LD_INT 22
40653: EQUAL
40654: IFFALSE 40666
// begin control := control_remote ;
40656: LD_ADDR_VAR 0 4
40660: PUSH
40661: LD_INT 2
40663: ST_TO_ADDR
// break ;
40664: GO 40668
// end ;
40666: GO 40639
40668: POP
40669: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 2
40679: PPUSH
40680: LD_VAR 0 3
40684: PPUSH
40685: LD_VAR 0 4
40689: PPUSH
40690: LD_VAR 0 5
40694: PPUSH
40695: CALL_OW 448
40699: IFFALSE 40734
// begin result := [ chassis , engine , control , weapon ] ;
40701: LD_ADDR_VAR 0 6
40705: PUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_VAR 0 3
40715: PUSH
40716: LD_VAR 0 4
40720: PUSH
40721: LD_VAR 0 5
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// exit ;
40732: GO 41146
// end ; _chassis := AvailableChassisList ( factory ) ;
40734: LD_ADDR_VAR 0 9
40738: PUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 475
40748: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40749: LD_ADDR_VAR 0 11
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: CALL_OW 476
40763: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40764: LD_ADDR_VAR 0 12
40768: PUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL_OW 477
40778: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40779: LD_ADDR_VAR 0 10
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 478
40793: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40794: LD_VAR 0 9
40798: NOT
40799: PUSH
40800: LD_VAR 0 11
40804: NOT
40805: OR
40806: PUSH
40807: LD_VAR 0 12
40811: NOT
40812: OR
40813: PUSH
40814: LD_VAR 0 10
40818: NOT
40819: OR
40820: IFFALSE 40855
// begin result := [ chassis , engine , control , weapon ] ;
40822: LD_ADDR_VAR 0 6
40826: PUSH
40827: LD_VAR 0 2
40831: PUSH
40832: LD_VAR 0 3
40836: PUSH
40837: LD_VAR 0 4
40841: PUSH
40842: LD_VAR 0 5
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// exit ;
40853: GO 41146
// end ; if not chassis in _chassis then
40855: LD_VAR 0 2
40859: PUSH
40860: LD_VAR 0 9
40864: IN
40865: NOT
40866: IFFALSE 40892
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40868: LD_ADDR_VAR 0 2
40872: PUSH
40873: LD_VAR 0 9
40877: PUSH
40878: LD_INT 1
40880: PPUSH
40881: LD_VAR 0 9
40885: PPUSH
40886: CALL_OW 12
40890: ARRAY
40891: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40892: LD_VAR 0 2
40896: PPUSH
40897: LD_VAR 0 3
40901: PPUSH
40902: CALL 41151 0 2
40906: NOT
40907: IFFALSE 40966
// repeat engine := _engine [ 1 ] ;
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: LD_VAR 0 11
40918: PUSH
40919: LD_INT 1
40921: ARRAY
40922: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40923: LD_ADDR_VAR 0 11
40927: PUSH
40928: LD_VAR 0 11
40932: PPUSH
40933: LD_INT 1
40935: PPUSH
40936: CALL_OW 3
40940: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40941: LD_VAR 0 2
40945: PPUSH
40946: LD_VAR 0 3
40950: PPUSH
40951: CALL 41151 0 2
40955: PUSH
40956: LD_VAR 0 11
40960: PUSH
40961: EMPTY
40962: EQUAL
40963: OR
40964: IFFALSE 40909
// if not control in _control then
40966: LD_VAR 0 4
40970: PUSH
40971: LD_VAR 0 12
40975: IN
40976: NOT
40977: IFFALSE 41003
// control := _control [ rand ( 1 , _control ) ] ;
40979: LD_ADDR_VAR 0 4
40983: PUSH
40984: LD_VAR 0 12
40988: PUSH
40989: LD_INT 1
40991: PPUSH
40992: LD_VAR 0 12
40996: PPUSH
40997: CALL_OW 12
41001: ARRAY
41002: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41003: LD_VAR 0 2
41007: PPUSH
41008: LD_VAR 0 5
41012: PPUSH
41013: CALL 41371 0 2
41017: NOT
41018: IFFALSE 41077
// repeat weapon := _weapon [ 1 ] ;
41020: LD_ADDR_VAR 0 5
41024: PUSH
41025: LD_VAR 0 10
41029: PUSH
41030: LD_INT 1
41032: ARRAY
41033: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41034: LD_ADDR_VAR 0 10
41038: PUSH
41039: LD_VAR 0 10
41043: PPUSH
41044: LD_INT 1
41046: PPUSH
41047: CALL_OW 3
41051: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41052: LD_VAR 0 2
41056: PPUSH
41057: LD_VAR 0 5
41061: PPUSH
41062: CALL 41371 0 2
41066: PUSH
41067: LD_VAR 0 10
41071: PUSH
41072: EMPTY
41073: EQUAL
41074: OR
41075: IFFALSE 41020
// result := [ ] ;
41077: LD_ADDR_VAR 0 6
41081: PUSH
41082: EMPTY
41083: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41084: LD_VAR 0 1
41088: PPUSH
41089: LD_VAR 0 2
41093: PPUSH
41094: LD_VAR 0 3
41098: PPUSH
41099: LD_VAR 0 4
41103: PPUSH
41104: LD_VAR 0 5
41108: PPUSH
41109: CALL_OW 448
41113: IFFALSE 41146
// result := [ chassis , engine , control , weapon ] ;
41115: LD_ADDR_VAR 0 6
41119: PUSH
41120: LD_VAR 0 2
41124: PUSH
41125: LD_VAR 0 3
41129: PUSH
41130: LD_VAR 0 4
41134: PUSH
41135: LD_VAR 0 5
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: ST_TO_ADDR
// end ;
41146: LD_VAR 0 6
41150: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41151: LD_INT 0
41153: PPUSH
// if not chassis or not engine then
41154: LD_VAR 0 1
41158: NOT
41159: PUSH
41160: LD_VAR 0 2
41164: NOT
41165: OR
41166: IFFALSE 41170
// exit ;
41168: GO 41366
// case engine of engine_solar :
41170: LD_VAR 0 2
41174: PUSH
41175: LD_INT 2
41177: DOUBLE
41178: EQUAL
41179: IFTRUE 41183
41181: GO 41221
41183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 11
41191: PUSH
41192: LD_INT 12
41194: PUSH
41195: LD_INT 13
41197: PUSH
41198: LD_INT 14
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
41219: GO 41350
41221: LD_INT 1
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41291
41229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_INT 11
41237: PUSH
41238: LD_INT 12
41240: PUSH
41241: LD_INT 13
41243: PUSH
41244: LD_INT 14
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: LD_INT 4
41258: PUSH
41259: LD_INT 5
41261: PUSH
41262: LD_INT 21
41264: PUSH
41265: LD_INT 23
41267: PUSH
41268: LD_INT 22
41270: PUSH
41271: LD_INT 24
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
41289: GO 41350
41291: LD_INT 3
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41299
41297: GO 41349
41299: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: LD_INT 13
41307: PUSH
41308: LD_INT 14
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: LD_INT 5
41322: PUSH
41323: LD_INT 21
41325: PUSH
41326: LD_INT 22
41328: PUSH
41329: LD_INT 23
41331: PUSH
41332: LD_INT 24
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
41347: GO 41350
41349: POP
// result := ( chassis in result ) ;
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_VAR 0 1
41359: PUSH
41360: LD_VAR 0 3
41364: IN
41365: ST_TO_ADDR
// end ;
41366: LD_VAR 0 3
41370: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41371: LD_INT 0
41373: PPUSH
// if not chassis or not weapon then
41374: LD_VAR 0 1
41378: NOT
41379: PUSH
41380: LD_VAR 0 2
41384: NOT
41385: OR
41386: IFFALSE 41390
// exit ;
41388: GO 42452
// case weapon of us_machine_gun :
41390: LD_VAR 0 2
41394: PUSH
41395: LD_INT 2
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41433
41403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 3
41417: PUSH
41418: LD_INT 4
41420: PUSH
41421: LD_INT 5
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
41431: GO 42436
41433: LD_INT 3
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41471
41441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: LD_INT 4
41458: PUSH
41459: LD_INT 5
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
41469: GO 42436
41471: LD_INT 11
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41509
41479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 3
41493: PUSH
41494: LD_INT 4
41496: PUSH
41497: LD_INT 5
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
41507: GO 42436
41509: LD_INT 4
41511: DOUBLE
41512: EQUAL
41513: IFTRUE 41517
41515: GO 41543
41517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: LD_INT 4
41531: PUSH
41532: LD_INT 5
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: ST_TO_ADDR
41541: GO 42436
41543: LD_INT 5
41545: DOUBLE
41546: EQUAL
41547: IFTRUE 41551
41549: GO 41577
41551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: LD_INT 3
41562: PUSH
41563: LD_INT 4
41565: PUSH
41566: LD_INT 5
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
41575: GO 42436
41577: LD_INT 9
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41585
41583: GO 41611
41585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41586: LD_ADDR_VAR 0 3
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 3
41596: PUSH
41597: LD_INT 4
41599: PUSH
41600: LD_INT 5
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: ST_TO_ADDR
41609: GO 42436
41611: LD_INT 7
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41645
41619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: LD_INT 4
41633: PUSH
41634: LD_INT 5
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: ST_TO_ADDR
41643: GO 42436
41645: LD_INT 12
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41653
41651: GO 41679
41653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41654: LD_ADDR_VAR 0 3
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: LD_INT 4
41667: PUSH
41668: LD_INT 5
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: ST_TO_ADDR
41677: GO 42436
41679: LD_INT 13
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41687
41685: GO 41713
41687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41688: LD_ADDR_VAR 0 3
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 3
41698: PUSH
41699: LD_INT 4
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
41711: GO 42436
41713: LD_INT 14
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41721
41719: GO 41739
41721: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41722: LD_ADDR_VAR 0 3
41726: PUSH
41727: LD_INT 4
41729: PUSH
41730: LD_INT 5
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: ST_TO_ADDR
41737: GO 42436
41739: LD_INT 6
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41765
41747: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: LD_INT 5
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: ST_TO_ADDR
41763: GO 42436
41765: LD_INT 10
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41791
41773: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_INT 4
41781: PUSH
41782: LD_INT 5
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 42436
41791: LD_INT 22
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41825
41799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 11
41807: PUSH
41808: LD_INT 12
41810: PUSH
41811: LD_INT 13
41813: PUSH
41814: LD_INT 14
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
41823: GO 42436
41825: LD_INT 23
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41833
41831: GO 41859
41833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_INT 11
41841: PUSH
41842: LD_INT 12
41844: PUSH
41845: LD_INT 13
41847: PUSH
41848: LD_INT 14
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: ST_TO_ADDR
41857: GO 42436
41859: LD_INT 24
41861: DOUBLE
41862: EQUAL
41863: IFTRUE 41867
41865: GO 41893
41867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41868: LD_ADDR_VAR 0 3
41872: PUSH
41873: LD_INT 11
41875: PUSH
41876: LD_INT 12
41878: PUSH
41879: LD_INT 13
41881: PUSH
41882: LD_INT 14
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
41891: GO 42436
41893: LD_INT 30
41895: DOUBLE
41896: EQUAL
41897: IFTRUE 41901
41899: GO 41927
41901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41902: LD_ADDR_VAR 0 3
41906: PUSH
41907: LD_INT 11
41909: PUSH
41910: LD_INT 12
41912: PUSH
41913: LD_INT 13
41915: PUSH
41916: LD_INT 14
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
41925: GO 42436
41927: LD_INT 25
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41935
41933: GO 41953
41935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_INT 13
41943: PUSH
41944: LD_INT 14
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: ST_TO_ADDR
41951: GO 42436
41953: LD_INT 27
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41979
41961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 13
41969: PUSH
41970: LD_INT 14
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: ST_TO_ADDR
41977: GO 42436
41979: LD_EXP 54
41983: DOUBLE
41984: EQUAL
41985: IFTRUE 41989
41987: GO 42015
41989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_INT 11
41997: PUSH
41998: LD_INT 12
42000: PUSH
42001: LD_INT 13
42003: PUSH
42004: LD_INT 14
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
42013: GO 42436
42015: LD_INT 28
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42041
42023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 13
42031: PUSH
42032: LD_INT 14
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: ST_TO_ADDR
42039: GO 42436
42041: LD_INT 29
42043: DOUBLE
42044: EQUAL
42045: IFTRUE 42049
42047: GO 42067
42049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42050: LD_ADDR_VAR 0 3
42054: PUSH
42055: LD_INT 13
42057: PUSH
42058: LD_INT 14
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: ST_TO_ADDR
42065: GO 42436
42067: LD_INT 31
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42075
42073: GO 42093
42075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_INT 13
42083: PUSH
42084: LD_INT 14
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: ST_TO_ADDR
42091: GO 42436
42093: LD_INT 26
42095: DOUBLE
42096: EQUAL
42097: IFTRUE 42101
42099: GO 42119
42101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42102: LD_ADDR_VAR 0 3
42106: PUSH
42107: LD_INT 13
42109: PUSH
42110: LD_INT 14
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: ST_TO_ADDR
42117: GO 42436
42119: LD_INT 42
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42127
42125: GO 42153
42127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42128: LD_ADDR_VAR 0 3
42132: PUSH
42133: LD_INT 21
42135: PUSH
42136: LD_INT 22
42138: PUSH
42139: LD_INT 23
42141: PUSH
42142: LD_INT 24
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
42151: GO 42436
42153: LD_INT 43
42155: DOUBLE
42156: EQUAL
42157: IFTRUE 42161
42159: GO 42187
42161: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42162: LD_ADDR_VAR 0 3
42166: PUSH
42167: LD_INT 21
42169: PUSH
42170: LD_INT 22
42172: PUSH
42173: LD_INT 23
42175: PUSH
42176: LD_INT 24
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: ST_TO_ADDR
42185: GO 42436
42187: LD_INT 44
42189: DOUBLE
42190: EQUAL
42191: IFTRUE 42195
42193: GO 42221
42195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42196: LD_ADDR_VAR 0 3
42200: PUSH
42201: LD_INT 21
42203: PUSH
42204: LD_INT 22
42206: PUSH
42207: LD_INT 23
42209: PUSH
42210: LD_INT 24
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: ST_TO_ADDR
42219: GO 42436
42221: LD_INT 45
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42255
42229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 21
42237: PUSH
42238: LD_INT 22
42240: PUSH
42241: LD_INT 23
42243: PUSH
42244: LD_INT 24
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
42253: GO 42436
42255: LD_INT 49
42257: DOUBLE
42258: EQUAL
42259: IFTRUE 42263
42261: GO 42289
42263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42264: LD_ADDR_VAR 0 3
42268: PUSH
42269: LD_INT 21
42271: PUSH
42272: LD_INT 22
42274: PUSH
42275: LD_INT 23
42277: PUSH
42278: LD_INT 24
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
42287: GO 42436
42289: LD_INT 51
42291: DOUBLE
42292: EQUAL
42293: IFTRUE 42297
42295: GO 42323
42297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42298: LD_ADDR_VAR 0 3
42302: PUSH
42303: LD_INT 21
42305: PUSH
42306: LD_INT 22
42308: PUSH
42309: LD_INT 23
42311: PUSH
42312: LD_INT 24
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: ST_TO_ADDR
42321: GO 42436
42323: LD_INT 52
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42331
42329: GO 42357
42331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_INT 21
42339: PUSH
42340: LD_INT 22
42342: PUSH
42343: LD_INT 23
42345: PUSH
42346: LD_INT 24
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
42355: GO 42436
42357: LD_INT 53
42359: DOUBLE
42360: EQUAL
42361: IFTRUE 42365
42363: GO 42383
42365: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42366: LD_ADDR_VAR 0 3
42370: PUSH
42371: LD_INT 23
42373: PUSH
42374: LD_INT 24
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: ST_TO_ADDR
42381: GO 42436
42383: LD_INT 46
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42409
42391: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_INT 23
42399: PUSH
42400: LD_INT 24
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: ST_TO_ADDR
42407: GO 42436
42409: LD_INT 47
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42435
42417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 23
42425: PUSH
42426: LD_INT 24
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: ST_TO_ADDR
42433: GO 42436
42435: POP
// result := ( chassis in result ) ;
42436: LD_ADDR_VAR 0 3
42440: PUSH
42441: LD_VAR 0 1
42445: PUSH
42446: LD_VAR 0 3
42450: IN
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 3
42456: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
// result := array ;
42466: LD_ADDR_VAR 0 5
42470: PUSH
42471: LD_VAR 0 1
42475: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42476: LD_VAR 0 1
42480: NOT
42481: PUSH
42482: LD_VAR 0 2
42486: NOT
42487: OR
42488: PUSH
42489: LD_VAR 0 3
42493: NOT
42494: OR
42495: PUSH
42496: LD_VAR 0 2
42500: PUSH
42501: LD_VAR 0 1
42505: GREATER
42506: OR
42507: PUSH
42508: LD_VAR 0 3
42512: PUSH
42513: LD_VAR 0 1
42517: GREATER
42518: OR
42519: IFFALSE 42523
// exit ;
42521: GO 42819
// if direction then
42523: LD_VAR 0 4
42527: IFFALSE 42591
// begin d := 1 ;
42529: LD_ADDR_VAR 0 9
42533: PUSH
42534: LD_INT 1
42536: ST_TO_ADDR
// if i_from > i_to then
42537: LD_VAR 0 2
42541: PUSH
42542: LD_VAR 0 3
42546: GREATER
42547: IFFALSE 42573
// length := ( array - i_from ) + i_to else
42549: LD_ADDR_VAR 0 11
42553: PUSH
42554: LD_VAR 0 1
42558: PUSH
42559: LD_VAR 0 2
42563: MINUS
42564: PUSH
42565: LD_VAR 0 3
42569: PLUS
42570: ST_TO_ADDR
42571: GO 42589
// length := i_to - i_from ;
42573: LD_ADDR_VAR 0 11
42577: PUSH
42578: LD_VAR 0 3
42582: PUSH
42583: LD_VAR 0 2
42587: MINUS
42588: ST_TO_ADDR
// end else
42589: GO 42652
// begin d := - 1 ;
42591: LD_ADDR_VAR 0 9
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: ST_TO_ADDR
// if i_from > i_to then
42600: LD_VAR 0 2
42604: PUSH
42605: LD_VAR 0 3
42609: GREATER
42610: IFFALSE 42630
// length := i_from - i_to else
42612: LD_ADDR_VAR 0 11
42616: PUSH
42617: LD_VAR 0 2
42621: PUSH
42622: LD_VAR 0 3
42626: MINUS
42627: ST_TO_ADDR
42628: GO 42652
// length := ( array - i_to ) + i_from ;
42630: LD_ADDR_VAR 0 11
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: LD_VAR 0 3
42644: MINUS
42645: PUSH
42646: LD_VAR 0 2
42650: PLUS
42651: ST_TO_ADDR
// end ; if not length then
42652: LD_VAR 0 11
42656: NOT
42657: IFFALSE 42661
// exit ;
42659: GO 42819
// tmp := array ;
42661: LD_ADDR_VAR 0 10
42665: PUSH
42666: LD_VAR 0 1
42670: ST_TO_ADDR
// for i = 1 to length do
42671: LD_ADDR_VAR 0 6
42675: PUSH
42676: DOUBLE
42677: LD_INT 1
42679: DEC
42680: ST_TO_ADDR
42681: LD_VAR 0 11
42685: PUSH
42686: FOR_TO
42687: IFFALSE 42807
// begin for j = 1 to array do
42689: LD_ADDR_VAR 0 7
42693: PUSH
42694: DOUBLE
42695: LD_INT 1
42697: DEC
42698: ST_TO_ADDR
42699: LD_VAR 0 1
42703: PUSH
42704: FOR_TO
42705: IFFALSE 42793
// begin k := j + d ;
42707: LD_ADDR_VAR 0 8
42711: PUSH
42712: LD_VAR 0 7
42716: PUSH
42717: LD_VAR 0 9
42721: PLUS
42722: ST_TO_ADDR
// if k > array then
42723: LD_VAR 0 8
42727: PUSH
42728: LD_VAR 0 1
42732: GREATER
42733: IFFALSE 42743
// k := 1 ;
42735: LD_ADDR_VAR 0 8
42739: PUSH
42740: LD_INT 1
42742: ST_TO_ADDR
// if not k then
42743: LD_VAR 0 8
42747: NOT
42748: IFFALSE 42760
// k := array ;
42750: LD_ADDR_VAR 0 8
42754: PUSH
42755: LD_VAR 0 1
42759: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42760: LD_ADDR_VAR 0 10
42764: PUSH
42765: LD_VAR 0 10
42769: PPUSH
42770: LD_VAR 0 8
42774: PPUSH
42775: LD_VAR 0 1
42779: PUSH
42780: LD_VAR 0 7
42784: ARRAY
42785: PPUSH
42786: CALL_OW 1
42790: ST_TO_ADDR
// end ;
42791: GO 42704
42793: POP
42794: POP
// array := tmp ;
42795: LD_ADDR_VAR 0 1
42799: PUSH
42800: LD_VAR 0 10
42804: ST_TO_ADDR
// end ;
42805: GO 42686
42807: POP
42808: POP
// result := array ;
42809: LD_ADDR_VAR 0 5
42813: PUSH
42814: LD_VAR 0 1
42818: ST_TO_ADDR
// end ;
42819: LD_VAR 0 5
42823: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42824: LD_INT 0
42826: PPUSH
42827: PPUSH
// result := 0 ;
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 0
42835: ST_TO_ADDR
// if not array or not value in array then
42836: LD_VAR 0 1
42840: NOT
42841: PUSH
42842: LD_VAR 0 2
42846: PUSH
42847: LD_VAR 0 1
42851: IN
42852: NOT
42853: OR
42854: IFFALSE 42858
// exit ;
42856: GO 42912
// for i = 1 to array do
42858: LD_ADDR_VAR 0 4
42862: PUSH
42863: DOUBLE
42864: LD_INT 1
42866: DEC
42867: ST_TO_ADDR
42868: LD_VAR 0 1
42872: PUSH
42873: FOR_TO
42874: IFFALSE 42910
// if value = array [ i ] then
42876: LD_VAR 0 2
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_VAR 0 4
42890: ARRAY
42891: EQUAL
42892: IFFALSE 42908
// begin result := i ;
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_VAR 0 4
42903: ST_TO_ADDR
// exit ;
42904: POP
42905: POP
42906: GO 42912
// end ;
42908: GO 42873
42910: POP
42911: POP
// end ;
42912: LD_VAR 0 3
42916: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42917: LD_INT 0
42919: PPUSH
// vc_chassis := chassis ;
42920: LD_ADDR_OWVAR 37
42924: PUSH
42925: LD_VAR 0 1
42929: ST_TO_ADDR
// vc_engine := engine ;
42930: LD_ADDR_OWVAR 39
42934: PUSH
42935: LD_VAR 0 2
42939: ST_TO_ADDR
// vc_control := control ;
42940: LD_ADDR_OWVAR 38
42944: PUSH
42945: LD_VAR 0 3
42949: ST_TO_ADDR
// vc_weapon := weapon ;
42950: LD_ADDR_OWVAR 40
42954: PUSH
42955: LD_VAR 0 4
42959: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42960: LD_ADDR_OWVAR 41
42964: PUSH
42965: LD_VAR 0 5
42969: ST_TO_ADDR
// end ;
42970: LD_VAR 0 6
42974: RET
// export function WantPlant ( unit ) ; var task ; begin
42975: LD_INT 0
42977: PPUSH
42978: PPUSH
// result := false ;
42979: LD_ADDR_VAR 0 2
42983: PUSH
42984: LD_INT 0
42986: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: LD_VAR 0 1
42996: PPUSH
42997: CALL_OW 437
43001: ST_TO_ADDR
// if task then
43002: LD_VAR 0 3
43006: IFFALSE 43034
// if task [ 1 ] [ 1 ] = p then
43008: LD_VAR 0 3
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PUSH
43017: LD_INT 1
43019: ARRAY
43020: PUSH
43021: LD_STRING p
43023: EQUAL
43024: IFFALSE 43034
// result := true ;
43026: LD_ADDR_VAR 0 2
43030: PUSH
43031: LD_INT 1
43033: ST_TO_ADDR
// end ;
43034: LD_VAR 0 2
43038: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43039: LD_INT 0
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
// if pos < 1 then
43045: LD_VAR 0 2
43049: PUSH
43050: LD_INT 1
43052: LESS
43053: IFFALSE 43057
// exit ;
43055: GO 43360
// if pos = 1 then
43057: LD_VAR 0 2
43061: PUSH
43062: LD_INT 1
43064: EQUAL
43065: IFFALSE 43098
// result := Replace ( arr , pos [ 1 ] , value ) else
43067: LD_ADDR_VAR 0 4
43071: PUSH
43072: LD_VAR 0 1
43076: PPUSH
43077: LD_VAR 0 2
43081: PUSH
43082: LD_INT 1
43084: ARRAY
43085: PPUSH
43086: LD_VAR 0 3
43090: PPUSH
43091: CALL_OW 1
43095: ST_TO_ADDR
43096: GO 43360
// begin tmp := arr ;
43098: LD_ADDR_VAR 0 6
43102: PUSH
43103: LD_VAR 0 1
43107: ST_TO_ADDR
// s_arr := [ tmp ] ;
43108: LD_ADDR_VAR 0 7
43112: PUSH
43113: LD_VAR 0 6
43117: PUSH
43118: EMPTY
43119: LIST
43120: ST_TO_ADDR
// for i = 1 to pos - 1 do
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: DOUBLE
43127: LD_INT 1
43129: DEC
43130: ST_TO_ADDR
43131: LD_VAR 0 2
43135: PUSH
43136: LD_INT 1
43138: MINUS
43139: PUSH
43140: FOR_TO
43141: IFFALSE 43186
// begin tmp := tmp [ pos [ i ] ] ;
43143: LD_ADDR_VAR 0 6
43147: PUSH
43148: LD_VAR 0 6
43152: PUSH
43153: LD_VAR 0 2
43157: PUSH
43158: LD_VAR 0 5
43162: ARRAY
43163: ARRAY
43164: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43165: LD_ADDR_VAR 0 7
43169: PUSH
43170: LD_VAR 0 7
43174: PUSH
43175: LD_VAR 0 6
43179: PUSH
43180: EMPTY
43181: LIST
43182: ADD
43183: ST_TO_ADDR
// end ;
43184: GO 43140
43186: POP
43187: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43188: LD_ADDR_VAR 0 6
43192: PUSH
43193: LD_VAR 0 6
43197: PPUSH
43198: LD_VAR 0 2
43202: PUSH
43203: LD_VAR 0 2
43207: ARRAY
43208: PPUSH
43209: LD_VAR 0 3
43213: PPUSH
43214: CALL_OW 1
43218: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43219: LD_ADDR_VAR 0 7
43223: PUSH
43224: LD_VAR 0 7
43228: PPUSH
43229: LD_VAR 0 7
43233: PPUSH
43234: LD_VAR 0 6
43238: PPUSH
43239: CALL_OW 1
43243: ST_TO_ADDR
// for i = s_arr downto 2 do
43244: LD_ADDR_VAR 0 5
43248: PUSH
43249: DOUBLE
43250: LD_VAR 0 7
43254: INC
43255: ST_TO_ADDR
43256: LD_INT 2
43258: PUSH
43259: FOR_DOWNTO
43260: IFFALSE 43344
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43262: LD_ADDR_VAR 0 6
43266: PUSH
43267: LD_VAR 0 7
43271: PUSH
43272: LD_VAR 0 5
43276: PUSH
43277: LD_INT 1
43279: MINUS
43280: ARRAY
43281: PPUSH
43282: LD_VAR 0 2
43286: PUSH
43287: LD_VAR 0 5
43291: PUSH
43292: LD_INT 1
43294: MINUS
43295: ARRAY
43296: PPUSH
43297: LD_VAR 0 7
43301: PUSH
43302: LD_VAR 0 5
43306: ARRAY
43307: PPUSH
43308: CALL_OW 1
43312: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43313: LD_ADDR_VAR 0 7
43317: PUSH
43318: LD_VAR 0 7
43322: PPUSH
43323: LD_VAR 0 5
43327: PUSH
43328: LD_INT 1
43330: MINUS
43331: PPUSH
43332: LD_VAR 0 6
43336: PPUSH
43337: CALL_OW 1
43341: ST_TO_ADDR
// end ;
43342: GO 43259
43344: POP
43345: POP
// result := s_arr [ 1 ] ;
43346: LD_ADDR_VAR 0 4
43350: PUSH
43351: LD_VAR 0 7
43355: PUSH
43356: LD_INT 1
43358: ARRAY
43359: ST_TO_ADDR
// end ; end ;
43360: LD_VAR 0 4
43364: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43365: LD_INT 0
43367: PPUSH
43368: PPUSH
// if not list then
43369: LD_VAR 0 1
43373: NOT
43374: IFFALSE 43378
// exit ;
43376: GO 43469
// i := list [ pos1 ] ;
43378: LD_ADDR_VAR 0 5
43382: PUSH
43383: LD_VAR 0 1
43387: PUSH
43388: LD_VAR 0 2
43392: ARRAY
43393: ST_TO_ADDR
// if not i then
43394: LD_VAR 0 5
43398: NOT
43399: IFFALSE 43403
// exit ;
43401: GO 43469
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43403: LD_ADDR_VAR 0 1
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: LD_VAR 0 2
43417: PPUSH
43418: LD_VAR 0 1
43422: PUSH
43423: LD_VAR 0 3
43427: ARRAY
43428: PPUSH
43429: CALL_OW 1
43433: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43434: LD_ADDR_VAR 0 1
43438: PUSH
43439: LD_VAR 0 1
43443: PPUSH
43444: LD_VAR 0 3
43448: PPUSH
43449: LD_VAR 0 5
43453: PPUSH
43454: CALL_OW 1
43458: ST_TO_ADDR
// result := list ;
43459: LD_ADDR_VAR 0 4
43463: PUSH
43464: LD_VAR 0 1
43468: ST_TO_ADDR
// end ;
43469: LD_VAR 0 4
43473: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43474: LD_INT 0
43476: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 250
43491: PPUSH
43492: LD_VAR 0 1
43496: PPUSH
43497: CALL_OW 251
43501: PPUSH
43502: LD_VAR 0 2
43506: PPUSH
43507: LD_VAR 0 3
43511: PPUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: CALL 43527 0 5
43521: ST_TO_ADDR
// end ;
43522: LD_VAR 0 5
43526: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43527: LD_INT 0
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
// if not list then
43533: LD_VAR 0 3
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 43930
// result := [ ] ;
43542: LD_ADDR_VAR 0 6
43546: PUSH
43547: EMPTY
43548: ST_TO_ADDR
// for i in list do
43549: LD_ADDR_VAR 0 7
43553: PUSH
43554: LD_VAR 0 3
43558: PUSH
43559: FOR_IN
43560: IFFALSE 43762
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43562: LD_ADDR_VAR 0 9
43566: PUSH
43567: LD_VAR 0 7
43571: PPUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: LD_VAR 0 2
43581: PPUSH
43582: CALL_OW 297
43586: ST_TO_ADDR
// if not result then
43587: LD_VAR 0 6
43591: NOT
43592: IFFALSE 43618
// result := [ [ i , tmp ] ] else
43594: LD_ADDR_VAR 0 6
43598: PUSH
43599: LD_VAR 0 7
43603: PUSH
43604: LD_VAR 0 9
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: ST_TO_ADDR
43616: GO 43760
// begin if result [ result ] [ 2 ] < tmp then
43618: LD_VAR 0 6
43622: PUSH
43623: LD_VAR 0 6
43627: ARRAY
43628: PUSH
43629: LD_INT 2
43631: ARRAY
43632: PUSH
43633: LD_VAR 0 9
43637: LESS
43638: IFFALSE 43680
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43640: LD_ADDR_VAR 0 6
43644: PUSH
43645: LD_VAR 0 6
43649: PPUSH
43650: LD_VAR 0 6
43654: PUSH
43655: LD_INT 1
43657: PLUS
43658: PPUSH
43659: LD_VAR 0 7
43663: PUSH
43664: LD_VAR 0 9
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PPUSH
43673: CALL_OW 2
43677: ST_TO_ADDR
43678: GO 43760
// for j = 1 to result do
43680: LD_ADDR_VAR 0 8
43684: PUSH
43685: DOUBLE
43686: LD_INT 1
43688: DEC
43689: ST_TO_ADDR
43690: LD_VAR 0 6
43694: PUSH
43695: FOR_TO
43696: IFFALSE 43758
// begin if tmp < result [ j ] [ 2 ] then
43698: LD_VAR 0 9
43702: PUSH
43703: LD_VAR 0 6
43707: PUSH
43708: LD_VAR 0 8
43712: ARRAY
43713: PUSH
43714: LD_INT 2
43716: ARRAY
43717: LESS
43718: IFFALSE 43756
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43720: LD_ADDR_VAR 0 6
43724: PUSH
43725: LD_VAR 0 6
43729: PPUSH
43730: LD_VAR 0 8
43734: PPUSH
43735: LD_VAR 0 7
43739: PUSH
43740: LD_VAR 0 9
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PPUSH
43749: CALL_OW 2
43753: ST_TO_ADDR
// break ;
43754: GO 43758
// end ; end ;
43756: GO 43695
43758: POP
43759: POP
// end ; end ;
43760: GO 43559
43762: POP
43763: POP
// if result and not asc then
43764: LD_VAR 0 6
43768: PUSH
43769: LD_VAR 0 4
43773: NOT
43774: AND
43775: IFFALSE 43850
// begin tmp := result ;
43777: LD_ADDR_VAR 0 9
43781: PUSH
43782: LD_VAR 0 6
43786: ST_TO_ADDR
// for i = tmp downto 1 do
43787: LD_ADDR_VAR 0 7
43791: PUSH
43792: DOUBLE
43793: LD_VAR 0 9
43797: INC
43798: ST_TO_ADDR
43799: LD_INT 1
43801: PUSH
43802: FOR_DOWNTO
43803: IFFALSE 43848
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43805: LD_ADDR_VAR 0 6
43809: PUSH
43810: LD_VAR 0 6
43814: PPUSH
43815: LD_VAR 0 9
43819: PUSH
43820: LD_VAR 0 7
43824: MINUS
43825: PUSH
43826: LD_INT 1
43828: PLUS
43829: PPUSH
43830: LD_VAR 0 9
43834: PUSH
43835: LD_VAR 0 7
43839: ARRAY
43840: PPUSH
43841: CALL_OW 1
43845: ST_TO_ADDR
43846: GO 43802
43848: POP
43849: POP
// end ; tmp := [ ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: EMPTY
43856: ST_TO_ADDR
// if mode then
43857: LD_VAR 0 5
43861: IFFALSE 43930
// begin for i = 1 to result do
43863: LD_ADDR_VAR 0 7
43867: PUSH
43868: DOUBLE
43869: LD_INT 1
43871: DEC
43872: ST_TO_ADDR
43873: LD_VAR 0 6
43877: PUSH
43878: FOR_TO
43879: IFFALSE 43918
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43881: LD_ADDR_VAR 0 9
43885: PUSH
43886: LD_VAR 0 9
43890: PPUSH
43891: LD_VAR 0 7
43895: PPUSH
43896: LD_VAR 0 6
43900: PUSH
43901: LD_VAR 0 7
43905: ARRAY
43906: PUSH
43907: LD_INT 1
43909: ARRAY
43910: PPUSH
43911: CALL_OW 1
43915: ST_TO_ADDR
43916: GO 43878
43918: POP
43919: POP
// result := tmp ;
43920: LD_ADDR_VAR 0 6
43924: PUSH
43925: LD_VAR 0 9
43929: ST_TO_ADDR
// end ; end ;
43930: LD_VAR 0 6
43934: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43935: LD_INT 0
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43943: LD_ADDR_VAR 0 5
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// if not x or not y then
43965: LD_VAR 0 2
43969: NOT
43970: PUSH
43971: LD_VAR 0 3
43975: NOT
43976: OR
43977: IFFALSE 43981
// exit ;
43979: GO 45633
// if not range then
43981: LD_VAR 0 4
43985: NOT
43986: IFFALSE 43996
// range := 10 ;
43988: LD_ADDR_VAR 0 4
43992: PUSH
43993: LD_INT 10
43995: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43996: LD_ADDR_VAR 0 8
44000: PUSH
44001: LD_INT 81
44003: PUSH
44004: LD_VAR 0 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 92
44015: PUSH
44016: LD_VAR 0 2
44020: PUSH
44021: LD_VAR 0 3
44025: PUSH
44026: LD_VAR 0 4
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: LD_INT 21
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: PPUSH
44059: CALL_OW 69
44063: ST_TO_ADDR
// if not tmp then
44064: LD_VAR 0 8
44068: NOT
44069: IFFALSE 44073
// exit ;
44071: GO 45633
// for i in tmp do
44073: LD_ADDR_VAR 0 6
44077: PUSH
44078: LD_VAR 0 8
44082: PUSH
44083: FOR_IN
44084: IFFALSE 45608
// begin points := [ 0 , 0 , 0 ] ;
44086: LD_ADDR_VAR 0 9
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// bpoints := 1 ;
44105: LD_ADDR_VAR 0 10
44109: PUSH
44110: LD_INT 1
44112: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44113: LD_VAR 0 6
44117: PPUSH
44118: CALL_OW 247
44122: PUSH
44123: LD_INT 1
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44709
44131: POP
// begin if GetClass ( i ) = 1 then
44132: LD_VAR 0 6
44136: PPUSH
44137: CALL_OW 257
44141: PUSH
44142: LD_INT 1
44144: EQUAL
44145: IFFALSE 44166
// points := [ 10 , 5 , 3 ] ;
44147: LD_ADDR_VAR 0 9
44151: PUSH
44152: LD_INT 10
44154: PUSH
44155: LD_INT 5
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44166: LD_VAR 0 6
44170: PPUSH
44171: CALL_OW 257
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 4
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: IN
44190: IFFALSE 44211
// points := [ 3 , 2 , 1 ] ;
44192: LD_ADDR_VAR 0 9
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44211: LD_VAR 0 6
44215: PPUSH
44216: CALL_OW 257
44220: PUSH
44221: LD_INT 5
44223: EQUAL
44224: IFFALSE 44245
// points := [ 130 , 5 , 2 ] ;
44226: LD_ADDR_VAR 0 9
44230: PUSH
44231: LD_INT 130
44233: PUSH
44234: LD_INT 5
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44245: LD_VAR 0 6
44249: PPUSH
44250: CALL_OW 257
44254: PUSH
44255: LD_INT 8
44257: EQUAL
44258: IFFALSE 44279
// points := [ 35 , 35 , 30 ] ;
44260: LD_ADDR_VAR 0 9
44264: PUSH
44265: LD_INT 35
44267: PUSH
44268: LD_INT 35
44270: PUSH
44271: LD_INT 30
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44279: LD_VAR 0 6
44283: PPUSH
44284: CALL_OW 257
44288: PUSH
44289: LD_INT 9
44291: EQUAL
44292: IFFALSE 44313
// points := [ 20 , 55 , 40 ] ;
44294: LD_ADDR_VAR 0 9
44298: PUSH
44299: LD_INT 20
44301: PUSH
44302: LD_INT 55
44304: PUSH
44305: LD_INT 40
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44313: LD_VAR 0 6
44317: PPUSH
44318: CALL_OW 257
44322: PUSH
44323: LD_INT 12
44325: PUSH
44326: LD_INT 16
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: IN
44333: IFFALSE 44354
// points := [ 5 , 3 , 2 ] ;
44335: LD_ADDR_VAR 0 9
44339: PUSH
44340: LD_INT 5
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44354: LD_VAR 0 6
44358: PPUSH
44359: CALL_OW 257
44363: PUSH
44364: LD_INT 17
44366: EQUAL
44367: IFFALSE 44388
// points := [ 100 , 50 , 75 ] ;
44369: LD_ADDR_VAR 0 9
44373: PUSH
44374: LD_INT 100
44376: PUSH
44377: LD_INT 50
44379: PUSH
44380: LD_INT 75
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44388: LD_VAR 0 6
44392: PPUSH
44393: CALL_OW 257
44397: PUSH
44398: LD_INT 15
44400: EQUAL
44401: IFFALSE 44422
// points := [ 10 , 5 , 3 ] ;
44403: LD_ADDR_VAR 0 9
44407: PUSH
44408: LD_INT 10
44410: PUSH
44411: LD_INT 5
44413: PUSH
44414: LD_INT 3
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44422: LD_VAR 0 6
44426: PPUSH
44427: CALL_OW 257
44431: PUSH
44432: LD_INT 14
44434: EQUAL
44435: IFFALSE 44456
// points := [ 10 , 0 , 0 ] ;
44437: LD_ADDR_VAR 0 9
44441: PUSH
44442: LD_INT 10
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44456: LD_VAR 0 6
44460: PPUSH
44461: CALL_OW 257
44465: PUSH
44466: LD_INT 11
44468: EQUAL
44469: IFFALSE 44490
// points := [ 30 , 10 , 5 ] ;
44471: LD_ADDR_VAR 0 9
44475: PUSH
44476: LD_INT 30
44478: PUSH
44479: LD_INT 10
44481: PUSH
44482: LD_INT 5
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_INT 5
44497: PPUSH
44498: CALL_OW 321
44502: PUSH
44503: LD_INT 2
44505: EQUAL
44506: IFFALSE 44523
// bpoints := bpoints * 1.8 ;
44508: LD_ADDR_VAR 0 10
44512: PUSH
44513: LD_VAR 0 10
44517: PUSH
44518: LD_REAL  1.80000000000000E+0000
44521: MUL
44522: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44523: LD_VAR 0 6
44527: PPUSH
44528: CALL_OW 257
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: LD_INT 4
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: IN
44551: PUSH
44552: LD_VAR 0 1
44556: PPUSH
44557: LD_INT 51
44559: PPUSH
44560: CALL_OW 321
44564: PUSH
44565: LD_INT 2
44567: EQUAL
44568: AND
44569: IFFALSE 44586
// bpoints := bpoints * 1.2 ;
44571: LD_ADDR_VAR 0 10
44575: PUSH
44576: LD_VAR 0 10
44580: PUSH
44581: LD_REAL  1.20000000000000E+0000
44584: MUL
44585: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44586: LD_VAR 0 6
44590: PPUSH
44591: CALL_OW 257
44595: PUSH
44596: LD_INT 5
44598: PUSH
44599: LD_INT 7
44601: PUSH
44602: LD_INT 9
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: IN
44610: PUSH
44611: LD_VAR 0 1
44615: PPUSH
44616: LD_INT 52
44618: PPUSH
44619: CALL_OW 321
44623: PUSH
44624: LD_INT 2
44626: EQUAL
44627: AND
44628: IFFALSE 44645
// bpoints := bpoints * 1.5 ;
44630: LD_ADDR_VAR 0 10
44634: PUSH
44635: LD_VAR 0 10
44639: PUSH
44640: LD_REAL  1.50000000000000E+0000
44643: MUL
44644: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44645: LD_VAR 0 1
44649: PPUSH
44650: LD_INT 66
44652: PPUSH
44653: CALL_OW 321
44657: PUSH
44658: LD_INT 2
44660: EQUAL
44661: IFFALSE 44678
// bpoints := bpoints * 1.1 ;
44663: LD_ADDR_VAR 0 10
44667: PUSH
44668: LD_VAR 0 10
44672: PUSH
44673: LD_REAL  1.10000000000000E+0000
44676: MUL
44677: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44678: LD_ADDR_VAR 0 10
44682: PUSH
44683: LD_VAR 0 10
44687: PUSH
44688: LD_VAR 0 6
44692: PPUSH
44693: LD_INT 1
44695: PPUSH
44696: CALL_OW 259
44700: PUSH
44701: LD_REAL  1.15000000000000E+0000
44704: MUL
44705: MUL
44706: ST_TO_ADDR
// end ; unit_vehicle :
44707: GO 45537
44709: LD_INT 2
44711: DOUBLE
44712: EQUAL
44713: IFTRUE 44717
44715: GO 45525
44717: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44718: LD_VAR 0 6
44722: PPUSH
44723: CALL_OW 264
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 42
44733: PUSH
44734: LD_INT 24
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: IN
44742: IFFALSE 44763
// points := [ 25 , 5 , 3 ] ;
44744: LD_ADDR_VAR 0 9
44748: PUSH
44749: LD_INT 25
44751: PUSH
44752: LD_INT 5
44754: PUSH
44755: LD_INT 3
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44763: LD_VAR 0 6
44767: PPUSH
44768: CALL_OW 264
44772: PUSH
44773: LD_INT 4
44775: PUSH
44776: LD_INT 43
44778: PUSH
44779: LD_INT 25
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: IN
44787: IFFALSE 44808
// points := [ 40 , 15 , 5 ] ;
44789: LD_ADDR_VAR 0 9
44793: PUSH
44794: LD_INT 40
44796: PUSH
44797: LD_INT 15
44799: PUSH
44800: LD_INT 5
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44808: LD_VAR 0 6
44812: PPUSH
44813: CALL_OW 264
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 23
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: IN
44828: IFFALSE 44849
// points := [ 7 , 25 , 8 ] ;
44830: LD_ADDR_VAR 0 9
44834: PUSH
44835: LD_INT 7
44837: PUSH
44838: LD_INT 25
44840: PUSH
44841: LD_INT 8
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44849: LD_VAR 0 6
44853: PPUSH
44854: CALL_OW 264
44858: PUSH
44859: LD_INT 5
44861: PUSH
44862: LD_INT 27
44864: PUSH
44865: LD_INT 44
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: IN
44873: IFFALSE 44894
// points := [ 14 , 50 , 16 ] ;
44875: LD_ADDR_VAR 0 9
44879: PUSH
44880: LD_INT 14
44882: PUSH
44883: LD_INT 50
44885: PUSH
44886: LD_INT 16
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44894: LD_VAR 0 6
44898: PPUSH
44899: CALL_OW 264
44903: PUSH
44904: LD_INT 6
44906: PUSH
44907: LD_INT 46
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: IN
44914: IFFALSE 44935
// points := [ 32 , 120 , 70 ] ;
44916: LD_ADDR_VAR 0 9
44920: PUSH
44921: LD_INT 32
44923: PUSH
44924: LD_INT 120
44926: PUSH
44927: LD_INT 70
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44935: LD_VAR 0 6
44939: PPUSH
44940: CALL_OW 264
44944: PUSH
44945: LD_INT 7
44947: PUSH
44948: LD_INT 28
44950: PUSH
44951: LD_INT 45
44953: PUSH
44954: LD_EXP 54
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: IN
44965: IFFALSE 44986
// points := [ 35 , 20 , 45 ] ;
44967: LD_ADDR_VAR 0 9
44971: PUSH
44972: LD_INT 35
44974: PUSH
44975: LD_INT 20
44977: PUSH
44978: LD_INT 45
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44986: LD_VAR 0 6
44990: PPUSH
44991: CALL_OW 264
44995: PUSH
44996: LD_INT 47
44998: PUSH
44999: EMPTY
45000: LIST
45001: IN
45002: IFFALSE 45023
// points := [ 67 , 45 , 75 ] ;
45004: LD_ADDR_VAR 0 9
45008: PUSH
45009: LD_INT 67
45011: PUSH
45012: LD_INT 45
45014: PUSH
45015: LD_INT 75
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45023: LD_VAR 0 6
45027: PPUSH
45028: CALL_OW 264
45032: PUSH
45033: LD_INT 26
45035: PUSH
45036: EMPTY
45037: LIST
45038: IN
45039: IFFALSE 45060
// points := [ 120 , 30 , 80 ] ;
45041: LD_ADDR_VAR 0 9
45045: PUSH
45046: LD_INT 120
45048: PUSH
45049: LD_INT 30
45051: PUSH
45052: LD_INT 80
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45060: LD_VAR 0 6
45064: PPUSH
45065: CALL_OW 264
45069: PUSH
45070: LD_INT 22
45072: PUSH
45073: EMPTY
45074: LIST
45075: IN
45076: IFFALSE 45097
// points := [ 40 , 1 , 1 ] ;
45078: LD_ADDR_VAR 0 9
45082: PUSH
45083: LD_INT 40
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45097: LD_VAR 0 6
45101: PPUSH
45102: CALL_OW 264
45106: PUSH
45107: LD_INT 29
45109: PUSH
45110: EMPTY
45111: LIST
45112: IN
45113: IFFALSE 45134
// points := [ 70 , 200 , 400 ] ;
45115: LD_ADDR_VAR 0 9
45119: PUSH
45120: LD_INT 70
45122: PUSH
45123: LD_INT 200
45125: PUSH
45126: LD_INT 400
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45134: LD_VAR 0 6
45138: PPUSH
45139: CALL_OW 264
45143: PUSH
45144: LD_INT 14
45146: PUSH
45147: LD_INT 53
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: IN
45154: IFFALSE 45175
// points := [ 40 , 10 , 20 ] ;
45156: LD_ADDR_VAR 0 9
45160: PUSH
45161: LD_INT 40
45163: PUSH
45164: LD_INT 10
45166: PUSH
45167: LD_INT 20
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45175: LD_VAR 0 6
45179: PPUSH
45180: CALL_OW 264
45184: PUSH
45185: LD_INT 9
45187: PUSH
45188: EMPTY
45189: LIST
45190: IN
45191: IFFALSE 45212
// points := [ 5 , 70 , 20 ] ;
45193: LD_ADDR_VAR 0 9
45197: PUSH
45198: LD_INT 5
45200: PUSH
45201: LD_INT 70
45203: PUSH
45204: LD_INT 20
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45212: LD_VAR 0 6
45216: PPUSH
45217: CALL_OW 264
45221: PUSH
45222: LD_INT 10
45224: PUSH
45225: EMPTY
45226: LIST
45227: IN
45228: IFFALSE 45249
// points := [ 35 , 110 , 70 ] ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_INT 35
45237: PUSH
45238: LD_INT 110
45240: PUSH
45241: LD_INT 70
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 265
45258: PUSH
45259: LD_INT 25
45261: EQUAL
45262: IFFALSE 45283
// points := [ 80 , 65 , 100 ] ;
45264: LD_ADDR_VAR 0 9
45268: PUSH
45269: LD_INT 80
45271: PUSH
45272: LD_INT 65
45274: PUSH
45275: LD_INT 100
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45283: LD_VAR 0 6
45287: PPUSH
45288: CALL_OW 263
45292: PUSH
45293: LD_INT 1
45295: EQUAL
45296: IFFALSE 45331
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45298: LD_ADDR_VAR 0 10
45302: PUSH
45303: LD_VAR 0 10
45307: PUSH
45308: LD_VAR 0 6
45312: PPUSH
45313: CALL_OW 311
45317: PPUSH
45318: LD_INT 3
45320: PPUSH
45321: CALL_OW 259
45325: PUSH
45326: LD_INT 4
45328: MUL
45329: MUL
45330: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45331: LD_VAR 0 6
45335: PPUSH
45336: CALL_OW 263
45340: PUSH
45341: LD_INT 2
45343: EQUAL
45344: IFFALSE 45395
// begin j := IsControledBy ( i ) ;
45346: LD_ADDR_VAR 0 7
45350: PUSH
45351: LD_VAR 0 6
45355: PPUSH
45356: CALL_OW 312
45360: ST_TO_ADDR
// if j then
45361: LD_VAR 0 7
45365: IFFALSE 45395
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45367: LD_ADDR_VAR 0 10
45371: PUSH
45372: LD_VAR 0 10
45376: PUSH
45377: LD_VAR 0 7
45381: PPUSH
45382: LD_INT 3
45384: PPUSH
45385: CALL_OW 259
45389: PUSH
45390: LD_INT 3
45392: MUL
45393: MUL
45394: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45395: LD_VAR 0 6
45399: PPUSH
45400: CALL_OW 264
45404: PUSH
45405: LD_INT 5
45407: PUSH
45408: LD_INT 6
45410: PUSH
45411: LD_INT 46
45413: PUSH
45414: LD_INT 44
45416: PUSH
45417: LD_INT 47
45419: PUSH
45420: LD_INT 45
45422: PUSH
45423: LD_INT 28
45425: PUSH
45426: LD_INT 7
45428: PUSH
45429: LD_INT 27
45431: PUSH
45432: LD_INT 29
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: IN
45447: PUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_INT 52
45455: PPUSH
45456: CALL_OW 321
45460: PUSH
45461: LD_INT 2
45463: EQUAL
45464: AND
45465: IFFALSE 45482
// bpoints := bpoints * 1.2 ;
45467: LD_ADDR_VAR 0 10
45471: PUSH
45472: LD_VAR 0 10
45476: PUSH
45477: LD_REAL  1.20000000000000E+0000
45480: MUL
45481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45482: LD_VAR 0 6
45486: PPUSH
45487: CALL_OW 264
45491: PUSH
45492: LD_INT 6
45494: PUSH
45495: LD_INT 46
45497: PUSH
45498: LD_INT 47
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: IN
45506: IFFALSE 45523
// bpoints := bpoints * 1.2 ;
45508: LD_ADDR_VAR 0 10
45512: PUSH
45513: LD_VAR 0 10
45517: PUSH
45518: LD_REAL  1.20000000000000E+0000
45521: MUL
45522: ST_TO_ADDR
// end ; unit_building :
45523: GO 45537
45525: LD_INT 3
45527: DOUBLE
45528: EQUAL
45529: IFTRUE 45533
45531: GO 45536
45533: POP
// ; end ;
45534: GO 45537
45536: POP
// for j = 1 to 3 do
45537: LD_ADDR_VAR 0 7
45541: PUSH
45542: DOUBLE
45543: LD_INT 1
45545: DEC
45546: ST_TO_ADDR
45547: LD_INT 3
45549: PUSH
45550: FOR_TO
45551: IFFALSE 45604
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 5
45562: PPUSH
45563: LD_VAR 0 7
45567: PPUSH
45568: LD_VAR 0 5
45572: PUSH
45573: LD_VAR 0 7
45577: ARRAY
45578: PUSH
45579: LD_VAR 0 9
45583: PUSH
45584: LD_VAR 0 7
45588: ARRAY
45589: PUSH
45590: LD_VAR 0 10
45594: MUL
45595: PLUS
45596: PPUSH
45597: CALL_OW 1
45601: ST_TO_ADDR
45602: GO 45550
45604: POP
45605: POP
// end ;
45606: GO 44083
45608: POP
45609: POP
// result := Replace ( result , 4 , tmp ) ;
45610: LD_ADDR_VAR 0 5
45614: PUSH
45615: LD_VAR 0 5
45619: PPUSH
45620: LD_INT 4
45622: PPUSH
45623: LD_VAR 0 8
45627: PPUSH
45628: CALL_OW 1
45632: ST_TO_ADDR
// end ;
45633: LD_VAR 0 5
45637: RET
// export function DangerAtRange ( unit , range ) ; begin
45638: LD_INT 0
45640: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: CALL_OW 255
45655: PPUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 250
45665: PPUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: CALL_OW 251
45675: PPUSH
45676: LD_VAR 0 2
45680: PPUSH
45681: CALL 43935 0 4
45685: ST_TO_ADDR
// end ;
45686: LD_VAR 0 3
45690: RET
// export function DangerInArea ( side , area ) ; begin
45691: LD_INT 0
45693: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_VAR 0 2
45703: PPUSH
45704: LD_INT 81
45706: PUSH
45707: LD_VAR 0 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PPUSH
45716: CALL_OW 70
45720: ST_TO_ADDR
// end ;
45721: LD_VAR 0 3
45725: RET
// export function IsExtension ( b ) ; begin
45726: LD_INT 0
45728: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45729: LD_ADDR_VAR 0 2
45733: PUSH
45734: LD_VAR 0 1
45738: PUSH
45739: LD_INT 23
45741: PUSH
45742: LD_INT 20
45744: PUSH
45745: LD_INT 22
45747: PUSH
45748: LD_INT 17
45750: PUSH
45751: LD_INT 24
45753: PUSH
45754: LD_INT 21
45756: PUSH
45757: LD_INT 19
45759: PUSH
45760: LD_INT 16
45762: PUSH
45763: LD_INT 25
45765: PUSH
45766: LD_INT 18
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: IN
45781: ST_TO_ADDR
// end ;
45782: LD_VAR 0 2
45786: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45787: LD_INT 0
45789: PPUSH
45790: PPUSH
45791: PPUSH
// result := [ ] ;
45792: LD_ADDR_VAR 0 4
45796: PUSH
45797: EMPTY
45798: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45799: LD_ADDR_VAR 0 5
45803: PUSH
45804: LD_VAR 0 2
45808: PPUSH
45809: LD_INT 21
45811: PUSH
45812: LD_INT 3
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PPUSH
45819: CALL_OW 70
45823: ST_TO_ADDR
// if not tmp then
45824: LD_VAR 0 5
45828: NOT
45829: IFFALSE 45833
// exit ;
45831: GO 45897
// if checkLink then
45833: LD_VAR 0 3
45837: IFFALSE 45887
// begin for i in tmp do
45839: LD_ADDR_VAR 0 6
45843: PUSH
45844: LD_VAR 0 5
45848: PUSH
45849: FOR_IN
45850: IFFALSE 45885
// if GetBase ( i ) <> base then
45852: LD_VAR 0 6
45856: PPUSH
45857: CALL_OW 274
45861: PUSH
45862: LD_VAR 0 1
45866: NONEQUAL
45867: IFFALSE 45883
// ComLinkToBase ( base , i ) ;
45869: LD_VAR 0 1
45873: PPUSH
45874: LD_VAR 0 6
45878: PPUSH
45879: CALL_OW 169
45883: GO 45849
45885: POP
45886: POP
// end ; result := tmp ;
45887: LD_ADDR_VAR 0 4
45891: PUSH
45892: LD_VAR 0 5
45896: ST_TO_ADDR
// end ;
45897: LD_VAR 0 4
45901: RET
// export function ComComplete ( units , b ) ; var i ; begin
45902: LD_INT 0
45904: PPUSH
45905: PPUSH
// if not units then
45906: LD_VAR 0 1
45910: NOT
45911: IFFALSE 45915
// exit ;
45913: GO 46005
// for i in units do
45915: LD_ADDR_VAR 0 4
45919: PUSH
45920: LD_VAR 0 1
45924: PUSH
45925: FOR_IN
45926: IFFALSE 46003
// if BuildingStatus ( b ) = bs_build then
45928: LD_VAR 0 2
45932: PPUSH
45933: CALL_OW 461
45937: PUSH
45938: LD_INT 1
45940: EQUAL
45941: IFFALSE 46001
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45943: LD_VAR 0 4
45947: PPUSH
45948: LD_STRING h
45950: PUSH
45951: LD_VAR 0 2
45955: PPUSH
45956: CALL_OW 250
45960: PUSH
45961: LD_VAR 0 2
45965: PPUSH
45966: CALL_OW 251
45970: PUSH
45971: LD_VAR 0 2
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: PPUSH
45997: CALL_OW 446
46001: GO 45925
46003: POP
46004: POP
// end ;
46005: LD_VAR 0 3
46009: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46010: LD_INT 0
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46018: LD_VAR 0 1
46022: NOT
46023: PUSH
46024: LD_VAR 0 1
46028: PPUSH
46029: CALL_OW 263
46033: PUSH
46034: LD_INT 2
46036: NONEQUAL
46037: OR
46038: IFFALSE 46042
// exit ;
46040: GO 46358
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46042: LD_ADDR_VAR 0 6
46046: PUSH
46047: LD_INT 22
46049: PUSH
46050: LD_VAR 0 1
46054: PPUSH
46055: CALL_OW 255
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 30
46069: PUSH
46070: LD_INT 36
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 34
46079: PUSH
46080: LD_INT 31
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 69
46100: ST_TO_ADDR
// if not tmp then
46101: LD_VAR 0 6
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 46358
// result := [ ] ;
46110: LD_ADDR_VAR 0 2
46114: PUSH
46115: EMPTY
46116: ST_TO_ADDR
// for i in tmp do
46117: LD_ADDR_VAR 0 3
46121: PUSH
46122: LD_VAR 0 6
46126: PUSH
46127: FOR_IN
46128: IFFALSE 46199
// begin t := UnitsInside ( i ) ;
46130: LD_ADDR_VAR 0 4
46134: PUSH
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 313
46144: ST_TO_ADDR
// if t then
46145: LD_VAR 0 4
46149: IFFALSE 46197
// for j in t do
46151: LD_ADDR_VAR 0 7
46155: PUSH
46156: LD_VAR 0 4
46160: PUSH
46161: FOR_IN
46162: IFFALSE 46195
// result := Replace ( result , result + 1 , j ) ;
46164: LD_ADDR_VAR 0 2
46168: PUSH
46169: LD_VAR 0 2
46173: PPUSH
46174: LD_VAR 0 2
46178: PUSH
46179: LD_INT 1
46181: PLUS
46182: PPUSH
46183: LD_VAR 0 7
46187: PPUSH
46188: CALL_OW 1
46192: ST_TO_ADDR
46193: GO 46161
46195: POP
46196: POP
// end ;
46197: GO 46127
46199: POP
46200: POP
// if not result then
46201: LD_VAR 0 2
46205: NOT
46206: IFFALSE 46210
// exit ;
46208: GO 46358
// mech := result [ 1 ] ;
46210: LD_ADDR_VAR 0 5
46214: PUSH
46215: LD_VAR 0 2
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: ST_TO_ADDR
// if result > 1 then
46224: LD_VAR 0 2
46228: PUSH
46229: LD_INT 1
46231: GREATER
46232: IFFALSE 46344
// begin for i = 2 to result do
46234: LD_ADDR_VAR 0 3
46238: PUSH
46239: DOUBLE
46240: LD_INT 2
46242: DEC
46243: ST_TO_ADDR
46244: LD_VAR 0 2
46248: PUSH
46249: FOR_TO
46250: IFFALSE 46342
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46252: LD_ADDR_VAR 0 4
46256: PUSH
46257: LD_VAR 0 2
46261: PUSH
46262: LD_VAR 0 3
46266: ARRAY
46267: PPUSH
46268: LD_INT 3
46270: PPUSH
46271: CALL_OW 259
46275: PUSH
46276: LD_VAR 0 2
46280: PUSH
46281: LD_VAR 0 3
46285: ARRAY
46286: PPUSH
46287: CALL_OW 432
46291: MINUS
46292: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46293: LD_VAR 0 4
46297: PUSH
46298: LD_VAR 0 5
46302: PPUSH
46303: LD_INT 3
46305: PPUSH
46306: CALL_OW 259
46310: PUSH
46311: LD_VAR 0 5
46315: PPUSH
46316: CALL_OW 432
46320: MINUS
46321: GREATEREQUAL
46322: IFFALSE 46340
// mech := result [ i ] ;
46324: LD_ADDR_VAR 0 5
46328: PUSH
46329: LD_VAR 0 2
46333: PUSH
46334: LD_VAR 0 3
46338: ARRAY
46339: ST_TO_ADDR
// end ;
46340: GO 46249
46342: POP
46343: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46344: LD_VAR 0 1
46348: PPUSH
46349: LD_VAR 0 5
46353: PPUSH
46354: CALL_OW 135
// end ;
46358: LD_VAR 0 2
46362: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
// result := [ ] ;
46378: LD_ADDR_VAR 0 7
46382: PUSH
46383: EMPTY
46384: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46385: LD_VAR 0 1
46389: PPUSH
46390: CALL_OW 266
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: IN
46405: NOT
46406: IFFALSE 46410
// exit ;
46408: GO 48044
// if name then
46410: LD_VAR 0 3
46414: IFFALSE 46430
// SetBName ( base_dep , name ) ;
46416: LD_VAR 0 1
46420: PPUSH
46421: LD_VAR 0 3
46425: PPUSH
46426: CALL_OW 500
// base := GetBase ( base_dep ) ;
46430: LD_ADDR_VAR 0 15
46434: PUSH
46435: LD_VAR 0 1
46439: PPUSH
46440: CALL_OW 274
46444: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46445: LD_ADDR_VAR 0 16
46449: PUSH
46450: LD_VAR 0 1
46454: PPUSH
46455: CALL_OW 255
46459: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46460: LD_ADDR_VAR 0 17
46464: PUSH
46465: LD_VAR 0 1
46469: PPUSH
46470: CALL_OW 248
46474: ST_TO_ADDR
// if sources then
46475: LD_VAR 0 5
46479: IFFALSE 46526
// for i = 1 to 3 do
46481: LD_ADDR_VAR 0 8
46485: PUSH
46486: DOUBLE
46487: LD_INT 1
46489: DEC
46490: ST_TO_ADDR
46491: LD_INT 3
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46524
// AddResourceType ( base , i , sources [ i ] ) ;
46497: LD_VAR 0 15
46501: PPUSH
46502: LD_VAR 0 8
46506: PPUSH
46507: LD_VAR 0 5
46511: PUSH
46512: LD_VAR 0 8
46516: ARRAY
46517: PPUSH
46518: CALL_OW 276
46522: GO 46494
46524: POP
46525: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46526: LD_ADDR_VAR 0 18
46530: PUSH
46531: LD_VAR 0 15
46535: PPUSH
46536: LD_VAR 0 2
46540: PPUSH
46541: LD_INT 1
46543: PPUSH
46544: CALL 45787 0 3
46548: ST_TO_ADDR
// InitHc ;
46549: CALL_OW 19
// InitUc ;
46553: CALL_OW 18
// uc_side := side ;
46557: LD_ADDR_OWVAR 20
46561: PUSH
46562: LD_VAR 0 16
46566: ST_TO_ADDR
// uc_nation := nation ;
46567: LD_ADDR_OWVAR 21
46571: PUSH
46572: LD_VAR 0 17
46576: ST_TO_ADDR
// if buildings then
46577: LD_VAR 0 18
46581: IFFALSE 47903
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46583: LD_ADDR_VAR 0 19
46587: PUSH
46588: LD_VAR 0 18
46592: PPUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 30
46598: PUSH
46599: LD_INT 29
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 30
46608: PUSH
46609: LD_INT 30
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: PPUSH
46621: CALL_OW 72
46625: ST_TO_ADDR
// if tmp then
46626: LD_VAR 0 19
46630: IFFALSE 46678
// for i in tmp do
46632: LD_ADDR_VAR 0 8
46636: PUSH
46637: LD_VAR 0 19
46641: PUSH
46642: FOR_IN
46643: IFFALSE 46676
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46645: LD_VAR 0 8
46649: PPUSH
46650: CALL_OW 250
46654: PPUSH
46655: LD_VAR 0 8
46659: PPUSH
46660: CALL_OW 251
46664: PPUSH
46665: LD_VAR 0 16
46669: PPUSH
46670: CALL_OW 441
46674: GO 46642
46676: POP
46677: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46678: LD_VAR 0 18
46682: PPUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 30
46688: PUSH
46689: LD_INT 32
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 30
46698: PUSH
46699: LD_INT 33
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: PPUSH
46711: CALL_OW 72
46715: IFFALSE 46803
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46717: LD_ADDR_VAR 0 8
46721: PUSH
46722: LD_VAR 0 18
46726: PPUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 30
46732: PUSH
46733: LD_INT 32
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 30
46742: PUSH
46743: LD_INT 33
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: PPUSH
46755: CALL_OW 72
46759: PUSH
46760: FOR_IN
46761: IFFALSE 46801
// begin if not GetBWeapon ( i ) then
46763: LD_VAR 0 8
46767: PPUSH
46768: CALL_OW 269
46772: NOT
46773: IFFALSE 46799
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46775: LD_VAR 0 8
46779: PPUSH
46780: LD_VAR 0 8
46784: PPUSH
46785: LD_VAR 0 2
46789: PPUSH
46790: CALL 48049 0 2
46794: PPUSH
46795: CALL_OW 431
// end ;
46799: GO 46760
46801: POP
46802: POP
// end ; for i = 1 to personel do
46803: LD_ADDR_VAR 0 8
46807: PUSH
46808: DOUBLE
46809: LD_INT 1
46811: DEC
46812: ST_TO_ADDR
46813: LD_VAR 0 6
46817: PUSH
46818: FOR_TO
46819: IFFALSE 47883
// begin if i > 4 then
46821: LD_VAR 0 8
46825: PUSH
46826: LD_INT 4
46828: GREATER
46829: IFFALSE 46833
// break ;
46831: GO 47883
// case i of 1 :
46833: LD_VAR 0 8
46837: PUSH
46838: LD_INT 1
46840: DOUBLE
46841: EQUAL
46842: IFTRUE 46846
46844: GO 46926
46846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46847: LD_ADDR_VAR 0 12
46851: PUSH
46852: LD_VAR 0 18
46856: PPUSH
46857: LD_INT 22
46859: PUSH
46860: LD_VAR 0 16
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 58
46871: PUSH
46872: EMPTY
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 30
46880: PUSH
46881: LD_INT 32
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 30
46890: PUSH
46891: LD_INT 4
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 30
46900: PUSH
46901: LD_INT 5
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: PPUSH
46919: CALL_OW 72
46923: ST_TO_ADDR
46924: GO 47148
46926: LD_INT 2
46928: DOUBLE
46929: EQUAL
46930: IFTRUE 46934
46932: GO 46996
46934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46935: LD_ADDR_VAR 0 12
46939: PUSH
46940: LD_VAR 0 18
46944: PPUSH
46945: LD_INT 22
46947: PUSH
46948: LD_VAR 0 16
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 30
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 30
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PPUSH
46989: CALL_OW 72
46993: ST_TO_ADDR
46994: GO 47148
46996: LD_INT 3
46998: DOUBLE
46999: EQUAL
47000: IFTRUE 47004
47002: GO 47066
47004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47005: LD_ADDR_VAR 0 12
47009: PUSH
47010: LD_VAR 0 18
47014: PPUSH
47015: LD_INT 22
47017: PUSH
47018: LD_VAR 0 16
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 30
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 30
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PPUSH
47059: CALL_OW 72
47063: ST_TO_ADDR
47064: GO 47148
47066: LD_INT 4
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47147
47074: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47075: LD_ADDR_VAR 0 12
47079: PUSH
47080: LD_VAR 0 18
47084: PPUSH
47085: LD_INT 22
47087: PUSH
47088: LD_VAR 0 16
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 30
47102: PUSH
47103: LD_INT 6
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 30
47112: PUSH
47113: LD_INT 7
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 30
47122: PUSH
47123: LD_INT 8
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PPUSH
47140: CALL_OW 72
47144: ST_TO_ADDR
47145: GO 47148
47147: POP
// if i = 1 then
47148: LD_VAR 0 8
47152: PUSH
47153: LD_INT 1
47155: EQUAL
47156: IFFALSE 47267
// begin tmp := [ ] ;
47158: LD_ADDR_VAR 0 19
47162: PUSH
47163: EMPTY
47164: ST_TO_ADDR
// for j in f do
47165: LD_ADDR_VAR 0 9
47169: PUSH
47170: LD_VAR 0 12
47174: PUSH
47175: FOR_IN
47176: IFFALSE 47249
// if GetBType ( j ) = b_bunker then
47178: LD_VAR 0 9
47182: PPUSH
47183: CALL_OW 266
47187: PUSH
47188: LD_INT 32
47190: EQUAL
47191: IFFALSE 47218
// tmp := Insert ( tmp , 1 , j ) else
47193: LD_ADDR_VAR 0 19
47197: PUSH
47198: LD_VAR 0 19
47202: PPUSH
47203: LD_INT 1
47205: PPUSH
47206: LD_VAR 0 9
47210: PPUSH
47211: CALL_OW 2
47215: ST_TO_ADDR
47216: GO 47247
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47218: LD_ADDR_VAR 0 19
47222: PUSH
47223: LD_VAR 0 19
47227: PPUSH
47228: LD_VAR 0 19
47232: PUSH
47233: LD_INT 1
47235: PLUS
47236: PPUSH
47237: LD_VAR 0 9
47241: PPUSH
47242: CALL_OW 2
47246: ST_TO_ADDR
47247: GO 47175
47249: POP
47250: POP
// if tmp then
47251: LD_VAR 0 19
47255: IFFALSE 47267
// f := tmp ;
47257: LD_ADDR_VAR 0 12
47261: PUSH
47262: LD_VAR 0 19
47266: ST_TO_ADDR
// end ; x := personel [ i ] ;
47267: LD_ADDR_VAR 0 13
47271: PUSH
47272: LD_VAR 0 6
47276: PUSH
47277: LD_VAR 0 8
47281: ARRAY
47282: ST_TO_ADDR
// if x = - 1 then
47283: LD_VAR 0 13
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: EQUAL
47292: IFFALSE 47501
// begin for j in f do
47294: LD_ADDR_VAR 0 9
47298: PUSH
47299: LD_VAR 0 12
47303: PUSH
47304: FOR_IN
47305: IFFALSE 47497
// repeat InitHc ;
47307: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47311: LD_VAR 0 9
47315: PPUSH
47316: CALL_OW 266
47320: PUSH
47321: LD_INT 5
47323: EQUAL
47324: IFFALSE 47394
// begin if UnitsInside ( j ) < 3 then
47326: LD_VAR 0 9
47330: PPUSH
47331: CALL_OW 313
47335: PUSH
47336: LD_INT 3
47338: LESS
47339: IFFALSE 47375
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47341: LD_INT 0
47343: PPUSH
47344: LD_INT 5
47346: PUSH
47347: LD_INT 8
47349: PUSH
47350: LD_INT 9
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: PUSH
47358: LD_VAR 0 17
47362: ARRAY
47363: PPUSH
47364: LD_VAR 0 4
47368: PPUSH
47369: CALL_OW 380
47373: GO 47392
// PrepareHuman ( false , i , skill ) ;
47375: LD_INT 0
47377: PPUSH
47378: LD_VAR 0 8
47382: PPUSH
47383: LD_VAR 0 4
47387: PPUSH
47388: CALL_OW 380
// end else
47392: GO 47411
// PrepareHuman ( false , i , skill ) ;
47394: LD_INT 0
47396: PPUSH
47397: LD_VAR 0 8
47401: PPUSH
47402: LD_VAR 0 4
47406: PPUSH
47407: CALL_OW 380
// un := CreateHuman ;
47411: LD_ADDR_VAR 0 14
47415: PUSH
47416: CALL_OW 44
47420: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47421: LD_ADDR_VAR 0 7
47425: PUSH
47426: LD_VAR 0 7
47430: PPUSH
47431: LD_INT 1
47433: PPUSH
47434: LD_VAR 0 14
47438: PPUSH
47439: CALL_OW 2
47443: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47444: LD_VAR 0 14
47448: PPUSH
47449: LD_VAR 0 9
47453: PPUSH
47454: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47458: LD_VAR 0 9
47462: PPUSH
47463: CALL_OW 313
47467: PUSH
47468: LD_INT 6
47470: EQUAL
47471: PUSH
47472: LD_VAR 0 9
47476: PPUSH
47477: CALL_OW 266
47481: PUSH
47482: LD_INT 32
47484: PUSH
47485: LD_INT 31
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: IN
47492: OR
47493: IFFALSE 47307
47495: GO 47304
47497: POP
47498: POP
// end else
47499: GO 47881
// for j = 1 to x do
47501: LD_ADDR_VAR 0 9
47505: PUSH
47506: DOUBLE
47507: LD_INT 1
47509: DEC
47510: ST_TO_ADDR
47511: LD_VAR 0 13
47515: PUSH
47516: FOR_TO
47517: IFFALSE 47879
// begin InitHc ;
47519: CALL_OW 19
// if not f then
47523: LD_VAR 0 12
47527: NOT
47528: IFFALSE 47617
// begin PrepareHuman ( false , i , skill ) ;
47530: LD_INT 0
47532: PPUSH
47533: LD_VAR 0 8
47537: PPUSH
47538: LD_VAR 0 4
47542: PPUSH
47543: CALL_OW 380
// un := CreateHuman ;
47547: LD_ADDR_VAR 0 14
47551: PUSH
47552: CALL_OW 44
47556: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47557: LD_ADDR_VAR 0 7
47561: PUSH
47562: LD_VAR 0 7
47566: PPUSH
47567: LD_INT 1
47569: PPUSH
47570: LD_VAR 0 14
47574: PPUSH
47575: CALL_OW 2
47579: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47580: LD_VAR 0 14
47584: PPUSH
47585: LD_VAR 0 1
47589: PPUSH
47590: CALL_OW 250
47594: PPUSH
47595: LD_VAR 0 1
47599: PPUSH
47600: CALL_OW 251
47604: PPUSH
47605: LD_INT 10
47607: PPUSH
47608: LD_INT 0
47610: PPUSH
47611: CALL_OW 50
// continue ;
47615: GO 47516
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47617: LD_VAR 0 12
47621: PUSH
47622: LD_INT 1
47624: ARRAY
47625: PPUSH
47626: CALL_OW 313
47630: PUSH
47631: LD_VAR 0 12
47635: PUSH
47636: LD_INT 1
47638: ARRAY
47639: PPUSH
47640: CALL_OW 266
47644: PUSH
47645: LD_INT 32
47647: PUSH
47648: LD_INT 31
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: IN
47655: AND
47656: PUSH
47657: LD_VAR 0 12
47661: PUSH
47662: LD_INT 1
47664: ARRAY
47665: PPUSH
47666: CALL_OW 313
47670: PUSH
47671: LD_INT 6
47673: EQUAL
47674: OR
47675: IFFALSE 47695
// f := Delete ( f , 1 ) ;
47677: LD_ADDR_VAR 0 12
47681: PUSH
47682: LD_VAR 0 12
47686: PPUSH
47687: LD_INT 1
47689: PPUSH
47690: CALL_OW 3
47694: ST_TO_ADDR
// if not f then
47695: LD_VAR 0 12
47699: NOT
47700: IFFALSE 47718
// begin x := x + 2 ;
47702: LD_ADDR_VAR 0 13
47706: PUSH
47707: LD_VAR 0 13
47711: PUSH
47712: LD_INT 2
47714: PLUS
47715: ST_TO_ADDR
// continue ;
47716: GO 47516
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47718: LD_VAR 0 12
47722: PUSH
47723: LD_INT 1
47725: ARRAY
47726: PPUSH
47727: CALL_OW 266
47731: PUSH
47732: LD_INT 5
47734: EQUAL
47735: IFFALSE 47809
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47737: LD_VAR 0 12
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: CALL_OW 313
47750: PUSH
47751: LD_INT 3
47753: LESS
47754: IFFALSE 47790
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47756: LD_INT 0
47758: PPUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 8
47764: PUSH
47765: LD_INT 9
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: LD_VAR 0 17
47777: ARRAY
47778: PPUSH
47779: LD_VAR 0 4
47783: PPUSH
47784: CALL_OW 380
47788: GO 47807
// PrepareHuman ( false , i , skill ) ;
47790: LD_INT 0
47792: PPUSH
47793: LD_VAR 0 8
47797: PPUSH
47798: LD_VAR 0 4
47802: PPUSH
47803: CALL_OW 380
// end else
47807: GO 47826
// PrepareHuman ( false , i , skill ) ;
47809: LD_INT 0
47811: PPUSH
47812: LD_VAR 0 8
47816: PPUSH
47817: LD_VAR 0 4
47821: PPUSH
47822: CALL_OW 380
// un := CreateHuman ;
47826: LD_ADDR_VAR 0 14
47830: PUSH
47831: CALL_OW 44
47835: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47836: LD_ADDR_VAR 0 7
47840: PUSH
47841: LD_VAR 0 7
47845: PPUSH
47846: LD_INT 1
47848: PPUSH
47849: LD_VAR 0 14
47853: PPUSH
47854: CALL_OW 2
47858: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47859: LD_VAR 0 14
47863: PPUSH
47864: LD_VAR 0 12
47868: PUSH
47869: LD_INT 1
47871: ARRAY
47872: PPUSH
47873: CALL_OW 52
// end ;
47877: GO 47516
47879: POP
47880: POP
// end ;
47881: GO 46818
47883: POP
47884: POP
// result := result ^ buildings ;
47885: LD_ADDR_VAR 0 7
47889: PUSH
47890: LD_VAR 0 7
47894: PUSH
47895: LD_VAR 0 18
47899: ADD
47900: ST_TO_ADDR
// end else
47901: GO 48044
// begin for i = 1 to personel do
47903: LD_ADDR_VAR 0 8
47907: PUSH
47908: DOUBLE
47909: LD_INT 1
47911: DEC
47912: ST_TO_ADDR
47913: LD_VAR 0 6
47917: PUSH
47918: FOR_TO
47919: IFFALSE 48042
// begin if i > 4 then
47921: LD_VAR 0 8
47925: PUSH
47926: LD_INT 4
47928: GREATER
47929: IFFALSE 47933
// break ;
47931: GO 48042
// x := personel [ i ] ;
47933: LD_ADDR_VAR 0 13
47937: PUSH
47938: LD_VAR 0 6
47942: PUSH
47943: LD_VAR 0 8
47947: ARRAY
47948: ST_TO_ADDR
// if x = - 1 then
47949: LD_VAR 0 13
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: EQUAL
47958: IFFALSE 47962
// continue ;
47960: GO 47918
// PrepareHuman ( false , i , skill ) ;
47962: LD_INT 0
47964: PPUSH
47965: LD_VAR 0 8
47969: PPUSH
47970: LD_VAR 0 4
47974: PPUSH
47975: CALL_OW 380
// un := CreateHuman ;
47979: LD_ADDR_VAR 0 14
47983: PUSH
47984: CALL_OW 44
47988: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47989: LD_VAR 0 14
47993: PPUSH
47994: LD_VAR 0 1
47998: PPUSH
47999: CALL_OW 250
48003: PPUSH
48004: LD_VAR 0 1
48008: PPUSH
48009: CALL_OW 251
48013: PPUSH
48014: LD_INT 10
48016: PPUSH
48017: LD_INT 0
48019: PPUSH
48020: CALL_OW 50
// result := result ^ un ;
48024: LD_ADDR_VAR 0 7
48028: PUSH
48029: LD_VAR 0 7
48033: PUSH
48034: LD_VAR 0 14
48038: ADD
48039: ST_TO_ADDR
// end ;
48040: GO 47918
48042: POP
48043: POP
// end ; end ;
48044: LD_VAR 0 7
48048: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48049: LD_INT 0
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
// result := false ;
48067: LD_ADDR_VAR 0 3
48071: PUSH
48072: LD_INT 0
48074: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48075: LD_VAR 0 1
48079: NOT
48080: PUSH
48081: LD_VAR 0 1
48085: PPUSH
48086: CALL_OW 266
48090: PUSH
48091: LD_INT 32
48093: PUSH
48094: LD_INT 33
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: IN
48101: NOT
48102: OR
48103: IFFALSE 48107
// exit ;
48105: GO 49216
// nat := GetNation ( tower ) ;
48107: LD_ADDR_VAR 0 12
48111: PUSH
48112: LD_VAR 0 1
48116: PPUSH
48117: CALL_OW 248
48121: ST_TO_ADDR
// side := GetSide ( tower ) ;
48122: LD_ADDR_VAR 0 16
48126: PUSH
48127: LD_VAR 0 1
48131: PPUSH
48132: CALL_OW 255
48136: ST_TO_ADDR
// x := GetX ( tower ) ;
48137: LD_ADDR_VAR 0 10
48141: PUSH
48142: LD_VAR 0 1
48146: PPUSH
48147: CALL_OW 250
48151: ST_TO_ADDR
// y := GetY ( tower ) ;
48152: LD_ADDR_VAR 0 11
48156: PUSH
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 251
48166: ST_TO_ADDR
// if not x or not y then
48167: LD_VAR 0 10
48171: NOT
48172: PUSH
48173: LD_VAR 0 11
48177: NOT
48178: OR
48179: IFFALSE 48183
// exit ;
48181: GO 49216
// weapon := 0 ;
48183: LD_ADDR_VAR 0 18
48187: PUSH
48188: LD_INT 0
48190: ST_TO_ADDR
// fac_list := [ ] ;
48191: LD_ADDR_VAR 0 17
48195: PUSH
48196: EMPTY
48197: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48198: LD_ADDR_VAR 0 6
48202: PUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 274
48212: PPUSH
48213: LD_VAR 0 2
48217: PPUSH
48218: LD_INT 0
48220: PPUSH
48221: CALL 45787 0 3
48225: PPUSH
48226: LD_INT 30
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PPUSH
48236: CALL_OW 72
48240: ST_TO_ADDR
// if not factories then
48241: LD_VAR 0 6
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 49216
// for i in factories do
48250: LD_ADDR_VAR 0 8
48254: PUSH
48255: LD_VAR 0 6
48259: PUSH
48260: FOR_IN
48261: IFFALSE 48286
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48263: LD_ADDR_VAR 0 17
48267: PUSH
48268: LD_VAR 0 17
48272: PUSH
48273: LD_VAR 0 8
48277: PPUSH
48278: CALL_OW 478
48282: UNION
48283: ST_TO_ADDR
48284: GO 48260
48286: POP
48287: POP
// if not fac_list then
48288: LD_VAR 0 17
48292: NOT
48293: IFFALSE 48297
// exit ;
48295: GO 49216
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48297: LD_ADDR_VAR 0 5
48301: PUSH
48302: LD_INT 4
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: LD_INT 9
48310: PUSH
48311: LD_INT 10
48313: PUSH
48314: LD_INT 6
48316: PUSH
48317: LD_INT 7
48319: PUSH
48320: LD_INT 11
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 27
48334: PUSH
48335: LD_INT 28
48337: PUSH
48338: LD_INT 26
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 43
48352: PUSH
48353: LD_INT 44
48355: PUSH
48356: LD_INT 46
48358: PUSH
48359: LD_INT 45
48361: PUSH
48362: LD_INT 47
48364: PUSH
48365: LD_INT 49
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: PUSH
48381: LD_VAR 0 12
48385: ARRAY
48386: ST_TO_ADDR
// list := list isect fac_list ;
48387: LD_ADDR_VAR 0 5
48391: PUSH
48392: LD_VAR 0 5
48396: PUSH
48397: LD_VAR 0 17
48401: ISECT
48402: ST_TO_ADDR
// if not list then
48403: LD_VAR 0 5
48407: NOT
48408: IFFALSE 48412
// exit ;
48410: GO 49216
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48412: LD_VAR 0 12
48416: PUSH
48417: LD_INT 3
48419: EQUAL
48420: PUSH
48421: LD_INT 49
48423: PUSH
48424: LD_VAR 0 5
48428: IN
48429: AND
48430: PUSH
48431: LD_INT 31
48433: PPUSH
48434: LD_VAR 0 16
48438: PPUSH
48439: CALL_OW 321
48443: PUSH
48444: LD_INT 2
48446: EQUAL
48447: AND
48448: IFFALSE 48508
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48450: LD_INT 22
48452: PUSH
48453: LD_VAR 0 16
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 35
48464: PUSH
48465: LD_INT 49
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 91
48474: PUSH
48475: LD_VAR 0 1
48479: PUSH
48480: LD_INT 10
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: PPUSH
48493: CALL_OW 69
48497: NOT
48498: IFFALSE 48508
// weapon := ru_time_lapser ;
48500: LD_ADDR_VAR 0 18
48504: PUSH
48505: LD_INT 49
48507: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48508: LD_VAR 0 12
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: IN
48523: PUSH
48524: LD_INT 11
48526: PUSH
48527: LD_VAR 0 5
48531: IN
48532: PUSH
48533: LD_INT 30
48535: PUSH
48536: LD_VAR 0 5
48540: IN
48541: OR
48542: AND
48543: PUSH
48544: LD_INT 6
48546: PPUSH
48547: LD_VAR 0 16
48551: PPUSH
48552: CALL_OW 321
48556: PUSH
48557: LD_INT 2
48559: EQUAL
48560: AND
48561: IFFALSE 48726
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48563: LD_INT 22
48565: PUSH
48566: LD_VAR 0 16
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 35
48580: PUSH
48581: LD_INT 11
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 35
48590: PUSH
48591: LD_INT 30
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 91
48605: PUSH
48606: LD_VAR 0 1
48610: PUSH
48611: LD_INT 18
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: PPUSH
48624: CALL_OW 69
48628: NOT
48629: PUSH
48630: LD_INT 22
48632: PUSH
48633: LD_VAR 0 16
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 30
48647: PUSH
48648: LD_INT 32
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 30
48657: PUSH
48658: LD_INT 33
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 91
48672: PUSH
48673: LD_VAR 0 1
48677: PUSH
48678: LD_INT 12
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: PPUSH
48694: CALL_OW 69
48698: PUSH
48699: LD_INT 2
48701: GREATER
48702: AND
48703: IFFALSE 48726
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48705: LD_ADDR_VAR 0 18
48709: PUSH
48710: LD_INT 11
48712: PUSH
48713: LD_INT 30
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_VAR 0 12
48724: ARRAY
48725: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48726: LD_VAR 0 18
48730: NOT
48731: PUSH
48732: LD_INT 40
48734: PPUSH
48735: LD_VAR 0 16
48739: PPUSH
48740: CALL_OW 321
48744: PUSH
48745: LD_INT 2
48747: EQUAL
48748: AND
48749: PUSH
48750: LD_INT 7
48752: PUSH
48753: LD_VAR 0 5
48757: IN
48758: PUSH
48759: LD_INT 28
48761: PUSH
48762: LD_VAR 0 5
48766: IN
48767: OR
48768: PUSH
48769: LD_INT 45
48771: PUSH
48772: LD_VAR 0 5
48776: IN
48777: OR
48778: AND
48779: IFFALSE 49033
// begin hex := GetHexInfo ( x , y ) ;
48781: LD_ADDR_VAR 0 4
48785: PUSH
48786: LD_VAR 0 10
48790: PPUSH
48791: LD_VAR 0 11
48795: PPUSH
48796: CALL_OW 546
48800: ST_TO_ADDR
// if hex [ 1 ] then
48801: LD_VAR 0 4
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: IFFALSE 48813
// exit ;
48811: GO 49216
// height := hex [ 2 ] ;
48813: LD_ADDR_VAR 0 15
48817: PUSH
48818: LD_VAR 0 4
48822: PUSH
48823: LD_INT 2
48825: ARRAY
48826: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48827: LD_ADDR_VAR 0 14
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// for i in tmp do
48850: LD_ADDR_VAR 0 8
48854: PUSH
48855: LD_VAR 0 14
48859: PUSH
48860: FOR_IN
48861: IFFALSE 49031
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48863: LD_ADDR_VAR 0 9
48867: PUSH
48868: LD_VAR 0 10
48872: PPUSH
48873: LD_VAR 0 8
48877: PPUSH
48878: LD_INT 5
48880: PPUSH
48881: CALL_OW 272
48885: PUSH
48886: LD_VAR 0 11
48890: PPUSH
48891: LD_VAR 0 8
48895: PPUSH
48896: LD_INT 5
48898: PPUSH
48899: CALL_OW 273
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48908: LD_VAR 0 9
48912: PUSH
48913: LD_INT 1
48915: ARRAY
48916: PPUSH
48917: LD_VAR 0 9
48921: PUSH
48922: LD_INT 2
48924: ARRAY
48925: PPUSH
48926: CALL_OW 488
48930: IFFALSE 49029
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48932: LD_ADDR_VAR 0 4
48936: PUSH
48937: LD_VAR 0 9
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PPUSH
48946: LD_VAR 0 9
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PPUSH
48955: CALL_OW 546
48959: ST_TO_ADDR
// if hex [ 1 ] then
48960: LD_VAR 0 4
48964: PUSH
48965: LD_INT 1
48967: ARRAY
48968: IFFALSE 48972
// continue ;
48970: GO 48860
// h := hex [ 2 ] ;
48972: LD_ADDR_VAR 0 13
48976: PUSH
48977: LD_VAR 0 4
48981: PUSH
48982: LD_INT 2
48984: ARRAY
48985: ST_TO_ADDR
// if h + 7 < height then
48986: LD_VAR 0 13
48990: PUSH
48991: LD_INT 7
48993: PLUS
48994: PUSH
48995: LD_VAR 0 15
48999: LESS
49000: IFFALSE 49029
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49002: LD_ADDR_VAR 0 18
49006: PUSH
49007: LD_INT 7
49009: PUSH
49010: LD_INT 28
49012: PUSH
49013: LD_INT 45
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: PUSH
49021: LD_VAR 0 12
49025: ARRAY
49026: ST_TO_ADDR
// break ;
49027: GO 49031
// end ; end ; end ;
49029: GO 48860
49031: POP
49032: POP
// end ; if not weapon then
49033: LD_VAR 0 18
49037: NOT
49038: IFFALSE 49098
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49040: LD_ADDR_VAR 0 5
49044: PUSH
49045: LD_VAR 0 5
49049: PUSH
49050: LD_INT 11
49052: PUSH
49053: LD_INT 30
49055: PUSH
49056: LD_INT 49
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: DIFF
49064: ST_TO_ADDR
// if not list then
49065: LD_VAR 0 5
49069: NOT
49070: IFFALSE 49074
// exit ;
49072: GO 49216
// weapon := list [ rand ( 1 , list ) ] ;
49074: LD_ADDR_VAR 0 18
49078: PUSH
49079: LD_VAR 0 5
49083: PUSH
49084: LD_INT 1
49086: PPUSH
49087: LD_VAR 0 5
49091: PPUSH
49092: CALL_OW 12
49096: ARRAY
49097: ST_TO_ADDR
// end ; if weapon then
49098: LD_VAR 0 18
49102: IFFALSE 49216
// begin tmp := CostOfWeapon ( weapon ) ;
49104: LD_ADDR_VAR 0 14
49108: PUSH
49109: LD_VAR 0 18
49113: PPUSH
49114: CALL_OW 451
49118: ST_TO_ADDR
// j := GetBase ( tower ) ;
49119: LD_ADDR_VAR 0 9
49123: PUSH
49124: LD_VAR 0 1
49128: PPUSH
49129: CALL_OW 274
49133: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49134: LD_VAR 0 9
49138: PPUSH
49139: LD_INT 1
49141: PPUSH
49142: CALL_OW 275
49146: PUSH
49147: LD_VAR 0 14
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: GREATEREQUAL
49156: PUSH
49157: LD_VAR 0 9
49161: PPUSH
49162: LD_INT 2
49164: PPUSH
49165: CALL_OW 275
49169: PUSH
49170: LD_VAR 0 14
49174: PUSH
49175: LD_INT 2
49177: ARRAY
49178: GREATEREQUAL
49179: AND
49180: PUSH
49181: LD_VAR 0 9
49185: PPUSH
49186: LD_INT 3
49188: PPUSH
49189: CALL_OW 275
49193: PUSH
49194: LD_VAR 0 14
49198: PUSH
49199: LD_INT 3
49201: ARRAY
49202: GREATEREQUAL
49203: AND
49204: IFFALSE 49216
// result := weapon ;
49206: LD_ADDR_VAR 0 3
49210: PUSH
49211: LD_VAR 0 18
49215: ST_TO_ADDR
// end ; end ;
49216: LD_VAR 0 3
49220: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49221: LD_INT 0
49223: PPUSH
49224: PPUSH
// result := true ;
49225: LD_ADDR_VAR 0 3
49229: PUSH
49230: LD_INT 1
49232: ST_TO_ADDR
// if array1 = array2 then
49233: LD_VAR 0 1
49237: PUSH
49238: LD_VAR 0 2
49242: EQUAL
49243: IFFALSE 49303
// begin for i = 1 to array1 do
49245: LD_ADDR_VAR 0 4
49249: PUSH
49250: DOUBLE
49251: LD_INT 1
49253: DEC
49254: ST_TO_ADDR
49255: LD_VAR 0 1
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49299
// if array1 [ i ] <> array2 [ i ] then
49263: LD_VAR 0 1
49267: PUSH
49268: LD_VAR 0 4
49272: ARRAY
49273: PUSH
49274: LD_VAR 0 2
49278: PUSH
49279: LD_VAR 0 4
49283: ARRAY
49284: NONEQUAL
49285: IFFALSE 49297
// begin result := false ;
49287: LD_ADDR_VAR 0 3
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// break ;
49295: GO 49299
// end ;
49297: GO 49260
49299: POP
49300: POP
// end else
49301: GO 49311
// result := false ;
49303: LD_ADDR_VAR 0 3
49307: PUSH
49308: LD_INT 0
49310: ST_TO_ADDR
// end ;
49311: LD_VAR 0 3
49315: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49316: LD_INT 0
49318: PPUSH
49319: PPUSH
// if not array1 or not array2 then
49320: LD_VAR 0 1
49324: NOT
49325: PUSH
49326: LD_VAR 0 2
49330: NOT
49331: OR
49332: IFFALSE 49336
// exit ;
49334: GO 49400
// result := true ;
49336: LD_ADDR_VAR 0 3
49340: PUSH
49341: LD_INT 1
49343: ST_TO_ADDR
// for i = 1 to array1 do
49344: LD_ADDR_VAR 0 4
49348: PUSH
49349: DOUBLE
49350: LD_INT 1
49352: DEC
49353: ST_TO_ADDR
49354: LD_VAR 0 1
49358: PUSH
49359: FOR_TO
49360: IFFALSE 49398
// if array1 [ i ] <> array2 [ i ] then
49362: LD_VAR 0 1
49366: PUSH
49367: LD_VAR 0 4
49371: ARRAY
49372: PUSH
49373: LD_VAR 0 2
49377: PUSH
49378: LD_VAR 0 4
49382: ARRAY
49383: NONEQUAL
49384: IFFALSE 49396
// begin result := false ;
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_INT 0
49393: ST_TO_ADDR
// break ;
49394: GO 49398
// end ;
49396: GO 49359
49398: POP
49399: POP
// end ;
49400: LD_VAR 0 3
49404: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49405: LD_INT 0
49407: PPUSH
49408: PPUSH
49409: PPUSH
// pom := GetBase ( fac ) ;
49410: LD_ADDR_VAR 0 5
49414: PUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 274
49424: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49425: LD_ADDR_VAR 0 4
49429: PUSH
49430: LD_VAR 0 2
49434: PUSH
49435: LD_INT 1
49437: ARRAY
49438: PPUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_INT 2
49446: ARRAY
49447: PPUSH
49448: LD_VAR 0 2
49452: PUSH
49453: LD_INT 3
49455: ARRAY
49456: PPUSH
49457: LD_VAR 0 2
49461: PUSH
49462: LD_INT 4
49464: ARRAY
49465: PPUSH
49466: CALL_OW 449
49470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_VAR 0 5
49480: PPUSH
49481: LD_INT 1
49483: PPUSH
49484: CALL_OW 275
49488: PUSH
49489: LD_VAR 0 4
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: GREATEREQUAL
49498: PUSH
49499: LD_VAR 0 5
49503: PPUSH
49504: LD_INT 2
49506: PPUSH
49507: CALL_OW 275
49511: PUSH
49512: LD_VAR 0 4
49516: PUSH
49517: LD_INT 2
49519: ARRAY
49520: GREATEREQUAL
49521: AND
49522: PUSH
49523: LD_VAR 0 5
49527: PPUSH
49528: LD_INT 3
49530: PPUSH
49531: CALL_OW 275
49535: PUSH
49536: LD_VAR 0 4
49540: PUSH
49541: LD_INT 3
49543: ARRAY
49544: GREATEREQUAL
49545: AND
49546: ST_TO_ADDR
// end ;
49547: LD_VAR 0 3
49551: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49552: LD_INT 0
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
// pom := GetBase ( building ) ;
49558: LD_ADDR_VAR 0 3
49562: PUSH
49563: LD_VAR 0 1
49567: PPUSH
49568: CALL_OW 274
49572: ST_TO_ADDR
// if not pom then
49573: LD_VAR 0 3
49577: NOT
49578: IFFALSE 49582
// exit ;
49580: GO 49752
// btype := GetBType ( building ) ;
49582: LD_ADDR_VAR 0 5
49586: PUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: CALL_OW 266
49596: ST_TO_ADDR
// if btype = b_armoury then
49597: LD_VAR 0 5
49601: PUSH
49602: LD_INT 4
49604: EQUAL
49605: IFFALSE 49615
// btype := b_barracks ;
49607: LD_ADDR_VAR 0 5
49611: PUSH
49612: LD_INT 5
49614: ST_TO_ADDR
// if btype = b_depot then
49615: LD_VAR 0 5
49619: PUSH
49620: LD_INT 0
49622: EQUAL
49623: IFFALSE 49633
// btype := b_warehouse ;
49625: LD_ADDR_VAR 0 5
49629: PUSH
49630: LD_INT 1
49632: ST_TO_ADDR
// if btype = b_workshop then
49633: LD_VAR 0 5
49637: PUSH
49638: LD_INT 2
49640: EQUAL
49641: IFFALSE 49651
// btype := b_factory ;
49643: LD_ADDR_VAR 0 5
49647: PUSH
49648: LD_INT 3
49650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49651: LD_ADDR_VAR 0 4
49655: PUSH
49656: LD_VAR 0 5
49660: PPUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: CALL_OW 248
49670: PPUSH
49671: CALL_OW 450
49675: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49676: LD_ADDR_VAR 0 2
49680: PUSH
49681: LD_VAR 0 3
49685: PPUSH
49686: LD_INT 1
49688: PPUSH
49689: CALL_OW 275
49693: PUSH
49694: LD_VAR 0 4
49698: PUSH
49699: LD_INT 1
49701: ARRAY
49702: GREATEREQUAL
49703: PUSH
49704: LD_VAR 0 3
49708: PPUSH
49709: LD_INT 2
49711: PPUSH
49712: CALL_OW 275
49716: PUSH
49717: LD_VAR 0 4
49721: PUSH
49722: LD_INT 2
49724: ARRAY
49725: GREATEREQUAL
49726: AND
49727: PUSH
49728: LD_VAR 0 3
49732: PPUSH
49733: LD_INT 3
49735: PPUSH
49736: CALL_OW 275
49740: PUSH
49741: LD_VAR 0 4
49745: PUSH
49746: LD_INT 3
49748: ARRAY
49749: GREATEREQUAL
49750: AND
49751: ST_TO_ADDR
// end ;
49752: LD_VAR 0 2
49756: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49757: LD_INT 0
49759: PPUSH
49760: PPUSH
49761: PPUSH
// pom := GetBase ( building ) ;
49762: LD_ADDR_VAR 0 4
49766: PUSH
49767: LD_VAR 0 1
49771: PPUSH
49772: CALL_OW 274
49776: ST_TO_ADDR
// if not pom then
49777: LD_VAR 0 4
49781: NOT
49782: IFFALSE 49786
// exit ;
49784: GO 49887
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49786: LD_ADDR_VAR 0 5
49790: PUSH
49791: LD_VAR 0 2
49795: PPUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 248
49805: PPUSH
49806: CALL_OW 450
49810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49811: LD_ADDR_VAR 0 3
49815: PUSH
49816: LD_VAR 0 4
49820: PPUSH
49821: LD_INT 1
49823: PPUSH
49824: CALL_OW 275
49828: PUSH
49829: LD_VAR 0 5
49833: PUSH
49834: LD_INT 1
49836: ARRAY
49837: GREATEREQUAL
49838: PUSH
49839: LD_VAR 0 4
49843: PPUSH
49844: LD_INT 2
49846: PPUSH
49847: CALL_OW 275
49851: PUSH
49852: LD_VAR 0 5
49856: PUSH
49857: LD_INT 2
49859: ARRAY
49860: GREATEREQUAL
49861: AND
49862: PUSH
49863: LD_VAR 0 4
49867: PPUSH
49868: LD_INT 3
49870: PPUSH
49871: CALL_OW 275
49875: PUSH
49876: LD_VAR 0 5
49880: PUSH
49881: LD_INT 3
49883: ARRAY
49884: GREATEREQUAL
49885: AND
49886: ST_TO_ADDR
// end ;
49887: LD_VAR 0 3
49891: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49892: LD_INT 0
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
// result := false ;
49905: LD_ADDR_VAR 0 8
49909: PUSH
49910: LD_INT 0
49912: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49913: LD_VAR 0 5
49917: NOT
49918: PUSH
49919: LD_VAR 0 1
49923: NOT
49924: OR
49925: PUSH
49926: LD_VAR 0 2
49930: NOT
49931: OR
49932: PUSH
49933: LD_VAR 0 3
49937: NOT
49938: OR
49939: IFFALSE 49943
// exit ;
49941: GO 50757
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49943: LD_ADDR_VAR 0 14
49947: PUSH
49948: LD_VAR 0 1
49952: PPUSH
49953: LD_VAR 0 2
49957: PPUSH
49958: LD_VAR 0 3
49962: PPUSH
49963: LD_VAR 0 4
49967: PPUSH
49968: LD_VAR 0 5
49972: PUSH
49973: LD_INT 1
49975: ARRAY
49976: PPUSH
49977: CALL_OW 248
49981: PPUSH
49982: LD_INT 0
49984: PPUSH
49985: CALL 51994 0 6
49989: ST_TO_ADDR
// if not hexes then
49990: LD_VAR 0 14
49994: NOT
49995: IFFALSE 49999
// exit ;
49997: GO 50757
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49999: LD_ADDR_VAR 0 17
50003: PUSH
50004: LD_VAR 0 5
50008: PPUSH
50009: LD_INT 22
50011: PUSH
50012: LD_VAR 0 13
50016: PPUSH
50017: CALL_OW 255
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 30
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 30
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PPUSH
50058: CALL_OW 72
50062: ST_TO_ADDR
// for i = 1 to hexes do
50063: LD_ADDR_VAR 0 9
50067: PUSH
50068: DOUBLE
50069: LD_INT 1
50071: DEC
50072: ST_TO_ADDR
50073: LD_VAR 0 14
50077: PUSH
50078: FOR_TO
50079: IFFALSE 50755
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50081: LD_ADDR_VAR 0 13
50085: PUSH
50086: LD_VAR 0 14
50090: PUSH
50091: LD_VAR 0 9
50095: ARRAY
50096: PUSH
50097: LD_INT 1
50099: ARRAY
50100: PPUSH
50101: LD_VAR 0 14
50105: PUSH
50106: LD_VAR 0 9
50110: ARRAY
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: PPUSH
50116: CALL_OW 428
50120: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50121: LD_VAR 0 14
50125: PUSH
50126: LD_VAR 0 9
50130: ARRAY
50131: PUSH
50132: LD_INT 1
50134: ARRAY
50135: PPUSH
50136: LD_VAR 0 14
50140: PUSH
50141: LD_VAR 0 9
50145: ARRAY
50146: PUSH
50147: LD_INT 2
50149: ARRAY
50150: PPUSH
50151: CALL_OW 351
50155: PUSH
50156: LD_VAR 0 14
50160: PUSH
50161: LD_VAR 0 9
50165: ARRAY
50166: PUSH
50167: LD_INT 1
50169: ARRAY
50170: PPUSH
50171: LD_VAR 0 14
50175: PUSH
50176: LD_VAR 0 9
50180: ARRAY
50181: PUSH
50182: LD_INT 2
50184: ARRAY
50185: PPUSH
50186: CALL_OW 488
50190: NOT
50191: OR
50192: PUSH
50193: LD_VAR 0 13
50197: PPUSH
50198: CALL_OW 247
50202: PUSH
50203: LD_INT 3
50205: EQUAL
50206: OR
50207: IFFALSE 50213
// exit ;
50209: POP
50210: POP
50211: GO 50757
// if not tmp then
50213: LD_VAR 0 13
50217: NOT
50218: IFFALSE 50222
// continue ;
50220: GO 50078
// result := true ;
50222: LD_ADDR_VAR 0 8
50226: PUSH
50227: LD_INT 1
50229: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50230: LD_VAR 0 6
50234: PUSH
50235: LD_VAR 0 13
50239: PPUSH
50240: CALL_OW 247
50244: PUSH
50245: LD_INT 2
50247: EQUAL
50248: AND
50249: PUSH
50250: LD_VAR 0 13
50254: PPUSH
50255: CALL_OW 263
50259: PUSH
50260: LD_INT 1
50262: EQUAL
50263: AND
50264: IFFALSE 50428
// begin if IsDrivenBy ( tmp ) then
50266: LD_VAR 0 13
50270: PPUSH
50271: CALL_OW 311
50275: IFFALSE 50279
// continue ;
50277: GO 50078
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50279: LD_VAR 0 6
50283: PPUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 60
50289: PUSH
50290: EMPTY
50291: LIST
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: LD_INT 55
50302: PUSH
50303: EMPTY
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PPUSH
50314: CALL_OW 72
50318: IFFALSE 50426
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50320: LD_ADDR_VAR 0 18
50324: PUSH
50325: LD_VAR 0 6
50329: PPUSH
50330: LD_INT 3
50332: PUSH
50333: LD_INT 60
50335: PUSH
50336: EMPTY
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 55
50348: PUSH
50349: EMPTY
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PPUSH
50360: CALL_OW 72
50364: PUSH
50365: LD_INT 1
50367: ARRAY
50368: ST_TO_ADDR
// if IsInUnit ( driver ) then
50369: LD_VAR 0 18
50373: PPUSH
50374: CALL_OW 310
50378: IFFALSE 50389
// ComExit ( driver ) ;
50380: LD_VAR 0 18
50384: PPUSH
50385: CALL 75178 0 1
// AddComEnterUnit ( driver , tmp ) ;
50389: LD_VAR 0 18
50393: PPUSH
50394: LD_VAR 0 13
50398: PPUSH
50399: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50403: LD_VAR 0 18
50407: PPUSH
50408: LD_VAR 0 7
50412: PPUSH
50413: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50417: LD_VAR 0 18
50421: PPUSH
50422: CALL_OW 181
// end ; continue ;
50426: GO 50078
// end ; if not cleaners or not tmp in cleaners then
50428: LD_VAR 0 6
50432: NOT
50433: PUSH
50434: LD_VAR 0 13
50438: PUSH
50439: LD_VAR 0 6
50443: IN
50444: NOT
50445: OR
50446: IFFALSE 50753
// begin if dep then
50448: LD_VAR 0 17
50452: IFFALSE 50588
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50454: LD_ADDR_VAR 0 16
50458: PUSH
50459: LD_VAR 0 17
50463: PUSH
50464: LD_INT 1
50466: ARRAY
50467: PPUSH
50468: CALL_OW 250
50472: PPUSH
50473: LD_VAR 0 17
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: PPUSH
50482: CALL_OW 254
50486: PPUSH
50487: LD_INT 5
50489: PPUSH
50490: CALL_OW 272
50494: PUSH
50495: LD_VAR 0 17
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: PPUSH
50504: CALL_OW 251
50508: PPUSH
50509: LD_VAR 0 17
50513: PUSH
50514: LD_INT 1
50516: ARRAY
50517: PPUSH
50518: CALL_OW 254
50522: PPUSH
50523: LD_INT 5
50525: PPUSH
50526: CALL_OW 273
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50535: LD_VAR 0 16
50539: PUSH
50540: LD_INT 1
50542: ARRAY
50543: PPUSH
50544: LD_VAR 0 16
50548: PUSH
50549: LD_INT 2
50551: ARRAY
50552: PPUSH
50553: CALL_OW 488
50557: IFFALSE 50588
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50559: LD_VAR 0 13
50563: PPUSH
50564: LD_VAR 0 16
50568: PUSH
50569: LD_INT 1
50571: ARRAY
50572: PPUSH
50573: LD_VAR 0 16
50577: PUSH
50578: LD_INT 2
50580: ARRAY
50581: PPUSH
50582: CALL_OW 111
// continue ;
50586: GO 50078
// end ; end ; r := GetDir ( tmp ) ;
50588: LD_ADDR_VAR 0 15
50592: PUSH
50593: LD_VAR 0 13
50597: PPUSH
50598: CALL_OW 254
50602: ST_TO_ADDR
// if r = 5 then
50603: LD_VAR 0 15
50607: PUSH
50608: LD_INT 5
50610: EQUAL
50611: IFFALSE 50621
// r := 0 ;
50613: LD_ADDR_VAR 0 15
50617: PUSH
50618: LD_INT 0
50620: ST_TO_ADDR
// for j = r to 5 do
50621: LD_ADDR_VAR 0 10
50625: PUSH
50626: DOUBLE
50627: LD_VAR 0 15
50631: DEC
50632: ST_TO_ADDR
50633: LD_INT 5
50635: PUSH
50636: FOR_TO
50637: IFFALSE 50751
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50639: LD_ADDR_VAR 0 11
50643: PUSH
50644: LD_VAR 0 13
50648: PPUSH
50649: CALL_OW 250
50653: PPUSH
50654: LD_VAR 0 10
50658: PPUSH
50659: LD_INT 2
50661: PPUSH
50662: CALL_OW 272
50666: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50667: LD_ADDR_VAR 0 12
50671: PUSH
50672: LD_VAR 0 13
50676: PPUSH
50677: CALL_OW 251
50681: PPUSH
50682: LD_VAR 0 10
50686: PPUSH
50687: LD_INT 2
50689: PPUSH
50690: CALL_OW 273
50694: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50695: LD_VAR 0 11
50699: PPUSH
50700: LD_VAR 0 12
50704: PPUSH
50705: CALL_OW 488
50709: PUSH
50710: LD_VAR 0 11
50714: PPUSH
50715: LD_VAR 0 12
50719: PPUSH
50720: CALL_OW 428
50724: NOT
50725: AND
50726: IFFALSE 50749
// begin ComMoveXY ( tmp , _x , _y ) ;
50728: LD_VAR 0 13
50732: PPUSH
50733: LD_VAR 0 11
50737: PPUSH
50738: LD_VAR 0 12
50742: PPUSH
50743: CALL_OW 111
// break ;
50747: GO 50751
// end ; end ;
50749: GO 50636
50751: POP
50752: POP
// end ; end ;
50753: GO 50078
50755: POP
50756: POP
// end ;
50757: LD_VAR 0 8
50761: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50762: LD_INT 0
50764: PPUSH
// result := true ;
50765: LD_ADDR_VAR 0 3
50769: PUSH
50770: LD_INT 1
50772: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50773: LD_VAR 0 2
50777: PUSH
50778: LD_INT 24
50780: DOUBLE
50781: EQUAL
50782: IFTRUE 50792
50784: LD_INT 33
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50792
50790: GO 50817
50792: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50793: LD_ADDR_VAR 0 3
50797: PUSH
50798: LD_INT 32
50800: PPUSH
50801: LD_VAR 0 1
50805: PPUSH
50806: CALL_OW 321
50810: PUSH
50811: LD_INT 2
50813: EQUAL
50814: ST_TO_ADDR
50815: GO 51137
50817: LD_INT 20
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50825
50823: GO 50850
50825: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50826: LD_ADDR_VAR 0 3
50830: PUSH
50831: LD_INT 6
50833: PPUSH
50834: LD_VAR 0 1
50838: PPUSH
50839: CALL_OW 321
50843: PUSH
50844: LD_INT 2
50846: EQUAL
50847: ST_TO_ADDR
50848: GO 51137
50850: LD_INT 22
50852: DOUBLE
50853: EQUAL
50854: IFTRUE 50864
50856: LD_INT 36
50858: DOUBLE
50859: EQUAL
50860: IFTRUE 50864
50862: GO 50889
50864: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50865: LD_ADDR_VAR 0 3
50869: PUSH
50870: LD_INT 15
50872: PPUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 321
50882: PUSH
50883: LD_INT 2
50885: EQUAL
50886: ST_TO_ADDR
50887: GO 51137
50889: LD_INT 30
50891: DOUBLE
50892: EQUAL
50893: IFTRUE 50897
50895: GO 50922
50897: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50898: LD_ADDR_VAR 0 3
50902: PUSH
50903: LD_INT 20
50905: PPUSH
50906: LD_VAR 0 1
50910: PPUSH
50911: CALL_OW 321
50915: PUSH
50916: LD_INT 2
50918: EQUAL
50919: ST_TO_ADDR
50920: GO 51137
50922: LD_INT 28
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50936
50928: LD_INT 21
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50936
50934: GO 50961
50936: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50937: LD_ADDR_VAR 0 3
50941: PUSH
50942: LD_INT 21
50944: PPUSH
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 321
50954: PUSH
50955: LD_INT 2
50957: EQUAL
50958: ST_TO_ADDR
50959: GO 51137
50961: LD_INT 16
50963: DOUBLE
50964: EQUAL
50965: IFTRUE 50969
50967: GO 50996
50969: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50970: LD_ADDR_VAR 0 3
50974: PUSH
50975: LD_EXP 61
50979: PPUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 321
50989: PUSH
50990: LD_INT 2
50992: EQUAL
50993: ST_TO_ADDR
50994: GO 51137
50996: LD_INT 19
50998: DOUBLE
50999: EQUAL
51000: IFTRUE 51010
51002: LD_INT 23
51004: DOUBLE
51005: EQUAL
51006: IFTRUE 51010
51008: GO 51037
51010: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51011: LD_ADDR_VAR 0 3
51015: PUSH
51016: LD_EXP 60
51020: PPUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 321
51030: PUSH
51031: LD_INT 2
51033: EQUAL
51034: ST_TO_ADDR
51035: GO 51137
51037: LD_INT 17
51039: DOUBLE
51040: EQUAL
51041: IFTRUE 51045
51043: GO 51070
51045: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51046: LD_ADDR_VAR 0 3
51050: PUSH
51051: LD_INT 39
51053: PPUSH
51054: LD_VAR 0 1
51058: PPUSH
51059: CALL_OW 321
51063: PUSH
51064: LD_INT 2
51066: EQUAL
51067: ST_TO_ADDR
51068: GO 51137
51070: LD_INT 18
51072: DOUBLE
51073: EQUAL
51074: IFTRUE 51078
51076: GO 51103
51078: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51079: LD_ADDR_VAR 0 3
51083: PUSH
51084: LD_INT 40
51086: PPUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 321
51096: PUSH
51097: LD_INT 2
51099: EQUAL
51100: ST_TO_ADDR
51101: GO 51137
51103: LD_INT 27
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51111
51109: GO 51136
51111: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51112: LD_ADDR_VAR 0 3
51116: PUSH
51117: LD_INT 35
51119: PPUSH
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 321
51129: PUSH
51130: LD_INT 2
51132: EQUAL
51133: ST_TO_ADDR
51134: GO 51137
51136: POP
// end ;
51137: LD_VAR 0 3
51141: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
51146: PPUSH
51147: PPUSH
51148: PPUSH
51149: PPUSH
51150: PPUSH
51151: PPUSH
51152: PPUSH
51153: PPUSH
51154: PPUSH
// result := false ;
51155: LD_ADDR_VAR 0 6
51159: PUSH
51160: LD_INT 0
51162: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51163: LD_VAR 0 1
51167: NOT
51168: PUSH
51169: LD_VAR 0 1
51173: PPUSH
51174: CALL_OW 266
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: IN
51189: NOT
51190: OR
51191: PUSH
51192: LD_VAR 0 2
51196: NOT
51197: OR
51198: PUSH
51199: LD_VAR 0 5
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: IN
51230: NOT
51231: OR
51232: PUSH
51233: LD_VAR 0 3
51237: PPUSH
51238: LD_VAR 0 4
51242: PPUSH
51243: CALL_OW 488
51247: NOT
51248: OR
51249: IFFALSE 51253
// exit ;
51251: GO 51989
// side := GetSide ( depot ) ;
51253: LD_ADDR_VAR 0 9
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 255
51267: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51268: LD_VAR 0 9
51272: PPUSH
51273: LD_VAR 0 2
51277: PPUSH
51278: CALL 50762 0 2
51282: NOT
51283: IFFALSE 51287
// exit ;
51285: GO 51989
// pom := GetBase ( depot ) ;
51287: LD_ADDR_VAR 0 10
51291: PUSH
51292: LD_VAR 0 1
51296: PPUSH
51297: CALL_OW 274
51301: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51302: LD_ADDR_VAR 0 11
51306: PUSH
51307: LD_VAR 0 2
51311: PPUSH
51312: LD_VAR 0 1
51316: PPUSH
51317: CALL_OW 248
51321: PPUSH
51322: CALL_OW 450
51326: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51327: LD_VAR 0 10
51331: PPUSH
51332: LD_INT 1
51334: PPUSH
51335: CALL_OW 275
51339: PUSH
51340: LD_VAR 0 11
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: GREATEREQUAL
51349: PUSH
51350: LD_VAR 0 10
51354: PPUSH
51355: LD_INT 2
51357: PPUSH
51358: CALL_OW 275
51362: PUSH
51363: LD_VAR 0 11
51367: PUSH
51368: LD_INT 2
51370: ARRAY
51371: GREATEREQUAL
51372: AND
51373: PUSH
51374: LD_VAR 0 10
51378: PPUSH
51379: LD_INT 3
51381: PPUSH
51382: CALL_OW 275
51386: PUSH
51387: LD_VAR 0 11
51391: PUSH
51392: LD_INT 3
51394: ARRAY
51395: GREATEREQUAL
51396: AND
51397: NOT
51398: IFFALSE 51402
// exit ;
51400: GO 51989
// if GetBType ( depot ) = b_depot then
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 266
51411: PUSH
51412: LD_INT 0
51414: EQUAL
51415: IFFALSE 51427
// dist := 28 else
51417: LD_ADDR_VAR 0 14
51421: PUSH
51422: LD_INT 28
51424: ST_TO_ADDR
51425: GO 51435
// dist := 36 ;
51427: LD_ADDR_VAR 0 14
51431: PUSH
51432: LD_INT 36
51434: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51435: LD_VAR 0 1
51439: PPUSH
51440: LD_VAR 0 3
51444: PPUSH
51445: LD_VAR 0 4
51449: PPUSH
51450: CALL_OW 297
51454: PUSH
51455: LD_VAR 0 14
51459: GREATER
51460: IFFALSE 51464
// exit ;
51462: GO 51989
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51464: LD_ADDR_VAR 0 12
51468: PUSH
51469: LD_VAR 0 2
51473: PPUSH
51474: LD_VAR 0 3
51478: PPUSH
51479: LD_VAR 0 4
51483: PPUSH
51484: LD_VAR 0 5
51488: PPUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 248
51498: PPUSH
51499: LD_INT 0
51501: PPUSH
51502: CALL 51994 0 6
51506: ST_TO_ADDR
// if not hexes then
51507: LD_VAR 0 12
51511: NOT
51512: IFFALSE 51516
// exit ;
51514: GO 51989
// hex := GetHexInfo ( x , y ) ;
51516: LD_ADDR_VAR 0 15
51520: PUSH
51521: LD_VAR 0 3
51525: PPUSH
51526: LD_VAR 0 4
51530: PPUSH
51531: CALL_OW 546
51535: ST_TO_ADDR
// if hex [ 1 ] then
51536: LD_VAR 0 15
51540: PUSH
51541: LD_INT 1
51543: ARRAY
51544: IFFALSE 51548
// exit ;
51546: GO 51989
// height := hex [ 2 ] ;
51548: LD_ADDR_VAR 0 13
51552: PUSH
51553: LD_VAR 0 15
51557: PUSH
51558: LD_INT 2
51560: ARRAY
51561: ST_TO_ADDR
// for i = 1 to hexes do
51562: LD_ADDR_VAR 0 7
51566: PUSH
51567: DOUBLE
51568: LD_INT 1
51570: DEC
51571: ST_TO_ADDR
51572: LD_VAR 0 12
51576: PUSH
51577: FOR_TO
51578: IFFALSE 51908
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51580: LD_VAR 0 12
51584: PUSH
51585: LD_VAR 0 7
51589: ARRAY
51590: PUSH
51591: LD_INT 1
51593: ARRAY
51594: PPUSH
51595: LD_VAR 0 12
51599: PUSH
51600: LD_VAR 0 7
51604: ARRAY
51605: PUSH
51606: LD_INT 2
51608: ARRAY
51609: PPUSH
51610: CALL_OW 488
51614: NOT
51615: PUSH
51616: LD_VAR 0 12
51620: PUSH
51621: LD_VAR 0 7
51625: ARRAY
51626: PUSH
51627: LD_INT 1
51629: ARRAY
51630: PPUSH
51631: LD_VAR 0 12
51635: PUSH
51636: LD_VAR 0 7
51640: ARRAY
51641: PUSH
51642: LD_INT 2
51644: ARRAY
51645: PPUSH
51646: CALL_OW 428
51650: PUSH
51651: LD_INT 0
51653: GREATER
51654: OR
51655: PUSH
51656: LD_VAR 0 12
51660: PUSH
51661: LD_VAR 0 7
51665: ARRAY
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: PPUSH
51671: LD_VAR 0 12
51675: PUSH
51676: LD_VAR 0 7
51680: ARRAY
51681: PUSH
51682: LD_INT 2
51684: ARRAY
51685: PPUSH
51686: CALL_OW 351
51690: OR
51691: IFFALSE 51697
// exit ;
51693: POP
51694: POP
51695: GO 51989
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51697: LD_ADDR_VAR 0 8
51701: PUSH
51702: LD_VAR 0 12
51706: PUSH
51707: LD_VAR 0 7
51711: ARRAY
51712: PUSH
51713: LD_INT 1
51715: ARRAY
51716: PPUSH
51717: LD_VAR 0 12
51721: PUSH
51722: LD_VAR 0 7
51726: ARRAY
51727: PUSH
51728: LD_INT 2
51730: ARRAY
51731: PPUSH
51732: CALL_OW 546
51736: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51737: LD_VAR 0 8
51741: PUSH
51742: LD_INT 1
51744: ARRAY
51745: PUSH
51746: LD_VAR 0 8
51750: PUSH
51751: LD_INT 2
51753: ARRAY
51754: PUSH
51755: LD_VAR 0 13
51759: PUSH
51760: LD_INT 2
51762: PLUS
51763: GREATER
51764: OR
51765: PUSH
51766: LD_VAR 0 8
51770: PUSH
51771: LD_INT 2
51773: ARRAY
51774: PUSH
51775: LD_VAR 0 13
51779: PUSH
51780: LD_INT 2
51782: MINUS
51783: LESS
51784: OR
51785: PUSH
51786: LD_VAR 0 8
51790: PUSH
51791: LD_INT 3
51793: ARRAY
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 8
51800: PUSH
51801: LD_INT 9
51803: PUSH
51804: LD_INT 10
51806: PUSH
51807: LD_INT 11
51809: PUSH
51810: LD_INT 12
51812: PUSH
51813: LD_INT 13
51815: PUSH
51816: LD_INT 16
51818: PUSH
51819: LD_INT 17
51821: PUSH
51822: LD_INT 18
51824: PUSH
51825: LD_INT 19
51827: PUSH
51828: LD_INT 20
51830: PUSH
51831: LD_INT 21
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: IN
51849: NOT
51850: OR
51851: PUSH
51852: LD_VAR 0 8
51856: PUSH
51857: LD_INT 5
51859: ARRAY
51860: NOT
51861: OR
51862: PUSH
51863: LD_VAR 0 8
51867: PUSH
51868: LD_INT 6
51870: ARRAY
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 7
51880: PUSH
51881: LD_INT 9
51883: PUSH
51884: LD_INT 10
51886: PUSH
51887: LD_INT 11
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: IN
51898: NOT
51899: OR
51900: IFFALSE 51906
// exit ;
51902: POP
51903: POP
51904: GO 51989
// end ;
51906: GO 51577
51908: POP
51909: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51910: LD_VAR 0 9
51914: PPUSH
51915: LD_VAR 0 3
51919: PPUSH
51920: LD_VAR 0 4
51924: PPUSH
51925: LD_INT 20
51927: PPUSH
51928: CALL 43935 0 4
51932: PUSH
51933: LD_INT 4
51935: ARRAY
51936: IFFALSE 51940
// exit ;
51938: GO 51989
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51940: LD_VAR 0 2
51944: PUSH
51945: LD_INT 29
51947: PUSH
51948: LD_INT 30
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: IN
51955: PUSH
51956: LD_VAR 0 3
51960: PPUSH
51961: LD_VAR 0 4
51965: PPUSH
51966: LD_VAR 0 9
51970: PPUSH
51971: CALL_OW 440
51975: NOT
51976: AND
51977: IFFALSE 51981
// exit ;
51979: GO 51989
// result := true ;
51981: LD_ADDR_VAR 0 6
51985: PUSH
51986: LD_INT 1
51988: ST_TO_ADDR
// end ;
51989: LD_VAR 0 6
51993: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51994: LD_INT 0
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
// result = [ ] ;
52054: LD_ADDR_VAR 0 7
52058: PUSH
52059: EMPTY
52060: ST_TO_ADDR
// temp_list = [ ] ;
52061: LD_ADDR_VAR 0 9
52065: PUSH
52066: EMPTY
52067: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52068: LD_VAR 0 4
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: LD_INT 5
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: IN
52099: NOT
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: IN
52116: PUSH
52117: LD_VAR 0 5
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: IN
52136: NOT
52137: AND
52138: OR
52139: IFFALSE 52143
// exit ;
52141: GO 70534
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52143: LD_VAR 0 1
52147: PUSH
52148: LD_INT 6
52150: PUSH
52151: LD_INT 7
52153: PUSH
52154: LD_INT 8
52156: PUSH
52157: LD_INT 13
52159: PUSH
52160: LD_INT 12
52162: PUSH
52163: LD_INT 15
52165: PUSH
52166: LD_INT 11
52168: PUSH
52169: LD_INT 14
52171: PUSH
52172: LD_INT 10
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: IN
52186: IFFALSE 52196
// btype = b_lab ;
52188: LD_ADDR_VAR 0 1
52192: PUSH
52193: LD_INT 6
52195: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52196: LD_VAR 0 6
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: IN
52215: NOT
52216: PUSH
52217: LD_VAR 0 1
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 6
52236: PUSH
52237: LD_INT 36
52239: PUSH
52240: LD_INT 4
52242: PUSH
52243: LD_INT 5
52245: PUSH
52246: LD_INT 31
52248: PUSH
52249: LD_INT 32
52251: PUSH
52252: LD_INT 33
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: IN
52268: NOT
52269: PUSH
52270: LD_VAR 0 6
52274: PUSH
52275: LD_INT 1
52277: EQUAL
52278: AND
52279: OR
52280: PUSH
52281: LD_VAR 0 1
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: IN
52296: NOT
52297: PUSH
52298: LD_VAR 0 6
52302: PUSH
52303: LD_INT 2
52305: EQUAL
52306: AND
52307: OR
52308: IFFALSE 52318
// mode = 0 ;
52310: LD_ADDR_VAR 0 6
52314: PUSH
52315: LD_INT 0
52317: ST_TO_ADDR
// case mode of 0 :
52318: LD_VAR 0 6
52322: PUSH
52323: LD_INT 0
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52331
52329: GO 63784
52331: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52332: LD_ADDR_VAR 0 11
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52525: LD_ADDR_VAR 0 12
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52721: LD_ADDR_VAR 0 13
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52920: LD_ADDR_VAR 0 14
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53116: LD_ADDR_VAR 0 15
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53309: LD_ADDR_VAR 0 16
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53502: LD_ADDR_VAR 0 17
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53732: LD_ADDR_VAR 0 18
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53962: LD_ADDR_VAR 0 19
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54192: LD_ADDR_VAR 0 20
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54422: LD_ADDR_VAR 0 21
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54652: LD_ADDR_VAR 0 22
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54882: LD_ADDR_VAR 0 23
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55162: LD_ADDR_VAR 0 24
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55438: LD_ADDR_VAR 0 25
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55712: LD_ADDR_VAR 0 26
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55988: LD_ADDR_VAR 0 27
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56268: LD_ADDR_VAR 0 28
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56550: LD_ADDR_VAR 0 29
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56829: LD_ADDR_VAR 0 30
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57107: LD_ADDR_VAR 0 31
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57385: LD_ADDR_VAR 0 32
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57663: LD_ADDR_VAR 0 33
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57942: LD_ADDR_VAR 0 34
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58222: LD_ADDR_VAR 0 35
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58334: LD_ADDR_VAR 0 36
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58446: LD_ADDR_VAR 0 37
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58558: LD_ADDR_VAR 0 38
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58670: LD_ADDR_VAR 0 39
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58782: LD_ADDR_VAR 0 40
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58894: LD_ADDR_VAR 0 41
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59244: LD_ADDR_VAR 0 42
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59594: LD_ADDR_VAR 0 43
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59942: LD_ADDR_VAR 0 44
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: NEG
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60292: LD_ADDR_VAR 0 45
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60642: LD_ADDR_VAR 0 46
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60990: LD_ADDR_VAR 0 47
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61141: LD_ADDR_VAR 0 48
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61288: LD_ADDR_VAR 0 49
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61432: LD_ADDR_VAR 0 50
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61576: LD_ADDR_VAR 0 51
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61723: LD_ADDR_VAR 0 52
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61874: LD_ADDR_VAR 0 53
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 2
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: LD_INT 2
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62104: LD_ADDR_VAR 0 54
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62334: LD_ADDR_VAR 0 55
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62564: LD_ADDR_VAR 0 56
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62794: LD_ADDR_VAR 0 57
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 2
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63024: LD_ADDR_VAR 0 58
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63254: LD_ADDR_VAR 0 59
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63342: LD_ADDR_VAR 0 60
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63430: LD_ADDR_VAR 0 61
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63518: LD_ADDR_VAR 0 62
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63606: LD_ADDR_VAR 0 63
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63694: LD_ADDR_VAR 0 64
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// end ; 1 :
63782: GO 69679
63784: LD_INT 1
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63792
63790: GO 66415
63792: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63793: LD_ADDR_VAR 0 11
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63837: LD_ADDR_VAR 0 12
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63878: LD_ADDR_VAR 0 13
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63918: LD_ADDR_VAR 0 14
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: LD_INT 3
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63959: LD_ADDR_VAR 0 15
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: LD_INT 1
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64003: LD_ADDR_VAR 0 16
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 3
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: NEG
64023: PUSH
64024: LD_INT 2
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 3
64034: NEG
64035: PUSH
64036: LD_INT 3
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64049: LD_ADDR_VAR 0 17
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64093: LD_ADDR_VAR 0 18
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64134: LD_ADDR_VAR 0 19
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64174: LD_ADDR_VAR 0 20
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64215: LD_ADDR_VAR 0 21
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64259: LD_ADDR_VAR 0 22
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: NEG
64279: PUSH
64280: LD_INT 2
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64305: LD_ADDR_VAR 0 23
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 3
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 4
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 3
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64349: LD_ADDR_VAR 0 24
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 4
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64390: LD_ADDR_VAR 0 25
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 3
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: LD_INT 3
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: LD_INT 4
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64430: LD_ADDR_VAR 0 26
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 4
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64471: LD_ADDR_VAR 0 27
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64515: LD_ADDR_VAR 0 28
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 4
64546: NEG
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64561: LD_ADDR_VAR 0 29
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 3
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 4
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 4
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 5
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 5
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: LD_INT 4
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 6
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 6
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 5
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64716: LD_ADDR_VAR 0 30
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 4
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 4
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 5
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 5
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 5
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 6
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 6
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64859: LD_ADDR_VAR 0 31
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 2
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 4
64906: PUSH
64907: LD_INT 4
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: LD_INT 4
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 5
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 5
64936: PUSH
64937: LD_INT 5
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 4
64946: PUSH
64947: LD_INT 5
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 6
64956: PUSH
64957: LD_INT 5
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 6
64966: PUSH
64967: LD_INT 6
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 5
64976: PUSH
64977: LD_INT 6
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64998: LD_ADDR_VAR 0 32
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 4
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 5
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 5
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 4
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 6
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 6
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: LD_INT 5
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65141: LD_ADDR_VAR 0 33
65145: PUSH
65146: LD_INT 2
65148: NEG
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 3
65159: NEG
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: NEG
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 4
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 5
65227: NEG
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 5
65238: NEG
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 5
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 6
65261: NEG
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 6
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65296: LD_ADDR_VAR 0 34
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 3
65327: NEG
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 3
65339: NEG
65340: PUSH
65341: LD_INT 4
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 4
65351: NEG
65352: PUSH
65353: LD_INT 3
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 4
65363: NEG
65364: PUSH
65365: LD_INT 4
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 4
65375: NEG
65376: PUSH
65377: LD_INT 5
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 5
65387: NEG
65388: PUSH
65389: LD_INT 4
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 5
65399: NEG
65400: PUSH
65401: LD_INT 5
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 5
65411: NEG
65412: PUSH
65413: LD_INT 6
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 6
65423: NEG
65424: PUSH
65425: LD_INT 5
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 6
65435: NEG
65436: PUSH
65437: LD_INT 6
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65459: LD_ADDR_VAR 0 41
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65503: LD_ADDR_VAR 0 42
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65544: LD_ADDR_VAR 0 43
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: LD_INT 2
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65584: LD_ADDR_VAR 0 44
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 3
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65625: LD_ADDR_VAR 0 45
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 2
65643: NEG
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65669: LD_ADDR_VAR 0 46
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 3
65700: NEG
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65715: LD_ADDR_VAR 0 47
65719: PUSH
65720: LD_INT 2
65722: NEG
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: LD_INT 3
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65748: LD_ADDR_VAR 0 48
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65779: LD_ADDR_VAR 0 49
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65808: LD_ADDR_VAR 0 50
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65837: LD_ADDR_VAR 0 51
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65868: LD_ADDR_VAR 0 52
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65901: LD_ADDR_VAR 0 53
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65945: LD_ADDR_VAR 0 54
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: LIST
65985: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65986: LD_ADDR_VAR 0 55
65990: PUSH
65991: LD_INT 3
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66026: LD_ADDR_VAR 0 56
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: LD_INT 3
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: LIST
66066: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66067: LD_ADDR_VAR 0 57
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66111: LD_ADDR_VAR 0 58
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66157: LD_ADDR_VAR 0 59
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66201: LD_ADDR_VAR 0 60
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 2
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66242: LD_ADDR_VAR 0 61
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66282: LD_ADDR_VAR 0 62
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66323: LD_ADDR_VAR 0 63
66327: PUSH
66328: LD_INT 1
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 2
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66367: LD_ADDR_VAR 0 64
66371: PUSH
66372: LD_INT 1
66374: NEG
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: NEG
66387: PUSH
66388: LD_INT 1
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: ST_TO_ADDR
// end ; 2 :
66413: GO 69679
66415: LD_INT 2
66417: DOUBLE
66418: EQUAL
66419: IFTRUE 66423
66421: GO 69678
66423: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66424: LD_ADDR_VAR 0 29
66428: PUSH
66429: LD_INT 4
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 4
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 5
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 5
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 4
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 5
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 3
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: PUSH
66555: LD_INT 4
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 4
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 4
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 4
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: PUSH
66645: LD_INT 5
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 5
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: LD_INT 4
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 5
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: LD_INT 3
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: NEG
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 2
66741: NEG
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 3
66752: NEG
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 4
66763: NEG
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 4
66774: NEG
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 4
66786: NEG
66787: PUSH
66788: LD_INT 2
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: NEG
66810: PUSH
66811: LD_INT 4
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: NEG
66822: PUSH
66823: LD_INT 5
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 4
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 3
66845: NEG
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 4
66857: NEG
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 5
66869: NEG
66870: PUSH
66871: LD_INT 4
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 5
66881: NEG
66882: PUSH
66883: LD_INT 5
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: LD_INT 5
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 5
66905: NEG
66906: PUSH
66907: LD_INT 3
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66962: LD_ADDR_VAR 0 30
66966: PUSH
66967: LD_INT 4
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 4
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 5
66989: PUSH
66990: LD_INT 4
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 5
66999: PUSH
67000: LD_INT 5
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 4
67009: PUSH
67010: LD_INT 5
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 3
67019: PUSH
67020: LD_INT 4
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 5
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: PUSH
67050: LD_INT 5
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 2
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: LD_INT 4
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: LD_INT 2
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 4
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: NEG
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 4
67163: NEG
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 4
67197: NEG
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 5
67208: NEG
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 5
67219: NEG
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 5
67231: NEG
67232: PUSH
67233: LD_INT 2
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 3
67254: NEG
67255: PUSH
67256: LD_INT 3
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: LD_INT 4
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: NEG
67279: PUSH
67280: LD_INT 3
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 2
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 3
67302: NEG
67303: PUSH
67304: LD_INT 2
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 4
67314: NEG
67315: PUSH
67316: LD_INT 3
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 4
67326: NEG
67327: PUSH
67328: LD_INT 4
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: NEG
67339: PUSH
67340: LD_INT 4
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 4
67350: NEG
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 4
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 5
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 4
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: LD_INT 5
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67509: LD_ADDR_VAR 0 31
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: LD_INT 4
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 4
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: LD_INT 5
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 5
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: LD_INT 4
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 3
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 5
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: LD_INT 3
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 4
67676: NEG
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: NEG
67689: PUSH
67690: LD_INT 2
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 4
67711: NEG
67712: PUSH
67713: LD_INT 4
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: LD_INT 5
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: LD_INT 4
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: NEG
67748: PUSH
67749: LD_INT 3
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 4
67759: NEG
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 5
67771: NEG
67772: PUSH
67773: LD_INT 4
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 5
67783: NEG
67784: PUSH
67785: LD_INT 5
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: NEG
67796: PUSH
67797: LD_INT 5
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 5
67807: NEG
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 3
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 4
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 3
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: NEG
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 4
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 2
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 4
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: LD_INT 1
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 5
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 5
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 1
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 5
68004: PUSH
68005: LD_INT 2
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68059: LD_ADDR_VAR 0 32
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 4
68077: NEG
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: NEG
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 5
68122: NEG
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 5
68133: NEG
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 5
68145: NEG
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 2
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 3
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: LD_INT 4
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: NEG
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 3
68216: NEG
68217: PUSH
68218: LD_INT 2
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 4
68228: NEG
68229: PUSH
68230: LD_INT 3
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 4
68240: NEG
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: NEG
68253: PUSH
68254: LD_INT 4
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 4
68264: NEG
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 4
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 5
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 4
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: LD_INT 4
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 1
68343: NEG
68344: PUSH
68345: LD_INT 5
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 2
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 5
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 3
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 4
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 3
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: LD_INT 1
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: LD_INT 2
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 4
68461: PUSH
68462: LD_INT 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: PUSH
68472: LD_INT 4
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 5
68491: PUSH
68492: LD_INT 4
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 5
68501: PUSH
68502: LD_INT 5
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 4
68511: PUSH
68512: LD_INT 5
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: LD_INT 4
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 3
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 5
68541: PUSH
68542: LD_INT 3
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: LD_INT 5
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68606: LD_ADDR_VAR 0 33
68610: PUSH
68611: LD_INT 4
68613: NEG
68614: PUSH
68615: LD_INT 4
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: LD_INT 5
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: LD_INT 4
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 4
68661: NEG
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 5
68673: NEG
68674: PUSH
68675: LD_INT 4
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 5
68685: NEG
68686: PUSH
68687: LD_INT 5
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 3
68697: NEG
68698: PUSH
68699: LD_INT 5
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 5
68709: NEG
68710: PUSH
68711: LD_INT 3
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 3
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 4
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: LD_INT 2
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 1
68776: NEG
68777: PUSH
68778: LD_INT 3
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 4
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 4
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 4
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 5
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 5
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 4
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 3
68895: PUSH
68896: LD_INT 2
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 5
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: LD_INT 3
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: LD_INT 2
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 4
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 4
68946: PUSH
68947: LD_INT 4
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 3
68956: PUSH
68957: LD_INT 4
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 4
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 2
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: LD_INT 4
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 1
69026: PUSH
69027: LD_INT 4
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 1
69036: PUSH
69037: LD_INT 5
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: LD_INT 5
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: NEG
69057: PUSH
69058: LD_INT 4
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: LD_INT 5
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69144: LD_ADDR_VAR 0 34
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 4
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 5
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: LD_INT 4
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: LD_INT 5
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: LD_INT 5
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 3
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 3
69263: PUSH
69264: LD_INT 1
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 4
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 4
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 4
69346: PUSH
69347: LD_INT 4
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 4
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 5
69366: PUSH
69367: LD_INT 4
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 5
69376: PUSH
69377: LD_INT 5
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 4
69386: PUSH
69387: LD_INT 5
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: LD_INT 4
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 5
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: LD_INT 5
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: LD_INT 3
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 4
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 4
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: LD_INT 3
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: NEG
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 2
69508: PUSH
69509: LD_INT 4
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 2
69518: NEG
69519: PUSH
69520: LD_INT 2
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 4
69529: NEG
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: NEG
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 3
69552: NEG
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 3
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 5
69585: NEG
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 5
69596: NEG
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 5
69608: NEG
69609: PUSH
69610: LD_INT 2
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: NEG
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: ST_TO_ADDR
// end ; end ;
69676: GO 69679
69678: POP
// case btype of b_depot , b_warehouse :
69679: LD_VAR 0 1
69683: PUSH
69684: LD_INT 0
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69698
69690: LD_INT 1
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69698
69696: GO 69899
69698: POP
// case nation of nation_american :
69699: LD_VAR 0 5
69703: PUSH
69704: LD_INT 1
69706: DOUBLE
69707: EQUAL
69708: IFTRUE 69712
69710: GO 69768
69712: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69713: LD_ADDR_VAR 0 9
69717: PUSH
69718: LD_VAR 0 11
69722: PUSH
69723: LD_VAR 0 12
69727: PUSH
69728: LD_VAR 0 13
69732: PUSH
69733: LD_VAR 0 14
69737: PUSH
69738: LD_VAR 0 15
69742: PUSH
69743: LD_VAR 0 16
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: PUSH
69756: LD_VAR 0 4
69760: PUSH
69761: LD_INT 1
69763: PLUS
69764: ARRAY
69765: ST_TO_ADDR
69766: GO 69897
69768: LD_INT 2
69770: DOUBLE
69771: EQUAL
69772: IFTRUE 69776
69774: GO 69832
69776: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69777: LD_ADDR_VAR 0 9
69781: PUSH
69782: LD_VAR 0 17
69786: PUSH
69787: LD_VAR 0 18
69791: PUSH
69792: LD_VAR 0 19
69796: PUSH
69797: LD_VAR 0 20
69801: PUSH
69802: LD_VAR 0 21
69806: PUSH
69807: LD_VAR 0 22
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: PUSH
69820: LD_VAR 0 4
69824: PUSH
69825: LD_INT 1
69827: PLUS
69828: ARRAY
69829: ST_TO_ADDR
69830: GO 69897
69832: LD_INT 3
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69840
69838: GO 69896
69840: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69841: LD_ADDR_VAR 0 9
69845: PUSH
69846: LD_VAR 0 23
69850: PUSH
69851: LD_VAR 0 24
69855: PUSH
69856: LD_VAR 0 25
69860: PUSH
69861: LD_VAR 0 26
69865: PUSH
69866: LD_VAR 0 27
69870: PUSH
69871: LD_VAR 0 28
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: PUSH
69884: LD_VAR 0 4
69888: PUSH
69889: LD_INT 1
69891: PLUS
69892: ARRAY
69893: ST_TO_ADDR
69894: GO 69897
69896: POP
69897: GO 70452
69899: LD_INT 2
69901: DOUBLE
69902: EQUAL
69903: IFTRUE 69913
69905: LD_INT 3
69907: DOUBLE
69908: EQUAL
69909: IFTRUE 69913
69911: GO 69969
69913: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69914: LD_ADDR_VAR 0 9
69918: PUSH
69919: LD_VAR 0 29
69923: PUSH
69924: LD_VAR 0 30
69928: PUSH
69929: LD_VAR 0 31
69933: PUSH
69934: LD_VAR 0 32
69938: PUSH
69939: LD_VAR 0 33
69943: PUSH
69944: LD_VAR 0 34
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: PUSH
69957: LD_VAR 0 4
69961: PUSH
69962: LD_INT 1
69964: PLUS
69965: ARRAY
69966: ST_TO_ADDR
69967: GO 70452
69969: LD_INT 16
69971: DOUBLE
69972: EQUAL
69973: IFTRUE 70031
69975: LD_INT 17
69977: DOUBLE
69978: EQUAL
69979: IFTRUE 70031
69981: LD_INT 18
69983: DOUBLE
69984: EQUAL
69985: IFTRUE 70031
69987: LD_INT 19
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 70031
69993: LD_INT 22
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70031
69999: LD_INT 20
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70031
70005: LD_INT 21
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70031
70011: LD_INT 23
70013: DOUBLE
70014: EQUAL
70015: IFTRUE 70031
70017: LD_INT 24
70019: DOUBLE
70020: EQUAL
70021: IFTRUE 70031
70023: LD_INT 25
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70031
70029: GO 70087
70031: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70032: LD_ADDR_VAR 0 9
70036: PUSH
70037: LD_VAR 0 35
70041: PUSH
70042: LD_VAR 0 36
70046: PUSH
70047: LD_VAR 0 37
70051: PUSH
70052: LD_VAR 0 38
70056: PUSH
70057: LD_VAR 0 39
70061: PUSH
70062: LD_VAR 0 40
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: PUSH
70075: LD_VAR 0 4
70079: PUSH
70080: LD_INT 1
70082: PLUS
70083: ARRAY
70084: ST_TO_ADDR
70085: GO 70452
70087: LD_INT 6
70089: DOUBLE
70090: EQUAL
70091: IFTRUE 70143
70093: LD_INT 7
70095: DOUBLE
70096: EQUAL
70097: IFTRUE 70143
70099: LD_INT 8
70101: DOUBLE
70102: EQUAL
70103: IFTRUE 70143
70105: LD_INT 13
70107: DOUBLE
70108: EQUAL
70109: IFTRUE 70143
70111: LD_INT 12
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70143
70117: LD_INT 15
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70143
70123: LD_INT 11
70125: DOUBLE
70126: EQUAL
70127: IFTRUE 70143
70129: LD_INT 14
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70143
70135: LD_INT 10
70137: DOUBLE
70138: EQUAL
70139: IFTRUE 70143
70141: GO 70199
70143: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70144: LD_ADDR_VAR 0 9
70148: PUSH
70149: LD_VAR 0 41
70153: PUSH
70154: LD_VAR 0 42
70158: PUSH
70159: LD_VAR 0 43
70163: PUSH
70164: LD_VAR 0 44
70168: PUSH
70169: LD_VAR 0 45
70173: PUSH
70174: LD_VAR 0 46
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: PUSH
70187: LD_VAR 0 4
70191: PUSH
70192: LD_INT 1
70194: PLUS
70195: ARRAY
70196: ST_TO_ADDR
70197: GO 70452
70199: LD_INT 36
70201: DOUBLE
70202: EQUAL
70203: IFTRUE 70207
70205: GO 70263
70207: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70208: LD_ADDR_VAR 0 9
70212: PUSH
70213: LD_VAR 0 47
70217: PUSH
70218: LD_VAR 0 48
70222: PUSH
70223: LD_VAR 0 49
70227: PUSH
70228: LD_VAR 0 50
70232: PUSH
70233: LD_VAR 0 51
70237: PUSH
70238: LD_VAR 0 52
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: PUSH
70251: LD_VAR 0 4
70255: PUSH
70256: LD_INT 1
70258: PLUS
70259: ARRAY
70260: ST_TO_ADDR
70261: GO 70452
70263: LD_INT 4
70265: DOUBLE
70266: EQUAL
70267: IFTRUE 70289
70269: LD_INT 5
70271: DOUBLE
70272: EQUAL
70273: IFTRUE 70289
70275: LD_INT 34
70277: DOUBLE
70278: EQUAL
70279: IFTRUE 70289
70281: LD_INT 37
70283: DOUBLE
70284: EQUAL
70285: IFTRUE 70289
70287: GO 70345
70289: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70290: LD_ADDR_VAR 0 9
70294: PUSH
70295: LD_VAR 0 53
70299: PUSH
70300: LD_VAR 0 54
70304: PUSH
70305: LD_VAR 0 55
70309: PUSH
70310: LD_VAR 0 56
70314: PUSH
70315: LD_VAR 0 57
70319: PUSH
70320: LD_VAR 0 58
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: PUSH
70333: LD_VAR 0 4
70337: PUSH
70338: LD_INT 1
70340: PLUS
70341: ARRAY
70342: ST_TO_ADDR
70343: GO 70452
70345: LD_INT 31
70347: DOUBLE
70348: EQUAL
70349: IFTRUE 70395
70351: LD_INT 32
70353: DOUBLE
70354: EQUAL
70355: IFTRUE 70395
70357: LD_INT 33
70359: DOUBLE
70360: EQUAL
70361: IFTRUE 70395
70363: LD_INT 27
70365: DOUBLE
70366: EQUAL
70367: IFTRUE 70395
70369: LD_INT 26
70371: DOUBLE
70372: EQUAL
70373: IFTRUE 70395
70375: LD_INT 28
70377: DOUBLE
70378: EQUAL
70379: IFTRUE 70395
70381: LD_INT 29
70383: DOUBLE
70384: EQUAL
70385: IFTRUE 70395
70387: LD_INT 30
70389: DOUBLE
70390: EQUAL
70391: IFTRUE 70395
70393: GO 70451
70395: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70396: LD_ADDR_VAR 0 9
70400: PUSH
70401: LD_VAR 0 59
70405: PUSH
70406: LD_VAR 0 60
70410: PUSH
70411: LD_VAR 0 61
70415: PUSH
70416: LD_VAR 0 62
70420: PUSH
70421: LD_VAR 0 63
70425: PUSH
70426: LD_VAR 0 64
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: PUSH
70439: LD_VAR 0 4
70443: PUSH
70444: LD_INT 1
70446: PLUS
70447: ARRAY
70448: ST_TO_ADDR
70449: GO 70452
70451: POP
// temp_list2 = [ ] ;
70452: LD_ADDR_VAR 0 10
70456: PUSH
70457: EMPTY
70458: ST_TO_ADDR
// for i in temp_list do
70459: LD_ADDR_VAR 0 8
70463: PUSH
70464: LD_VAR 0 9
70468: PUSH
70469: FOR_IN
70470: IFFALSE 70522
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70472: LD_ADDR_VAR 0 10
70476: PUSH
70477: LD_VAR 0 10
70481: PUSH
70482: LD_VAR 0 8
70486: PUSH
70487: LD_INT 1
70489: ARRAY
70490: PUSH
70491: LD_VAR 0 2
70495: PLUS
70496: PUSH
70497: LD_VAR 0 8
70501: PUSH
70502: LD_INT 2
70504: ARRAY
70505: PUSH
70506: LD_VAR 0 3
70510: PLUS
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: ADD
70519: ST_TO_ADDR
70520: GO 70469
70522: POP
70523: POP
// result = temp_list2 ;
70524: LD_ADDR_VAR 0 7
70528: PUSH
70529: LD_VAR 0 10
70533: ST_TO_ADDR
// end ;
70534: LD_VAR 0 7
70538: RET
// export function EnemyInRange ( unit , dist ) ; begin
70539: LD_INT 0
70541: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70542: LD_ADDR_VAR 0 3
70546: PUSH
70547: LD_VAR 0 1
70551: PPUSH
70552: CALL_OW 255
70556: PPUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: CALL_OW 250
70566: PPUSH
70567: LD_VAR 0 1
70571: PPUSH
70572: CALL_OW 251
70576: PPUSH
70577: LD_VAR 0 2
70581: PPUSH
70582: CALL 43935 0 4
70586: PUSH
70587: LD_INT 4
70589: ARRAY
70590: ST_TO_ADDR
// end ;
70591: LD_VAR 0 3
70595: RET
// export function PlayerSeeMe ( unit ) ; begin
70596: LD_INT 0
70598: PPUSH
// result := See ( your_side , unit ) ;
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: LD_OWVAR 2
70608: PPUSH
70609: LD_VAR 0 1
70613: PPUSH
70614: CALL_OW 292
70618: ST_TO_ADDR
// end ;
70619: LD_VAR 0 2
70623: RET
// export function ReverseDir ( unit ) ; begin
70624: LD_INT 0
70626: PPUSH
// if not unit then
70627: LD_VAR 0 1
70631: NOT
70632: IFFALSE 70636
// exit ;
70634: GO 70659
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70636: LD_ADDR_VAR 0 2
70640: PUSH
70641: LD_VAR 0 1
70645: PPUSH
70646: CALL_OW 254
70650: PUSH
70651: LD_INT 3
70653: PLUS
70654: PUSH
70655: LD_INT 6
70657: MOD
70658: ST_TO_ADDR
// end ;
70659: LD_VAR 0 2
70663: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70664: LD_INT 0
70666: PPUSH
70667: PPUSH
70668: PPUSH
70669: PPUSH
70670: PPUSH
// if not hexes then
70671: LD_VAR 0 2
70675: NOT
70676: IFFALSE 70680
// exit ;
70678: GO 70828
// dist := 9999 ;
70680: LD_ADDR_VAR 0 5
70684: PUSH
70685: LD_INT 9999
70687: ST_TO_ADDR
// for i = 1 to hexes do
70688: LD_ADDR_VAR 0 4
70692: PUSH
70693: DOUBLE
70694: LD_INT 1
70696: DEC
70697: ST_TO_ADDR
70698: LD_VAR 0 2
70702: PUSH
70703: FOR_TO
70704: IFFALSE 70816
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70706: LD_VAR 0 1
70710: PPUSH
70711: LD_VAR 0 2
70715: PUSH
70716: LD_VAR 0 4
70720: ARRAY
70721: PUSH
70722: LD_INT 1
70724: ARRAY
70725: PPUSH
70726: LD_VAR 0 2
70730: PUSH
70731: LD_VAR 0 4
70735: ARRAY
70736: PUSH
70737: LD_INT 2
70739: ARRAY
70740: PPUSH
70741: CALL_OW 297
70745: PUSH
70746: LD_VAR 0 5
70750: LESS
70751: IFFALSE 70814
// begin hex := hexes [ i ] ;
70753: LD_ADDR_VAR 0 7
70757: PUSH
70758: LD_VAR 0 2
70762: PUSH
70763: LD_VAR 0 4
70767: ARRAY
70768: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70769: LD_ADDR_VAR 0 5
70773: PUSH
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 2
70783: PUSH
70784: LD_VAR 0 4
70788: ARRAY
70789: PUSH
70790: LD_INT 1
70792: ARRAY
70793: PPUSH
70794: LD_VAR 0 2
70798: PUSH
70799: LD_VAR 0 4
70803: ARRAY
70804: PUSH
70805: LD_INT 2
70807: ARRAY
70808: PPUSH
70809: CALL_OW 297
70813: ST_TO_ADDR
// end ; end ;
70814: GO 70703
70816: POP
70817: POP
// result := hex ;
70818: LD_ADDR_VAR 0 3
70822: PUSH
70823: LD_VAR 0 7
70827: ST_TO_ADDR
// end ;
70828: LD_VAR 0 3
70832: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70833: LD_INT 0
70835: PPUSH
70836: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70837: LD_VAR 0 1
70841: NOT
70842: PUSH
70843: LD_VAR 0 1
70847: PUSH
70848: LD_INT 21
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 23
70860: PUSH
70861: LD_INT 2
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PPUSH
70872: CALL_OW 69
70876: IN
70877: NOT
70878: OR
70879: IFFALSE 70883
// exit ;
70881: GO 70930
// for i = 1 to 3 do
70883: LD_ADDR_VAR 0 3
70887: PUSH
70888: DOUBLE
70889: LD_INT 1
70891: DEC
70892: ST_TO_ADDR
70893: LD_INT 3
70895: PUSH
70896: FOR_TO
70897: IFFALSE 70928
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70899: LD_VAR 0 1
70903: PPUSH
70904: CALL_OW 250
70908: PPUSH
70909: LD_VAR 0 1
70913: PPUSH
70914: CALL_OW 251
70918: PPUSH
70919: LD_INT 1
70921: PPUSH
70922: CALL_OW 453
70926: GO 70896
70928: POP
70929: POP
// end ;
70930: LD_VAR 0 2
70934: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70935: LD_INT 0
70937: PPUSH
70938: PPUSH
70939: PPUSH
70940: PPUSH
70941: PPUSH
70942: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70943: LD_VAR 0 1
70947: NOT
70948: PUSH
70949: LD_VAR 0 2
70953: NOT
70954: OR
70955: PUSH
70956: LD_VAR 0 1
70960: PPUSH
70961: CALL_OW 314
70965: OR
70966: IFFALSE 70970
// exit ;
70968: GO 71411
// x := GetX ( enemy_unit ) ;
70970: LD_ADDR_VAR 0 7
70974: PUSH
70975: LD_VAR 0 2
70979: PPUSH
70980: CALL_OW 250
70984: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70985: LD_ADDR_VAR 0 8
70989: PUSH
70990: LD_VAR 0 2
70994: PPUSH
70995: CALL_OW 251
70999: ST_TO_ADDR
// if not x or not y then
71000: LD_VAR 0 7
71004: NOT
71005: PUSH
71006: LD_VAR 0 8
71010: NOT
71011: OR
71012: IFFALSE 71016
// exit ;
71014: GO 71411
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71016: LD_ADDR_VAR 0 6
71020: PUSH
71021: LD_VAR 0 7
71025: PPUSH
71026: LD_INT 0
71028: PPUSH
71029: LD_INT 4
71031: PPUSH
71032: CALL_OW 272
71036: PUSH
71037: LD_VAR 0 8
71041: PPUSH
71042: LD_INT 0
71044: PPUSH
71045: LD_INT 4
71047: PPUSH
71048: CALL_OW 273
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_VAR 0 7
71061: PPUSH
71062: LD_INT 1
71064: PPUSH
71065: LD_INT 4
71067: PPUSH
71068: CALL_OW 272
71072: PUSH
71073: LD_VAR 0 8
71077: PPUSH
71078: LD_INT 1
71080: PPUSH
71081: LD_INT 4
71083: PPUSH
71084: CALL_OW 273
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_VAR 0 7
71097: PPUSH
71098: LD_INT 2
71100: PPUSH
71101: LD_INT 4
71103: PPUSH
71104: CALL_OW 272
71108: PUSH
71109: LD_VAR 0 8
71113: PPUSH
71114: LD_INT 2
71116: PPUSH
71117: LD_INT 4
71119: PPUSH
71120: CALL_OW 273
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_VAR 0 7
71133: PPUSH
71134: LD_INT 3
71136: PPUSH
71137: LD_INT 4
71139: PPUSH
71140: CALL_OW 272
71144: PUSH
71145: LD_VAR 0 8
71149: PPUSH
71150: LD_INT 3
71152: PPUSH
71153: LD_INT 4
71155: PPUSH
71156: CALL_OW 273
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_VAR 0 7
71169: PPUSH
71170: LD_INT 4
71172: PPUSH
71173: LD_INT 4
71175: PPUSH
71176: CALL_OW 272
71180: PUSH
71181: LD_VAR 0 8
71185: PPUSH
71186: LD_INT 4
71188: PPUSH
71189: LD_INT 4
71191: PPUSH
71192: CALL_OW 273
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_VAR 0 7
71205: PPUSH
71206: LD_INT 5
71208: PPUSH
71209: LD_INT 4
71211: PPUSH
71212: CALL_OW 272
71216: PUSH
71217: LD_VAR 0 8
71221: PPUSH
71222: LD_INT 5
71224: PPUSH
71225: LD_INT 4
71227: PPUSH
71228: CALL_OW 273
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: ST_TO_ADDR
// for i = tmp downto 1 do
71245: LD_ADDR_VAR 0 4
71249: PUSH
71250: DOUBLE
71251: LD_VAR 0 6
71255: INC
71256: ST_TO_ADDR
71257: LD_INT 1
71259: PUSH
71260: FOR_DOWNTO
71261: IFFALSE 71362
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71263: LD_VAR 0 6
71267: PUSH
71268: LD_VAR 0 4
71272: ARRAY
71273: PUSH
71274: LD_INT 1
71276: ARRAY
71277: PPUSH
71278: LD_VAR 0 6
71282: PUSH
71283: LD_VAR 0 4
71287: ARRAY
71288: PUSH
71289: LD_INT 2
71291: ARRAY
71292: PPUSH
71293: CALL_OW 488
71297: NOT
71298: PUSH
71299: LD_VAR 0 6
71303: PUSH
71304: LD_VAR 0 4
71308: ARRAY
71309: PUSH
71310: LD_INT 1
71312: ARRAY
71313: PPUSH
71314: LD_VAR 0 6
71318: PUSH
71319: LD_VAR 0 4
71323: ARRAY
71324: PUSH
71325: LD_INT 2
71327: ARRAY
71328: PPUSH
71329: CALL_OW 428
71333: PUSH
71334: LD_INT 0
71336: NONEQUAL
71337: OR
71338: IFFALSE 71360
// tmp := Delete ( tmp , i ) ;
71340: LD_ADDR_VAR 0 6
71344: PUSH
71345: LD_VAR 0 6
71349: PPUSH
71350: LD_VAR 0 4
71354: PPUSH
71355: CALL_OW 3
71359: ST_TO_ADDR
71360: GO 71260
71362: POP
71363: POP
// j := GetClosestHex ( unit , tmp ) ;
71364: LD_ADDR_VAR 0 5
71368: PUSH
71369: LD_VAR 0 1
71373: PPUSH
71374: LD_VAR 0 6
71378: PPUSH
71379: CALL 70664 0 2
71383: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71384: LD_VAR 0 1
71388: PPUSH
71389: LD_VAR 0 5
71393: PUSH
71394: LD_INT 1
71396: ARRAY
71397: PPUSH
71398: LD_VAR 0 5
71402: PUSH
71403: LD_INT 2
71405: ARRAY
71406: PPUSH
71407: CALL_OW 111
// end ;
71411: LD_VAR 0 3
71415: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71416: LD_INT 0
71418: PPUSH
71419: PPUSH
71420: PPUSH
// uc_side = 0 ;
71421: LD_ADDR_OWVAR 20
71425: PUSH
71426: LD_INT 0
71428: ST_TO_ADDR
// uc_nation = 0 ;
71429: LD_ADDR_OWVAR 21
71433: PUSH
71434: LD_INT 0
71436: ST_TO_ADDR
// InitHc_All ( ) ;
71437: CALL_OW 584
// InitVc ;
71441: CALL_OW 20
// if mastodonts then
71445: LD_VAR 0 6
71449: IFFALSE 71516
// for i = 1 to mastodonts do
71451: LD_ADDR_VAR 0 11
71455: PUSH
71456: DOUBLE
71457: LD_INT 1
71459: DEC
71460: ST_TO_ADDR
71461: LD_VAR 0 6
71465: PUSH
71466: FOR_TO
71467: IFFALSE 71514
// begin vc_chassis := 31 ;
71469: LD_ADDR_OWVAR 37
71473: PUSH
71474: LD_INT 31
71476: ST_TO_ADDR
// vc_control := control_rider ;
71477: LD_ADDR_OWVAR 38
71481: PUSH
71482: LD_INT 4
71484: ST_TO_ADDR
// animal := CreateVehicle ;
71485: LD_ADDR_VAR 0 12
71489: PUSH
71490: CALL_OW 45
71494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71495: LD_VAR 0 12
71499: PPUSH
71500: LD_VAR 0 8
71504: PPUSH
71505: LD_INT 0
71507: PPUSH
71508: CALL 73704 0 3
// end ;
71512: GO 71466
71514: POP
71515: POP
// if horses then
71516: LD_VAR 0 5
71520: IFFALSE 71587
// for i = 1 to horses do
71522: LD_ADDR_VAR 0 11
71526: PUSH
71527: DOUBLE
71528: LD_INT 1
71530: DEC
71531: ST_TO_ADDR
71532: LD_VAR 0 5
71536: PUSH
71537: FOR_TO
71538: IFFALSE 71585
// begin hc_class := 21 ;
71540: LD_ADDR_OWVAR 28
71544: PUSH
71545: LD_INT 21
71547: ST_TO_ADDR
// hc_gallery :=  ;
71548: LD_ADDR_OWVAR 33
71552: PUSH
71553: LD_STRING 
71555: ST_TO_ADDR
// animal := CreateHuman ;
71556: LD_ADDR_VAR 0 12
71560: PUSH
71561: CALL_OW 44
71565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71566: LD_VAR 0 12
71570: PPUSH
71571: LD_VAR 0 8
71575: PPUSH
71576: LD_INT 0
71578: PPUSH
71579: CALL 73704 0 3
// end ;
71583: GO 71537
71585: POP
71586: POP
// if birds then
71587: LD_VAR 0 1
71591: IFFALSE 71658
// for i = 1 to birds do
71593: LD_ADDR_VAR 0 11
71597: PUSH
71598: DOUBLE
71599: LD_INT 1
71601: DEC
71602: ST_TO_ADDR
71603: LD_VAR 0 1
71607: PUSH
71608: FOR_TO
71609: IFFALSE 71656
// begin hc_class = 18 ;
71611: LD_ADDR_OWVAR 28
71615: PUSH
71616: LD_INT 18
71618: ST_TO_ADDR
// hc_gallery =  ;
71619: LD_ADDR_OWVAR 33
71623: PUSH
71624: LD_STRING 
71626: ST_TO_ADDR
// animal := CreateHuman ;
71627: LD_ADDR_VAR 0 12
71631: PUSH
71632: CALL_OW 44
71636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71637: LD_VAR 0 12
71641: PPUSH
71642: LD_VAR 0 8
71646: PPUSH
71647: LD_INT 0
71649: PPUSH
71650: CALL 73704 0 3
// end ;
71654: GO 71608
71656: POP
71657: POP
// if tigers then
71658: LD_VAR 0 2
71662: IFFALSE 71746
// for i = 1 to tigers do
71664: LD_ADDR_VAR 0 11
71668: PUSH
71669: DOUBLE
71670: LD_INT 1
71672: DEC
71673: ST_TO_ADDR
71674: LD_VAR 0 2
71678: PUSH
71679: FOR_TO
71680: IFFALSE 71744
// begin hc_class = class_tiger ;
71682: LD_ADDR_OWVAR 28
71686: PUSH
71687: LD_INT 14
71689: ST_TO_ADDR
// hc_gallery =  ;
71690: LD_ADDR_OWVAR 33
71694: PUSH
71695: LD_STRING 
71697: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71698: LD_ADDR_OWVAR 35
71702: PUSH
71703: LD_INT 7
71705: NEG
71706: PPUSH
71707: LD_INT 7
71709: PPUSH
71710: CALL_OW 12
71714: ST_TO_ADDR
// animal := CreateHuman ;
71715: LD_ADDR_VAR 0 12
71719: PUSH
71720: CALL_OW 44
71724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71725: LD_VAR 0 12
71729: PPUSH
71730: LD_VAR 0 8
71734: PPUSH
71735: LD_INT 0
71737: PPUSH
71738: CALL 73704 0 3
// end ;
71742: GO 71679
71744: POP
71745: POP
// if apemans then
71746: LD_VAR 0 3
71750: IFFALSE 71873
// for i = 1 to apemans do
71752: LD_ADDR_VAR 0 11
71756: PUSH
71757: DOUBLE
71758: LD_INT 1
71760: DEC
71761: ST_TO_ADDR
71762: LD_VAR 0 3
71766: PUSH
71767: FOR_TO
71768: IFFALSE 71871
// begin hc_class = class_apeman ;
71770: LD_ADDR_OWVAR 28
71774: PUSH
71775: LD_INT 12
71777: ST_TO_ADDR
// hc_gallery =  ;
71778: LD_ADDR_OWVAR 33
71782: PUSH
71783: LD_STRING 
71785: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71786: LD_ADDR_OWVAR 35
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PPUSH
71795: LD_INT 2
71797: PPUSH
71798: CALL_OW 12
71802: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71803: LD_ADDR_OWVAR 31
71807: PUSH
71808: LD_INT 1
71810: PPUSH
71811: LD_INT 3
71813: PPUSH
71814: CALL_OW 12
71818: PUSH
71819: LD_INT 1
71821: PPUSH
71822: LD_INT 3
71824: PPUSH
71825: CALL_OW 12
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: LD_INT 0
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: ST_TO_ADDR
// animal := CreateHuman ;
71842: LD_ADDR_VAR 0 12
71846: PUSH
71847: CALL_OW 44
71851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71852: LD_VAR 0 12
71856: PPUSH
71857: LD_VAR 0 8
71861: PPUSH
71862: LD_INT 0
71864: PPUSH
71865: CALL 73704 0 3
// end ;
71869: GO 71767
71871: POP
71872: POP
// if enchidnas then
71873: LD_VAR 0 4
71877: IFFALSE 71944
// for i = 1 to enchidnas do
71879: LD_ADDR_VAR 0 11
71883: PUSH
71884: DOUBLE
71885: LD_INT 1
71887: DEC
71888: ST_TO_ADDR
71889: LD_VAR 0 4
71893: PUSH
71894: FOR_TO
71895: IFFALSE 71942
// begin hc_class = 13 ;
71897: LD_ADDR_OWVAR 28
71901: PUSH
71902: LD_INT 13
71904: ST_TO_ADDR
// hc_gallery =  ;
71905: LD_ADDR_OWVAR 33
71909: PUSH
71910: LD_STRING 
71912: ST_TO_ADDR
// animal := CreateHuman ;
71913: LD_ADDR_VAR 0 12
71917: PUSH
71918: CALL_OW 44
71922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71923: LD_VAR 0 12
71927: PPUSH
71928: LD_VAR 0 8
71932: PPUSH
71933: LD_INT 0
71935: PPUSH
71936: CALL 73704 0 3
// end ;
71940: GO 71894
71942: POP
71943: POP
// if fishes then
71944: LD_VAR 0 7
71948: IFFALSE 72015
// for i = 1 to fishes do
71950: LD_ADDR_VAR 0 11
71954: PUSH
71955: DOUBLE
71956: LD_INT 1
71958: DEC
71959: ST_TO_ADDR
71960: LD_VAR 0 7
71964: PUSH
71965: FOR_TO
71966: IFFALSE 72013
// begin hc_class = 20 ;
71968: LD_ADDR_OWVAR 28
71972: PUSH
71973: LD_INT 20
71975: ST_TO_ADDR
// hc_gallery =  ;
71976: LD_ADDR_OWVAR 33
71980: PUSH
71981: LD_STRING 
71983: ST_TO_ADDR
// animal := CreateHuman ;
71984: LD_ADDR_VAR 0 12
71988: PUSH
71989: CALL_OW 44
71993: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71994: LD_VAR 0 12
71998: PPUSH
71999: LD_VAR 0 9
72003: PPUSH
72004: LD_INT 0
72006: PPUSH
72007: CALL 73704 0 3
// end ;
72011: GO 71965
72013: POP
72014: POP
// end ;
72015: LD_VAR 0 10
72019: RET
// export function WantHeal ( sci , unit ) ; begin
72020: LD_INT 0
72022: PPUSH
// if GetTaskList ( sci ) > 0 then
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 437
72032: PUSH
72033: LD_INT 0
72035: GREATER
72036: IFFALSE 72106
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72038: LD_VAR 0 1
72042: PPUSH
72043: CALL_OW 437
72047: PUSH
72048: LD_INT 1
72050: ARRAY
72051: PUSH
72052: LD_INT 1
72054: ARRAY
72055: PUSH
72056: LD_STRING l
72058: EQUAL
72059: PUSH
72060: LD_VAR 0 1
72064: PPUSH
72065: CALL_OW 437
72069: PUSH
72070: LD_INT 1
72072: ARRAY
72073: PUSH
72074: LD_INT 4
72076: ARRAY
72077: PUSH
72078: LD_VAR 0 2
72082: EQUAL
72083: AND
72084: IFFALSE 72096
// result := true else
72086: LD_ADDR_VAR 0 3
72090: PUSH
72091: LD_INT 1
72093: ST_TO_ADDR
72094: GO 72104
// result := false ;
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_INT 0
72103: ST_TO_ADDR
// end else
72104: GO 72114
// result := false ;
72106: LD_ADDR_VAR 0 3
72110: PUSH
72111: LD_INT 0
72113: ST_TO_ADDR
// end ;
72114: LD_VAR 0 3
72118: RET
// export function HealTarget ( sci ) ; begin
72119: LD_INT 0
72121: PPUSH
// if not sci then
72122: LD_VAR 0 1
72126: NOT
72127: IFFALSE 72131
// exit ;
72129: GO 72196
// result := 0 ;
72131: LD_ADDR_VAR 0 2
72135: PUSH
72136: LD_INT 0
72138: ST_TO_ADDR
// if GetTaskList ( sci ) then
72139: LD_VAR 0 1
72143: PPUSH
72144: CALL_OW 437
72148: IFFALSE 72196
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72150: LD_VAR 0 1
72154: PPUSH
72155: CALL_OW 437
72159: PUSH
72160: LD_INT 1
72162: ARRAY
72163: PUSH
72164: LD_INT 1
72166: ARRAY
72167: PUSH
72168: LD_STRING l
72170: EQUAL
72171: IFFALSE 72196
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72173: LD_ADDR_VAR 0 2
72177: PUSH
72178: LD_VAR 0 1
72182: PPUSH
72183: CALL_OW 437
72187: PUSH
72188: LD_INT 1
72190: ARRAY
72191: PUSH
72192: LD_INT 4
72194: ARRAY
72195: ST_TO_ADDR
// end ;
72196: LD_VAR 0 2
72200: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72201: LD_INT 0
72203: PPUSH
72204: PPUSH
72205: PPUSH
72206: PPUSH
// if not base_units then
72207: LD_VAR 0 1
72211: NOT
72212: IFFALSE 72216
// exit ;
72214: GO 72303
// result := false ;
72216: LD_ADDR_VAR 0 2
72220: PUSH
72221: LD_INT 0
72223: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72224: LD_ADDR_VAR 0 5
72228: PUSH
72229: LD_VAR 0 1
72233: PPUSH
72234: LD_INT 21
72236: PUSH
72237: LD_INT 3
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PPUSH
72244: CALL_OW 72
72248: ST_TO_ADDR
// if not tmp then
72249: LD_VAR 0 5
72253: NOT
72254: IFFALSE 72258
// exit ;
72256: GO 72303
// for i in tmp do
72258: LD_ADDR_VAR 0 3
72262: PUSH
72263: LD_VAR 0 5
72267: PUSH
72268: FOR_IN
72269: IFFALSE 72301
// begin result := EnemyInRange ( i , 22 ) ;
72271: LD_ADDR_VAR 0 2
72275: PUSH
72276: LD_VAR 0 3
72280: PPUSH
72281: LD_INT 22
72283: PPUSH
72284: CALL 70539 0 2
72288: ST_TO_ADDR
// if result then
72289: LD_VAR 0 2
72293: IFFALSE 72299
// exit ;
72295: POP
72296: POP
72297: GO 72303
// end ;
72299: GO 72268
72301: POP
72302: POP
// end ;
72303: LD_VAR 0 2
72307: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72308: LD_INT 0
72310: PPUSH
72311: PPUSH
// if not units then
72312: LD_VAR 0 1
72316: NOT
72317: IFFALSE 72321
// exit ;
72319: GO 72391
// result := [ ] ;
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: EMPTY
72327: ST_TO_ADDR
// for i in units do
72328: LD_ADDR_VAR 0 4
72332: PUSH
72333: LD_VAR 0 1
72337: PUSH
72338: FOR_IN
72339: IFFALSE 72389
// if GetTag ( i ) = tag then
72341: LD_VAR 0 4
72345: PPUSH
72346: CALL_OW 110
72350: PUSH
72351: LD_VAR 0 2
72355: EQUAL
72356: IFFALSE 72387
// result := Replace ( result , result + 1 , i ) ;
72358: LD_ADDR_VAR 0 3
72362: PUSH
72363: LD_VAR 0 3
72367: PPUSH
72368: LD_VAR 0 3
72372: PUSH
72373: LD_INT 1
72375: PLUS
72376: PPUSH
72377: LD_VAR 0 4
72381: PPUSH
72382: CALL_OW 1
72386: ST_TO_ADDR
72387: GO 72338
72389: POP
72390: POP
// end ;
72391: LD_VAR 0 3
72395: RET
// export function IsDriver ( un ) ; begin
72396: LD_INT 0
72398: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72399: LD_ADDR_VAR 0 2
72403: PUSH
72404: LD_VAR 0 1
72408: PUSH
72409: LD_INT 55
72411: PUSH
72412: EMPTY
72413: LIST
72414: PPUSH
72415: CALL_OW 69
72419: IN
72420: ST_TO_ADDR
// end ;
72421: LD_VAR 0 2
72425: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72426: LD_INT 0
72428: PPUSH
72429: PPUSH
// list := [ ] ;
72430: LD_ADDR_VAR 0 5
72434: PUSH
72435: EMPTY
72436: ST_TO_ADDR
// case d of 0 :
72437: LD_VAR 0 3
72441: PUSH
72442: LD_INT 0
72444: DOUBLE
72445: EQUAL
72446: IFTRUE 72450
72448: GO 72583
72450: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72451: LD_ADDR_VAR 0 5
72455: PUSH
72456: LD_VAR 0 1
72460: PUSH
72461: LD_INT 4
72463: MINUS
72464: PUSH
72465: LD_VAR 0 2
72469: PUSH
72470: LD_INT 4
72472: MINUS
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: PUSH
72482: LD_VAR 0 1
72486: PUSH
72487: LD_INT 3
72489: MINUS
72490: PUSH
72491: LD_VAR 0 2
72495: PUSH
72496: LD_INT 1
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_VAR 0 1
72508: PUSH
72509: LD_INT 4
72511: PLUS
72512: PUSH
72513: LD_VAR 0 2
72517: PUSH
72518: LD_INT 4
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: LIST
72525: PUSH
72526: LD_VAR 0 1
72530: PUSH
72531: LD_INT 3
72533: PLUS
72534: PUSH
72535: LD_VAR 0 2
72539: PUSH
72540: LD_INT 3
72542: PLUS
72543: PUSH
72544: LD_INT 5
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: LIST
72551: PUSH
72552: LD_VAR 0 1
72556: PUSH
72557: LD_VAR 0 2
72561: PUSH
72562: LD_INT 4
72564: PLUS
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: LIST
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: ST_TO_ADDR
// end ; 1 :
72581: GO 73281
72583: LD_INT 1
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72591
72589: GO 72724
72591: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72592: LD_ADDR_VAR 0 5
72596: PUSH
72597: LD_VAR 0 1
72601: PUSH
72602: LD_VAR 0 2
72606: PUSH
72607: LD_INT 4
72609: MINUS
72610: PUSH
72611: LD_INT 3
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: PUSH
72619: LD_VAR 0 1
72623: PUSH
72624: LD_INT 3
72626: MINUS
72627: PUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_INT 3
72635: MINUS
72636: PUSH
72637: LD_INT 2
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: PUSH
72645: LD_VAR 0 1
72649: PUSH
72650: LD_INT 4
72652: MINUS
72653: PUSH
72654: LD_VAR 0 2
72658: PUSH
72659: LD_INT 1
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: LD_VAR 0 1
72671: PUSH
72672: LD_VAR 0 2
72676: PUSH
72677: LD_INT 3
72679: PLUS
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: PUSH
72689: LD_VAR 0 1
72693: PUSH
72694: LD_INT 4
72696: PLUS
72697: PUSH
72698: LD_VAR 0 2
72702: PUSH
72703: LD_INT 4
72705: PLUS
72706: PUSH
72707: LD_INT 5
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: LIST
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: ST_TO_ADDR
// end ; 2 :
72722: GO 73281
72724: LD_INT 2
72726: DOUBLE
72727: EQUAL
72728: IFTRUE 72732
72730: GO 72861
72732: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72733: LD_ADDR_VAR 0 5
72737: PUSH
72738: LD_VAR 0 1
72742: PUSH
72743: LD_VAR 0 2
72747: PUSH
72748: LD_INT 3
72750: MINUS
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: LD_INT 4
72767: PLUS
72768: PUSH
72769: LD_VAR 0 2
72773: PUSH
72774: LD_INT 4
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: LD_VAR 0 1
72786: PUSH
72787: LD_VAR 0 2
72791: PUSH
72792: LD_INT 4
72794: PLUS
72795: PUSH
72796: LD_INT 0
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: LIST
72803: PUSH
72804: LD_VAR 0 1
72808: PUSH
72809: LD_INT 3
72811: MINUS
72812: PUSH
72813: LD_VAR 0 2
72817: PUSH
72818: LD_INT 1
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: LIST
72825: PUSH
72826: LD_VAR 0 1
72830: PUSH
72831: LD_INT 4
72833: MINUS
72834: PUSH
72835: LD_VAR 0 2
72839: PUSH
72840: LD_INT 4
72842: MINUS
72843: PUSH
72844: LD_INT 2
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: LIST
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: ST_TO_ADDR
// end ; 3 :
72859: GO 73281
72861: LD_INT 3
72863: DOUBLE
72864: EQUAL
72865: IFTRUE 72869
72867: GO 73002
72869: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72870: LD_ADDR_VAR 0 5
72874: PUSH
72875: LD_VAR 0 1
72879: PUSH
72880: LD_INT 3
72882: PLUS
72883: PUSH
72884: LD_VAR 0 2
72888: PUSH
72889: LD_INT 4
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: LIST
72896: PUSH
72897: LD_VAR 0 1
72901: PUSH
72902: LD_INT 4
72904: PLUS
72905: PUSH
72906: LD_VAR 0 2
72910: PUSH
72911: LD_INT 4
72913: PLUS
72914: PUSH
72915: LD_INT 5
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: PUSH
72923: LD_VAR 0 1
72927: PUSH
72928: LD_INT 4
72930: MINUS
72931: PUSH
72932: LD_VAR 0 2
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: LIST
72944: PUSH
72945: LD_VAR 0 1
72949: PUSH
72950: LD_VAR 0 2
72954: PUSH
72955: LD_INT 4
72957: MINUS
72958: PUSH
72959: LD_INT 3
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: LIST
72966: PUSH
72967: LD_VAR 0 1
72971: PUSH
72972: LD_INT 3
72974: MINUS
72975: PUSH
72976: LD_VAR 0 2
72980: PUSH
72981: LD_INT 3
72983: MINUS
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: LIST
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: ST_TO_ADDR
// end ; 4 :
73000: GO 73281
73002: LD_INT 4
73004: DOUBLE
73005: EQUAL
73006: IFTRUE 73010
73008: GO 73143
73010: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73011: LD_ADDR_VAR 0 5
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: LD_INT 4
73028: PLUS
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: PUSH
73038: LD_VAR 0 1
73042: PUSH
73043: LD_INT 3
73045: PLUS
73046: PUSH
73047: LD_VAR 0 2
73051: PUSH
73052: LD_INT 3
73054: PLUS
73055: PUSH
73056: LD_INT 5
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: PUSH
73064: LD_VAR 0 1
73068: PUSH
73069: LD_INT 4
73071: PLUS
73072: PUSH
73073: LD_VAR 0 2
73077: PUSH
73078: LD_INT 4
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: LIST
73085: PUSH
73086: LD_VAR 0 1
73090: PUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_INT 3
73098: MINUS
73099: PUSH
73100: LD_INT 3
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: LIST
73107: PUSH
73108: LD_VAR 0 1
73112: PUSH
73113: LD_INT 4
73115: MINUS
73116: PUSH
73117: LD_VAR 0 2
73121: PUSH
73122: LD_INT 4
73124: MINUS
73125: PUSH
73126: LD_INT 2
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: ST_TO_ADDR
// end ; 5 :
73141: GO 73281
73143: LD_INT 5
73145: DOUBLE
73146: EQUAL
73147: IFTRUE 73151
73149: GO 73280
73151: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73152: LD_ADDR_VAR 0 5
73156: PUSH
73157: LD_VAR 0 1
73161: PUSH
73162: LD_INT 4
73164: MINUS
73165: PUSH
73166: LD_VAR 0 2
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_VAR 0 2
73188: PUSH
73189: LD_INT 4
73191: MINUS
73192: PUSH
73193: LD_INT 3
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_INT 4
73208: PLUS
73209: PUSH
73210: LD_VAR 0 2
73214: PUSH
73215: LD_INT 4
73217: PLUS
73218: PUSH
73219: LD_INT 5
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: LIST
73226: PUSH
73227: LD_VAR 0 1
73231: PUSH
73232: LD_INT 3
73234: PLUS
73235: PUSH
73236: LD_VAR 0 2
73240: PUSH
73241: LD_INT 4
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: LIST
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: LD_VAR 0 2
73258: PUSH
73259: LD_INT 3
73261: PLUS
73262: PUSH
73263: LD_INT 0
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: LIST
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: ST_TO_ADDR
// end ; end ;
73278: GO 73281
73280: POP
// result := list ;
73281: LD_ADDR_VAR 0 4
73285: PUSH
73286: LD_VAR 0 5
73290: ST_TO_ADDR
// end ;
73291: LD_VAR 0 4
73295: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73296: LD_INT 0
73298: PPUSH
73299: PPUSH
73300: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73301: LD_VAR 0 1
73305: NOT
73306: PUSH
73307: LD_VAR 0 2
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: LD_INT 2
73317: PUSH
73318: LD_INT 3
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: IN
73330: NOT
73331: OR
73332: IFFALSE 73336
// exit ;
73334: GO 73428
// tmp := [ ] ;
73336: LD_ADDR_VAR 0 5
73340: PUSH
73341: EMPTY
73342: ST_TO_ADDR
// for i in units do
73343: LD_ADDR_VAR 0 4
73347: PUSH
73348: LD_VAR 0 1
73352: PUSH
73353: FOR_IN
73354: IFFALSE 73397
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73356: LD_ADDR_VAR 0 5
73360: PUSH
73361: LD_VAR 0 5
73365: PPUSH
73366: LD_VAR 0 5
73370: PUSH
73371: LD_INT 1
73373: PLUS
73374: PPUSH
73375: LD_VAR 0 4
73379: PPUSH
73380: LD_VAR 0 2
73384: PPUSH
73385: CALL_OW 259
73389: PPUSH
73390: CALL_OW 2
73394: ST_TO_ADDR
73395: GO 73353
73397: POP
73398: POP
// if not tmp then
73399: LD_VAR 0 5
73403: NOT
73404: IFFALSE 73408
// exit ;
73406: GO 73428
// result := SortListByListDesc ( units , tmp ) ;
73408: LD_ADDR_VAR 0 3
73412: PUSH
73413: LD_VAR 0 1
73417: PPUSH
73418: LD_VAR 0 5
73422: PPUSH
73423: CALL_OW 77
73427: ST_TO_ADDR
// end ;
73428: LD_VAR 0 3
73432: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73433: LD_INT 0
73435: PPUSH
73436: PPUSH
73437: PPUSH
// result := false ;
73438: LD_ADDR_VAR 0 3
73442: PUSH
73443: LD_INT 0
73445: ST_TO_ADDR
// x := GetX ( building ) ;
73446: LD_ADDR_VAR 0 4
73450: PUSH
73451: LD_VAR 0 2
73455: PPUSH
73456: CALL_OW 250
73460: ST_TO_ADDR
// y := GetY ( building ) ;
73461: LD_ADDR_VAR 0 5
73465: PUSH
73466: LD_VAR 0 2
73470: PPUSH
73471: CALL_OW 251
73475: ST_TO_ADDR
// if not building or not x or not y then
73476: LD_VAR 0 2
73480: NOT
73481: PUSH
73482: LD_VAR 0 4
73486: NOT
73487: OR
73488: PUSH
73489: LD_VAR 0 5
73493: NOT
73494: OR
73495: IFFALSE 73499
// exit ;
73497: GO 73591
// if GetTaskList ( unit ) then
73499: LD_VAR 0 1
73503: PPUSH
73504: CALL_OW 437
73508: IFFALSE 73591
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73510: LD_STRING e
73512: PUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: CALL_OW 437
73522: PUSH
73523: LD_INT 1
73525: ARRAY
73526: PUSH
73527: LD_INT 1
73529: ARRAY
73530: EQUAL
73531: PUSH
73532: LD_VAR 0 4
73536: PUSH
73537: LD_VAR 0 1
73541: PPUSH
73542: CALL_OW 437
73546: PUSH
73547: LD_INT 1
73549: ARRAY
73550: PUSH
73551: LD_INT 2
73553: ARRAY
73554: EQUAL
73555: AND
73556: PUSH
73557: LD_VAR 0 5
73561: PUSH
73562: LD_VAR 0 1
73566: PPUSH
73567: CALL_OW 437
73571: PUSH
73572: LD_INT 1
73574: ARRAY
73575: PUSH
73576: LD_INT 3
73578: ARRAY
73579: EQUAL
73580: AND
73581: IFFALSE 73591
// result := true end ;
73583: LD_ADDR_VAR 0 3
73587: PUSH
73588: LD_INT 1
73590: ST_TO_ADDR
// end ;
73591: LD_VAR 0 3
73595: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73596: LD_INT 0
73598: PPUSH
// result := false ;
73599: LD_ADDR_VAR 0 4
73603: PUSH
73604: LD_INT 0
73606: ST_TO_ADDR
// if GetTaskList ( unit ) then
73607: LD_VAR 0 1
73611: PPUSH
73612: CALL_OW 437
73616: IFFALSE 73699
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73618: LD_STRING M
73620: PUSH
73621: LD_VAR 0 1
73625: PPUSH
73626: CALL_OW 437
73630: PUSH
73631: LD_INT 1
73633: ARRAY
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: EQUAL
73639: PUSH
73640: LD_VAR 0 2
73644: PUSH
73645: LD_VAR 0 1
73649: PPUSH
73650: CALL_OW 437
73654: PUSH
73655: LD_INT 1
73657: ARRAY
73658: PUSH
73659: LD_INT 2
73661: ARRAY
73662: EQUAL
73663: AND
73664: PUSH
73665: LD_VAR 0 3
73669: PUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: CALL_OW 437
73679: PUSH
73680: LD_INT 1
73682: ARRAY
73683: PUSH
73684: LD_INT 3
73686: ARRAY
73687: EQUAL
73688: AND
73689: IFFALSE 73699
// result := true ;
73691: LD_ADDR_VAR 0 4
73695: PUSH
73696: LD_INT 1
73698: ST_TO_ADDR
// end ; end ;
73699: LD_VAR 0 4
73703: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73704: LD_INT 0
73706: PPUSH
73707: PPUSH
73708: PPUSH
73709: PPUSH
// if not unit or not area then
73710: LD_VAR 0 1
73714: NOT
73715: PUSH
73716: LD_VAR 0 2
73720: NOT
73721: OR
73722: IFFALSE 73726
// exit ;
73724: GO 73890
// tmp := AreaToList ( area , i ) ;
73726: LD_ADDR_VAR 0 6
73730: PUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: LD_VAR 0 5
73740: PPUSH
73741: CALL_OW 517
73745: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73746: LD_ADDR_VAR 0 5
73750: PUSH
73751: DOUBLE
73752: LD_INT 1
73754: DEC
73755: ST_TO_ADDR
73756: LD_VAR 0 6
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PUSH
73765: FOR_TO
73766: IFFALSE 73888
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73768: LD_ADDR_VAR 0 7
73772: PUSH
73773: LD_VAR 0 6
73777: PUSH
73778: LD_INT 1
73780: ARRAY
73781: PUSH
73782: LD_VAR 0 5
73786: ARRAY
73787: PUSH
73788: LD_VAR 0 6
73792: PUSH
73793: LD_INT 2
73795: ARRAY
73796: PUSH
73797: LD_VAR 0 5
73801: ARRAY
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73807: LD_VAR 0 7
73811: PUSH
73812: LD_INT 1
73814: ARRAY
73815: PPUSH
73816: LD_VAR 0 7
73820: PUSH
73821: LD_INT 2
73823: ARRAY
73824: PPUSH
73825: CALL_OW 428
73829: PUSH
73830: LD_INT 0
73832: EQUAL
73833: IFFALSE 73886
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73835: LD_VAR 0 1
73839: PPUSH
73840: LD_VAR 0 7
73844: PUSH
73845: LD_INT 1
73847: ARRAY
73848: PPUSH
73849: LD_VAR 0 7
73853: PUSH
73854: LD_INT 2
73856: ARRAY
73857: PPUSH
73858: LD_VAR 0 3
73862: PPUSH
73863: CALL_OW 48
// result := IsPlaced ( unit ) ;
73867: LD_ADDR_VAR 0 4
73871: PUSH
73872: LD_VAR 0 1
73876: PPUSH
73877: CALL_OW 305
73881: ST_TO_ADDR
// exit ;
73882: POP
73883: POP
73884: GO 73890
// end ; end ;
73886: GO 73765
73888: POP
73889: POP
// end ;
73890: LD_VAR 0 4
73894: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
// if not side or side > 8 then
73900: LD_VAR 0 1
73904: NOT
73905: PUSH
73906: LD_VAR 0 1
73910: PUSH
73911: LD_INT 8
73913: GREATER
73914: OR
73915: IFFALSE 73919
// exit ;
73917: GO 74106
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73919: LD_ADDR_VAR 0 4
73923: PUSH
73924: LD_INT 22
73926: PUSH
73927: LD_VAR 0 1
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 21
73938: PUSH
73939: LD_INT 3
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PPUSH
73950: CALL_OW 69
73954: ST_TO_ADDR
// if not tmp then
73955: LD_VAR 0 4
73959: NOT
73960: IFFALSE 73964
// exit ;
73962: GO 74106
// enable_addtolog := true ;
73964: LD_ADDR_OWVAR 81
73968: PUSH
73969: LD_INT 1
73971: ST_TO_ADDR
// AddToLog ( [ ) ;
73972: LD_STRING [
73974: PPUSH
73975: CALL_OW 561
// for i in tmp do
73979: LD_ADDR_VAR 0 3
73983: PUSH
73984: LD_VAR 0 4
73988: PUSH
73989: FOR_IN
73990: IFFALSE 74097
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73992: LD_STRING [
73994: PUSH
73995: LD_VAR 0 3
73999: PPUSH
74000: CALL_OW 266
74004: STR
74005: PUSH
74006: LD_STRING , 
74008: STR
74009: PUSH
74010: LD_VAR 0 3
74014: PPUSH
74015: CALL_OW 250
74019: STR
74020: PUSH
74021: LD_STRING , 
74023: STR
74024: PUSH
74025: LD_VAR 0 3
74029: PPUSH
74030: CALL_OW 251
74034: STR
74035: PUSH
74036: LD_STRING , 
74038: STR
74039: PUSH
74040: LD_VAR 0 3
74044: PPUSH
74045: CALL_OW 254
74049: STR
74050: PUSH
74051: LD_STRING , 
74053: STR
74054: PUSH
74055: LD_VAR 0 3
74059: PPUSH
74060: LD_INT 1
74062: PPUSH
74063: CALL_OW 268
74067: STR
74068: PUSH
74069: LD_STRING , 
74071: STR
74072: PUSH
74073: LD_VAR 0 3
74077: PPUSH
74078: LD_INT 2
74080: PPUSH
74081: CALL_OW 268
74085: STR
74086: PUSH
74087: LD_STRING ],
74089: STR
74090: PPUSH
74091: CALL_OW 561
// end ;
74095: GO 73989
74097: POP
74098: POP
// AddToLog ( ]; ) ;
74099: LD_STRING ];
74101: PPUSH
74102: CALL_OW 561
// end ;
74106: LD_VAR 0 2
74110: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74111: LD_INT 0
74113: PPUSH
74114: PPUSH
74115: PPUSH
74116: PPUSH
74117: PPUSH
// if not area or not rate or not max then
74118: LD_VAR 0 1
74122: NOT
74123: PUSH
74124: LD_VAR 0 2
74128: NOT
74129: OR
74130: PUSH
74131: LD_VAR 0 4
74135: NOT
74136: OR
74137: IFFALSE 74141
// exit ;
74139: GO 74333
// while 1 do
74141: LD_INT 1
74143: IFFALSE 74333
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74145: LD_ADDR_VAR 0 9
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: LD_INT 1
74157: PPUSH
74158: CALL_OW 287
74162: PUSH
74163: LD_INT 10
74165: MUL
74166: ST_TO_ADDR
// r := rate / 10 ;
74167: LD_ADDR_VAR 0 7
74171: PUSH
74172: LD_VAR 0 2
74176: PUSH
74177: LD_INT 10
74179: DIVREAL
74180: ST_TO_ADDR
// time := 1 1$00 ;
74181: LD_ADDR_VAR 0 8
74185: PUSH
74186: LD_INT 2100
74188: ST_TO_ADDR
// if amount < min then
74189: LD_VAR 0 9
74193: PUSH
74194: LD_VAR 0 3
74198: LESS
74199: IFFALSE 74217
// r := r * 2 else
74201: LD_ADDR_VAR 0 7
74205: PUSH
74206: LD_VAR 0 7
74210: PUSH
74211: LD_INT 2
74213: MUL
74214: ST_TO_ADDR
74215: GO 74243
// if amount > max then
74217: LD_VAR 0 9
74221: PUSH
74222: LD_VAR 0 4
74226: GREATER
74227: IFFALSE 74243
// r := r / 2 ;
74229: LD_ADDR_VAR 0 7
74233: PUSH
74234: LD_VAR 0 7
74238: PUSH
74239: LD_INT 2
74241: DIVREAL
74242: ST_TO_ADDR
// time := time / r ;
74243: LD_ADDR_VAR 0 8
74247: PUSH
74248: LD_VAR 0 8
74252: PUSH
74253: LD_VAR 0 7
74257: DIVREAL
74258: ST_TO_ADDR
// if time < 0 then
74259: LD_VAR 0 8
74263: PUSH
74264: LD_INT 0
74266: LESS
74267: IFFALSE 74284
// time := time * - 1 ;
74269: LD_ADDR_VAR 0 8
74273: PUSH
74274: LD_VAR 0 8
74278: PUSH
74279: LD_INT 1
74281: NEG
74282: MUL
74283: ST_TO_ADDR
// wait ( time ) ;
74284: LD_VAR 0 8
74288: PPUSH
74289: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74293: LD_INT 35
74295: PPUSH
74296: LD_INT 875
74298: PPUSH
74299: CALL_OW 12
74303: PPUSH
74304: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74308: LD_INT 1
74310: PPUSH
74311: LD_INT 5
74313: PPUSH
74314: CALL_OW 12
74318: PPUSH
74319: LD_VAR 0 1
74323: PPUSH
74324: LD_INT 1
74326: PPUSH
74327: CALL_OW 55
// end ;
74331: GO 74141
// end ;
74333: LD_VAR 0 5
74337: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74338: LD_INT 0
74340: PPUSH
74341: PPUSH
74342: PPUSH
74343: PPUSH
74344: PPUSH
74345: PPUSH
74346: PPUSH
74347: PPUSH
// if not turrets or not factories then
74348: LD_VAR 0 1
74352: NOT
74353: PUSH
74354: LD_VAR 0 2
74358: NOT
74359: OR
74360: IFFALSE 74364
// exit ;
74362: GO 74671
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74364: LD_ADDR_VAR 0 10
74368: PUSH
74369: LD_INT 5
74371: PUSH
74372: LD_INT 6
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 2
74381: PUSH
74382: LD_INT 4
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 3
74391: PUSH
74392: LD_INT 5
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 24
74406: PUSH
74407: LD_INT 25
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 23
74416: PUSH
74417: LD_INT 27
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PUSH
74428: LD_INT 42
74430: PUSH
74431: LD_INT 43
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 44
74440: PUSH
74441: LD_INT 46
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 45
74450: PUSH
74451: LD_INT 47
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: LIST
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: LIST
74467: ST_TO_ADDR
// result := [ ] ;
74468: LD_ADDR_VAR 0 3
74472: PUSH
74473: EMPTY
74474: ST_TO_ADDR
// for i in turrets do
74475: LD_ADDR_VAR 0 4
74479: PUSH
74480: LD_VAR 0 1
74484: PUSH
74485: FOR_IN
74486: IFFALSE 74669
// begin nat := GetNation ( i ) ;
74488: LD_ADDR_VAR 0 7
74492: PUSH
74493: LD_VAR 0 4
74497: PPUSH
74498: CALL_OW 248
74502: ST_TO_ADDR
// weapon := 0 ;
74503: LD_ADDR_VAR 0 8
74507: PUSH
74508: LD_INT 0
74510: ST_TO_ADDR
// if not nat then
74511: LD_VAR 0 7
74515: NOT
74516: IFFALSE 74520
// continue ;
74518: GO 74485
// for j in list [ nat ] do
74520: LD_ADDR_VAR 0 5
74524: PUSH
74525: LD_VAR 0 10
74529: PUSH
74530: LD_VAR 0 7
74534: ARRAY
74535: PUSH
74536: FOR_IN
74537: IFFALSE 74578
// if GetBWeapon ( i ) = j [ 1 ] then
74539: LD_VAR 0 4
74543: PPUSH
74544: CALL_OW 269
74548: PUSH
74549: LD_VAR 0 5
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: EQUAL
74558: IFFALSE 74576
// begin weapon := j [ 2 ] ;
74560: LD_ADDR_VAR 0 8
74564: PUSH
74565: LD_VAR 0 5
74569: PUSH
74570: LD_INT 2
74572: ARRAY
74573: ST_TO_ADDR
// break ;
74574: GO 74578
// end ;
74576: GO 74536
74578: POP
74579: POP
// if not weapon then
74580: LD_VAR 0 8
74584: NOT
74585: IFFALSE 74589
// continue ;
74587: GO 74485
// for k in factories do
74589: LD_ADDR_VAR 0 6
74593: PUSH
74594: LD_VAR 0 2
74598: PUSH
74599: FOR_IN
74600: IFFALSE 74665
// begin weapons := AvailableWeaponList ( k ) ;
74602: LD_ADDR_VAR 0 9
74606: PUSH
74607: LD_VAR 0 6
74611: PPUSH
74612: CALL_OW 478
74616: ST_TO_ADDR
// if not weapons then
74617: LD_VAR 0 9
74621: NOT
74622: IFFALSE 74626
// continue ;
74624: GO 74599
// if weapon in weapons then
74626: LD_VAR 0 8
74630: PUSH
74631: LD_VAR 0 9
74635: IN
74636: IFFALSE 74663
// begin result := [ i , weapon ] ;
74638: LD_ADDR_VAR 0 3
74642: PUSH
74643: LD_VAR 0 4
74647: PUSH
74648: LD_VAR 0 8
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: ST_TO_ADDR
// exit ;
74657: POP
74658: POP
74659: POP
74660: POP
74661: GO 74671
// end ; end ;
74663: GO 74599
74665: POP
74666: POP
// end ;
74667: GO 74485
74669: POP
74670: POP
// end ;
74671: LD_VAR 0 3
74675: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74676: LD_INT 0
74678: PPUSH
// if not side or side > 8 then
74679: LD_VAR 0 3
74683: NOT
74684: PUSH
74685: LD_VAR 0 3
74689: PUSH
74690: LD_INT 8
74692: GREATER
74693: OR
74694: IFFALSE 74698
// exit ;
74696: GO 74757
// if not range then
74698: LD_VAR 0 4
74702: NOT
74703: IFFALSE 74714
// range := - 12 ;
74705: LD_ADDR_VAR 0 4
74709: PUSH
74710: LD_INT 12
74712: NEG
74713: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74714: LD_VAR 0 1
74718: PPUSH
74719: LD_VAR 0 2
74723: PPUSH
74724: LD_VAR 0 3
74728: PPUSH
74729: LD_VAR 0 4
74733: PPUSH
74734: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74738: LD_VAR 0 1
74742: PPUSH
74743: LD_VAR 0 2
74747: PPUSH
74748: LD_VAR 0 3
74752: PPUSH
74753: CALL_OW 331
// end ;
74757: LD_VAR 0 5
74761: RET
// export function Video ( mode ) ; begin
74762: LD_INT 0
74764: PPUSH
// ingame_video = mode ;
74765: LD_ADDR_OWVAR 52
74769: PUSH
74770: LD_VAR 0 1
74774: ST_TO_ADDR
// interface_hidden = mode ;
74775: LD_ADDR_OWVAR 54
74779: PUSH
74780: LD_VAR 0 1
74784: ST_TO_ADDR
// end ;
74785: LD_VAR 0 2
74789: RET
// export function Join ( array , element ) ; begin
74790: LD_INT 0
74792: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74793: LD_ADDR_VAR 0 3
74797: PUSH
74798: LD_VAR 0 1
74802: PPUSH
74803: LD_VAR 0 1
74807: PUSH
74808: LD_INT 1
74810: PLUS
74811: PPUSH
74812: LD_VAR 0 2
74816: PPUSH
74817: CALL_OW 1
74821: ST_TO_ADDR
// end ;
74822: LD_VAR 0 3
74826: RET
// export function JoinUnion ( array , element ) ; begin
74827: LD_INT 0
74829: PPUSH
// result := array union element ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: LD_VAR 0 1
74839: PUSH
74840: LD_VAR 0 2
74844: UNION
74845: ST_TO_ADDR
// end ;
74846: LD_VAR 0 3
74850: RET
// export function GetBehemoths ( side ) ; begin
74851: LD_INT 0
74853: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74854: LD_ADDR_VAR 0 2
74858: PUSH
74859: LD_INT 22
74861: PUSH
74862: LD_VAR 0 1
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 31
74873: PUSH
74874: LD_INT 25
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PPUSH
74885: CALL_OW 69
74889: ST_TO_ADDR
// end ;
74890: LD_VAR 0 2
74894: RET
// export function Shuffle ( array ) ; var i , index ; begin
74895: LD_INT 0
74897: PPUSH
74898: PPUSH
74899: PPUSH
// result := [ ] ;
74900: LD_ADDR_VAR 0 2
74904: PUSH
74905: EMPTY
74906: ST_TO_ADDR
// if not array then
74907: LD_VAR 0 1
74911: NOT
74912: IFFALSE 74916
// exit ;
74914: GO 75015
// Randomize ;
74916: CALL_OW 10
// for i = array downto 1 do
74920: LD_ADDR_VAR 0 3
74924: PUSH
74925: DOUBLE
74926: LD_VAR 0 1
74930: INC
74931: ST_TO_ADDR
74932: LD_INT 1
74934: PUSH
74935: FOR_DOWNTO
74936: IFFALSE 75013
// begin index := rand ( 1 , array ) ;
74938: LD_ADDR_VAR 0 4
74942: PUSH
74943: LD_INT 1
74945: PPUSH
74946: LD_VAR 0 1
74950: PPUSH
74951: CALL_OW 12
74955: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74956: LD_ADDR_VAR 0 2
74960: PUSH
74961: LD_VAR 0 2
74965: PPUSH
74966: LD_VAR 0 2
74970: PUSH
74971: LD_INT 1
74973: PLUS
74974: PPUSH
74975: LD_VAR 0 1
74979: PUSH
74980: LD_VAR 0 4
74984: ARRAY
74985: PPUSH
74986: CALL_OW 2
74990: ST_TO_ADDR
// array := Delete ( array , index ) ;
74991: LD_ADDR_VAR 0 1
74995: PUSH
74996: LD_VAR 0 1
75000: PPUSH
75001: LD_VAR 0 4
75005: PPUSH
75006: CALL_OW 3
75010: ST_TO_ADDR
// end ;
75011: GO 74935
75013: POP
75014: POP
// end ;
75015: LD_VAR 0 2
75019: RET
// export function GetBaseMaterials ( base ) ; begin
75020: LD_INT 0
75022: PPUSH
// result := [ 0 , 0 , 0 ] ;
75023: LD_ADDR_VAR 0 2
75027: PUSH
75028: LD_INT 0
75030: PUSH
75031: LD_INT 0
75033: PUSH
75034: LD_INT 0
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: LIST
75041: ST_TO_ADDR
// if not base then
75042: LD_VAR 0 1
75046: NOT
75047: IFFALSE 75051
// exit ;
75049: GO 75100
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75051: LD_ADDR_VAR 0 2
75055: PUSH
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_INT 1
75063: PPUSH
75064: CALL_OW 275
75068: PUSH
75069: LD_VAR 0 1
75073: PPUSH
75074: LD_INT 2
75076: PPUSH
75077: CALL_OW 275
75081: PUSH
75082: LD_VAR 0 1
75086: PPUSH
75087: LD_INT 3
75089: PPUSH
75090: CALL_OW 275
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: LIST
75099: ST_TO_ADDR
// end ;
75100: LD_VAR 0 2
75104: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75105: LD_INT 0
75107: PPUSH
75108: PPUSH
// result := array ;
75109: LD_ADDR_VAR 0 3
75113: PUSH
75114: LD_VAR 0 1
75118: ST_TO_ADDR
// if size > 0 then
75119: LD_VAR 0 2
75123: PUSH
75124: LD_INT 0
75126: GREATER
75127: IFFALSE 75173
// for i := array downto size do
75129: LD_ADDR_VAR 0 4
75133: PUSH
75134: DOUBLE
75135: LD_VAR 0 1
75139: INC
75140: ST_TO_ADDR
75141: LD_VAR 0 2
75145: PUSH
75146: FOR_DOWNTO
75147: IFFALSE 75171
// result := Delete ( result , result ) ;
75149: LD_ADDR_VAR 0 3
75153: PUSH
75154: LD_VAR 0 3
75158: PPUSH
75159: LD_VAR 0 3
75163: PPUSH
75164: CALL_OW 3
75168: ST_TO_ADDR
75169: GO 75146
75171: POP
75172: POP
// end ;
75173: LD_VAR 0 3
75177: RET
// export function ComExit ( unit ) ; var tmp ; begin
75178: LD_INT 0
75180: PPUSH
75181: PPUSH
// if not IsInUnit ( unit ) then
75182: LD_VAR 0 1
75186: PPUSH
75187: CALL_OW 310
75191: NOT
75192: IFFALSE 75196
// exit ;
75194: GO 75256
// tmp := IsInUnit ( unit ) ;
75196: LD_ADDR_VAR 0 3
75200: PUSH
75201: LD_VAR 0 1
75205: PPUSH
75206: CALL_OW 310
75210: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75211: LD_VAR 0 3
75215: PPUSH
75216: CALL_OW 247
75220: PUSH
75221: LD_INT 2
75223: EQUAL
75224: IFFALSE 75237
// ComExitVehicle ( unit ) else
75226: LD_VAR 0 1
75230: PPUSH
75231: CALL_OW 121
75235: GO 75246
// ComExitBuilding ( unit ) ;
75237: LD_VAR 0 1
75241: PPUSH
75242: CALL_OW 122
// result := tmp ;
75246: LD_ADDR_VAR 0 2
75250: PUSH
75251: LD_VAR 0 3
75255: ST_TO_ADDR
// end ;
75256: LD_VAR 0 2
75260: RET
// export function ComExitAll ( units ) ; var i ; begin
75261: LD_INT 0
75263: PPUSH
75264: PPUSH
// if not units then
75265: LD_VAR 0 1
75269: NOT
75270: IFFALSE 75274
// exit ;
75272: GO 75300
// for i in units do
75274: LD_ADDR_VAR 0 3
75278: PUSH
75279: LD_VAR 0 1
75283: PUSH
75284: FOR_IN
75285: IFFALSE 75298
// ComExit ( i ) ;
75287: LD_VAR 0 3
75291: PPUSH
75292: CALL 75178 0 1
75296: GO 75284
75298: POP
75299: POP
// end ;
75300: LD_VAR 0 2
75304: RET
// export function ResetHc ; begin
75305: LD_INT 0
75307: PPUSH
// InitHc ;
75308: CALL_OW 19
// hc_importance := 0 ;
75312: LD_ADDR_OWVAR 32
75316: PUSH
75317: LD_INT 0
75319: ST_TO_ADDR
// end ;
75320: LD_VAR 0 1
75324: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75325: LD_INT 0
75327: PPUSH
75328: PPUSH
75329: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75330: LD_ADDR_VAR 0 6
75334: PUSH
75335: LD_VAR 0 1
75339: PUSH
75340: LD_VAR 0 3
75344: PLUS
75345: PUSH
75346: LD_INT 2
75348: DIV
75349: ST_TO_ADDR
// if _x < 0 then
75350: LD_VAR 0 6
75354: PUSH
75355: LD_INT 0
75357: LESS
75358: IFFALSE 75375
// _x := _x * - 1 ;
75360: LD_ADDR_VAR 0 6
75364: PUSH
75365: LD_VAR 0 6
75369: PUSH
75370: LD_INT 1
75372: NEG
75373: MUL
75374: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75375: LD_ADDR_VAR 0 7
75379: PUSH
75380: LD_VAR 0 2
75384: PUSH
75385: LD_VAR 0 4
75389: PLUS
75390: PUSH
75391: LD_INT 2
75393: DIV
75394: ST_TO_ADDR
// if _y < 0 then
75395: LD_VAR 0 7
75399: PUSH
75400: LD_INT 0
75402: LESS
75403: IFFALSE 75420
// _y := _y * - 1 ;
75405: LD_ADDR_VAR 0 7
75409: PUSH
75410: LD_VAR 0 7
75414: PUSH
75415: LD_INT 1
75417: NEG
75418: MUL
75419: ST_TO_ADDR
// result := [ _x , _y ] ;
75420: LD_ADDR_VAR 0 5
75424: PUSH
75425: LD_VAR 0 6
75429: PUSH
75430: LD_VAR 0 7
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: ST_TO_ADDR
// end ;
75439: LD_VAR 0 5
75443: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75444: LD_INT 0
75446: PPUSH
75447: PPUSH
75448: PPUSH
75449: PPUSH
// task := GetTaskList ( unit ) ;
75450: LD_ADDR_VAR 0 7
75454: PUSH
75455: LD_VAR 0 1
75459: PPUSH
75460: CALL_OW 437
75464: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75465: LD_VAR 0 7
75469: NOT
75470: PUSH
75471: LD_VAR 0 1
75475: PPUSH
75476: LD_VAR 0 2
75480: PPUSH
75481: CALL_OW 308
75485: NOT
75486: AND
75487: IFFALSE 75491
// exit ;
75489: GO 75609
// if IsInArea ( unit , area ) then
75491: LD_VAR 0 1
75495: PPUSH
75496: LD_VAR 0 2
75500: PPUSH
75501: CALL_OW 308
75505: IFFALSE 75523
// begin ComMoveToArea ( unit , goAway ) ;
75507: LD_VAR 0 1
75511: PPUSH
75512: LD_VAR 0 3
75516: PPUSH
75517: CALL_OW 113
// exit ;
75521: GO 75609
// end ; if task [ 1 ] [ 1 ] <> M then
75523: LD_VAR 0 7
75527: PUSH
75528: LD_INT 1
75530: ARRAY
75531: PUSH
75532: LD_INT 1
75534: ARRAY
75535: PUSH
75536: LD_STRING M
75538: NONEQUAL
75539: IFFALSE 75543
// exit ;
75541: GO 75609
// x := task [ 1 ] [ 2 ] ;
75543: LD_ADDR_VAR 0 5
75547: PUSH
75548: LD_VAR 0 7
75552: PUSH
75553: LD_INT 1
75555: ARRAY
75556: PUSH
75557: LD_INT 2
75559: ARRAY
75560: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75561: LD_ADDR_VAR 0 6
75565: PUSH
75566: LD_VAR 0 7
75570: PUSH
75571: LD_INT 1
75573: ARRAY
75574: PUSH
75575: LD_INT 3
75577: ARRAY
75578: ST_TO_ADDR
// if InArea ( x , y , area ) then
75579: LD_VAR 0 5
75583: PPUSH
75584: LD_VAR 0 6
75588: PPUSH
75589: LD_VAR 0 2
75593: PPUSH
75594: CALL_OW 309
75598: IFFALSE 75609
// ComStop ( unit ) ;
75600: LD_VAR 0 1
75604: PPUSH
75605: CALL_OW 141
// end ;
75609: LD_VAR 0 4
75613: RET
// export function Abs ( value ) ; begin
75614: LD_INT 0
75616: PPUSH
// result := value ;
75617: LD_ADDR_VAR 0 2
75621: PUSH
75622: LD_VAR 0 1
75626: ST_TO_ADDR
// if value < 0 then
75627: LD_VAR 0 1
75631: PUSH
75632: LD_INT 0
75634: LESS
75635: IFFALSE 75652
// result := value * - 1 ;
75637: LD_ADDR_VAR 0 2
75641: PUSH
75642: LD_VAR 0 1
75646: PUSH
75647: LD_INT 1
75649: NEG
75650: MUL
75651: ST_TO_ADDR
// end ;
75652: LD_VAR 0 2
75656: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75657: LD_INT 0
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
75665: PPUSH
75666: PPUSH
// if not unit or not building then
75667: LD_VAR 0 1
75671: NOT
75672: PUSH
75673: LD_VAR 0 2
75677: NOT
75678: OR
75679: IFFALSE 75683
// exit ;
75681: GO 75909
// x := GetX ( building ) ;
75683: LD_ADDR_VAR 0 4
75687: PUSH
75688: LD_VAR 0 2
75692: PPUSH
75693: CALL_OW 250
75697: ST_TO_ADDR
// y := GetY ( building ) ;
75698: LD_ADDR_VAR 0 6
75702: PUSH
75703: LD_VAR 0 2
75707: PPUSH
75708: CALL_OW 251
75712: ST_TO_ADDR
// d := GetDir ( building ) ;
75713: LD_ADDR_VAR 0 8
75717: PUSH
75718: LD_VAR 0 2
75722: PPUSH
75723: CALL_OW 254
75727: ST_TO_ADDR
// r := 4 ;
75728: LD_ADDR_VAR 0 9
75732: PUSH
75733: LD_INT 4
75735: ST_TO_ADDR
// for i := 1 to 5 do
75736: LD_ADDR_VAR 0 10
75740: PUSH
75741: DOUBLE
75742: LD_INT 1
75744: DEC
75745: ST_TO_ADDR
75746: LD_INT 5
75748: PUSH
75749: FOR_TO
75750: IFFALSE 75907
// begin _x := ShiftX ( x , d , r + i ) ;
75752: LD_ADDR_VAR 0 5
75756: PUSH
75757: LD_VAR 0 4
75761: PPUSH
75762: LD_VAR 0 8
75766: PPUSH
75767: LD_VAR 0 9
75771: PUSH
75772: LD_VAR 0 10
75776: PLUS
75777: PPUSH
75778: CALL_OW 272
75782: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75783: LD_ADDR_VAR 0 7
75787: PUSH
75788: LD_VAR 0 6
75792: PPUSH
75793: LD_VAR 0 8
75797: PPUSH
75798: LD_VAR 0 9
75802: PUSH
75803: LD_VAR 0 10
75807: PLUS
75808: PPUSH
75809: CALL_OW 273
75813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75814: LD_VAR 0 5
75818: PPUSH
75819: LD_VAR 0 7
75823: PPUSH
75824: CALL_OW 488
75828: PUSH
75829: LD_VAR 0 5
75833: PPUSH
75834: LD_VAR 0 7
75838: PPUSH
75839: CALL_OW 428
75843: PPUSH
75844: CALL_OW 247
75848: PUSH
75849: LD_INT 3
75851: PUSH
75852: LD_INT 2
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: IN
75859: NOT
75860: AND
75861: IFFALSE 75905
// begin ComMoveXY ( unit , _x , _y ) ;
75863: LD_VAR 0 1
75867: PPUSH
75868: LD_VAR 0 5
75872: PPUSH
75873: LD_VAR 0 7
75877: PPUSH
75878: CALL_OW 111
// result := [ _x , _y ] ;
75882: LD_ADDR_VAR 0 3
75886: PUSH
75887: LD_VAR 0 5
75891: PUSH
75892: LD_VAR 0 7
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: ST_TO_ADDR
// exit ;
75901: POP
75902: POP
75903: GO 75909
// end ; end ;
75905: GO 75749
75907: POP
75908: POP
// end ;
75909: LD_VAR 0 3
75913: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75914: LD_INT 0
75916: PPUSH
75917: PPUSH
75918: PPUSH
// result := 0 ;
75919: LD_ADDR_VAR 0 3
75923: PUSH
75924: LD_INT 0
75926: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75927: LD_VAR 0 1
75931: PUSH
75932: LD_INT 0
75934: LESS
75935: PUSH
75936: LD_VAR 0 1
75940: PUSH
75941: LD_INT 8
75943: GREATER
75944: OR
75945: PUSH
75946: LD_VAR 0 2
75950: PUSH
75951: LD_INT 0
75953: LESS
75954: OR
75955: PUSH
75956: LD_VAR 0 2
75960: PUSH
75961: LD_INT 8
75963: GREATER
75964: OR
75965: IFFALSE 75969
// exit ;
75967: GO 76044
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75969: LD_ADDR_VAR 0 4
75973: PUSH
75974: LD_INT 22
75976: PUSH
75977: LD_VAR 0 2
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PPUSH
75986: CALL_OW 69
75990: PUSH
75991: FOR_IN
75992: IFFALSE 76042
// begin un := UnitShoot ( i ) ;
75994: LD_ADDR_VAR 0 5
75998: PUSH
75999: LD_VAR 0 4
76003: PPUSH
76004: CALL_OW 504
76008: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76009: LD_VAR 0 5
76013: PPUSH
76014: CALL_OW 255
76018: PUSH
76019: LD_VAR 0 1
76023: EQUAL
76024: IFFALSE 76040
// begin result := un ;
76026: LD_ADDR_VAR 0 3
76030: PUSH
76031: LD_VAR 0 5
76035: ST_TO_ADDR
// exit ;
76036: POP
76037: POP
76038: GO 76044
// end ; end ;
76040: GO 75991
76042: POP
76043: POP
// end ;
76044: LD_VAR 0 3
76048: RET
// export function GetCargoBay ( units ) ; begin
76049: LD_INT 0
76051: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76052: LD_ADDR_VAR 0 2
76056: PUSH
76057: LD_VAR 0 1
76061: PPUSH
76062: LD_INT 2
76064: PUSH
76065: LD_INT 34
76067: PUSH
76068: LD_INT 12
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 34
76077: PUSH
76078: LD_INT 51
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 34
76087: PUSH
76088: LD_INT 32
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: PUSH
76095: LD_INT 34
76097: PUSH
76098: LD_EXP 50
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: PPUSH
76114: CALL_OW 72
76118: ST_TO_ADDR
// end ;
76119: LD_VAR 0 2
76123: RET
// export function Negate ( value ) ; begin
76124: LD_INT 0
76126: PPUSH
// result := not value ;
76127: LD_ADDR_VAR 0 2
76131: PUSH
76132: LD_VAR 0 1
76136: NOT
76137: ST_TO_ADDR
// end ;
76138: LD_VAR 0 2
76142: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
76143: LD_INT 0
76145: PPUSH
// if x1 = x2 then
76146: LD_VAR 0 1
76150: PUSH
76151: LD_VAR 0 3
76155: EQUAL
76156: IFFALSE 76190
// begin if y1 > y2 then
76158: LD_VAR 0 2
76162: PUSH
76163: LD_VAR 0 4
76167: GREATER
76168: IFFALSE 76180
// result := 0 else
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_INT 0
76177: ST_TO_ADDR
76178: GO 76188
// result := 3 ;
76180: LD_ADDR_VAR 0 5
76184: PUSH
76185: LD_INT 3
76187: ST_TO_ADDR
// exit ;
76188: GO 76276
// end ; if y1 = y2 then
76190: LD_VAR 0 2
76194: PUSH
76195: LD_VAR 0 4
76199: EQUAL
76200: IFFALSE 76234
// begin if x1 > x2 then
76202: LD_VAR 0 1
76206: PUSH
76207: LD_VAR 0 3
76211: GREATER
76212: IFFALSE 76224
// result := 1 else
76214: LD_ADDR_VAR 0 5
76218: PUSH
76219: LD_INT 1
76221: ST_TO_ADDR
76222: GO 76232
// result := 4 ;
76224: LD_ADDR_VAR 0 5
76228: PUSH
76229: LD_INT 4
76231: ST_TO_ADDR
// exit ;
76232: GO 76276
// end ; if x1 > x2 and y1 > y2 then
76234: LD_VAR 0 1
76238: PUSH
76239: LD_VAR 0 3
76243: GREATER
76244: PUSH
76245: LD_VAR 0 2
76249: PUSH
76250: LD_VAR 0 4
76254: GREATER
76255: AND
76256: IFFALSE 76268
// result := 2 else
76258: LD_ADDR_VAR 0 5
76262: PUSH
76263: LD_INT 2
76265: ST_TO_ADDR
76266: GO 76276
// result := 5 ;
76268: LD_ADDR_VAR 0 5
76272: PUSH
76273: LD_INT 5
76275: ST_TO_ADDR
// end ;
76276: LD_VAR 0 5
76280: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76281: LD_INT 0
76283: PPUSH
76284: PPUSH
// if not driver or not IsInUnit ( driver ) then
76285: LD_VAR 0 1
76289: NOT
76290: PUSH
76291: LD_VAR 0 1
76295: PPUSH
76296: CALL_OW 310
76300: NOT
76301: OR
76302: IFFALSE 76306
// exit ;
76304: GO 76396
// vehicle := IsInUnit ( driver ) ;
76306: LD_ADDR_VAR 0 3
76310: PUSH
76311: LD_VAR 0 1
76315: PPUSH
76316: CALL_OW 310
76320: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76321: LD_VAR 0 1
76325: PPUSH
76326: LD_STRING \
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: LD_INT 0
76334: PUSH
76335: LD_INT 0
76337: PUSH
76338: LD_INT 0
76340: PUSH
76341: LD_INT 0
76343: PUSH
76344: LD_INT 0
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: LIST
76355: PUSH
76356: LD_STRING E
76358: PUSH
76359: LD_INT 0
76361: PUSH
76362: LD_INT 0
76364: PUSH
76365: LD_VAR 0 3
76369: PUSH
76370: LD_INT 0
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: LD_INT 0
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PPUSH
76392: CALL_OW 446
// end ;
76396: LD_VAR 0 2
76400: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76401: LD_INT 0
76403: PPUSH
76404: PPUSH
// if not driver or not IsInUnit ( driver ) then
76405: LD_VAR 0 1
76409: NOT
76410: PUSH
76411: LD_VAR 0 1
76415: PPUSH
76416: CALL_OW 310
76420: NOT
76421: OR
76422: IFFALSE 76426
// exit ;
76424: GO 76516
// vehicle := IsInUnit ( driver ) ;
76426: LD_ADDR_VAR 0 3
76430: PUSH
76431: LD_VAR 0 1
76435: PPUSH
76436: CALL_OW 310
76440: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76441: LD_VAR 0 1
76445: PPUSH
76446: LD_STRING \
76448: PUSH
76449: LD_INT 0
76451: PUSH
76452: LD_INT 0
76454: PUSH
76455: LD_INT 0
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: LD_INT 0
76463: PUSH
76464: LD_INT 0
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: PUSH
76476: LD_STRING E
76478: PUSH
76479: LD_INT 0
76481: PUSH
76482: LD_INT 0
76484: PUSH
76485: LD_VAR 0 3
76489: PUSH
76490: LD_INT 0
76492: PUSH
76493: LD_INT 0
76495: PUSH
76496: LD_INT 0
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PPUSH
76512: CALL_OW 447
// end ;
76516: LD_VAR 0 2
76520: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76521: LD_INT 0
76523: PPUSH
76524: PPUSH
76525: PPUSH
// tmp := [ ] ;
76526: LD_ADDR_VAR 0 5
76530: PUSH
76531: EMPTY
76532: ST_TO_ADDR
// for i in units do
76533: LD_ADDR_VAR 0 4
76537: PUSH
76538: LD_VAR 0 1
76542: PUSH
76543: FOR_IN
76544: IFFALSE 76582
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 5
76555: PPUSH
76556: LD_VAR 0 5
76560: PUSH
76561: LD_INT 1
76563: PLUS
76564: PPUSH
76565: LD_VAR 0 4
76569: PPUSH
76570: CALL_OW 256
76574: PPUSH
76575: CALL_OW 2
76579: ST_TO_ADDR
76580: GO 76543
76582: POP
76583: POP
// if not tmp then
76584: LD_VAR 0 5
76588: NOT
76589: IFFALSE 76593
// exit ;
76591: GO 76641
// if asc then
76593: LD_VAR 0 2
76597: IFFALSE 76621
// result := SortListByListAsc ( units , tmp ) else
76599: LD_ADDR_VAR 0 3
76603: PUSH
76604: LD_VAR 0 1
76608: PPUSH
76609: LD_VAR 0 5
76613: PPUSH
76614: CALL_OW 76
76618: ST_TO_ADDR
76619: GO 76641
// result := SortListByListDesc ( units , tmp ) ;
76621: LD_ADDR_VAR 0 3
76625: PUSH
76626: LD_VAR 0 1
76630: PPUSH
76631: LD_VAR 0 5
76635: PPUSH
76636: CALL_OW 77
76640: ST_TO_ADDR
// end ;
76641: LD_VAR 0 3
76645: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76646: LD_INT 0
76648: PPUSH
76649: PPUSH
// task := GetTaskList ( mech ) ;
76650: LD_ADDR_VAR 0 4
76654: PUSH
76655: LD_VAR 0 1
76659: PPUSH
76660: CALL_OW 437
76664: ST_TO_ADDR
// if not task then
76665: LD_VAR 0 4
76669: NOT
76670: IFFALSE 76674
// exit ;
76672: GO 76716
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76674: LD_ADDR_VAR 0 3
76678: PUSH
76679: LD_VAR 0 4
76683: PUSH
76684: LD_INT 1
76686: ARRAY
76687: PUSH
76688: LD_INT 1
76690: ARRAY
76691: PUSH
76692: LD_STRING r
76694: EQUAL
76695: PUSH
76696: LD_VAR 0 4
76700: PUSH
76701: LD_INT 1
76703: ARRAY
76704: PUSH
76705: LD_INT 4
76707: ARRAY
76708: PUSH
76709: LD_VAR 0 2
76713: EQUAL
76714: AND
76715: ST_TO_ADDR
// end ;
76716: LD_VAR 0 3
76720: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76721: LD_INT 0
76723: PPUSH
// SetDir ( unit , d ) ;
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_VAR 0 4
76733: PPUSH
76734: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 2
76747: PPUSH
76748: LD_VAR 0 3
76752: PPUSH
76753: LD_VAR 0 5
76757: PPUSH
76758: CALL_OW 48
// end ;
76762: LD_VAR 0 6
76766: RET
// export function ToNaturalNumber ( number ) ; begin
76767: LD_INT 0
76769: PPUSH
// result := number div 1 ;
76770: LD_ADDR_VAR 0 2
76774: PUSH
76775: LD_VAR 0 1
76779: PUSH
76780: LD_INT 1
76782: DIV
76783: ST_TO_ADDR
// if number < 0 then
76784: LD_VAR 0 1
76788: PUSH
76789: LD_INT 0
76791: LESS
76792: IFFALSE 76802
// result := 0 ;
76794: LD_ADDR_VAR 0 2
76798: PUSH
76799: LD_INT 0
76801: ST_TO_ADDR
// end ;
76802: LD_VAR 0 2
76806: RET
// export function SortByClass ( units , class ) ; var un ; begin
76807: LD_INT 0
76809: PPUSH
76810: PPUSH
// if not units or not class then
76811: LD_VAR 0 1
76815: NOT
76816: PUSH
76817: LD_VAR 0 2
76821: NOT
76822: OR
76823: IFFALSE 76827
// exit ;
76825: GO 76922
// result := [ ] ;
76827: LD_ADDR_VAR 0 3
76831: PUSH
76832: EMPTY
76833: ST_TO_ADDR
// for un in units do
76834: LD_ADDR_VAR 0 4
76838: PUSH
76839: LD_VAR 0 1
76843: PUSH
76844: FOR_IN
76845: IFFALSE 76920
// if GetClass ( un ) = class then
76847: LD_VAR 0 4
76851: PPUSH
76852: CALL_OW 257
76856: PUSH
76857: LD_VAR 0 2
76861: EQUAL
76862: IFFALSE 76889
// result := Insert ( result , 1 , un ) else
76864: LD_ADDR_VAR 0 3
76868: PUSH
76869: LD_VAR 0 3
76873: PPUSH
76874: LD_INT 1
76876: PPUSH
76877: LD_VAR 0 4
76881: PPUSH
76882: CALL_OW 2
76886: ST_TO_ADDR
76887: GO 76918
// result := Replace ( result , result + 1 , un ) ;
76889: LD_ADDR_VAR 0 3
76893: PUSH
76894: LD_VAR 0 3
76898: PPUSH
76899: LD_VAR 0 3
76903: PUSH
76904: LD_INT 1
76906: PLUS
76907: PPUSH
76908: LD_VAR 0 4
76912: PPUSH
76913: CALL_OW 1
76917: ST_TO_ADDR
76918: GO 76844
76920: POP
76921: POP
// end ;
76922: LD_VAR 0 3
76926: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76927: LD_INT 0
76929: PPUSH
76930: PPUSH
76931: PPUSH
76932: PPUSH
76933: PPUSH
76934: PPUSH
76935: PPUSH
// result := [ ] ;
76936: LD_ADDR_VAR 0 4
76940: PUSH
76941: EMPTY
76942: ST_TO_ADDR
// if x - r < 0 then
76943: LD_VAR 0 1
76947: PUSH
76948: LD_VAR 0 3
76952: MINUS
76953: PUSH
76954: LD_INT 0
76956: LESS
76957: IFFALSE 76969
// min_x := 0 else
76959: LD_ADDR_VAR 0 8
76963: PUSH
76964: LD_INT 0
76966: ST_TO_ADDR
76967: GO 76985
// min_x := x - r ;
76969: LD_ADDR_VAR 0 8
76973: PUSH
76974: LD_VAR 0 1
76978: PUSH
76979: LD_VAR 0 3
76983: MINUS
76984: ST_TO_ADDR
// if y - r < 0 then
76985: LD_VAR 0 2
76989: PUSH
76990: LD_VAR 0 3
76994: MINUS
76995: PUSH
76996: LD_INT 0
76998: LESS
76999: IFFALSE 77011
// min_y := 0 else
77001: LD_ADDR_VAR 0 7
77005: PUSH
77006: LD_INT 0
77008: ST_TO_ADDR
77009: GO 77027
// min_y := y - r ;
77011: LD_ADDR_VAR 0 7
77015: PUSH
77016: LD_VAR 0 2
77020: PUSH
77021: LD_VAR 0 3
77025: MINUS
77026: ST_TO_ADDR
// max_x := x + r ;
77027: LD_ADDR_VAR 0 9
77031: PUSH
77032: LD_VAR 0 1
77036: PUSH
77037: LD_VAR 0 3
77041: PLUS
77042: ST_TO_ADDR
// max_y := y + r ;
77043: LD_ADDR_VAR 0 10
77047: PUSH
77048: LD_VAR 0 2
77052: PUSH
77053: LD_VAR 0 3
77057: PLUS
77058: ST_TO_ADDR
// for _x = min_x to max_x do
77059: LD_ADDR_VAR 0 5
77063: PUSH
77064: DOUBLE
77065: LD_VAR 0 8
77069: DEC
77070: ST_TO_ADDR
77071: LD_VAR 0 9
77075: PUSH
77076: FOR_TO
77077: IFFALSE 77178
// for _y = min_y to max_y do
77079: LD_ADDR_VAR 0 6
77083: PUSH
77084: DOUBLE
77085: LD_VAR 0 7
77089: DEC
77090: ST_TO_ADDR
77091: LD_VAR 0 10
77095: PUSH
77096: FOR_TO
77097: IFFALSE 77174
// begin if not ValidHex ( _x , _y ) then
77099: LD_VAR 0 5
77103: PPUSH
77104: LD_VAR 0 6
77108: PPUSH
77109: CALL_OW 488
77113: NOT
77114: IFFALSE 77118
// continue ;
77116: GO 77096
// if GetResourceTypeXY ( _x , _y ) then
77118: LD_VAR 0 5
77122: PPUSH
77123: LD_VAR 0 6
77127: PPUSH
77128: CALL_OW 283
77132: IFFALSE 77172
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77134: LD_ADDR_VAR 0 4
77138: PUSH
77139: LD_VAR 0 4
77143: PPUSH
77144: LD_VAR 0 4
77148: PUSH
77149: LD_INT 1
77151: PLUS
77152: PPUSH
77153: LD_VAR 0 5
77157: PUSH
77158: LD_VAR 0 6
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PPUSH
77167: CALL_OW 1
77171: ST_TO_ADDR
// end ;
77172: GO 77096
77174: POP
77175: POP
77176: GO 77076
77178: POP
77179: POP
// end ;
77180: LD_VAR 0 4
77184: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
77185: LD_INT 0
77187: PPUSH
77188: PPUSH
77189: PPUSH
77190: PPUSH
77191: PPUSH
77192: PPUSH
// if not units then
77193: LD_VAR 0 1
77197: NOT
77198: IFFALSE 77202
// exit ;
77200: GO 77603
// result := UnitFilter ( units , [ f_ok ] ) ;
77202: LD_ADDR_VAR 0 3
77206: PUSH
77207: LD_VAR 0 1
77211: PPUSH
77212: LD_INT 50
77214: PUSH
77215: EMPTY
77216: LIST
77217: PPUSH
77218: CALL_OW 72
77222: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77223: LD_ADDR_VAR 0 7
77227: PUSH
77228: LD_VAR 0 1
77232: PUSH
77233: LD_INT 1
77235: ARRAY
77236: PPUSH
77237: CALL_OW 255
77241: ST_TO_ADDR
// if not result then
77242: LD_VAR 0 3
77246: NOT
77247: IFFALSE 77251
// exit ;
77249: GO 77603
// for i in result do
77251: LD_ADDR_VAR 0 4
77255: PUSH
77256: LD_VAR 0 3
77260: PUSH
77261: FOR_IN
77262: IFFALSE 77601
// begin tag := GetTag ( i ) + 1 ;
77264: LD_ADDR_VAR 0 8
77268: PUSH
77269: LD_VAR 0 4
77273: PPUSH
77274: CALL_OW 110
77278: PUSH
77279: LD_INT 1
77281: PLUS
77282: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77283: LD_ADDR_VAR 0 6
77287: PUSH
77288: LD_VAR 0 4
77292: PPUSH
77293: CALL_OW 250
77297: PPUSH
77298: LD_VAR 0 4
77302: PPUSH
77303: CALL_OW 251
77307: PPUSH
77308: LD_INT 6
77310: PPUSH
77311: CALL 76927 0 3
77315: ST_TO_ADDR
// if cr then
77316: LD_VAR 0 6
77320: IFFALSE 77359
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77322: LD_VAR 0 4
77326: PPUSH
77327: LD_VAR 0 6
77331: PUSH
77332: LD_INT 1
77334: ARRAY
77335: PUSH
77336: LD_INT 1
77338: ARRAY
77339: PPUSH
77340: LD_VAR 0 6
77344: PUSH
77345: LD_INT 1
77347: ARRAY
77348: PUSH
77349: LD_INT 2
77351: ARRAY
77352: PPUSH
77353: CALL_OW 116
77357: GO 77599
// if path > tag then
77359: LD_VAR 0 2
77363: PUSH
77364: LD_VAR 0 8
77368: GREATER
77369: IFFALSE 77547
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
77371: LD_ADDR_VAR 0 5
77375: PUSH
77376: LD_INT 81
77378: PUSH
77379: LD_VAR 0 7
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: LD_INT 91
77390: PUSH
77391: LD_VAR 0 4
77395: PUSH
77396: LD_INT 12
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PPUSH
77408: CALL_OW 69
77412: ST_TO_ADDR
// if enemy then
77413: LD_VAR 0 5
77417: IFFALSE 77445
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77419: LD_VAR 0 4
77423: PPUSH
77424: LD_VAR 0 5
77428: PPUSH
77429: LD_VAR 0 4
77433: PPUSH
77434: CALL_OW 74
77438: PPUSH
77439: CALL_OW 115
77443: GO 77545
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77445: LD_VAR 0 4
77449: PPUSH
77450: LD_VAR 0 2
77454: PUSH
77455: LD_VAR 0 8
77459: ARRAY
77460: PUSH
77461: LD_INT 1
77463: ARRAY
77464: PPUSH
77465: LD_VAR 0 2
77469: PUSH
77470: LD_VAR 0 8
77474: ARRAY
77475: PUSH
77476: LD_INT 2
77478: ARRAY
77479: PPUSH
77480: CALL_OW 297
77484: PUSH
77485: LD_INT 6
77487: GREATER
77488: IFFALSE 77531
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77490: LD_VAR 0 4
77494: PPUSH
77495: LD_VAR 0 2
77499: PUSH
77500: LD_VAR 0 8
77504: ARRAY
77505: PUSH
77506: LD_INT 1
77508: ARRAY
77509: PPUSH
77510: LD_VAR 0 2
77514: PUSH
77515: LD_VAR 0 8
77519: ARRAY
77520: PUSH
77521: LD_INT 2
77523: ARRAY
77524: PPUSH
77525: CALL_OW 114
77529: GO 77545
// SetTag ( i , tag ) ;
77531: LD_VAR 0 4
77535: PPUSH
77536: LD_VAR 0 8
77540: PPUSH
77541: CALL_OW 109
// end else
77545: GO 77599
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77547: LD_ADDR_VAR 0 5
77551: PUSH
77552: LD_INT 81
77554: PUSH
77555: LD_VAR 0 7
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PPUSH
77564: CALL_OW 69
77568: ST_TO_ADDR
// if enemy then
77569: LD_VAR 0 5
77573: IFFALSE 77599
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77575: LD_VAR 0 4
77579: PPUSH
77580: LD_VAR 0 5
77584: PPUSH
77585: LD_VAR 0 4
77589: PPUSH
77590: CALL_OW 74
77594: PPUSH
77595: CALL_OW 115
// end ; end ;
77599: GO 77261
77601: POP
77602: POP
// end ; end_of_file
77603: LD_VAR 0 3
77607: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77608: LD_VAR 0 1
77612: PUSH
77613: LD_INT 200
77615: DOUBLE
77616: GREATEREQUAL
77617: IFFALSE 77625
77619: LD_INT 299
77621: DOUBLE
77622: LESSEQUAL
77623: IFTRUE 77627
77625: GO 77659
77627: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77628: LD_VAR 0 1
77632: PPUSH
77633: LD_VAR 0 2
77637: PPUSH
77638: LD_VAR 0 3
77642: PPUSH
77643: LD_VAR 0 4
77647: PPUSH
77648: LD_VAR 0 5
77652: PPUSH
77653: CALL 34170 0 5
77657: GO 77736
77659: LD_INT 300
77661: DOUBLE
77662: GREATEREQUAL
77663: IFFALSE 77671
77665: LD_INT 399
77667: DOUBLE
77668: LESSEQUAL
77669: IFTRUE 77673
77671: GO 77735
77673: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77674: LD_VAR 0 1
77678: PPUSH
77679: LD_VAR 0 2
77683: PPUSH
77684: LD_VAR 0 3
77688: PPUSH
77689: LD_VAR 0 4
77693: PPUSH
77694: LD_VAR 0 5
77698: PPUSH
77699: LD_VAR 0 6
77703: PPUSH
77704: LD_VAR 0 7
77708: PPUSH
77709: LD_VAR 0 8
77713: PPUSH
77714: LD_VAR 0 9
77718: PPUSH
77719: LD_VAR 0 10
77723: PPUSH
77724: LD_VAR 0 11
77728: PPUSH
77729: CALL 32068 0 11
77733: GO 77736
77735: POP
// end ;
77736: PPOPN 11
77738: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77739: LD_VAR 0 1
77743: PPUSH
77744: LD_VAR 0 2
77748: PPUSH
77749: LD_VAR 0 3
77753: PPUSH
77754: LD_VAR 0 4
77758: PPUSH
77759: LD_VAR 0 5
77763: PPUSH
77764: CALL 34162 0 5
// end ; end_of_file
77768: PPOPN 5
77770: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_VAR 0 2
77780: PPUSH
77781: LD_VAR 0 3
77785: PPUSH
77786: LD_VAR 0 4
77790: PPUSH
77791: LD_VAR 0 5
77795: PPUSH
77796: LD_VAR 0 6
77800: PPUSH
77801: CALL 20263 0 6
// end ;
77805: PPOPN 6
77807: END
