// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6622 0 0
// PrepareNature ;
 290: CALL 23926 0 0
// PrepareRussian ;
 294: CALL 5782 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6184 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6184 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6184 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6184 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6184 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6184 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6184 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6184 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6184 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6184 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 23
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 26
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 69
3066: PUSH
3067: LD_EXP 3
3071: PUSH
3072: LD_EXP 4
3076: PUSH
3077: LD_EXP 8
3081: PUSH
3082: LD_EXP 9
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: DIFF
3099: ST_TO_ADDR
// for i in _tmp do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_VAR 0 4
3109: PUSH
3110: FOR_IN
3111: IFFALSE 3152
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 32
3120: PPUSH
3121: CALL_OW 308
3125: PUSH
3126: LD_VAR 0 2
3130: PPUSH
3131: CALL_OW 302
3135: AND
3136: IFFALSE 3150
// begin tmp := i ;
3138: LD_ADDR_VAR 0 3
3142: PUSH
3143: LD_VAR 0 2
3147: ST_TO_ADDR
// break ;
3148: GO 3152
// end ;
3150: GO 3110
3152: POP
3153: POP
// if not tmp then
3154: LD_VAR 0 3
3158: NOT
3159: IFFALSE 3171
// tmp := JMM ;
3161: LD_ADDR_VAR 0 3
3165: PUSH
3166: LD_EXP 1
3170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3171: LD_INT 35
3173: PPUSH
3174: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3178: LD_INT 81
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 92
3190: PUSH
3191: LD_VAR 0 3
3195: PPUSH
3196: CALL_OW 250
3200: PUSH
3201: LD_VAR 0 3
3205: PPUSH
3206: CALL_OW 251
3210: PUSH
3211: LD_INT 22
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: NOT
3229: PUSH
3230: LD_INT 22
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 21
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 92
3252: PUSH
3253: LD_VAR 0 3
3257: PPUSH
3258: CALL_OW 250
3262: PUSH
3263: LD_VAR 0 3
3267: PPUSH
3268: CALL_OW 251
3272: PUSH
3273: LD_INT 20
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 69
3291: AND
3292: IFFALSE 3171
// blockSpawn = 1 ;
3294: LD_ADDR_EXP 29
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// uc_side = 4 ;
3302: LD_ADDR_OWVAR 20
3306: PUSH
3307: LD_INT 4
3309: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3310: LD_ADDR_EXP 15
3314: PUSH
3315: LD_STRING Joan
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL 6184 0 2
3325: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_VAR 0 3
3335: PPUSH
3336: CALL_OW 250
3340: PPUSH
3341: LD_VAR 0 3
3345: PPUSH
3346: CALL_OW 251
3350: PPUSH
3351: LD_INT 5
3353: PPUSH
3354: LD_INT 1
3356: PPUSH
3357: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3361: LD_EXP 15
3365: PPUSH
3366: LD_INT 250
3368: PPUSH
3369: CALL_OW 234
// InGameOn ;
3373: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3377: LD_EXP 15
3381: PPUSH
3382: CALL_OW 87
// wait ( 0 0$2 ) ;
3386: LD_INT 70
3388: PPUSH
3389: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3402: LD_VAR 0 3
3406: PPUSH
3407: CALL_OW 122
// wait ( 0 0$1 ) ;
3411: LD_INT 35
3413: PPUSH
3414: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_EXP 15
3427: PPUSH
3428: CALL_OW 112
// wait ( 0 0$2 ) ;
3432: LD_INT 70
3434: PPUSH
3435: CALL_OW 67
// DialogueOn ;
3439: CALL_OW 6
// if tmp = JMM then
3443: LD_VAR 0 3
3447: PUSH
3448: LD_EXP 1
3452: EQUAL
3453: IFFALSE 3602
// begin ComTurnUnit ( JMM , Joan ) ;
3455: LD_EXP 1
3459: PPUSH
3460: LD_EXP 15
3464: PPUSH
3465: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3469: LD_EXP 1
3473: PPUSH
3474: LD_STRING D5b-JMM-1
3476: PPUSH
3477: CALL_OW 88
// DialogueOff ;
3481: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3485: LD_EXP 15
3489: PPUSH
3490: LD_INT 500
3492: PPUSH
3493: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3497: LD_EXP 15
3501: PPUSH
3502: LD_EXP 1
3506: PPUSH
3507: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3511: LD_EXP 1
3515: PPUSH
3516: LD_EXP 15
3520: PPUSH
3521: CALL_OW 119
// wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// DialogueOn ;
3532: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3536: LD_EXP 15
3540: PPUSH
3541: LD_STRING D5b-Joan-1
3543: PPUSH
3544: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3548: LD_EXP 1
3552: PPUSH
3553: LD_STRING D5b-JMM-2
3555: PPUSH
3556: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3560: LD_EXP 15
3564: PPUSH
3565: LD_STRING D5b-Joan-2
3567: PPUSH
3568: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3572: LD_EXP 1
3576: PPUSH
3577: LD_STRING D5b-JMM-3
3579: PPUSH
3580: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3584: LD_EXP 15
3588: PPUSH
3589: LD_STRING D5b-Joan-3
3591: PPUSH
3592: CALL_OW 88
// DialogueOff ;
3596: CALL_OW 7
// end else
3600: GO 3976
// begin ComTurnUnit ( tmp , Joan ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_EXP 15
3611: PPUSH
3612: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3616: LD_VAR 0 3
3620: PPUSH
3621: LD_STRING D5a-Sol1-1
3623: PPUSH
3624: CALL_OW 88
// DialogueOff ;
3628: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3632: LD_EXP 15
3636: PPUSH
3637: LD_INT 500
3639: PPUSH
3640: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3644: LD_EXP 15
3648: PPUSH
3649: LD_VAR 0 3
3653: PPUSH
3654: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_EXP 15
3667: PPUSH
3668: CALL_OW 119
// wait ( 0 0$1 ) ;
3672: LD_INT 35
3674: PPUSH
3675: CALL_OW 67
// DialogueOn ;
3679: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3683: LD_EXP 15
3687: PPUSH
3688: LD_STRING D5a-Joan-1
3690: PPUSH
3691: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_STRING D5a-Sol1-2
3702: PPUSH
3703: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3707: LD_EXP 15
3711: PPUSH
3712: LD_STRING D5a-Joan-2
3714: PPUSH
3715: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_STRING D5a-Sol1-3
3726: PPUSH
3727: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3731: LD_EXP 15
3735: PPUSH
3736: LD_STRING D5a-Joan-3
3738: PPUSH
3739: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_STRING D5a-Sol1-4
3750: PPUSH
3751: CALL_OW 88
// DialogueOff ;
3755: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3759: LD_EXP 1
3763: PUSH
3764: LD_INT 55
3766: PUSH
3767: EMPTY
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: IN
3775: IFFALSE 3798
// begin ComMoveUnit ( JMM , Joan ) ;
3777: LD_EXP 1
3781: PPUSH
3782: LD_EXP 15
3786: PPUSH
3787: CALL_OW 112
// wait ( 0 0$05 ) ;
3791: LD_INT 175
3793: PPUSH
3794: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3807: LD_EXP 1
3811: PPUSH
3812: CALL_OW 122
// wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3830: LD_EXP 15
3834: PUSH
3835: LD_VAR 0 3
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3853: LD_EXP 15
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 296
3867: PUSH
3868: LD_INT 5
3870: LESS
3871: IFFALSE 3823
// ComTurnUnit ( Joan , JMM ) ;
3873: LD_EXP 15
3877: PPUSH
3878: LD_EXP 1
3882: PPUSH
3883: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3887: LD_EXP 1
3891: PPUSH
3892: LD_EXP 15
3896: PPUSH
3897: CALL_OW 119
// wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// DialogueOn ;
3908: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3912: LD_EXP 15
3916: PPUSH
3917: LD_STRING D5a-Joan-4
3919: PPUSH
3920: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3924: LD_EXP 1
3928: PPUSH
3929: LD_STRING D5a-JMM-4
3931: PPUSH
3932: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3936: LD_EXP 15
3940: PPUSH
3941: LD_STRING D5a-Joan-5
3943: PPUSH
3944: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_STRING D5a-JMM-5
3955: PPUSH
3956: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3960: LD_EXP 15
3964: PPUSH
3965: LD_STRING D5a-Joan-6
3967: PPUSH
3968: CALL_OW 88
// DialogueOff ;
3972: CALL_OW 7
// end ; DialogueOn ;
3976: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3980: LD_EXP 1
3984: PPUSH
3985: LD_STRING D6-JMM-1
3987: PPUSH
3988: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3992: LD_EXP 15
3996: PPUSH
3997: LD_STRING D6-Joan-1
3999: PPUSH
4000: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D6-JMM-2
4011: PPUSH
4012: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4016: LD_EXP 15
4020: PPUSH
4021: LD_STRING D6-Joan-2
4023: PPUSH
4024: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4028: LD_EXP 1
4032: PPUSH
4033: LD_STRING D6-JMM-3
4035: PPUSH
4036: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4040: LD_EXP 15
4044: PPUSH
4045: LD_STRING D6-Joan-3
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4052: LD_EXP 1
4056: PPUSH
4057: LD_STRING D6-JMM-4
4059: PPUSH
4060: CALL_OW 88
// DialogueOff ;
4064: CALL_OW 7
// InGameOff ;
4068: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4072: LD_EXP 15
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4084: LD_STRING MJ
4086: PPUSH
4087: CALL_OW 337
// JoanStatus = 1 ;
4091: LD_ADDR_EXP 16
4095: PUSH
4096: LD_INT 1
4098: ST_TO_ADDR
// blockSpawn = 0 ;
4099: LD_ADDR_EXP 29
4103: PUSH
4104: LD_INT 0
4106: ST_TO_ADDR
// end ;
4107: LD_VAR 0 1
4111: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4112: LD_INT 0
4114: PPUSH
4115: PPUSH
// if not number or number > 8 then
4116: LD_VAR 0 1
4120: NOT
4121: PUSH
4122: LD_VAR 0 1
4126: PUSH
4127: LD_INT 8
4129: GREATER
4130: OR
4131: IFFALSE 4135
// exit ;
4133: GO 5677
// repeat wait ( 0 0$7 ) ;
4135: LD_INT 245
4137: PPUSH
4138: CALL_OW 67
// until blockSpawn = 0 ;
4142: LD_EXP 29
4146: PUSH
4147: LD_INT 0
4149: EQUAL
4150: IFFALSE 4135
// uc_side = 1 ;
4152: LD_ADDR_OWVAR 20
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// uc_nation = 1 ;
4160: LD_ADDR_OWVAR 21
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// InitHc ;
4168: CALL_OW 19
// if number = 1 then
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4356
// begin hc_class := 3 ;
4182: LD_ADDR_OWVAR 28
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// hc_sex := sex_male ;
4190: LD_ADDR_OWVAR 27
4194: PUSH
4195: LD_INT 1
4197: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4198: LD_ADDR_OWVAR 33
4202: PUSH
4203: LD_STRING SecondCharsGal
4205: ST_TO_ADDR
// hc_face_number := 55 ;
4206: LD_ADDR_OWVAR 34
4210: PUSH
4211: LD_INT 55
4213: ST_TO_ADDR
// hc_name := George McCarthy ;
4214: LD_ADDR_OWVAR 26
4218: PUSH
4219: LD_STRING George McCarthy
4221: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4222: LD_ADDR_OWVAR 29
4226: PUSH
4227: LD_INT 11
4229: PUSH
4230: LD_INT 10
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4237: LD_ADDR_OWVAR 30
4241: PUSH
4242: LD_INT 0
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4260: LD_ADDR_OWVAR 31
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: LD_INT 3
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
// un = CreateHuman ;
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: CALL_OW 44
4292: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 23
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: CALL_OW 87
// wait ( 0 0$1 ) ;
4317: LD_INT 35
4319: PPUSH
4320: CALL_OW 67
// DialogueOn ;
4324: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING D11d-Sol4-1
4335: PPUSH
4336: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4340: LD_EXP 1
4344: PPUSH
4345: LD_STRING D11d-JMM-1
4347: PPUSH
4348: CALL_OW 88
// DialogueOff ;
4352: CALL_OW 7
// end ; if number = 2 then
4356: LD_VAR 0 1
4360: PUSH
4361: LD_INT 2
4363: EQUAL
4364: IFFALSE 4540
// begin hc_class := 1 ;
4366: LD_ADDR_OWVAR 28
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// hc_sex := sex_male ;
4374: LD_ADDR_OWVAR 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4382: LD_ADDR_OWVAR 33
4386: PUSH
4387: LD_STRING AmGalRemake
4389: ST_TO_ADDR
// hc_face_number := 7 ;
4390: LD_ADDR_OWVAR 34
4394: PUSH
4395: LD_INT 7
4397: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4398: LD_ADDR_OWVAR 26
4402: PUSH
4403: LD_STRING Bobby Jordan
4405: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4406: LD_ADDR_OWVAR 29
4410: PUSH
4411: LD_INT 9
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4421: LD_ADDR_OWVAR 30
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 1
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4444: LD_ADDR_OWVAR 31
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: ST_TO_ADDR
// un = CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 24
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL_OW 49
// wait ( 0 0$1 ) ;
4492: LD_INT 35
4494: PPUSH
4495: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: CALL_OW 87
// DialogueOn ;
4508: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_STRING D11b-Sol3-1
4519: PPUSH
4520: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4524: LD_EXP 1
4528: PPUSH
4529: LD_STRING D11b-JMM-1
4531: PPUSH
4532: CALL_OW 88
// DialogueOff ;
4536: CALL_OW 7
// end ; if number = 3 then
4540: LD_VAR 0 1
4544: PUSH
4545: LD_INT 3
4547: EQUAL
4548: IFFALSE 4712
// begin hc_class := 1 ;
4550: LD_ADDR_OWVAR 28
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// hc_sex := sex_male ;
4558: LD_ADDR_OWVAR 27
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// hc_gallery := DJ ;
4566: LD_ADDR_OWVAR 33
4570: PUSH
4571: LD_STRING DJ
4573: ST_TO_ADDR
// hc_face_number := 1 ;
4574: LD_ADDR_OWVAR 34
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// hc_name := Darius Dajay ;
4582: LD_ADDR_OWVAR 26
4586: PUSH
4587: LD_STRING Darius Dajay
4589: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4590: LD_ADDR_OWVAR 29
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 11
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4605: LD_ADDR_OWVAR 30
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4628: LD_ADDR_OWVAR 31
4632: PUSH
4633: LD_INT 4
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// un = CreateHuman ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: CALL_OW 44
4660: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 25
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: CALL_OW 87
// wait ( 0 0$1 ) ;
4685: LD_INT 35
4687: PPUSH
4688: CALL_OW 67
// DialogueOn ;
4692: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_STRING D11f-Sol5-1
4703: PPUSH
4704: CALL_OW 88
// DialogueOff ;
4708: CALL_OW 7
// end ; if number = 4 then
4712: LD_VAR 0 1
4716: PUSH
4717: LD_INT 4
4719: EQUAL
4720: IFFALSE 4857
// begin hc_class := 2 ;
4722: LD_ADDR_OWVAR 28
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// hc_sex := sex_female ;
4730: LD_ADDR_OWVAR 27
4734: PUSH
4735: LD_INT 2
4737: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4738: LD_ADDR_OWVAR 33
4742: PUSH
4743: LD_STRING SecondCharsGal
4745: ST_TO_ADDR
// hc_face_number := 46 ;
4746: LD_ADDR_OWVAR 34
4750: PUSH
4751: LD_INT 46
4753: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4754: LD_ADDR_OWVAR 26
4758: PUSH
4759: LD_STRING Sylvia Creak
4761: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4762: LD_ADDR_OWVAR 29
4766: PUSH
4767: LD_INT 10
4769: PUSH
4770: LD_INT 9
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4777: LD_ADDR_OWVAR 30
4781: PUSH
4782: LD_INT 0
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: LD_INT 1
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4800: LD_ADDR_OWVAR 31
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: ST_TO_ADDR
// un = CreateHuman ;
4823: LD_ADDR_VAR 0 3
4827: PUSH
4828: CALL_OW 44
4832: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4833: LD_VAR 0 3
4837: PPUSH
4838: LD_INT 26
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 87
// end ; if number = 5 then
4857: LD_VAR 0 1
4861: PUSH
4862: LD_INT 5
4864: EQUAL
4865: IFFALSE 5041
// begin hc_class := 1 ;
4867: LD_ADDR_OWVAR 28
4871: PUSH
4872: LD_INT 1
4874: ST_TO_ADDR
// hc_sex := sex_female ;
4875: LD_ADDR_OWVAR 27
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4883: LD_ADDR_OWVAR 33
4887: PUSH
4888: LD_STRING SecondCharsGal
4890: ST_TO_ADDR
// hc_face_number := 37 ;
4891: LD_ADDR_OWVAR 34
4895: PUSH
4896: LD_INT 37
4898: ST_TO_ADDR
// hc_name := Malena Johnson ;
4899: LD_ADDR_OWVAR 26
4903: PUSH
4904: LD_STRING Malena Johnson
4906: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4907: LD_ADDR_OWVAR 29
4911: PUSH
4912: LD_INT 11
4914: PUSH
4915: LD_INT 10
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4922: LD_ADDR_OWVAR 30
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: LD_INT 0
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4945: LD_ADDR_OWVAR 31
4949: PUSH
4950: LD_INT 1
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 1
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: ST_TO_ADDR
// un = CreateHuman ;
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 27
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4993: LD_VAR 0 3
4997: PPUSH
4998: CALL_OW 87
// wait ( 0 0$1 ) ;
5002: LD_INT 35
5004: PPUSH
5005: CALL_OW 67
// DialogueOn ;
5009: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_STRING D11c-FSol3-1
5020: PPUSH
5021: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D11c-JMM-1
5032: PPUSH
5033: CALL_OW 88
// DialogueOff ;
5037: CALL_OW 7
// end ; if number = 6 then
5041: LD_VAR 0 1
5045: PUSH
5046: LD_INT 6
5048: EQUAL
5049: IFFALSE 5223
// begin hc_class := 1 ;
5051: LD_ADDR_OWVAR 28
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// hc_sex := sex_male ;
5059: LD_ADDR_OWVAR 27
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5067: LD_ADDR_OWVAR 33
5071: PUSH
5072: LD_STRING AmGalRemake
5074: ST_TO_ADDR
// hc_face_number := 1 ;
5075: LD_ADDR_OWVAR 34
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// hc_name := Charles Brown ;
5083: LD_ADDR_OWVAR 26
5087: PUSH
5088: LD_STRING Charles Brown
5090: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5091: LD_ADDR_OWVAR 29
5095: PUSH
5096: LD_INT 12
5098: PUSH
5099: LD_INT 11
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5106: LD_ADDR_OWVAR 30
5110: PUSH
5111: LD_INT 2
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: LD_INT 0
5119: PUSH
5120: LD_INT 0
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5129: LD_ADDR_OWVAR 31
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: ST_TO_ADDR
// un = CreateHuman ;
5152: LD_ADDR_VAR 0 3
5156: PUSH
5157: CALL_OW 44
5161: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5162: LD_VAR 0 3
5166: PPUSH
5167: LD_INT 28
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL_OW 87
// wait ( 0 0$1 ) ;
5186: LD_INT 35
5188: PPUSH
5189: CALL_OW 67
// DialogueOn ;
5193: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5197: LD_VAR 0 3
5201: PPUSH
5202: LD_STRING D4-Sol1-5
5204: PPUSH
5205: CALL_OW 88
// DialogueOff ;
5209: CALL_OW 7
// tempCharles = un ;
5213: LD_ADDR_EXP 13
5217: PUSH
5218: LD_VAR 0 3
5222: ST_TO_ADDR
// end ; if number = 7 then
5223: LD_VAR 0 1
5227: PUSH
5228: LD_INT 7
5230: EQUAL
5231: IFFALSE 5481
// begin hc_class := 1 ;
5233: LD_ADDR_OWVAR 28
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// hc_sex := sex_female ;
5241: LD_ADDR_OWVAR 27
5245: PUSH
5246: LD_INT 2
5248: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5249: LD_ADDR_OWVAR 33
5253: PUSH
5254: LD_STRING AmGalRemake
5256: ST_TO_ADDR
// hc_face_number := 2 ;
5257: LD_ADDR_OWVAR 34
5261: PUSH
5262: LD_INT 2
5264: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5265: LD_ADDR_OWVAR 26
5269: PUSH
5270: LD_STRING Rebecca Macdonald
5272: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5273: LD_ADDR_OWVAR 29
5277: PUSH
5278: LD_INT 10
5280: PUSH
5281: LD_INT 10
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5288: LD_ADDR_OWVAR 30
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: LD_INT 0
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5311: LD_ADDR_OWVAR 31
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 0
5321: PUSH
5322: LD_INT 0
5324: PUSH
5325: LD_INT 1
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: ST_TO_ADDR
// un = CreateHuman ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: CALL_OW 44
5343: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5344: LD_VAR 0 3
5348: PPUSH
5349: LD_INT 29
5351: PPUSH
5352: LD_INT 1
5354: PPUSH
5355: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5359: LD_VAR 0 3
5363: PPUSH
5364: CALL_OW 87
// wait ( 0 0$1 ) ;
5368: LD_INT 35
5370: PPUSH
5371: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5375: LD_INT 30
5377: PPUSH
5378: LD_INT 22
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 70
5392: IFFALSE 5481
// begin DialogueOn ;
5394: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5398: LD_VAR 0 3
5402: PPUSH
5403: CALL_OW 250
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: CALL_OW 251
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: LD_INT 15
5423: NEG
5424: PPUSH
5425: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: CALL_OW 250
5438: PPUSH
5439: LD_VAR 0 3
5443: PPUSH
5444: CALL_OW 251
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5456: LD_VAR 0 3
5460: PPUSH
5461: LD_STRING D11a-FSol2-1
5463: PPUSH
5464: CALL_OW 88
// ComCrawl ( un ) ;
5468: LD_VAR 0 3
5472: PPUSH
5473: CALL_OW 137
// DialogueOff ;
5477: CALL_OW 7
// end ; end ; if number = 8 then
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 8
5488: EQUAL
5489: IFFALSE 5645
// begin hc_class := 1 ;
5491: LD_ADDR_OWVAR 28
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// hc_sex := sex_female ;
5499: LD_ADDR_OWVAR 27
5503: PUSH
5504: LD_INT 2
5506: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING SecondCharsGal
5514: ST_TO_ADDR
// hc_face_number := 42 ;
5515: LD_ADDR_OWVAR 34
5519: PUSH
5520: LD_INT 42
5522: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5523: LD_ADDR_OWVAR 26
5527: PUSH
5528: LD_STRING Margherite Simpson
5530: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5531: LD_ADDR_OWVAR 29
5535: PUSH
5536: LD_INT 12
5538: PUSH
5539: LD_INT 10
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5546: LD_ADDR_OWVAR 30
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: LD_INT 2
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5569: LD_ADDR_OWVAR 31
5573: PUSH
5574: LD_INT 1
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 0
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: ST_TO_ADDR
// un = CreateHuman ;
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: CALL_OW 44
5601: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5602: LD_VAR 0 3
5606: PPUSH
5607: LD_INT 33
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5617: LD_VAR 0 3
5621: PPUSH
5622: CALL_OW 87
// wait ( 0 0$1 ) ;
5626: LD_INT 35
5628: PPUSH
5629: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5633: LD_VAR 0 3
5637: PPUSH
5638: LD_STRING D11e-FSol4-1
5640: PPUSH
5641: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5645: LD_ADDR_EXP 45
5649: PUSH
5650: LD_EXP 45
5654: PUSH
5655: LD_VAR 0 3
5659: UNION
5660: ST_TO_ADDR
// arrivals := arrivals union un ;
5661: LD_ADDR_EXP 46
5665: PUSH
5666: LD_EXP 46
5670: PUSH
5671: LD_VAR 0 3
5675: UNION
5676: ST_TO_ADDR
// end ;
5677: LD_VAR 0 2
5681: RET
// every 0 0$1 do var i ;
5682: GO 5684
5684: DISABLE
5685: LD_INT 0
5687: PPUSH
// begin enable ;
5688: ENABLE
// if not ignoreTarget then
5689: LD_EXP 45
5693: NOT
5694: IFFALSE 5698
// exit ;
5696: GO 5779
// for i in ignoreTarget do
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_EXP 45
5707: PUSH
5708: FOR_IN
5709: IFFALSE 5777
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5711: LD_INT 22
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 91
5723: PUSH
5724: LD_VAR 0 1
5728: PUSH
5729: LD_INT 10
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PPUSH
5741: CALL_OW 69
5745: PUSH
5746: LD_EXP 45
5750: DIFF
5751: PUSH
5752: LD_INT 1
5754: GREATER
5755: IFFALSE 5775
// begin ignoreTarget := ignoreTarget diff i ;
5757: LD_ADDR_EXP 45
5761: PUSH
5762: LD_EXP 45
5766: PUSH
5767: LD_VAR 0 1
5771: DIFF
5772: ST_TO_ADDR
// break ;
5773: GO 5777
// end ;
5775: GO 5708
5777: POP
5778: POP
// end ; end_of_file
5779: PPOPN 1
5781: END
// export function PrepareRussian ; var i ; begin
5782: LD_INT 0
5784: PPUSH
5785: PPUSH
// if Difficulty < 3 then
5786: LD_OWVAR 67
5790: PUSH
5791: LD_INT 3
5793: LESS
5794: IFFALSE 5811
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5796: LD_INT 130
5798: PPUSH
5799: LD_INT 81
5801: PPUSH
5802: CALL_OW 428
5806: PPUSH
5807: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5811: LD_INT 3
5813: PPUSH
5814: LD_INT 3
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_EXP 34
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: CALL_OW 12
5834: PPUSH
5835: LD_INT 2
5837: PPUSH
5838: LD_INT 4
5840: PPUSH
5841: CALL 6376 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5845: LD_INT 3
5847: PPUSH
5848: LD_INT 3
5850: PPUSH
5851: LD_INT 8
5853: PPUSH
5854: LD_EXP 34
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: CALL_OW 12
5868: PPUSH
5869: LD_INT 1
5871: PPUSH
5872: LD_INT 4
5874: PPUSH
5875: CALL 6376 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5879: LD_INT 3
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: LD_INT 67
5887: PPUSH
5888: LD_EXP 34
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: CALL_OW 12
5902: PPUSH
5903: LD_INT 1
5905: PPUSH
5906: LD_INT 2
5908: PPUSH
5909: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5913: LD_INT 3
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 21
5921: PPUSH
5922: LD_EXP 34
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: CALL_OW 12
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: LD_INT 6
5942: PPUSH
5943: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5947: LD_INT 3
5949: PPUSH
5950: LD_INT 3
5952: PPUSH
5953: LD_INT 17
5955: PPUSH
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 35
5965: PPUSH
5966: CALL_OW 12
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: LD_INT 6
5976: PPUSH
5977: CALL 6376 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5981: LD_INT 3
5983: PPUSH
5984: LD_INT 3
5986: PPUSH
5987: LD_INT 32
5989: PPUSH
5990: LD_EXP 34
5994: PPUSH
5995: LD_EXP 35
5999: PPUSH
6000: CALL_OW 12
6004: PPUSH
6005: LD_INT 4
6007: PPUSH
6008: LD_INT 2
6010: PPUSH
6011: CALL 6376 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: LD_INT 22
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 21
6032: PUSH
6033: LD_INT 3
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: LD_INT 30
6042: PUSH
6043: LD_INT 32
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PPUSH
6055: CALL_OW 69
6059: PUSH
6060: FOR_IN
6061: IFFALSE 6101
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6063: LD_INT 3
6065: PPUSH
6066: LD_INT 3
6068: PPUSH
6069: LD_VAR 0 2
6073: PPUSH
6074: LD_EXP 34
6078: PPUSH
6079: LD_EXP 35
6083: PPUSH
6084: CALL_OW 12
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL 6376 0 6
6099: GO 6060
6101: POP
6102: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 30
6130: PUSH
6131: LD_INT 31
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: PUSH
6148: FOR_IN
6149: IFFALSE 6177
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6151: LD_EXP 34
6155: PPUSH
6156: LD_EXP 35
6160: PPUSH
6161: CALL_OW 12
6165: PPUSH
6166: LD_VAR 0 2
6170: PPUSH
6171: CALL 6486 0 2
6175: GO 6148
6177: POP
6178: POP
// end ; end_of_file
6179: LD_VAR 0 1
6183: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// if exist_mode then
6188: LD_VAR 0 2
6192: IFFALSE 6217
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6194: LD_ADDR_VAR 0 4
6198: PUSH
6199: LD_EXP 44
6203: PUSH
6204: LD_VAR 0 1
6208: STR
6209: PPUSH
6210: CALL_OW 34
6214: ST_TO_ADDR
// end else
6215: GO 6232
// begin unit := NewCharacter ( ident ) ;
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 25
6231: ST_TO_ADDR
// end ; result := unit ;
6232: LD_ADDR_VAR 0 3
6236: PUSH
6237: LD_VAR 0 4
6241: ST_TO_ADDR
// end ;
6242: LD_VAR 0 3
6246: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6247: LD_INT 0
6249: PPUSH
6250: PPUSH
6251: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6252: LD_ADDR_VAR 0 6
6256: PUSH
6257: LD_VAR 0 1
6261: PUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: CALL_OW 12
6274: ARRAY
6275: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6276: LD_VAR 0 6
6280: PPUSH
6281: CALL_OW 258
6285: PUSH
6286: LD_INT 1
6288: EQUAL
6289: IFFALSE 6307
// Say ( speaker , dialogMID ) else
6291: LD_VAR 0 6
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 88
6305: GO 6321
// Say ( speaker , dialogFID ) ;
6307: LD_VAR 0 6
6311: PPUSH
6312: LD_VAR 0 3
6316: PPUSH
6317: CALL_OW 88
// result := speaker ;
6321: LD_ADDR_VAR 0 4
6325: PUSH
6326: LD_VAR 0 6
6330: ST_TO_ADDR
// end ;
6331: LD_VAR 0 4
6335: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6336: LD_INT 0
6338: PPUSH
6339: PPUSH
// for i in charactersList do
6340: LD_ADDR_VAR 0 4
6344: PUSH
6345: LD_VAR 0 1
6349: PUSH
6350: FOR_IN
6351: IFFALSE 6369
// SaveCharacters ( i , ident ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_VAR 0 2
6362: PPUSH
6363: CALL_OW 38
6367: GO 6350
6369: POP
6370: POP
// end ;
6371: LD_VAR 0 3
6375: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
// for i = 1 to count do
6382: LD_ADDR_VAR 0 8
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 6
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6479
// begin uc_side = side ;
6400: LD_ADDR_OWVAR 20
6404: PUSH
6405: LD_VAR 0 1
6409: ST_TO_ADDR
// uc_nation = nation ;
6410: LD_ADDR_OWVAR 21
6414: PUSH
6415: LD_VAR 0 2
6419: ST_TO_ADDR
// hc_gallery =  ;
6420: LD_ADDR_OWVAR 33
6424: PUSH
6425: LD_STRING 
6427: ST_TO_ADDR
// hc_name =  ;
6428: LD_ADDR_OWVAR 26
6432: PUSH
6433: LD_STRING 
6435: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6436: LD_INT 0
6438: PPUSH
6439: LD_VAR 0 5
6443: PPUSH
6444: LD_VAR 0 4
6448: PPUSH
6449: CALL_OW 380
// un = CreateHuman ;
6453: LD_ADDR_VAR 0 10
6457: PUSH
6458: CALL_OW 44
6462: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6463: LD_VAR 0 10
6467: PPUSH
6468: LD_VAR 0 3
6472: PPUSH
6473: CALL_OW 52
// end ;
6477: GO 6397
6479: POP
6480: POP
// end ;
6481: LD_VAR 0 7
6485: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
// uc_side := GetSide ( b ) ;
6491: LD_ADDR_OWVAR 20
6495: PUSH
6496: LD_VAR 0 2
6500: PPUSH
6501: CALL_OW 255
6505: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6506: LD_ADDR_OWVAR 21
6510: PUSH
6511: LD_VAR 0 2
6515: PPUSH
6516: CALL_OW 248
6520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_VAR 0 1
6531: PPUSH
6532: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: CALL_OW 254
6550: PUSH
6551: LD_INT 3
6553: MINUS
6554: ST_TO_ADDR
// if dir < 0 then
6555: LD_VAR 0 5
6559: PUSH
6560: LD_INT 0
6562: LESS
6563: IFFALSE 6579
// dir := 6 + dir ;
6565: LD_ADDR_VAR 0 5
6569: PUSH
6570: LD_INT 6
6572: PUSH
6573: LD_VAR 0 5
6577: PLUS
6578: ST_TO_ADDR
// un := CreateHuman ;
6579: LD_ADDR_VAR 0 4
6583: PUSH
6584: CALL_OW 44
6588: ST_TO_ADDR
// SetDir ( un , dir ) ;
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_VAR 0 5
6598: PPUSH
6599: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6603: LD_VAR 0 4
6607: PPUSH
6608: LD_VAR 0 2
6612: PPUSH
6613: CALL_OW 52
// end ;
6617: LD_VAR 0 3
6621: RET
// export function PrepareDifficulty ; begin
6622: LD_INT 0
6624: PPUSH
// if Difficulty = 1 then
6625: LD_OWVAR 67
6629: PUSH
6630: LD_INT 1
6632: EQUAL
6633: IFFALSE 6651
// begin RuSolMinLevel = 2 ;
6635: LD_ADDR_EXP 34
6639: PUSH
6640: LD_INT 2
6642: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6643: LD_ADDR_EXP 35
6647: PUSH
6648: LD_INT 3
6650: ST_TO_ADDR
// end ; if Difficulty = 2 then
6651: LD_OWVAR 67
6655: PUSH
6656: LD_INT 2
6658: EQUAL
6659: IFFALSE 6677
// begin RuSolMinLevel = 3 ;
6661: LD_ADDR_EXP 34
6665: PUSH
6666: LD_INT 3
6668: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6669: LD_ADDR_EXP 35
6673: PUSH
6674: LD_INT 5
6676: ST_TO_ADDR
// end ; if Difficulty = 3 then
6677: LD_OWVAR 67
6681: PUSH
6682: LD_INT 3
6684: EQUAL
6685: IFFALSE 6703
// begin RuSolMinLevel = 4 ;
6687: LD_ADDR_EXP 34
6691: PUSH
6692: LD_INT 4
6694: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6695: LD_ADDR_EXP 35
6699: PUSH
6700: LD_INT 6
6702: ST_TO_ADDR
// end ; end ;
6703: LD_VAR 0 1
6707: RET
// export function ShowQuery1 ; begin
6708: LD_INT 0
6710: PPUSH
// case query ( QKill ) of 1 :
6711: LD_STRING QKill
6713: PPUSH
6714: CALL_OW 97
6718: PUSH
6719: LD_INT 1
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6738
6727: POP
// begin result = 1 ;
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// end ; 2 :
6736: GO 6777
6738: LD_INT 2
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6757
6746: POP
// begin result = 2 ;
6747: LD_ADDR_VAR 0 1
6751: PUSH
6752: LD_INT 2
6754: ST_TO_ADDR
// end ; 3 :
6755: GO 6777
6757: LD_INT 3
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// begin result = 3 ;
6766: LD_ADDR_VAR 0 1
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// end ; end ;
6774: GO 6777
6776: POP
// end ;
6777: LD_VAR 0 1
6781: RET
// export function ShowQuery2 ; begin
6782: LD_INT 0
6784: PPUSH
// case query ( QKill2 ) of 1 :
6785: LD_STRING QKill2
6787: PPUSH
6788: CALL_OW 97
6792: PUSH
6793: LD_INT 1
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// begin result = 1 ;
6802: LD_ADDR_VAR 0 1
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// end ; 2 :
6810: GO 6832
6812: LD_INT 2
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// begin result = 2 ;
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
// end ; end ;
6829: GO 6832
6831: POP
// end ;
6832: LD_VAR 0 1
6836: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6844: LD_ADDR_VAR 0 8
6848: PUSH
6849: LD_INT 48
6851: PUSH
6852: LD_INT 49
6854: PUSH
6855: LD_INT 50
6857: PUSH
6858: LD_INT 20
6860: PUSH
6861: LD_INT 1
6863: PUSH
6864: LD_INT 51
6866: PUSH
6867: LD_INT 52
6869: PUSH
6870: LD_INT 69
6872: PUSH
6873: LD_INT 39
6875: PUSH
6876: LD_INT 34
6878: PUSH
6879: LD_INT 40
6881: PUSH
6882: LD_INT 53
6884: PUSH
6885: LD_INT 71
6887: PUSH
6888: LD_INT 57
6890: PUSH
6891: LD_INT 58
6893: PUSH
6894: LD_INT 44
6896: PUSH
6897: LD_INT 32
6899: PUSH
6900: LD_INT 27
6902: PUSH
6903: LD_INT 23
6905: PUSH
6906: LD_INT 33
6908: PUSH
6909: LD_INT 59
6911: PUSH
6912: LD_INT 54
6914: PUSH
6915: LD_INT 55
6917: PUSH
6918: LD_INT 56
6920: PUSH
6921: LD_INT 63
6923: PUSH
6924: LD_INT 64
6926: PUSH
6927: LD_INT 65
6929: PUSH
6930: LD_INT 30
6932: PUSH
6933: LD_INT 31
6935: PUSH
6936: LD_INT 21
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 25
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6979: LD_ADDR_VAR 0 5
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_VAR 0 8
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7071
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6997: LD_VAR 0 8
7001: PUSH
7002: LD_VAR 0 5
7006: ARRAY
7007: PPUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 321
7017: PUSH
7018: LD_INT 1
7020: EQUAL
7021: PUSH
7022: LD_VAR 0 8
7026: PUSH
7027: LD_VAR 0 5
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 3
7037: PPUSH
7038: CALL_OW 482
7042: PUSH
7043: LD_INT 1
7045: EQUAL
7046: AND
7047: IFFALSE 7069
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7049: LD_VAR 0 2
7053: PPUSH
7054: LD_VAR 0 8
7058: PUSH
7059: LD_VAR 0 5
7063: ARRAY
7064: PPUSH
7065: CALL_OW 184
7069: GO 6994
7071: POP
7072: POP
// end ;
7073: LD_VAR 0 4
7077: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7078: LD_INT 0
7080: PPUSH
7081: PPUSH
7082: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7083: LD_INT 22
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 21
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 69
7113: PUSH
7114: LD_VAR 0 3
7118: LESSEQUAL
7119: IFFALSE 7227
// begin for i = 1 to vehCount do
7121: LD_ADDR_VAR 0 9
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_VAR 0 3
7135: PUSH
7136: FOR_TO
7137: IFFALSE 7225
// begin weapon = weaponTab [ i ] ;
7139: LD_ADDR_VAR 0 10
7143: PUSH
7144: LD_VAR 0 4
7148: PUSH
7149: LD_VAR 0 9
7153: ARRAY
7154: ST_TO_ADDR
// if weapon = 46 then
7155: LD_VAR 0 10
7159: PUSH
7160: LD_INT 46
7162: EQUAL
7163: IFFALSE 7194
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7165: LD_VAR 0 2
7169: PPUSH
7170: LD_INT 24
7172: PPUSH
7173: LD_VAR 0 5
7177: PPUSH
7178: LD_VAR 0 6
7182: PPUSH
7183: LD_VAR 0 10
7187: PPUSH
7188: CALL_OW 185
// end else
7192: GO 7223
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7194: LD_VAR 0 2
7198: PPUSH
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 5
7208: PPUSH
7209: LD_VAR 0 6
7213: PPUSH
7214: LD_VAR 0 10
7218: PPUSH
7219: CALL_OW 185
// end ; end ;
7223: GO 7136
7225: POP
7226: POP
// end ; end ;
7227: LD_VAR 0 8
7231: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7232: LD_INT 0
7234: PPUSH
7235: PPUSH
7236: PPUSH
7237: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7238: LD_ADDR_VAR 0 8
7242: PUSH
7243: LD_INT 22
7245: PUSH
7246: LD_VAR 0 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 21
7257: PUSH
7258: LD_INT 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 24
7270: PUSH
7271: LD_INT 650
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 69
7291: ST_TO_ADDR
// if damageVehicles > 0 then
7292: LD_VAR 0 8
7296: PUSH
7297: LD_INT 0
7299: GREATER
7300: IFFALSE 7321
// ComMoveXY ( damageVehicles , repX , repY ) ;
7302: LD_VAR 0 8
7306: PPUSH
7307: LD_VAR 0 3
7311: PPUSH
7312: LD_VAR 0 4
7316: PPUSH
7317: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7321: LD_VAR 0 8
7325: PPUSH
7326: LD_INT 95
7328: PUSH
7329: LD_VAR 0 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 58
7343: PUSH
7344: EMPTY
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 72
7359: PUSH
7360: LD_INT 0
7362: GREATER
7363: IFFALSE 7430
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: LD_VAR 0 8
7374: PPUSH
7375: LD_INT 95
7377: PUSH
7378: LD_VAR 0 2
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 58
7392: PUSH
7393: EMPTY
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 72
7408: PUSH
7409: FOR_IN
7410: IFFALSE 7428
// ComExitVehicle ( UnitsInside ( i ) ) ;
7412: LD_VAR 0 6
7416: PPUSH
7417: CALL_OW 313
7421: PPUSH
7422: CALL_OW 121
7426: GO 7409
7428: POP
7429: POP
// end ;
7430: LD_VAR 0 5
7434: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7435: LD_INT 0
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
7443: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7444: LD_ADDR_VAR 0 8
7448: PUSH
7449: LD_INT 22
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 24
7473: PUSH
7474: LD_INT 660
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 58
7486: PUSH
7487: EMPTY
7488: LIST
7489: PUSH
7490: LD_INT 2
7492: PUSH
7493: LD_INT 34
7495: PUSH
7496: LD_INT 43
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 34
7505: PUSH
7506: LD_INT 44
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 46
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7545: LD_INT 22
7547: PUSH
7548: LD_VAR 0 1
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 21
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 24
7569: PUSH
7570: LD_INT 1000
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: LD_INT 58
7582: PUSH
7583: EMPTY
7584: LIST
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: LD_INT 34
7591: PUSH
7592: LD_INT 43
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 34
7601: PUSH
7602: LD_INT 44
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 34
7611: PUSH
7612: LD_INT 46
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_INT 5
7643: PUSH
7644: LD_INT 6
7646: PUSH
7647: LD_INT 6
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: LD_OWVAR 67
7659: ARRAY
7660: EQUAL
7661: IFFALSE 7917
// if seeEnemy = 0 then
7663: LD_VAR 0 11
7667: PUSH
7668: LD_INT 0
7670: EQUAL
7671: IFFALSE 7917
// repeat wait ( 0 0$1 ) ;
7673: LD_INT 35
7675: PPUSH
7676: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7680: LD_ADDR_VAR 0 8
7684: PUSH
7685: LD_INT 22
7687: PUSH
7688: LD_VAR 0 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 21
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 660
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: LD_INT 58
7722: PUSH
7723: EMPTY
7724: LIST
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 34
7731: PUSH
7732: LD_INT 43
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 34
7741: PUSH
7742: LD_INT 44
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 34
7751: PUSH
7752: LD_INT 46
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7781: LD_INT 22
7783: PUSH
7784: LD_VAR 0 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 95
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: NOT
7814: PUSH
7815: LD_VAR 0 11
7819: PUSH
7820: LD_INT 0
7822: EQUAL
7823: AND
7824: IFFALSE 7879
// for i := 1 to wayX do
7826: LD_ADDR_VAR 0 6
7830: PUSH
7831: DOUBLE
7832: LD_INT 1
7834: DEC
7835: ST_TO_ADDR
7836: LD_VAR 0 3
7840: PUSH
7841: FOR_TO
7842: IFFALSE 7877
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7844: LD_VAR 0 8
7848: PPUSH
7849: LD_VAR 0 3
7853: PUSH
7854: LD_VAR 0 6
7858: ARRAY
7859: PPUSH
7860: LD_VAR 0 4
7864: PUSH
7865: LD_VAR 0 6
7869: ARRAY
7870: PPUSH
7871: CALL_OW 114
7875: GO 7841
7877: POP
7878: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7879: LD_INT 22
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 95
7893: PUSH
7894: LD_VAR 0 2
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PUSH
7912: LD_INT 0
7914: GREATER
7915: IFFALSE 7673
// seeEnemy = 1 ;
7917: LD_ADDR_VAR 0 11
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// for j in vehiclesOK do
7932: LD_ADDR_VAR 0 7
7936: PUSH
7937: LD_VAR 0 8
7941: PUSH
7942: FOR_IN
7943: IFFALSE 8156
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7945: LD_ADDR_VAR 0 9
7949: PUSH
7950: LD_INT 81
7952: PUSH
7953: LD_VAR 0 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 101
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: PUSH
7981: LD_EXP 45
7985: DIFF
7986: PPUSH
7987: LD_VAR 0 7
7991: PPUSH
7992: CALL_OW 74
7996: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7997: LD_ADDR_VAR 0 10
8001: PUSH
8002: LD_INT 81
8004: PUSH
8005: LD_VAR 0 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 101
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 59
8029: PUSH
8030: EMPTY
8031: LIST
8032: PUSH
8033: LD_INT 21
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 21
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: LD_EXP 45
8076: DIFF
8077: PPUSH
8078: LD_VAR 0 7
8082: PPUSH
8083: CALL_OW 74
8087: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8088: LD_VAR 0 7
8092: PPUSH
8093: LD_VAR 0 9
8097: PPUSH
8098: CALL_OW 296
8102: PUSH
8103: LD_INT 8
8105: PLUS
8106: PUSH
8107: LD_VAR 0 7
8111: PPUSH
8112: LD_VAR 0 10
8116: PPUSH
8117: CALL_OW 296
8121: LESS
8122: IFFALSE 8140
// ComAttackUnit ( j , target1 ) else
8124: LD_VAR 0 7
8128: PPUSH
8129: LD_VAR 0 9
8133: PPUSH
8134: CALL_OW 115
8138: GO 8154
// ComAttackUnit ( j , target2 ) ;
8140: LD_VAR 0 7
8144: PPUSH
8145: LD_VAR 0 10
8149: PPUSH
8150: CALL_OW 115
// end ;
8154: GO 7942
8156: POP
8157: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8158: LD_INT 22
8160: PUSH
8161: LD_VAR 0 1
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 21
8172: PUSH
8173: LD_INT 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 1000
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 58
8195: PUSH
8196: EMPTY
8197: LIST
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: LD_INT 34
8204: PUSH
8205: LD_INT 43
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 34
8214: PUSH
8215: LD_INT 44
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 34
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: PUSH
8254: LD_INT 0
8256: EQUAL
8257: IFFALSE 7925
// seeEnemy = 0 ;
8259: LD_ADDR_VAR 0 11
8263: PUSH
8264: LD_INT 0
8266: ST_TO_ADDR
// end ;
8267: LD_VAR 0 5
8271: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: CALL_OW 313
8294: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8295: LD_ADDR_VAR 0 9
8299: PUSH
8300: LD_VAR 0 3
8304: PPUSH
8305: LD_INT 22
8307: PUSH
8308: LD_VAR 0 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 25
8319: PUSH
8320: LD_INT 2
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 24
8329: PUSH
8330: LD_INT 750
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: LD_INT 54
8342: PUSH
8343: EMPTY
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 70
8360: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8361: LD_ADDR_VAR 0 6
8365: PUSH
8366: LD_VAR 0 3
8370: PPUSH
8371: LD_INT 22
8373: PUSH
8374: LD_VAR 0 1
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 21
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 1000
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: PPUSH
8418: CALL_OW 70
8422: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8423: LD_VAR 0 6
8427: NOT
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_VAR 0 1
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 250
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: NOT
8471: AND
8472: IFFALSE 8476
// exit ;
8474: GO 8658
// if buildings_list > 0 and engineerOkInside then
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 0
8483: GREATER
8484: PUSH
8485: LD_VAR 0 8
8489: AND
8490: IFFALSE 8501
// ComExitBuilding ( engineerOkInside ) ;
8492: LD_VAR 0 8
8496: PPUSH
8497: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8501: LD_VAR 0 6
8505: PUSH
8506: LD_INT 0
8508: GREATER
8509: PUSH
8510: LD_VAR 0 9
8514: PUSH
8515: LD_INT 0
8517: GREATER
8518: AND
8519: IFFALSE 8539
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8521: LD_VAR 0 9
8525: PPUSH
8526: LD_VAR 0 6
8530: PUSH
8531: LD_INT 1
8533: ARRAY
8534: PPUSH
8535: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 0
8546: EQUAL
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: LD_INT 0
8555: EQUAL
8556: AND
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_INT 0
8565: GREATER
8566: AND
8567: IFFALSE 8583
// ComEnterUnit ( engineerOkOutside , building ) ;
8569: LD_VAR 0 9
8573: PPUSH
8574: LD_VAR 0 2
8578: PPUSH
8579: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8583: LD_VAR 0 9
8587: PUSH
8588: LD_INT 0
8590: GREATER
8591: PUSH
8592: LD_VAR 0 6
8596: PUSH
8597: LD_INT 0
8599: EQUAL
8600: AND
8601: PUSH
8602: LD_VAR 0 4
8606: PUSH
8607: LD_INT 0
8609: GREATER
8610: AND
8611: IFFALSE 8658
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8613: LD_VAR 0 9
8617: PPUSH
8618: LD_VAR 0 4
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 2
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 3
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 4
8649: PUSH
8650: LD_INT 4
8652: ARRAY
8653: PPUSH
8654: CALL_OW 145
// end ;
8658: LD_VAR 0 5
8662: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8663: LD_INT 0
8665: PPUSH
8666: PPUSH
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8674: LD_ADDR_VAR 0 6
8678: PUSH
8679: LD_INT 22
8681: PUSH
8682: LD_VAR 0 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 4
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 23
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 24
8713: PUSH
8714: LD_INT 251
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8732: LD_ADDR_VAR 0 7
8736: PUSH
8737: LD_VAR 0 3
8741: PPUSH
8742: LD_INT 22
8744: PUSH
8745: LD_VAR 0 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 23
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 25
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 50
8776: PUSH
8777: EMPTY
8778: LIST
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 70
8790: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8791: LD_ADDR_VAR 0 10
8795: PUSH
8796: LD_VAR 0 3
8800: PPUSH
8801: LD_INT 22
8803: PUSH
8804: LD_VAR 0 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 3
8825: PUSH
8826: LD_INT 25
8828: PUSH
8829: LD_INT 3
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 3
8842: PUSH
8843: LD_INT 24
8845: PUSH
8846: LD_INT 750
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 70
8867: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8868: LD_ADDR_VAR 0 11
8872: PUSH
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 22
8880: PUSH
8881: LD_VAR 0 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 21
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 3
8902: PUSH
8903: LD_INT 25
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 1000
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 70
8944: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8945: LD_VAR 0 10
8949: NOT
8950: PUSH
8951: LD_VAR 0 11
8955: NOT
8956: AND
8957: PUSH
8958: LD_VAR 0 6
8962: NOT
8963: AND
8964: IFFALSE 8968
// exit ;
8966: GO 9202
// if damageUnits > 0 and sci_list > 0 then
8968: LD_VAR 0 10
8972: PUSH
8973: LD_INT 0
8975: GREATER
8976: PUSH
8977: LD_VAR 0 6
8981: PUSH
8982: LD_INT 0
8984: GREATER
8985: AND
8986: IFFALSE 9002
// ComMoveToArea ( damageUnits , healArea ) ;
8988: LD_VAR 0 10
8992: PPUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9002: LD_VAR 0 11
9006: PUSH
9007: LD_INT 0
9009: GREATER
9010: PUSH
9011: LD_VAR 0 6
9015: PUSH
9016: LD_INT 0
9018: GREATER
9019: AND
9020: IFFALSE 9031
// ComExitBuilding ( sci_list ) ;
9022: LD_VAR 0 6
9026: PPUSH
9027: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9031: LD_VAR 0 11
9035: PUSH
9036: LD_INT 0
9038: GREATER
9039: PUSH
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: GREATER
9048: AND
9049: IFFALSE 9069
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9051: LD_VAR 0 7
9055: PPUSH
9056: LD_VAR 0 11
9060: PUSH
9061: LD_INT 1
9063: ARRAY
9064: PPUSH
9065: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9069: LD_VAR 0 10
9073: PUSH
9074: LD_INT 0
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 11
9082: PUSH
9083: LD_INT 0
9085: EQUAL
9086: AND
9087: PUSH
9088: LD_VAR 0 7
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: AND
9097: IFFALSE 9202
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9099: LD_ADDR_VAR 0 12
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 21
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 30
9128: PUSH
9129: LD_INT 8
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9146: LD_ADDR_VAR 0 13
9150: PUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_VAR 0 12
9158: PPUSH
9159: CALL_OW 12
9163: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9164: LD_VAR 0 7
9168: PPUSH
9169: LD_INT 3
9171: PUSH
9172: LD_INT 60
9174: PUSH
9175: EMPTY
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 72
9186: PPUSH
9187: LD_VAR 0 12
9191: PUSH
9192: LD_VAR 0 13
9196: ARRAY
9197: PPUSH
9198: CALL_OW 120
// end ; end ;
9202: LD_VAR 0 5
9206: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9207: LD_INT 0
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
// tmpTab = [ ] ;
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 30
9234: PUSH
9235: LD_INT 32
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 69
9250: PUSH
9251: LD_INT 0
9253: GREATER
9254: IFFALSE 9337
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9256: LD_ADDR_VAR 0 4
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 30
9275: PUSH
9276: LD_INT 32
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 69
9291: PUSH
9292: FOR_IN
9293: IFFALSE 9335
// begin for j in UnitsInside ( i ) do
9295: LD_ADDR_VAR 0 5
9299: PUSH
9300: LD_VAR 0 4
9304: PPUSH
9305: CALL_OW 313
9309: PUSH
9310: FOR_IN
9311: IFFALSE 9331
// tmpTab = tmpTab ^ j ;
9313: LD_ADDR_VAR 0 6
9317: PUSH
9318: LD_VAR 0 6
9322: PUSH
9323: LD_VAR 0 5
9327: ADD
9328: ST_TO_ADDR
9329: GO 9310
9331: POP
9332: POP
// end ;
9333: GO 9292
9335: POP
9336: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9337: LD_VAR 0 6
9341: PPUSH
9342: LD_VAR 0 2
9346: PPUSH
9347: CALL_OW 250
9351: PPUSH
9352: LD_VAR 0 2
9356: PPUSH
9357: CALL_OW 251
9361: PPUSH
9362: CALL_OW 114
// end ;
9366: LD_VAR 0 3
9370: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
9375: PPUSH
9376: PPUSH
// enable ;
9377: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9378: LD_ADDR_VAR 0 7
9382: PUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: CALL_OW 435
9392: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9393: LD_ADDR_VAR 0 6
9397: PUSH
9398: LD_INT 22
9400: PUSH
9401: LD_VAR 0 1
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 34
9412: PUSH
9413: LD_VAR 0 2
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 69
9430: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9431: LD_VAR 0 6
9435: PUSH
9436: LD_INT 0
9438: GREATER
9439: PUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: CALL_OW 435
9449: AND
9450: PUSH
9451: LD_VAR 0 7
9455: PUSH
9456: LD_INT 0
9458: GREATER
9459: AND
9460: IFFALSE 9509
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9462: LD_VAR 0 6
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: LD_VAR 0 7
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_VAR 0 7
9484: PUSH
9485: LD_INT 2
9487: ARRAY
9488: PPUSH
9489: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9493: LD_VAR 0 6
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: LD_INT 100
9504: PPUSH
9505: CALL_OW 240
// end ; end ;
9509: LD_VAR 0 4
9513: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9524: LD_ADDR_VAR 0 6
9528: PUSH
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 56
9548: PUSH
9549: EMPTY
9550: LIST
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 700
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 3
9564: PUSH
9565: LD_INT 60
9567: PUSH
9568: EMPTY
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 5
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 8
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 9
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 70
9636: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_VAR 0 2
9646: PPUSH
9647: LD_INT 22
9649: PUSH
9650: LD_VAR 0 1
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 30
9661: PUSH
9662: LD_INT 32
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 58
9671: PUSH
9672: EMPTY
9673: LIST
9674: PUSH
9675: LD_INT 24
9677: PUSH
9678: LD_INT 251
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 70
9695: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9696: LD_ADDR_VAR 0 9
9700: PUSH
9701: LD_VAR 0 2
9705: PPUSH
9706: LD_INT 22
9708: PUSH
9709: LD_VAR 0 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 2
9720: PUSH
9721: LD_INT 30
9723: PUSH
9724: LD_INT 4
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 5
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 24
9748: PUSH
9749: LD_INT 251
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: PPUSH
9761: CALL_OW 70
9765: ST_TO_ADDR
// if barrackList > 0 then
9766: LD_VAR 0 9
9770: PUSH
9771: LD_INT 0
9773: GREATER
9774: IFFALSE 9922
// begin if turretList = 0 then
9776: LD_VAR 0 7
9780: PUSH
9781: LD_INT 0
9783: EQUAL
9784: IFFALSE 9826
// begin if soldiers_list > 0 then
9786: LD_VAR 0 6
9790: PUSH
9791: LD_INT 0
9793: GREATER
9794: IFFALSE 9824
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9796: LD_VAR 0 6
9800: PPUSH
9801: LD_VAR 0 9
9805: PUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_VAR 0 9
9813: PPUSH
9814: CALL_OW 12
9818: ARRAY
9819: PPUSH
9820: CALL_OW 120
// end else
9824: GO 9922
// begin for i in barrackList do
9826: LD_ADDR_VAR 0 4
9830: PUSH
9831: LD_VAR 0 9
9835: PUSH
9836: FOR_IN
9837: IFFALSE 9920
// begin insideUnits = UnitsInside ( i ) ;
9839: LD_ADDR_VAR 0 10
9843: PUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: CALL_OW 313
9853: ST_TO_ADDR
// if insideUnits > 0 then
9854: LD_VAR 0 10
9858: PUSH
9859: LD_INT 0
9861: GREATER
9862: IFFALSE 9886
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9864: LD_VAR 0 10
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PPUSH
9873: LD_VAR 0 7
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: CALL_OW 120
// if soldiers_list > 0 then
9886: LD_VAR 0 6
9890: PUSH
9891: LD_INT 0
9893: GREATER
9894: IFFALSE 9918
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9896: LD_VAR 0 6
9900: PUSH
9901: LD_INT 1
9903: ARRAY
9904: PPUSH
9905: LD_VAR 0 7
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: CALL_OW 120
// end ;
9918: GO 9836
9920: POP
9921: POP
// end ; end ; end ;
9922: LD_VAR 0 3
9926: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9927: LD_INT 0
9929: PPUSH
9930: PPUSH
9931: PPUSH
9932: PPUSH
9933: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9934: LD_ADDR_VAR 0 6
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_VAR 0 1
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 31
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 32
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 30
9976: PUSH
9977: LD_INT 33
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 30
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PPUSH
10016: CALL_OW 69
10020: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10021: LD_ADDR_VAR 0 7
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 21
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 58
10050: PUSH
10051: EMPTY
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 69
10063: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10064: LD_VAR 0 6
10068: PUSH
10069: LD_INT 0
10071: GREATER
10072: PUSH
10073: LD_VAR 0 7
10077: PUSH
10078: LD_INT 0
10080: GREATER
10081: AND
10082: IFFALSE 10152
// begin for i in turretsList do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_VAR 0 6
10093: PUSH
10094: FOR_IN
10095: IFFALSE 10150
// begin for j in enemyBuildings do
10097: LD_ADDR_VAR 0 5
10101: PUSH
10102: LD_VAR 0 7
10106: PUSH
10107: FOR_IN
10108: IFFALSE 10146
// begin if GetDistUnits ( i , j ) < 20 then
10110: LD_VAR 0 4
10114: PPUSH
10115: LD_VAR 0 5
10119: PPUSH
10120: CALL_OW 296
10124: PUSH
10125: LD_INT 20
10127: LESS
10128: IFFALSE 10144
// begin ComAttackUnit ( i , j ) ;
10130: LD_VAR 0 4
10134: PPUSH
10135: LD_VAR 0 5
10139: PPUSH
10140: CALL_OW 115
// end ; end ;
10144: GO 10107
10146: POP
10147: POP
// end ;
10148: GO 10094
10150: POP
10151: POP
// end ; end ;
10152: LD_VAR 0 3
10156: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
10164: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10165: LD_ADDR_VAR 0 8
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_VAR 0 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 21
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 34
10194: PUSH
10195: LD_INT 52
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 69
10211: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_VAR 0 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 3
10241: PUSH
10242: LD_INT 24
10244: PUSH
10245: LD_INT 1000
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10269: LD_VAR 0 9
10273: PUSH
10274: LD_INT 0
10276: GREATER
10277: PUSH
10278: LD_VAR 0 8
10282: PPUSH
10283: LD_INT 24
10285: PUSH
10286: LD_INT 750
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 72
10297: PUSH
10298: LD_INT 0
10300: GREATER
10301: AND
10302: IFFALSE 10337
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10304: LD_VAR 0 8
10308: PPUSH
10309: LD_INT 24
10311: PUSH
10312: LD_INT 750
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: PPUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_INT 1
10331: ARRAY
10332: PPUSH
10333: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10337: LD_VAR 0 8
10341: PPUSH
10342: LD_INT 3
10344: PUSH
10345: LD_INT 24
10347: PUSH
10348: LD_INT 750
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 72
10363: PUSH
10364: LD_INT 0
10366: GREATER
10367: IFFALSE 10405
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10369: LD_VAR 0 8
10373: PPUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 24
10379: PUSH
10380: LD_INT 750
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 72
10395: PPUSH
10396: LD_VAR 0 2
10400: PPUSH
10401: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10405: LD_VAR 0 8
10409: PUSH
10410: LD_INT 0
10412: GREATER
10413: PUSH
10414: LD_VAR 0 9
10418: PUSH
10419: LD_INT 0
10421: EQUAL
10422: AND
10423: PUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 0
10431: GREATER
10432: AND
10433: IFFALSE 10480
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10435: LD_VAR 0 8
10439: PPUSH
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 3
10465: ARRAY
10466: PPUSH
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 4
10474: ARRAY
10475: PPUSH
10476: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 22
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 21
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 34
10509: PUSH
10510: LD_INT 52
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: LD_INT 24
10522: PUSH
10523: LD_INT 750
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 70
10544: PUSH
10545: LD_INT 0
10547: GREATER
10548: IFFALSE 10750
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10550: LD_ADDR_VAR 0 5
10554: PUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: LD_INT 22
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 21
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 34
10584: PUSH
10585: LD_INT 52
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 750
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 70
10619: PUSH
10620: FOR_IN
10621: IFFALSE 10748
// begin mechTmp = UnitsInside ( i ) ;
10623: LD_ADDR_VAR 0 6
10627: PUSH
10628: LD_VAR 0 5
10632: PPUSH
10633: CALL_OW 313
10637: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10638: LD_VAR 0 6
10642: PPUSH
10643: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10647: LD_VAR 0 6
10651: PPUSH
10652: LD_VAR 0 7
10656: PPUSH
10657: CALL_OW 189
// wait ( 0 0$2 ) ;
10661: LD_INT 70
10663: PPUSH
10664: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10668: LD_VAR 0 6
10672: PPUSH
10673: LD_VAR 0 2
10677: PPUSH
10678: LD_INT 22
10680: PUSH
10681: LD_VAR 0 1
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 21
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 34
10702: PUSH
10703: LD_INT 52
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 1000
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 70
10737: PUSH
10738: LD_INT 1
10740: ARRAY
10741: PPUSH
10742: CALL_OW 180
// end ;
10746: GO 10620
10748: POP
10749: POP
// end ; end ;
10750: LD_VAR 0 4
10754: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10755: LD_INT 0
10757: PPUSH
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
// for i = 1 to medicCount do
10768: LD_ADDR_VAR 0 14
10772: PUSH
10773: DOUBLE
10774: LD_INT 1
10776: DEC
10777: ST_TO_ADDR
10778: LD_VAR 0 7
10782: PUSH
10783: FOR_TO
10784: IFFALSE 10866
// begin uc_side = side ;
10786: LD_ADDR_OWVAR 20
10790: PUSH
10791: LD_VAR 0 1
10795: ST_TO_ADDR
// uc_nation = nation ;
10796: LD_ADDR_OWVAR 21
10800: PUSH
10801: LD_VAR 0 2
10805: ST_TO_ADDR
// hc_name =  ;
10806: LD_ADDR_OWVAR 26
10810: PUSH
10811: LD_STRING 
10813: ST_TO_ADDR
// hc_gallery =  ;
10814: LD_ADDR_OWVAR 33
10818: PUSH
10819: LD_STRING 
10821: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10822: LD_INT 0
10824: PPUSH
10825: LD_INT 4
10827: PPUSH
10828: LD_VAR 0 8
10832: PPUSH
10833: CALL_OW 380
// un = CreateHuman ;
10837: LD_ADDR_VAR 0 16
10841: PUSH
10842: CALL_OW 44
10846: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10847: LD_VAR 0 16
10851: PPUSH
10852: LD_VAR 0 9
10856: PPUSH
10857: LD_INT 0
10859: PPUSH
10860: CALL_OW 49
// end ;
10864: GO 10783
10866: POP
10867: POP
// for i = 1 to soldierCount do
10868: LD_ADDR_VAR 0 14
10872: PUSH
10873: DOUBLE
10874: LD_INT 1
10876: DEC
10877: ST_TO_ADDR
10878: LD_VAR 0 3
10882: PUSH
10883: FOR_TO
10884: IFFALSE 10966
// begin uc_side = side ;
10886: LD_ADDR_OWVAR 20
10890: PUSH
10891: LD_VAR 0 1
10895: ST_TO_ADDR
// uc_nation = nation ;
10896: LD_ADDR_OWVAR 21
10900: PUSH
10901: LD_VAR 0 2
10905: ST_TO_ADDR
// hc_name =  ;
10906: LD_ADDR_OWVAR 26
10910: PUSH
10911: LD_STRING 
10913: ST_TO_ADDR
// hc_gallery =  ;
10914: LD_ADDR_OWVAR 33
10918: PUSH
10919: LD_STRING 
10921: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10922: LD_INT 0
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 8
10932: PPUSH
10933: CALL_OW 380
// un = CreateHuman ;
10937: LD_ADDR_VAR 0 16
10941: PUSH
10942: CALL_OW 44
10946: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10947: LD_VAR 0 16
10951: PPUSH
10952: LD_VAR 0 9
10956: PPUSH
10957: LD_INT 0
10959: PPUSH
10960: CALL_OW 49
// end ;
10964: GO 10883
10966: POP
10967: POP
// for i = 1 to sniperCount do
10968: LD_ADDR_VAR 0 14
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 4
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11066
// begin uc_side = side ;
10986: LD_ADDR_OWVAR 20
10990: PUSH
10991: LD_VAR 0 1
10995: ST_TO_ADDR
// uc_nation = nation ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_VAR 0 2
11005: ST_TO_ADDR
// hc_name =  ;
11006: LD_ADDR_OWVAR 26
11010: PUSH
11011: LD_STRING 
11013: ST_TO_ADDR
// hc_gallery =  ;
11014: LD_ADDR_OWVAR 33
11018: PUSH
11019: LD_STRING 
11021: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11022: LD_INT 0
11024: PPUSH
11025: LD_INT 5
11027: PPUSH
11028: LD_VAR 0 8
11032: PPUSH
11033: CALL_OW 380
// un = CreateHuman ;
11037: LD_ADDR_VAR 0 16
11041: PUSH
11042: CALL_OW 44
11046: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11047: LD_VAR 0 16
11051: PPUSH
11052: LD_VAR 0 9
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 49
// end ;
11064: GO 10983
11066: POP
11067: POP
// for i = 1 to bazookCount do
11068: LD_ADDR_VAR 0 14
11072: PUSH
11073: DOUBLE
11074: LD_INT 1
11076: DEC
11077: ST_TO_ADDR
11078: LD_VAR 0 5
11082: PUSH
11083: FOR_TO
11084: IFFALSE 11166
// begin uc_side = side ;
11086: LD_ADDR_OWVAR 20
11090: PUSH
11091: LD_VAR 0 1
11095: ST_TO_ADDR
// uc_nation = nation ;
11096: LD_ADDR_OWVAR 21
11100: PUSH
11101: LD_VAR 0 2
11105: ST_TO_ADDR
// hc_name =  ;
11106: LD_ADDR_OWVAR 26
11110: PUSH
11111: LD_STRING 
11113: ST_TO_ADDR
// hc_gallery =  ;
11114: LD_ADDR_OWVAR 33
11118: PUSH
11119: LD_STRING 
11121: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11122: LD_INT 0
11124: PPUSH
11125: LD_INT 9
11127: PPUSH
11128: LD_VAR 0 8
11132: PPUSH
11133: CALL_OW 380
// un = CreateHuman ;
11137: LD_ADDR_VAR 0 16
11141: PUSH
11142: CALL_OW 44
11146: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11147: LD_VAR 0 16
11151: PPUSH
11152: LD_VAR 0 9
11156: PPUSH
11157: LD_INT 0
11159: PPUSH
11160: CALL_OW 49
// end ;
11164: GO 11083
11166: POP
11167: POP
// for i = 1 to mortalCount do
11168: LD_ADDR_VAR 0 14
11172: PUSH
11173: DOUBLE
11174: LD_INT 1
11176: DEC
11177: ST_TO_ADDR
11178: LD_VAR 0 6
11182: PUSH
11183: FOR_TO
11184: IFFALSE 11266
// begin uc_side = side ;
11186: LD_ADDR_OWVAR 20
11190: PUSH
11191: LD_VAR 0 1
11195: ST_TO_ADDR
// uc_nation = nation ;
11196: LD_ADDR_OWVAR 21
11200: PUSH
11201: LD_VAR 0 2
11205: ST_TO_ADDR
// hc_name =  ;
11206: LD_ADDR_OWVAR 26
11210: PUSH
11211: LD_STRING 
11213: ST_TO_ADDR
// hc_gallery =  ;
11214: LD_ADDR_OWVAR 33
11218: PUSH
11219: LD_STRING 
11221: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11222: LD_INT 0
11224: PPUSH
11225: LD_INT 8
11227: PPUSH
11228: LD_VAR 0 8
11232: PPUSH
11233: CALL_OW 380
// un = CreateHuman ;
11237: LD_ADDR_VAR 0 16
11241: PUSH
11242: CALL_OW 44
11246: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11247: LD_VAR 0 16
11251: PPUSH
11252: LD_VAR 0 9
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 49
// end ;
11264: GO 11183
11266: POP
11267: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11268: LD_ADDR_VAR 0 19
11272: PUSH
11273: LD_INT 22
11275: PUSH
11276: LD_VAR 0 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 5
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 25
11310: PUSH
11311: LD_INT 8
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 25
11320: PUSH
11321: LD_INT 9
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11344: LD_ADDR_VAR 0 18
11348: PUSH
11349: LD_INT 22
11351: PUSH
11352: LD_VAR 0 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// for i in medic_list do
11380: LD_ADDR_VAR 0 14
11384: PUSH
11385: LD_VAR 0 18
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11409
// ComMoveToArea ( i , healArea ) ;
11393: LD_VAR 0 14
11397: PPUSH
11398: LD_VAR 0 10
11402: PPUSH
11403: CALL_OW 113
11407: GO 11390
11409: POP
11410: POP
// if strategy = 1 then
11411: LD_VAR 0 12
11415: PUSH
11416: LD_INT 1
11418: EQUAL
11419: IFFALSE 12136
// begin repeat wait ( 0 0$3 ) ;
11421: LD_INT 105
11423: PPUSH
11424: CALL_OW 67
// for i in soldiersOK_list do
11428: LD_ADDR_VAR 0 14
11432: PUSH
11433: LD_VAR 0 19
11437: PUSH
11438: FOR_IN
11439: IFFALSE 11473
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11441: LD_VAR 0 14
11445: PPUSH
11446: LD_INT 80
11448: PPUSH
11449: LD_INT 109
11451: PPUSH
11452: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11456: LD_VAR 0 14
11460: PPUSH
11461: LD_INT 39
11463: PPUSH
11464: LD_INT 49
11466: PPUSH
11467: CALL_OW 174
// end ;
11471: GO 11438
11473: POP
11474: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11475: LD_INT 13
11477: PPUSH
11478: LD_INT 22
11480: PUSH
11481: LD_VAR 0 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 70
11494: PUSH
11495: LD_INT 0
11497: GREATER
11498: IFFALSE 11421
// repeat wait ( 0 0$1 ) ;
11500: LD_INT 35
11502: PPUSH
11503: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11507: LD_ADDR_VAR 0 17
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_VAR 0 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: LD_INT 24
11532: PUSH
11533: LD_INT 550
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 24
11546: PUSH
11547: LD_INT 250
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PPUSH
11563: CALL_OW 69
11567: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11568: LD_ADDR_VAR 0 19
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_VAR 0 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: LD_INT 25
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 25
11600: PUSH
11601: LD_INT 5
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 8
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 25
11620: PUSH
11621: LD_INT 9
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 24
11637: PUSH
11638: LD_INT 1000
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 69
11654: ST_TO_ADDR
// if medicCount > 0 then
11655: LD_VAR 0 7
11659: PUSH
11660: LD_INT 0
11662: GREATER
11663: IFFALSE 11737
// begin if damageUnit_list > 0 then
11665: LD_VAR 0 17
11669: PUSH
11670: LD_INT 0
11672: GREATER
11673: IFFALSE 11737
// begin for i in damageUnit_list do
11675: LD_ADDR_VAR 0 14
11679: PUSH
11680: LD_VAR 0 17
11684: PUSH
11685: FOR_IN
11686: IFFALSE 11735
// begin ComMoveToArea ( i , healArea ) ;
11688: LD_VAR 0 14
11692: PPUSH
11693: LD_VAR 0 10
11697: PPUSH
11698: CALL_OW 113
// for j in medic_list do
11702: LD_ADDR_VAR 0 15
11706: PUSH
11707: LD_VAR 0 18
11711: PUSH
11712: FOR_IN
11713: IFFALSE 11731
// AddComHeal ( j , i ) ;
11715: LD_VAR 0 15
11719: PPUSH
11720: LD_VAR 0 14
11724: PPUSH
11725: CALL_OW 188
11729: GO 11712
11731: POP
11732: POP
// end ;
11733: GO 11685
11735: POP
11736: POP
// end ; end ; for i in soldiersOK_list do
11737: LD_ADDR_VAR 0 14
11741: PUSH
11742: LD_VAR 0 19
11746: PUSH
11747: FOR_IN
11748: IFFALSE 11930
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11750: LD_ADDR_VAR 0 22
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_VAR 0 11
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: PUSH
11772: LD_EXP 45
11776: DIFF
11777: PPUSH
11778: LD_VAR 0 14
11782: PPUSH
11783: CALL_OW 74
11787: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11788: LD_ADDR_VAR 0 23
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_VAR 0 11
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 59
11810: PUSH
11811: EMPTY
11812: LIST
11813: PUSH
11814: LD_INT 21
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PPUSH
11852: LD_VAR 0 14
11856: PPUSH
11857: CALL_OW 74
11861: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11862: LD_VAR 0 14
11866: PPUSH
11867: LD_VAR 0 22
11871: PPUSH
11872: CALL_OW 296
11876: PUSH
11877: LD_INT 8
11879: PLUS
11880: PUSH
11881: LD_VAR 0 14
11885: PPUSH
11886: LD_VAR 0 23
11890: PPUSH
11891: CALL_OW 296
11895: LESS
11896: IFFALSE 11914
// begin ComAttackUnit ( i , target1 ) ;
11898: LD_VAR 0 14
11902: PPUSH
11903: LD_VAR 0 22
11907: PPUSH
11908: CALL_OW 115
// end else
11912: GO 11928
// begin ComAttackUnit ( i , target2 ) ;
11914: LD_VAR 0 14
11918: PPUSH
11919: LD_VAR 0 23
11923: PPUSH
11924: CALL_OW 115
// end ; end ;
11928: GO 11747
11930: POP
11931: POP
// for i in soldiersOK_list do
11932: LD_ADDR_VAR 0 14
11936: PUSH
11937: LD_VAR 0 19
11941: PUSH
11942: FOR_IN
11943: IFFALSE 12125
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11945: LD_ADDR_VAR 0 22
11949: PUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 11
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: PUSH
11967: LD_EXP 45
11971: DIFF
11972: PPUSH
11973: LD_VAR 0 14
11977: PPUSH
11978: CALL_OW 74
11982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11983: LD_ADDR_VAR 0 23
11987: PUSH
11988: LD_INT 22
11990: PUSH
11991: LD_VAR 0 11
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 2
12002: PUSH
12003: LD_INT 59
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: LD_INT 21
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: PPUSH
12047: LD_VAR 0 14
12051: PPUSH
12052: CALL_OW 74
12056: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12057: LD_VAR 0 14
12061: PPUSH
12062: LD_VAR 0 22
12066: PPUSH
12067: CALL_OW 296
12071: PUSH
12072: LD_INT 8
12074: PLUS
12075: PUSH
12076: LD_VAR 0 14
12080: PPUSH
12081: LD_VAR 0 23
12085: PPUSH
12086: CALL_OW 296
12090: LESS
12091: IFFALSE 12109
// begin ComAttackUnit ( i , target1 ) ;
12093: LD_VAR 0 14
12097: PPUSH
12098: LD_VAR 0 22
12102: PPUSH
12103: CALL_OW 115
// end else
12107: GO 12123
// begin ComAttackUnit ( i , target2 ) ;
12109: LD_VAR 0 14
12113: PPUSH
12114: LD_VAR 0 23
12118: PPUSH
12119: CALL_OW 115
// end ; end ;
12123: GO 11942
12125: POP
12126: POP
// until soldiersOK_list = [ ] ;
12127: LD_VAR 0 19
12131: PUSH
12132: EMPTY
12133: EQUAL
12134: IFFALSE 11500
// end ; if strategy = 2 then
12136: LD_VAR 0 12
12140: PUSH
12141: LD_INT 2
12143: EQUAL
12144: IFFALSE 12849
// begin repeat wait ( 0 0$1 ) ;
12146: LD_INT 35
12148: PPUSH
12149: CALL_OW 67
// for i in soldiersOK_list do
12153: LD_ADDR_VAR 0 14
12157: PUSH
12158: LD_VAR 0 19
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12198
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12166: LD_VAR 0 14
12170: PPUSH
12171: LD_INT 117
12173: PPUSH
12174: LD_INT 97
12176: PPUSH
12177: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12181: LD_VAR 0 14
12185: PPUSH
12186: LD_INT 94
12188: PPUSH
12189: LD_INT 50
12191: PPUSH
12192: CALL_OW 174
// end ;
12196: GO 12163
12198: POP
12199: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12200: LD_INT 14
12202: PPUSH
12203: LD_INT 22
12205: PUSH
12206: LD_VAR 0 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PPUSH
12215: CALL_OW 70
12219: PUSH
12220: LD_INT 0
12222: GREATER
12223: IFFALSE 12146
// repeat wait ( 0 0$3 ) ;
12225: LD_INT 105
12227: PPUSH
12228: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12232: LD_ADDR_VAR 0 17
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_VAR 0 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: LD_INT 24
12257: PUSH
12258: LD_INT 550
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 24
12271: PUSH
12272: LD_INT 250
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12293: LD_ADDR_VAR 0 19
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_VAR 0 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 5
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 8
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 25
12345: PUSH
12346: LD_INT 9
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 24
12362: PUSH
12363: LD_INT 1000
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if medicCount > 0 then
12380: LD_VAR 0 7
12384: PUSH
12385: LD_INT 0
12387: GREATER
12388: IFFALSE 12462
// begin if damageUnit_list > 0 then
12390: LD_VAR 0 17
12394: PUSH
12395: LD_INT 0
12397: GREATER
12398: IFFALSE 12462
// begin for i in damageUnit_list do
12400: LD_ADDR_VAR 0 14
12404: PUSH
12405: LD_VAR 0 17
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12460
// begin ComMoveToArea ( i , healArea ) ;
12413: LD_VAR 0 14
12417: PPUSH
12418: LD_VAR 0 10
12422: PPUSH
12423: CALL_OW 113
// for j in medic_list do
12427: LD_ADDR_VAR 0 15
12431: PUSH
12432: LD_VAR 0 18
12436: PUSH
12437: FOR_IN
12438: IFFALSE 12456
// AddComHeal ( j , i ) ;
12440: LD_VAR 0 15
12444: PPUSH
12445: LD_VAR 0 14
12449: PPUSH
12450: CALL_OW 188
12454: GO 12437
12456: POP
12457: POP
// end ;
12458: GO 12410
12460: POP
12461: POP
// end ; end ; for i in soldiersOK_list do
12462: LD_ADDR_VAR 0 14
12466: PUSH
12467: LD_VAR 0 19
12471: PUSH
12472: FOR_IN
12473: IFFALSE 12649
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12475: LD_ADDR_VAR 0 22
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_VAR 0 11
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: PPUSH
12497: LD_VAR 0 14
12501: PPUSH
12502: CALL_OW 74
12506: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12507: LD_ADDR_VAR 0 23
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_VAR 0 11
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 59
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PPUSH
12571: LD_VAR 0 14
12575: PPUSH
12576: CALL_OW 74
12580: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12581: LD_VAR 0 14
12585: PPUSH
12586: LD_VAR 0 22
12590: PPUSH
12591: CALL_OW 296
12595: PUSH
12596: LD_INT 8
12598: PLUS
12599: PUSH
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_VAR 0 23
12609: PPUSH
12610: CALL_OW 296
12614: LESS
12615: IFFALSE 12633
// begin ComAttackUnit ( i , target1 ) ;
12617: LD_VAR 0 14
12621: PPUSH
12622: LD_VAR 0 22
12626: PPUSH
12627: CALL_OW 115
// end else
12631: GO 12647
// begin ComAttackUnit ( i , target2 ) ;
12633: LD_VAR 0 14
12637: PPUSH
12638: LD_VAR 0 23
12642: PPUSH
12643: CALL_OW 115
// end ; end ;
12647: GO 12472
12649: POP
12650: POP
// for i in soldiersOK_list do
12651: LD_ADDR_VAR 0 14
12655: PUSH
12656: LD_VAR 0 19
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12838
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12664: LD_ADDR_VAR 0 22
12668: PUSH
12669: LD_INT 22
12671: PUSH
12672: LD_VAR 0 11
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PPUSH
12686: LD_VAR 0 14
12690: PPUSH
12691: CALL_OW 74
12695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12696: LD_ADDR_VAR 0 23
12700: PUSH
12701: LD_INT 22
12703: PUSH
12704: LD_VAR 0 11
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 59
12718: PUSH
12719: EMPTY
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: PPUSH
12760: LD_VAR 0 14
12764: PPUSH
12765: CALL_OW 74
12769: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12770: LD_VAR 0 14
12774: PPUSH
12775: LD_VAR 0 22
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: PLUS
12788: PUSH
12789: LD_VAR 0 14
12793: PPUSH
12794: LD_VAR 0 23
12798: PPUSH
12799: CALL_OW 296
12803: LESS
12804: IFFALSE 12822
// begin ComAttackUnit ( i , target1 ) ;
12806: LD_VAR 0 14
12810: PPUSH
12811: LD_VAR 0 22
12815: PPUSH
12816: CALL_OW 115
// end else
12820: GO 12836
// begin ComAttackUnit ( i , target2 ) ;
12822: LD_VAR 0 14
12826: PPUSH
12827: LD_VAR 0 23
12831: PPUSH
12832: CALL_OW 115
// end ; end ;
12836: GO 12661
12838: POP
12839: POP
// until soldiersOK_list = [ ] ;
12840: LD_VAR 0 19
12844: PUSH
12845: EMPTY
12846: EQUAL
12847: IFFALSE 12225
// end ; end ; end_of_file
12849: LD_VAR 0 13
12853: RET
// every 0 0$01 do
12854: GO 12856
12856: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12857: LD_INT 22
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 25
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_INT 0
12888: EQUAL
12889: IFFALSE 12903
// SetClass ( JMM , 2 ) ;
12891: LD_EXP 1
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12903: LD_STRING M1
12905: PPUSH
12906: CALL_OW 337
// case difficulty of 1 :
12910: LD_OWVAR 67
12914: PUSH
12915: LD_INT 1
12917: DOUBLE
12918: EQUAL
12919: IFTRUE 12923
12921: GO 12933
12923: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12924: LD_STRING M1-1
12926: PPUSH
12927: CALL_OW 337
12931: GO 12970
12933: LD_INT 2
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 12951
12941: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12942: LD_STRING M1-2
12944: PPUSH
12945: CALL_OW 337
12949: GO 12970
12951: LD_INT 3
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 12969
12959: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12960: LD_STRING M1-3
12962: PPUSH
12963: CALL_OW 337
12967: GO 12970
12969: POP
// ChangeMissionObjectives ( M1cont ) ;
12970: LD_STRING M1cont
12972: PPUSH
12973: CALL_OW 337
// wait ( 0 0$2 ) ;
12977: LD_INT 70
12979: PPUSH
12980: CALL_OW 67
// SaveForQuickRestart ;
12984: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12988: LD_INT 525
12990: PPUSH
12991: LD_INT 700
12993: PPUSH
12994: CALL_OW 12
12998: PPUSH
12999: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
13003: LD_INT 5
13005: PPUSH
13006: LD_INT 82
13008: PPUSH
13009: LD_INT 38
13011: PPUSH
13012: LD_INT 10
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 56
// wait ( 0 0$14 ) ;
13022: LD_INT 490
13024: PPUSH
13025: CALL_OW 67
// firstCrateSpawn := true ;
13029: LD_ADDR_EXP 41
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// end ;
13037: END
// every 0 0$02 trigger firstCrateSpawn do
13038: LD_EXP 41
13042: IFFALSE 13405
13044: GO 13046
13046: DISABLE
// begin if IsOk ( Lisa ) then
13047: LD_EXP 2
13051: PPUSH
13052: CALL_OW 302
13056: IFFALSE 13072
// Say ( Lisa , DR0-Lisa-1 ) else
13058: LD_EXP 2
13062: PPUSH
13063: LD_STRING DR0-Lisa-1
13065: PPUSH
13066: CALL_OW 88
13070: GO 13218
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13072: LD_INT 22
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 26
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: LD_INT 25
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 25
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 25
13137: PUSH
13138: LD_INT 4
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: PUSH
13163: LD_EXP 1
13167: PUSH
13168: LD_EXP 8
13172: PUSH
13173: LD_EXP 5
13177: PUSH
13178: LD_EXP 6
13182: PUSH
13183: LD_EXP 7
13187: PUSH
13188: LD_EXP 4
13192: PUSH
13193: LD_EXP 3
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: DIFF
13207: PPUSH
13208: LD_STRING DR0-Sol1-1
13210: PPUSH
13211: LD_STRING DR0-Sol1-1
13213: PPUSH
13214: CALL 6247 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13218: LD_INT 22
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 21
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 26
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 3
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 25
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PUSH
13309: LD_EXP 1
13313: PUSH
13314: LD_EXP 8
13318: PUSH
13319: LD_EXP 5
13323: PUSH
13324: LD_EXP 2
13328: PUSH
13329: LD_EXP 6
13333: PUSH
13334: LD_EXP 7
13338: PUSH
13339: LD_EXP 4
13343: PUSH
13344: LD_EXP 3
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: DIFF
13359: PPUSH
13360: LD_STRING DR0-Sol2-1
13362: PPUSH
13363: LD_STRING DR0-Sol2-1
13365: PPUSH
13366: CALL 6247 0 3
// if IsOk ( Cyrus ) then
13370: LD_EXP 4
13374: PPUSH
13375: CALL_OW 302
13379: IFFALSE 13393
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13381: LD_EXP 4
13385: PPUSH
13386: LD_STRING DR0-Cyrus-1
13388: PPUSH
13389: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13393: LD_EXP 1
13397: PPUSH
13398: LD_STRING DR0-JMM-1
13400: PPUSH
13401: CALL_OW 88
// end ;
13405: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13406: LD_EXP 5
13410: PPUSH
13411: CALL_OW 302
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_INT 1
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 16
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: PUSH
13445: LD_INT 0
13447: GREATER
13448: AND
13449: PUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 463
13457: NOT
13458: AND
13459: IFFALSE 13737
13461: GO 13463
13463: DISABLE
// begin DialogueOn ;
13464: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13468: LD_EXP 5
13472: PPUSH
13473: LD_STRING D10-Frank-1
13475: PPUSH
13476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13480: LD_INT 22
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 25
13515: PUSH
13516: LD_INT 2
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 25
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 25
13535: PUSH
13536: LD_INT 4
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: PUSH
13560: LD_EXP 1
13564: PUSH
13565: LD_EXP 5
13569: PUSH
13570: LD_EXP 2
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: DIFF
13580: PPUSH
13581: LD_STRING D10-Sol1-1
13583: PPUSH
13584: LD_STRING D10-FSol1-1
13586: PPUSH
13587: CALL 6247 0 3
// Say ( Frank , D10-Frank-2 ) ;
13591: LD_EXP 5
13595: PPUSH
13596: LD_STRING D10-Frank-2
13598: PPUSH
13599: CALL_OW 88
// if IsOK ( Lisa ) then
13603: LD_EXP 2
13607: PPUSH
13608: CALL_OW 302
13612: IFFALSE 13628
// begin Say ( Lisa , D10-Lisa-2 ) ;
13614: LD_EXP 2
13618: PPUSH
13619: LD_STRING D10-Lisa-2
13621: PPUSH
13622: CALL_OW 88
// end else
13626: GO 13733
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13628: LD_INT 22
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 25
13653: PUSH
13654: LD_INT 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: PUSH
13708: LD_EXP 1
13712: PUSH
13713: LD_EXP 5
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: DIFF
13722: PPUSH
13723: LD_STRING D10-Sol1-2
13725: PPUSH
13726: LD_STRING D10-FSol1-2
13728: PPUSH
13729: CALL 6247 0 3
// end ; DialogueOff ;
13733: CALL_OW 7
// end ;
13737: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 463
13745: NOT
13746: IFFALSE 14041
13748: GO 13750
13750: DISABLE
// begin HarrisonSupport ;
13751: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13755: LD_EXP 17
13759: PPUSH
13760: CALL_OW 310
13764: PPUSH
13765: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13769: LD_EXP 17
13773: PPUSH
13774: LD_STRING DEng-Eng1-1
13776: PPUSH
13777: CALL_OW 88
// wait ( 1 1$0 ) ;
13781: LD_INT 2100
13783: PPUSH
13784: CALL_OW 67
// DialogueOn ;
13788: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13792: LD_EXP 14
13796: PPUSH
13797: LD_STRING DRem-Har-1
13799: PPUSH
13800: CALL_OW 94
// if contactWithRussian = 1 then
13804: LD_EXP 22
13808: PUSH
13809: LD_INT 1
13811: EQUAL
13812: IFFALSE 13828
// begin Say ( JMM , DRem-JMM-1 ) ;
13814: LD_EXP 1
13818: PPUSH
13819: LD_STRING DRem-JMM-1
13821: PPUSH
13822: CALL_OW 88
// end else
13826: GO 13840
// begin Say ( JMM , DRem-JMM-1a ) ;
13828: LD_EXP 1
13832: PPUSH
13833: LD_STRING DRem-JMM-1a
13835: PPUSH
13836: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13840: LD_EXP 14
13844: PPUSH
13845: LD_STRING DRem-Har-2
13847: PPUSH
13848: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13852: LD_STRING DenisInDelta
13854: PPUSH
13855: LD_INT 0
13857: PPUSH
13858: CALL_OW 30
13862: PUSH
13863: LD_INT 1
13865: EQUAL
13866: IFFALSE 13882
// begin Say ( JMM , DRem-JMM-2 ) ;
13868: LD_EXP 1
13872: PPUSH
13873: LD_STRING DRem-JMM-2
13875: PPUSH
13876: CALL_OW 88
// end else
13880: GO 13894
// begin Say ( JMM , DRem-JMM-2a ) ;
13882: LD_EXP 1
13886: PPUSH
13887: LD_STRING DRem-JMM-2a
13889: PPUSH
13890: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13894: LD_EXP 14
13898: PPUSH
13899: LD_STRING DRem-Har-3
13901: PPUSH
13902: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13906: LD_EXP 1
13910: PPUSH
13911: LD_STRING DRem-JMM-3
13913: PPUSH
13914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13918: LD_EXP 14
13922: PPUSH
13923: LD_STRING DRem-Har-4
13925: PPUSH
13926: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13930: LD_STRING DenisInDelta
13932: PPUSH
13933: LD_INT 0
13935: PPUSH
13936: CALL_OW 30
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: IFFALSE 14004
// begin Say ( JMM , DRem-JMM-4 ) ;
13946: LD_EXP 1
13950: PPUSH
13951: LD_STRING DRem-JMM-4
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13958: LD_EXP 14
13962: PPUSH
13963: LD_STRING DRem-Har-5
13965: PPUSH
13966: CALL_OW 94
// DialogueOff ;
13970: CALL_OW 7
// wait ( 4 4$00 ) ;
13974: LD_INT 8400
13976: PPUSH
13977: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// until not InBattle ( 1 ) ;
13988: LD_INT 1
13990: PPUSH
13991: CALL_OW 463
13995: NOT
13996: IFFALSE 13981
// SpawnDenis ;
13998: CALL 14042 0 0
// end else
14002: GO 14041
// begin DialogueOff ;
14004: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14008: LD_INT 36
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14021: LD_INT 15
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14034: LD_STRING MR
14036: PPUSH
14037: CALL_OW 337
// end ; end ;
14041: END
// export function SpawnDenis ; var tmp ; begin
14042: LD_INT 0
14044: PPUSH
14045: PPUSH
// PrepareDenis ;
14046: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
14050: LD_EXP 9
14054: PPUSH
14055: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14079: LD_EXP 9
14083: PPUSH
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_EXP 9
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14110: LD_INT 22
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 91
14122: PUSH
14123: LD_EXP 9
14127: PUSH
14128: LD_INT 10
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: IFFALSE 14103
// SetSide ( Denis , 1 ) ;
14146: LD_EXP 9
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 235
// DialogueOn ;
14158: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14162: LD_EXP 9
14166: PPUSH
14167: LD_STRING DDen-Den-1
14169: PPUSH
14170: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14174: LD_EXP 1
14178: PPUSH
14179: LD_STRING DDen-JMM-1
14181: PPUSH
14182: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14186: LD_EXP 9
14190: PPUSH
14191: LD_STRING DDen-Den-2
14193: PPUSH
14194: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14198: LD_EXP 1
14202: PPUSH
14203: LD_STRING DDen-JMM-2
14205: PPUSH
14206: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14210: LD_EXP 9
14214: PPUSH
14215: LD_STRING DDen-Den-3
14217: PPUSH
14218: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14222: LD_EXP 1
14226: PPUSH
14227: LD_STRING DDen-JMM-3
14229: PPUSH
14230: CALL_OW 88
// DialogueOff ;
14234: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14238: LD_INT 36
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_INT 1
14246: PPUSH
14247: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14251: LD_INT 15
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14264: LD_STRING MR
14266: PPUSH
14267: CALL_OW 337
// end ;
14271: LD_VAR 0 1
14275: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14276: CALL 14331 0 0
14280: PUSH
14281: LD_EXP 9
14285: PPUSH
14286: CALL_OW 302
14290: AND
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 463
14299: NOT
14300: AND
14301: IFFALSE 14330
14303: GO 14305
14305: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14306: LD_EXP 9
14310: PPUSH
14311: LD_STRING DR1-Den-1
14313: PPUSH
14314: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14318: LD_EXP 1
14322: PPUSH
14323: LD_STRING DR1-JMM-1
14325: PPUSH
14326: CALL_OW 88
// end ;
14330: END
// function CheckOptoLab ; var i ; begin
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
// result = false ;
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 30
14363: PUSH
14364: LD_INT 7
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 30
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 69
14394: PUSH
14395: FOR_IN
14396: IFFALSE 14448
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14398: LD_VAR 0 2
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 268
14410: PUSH
14411: LD_INT 15
14413: EQUAL
14414: PUSH
14415: LD_VAR 0 2
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 268
14427: PUSH
14428: LD_INT 15
14430: EQUAL
14431: OR
14432: IFFALSE 14444
// begin result = true ;
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ST_TO_ADDR
// break ;
14442: GO 14448
// end ; break ;
14444: GO 14448
// end ;
14446: GO 14395
14448: POP
14449: POP
// end ;
14450: LD_VAR 0 1
14454: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14455: LD_INT 15
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 321
14465: PUSH
14466: LD_INT 2
14468: EQUAL
14469: PUSH
14470: LD_EXP 9
14474: PPUSH
14475: CALL_OW 302
14479: AND
14480: PUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 463
14488: NOT
14489: AND
14490: IFFALSE 14722
14492: GO 14494
14494: DISABLE
// begin DialogueOn ;
14495: CALL_OW 6
// if IsOK ( Denis ) then
14499: LD_EXP 9
14503: PPUSH
14504: CALL_OW 302
14508: IFFALSE 14524
// begin Say ( Denis , DR2-Den-1 ) ;
14510: LD_EXP 9
14514: PPUSH
14515: LD_STRING DR2-Den-1
14517: PPUSH
14518: CALL_OW 88
// end else
14522: GO 14583
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14524: LD_INT 22
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 25
14546: PUSH
14547: LD_INT 4
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: PUSH
14564: LD_EXP 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: DIFF
14572: PPUSH
14573: LD_STRING DR2-Sci1-1
14575: PPUSH
14576: LD_STRING DR2-FSci1-1
14578: PPUSH
14579: CALL 6247 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14583: LD_EXP 1
14587: PPUSH
14588: LD_STRING DR2-JMM-1
14590: PPUSH
14591: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14595: LD_INT 22
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 1
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 25
14650: PUSH
14651: LD_INT 4
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: PUSH
14675: LD_EXP 1
14679: PUSH
14680: LD_EXP 9
14684: PUSH
14685: LD_EXP 8
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: DIFF
14695: PPUSH
14696: LD_STRING DR2-Sol1-1
14698: PPUSH
14699: LD_STRING DR2-Sol1-11
14701: PPUSH
14702: CALL 6247 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14706: LD_EXP 1
14710: PPUSH
14711: LD_STRING DR2-JMM-2
14713: PPUSH
14714: CALL_OW 88
// DialogueOff ;
14718: CALL_OW 7
// end ;
14722: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14723: LD_INT 22
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 30
14735: PUSH
14736: LD_INT 36
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 69
14751: PUSH
14752: LD_INT 0
14754: EQUAL
14755: PUSH
14756: LD_INT 22
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 33
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: PUSH
14796: LD_INT 0
14798: GREATER
14799: AND
14800: PUSH
14801: LD_EXP 23
14805: PUSH
14806: LD_INT 0
14808: EQUAL
14809: AND
14810: PUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 463
14818: NOT
14819: AND
14820: IFFALSE 14957
14822: GO 14824
14824: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14825: LD_INT 22
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 21
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 25
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 26
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: LD_EXP 1
14880: PUSH
14881: LD_EXP 6
14885: PUSH
14886: LD_EXP 7
14890: PUSH
14891: LD_EXP 9
14895: PUSH
14896: LD_EXP 15
14900: PUSH
14901: LD_EXP 3
14905: PUSH
14906: LD_EXP 4
14910: PUSH
14911: LD_EXP 2
14915: PUSH
14916: LD_EXP 5
14920: PUSH
14921: LD_EXP 8
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: DIFF
14938: PPUSH
14939: LD_STRING D3a-Mech1-1
14941: PPUSH
14942: LD_STRING D3a-Mech1-1
14944: PPUSH
14945: CALL 6247 0 3
// firstTower = 2 ;
14949: LD_ADDR_EXP 23
14953: PUSH
14954: LD_INT 2
14956: ST_TO_ADDR
// end ;
14957: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14958: LD_INT 22
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: IFFALSE 15105
14992: GO 14994
14994: DISABLE
14995: LD_INT 0
14997: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 2
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 25
15058: PUSH
15059: LD_INT 4
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: PPUSH
15078: CALL_OW 69
15082: PUSH
15083: FOR_IN
15084: IFFALSE 15103
// AddExperience ( i , 1 , 10000 ) ;
15086: LD_VAR 0 1
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: LD_INT 10000
15096: PPUSH
15097: CALL_OW 492
15101: GO 15083
15103: POP
15104: POP
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15108: LD_INT 22
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 30
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: PUSH
15137: LD_INT 0
15139: GREATER
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 33
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: PUSH
15181: LD_INT 0
15183: GREATER
15184: AND
15185: PUSH
15186: CALL 15778 0 0
15190: AND
15191: PUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 463
15199: NOT
15200: AND
15201: IFFALSE 15775
15203: GO 15205
15205: DISABLE
15206: LD_INT 0
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: LD_INT 22
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 30
15230: PUSH
15231: LD_INT 36
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15247: LD_ADDR_VAR 0 4
15251: PUSH
15252: LD_INT 22
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 21
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 33
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15292: LD_ADDR_VAR 0 5
15296: PUSH
15297: EMPTY
15298: ST_TO_ADDR
// for i in tmpControlTowers do
15299: LD_ADDR_VAR 0 1
15303: PUSH
15304: LD_VAR 0 3
15308: PUSH
15309: FOR_IN
15310: IFFALSE 15773
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15312: LD_EXP 1
15316: PPUSH
15317: CALL_OW 310
15321: PUSH
15322: LD_VAR 0 1
15326: EQUAL
15327: PUSH
15328: LD_EXP 1
15332: PPUSH
15333: CALL_OW 257
15337: PUSH
15338: LD_INT 3
15340: EQUAL
15341: AND
15342: IFFALSE 15472
// begin InGameOn ;
15344: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15348: LD_VAR 0 4
15352: PUSH
15353: LD_INT 1
15355: ARRAY
15356: PPUSH
15357: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15361: LD_EXP 1
15365: PPUSH
15366: LD_STRING D4a-JMM-1
15368: PPUSH
15369: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15373: LD_VAR 0 4
15377: PUSH
15378: LD_INT 1
15380: ARRAY
15381: PPUSH
15382: LD_EXP 1
15386: PPUSH
15387: CALL_OW 53
// wait ( 0 0$1 ) ;
15391: LD_INT 35
15393: PPUSH
15394: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15398: LD_VAR 0 4
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_VAR 0 4
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 250
15420: PUSH
15421: LD_INT 3
15423: PLUS
15424: PPUSH
15425: LD_VAR 0 4
15429: PUSH
15430: LD_INT 1
15432: ARRAY
15433: PPUSH
15434: CALL_OW 251
15438: PUSH
15439: LD_INT 2
15441: MINUS
15442: PPUSH
15443: CALL_OW 111
// wait ( 0 0$2 ) ;
15447: LD_INT 70
15449: PPUSH
15450: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D4b-JMM-1
15461: PPUSH
15462: CALL_OW 88
// InGameOff ;
15466: CALL_OW 9
// end else
15470: GO 15771
// begin InGameOn ;
15472: CALL_OW 8
// for j in UnitsInside ( i ) do
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 313
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15527
// if GetClass ( j ) = 3 then
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 257
15503: PUSH
15504: LD_INT 3
15506: EQUAL
15507: IFFALSE 15525
// tmpMechanicInside = tmpMechanicInside ^ j ;
15509: LD_ADDR_VAR 0 5
15513: PUSH
15514: LD_VAR 0 5
15518: PUSH
15519: LD_VAR 0 2
15523: ADD
15524: ST_TO_ADDR
15525: GO 15491
15527: POP
15528: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15529: LD_VAR 0 5
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: CALL_OW 258
15542: PUSH
15543: LD_INT 1
15545: EQUAL
15546: IFFALSE 15564
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15548: LD_VAR 0 5
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_STRING D4a-Mech1-1
15559: PPUSH
15560: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15564: LD_VAR 0 5
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: PPUSH
15573: CALL_OW 258
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15599
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15583: LD_VAR 0 5
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: LD_STRING D4a-FMech1-1
15594: PPUSH
15595: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15599: LD_VAR 0 4
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PPUSH
15608: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15612: LD_VAR 0 4
15616: PUSH
15617: LD_INT 1
15619: ARRAY
15620: PPUSH
15621: LD_VAR 0 5
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: CALL_OW 53
// wait ( 0 0$1 ) ;
15634: LD_INT 35
15636: PPUSH
15637: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15641: LD_VAR 0 4
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 4
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL_OW 250
15663: PUSH
15664: LD_INT 3
15666: PLUS
15667: PPUSH
15668: LD_VAR 0 4
15672: PUSH
15673: LD_INT 1
15675: ARRAY
15676: PPUSH
15677: CALL_OW 251
15681: PUSH
15682: LD_INT 2
15684: MINUS
15685: PPUSH
15686: CALL_OW 111
// wait ( 0 0$2 ) ;
15690: LD_INT 70
15692: PPUSH
15693: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15697: LD_VAR 0 5
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 258
15710: PUSH
15711: LD_INT 1
15713: EQUAL
15714: IFFALSE 15732
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15716: LD_VAR 0 5
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PPUSH
15725: LD_STRING D4b-Mech1-1
15727: PPUSH
15728: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15732: LD_VAR 0 5
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PPUSH
15741: CALL_OW 258
15745: PUSH
15746: LD_INT 2
15748: EQUAL
15749: IFFALSE 15767
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15751: LD_VAR 0 5
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_STRING D4b-FMech1-1
15762: PPUSH
15763: CALL_OW 88
// InGameOff ;
15767: CALL_OW 9
// end ; end ;
15771: GO 15309
15773: POP
15774: POP
// end ;
15775: PPOPN 5
15777: END
// function CheckMehInside ; var i , j ; begin
15778: LD_INT 0
15780: PPUSH
15781: PPUSH
15782: PPUSH
// result = false ;
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_INT 0
15790: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 30
15808: PUSH
15809: LD_INT 36
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 69
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15877
// begin for j in UnitsInside ( i ) do
15828: LD_ADDR_VAR 0 3
15832: PUSH
15833: LD_VAR 0 2
15837: PPUSH
15838: CALL_OW 313
15842: PUSH
15843: FOR_IN
15844: IFFALSE 15873
// begin if GetClass ( j ) = 3 then
15846: LD_VAR 0 3
15850: PPUSH
15851: CALL_OW 257
15855: PUSH
15856: LD_INT 3
15858: EQUAL
15859: IFFALSE 15871
// begin result = true ;
15861: LD_ADDR_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// break ;
15869: GO 15873
// end ; end ;
15871: GO 15843
15873: POP
15874: POP
// end ;
15875: GO 15825
15877: POP
15878: POP
// end ;
15879: LD_VAR 0 1
15883: RET
// every 25 25$0 do
15884: GO 15886
15886: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15887: LD_INT 35
15889: PPUSH
15890: CALL_OW 67
// until not InBattle ( 1 ) and GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , JMM ) , JMM ) > 30 ;
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 463
15901: NOT
15902: PUSH
15903: LD_INT 81
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PPUSH
15913: CALL_OW 69
15917: PPUSH
15918: LD_EXP 1
15922: PPUSH
15923: CALL_OW 74
15927: PPUSH
15928: LD_EXP 1
15932: PPUSH
15933: CALL_OW 296
15937: PUSH
15938: LD_INT 30
15940: GREATER
15941: AND
15942: IFFALSE 15887
// PrepareKurt ;
15944: CALL 19545 0 0
// end ;
15948: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15949: LD_EXP 15
15953: PPUSH
15954: CALL_OW 302
15958: PUSH
15959: LD_EXP 15
15963: PPUSH
15964: CALL_OW 255
15968: PUSH
15969: LD_INT 1
15971: EQUAL
15972: AND
15973: PUSH
15974: LD_EXP 2
15978: AND
15979: IFFALSE 16144
15981: GO 15983
15983: DISABLE
// begin wait ( 0 0$50 ) ;
15984: LD_INT 1750
15986: PPUSH
15987: CALL_OW 67
// if not IsOk ( Joan ) then
15991: LD_EXP 15
15995: PPUSH
15996: CALL_OW 302
16000: NOT
16001: IFFALSE 16005
// exit ;
16003: GO 16144
// if IsOK ( Lisa ) then
16005: LD_EXP 2
16009: PPUSH
16010: CALL_OW 302
16014: IFFALSE 16144
// begin DialogueOn ;
16016: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
16020: LD_EXP 2
16024: PPUSH
16025: LD_STRING D7-Lisa-1
16027: PPUSH
16028: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16032: LD_EXP 1
16036: PPUSH
16037: LD_STRING D7-JMM-1
16039: PPUSH
16040: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16044: LD_EXP 2
16048: PPUSH
16049: LD_STRING D7-Lisa-2
16051: PPUSH
16052: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16056: LD_EXP 1
16060: PPUSH
16061: LD_STRING D7-JMM-2
16063: PPUSH
16064: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16068: LD_EXP 2
16072: PPUSH
16073: LD_STRING D7-Lisa-3
16075: PPUSH
16076: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16080: LD_EXP 1
16084: PPUSH
16085: LD_STRING D7-JMM-3
16087: PPUSH
16088: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16092: LD_EXP 2
16096: PPUSH
16097: LD_STRING D7-Lisa-4
16099: PPUSH
16100: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16104: LD_EXP 1
16108: PPUSH
16109: LD_STRING D7-JMM-4
16111: PPUSH
16112: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16116: LD_EXP 1
16120: PPUSH
16121: LD_STRING D7-JMM-4a
16123: PPUSH
16124: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16128: LD_EXP 2
16132: PPUSH
16133: LD_STRING D7-Lisa-5
16135: PPUSH
16136: CALL_OW 88
// DialogueOff ;
16140: CALL_OW 7
// end ; end ;
16144: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16145: LD_EXP 13
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 91
16162: PUSH
16163: LD_EXP 13
16167: PUSH
16168: LD_INT 10
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: LD_INT 25
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 25
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 25
16211: PUSH
16212: LD_INT 4
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PUSH
16236: LD_INT 1
16238: GREATER
16239: AND
16240: IFFALSE 16257
16242: GO 16244
16244: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16245: LD_EXP 13
16249: PPUSH
16250: LD_STRING D5-Sol1-1
16252: PPUSH
16253: CALL_OW 88
// end ;
16257: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16258: LD_INT 22
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 33
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PPUSH
16282: CALL_OW 69
16286: PUSH
16287: LD_INT 2
16289: GREATEREQUAL
16290: IFFALSE 16310
16292: GO 16294
16294: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16295: LD_STRING MRa
16297: PPUSH
16298: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16302: LD_ADDR_EXP 28
16306: PUSH
16307: LD_INT 1
16309: ST_TO_ADDR
// end ;
16310: END
// every 2 2$00 do var i , last ;
16311: GO 16313
16313: DISABLE
16314: LD_INT 0
16316: PPUSH
16317: PPUSH
// begin last := 8 ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_INT 8
16325: ST_TO_ADDR
// for i = 1 to last do
16326: LD_ADDR_VAR 0 1
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_VAR 0 2
16340: PUSH
16341: FOR_TO
16342: IFFALSE 16370
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16344: LD_INT 6300
16346: PPUSH
16347: LD_INT 12600
16349: PPUSH
16350: CALL_OW 12
16354: PPUSH
16355: CALL_OW 67
// PrepareRandoms ( i ) ;
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL 4112 0 1
// end ;
16368: GO 16341
16370: POP
16371: POP
// end ;
16372: PPOPN 2
16374: END
// every 5 5$20 do
16375: GO 16377
16377: DISABLE
// begin DialogueOn ;
16378: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16382: LD_EXP 10
16386: PPUSH
16387: LD_STRING D12a-Sci-1
16389: PPUSH
16390: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16394: LD_EXP 1
16398: PPUSH
16399: LD_STRING D12a-JMM-1
16401: PPUSH
16402: CALL_OW 88
// DialogueOff ;
16406: CALL_OW 7
// cratesStatus = 1 ;
16410: LD_ADDR_EXP 38
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// end ;
16418: END
// every 13 13$0 do
16419: GO 16421
16421: DISABLE
// begin DialogueOn ;
16422: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16426: LD_EXP 10
16430: PPUSH
16431: LD_STRING D12b-Sci-1
16433: PPUSH
16434: CALL_OW 94
// DialogueOff ;
16438: CALL_OW 7
// cratesStatus = 2 ;
16442: LD_ADDR_EXP 38
16446: PUSH
16447: LD_INT 2
16449: ST_TO_ADDR
// end ;
16450: END
// every 32 32$0 do
16451: GO 16453
16453: DISABLE
// begin DialogueOn ;
16454: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16458: LD_EXP 10
16462: PPUSH
16463: LD_STRING D12c-Sci-1
16465: PPUSH
16466: CALL_OW 94
// DialogueOff ;
16470: CALL_OW 7
// wait ( 3 3$0 ) ;
16474: LD_INT 6300
16476: PPUSH
16477: CALL_OW 67
// DialogueOn ;
16481: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16485: LD_EXP 10
16489: PPUSH
16490: LD_STRING D12d-Sci-1
16492: PPUSH
16493: CALL_OW 94
// DialogueOff ;
16497: CALL_OW 7
// cratesStatus = 1 ;
16501: LD_ADDR_EXP 38
16505: PUSH
16506: LD_INT 1
16508: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16509: LD_INT 1400
16511: PPUSH
16512: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16516: LD_INT 35
16518: PPUSH
16519: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 463
16530: NOT
16531: PUSH
16532: LD_INT 32
16534: PPUSH
16535: LD_INT 81
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 70
16549: NOT
16550: AND
16551: IFFALSE 16516
// PrepareJoan ;
16553: CALL 3016 0 0
// end ;
16557: END
// every 42 42$0 do
16558: GO 16560
16560: DISABLE
// begin DialogueOn ;
16561: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16565: LD_EXP 10
16569: PPUSH
16570: LD_STRING D12e-Sci-1
16572: PPUSH
16573: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16577: LD_EXP 1
16581: PPUSH
16582: LD_STRING D12e-JMM-1
16584: PPUSH
16585: CALL_OW 88
// DialogueOff ;
16589: CALL_OW 7
// cratesStatus = 2 ;
16593: LD_ADDR_EXP 38
16597: PUSH
16598: LD_INT 2
16600: ST_TO_ADDR
// end ;
16601: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16602: LD_INT 22
16604: PUSH
16605: LD_INT 6
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 21
16614: PUSH
16615: LD_INT 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 34
16624: PUSH
16625: LD_INT 51
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: PUSH
16642: LD_INT 0
16644: GREATER
16645: IFFALSE 16728
16647: GO 16649
16649: DISABLE
16650: LD_INT 0
16652: PPUSH
// begin enable ;
16653: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: LD_INT 22
16661: PUSH
16662: LD_INT 6
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 21
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: PUSH
16706: FOR_IN
16707: IFFALSE 16726
// ComAgressiveMove ( i , 138 , 168 ) ;
16709: LD_VAR 0 1
16713: PPUSH
16714: LD_INT 138
16716: PPUSH
16717: LD_INT 168
16719: PPUSH
16720: CALL_OW 114
16724: GO 16706
16726: POP
16727: POP
// end ;
16728: PPOPN 1
16730: END
// every 0 0$1 do var i ;
16731: GO 16733
16733: DISABLE
16734: LD_INT 0
16736: PPUSH
// begin enable ;
16737: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16738: LD_ADDR_VAR 0 1
16742: PUSH
16743: LD_INT 4
16745: PPUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 22
16751: PUSH
16752: LD_INT 3
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_INT 6
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: PPUSH
16777: CALL_OW 70
16781: PUSH
16782: FOR_IN
16783: IFFALSE 16847
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16785: LD_INT 4
16787: PPUSH
16788: LD_INT 22
16790: PUSH
16791: LD_INT 6
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 34
16800: PUSH
16801: LD_INT 51
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 70
16816: PUSH
16817: LD_INT 0
16819: GREATER
16820: IFFALSE 16836
// sendedConvoys = sendedConvoys + 1 ;
16822: LD_ADDR_EXP 39
16826: PUSH
16827: LD_EXP 39
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// RemoveUnit ( i ) ;
16836: LD_VAR 0 1
16840: PPUSH
16841: CALL_OW 64
// end ;
16845: GO 16782
16847: POP
16848: POP
// end ; end_of_file
16849: PPOPN 1
16851: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16852: LD_VAR 0 1
16856: PUSH
16857: LD_INT 1
16859: EQUAL
16860: PUSH
16861: LD_VAR 0 2
16865: PUSH
16866: LD_INT 3
16868: EQUAL
16869: AND
16870: IFFALSE 16880
// contactWithRussian = 1 ;
16872: LD_ADDR_EXP 22
16876: PUSH
16877: LD_INT 1
16879: ST_TO_ADDR
// end ;
16880: PPOPN 2
16882: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 266
16892: PUSH
16893: LD_INT 36
16895: EQUAL
16896: PUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 255
16906: PUSH
16907: LD_INT 1
16909: EQUAL
16910: AND
16911: PUSH
16912: LD_INT 22
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 21
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 33
16934: PUSH
16935: LD_INT 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 69
16951: PUSH
16952: LD_INT 0
16954: EQUAL
16955: AND
16956: PUSH
16957: LD_EXP 23
16961: PUSH
16962: LD_INT 0
16964: EQUAL
16965: AND
16966: IFFALSE 17046
// begin firstTower = 1 ;
16968: LD_ADDR_EXP 23
16972: PUSH
16973: LD_INT 1
16975: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16976: LD_INT 22
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 21
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 25
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PPUSH
17022: CALL_OW 69
17026: PUSH
17027: LD_EXP 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: DIFF
17035: PPUSH
17036: LD_STRING D3b-Mech1-1
17038: PPUSH
17039: LD_STRING D3b-Mech1-1
17041: PPUSH
17042: CALL 6247 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 266
17055: PUSH
17056: LD_INT 0
17058: EQUAL
17059: PUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 1
17072: EQUAL
17073: AND
17074: IFFALSE 17088
// SetBName ( building , theta ) ;
17076: LD_VAR 0 1
17080: PPUSH
17081: LD_STRING theta
17083: PPUSH
17084: CALL_OW 500
// if GetSide ( building ) = 3 then
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 255
17097: PUSH
17098: LD_INT 3
17100: EQUAL
17101: IFFALSE 17175
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17103: LD_ADDR_EXP 31
17107: PUSH
17108: LD_EXP 31
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: CALL_OW 3
17120: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17121: LD_ADDR_EXP 31
17125: PUSH
17126: LD_EXP 31
17130: PPUSH
17131: LD_INT 1
17133: PPUSH
17134: CALL_OW 3
17138: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17139: LD_ADDR_EXP 31
17143: PUSH
17144: LD_EXP 31
17148: PPUSH
17149: LD_INT 1
17151: PPUSH
17152: CALL_OW 3
17156: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17157: LD_ADDR_EXP 31
17161: PUSH
17162: LD_EXP 31
17166: PPUSH
17167: LD_INT 1
17169: PPUSH
17170: CALL_OW 3
17174: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 255
17184: PUSH
17185: LD_INT 3
17187: EQUAL
17188: PUSH
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL_OW 266
17198: PUSH
17199: LD_INT 0
17201: EQUAL
17202: PUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL_OW 266
17212: PUSH
17213: LD_INT 2
17215: EQUAL
17216: OR
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 266
17227: PUSH
17228: LD_INT 4
17230: EQUAL
17231: OR
17232: PUSH
17233: EMPTY
17234: LIST
17235: AND
17236: IFFALSE 17247
// ComUpgrade ( building ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17247: LD_VAR 0 1
17251: PPUSH
17252: CALL_OW 255
17256: PUSH
17257: LD_INT 3
17259: EQUAL
17260: PUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 266
17270: PUSH
17271: LD_INT 32
17273: EQUAL
17274: AND
17275: IFFALSE 17316
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17277: LD_VAR 0 1
17281: PPUSH
17282: LD_INT 42
17284: PUSH
17285: LD_INT 43
17287: PUSH
17288: LD_INT 44
17290: PUSH
17291: LD_INT 46
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 1
17302: PPUSH
17303: LD_INT 4
17305: PPUSH
17306: CALL_OW 12
17310: ARRAY
17311: PPUSH
17312: CALL_OW 208
// end ; end ;
17316: PPOPN 1
17318: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 21
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 23
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: IN
17364: IFFALSE 17380
// killCounter := killCounter + 1 ;
17366: LD_ADDR_EXP 47
17370: PUSH
17371: LD_EXP 47
17375: PUSH
17376: LD_INT 1
17378: PLUS
17379: ST_TO_ADDR
// if unit = JMM then
17380: LD_VAR 0 1
17384: PUSH
17385: LD_EXP 1
17389: EQUAL
17390: IFFALSE 17399
// YouLost ( JMM ) ;
17392: LD_STRING JMM
17394: PPUSH
17395: CALL_OW 104
// if unit = Joan then
17399: LD_VAR 0 1
17403: PUSH
17404: LD_EXP 15
17408: EQUAL
17409: IFFALSE 17419
// JoanStatus = 0 ;
17411: LD_ADDR_EXP 16
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 255
17428: PUSH
17429: LD_INT 1
17431: EQUAL
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL_OW 247
17442: PUSH
17443: LD_INT 1
17445: EQUAL
17446: AND
17447: IFFALSE 17523
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 257
17458: PUSH
17459: LD_INT 1
17461: EQUAL
17462: PUSH
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 257
17472: PUSH
17473: LD_INT 2
17475: EQUAL
17476: OR
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 257
17487: PUSH
17488: LD_INT 3
17490: EQUAL
17491: OR
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 257
17502: PUSH
17503: LD_INT 4
17505: EQUAL
17506: OR
17507: IFFALSE 17523
// unitLost = unitLost + 1 ;
17509: LD_ADDR_EXP 30
17513: PUSH
17514: LD_EXP 30
17518: PUSH
17519: LD_INT 1
17521: PLUS
17522: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 255
17532: PUSH
17533: LD_INT 3
17535: EQUAL
17536: PUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 247
17546: PUSH
17547: LD_INT 3
17549: EQUAL
17550: AND
17551: IFFALSE 18243
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 266
17562: PUSH
17563: LD_INT 31
17565: EQUAL
17566: PUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 266
17576: PUSH
17577: LD_INT 32
17579: EQUAL
17580: OR
17581: PUSH
17582: LD_VAR 0 1
17586: PPUSH
17587: CALL_OW 266
17591: PUSH
17592: LD_INT 36
17594: EQUAL
17595: OR
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 266
17606: PUSH
17607: LD_INT 0
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 266
17621: PUSH
17622: LD_INT 24
17624: EQUAL
17625: OR
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 266
17636: PUSH
17637: LD_INT 17
17639: EQUAL
17640: OR
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 266
17651: PUSH
17652: LD_INT 25
17654: EQUAL
17655: OR
17656: PUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL_OW 266
17666: PUSH
17667: LD_INT 19
17669: EQUAL
17670: OR
17671: PUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 266
17681: PUSH
17682: LD_INT 20
17684: EQUAL
17685: OR
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 18
17699: EQUAL
17700: OR
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 266
17711: PUSH
17712: LD_INT 21
17714: EQUAL
17715: OR
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 266
17726: PUSH
17727: LD_INT 23
17729: EQUAL
17730: OR
17731: PUSH
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 16
17744: EQUAL
17745: OR
17746: PUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 266
17756: PUSH
17757: LD_INT 6
17759: EQUAL
17760: OR
17761: PUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: CALL_OW 266
17771: PUSH
17772: LD_INT 29
17774: EQUAL
17775: OR
17776: PUSH
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 266
17786: PUSH
17787: LD_INT 26
17789: EQUAL
17790: OR
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 266
17801: PUSH
17802: LD_INT 30
17804: EQUAL
17805: OR
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 266
17816: PUSH
17817: LD_INT 28
17819: EQUAL
17820: OR
17821: PUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 266
17831: PUSH
17832: LD_INT 27
17834: EQUAL
17835: OR
17836: PUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 266
17846: PUSH
17847: LD_INT 33
17849: EQUAL
17850: OR
17851: PUSH
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 266
17861: PUSH
17862: LD_INT 2
17864: EQUAL
17865: OR
17866: PUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 266
17876: PUSH
17877: LD_INT 4
17879: EQUAL
17880: OR
17881: IFFALSE 17967
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17883: LD_ADDR_EXP 31
17887: PUSH
17888: LD_EXP 31
17892: PUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 266
17902: ADD
17903: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17904: LD_ADDR_EXP 31
17908: PUSH
17909: LD_EXP 31
17913: PUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 250
17923: ADD
17924: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17925: LD_ADDR_EXP 31
17929: PUSH
17930: LD_EXP 31
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 251
17944: ADD
17945: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17946: LD_ADDR_EXP 31
17950: PUSH
17951: LD_EXP 31
17955: PUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 254
17965: ADD
17966: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 266
17976: PUSH
17977: LD_INT 1
17979: EQUAL
17980: IFFALSE 18059
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17982: LD_ADDR_EXP 31
17986: PUSH
17987: LD_EXP 31
17991: PUSH
17992: LD_INT 0
17994: ADD
17995: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17996: LD_ADDR_EXP 31
18000: PUSH
18001: LD_EXP 31
18005: PUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 250
18015: ADD
18016: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18017: LD_ADDR_EXP 31
18021: PUSH
18022: LD_EXP 31
18026: PUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 251
18036: ADD
18037: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18038: LD_ADDR_EXP 31
18042: PUSH
18043: LD_EXP 31
18047: PUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 254
18057: ADD
18058: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 266
18068: PUSH
18069: LD_INT 3
18071: EQUAL
18072: IFFALSE 18151
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18074: LD_ADDR_EXP 31
18078: PUSH
18079: LD_EXP 31
18083: PUSH
18084: LD_INT 2
18086: ADD
18087: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18088: LD_ADDR_EXP 31
18092: PUSH
18093: LD_EXP 31
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 250
18107: ADD
18108: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18109: LD_ADDR_EXP 31
18113: PUSH
18114: LD_EXP 31
18118: PUSH
18119: LD_VAR 0 1
18123: PPUSH
18124: CALL_OW 251
18128: ADD
18129: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18130: LD_ADDR_EXP 31
18134: PUSH
18135: LD_EXP 31
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 254
18149: ADD
18150: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18151: LD_VAR 0 1
18155: PPUSH
18156: CALL_OW 266
18160: PUSH
18161: LD_INT 5
18163: EQUAL
18164: IFFALSE 18243
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18166: LD_ADDR_EXP 31
18170: PUSH
18171: LD_EXP 31
18175: PUSH
18176: LD_INT 4
18178: ADD
18179: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18180: LD_ADDR_EXP 31
18184: PUSH
18185: LD_EXP 31
18189: PUSH
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 250
18199: ADD
18200: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18201: LD_ADDR_EXP 31
18205: PUSH
18206: LD_EXP 31
18210: PUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 251
18220: ADD
18221: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18222: LD_ADDR_EXP 31
18226: PUSH
18227: LD_EXP 31
18231: PUSH
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 254
18241: ADD
18242: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18243: LD_EXP 48
18247: PUSH
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 257
18257: PUSH
18258: LD_INT 3
18260: EQUAL
18261: AND
18262: PUSH
18263: LD_VAR 0 1
18267: PPUSH
18268: CALL_OW 255
18272: PUSH
18273: LD_INT 3
18275: EQUAL
18276: AND
18277: PUSH
18278: LD_INT 21
18280: PPUSH
18281: CALL_OW 302
18285: AND
18286: PUSH
18287: LD_INT 21
18289: PPUSH
18290: CALL_OW 255
18294: PUSH
18295: LD_INT 3
18297: EQUAL
18298: AND
18299: IFFALSE 18381
// begin ruMechCounter := ruMechCounter - 1 ;
18301: LD_ADDR_EXP 48
18305: PUSH
18306: LD_EXP 48
18310: PUSH
18311: LD_INT 1
18313: MINUS
18314: ST_TO_ADDR
// uc_side = 3 ;
18315: LD_ADDR_OWVAR 20
18319: PUSH
18320: LD_INT 3
18322: ST_TO_ADDR
// uc_nation = 3 ;
18323: LD_ADDR_OWVAR 21
18327: PUSH
18328: LD_INT 3
18330: ST_TO_ADDR
// hc_gallery :=  ;
18331: LD_ADDR_OWVAR 33
18335: PUSH
18336: LD_STRING 
18338: ST_TO_ADDR
// hc_name :=  ;
18339: LD_ADDR_OWVAR 26
18343: PUSH
18344: LD_STRING 
18346: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18347: LD_INT 0
18349: PPUSH
18350: LD_EXP 34
18354: PPUSH
18355: LD_EXP 35
18359: PPUSH
18360: CALL_OW 12
18364: PPUSH
18365: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18369: CALL_OW 44
18373: PPUSH
18374: LD_INT 21
18376: PPUSH
18377: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18381: LD_VAR 0 1
18385: PPUSH
18386: CALL_OW 255
18390: PUSH
18391: LD_INT 3
18393: EQUAL
18394: PUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 264
18404: PUSH
18405: LD_INT 52
18407: EQUAL
18408: AND
18409: PUSH
18410: LD_INT 21
18412: PPUSH
18413: CALL_OW 302
18417: AND
18418: PUSH
18419: LD_INT 21
18421: PPUSH
18422: CALL_OW 255
18426: PUSH
18427: LD_INT 3
18429: EQUAL
18430: AND
18431: IFFALSE 18452
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18433: LD_INT 21
18435: PPUSH
18436: LD_INT 22
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: LD_INT 1
18444: PPUSH
18445: LD_INT 52
18447: PPUSH
18448: CALL_OW 125
// end ;
18452: PPOPN 1
18454: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18455: LD_INT 0
18457: PPUSH
18458: PPUSH
18459: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18460: LD_VAR 0 1
18464: PPUSH
18465: CALL_OW 264
18469: PUSH
18470: LD_INT 51
18472: EQUAL
18473: PUSH
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 255
18483: PUSH
18484: LD_INT 3
18486: EQUAL
18487: AND
18488: IFFALSE 18550
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18490: LD_ADDR_VAR 0 5
18494: PUSH
18495: LD_INT 2
18497: PPUSH
18498: CALL_OW 274
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 275
18510: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18511: LD_INT 2
18513: PPUSH
18514: CALL_OW 274
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: LD_VAR 0 5
18526: PUSH
18527: LD_INT 100
18529: MINUS
18530: PPUSH
18531: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18535: LD_VAR 0 1
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: LD_INT 100
18545: PPUSH
18546: CALL_OW 291
// end ; if building = rufabsupp then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_INT 17
18557: EQUAL
18558: IFFALSE 18572
// SetSide ( vehicle , 6 ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_INT 6
18567: PPUSH
18568: CALL_OW 235
// end ;
18572: PPOPN 5
18574: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL_OW 255
18584: PUSH
18585: LD_INT 3
18587: EQUAL
18588: IFFALSE 18619
// begin tamedApemans = tamedApemans + 1 ;
18590: LD_ADDR_EXP 32
18594: PUSH
18595: LD_EXP 32
18599: PUSH
18600: LD_INT 1
18602: PLUS
18603: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18604: LD_VAR 0 1
18608: PPUSH
18609: LD_INT 106
18611: PPUSH
18612: LD_INT 85
18614: PPUSH
18615: CALL_OW 111
// end ; end ;
18619: PPOPN 2
18621: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 255
18635: PUSH
18636: LD_INT 3
18638: EQUAL
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 247
18649: PUSH
18650: LD_INT 2
18652: EQUAL
18653: AND
18654: IFFALSE 18763
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 264
18665: PUSH
18666: LD_INT 42
18668: EQUAL
18669: PUSH
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 264
18679: PUSH
18680: LD_INT 43
18682: EQUAL
18683: OR
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 264
18694: PUSH
18695: LD_INT 44
18697: EQUAL
18698: OR
18699: PUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 264
18709: PUSH
18710: LD_INT 46
18712: EQUAL
18713: OR
18714: IFFALSE 18763
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18716: LD_INT 21
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 265
18728: PPUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 262
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 263
18748: PPUSH
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 264
18758: PPUSH
18759: CALL_OW 185
// end ;
18763: PPOPN 3
18765: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18766: LD_VAR 0 1
18770: PPUSH
18771: CALL_OW 255
18775: PUSH
18776: LD_INT 3
18778: EQUAL
18779: PUSH
18780: LD_VAR 0 2
18784: PPUSH
18785: CALL_OW 255
18789: PUSH
18790: LD_INT 3
18792: EQUAL
18793: AND
18794: PUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 302
18804: AND
18805: IFFALSE 18847
// begin ComRepairVehicle ( human , vehicle ) ;
18807: LD_VAR 0 2
18811: PPUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18835: LD_VAR 0 1
18839: PPUSH
18840: LD_INT 100
18842: PPUSH
18843: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL_OW 255
18856: PUSH
18857: LD_INT 3
18859: EQUAL
18860: PUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL_OW 255
18870: PUSH
18871: LD_INT 3
18873: EQUAL
18874: AND
18875: PUSH
18876: LD_INT 21
18878: PPUSH
18879: CALL_OW 302
18883: AND
18884: PUSH
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 302
18894: NOT
18895: AND
18896: IFFALSE 18910
// ComEnterUnit ( human , rufab ) ;
18898: LD_VAR 0 2
18902: PPUSH
18903: LD_INT 21
18905: PPUSH
18906: CALL_OW 120
// end ;
18910: PPOPN 2
18912: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18913: LD_VAR 0 1
18917: PUSH
18918: LD_INT 21
18920: EQUAL
18921: PUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: AND
18936: IFFALSE 18950
// SetLives ( human , 1000 ) ;
18938: LD_VAR 0 2
18942: PPUSH
18943: LD_INT 1000
18945: PPUSH
18946: CALL_OW 234
// end ;
18950: PPOPN 2
18952: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL 35491 0 1
// end ; end_of_file
18962: PPOPN 1
18964: END
// every 0 0$30 trigger cratesStatus = 1 do
18965: LD_EXP 38
18969: PUSH
18970: LD_INT 1
18972: EQUAL
18973: IFFALSE 19026
18975: GO 18977
18977: DISABLE
// begin enable ;
18978: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18979: LD_INT 350
18981: PUSH
18982: LD_INT 875
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 2
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: PPUSH
19001: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
19005: LD_INT 1
19007: PPUSH
19008: LD_INT 5
19010: PPUSH
19011: CALL_OW 12
19015: PPUSH
19016: LD_INT 7
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: CALL_OW 55
// end ;
19026: END
// every 1 1$0 trigger cratesStatus = 2 do
19027: LD_EXP 38
19031: PUSH
19032: LD_INT 2
19034: EQUAL
19035: IFFALSE 19118
19037: GO 19039
19039: DISABLE
// begin enable ;
19040: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19041: LD_INT 3150
19043: PUSH
19044: LD_INT 4550
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: PPUSH
19054: LD_INT 2
19056: PPUSH
19057: CALL_OW 12
19061: ARRAY
19062: PPUSH
19063: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19067: LD_INT 2
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PPUSH
19080: LD_INT 2
19082: PPUSH
19083: CALL_OW 12
19087: ARRAY
19088: PPUSH
19089: LD_INT 6
19091: PUSH
19092: LD_INT 7
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 1
19101: PPUSH
19102: LD_INT 2
19104: PPUSH
19105: CALL_OW 12
19109: ARRAY
19110: PPUSH
19111: LD_INT 1
19113: PPUSH
19114: CALL_OW 55
// end ;
19118: END
// every 0 0$30 + 0 0$10 do
19119: GO 19121
19121: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19122: LD_INT 4
19124: PUSH
19125: LD_INT 5
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 1
19134: PPUSH
19135: LD_INT 2
19137: PPUSH
19138: CALL_OW 12
19142: ARRAY
19143: PPUSH
19144: LD_INT 7
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 55
// Wait ( 0 0$15 ) ;
19154: LD_INT 525
19156: PPUSH
19157: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19161: LD_INT 4
19163: PUSH
19164: LD_INT 5
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: PPUSH
19174: LD_INT 2
19176: PPUSH
19177: CALL_OW 12
19181: ARRAY
19182: PPUSH
19183: LD_INT 7
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: CALL_OW 55
// Wait ( 0 0$20 ) ;
19193: LD_INT 700
19195: PPUSH
19196: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19200: LD_INT 4
19202: PUSH
19203: LD_INT 5
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PPUSH
19213: LD_INT 2
19215: PPUSH
19216: CALL_OW 12
19220: ARRAY
19221: PPUSH
19222: LD_INT 7
19224: PPUSH
19225: LD_INT 1
19227: PPUSH
19228: CALL_OW 55
// end ; end_of_file
19232: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19233: LD_EXP 24
19237: PUSH
19238: LD_INT 1
19240: EQUAL
19241: IFFALSE 19542
19243: GO 19245
19245: DISABLE
19246: LD_INT 0
19248: PPUSH
19249: PPUSH
19250: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 21
19268: PUSH
19269: LD_INT 3
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: LD_INT 30
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 30
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 69
19313: ST_TO_ADDR
// for i in tmp do
19314: LD_ADDR_VAR 0 1
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: FOR_IN
19325: IFFALSE 19358
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_VAR 0 3
19336: PUSH
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 274
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: CALL_OW 275
19354: PLUS
19355: ST_TO_ADDR
19356: GO 19324
19358: POP
19359: POP
// strings = [ ] ;
19360: LD_ADDR_EXP 27
19364: PUSH
19365: EMPTY
19366: ST_TO_ADDR
// if tmp = 0 then
19367: LD_VAR 0 2
19371: PUSH
19372: LD_INT 0
19374: EQUAL
19375: IFFALSE 19400
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19377: LD_ADDR_EXP 27
19381: PUSH
19382: LD_EXP 27
19386: PUSH
19387: LD_STRING #Am06-1
19389: PUSH
19390: LD_EXP 25
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: ADD
19399: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 0
19407: GREATER
19408: PUSH
19409: LD_EXP 25
19413: PUSH
19414: LD_VAR 0 3
19418: GREATER
19419: AND
19420: IFFALSE 19451
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19422: LD_ADDR_EXP 27
19426: PUSH
19427: LD_EXP 27
19431: PUSH
19432: LD_STRING #Am06-1
19434: PUSH
19435: LD_EXP 25
19439: PUSH
19440: LD_VAR 0 3
19444: MINUS
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: ADD
19450: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19451: LD_VAR 0 2
19455: PUSH
19456: LD_INT 0
19458: GREATER
19459: PUSH
19460: LD_EXP 25
19464: PUSH
19465: LD_VAR 0 3
19469: LESSEQUAL
19470: AND
19471: IFFALSE 19494
// strings = strings ^ [ #Am06-1 , 0 ] ;
19473: LD_ADDR_EXP 27
19477: PUSH
19478: LD_EXP 27
19482: PUSH
19483: LD_STRING #Am06-1
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: ADD
19493: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19494: LD_ADDR_EXP 26
19498: PUSH
19499: LD_EXP 26
19503: PUSH
19504: LD_INT 35
19506: MINUS
19507: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19508: LD_ADDR_EXP 27
19512: PUSH
19513: LD_EXP 27
19517: PUSH
19518: LD_STRING #Am06-2
19520: PUSH
19521: LD_EXP 26
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: ADD
19530: ST_TO_ADDR
// display_strings = strings ;
19531: LD_ADDR_OWVAR 47
19535: PUSH
19536: LD_EXP 27
19540: ST_TO_ADDR
// enable ;
19541: ENABLE
// end ; end_of_file
19542: PPOPN 3
19544: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19545: LD_INT 0
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
19553: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19606: LD_INT 35
19608: PPUSH
19609: CALL_OW 67
// until depot ;
19613: LD_VAR 0 3
19617: IFFALSE 19554
// repeat wait ( 0 0$1 ) ;
19619: LD_INT 35
19621: PPUSH
19622: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19626: LD_ADDR_VAR 0 4
19630: PUSH
19631: LD_INT 22
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 91
19643: PUSH
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 1
19651: ARRAY
19652: PUSH
19653: LD_INT 15
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 21
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 25
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 25
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 25
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 25
19706: PUSH
19707: LD_INT 4
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 3
19723: PUSH
19724: LD_INT 54
19726: PUSH
19727: EMPTY
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: LD_INT 55
19739: PUSH
19740: EMPTY
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: PPUSH
19755: CALL_OW 69
19759: PUSH
19760: LD_EXP 2
19764: PUSH
19765: LD_EXP 3
19769: PUSH
19770: LD_EXP 4
19774: PUSH
19775: LD_EXP 5
19779: PUSH
19780: LD_EXP 7
19784: PUSH
19785: LD_EXP 8
19789: PUSH
19790: LD_EXP 9
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: PUSH
19804: LD_EXP 46
19808: ADD
19809: DIFF
19810: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19811: LD_VAR 0 4
19815: PUSH
19816: LD_INT 1
19818: PPUSH
19819: CALL_OW 463
19823: NOT
19824: AND
19825: IFFALSE 19619
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19827: LD_ADDR_VAR 0 4
19831: PUSH
19832: LD_VAR 0 4
19836: PUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_VAR 0 4
19844: PPUSH
19845: CALL_OW 12
19849: ARRAY
19850: ST_TO_ADDR
// blockSpawn = 1 ;
19851: LD_ADDR_EXP 29
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// uc_side = 2 ;
19859: LD_ADDR_OWVAR 20
19863: PUSH
19864: LD_INT 2
19866: ST_TO_ADDR
// uc_nation = 2 ;
19867: LD_ADDR_OWVAR 21
19871: PUSH
19872: LD_INT 2
19874: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19875: LD_ADDR_EXP 19
19879: PUSH
19880: LD_STRING Kurt
19882: PPUSH
19883: LD_INT 0
19885: PPUSH
19886: CALL 6184 0 2
19890: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19891: LD_EXP 19
19895: PPUSH
19896: LD_VAR 0 4
19900: PPUSH
19901: CALL_OW 250
19905: PPUSH
19906: LD_VAR 0 4
19910: PPUSH
19911: CALL_OW 251
19915: PPUSH
19916: LD_INT 5
19918: PPUSH
19919: LD_INT 1
19921: PPUSH
19922: CALL_OW 50
// InGameOn ;
19926: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19930: LD_EXP 19
19934: PPUSH
19935: CALL_OW 87
// wait ( 0 0$2 ) ;
19939: LD_INT 70
19941: PPUSH
19942: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19946: LD_EXP 19
19950: PPUSH
19951: LD_VAR 0 4
19955: PPUSH
19956: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19960: LD_VAR 0 4
19964: PPUSH
19965: LD_EXP 19
19969: PPUSH
19970: CALL_OW 112
// wait ( 0 0$1 ) ;
19974: LD_INT 35
19976: PPUSH
19977: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19981: LD_VAR 0 4
19985: PPUSH
19986: LD_EXP 19
19990: PPUSH
19991: CALL_OW 119
// DialogueOn ;
19995: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19999: LD_EXP 19
20003: PPUSH
20004: LD_STRING D2-Kurt-1
20006: PPUSH
20007: CALL_OW 88
// if tmp = JMM then
20011: LD_VAR 0 4
20015: PUSH
20016: LD_EXP 1
20020: EQUAL
20021: IFFALSE 20113
// begin Say ( JMM , D2-JMM-1 ) ;
20023: LD_EXP 1
20027: PPUSH
20028: LD_STRING D2-JMM-1
20030: PPUSH
20031: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20035: LD_EXP 19
20039: PPUSH
20040: LD_STRING D2-Kurt-2
20042: PPUSH
20043: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20047: LD_EXP 1
20051: PPUSH
20052: LD_STRING D2-JMM-2
20054: PPUSH
20055: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20059: LD_EXP 19
20063: PPUSH
20064: LD_STRING D2-Kurt-3
20066: PPUSH
20067: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20071: LD_EXP 1
20075: PPUSH
20076: LD_STRING D2-JMM-3
20078: PPUSH
20079: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20083: LD_EXP 19
20087: PPUSH
20088: LD_STRING D2-Kurt-4
20090: PPUSH
20091: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20095: LD_EXP 1
20099: PPUSH
20100: LD_STRING D2-JMM-4
20102: PPUSH
20103: CALL_OW 88
// DialogueOff ;
20107: CALL_OW 7
// end else
20111: GO 20423
// begin if GetSex ( tmp ) = 1 then
20113: LD_VAR 0 4
20117: PPUSH
20118: CALL_OW 258
20122: PUSH
20123: LD_INT 1
20125: EQUAL
20126: IFFALSE 20140
// Say ( tmp , D2-Sol1-1 ) ;
20128: LD_VAR 0 4
20132: PPUSH
20133: LD_STRING D2-Sol1-1
20135: PPUSH
20136: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20140: LD_VAR 0 4
20144: PPUSH
20145: CALL_OW 258
20149: PUSH
20150: LD_INT 2
20152: EQUAL
20153: IFFALSE 20167
// Say ( tmp , D2-FSol1-1 ) ;
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_STRING D2-FSol1-1
20162: PPUSH
20163: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20167: LD_EXP 19
20171: PPUSH
20172: LD_STRING D2-Kurt-2
20174: PPUSH
20175: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20179: LD_VAR 0 4
20183: PPUSH
20184: CALL_OW 258
20188: PUSH
20189: LD_INT 1
20191: EQUAL
20192: IFFALSE 20206
// Say ( tmp , D2-Sol1-2 ) ;
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_STRING D2-Sol1-2
20201: PPUSH
20202: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20206: LD_VAR 0 4
20210: PPUSH
20211: CALL_OW 258
20215: PUSH
20216: LD_INT 2
20218: EQUAL
20219: IFFALSE 20233
// Say ( tmp , D2-FSol1-2 ) ;
20221: LD_VAR 0 4
20225: PPUSH
20226: LD_STRING D2-FSol1-2
20228: PPUSH
20229: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20233: LD_EXP 19
20237: PPUSH
20238: LD_STRING D2-Kurt-3
20240: PPUSH
20241: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20245: LD_VAR 0 4
20249: PPUSH
20250: CALL_OW 258
20254: PUSH
20255: LD_INT 1
20257: EQUAL
20258: IFFALSE 20272
// Say ( tmp , D2-Sol1-3 ) ;
20260: LD_VAR 0 4
20264: PPUSH
20265: LD_STRING D2-Sol1-3
20267: PPUSH
20268: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20272: LD_VAR 0 4
20276: PPUSH
20277: CALL_OW 258
20281: PUSH
20282: LD_INT 2
20284: EQUAL
20285: IFFALSE 20299
// Say ( tmp , D2-FSol1-3 ) ;
20287: LD_VAR 0 4
20291: PPUSH
20292: LD_STRING D2-FSol1-3
20294: PPUSH
20295: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20299: LD_EXP 19
20303: PPUSH
20304: LD_STRING D2-Kurt-4
20306: PPUSH
20307: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20311: LD_VAR 0 4
20315: PPUSH
20316: CALL_OW 258
20320: PUSH
20321: LD_INT 1
20323: EQUAL
20324: IFFALSE 20338
// Say ( tmp , D2-Sol1-4 ) ;
20326: LD_VAR 0 4
20330: PPUSH
20331: LD_STRING D2-Sol1-4
20333: PPUSH
20334: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20338: LD_VAR 0 4
20342: PPUSH
20343: CALL_OW 258
20347: PUSH
20348: LD_INT 2
20350: EQUAL
20351: IFFALSE 20365
// Say ( tmp , D2-FSol1-4 ) ;
20353: LD_VAR 0 4
20357: PPUSH
20358: LD_STRING D2-FSol1-4
20360: PPUSH
20361: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20365: LD_VAR 0 4
20369: PPUSH
20370: CALL_OW 258
20374: PUSH
20375: LD_INT 1
20377: EQUAL
20378: IFFALSE 20392
// Say ( tmp , D2-Sol1-5 ) ;
20380: LD_VAR 0 4
20384: PPUSH
20385: LD_STRING D2-Sol1-5
20387: PPUSH
20388: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20392: LD_VAR 0 4
20396: PPUSH
20397: CALL_OW 258
20401: PUSH
20402: LD_INT 2
20404: EQUAL
20405: IFFALSE 20419
// Say ( tmp , D2-FSol1-5 ) ;
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_STRING D2-FSol1-5
20414: PPUSH
20415: CALL_OW 88
// DialogueOff ;
20419: CALL_OW 7
// end ; dec = ShowQuery1 ;
20423: LD_ADDR_VAR 0 6
20427: PUSH
20428: CALL 6708 0 0
20432: ST_TO_ADDR
// if dec = 1 then
20433: LD_VAR 0 6
20437: PUSH
20438: LD_INT 1
20440: EQUAL
20441: IFFALSE 20503
// begin DialogueOn ;
20443: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20447: LD_EXP 19
20451: PPUSH
20452: LD_STRING D2a-Kurt-1
20454: PPUSH
20455: CALL_OW 88
// DialogueOff ;
20459: CALL_OW 7
// InGameOff ;
20463: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20467: LD_INT 1
20469: PPUSH
20470: LD_INT 2
20472: PPUSH
20473: LD_INT 2
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20483: LD_EXP 19
20487: PPUSH
20488: LD_INT 8
20490: PPUSH
20491: CALL_OW 113
// readyToEscape = 1 ;
20495: LD_ADDR_EXP 21
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// end ; if dec = 2 then
20503: LD_VAR 0 6
20507: PUSH
20508: LD_INT 2
20510: EQUAL
20511: IFFALSE 21031
// begin DialogueOn ;
20513: CALL_OW 6
// if tmp = JMM then
20517: LD_VAR 0 4
20521: PUSH
20522: LD_EXP 1
20526: EQUAL
20527: IFFALSE 20583
// begin Say ( JMM , D2b-JMM-1 ) ;
20529: LD_EXP 1
20533: PPUSH
20534: LD_STRING D2b-JMM-1
20536: PPUSH
20537: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20541: LD_EXP 19
20545: PPUSH
20546: LD_STRING D2b-Kurt-1
20548: PPUSH
20549: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20553: LD_EXP 1
20557: PPUSH
20558: LD_STRING D2b-JMM-2
20560: PPUSH
20561: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20565: LD_EXP 19
20569: PPUSH
20570: LD_STRING D2b-Kurt-2
20572: PPUSH
20573: CALL_OW 88
// DialogueOff ;
20577: CALL_OW 7
// end else
20581: GO 20773
// begin if GetSex ( tmp ) = 1 then
20583: LD_VAR 0 4
20587: PPUSH
20588: CALL_OW 258
20592: PUSH
20593: LD_INT 1
20595: EQUAL
20596: IFFALSE 20610
// Say ( tmp , D2b-Sol1-1 ) ;
20598: LD_VAR 0 4
20602: PPUSH
20603: LD_STRING D2b-Sol1-1
20605: PPUSH
20606: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20610: LD_VAR 0 4
20614: PPUSH
20615: CALL_OW 258
20619: PUSH
20620: LD_INT 2
20622: EQUAL
20623: IFFALSE 20637
// Say ( tmp , D2b-FSol1-1 ) ;
20625: LD_VAR 0 4
20629: PPUSH
20630: LD_STRING D2b-FSol1-1
20632: PPUSH
20633: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20637: LD_EXP 19
20641: PPUSH
20642: LD_STRING D2b-Kurt-1
20644: PPUSH
20645: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20649: LD_VAR 0 4
20653: PPUSH
20654: CALL_OW 258
20658: PUSH
20659: LD_INT 1
20661: EQUAL
20662: IFFALSE 20676
// Say ( tmp , D2b-Sol1-2 ) ;
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_STRING D2b-Sol1-2
20671: PPUSH
20672: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20676: LD_VAR 0 4
20680: PPUSH
20681: CALL_OW 258
20685: PUSH
20686: LD_INT 2
20688: EQUAL
20689: IFFALSE 20703
// Say ( tmp , D2b-FSol1-2 ) ;
20691: LD_VAR 0 4
20695: PPUSH
20696: LD_STRING D2b-FSol1-2
20698: PPUSH
20699: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20703: LD_EXP 19
20707: PPUSH
20708: LD_STRING D2b-Kurt-2
20710: PPUSH
20711: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20715: LD_VAR 0 4
20719: PPUSH
20720: CALL_OW 258
20724: PUSH
20725: LD_INT 1
20727: EQUAL
20728: IFFALSE 20742
// Say ( tmp , D2c-Sol1-2 ) ;
20730: LD_VAR 0 4
20734: PPUSH
20735: LD_STRING D2c-Sol1-2
20737: PPUSH
20738: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20742: LD_VAR 0 4
20746: PPUSH
20747: CALL_OW 258
20751: PUSH
20752: LD_INT 2
20754: EQUAL
20755: IFFALSE 20769
// Say ( tmp , D2c-FSol1-2 ) ;
20757: LD_VAR 0 4
20761: PPUSH
20762: LD_STRING D2c-FSol1-2
20764: PPUSH
20765: CALL_OW 88
// DialogueOff ;
20769: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20773: LD_ADDR_VAR 0 7
20777: PUSH
20778: CALL 6782 0 0
20782: ST_TO_ADDR
// if dec2 = 1 then
20783: LD_VAR 0 7
20787: PUSH
20788: LD_INT 1
20790: EQUAL
20791: IFFALSE 20853
// begin DialogueOn ;
20793: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20797: LD_EXP 19
20801: PPUSH
20802: LD_STRING D2a-Kurt-1
20804: PPUSH
20805: CALL_OW 88
// DialogueOff ;
20809: CALL_OW 7
// InGameOff ;
20813: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20817: LD_INT 1
20819: PPUSH
20820: LD_INT 2
20822: PPUSH
20823: LD_INT 2
20825: PPUSH
20826: LD_INT 1
20828: PPUSH
20829: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20833: LD_EXP 19
20837: PPUSH
20838: LD_INT 8
20840: PPUSH
20841: CALL_OW 113
// readyToEscape = 1 ;
20845: LD_ADDR_EXP 21
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// end ; if dec2 = 2 then
20853: LD_VAR 0 7
20857: PUSH
20858: LD_INT 2
20860: EQUAL
20861: IFFALSE 21031
// begin if tmp = JMM then
20863: LD_VAR 0 4
20867: PUSH
20868: LD_EXP 1
20872: EQUAL
20873: IFFALSE 20933
// begin DialogueOn ;
20875: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20879: LD_EXP 1
20883: PPUSH
20884: LD_STRING D2c-JMM-1
20886: PPUSH
20887: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20891: LD_EXP 19
20895: PPUSH
20896: LD_STRING D2c-Kurt-1
20898: PPUSH
20899: CALL_OW 88
// DialogueOff ;
20903: CALL_OW 7
// InGameOff ;
20907: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20911: LD_EXP 19
20915: PPUSH
20916: LD_INT 8
20918: PPUSH
20919: CALL_OW 113
// readyToEscape = 1 ;
20923: LD_ADDR_EXP 21
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// end else
20931: GO 21031
// begin DialogueOn ;
20933: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20937: LD_VAR 0 4
20941: PPUSH
20942: CALL_OW 258
20946: PUSH
20947: LD_INT 1
20949: EQUAL
20950: IFFALSE 20964
// Say ( tmp , D2c-Sol1-1 ) ;
20952: LD_VAR 0 4
20956: PPUSH
20957: LD_STRING D2c-Sol1-1
20959: PPUSH
20960: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20964: LD_VAR 0 4
20968: PPUSH
20969: CALL_OW 258
20973: PUSH
20974: LD_INT 2
20976: EQUAL
20977: IFFALSE 20991
// Say ( tmp , D2c-FSol1-1 ) ;
20979: LD_VAR 0 4
20983: PPUSH
20984: LD_STRING D2c-FSol1-1
20986: PPUSH
20987: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20991: LD_EXP 19
20995: PPUSH
20996: LD_STRING D2c-Kurt-1
20998: PPUSH
20999: CALL_OW 88
// DialogueOff ;
21003: CALL_OW 7
// InGameOff ;
21007: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21011: LD_EXP 19
21015: PPUSH
21016: LD_INT 8
21018: PPUSH
21019: CALL_OW 113
// readyToEscape = 1 ;
21023: LD_ADDR_EXP 21
21027: PUSH
21028: LD_INT 1
21030: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21031: LD_VAR 0 6
21035: PUSH
21036: LD_INT 3
21038: EQUAL
21039: IFFALSE 21213
// begin DialogueOn ;
21041: CALL_OW 6
// if tmp = JMM then
21045: LD_VAR 0 4
21049: PUSH
21050: LD_EXP 1
21054: EQUAL
21055: IFFALSE 21115
// begin DialogueOn ;
21057: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21061: LD_EXP 1
21065: PPUSH
21066: LD_STRING D2c-JMM-1
21068: PPUSH
21069: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21073: LD_EXP 19
21077: PPUSH
21078: LD_STRING D2c-Kurt-1
21080: PPUSH
21081: CALL_OW 88
// DialogueOff ;
21085: CALL_OW 7
// InGameOff ;
21089: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21093: LD_EXP 19
21097: PPUSH
21098: LD_INT 8
21100: PPUSH
21101: CALL_OW 113
// readyToEscape = 1 ;
21105: LD_ADDR_EXP 21
21109: PUSH
21110: LD_INT 1
21112: ST_TO_ADDR
// end else
21113: GO 21213
// begin DialogueOn ;
21115: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21119: LD_VAR 0 4
21123: PPUSH
21124: CALL_OW 258
21128: PUSH
21129: LD_INT 1
21131: EQUAL
21132: IFFALSE 21146
// Say ( tmp , D2c-Sol1-1 ) ;
21134: LD_VAR 0 4
21138: PPUSH
21139: LD_STRING D2c-Sol1-1
21141: PPUSH
21142: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21146: LD_VAR 0 4
21150: PPUSH
21151: CALL_OW 258
21155: PUSH
21156: LD_INT 2
21158: EQUAL
21159: IFFALSE 21173
// Say ( tmp , D2c-FSol1-1 ) ;
21161: LD_VAR 0 4
21165: PPUSH
21166: LD_STRING D2c-FSol1-1
21168: PPUSH
21169: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21173: LD_EXP 19
21177: PPUSH
21178: LD_STRING D2c-Kurt-1
21180: PPUSH
21181: CALL_OW 88
// DialogueOff ;
21185: CALL_OW 7
// InGameOff ;
21189: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21193: LD_EXP 19
21197: PPUSH
21198: LD_INT 8
21200: PPUSH
21201: CALL_OW 113
// readyToEscape = 1 ;
21205: LD_ADDR_EXP 21
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21213: LD_ADDR_EXP 29
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21221: LD_INT 35
21223: PPUSH
21224: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21228: LD_EXP 19
21232: PPUSH
21233: LD_INT 8
21235: PPUSH
21236: CALL_OW 308
21240: PUSH
21241: LD_EXP 21
21245: AND
21246: PUSH
21247: LD_EXP 19
21251: PPUSH
21252: CALL_OW 301
21256: OR
21257: IFFALSE 21221
// if IsDead ( Kurt ) then
21259: LD_EXP 19
21263: PPUSH
21264: CALL_OW 301
21268: IFFALSE 21272
// exit ;
21270: GO 21341
// RemoveUnit ( Kurt ) ;
21272: LD_EXP 19
21276: PPUSH
21277: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21281: LD_EXP 19
21285: PPUSH
21286: LD_STRING Kurt
21288: PPUSH
21289: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21293: LD_INT 1
21295: PPUSH
21296: LD_INT 2
21298: PPUSH
21299: CALL_OW 81
21303: PUSH
21304: LD_INT 0
21306: EQUAL
21307: IFFALSE 21317
// KurtStatus = 1 ;
21309: LD_ADDR_EXP 20
21313: PUSH
21314: LD_INT 1
21316: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21317: LD_INT 1
21319: PPUSH
21320: LD_INT 2
21322: PPUSH
21323: CALL_OW 81
21327: PUSH
21328: LD_INT 2
21330: EQUAL
21331: IFFALSE 21341
// KurtStatus = 2 ;
21333: LD_ADDR_EXP 20
21337: PUSH
21338: LD_INT 2
21340: ST_TO_ADDR
// end ; end_of_file
21341: LD_VAR 0 1
21345: RET
// every 0 0$1 do
21346: GO 21348
21348: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21349: LD_INT 3
21351: PPUSH
21352: LD_INT 32
21354: PPUSH
21355: LD_INT 3
21357: PPUSH
21358: CALL 6837 0 3
21362: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21363: GO 21365
21365: DISABLE
21366: LD_INT 0
21368: PPUSH
// begin enemyWayX = [ ] ;
21369: LD_ADDR_EXP 49
21373: PUSH
21374: EMPTY
21375: ST_TO_ADDR
// enemyWayY = [ ] ;
21376: LD_ADDR_EXP 50
21380: PUSH
21381: EMPTY
21382: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21383: LD_ADDR_VAR 0 1
21387: PUSH
21388: LD_INT 1
21390: PPUSH
21391: LD_INT 2
21393: PPUSH
21394: CALL_OW 12
21398: ST_TO_ADDR
// if rnd = 1 then
21399: LD_VAR 0 1
21403: PUSH
21404: LD_INT 1
21406: EQUAL
21407: IFFALSE 21447
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21409: LD_ADDR_EXP 49
21413: PUSH
21414: LD_INT 93
21416: PUSH
21417: LD_INT 84
21419: PUSH
21420: LD_INT 104
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21428: LD_ADDR_EXP 50
21432: PUSH
21433: LD_INT 51
21435: PUSH
21436: LD_INT 35
21438: PUSH
21439: LD_INT 28
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: ST_TO_ADDR
// end ; if rnd = 2 then
21447: LD_VAR 0 1
21451: PUSH
21452: LD_INT 2
21454: EQUAL
21455: IFFALSE 21511
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21457: LD_ADDR_EXP 49
21461: PUSH
21462: LD_INT 93
21464: PUSH
21465: LD_INT 52
21467: PUSH
21468: LD_INT 34
21470: PUSH
21471: LD_INT 28
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21484: LD_ADDR_EXP 50
21488: PUSH
21489: LD_INT 51
21491: PUSH
21492: LD_INT 45
21494: PUSH
21495: LD_INT 35
21497: PUSH
21498: LD_INT 26
21500: PUSH
21501: LD_INT 20
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: ST_TO_ADDR
// end ; enable ;
21511: ENABLE
// end ;
21512: PPOPN 1
21514: END
// every 0 0$1 do
21515: GO 21517
21517: DISABLE
// begin enable ;
21518: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21519: LD_INT 3
21521: PPUSH
21522: LD_INT 2
21524: PPUSH
21525: LD_INT 10
21527: PPUSH
21528: LD_EXP 31
21532: PPUSH
21533: CALL 8272 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21537: LD_INT 3
21539: PPUSH
21540: LD_INT 12
21542: PPUSH
21543: LD_EXP 31
21547: PPUSH
21548: CALL 10157 0 3
// if disableHealAI = 0 then
21552: LD_EXP 33
21556: PUSH
21557: LD_INT 0
21559: EQUAL
21560: IFFALSE 21581
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21562: LD_INT 3
21564: PPUSH
21565: LD_INT 9
21567: PPUSH
21568: LD_INT 10
21570: PPUSH
21571: LD_INT 32
21573: PUSH
21574: EMPTY
21575: LIST
21576: PPUSH
21577: CALL 8663 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21581: LD_INT 3
21583: PPUSH
21584: LD_INT 51
21586: PPUSH
21587: LD_INT 6
21589: PPUSH
21590: CALL 9371 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21594: LD_INT 3
21596: PPUSH
21597: LD_INT 12
21599: PPUSH
21600: LD_INT 121
21602: PPUSH
21603: LD_INT 100
21605: PPUSH
21606: CALL 7232 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21610: LD_INT 3
21612: PPUSH
21613: LD_INT 22
21615: PPUSH
21616: LD_EXP 49
21620: PPUSH
21621: LD_EXP 50
21625: PPUSH
21626: CALL 7435 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21630: LD_INT 3
21632: PPUSH
21633: LD_INT 10
21635: PPUSH
21636: CALL 9514 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21640: LD_INT 3
21642: PPUSH
21643: LD_INT 1
21645: PPUSH
21646: CALL 9927 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21650: LD_INT 2
21652: PPUSH
21653: CALL_OW 303
21657: PUSH
21658: LD_INT 2
21660: PPUSH
21661: CALL_OW 255
21665: PUSH
21666: LD_INT 1
21668: EQUAL
21669: OR
21670: IFFALSE 21682
// DefendDepot ( 3 , rudepo ) ;
21672: LD_INT 3
21674: PPUSH
21675: LD_INT 2
21677: PPUSH
21678: CALL 9207 0 2
// end ;
21682: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21683: LD_INT 22
21685: PUSH
21686: LD_INT 3
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 21
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 55
21705: PUSH
21706: EMPTY
21707: LIST
21708: PUSH
21709: LD_INT 3
21711: PUSH
21712: LD_INT 34
21714: PUSH
21715: LD_INT 51
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PPUSH
21732: CALL_OW 69
21736: PUSH
21737: LD_INT 0
21739: EQUAL
21740: PUSH
21741: LD_INT 21
21743: PPUSH
21744: CALL_OW 255
21748: PUSH
21749: LD_INT 3
21751: EQUAL
21752: AND
21753: PUSH
21754: LD_INT 21
21756: PPUSH
21757: CALL_OW 302
21761: AND
21762: PUSH
21763: LD_INT 2
21765: PPUSH
21766: CALL_OW 255
21770: PUSH
21771: LD_INT 3
21773: EQUAL
21774: AND
21775: PUSH
21776: LD_INT 2
21778: PPUSH
21779: CALL_OW 302
21783: AND
21784: IFFALSE 21964
21786: GO 21788
21788: DISABLE
// begin enable ;
21789: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21790: LD_INT 2
21792: PPUSH
21793: CALL_OW 274
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: LD_INT 1000
21803: PPUSH
21804: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21808: LD_INT 3
21810: PPUSH
21811: LD_INT 21
21813: PPUSH
21814: LD_INT 4
21816: PUSH
21817: LD_INT 5
21819: PUSH
21820: LD_INT 6
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_OWVAR 67
21832: ARRAY
21833: PPUSH
21834: LD_INT 43
21836: PUSH
21837: LD_INT 43
21839: PUSH
21840: LD_INT 44
21842: PUSH
21843: LD_INT 44
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 43
21854: PUSH
21855: LD_INT 43
21857: PUSH
21858: LD_INT 43
21860: PUSH
21861: LD_INT 44
21863: PUSH
21864: LD_INT 44
21866: PUSH
21867: LD_INT 46
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 43
21880: PUSH
21881: LD_INT 43
21883: PUSH
21884: LD_INT 43
21886: PUSH
21887: LD_INT 44
21889: PUSH
21890: LD_INT 44
21892: PUSH
21893: LD_INT 46
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: PUSH
21909: LD_OWVAR 67
21913: ARRAY
21914: PPUSH
21915: LD_INT 1
21917: PPUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_INT 22
21923: PUSH
21924: LD_INT 22
21926: PUSH
21927: LD_INT 24
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PPUSH
21937: LD_INT 2
21939: PPUSH
21940: CALL_OW 12
21944: ARRAY
21945: PUSH
21946: LD_INT 24
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PUSH
21954: LD_OWVAR 67
21958: ARRAY
21959: PPUSH
21960: CALL 7078 0 7
// end ;
21964: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21965: LD_INT 17
21967: PPUSH
21968: CALL_OW 255
21972: PUSH
21973: LD_INT 3
21975: EQUAL
21976: PUSH
21977: LD_INT 17
21979: PPUSH
21980: CALL_OW 302
21984: AND
21985: PUSH
21986: LD_INT 2
21988: PPUSH
21989: CALL_OW 255
21993: PUSH
21994: LD_INT 3
21996: EQUAL
21997: AND
21998: PUSH
21999: LD_INT 2
22001: PPUSH
22002: CALL_OW 302
22006: AND
22007: IFFALSE 22074
22009: GO 22011
22011: DISABLE
// begin enable ;
22012: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
22013: LD_INT 17
22015: PPUSH
22016: LD_INT 22
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: LD_INT 42
22027: PUSH
22028: LD_INT 43
22030: PUSH
22031: LD_INT 44
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: PPUSH
22042: LD_INT 3
22044: PPUSH
22045: CALL_OW 12
22049: ARRAY
22050: PPUSH
22051: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22055: LD_INT 17
22057: PPUSH
22058: LD_INT 22
22060: PPUSH
22061: LD_INT 1
22063: PPUSH
22064: LD_INT 1
22066: PPUSH
22067: LD_INT 51
22069: PPUSH
22070: CALL_OW 185
// end ;
22074: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22075: LD_INT 17
22077: PPUSH
22078: CALL_OW 302
22082: PUSH
22083: LD_INT 17
22085: PPUSH
22086: CALL_OW 255
22090: PUSH
22091: LD_INT 3
22093: EQUAL
22094: AND
22095: PUSH
22096: LD_INT 2
22098: PPUSH
22099: CALL_OW 302
22103: AND
22104: PUSH
22105: LD_INT 2
22107: PPUSH
22108: CALL_OW 255
22112: PUSH
22113: LD_INT 3
22115: EQUAL
22116: AND
22117: PUSH
22118: LD_INT 17
22120: PPUSH
22121: CALL_OW 313
22125: NOT
22126: AND
22127: IFFALSE 22221
22129: GO 22131
22131: DISABLE
22132: LD_INT 0
22134: PPUSH
// begin for i = 1 to 6 do
22135: LD_ADDR_VAR 0 1
22139: PUSH
22140: DOUBLE
22141: LD_INT 1
22143: DEC
22144: ST_TO_ADDR
22145: LD_INT 6
22147: PUSH
22148: FOR_TO
22149: IFFALSE 22219
// begin uc_side = 3 ;
22151: LD_ADDR_OWVAR 20
22155: PUSH
22156: LD_INT 3
22158: ST_TO_ADDR
// uc_nation = 3 ;
22159: LD_ADDR_OWVAR 21
22163: PUSH
22164: LD_INT 3
22166: ST_TO_ADDR
// hc_gallery :=  ;
22167: LD_ADDR_OWVAR 33
22171: PUSH
22172: LD_STRING 
22174: ST_TO_ADDR
// hc_name :=  ;
22175: LD_ADDR_OWVAR 26
22179: PUSH
22180: LD_STRING 
22182: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22183: LD_INT 0
22185: PPUSH
22186: LD_EXP 34
22190: PPUSH
22191: LD_EXP 35
22195: PPUSH
22196: CALL_OW 12
22200: PPUSH
22201: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22205: CALL_OW 44
22209: PPUSH
22210: LD_INT 17
22212: PPUSH
22213: CALL_OW 52
// end ;
22217: GO 22148
22219: POP
22220: POP
// end ;
22221: PPOPN 1
22223: END
// every 2 2$0 do var i , j ;
22224: GO 22226
22226: DISABLE
22227: LD_INT 0
22229: PPUSH
22230: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22231: LD_INT 14700
22233: PUSH
22234: LD_INT 33600
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PPUSH
22244: LD_INT 2
22246: PPUSH
22247: CALL_OW 12
22251: ARRAY
22252: PPUSH
22253: CALL_OW 67
// disableHealAI = 1 ;
22257: LD_ADDR_EXP 33
22261: PUSH
22262: LD_INT 1
22264: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22265: LD_ADDR_VAR 0 1
22269: PUSH
22270: LD_INT 22
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 25
22282: PUSH
22283: LD_INT 4
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PPUSH
22294: CALL_OW 69
22298: PUSH
22299: FOR_IN
22300: IFFALSE 22313
// ComExitBuilding ( i ) ;
22302: LD_VAR 0 1
22306: PPUSH
22307: CALL_OW 122
22311: GO 22299
22313: POP
22314: POP
// wait ( 0 0$1 ) ;
22315: LD_INT 35
22317: PPUSH
22318: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22322: LD_INT 35
22324: PPUSH
22325: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22329: LD_ADDR_VAR 0 1
22333: PUSH
22334: LD_INT 22
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 25
22346: PUSH
22347: LD_INT 4
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: CALL_OW 69
22362: PUSH
22363: FOR_IN
22364: IFFALSE 22441
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 17
22373: PPUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 25
22386: PUSH
22387: LD_INT 12
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PPUSH
22398: CALL_OW 70
22402: PUSH
22403: FOR_IN
22404: IFFALSE 22437
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22406: LD_VAR 0 1
22410: PPUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: CALL_OW 250
22420: PPUSH
22421: LD_VAR 0 2
22425: PPUSH
22426: CALL_OW 251
22430: PPUSH
22431: CALL_OW 191
// end ;
22435: GO 22403
22437: POP
22438: POP
// end ;
22439: GO 22363
22441: POP
22442: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22443: LD_INT 22
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 25
22455: PUSH
22456: LD_INT 4
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PPUSH
22467: CALL_OW 69
22471: PUSH
22472: LD_INT 0
22474: EQUAL
22475: PUSH
22476: LD_EXP 32
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: PUSH
22495: LD_OWVAR 67
22499: ARRAY
22500: GREATEREQUAL
22501: OR
22502: PUSH
22503: LD_INT 17
22505: PPUSH
22506: LD_INT 22
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PPUSH
22530: CALL_OW 70
22534: PUSH
22535: LD_INT 0
22537: EQUAL
22538: OR
22539: IFFALSE 22322
// disableHealAI = 0 ;
22541: LD_ADDR_EXP 33
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22549: LD_ADDR_VAR 0 1
22553: PUSH
22554: LD_INT 22
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 25
22566: PUSH
22567: LD_INT 12
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PPUSH
22578: CALL_OW 69
22582: PUSH
22583: FOR_IN
22584: IFFALSE 22600
// SetClass ( i , 16 ) ;
22586: LD_VAR 0 1
22590: PPUSH
22591: LD_INT 16
22593: PPUSH
22594: CALL_OW 336
22598: GO 22583
22600: POP
22601: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_INT 22
22609: PUSH
22610: LD_INT 3
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 25
22619: PUSH
22620: LD_INT 4
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PPUSH
22631: CALL_OW 69
22635: PUSH
22636: FOR_IN
22637: IFFALSE 22656
// ComMoveXY ( i , 113 , 94 ) ;
22639: LD_VAR 0 1
22643: PPUSH
22644: LD_INT 113
22646: PPUSH
22647: LD_INT 94
22649: PPUSH
22650: CALL_OW 111
22654: GO 22636
22656: POP
22657: POP
// end ;
22658: PPOPN 2
22660: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22661: LD_INT 21
22663: PPUSH
22664: CALL_OW 255
22668: PUSH
22669: LD_INT 3
22671: EQUAL
22672: PUSH
22673: LD_INT 21
22675: PPUSH
22676: CALL_OW 302
22680: AND
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 34
22694: PUSH
22695: LD_INT 51
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 69
22710: PUSH
22711: LD_INT 0
22713: EQUAL
22714: AND
22715: IFFALSE 22747
22717: GO 22719
22719: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22720: LD_INT 21
22722: PPUSH
22723: LD_INT 23
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: LD_INT 1
22731: PPUSH
22732: LD_INT 51
22734: PPUSH
22735: CALL_OW 185
// wait ( 5 5$0 ) ;
22739: LD_INT 10500
22741: PPUSH
22742: CALL_OW 67
// enable ;
22746: ENABLE
// end ; end_of_file
22747: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22748: LD_EXP 26
22752: PUSH
22753: LD_INT 0
22755: LESSEQUAL
22756: IFFALSE 22905
22758: GO 22760
22760: DISABLE
22761: LD_INT 0
22763: PPUSH
22764: PPUSH
22765: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22766: LD_ADDR_VAR 0 2
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 21
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 2
22793: PUSH
22794: LD_INT 30
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 30
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: ST_TO_ADDR
// for i in tmp do
22829: LD_ADDR_VAR 0 1
22833: PUSH
22834: LD_VAR 0 2
22838: PUSH
22839: FOR_IN
22840: IFFALSE 22873
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_VAR 0 3
22851: PUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 274
22861: PPUSH
22862: LD_INT 1
22864: PPUSH
22865: CALL_OW 275
22869: PLUS
22870: ST_TO_ADDR
22871: GO 22839
22873: POP
22874: POP
// if yourCrates >= needCrates then
22875: LD_VAR 0 3
22879: PUSH
22880: LD_EXP 25
22884: GREATEREQUAL
22885: IFFALSE 22898
// begin FinishMission ( yourCrates ) ;
22887: LD_VAR 0 3
22891: PPUSH
22892: CALL 22908 0 1
// end else
22896: GO 22905
// begin YouLost ( matmin ) ;
22898: LD_STRING matmin
22900: PPUSH
22901: CALL_OW 104
// end ; end ;
22905: PPOPN 3
22907: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22908: LD_INT 0
22910: PPUSH
22911: PPUSH
22912: PPUSH
22913: PPUSH
// if killCounter = 0 then
22914: LD_EXP 47
22918: PUSH
22919: LD_INT 0
22921: EQUAL
22922: IFFALSE 22931
// SetAchievement ( ACH_SURV ) ;
22924: LD_STRING ACH_SURV
22926: PPUSH
22927: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22931: LD_INT 22
22933: PUSH
22934: LD_INT 3
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 21
22943: PUSH
22944: LD_INT 3
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PPUSH
22955: CALL_OW 69
22959: PUSH
22960: LD_INT 0
22962: EQUAL
22963: IFFALSE 22979
// begin wait ( 3 ) ;
22965: LD_INT 3
22967: PPUSH
22968: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22972: LD_STRING ACH_BASEDESTROYER
22974: PPUSH
22975: CALL_OW 543
// end ; m1 := false ;
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_INT 0
22986: ST_TO_ADDR
// m2 := false ;
22987: LD_ADDR_VAR 0 4
22991: PUSH
22992: LD_INT 0
22994: ST_TO_ADDR
// m3 := false ;
22995: LD_ADDR_VAR 0 5
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
// if crates + 100 > crates then
23003: LD_VAR 0 1
23007: PUSH
23008: LD_INT 100
23010: PLUS
23011: PUSH
23012: LD_VAR 0 1
23016: GREATER
23017: IFFALSE 23049
// begin AddMedal ( cans , 1 ) ;
23019: LD_STRING cans
23021: PPUSH
23022: LD_INT 1
23024: PPUSH
23025: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23029: LD_INT 1
23031: PPUSH
23032: LD_STRING 06_crates_1
23034: PPUSH
23035: CALL_OW 39
// m1 := true ;
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_INT 1
23046: ST_TO_ADDR
// end else
23047: GO 23070
// begin AddMedal ( cans , - 1 ) ;
23049: LD_STRING cans
23051: PPUSH
23052: LD_INT 1
23054: NEG
23055: PPUSH
23056: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23060: LD_INT 0
23062: PPUSH
23063: LD_STRING 06_crates_1
23065: PPUSH
23066: CALL_OW 39
// end ; if unitLost < 3 then
23070: LD_EXP 30
23074: PUSH
23075: LD_INT 3
23077: LESS
23078: IFFALSE 23100
// begin AddMedal ( people , 1 ) ;
23080: LD_STRING people
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 101
// m2 := true ;
23090: LD_ADDR_VAR 0 4
23094: PUSH
23095: LD_INT 1
23097: ST_TO_ADDR
// end else
23098: GO 23111
// begin AddMedal ( people , - 1 ) ;
23100: LD_STRING people
23102: PPUSH
23103: LD_INT 1
23105: NEG
23106: PPUSH
23107: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23111: LD_EXP 28
23115: PPUSH
23116: LD_STRING 06_remoteVehs_1
23118: PPUSH
23119: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23123: LD_EXP 28
23127: PUSH
23128: LD_INT 1
23130: EQUAL
23131: IFFALSE 23153
// begin AddMedal ( remote , 1 ) ;
23133: LD_STRING remote
23135: PPUSH
23136: LD_INT 1
23138: PPUSH
23139: CALL_OW 101
// m3 := true ;
23143: LD_ADDR_VAR 0 5
23147: PUSH
23148: LD_INT 1
23150: ST_TO_ADDR
// end else
23151: GO 23193
// begin if GetTech ( 18 , 1 ) = state_enabled then
23153: LD_INT 18
23155: PPUSH
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 321
23163: PUSH
23164: LD_INT 1
23166: EQUAL
23167: IFFALSE 23182
// begin AddMedal ( remote , - 1 ) ;
23169: LD_STRING remote
23171: PPUSH
23172: LD_INT 1
23174: NEG
23175: PPUSH
23176: CALL_OW 101
// end else
23180: GO 23193
// begin AddMedal ( remote , - 2 ) ;
23182: LD_STRING remote
23184: PPUSH
23185: LD_INT 2
23187: NEG
23188: PPUSH
23189: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23193: LD_VAR 0 3
23197: PUSH
23198: LD_VAR 0 4
23202: AND
23203: PUSH
23204: LD_VAR 0 5
23208: AND
23209: IFFALSE 23225
// begin wait ( 3 ) ;
23211: LD_INT 3
23213: PPUSH
23214: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23218: LD_STRING ACH_ASPEED_6
23220: PPUSH
23221: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23225: LD_OWVAR 67
23229: PUSH
23230: LD_INT 3
23232: EQUAL
23233: PUSH
23234: LD_VAR 0 3
23238: AND
23239: PUSH
23240: LD_VAR 0 4
23244: AND
23245: PUSH
23246: LD_VAR 0 5
23250: AND
23251: IFFALSE 23263
// SetAchievementEX ( ACH_AMER , 6 ) ;
23253: LD_STRING ACH_AMER
23255: PPUSH
23256: LD_INT 6
23258: PPUSH
23259: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23263: LD_EXP 20
23267: PPUSH
23268: LD_STRING 06_KurtStatus_1
23270: PPUSH
23271: CALL_OW 39
// GiveMedals ( Main ) ;
23275: LD_STRING Main
23277: PPUSH
23278: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23282: LD_INT 22
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 21
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 50
23304: PUSH
23305: EMPTY
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 25
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 25
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 25
23333: PUSH
23334: LD_INT 3
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 25
23343: PUSH
23344: LD_INT 4
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: PPUSH
23369: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23373: LD_EXP 1
23377: PPUSH
23378: LD_EXP 43
23382: PUSH
23383: LD_STRING JMM
23385: STR
23386: PPUSH
23387: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23391: LD_EXP 2
23395: PPUSH
23396: LD_EXP 43
23400: PUSH
23401: LD_STRING Lisa
23403: STR
23404: PPUSH
23405: CALL 6336 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23409: LD_EXP 3
23413: PPUSH
23414: LD_EXP 43
23418: PUSH
23419: LD_STRING Bobby
23421: STR
23422: PPUSH
23423: CALL 6336 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23427: LD_EXP 4
23431: PPUSH
23432: LD_EXP 43
23436: PUSH
23437: LD_STRING Cyrus
23439: STR
23440: PPUSH
23441: CALL 6336 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23445: LD_EXP 5
23449: PPUSH
23450: LD_EXP 43
23454: PUSH
23455: LD_STRING Frank
23457: STR
23458: PPUSH
23459: CALL 6336 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23463: LD_EXP 6
23467: PPUSH
23468: LD_EXP 43
23472: PUSH
23473: LD_STRING Brown
23475: STR
23476: PPUSH
23477: CALL 6336 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23481: LD_EXP 7
23485: PPUSH
23486: LD_EXP 43
23490: PUSH
23491: LD_STRING Donaldson
23493: STR
23494: PPUSH
23495: CALL 6336 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23499: LD_EXP 8
23503: PPUSH
23504: LD_EXP 43
23508: PUSH
23509: LD_STRING Gladstone
23511: STR
23512: PPUSH
23513: CALL 6336 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23517: LD_EXP 9
23521: PPUSH
23522: LD_EXP 43
23526: PUSH
23527: LD_STRING Denis
23529: STR
23530: PPUSH
23531: CALL 6336 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23535: LD_EXP 15
23539: PPUSH
23540: LD_EXP 43
23544: PUSH
23545: LD_STRING Joan
23547: STR
23548: PPUSH
23549: CALL 6336 0 2
// if IsLive ( Joan ) then
23553: LD_EXP 15
23557: PPUSH
23558: CALL_OW 300
23562: IFFALSE 23576
// SaveCharacters ( Joan , Joan ) ;
23564: LD_EXP 15
23568: PPUSH
23569: LD_STRING Joan
23571: PPUSH
23572: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23576: LD_EXP 16
23580: PPUSH
23581: LD_STRING 06_JoanStatus_1
23583: PPUSH
23584: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23588: LD_INT 50
23590: PUSH
23591: EMPTY
23592: LIST
23593: PUSH
23594: LD_INT 22
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 21
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 2
23616: PUSH
23617: LD_INT 25
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 25
23629: PUSH
23630: LD_INT 2
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 25
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 4
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: PPUSH
23670: CALL_OW 69
23674: PUSH
23675: LD_EXP 1
23679: PUSH
23680: LD_EXP 2
23684: PUSH
23685: LD_EXP 3
23689: PUSH
23690: LD_EXP 4
23694: PUSH
23695: LD_EXP 5
23699: PUSH
23700: LD_EXP 6
23704: PUSH
23705: LD_EXP 7
23709: PUSH
23710: LD_EXP 8
23714: PUSH
23715: LD_EXP 9
23719: PUSH
23720: LD_EXP 15
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: DIFF
23737: PPUSH
23738: LD_STRING 06_other_survivors
23740: PPUSH
23741: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23745: LD_INT 50
23747: PUSH
23748: EMPTY
23749: LIST
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 21
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 25
23776: PUSH
23777: LD_INT 12
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 25
23786: PUSH
23787: LD_INT 16
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PPUSH
23805: CALL_OW 69
23809: PPUSH
23810: LD_STRING 06_other_apemans
23812: PPUSH
23813: CALL_OW 38
// YouWin ;
23817: CALL_OW 103
// end ; end_of_file
23821: LD_VAR 0 2
23825: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23826: LD_EXP 39
23830: PUSH
23831: LD_INT 3
23833: EQUAL
23834: IFFALSE 23925
23836: GO 23838
23838: DISABLE
// begin enable ;
23839: ENABLE
// sendedConvoys = 0 ;
23840: LD_ADDR_EXP 39
23844: PUSH
23845: LD_INT 0
23847: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23848: LD_INT 6
23850: PPUSH
23851: LD_INT 3
23853: PPUSH
23854: LD_INT 3
23856: PUSH
23857: LD_INT 4
23859: PUSH
23860: LD_INT 6
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: PUSH
23868: LD_OWVAR 67
23872: ARRAY
23873: PPUSH
23874: LD_INT 0
23876: PPUSH
23877: LD_INT 0
23879: PPUSH
23880: LD_INT 0
23882: PPUSH
23883: LD_INT 0
23885: PPUSH
23886: LD_EXP 34
23890: PPUSH
23891: LD_EXP 35
23895: PPUSH
23896: CALL_OW 12
23900: PPUSH
23901: LD_INT 16
23903: PPUSH
23904: LD_INT 15
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: LD_INT 1
23912: PPUSH
23913: LD_INT 2
23915: PPUSH
23916: CALL_OW 12
23920: PPUSH
23921: CALL 10755 0 12
// end ; end_of_file
23925: END
// export function PrepareNature ; var i , un ; begin
23926: LD_INT 0
23928: PPUSH
23929: PPUSH
23930: PPUSH
// for i = 1 to Difficulty + 2 do
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: DOUBLE
23937: LD_INT 1
23939: DEC
23940: ST_TO_ADDR
23941: LD_OWVAR 67
23945: PUSH
23946: LD_INT 2
23948: PLUS
23949: PUSH
23950: FOR_TO
23951: IFFALSE 24060
// begin hc_sex = sex_male ;
23953: LD_ADDR_OWVAR 27
23957: PUSH
23958: LD_INT 1
23960: ST_TO_ADDR
// uc_side = 0 ;
23961: LD_ADDR_OWVAR 20
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
// uc_nation = nation_nature ;
23969: LD_ADDR_OWVAR 21
23973: PUSH
23974: LD_INT 0
23976: ST_TO_ADDR
// hc_class = class_tiger ;
23977: LD_ADDR_OWVAR 28
23981: PUSH
23982: LD_INT 14
23984: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23985: LD_ADDR_OWVAR 31
23989: PUSH
23990: LD_EXP 35
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24010: LD_ADDR_OWVAR 35
24014: PUSH
24015: LD_INT 5
24017: NEG
24018: PPUSH
24019: LD_INT 5
24021: PPUSH
24022: CALL_OW 12
24026: PUSH
24027: LD_OWVAR 67
24031: MUL
24032: ST_TO_ADDR
// un = CreateHuman ;
24033: LD_ADDR_VAR 0 3
24037: PUSH
24038: CALL_OW 44
24042: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24043: LD_VAR 0 3
24047: PPUSH
24048: LD_INT 18
24050: PPUSH
24051: LD_INT 0
24053: PPUSH
24054: CALL_OW 49
// end ;
24058: GO 23950
24060: POP
24061: POP
// for i = 1 to rand ( 3 , 4 ) do
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: DOUBLE
24068: LD_INT 1
24070: DEC
24071: ST_TO_ADDR
24072: LD_INT 3
24074: PPUSH
24075: LD_INT 4
24077: PPUSH
24078: CALL_OW 12
24082: PUSH
24083: FOR_TO
24084: IFFALSE 24178
// begin hc_sex = sex_male ;
24086: LD_ADDR_OWVAR 27
24090: PUSH
24091: LD_INT 1
24093: ST_TO_ADDR
// uc_side = 0 ;
24094: LD_ADDR_OWVAR 20
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// uc_nation = nation_nature ;
24102: LD_ADDR_OWVAR 21
24106: PUSH
24107: LD_INT 0
24109: ST_TO_ADDR
// hc_class = 18 ;
24110: LD_ADDR_OWVAR 28
24114: PUSH
24115: LD_INT 18
24117: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24118: LD_ADDR_OWVAR 31
24122: PUSH
24123: LD_EXP 35
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// hc_agressivity = 0 ;
24143: LD_ADDR_OWVAR 35
24147: PUSH
24148: LD_INT 0
24150: ST_TO_ADDR
// un = CreateHuman ;
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: CALL_OW 44
24160: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_INT 18
24168: PPUSH
24169: LD_INT 0
24171: PPUSH
24172: CALL_OW 49
// end ;
24176: GO 24083
24178: POP
24179: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24180: LD_ADDR_VAR 0 2
24184: PUSH
24185: DOUBLE
24186: LD_INT 1
24188: DEC
24189: ST_TO_ADDR
24190: LD_INT 1
24192: PPUSH
24193: LD_INT 3
24195: PPUSH
24196: CALL_OW 12
24200: PUSH
24201: LD_OWVAR 67
24205: PLUS
24206: PUSH
24207: FOR_TO
24208: IFFALSE 24357
// begin hc_sex = sex_male ;
24210: LD_ADDR_OWVAR 27
24214: PUSH
24215: LD_INT 1
24217: ST_TO_ADDR
// uc_side = 0 ;
24218: LD_ADDR_OWVAR 20
24222: PUSH
24223: LD_INT 0
24225: ST_TO_ADDR
// uc_nation = nation_nature ;
24226: LD_ADDR_OWVAR 21
24230: PUSH
24231: LD_INT 0
24233: ST_TO_ADDR
// hc_class = class_apeman ;
24234: LD_ADDR_OWVAR 28
24238: PUSH
24239: LD_INT 12
24241: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24242: LD_ADDR_OWVAR 31
24246: PUSH
24247: LD_INT 2
24249: PPUSH
24250: LD_INT 5
24252: PPUSH
24253: CALL_OW 12
24257: PUSH
24258: LD_INT 0
24260: PPUSH
24261: LD_INT 2
24263: PPUSH
24264: CALL_OW 12
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24281: LD_ADDR_OWVAR 35
24285: PUSH
24286: LD_INT 20
24288: PPUSH
24289: LD_INT 30
24291: PPUSH
24292: CALL_OW 12
24296: PUSH
24297: LD_INT 30
24299: PPUSH
24300: LD_INT 40
24302: PPUSH
24303: CALL_OW 12
24307: PUSH
24308: LD_INT 40
24310: PPUSH
24311: LD_INT 50
24313: PPUSH
24314: CALL_OW 12
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: PUSH
24324: LD_OWVAR 67
24328: ARRAY
24329: ST_TO_ADDR
// un = CreateHuman ;
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: CALL_OW 44
24339: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_INT 19
24347: PPUSH
24348: LD_INT 0
24350: PPUSH
24351: CALL_OW 49
// end ;
24355: GO 24207
24357: POP
24358: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24359: LD_ADDR_VAR 0 2
24363: PUSH
24364: DOUBLE
24365: LD_INT 1
24367: DEC
24368: ST_TO_ADDR
24369: LD_INT 5
24371: PPUSH
24372: LD_INT 6
24374: PPUSH
24375: CALL_OW 12
24379: PUSH
24380: LD_OWVAR 67
24384: PLUS
24385: PUSH
24386: FOR_TO
24387: IFFALSE 24495
// begin hc_sex = sex_male ;
24389: LD_ADDR_OWVAR 27
24393: PUSH
24394: LD_INT 1
24396: ST_TO_ADDR
// uc_side = 0 ;
24397: LD_ADDR_OWVAR 20
24401: PUSH
24402: LD_INT 0
24404: ST_TO_ADDR
// uc_nation = nation_nature ;
24405: LD_ADDR_OWVAR 21
24409: PUSH
24410: LD_INT 0
24412: ST_TO_ADDR
// hc_class = class_apeman ;
24413: LD_ADDR_OWVAR 28
24417: PUSH
24418: LD_INT 12
24420: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24421: LD_ADDR_OWVAR 31
24425: PUSH
24426: LD_INT 2
24428: PPUSH
24429: LD_INT 5
24431: PPUSH
24432: CALL_OW 12
24436: PUSH
24437: LD_INT 0
24439: PPUSH
24440: LD_INT 2
24442: PPUSH
24443: CALL_OW 12
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: ST_TO_ADDR
// hc_agressivity = 0 ;
24460: LD_ADDR_OWVAR 35
24464: PUSH
24465: LD_INT 0
24467: ST_TO_ADDR
// un = CreateHuman ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: CALL_OW 44
24477: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24478: LD_VAR 0 3
24482: PPUSH
24483: LD_INT 20
24485: PPUSH
24486: LD_INT 0
24488: PPUSH
24489: CALL_OW 49
// end ;
24493: GO 24386
24495: POP
24496: POP
// end ; end_of_file end_of_file
24497: LD_VAR 0 1
24501: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24502: GO 24504
24504: DISABLE
// begin ru_radar := 98 ;
24505: LD_ADDR_EXP 51
24509: PUSH
24510: LD_INT 98
24512: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24513: LD_ADDR_EXP 52
24517: PUSH
24518: LD_INT 89
24520: ST_TO_ADDR
// us_hack := 99 ;
24521: LD_ADDR_EXP 53
24525: PUSH
24526: LD_INT 99
24528: ST_TO_ADDR
// us_artillery := 97 ;
24529: LD_ADDR_EXP 54
24533: PUSH
24534: LD_INT 97
24536: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24537: LD_ADDR_EXP 55
24541: PUSH
24542: LD_INT 91
24544: ST_TO_ADDR
// end ; end_of_file end_of_file
24545: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24546: GO 24548
24548: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24549: LD_STRING initStreamRollete();
24551: PPUSH
24552: CALL_OW 559
// InitStreamMode ;
24556: CALL 24565 0 0
// DefineStreamItems ( ) ;
24560: CALL 25005 0 0
// end ;
24564: END
// function InitStreamMode ; begin
24565: LD_INT 0
24567: PPUSH
// streamModeActive := false ;
24568: LD_ADDR_EXP 56
24572: PUSH
24573: LD_INT 0
24575: ST_TO_ADDR
// normalCounter := 36 ;
24576: LD_ADDR_EXP 57
24580: PUSH
24581: LD_INT 36
24583: ST_TO_ADDR
// hardcoreCounter := 16 ;
24584: LD_ADDR_EXP 58
24588: PUSH
24589: LD_INT 16
24591: ST_TO_ADDR
// sRocket := false ;
24592: LD_ADDR_EXP 61
24596: PUSH
24597: LD_INT 0
24599: ST_TO_ADDR
// sSpeed := false ;
24600: LD_ADDR_EXP 60
24604: PUSH
24605: LD_INT 0
24607: ST_TO_ADDR
// sEngine := false ;
24608: LD_ADDR_EXP 62
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
// sSpec := false ;
24616: LD_ADDR_EXP 59
24620: PUSH
24621: LD_INT 0
24623: ST_TO_ADDR
// sLevel := false ;
24624: LD_ADDR_EXP 63
24628: PUSH
24629: LD_INT 0
24631: ST_TO_ADDR
// sArmoury := false ;
24632: LD_ADDR_EXP 64
24636: PUSH
24637: LD_INT 0
24639: ST_TO_ADDR
// sRadar := false ;
24640: LD_ADDR_EXP 65
24644: PUSH
24645: LD_INT 0
24647: ST_TO_ADDR
// sBunker := false ;
24648: LD_ADDR_EXP 66
24652: PUSH
24653: LD_INT 0
24655: ST_TO_ADDR
// sHack := false ;
24656: LD_ADDR_EXP 67
24660: PUSH
24661: LD_INT 0
24663: ST_TO_ADDR
// sFire := false ;
24664: LD_ADDR_EXP 68
24668: PUSH
24669: LD_INT 0
24671: ST_TO_ADDR
// sRefresh := false ;
24672: LD_ADDR_EXP 69
24676: PUSH
24677: LD_INT 0
24679: ST_TO_ADDR
// sExp := false ;
24680: LD_ADDR_EXP 70
24684: PUSH
24685: LD_INT 0
24687: ST_TO_ADDR
// sDepot := false ;
24688: LD_ADDR_EXP 71
24692: PUSH
24693: LD_INT 0
24695: ST_TO_ADDR
// sFlag := false ;
24696: LD_ADDR_EXP 72
24700: PUSH
24701: LD_INT 0
24703: ST_TO_ADDR
// sKamikadze := false ;
24704: LD_ADDR_EXP 80
24708: PUSH
24709: LD_INT 0
24711: ST_TO_ADDR
// sTroll := false ;
24712: LD_ADDR_EXP 81
24716: PUSH
24717: LD_INT 0
24719: ST_TO_ADDR
// sSlow := false ;
24720: LD_ADDR_EXP 82
24724: PUSH
24725: LD_INT 0
24727: ST_TO_ADDR
// sLack := false ;
24728: LD_ADDR_EXP 83
24732: PUSH
24733: LD_INT 0
24735: ST_TO_ADDR
// sTank := false ;
24736: LD_ADDR_EXP 85
24740: PUSH
24741: LD_INT 0
24743: ST_TO_ADDR
// sRemote := false ;
24744: LD_ADDR_EXP 86
24748: PUSH
24749: LD_INT 0
24751: ST_TO_ADDR
// sPowell := false ;
24752: LD_ADDR_EXP 87
24756: PUSH
24757: LD_INT 0
24759: ST_TO_ADDR
// sTeleport := false ;
24760: LD_ADDR_EXP 90
24764: PUSH
24765: LD_INT 0
24767: ST_TO_ADDR
// sOilTower := false ;
24768: LD_ADDR_EXP 92
24772: PUSH
24773: LD_INT 0
24775: ST_TO_ADDR
// sShovel := false ;
24776: LD_ADDR_EXP 93
24780: PUSH
24781: LD_INT 0
24783: ST_TO_ADDR
// sSheik := false ;
24784: LD_ADDR_EXP 94
24788: PUSH
24789: LD_INT 0
24791: ST_TO_ADDR
// sEarthquake := false ;
24792: LD_ADDR_EXP 96
24796: PUSH
24797: LD_INT 0
24799: ST_TO_ADDR
// sAI := false ;
24800: LD_ADDR_EXP 97
24804: PUSH
24805: LD_INT 0
24807: ST_TO_ADDR
// sCargo := false ;
24808: LD_ADDR_EXP 100
24812: PUSH
24813: LD_INT 0
24815: ST_TO_ADDR
// sDLaser := false ;
24816: LD_ADDR_EXP 101
24820: PUSH
24821: LD_INT 0
24823: ST_TO_ADDR
// sExchange := false ;
24824: LD_ADDR_EXP 102
24828: PUSH
24829: LD_INT 0
24831: ST_TO_ADDR
// sFac := false ;
24832: LD_ADDR_EXP 103
24836: PUSH
24837: LD_INT 0
24839: ST_TO_ADDR
// sPower := false ;
24840: LD_ADDR_EXP 104
24844: PUSH
24845: LD_INT 0
24847: ST_TO_ADDR
// sRandom := false ;
24848: LD_ADDR_EXP 105
24852: PUSH
24853: LD_INT 0
24855: ST_TO_ADDR
// sShield := false ;
24856: LD_ADDR_EXP 106
24860: PUSH
24861: LD_INT 0
24863: ST_TO_ADDR
// sTime := false ;
24864: LD_ADDR_EXP 107
24868: PUSH
24869: LD_INT 0
24871: ST_TO_ADDR
// sTools := false ;
24872: LD_ADDR_EXP 108
24876: PUSH
24877: LD_INT 0
24879: ST_TO_ADDR
// sSold := false ;
24880: LD_ADDR_EXP 73
24884: PUSH
24885: LD_INT 0
24887: ST_TO_ADDR
// sDiff := false ;
24888: LD_ADDR_EXP 74
24892: PUSH
24893: LD_INT 0
24895: ST_TO_ADDR
// sFog := false ;
24896: LD_ADDR_EXP 77
24900: PUSH
24901: LD_INT 0
24903: ST_TO_ADDR
// sReset := false ;
24904: LD_ADDR_EXP 78
24908: PUSH
24909: LD_INT 0
24911: ST_TO_ADDR
// sSun := false ;
24912: LD_ADDR_EXP 79
24916: PUSH
24917: LD_INT 0
24919: ST_TO_ADDR
// sTiger := false ;
24920: LD_ADDR_EXP 75
24924: PUSH
24925: LD_INT 0
24927: ST_TO_ADDR
// sBomb := false ;
24928: LD_ADDR_EXP 76
24932: PUSH
24933: LD_INT 0
24935: ST_TO_ADDR
// sWound := false ;
24936: LD_ADDR_EXP 84
24940: PUSH
24941: LD_INT 0
24943: ST_TO_ADDR
// sBetray := false ;
24944: LD_ADDR_EXP 88
24948: PUSH
24949: LD_INT 0
24951: ST_TO_ADDR
// sContamin := false ;
24952: LD_ADDR_EXP 89
24956: PUSH
24957: LD_INT 0
24959: ST_TO_ADDR
// sOil := false ;
24960: LD_ADDR_EXP 91
24964: PUSH
24965: LD_INT 0
24967: ST_TO_ADDR
// sStu := false ;
24968: LD_ADDR_EXP 95
24972: PUSH
24973: LD_INT 0
24975: ST_TO_ADDR
// sBazooka := false ;
24976: LD_ADDR_EXP 98
24980: PUSH
24981: LD_INT 0
24983: ST_TO_ADDR
// sMortar := false ;
24984: LD_ADDR_EXP 99
24988: PUSH
24989: LD_INT 0
24991: ST_TO_ADDR
// sRanger := false ;
24992: LD_ADDR_EXP 109
24996: PUSH
24997: LD_INT 0
24999: ST_TO_ADDR
// end ;
25000: LD_VAR 0 1
25004: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25005: LD_INT 0
25007: PPUSH
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
// result := [ ] ;
25012: LD_ADDR_VAR 0 1
25016: PUSH
25017: EMPTY
25018: ST_TO_ADDR
// if campaign_id = 1 then
25019: LD_OWVAR 69
25023: PUSH
25024: LD_INT 1
25026: EQUAL
25027: IFFALSE 27965
// begin case mission_number of 1 :
25029: LD_OWVAR 70
25033: PUSH
25034: LD_INT 1
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25106
25042: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25043: LD_ADDR_VAR 0 1
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 4
25053: PUSH
25054: LD_INT 11
25056: PUSH
25057: LD_INT 12
25059: PUSH
25060: LD_INT 15
25062: PUSH
25063: LD_INT 16
25065: PUSH
25066: LD_INT 22
25068: PUSH
25069: LD_INT 23
25071: PUSH
25072: LD_INT 26
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 101
25088: PUSH
25089: LD_INT 102
25091: PUSH
25092: LD_INT 106
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: ST_TO_ADDR
25104: GO 27963
25106: LD_INT 2
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25186
25114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25115: LD_ADDR_VAR 0 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 4
25125: PUSH
25126: LD_INT 11
25128: PUSH
25129: LD_INT 12
25131: PUSH
25132: LD_INT 15
25134: PUSH
25135: LD_INT 16
25137: PUSH
25138: LD_INT 22
25140: PUSH
25141: LD_INT 23
25143: PUSH
25144: LD_INT 26
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 101
25160: PUSH
25161: LD_INT 102
25163: PUSH
25164: LD_INT 105
25166: PUSH
25167: LD_INT 106
25169: PUSH
25170: LD_INT 108
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: ST_TO_ADDR
25184: GO 27963
25186: LD_INT 3
25188: DOUBLE
25189: EQUAL
25190: IFTRUE 25194
25192: GO 25270
25194: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25195: LD_ADDR_VAR 0 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 4
25205: PUSH
25206: LD_INT 5
25208: PUSH
25209: LD_INT 11
25211: PUSH
25212: LD_INT 12
25214: PUSH
25215: LD_INT 15
25217: PUSH
25218: LD_INT 16
25220: PUSH
25221: LD_INT 22
25223: PUSH
25224: LD_INT 26
25226: PUSH
25227: LD_INT 36
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 101
25244: PUSH
25245: LD_INT 102
25247: PUSH
25248: LD_INT 105
25250: PUSH
25251: LD_INT 106
25253: PUSH
25254: LD_INT 108
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: ST_TO_ADDR
25268: GO 27963
25270: LD_INT 4
25272: DOUBLE
25273: EQUAL
25274: IFTRUE 25278
25276: GO 25362
25278: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25279: LD_ADDR_VAR 0 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 4
25289: PUSH
25290: LD_INT 5
25292: PUSH
25293: LD_INT 8
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 12
25301: PUSH
25302: LD_INT 15
25304: PUSH
25305: LD_INT 16
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 23
25313: PUSH
25314: LD_INT 26
25316: PUSH
25317: LD_INT 36
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 101
25336: PUSH
25337: LD_INT 102
25339: PUSH
25340: LD_INT 105
25342: PUSH
25343: LD_INT 106
25345: PUSH
25346: LD_INT 108
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: ST_TO_ADDR
25360: GO 27963
25362: LD_INT 5
25364: DOUBLE
25365: EQUAL
25366: IFTRUE 25370
25368: GO 25470
25370: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25371: LD_ADDR_VAR 0 1
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 4
25381: PUSH
25382: LD_INT 5
25384: PUSH
25385: LD_INT 6
25387: PUSH
25388: LD_INT 8
25390: PUSH
25391: LD_INT 11
25393: PUSH
25394: LD_INT 12
25396: PUSH
25397: LD_INT 15
25399: PUSH
25400: LD_INT 16
25402: PUSH
25403: LD_INT 22
25405: PUSH
25406: LD_INT 23
25408: PUSH
25409: LD_INT 25
25411: PUSH
25412: LD_INT 26
25414: PUSH
25415: LD_INT 36
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 101
25436: PUSH
25437: LD_INT 102
25439: PUSH
25440: LD_INT 105
25442: PUSH
25443: LD_INT 106
25445: PUSH
25446: LD_INT 108
25448: PUSH
25449: LD_INT 109
25451: PUSH
25452: LD_INT 112
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: ST_TO_ADDR
25468: GO 27963
25470: LD_INT 6
25472: DOUBLE
25473: EQUAL
25474: IFTRUE 25478
25476: GO 25598
25478: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 4
25489: PUSH
25490: LD_INT 5
25492: PUSH
25493: LD_INT 6
25495: PUSH
25496: LD_INT 8
25498: PUSH
25499: LD_INT 11
25501: PUSH
25502: LD_INT 12
25504: PUSH
25505: LD_INT 15
25507: PUSH
25508: LD_INT 16
25510: PUSH
25511: LD_INT 20
25513: PUSH
25514: LD_INT 21
25516: PUSH
25517: LD_INT 22
25519: PUSH
25520: LD_INT 23
25522: PUSH
25523: LD_INT 25
25525: PUSH
25526: LD_INT 26
25528: PUSH
25529: LD_INT 30
25531: PUSH
25532: LD_INT 31
25534: PUSH
25535: LD_INT 32
25537: PUSH
25538: LD_INT 36
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 101
25564: PUSH
25565: LD_INT 102
25567: PUSH
25568: LD_INT 105
25570: PUSH
25571: LD_INT 106
25573: PUSH
25574: LD_INT 108
25576: PUSH
25577: LD_INT 109
25579: PUSH
25580: LD_INT 112
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: ST_TO_ADDR
25596: GO 27963
25598: LD_INT 7
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25706
25606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25607: LD_ADDR_VAR 0 1
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 4
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: LD_INT 7
25623: PUSH
25624: LD_INT 11
25626: PUSH
25627: LD_INT 12
25629: PUSH
25630: LD_INT 15
25632: PUSH
25633: LD_INT 16
25635: PUSH
25636: LD_INT 20
25638: PUSH
25639: LD_INT 21
25641: PUSH
25642: LD_INT 22
25644: PUSH
25645: LD_INT 23
25647: PUSH
25648: LD_INT 25
25650: PUSH
25651: LD_INT 26
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 101
25672: PUSH
25673: LD_INT 102
25675: PUSH
25676: LD_INT 103
25678: PUSH
25679: LD_INT 105
25681: PUSH
25682: LD_INT 106
25684: PUSH
25685: LD_INT 108
25687: PUSH
25688: LD_INT 112
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: ST_TO_ADDR
25704: GO 27963
25706: LD_INT 8
25708: DOUBLE
25709: EQUAL
25710: IFTRUE 25714
25712: GO 25842
25714: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25715: LD_ADDR_VAR 0 1
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: LD_INT 4
25725: PUSH
25726: LD_INT 5
25728: PUSH
25729: LD_INT 6
25731: PUSH
25732: LD_INT 7
25734: PUSH
25735: LD_INT 8
25737: PUSH
25738: LD_INT 11
25740: PUSH
25741: LD_INT 12
25743: PUSH
25744: LD_INT 15
25746: PUSH
25747: LD_INT 16
25749: PUSH
25750: LD_INT 20
25752: PUSH
25753: LD_INT 21
25755: PUSH
25756: LD_INT 22
25758: PUSH
25759: LD_INT 23
25761: PUSH
25762: LD_INT 25
25764: PUSH
25765: LD_INT 26
25767: PUSH
25768: LD_INT 30
25770: PUSH
25771: LD_INT 31
25773: PUSH
25774: LD_INT 32
25776: PUSH
25777: LD_INT 36
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 101
25804: PUSH
25805: LD_INT 102
25807: PUSH
25808: LD_INT 103
25810: PUSH
25811: LD_INT 105
25813: PUSH
25814: LD_INT 106
25816: PUSH
25817: LD_INT 108
25819: PUSH
25820: LD_INT 109
25822: PUSH
25823: LD_INT 112
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: ST_TO_ADDR
25840: GO 27963
25842: LD_INT 9
25844: DOUBLE
25845: EQUAL
25846: IFTRUE 25850
25848: GO 25986
25850: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25851: LD_ADDR_VAR 0 1
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: LD_INT 4
25861: PUSH
25862: LD_INT 5
25864: PUSH
25865: LD_INT 6
25867: PUSH
25868: LD_INT 7
25870: PUSH
25871: LD_INT 8
25873: PUSH
25874: LD_INT 11
25876: PUSH
25877: LD_INT 12
25879: PUSH
25880: LD_INT 15
25882: PUSH
25883: LD_INT 16
25885: PUSH
25886: LD_INT 20
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 22
25894: PUSH
25895: LD_INT 23
25897: PUSH
25898: LD_INT 25
25900: PUSH
25901: LD_INT 26
25903: PUSH
25904: LD_INT 28
25906: PUSH
25907: LD_INT 30
25909: PUSH
25910: LD_INT 31
25912: PUSH
25913: LD_INT 32
25915: PUSH
25916: LD_INT 36
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 101
25944: PUSH
25945: LD_INT 102
25947: PUSH
25948: LD_INT 103
25950: PUSH
25951: LD_INT 105
25953: PUSH
25954: LD_INT 106
25956: PUSH
25957: LD_INT 108
25959: PUSH
25960: LD_INT 109
25962: PUSH
25963: LD_INT 112
25965: PUSH
25966: LD_INT 114
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: ST_TO_ADDR
25984: GO 27963
25986: LD_INT 10
25988: DOUBLE
25989: EQUAL
25990: IFTRUE 25994
25992: GO 26178
25994: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25995: LD_ADDR_VAR 0 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 4
26005: PUSH
26006: LD_INT 5
26008: PUSH
26009: LD_INT 6
26011: PUSH
26012: LD_INT 7
26014: PUSH
26015: LD_INT 8
26017: PUSH
26018: LD_INT 9
26020: PUSH
26021: LD_INT 10
26023: PUSH
26024: LD_INT 11
26026: PUSH
26027: LD_INT 12
26029: PUSH
26030: LD_INT 13
26032: PUSH
26033: LD_INT 14
26035: PUSH
26036: LD_INT 15
26038: PUSH
26039: LD_INT 16
26041: PUSH
26042: LD_INT 17
26044: PUSH
26045: LD_INT 18
26047: PUSH
26048: LD_INT 19
26050: PUSH
26051: LD_INT 20
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 22
26059: PUSH
26060: LD_INT 23
26062: PUSH
26063: LD_INT 24
26065: PUSH
26066: LD_INT 25
26068: PUSH
26069: LD_INT 26
26071: PUSH
26072: LD_INT 28
26074: PUSH
26075: LD_INT 30
26077: PUSH
26078: LD_INT 31
26080: PUSH
26081: LD_INT 32
26083: PUSH
26084: LD_INT 36
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 101
26120: PUSH
26121: LD_INT 102
26123: PUSH
26124: LD_INT 103
26126: PUSH
26127: LD_INT 104
26129: PUSH
26130: LD_INT 105
26132: PUSH
26133: LD_INT 106
26135: PUSH
26136: LD_INT 107
26138: PUSH
26139: LD_INT 108
26141: PUSH
26142: LD_INT 109
26144: PUSH
26145: LD_INT 110
26147: PUSH
26148: LD_INT 111
26150: PUSH
26151: LD_INT 112
26153: PUSH
26154: LD_INT 114
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: ST_TO_ADDR
26176: GO 27963
26178: LD_INT 11
26180: DOUBLE
26181: EQUAL
26182: IFTRUE 26186
26184: GO 26378
26186: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26187: LD_ADDR_VAR 0 1
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: LD_INT 4
26200: PUSH
26201: LD_INT 5
26203: PUSH
26204: LD_INT 6
26206: PUSH
26207: LD_INT 7
26209: PUSH
26210: LD_INT 8
26212: PUSH
26213: LD_INT 9
26215: PUSH
26216: LD_INT 10
26218: PUSH
26219: LD_INT 11
26221: PUSH
26222: LD_INT 12
26224: PUSH
26225: LD_INT 13
26227: PUSH
26228: LD_INT 14
26230: PUSH
26231: LD_INT 15
26233: PUSH
26234: LD_INT 16
26236: PUSH
26237: LD_INT 17
26239: PUSH
26240: LD_INT 18
26242: PUSH
26243: LD_INT 19
26245: PUSH
26246: LD_INT 20
26248: PUSH
26249: LD_INT 21
26251: PUSH
26252: LD_INT 22
26254: PUSH
26255: LD_INT 23
26257: PUSH
26258: LD_INT 24
26260: PUSH
26261: LD_INT 25
26263: PUSH
26264: LD_INT 26
26266: PUSH
26267: LD_INT 28
26269: PUSH
26270: LD_INT 30
26272: PUSH
26273: LD_INT 31
26275: PUSH
26276: LD_INT 32
26278: PUSH
26279: LD_INT 34
26281: PUSH
26282: LD_INT 36
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 101
26320: PUSH
26321: LD_INT 102
26323: PUSH
26324: LD_INT 103
26326: PUSH
26327: LD_INT 104
26329: PUSH
26330: LD_INT 105
26332: PUSH
26333: LD_INT 106
26335: PUSH
26336: LD_INT 107
26338: PUSH
26339: LD_INT 108
26341: PUSH
26342: LD_INT 109
26344: PUSH
26345: LD_INT 110
26347: PUSH
26348: LD_INT 111
26350: PUSH
26351: LD_INT 112
26353: PUSH
26354: LD_INT 114
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: ST_TO_ADDR
26376: GO 27963
26378: LD_INT 12
26380: DOUBLE
26381: EQUAL
26382: IFTRUE 26386
26384: GO 26594
26386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26387: LD_ADDR_VAR 0 1
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: LD_INT 4
26403: PUSH
26404: LD_INT 5
26406: PUSH
26407: LD_INT 6
26409: PUSH
26410: LD_INT 7
26412: PUSH
26413: LD_INT 8
26415: PUSH
26416: LD_INT 9
26418: PUSH
26419: LD_INT 10
26421: PUSH
26422: LD_INT 11
26424: PUSH
26425: LD_INT 12
26427: PUSH
26428: LD_INT 13
26430: PUSH
26431: LD_INT 14
26433: PUSH
26434: LD_INT 15
26436: PUSH
26437: LD_INT 16
26439: PUSH
26440: LD_INT 17
26442: PUSH
26443: LD_INT 18
26445: PUSH
26446: LD_INT 19
26448: PUSH
26449: LD_INT 20
26451: PUSH
26452: LD_INT 21
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_INT 23
26460: PUSH
26461: LD_INT 24
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 26
26469: PUSH
26470: LD_INT 27
26472: PUSH
26473: LD_INT 28
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: LD_INT 31
26481: PUSH
26482: LD_INT 32
26484: PUSH
26485: LD_INT 33
26487: PUSH
26488: LD_INT 34
26490: PUSH
26491: LD_INT 36
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 101
26532: PUSH
26533: LD_INT 102
26535: PUSH
26536: LD_INT 103
26538: PUSH
26539: LD_INT 104
26541: PUSH
26542: LD_INT 105
26544: PUSH
26545: LD_INT 106
26547: PUSH
26548: LD_INT 107
26550: PUSH
26551: LD_INT 108
26553: PUSH
26554: LD_INT 109
26556: PUSH
26557: LD_INT 110
26559: PUSH
26560: LD_INT 111
26562: PUSH
26563: LD_INT 112
26565: PUSH
26566: LD_INT 113
26568: PUSH
26569: LD_INT 114
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: ST_TO_ADDR
26592: GO 27963
26594: LD_INT 13
26596: DOUBLE
26597: EQUAL
26598: IFTRUE 26602
26600: GO 26798
26602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26603: LD_ADDR_VAR 0 1
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: LD_INT 4
26619: PUSH
26620: LD_INT 5
26622: PUSH
26623: LD_INT 8
26625: PUSH
26626: LD_INT 9
26628: PUSH
26629: LD_INT 10
26631: PUSH
26632: LD_INT 11
26634: PUSH
26635: LD_INT 12
26637: PUSH
26638: LD_INT 14
26640: PUSH
26641: LD_INT 15
26643: PUSH
26644: LD_INT 16
26646: PUSH
26647: LD_INT 17
26649: PUSH
26650: LD_INT 18
26652: PUSH
26653: LD_INT 19
26655: PUSH
26656: LD_INT 20
26658: PUSH
26659: LD_INT 21
26661: PUSH
26662: LD_INT 22
26664: PUSH
26665: LD_INT 23
26667: PUSH
26668: LD_INT 24
26670: PUSH
26671: LD_INT 25
26673: PUSH
26674: LD_INT 26
26676: PUSH
26677: LD_INT 27
26679: PUSH
26680: LD_INT 28
26682: PUSH
26683: LD_INT 30
26685: PUSH
26686: LD_INT 31
26688: PUSH
26689: LD_INT 32
26691: PUSH
26692: LD_INT 33
26694: PUSH
26695: LD_INT 34
26697: PUSH
26698: LD_INT 36
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 101
26736: PUSH
26737: LD_INT 102
26739: PUSH
26740: LD_INT 103
26742: PUSH
26743: LD_INT 104
26745: PUSH
26746: LD_INT 105
26748: PUSH
26749: LD_INT 106
26751: PUSH
26752: LD_INT 107
26754: PUSH
26755: LD_INT 108
26757: PUSH
26758: LD_INT 109
26760: PUSH
26761: LD_INT 110
26763: PUSH
26764: LD_INT 111
26766: PUSH
26767: LD_INT 112
26769: PUSH
26770: LD_INT 113
26772: PUSH
26773: LD_INT 114
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: ST_TO_ADDR
26796: GO 27963
26798: LD_INT 14
26800: DOUBLE
26801: EQUAL
26802: IFTRUE 26806
26804: GO 27018
26806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26807: LD_ADDR_VAR 0 1
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 4
26823: PUSH
26824: LD_INT 5
26826: PUSH
26827: LD_INT 6
26829: PUSH
26830: LD_INT 7
26832: PUSH
26833: LD_INT 8
26835: PUSH
26836: LD_INT 9
26838: PUSH
26839: LD_INT 10
26841: PUSH
26842: LD_INT 11
26844: PUSH
26845: LD_INT 12
26847: PUSH
26848: LD_INT 13
26850: PUSH
26851: LD_INT 14
26853: PUSH
26854: LD_INT 15
26856: PUSH
26857: LD_INT 16
26859: PUSH
26860: LD_INT 17
26862: PUSH
26863: LD_INT 18
26865: PUSH
26866: LD_INT 19
26868: PUSH
26869: LD_INT 20
26871: PUSH
26872: LD_INT 21
26874: PUSH
26875: LD_INT 22
26877: PUSH
26878: LD_INT 23
26880: PUSH
26881: LD_INT 24
26883: PUSH
26884: LD_INT 25
26886: PUSH
26887: LD_INT 26
26889: PUSH
26890: LD_INT 27
26892: PUSH
26893: LD_INT 28
26895: PUSH
26896: LD_INT 29
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 31
26904: PUSH
26905: LD_INT 32
26907: PUSH
26908: LD_INT 33
26910: PUSH
26911: LD_INT 34
26913: PUSH
26914: LD_INT 36
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 101
26956: PUSH
26957: LD_INT 102
26959: PUSH
26960: LD_INT 103
26962: PUSH
26963: LD_INT 104
26965: PUSH
26966: LD_INT 105
26968: PUSH
26969: LD_INT 106
26971: PUSH
26972: LD_INT 107
26974: PUSH
26975: LD_INT 108
26977: PUSH
26978: LD_INT 109
26980: PUSH
26981: LD_INT 110
26983: PUSH
26984: LD_INT 111
26986: PUSH
26987: LD_INT 112
26989: PUSH
26990: LD_INT 113
26992: PUSH
26993: LD_INT 114
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
27016: GO 27963
27018: LD_INT 15
27020: DOUBLE
27021: EQUAL
27022: IFTRUE 27026
27024: GO 27238
27026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27027: LD_ADDR_VAR 0 1
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: LD_INT 4
27043: PUSH
27044: LD_INT 5
27046: PUSH
27047: LD_INT 6
27049: PUSH
27050: LD_INT 7
27052: PUSH
27053: LD_INT 8
27055: PUSH
27056: LD_INT 9
27058: PUSH
27059: LD_INT 10
27061: PUSH
27062: LD_INT 11
27064: PUSH
27065: LD_INT 12
27067: PUSH
27068: LD_INT 13
27070: PUSH
27071: LD_INT 14
27073: PUSH
27074: LD_INT 15
27076: PUSH
27077: LD_INT 16
27079: PUSH
27080: LD_INT 17
27082: PUSH
27083: LD_INT 18
27085: PUSH
27086: LD_INT 19
27088: PUSH
27089: LD_INT 20
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 22
27097: PUSH
27098: LD_INT 23
27100: PUSH
27101: LD_INT 24
27103: PUSH
27104: LD_INT 25
27106: PUSH
27107: LD_INT 26
27109: PUSH
27110: LD_INT 27
27112: PUSH
27113: LD_INT 28
27115: PUSH
27116: LD_INT 29
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: LD_INT 31
27124: PUSH
27125: LD_INT 32
27127: PUSH
27128: LD_INT 33
27130: PUSH
27131: LD_INT 34
27133: PUSH
27134: LD_INT 36
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 101
27176: PUSH
27177: LD_INT 102
27179: PUSH
27180: LD_INT 103
27182: PUSH
27183: LD_INT 104
27185: PUSH
27186: LD_INT 105
27188: PUSH
27189: LD_INT 106
27191: PUSH
27192: LD_INT 107
27194: PUSH
27195: LD_INT 108
27197: PUSH
27198: LD_INT 109
27200: PUSH
27201: LD_INT 110
27203: PUSH
27204: LD_INT 111
27206: PUSH
27207: LD_INT 112
27209: PUSH
27210: LD_INT 113
27212: PUSH
27213: LD_INT 114
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: ST_TO_ADDR
27236: GO 27963
27238: LD_INT 16
27240: DOUBLE
27241: EQUAL
27242: IFTRUE 27246
27244: GO 27370
27246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: LD_INT 2
27254: PUSH
27255: LD_INT 4
27257: PUSH
27258: LD_INT 5
27260: PUSH
27261: LD_INT 7
27263: PUSH
27264: LD_INT 11
27266: PUSH
27267: LD_INT 12
27269: PUSH
27270: LD_INT 15
27272: PUSH
27273: LD_INT 16
27275: PUSH
27276: LD_INT 20
27278: PUSH
27279: LD_INT 21
27281: PUSH
27282: LD_INT 22
27284: PUSH
27285: LD_INT 23
27287: PUSH
27288: LD_INT 25
27290: PUSH
27291: LD_INT 26
27293: PUSH
27294: LD_INT 30
27296: PUSH
27297: LD_INT 31
27299: PUSH
27300: LD_INT 32
27302: PUSH
27303: LD_INT 33
27305: PUSH
27306: LD_INT 34
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 101
27332: PUSH
27333: LD_INT 102
27335: PUSH
27336: LD_INT 103
27338: PUSH
27339: LD_INT 106
27341: PUSH
27342: LD_INT 108
27344: PUSH
27345: LD_INT 112
27347: PUSH
27348: LD_INT 113
27350: PUSH
27351: LD_INT 114
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: ST_TO_ADDR
27368: GO 27963
27370: LD_INT 17
27372: DOUBLE
27373: EQUAL
27374: IFTRUE 27378
27376: GO 27590
27378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27379: LD_ADDR_VAR 0 1
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: LD_INT 4
27395: PUSH
27396: LD_INT 5
27398: PUSH
27399: LD_INT 6
27401: PUSH
27402: LD_INT 7
27404: PUSH
27405: LD_INT 8
27407: PUSH
27408: LD_INT 9
27410: PUSH
27411: LD_INT 10
27413: PUSH
27414: LD_INT 11
27416: PUSH
27417: LD_INT 12
27419: PUSH
27420: LD_INT 13
27422: PUSH
27423: LD_INT 14
27425: PUSH
27426: LD_INT 15
27428: PUSH
27429: LD_INT 16
27431: PUSH
27432: LD_INT 17
27434: PUSH
27435: LD_INT 18
27437: PUSH
27438: LD_INT 19
27440: PUSH
27441: LD_INT 20
27443: PUSH
27444: LD_INT 21
27446: PUSH
27447: LD_INT 22
27449: PUSH
27450: LD_INT 23
27452: PUSH
27453: LD_INT 24
27455: PUSH
27456: LD_INT 25
27458: PUSH
27459: LD_INT 26
27461: PUSH
27462: LD_INT 27
27464: PUSH
27465: LD_INT 28
27467: PUSH
27468: LD_INT 29
27470: PUSH
27471: LD_INT 30
27473: PUSH
27474: LD_INT 31
27476: PUSH
27477: LD_INT 32
27479: PUSH
27480: LD_INT 33
27482: PUSH
27483: LD_INT 34
27485: PUSH
27486: LD_INT 36
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 101
27528: PUSH
27529: LD_INT 102
27531: PUSH
27532: LD_INT 103
27534: PUSH
27535: LD_INT 104
27537: PUSH
27538: LD_INT 105
27540: PUSH
27541: LD_INT 106
27543: PUSH
27544: LD_INT 107
27546: PUSH
27547: LD_INT 108
27549: PUSH
27550: LD_INT 109
27552: PUSH
27553: LD_INT 110
27555: PUSH
27556: LD_INT 111
27558: PUSH
27559: LD_INT 112
27561: PUSH
27562: LD_INT 113
27564: PUSH
27565: LD_INT 114
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: ST_TO_ADDR
27588: GO 27963
27590: LD_INT 18
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 27734
27598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 5
27612: PUSH
27613: LD_INT 7
27615: PUSH
27616: LD_INT 11
27618: PUSH
27619: LD_INT 12
27621: PUSH
27622: LD_INT 15
27624: PUSH
27625: LD_INT 16
27627: PUSH
27628: LD_INT 20
27630: PUSH
27631: LD_INT 21
27633: PUSH
27634: LD_INT 22
27636: PUSH
27637: LD_INT 23
27639: PUSH
27640: LD_INT 25
27642: PUSH
27643: LD_INT 26
27645: PUSH
27646: LD_INT 30
27648: PUSH
27649: LD_INT 31
27651: PUSH
27652: LD_INT 32
27654: PUSH
27655: LD_INT 33
27657: PUSH
27658: LD_INT 34
27660: PUSH
27661: LD_INT 35
27663: PUSH
27664: LD_INT 36
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 101
27692: PUSH
27693: LD_INT 102
27695: PUSH
27696: LD_INT 103
27698: PUSH
27699: LD_INT 106
27701: PUSH
27702: LD_INT 108
27704: PUSH
27705: LD_INT 112
27707: PUSH
27708: LD_INT 113
27710: PUSH
27711: LD_INT 114
27713: PUSH
27714: LD_INT 115
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: ST_TO_ADDR
27732: GO 27963
27734: LD_INT 19
27736: DOUBLE
27737: EQUAL
27738: IFTRUE 27742
27740: GO 27962
27742: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27743: LD_ADDR_VAR 0 1
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: LD_INT 4
27759: PUSH
27760: LD_INT 5
27762: PUSH
27763: LD_INT 6
27765: PUSH
27766: LD_INT 7
27768: PUSH
27769: LD_INT 8
27771: PUSH
27772: LD_INT 9
27774: PUSH
27775: LD_INT 10
27777: PUSH
27778: LD_INT 11
27780: PUSH
27781: LD_INT 12
27783: PUSH
27784: LD_INT 13
27786: PUSH
27787: LD_INT 14
27789: PUSH
27790: LD_INT 15
27792: PUSH
27793: LD_INT 16
27795: PUSH
27796: LD_INT 17
27798: PUSH
27799: LD_INT 18
27801: PUSH
27802: LD_INT 19
27804: PUSH
27805: LD_INT 20
27807: PUSH
27808: LD_INT 21
27810: PUSH
27811: LD_INT 22
27813: PUSH
27814: LD_INT 23
27816: PUSH
27817: LD_INT 24
27819: PUSH
27820: LD_INT 25
27822: PUSH
27823: LD_INT 26
27825: PUSH
27826: LD_INT 27
27828: PUSH
27829: LD_INT 28
27831: PUSH
27832: LD_INT 29
27834: PUSH
27835: LD_INT 30
27837: PUSH
27838: LD_INT 31
27840: PUSH
27841: LD_INT 32
27843: PUSH
27844: LD_INT 33
27846: PUSH
27847: LD_INT 34
27849: PUSH
27850: LD_INT 35
27852: PUSH
27853: LD_INT 36
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 101
27896: PUSH
27897: LD_INT 102
27899: PUSH
27900: LD_INT 103
27902: PUSH
27903: LD_INT 104
27905: PUSH
27906: LD_INT 105
27908: PUSH
27909: LD_INT 106
27911: PUSH
27912: LD_INT 107
27914: PUSH
27915: LD_INT 108
27917: PUSH
27918: LD_INT 109
27920: PUSH
27921: LD_INT 110
27923: PUSH
27924: LD_INT 111
27926: PUSH
27927: LD_INT 112
27929: PUSH
27930: LD_INT 113
27932: PUSH
27933: LD_INT 114
27935: PUSH
27936: LD_INT 115
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: ST_TO_ADDR
27960: GO 27963
27962: POP
// end else
27963: GO 28000
// if campaign_id = 5 then
27965: LD_OWVAR 69
27969: PUSH
27970: LD_INT 5
27972: EQUAL
27973: IFFALSE 28000
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 100
27992: PUSH
27993: EMPTY
27994: LIST
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// end ; if result then
28000: LD_VAR 0 1
28004: IFFALSE 28293
// begin normal :=  ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_STRING 
28013: ST_TO_ADDR
// hardcore :=  ;
28014: LD_ADDR_VAR 0 4
28018: PUSH
28019: LD_STRING 
28021: ST_TO_ADDR
// for i = 1 to normalCounter do
28022: LD_ADDR_VAR 0 5
28026: PUSH
28027: DOUBLE
28028: LD_INT 1
28030: DEC
28031: ST_TO_ADDR
28032: LD_EXP 57
28036: PUSH
28037: FOR_TO
28038: IFFALSE 28139
// begin tmp := 0 ;
28040: LD_ADDR_VAR 0 2
28044: PUSH
28045: LD_STRING 0
28047: ST_TO_ADDR
// if result [ 1 ] then
28048: LD_VAR 0 1
28052: PUSH
28053: LD_INT 1
28055: ARRAY
28056: IFFALSE 28121
// if result [ 1 ] [ 1 ] = i then
28058: LD_VAR 0 1
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PUSH
28067: LD_INT 1
28069: ARRAY
28070: PUSH
28071: LD_VAR 0 5
28075: EQUAL
28076: IFFALSE 28121
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28078: LD_ADDR_VAR 0 1
28082: PUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 1
28090: PPUSH
28091: LD_VAR 0 1
28095: PUSH
28096: LD_INT 1
28098: ARRAY
28099: PPUSH
28100: LD_INT 1
28102: PPUSH
28103: CALL_OW 3
28107: PPUSH
28108: CALL_OW 1
28112: ST_TO_ADDR
// tmp := 1 ;
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_STRING 1
28120: ST_TO_ADDR
// end ; normal := normal & tmp ;
28121: LD_ADDR_VAR 0 3
28125: PUSH
28126: LD_VAR 0 3
28130: PUSH
28131: LD_VAR 0 2
28135: STR
28136: ST_TO_ADDR
// end ;
28137: GO 28037
28139: POP
28140: POP
// for i = 1 to hardcoreCounter do
28141: LD_ADDR_VAR 0 5
28145: PUSH
28146: DOUBLE
28147: LD_INT 1
28149: DEC
28150: ST_TO_ADDR
28151: LD_EXP 58
28155: PUSH
28156: FOR_TO
28157: IFFALSE 28262
// begin tmp := 0 ;
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: LD_STRING 0
28166: ST_TO_ADDR
// if result [ 2 ] then
28167: LD_VAR 0 1
28171: PUSH
28172: LD_INT 2
28174: ARRAY
28175: IFFALSE 28244
// if result [ 2 ] [ 1 ] = 100 + i then
28177: LD_VAR 0 1
28181: PUSH
28182: LD_INT 2
28184: ARRAY
28185: PUSH
28186: LD_INT 1
28188: ARRAY
28189: PUSH
28190: LD_INT 100
28192: PUSH
28193: LD_VAR 0 5
28197: PLUS
28198: EQUAL
28199: IFFALSE 28244
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28201: LD_ADDR_VAR 0 1
28205: PUSH
28206: LD_VAR 0 1
28210: PPUSH
28211: LD_INT 2
28213: PPUSH
28214: LD_VAR 0 1
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: LD_INT 1
28225: PPUSH
28226: CALL_OW 3
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
// tmp := 1 ;
28236: LD_ADDR_VAR 0 2
28240: PUSH
28241: LD_STRING 1
28243: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28244: LD_ADDR_VAR 0 4
28248: PUSH
28249: LD_VAR 0 4
28253: PUSH
28254: LD_VAR 0 2
28258: STR
28259: ST_TO_ADDR
// end ;
28260: GO 28156
28262: POP
28263: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28264: LD_STRING getStreamItemsFromMission("
28266: PUSH
28267: LD_VAR 0 3
28271: STR
28272: PUSH
28273: LD_STRING ","
28275: STR
28276: PUSH
28277: LD_VAR 0 4
28281: STR
28282: PUSH
28283: LD_STRING ")
28285: STR
28286: PPUSH
28287: CALL_OW 559
// end else
28291: GO 28300
// ToLua ( getStreamItemsFromMission("","") ) ;
28293: LD_STRING getStreamItemsFromMission("","")
28295: PPUSH
28296: CALL_OW 559
// end ;
28300: LD_VAR 0 1
28304: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
28305: LD_VAR 0 2
28309: PUSH
28310: LD_INT 100
28312: EQUAL
28313: IFFALSE 29262
// begin if not StreamModeActive then
28315: LD_EXP 56
28319: NOT
28320: IFFALSE 28330
// StreamModeActive := true ;
28322: LD_ADDR_EXP 56
28326: PUSH
28327: LD_INT 1
28329: ST_TO_ADDR
// if p3 = 0 then
28330: LD_VAR 0 3
28334: PUSH
28335: LD_INT 0
28337: EQUAL
28338: IFFALSE 28344
// InitStreamMode ;
28340: CALL 24565 0 0
// if p3 = 1 then
28344: LD_VAR 0 3
28348: PUSH
28349: LD_INT 1
28351: EQUAL
28352: IFFALSE 28362
// sRocket := true ;
28354: LD_ADDR_EXP 61
28358: PUSH
28359: LD_INT 1
28361: ST_TO_ADDR
// if p3 = 2 then
28362: LD_VAR 0 3
28366: PUSH
28367: LD_INT 2
28369: EQUAL
28370: IFFALSE 28380
// sSpeed := true ;
28372: LD_ADDR_EXP 60
28376: PUSH
28377: LD_INT 1
28379: ST_TO_ADDR
// if p3 = 3 then
28380: LD_VAR 0 3
28384: PUSH
28385: LD_INT 3
28387: EQUAL
28388: IFFALSE 28398
// sEngine := true ;
28390: LD_ADDR_EXP 62
28394: PUSH
28395: LD_INT 1
28397: ST_TO_ADDR
// if p3 = 4 then
28398: LD_VAR 0 3
28402: PUSH
28403: LD_INT 4
28405: EQUAL
28406: IFFALSE 28416
// sSpec := true ;
28408: LD_ADDR_EXP 59
28412: PUSH
28413: LD_INT 1
28415: ST_TO_ADDR
// if p3 = 5 then
28416: LD_VAR 0 3
28420: PUSH
28421: LD_INT 5
28423: EQUAL
28424: IFFALSE 28434
// sLevel := true ;
28426: LD_ADDR_EXP 63
28430: PUSH
28431: LD_INT 1
28433: ST_TO_ADDR
// if p3 = 6 then
28434: LD_VAR 0 3
28438: PUSH
28439: LD_INT 6
28441: EQUAL
28442: IFFALSE 28452
// sArmoury := true ;
28444: LD_ADDR_EXP 64
28448: PUSH
28449: LD_INT 1
28451: ST_TO_ADDR
// if p3 = 7 then
28452: LD_VAR 0 3
28456: PUSH
28457: LD_INT 7
28459: EQUAL
28460: IFFALSE 28470
// sRadar := true ;
28462: LD_ADDR_EXP 65
28466: PUSH
28467: LD_INT 1
28469: ST_TO_ADDR
// if p3 = 8 then
28470: LD_VAR 0 3
28474: PUSH
28475: LD_INT 8
28477: EQUAL
28478: IFFALSE 28488
// sBunker := true ;
28480: LD_ADDR_EXP 66
28484: PUSH
28485: LD_INT 1
28487: ST_TO_ADDR
// if p3 = 9 then
28488: LD_VAR 0 3
28492: PUSH
28493: LD_INT 9
28495: EQUAL
28496: IFFALSE 28506
// sHack := true ;
28498: LD_ADDR_EXP 67
28502: PUSH
28503: LD_INT 1
28505: ST_TO_ADDR
// if p3 = 10 then
28506: LD_VAR 0 3
28510: PUSH
28511: LD_INT 10
28513: EQUAL
28514: IFFALSE 28524
// sFire := true ;
28516: LD_ADDR_EXP 68
28520: PUSH
28521: LD_INT 1
28523: ST_TO_ADDR
// if p3 = 11 then
28524: LD_VAR 0 3
28528: PUSH
28529: LD_INT 11
28531: EQUAL
28532: IFFALSE 28542
// sRefresh := true ;
28534: LD_ADDR_EXP 69
28538: PUSH
28539: LD_INT 1
28541: ST_TO_ADDR
// if p3 = 12 then
28542: LD_VAR 0 3
28546: PUSH
28547: LD_INT 12
28549: EQUAL
28550: IFFALSE 28560
// sExp := true ;
28552: LD_ADDR_EXP 70
28556: PUSH
28557: LD_INT 1
28559: ST_TO_ADDR
// if p3 = 13 then
28560: LD_VAR 0 3
28564: PUSH
28565: LD_INT 13
28567: EQUAL
28568: IFFALSE 28578
// sDepot := true ;
28570: LD_ADDR_EXP 71
28574: PUSH
28575: LD_INT 1
28577: ST_TO_ADDR
// if p3 = 14 then
28578: LD_VAR 0 3
28582: PUSH
28583: LD_INT 14
28585: EQUAL
28586: IFFALSE 28596
// sFlag := true ;
28588: LD_ADDR_EXP 72
28592: PUSH
28593: LD_INT 1
28595: ST_TO_ADDR
// if p3 = 15 then
28596: LD_VAR 0 3
28600: PUSH
28601: LD_INT 15
28603: EQUAL
28604: IFFALSE 28614
// sKamikadze := true ;
28606: LD_ADDR_EXP 80
28610: PUSH
28611: LD_INT 1
28613: ST_TO_ADDR
// if p3 = 16 then
28614: LD_VAR 0 3
28618: PUSH
28619: LD_INT 16
28621: EQUAL
28622: IFFALSE 28632
// sTroll := true ;
28624: LD_ADDR_EXP 81
28628: PUSH
28629: LD_INT 1
28631: ST_TO_ADDR
// if p3 = 17 then
28632: LD_VAR 0 3
28636: PUSH
28637: LD_INT 17
28639: EQUAL
28640: IFFALSE 28650
// sSlow := true ;
28642: LD_ADDR_EXP 82
28646: PUSH
28647: LD_INT 1
28649: ST_TO_ADDR
// if p3 = 18 then
28650: LD_VAR 0 3
28654: PUSH
28655: LD_INT 18
28657: EQUAL
28658: IFFALSE 28668
// sLack := true ;
28660: LD_ADDR_EXP 83
28664: PUSH
28665: LD_INT 1
28667: ST_TO_ADDR
// if p3 = 19 then
28668: LD_VAR 0 3
28672: PUSH
28673: LD_INT 19
28675: EQUAL
28676: IFFALSE 28686
// sTank := true ;
28678: LD_ADDR_EXP 85
28682: PUSH
28683: LD_INT 1
28685: ST_TO_ADDR
// if p3 = 20 then
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 20
28693: EQUAL
28694: IFFALSE 28704
// sRemote := true ;
28696: LD_ADDR_EXP 86
28700: PUSH
28701: LD_INT 1
28703: ST_TO_ADDR
// if p3 = 21 then
28704: LD_VAR 0 3
28708: PUSH
28709: LD_INT 21
28711: EQUAL
28712: IFFALSE 28722
// sPowell := true ;
28714: LD_ADDR_EXP 87
28718: PUSH
28719: LD_INT 1
28721: ST_TO_ADDR
// if p3 = 22 then
28722: LD_VAR 0 3
28726: PUSH
28727: LD_INT 22
28729: EQUAL
28730: IFFALSE 28740
// sTeleport := true ;
28732: LD_ADDR_EXP 90
28736: PUSH
28737: LD_INT 1
28739: ST_TO_ADDR
// if p3 = 23 then
28740: LD_VAR 0 3
28744: PUSH
28745: LD_INT 23
28747: EQUAL
28748: IFFALSE 28758
// sOilTower := true ;
28750: LD_ADDR_EXP 92
28754: PUSH
28755: LD_INT 1
28757: ST_TO_ADDR
// if p3 = 24 then
28758: LD_VAR 0 3
28762: PUSH
28763: LD_INT 24
28765: EQUAL
28766: IFFALSE 28776
// sShovel := true ;
28768: LD_ADDR_EXP 93
28772: PUSH
28773: LD_INT 1
28775: ST_TO_ADDR
// if p3 = 25 then
28776: LD_VAR 0 3
28780: PUSH
28781: LD_INT 25
28783: EQUAL
28784: IFFALSE 28794
// sSheik := true ;
28786: LD_ADDR_EXP 94
28790: PUSH
28791: LD_INT 1
28793: ST_TO_ADDR
// if p3 = 26 then
28794: LD_VAR 0 3
28798: PUSH
28799: LD_INT 26
28801: EQUAL
28802: IFFALSE 28812
// sEarthquake := true ;
28804: LD_ADDR_EXP 96
28808: PUSH
28809: LD_INT 1
28811: ST_TO_ADDR
// if p3 = 27 then
28812: LD_VAR 0 3
28816: PUSH
28817: LD_INT 27
28819: EQUAL
28820: IFFALSE 28830
// sAI := true ;
28822: LD_ADDR_EXP 97
28826: PUSH
28827: LD_INT 1
28829: ST_TO_ADDR
// if p3 = 28 then
28830: LD_VAR 0 3
28834: PUSH
28835: LD_INT 28
28837: EQUAL
28838: IFFALSE 28848
// sCargo := true ;
28840: LD_ADDR_EXP 100
28844: PUSH
28845: LD_INT 1
28847: ST_TO_ADDR
// if p3 = 29 then
28848: LD_VAR 0 3
28852: PUSH
28853: LD_INT 29
28855: EQUAL
28856: IFFALSE 28866
// sDLaser := true ;
28858: LD_ADDR_EXP 101
28862: PUSH
28863: LD_INT 1
28865: ST_TO_ADDR
// if p3 = 30 then
28866: LD_VAR 0 3
28870: PUSH
28871: LD_INT 30
28873: EQUAL
28874: IFFALSE 28884
// sExchange := true ;
28876: LD_ADDR_EXP 102
28880: PUSH
28881: LD_INT 1
28883: ST_TO_ADDR
// if p3 = 31 then
28884: LD_VAR 0 3
28888: PUSH
28889: LD_INT 31
28891: EQUAL
28892: IFFALSE 28902
// sFac := true ;
28894: LD_ADDR_EXP 103
28898: PUSH
28899: LD_INT 1
28901: ST_TO_ADDR
// if p3 = 32 then
28902: LD_VAR 0 3
28906: PUSH
28907: LD_INT 32
28909: EQUAL
28910: IFFALSE 28920
// sPower := true ;
28912: LD_ADDR_EXP 104
28916: PUSH
28917: LD_INT 1
28919: ST_TO_ADDR
// if p3 = 33 then
28920: LD_VAR 0 3
28924: PUSH
28925: LD_INT 33
28927: EQUAL
28928: IFFALSE 28938
// sRandom := true ;
28930: LD_ADDR_EXP 105
28934: PUSH
28935: LD_INT 1
28937: ST_TO_ADDR
// if p3 = 34 then
28938: LD_VAR 0 3
28942: PUSH
28943: LD_INT 34
28945: EQUAL
28946: IFFALSE 28956
// sShield := true ;
28948: LD_ADDR_EXP 106
28952: PUSH
28953: LD_INT 1
28955: ST_TO_ADDR
// if p3 = 35 then
28956: LD_VAR 0 3
28960: PUSH
28961: LD_INT 35
28963: EQUAL
28964: IFFALSE 28974
// sTime := true ;
28966: LD_ADDR_EXP 107
28970: PUSH
28971: LD_INT 1
28973: ST_TO_ADDR
// if p3 = 36 then
28974: LD_VAR 0 3
28978: PUSH
28979: LD_INT 36
28981: EQUAL
28982: IFFALSE 28992
// sTools := true ;
28984: LD_ADDR_EXP 108
28988: PUSH
28989: LD_INT 1
28991: ST_TO_ADDR
// if p3 = 101 then
28992: LD_VAR 0 3
28996: PUSH
28997: LD_INT 101
28999: EQUAL
29000: IFFALSE 29010
// sSold := true ;
29002: LD_ADDR_EXP 73
29006: PUSH
29007: LD_INT 1
29009: ST_TO_ADDR
// if p3 = 102 then
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 102
29017: EQUAL
29018: IFFALSE 29028
// sDiff := true ;
29020: LD_ADDR_EXP 74
29024: PUSH
29025: LD_INT 1
29027: ST_TO_ADDR
// if p3 = 103 then
29028: LD_VAR 0 3
29032: PUSH
29033: LD_INT 103
29035: EQUAL
29036: IFFALSE 29046
// sFog := true ;
29038: LD_ADDR_EXP 77
29042: PUSH
29043: LD_INT 1
29045: ST_TO_ADDR
// if p3 = 104 then
29046: LD_VAR 0 3
29050: PUSH
29051: LD_INT 104
29053: EQUAL
29054: IFFALSE 29064
// sReset := true ;
29056: LD_ADDR_EXP 78
29060: PUSH
29061: LD_INT 1
29063: ST_TO_ADDR
// if p3 = 105 then
29064: LD_VAR 0 3
29068: PUSH
29069: LD_INT 105
29071: EQUAL
29072: IFFALSE 29082
// sSun := true ;
29074: LD_ADDR_EXP 79
29078: PUSH
29079: LD_INT 1
29081: ST_TO_ADDR
// if p3 = 106 then
29082: LD_VAR 0 3
29086: PUSH
29087: LD_INT 106
29089: EQUAL
29090: IFFALSE 29100
// sTiger := true ;
29092: LD_ADDR_EXP 75
29096: PUSH
29097: LD_INT 1
29099: ST_TO_ADDR
// if p3 = 107 then
29100: LD_VAR 0 3
29104: PUSH
29105: LD_INT 107
29107: EQUAL
29108: IFFALSE 29118
// sBomb := true ;
29110: LD_ADDR_EXP 76
29114: PUSH
29115: LD_INT 1
29117: ST_TO_ADDR
// if p3 = 108 then
29118: LD_VAR 0 3
29122: PUSH
29123: LD_INT 108
29125: EQUAL
29126: IFFALSE 29136
// sWound := true ;
29128: LD_ADDR_EXP 84
29132: PUSH
29133: LD_INT 1
29135: ST_TO_ADDR
// if p3 = 109 then
29136: LD_VAR 0 3
29140: PUSH
29141: LD_INT 109
29143: EQUAL
29144: IFFALSE 29154
// sBetray := true ;
29146: LD_ADDR_EXP 88
29150: PUSH
29151: LD_INT 1
29153: ST_TO_ADDR
// if p3 = 110 then
29154: LD_VAR 0 3
29158: PUSH
29159: LD_INT 110
29161: EQUAL
29162: IFFALSE 29172
// sContamin := true ;
29164: LD_ADDR_EXP 89
29168: PUSH
29169: LD_INT 1
29171: ST_TO_ADDR
// if p3 = 111 then
29172: LD_VAR 0 3
29176: PUSH
29177: LD_INT 111
29179: EQUAL
29180: IFFALSE 29190
// sOil := true ;
29182: LD_ADDR_EXP 91
29186: PUSH
29187: LD_INT 1
29189: ST_TO_ADDR
// if p3 = 112 then
29190: LD_VAR 0 3
29194: PUSH
29195: LD_INT 112
29197: EQUAL
29198: IFFALSE 29208
// sStu := true ;
29200: LD_ADDR_EXP 95
29204: PUSH
29205: LD_INT 1
29207: ST_TO_ADDR
// if p3 = 113 then
29208: LD_VAR 0 3
29212: PUSH
29213: LD_INT 113
29215: EQUAL
29216: IFFALSE 29226
// sBazooka := true ;
29218: LD_ADDR_EXP 98
29222: PUSH
29223: LD_INT 1
29225: ST_TO_ADDR
// if p3 = 114 then
29226: LD_VAR 0 3
29230: PUSH
29231: LD_INT 114
29233: EQUAL
29234: IFFALSE 29244
// sMortar := true ;
29236: LD_ADDR_EXP 99
29240: PUSH
29241: LD_INT 1
29243: ST_TO_ADDR
// if p3 = 115 then
29244: LD_VAR 0 3
29248: PUSH
29249: LD_INT 115
29251: EQUAL
29252: IFFALSE 29262
// sRanger := true ;
29254: LD_ADDR_EXP 109
29258: PUSH
29259: LD_INT 1
29261: ST_TO_ADDR
// end ; end ;
29262: PPOPN 6
29264: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29265: LD_EXP 56
29269: PUSH
29270: LD_EXP 61
29274: AND
29275: IFFALSE 29399
29277: GO 29279
29279: DISABLE
29280: LD_INT 0
29282: PPUSH
29283: PPUSH
// begin enable ;
29284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: LD_INT 34
29307: PUSH
29308: LD_INT 7
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 34
29317: PUSH
29318: LD_INT 45
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 34
29327: PUSH
29328: LD_INT 28
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 34
29337: PUSH
29338: LD_INT 47
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PPUSH
29356: CALL_OW 69
29360: ST_TO_ADDR
// if not tmp then
29361: LD_VAR 0 2
29365: NOT
29366: IFFALSE 29370
// exit ;
29368: GO 29399
// for i in tmp do
29370: LD_ADDR_VAR 0 1
29374: PUSH
29375: LD_VAR 0 2
29379: PUSH
29380: FOR_IN
29381: IFFALSE 29397
// begin SetLives ( i , 0 ) ;
29383: LD_VAR 0 1
29387: PPUSH
29388: LD_INT 0
29390: PPUSH
29391: CALL_OW 234
// end ;
29395: GO 29380
29397: POP
29398: POP
// end ;
29399: PPOPN 2
29401: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29402: LD_EXP 56
29406: PUSH
29407: LD_EXP 62
29411: AND
29412: IFFALSE 29496
29414: GO 29416
29416: DISABLE
29417: LD_INT 0
29419: PPUSH
29420: PPUSH
// begin enable ;
29421: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29422: LD_ADDR_VAR 0 2
29426: PUSH
29427: LD_INT 22
29429: PUSH
29430: LD_OWVAR 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 32
29441: PUSH
29442: LD_INT 3
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 69
29457: ST_TO_ADDR
// if not tmp then
29458: LD_VAR 0 2
29462: NOT
29463: IFFALSE 29467
// exit ;
29465: GO 29496
// for i in tmp do
29467: LD_ADDR_VAR 0 1
29471: PUSH
29472: LD_VAR 0 2
29476: PUSH
29477: FOR_IN
29478: IFFALSE 29494
// begin SetLives ( i , 0 ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_INT 0
29487: PPUSH
29488: CALL_OW 234
// end ;
29492: GO 29477
29494: POP
29495: POP
// end ;
29496: PPOPN 2
29498: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29499: LD_EXP 56
29503: PUSH
29504: LD_EXP 59
29508: AND
29509: IFFALSE 29602
29511: GO 29513
29513: DISABLE
29514: LD_INT 0
29516: PPUSH
// begin enable ;
29517: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29518: LD_ADDR_VAR 0 1
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 25
29540: PUSH
29541: LD_INT 5
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 25
29550: PUSH
29551: LD_INT 9
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 25
29560: PUSH
29561: LD_INT 8
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: PUSH
29583: FOR_IN
29584: IFFALSE 29600
// begin SetClass ( i , 1 ) ;
29586: LD_VAR 0 1
29590: PPUSH
29591: LD_INT 1
29593: PPUSH
29594: CALL_OW 336
// end ;
29598: GO 29583
29600: POP
29601: POP
// end ;
29602: PPOPN 1
29604: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29605: LD_EXP 56
29609: PUSH
29610: LD_EXP 60
29614: AND
29615: PUSH
29616: LD_OWVAR 65
29620: PUSH
29621: LD_INT 7
29623: LESS
29624: AND
29625: IFFALSE 29639
29627: GO 29629
29629: DISABLE
// begin enable ;
29630: ENABLE
// game_speed := 7 ;
29631: LD_ADDR_OWVAR 65
29635: PUSH
29636: LD_INT 7
29638: ST_TO_ADDR
// end ;
29639: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29640: LD_EXP 56
29644: PUSH
29645: LD_EXP 63
29649: AND
29650: IFFALSE 29852
29652: GO 29654
29654: DISABLE
29655: LD_INT 0
29657: PPUSH
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29660: LD_ADDR_VAR 0 3
29664: PUSH
29665: LD_INT 81
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PPUSH
29691: CALL_OW 69
29695: ST_TO_ADDR
// if not tmp then
29696: LD_VAR 0 3
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 29852
// if tmp > 5 then
29705: LD_VAR 0 3
29709: PUSH
29710: LD_INT 5
29712: GREATER
29713: IFFALSE 29725
// k := 5 else
29715: LD_ADDR_VAR 0 2
29719: PUSH
29720: LD_INT 5
29722: ST_TO_ADDR
29723: GO 29735
// k := tmp ;
29725: LD_ADDR_VAR 0 2
29729: PUSH
29730: LD_VAR 0 3
29734: ST_TO_ADDR
// for i := 1 to k do
29735: LD_ADDR_VAR 0 1
29739: PUSH
29740: DOUBLE
29741: LD_INT 1
29743: DEC
29744: ST_TO_ADDR
29745: LD_VAR 0 2
29749: PUSH
29750: FOR_TO
29751: IFFALSE 29850
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29753: LD_VAR 0 3
29757: PUSH
29758: LD_VAR 0 1
29762: ARRAY
29763: PPUSH
29764: LD_VAR 0 1
29768: PUSH
29769: LD_INT 4
29771: MOD
29772: PUSH
29773: LD_INT 1
29775: PLUS
29776: PPUSH
29777: CALL_OW 259
29781: PUSH
29782: LD_INT 10
29784: LESS
29785: IFFALSE 29848
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29787: LD_VAR 0 3
29791: PUSH
29792: LD_VAR 0 1
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 1
29802: PUSH
29803: LD_INT 4
29805: MOD
29806: PUSH
29807: LD_INT 1
29809: PLUS
29810: PPUSH
29811: LD_VAR 0 3
29815: PUSH
29816: LD_VAR 0 1
29820: ARRAY
29821: PPUSH
29822: LD_VAR 0 1
29826: PUSH
29827: LD_INT 4
29829: MOD
29830: PUSH
29831: LD_INT 1
29833: PLUS
29834: PPUSH
29835: CALL_OW 259
29839: PUSH
29840: LD_INT 1
29842: PLUS
29843: PPUSH
29844: CALL_OW 237
29848: GO 29750
29850: POP
29851: POP
// end ;
29852: PPOPN 3
29854: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29855: LD_EXP 56
29859: PUSH
29860: LD_EXP 64
29864: AND
29865: IFFALSE 29885
29867: GO 29869
29869: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29870: LD_INT 4
29872: PPUSH
29873: LD_OWVAR 2
29877: PPUSH
29878: LD_INT 0
29880: PPUSH
29881: CALL_OW 324
29885: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29886: LD_EXP 56
29890: PUSH
29891: LD_EXP 93
29895: AND
29896: IFFALSE 29916
29898: GO 29900
29900: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29901: LD_INT 19
29903: PPUSH
29904: LD_OWVAR 2
29908: PPUSH
29909: LD_INT 0
29911: PPUSH
29912: CALL_OW 324
29916: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29917: LD_EXP 56
29921: PUSH
29922: LD_EXP 65
29926: AND
29927: IFFALSE 30029
29929: GO 29931
29931: DISABLE
29932: LD_INT 0
29934: PPUSH
29935: PPUSH
// begin enable ;
29936: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29937: LD_ADDR_VAR 0 2
29941: PUSH
29942: LD_INT 22
29944: PUSH
29945: LD_OWVAR 2
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: LD_INT 34
29959: PUSH
29960: LD_INT 11
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 34
29969: PUSH
29970: LD_INT 30
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PPUSH
29986: CALL_OW 69
29990: ST_TO_ADDR
// if not tmp then
29991: LD_VAR 0 2
29995: NOT
29996: IFFALSE 30000
// exit ;
29998: GO 30029
// for i in tmp do
30000: LD_ADDR_VAR 0 1
30004: PUSH
30005: LD_VAR 0 2
30009: PUSH
30010: FOR_IN
30011: IFFALSE 30027
// begin SetLives ( i , 0 ) ;
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_INT 0
30020: PPUSH
30021: CALL_OW 234
// end ;
30025: GO 30010
30027: POP
30028: POP
// end ;
30029: PPOPN 2
30031: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30032: LD_EXP 56
30036: PUSH
30037: LD_EXP 66
30041: AND
30042: IFFALSE 30062
30044: GO 30046
30046: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30047: LD_INT 32
30049: PPUSH
30050: LD_OWVAR 2
30054: PPUSH
30055: LD_INT 0
30057: PPUSH
30058: CALL_OW 324
30062: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30063: LD_EXP 56
30067: PUSH
30068: LD_EXP 67
30072: AND
30073: IFFALSE 30254
30075: GO 30077
30077: DISABLE
30078: LD_INT 0
30080: PPUSH
30081: PPUSH
30082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30083: LD_ADDR_VAR 0 2
30087: PUSH
30088: LD_INT 22
30090: PUSH
30091: LD_OWVAR 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 33
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: ST_TO_ADDR
// if not tmp then
30119: LD_VAR 0 2
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30254
// side := 0 ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_INT 0
30135: ST_TO_ADDR
// for i := 1 to 8 do
30136: LD_ADDR_VAR 0 1
30140: PUSH
30141: DOUBLE
30142: LD_INT 1
30144: DEC
30145: ST_TO_ADDR
30146: LD_INT 8
30148: PUSH
30149: FOR_TO
30150: IFFALSE 30198
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30152: LD_OWVAR 2
30156: PUSH
30157: LD_VAR 0 1
30161: NONEQUAL
30162: PUSH
30163: LD_OWVAR 2
30167: PPUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 81
30177: PUSH
30178: LD_INT 2
30180: EQUAL
30181: AND
30182: IFFALSE 30196
// begin side := i ;
30184: LD_ADDR_VAR 0 3
30188: PUSH
30189: LD_VAR 0 1
30193: ST_TO_ADDR
// break ;
30194: GO 30198
// end ;
30196: GO 30149
30198: POP
30199: POP
// if not side then
30200: LD_VAR 0 3
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30254
// for i := 1 to tmp do
30209: LD_ADDR_VAR 0 1
30213: PUSH
30214: DOUBLE
30215: LD_INT 1
30217: DEC
30218: ST_TO_ADDR
30219: LD_VAR 0 2
30223: PUSH
30224: FOR_TO
30225: IFFALSE 30252
// if Prob ( 60 ) then
30227: LD_INT 60
30229: PPUSH
30230: CALL_OW 13
30234: IFFALSE 30250
// SetSide ( i , side ) ;
30236: LD_VAR 0 1
30240: PPUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL_OW 235
30250: GO 30224
30252: POP
30253: POP
// end ;
30254: PPOPN 3
30256: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30257: LD_EXP 56
30261: PUSH
30262: LD_EXP 69
30266: AND
30267: IFFALSE 30386
30269: GO 30271
30271: DISABLE
30272: LD_INT 0
30274: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30275: LD_ADDR_VAR 0 1
30279: PUSH
30280: LD_INT 22
30282: PUSH
30283: LD_OWVAR 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 21
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 23
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 69
30328: PUSH
30329: FOR_IN
30330: IFFALSE 30384
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30332: LD_VAR 0 1
30336: PPUSH
30337: CALL_OW 257
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 4
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: IN
30360: IFFALSE 30382
// SetClass ( un , rand ( 1 , 4 ) ) ;
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_INT 1
30369: PPUSH
30370: LD_INT 4
30372: PPUSH
30373: CALL_OW 12
30377: PPUSH
30378: CALL_OW 336
30382: GO 30329
30384: POP
30385: POP
// end ;
30386: PPOPN 1
30388: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30389: LD_EXP 56
30393: PUSH
30394: LD_EXP 68
30398: AND
30399: IFFALSE 30478
30401: GO 30403
30403: DISABLE
30404: LD_INT 0
30406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30407: LD_ADDR_VAR 0 1
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 21
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 1
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30452: LD_VAR 0 1
30456: PUSH
30457: LD_INT 1
30459: PPUSH
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL_OW 12
30469: ARRAY
30470: PPUSH
30471: LD_INT 100
30473: PPUSH
30474: CALL_OW 234
// end ;
30478: PPOPN 1
30480: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30481: LD_EXP 56
30485: PUSH
30486: LD_EXP 70
30490: AND
30491: IFFALSE 30589
30493: GO 30495
30495: DISABLE
30496: LD_INT 0
30498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30499: LD_ADDR_VAR 0 1
30503: PUSH
30504: LD_INT 22
30506: PUSH
30507: LD_OWVAR 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 21
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 69
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 1
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 30589
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30544: LD_VAR 0 1
30548: PUSH
30549: LD_INT 1
30551: PPUSH
30552: LD_VAR 0 1
30556: PPUSH
30557: CALL_OW 12
30561: ARRAY
30562: PPUSH
30563: LD_INT 1
30565: PPUSH
30566: LD_INT 4
30568: PPUSH
30569: CALL_OW 12
30573: PPUSH
30574: LD_INT 3000
30576: PPUSH
30577: LD_INT 9000
30579: PPUSH
30580: CALL_OW 12
30584: PPUSH
30585: CALL_OW 492
// end ;
30589: PPOPN 1
30591: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30592: LD_EXP 56
30596: PUSH
30597: LD_EXP 71
30601: AND
30602: IFFALSE 30622
30604: GO 30606
30606: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30607: LD_INT 1
30609: PPUSH
30610: LD_OWVAR 2
30614: PPUSH
30615: LD_INT 0
30617: PPUSH
30618: CALL_OW 324
30622: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30623: LD_EXP 56
30627: PUSH
30628: LD_EXP 72
30632: AND
30633: IFFALSE 30716
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30642: LD_ADDR_VAR 0 2
30646: PUSH
30647: LD_INT 22
30649: PUSH
30650: LD_OWVAR 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 21
30661: PUSH
30662: LD_INT 3
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: ST_TO_ADDR
// if not tmp then
30678: LD_VAR 0 2
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 30716
// for i in tmp do
30687: LD_ADDR_VAR 0 1
30691: PUSH
30692: LD_VAR 0 2
30696: PUSH
30697: FOR_IN
30698: IFFALSE 30714
// SetBLevel ( i , 10 ) ;
30700: LD_VAR 0 1
30704: PPUSH
30705: LD_INT 10
30707: PPUSH
30708: CALL_OW 241
30712: GO 30697
30714: POP
30715: POP
// end ;
30716: PPOPN 2
30718: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30719: LD_EXP 56
30723: PUSH
30724: LD_EXP 73
30728: AND
30729: IFFALSE 30840
30731: GO 30733
30733: DISABLE
30734: LD_INT 0
30736: PPUSH
30737: PPUSH
30738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30739: LD_ADDR_VAR 0 3
30743: PUSH
30744: LD_INT 22
30746: PUSH
30747: LD_OWVAR 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 25
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: ST_TO_ADDR
// if not tmp then
30775: LD_VAR 0 3
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30840
// un := tmp [ rand ( 1 , tmp ) ] ;
30784: LD_ADDR_VAR 0 2
30788: PUSH
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 1
30796: PPUSH
30797: LD_VAR 0 3
30801: PPUSH
30802: CALL_OW 12
30806: ARRAY
30807: ST_TO_ADDR
// if Crawls ( un ) then
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 318
30817: IFFALSE 30828
// ComWalk ( un ) ;
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30828: LD_VAR 0 2
30832: PPUSH
30833: LD_INT 5
30835: PPUSH
30836: CALL_OW 336
// end ;
30840: PPOPN 3
30842: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30843: LD_EXP 56
30847: PUSH
30848: LD_EXP 74
30852: AND
30853: PUSH
30854: LD_OWVAR 67
30858: PUSH
30859: LD_INT 3
30861: LESS
30862: AND
30863: IFFALSE 30882
30865: GO 30867
30867: DISABLE
// Difficulty := Difficulty + 1 ;
30868: LD_ADDR_OWVAR 67
30872: PUSH
30873: LD_OWVAR 67
30877: PUSH
30878: LD_INT 1
30880: PLUS
30881: ST_TO_ADDR
30882: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30883: LD_EXP 56
30887: PUSH
30888: LD_EXP 75
30892: AND
30893: IFFALSE 30996
30895: GO 30897
30897: DISABLE
30898: LD_INT 0
30900: PPUSH
// begin for i := 1 to 5 do
30901: LD_ADDR_VAR 0 1
30905: PUSH
30906: DOUBLE
30907: LD_INT 1
30909: DEC
30910: ST_TO_ADDR
30911: LD_INT 5
30913: PUSH
30914: FOR_TO
30915: IFFALSE 30994
// begin uc_nation := nation_nature ;
30917: LD_ADDR_OWVAR 21
30921: PUSH
30922: LD_INT 0
30924: ST_TO_ADDR
// uc_side := 0 ;
30925: LD_ADDR_OWVAR 20
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30933: LD_ADDR_OWVAR 29
30937: PUSH
30938: LD_INT 12
30940: PUSH
30941: LD_INT 12
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// hc_agressivity := 20 ;
30948: LD_ADDR_OWVAR 35
30952: PUSH
30953: LD_INT 20
30955: ST_TO_ADDR
// hc_class := class_tiger ;
30956: LD_ADDR_OWVAR 28
30960: PUSH
30961: LD_INT 14
30963: ST_TO_ADDR
// hc_gallery :=  ;
30964: LD_ADDR_OWVAR 33
30968: PUSH
30969: LD_STRING 
30971: ST_TO_ADDR
// hc_name :=  ;
30972: LD_ADDR_OWVAR 26
30976: PUSH
30977: LD_STRING 
30979: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30980: CALL_OW 44
30984: PPUSH
30985: LD_INT 0
30987: PPUSH
30988: CALL_OW 51
// end ;
30992: GO 30914
30994: POP
30995: POP
// end ;
30996: PPOPN 1
30998: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30999: LD_EXP 56
31003: PUSH
31004: LD_EXP 76
31008: AND
31009: IFFALSE 31018
31011: GO 31013
31013: DISABLE
// StreamSibBomb ;
31014: CALL 31019 0 0
31018: END
// export function StreamSibBomb ; var i , x , y ; begin
31019: LD_INT 0
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
// result := false ;
31025: LD_ADDR_VAR 0 1
31029: PUSH
31030: LD_INT 0
31032: ST_TO_ADDR
// for i := 1 to 16 do
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: DOUBLE
31039: LD_INT 1
31041: DEC
31042: ST_TO_ADDR
31043: LD_INT 16
31045: PUSH
31046: FOR_TO
31047: IFFALSE 31246
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31049: LD_ADDR_VAR 0 3
31053: PUSH
31054: LD_INT 10
31056: PUSH
31057: LD_INT 20
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 40
31065: PUSH
31066: LD_INT 50
31068: PUSH
31069: LD_INT 60
31071: PUSH
31072: LD_INT 70
31074: PUSH
31075: LD_INT 80
31077: PUSH
31078: LD_INT 90
31080: PUSH
31081: LD_INT 100
31083: PUSH
31084: LD_INT 110
31086: PUSH
31087: LD_INT 120
31089: PUSH
31090: LD_INT 130
31092: PUSH
31093: LD_INT 140
31095: PUSH
31096: LD_INT 150
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: PPUSH
31119: LD_INT 15
31121: PPUSH
31122: CALL_OW 12
31126: ARRAY
31127: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31128: LD_ADDR_VAR 0 4
31132: PUSH
31133: LD_INT 10
31135: PUSH
31136: LD_INT 20
31138: PUSH
31139: LD_INT 30
31141: PUSH
31142: LD_INT 40
31144: PUSH
31145: LD_INT 50
31147: PUSH
31148: LD_INT 60
31150: PUSH
31151: LD_INT 70
31153: PUSH
31154: LD_INT 80
31156: PUSH
31157: LD_INT 90
31159: PUSH
31160: LD_INT 100
31162: PUSH
31163: LD_INT 110
31165: PUSH
31166: LD_INT 120
31168: PUSH
31169: LD_INT 130
31171: PUSH
31172: LD_INT 140
31174: PUSH
31175: LD_INT 150
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PPUSH
31198: LD_INT 15
31200: PPUSH
31201: CALL_OW 12
31205: ARRAY
31206: ST_TO_ADDR
// if ValidHex ( x , y ) then
31207: LD_VAR 0 3
31211: PPUSH
31212: LD_VAR 0 4
31216: PPUSH
31217: CALL_OW 488
31221: IFFALSE 31244
// begin result := [ x , y ] ;
31223: LD_ADDR_VAR 0 1
31227: PUSH
31228: LD_VAR 0 3
31232: PUSH
31233: LD_VAR 0 4
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// break ;
31242: GO 31246
// end ; end ;
31244: GO 31046
31246: POP
31247: POP
// if result then
31248: LD_VAR 0 1
31252: IFFALSE 31312
// begin ToLua ( playSibBomb() ) ;
31254: LD_STRING playSibBomb()
31256: PPUSH
31257: CALL_OW 559
// wait ( 0 0$14 ) ;
31261: LD_INT 490
31263: PPUSH
31264: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31268: LD_VAR 0 1
31272: PUSH
31273: LD_INT 1
31275: ARRAY
31276: PPUSH
31277: LD_VAR 0 1
31281: PUSH
31282: LD_INT 2
31284: ARRAY
31285: PPUSH
31286: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31290: LD_VAR 0 1
31294: PUSH
31295: LD_INT 1
31297: ARRAY
31298: PPUSH
31299: LD_VAR 0 1
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: PPUSH
31308: CALL_OW 429
// end ; end ;
31312: LD_VAR 0 1
31316: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31317: LD_EXP 56
31321: PUSH
31322: LD_EXP 78
31326: AND
31327: IFFALSE 31339
31329: GO 31331
31331: DISABLE
// YouLost (  ) ;
31332: LD_STRING 
31334: PPUSH
31335: CALL_OW 104
31339: END
// every 0 0$1 trigger StreamModeActive and sFog do
31340: LD_EXP 56
31344: PUSH
31345: LD_EXP 77
31349: AND
31350: IFFALSE 31364
31352: GO 31354
31354: DISABLE
// FogOff ( your_side ) ;
31355: LD_OWVAR 2
31359: PPUSH
31360: CALL_OW 344
31364: END
// every 0 0$1 trigger StreamModeActive and sSun do
31365: LD_EXP 56
31369: PUSH
31370: LD_EXP 79
31374: AND
31375: IFFALSE 31403
31377: GO 31379
31379: DISABLE
// begin solar_recharge_percent := 0 ;
31380: LD_ADDR_OWVAR 79
31384: PUSH
31385: LD_INT 0
31387: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31388: LD_INT 10500
31390: PPUSH
31391: CALL_OW 67
// solar_recharge_percent := 100 ;
31395: LD_ADDR_OWVAR 79
31399: PUSH
31400: LD_INT 100
31402: ST_TO_ADDR
// end ;
31403: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31404: LD_EXP 56
31408: PUSH
31409: LD_EXP 80
31413: AND
31414: IFFALSE 31653
31416: GO 31418
31418: DISABLE
31419: LD_INT 0
31421: PPUSH
31422: PPUSH
31423: PPUSH
// begin tmp := [ ] ;
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: EMPTY
31430: ST_TO_ADDR
// for i := 1 to 6 do
31431: LD_ADDR_VAR 0 1
31435: PUSH
31436: DOUBLE
31437: LD_INT 1
31439: DEC
31440: ST_TO_ADDR
31441: LD_INT 6
31443: PUSH
31444: FOR_TO
31445: IFFALSE 31550
// begin uc_nation := nation_nature ;
31447: LD_ADDR_OWVAR 21
31451: PUSH
31452: LD_INT 0
31454: ST_TO_ADDR
// uc_side := 0 ;
31455: LD_ADDR_OWVAR 20
31459: PUSH
31460: LD_INT 0
31462: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31463: LD_ADDR_OWVAR 29
31467: PUSH
31468: LD_INT 12
31470: PUSH
31471: LD_INT 12
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// hc_agressivity := 20 ;
31478: LD_ADDR_OWVAR 35
31482: PUSH
31483: LD_INT 20
31485: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31486: LD_ADDR_OWVAR 28
31490: PUSH
31491: LD_INT 17
31493: ST_TO_ADDR
// hc_gallery :=  ;
31494: LD_ADDR_OWVAR 33
31498: PUSH
31499: LD_STRING 
31501: ST_TO_ADDR
// hc_name :=  ;
31502: LD_ADDR_OWVAR 26
31506: PUSH
31507: LD_STRING 
31509: ST_TO_ADDR
// un := CreateHuman ;
31510: LD_ADDR_VAR 0 2
31514: PUSH
31515: CALL_OW 44
31519: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31520: LD_VAR 0 2
31524: PPUSH
31525: LD_INT 1
31527: PPUSH
31528: CALL_OW 51
// tmp := tmp ^ un ;
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_VAR 0 3
31541: PUSH
31542: LD_VAR 0 2
31546: ADD
31547: ST_TO_ADDR
// end ;
31548: GO 31444
31550: POP
31551: POP
// repeat wait ( 0 0$1 ) ;
31552: LD_INT 35
31554: PPUSH
31555: CALL_OW 67
// for un in tmp do
31559: LD_ADDR_VAR 0 2
31563: PUSH
31564: LD_VAR 0 3
31568: PUSH
31569: FOR_IN
31570: IFFALSE 31644
// begin if IsDead ( un ) then
31572: LD_VAR 0 2
31576: PPUSH
31577: CALL_OW 301
31581: IFFALSE 31601
// begin tmp := tmp diff un ;
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_VAR 0 3
31592: PUSH
31593: LD_VAR 0 2
31597: DIFF
31598: ST_TO_ADDR
// continue ;
31599: GO 31569
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31601: LD_VAR 0 2
31605: PPUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 22
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PPUSH
31623: CALL_OW 69
31627: PPUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: CALL_OW 74
31637: PPUSH
31638: CALL_OW 115
// end ;
31642: GO 31569
31644: POP
31645: POP
// until not tmp ;
31646: LD_VAR 0 3
31650: NOT
31651: IFFALSE 31552
// end ;
31653: PPOPN 3
31655: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31656: LD_EXP 56
31660: PUSH
31661: LD_EXP 81
31665: AND
31666: IFFALSE 31720
31668: GO 31670
31670: DISABLE
// begin ToLua ( displayTroll(); ) ;
31671: LD_STRING displayTroll();
31673: PPUSH
31674: CALL_OW 559
// wait ( 3 3$00 ) ;
31678: LD_INT 6300
31680: PPUSH
31681: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31685: LD_STRING hideTroll();
31687: PPUSH
31688: CALL_OW 559
// wait ( 1 1$00 ) ;
31692: LD_INT 2100
31694: PPUSH
31695: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31699: LD_STRING displayTroll();
31701: PPUSH
31702: CALL_OW 559
// wait ( 1 1$00 ) ;
31706: LD_INT 2100
31708: PPUSH
31709: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31713: LD_STRING hideTroll();
31715: PPUSH
31716: CALL_OW 559
// end ;
31720: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31721: LD_EXP 56
31725: PUSH
31726: LD_EXP 82
31730: AND
31731: IFFALSE 31794
31733: GO 31735
31735: DISABLE
31736: LD_INT 0
31738: PPUSH
// begin p := 0 ;
31739: LD_ADDR_VAR 0 1
31743: PUSH
31744: LD_INT 0
31746: ST_TO_ADDR
// repeat game_speed := 1 ;
31747: LD_ADDR_OWVAR 65
31751: PUSH
31752: LD_INT 1
31754: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31755: LD_INT 35
31757: PPUSH
31758: CALL_OW 67
// p := p + 1 ;
31762: LD_ADDR_VAR 0 1
31766: PUSH
31767: LD_VAR 0 1
31771: PUSH
31772: LD_INT 1
31774: PLUS
31775: ST_TO_ADDR
// until p >= 60 ;
31776: LD_VAR 0 1
31780: PUSH
31781: LD_INT 60
31783: GREATEREQUAL
31784: IFFALSE 31747
// game_speed := 4 ;
31786: LD_ADDR_OWVAR 65
31790: PUSH
31791: LD_INT 4
31793: ST_TO_ADDR
// end ;
31794: PPOPN 1
31796: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31797: LD_EXP 56
31801: PUSH
31802: LD_EXP 83
31806: AND
31807: IFFALSE 31953
31809: GO 31811
31811: DISABLE
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31816: LD_ADDR_VAR 0 1
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: LD_OWVAR 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 30
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PPUSH
31865: CALL_OW 69
31869: ST_TO_ADDR
// if not depot then
31870: LD_VAR 0 1
31874: NOT
31875: IFFALSE 31879
// exit ;
31877: GO 31953
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31879: LD_ADDR_VAR 0 2
31883: PUSH
31884: LD_VAR 0 1
31888: PUSH
31889: LD_INT 1
31891: PPUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 12
31901: ARRAY
31902: PPUSH
31903: CALL_OW 274
31907: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31908: LD_VAR 0 2
31912: PPUSH
31913: LD_INT 1
31915: PPUSH
31916: LD_INT 0
31918: PPUSH
31919: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31923: LD_VAR 0 2
31927: PPUSH
31928: LD_INT 2
31930: PPUSH
31931: LD_INT 0
31933: PPUSH
31934: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31938: LD_VAR 0 2
31942: PPUSH
31943: LD_INT 3
31945: PPUSH
31946: LD_INT 0
31948: PPUSH
31949: CALL_OW 277
// end ;
31953: PPOPN 2
31955: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31956: LD_EXP 56
31960: PUSH
31961: LD_EXP 84
31965: AND
31966: IFFALSE 32063
31968: GO 31970
31970: DISABLE
31971: LD_INT 0
31973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31974: LD_ADDR_VAR 0 1
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: LD_OWVAR 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 21
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 23
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: PPUSH
32023: CALL_OW 69
32027: ST_TO_ADDR
// if not tmp then
32028: LD_VAR 0 1
32032: NOT
32033: IFFALSE 32037
// exit ;
32035: GO 32063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32037: LD_VAR 0 1
32041: PUSH
32042: LD_INT 1
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 12
32054: ARRAY
32055: PPUSH
32056: LD_INT 200
32058: PPUSH
32059: CALL_OW 234
// end ;
32063: PPOPN 1
32065: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32066: LD_EXP 56
32070: PUSH
32071: LD_EXP 85
32075: AND
32076: IFFALSE 32155
32078: GO 32080
32080: DISABLE
32081: LD_INT 0
32083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32084: LD_ADDR_VAR 0 1
32088: PUSH
32089: LD_INT 22
32091: PUSH
32092: LD_OWVAR 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 21
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PPUSH
32115: CALL_OW 69
32119: ST_TO_ADDR
// if not tmp then
32120: LD_VAR 0 1
32124: NOT
32125: IFFALSE 32129
// exit ;
32127: GO 32155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32129: LD_VAR 0 1
32133: PUSH
32134: LD_INT 1
32136: PPUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL_OW 12
32146: ARRAY
32147: PPUSH
32148: LD_INT 60
32150: PPUSH
32151: CALL_OW 234
// end ;
32155: PPOPN 1
32157: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32158: LD_EXP 56
32162: PUSH
32163: LD_EXP 86
32167: AND
32168: IFFALSE 32267
32170: GO 32172
32172: DISABLE
32173: LD_INT 0
32175: PPUSH
32176: PPUSH
// begin enable ;
32177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32178: LD_ADDR_VAR 0 1
32182: PUSH
32183: LD_INT 22
32185: PUSH
32186: LD_OWVAR 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 61
32197: PUSH
32198: EMPTY
32199: LIST
32200: PUSH
32201: LD_INT 33
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: PPUSH
32216: CALL_OW 69
32220: ST_TO_ADDR
// if not tmp then
32221: LD_VAR 0 1
32225: NOT
32226: IFFALSE 32230
// exit ;
32228: GO 32267
// for i in tmp do
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: LD_VAR 0 1
32239: PUSH
32240: FOR_IN
32241: IFFALSE 32265
// if IsControledBy ( i ) then
32243: LD_VAR 0 2
32247: PPUSH
32248: CALL_OW 312
32252: IFFALSE 32263
// ComUnlink ( i ) ;
32254: LD_VAR 0 2
32258: PPUSH
32259: CALL_OW 136
32263: GO 32240
32265: POP
32266: POP
// end ;
32267: PPOPN 2
32269: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32270: LD_EXP 56
32274: PUSH
32275: LD_EXP 87
32279: AND
32280: IFFALSE 32420
32282: GO 32284
32284: DISABLE
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
// begin ToLua ( displayPowell(); ) ;
32289: LD_STRING displayPowell();
32291: PPUSH
32292: CALL_OW 559
// uc_side := 0 ;
32296: LD_ADDR_OWVAR 20
32300: PUSH
32301: LD_INT 0
32303: ST_TO_ADDR
// uc_nation := 2 ;
32304: LD_ADDR_OWVAR 21
32308: PUSH
32309: LD_INT 2
32311: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32312: LD_ADDR_OWVAR 37
32316: PUSH
32317: LD_INT 14
32319: ST_TO_ADDR
// vc_engine := engine_siberite ;
32320: LD_ADDR_OWVAR 39
32324: PUSH
32325: LD_INT 3
32327: ST_TO_ADDR
// vc_control := control_apeman ;
32328: LD_ADDR_OWVAR 38
32332: PUSH
32333: LD_INT 5
32335: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32336: LD_ADDR_OWVAR 40
32340: PUSH
32341: LD_INT 29
32343: ST_TO_ADDR
// un := CreateVehicle ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: CALL_OW 45
32353: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32354: LD_VAR 0 2
32358: PPUSH
32359: LD_INT 1
32361: PPUSH
32362: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32366: LD_INT 35
32368: PPUSH
32369: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_INT 22
32380: PUSH
32381: LD_OWVAR 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PPUSH
32390: CALL_OW 69
32394: PPUSH
32395: LD_VAR 0 2
32399: PPUSH
32400: CALL_OW 74
32404: PPUSH
32405: CALL_OW 115
// until IsDead ( un ) ;
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 301
32418: IFFALSE 32366
// end ;
32420: PPOPN 2
32422: END
// every 0 0$1 trigger StreamModeActive and sStu do
32423: LD_EXP 56
32427: PUSH
32428: LD_EXP 95
32432: AND
32433: IFFALSE 32449
32435: GO 32437
32437: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32438: LD_STRING displayStucuk();
32440: PPUSH
32441: CALL_OW 559
// ResetFog ;
32445: CALL_OW 335
// end ;
32449: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32450: LD_EXP 56
32454: PUSH
32455: LD_EXP 88
32459: AND
32460: IFFALSE 32601
32462: GO 32464
32464: DISABLE
32465: LD_INT 0
32467: PPUSH
32468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32469: LD_ADDR_VAR 0 2
32473: PUSH
32474: LD_INT 22
32476: PUSH
32477: LD_OWVAR 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 21
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PPUSH
32500: CALL_OW 69
32504: ST_TO_ADDR
// if not tmp then
32505: LD_VAR 0 2
32509: NOT
32510: IFFALSE 32514
// exit ;
32512: GO 32601
// un := tmp [ rand ( 1 , tmp ) ] ;
32514: LD_ADDR_VAR 0 1
32518: PUSH
32519: LD_VAR 0 2
32523: PUSH
32524: LD_INT 1
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: CALL_OW 12
32536: ARRAY
32537: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32538: LD_VAR 0 1
32542: PPUSH
32543: LD_INT 0
32545: PPUSH
32546: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32550: LD_VAR 0 1
32554: PPUSH
32555: LD_OWVAR 3
32559: PUSH
32560: LD_VAR 0 1
32564: DIFF
32565: PPUSH
32566: LD_VAR 0 1
32570: PPUSH
32571: CALL_OW 74
32575: PPUSH
32576: CALL_OW 115
// wait ( 0 0$20 ) ;
32580: LD_INT 700
32582: PPUSH
32583: CALL_OW 67
// SetSide ( un , your_side ) ;
32587: LD_VAR 0 1
32591: PPUSH
32592: LD_OWVAR 2
32596: PPUSH
32597: CALL_OW 235
// end ;
32601: PPOPN 2
32603: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32604: LD_EXP 56
32608: PUSH
32609: LD_EXP 89
32613: AND
32614: IFFALSE 32720
32616: GO 32618
32618: DISABLE
32619: LD_INT 0
32621: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32622: LD_ADDR_VAR 0 1
32626: PUSH
32627: LD_INT 22
32629: PUSH
32630: LD_OWVAR 2
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 30
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 30
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PPUSH
32671: CALL_OW 69
32675: ST_TO_ADDR
// if not depot then
32676: LD_VAR 0 1
32680: NOT
32681: IFFALSE 32685
// exit ;
32683: GO 32720
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32685: LD_VAR 0 1
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PPUSH
32694: CALL_OW 250
32698: PPUSH
32699: LD_VAR 0 1
32703: PUSH
32704: LD_INT 1
32706: ARRAY
32707: PPUSH
32708: CALL_OW 251
32712: PPUSH
32713: LD_INT 70
32715: PPUSH
32716: CALL_OW 495
// end ;
32720: PPOPN 1
32722: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32723: LD_EXP 56
32727: PUSH
32728: LD_EXP 90
32732: AND
32733: IFFALSE 32944
32735: GO 32737
32737: DISABLE
32738: LD_INT 0
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
32744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32745: LD_ADDR_VAR 0 5
32749: PUSH
32750: LD_INT 22
32752: PUSH
32753: LD_OWVAR 2
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 21
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PPUSH
32776: CALL_OW 69
32780: ST_TO_ADDR
// if not tmp then
32781: LD_VAR 0 5
32785: NOT
32786: IFFALSE 32790
// exit ;
32788: GO 32944
// for i in tmp do
32790: LD_ADDR_VAR 0 1
32794: PUSH
32795: LD_VAR 0 5
32799: PUSH
32800: FOR_IN
32801: IFFALSE 32942
// begin d := rand ( 0 , 5 ) ;
32803: LD_ADDR_VAR 0 4
32807: PUSH
32808: LD_INT 0
32810: PPUSH
32811: LD_INT 5
32813: PPUSH
32814: CALL_OW 12
32818: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32819: LD_ADDR_VAR 0 2
32823: PUSH
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 250
32833: PPUSH
32834: LD_VAR 0 4
32838: PPUSH
32839: LD_INT 3
32841: PPUSH
32842: LD_INT 12
32844: PPUSH
32845: CALL_OW 12
32849: PPUSH
32850: CALL_OW 272
32854: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32855: LD_ADDR_VAR 0 3
32859: PUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL_OW 251
32869: PPUSH
32870: LD_VAR 0 4
32874: PPUSH
32875: LD_INT 3
32877: PPUSH
32878: LD_INT 12
32880: PPUSH
32881: CALL_OW 12
32885: PPUSH
32886: CALL_OW 273
32890: ST_TO_ADDR
// if ValidHex ( x , y ) then
32891: LD_VAR 0 2
32895: PPUSH
32896: LD_VAR 0 3
32900: PPUSH
32901: CALL_OW 488
32905: IFFALSE 32940
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32907: LD_VAR 0 1
32911: PPUSH
32912: LD_VAR 0 2
32916: PPUSH
32917: LD_VAR 0 3
32921: PPUSH
32922: LD_INT 3
32924: PPUSH
32925: LD_INT 6
32927: PPUSH
32928: CALL_OW 12
32932: PPUSH
32933: LD_INT 1
32935: PPUSH
32936: CALL_OW 483
// end ;
32940: GO 32800
32942: POP
32943: POP
// end ;
32944: PPOPN 5
32946: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32947: LD_EXP 56
32951: PUSH
32952: LD_EXP 91
32956: AND
32957: IFFALSE 33051
32959: GO 32961
32961: DISABLE
32962: LD_INT 0
32964: PPUSH
32965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32966: LD_ADDR_VAR 0 2
32970: PUSH
32971: LD_INT 22
32973: PUSH
32974: LD_OWVAR 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 32
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 21
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: PPUSH
33008: CALL_OW 69
33012: ST_TO_ADDR
// if not tmp then
33013: LD_VAR 0 2
33017: NOT
33018: IFFALSE 33022
// exit ;
33020: GO 33051
// for i in tmp do
33022: LD_ADDR_VAR 0 1
33026: PUSH
33027: LD_VAR 0 2
33031: PUSH
33032: FOR_IN
33033: IFFALSE 33049
// SetFuel ( i , 0 ) ;
33035: LD_VAR 0 1
33039: PPUSH
33040: LD_INT 0
33042: PPUSH
33043: CALL_OW 240
33047: GO 33032
33049: POP
33050: POP
// end ;
33051: PPOPN 2
33053: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33054: LD_EXP 56
33058: PUSH
33059: LD_EXP 92
33063: AND
33064: IFFALSE 33130
33066: GO 33068
33068: DISABLE
33069: LD_INT 0
33071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33072: LD_ADDR_VAR 0 1
33076: PUSH
33077: LD_INT 22
33079: PUSH
33080: LD_OWVAR 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 30
33091: PUSH
33092: LD_INT 29
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 69
33107: ST_TO_ADDR
// if not tmp then
33108: LD_VAR 0 1
33112: NOT
33113: IFFALSE 33117
// exit ;
33115: GO 33130
// DestroyUnit ( tmp [ 1 ] ) ;
33117: LD_VAR 0 1
33121: PUSH
33122: LD_INT 1
33124: ARRAY
33125: PPUSH
33126: CALL_OW 65
// end ;
33130: PPOPN 1
33132: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33133: LD_EXP 56
33137: PUSH
33138: LD_EXP 94
33142: AND
33143: IFFALSE 33272
33145: GO 33147
33147: DISABLE
33148: LD_INT 0
33150: PPUSH
// begin uc_side := 0 ;
33151: LD_ADDR_OWVAR 20
33155: PUSH
33156: LD_INT 0
33158: ST_TO_ADDR
// uc_nation := nation_arabian ;
33159: LD_ADDR_OWVAR 21
33163: PUSH
33164: LD_INT 2
33166: ST_TO_ADDR
// hc_gallery :=  ;
33167: LD_ADDR_OWVAR 33
33171: PUSH
33172: LD_STRING 
33174: ST_TO_ADDR
// hc_name :=  ;
33175: LD_ADDR_OWVAR 26
33179: PUSH
33180: LD_STRING 
33182: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33183: LD_INT 1
33185: PPUSH
33186: LD_INT 11
33188: PPUSH
33189: LD_INT 10
33191: PPUSH
33192: CALL_OW 380
// un := CreateHuman ;
33196: LD_ADDR_VAR 0 1
33200: PUSH
33201: CALL_OW 44
33205: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33206: LD_VAR 0 1
33210: PPUSH
33211: LD_INT 1
33213: PPUSH
33214: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33218: LD_INT 35
33220: PPUSH
33221: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33225: LD_VAR 0 1
33229: PPUSH
33230: LD_INT 22
33232: PUSH
33233: LD_OWVAR 2
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PPUSH
33242: CALL_OW 69
33246: PPUSH
33247: LD_VAR 0 1
33251: PPUSH
33252: CALL_OW 74
33256: PPUSH
33257: CALL_OW 115
// until IsDead ( un ) ;
33261: LD_VAR 0 1
33265: PPUSH
33266: CALL_OW 301
33270: IFFALSE 33218
// end ;
33272: PPOPN 1
33274: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33275: LD_EXP 56
33279: PUSH
33280: LD_EXP 96
33284: AND
33285: IFFALSE 33297
33287: GO 33289
33289: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33290: LD_STRING earthquake(getX(game), 0, 32)
33292: PPUSH
33293: CALL_OW 559
33297: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33298: LD_EXP 56
33302: PUSH
33303: LD_EXP 97
33307: AND
33308: IFFALSE 33399
33310: GO 33312
33312: DISABLE
33313: LD_INT 0
33315: PPUSH
// begin enable ;
33316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33317: LD_ADDR_VAR 0 1
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_OWVAR 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 33
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: PPUSH
33359: CALL_OW 69
33363: ST_TO_ADDR
// if not tmp then
33364: LD_VAR 0 1
33368: NOT
33369: IFFALSE 33373
// exit ;
33371: GO 33399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33373: LD_VAR 0 1
33377: PUSH
33378: LD_INT 1
33380: PPUSH
33381: LD_VAR 0 1
33385: PPUSH
33386: CALL_OW 12
33390: ARRAY
33391: PPUSH
33392: LD_INT 1
33394: PPUSH
33395: CALL_OW 234
// end ;
33399: PPOPN 1
33401: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33402: LD_EXP 56
33406: PUSH
33407: LD_EXP 98
33411: AND
33412: IFFALSE 33553
33414: GO 33416
33416: DISABLE
33417: LD_INT 0
33419: PPUSH
33420: PPUSH
33421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_INT 22
33429: PUSH
33430: LD_OWVAR 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 25
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PPUSH
33453: CALL_OW 69
33457: ST_TO_ADDR
// if not tmp then
33458: LD_VAR 0 3
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 33553
// un := tmp [ rand ( 1 , tmp ) ] ;
33467: LD_ADDR_VAR 0 2
33471: PUSH
33472: LD_VAR 0 3
33476: PUSH
33477: LD_INT 1
33479: PPUSH
33480: LD_VAR 0 3
33484: PPUSH
33485: CALL_OW 12
33489: ARRAY
33490: ST_TO_ADDR
// if Crawls ( un ) then
33491: LD_VAR 0 2
33495: PPUSH
33496: CALL_OW 318
33500: IFFALSE 33511
// ComWalk ( un ) ;
33502: LD_VAR 0 2
33506: PPUSH
33507: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_INT 9
33518: PPUSH
33519: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33523: LD_INT 28
33525: PPUSH
33526: LD_OWVAR 2
33530: PPUSH
33531: LD_INT 2
33533: PPUSH
33534: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33538: LD_INT 29
33540: PPUSH
33541: LD_OWVAR 2
33545: PPUSH
33546: LD_INT 2
33548: PPUSH
33549: CALL_OW 322
// end ;
33553: PPOPN 3
33555: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33556: LD_EXP 56
33560: PUSH
33561: LD_EXP 99
33565: AND
33566: IFFALSE 33677
33568: GO 33570
33570: DISABLE
33571: LD_INT 0
33573: PPUSH
33574: PPUSH
33575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33576: LD_ADDR_VAR 0 3
33580: PUSH
33581: LD_INT 22
33583: PUSH
33584: LD_OWVAR 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 25
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PPUSH
33607: CALL_OW 69
33611: ST_TO_ADDR
// if not tmp then
33612: LD_VAR 0 3
33616: NOT
33617: IFFALSE 33621
// exit ;
33619: GO 33677
// un := tmp [ rand ( 1 , tmp ) ] ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_VAR 0 3
33630: PUSH
33631: LD_INT 1
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: CALL_OW 12
33643: ARRAY
33644: ST_TO_ADDR
// if Crawls ( un ) then
33645: LD_VAR 0 2
33649: PPUSH
33650: CALL_OW 318
33654: IFFALSE 33665
// ComWalk ( un ) ;
33656: LD_VAR 0 2
33660: PPUSH
33661: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33665: LD_VAR 0 2
33669: PPUSH
33670: LD_INT 8
33672: PPUSH
33673: CALL_OW 336
// end ;
33677: PPOPN 3
33679: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33680: LD_EXP 56
33684: PUSH
33685: LD_EXP 100
33689: AND
33690: IFFALSE 33834
33692: GO 33694
33694: DISABLE
33695: LD_INT 0
33697: PPUSH
33698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 22
33706: PUSH
33707: LD_OWVAR 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 21
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: LD_INT 34
33731: PUSH
33732: LD_INT 12
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 34
33741: PUSH
33742: LD_INT 51
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 34
33751: PUSH
33752: LD_INT 32
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: PPUSH
33770: CALL_OW 69
33774: ST_TO_ADDR
// if not tmp then
33775: LD_VAR 0 2
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 33834
// for i in tmp do
33784: LD_ADDR_VAR 0 1
33788: PUSH
33789: LD_VAR 0 2
33793: PUSH
33794: FOR_IN
33795: IFFALSE 33832
// if GetCargo ( i , mat_artifact ) = 0 then
33797: LD_VAR 0 1
33801: PPUSH
33802: LD_INT 4
33804: PPUSH
33805: CALL_OW 289
33809: PUSH
33810: LD_INT 0
33812: EQUAL
33813: IFFALSE 33830
// SetCargo ( i , mat_siberit , 100 ) ;
33815: LD_VAR 0 1
33819: PPUSH
33820: LD_INT 3
33822: PPUSH
33823: LD_INT 100
33825: PPUSH
33826: CALL_OW 290
33830: GO 33794
33832: POP
33833: POP
// end ;
33834: PPOPN 2
33836: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33837: LD_EXP 56
33841: PUSH
33842: LD_EXP 101
33846: AND
33847: IFFALSE 34000
33849: GO 33851
33851: DISABLE
33852: LD_INT 0
33854: PPUSH
33855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33856: LD_ADDR_VAR 0 2
33860: PUSH
33861: LD_INT 22
33863: PUSH
33864: LD_OWVAR 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PPUSH
33873: CALL_OW 69
33877: ST_TO_ADDR
// if not tmp then
33878: LD_VAR 0 2
33882: NOT
33883: IFFALSE 33887
// exit ;
33885: GO 34000
// for i := 1 to 2 do
33887: LD_ADDR_VAR 0 1
33891: PUSH
33892: DOUBLE
33893: LD_INT 1
33895: DEC
33896: ST_TO_ADDR
33897: LD_INT 2
33899: PUSH
33900: FOR_TO
33901: IFFALSE 33998
// begin uc_side := your_side ;
33903: LD_ADDR_OWVAR 20
33907: PUSH
33908: LD_OWVAR 2
33912: ST_TO_ADDR
// uc_nation := nation_american ;
33913: LD_ADDR_OWVAR 21
33917: PUSH
33918: LD_INT 1
33920: ST_TO_ADDR
// vc_chassis := us_morphling ;
33921: LD_ADDR_OWVAR 37
33925: PUSH
33926: LD_INT 5
33928: ST_TO_ADDR
// vc_engine := engine_siberite ;
33929: LD_ADDR_OWVAR 39
33933: PUSH
33934: LD_INT 3
33936: ST_TO_ADDR
// vc_control := control_computer ;
33937: LD_ADDR_OWVAR 38
33941: PUSH
33942: LD_INT 3
33944: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33945: LD_ADDR_OWVAR 40
33949: PUSH
33950: LD_INT 10
33952: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
33953: CALL_OW 45
33957: PPUSH
33958: LD_VAR 0 2
33962: PUSH
33963: LD_INT 1
33965: ARRAY
33966: PPUSH
33967: CALL_OW 250
33971: PPUSH
33972: LD_VAR 0 2
33976: PUSH
33977: LD_INT 1
33979: ARRAY
33980: PPUSH
33981: CALL_OW 251
33985: PPUSH
33986: LD_INT 12
33988: PPUSH
33989: LD_INT 1
33991: PPUSH
33992: CALL_OW 50
// end ;
33996: GO 33900
33998: POP
33999: POP
// end ;
34000: PPOPN 2
34002: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34003: LD_EXP 56
34007: PUSH
34008: LD_EXP 102
34012: AND
34013: IFFALSE 34235
34015: GO 34017
34017: DISABLE
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
34022: PPUSH
34023: PPUSH
34024: PPUSH
34025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34026: LD_ADDR_VAR 0 6
34030: PUSH
34031: LD_INT 22
34033: PUSH
34034: LD_OWVAR 2
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 21
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: LD_INT 23
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: PPUSH
34075: CALL_OW 69
34079: ST_TO_ADDR
// if not tmp then
34080: LD_VAR 0 6
34084: NOT
34085: IFFALSE 34089
// exit ;
34087: GO 34235
// s1 := rand ( 1 , 4 ) ;
34089: LD_ADDR_VAR 0 2
34093: PUSH
34094: LD_INT 1
34096: PPUSH
34097: LD_INT 4
34099: PPUSH
34100: CALL_OW 12
34104: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34105: LD_ADDR_VAR 0 4
34109: PUSH
34110: LD_VAR 0 6
34114: PUSH
34115: LD_INT 1
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 259
34128: ST_TO_ADDR
// if s1 = 1 then
34129: LD_VAR 0 2
34133: PUSH
34134: LD_INT 1
34136: EQUAL
34137: IFFALSE 34157
// s2 := rand ( 2 , 4 ) else
34139: LD_ADDR_VAR 0 3
34143: PUSH
34144: LD_INT 2
34146: PPUSH
34147: LD_INT 4
34149: PPUSH
34150: CALL_OW 12
34154: ST_TO_ADDR
34155: GO 34165
// s2 := 1 ;
34157: LD_ADDR_VAR 0 3
34161: PUSH
34162: LD_INT 1
34164: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34165: LD_ADDR_VAR 0 5
34169: PUSH
34170: LD_VAR 0 6
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: LD_VAR 0 3
34183: PPUSH
34184: CALL_OW 259
34188: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34189: LD_VAR 0 6
34193: PUSH
34194: LD_INT 1
34196: ARRAY
34197: PPUSH
34198: LD_VAR 0 2
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34212: LD_VAR 0 6
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PPUSH
34221: LD_VAR 0 3
34225: PPUSH
34226: LD_VAR 0 4
34230: PPUSH
34231: CALL_OW 237
// end ;
34235: PPOPN 6
34237: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34238: LD_EXP 56
34242: PUSH
34243: LD_EXP 103
34247: AND
34248: IFFALSE 34327
34250: GO 34252
34252: DISABLE
34253: LD_INT 0
34255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34256: LD_ADDR_VAR 0 1
34260: PUSH
34261: LD_INT 22
34263: PUSH
34264: LD_OWVAR 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 30
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: ST_TO_ADDR
// if not tmp then
34292: LD_VAR 0 1
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 34327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34301: LD_VAR 0 1
34305: PUSH
34306: LD_INT 1
34308: PPUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 12
34318: ARRAY
34319: PPUSH
34320: LD_INT 1
34322: PPUSH
34323: CALL_OW 234
// end ;
34327: PPOPN 1
34329: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34330: LD_EXP 56
34334: PUSH
34335: LD_EXP 104
34339: AND
34340: IFFALSE 34452
34342: GO 34344
34344: DISABLE
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34349: LD_ADDR_VAR 0 2
34353: PUSH
34354: LD_INT 22
34356: PUSH
34357: LD_OWVAR 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 30
34371: PUSH
34372: LD_INT 27
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 30
34381: PUSH
34382: LD_INT 26
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 30
34391: PUSH
34392: LD_INT 28
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 69
34413: ST_TO_ADDR
// if not tmp then
34414: LD_VAR 0 2
34418: NOT
34419: IFFALSE 34423
// exit ;
34421: GO 34452
// for i in tmp do
34423: LD_ADDR_VAR 0 1
34427: PUSH
34428: LD_VAR 0 2
34432: PUSH
34433: FOR_IN
34434: IFFALSE 34450
// SetLives ( i , 1 ) ;
34436: LD_VAR 0 1
34440: PPUSH
34441: LD_INT 1
34443: PPUSH
34444: CALL_OW 234
34448: GO 34433
34450: POP
34451: POP
// end ;
34452: PPOPN 2
34454: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34455: LD_EXP 56
34459: PUSH
34460: LD_EXP 105
34464: AND
34465: IFFALSE 34739
34467: GO 34469
34469: DISABLE
34470: LD_INT 0
34472: PPUSH
34473: PPUSH
34474: PPUSH
// begin i := rand ( 1 , 7 ) ;
34475: LD_ADDR_VAR 0 1
34479: PUSH
34480: LD_INT 1
34482: PPUSH
34483: LD_INT 7
34485: PPUSH
34486: CALL_OW 12
34490: ST_TO_ADDR
// case i of 1 :
34491: LD_VAR 0 1
34495: PUSH
34496: LD_INT 1
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34514
34504: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34505: LD_STRING earthquake(getX(game), 0, 32)
34507: PPUSH
34508: CALL_OW 559
34512: GO 34739
34514: LD_INT 2
34516: DOUBLE
34517: EQUAL
34518: IFTRUE 34522
34520: GO 34536
34522: POP
// begin ToLua ( displayStucuk(); ) ;
34523: LD_STRING displayStucuk();
34525: PPUSH
34526: CALL_OW 559
// ResetFog ;
34530: CALL_OW 335
// end ; 3 :
34534: GO 34739
34536: LD_INT 3
34538: DOUBLE
34539: EQUAL
34540: IFTRUE 34544
34542: GO 34648
34544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34545: LD_ADDR_VAR 0 2
34549: PUSH
34550: LD_INT 22
34552: PUSH
34553: LD_OWVAR 2
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 25
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PPUSH
34576: CALL_OW 69
34580: ST_TO_ADDR
// if not tmp then
34581: LD_VAR 0 2
34585: NOT
34586: IFFALSE 34590
// exit ;
34588: GO 34739
// un := tmp [ rand ( 1 , tmp ) ] ;
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: LD_VAR 0 2
34599: PUSH
34600: LD_INT 1
34602: PPUSH
34603: LD_VAR 0 2
34607: PPUSH
34608: CALL_OW 12
34612: ARRAY
34613: ST_TO_ADDR
// if Crawls ( un ) then
34614: LD_VAR 0 3
34618: PPUSH
34619: CALL_OW 318
34623: IFFALSE 34634
// ComWalk ( un ) ;
34625: LD_VAR 0 3
34629: PPUSH
34630: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34634: LD_VAR 0 3
34638: PPUSH
34639: LD_INT 8
34641: PPUSH
34642: CALL_OW 336
// end ; 4 :
34646: GO 34739
34648: LD_INT 4
34650: DOUBLE
34651: EQUAL
34652: IFTRUE 34656
34654: GO 34717
34656: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34657: LD_ADDR_VAR 0 2
34661: PUSH
34662: LD_INT 22
34664: PUSH
34665: LD_OWVAR 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 30
34676: PUSH
34677: LD_INT 29
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 69
34692: ST_TO_ADDR
// if not tmp then
34693: LD_VAR 0 2
34697: NOT
34698: IFFALSE 34702
// exit ;
34700: GO 34739
// DestroyUnit ( tmp [ 1 ] ) ;
34702: LD_VAR 0 2
34706: PUSH
34707: LD_INT 1
34709: ARRAY
34710: PPUSH
34711: CALL_OW 65
// end ; 5 .. 7 :
34715: GO 34739
34717: LD_INT 5
34719: DOUBLE
34720: GREATEREQUAL
34721: IFFALSE 34729
34723: LD_INT 7
34725: DOUBLE
34726: LESSEQUAL
34727: IFTRUE 34731
34729: GO 34738
34731: POP
// StreamSibBomb ; end ;
34732: CALL 31019 0 0
34736: GO 34739
34738: POP
// end ;
34739: PPOPN 3
34741: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34742: LD_EXP 56
34746: PUSH
34747: LD_EXP 106
34751: AND
34752: IFFALSE 34908
34754: GO 34756
34756: DISABLE
34757: LD_INT 0
34759: PPUSH
34760: PPUSH
34761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34762: LD_ADDR_VAR 0 2
34766: PUSH
34767: LD_INT 81
34769: PUSH
34770: LD_OWVAR 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 21
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 21
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PPUSH
34811: CALL_OW 69
34815: ST_TO_ADDR
// if not tmp then
34816: LD_VAR 0 2
34820: NOT
34821: IFFALSE 34825
// exit ;
34823: GO 34908
// p := 0 ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 0
34832: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34833: LD_INT 35
34835: PPUSH
34836: CALL_OW 67
// p := p + 1 ;
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_VAR 0 3
34849: PUSH
34850: LD_INT 1
34852: PLUS
34853: ST_TO_ADDR
// for i in tmp do
34854: LD_ADDR_VAR 0 1
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: FOR_IN
34865: IFFALSE 34896
// if GetLives ( i ) < 1000 then
34867: LD_VAR 0 1
34871: PPUSH
34872: CALL_OW 256
34876: PUSH
34877: LD_INT 1000
34879: LESS
34880: IFFALSE 34894
// SetLives ( i , 1000 ) ;
34882: LD_VAR 0 1
34886: PPUSH
34887: LD_INT 1000
34889: PPUSH
34890: CALL_OW 234
34894: GO 34864
34896: POP
34897: POP
// until p > 20 ;
34898: LD_VAR 0 3
34902: PUSH
34903: LD_INT 20
34905: GREATER
34906: IFFALSE 34833
// end ;
34908: PPOPN 3
34910: END
// every 0 0$1 trigger StreamModeActive and sTime do
34911: LD_EXP 56
34915: PUSH
34916: LD_EXP 107
34920: AND
34921: IFFALSE 34956
34923: GO 34925
34925: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34926: LD_INT 28
34928: PPUSH
34929: LD_OWVAR 2
34933: PPUSH
34934: LD_INT 2
34936: PPUSH
34937: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34941: LD_INT 30
34943: PPUSH
34944: LD_OWVAR 2
34948: PPUSH
34949: LD_INT 2
34951: PPUSH
34952: CALL_OW 322
// end ;
34956: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34957: LD_EXP 56
34961: PUSH
34962: LD_EXP 108
34966: AND
34967: IFFALSE 35088
34969: GO 34971
34971: DISABLE
34972: LD_INT 0
34974: PPUSH
34975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34976: LD_ADDR_VAR 0 2
34980: PUSH
34981: LD_INT 22
34983: PUSH
34984: LD_OWVAR 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 21
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: LD_INT 23
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 69
35029: ST_TO_ADDR
// if not tmp then
35030: LD_VAR 0 2
35034: NOT
35035: IFFALSE 35039
// exit ;
35037: GO 35088
// for i in tmp do
35039: LD_ADDR_VAR 0 1
35043: PUSH
35044: LD_VAR 0 2
35048: PUSH
35049: FOR_IN
35050: IFFALSE 35086
// begin if Crawls ( i ) then
35052: LD_VAR 0 1
35056: PPUSH
35057: CALL_OW 318
35061: IFFALSE 35072
// ComWalk ( i ) ;
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL_OW 138
// SetClass ( i , 2 ) ;
35072: LD_VAR 0 1
35076: PPUSH
35077: LD_INT 2
35079: PPUSH
35080: CALL_OW 336
// end ;
35084: GO 35049
35086: POP
35087: POP
// end ;
35088: PPOPN 2
35090: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35091: LD_EXP 56
35095: PUSH
35096: LD_EXP 109
35100: AND
35101: IFFALSE 35382
35103: GO 35105
35105: DISABLE
35106: LD_INT 0
35108: PPUSH
35109: PPUSH
35110: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35111: LD_OWVAR 2
35115: PPUSH
35116: LD_INT 9
35118: PPUSH
35119: LD_INT 1
35121: PPUSH
35122: LD_INT 1
35124: PPUSH
35125: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35129: LD_INT 9
35131: PPUSH
35132: LD_OWVAR 2
35136: PPUSH
35137: CALL_OW 343
// uc_side := 9 ;
35141: LD_ADDR_OWVAR 20
35145: PUSH
35146: LD_INT 9
35148: ST_TO_ADDR
// uc_nation := 2 ;
35149: LD_ADDR_OWVAR 21
35153: PUSH
35154: LD_INT 2
35156: ST_TO_ADDR
// hc_name := Dark Warrior ;
35157: LD_ADDR_OWVAR 26
35161: PUSH
35162: LD_STRING Dark Warrior
35164: ST_TO_ADDR
// hc_gallery :=  ;
35165: LD_ADDR_OWVAR 33
35169: PUSH
35170: LD_STRING 
35172: ST_TO_ADDR
// hc_noskilllimit := true ;
35173: LD_ADDR_OWVAR 76
35177: PUSH
35178: LD_INT 1
35180: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35181: LD_ADDR_OWVAR 31
35185: PUSH
35186: LD_INT 30
35188: PUSH
35189: LD_INT 30
35191: PUSH
35192: LD_INT 30
35194: PUSH
35195: LD_INT 30
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// un := CreateHuman ;
35204: LD_ADDR_VAR 0 3
35208: PUSH
35209: CALL_OW 44
35213: ST_TO_ADDR
// hc_noskilllimit := false ;
35214: LD_ADDR_OWVAR 76
35218: PUSH
35219: LD_INT 0
35221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35222: LD_VAR 0 3
35226: PPUSH
35227: LD_INT 1
35229: PPUSH
35230: CALL_OW 51
// p := 0 ;
35234: LD_ADDR_VAR 0 2
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35242: LD_INT 35
35244: PPUSH
35245: CALL_OW 67
// p := p + 1 ;
35249: LD_ADDR_VAR 0 2
35253: PUSH
35254: LD_VAR 0 2
35258: PUSH
35259: LD_INT 1
35261: PLUS
35262: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35263: LD_VAR 0 3
35267: PPUSH
35268: CALL_OW 256
35272: PUSH
35273: LD_INT 1000
35275: LESS
35276: IFFALSE 35290
// SetLives ( un , 1000 ) ;
35278: LD_VAR 0 3
35282: PPUSH
35283: LD_INT 1000
35285: PPUSH
35286: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35290: LD_VAR 0 3
35294: PPUSH
35295: LD_INT 81
35297: PUSH
35298: LD_OWVAR 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 91
35309: PUSH
35310: LD_VAR 0 3
35314: PUSH
35315: LD_INT 30
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PPUSH
35327: CALL_OW 69
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: CALL_OW 74
35341: PPUSH
35342: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35346: LD_VAR 0 2
35350: PUSH
35351: LD_INT 60
35353: GREATER
35354: PUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: CALL_OW 301
35364: OR
35365: IFFALSE 35242
// if un then
35367: LD_VAR 0 3
35371: IFFALSE 35382
// RemoveUnit ( un ) ;
35373: LD_VAR 0 3
35377: PPUSH
35378: CALL_OW 64
// end ; end_of_file
35382: PPOPN 3
35384: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35385: LD_INT 0
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 264
35400: PUSH
35401: LD_EXP 55
35405: EQUAL
35406: IFFALSE 35478
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35408: LD_INT 68
35410: PPUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 255
35420: PPUSH
35421: CALL_OW 321
35425: PUSH
35426: LD_INT 2
35428: EQUAL
35429: IFFALSE 35441
// eff := 70 else
35431: LD_ADDR_VAR 0 4
35435: PUSH
35436: LD_INT 70
35438: ST_TO_ADDR
35439: GO 35449
// eff := 30 ;
35441: LD_ADDR_VAR 0 4
35445: PUSH
35446: LD_INT 30
35448: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 250
35458: PPUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: CALL_OW 251
35468: PPUSH
35469: LD_VAR 0 4
35473: PPUSH
35474: CALL_OW 495
// end ; end ;
35478: LD_VAR 0 2
35482: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35483: LD_INT 0
35485: PPUSH
// end ;
35486: LD_VAR 0 4
35490: RET
// export function SOS_Command ( cmd ) ; begin
35491: LD_INT 0
35493: PPUSH
// end ;
35494: LD_VAR 0 2
35498: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35499: LD_VAR 0 1
35503: PUSH
35504: LD_INT 255
35506: EQUAL
35507: PUSH
35508: LD_VAR 0 2
35512: PPUSH
35513: CALL_OW 264
35517: PUSH
35518: LD_INT 14
35520: PUSH
35521: LD_INT 53
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: IN
35528: AND
35529: PUSH
35530: LD_VAR 0 4
35534: PPUSH
35535: LD_VAR 0 5
35539: PPUSH
35540: CALL_OW 488
35544: AND
35545: IFFALSE 35569
// CutTreeXYR ( unit , x , y , 12 ) ;
35547: LD_VAR 0 2
35551: PPUSH
35552: LD_VAR 0 4
35556: PPUSH
35557: LD_VAR 0 5
35561: PPUSH
35562: LD_INT 12
35564: PPUSH
35565: CALL 35572 0 4
// end ;
35569: PPOPN 5
35571: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35572: LD_INT 0
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35583: LD_VAR 0 1
35587: NOT
35588: PUSH
35589: LD_VAR 0 2
35593: PPUSH
35594: LD_VAR 0 3
35598: PPUSH
35599: CALL_OW 488
35603: NOT
35604: OR
35605: PUSH
35606: LD_VAR 0 4
35610: NOT
35611: OR
35612: IFFALSE 35616
// exit ;
35614: GO 35956
// list := [ ] ;
35616: LD_ADDR_VAR 0 13
35620: PUSH
35621: EMPTY
35622: ST_TO_ADDR
// if x - r < 0 then
35623: LD_VAR 0 2
35627: PUSH
35628: LD_VAR 0 4
35632: MINUS
35633: PUSH
35634: LD_INT 0
35636: LESS
35637: IFFALSE 35649
// min_x := 0 else
35639: LD_ADDR_VAR 0 7
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
35647: GO 35665
// min_x := x - r ;
35649: LD_ADDR_VAR 0 7
35653: PUSH
35654: LD_VAR 0 2
35658: PUSH
35659: LD_VAR 0 4
35663: MINUS
35664: ST_TO_ADDR
// if y - r < 0 then
35665: LD_VAR 0 3
35669: PUSH
35670: LD_VAR 0 4
35674: MINUS
35675: PUSH
35676: LD_INT 0
35678: LESS
35679: IFFALSE 35691
// min_y := 0 else
35681: LD_ADDR_VAR 0 8
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
35689: GO 35707
// min_y := y - r ;
35691: LD_ADDR_VAR 0 8
35695: PUSH
35696: LD_VAR 0 3
35700: PUSH
35701: LD_VAR 0 4
35705: MINUS
35706: ST_TO_ADDR
// max_x := x + r ;
35707: LD_ADDR_VAR 0 9
35711: PUSH
35712: LD_VAR 0 2
35716: PUSH
35717: LD_VAR 0 4
35721: PLUS
35722: ST_TO_ADDR
// max_y := y + r ;
35723: LD_ADDR_VAR 0 10
35727: PUSH
35728: LD_VAR 0 3
35732: PUSH
35733: LD_VAR 0 4
35737: PLUS
35738: ST_TO_ADDR
// for _x = min_x to max_x do
35739: LD_ADDR_VAR 0 11
35743: PUSH
35744: DOUBLE
35745: LD_VAR 0 7
35749: DEC
35750: ST_TO_ADDR
35751: LD_VAR 0 9
35755: PUSH
35756: FOR_TO
35757: IFFALSE 35874
// for _y = min_y to max_y do
35759: LD_ADDR_VAR 0 12
35763: PUSH
35764: DOUBLE
35765: LD_VAR 0 8
35769: DEC
35770: ST_TO_ADDR
35771: LD_VAR 0 10
35775: PUSH
35776: FOR_TO
35777: IFFALSE 35870
// begin if not ValidHex ( _x , _y ) then
35779: LD_VAR 0 11
35783: PPUSH
35784: LD_VAR 0 12
35788: PPUSH
35789: CALL_OW 488
35793: NOT
35794: IFFALSE 35798
// continue ;
35796: GO 35776
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35798: LD_VAR 0 11
35802: PPUSH
35803: LD_VAR 0 12
35807: PPUSH
35808: CALL_OW 351
35812: PUSH
35813: LD_VAR 0 11
35817: PPUSH
35818: LD_VAR 0 12
35822: PPUSH
35823: CALL_OW 554
35827: AND
35828: IFFALSE 35868
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35830: LD_ADDR_VAR 0 13
35834: PUSH
35835: LD_VAR 0 13
35839: PPUSH
35840: LD_VAR 0 13
35844: PUSH
35845: LD_INT 1
35847: PLUS
35848: PPUSH
35849: LD_VAR 0 11
35853: PUSH
35854: LD_VAR 0 12
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 2
35867: ST_TO_ADDR
// end ;
35868: GO 35776
35870: POP
35871: POP
35872: GO 35756
35874: POP
35875: POP
// if not list then
35876: LD_VAR 0 13
35880: NOT
35881: IFFALSE 35885
// exit ;
35883: GO 35956
// for i in list do
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: LD_VAR 0 13
35894: PUSH
35895: FOR_IN
35896: IFFALSE 35954
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35898: LD_VAR 0 1
35902: PPUSH
35903: LD_STRING M
35905: PUSH
35906: LD_VAR 0 6
35910: PUSH
35911: LD_INT 1
35913: ARRAY
35914: PUSH
35915: LD_VAR 0 6
35919: PUSH
35920: LD_INT 2
35922: ARRAY
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: PPUSH
35948: CALL_OW 447
35952: GO 35895
35954: POP
35955: POP
// end ;
35956: LD_VAR 0 5
35960: RET
