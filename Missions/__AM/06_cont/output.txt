// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7203 0 0
// CreateNature ;
  57: CALL 19579 0 0
// PrepareRussian ;
  61: CALL 5702 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9842 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 39232 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 39232 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 39232 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 39232 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 39232 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 39232 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 39232 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 39232 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 39232 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 39232 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3196: LD_INT 81
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 92
3208: PUSH
3209: LD_VAR 0 3
3213: PPUSH
3214: CALL_OW 250
3218: PUSH
3219: LD_VAR 0 3
3223: PPUSH
3224: CALL_OW 251
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: NOT
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 92
3270: PUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: CALL_OW 250
3280: PUSH
3281: LD_VAR 0 3
3285: PPUSH
3286: CALL_OW 251
3290: PUSH
3291: LD_INT 20
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: AND
3310: IFFALSE 3189
// blockSpawn := 1 ;
3312: LD_ADDR_EXP 29
3316: PUSH
3317: LD_INT 1
3319: ST_TO_ADDR
// uc_side := 4 ;
3320: LD_ADDR_OWVAR 20
3324: PUSH
3325: LD_INT 4
3327: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3328: LD_ADDR_EXP 15
3332: PUSH
3333: LD_STRING Joan
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: LD_EXP 43
3343: PPUSH
3344: CALL 39232 0 3
3348: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_VAR 0 3
3358: PPUSH
3359: CALL_OW 250
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: CALL_OW 251
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_INT 250
3391: PPUSH
3392: CALL_OW 234
// InGameOn ;
3396: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3400: LD_EXP 15
3404: PPUSH
3405: CALL_OW 87
// wait ( 0 0$2 ) ;
3409: LD_INT 70
3411: PPUSH
3412: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3425: LD_VAR 0 3
3429: PPUSH
3430: CALL_OW 122
// wait ( 0 0$1 ) ;
3434: LD_INT 35
3436: PPUSH
3437: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_EXP 15
3450: PPUSH
3451: CALL_OW 112
// wait ( 0 0$2 ) ;
3455: LD_INT 70
3457: PPUSH
3458: CALL_OW 67
// DialogueOn ;
3462: CALL_OW 6
// if tmp = JMM then
3466: LD_VAR 0 3
3470: PUSH
3471: LD_EXP 1
3475: EQUAL
3476: IFFALSE 3625
// begin ComTurnUnit ( JMM , Joan ) ;
3478: LD_EXP 1
3482: PPUSH
3483: LD_EXP 15
3487: PPUSH
3488: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D5b-JMM-1
3499: PPUSH
3500: CALL_OW 88
// DialogueOff ;
3504: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3508: LD_EXP 15
3512: PPUSH
3513: LD_INT 500
3515: PPUSH
3516: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 1
3529: PPUSH
3530: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_EXP 15
3543: PPUSH
3544: CALL_OW 119
// wait ( 0 0$1 ) ;
3548: LD_INT 35
3550: PPUSH
3551: CALL_OW 67
// DialogueOn ;
3555: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-1
3566: PPUSH
3567: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D5b-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D5b-Joan-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D5b-JMM-3
3602: PPUSH
3603: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D5b-Joan-3
3614: PPUSH
3615: CALL_OW 88
// DialogueOff ;
3619: CALL_OW 7
// end else
3623: GO 3990
// begin ComTurnUnit ( tmp , Joan ) ;
3625: LD_VAR 0 3
3629: PPUSH
3630: LD_EXP 15
3634: PPUSH
3635: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_STRING D5a-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// DialogueOff ;
3651: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3655: LD_EXP 15
3659: PPUSH
3660: LD_INT 500
3662: PPUSH
3663: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3667: LD_EXP 15
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 119
// wait ( 0 0$1 ) ;
3695: LD_INT 35
3697: PPUSH
3698: CALL_OW 67
// DialogueOn ;
3702: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-1
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-2
3725: PPUSH
3726: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_STRING D5a-Joan-2
3737: PPUSH
3738: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_STRING D5a-Sol1-3
3749: PPUSH
3750: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3754: LD_EXP 15
3758: PPUSH
3759: LD_STRING D5a-Joan-3
3761: PPUSH
3762: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3766: LD_VAR 0 3
3770: PPUSH
3771: LD_STRING D5a-Sol1-4
3773: PPUSH
3774: CALL_OW 88
// DialogueOff ;
3778: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3782: LD_EXP 1
3786: PUSH
3787: LD_INT 55
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: IN
3798: IFFALSE 3821
// begin ComMoveUnit ( JMM , Joan ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_EXP 15
3809: PPUSH
3810: CALL_OW 112
// wait ( 0 0$05 ) ;
3814: LD_INT 175
3816: PPUSH
3817: CALL_OW 67
// end ; ComExit ( JMM ) ;
3821: LD_EXP 1
3825: PPUSH
3826: CALL 76357 0 1
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3844: LD_EXP 15
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3867: LD_EXP 15
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 296
3881: PUSH
3882: LD_INT 5
3884: LESS
3885: IFFALSE 3837
// ComTurnUnit ( Joan , JMM ) ;
3887: LD_EXP 15
3891: PPUSH
3892: LD_EXP 1
3896: PPUSH
3897: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_EXP 15
3910: PPUSH
3911: CALL_OW 119
// wait ( 0 0$1 ) ;
3915: LD_INT 35
3917: PPUSH
3918: CALL_OW 67
// DialogueOn ;
3922: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-4
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D5a-JMM-4
3945: PPUSH
3946: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3950: LD_EXP 15
3954: PPUSH
3955: LD_STRING D5a-Joan-5
3957: PPUSH
3958: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3962: LD_EXP 1
3966: PPUSH
3967: LD_STRING D5a-JMM-5
3969: PPUSH
3970: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3974: LD_EXP 15
3978: PPUSH
3979: LD_STRING D5a-Joan-6
3981: PPUSH
3982: CALL_OW 88
// DialogueOff ;
3986: CALL_OW 7
// end ; DialogueOn ;
3990: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-2
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4030: LD_EXP 15
4034: PPUSH
4035: LD_STRING D6-Joan-2
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D6-JMM-3
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4054: LD_EXP 15
4058: PPUSH
4059: LD_STRING D6-Joan-3
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D6-JMM-4
4073: PPUSH
4074: CALL_OW 88
// DialogueOff ;
4078: CALL_OW 7
// InGameOff ;
4082: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4086: LD_EXP 15
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4098: LD_STRING MJ
4100: PPUSH
4101: CALL_OW 337
// joanStatus = 1 ;
4105: LD_ADDR_EXP 16
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// blockSpawn = 0 ;
4113: LD_ADDR_EXP 29
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
// if not number or number > 8 then
4130: LD_VAR 0 1
4134: NOT
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 8
4143: GREATER
4144: OR
4145: IFFALSE 4149
// exit ;
4147: GO 5697
// repeat wait ( 0 0$7 ) ;
4149: LD_INT 245
4151: PPUSH
4152: CALL_OW 67
// until blockSpawn = 0 ;
4156: LD_EXP 29
4160: PUSH
4161: LD_INT 0
4163: EQUAL
4164: IFFALSE 4149
// uc_side := 1 ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// uc_nation := 1 ;
4174: LD_ADDR_OWVAR 21
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// InitHc ;
4182: CALL_OW 19
// if number = 1 then
4186: LD_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: EQUAL
4194: IFFALSE 4370
// begin hc_class := 3 ;
4196: LD_ADDR_OWVAR 28
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// hc_sex := sex_male ;
4204: LD_ADDR_OWVAR 27
4208: PUSH
4209: LD_INT 1
4211: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4212: LD_ADDR_OWVAR 33
4216: PUSH
4217: LD_STRING SecondCharsGal
4219: ST_TO_ADDR
// hc_face_number := 55 ;
4220: LD_ADDR_OWVAR 34
4224: PUSH
4225: LD_INT 55
4227: ST_TO_ADDR
// hc_name := George McCarthy ;
4228: LD_ADDR_OWVAR 26
4232: PUSH
4233: LD_STRING George McCarthy
4235: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4236: LD_ADDR_OWVAR 29
4240: PUSH
4241: LD_INT 11
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4251: LD_ADDR_OWVAR 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 2
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4274: LD_ADDR_OWVAR 31
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 2
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: ST_TO_ADDR
// un = CreateHuman ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: CALL_OW 44
4306: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_INT 23
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL_OW 87
// wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// DialogueOn ;
4338: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_STRING D11d-Sol4-1
4349: PPUSH
4350: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D11d-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// end ; if number = 2 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 2
4377: EQUAL
4378: IFFALSE 4554
// begin hc_class := 1 ;
4380: LD_ADDR_OWVAR 28
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// hc_sex := sex_male ;
4388: LD_ADDR_OWVAR 27
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING AmGalRemake
4403: ST_TO_ADDR
// hc_face_number := 7 ;
4404: LD_ADDR_OWVAR 34
4408: PUSH
4409: LD_INT 7
4411: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING Bobby Jordan
4419: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4420: LD_ADDR_OWVAR 29
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4435: LD_ADDR_OWVAR 30
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4458: LD_ADDR_OWVAR 31
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 24
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 49
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL_OW 87
// DialogueOn ;
4522: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4526: LD_VAR 0 3
4530: PPUSH
4531: LD_STRING D11b-Sol3-1
4533: PPUSH
4534: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4538: LD_EXP 1
4542: PPUSH
4543: LD_STRING D11b-JMM-1
4545: PPUSH
4546: CALL_OW 88
// DialogueOff ;
4550: CALL_OW 7
// end ; if number = 3 then
4554: LD_VAR 0 1
4558: PUSH
4559: LD_INT 3
4561: EQUAL
4562: IFFALSE 4726
// begin hc_class := 1 ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// hc_sex := sex_male ;
4572: LD_ADDR_OWVAR 27
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// hc_gallery := DJ ;
4580: LD_ADDR_OWVAR 33
4584: PUSH
4585: LD_STRING DJ
4587: ST_TO_ADDR
// hc_face_number := 1 ;
4588: LD_ADDR_OWVAR 34
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// hc_name := Darius Dajay ;
4596: LD_ADDR_OWVAR 26
4600: PUSH
4601: LD_STRING Darius Dajay
4603: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4604: LD_ADDR_OWVAR 29
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4619: LD_ADDR_OWVAR 30
4623: PUSH
4624: LD_INT 2
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// un = CreateHuman ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: CALL_OW 44
4674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_INT 25
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 87
// wait ( 0 0$1 ) ;
4699: LD_INT 35
4701: PPUSH
4702: CALL_OW 67
// DialogueOn ;
4706: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_STRING D11f-Sol5-1
4717: PPUSH
4718: CALL_OW 88
// DialogueOff ;
4722: CALL_OW 7
// end ; if number = 4 then
4726: LD_VAR 0 1
4730: PUSH
4731: LD_INT 4
4733: EQUAL
4734: IFFALSE 4871
// begin hc_class := 2 ;
4736: LD_ADDR_OWVAR 28
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// hc_sex := sex_female ;
4744: LD_ADDR_OWVAR 27
4748: PUSH
4749: LD_INT 2
4751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4752: LD_ADDR_OWVAR 33
4756: PUSH
4757: LD_STRING SecondCharsGal
4759: ST_TO_ADDR
// hc_face_number := 46 ;
4760: LD_ADDR_OWVAR 34
4764: PUSH
4765: LD_INT 46
4767: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4768: LD_ADDR_OWVAR 26
4772: PUSH
4773: LD_STRING Sylvia Creak
4775: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4776: LD_ADDR_OWVAR 29
4780: PUSH
4781: LD_INT 10
4783: PUSH
4784: LD_INT 9
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4791: LD_ADDR_OWVAR 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4814: LD_ADDR_OWVAR 31
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
// un = CreateHuman ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: CALL_OW 44
4846: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 26
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 87
// end ; if number = 5 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 5
4878: EQUAL
4879: IFFALSE 5055
// begin hc_class := 1 ;
4881: LD_ADDR_OWVAR 28
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// hc_sex := sex_female ;
4889: LD_ADDR_OWVAR 27
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING SecondCharsGal
4904: ST_TO_ADDR
// hc_face_number := 37 ;
4905: LD_ADDR_OWVAR 34
4909: PUSH
4910: LD_INT 37
4912: ST_TO_ADDR
// hc_name := Malena Johnson ;
4913: LD_ADDR_OWVAR 26
4917: PUSH
4918: LD_STRING Malena Johnson
4920: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4921: LD_ADDR_OWVAR 29
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4936: LD_ADDR_OWVAR 30
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4959: LD_ADDR_OWVAR 31
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: ST_TO_ADDR
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 27
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: CALL_OW 87
// wait ( 0 0$1 ) ;
5016: LD_INT 35
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_STRING D11c-FSol3-1
5034: PPUSH
5035: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D11c-JMM-1
5046: PPUSH
5047: CALL_OW 88
// DialogueOff ;
5051: CALL_OW 7
// end ; if number = 6 then
5055: LD_VAR 0 1
5059: PUSH
5060: LD_INT 6
5062: EQUAL
5063: IFFALSE 5237
// begin hc_class := 1 ;
5065: LD_ADDR_OWVAR 28
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// hc_sex := sex_male ;
5073: LD_ADDR_OWVAR 27
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5081: LD_ADDR_OWVAR 33
5085: PUSH
5086: LD_STRING AmGalRemake
5088: ST_TO_ADDR
// hc_face_number := 1 ;
5089: LD_ADDR_OWVAR 34
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_name := Charles Brown ;
5097: LD_ADDR_OWVAR 26
5101: PUSH
5102: LD_STRING Charles Brown
5104: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5105: LD_ADDR_OWVAR 29
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5120: LD_ADDR_OWVAR 30
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5143: LD_ADDR_OWVAR 31
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 0
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// un = CreateHuman ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 28
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 87
// wait ( 0 0$1 ) ;
5200: LD_INT 35
5202: PPUSH
5203: CALL_OW 67
// DialogueOn ;
5207: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_STRING D4-Sol1-5
5218: PPUSH
5219: CALL_OW 88
// DialogueOff ;
5223: CALL_OW 7
// tempCharles = un ;
5227: LD_ADDR_EXP 13
5231: PUSH
5232: LD_VAR 0 3
5236: ST_TO_ADDR
// end ; if number = 7 then
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 7
5244: EQUAL
5245: IFFALSE 5517
// begin hc_class := 1 ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// hc_sex := sex_female ;
5255: LD_ADDR_OWVAR 27
5259: PUSH
5260: LD_INT 2
5262: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5263: LD_ADDR_OWVAR 33
5267: PUSH
5268: LD_STRING AmGalRemake
5270: ST_TO_ADDR
// hc_face_number := 2 ;
5271: LD_ADDR_OWVAR 34
5275: PUSH
5276: LD_INT 2
5278: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5279: LD_ADDR_OWVAR 26
5283: PUSH
5284: LD_STRING Rebecca Macdonald
5286: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5287: LD_ADDR_OWVAR 29
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5302: LD_ADDR_OWVAR 30
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5325: LD_ADDR_OWVAR 31
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// un = CreateHuman ;
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5358: LD_VAR 0 3
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5373: LD_VAR 0 3
5377: PPUSH
5378: CALL_OW 87
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5389: LD_INT 30
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL_OW 70
5406: IFFALSE 5517
// begin DialogueOn ;
5408: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 250
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 251
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 15
5437: NEG
5438: PPUSH
5439: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 250
5452: PPUSH
5453: LD_VAR 0 3
5457: PPUSH
5458: CALL_OW 251
5462: PPUSH
5463: LD_INT 1
5465: PPUSH
5466: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5470: LD_VAR 0 3
5474: PPUSH
5475: LD_STRING D11a-FSol2-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5486: LD_INT 3
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: CALL_OW 471
// wait ( 0 0$2 ) ;
5498: LD_INT 70
5500: PPUSH
5501: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5505: LD_INT 3
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 472
// end ; end ; if number = 8 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 8
5524: EQUAL
5525: IFFALSE 5681
// begin hc_class := 1 ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// hc_sex := sex_female ;
5535: LD_ADDR_OWVAR 27
5539: PUSH
5540: LD_INT 2
5542: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5543: LD_ADDR_OWVAR 33
5547: PUSH
5548: LD_STRING SecondCharsGal
5550: ST_TO_ADDR
// hc_face_number := 45 ;
5551: LD_ADDR_OWVAR 34
5555: PUSH
5556: LD_INT 45
5558: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5559: LD_ADDR_OWVAR 26
5563: PUSH
5564: LD_STRING Margherite Simpson
5566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5567: LD_ADDR_OWVAR 29
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 10
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5582: LD_ADDR_OWVAR 30
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: LD_INT 2
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5605: LD_ADDR_OWVAR 31
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 0
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// un = CreateHuman ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 44
5637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 33
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 87
// wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_STRING D11e-FSol4-1
5676: PPUSH
5677: CALL_OW 88
// end ; arrivals := arrivals union un ;
5681: LD_ADDR_EXP 44
5685: PUSH
5686: LD_EXP 44
5690: PUSH
5691: LD_VAR 0 3
5695: UNION
5696: ST_TO_ADDR
// end ; end_of_file
5697: LD_VAR 0 2
5701: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// ruAttackers := [ ] ;
5706: LD_ADDR_EXP 47
5710: PUSH
5711: EMPTY
5712: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5713: LD_ADDR_EXP 48
5717: PUSH
5718: EMPTY
5719: ST_TO_ADDR
// if Difficulty < 3 then
5720: LD_OWVAR 67
5724: PUSH
5725: LD_INT 3
5727: LESS
5728: IFFALSE 5745
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5730: LD_INT 130
5732: PPUSH
5733: LD_INT 81
5735: PPUSH
5736: CALL_OW 428
5740: PPUSH
5741: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_EXP 34
5758: PPUSH
5759: LD_EXP 35
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: LD_EXP 34
5792: PPUSH
5793: LD_EXP 35
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 67
5821: PPUSH
5822: LD_EXP 34
5826: PPUSH
5827: LD_EXP 35
5831: PPUSH
5832: CALL_OW 12
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 21
5855: PPUSH
5856: LD_EXP 34
5860: PPUSH
5861: LD_EXP 35
5865: PPUSH
5866: CALL_OW 12
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 17
5889: PPUSH
5890: LD_EXP 34
5894: PPUSH
5895: LD_EXP 35
5899: PPUSH
5900: CALL_OW 12
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_INT 6
5910: PPUSH
5911: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 32
5923: PPUSH
5924: LD_EXP 34
5928: PPUSH
5929: LD_EXP 35
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: LD_INT 4
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL 6957 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6035
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 34
6012: PPUSH
6013: LD_EXP 35
6017: PPUSH
6018: CALL_OW 12
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL 6957 0 6
6033: GO 5994
6035: POP
6036: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6037: LD_ADDR_VAR 0 2
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 21
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 31
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6111
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6085: LD_EXP 34
6089: PPUSH
6090: LD_EXP 35
6094: PPUSH
6095: CALL_OW 12
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: CALL 7067 0 2
6109: GO 6082
6111: POP
6112: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6113: LD_INT 3
6115: PPUSH
6116: LD_INT 32
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7346 0 3
// end ;
6126: LD_VAR 0 1
6130: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: IFFALSE 6236
6161: GO 6163
6163: DISABLE
6164: LD_INT 0
6166: PPUSH
// begin enable ;
6167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6168: LD_ADDR_VAR 0 1
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6234
// if GetFuel ( i ) < 3 then
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 261
6214: PUSH
6215: LD_INT 3
6217: LESS
6218: IFFALSE 6232
// SetFuel ( i , 3 ) ;
6220: LD_VAR 0 1
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 240
6232: GO 6202
6234: POP
6235: POP
// end ;
6236: PPOPN 1
6238: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6239: LD_OWVAR 67
6243: PUSH
6244: LD_INT 1
6246: GREATER
6247: IFFALSE 6816
6249: GO 6251
6251: DISABLE
6252: LD_INT 0
6254: PPUSH
6255: PPUSH
6256: PPUSH
6257: PPUSH
// begin uc_side := 3 ;
6258: LD_ADDR_OWVAR 20
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// uc_nation := 3 ;
6266: LD_ADDR_OWVAR 21
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// for i := 1 to 2 do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_INT 2
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6402
// begin InitHC_All ( ) ;
6290: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_OWVAR 67
6319: ARRAY
6320: PPUSH
6321: CALL_OW 381
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 91
6342: PPUSH
6343: LD_INT 87
6345: PPUSH
6346: LD_INT 3
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6356: LD_ADDR_EXP 48
6360: PUSH
6361: LD_EXP 48
6365: PPUSH
6366: LD_EXP 48
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: PPUSH
6375: LD_VAR 0 2
6379: PPUSH
6380: CALL_OW 1
6384: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_INT 46
6392: PPUSH
6393: LD_INT 78
6395: PPUSH
6396: CALL_OW 114
// end ;
6400: GO 6287
6402: POP
6403: POP
// if Difficulty > 2 then
6404: LD_OWVAR 67
6408: PUSH
6409: LD_INT 2
6411: GREATER
6412: IFFALSE 6544
// begin for i := 1 to 3 do
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 3
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6542
// begin InitHC_All ( ) ;
6430: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_OWVAR 67
6459: ARRAY
6460: PPUSH
6461: CALL_OW 381
// un := CreateHuman ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: LD_INT 91
6482: PPUSH
6483: LD_INT 87
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 0
6491: PPUSH
6492: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6496: LD_ADDR_EXP 48
6500: PUSH
6501: LD_EXP 48
6505: PPUSH
6506: LD_EXP 48
6510: PUSH
6511: LD_INT 1
6513: PLUS
6514: PPUSH
6515: LD_VAR 0 2
6519: PPUSH
6520: CALL_OW 1
6524: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6525: LD_VAR 0 2
6529: PPUSH
6530: LD_INT 89
6532: PPUSH
6533: LD_INT 148
6535: PPUSH
6536: CALL_OW 114
// end ;
6540: GO 6427
6542: POP
6543: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 61
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 49
6561: PUSH
6562: LD_INT 85
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 76
6571: PUSH
6572: LD_INT 99
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_INT 135
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 111
6591: PUSH
6592: LD_INT 155
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 147
6601: PUSH
6602: LD_INT 158
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6617: LD_INT 1050
6619: PPUSH
6620: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_EXP 48
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6807
// begin un := ruAttackersInForest [ i ] ;
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 48
6651: PUSH
6652: LD_VAR 0 1
6656: ARRAY
6657: ST_TO_ADDR
// tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 2
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6673: LD_VAR 0 2
6677: PPUSH
6678: CALL_OW 302
6682: PUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 314
6692: NOT
6693: AND
6694: IFFALSE 6805
// begin if tag <> i then
6696: LD_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: NONEQUAL
6706: IFFALSE 6734
// begin SetTag ( un , i ) ;
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 109
// tag := i ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: LD_VAR 0 1
6731: ST_TO_ADDR
// end else
6732: GO 6766
// begin SetTag ( un , i + 1 ) ;
6734: LD_VAR 0 2
6738: PPUSH
6739: LD_VAR 0 1
6743: PUSH
6744: LD_INT 1
6746: PLUS
6747: PPUSH
6748: CALL_OW 109
// tag := i + 1 ;
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: LD_VAR 0 1
6761: PUSH
6762: LD_INT 1
6764: PLUS
6765: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6766: LD_VAR 0 2
6770: PPUSH
6771: LD_VAR 0 3
6775: PUSH
6776: LD_VAR 0 4
6780: ARRAY
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ARRAY
6796: PUSH
6797: LD_INT 2
6799: ARRAY
6800: PPUSH
6801: CALL_OW 114
// end ; end ;
6805: GO 6639
6807: POP
6808: POP
// until not ruAttackersInForest ;
6809: LD_EXP 48
6813: NOT
6814: IFFALSE 6617
// end ; end_of_file
6816: PPOPN 4
6818: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
// if not characters then
6824: LD_VAR 0 1
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6912
// speaker := characters [ rand ( 1 , characters ) ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 258
6866: PUSH
6867: LD_INT 1
6869: EQUAL
6870: IFFALSE 6888
// Say ( speaker , dialogMID ) else
6872: LD_VAR 0 6
6876: PPUSH
6877: LD_VAR 0 2
6881: PPUSH
6882: CALL_OW 88
6886: GO 6902
// Say ( speaker , dialogFID ) ;
6888: LD_VAR 0 6
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: CALL_OW 88
// result := speaker ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 6
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 4
6916: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
// for i in charactersList do
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: FOR_IN
6932: IFFALSE 6950
// SaveCharacters ( i , ident ) ;
6934: LD_VAR 0 4
6938: PPUSH
6939: LD_VAR 0 2
6943: PPUSH
6944: CALL_OW 38
6948: GO 6931
6950: POP
6951: POP
// end ;
6952: LD_VAR 0 3
6956: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6957: LD_INT 0
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
// for i = 1 to count do
6963: LD_ADDR_VAR 0 8
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_VAR 0 6
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7060
// begin uc_side = side ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// uc_nation = nation ;
6991: LD_ADDR_OWVAR 21
6995: PUSH
6996: LD_VAR 0 2
7000: ST_TO_ADDR
// hc_gallery =  ;
7001: LD_ADDR_OWVAR 33
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// hc_name =  ;
7009: LD_ADDR_OWVAR 26
7013: PUSH
7014: LD_STRING 
7016: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7017: LD_INT 0
7019: PPUSH
7020: LD_VAR 0 5
7024: PPUSH
7025: LD_VAR 0 4
7029: PPUSH
7030: CALL_OW 380
// un = CreateHuman ;
7034: LD_ADDR_VAR 0 10
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7044: LD_VAR 0 10
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 52
// end ;
7058: GO 6978
7060: POP
7061: POP
// end ;
7062: LD_VAR 0 7
7066: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// uc_side := GetSide ( b ) ;
7072: LD_ADDR_OWVAR 20
7076: PUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 255
7086: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7087: LD_ADDR_OWVAR 21
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 248
7101: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_VAR 0 2
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: LD_INT 3
7134: MINUS
7135: ST_TO_ADDR
// if dir < 0 then
7136: LD_VAR 0 5
7140: PUSH
7141: LD_INT 0
7143: LESS
7144: IFFALSE 7160
// dir := 6 + dir ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: LD_INT 6
7153: PUSH
7154: LD_VAR 0 5
7158: PLUS
7159: ST_TO_ADDR
// un := CreateHuman ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: CALL_OW 44
7169: ST_TO_ADDR
// SetDir ( un , dir ) ;
7170: LD_VAR 0 4
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 52
// end ;
7198: LD_VAR 0 3
7202: RET
// export function PrepareDifficulty ; begin
7203: LD_INT 0
7205: PPUSH
// case Difficulty of 1 :
7206: LD_OWVAR 67
7210: PUSH
7211: LD_INT 1
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7238
7219: POP
// begin RuSolMinLevel = 2 ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 2
7227: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7228: LD_ADDR_EXP 35
7232: PUSH
7233: LD_INT 3
7235: ST_TO_ADDR
// end ; 2 :
7236: GO 7299
7238: LD_INT 2
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7265
7246: POP
// begin RuSolMinLevel = 3 ;
7247: LD_ADDR_EXP 34
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7255: LD_ADDR_EXP 35
7259: PUSH
7260: LD_INT 5
7262: ST_TO_ADDR
// end ; 3 .. 4 :
7263: GO 7299
7265: LD_INT 3
7267: DOUBLE
7268: GREATEREQUAL
7269: IFFALSE 7277
7271: LD_INT 4
7273: DOUBLE
7274: LESSEQUAL
7275: IFTRUE 7279
7277: GO 7298
7279: POP
// begin RuSolMinLevel = 4 ;
7280: LD_ADDR_EXP 34
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7288: LD_ADDR_EXP 35
7292: PUSH
7293: LD_INT 6
7295: ST_TO_ADDR
// end ; end ;
7296: GO 7299
7298: POP
// end ;
7299: LD_VAR 0 1
7303: RET
// export function ShowQuery1 ; begin
7304: LD_INT 0
7306: PPUSH
// result := Query ( QKill ) ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_STRING QKill
7314: PPUSH
7315: CALL_OW 97
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 1
7324: RET
// export function ShowQuery2 ; begin
7325: LD_INT 0
7327: PPUSH
// result := Query ( QKill2 ) ;
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_STRING QKill2
7335: PPUSH
7336: CALL_OW 97
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 1
7345: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7352: LD_ADDR_VAR 0 7
7356: PUSH
7357: LD_INT 48
7359: PUSH
7360: LD_INT 49
7362: PUSH
7363: LD_INT 50
7365: PUSH
7366: LD_INT 20
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: LD_INT 51
7374: PUSH
7375: LD_INT 52
7377: PUSH
7378: LD_INT 69
7380: PUSH
7381: LD_INT 39
7383: PUSH
7384: LD_INT 34
7386: PUSH
7387: LD_INT 40
7389: PUSH
7390: LD_INT 53
7392: PUSH
7393: LD_INT 71
7395: PUSH
7396: LD_INT 57
7398: PUSH
7399: LD_INT 58
7401: PUSH
7402: LD_INT 44
7404: PUSH
7405: LD_INT 32
7407: PUSH
7408: LD_INT 27
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 33
7416: PUSH
7417: LD_INT 59
7419: PUSH
7420: LD_INT 54
7422: PUSH
7423: LD_INT 55
7425: PUSH
7426: LD_INT 56
7428: PUSH
7429: LD_INT 63
7431: PUSH
7432: LD_INT 64
7434: PUSH
7435: LD_INT 65
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 31
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// for i = 1 to list do
7487: LD_ADDR_VAR 0 5
7491: PUSH
7492: DOUBLE
7493: LD_INT 1
7495: DEC
7496: ST_TO_ADDR
7497: LD_VAR 0 7
7501: PUSH
7502: FOR_TO
7503: IFFALSE 7575
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7505: LD_VAR 0 7
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 321
7525: PUSH
7526: LD_INT 1
7528: EQUAL
7529: PUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 482
7550: AND
7551: IFFALSE 7573
// AddComResearch ( lab , list [ i ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 7
7562: PUSH
7563: LD_VAR 0 5
7567: ARRAY
7568: PPUSH
7569: CALL_OW 184
7573: GO 7502
7575: POP
7576: POP
// end ;
7577: LD_VAR 0 4
7581: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7587: LD_INT 22
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: PUSH
7618: LD_VAR 0 3
7622: LESSEQUAL
7623: IFFALSE 7731
// begin for i = 1 to vehCount do
7625: LD_ADDR_VAR 0 9
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 3
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7729
// begin weapon := weaponTab [ i ] ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_VAR 0 4
7652: PUSH
7653: LD_VAR 0 9
7657: ARRAY
7658: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 46
7666: EQUAL
7667: IFFALSE 7698
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 24
7676: PPUSH
7677: LD_VAR 0 5
7681: PPUSH
7682: LD_VAR 0 6
7686: PPUSH
7687: LD_VAR 0 10
7691: PPUSH
7692: CALL_OW 185
7696: GO 7727
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_VAR 0 7
7707: PPUSH
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_VAR 0 6
7717: PPUSH
7718: LD_VAR 0 10
7722: PPUSH
7723: CALL_OW 185
// end ;
7727: GO 7640
7729: POP
7730: POP
// end ; end ;
7731: LD_VAR 0 8
7735: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7744: LD_ADDR_VAR 0 8
7748: PUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL_OW 313
7758: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_VAR 0 3
7768: PPUSH
7769: LD_INT 22
7771: PUSH
7772: LD_VAR 0 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: LD_INT 750
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 70
7824: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7825: LD_ADDR_VAR 0 6
7829: PUSH
7830: LD_VAR 0 3
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 21
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1000
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: PPUSH
7882: CALL_OW 70
7886: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7887: LD_VAR 0 6
7891: NOT
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 250
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: NOT
7935: AND
7936: IFFALSE 7940
// exit ;
7938: GO 8098
// if buildingsList and engineerOkInside then
7940: LD_VAR 0 6
7944: PUSH
7945: LD_VAR 0 8
7949: AND
7950: IFFALSE 7961
// ComExitBuilding ( engineerOkInside ) ;
7952: LD_VAR 0 8
7956: PPUSH
7957: CALL_OW 122
// if buildingsList and engineerOkOutside then
7961: LD_VAR 0 6
7965: PUSH
7966: LD_VAR 0 9
7970: AND
7971: IFFALSE 7991
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7973: LD_VAR 0 9
7977: PPUSH
7978: LD_VAR 0 6
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PPUSH
7987: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 0
7998: EQUAL
7999: PUSH
8000: LD_VAR 0 4
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: AND
8009: PUSH
8010: LD_VAR 0 9
8014: AND
8015: IFFALSE 8031
// ComEnterUnit ( engineerOkOutside , depot ) ;
8017: LD_VAR 0 9
8021: PPUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8031: LD_VAR 0 9
8035: PUSH
8036: LD_VAR 0 6
8040: PUSH
8041: LD_INT 0
8043: EQUAL
8044: AND
8045: PUSH
8046: LD_VAR 0 4
8050: AND
8051: IFFALSE 8098
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8053: LD_VAR 0 9
8057: PPUSH
8058: LD_VAR 0 4
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 4
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PPUSH
8076: LD_VAR 0 4
8080: PUSH
8081: LD_INT 3
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 4
8089: PUSH
8090: LD_INT 4
8092: ARRAY
8093: PPUSH
8094: CALL_OW 145
// end ;
8098: LD_VAR 0 5
8102: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8114: LD_ADDR_VAR 0 6
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 1
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 4
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 23
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 24
8153: PUSH
8154: LD_INT 251
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 23
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 70
8230: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8231: LD_ADDR_VAR 0 10
8235: PUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 750
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 70
8307: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8308: LD_ADDR_VAR 0 11
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 1000
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 70
8384: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8385: LD_VAR 0 10
8389: NOT
8390: PUSH
8391: LD_VAR 0 11
8395: NOT
8396: AND
8397: PUSH
8398: LD_VAR 0 6
8402: NOT
8403: AND
8404: IFFALSE 8408
// exit ;
8406: GO 8614
// if damageUnits and sci_list then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_VAR 0 6
8417: AND
8418: IFFALSE 8434
// ComMoveToArea ( damageUnits , healArea ) ;
8420: LD_VAR 0 10
8424: PPUSH
8425: LD_VAR 0 2
8429: PPUSH
8430: CALL_OW 113
// if unitsToHeal and sci_list then
8434: LD_VAR 0 11
8438: PUSH
8439: LD_VAR 0 6
8443: AND
8444: IFFALSE 8455
// ComExitBuilding ( sci_list ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8455: LD_VAR 0 11
8459: PUSH
8460: LD_VAR 0 7
8464: AND
8465: IFFALSE 8485
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8467: LD_VAR 0 7
8471: PPUSH
8472: LD_VAR 0 11
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8485: LD_VAR 0 10
8489: PUSH
8490: LD_INT 0
8492: EQUAL
8493: PUSH
8494: LD_VAR 0 11
8498: PUSH
8499: LD_INT 0
8501: EQUAL
8502: AND
8503: PUSH
8504: LD_VAR 0 7
8508: AND
8509: IFFALSE 8614
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8511: LD_ADDR_VAR 0 12
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_VAR 0 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 30
8540: PUSH
8541: LD_INT 8
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8558: LD_ADDR_VAR 0 13
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 12
8570: PPUSH
8571: CALL_OW 12
8575: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8576: LD_VAR 0 7
8580: PPUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 60
8586: PUSH
8587: EMPTY
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 72
8598: PPUSH
8599: LD_VAR 0 12
8603: PUSH
8604: LD_VAR 0 13
8608: ARRAY
8609: PPUSH
8610: CALL_OW 120
// end ; end ;
8614: LD_VAR 0 5
8618: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
// tmp := [ ] ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: EMPTY
8632: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8633: LD_ADDR_VAR 0 7
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 32
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: ST_TO_ADDR
// if bunkers then
8669: LD_VAR 0 7
8673: IFFALSE 8743
// for i in bunkers do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: LD_VAR 0 7
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8741
// for j in UnitsInside ( i ) do
8688: LD_ADDR_VAR 0 5
8692: PUSH
8693: LD_VAR 0 4
8697: PPUSH
8698: CALL_OW 313
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8737
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8706: LD_ADDR_VAR 0 6
8710: PUSH
8711: LD_VAR 0 6
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_INT 1
8723: PLUS
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 1
8734: ST_TO_ADDR
8735: GO 8703
8737: POP
8738: POP
8739: GO 8685
8741: POP
8742: POP
// if tmp then
8743: LD_VAR 0 6
8747: IFFALSE 8787
// begin ComExitBuilding ( tmp ) ;
8749: LD_VAR 0 6
8753: PPUSH
8754: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8758: LD_VAR 0 6
8762: PPUSH
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 250
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 251
8782: PPUSH
8783: CALL_OW 174
// end ; end ;
8787: LD_VAR 0 3
8791: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// enable ;
8797: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 435
8812: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 34
8832: PUSH
8833: LD_VAR 0 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_VAR 0 3
8860: PPUSH
8861: CALL_OW 435
8865: AND
8866: PUSH
8867: LD_VAR 0 6
8871: AND
8872: IFFALSE 8905
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: LD_VAR 0 6
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: CALL_OW 177
// end ;
8905: LD_VAR 0 4
8909: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8920: LD_ADDR_VAR 0 6
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 56
8944: PUSH
8945: EMPTY
8946: LIST
8947: PUSH
8948: LD_INT 24
8950: PUSH
8951: LD_INT 700
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: LD_INT 60
8963: PUSH
8964: EMPTY
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 2
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 5
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 25
8996: PUSH
8997: LD_INT 8
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 25
9006: PUSH
9007: LD_INT 9
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 70
9032: PUSH
9033: LD_EXP 47
9037: PUSH
9038: LD_EXP 48
9042: UNION
9043: DIFF
9044: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_VAR 0 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: EMPTY
9081: LIST
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 251
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 70
9103: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9104: LD_ADDR_VAR 0 9
9108: PUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 22
9116: PUSH
9117: LD_VAR 0 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 5
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: LD_INT 251
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 70
9173: ST_TO_ADDR
// if barrackList then
9174: LD_VAR 0 9
9178: IFFALSE 9334
// begin if turretList = 0 then
9180: LD_VAR 0 7
9184: PUSH
9185: LD_INT 0
9187: EQUAL
9188: IFFALSE 9226
// begin if soldiersList then
9190: LD_VAR 0 6
9194: IFFALSE 9224
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9196: LD_VAR 0 6
9200: PPUSH
9201: LD_VAR 0 9
9205: PUSH
9206: LD_INT 1
9208: PPUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 12
9218: ARRAY
9219: PPUSH
9220: CALL_OW 120
// end else
9224: GO 9334
// begin for i in barrackList do
9226: LD_ADDR_VAR 0 4
9230: PUSH
9231: LD_VAR 0 9
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9332
// begin if not turretList then
9239: LD_VAR 0 7
9243: NOT
9244: IFFALSE 9250
// exit ;
9246: POP
9247: POP
9248: GO 9334
// insideUnits = UnitsInside ( i ) ;
9250: LD_ADDR_VAR 0 10
9254: PUSH
9255: LD_VAR 0 4
9259: PPUSH
9260: CALL_OW 313
9264: ST_TO_ADDR
// if insideUnits then
9265: LD_VAR 0 10
9269: IFFALSE 9330
// begin tmp := insideUnits [ 1 ] ;
9271: LD_ADDR_VAR 0 8
9275: PUSH
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9285: LD_VAR 0 8
9289: PPUSH
9290: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9294: LD_VAR 0 8
9298: PPUSH
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9312: LD_ADDR_VAR 0 7
9316: PUSH
9317: LD_VAR 0 7
9321: PPUSH
9322: LD_INT 1
9324: PPUSH
9325: CALL_OW 3
9329: ST_TO_ADDR
// end ; end ;
9330: GO 9236
9332: POP
9333: POP
// end ; end ; end ;
9334: LD_VAR 0 3
9338: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9339: LD_INT 0
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 34
9376: PUSH
9377: LD_INT 52
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 69
9393: ST_TO_ADDR
// if not craneList then
9394: LD_VAR 0 8
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9837
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9403: LD_ADDR_VAR 0 9
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_VAR 0 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 3
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 1000
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9460: LD_VAR 0 9
9464: PUSH
9465: LD_VAR 0 8
9469: PPUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 750
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 72
9484: AND
9485: IFFALSE 9520
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9487: LD_VAR 0 8
9491: PPUSH
9492: LD_INT 24
9494: PUSH
9495: LD_INT 750
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 72
9506: PPUSH
9507: LD_VAR 0 9
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: IFFALSE 9584
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9548: LD_VAR 0 8
9552: PPUSH
9553: LD_INT 3
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 750
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 72
9574: PPUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9584: LD_VAR 0 8
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: AND
9598: PUSH
9599: LD_VAR 0 3
9603: AND
9604: IFFALSE 9651
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9606: LD_VAR 0 8
9610: PPUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PPUSH
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 2
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 3
9636: ARRAY
9637: PPUSH
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 4
9645: ARRAY
9646: PPUSH
9647: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9651: LD_ADDR_VAR 0 7
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 34
9685: PUSH
9686: LD_INT 52
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 70
9720: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9721: LD_ADDR_VAR 0 6
9725: PUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 22
9733: PUSH
9734: LD_VAR 0 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 0
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 30
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 70
9779: ST_TO_ADDR
// if crane then
9780: LD_VAR 0 7
9784: IFFALSE 9837
// for i in crane do
9786: LD_ADDR_VAR 0 5
9790: PUSH
9791: LD_VAR 0 7
9795: PUSH
9796: FOR_IN
9797: IFFALSE 9835
// begin if dep then
9799: LD_VAR 0 6
9803: IFFALSE 9819
// ComMoveUnit ( i , dep ) ;
9805: LD_VAR 0 5
9809: PPUSH
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 311
9828: PPUSH
9829: CALL 77781 0 1
// end ;
9833: GO 9796
9835: POP
9836: POP
// end ; end_of_file
9837: LD_VAR 0 4
9841: RET
// export function Action ; begin
9842: LD_INT 0
9844: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9845: LD_INT 66
9847: PPUSH
9848: LD_INT 4
9850: PPUSH
9851: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9855: LD_INT 22
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: PUSH
9884: LD_INT 0
9886: EQUAL
9887: IFFALSE 9901
// SetClass ( JMM , 2 ) ;
9889: LD_EXP 1
9893: PPUSH
9894: LD_INT 2
9896: PPUSH
9897: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9901: LD_STRING M1
9903: PPUSH
9904: CALL_OW 337
// case Difficulty of 1 :
9908: LD_OWVAR 67
9912: PUSH
9913: LD_INT 1
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 9931
9921: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9922: LD_STRING M1-1
9924: PPUSH
9925: CALL_OW 337
9929: GO 9974
9931: LD_INT 2
9933: DOUBLE
9934: EQUAL
9935: IFTRUE 9939
9937: GO 9949
9939: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9940: LD_STRING M1-2
9942: PPUSH
9943: CALL_OW 337
9947: GO 9974
9949: LD_INT 3
9951: DOUBLE
9952: GREATEREQUAL
9953: IFFALSE 9961
9955: LD_INT 4
9957: DOUBLE
9958: LESSEQUAL
9959: IFTRUE 9963
9961: GO 9973
9963: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9964: LD_STRING M1-3
9966: PPUSH
9967: CALL_OW 337
9971: GO 9974
9973: POP
// ChangeMissionObjectives ( M1cont ) ;
9974: LD_STRING M1cont
9976: PPUSH
9977: CALL_OW 337
// wait ( 0 0$2 ) ;
9981: LD_INT 70
9983: PPUSH
9984: CALL_OW 67
// SaveForQuickRestart ;
9988: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9992: LD_INT 525
9994: PPUSH
9995: LD_INT 700
9997: PPUSH
9998: CALL_OW 12
10002: PPUSH
10003: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10007: LD_INT 5
10009: PPUSH
10010: LD_INT 82
10012: PPUSH
10013: LD_INT 38
10015: PPUSH
10016: LD_INT 10
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 56
// wait ( 0 0$14 ) ;
10026: LD_INT 490
10028: PPUSH
10029: CALL_OW 67
// firstCrateSpawn := true ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// end ;
10041: LD_VAR 0 1
10045: RET
// every 0 0$02 trigger firstCrateSpawn do
10046: LD_EXP 40
10050: IFFALSE 10413
10052: GO 10054
10054: DISABLE
// begin if IsOk ( Lisa ) then
10055: LD_EXP 2
10059: PPUSH
10060: CALL_OW 302
10064: IFFALSE 10080
// Say ( Lisa , DR0-Lisa-1 ) else
10066: LD_EXP 2
10070: PPUSH
10071: LD_STRING DR0-Lisa-1
10073: PPUSH
10074: CALL_OW 88
10078: GO 10226
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10080: LD_INT 22
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 26
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 3
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 4
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PUSH
10171: LD_EXP 1
10175: PUSH
10176: LD_EXP 8
10180: PUSH
10181: LD_EXP 5
10185: PUSH
10186: LD_EXP 6
10190: PUSH
10191: LD_EXP 7
10195: PUSH
10196: LD_EXP 4
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: DIFF
10215: PPUSH
10216: LD_STRING DR0-Sol1-1
10218: PPUSH
10219: LD_STRING DR0-Sol1-1
10221: PPUSH
10222: CALL 6819 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10226: LD_INT 22
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 26
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 25
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 25
10271: PUSH
10272: LD_INT 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 25
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_EXP 1
10321: PUSH
10322: LD_EXP 8
10326: PUSH
10327: LD_EXP 5
10331: PUSH
10332: LD_EXP 2
10336: PUSH
10337: LD_EXP 6
10341: PUSH
10342: LD_EXP 7
10346: PUSH
10347: LD_EXP 4
10351: PUSH
10352: LD_EXP 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: DIFF
10367: PPUSH
10368: LD_STRING DR0-Sol2-1
10370: PPUSH
10371: LD_STRING DR0-Sol2-1
10373: PPUSH
10374: CALL 6819 0 3
// if IsOk ( Cyrus ) then
10378: LD_EXP 4
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10401
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10389: LD_EXP 4
10393: PPUSH
10394: LD_STRING DR0-Cyrus-1
10396: PPUSH
10397: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10401: LD_EXP 1
10405: PPUSH
10406: LD_STRING DR0-JMM-1
10408: PPUSH
10409: CALL_OW 88
// end ;
10413: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10414: LD_EXP 5
10418: PPUSH
10419: CALL_OW 302
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 16
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PUSH
10453: LD_INT 0
10455: GREATER
10456: AND
10457: PUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 463
10465: NOT
10466: AND
10467: IFFALSE 10745
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10476: LD_EXP 5
10480: PPUSH
10481: LD_STRING D10-Frank-1
10483: PPUSH
10484: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10488: LD_INT 22
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: PUSH
10568: LD_EXP 1
10572: PUSH
10573: LD_EXP 5
10577: PUSH
10578: LD_EXP 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: DIFF
10588: PPUSH
10589: LD_STRING D10-Sol1-1
10591: PPUSH
10592: LD_STRING D10-FSol1-1
10594: PPUSH
10595: CALL 6819 0 3
// Say ( Frank , D10-Frank-2 ) ;
10599: LD_EXP 5
10603: PPUSH
10604: LD_STRING D10-Frank-2
10606: PPUSH
10607: CALL_OW 88
// if IsOK ( Lisa ) then
10611: LD_EXP 2
10615: PPUSH
10616: CALL_OW 302
10620: IFFALSE 10636
// begin Say ( Lisa , D10-Lisa-2 ) ;
10622: LD_EXP 2
10626: PPUSH
10627: LD_STRING D10-Lisa-2
10629: PPUSH
10630: CALL_OW 88
// end else
10634: GO 10741
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 2
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 25
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: PUSH
10716: LD_EXP 1
10720: PUSH
10721: LD_EXP 5
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: DIFF
10730: PPUSH
10731: LD_STRING D10-Sol1-2
10733: PPUSH
10734: LD_STRING D10-FSol1-2
10736: PPUSH
10737: CALL 6819 0 3
// end ; DialogueOff ;
10741: CALL_OW 7
// end ;
10745: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 463
10753: NOT
10754: IFFALSE 11049
10756: GO 10758
10758: DISABLE
// begin HarrisonSupport ;
10759: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10763: LD_EXP 17
10767: PPUSH
10768: CALL_OW 310
10772: PPUSH
10773: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10777: LD_EXP 17
10781: PPUSH
10782: LD_STRING DEng-Eng1-1
10784: PPUSH
10785: CALL_OW 88
// wait ( 1 1$0 ) ;
10789: LD_INT 2100
10791: PPUSH
10792: CALL_OW 67
// DialogueOn ;
10796: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_STRING DRem-Har-1
10807: PPUSH
10808: CALL_OW 94
// if contactWithRussian = 1 then
10812: LD_EXP 22
10816: PUSH
10817: LD_INT 1
10819: EQUAL
10820: IFFALSE 10836
// begin Say ( JMM , DRem-JMM-1 ) ;
10822: LD_EXP 1
10826: PPUSH
10827: LD_STRING DRem-JMM-1
10829: PPUSH
10830: CALL_OW 88
// end else
10834: GO 10848
// begin Say ( JMM , DRem-JMM-1a ) ;
10836: LD_EXP 1
10840: PPUSH
10841: LD_STRING DRem-JMM-1a
10843: PPUSH
10844: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10848: LD_EXP 14
10852: PPUSH
10853: LD_STRING DRem-Har-2
10855: PPUSH
10856: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10860: LD_STRING DenisInDelta
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 30
10870: PUSH
10871: LD_INT 1
10873: EQUAL
10874: IFFALSE 10890
// begin Say ( JMM , DRem-JMM-2 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING DRem-JMM-2
10883: PPUSH
10884: CALL_OW 88
// end else
10888: GO 10902
// begin Say ( JMM , DRem-JMM-2a ) ;
10890: LD_EXP 1
10894: PPUSH
10895: LD_STRING DRem-JMM-2a
10897: PPUSH
10898: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10902: LD_EXP 14
10906: PPUSH
10907: LD_STRING DRem-Har-3
10909: PPUSH
10910: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING DRem-JMM-3
10921: PPUSH
10922: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10926: LD_EXP 14
10930: PPUSH
10931: LD_STRING DRem-Har-4
10933: PPUSH
10934: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10938: LD_STRING DenisInDelta
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 30
10948: PUSH
10949: LD_INT 1
10951: EQUAL
10952: IFFALSE 11012
// begin Say ( JMM , DRem-JMM-4 ) ;
10954: LD_EXP 1
10958: PPUSH
10959: LD_STRING DRem-JMM-4
10961: PPUSH
10962: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10966: LD_EXP 14
10970: PPUSH
10971: LD_STRING DRem-Har-5
10973: PPUSH
10974: CALL_OW 94
// DialogueOff ;
10978: CALL_OW 7
// wait ( 4 4$00 ) ;
10982: LD_INT 8400
10984: PPUSH
10985: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10989: LD_INT 35
10991: PPUSH
10992: CALL_OW 67
// until not InBattle ( 1 ) ;
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 463
11003: NOT
11004: IFFALSE 10989
// SpawnDenis ;
11006: CALL 11050 0 0
// end else
11010: GO 11049
// begin DialogueOff ;
11012: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11016: LD_INT 36
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11029: LD_INT 15
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11042: LD_STRING MR
11044: PPUSH
11045: CALL_OW 337
// end ; end ;
11049: END
// export function SpawnDenis ; var tmp ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
// PrepareDenis ;
11054: CALL 2199 0 0
// if not Denis then
11058: LD_EXP 9
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11288
// CenterNowOnUnits ( Denis ) ;
11067: LD_EXP 9
11071: PPUSH
11072: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11096: LD_EXP 9
11100: PPUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: LD_EXP 9
11110: PPUSH
11111: CALL_OW 74
11115: PPUSH
11116: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11120: LD_INT 35
11122: PPUSH
11123: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11127: LD_INT 22
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 91
11139: PUSH
11140: LD_EXP 9
11144: PUSH
11145: LD_INT 10
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: IFFALSE 11120
// SetSide ( Denis , 1 ) ;
11163: LD_EXP 9
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 235
// DialogueOn ;
11175: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DDen-Den-1
11186: PPUSH
11187: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11191: LD_EXP 1
11195: PPUSH
11196: LD_STRING DDen-JMM-1
11198: PPUSH
11199: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11203: LD_EXP 9
11207: PPUSH
11208: LD_STRING DDen-Den-2
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11215: LD_EXP 1
11219: PPUSH
11220: LD_STRING DDen-JMM-2
11222: PPUSH
11223: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11227: LD_EXP 9
11231: PPUSH
11232: LD_STRING DDen-Den-3
11234: PPUSH
11235: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11239: LD_EXP 1
11243: PPUSH
11244: LD_STRING DDen-JMM-3
11246: PPUSH
11247: CALL_OW 88
// DialogueOff ;
11251: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11255: LD_INT 36
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11268: LD_INT 15
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11281: LD_STRING MR
11283: PPUSH
11284: CALL_OW 337
// end ;
11288: LD_VAR 0 1
11292: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11293: LD_INT 22
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 15
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: PUSH
11322: LD_EXP 9
11326: PPUSH
11327: CALL_OW 302
11331: AND
11332: PUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 463
11340: NOT
11341: AND
11342: IFFALSE 11371
11344: GO 11346
11346: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11347: LD_EXP 9
11351: PPUSH
11352: LD_STRING DR1-Den-1
11354: PPUSH
11355: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11359: LD_EXP 1
11363: PPUSH
11364: LD_STRING DR1-JMM-1
11366: PPUSH
11367: CALL_OW 88
// end ;
11371: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11372: LD_INT 15
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 321
11382: PUSH
11383: LD_INT 2
11385: EQUAL
11386: PUSH
11387: LD_EXP 9
11391: PPUSH
11392: CALL_OW 302
11396: AND
11397: PUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 463
11405: NOT
11406: AND
11407: IFFALSE 11639
11409: GO 11411
11411: DISABLE
// begin DialogueOn ;
11412: CALL_OW 6
// if IsOK ( Denis ) then
11416: LD_EXP 9
11420: PPUSH
11421: CALL_OW 302
11425: IFFALSE 11441
// Say ( Denis , DR2-Den-1 ) else
11427: LD_EXP 9
11431: PPUSH
11432: LD_STRING DR2-Den-1
11434: PPUSH
11435: CALL_OW 88
11439: GO 11500
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11441: LD_INT 22
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 25
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_EXP 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: DIFF
11489: PPUSH
11490: LD_STRING DR2-Sci1-1
11492: PPUSH
11493: LD_STRING DR2-FSci1-1
11495: PPUSH
11496: CALL 6819 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11500: LD_EXP 1
11504: PPUSH
11505: LD_STRING DR2-JMM-1
11507: PPUSH
11508: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11512: LD_INT 22
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 3
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: LD_EXP 1
11596: PUSH
11597: LD_EXP 9
11601: PUSH
11602: LD_EXP 8
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: DIFF
11612: PPUSH
11613: LD_STRING DR2-Sol1-1
11615: PPUSH
11616: LD_STRING DR2-Sol1-11
11618: PPUSH
11619: CALL 6819 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11623: LD_EXP 1
11627: PPUSH
11628: LD_STRING DR2-JMM-2
11630: PPUSH
11631: CALL_OW 88
// DialogueOff ;
11635: CALL_OW 7
// end ;
11639: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11640: LD_INT 22
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 36
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: PUSH
11669: LD_INT 0
11671: EQUAL
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 21
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 33
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PUSH
11713: LD_INT 0
11715: GREATER
11716: AND
11717: PUSH
11718: LD_EXP 23
11722: PUSH
11723: LD_INT 0
11725: EQUAL
11726: AND
11727: PUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 463
11735: NOT
11736: AND
11737: IFFALSE 11874
11739: GO 11741
11741: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11742: LD_INT 22
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: PUSH
11793: LD_EXP 1
11797: PUSH
11798: LD_EXP 6
11802: PUSH
11803: LD_EXP 7
11807: PUSH
11808: LD_EXP 9
11812: PUSH
11813: LD_EXP 15
11817: PUSH
11818: LD_EXP 3
11822: PUSH
11823: LD_EXP 4
11827: PUSH
11828: LD_EXP 2
11832: PUSH
11833: LD_EXP 5
11837: PUSH
11838: LD_EXP 8
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: DIFF
11855: PPUSH
11856: LD_STRING D3a-Mech1-1
11858: PPUSH
11859: LD_STRING D3a-Mech1-1
11861: PPUSH
11862: CALL 6819 0 3
// firstTower = 2 ;
11866: LD_ADDR_EXP 23
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// end ;
11874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11875: LD_INT 22
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: PUSH
11904: LD_INT 0
11906: EQUAL
11907: IFFALSE 12022
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12020
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 7500
12013: PPUSH
12014: CALL_OW 591
12018: GO 12000
12020: POP
12021: POP
// end ;
12022: PPOPN 1
12024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12025: LD_INT 22
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 36
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 33
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: AND
12094: PUSH
12095: CALL 12647 0 0
12099: AND
12100: PUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 463
12108: NOT
12109: AND
12110: IFFALSE 12644
12112: GO 12114
12114: DISABLE
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 36
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12156: LD_ADDR_VAR 0 4
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12201: LD_ADDR_VAR 0 5
12205: PUSH
12206: EMPTY
12207: ST_TO_ADDR
// for i in tmpControlTowers do
12208: LD_ADDR_VAR 0 1
12212: PUSH
12213: LD_VAR 0 3
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12642
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 310
12230: PUSH
12231: LD_VAR 0 1
12235: EQUAL
12236: PUSH
12237: LD_EXP 1
12241: PPUSH
12242: CALL_OW 257
12246: PUSH
12247: LD_INT 3
12249: EQUAL
12250: AND
12251: IFFALSE 12385
// begin InGameOn ;
12253: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12257: LD_VAR 0 4
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING D4a-JMM-1
12277: PPUSH
12278: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12282: LD_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_EXP 1
12295: PPUSH
12296: CALL_OW 53
// wait ( 0 0$1 ) ;
12300: LD_INT 35
12302: PPUSH
12303: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: CALL_OW 250
12329: PUSH
12330: LD_INT 3
12332: PLUS
12333: PPUSH
12334: LD_VAR 0 4
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: PPUSH
12343: CALL_OW 251
12347: PUSH
12348: LD_INT 2
12350: MINUS
12351: PPUSH
12352: CALL_OW 111
// wait ( 0 0$2 ) ;
12356: LD_INT 70
12358: PPUSH
12359: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12363: LD_EXP 1
12367: PPUSH
12368: LD_STRING D4b-JMM-1
12370: PPUSH
12371: CALL_OW 88
// InGameOff ;
12375: CALL_OW 9
// exit ;
12379: POP
12380: POP
12381: GO 12644
// end else
12383: GO 12640
// begin InGameOn ;
12385: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12389: LD_ADDR_VAR 0 5
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 313
12403: PPUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PPUSH
12414: CALL_OW 72
12418: ST_TO_ADDR
// if not tmpMechanicInside then
12419: LD_VAR 0 5
12423: NOT
12424: IFFALSE 12428
// continue ;
12426: GO 12218
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: PPUSH
12437: CALL_OW 258
12441: PUSH
12442: LD_INT 1
12444: EQUAL
12445: IFFALSE 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: LD_STRING D4a-Mech1-1
12458: PPUSH
12459: CALL_OW 88
12463: GO 12481
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12465: LD_VAR 0 5
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: LD_STRING D4a-FMech1-1
12476: PPUSH
12477: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12481: LD_VAR 0 4
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 5
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: CALL_OW 53
// wait ( 0 0$1 ) ;
12516: LD_INT 35
12518: PPUSH
12519: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12523: LD_VAR 0 4
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PPUSH
12541: CALL_OW 250
12545: PUSH
12546: LD_INT 3
12548: PLUS
12549: PPUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 251
12563: PUSH
12564: LD_INT 2
12566: MINUS
12567: PPUSH
12568: CALL_OW 111
// wait ( 0 0$2 ) ;
12572: LD_INT 70
12574: PPUSH
12575: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 258
12592: PUSH
12593: LD_INT 1
12595: EQUAL
12596: IFFALSE 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12598: LD_VAR 0 5
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: LD_STRING D4b-Mech1-1
12609: PPUSH
12610: CALL_OW 88
12614: GO 12632
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12616: LD_VAR 0 5
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_STRING D4b-FMech1-1
12627: PPUSH
12628: CALL_OW 88
// InGameOff ;
12632: CALL_OW 9
// exit ;
12636: POP
12637: POP
12638: GO 12644
// end ; end ;
12640: GO 12218
12642: POP
12643: POP
// end ;
12644: PPOPN 5
12646: END
// function CheckMehInside ; var i , j , tmp ; begin
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
// result := false ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 30
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 4
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12768
// for i in tmp do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12766
// for j in UnitsInside ( i ) do
12717: LD_ADDR_VAR 0 3
12721: PUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: FOR_IN
12733: IFFALSE 12762
// if GetClass ( j ) = class_mechanic then
12735: LD_VAR 0 3
12739: PPUSH
12740: CALL_OW 257
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 12760
// begin result := true ;
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// break ;
12758: GO 12762
// end ;
12760: GO 12732
12762: POP
12763: POP
12764: GO 12714
12766: POP
12767: POP
// end ;
12768: LD_VAR 0 1
12772: RET
// every 12 12$0 do
12773: GO 12775
12775: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12776: LD_INT 35
12778: PPUSH
12779: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 463
12790: NOT
12791: PUSH
12792: LD_INT 32
12794: PPUSH
12795: LD_INT 81
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 70
12809: NOT
12810: AND
12811: IFFALSE 12776
// PrepareKurt ;
12813: CALL 15237 0 0
// end ;
12817: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12818: LD_EXP 15
12822: PPUSH
12823: CALL_OW 302
12827: PUSH
12828: LD_EXP 15
12832: PPUSH
12833: CALL_OW 255
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: AND
12842: PUSH
12843: LD_EXP 2
12847: AND
12848: IFFALSE 13013
12850: GO 12852
12852: DISABLE
// begin wait ( 0 0$50 ) ;
12853: LD_INT 1750
12855: PPUSH
12856: CALL_OW 67
// if not IsOk ( Joan ) then
12860: LD_EXP 15
12864: PPUSH
12865: CALL_OW 302
12869: NOT
12870: IFFALSE 12874
// exit ;
12872: GO 13013
// if IsOK ( Lisa ) then
12874: LD_EXP 2
12878: PPUSH
12879: CALL_OW 302
12883: IFFALSE 13013
// begin DialogueOn ;
12885: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12889: LD_EXP 2
12893: PPUSH
12894: LD_STRING D7-Lisa-1
12896: PPUSH
12897: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12901: LD_EXP 1
12905: PPUSH
12906: LD_STRING D7-JMM-1
12908: PPUSH
12909: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12913: LD_EXP 2
12917: PPUSH
12918: LD_STRING D7-Lisa-2
12920: PPUSH
12921: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12925: LD_EXP 1
12929: PPUSH
12930: LD_STRING D7-JMM-2
12932: PPUSH
12933: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12937: LD_EXP 2
12941: PPUSH
12942: LD_STRING D7-Lisa-3
12944: PPUSH
12945: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12949: LD_EXP 1
12953: PPUSH
12954: LD_STRING D7-JMM-3
12956: PPUSH
12957: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12961: LD_EXP 2
12965: PPUSH
12966: LD_STRING D7-Lisa-4
12968: PPUSH
12969: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12973: LD_EXP 1
12977: PPUSH
12978: LD_STRING D7-JMM-4
12980: PPUSH
12981: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12985: LD_EXP 1
12989: PPUSH
12990: LD_STRING D7-JMM-4a
12992: PPUSH
12993: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12997: LD_EXP 2
13001: PPUSH
13002: LD_STRING D7-Lisa-5
13004: PPUSH
13005: CALL_OW 88
// DialogueOff ;
13009: CALL_OW 7
// end ; end ;
13013: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13014: LD_EXP 13
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 91
13031: PUSH
13032: LD_EXP 13
13036: PUSH
13037: LD_INT 10
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 25
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: LD_INT 1
13107: GREATER
13108: AND
13109: IFFALSE 13126
13111: GO 13113
13113: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13114: LD_EXP 13
13118: PPUSH
13119: LD_STRING D5-Sol1-1
13121: PPUSH
13122: CALL_OW 88
13126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13127: LD_INT 22
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: PUSH
13156: LD_INT 2
13158: GREATEREQUAL
13159: IFFALSE 13179
13161: GO 13163
13163: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13164: LD_STRING MRa
13166: PPUSH
13167: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13171: LD_ADDR_EXP 28
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end ;
13179: END
// every 2 2$00 do var i , last ;
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
// begin last := 8 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_INT 8
13194: ST_TO_ADDR
// for i = 1 to last do
13195: LD_ADDR_VAR 0 1
13199: PUSH
13200: DOUBLE
13201: LD_INT 1
13203: DEC
13204: ST_TO_ADDR
13205: LD_VAR 0 2
13209: PUSH
13210: FOR_TO
13211: IFFALSE 13239
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13213: LD_INT 6300
13215: PPUSH
13216: LD_INT 12600
13218: PPUSH
13219: CALL_OW 12
13223: PPUSH
13224: CALL_OW 67
// PrepareRandoms ( i ) ;
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL 4126 0 1
// end ;
13237: GO 13210
13239: POP
13240: POP
// end ;
13241: PPOPN 2
13243: END
// every 5 5$20 do
13244: GO 13246
13246: DISABLE
// begin DialogueOn ;
13247: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13251: LD_EXP 10
13255: PPUSH
13256: LD_STRING D12a-Sci-1
13258: PPUSH
13259: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13263: LD_EXP 1
13267: PPUSH
13268: LD_STRING D12a-JMM-1
13270: PPUSH
13271: CALL_OW 88
// DialogueOff ;
13275: CALL_OW 7
// cratesStatus = 1 ;
13279: LD_ADDR_EXP 38
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// end ;
13287: END
// every 13 13$0 do
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13295: LD_EXP 10
13299: PPUSH
13300: LD_STRING D12b-Sci-1
13302: PPUSH
13303: CALL_OW 94
// DialogueOff ;
13307: CALL_OW 7
// cratesStatus = 2 ;
13311: LD_ADDR_EXP 38
13315: PUSH
13316: LD_INT 2
13318: ST_TO_ADDR
// end ;
13319: END
// every 32 32$0 do
13320: GO 13322
13322: DISABLE
// begin DialogueOn ;
13323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13327: LD_EXP 10
13331: PPUSH
13332: LD_STRING D12c-Sci-1
13334: PPUSH
13335: CALL_OW 94
// DialogueOff ;
13339: CALL_OW 7
// wait ( 3 3$0 ) ;
13343: LD_INT 6300
13345: PPUSH
13346: CALL_OW 67
// DialogueOn ;
13350: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13354: LD_EXP 10
13358: PPUSH
13359: LD_STRING D12d-Sci-1
13361: PPUSH
13362: CALL_OW 94
// DialogueOff ;
13366: CALL_OW 7
// cratesStatus = 1 ;
13370: LD_ADDR_EXP 38
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13378: CALL 19357 0 0
// wait ( 2 2$30 ) ;
13382: LD_INT 5250
13384: PPUSH
13385: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13389: LD_INT 35
13391: PPUSH
13392: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 463
13403: NOT
13404: PUSH
13405: LD_INT 32
13407: PPUSH
13408: LD_INT 81
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 70
13422: NOT
13423: AND
13424: IFFALSE 13389
// PrepareJoan ;
13426: CALL 3034 0 0
// end ;
13430: END
// every 42 42$0 do
13431: GO 13433
13433: DISABLE
// begin DialogueOn ;
13434: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13438: LD_EXP 10
13442: PPUSH
13443: LD_STRING D12e-Sci-1
13445: PPUSH
13446: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13450: LD_EXP 1
13454: PPUSH
13455: LD_STRING D12e-JMM-1
13457: PPUSH
13458: CALL_OW 88
// DialogueOff ;
13462: CALL_OW 7
// cratesStatus := 2 ;
13466: LD_ADDR_EXP 38
13470: PUSH
13471: LD_INT 2
13473: ST_TO_ADDR
// end ; end_of_file
13474: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13475: LD_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: PUSH
13484: LD_VAR 0 2
13488: PUSH
13489: LD_INT 3
13491: EQUAL
13492: AND
13493: IFFALSE 13503
// contactWithRussian := 1 ;
13495: LD_ADDR_EXP 22
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// end ;
13503: PPOPN 2
13505: END
// on BuildingComplete ( building ) do var i ;
13506: LD_INT 0
13508: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 266
13518: PUSH
13519: LD_INT 36
13521: EQUAL
13522: PUSH
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 23
13542: PUSH
13543: LD_INT 0
13545: EQUAL
13546: AND
13547: IFFALSE 13627
// begin firstTower = 1 ;
13549: LD_ADDR_EXP 23
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 26
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_EXP 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: DIFF
13616: PPUSH
13617: LD_STRING D3b-Mech1-1
13619: PPUSH
13620: LD_STRING D3b-Mech1-1
13622: PPUSH
13623: CALL 6819 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 255
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: AND
13655: IFFALSE 13669
// SetBName ( building , theta ) ;
13657: LD_VAR 0 1
13661: PPUSH
13662: LD_STRING theta
13664: PPUSH
13665: CALL_OW 500
// if GetSide ( building ) = 3 then
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 255
13678: PUSH
13679: LD_INT 3
13681: EQUAL
13682: IFFALSE 13722
// begin for i := 1 to 4 do
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: DOUBLE
13690: LD_INT 1
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 4
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13720
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13700: LD_ADDR_EXP 31
13704: PUSH
13705: LD_EXP 31
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 3
13717: ST_TO_ADDR
13718: GO 13697
13720: POP
13721: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: LD_INT 3
13734: EQUAL
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 266
13745: PUSH
13746: LD_INT 0
13748: EQUAL
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: PUSH
13760: LD_INT 2
13762: EQUAL
13763: OR
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 266
13774: PUSH
13775: LD_INT 4
13777: EQUAL
13778: OR
13779: PUSH
13780: EMPTY
13781: LIST
13782: AND
13783: IFFALSE 13794
// ComUpgrade ( building ) ;
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13794: LD_VAR 0 1
13798: PPUSH
13799: CALL_OW 255
13803: PUSH
13804: LD_INT 3
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 266
13817: PUSH
13818: LD_INT 32
13820: EQUAL
13821: AND
13822: IFFALSE 13863
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 42
13831: PUSH
13832: LD_INT 43
13834: PUSH
13835: LD_INT 44
13837: PUSH
13838: LD_INT 46
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: PPUSH
13859: CALL_OW 208
// end ;
13863: PPOPN 2
13865: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: IN
13911: IFFALSE 13927
// killCounter := killCounter + 1 ;
13913: LD_ADDR_EXP 45
13917: PUSH
13918: LD_EXP 45
13922: PUSH
13923: LD_INT 1
13925: PLUS
13926: ST_TO_ADDR
// if unit in ruAttackersInForest then
13927: LD_VAR 0 1
13931: PUSH
13932: LD_EXP 48
13936: IN
13937: IFFALSE 13955
// ruAttackersInForest := ruAttackersInForest diff unit ;
13939: LD_ADDR_EXP 48
13943: PUSH
13944: LD_EXP 48
13948: PUSH
13949: LD_VAR 0 1
13953: DIFF
13954: ST_TO_ADDR
// if unit in ruAttackers then
13955: LD_VAR 0 1
13959: PUSH
13960: LD_EXP 47
13964: IN
13965: IFFALSE 13983
// ruAttackers := ruAttackers diff unit ;
13967: LD_ADDR_EXP 47
13971: PUSH
13972: LD_EXP 47
13976: PUSH
13977: LD_VAR 0 1
13981: DIFF
13982: ST_TO_ADDR
// if unit = JMM then
13983: LD_VAR 0 1
13987: PUSH
13988: LD_EXP 1
13992: EQUAL
13993: IFFALSE 14002
// YouLost ( JMM ) ;
13995: LD_STRING JMM
13997: PPUSH
13998: CALL_OW 104
// if unit = Joan then
14002: LD_VAR 0 1
14006: PUSH
14007: LD_EXP 15
14011: EQUAL
14012: IFFALSE 14022
// JoanStatus := 0 ;
14014: LD_ADDR_EXP 16
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 255
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: PUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 247
14045: PUSH
14046: LD_INT 1
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 248
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: IFFALSE 14081
// unitLost = unitLost + 1 ;
14067: LD_ADDR_EXP 30
14071: PUSH
14072: LD_EXP 30
14076: PUSH
14077: LD_INT 1
14079: PLUS
14080: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 255
14090: PUSH
14091: LD_INT 3
14093: EQUAL
14094: PUSH
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 247
14104: PUSH
14105: LD_INT 3
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 266
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: LD_INT 5
14125: PUSH
14126: LD_INT 32
14128: PUSH
14129: LD_INT 31
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: IN
14138: AND
14139: IFFALSE 14225
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14141: LD_ADDR_EXP 31
14145: PUSH
14146: LD_EXP 31
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 266
14160: ADD
14161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14162: LD_ADDR_EXP 31
14166: PUSH
14167: LD_EXP 31
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: ADD
14182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14183: LD_ADDR_EXP 31
14187: PUSH
14188: LD_EXP 31
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 251
14202: ADD
14203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14204: LD_ADDR_EXP 31
14208: PUSH
14209: LD_EXP 31
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 254
14223: ADD
14224: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14225: LD_EXP 46
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 257
14239: PUSH
14240: LD_INT 3
14242: EQUAL
14243: AND
14244: PUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 255
14254: PUSH
14255: LD_INT 3
14257: EQUAL
14258: AND
14259: PUSH
14260: LD_INT 21
14262: PPUSH
14263: CALL_OW 302
14267: AND
14268: PUSH
14269: LD_INT 21
14271: PPUSH
14272: CALL_OW 255
14276: PUSH
14277: LD_INT 3
14279: EQUAL
14280: AND
14281: IFFALSE 14363
// begin ruMechCounter := ruMechCounter - 1 ;
14283: LD_ADDR_EXP 46
14287: PUSH
14288: LD_EXP 46
14292: PUSH
14293: LD_INT 1
14295: MINUS
14296: ST_TO_ADDR
// uc_side := 3 ;
14297: LD_ADDR_OWVAR 20
14301: PUSH
14302: LD_INT 3
14304: ST_TO_ADDR
// uc_nation := 3 ;
14305: LD_ADDR_OWVAR 21
14309: PUSH
14310: LD_INT 3
14312: ST_TO_ADDR
// hc_gallery :=  ;
14313: LD_ADDR_OWVAR 33
14317: PUSH
14318: LD_STRING 
14320: ST_TO_ADDR
// hc_name :=  ;
14321: LD_ADDR_OWVAR 26
14325: PUSH
14326: LD_STRING 
14328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14329: LD_INT 0
14331: PPUSH
14332: LD_EXP 34
14336: PPUSH
14337: LD_EXP 35
14341: PPUSH
14342: CALL_OW 12
14346: PPUSH
14347: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14351: CALL_OW 44
14355: PPUSH
14356: LD_INT 21
14358: PPUSH
14359: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 255
14372: PUSH
14373: LD_INT 3
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 264
14386: PUSH
14387: LD_INT 52
14389: EQUAL
14390: AND
14391: PUSH
14392: LD_INT 21
14394: PPUSH
14395: CALL_OW 302
14399: AND
14400: PUSH
14401: LD_INT 21
14403: PPUSH
14404: CALL_OW 255
14408: PUSH
14409: LD_INT 3
14411: EQUAL
14412: AND
14413: IFFALSE 14434
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14415: LD_INT 21
14417: PPUSH
14418: LD_INT 22
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 52
14429: PPUSH
14430: CALL_OW 125
// end ;
14434: PPOPN 1
14436: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 255
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 264
14465: PUSH
14466: LD_INT 51
14468: PUSH
14469: LD_INT 52
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: IN
14476: NOT
14477: AND
14478: IFFALSE 14509
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14480: LD_ADDR_EXP 47
14484: PUSH
14485: LD_EXP 47
14489: PPUSH
14490: LD_EXP 47
14494: PUSH
14495: LD_INT 1
14497: PLUS
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 1
14508: ST_TO_ADDR
// end ;
14509: PPOPN 5
14511: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 255
14521: PUSH
14522: LD_INT 3
14524: EQUAL
14525: IFFALSE 14556
// begin tamedApemans = tamedApemans + 1 ;
14527: LD_ADDR_EXP 32
14531: PUSH
14532: LD_EXP 32
14536: PUSH
14537: LD_INT 1
14539: PLUS
14540: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: LD_INT 106
14548: PPUSH
14549: LD_INT 85
14551: PPUSH
14552: CALL_OW 111
// end ; end ;
14556: PPOPN 2
14558: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 3
14571: EQUAL
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 255
14582: PUSH
14583: LD_INT 3
14585: EQUAL
14586: AND
14587: PUSH
14588: LD_INT 21
14590: PPUSH
14591: CALL_OW 302
14595: AND
14596: IFFALSE 14610
// ComEnterUnit ( human , rufab ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_INT 21
14605: PPUSH
14606: CALL_OW 120
// end ;
14610: PPOPN 4
14612: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 21
14620: EQUAL
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 255
14631: PUSH
14632: LD_INT 3
14634: EQUAL
14635: AND
14636: IFFALSE 14650
// SetLives ( human , 1000 ) ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_INT 1000
14645: PPUSH
14646: CALL_OW 234
// end ;
14650: PPOPN 2
14652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL 34698 0 1
// end ; end_of_file
14662: PPOPN 1
14664: END
// every 0 0$30 trigger cratesStatus = 1 do
14665: LD_EXP 38
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: IFFALSE 14726
14675: GO 14677
14677: DISABLE
// begin enable ;
14678: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14679: LD_INT 350
14681: PUSH
14682: LD_INT 875
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 12
14699: ARRAY
14700: PPUSH
14701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14705: LD_INT 1
14707: PPUSH
14708: LD_INT 5
14710: PPUSH
14711: CALL_OW 12
14715: PPUSH
14716: LD_INT 7
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 55
// end ;
14726: END
// every 1 1$0 trigger cratesStatus = 2 do
14727: LD_EXP 38
14731: PUSH
14732: LD_INT 2
14734: EQUAL
14735: IFFALSE 14818
14737: GO 14739
14739: DISABLE
// begin enable ;
14740: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14741: LD_INT 3150
14743: PUSH
14744: LD_INT 4550
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 12
14761: ARRAY
14762: PPUSH
14763: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14767: LD_INT 2
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 1
14779: PPUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 12
14787: ARRAY
14788: PPUSH
14789: LD_INT 6
14791: PUSH
14792: LD_INT 7
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 1
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 12
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 55
// end ;
14818: END
// every 0 0$30 + 0 0$10 do
14819: GO 14821
14821: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14822: LD_INT 4
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 1
14834: PPUSH
14835: LD_INT 2
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: PPUSH
14844: LD_INT 7
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 55
// Wait ( 0 0$15 ) ;
14854: LD_INT 525
14856: PPUSH
14857: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14861: LD_INT 4
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 12
14881: ARRAY
14882: PPUSH
14883: LD_INT 7
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 55
// Wait ( 0 0$20 ) ;
14893: LD_INT 700
14895: PPUSH
14896: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 1
14912: PPUSH
14913: LD_INT 2
14915: PPUSH
14916: CALL_OW 12
14920: ARRAY
14921: PPUSH
14922: LD_INT 7
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 55
// end ; end_of_file
14932: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14933: LD_EXP 24
14937: PUSH
14938: LD_INT 1
14940: EQUAL
14941: IFFALSE 15234
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
// begin enable ;
14951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 0
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// for i in tmp do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_VAR 0 2
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15059
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 274
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 275
15055: PLUS
15056: ST_TO_ADDR
15057: GO 15025
15059: POP
15060: POP
// strings = [ ] ;
15061: LD_ADDR_EXP 27
15065: PUSH
15066: EMPTY
15067: ST_TO_ADDR
// if tmp = 0 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 0
15075: EQUAL
15076: IFFALSE 15101
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: LD_EXP 27
15087: PUSH
15088: LD_STRING #Am06-1
15090: PUSH
15091: LD_EXP 25
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ADD
15100: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15101: LD_VAR 0 2
15105: PUSH
15106: LD_EXP 25
15110: PUSH
15111: LD_VAR 0 3
15115: GREATER
15116: AND
15117: IFFALSE 15148
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15119: LD_ADDR_EXP 27
15123: PUSH
15124: LD_EXP 27
15128: PUSH
15129: LD_STRING #Am06-1
15131: PUSH
15132: LD_EXP 25
15136: PUSH
15137: LD_VAR 0 3
15141: MINUS
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ADD
15147: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15148: LD_VAR 0 2
15152: PUSH
15153: LD_EXP 25
15157: PUSH
15158: LD_VAR 0 3
15162: LESSEQUAL
15163: AND
15164: IFFALSE 15187
// strings = strings ^ [ #Am06-1 , 0 ] ;
15166: LD_ADDR_EXP 27
15170: PUSH
15171: LD_EXP 27
15175: PUSH
15176: LD_STRING #Am06-1
15178: PUSH
15179: LD_INT 0
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: ADD
15186: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15187: LD_ADDR_EXP 26
15191: PUSH
15192: LD_EXP 26
15196: PUSH
15197: LD_INT 35
15199: MINUS
15200: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15201: LD_ADDR_EXP 27
15205: PUSH
15206: LD_EXP 27
15210: PUSH
15211: LD_STRING #Am06-2
15213: PUSH
15214: LD_EXP 26
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ADD
15223: ST_TO_ADDR
// display_strings = strings ;
15224: LD_ADDR_OWVAR 47
15228: PUSH
15229: LD_EXP 27
15233: ST_TO_ADDR
// end ; end_of_file
15234: PPOPN 3
15236: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// until depot ;
15305: LD_VAR 0 3
15309: IFFALSE 15246
// repeat wait ( 0 0$1 ) ;
15311: LD_INT 35
15313: PPUSH
15314: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 91
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 25
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 25
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: LD_INT 54
15418: PUSH
15419: EMPTY
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 55
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_EXP 2
15456: PUSH
15457: LD_EXP 3
15461: PUSH
15462: LD_EXP 4
15466: PUSH
15467: LD_EXP 5
15471: PUSH
15472: LD_EXP 7
15476: PUSH
15477: LD_EXP 8
15481: PUSH
15482: LD_EXP 9
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: LD_EXP 44
15500: ADD
15501: DIFF
15502: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15503: LD_VAR 0 4
15507: PUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 463
15515: NOT
15516: AND
15517: IFFALSE 15311
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15519: LD_ADDR_VAR 0 4
15523: PUSH
15524: LD_VAR 0 4
15528: PUSH
15529: LD_INT 1
15531: PPUSH
15532: LD_VAR 0 4
15536: PPUSH
15537: CALL_OW 12
15541: ARRAY
15542: ST_TO_ADDR
// blockSpawn := 1 ;
15543: LD_ADDR_EXP 29
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_side := 2 ;
15551: LD_ADDR_OWVAR 20
15555: PUSH
15556: LD_INT 2
15558: ST_TO_ADDR
// uc_nation := 2 ;
15559: LD_ADDR_OWVAR 21
15563: PUSH
15564: LD_INT 2
15566: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_STRING Kurt
15574: PPUSH
15575: LD_INT 0
15577: PPUSH
15578: LD_STRING 
15580: PPUSH
15581: CALL 39232 0 3
15585: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15586: LD_EXP 19
15590: PPUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: CALL_OW 250
15600: PPUSH
15601: LD_VAR 0 4
15605: PPUSH
15606: CALL_OW 251
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 50
// InGameOn ;
15621: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15625: LD_EXP 19
15629: PPUSH
15630: CALL_OW 87
// wait ( 0 0$2 ) ;
15634: LD_INT 70
15636: PPUSH
15637: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15641: LD_EXP 19
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15655: LD_VAR 0 4
15659: PPUSH
15660: LD_EXP 19
15664: PPUSH
15665: CALL_OW 112
// wait ( 0 0$1 ) ;
15669: LD_INT 35
15671: PPUSH
15672: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_EXP 19
15685: PPUSH
15686: CALL_OW 119
// DialogueOn ;
15690: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15694: LD_EXP 19
15698: PPUSH
15699: LD_STRING D2-Kurt-1
15701: PPUSH
15702: CALL_OW 88
// if tmp = JMM then
15706: LD_VAR 0 4
15710: PUSH
15711: LD_EXP 1
15715: EQUAL
15716: IFFALSE 15808
// begin Say ( JMM , D2-JMM-1 ) ;
15718: LD_EXP 1
15722: PPUSH
15723: LD_STRING D2-JMM-1
15725: PPUSH
15726: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15730: LD_EXP 19
15734: PPUSH
15735: LD_STRING D2-Kurt-2
15737: PPUSH
15738: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15742: LD_EXP 1
15746: PPUSH
15747: LD_STRING D2-JMM-2
15749: PPUSH
15750: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15754: LD_EXP 19
15758: PPUSH
15759: LD_STRING D2-Kurt-3
15761: PPUSH
15762: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15766: LD_EXP 1
15770: PPUSH
15771: LD_STRING D2-JMM-3
15773: PPUSH
15774: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15778: LD_EXP 19
15782: PPUSH
15783: LD_STRING D2-Kurt-4
15785: PPUSH
15786: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15790: LD_EXP 1
15794: PPUSH
15795: LD_STRING D2-JMM-4
15797: PPUSH
15798: CALL_OW 88
// DialogueOff ;
15802: CALL_OW 7
// end else
15806: GO 16036
// begin if GetSex ( tmp ) = 1 then
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 258
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: IFFALSE 15837
// Say ( tmp , D2-Sol1-1 ) else
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_STRING D2-Sol1-1
15830: PPUSH
15831: CALL_OW 88
15835: GO 15849
// Say ( tmp , D2-FSol1-1 ) ;
15837: LD_VAR 0 4
15841: PPUSH
15842: LD_STRING D2-FSol1-1
15844: PPUSH
15845: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15849: LD_EXP 19
15853: PPUSH
15854: LD_STRING D2-Kurt-2
15856: PPUSH
15857: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15861: LD_VAR 0 4
15865: PPUSH
15866: CALL_OW 258
15870: PUSH
15871: LD_INT 1
15873: EQUAL
15874: IFFALSE 15890
// Say ( tmp , D2-Sol1-2 ) else
15876: LD_VAR 0 4
15880: PPUSH
15881: LD_STRING D2-Sol1-2
15883: PPUSH
15884: CALL_OW 88
15888: GO 15902
// Say ( tmp , D2-FSol1-2 ) ;
15890: LD_VAR 0 4
15894: PPUSH
15895: LD_STRING D2-FSol1-2
15897: PPUSH
15898: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15902: LD_EXP 19
15906: PPUSH
15907: LD_STRING D2-Kurt-3
15909: PPUSH
15910: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15914: LD_VAR 0 4
15918: PPUSH
15919: CALL_OW 258
15923: PUSH
15924: LD_INT 1
15926: EQUAL
15927: IFFALSE 15943
// Say ( tmp , D2-Sol1-3 ) else
15929: LD_VAR 0 4
15933: PPUSH
15934: LD_STRING D2-Sol1-3
15936: PPUSH
15937: CALL_OW 88
15941: GO 15955
// Say ( tmp , D2-FSol1-3 ) ;
15943: LD_VAR 0 4
15947: PPUSH
15948: LD_STRING D2-FSol1-3
15950: PPUSH
15951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15955: LD_EXP 19
15959: PPUSH
15960: LD_STRING D2-Kurt-4
15962: PPUSH
15963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15967: LD_VAR 0 4
15971: PPUSH
15972: CALL_OW 258
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: IFFALSE 16008
// begin Say ( tmp , D2-Sol1-4 ) ;
15982: LD_VAR 0 4
15986: PPUSH
15987: LD_STRING D2-Sol1-4
15989: PPUSH
15990: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_STRING D2-Sol1-5
16001: PPUSH
16002: CALL_OW 88
// end else
16006: GO 16032
// begin Say ( tmp , D2-FSol1-4 ) ;
16008: LD_VAR 0 4
16012: PPUSH
16013: LD_STRING D2-FSol1-4
16015: PPUSH
16016: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16020: LD_VAR 0 4
16024: PPUSH
16025: LD_STRING D2-FSol1-5
16027: PPUSH
16028: CALL_OW 88
// end ; DialogueOff ;
16032: CALL_OW 7
// end ; dec := ShowQuery1 ;
16036: LD_ADDR_VAR 0 6
16040: PUSH
16041: CALL 7304 0 0
16045: ST_TO_ADDR
// if dec = 1 then
16046: LD_VAR 0 6
16050: PUSH
16051: LD_INT 1
16053: EQUAL
16054: IFFALSE 16116
// begin DialogueOn ;
16056: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16060: LD_EXP 19
16064: PPUSH
16065: LD_STRING D2a-Kurt-1
16067: PPUSH
16068: CALL_OW 88
// DialogueOff ;
16072: CALL_OW 7
// InGameOff ;
16076: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16080: LD_INT 1
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: LD_INT 2
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16096: LD_EXP 19
16100: PPUSH
16101: LD_INT 8
16103: PPUSH
16104: CALL_OW 113
// readyToEscape := 1 ;
16108: LD_ADDR_EXP 21
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// end ; if dec = 2 then
16116: LD_VAR 0 6
16120: PUSH
16121: LD_INT 2
16123: EQUAL
16124: IFFALSE 16592
// begin DialogueOn ;
16126: CALL_OW 6
// if tmp = JMM then
16130: LD_VAR 0 4
16134: PUSH
16135: LD_EXP 1
16139: EQUAL
16140: IFFALSE 16196
// begin Say ( JMM , D2b-JMM-1 ) ;
16142: LD_EXP 1
16146: PPUSH
16147: LD_STRING D2b-JMM-1
16149: PPUSH
16150: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16154: LD_EXP 19
16158: PPUSH
16159: LD_STRING D2b-Kurt-1
16161: PPUSH
16162: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16166: LD_EXP 1
16170: PPUSH
16171: LD_STRING D2b-JMM-2
16173: PPUSH
16174: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16178: LD_EXP 19
16182: PPUSH
16183: LD_STRING D2b-Kurt-2
16185: PPUSH
16186: CALL_OW 88
// DialogueOff ;
16190: CALL_OW 7
// end else
16194: GO 16347
// begin if GetSex ( tmp ) = 1 then
16196: LD_VAR 0 4
16200: PPUSH
16201: CALL_OW 258
16205: PUSH
16206: LD_INT 1
16208: EQUAL
16209: IFFALSE 16225
// Say ( tmp , D2b-Sol1-1 ) else
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_STRING D2b-Sol1-1
16218: PPUSH
16219: CALL_OW 88
16223: GO 16237
// Say ( tmp , D2b-FSol1-1 ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_STRING D2b-FSol1-1
16232: PPUSH
16233: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16237: LD_EXP 19
16241: PPUSH
16242: LD_STRING D2b-Kurt-1
16244: PPUSH
16245: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16249: LD_VAR 0 4
16253: PPUSH
16254: CALL_OW 258
16258: PUSH
16259: LD_INT 1
16261: EQUAL
16262: IFFALSE 16278
// Say ( tmp , D2b-Sol1-2 ) else
16264: LD_VAR 0 4
16268: PPUSH
16269: LD_STRING D2b-Sol1-2
16271: PPUSH
16272: CALL_OW 88
16276: GO 16290
// Say ( tmp , D2b-FSol1-2 ) ;
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_STRING D2b-FSol1-2
16285: PPUSH
16286: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16290: LD_EXP 19
16294: PPUSH
16295: LD_STRING D2b-Kurt-2
16297: PPUSH
16298: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16302: LD_VAR 0 4
16306: PPUSH
16307: CALL_OW 258
16311: PUSH
16312: LD_INT 1
16314: EQUAL
16315: IFFALSE 16331
// Say ( tmp , D2c-Sol1-2 ) else
16317: LD_VAR 0 4
16321: PPUSH
16322: LD_STRING D2c-Sol1-2
16324: PPUSH
16325: CALL_OW 88
16329: GO 16343
// Say ( tmp , D2c-FSol1-2 ) ;
16331: LD_VAR 0 4
16335: PPUSH
16336: LD_STRING D2c-FSol1-2
16338: PPUSH
16339: CALL_OW 88
// DialogueOff ;
16343: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16347: LD_ADDR_VAR 0 7
16351: PUSH
16352: CALL 7325 0 0
16356: ST_TO_ADDR
// if dec2 = 1 then
16357: LD_VAR 0 7
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: IFFALSE 16427
// begin DialogueOn ;
16367: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16371: LD_EXP 19
16375: PPUSH
16376: LD_STRING D2a-Kurt-1
16378: PPUSH
16379: CALL_OW 88
// DialogueOff ;
16383: CALL_OW 7
// InGameOff ;
16387: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16391: LD_INT 1
16393: PPUSH
16394: LD_INT 2
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16407: LD_EXP 19
16411: PPUSH
16412: LD_INT 8
16414: PPUSH
16415: CALL_OW 113
// readyToEscape := 1 ;
16419: LD_ADDR_EXP 21
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if dec2 = 2 then
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16592
// begin if tmp = JMM then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 1
16446: EQUAL
16447: IFFALSE 16507
// begin DialogueOn ;
16449: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16453: LD_EXP 1
16457: PPUSH
16458: LD_STRING D2c-JMM-1
16460: PPUSH
16461: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16465: LD_EXP 19
16469: PPUSH
16470: LD_STRING D2c-Kurt-1
16472: PPUSH
16473: CALL_OW 88
// DialogueOff ;
16477: CALL_OW 7
// InGameOff ;
16481: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16485: LD_EXP 19
16489: PPUSH
16490: LD_INT 8
16492: PPUSH
16493: CALL_OW 113
// readyToEscape := 1 ;
16497: LD_ADDR_EXP 21
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end else
16505: GO 16592
// begin DialogueOn ;
16507: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16511: LD_VAR 0 4
16515: PPUSH
16516: CALL_OW 258
16520: PUSH
16521: LD_INT 1
16523: EQUAL
16524: IFFALSE 16540
// Say ( tmp , D2c-Sol1-1 ) else
16526: LD_VAR 0 4
16530: PPUSH
16531: LD_STRING D2c-Sol1-1
16533: PPUSH
16534: CALL_OW 88
16538: GO 16552
// Say ( tmp , D2c-FSol1-1 ) ;
16540: LD_VAR 0 4
16544: PPUSH
16545: LD_STRING D2c-FSol1-1
16547: PPUSH
16548: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16552: LD_EXP 19
16556: PPUSH
16557: LD_STRING D2c-Kurt-1
16559: PPUSH
16560: CALL_OW 88
// DialogueOff ;
16564: CALL_OW 7
// InGameOff ;
16568: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16572: LD_EXP 19
16576: PPUSH
16577: LD_INT 8
16579: PPUSH
16580: CALL_OW 113
// readyToEscape := 1 ;
16584: LD_ADDR_EXP 21
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16592: LD_VAR 0 6
16596: PUSH
16597: LD_INT 3
16599: EQUAL
16600: IFFALSE 16761
// begin DialogueOn ;
16602: CALL_OW 6
// if tmp = JMM then
16606: LD_VAR 0 4
16610: PUSH
16611: LD_EXP 1
16615: EQUAL
16616: IFFALSE 16676
// begin DialogueOn ;
16618: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2c-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING D2c-Kurt-1
16641: PPUSH
16642: CALL_OW 88
// DialogueOff ;
16646: CALL_OW 7
// InGameOff ;
16650: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16654: LD_EXP 19
16658: PPUSH
16659: LD_INT 8
16661: PPUSH
16662: CALL_OW 113
// readyToEscape := 1 ;
16666: LD_ADDR_EXP 21
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// end else
16674: GO 16761
// begin DialogueOn ;
16676: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16680: LD_VAR 0 4
16684: PPUSH
16685: CALL_OW 258
16689: PUSH
16690: LD_INT 1
16692: EQUAL
16693: IFFALSE 16709
// Say ( tmp , D2c-Sol1-1 ) else
16695: LD_VAR 0 4
16699: PPUSH
16700: LD_STRING D2c-Sol1-1
16702: PPUSH
16703: CALL_OW 88
16707: GO 16721
// Say ( tmp , D2c-FSol1-1 ) ;
16709: LD_VAR 0 4
16713: PPUSH
16714: LD_STRING D2c-FSol1-1
16716: PPUSH
16717: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16721: LD_EXP 19
16725: PPUSH
16726: LD_STRING D2c-Kurt-1
16728: PPUSH
16729: CALL_OW 88
// DialogueOff ;
16733: CALL_OW 7
// InGameOff ;
16737: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16741: LD_EXP 19
16745: PPUSH
16746: LD_INT 8
16748: PPUSH
16749: CALL_OW 113
// readyToEscape := 1 ;
16753: LD_ADDR_EXP 21
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16761: LD_ADDR_EXP 29
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16776: LD_EXP 19
16780: PPUSH
16781: LD_INT 8
16783: PPUSH
16784: CALL_OW 308
16788: PUSH
16789: LD_EXP 21
16793: AND
16794: PUSH
16795: LD_EXP 19
16799: PPUSH
16800: CALL_OW 301
16804: OR
16805: IFFALSE 16769
// if IsDead ( Kurt ) then
16807: LD_EXP 19
16811: PPUSH
16812: CALL_OW 301
16816: IFFALSE 16820
// exit ;
16818: GO 16875
// RemoveUnit ( Kurt ) ;
16820: LD_EXP 19
16824: PPUSH
16825: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16829: LD_EXP 19
16833: PPUSH
16834: LD_STRING Kurt
16836: PPUSH
16837: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 2
16846: PPUSH
16847: CALL_OW 81
16851: PUSH
16852: LD_INT 0
16854: EQUAL
16855: IFFALSE 16867
// kurtStatus = 1 else
16857: LD_ADDR_EXP 20
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
16865: GO 16875
// kurtStatus = 2 ;
16867: LD_ADDR_EXP 20
16871: PUSH
16872: LD_INT 2
16874: ST_TO_ADDR
// end ; end_of_file
16875: LD_VAR 0 1
16879: RET
// every 0 0$2 do
16880: GO 16882
16882: DISABLE
// begin enable ;
16883: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16884: LD_INT 3
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: LD_INT 10
16892: PPUSH
16893: LD_EXP 31
16897: PPUSH
16898: CALL 7736 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16902: LD_INT 3
16904: PPUSH
16905: LD_INT 12
16907: PPUSH
16908: LD_EXP 31
16912: PPUSH
16913: CALL 9339 0 3
// if disableHealAI = 0 then
16917: LD_EXP 33
16921: PUSH
16922: LD_INT 0
16924: EQUAL
16925: IFFALSE 16946
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 9
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_INT 32
16938: PUSH
16939: EMPTY
16940: LIST
16941: PPUSH
16942: CALL 8103 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 51
16951: PPUSH
16952: LD_INT 6
16954: PPUSH
16955: CALL 8792 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 303
16966: PUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_INT 1
16977: EQUAL
16978: OR
16979: IFFALSE 16993
// DefendDepot ( 3 , rudepo ) else
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL 8619 0 2
16991: GO 17003
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16993: LD_INT 3
16995: PPUSH
16996: LD_INT 10
16998: PPUSH
16999: CALL 8910 0 2
// end ;
17003: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17004: LD_INT 22
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 55
17026: PUSH
17027: EMPTY
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: LD_INT 34
17035: PUSH
17036: LD_INT 51
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: LD_INT 0
17060: EQUAL
17061: PUSH
17062: LD_INT 21
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 3
17072: EQUAL
17073: AND
17074: PUSH
17075: LD_INT 21
17077: PPUSH
17078: CALL_OW 302
17082: AND
17083: PUSH
17084: LD_INT 2
17086: PPUSH
17087: CALL_OW 255
17091: PUSH
17092: LD_INT 3
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 2
17099: PPUSH
17100: CALL_OW 302
17104: AND
17105: PUSH
17106: LD_INT 21
17108: PPUSH
17109: CALL_OW 313
17113: AND
17114: PUSH
17115: LD_EXP 47
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 6
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_OWVAR 67
17142: ARRAY
17143: LESS
17144: AND
17145: IFFALSE 17366
17147: GO 17149
17149: DISABLE
// begin enable ;
17150: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17151: LD_INT 2
17153: PPUSH
17154: CALL_OW 274
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 2000
17164: PPUSH
17165: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17169: LD_INT 3
17171: PPUSH
17172: LD_INT 21
17174: PPUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: LD_INT 6
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_OWVAR 67
17197: ARRAY
17198: PUSH
17199: LD_EXP 47
17203: MINUS
17204: PPUSH
17205: LD_INT 43
17207: PUSH
17208: LD_INT 43
17210: PUSH
17211: LD_INT 44
17213: PUSH
17214: LD_INT 44
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 43
17225: PUSH
17226: LD_INT 43
17228: PUSH
17229: LD_INT 43
17231: PUSH
17232: LD_INT 44
17234: PUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 46
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 43
17251: PUSH
17252: LD_INT 43
17254: PUSH
17255: LD_INT 43
17257: PUSH
17258: LD_INT 44
17260: PUSH
17261: LD_INT 44
17263: PUSH
17264: LD_INT 46
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 43
17277: PUSH
17278: LD_INT 43
17280: PUSH
17281: LD_INT 44
17283: PUSH
17284: LD_INT 46
17286: PUSH
17287: LD_INT 46
17289: PUSH
17290: LD_INT 46
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_OWVAR 67
17311: ARRAY
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 24
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ARRAY
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 24
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: LD_OWVAR 67
17360: ARRAY
17361: PPUSH
17362: CALL 7582 0 7
// end ;
17366: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17367: LD_INT 17
17369: PPUSH
17370: CALL_OW 255
17374: PUSH
17375: LD_INT 3
17377: EQUAL
17378: PUSH
17379: LD_INT 17
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_INT 2
17390: PPUSH
17391: CALL_OW 255
17395: PUSH
17396: LD_INT 3
17398: EQUAL
17399: AND
17400: PUSH
17401: LD_INT 2
17403: PPUSH
17404: CALL_OW 302
17408: AND
17409: PUSH
17410: LD_EXP 47
17414: PUSH
17415: LD_INT 4
17417: PUSH
17418: LD_INT 5
17420: PUSH
17421: LD_INT 6
17423: PUSH
17424: LD_INT 7
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: LESS
17439: AND
17440: IFFALSE 17488
17442: GO 17444
17444: DISABLE
// begin enable ;
17445: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17446: LD_INT 17
17448: PPUSH
17449: LD_INT 22
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 42
17460: PUSH
17461: LD_INT 43
17463: PUSH
17464: LD_INT 44
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: PPUSH
17484: CALL_OW 185
// end ;
17488: END
// every 2 2$0 do var i , j ;
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17496: LD_INT 14700
17498: PUSH
17499: LD_INT 33600
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 12
17516: ARRAY
17517: PPUSH
17518: CALL_OW 67
// disableHealAI = 1 ;
17522: LD_ADDR_EXP 33
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17578
// ComExitBuilding ( i ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 122
17576: GO 17564
17578: POP
17579: POP
// wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 4
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17706
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_INT 17
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 25
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 70
17667: PUSH
17668: FOR_IN
17669: IFFALSE 17702
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 250
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 251
17695: PPUSH
17696: CALL_OW 191
17700: GO 17668
17702: POP
17703: POP
17704: GO 17628
17706: POP
17707: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 4
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: PUSH
17737: LD_INT 0
17739: EQUAL
17740: PUSH
17741: LD_EXP 32
17745: PUSH
17746: LD_INT 6
17748: PUSH
17749: LD_INT 7
17751: PUSH
17752: LD_INT 8
17754: PUSH
17755: LD_INT 8
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: LD_OWVAR 67
17768: ARRAY
17769: GREATEREQUAL
17770: OR
17771: PUSH
17772: LD_INT 17
17774: PPUSH
17775: LD_INT 22
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 12
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 70
17803: PUSH
17804: LD_INT 0
17806: EQUAL
17807: OR
17808: IFFALSE 17587
// disableHealAI = 0 ;
17810: LD_ADDR_EXP 33
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 12
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17869
// SetClass ( i , 16 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 16
17862: PPUSH
17863: CALL_OW 336
17867: GO 17852
17869: POP
17870: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 25
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PUSH
17905: FOR_IN
17906: IFFALSE 17922
// ComEnterUnit ( i , rulab ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 32
17915: PPUSH
17916: CALL_OW 120
17920: GO 17905
17922: POP
17923: POP
// end ; end_of_file
17924: PPOPN 2
17926: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17927: LD_EXP 26
17931: PUSH
17932: LD_INT 0
17934: LESSEQUAL
17935: IFFALSE 18084
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// for i in tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18052
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 274
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 275
18048: PLUS
18049: ST_TO_ADDR
18050: GO 18018
18052: POP
18053: POP
// if yourCrates >= needCrates then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_EXP 25
18063: GREATEREQUAL
18064: IFFALSE 18077
// FinishMission ( yourCrates ) else
18066: LD_VAR 0 3
18070: PPUSH
18071: CALL 18087 0 1
18075: GO 18084
// YouLost ( matmin ) ;
18077: LD_STRING matmin
18079: PPUSH
18080: CALL_OW 104
// end ;
18084: PPOPN 3
18086: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// if killCounter = 0 then
18093: LD_EXP 45
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: IFFALSE 18110
// SetAchievement ( ACH_SURV ) ;
18103: LD_STRING ACH_SURV
18105: PPUSH
18106: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PUSH
18139: LD_INT 0
18141: EQUAL
18142: IFFALSE 18158
// begin wait ( 3 ) ;
18144: LD_INT 3
18146: PPUSH
18147: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18151: LD_STRING ACH_BASEDESTROYER
18153: PPUSH
18154: CALL_OW 543
// end ; m1 := false ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// m2 := false ;
18166: LD_ADDR_VAR 0 4
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// m3 := false ;
18174: LD_ADDR_VAR 0 5
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// if crates + 100 > crates then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 100
18189: PLUS
18190: PUSH
18191: LD_VAR 0 1
18195: GREATER
18196: IFFALSE 18228
// begin AddMedal ( cans , 1 ) ;
18198: LD_STRING cans
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_STRING 06_crates_1
18213: PPUSH
18214: CALL_OW 39
// m1 := true ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
// end else
18226: GO 18249
// begin AddMedal ( cans , - 1 ) ;
18228: LD_STRING cans
18230: PPUSH
18231: LD_INT 1
18233: NEG
18234: PPUSH
18235: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18239: LD_INT 0
18241: PPUSH
18242: LD_STRING 06_crates_1
18244: PPUSH
18245: CALL_OW 39
// end ; if unitLost < 3 then
18249: LD_EXP 30
18253: PUSH
18254: LD_INT 3
18256: LESS
18257: IFFALSE 18279
// begin AddMedal ( people , 1 ) ;
18259: LD_STRING people
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 101
// m2 := true ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_INT 1
18276: ST_TO_ADDR
// end else
18277: GO 18290
// AddMedal ( people , - 1 ) ;
18279: LD_STRING people
18281: PPUSH
18282: LD_INT 1
18284: NEG
18285: PPUSH
18286: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18290: LD_EXP 28
18294: PPUSH
18295: LD_STRING 06_remoteVehs_1
18297: PPUSH
18298: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18302: LD_EXP 28
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18332
// begin AddMedal ( remote , 1 ) ;
18312: LD_STRING remote
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// m3 := true ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// end else
18330: GO 18372
// begin if GetTech ( 18 , 1 ) = state_enabled then
18332: LD_INT 18
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 321
18342: PUSH
18343: LD_INT 1
18345: EQUAL
18346: IFFALSE 18361
// AddMedal ( remote , - 1 ) else
18348: LD_STRING remote
18350: PPUSH
18351: LD_INT 1
18353: NEG
18354: PPUSH
18355: CALL_OW 101
18359: GO 18372
// AddMedal ( remote , - 2 ) ;
18361: LD_STRING remote
18363: PPUSH
18364: LD_INT 2
18366: NEG
18367: PPUSH
18368: CALL_OW 101
// end ; if m1 and m2 and m3 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_VAR 0 4
18381: AND
18382: PUSH
18383: LD_VAR 0 5
18387: AND
18388: IFFALSE 18404
// begin wait ( 3 ) ;
18390: LD_INT 3
18392: PPUSH
18393: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18397: LD_STRING ACH_ASPEED_6
18399: PPUSH
18400: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18404: LD_OWVAR 67
18408: PUSH
18409: LD_INT 3
18411: GREATEREQUAL
18412: PUSH
18413: LD_VAR 0 3
18417: AND
18418: PUSH
18419: LD_VAR 0 4
18423: AND
18424: PUSH
18425: LD_VAR 0 5
18429: AND
18430: IFFALSE 18442
// SetAchievementEX ( ACH_AMER , 6 ) ;
18432: LD_STRING ACH_AMER
18434: PPUSH
18435: LD_INT 6
18437: PPUSH
18438: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18442: LD_EXP 20
18446: PPUSH
18447: LD_STRING 06_KurtStatus_1
18449: PPUSH
18450: CALL_OW 39
// GiveMedals ( Main ) ;
18454: LD_STRING Main
18456: PPUSH
18457: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18461: LD_INT 22
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 50
18483: PUSH
18484: EMPTY
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 4
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PPUSH
18548: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18552: LD_EXP 1
18556: PPUSH
18557: LD_EXP 42
18561: PUSH
18562: LD_STRING JMM
18564: STR
18565: PPUSH
18566: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18570: LD_EXP 2
18574: PPUSH
18575: LD_EXP 42
18579: PUSH
18580: LD_STRING Lisa
18582: STR
18583: PPUSH
18584: CALL 6917 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18588: LD_EXP 3
18592: PPUSH
18593: LD_EXP 42
18597: PUSH
18598: LD_STRING Bobby
18600: STR
18601: PPUSH
18602: CALL 6917 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18606: LD_EXP 4
18610: PPUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_STRING Cyrus
18618: STR
18619: PPUSH
18620: CALL 6917 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18624: LD_EXP 5
18628: PPUSH
18629: LD_EXP 42
18633: PUSH
18634: LD_STRING Frank
18636: STR
18637: PPUSH
18638: CALL 6917 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18642: LD_EXP 6
18646: PPUSH
18647: LD_EXP 42
18651: PUSH
18652: LD_STRING Brown
18654: STR
18655: PPUSH
18656: CALL 6917 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18660: LD_EXP 7
18664: PPUSH
18665: LD_EXP 42
18669: PUSH
18670: LD_STRING Donaldson
18672: STR
18673: PPUSH
18674: CALL 6917 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18678: LD_EXP 8
18682: PPUSH
18683: LD_EXP 42
18687: PUSH
18688: LD_STRING Gladstone
18690: STR
18691: PPUSH
18692: CALL 6917 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18696: LD_EXP 9
18700: PPUSH
18701: LD_EXP 42
18705: PUSH
18706: LD_STRING Denis
18708: STR
18709: PPUSH
18710: CALL 6917 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18714: LD_EXP 15
18718: PPUSH
18719: LD_EXP 42
18723: PUSH
18724: LD_STRING Joan
18726: STR
18727: PPUSH
18728: CALL 6917 0 2
// if IsLive ( Joan ) then
18732: LD_EXP 15
18736: PPUSH
18737: CALL_OW 300
18741: IFFALSE 18755
// SaveCharacters ( Joan , Joan ) ;
18743: LD_EXP 15
18747: PPUSH
18748: LD_STRING Joan
18750: PPUSH
18751: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18755: LD_EXP 16
18759: PPUSH
18760: LD_STRING 06_JoanStatus_1
18762: PPUSH
18763: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18767: LD_INT 50
18769: PUSH
18770: EMPTY
18771: LIST
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PUSH
18854: LD_EXP 1
18858: PUSH
18859: LD_EXP 2
18863: PUSH
18864: LD_EXP 3
18868: PUSH
18869: LD_EXP 4
18873: PUSH
18874: LD_EXP 5
18878: PUSH
18879: LD_EXP 6
18883: PUSH
18884: LD_EXP 7
18888: PUSH
18889: LD_EXP 8
18893: PUSH
18894: LD_EXP 9
18898: PUSH
18899: LD_EXP 15
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: DIFF
18916: PPUSH
18917: LD_STRING 06_other_survivors
18919: PPUSH
18920: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18924: LD_INT 50
18926: PUSH
18927: EMPTY
18928: LIST
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 12
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PPUSH
18989: LD_STRING 06_other_apemans
18991: PPUSH
18992: CALL_OW 38
// YouWin ;
18996: CALL_OW 103
// end ; end_of_file
19000: LD_VAR 0 2
19004: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19005: LD_EXP 47
19009: PUSH
19010: LD_OWVAR 1
19014: PUSH
19015: LD_INT 23100
19017: PUSH
19018: LD_INT 21000
19020: PUSH
19021: LD_INT 18900
19023: PUSH
19024: LD_INT 16800
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: PUSH
19033: LD_OWVAR 67
19037: ARRAY
19038: GREATER
19039: AND
19040: IFFALSE 19354
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
// begin enable ;
19051: ENABLE
// for i in ruAttackers do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 47
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19352
// begin if not IsDrivenBy ( i ) then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 311
19074: NOT
19075: IFFALSE 19079
// continue ;
19077: GO 19062
// if i mod 2 = 0 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 2
19086: MOD
19087: PUSH
19088: LD_INT 0
19090: EQUAL
19091: IFFALSE 19146
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_INT 91
19100: PUSH
19101: LD_INT 52
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 82
19110: PUSH
19111: LD_INT 34
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 90
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 80
19130: PUSH
19131: LD_INT 12
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 19208
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_INT 91
19153: PUSH
19154: LD_INT 52
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 68
19163: PUSH
19164: LD_INT 46
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 48
19173: PUSH
19174: LD_INT 43
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 33
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 19
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 256
19217: PUSH
19218: LD_INT 1000
19220: EQUAL
19221: IFFALSE 19239
// AgressiveMove ( i , path ) else
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL 78565 0 2
19237: GO 19350
// if GetLives ( i ) < 650 then
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 256
19248: PUSH
19249: LD_INT 650
19251: LESS
19252: IFFALSE 19350
// begin if not IsInArea ( i , russianRepairArea ) then
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 12
19261: PPUSH
19262: CALL_OW 308
19266: NOT
19267: IFFALSE 19336
// begin SetTag ( i , 0 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 261
19290: PUSH
19291: LD_INT 50
19293: LESS
19294: PUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL_OW 302
19302: AND
19303: IFFALSE 19319
// ComMoveUnit ( i , rufab ) else
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_INT 21
19312: PPUSH
19313: CALL_OW 112
19317: GO 19334
// ComMoveXY ( i , 121 , 99 ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_INT 121
19326: PPUSH
19327: LD_INT 99
19329: PPUSH
19330: CALL_OW 111
// end else
19334: GO 19350
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 311
19345: PPUSH
19346: CALL 77661 0 1
// end ; end ;
19350: GO 19062
19352: POP
19353: POP
// end ;
19354: PPOPN 4
19356: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: LD_INT 6
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: LD_OWVAR 67
19394: ARRAY
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19572
// begin uc_side := 3 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 3
19406: ST_TO_ADDR
// uc_nation := 3 ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 3
19414: ST_TO_ADDR
// InitHC_All ( ) ;
19415: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19419: LD_INT 0
19421: PPUSH
19422: LD_INT 4
19424: PUSH
19425: LD_INT 5
19427: PUSH
19428: LD_INT 6
19430: PUSH
19431: LD_INT 6
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_OWVAR 67
19444: ARRAY
19445: PPUSH
19446: CALL_OW 381
// un := CreateHuman ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: CALL_OW 44
19459: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 127
19467: PPUSH
19468: LD_INT 62
19470: PPUSH
19471: LD_INT 3
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_EXP 48
19490: PPUSH
19491: LD_EXP 48
19495: PUSH
19496: LD_INT 1
19498: PLUS
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: CALL_OW 1
19509: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 83
19517: PPUSH
19518: LD_INT 49
19520: PPUSH
19521: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19525: LD_VAR 0 3
19529: PPUSH
19530: LD_INT 49
19532: PPUSH
19533: LD_INT 43
19535: PPUSH
19536: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 31
19547: PPUSH
19548: LD_INT 15
19550: PPUSH
19551: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 63
19562: PPUSH
19563: LD_INT 9
19565: PPUSH
19566: CALL_OW 174
// end ;
19570: GO 19396
19572: POP
19573: POP
// end ; end_of_file
19574: LD_VAR 0 1
19578: RET
// export function CreateNature ; var i , un ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// for i := 1 to Difficulty + 2 do
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_OWVAR 67
19598: PUSH
19599: LD_INT 2
19601: PLUS
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19713
// begin hc_sex := sex_male ;
19606: LD_ADDR_OWVAR 27
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// uc_side := 0 ;
19614: LD_ADDR_OWVAR 20
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// uc_nation := nation_nature ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// hc_class := class_tiger ;
19630: LD_ADDR_OWVAR 28
19634: PUSH
19635: LD_INT 14
19637: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19638: LD_ADDR_OWVAR 31
19642: PUSH
19643: LD_EXP 35
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19663: LD_ADDR_OWVAR 35
19667: PUSH
19668: LD_INT 5
19670: NEG
19671: PPUSH
19672: LD_INT 5
19674: PPUSH
19675: CALL_OW 12
19679: PUSH
19680: LD_OWVAR 67
19684: MUL
19685: ST_TO_ADDR
// un := CreateHuman ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: CALL_OW 44
19695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 18
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 49
// end ;
19711: GO 19603
19713: POP
19714: POP
// for i = 1 to rand ( 3 , 4 ) do
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 4
19730: PPUSH
19731: CALL_OW 12
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19807
// begin hc_class := class_phororhacos ;
19739: LD_ADDR_OWVAR 28
19743: PUSH
19744: LD_INT 18
19746: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19747: LD_ADDR_OWVAR 31
19751: PUSH
19752: LD_EXP 35
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// hc_agressivity := 0 ;
19772: LD_ADDR_OWVAR 35
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// un = CreateHuman ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: CALL_OW 44
19789: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 18
19797: PPUSH
19798: LD_INT 0
19800: PPUSH
19801: CALL_OW 49
// end ;
19805: GO 19736
19807: POP
19808: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: DOUBLE
19815: LD_INT 1
19817: DEC
19818: ST_TO_ADDR
19819: LD_INT 1
19821: PPUSH
19822: LD_INT 3
19824: PPUSH
19825: CALL_OW 12
19829: PUSH
19830: LD_OWVAR 67
19834: PLUS
19835: PUSH
19836: FOR_TO
19837: IFFALSE 19974
// begin hc_class := class_apeman ;
19839: LD_ADDR_OWVAR 28
19843: PUSH
19844: LD_INT 12
19846: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19847: LD_ADDR_OWVAR 31
19851: PUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 5
19857: PPUSH
19858: CALL_OW 12
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 2
19868: PPUSH
19869: CALL_OW 12
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19886: LD_ADDR_OWVAR 35
19890: PUSH
19891: LD_INT 20
19893: PPUSH
19894: LD_INT 30
19896: PPUSH
19897: CALL_OW 12
19901: PUSH
19902: LD_INT 30
19904: PPUSH
19905: LD_INT 40
19907: PPUSH
19908: CALL_OW 12
19912: PUSH
19913: LD_INT 40
19915: PPUSH
19916: LD_INT 50
19918: PPUSH
19919: CALL_OW 12
19923: PUSH
19924: LD_INT 45
19926: PPUSH
19927: LD_INT 55
19929: PPUSH
19930: CALL_OW 12
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_OWVAR 67
19945: ARRAY
19946: ST_TO_ADDR
// un := CreateHuman ;
19947: LD_ADDR_VAR 0 3
19951: PUSH
19952: CALL_OW 44
19956: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 19
19964: PPUSH
19965: LD_INT 0
19967: PPUSH
19968: CALL_OW 49
// end ;
19972: GO 19836
19974: POP
19975: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_INT 5
19988: PPUSH
19989: LD_INT 6
19991: PPUSH
19992: CALL_OW 12
19996: PUSH
19997: LD_OWVAR 67
20001: PLUS
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20088
// begin hc_class := class_apeman ;
20006: LD_ADDR_OWVAR 28
20010: PUSH
20011: LD_INT 12
20013: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20014: LD_ADDR_OWVAR 31
20018: PUSH
20019: LD_INT 2
20021: PPUSH
20022: LD_INT 5
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: LD_INT 0
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 12
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// hc_agressivity := 0 ;
20053: LD_ADDR_OWVAR 35
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// un = CreateHuman ;
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: CALL_OW 44
20070: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 20
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 49
// end ;
20086: GO 20003
20088: POP
20089: POP
// end ; end_of_file
20090: LD_VAR 0 1
20094: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20095: LD_INT 0
20097: PPUSH
// ar_miner := 81 ;
20098: LD_ADDR_EXP 56
20102: PUSH
20103: LD_INT 81
20105: ST_TO_ADDR
// ar_crane := 88 ;
20106: LD_ADDR_EXP 55
20110: PUSH
20111: LD_INT 88
20113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20114: LD_ADDR_EXP 50
20118: PUSH
20119: LD_INT 89
20121: ST_TO_ADDR
// us_hack := 99 ;
20122: LD_ADDR_EXP 51
20126: PUSH
20127: LD_INT 99
20129: ST_TO_ADDR
// us_artillery := 97 ;
20130: LD_ADDR_EXP 52
20134: PUSH
20135: LD_INT 97
20137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20138: LD_ADDR_EXP 53
20142: PUSH
20143: LD_INT 91
20145: ST_TO_ADDR
// ar_mortar := 92 ;
20146: LD_ADDR_EXP 54
20150: PUSH
20151: LD_INT 92
20153: ST_TO_ADDR
// ru_radar := 98 ;
20154: LD_ADDR_EXP 49
20158: PUSH
20159: LD_INT 98
20161: ST_TO_ADDR
// tech_Artillery := 80 ;
20162: LD_ADDR_EXP 57
20166: PUSH
20167: LD_INT 80
20169: ST_TO_ADDR
// tech_RadMat := 81 ;
20170: LD_ADDR_EXP 58
20174: PUSH
20175: LD_INT 81
20177: ST_TO_ADDR
// tech_BasicTools := 82 ;
20178: LD_ADDR_EXP 59
20182: PUSH
20183: LD_INT 82
20185: ST_TO_ADDR
// tech_Cargo := 83 ;
20186: LD_ADDR_EXP 60
20190: PUSH
20191: LD_INT 83
20193: ST_TO_ADDR
// tech_Track := 84 ;
20194: LD_ADDR_EXP 61
20198: PUSH
20199: LD_INT 84
20201: ST_TO_ADDR
// tech_Crane := 85 ;
20202: LD_ADDR_EXP 62
20206: PUSH
20207: LD_INT 85
20209: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20210: LD_ADDR_EXP 63
20214: PUSH
20215: LD_INT 86
20217: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20218: LD_ADDR_EXP 64
20222: PUSH
20223: LD_INT 87
20225: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20226: LD_ADDR_EXP 65
20230: PUSH
20231: LD_INT 88
20233: ST_TO_ADDR
// class_mastodont := 31 ;
20234: LD_ADDR_EXP 66
20238: PUSH
20239: LD_INT 31
20241: ST_TO_ADDR
// class_horse := 21 ;
20242: LD_ADDR_EXP 67
20246: PUSH
20247: LD_INT 21
20249: ST_TO_ADDR
// end ;
20250: LD_VAR 0 1
20254: RET
// every 1 do
20255: GO 20257
20257: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20258: CALL 20095 0 0
20262: END
// every 0 0$1 do
20263: GO 20265
20265: DISABLE
// begin enable ;
20266: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20267: LD_STRING updateTimer(
20269: PUSH
20270: LD_OWVAR 1
20274: STR
20275: PUSH
20276: LD_STRING );
20278: STR
20279: PPUSH
20280: CALL_OW 559
// end ;
20284: END
// on MapStart ( p ) do begin if streamModeActive then
20285: LD_EXP 68
20289: IFFALSE 20298
// DefineStreamItems ( true ) ;
20291: LD_INT 1
20293: PPUSH
20294: CALL 21946 0 1
// UpdateFactoryWaypoints ( ) ;
20298: CALL 35530 0 0
// end ;
20302: PPOPN 1
20304: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20305: LD_INT 0
20307: PPUSH
// if p2 = 100 then
20308: LD_VAR 0 2
20312: PUSH
20313: LD_INT 100
20315: EQUAL
20316: IFFALSE 21319
// begin if not StreamModeActive then
20318: LD_EXP 68
20322: NOT
20323: IFFALSE 20333
// StreamModeActive := true ;
20325: LD_ADDR_EXP 68
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 0 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 0
20340: EQUAL
20341: IFFALSE 20347
// InitStreamMode ;
20343: CALL 21482 0 0
// if p3 = 1 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: EQUAL
20355: IFFALSE 20365
// sRocket := true ;
20357: LD_ADDR_EXP 73
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// if p3 = 2 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 2
20372: EQUAL
20373: IFFALSE 20383
// sSpeed := true ;
20375: LD_ADDR_EXP 72
20379: PUSH
20380: LD_INT 1
20382: ST_TO_ADDR
// if p3 = 3 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 3
20390: EQUAL
20391: IFFALSE 20401
// sEngine := true ;
20393: LD_ADDR_EXP 74
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if p3 = 4 then
20401: LD_VAR 0 3
20405: PUSH
20406: LD_INT 4
20408: EQUAL
20409: IFFALSE 20419
// sSpec := true ;
20411: LD_ADDR_EXP 71
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// if p3 = 5 then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 5
20426: EQUAL
20427: IFFALSE 20437
// sLevel := true ;
20429: LD_ADDR_EXP 75
20433: PUSH
20434: LD_INT 1
20436: ST_TO_ADDR
// if p3 = 6 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 6
20444: EQUAL
20445: IFFALSE 20455
// sArmoury := true ;
20447: LD_ADDR_EXP 76
20451: PUSH
20452: LD_INT 1
20454: ST_TO_ADDR
// if p3 = 7 then
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 7
20462: EQUAL
20463: IFFALSE 20473
// sRadar := true ;
20465: LD_ADDR_EXP 77
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// if p3 = 8 then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_INT 8
20480: EQUAL
20481: IFFALSE 20491
// sBunker := true ;
20483: LD_ADDR_EXP 78
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// if p3 = 9 then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 9
20498: EQUAL
20499: IFFALSE 20509
// sHack := true ;
20501: LD_ADDR_EXP 79
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 10 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 10
20516: EQUAL
20517: IFFALSE 20527
// sFire := true ;
20519: LD_ADDR_EXP 80
20523: PUSH
20524: LD_INT 1
20526: ST_TO_ADDR
// if p3 = 11 then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 11
20534: EQUAL
20535: IFFALSE 20545
// sRefresh := true ;
20537: LD_ADDR_EXP 81
20541: PUSH
20542: LD_INT 1
20544: ST_TO_ADDR
// if p3 = 12 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_INT 12
20552: EQUAL
20553: IFFALSE 20563
// sExp := true ;
20555: LD_ADDR_EXP 82
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// if p3 = 13 then
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 13
20570: EQUAL
20571: IFFALSE 20581
// sDepot := true ;
20573: LD_ADDR_EXP 83
20577: PUSH
20578: LD_INT 1
20580: ST_TO_ADDR
// if p3 = 14 then
20581: LD_VAR 0 3
20585: PUSH
20586: LD_INT 14
20588: EQUAL
20589: IFFALSE 20599
// sFlag := true ;
20591: LD_ADDR_EXP 84
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 15 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 15
20606: EQUAL
20607: IFFALSE 20617
// sKamikadze := true ;
20609: LD_ADDR_EXP 92
20613: PUSH
20614: LD_INT 1
20616: ST_TO_ADDR
// if p3 = 16 then
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 16
20624: EQUAL
20625: IFFALSE 20635
// sTroll := true ;
20627: LD_ADDR_EXP 93
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// if p3 = 17 then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 17
20642: EQUAL
20643: IFFALSE 20653
// sSlow := true ;
20645: LD_ADDR_EXP 94
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// if p3 = 18 then
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 18
20660: EQUAL
20661: IFFALSE 20671
// sLack := true ;
20663: LD_ADDR_EXP 95
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 19 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 19
20678: EQUAL
20679: IFFALSE 20689
// sTank := true ;
20681: LD_ADDR_EXP 97
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// if p3 = 20 then
20689: LD_VAR 0 3
20693: PUSH
20694: LD_INT 20
20696: EQUAL
20697: IFFALSE 20707
// sRemote := true ;
20699: LD_ADDR_EXP 98
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// if p3 = 21 then
20707: LD_VAR 0 3
20711: PUSH
20712: LD_INT 21
20714: EQUAL
20715: IFFALSE 20725
// sPowell := true ;
20717: LD_ADDR_EXP 99
20721: PUSH
20722: LD_INT 1
20724: ST_TO_ADDR
// if p3 = 22 then
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 22
20732: EQUAL
20733: IFFALSE 20743
// sTeleport := true ;
20735: LD_ADDR_EXP 102
20739: PUSH
20740: LD_INT 1
20742: ST_TO_ADDR
// if p3 = 23 then
20743: LD_VAR 0 3
20747: PUSH
20748: LD_INT 23
20750: EQUAL
20751: IFFALSE 20761
// sOilTower := true ;
20753: LD_ADDR_EXP 104
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
// if p3 = 24 then
20761: LD_VAR 0 3
20765: PUSH
20766: LD_INT 24
20768: EQUAL
20769: IFFALSE 20779
// sShovel := true ;
20771: LD_ADDR_EXP 105
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// if p3 = 25 then
20779: LD_VAR 0 3
20783: PUSH
20784: LD_INT 25
20786: EQUAL
20787: IFFALSE 20797
// sSheik := true ;
20789: LD_ADDR_EXP 106
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// if p3 = 26 then
20797: LD_VAR 0 3
20801: PUSH
20802: LD_INT 26
20804: EQUAL
20805: IFFALSE 20815
// sEarthquake := true ;
20807: LD_ADDR_EXP 108
20811: PUSH
20812: LD_INT 1
20814: ST_TO_ADDR
// if p3 = 27 then
20815: LD_VAR 0 3
20819: PUSH
20820: LD_INT 27
20822: EQUAL
20823: IFFALSE 20833
// sAI := true ;
20825: LD_ADDR_EXP 109
20829: PUSH
20830: LD_INT 1
20832: ST_TO_ADDR
// if p3 = 28 then
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 28
20840: EQUAL
20841: IFFALSE 20851
// sCargo := true ;
20843: LD_ADDR_EXP 112
20847: PUSH
20848: LD_INT 1
20850: ST_TO_ADDR
// if p3 = 29 then
20851: LD_VAR 0 3
20855: PUSH
20856: LD_INT 29
20858: EQUAL
20859: IFFALSE 20869
// sDLaser := true ;
20861: LD_ADDR_EXP 113
20865: PUSH
20866: LD_INT 1
20868: ST_TO_ADDR
// if p3 = 30 then
20869: LD_VAR 0 3
20873: PUSH
20874: LD_INT 30
20876: EQUAL
20877: IFFALSE 20887
// sExchange := true ;
20879: LD_ADDR_EXP 114
20883: PUSH
20884: LD_INT 1
20886: ST_TO_ADDR
// if p3 = 31 then
20887: LD_VAR 0 3
20891: PUSH
20892: LD_INT 31
20894: EQUAL
20895: IFFALSE 20905
// sFac := true ;
20897: LD_ADDR_EXP 115
20901: PUSH
20902: LD_INT 1
20904: ST_TO_ADDR
// if p3 = 32 then
20905: LD_VAR 0 3
20909: PUSH
20910: LD_INT 32
20912: EQUAL
20913: IFFALSE 20923
// sPower := true ;
20915: LD_ADDR_EXP 116
20919: PUSH
20920: LD_INT 1
20922: ST_TO_ADDR
// if p3 = 33 then
20923: LD_VAR 0 3
20927: PUSH
20928: LD_INT 33
20930: EQUAL
20931: IFFALSE 20941
// sRandom := true ;
20933: LD_ADDR_EXP 117
20937: PUSH
20938: LD_INT 1
20940: ST_TO_ADDR
// if p3 = 34 then
20941: LD_VAR 0 3
20945: PUSH
20946: LD_INT 34
20948: EQUAL
20949: IFFALSE 20959
// sShield := true ;
20951: LD_ADDR_EXP 118
20955: PUSH
20956: LD_INT 1
20958: ST_TO_ADDR
// if p3 = 35 then
20959: LD_VAR 0 3
20963: PUSH
20964: LD_INT 35
20966: EQUAL
20967: IFFALSE 20977
// sTime := true ;
20969: LD_ADDR_EXP 119
20973: PUSH
20974: LD_INT 1
20976: ST_TO_ADDR
// if p3 = 36 then
20977: LD_VAR 0 3
20981: PUSH
20982: LD_INT 36
20984: EQUAL
20985: IFFALSE 20995
// sTools := true ;
20987: LD_ADDR_EXP 120
20991: PUSH
20992: LD_INT 1
20994: ST_TO_ADDR
// if p3 = 101 then
20995: LD_VAR 0 3
20999: PUSH
21000: LD_INT 101
21002: EQUAL
21003: IFFALSE 21013
// sSold := true ;
21005: LD_ADDR_EXP 85
21009: PUSH
21010: LD_INT 1
21012: ST_TO_ADDR
// if p3 = 102 then
21013: LD_VAR 0 3
21017: PUSH
21018: LD_INT 102
21020: EQUAL
21021: IFFALSE 21031
// sDiff := true ;
21023: LD_ADDR_EXP 86
21027: PUSH
21028: LD_INT 1
21030: ST_TO_ADDR
// if p3 = 103 then
21031: LD_VAR 0 3
21035: PUSH
21036: LD_INT 103
21038: EQUAL
21039: IFFALSE 21049
// sFog := true ;
21041: LD_ADDR_EXP 89
21045: PUSH
21046: LD_INT 1
21048: ST_TO_ADDR
// if p3 = 104 then
21049: LD_VAR 0 3
21053: PUSH
21054: LD_INT 104
21056: EQUAL
21057: IFFALSE 21067
// sReset := true ;
21059: LD_ADDR_EXP 90
21063: PUSH
21064: LD_INT 1
21066: ST_TO_ADDR
// if p3 = 105 then
21067: LD_VAR 0 3
21071: PUSH
21072: LD_INT 105
21074: EQUAL
21075: IFFALSE 21085
// sSun := true ;
21077: LD_ADDR_EXP 91
21081: PUSH
21082: LD_INT 1
21084: ST_TO_ADDR
// if p3 = 106 then
21085: LD_VAR 0 3
21089: PUSH
21090: LD_INT 106
21092: EQUAL
21093: IFFALSE 21103
// sTiger := true ;
21095: LD_ADDR_EXP 87
21099: PUSH
21100: LD_INT 1
21102: ST_TO_ADDR
// if p3 = 107 then
21103: LD_VAR 0 3
21107: PUSH
21108: LD_INT 107
21110: EQUAL
21111: IFFALSE 21121
// sBomb := true ;
21113: LD_ADDR_EXP 88
21117: PUSH
21118: LD_INT 1
21120: ST_TO_ADDR
// if p3 = 108 then
21121: LD_VAR 0 3
21125: PUSH
21126: LD_INT 108
21128: EQUAL
21129: IFFALSE 21139
// sWound := true ;
21131: LD_ADDR_EXP 96
21135: PUSH
21136: LD_INT 1
21138: ST_TO_ADDR
// if p3 = 109 then
21139: LD_VAR 0 3
21143: PUSH
21144: LD_INT 109
21146: EQUAL
21147: IFFALSE 21157
// sBetray := true ;
21149: LD_ADDR_EXP 100
21153: PUSH
21154: LD_INT 1
21156: ST_TO_ADDR
// if p3 = 110 then
21157: LD_VAR 0 3
21161: PUSH
21162: LD_INT 110
21164: EQUAL
21165: IFFALSE 21175
// sContamin := true ;
21167: LD_ADDR_EXP 101
21171: PUSH
21172: LD_INT 1
21174: ST_TO_ADDR
// if p3 = 111 then
21175: LD_VAR 0 3
21179: PUSH
21180: LD_INT 111
21182: EQUAL
21183: IFFALSE 21193
// sOil := true ;
21185: LD_ADDR_EXP 103
21189: PUSH
21190: LD_INT 1
21192: ST_TO_ADDR
// if p3 = 112 then
21193: LD_VAR 0 3
21197: PUSH
21198: LD_INT 112
21200: EQUAL
21201: IFFALSE 21211
// sStu := true ;
21203: LD_ADDR_EXP 107
21207: PUSH
21208: LD_INT 1
21210: ST_TO_ADDR
// if p3 = 113 then
21211: LD_VAR 0 3
21215: PUSH
21216: LD_INT 113
21218: EQUAL
21219: IFFALSE 21229
// sBazooka := true ;
21221: LD_ADDR_EXP 110
21225: PUSH
21226: LD_INT 1
21228: ST_TO_ADDR
// if p3 = 114 then
21229: LD_VAR 0 3
21233: PUSH
21234: LD_INT 114
21236: EQUAL
21237: IFFALSE 21247
// sMortar := true ;
21239: LD_ADDR_EXP 111
21243: PUSH
21244: LD_INT 1
21246: ST_TO_ADDR
// if p3 = 115 then
21247: LD_VAR 0 3
21251: PUSH
21252: LD_INT 115
21254: EQUAL
21255: IFFALSE 21265
// sRanger := true ;
21257: LD_ADDR_EXP 121
21261: PUSH
21262: LD_INT 1
21264: ST_TO_ADDR
// if p3 = 116 then
21265: LD_VAR 0 3
21269: PUSH
21270: LD_INT 116
21272: EQUAL
21273: IFFALSE 21283
// sComputer := true ;
21275: LD_ADDR_EXP 122
21279: PUSH
21280: LD_INT 1
21282: ST_TO_ADDR
// if p3 = 117 then
21283: LD_VAR 0 3
21287: PUSH
21288: LD_INT 117
21290: EQUAL
21291: IFFALSE 21301
// s30 := true ;
21293: LD_ADDR_EXP 123
21297: PUSH
21298: LD_INT 1
21300: ST_TO_ADDR
// if p3 = 118 then
21301: LD_VAR 0 3
21305: PUSH
21306: LD_INT 118
21308: EQUAL
21309: IFFALSE 21319
// s60 := true ;
21311: LD_ADDR_EXP 124
21315: PUSH
21316: LD_INT 1
21318: ST_TO_ADDR
// end ; if p2 = 101 then
21319: LD_VAR 0 2
21323: PUSH
21324: LD_INT 101
21326: EQUAL
21327: IFFALSE 21455
// begin case p3 of 1 :
21329: LD_VAR 0 3
21333: PUSH
21334: LD_INT 1
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21349
21342: POP
// hHackUnlimitedResources ; 2 :
21343: CALL 33553 0 0
21347: GO 21455
21349: LD_INT 2
21351: DOUBLE
21352: EQUAL
21353: IFTRUE 21357
21355: GO 21364
21357: POP
// hHackSetLevel10 ; 3 :
21358: CALL 33686 0 0
21362: GO 21455
21364: LD_INT 3
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21379
21372: POP
// hHackSetLevel10YourUnits ; 4 :
21373: CALL 33771 0 0
21377: GO 21455
21379: LD_INT 4
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21394
21387: POP
// hHackInvincible ; 5 :
21388: CALL 34219 0 0
21392: GO 21455
21394: LD_INT 5
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21409
21402: POP
// hHackInvisible ; 6 :
21403: CALL 34330 0 0
21407: GO 21455
21409: LD_INT 6
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21424
21417: POP
// hHackChangeYourSide ; 7 :
21418: CALL 34387 0 0
21422: GO 21455
21424: LD_INT 7
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21439
21432: POP
// hHackChangeUnitSide ; 8 :
21433: CALL 34429 0 0
21437: GO 21455
21439: LD_INT 8
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21454
21447: POP
// hHackFog ; end ;
21448: CALL 34530 0 0
21452: GO 21455
21454: POP
// end ; end ;
21455: LD_VAR 0 7
21459: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21460: GO 21462
21462: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21463: LD_STRING initStreamRollete();
21465: PPUSH
21466: CALL_OW 559
// InitStreamMode ;
21470: CALL 21482 0 0
// DefineStreamItems ( false ) ;
21474: LD_INT 0
21476: PPUSH
21477: CALL 21946 0 1
// end ;
21481: END
// function InitStreamMode ; begin
21482: LD_INT 0
21484: PPUSH
// streamModeActive := false ;
21485: LD_ADDR_EXP 68
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// normalCounter := 36 ;
21493: LD_ADDR_EXP 69
21497: PUSH
21498: LD_INT 36
21500: ST_TO_ADDR
// hardcoreCounter := 18 ;
21501: LD_ADDR_EXP 70
21505: PUSH
21506: LD_INT 18
21508: ST_TO_ADDR
// sRocket := false ;
21509: LD_ADDR_EXP 73
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sSpeed := false ;
21517: LD_ADDR_EXP 72
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sEngine := false ;
21525: LD_ADDR_EXP 74
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sSpec := false ;
21533: LD_ADDR_EXP 71
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sLevel := false ;
21541: LD_ADDR_EXP 75
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sArmoury := false ;
21549: LD_ADDR_EXP 76
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sRadar := false ;
21557: LD_ADDR_EXP 77
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sBunker := false ;
21565: LD_ADDR_EXP 78
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sHack := false ;
21573: LD_ADDR_EXP 79
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sFire := false ;
21581: LD_ADDR_EXP 80
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sRefresh := false ;
21589: LD_ADDR_EXP 81
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sExp := false ;
21597: LD_ADDR_EXP 82
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sDepot := false ;
21605: LD_ADDR_EXP 83
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sFlag := false ;
21613: LD_ADDR_EXP 84
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sKamikadze := false ;
21621: LD_ADDR_EXP 92
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sTroll := false ;
21629: LD_ADDR_EXP 93
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sSlow := false ;
21637: LD_ADDR_EXP 94
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sLack := false ;
21645: LD_ADDR_EXP 95
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sTank := false ;
21653: LD_ADDR_EXP 97
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sRemote := false ;
21661: LD_ADDR_EXP 98
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sPowell := false ;
21669: LD_ADDR_EXP 99
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sTeleport := false ;
21677: LD_ADDR_EXP 102
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sOilTower := false ;
21685: LD_ADDR_EXP 104
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sShovel := false ;
21693: LD_ADDR_EXP 105
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sSheik := false ;
21701: LD_ADDR_EXP 106
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sEarthquake := false ;
21709: LD_ADDR_EXP 108
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sAI := false ;
21717: LD_ADDR_EXP 109
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sCargo := false ;
21725: LD_ADDR_EXP 112
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sDLaser := false ;
21733: LD_ADDR_EXP 113
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sExchange := false ;
21741: LD_ADDR_EXP 114
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sFac := false ;
21749: LD_ADDR_EXP 115
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sPower := false ;
21757: LD_ADDR_EXP 116
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sRandom := false ;
21765: LD_ADDR_EXP 117
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sShield := false ;
21773: LD_ADDR_EXP 118
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sTime := false ;
21781: LD_ADDR_EXP 119
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sTools := false ;
21789: LD_ADDR_EXP 120
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// sSold := false ;
21797: LD_ADDR_EXP 85
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// sDiff := false ;
21805: LD_ADDR_EXP 86
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// sFog := false ;
21813: LD_ADDR_EXP 89
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// sReset := false ;
21821: LD_ADDR_EXP 90
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// sSun := false ;
21829: LD_ADDR_EXP 91
21833: PUSH
21834: LD_INT 0
21836: ST_TO_ADDR
// sTiger := false ;
21837: LD_ADDR_EXP 87
21841: PUSH
21842: LD_INT 0
21844: ST_TO_ADDR
// sBomb := false ;
21845: LD_ADDR_EXP 88
21849: PUSH
21850: LD_INT 0
21852: ST_TO_ADDR
// sWound := false ;
21853: LD_ADDR_EXP 96
21857: PUSH
21858: LD_INT 0
21860: ST_TO_ADDR
// sBetray := false ;
21861: LD_ADDR_EXP 100
21865: PUSH
21866: LD_INT 0
21868: ST_TO_ADDR
// sContamin := false ;
21869: LD_ADDR_EXP 101
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
// sOil := false ;
21877: LD_ADDR_EXP 103
21881: PUSH
21882: LD_INT 0
21884: ST_TO_ADDR
// sStu := false ;
21885: LD_ADDR_EXP 107
21889: PUSH
21890: LD_INT 0
21892: ST_TO_ADDR
// sBazooka := false ;
21893: LD_ADDR_EXP 110
21897: PUSH
21898: LD_INT 0
21900: ST_TO_ADDR
// sMortar := false ;
21901: LD_ADDR_EXP 111
21905: PUSH
21906: LD_INT 0
21908: ST_TO_ADDR
// sRanger := false ;
21909: LD_ADDR_EXP 121
21913: PUSH
21914: LD_INT 0
21916: ST_TO_ADDR
// sComputer := false ;
21917: LD_ADDR_EXP 122
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// s30 := false ;
21925: LD_ADDR_EXP 123
21929: PUSH
21930: LD_INT 0
21932: ST_TO_ADDR
// s60 := false ;
21933: LD_ADDR_EXP 124
21937: PUSH
21938: LD_INT 0
21940: ST_TO_ADDR
// end ;
21941: LD_VAR 0 1
21945: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21946: LD_INT 0
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
// result := [ ] ;
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: EMPTY
21961: ST_TO_ADDR
// if campaign_id = 1 then
21962: LD_OWVAR 69
21966: PUSH
21967: LD_INT 1
21969: EQUAL
21970: IFFALSE 25136
// begin case mission_number of 1 :
21972: LD_OWVAR 70
21976: PUSH
21977: LD_INT 1
21979: DOUBLE
21980: EQUAL
21981: IFTRUE 21985
21983: GO 22061
21985: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 4
21996: PUSH
21997: LD_INT 11
21999: PUSH
22000: LD_INT 12
22002: PUSH
22003: LD_INT 15
22005: PUSH
22006: LD_INT 16
22008: PUSH
22009: LD_INT 22
22011: PUSH
22012: LD_INT 23
22014: PUSH
22015: LD_INT 26
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 101
22031: PUSH
22032: LD_INT 102
22034: PUSH
22035: LD_INT 106
22037: PUSH
22038: LD_INT 116
22040: PUSH
22041: LD_INT 117
22043: PUSH
22044: LD_INT 118
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: ST_TO_ADDR
22059: GO 25134
22061: LD_INT 2
22063: DOUBLE
22064: EQUAL
22065: IFTRUE 22069
22067: GO 22153
22069: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: LD_INT 11
22083: PUSH
22084: LD_INT 12
22086: PUSH
22087: LD_INT 15
22089: PUSH
22090: LD_INT 16
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 26
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 101
22115: PUSH
22116: LD_INT 102
22118: PUSH
22119: LD_INT 105
22121: PUSH
22122: LD_INT 106
22124: PUSH
22125: LD_INT 108
22127: PUSH
22128: LD_INT 116
22130: PUSH
22131: LD_INT 117
22133: PUSH
22134: LD_INT 118
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: ST_TO_ADDR
22151: GO 25134
22153: LD_INT 3
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22249
22161: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 4
22172: PUSH
22173: LD_INT 5
22175: PUSH
22176: LD_INT 11
22178: PUSH
22179: LD_INT 12
22181: PUSH
22182: LD_INT 15
22184: PUSH
22185: LD_INT 16
22187: PUSH
22188: LD_INT 22
22190: PUSH
22191: LD_INT 26
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 101
22211: PUSH
22212: LD_INT 102
22214: PUSH
22215: LD_INT 105
22217: PUSH
22218: LD_INT 106
22220: PUSH
22221: LD_INT 108
22223: PUSH
22224: LD_INT 116
22226: PUSH
22227: LD_INT 117
22229: PUSH
22230: LD_INT 118
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: ST_TO_ADDR
22247: GO 25134
22249: LD_INT 4
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22353
22257: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 4
22268: PUSH
22269: LD_INT 5
22271: PUSH
22272: LD_INT 8
22274: PUSH
22275: LD_INT 11
22277: PUSH
22278: LD_INT 12
22280: PUSH
22281: LD_INT 15
22283: PUSH
22284: LD_INT 16
22286: PUSH
22287: LD_INT 22
22289: PUSH
22290: LD_INT 23
22292: PUSH
22293: LD_INT 26
22295: PUSH
22296: LD_INT 36
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 101
22315: PUSH
22316: LD_INT 102
22318: PUSH
22319: LD_INT 105
22321: PUSH
22322: LD_INT 106
22324: PUSH
22325: LD_INT 108
22327: PUSH
22328: LD_INT 116
22330: PUSH
22331: LD_INT 117
22333: PUSH
22334: LD_INT 118
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: ST_TO_ADDR
22351: GO 25134
22353: LD_INT 5
22355: DOUBLE
22356: EQUAL
22357: IFTRUE 22361
22359: GO 22473
22361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22362: LD_ADDR_VAR 0 2
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 4
22372: PUSH
22373: LD_INT 5
22375: PUSH
22376: LD_INT 6
22378: PUSH
22379: LD_INT 8
22381: PUSH
22382: LD_INT 11
22384: PUSH
22385: LD_INT 12
22387: PUSH
22388: LD_INT 15
22390: PUSH
22391: LD_INT 16
22393: PUSH
22394: LD_INT 22
22396: PUSH
22397: LD_INT 23
22399: PUSH
22400: LD_INT 25
22402: PUSH
22403: LD_INT 26
22405: PUSH
22406: LD_INT 36
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 101
22427: PUSH
22428: LD_INT 102
22430: PUSH
22431: LD_INT 105
22433: PUSH
22434: LD_INT 106
22436: PUSH
22437: LD_INT 108
22439: PUSH
22440: LD_INT 109
22442: PUSH
22443: LD_INT 112
22445: PUSH
22446: LD_INT 116
22448: PUSH
22449: LD_INT 117
22451: PUSH
22452: LD_INT 118
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: ST_TO_ADDR
22471: GO 25134
22473: LD_INT 6
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22613
22481: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22482: LD_ADDR_VAR 0 2
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 4
22492: PUSH
22493: LD_INT 5
22495: PUSH
22496: LD_INT 6
22498: PUSH
22499: LD_INT 8
22501: PUSH
22502: LD_INT 11
22504: PUSH
22505: LD_INT 12
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 20
22516: PUSH
22517: LD_INT 21
22519: PUSH
22520: LD_INT 22
22522: PUSH
22523: LD_INT 23
22525: PUSH
22526: LD_INT 25
22528: PUSH
22529: LD_INT 26
22531: PUSH
22532: LD_INT 30
22534: PUSH
22535: LD_INT 31
22537: PUSH
22538: LD_INT 32
22540: PUSH
22541: LD_INT 36
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 101
22567: PUSH
22568: LD_INT 102
22570: PUSH
22571: LD_INT 105
22573: PUSH
22574: LD_INT 106
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 112
22585: PUSH
22586: LD_INT 116
22588: PUSH
22589: LD_INT 117
22591: PUSH
22592: LD_INT 118
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: ST_TO_ADDR
22611: GO 25134
22613: LD_INT 7
22615: DOUBLE
22616: EQUAL
22617: IFTRUE 22621
22619: GO 22733
22621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22622: LD_ADDR_VAR 0 2
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 4
22632: PUSH
22633: LD_INT 5
22635: PUSH
22636: LD_INT 7
22638: PUSH
22639: LD_INT 11
22641: PUSH
22642: LD_INT 12
22644: PUSH
22645: LD_INT 15
22647: PUSH
22648: LD_INT 16
22650: PUSH
22651: LD_INT 20
22653: PUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 22
22659: PUSH
22660: LD_INT 23
22662: PUSH
22663: LD_INT 25
22665: PUSH
22666: LD_INT 26
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 101
22687: PUSH
22688: LD_INT 102
22690: PUSH
22691: LD_INT 103
22693: PUSH
22694: LD_INT 105
22696: PUSH
22697: LD_INT 106
22699: PUSH
22700: LD_INT 108
22702: PUSH
22703: LD_INT 112
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: ST_TO_ADDR
22731: GO 25134
22733: LD_INT 8
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22881
22741: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22742: LD_ADDR_VAR 0 2
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: LD_INT 4
22752: PUSH
22753: LD_INT 5
22755: PUSH
22756: LD_INT 6
22758: PUSH
22759: LD_INT 7
22761: PUSH
22762: LD_INT 8
22764: PUSH
22765: LD_INT 11
22767: PUSH
22768: LD_INT 12
22770: PUSH
22771: LD_INT 15
22773: PUSH
22774: LD_INT 16
22776: PUSH
22777: LD_INT 20
22779: PUSH
22780: LD_INT 21
22782: PUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 23
22788: PUSH
22789: LD_INT 25
22791: PUSH
22792: LD_INT 26
22794: PUSH
22795: LD_INT 30
22797: PUSH
22798: LD_INT 31
22800: PUSH
22801: LD_INT 32
22803: PUSH
22804: LD_INT 36
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 101
22831: PUSH
22832: LD_INT 102
22834: PUSH
22835: LD_INT 103
22837: PUSH
22838: LD_INT 105
22840: PUSH
22841: LD_INT 106
22843: PUSH
22844: LD_INT 108
22846: PUSH
22847: LD_INT 109
22849: PUSH
22850: LD_INT 112
22852: PUSH
22853: LD_INT 116
22855: PUSH
22856: LD_INT 117
22858: PUSH
22859: LD_INT 118
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: ST_TO_ADDR
22879: GO 25134
22881: LD_INT 9
22883: DOUBLE
22884: EQUAL
22885: IFTRUE 22889
22887: GO 23037
22889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22890: LD_ADDR_VAR 0 2
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 4
22900: PUSH
22901: LD_INT 5
22903: PUSH
22904: LD_INT 6
22906: PUSH
22907: LD_INT 7
22909: PUSH
22910: LD_INT 8
22912: PUSH
22913: LD_INT 11
22915: PUSH
22916: LD_INT 12
22918: PUSH
22919: LD_INT 15
22921: PUSH
22922: LD_INT 16
22924: PUSH
22925: LD_INT 20
22927: PUSH
22928: LD_INT 21
22930: PUSH
22931: LD_INT 22
22933: PUSH
22934: LD_INT 23
22936: PUSH
22937: LD_INT 25
22939: PUSH
22940: LD_INT 26
22942: PUSH
22943: LD_INT 28
22945: PUSH
22946: LD_INT 30
22948: PUSH
22949: LD_INT 31
22951: PUSH
22952: LD_INT 32
22954: PUSH
22955: LD_INT 36
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 101
22983: PUSH
22984: LD_INT 102
22986: PUSH
22987: LD_INT 103
22989: PUSH
22990: LD_INT 105
22992: PUSH
22993: LD_INT 106
22995: PUSH
22996: LD_INT 108
22998: PUSH
22999: LD_INT 109
23001: PUSH
23002: LD_INT 112
23004: PUSH
23005: LD_INT 114
23007: PUSH
23008: LD_INT 116
23010: PUSH
23011: LD_INT 117
23013: PUSH
23014: LD_INT 118
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
23035: GO 25134
23037: LD_INT 10
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23241
23045: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23046: LD_ADDR_VAR 0 2
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 4
23056: PUSH
23057: LD_INT 5
23059: PUSH
23060: LD_INT 6
23062: PUSH
23063: LD_INT 7
23065: PUSH
23066: LD_INT 8
23068: PUSH
23069: LD_INT 9
23071: PUSH
23072: LD_INT 10
23074: PUSH
23075: LD_INT 11
23077: PUSH
23078: LD_INT 12
23080: PUSH
23081: LD_INT 13
23083: PUSH
23084: LD_INT 14
23086: PUSH
23087: LD_INT 15
23089: PUSH
23090: LD_INT 16
23092: PUSH
23093: LD_INT 17
23095: PUSH
23096: LD_INT 18
23098: PUSH
23099: LD_INT 19
23101: PUSH
23102: LD_INT 20
23104: PUSH
23105: LD_INT 21
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_INT 23
23113: PUSH
23114: LD_INT 24
23116: PUSH
23117: LD_INT 25
23119: PUSH
23120: LD_INT 26
23122: PUSH
23123: LD_INT 28
23125: PUSH
23126: LD_INT 30
23128: PUSH
23129: LD_INT 31
23131: PUSH
23132: LD_INT 32
23134: PUSH
23135: LD_INT 36
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 101
23171: PUSH
23172: LD_INT 102
23174: PUSH
23175: LD_INT 103
23177: PUSH
23178: LD_INT 104
23180: PUSH
23181: LD_INT 105
23183: PUSH
23184: LD_INT 106
23186: PUSH
23187: LD_INT 107
23189: PUSH
23190: LD_INT 108
23192: PUSH
23193: LD_INT 109
23195: PUSH
23196: LD_INT 110
23198: PUSH
23199: LD_INT 111
23201: PUSH
23202: LD_INT 112
23204: PUSH
23205: LD_INT 114
23207: PUSH
23208: LD_INT 116
23210: PUSH
23211: LD_INT 117
23213: PUSH
23214: LD_INT 118
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: ST_TO_ADDR
23239: GO 25134
23241: LD_INT 11
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23453
23249: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23250: LD_ADDR_VAR 0 2
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 4
23263: PUSH
23264: LD_INT 5
23266: PUSH
23267: LD_INT 6
23269: PUSH
23270: LD_INT 7
23272: PUSH
23273: LD_INT 8
23275: PUSH
23276: LD_INT 9
23278: PUSH
23279: LD_INT 10
23281: PUSH
23282: LD_INT 11
23284: PUSH
23285: LD_INT 12
23287: PUSH
23288: LD_INT 13
23290: PUSH
23291: LD_INT 14
23293: PUSH
23294: LD_INT 15
23296: PUSH
23297: LD_INT 16
23299: PUSH
23300: LD_INT 17
23302: PUSH
23303: LD_INT 18
23305: PUSH
23306: LD_INT 19
23308: PUSH
23309: LD_INT 20
23311: PUSH
23312: LD_INT 21
23314: PUSH
23315: LD_INT 22
23317: PUSH
23318: LD_INT 23
23320: PUSH
23321: LD_INT 24
23323: PUSH
23324: LD_INT 25
23326: PUSH
23327: LD_INT 26
23329: PUSH
23330: LD_INT 28
23332: PUSH
23333: LD_INT 30
23335: PUSH
23336: LD_INT 31
23338: PUSH
23339: LD_INT 32
23341: PUSH
23342: LD_INT 34
23344: PUSH
23345: LD_INT 36
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 101
23383: PUSH
23384: LD_INT 102
23386: PUSH
23387: LD_INT 103
23389: PUSH
23390: LD_INT 104
23392: PUSH
23393: LD_INT 105
23395: PUSH
23396: LD_INT 106
23398: PUSH
23399: LD_INT 107
23401: PUSH
23402: LD_INT 108
23404: PUSH
23405: LD_INT 109
23407: PUSH
23408: LD_INT 110
23410: PUSH
23411: LD_INT 111
23413: PUSH
23414: LD_INT 112
23416: PUSH
23417: LD_INT 114
23419: PUSH
23420: LD_INT 116
23422: PUSH
23423: LD_INT 117
23425: PUSH
23426: LD_INT 118
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: ST_TO_ADDR
23451: GO 25134
23453: LD_INT 12
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23681
23461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23462: LD_ADDR_VAR 0 2
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: LD_INT 3
23475: PUSH
23476: LD_INT 4
23478: PUSH
23479: LD_INT 5
23481: PUSH
23482: LD_INT 6
23484: PUSH
23485: LD_INT 7
23487: PUSH
23488: LD_INT 8
23490: PUSH
23491: LD_INT 9
23493: PUSH
23494: LD_INT 10
23496: PUSH
23497: LD_INT 11
23499: PUSH
23500: LD_INT 12
23502: PUSH
23503: LD_INT 13
23505: PUSH
23506: LD_INT 14
23508: PUSH
23509: LD_INT 15
23511: PUSH
23512: LD_INT 16
23514: PUSH
23515: LD_INT 17
23517: PUSH
23518: LD_INT 18
23520: PUSH
23521: LD_INT 19
23523: PUSH
23524: LD_INT 20
23526: PUSH
23527: LD_INT 21
23529: PUSH
23530: LD_INT 22
23532: PUSH
23533: LD_INT 23
23535: PUSH
23536: LD_INT 24
23538: PUSH
23539: LD_INT 25
23541: PUSH
23542: LD_INT 26
23544: PUSH
23545: LD_INT 27
23547: PUSH
23548: LD_INT 28
23550: PUSH
23551: LD_INT 30
23553: PUSH
23554: LD_INT 31
23556: PUSH
23557: LD_INT 32
23559: PUSH
23560: LD_INT 33
23562: PUSH
23563: LD_INT 34
23565: PUSH
23566: LD_INT 36
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 101
23607: PUSH
23608: LD_INT 102
23610: PUSH
23611: LD_INT 103
23613: PUSH
23614: LD_INT 104
23616: PUSH
23617: LD_INT 105
23619: PUSH
23620: LD_INT 106
23622: PUSH
23623: LD_INT 107
23625: PUSH
23626: LD_INT 108
23628: PUSH
23629: LD_INT 109
23631: PUSH
23632: LD_INT 110
23634: PUSH
23635: LD_INT 111
23637: PUSH
23638: LD_INT 112
23640: PUSH
23641: LD_INT 113
23643: PUSH
23644: LD_INT 114
23646: PUSH
23647: LD_INT 116
23649: PUSH
23650: LD_INT 117
23652: PUSH
23653: LD_INT 118
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: ST_TO_ADDR
23679: GO 25134
23681: LD_INT 13
23683: DOUBLE
23684: EQUAL
23685: IFTRUE 23689
23687: GO 23897
23689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23690: LD_ADDR_VAR 0 2
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: LD_INT 3
23703: PUSH
23704: LD_INT 4
23706: PUSH
23707: LD_INT 5
23709: PUSH
23710: LD_INT 8
23712: PUSH
23713: LD_INT 9
23715: PUSH
23716: LD_INT 10
23718: PUSH
23719: LD_INT 11
23721: PUSH
23722: LD_INT 12
23724: PUSH
23725: LD_INT 14
23727: PUSH
23728: LD_INT 15
23730: PUSH
23731: LD_INT 16
23733: PUSH
23734: LD_INT 17
23736: PUSH
23737: LD_INT 18
23739: PUSH
23740: LD_INT 19
23742: PUSH
23743: LD_INT 20
23745: PUSH
23746: LD_INT 21
23748: PUSH
23749: LD_INT 22
23751: PUSH
23752: LD_INT 23
23754: PUSH
23755: LD_INT 24
23757: PUSH
23758: LD_INT 25
23760: PUSH
23761: LD_INT 26
23763: PUSH
23764: LD_INT 27
23766: PUSH
23767: LD_INT 28
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 33
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 36
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 101
23823: PUSH
23824: LD_INT 102
23826: PUSH
23827: LD_INT 103
23829: PUSH
23830: LD_INT 104
23832: PUSH
23833: LD_INT 105
23835: PUSH
23836: LD_INT 106
23838: PUSH
23839: LD_INT 107
23841: PUSH
23842: LD_INT 108
23844: PUSH
23845: LD_INT 109
23847: PUSH
23848: LD_INT 110
23850: PUSH
23851: LD_INT 111
23853: PUSH
23854: LD_INT 112
23856: PUSH
23857: LD_INT 113
23859: PUSH
23860: LD_INT 114
23862: PUSH
23863: LD_INT 116
23865: PUSH
23866: LD_INT 117
23868: PUSH
23869: LD_INT 118
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: ST_TO_ADDR
23895: GO 25134
23897: LD_INT 14
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 24129
23905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 4
23922: PUSH
23923: LD_INT 5
23925: PUSH
23926: LD_INT 6
23928: PUSH
23929: LD_INT 7
23931: PUSH
23932: LD_INT 8
23934: PUSH
23935: LD_INT 9
23937: PUSH
23938: LD_INT 10
23940: PUSH
23941: LD_INT 11
23943: PUSH
23944: LD_INT 12
23946: PUSH
23947: LD_INT 13
23949: PUSH
23950: LD_INT 14
23952: PUSH
23953: LD_INT 15
23955: PUSH
23956: LD_INT 16
23958: PUSH
23959: LD_INT 17
23961: PUSH
23962: LD_INT 18
23964: PUSH
23965: LD_INT 19
23967: PUSH
23968: LD_INT 20
23970: PUSH
23971: LD_INT 21
23973: PUSH
23974: LD_INT 22
23976: PUSH
23977: LD_INT 23
23979: PUSH
23980: LD_INT 24
23982: PUSH
23983: LD_INT 25
23985: PUSH
23986: LD_INT 26
23988: PUSH
23989: LD_INT 27
23991: PUSH
23992: LD_INT 28
23994: PUSH
23995: LD_INT 29
23997: PUSH
23998: LD_INT 30
24000: PUSH
24001: LD_INT 31
24003: PUSH
24004: LD_INT 32
24006: PUSH
24007: LD_INT 33
24009: PUSH
24010: LD_INT 34
24012: PUSH
24013: LD_INT 36
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 101
24055: PUSH
24056: LD_INT 102
24058: PUSH
24059: LD_INT 103
24061: PUSH
24062: LD_INT 104
24064: PUSH
24065: LD_INT 105
24067: PUSH
24068: LD_INT 106
24070: PUSH
24071: LD_INT 107
24073: PUSH
24074: LD_INT 108
24076: PUSH
24077: LD_INT 109
24079: PUSH
24080: LD_INT 110
24082: PUSH
24083: LD_INT 111
24085: PUSH
24086: LD_INT 112
24088: PUSH
24089: LD_INT 113
24091: PUSH
24092: LD_INT 114
24094: PUSH
24095: LD_INT 116
24097: PUSH
24098: LD_INT 117
24100: PUSH
24101: LD_INT 118
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: ST_TO_ADDR
24127: GO 25134
24129: LD_INT 15
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24361
24137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: LD_INT 4
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: LD_INT 6
24160: PUSH
24161: LD_INT 7
24163: PUSH
24164: LD_INT 8
24166: PUSH
24167: LD_INT 9
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 11
24175: PUSH
24176: LD_INT 12
24178: PUSH
24179: LD_INT 13
24181: PUSH
24182: LD_INT 14
24184: PUSH
24185: LD_INT 15
24187: PUSH
24188: LD_INT 16
24190: PUSH
24191: LD_INT 17
24193: PUSH
24194: LD_INT 18
24196: PUSH
24197: LD_INT 19
24199: PUSH
24200: LD_INT 20
24202: PUSH
24203: LD_INT 21
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_INT 23
24211: PUSH
24212: LD_INT 24
24214: PUSH
24215: LD_INT 25
24217: PUSH
24218: LD_INT 26
24220: PUSH
24221: LD_INT 27
24223: PUSH
24224: LD_INT 28
24226: PUSH
24227: LD_INT 29
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 31
24235: PUSH
24236: LD_INT 32
24238: PUSH
24239: LD_INT 33
24241: PUSH
24242: LD_INT 34
24244: PUSH
24245: LD_INT 36
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 101
24287: PUSH
24288: LD_INT 102
24290: PUSH
24291: LD_INT 103
24293: PUSH
24294: LD_INT 104
24296: PUSH
24297: LD_INT 105
24299: PUSH
24300: LD_INT 106
24302: PUSH
24303: LD_INT 107
24305: PUSH
24306: LD_INT 108
24308: PUSH
24309: LD_INT 109
24311: PUSH
24312: LD_INT 110
24314: PUSH
24315: LD_INT 111
24317: PUSH
24318: LD_INT 112
24320: PUSH
24321: LD_INT 113
24323: PUSH
24324: LD_INT 114
24326: PUSH
24327: LD_INT 116
24329: PUSH
24330: LD_INT 117
24332: PUSH
24333: LD_INT 118
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: ST_TO_ADDR
24359: GO 25134
24361: LD_INT 16
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24505
24369: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 4
24380: PUSH
24381: LD_INT 5
24383: PUSH
24384: LD_INT 7
24386: PUSH
24387: LD_INT 11
24389: PUSH
24390: LD_INT 12
24392: PUSH
24393: LD_INT 15
24395: PUSH
24396: LD_INT 16
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 22
24407: PUSH
24408: LD_INT 23
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 26
24416: PUSH
24417: LD_INT 30
24419: PUSH
24420: LD_INT 31
24422: PUSH
24423: LD_INT 32
24425: PUSH
24426: LD_INT 33
24428: PUSH
24429: LD_INT 34
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 101
24455: PUSH
24456: LD_INT 102
24458: PUSH
24459: LD_INT 103
24461: PUSH
24462: LD_INT 106
24464: PUSH
24465: LD_INT 108
24467: PUSH
24468: LD_INT 112
24470: PUSH
24471: LD_INT 113
24473: PUSH
24474: LD_INT 114
24476: PUSH
24477: LD_INT 116
24479: PUSH
24480: LD_INT 117
24482: PUSH
24483: LD_INT 118
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: ST_TO_ADDR
24503: GO 25134
24505: LD_INT 17
24507: DOUBLE
24508: EQUAL
24509: IFTRUE 24513
24511: GO 24737
24513: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: LD_INT 6
24536: PUSH
24537: LD_INT 7
24539: PUSH
24540: LD_INT 8
24542: PUSH
24543: LD_INT 9
24545: PUSH
24546: LD_INT 10
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 14
24560: PUSH
24561: LD_INT 15
24563: PUSH
24564: LD_INT 16
24566: PUSH
24567: LD_INT 17
24569: PUSH
24570: LD_INT 18
24572: PUSH
24573: LD_INT 19
24575: PUSH
24576: LD_INT 20
24578: PUSH
24579: LD_INT 21
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_INT 23
24587: PUSH
24588: LD_INT 24
24590: PUSH
24591: LD_INT 25
24593: PUSH
24594: LD_INT 26
24596: PUSH
24597: LD_INT 27
24599: PUSH
24600: LD_INT 28
24602: PUSH
24603: LD_INT 29
24605: PUSH
24606: LD_INT 30
24608: PUSH
24609: LD_INT 31
24611: PUSH
24612: LD_INT 32
24614: PUSH
24615: LD_INT 33
24617: PUSH
24618: LD_INT 34
24620: PUSH
24621: LD_INT 36
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 101
24663: PUSH
24664: LD_INT 102
24666: PUSH
24667: LD_INT 103
24669: PUSH
24670: LD_INT 104
24672: PUSH
24673: LD_INT 105
24675: PUSH
24676: LD_INT 106
24678: PUSH
24679: LD_INT 107
24681: PUSH
24682: LD_INT 108
24684: PUSH
24685: LD_INT 109
24687: PUSH
24688: LD_INT 110
24690: PUSH
24691: LD_INT 111
24693: PUSH
24694: LD_INT 112
24696: PUSH
24697: LD_INT 113
24699: PUSH
24700: LD_INT 114
24702: PUSH
24703: LD_INT 116
24705: PUSH
24706: LD_INT 117
24708: PUSH
24709: LD_INT 118
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 25134
24737: LD_INT 18
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24893
24745: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24746: LD_ADDR_VAR 0 2
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: LD_INT 7
24762: PUSH
24763: LD_INT 11
24765: PUSH
24766: LD_INT 12
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 16
24774: PUSH
24775: LD_INT 20
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_INT 23
24786: PUSH
24787: LD_INT 25
24789: PUSH
24790: LD_INT 26
24792: PUSH
24793: LD_INT 30
24795: PUSH
24796: LD_INT 31
24798: PUSH
24799: LD_INT 32
24801: PUSH
24802: LD_INT 33
24804: PUSH
24805: LD_INT 34
24807: PUSH
24808: LD_INT 35
24810: PUSH
24811: LD_INT 36
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 101
24839: PUSH
24840: LD_INT 102
24842: PUSH
24843: LD_INT 103
24845: PUSH
24846: LD_INT 106
24848: PUSH
24849: LD_INT 108
24851: PUSH
24852: LD_INT 112
24854: PUSH
24855: LD_INT 113
24857: PUSH
24858: LD_INT 114
24860: PUSH
24861: LD_INT 115
24863: PUSH
24864: LD_INT 116
24866: PUSH
24867: LD_INT 117
24869: PUSH
24870: LD_INT 118
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: ST_TO_ADDR
24891: GO 25134
24893: LD_INT 19
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 25133
24901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24902: LD_ADDR_VAR 0 2
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 4
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: LD_INT 6
24924: PUSH
24925: LD_INT 7
24927: PUSH
24928: LD_INT 8
24930: PUSH
24931: LD_INT 9
24933: PUSH
24934: LD_INT 10
24936: PUSH
24937: LD_INT 11
24939: PUSH
24940: LD_INT 12
24942: PUSH
24943: LD_INT 13
24945: PUSH
24946: LD_INT 14
24948: PUSH
24949: LD_INT 15
24951: PUSH
24952: LD_INT 16
24954: PUSH
24955: LD_INT 17
24957: PUSH
24958: LD_INT 18
24960: PUSH
24961: LD_INT 19
24963: PUSH
24964: LD_INT 20
24966: PUSH
24967: LD_INT 21
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_INT 23
24975: PUSH
24976: LD_INT 24
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 26
24984: PUSH
24985: LD_INT 27
24987: PUSH
24988: LD_INT 28
24990: PUSH
24991: LD_INT 29
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 31
24999: PUSH
25000: LD_INT 32
25002: PUSH
25003: LD_INT 33
25005: PUSH
25006: LD_INT 34
25008: PUSH
25009: LD_INT 35
25011: PUSH
25012: LD_INT 36
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 101
25055: PUSH
25056: LD_INT 102
25058: PUSH
25059: LD_INT 103
25061: PUSH
25062: LD_INT 104
25064: PUSH
25065: LD_INT 105
25067: PUSH
25068: LD_INT 106
25070: PUSH
25071: LD_INT 107
25073: PUSH
25074: LD_INT 108
25076: PUSH
25077: LD_INT 109
25079: PUSH
25080: LD_INT 110
25082: PUSH
25083: LD_INT 111
25085: PUSH
25086: LD_INT 112
25088: PUSH
25089: LD_INT 113
25091: PUSH
25092: LD_INT 114
25094: PUSH
25095: LD_INT 115
25097: PUSH
25098: LD_INT 116
25100: PUSH
25101: LD_INT 117
25103: PUSH
25104: LD_INT 118
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: ST_TO_ADDR
25131: GO 25134
25133: POP
// end else
25134: GO 25365
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25136: LD_ADDR_VAR 0 2
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: LD_INT 3
25149: PUSH
25150: LD_INT 4
25152: PUSH
25153: LD_INT 5
25155: PUSH
25156: LD_INT 6
25158: PUSH
25159: LD_INT 7
25161: PUSH
25162: LD_INT 8
25164: PUSH
25165: LD_INT 9
25167: PUSH
25168: LD_INT 10
25170: PUSH
25171: LD_INT 11
25173: PUSH
25174: LD_INT 12
25176: PUSH
25177: LD_INT 13
25179: PUSH
25180: LD_INT 14
25182: PUSH
25183: LD_INT 15
25185: PUSH
25186: LD_INT 16
25188: PUSH
25189: LD_INT 17
25191: PUSH
25192: LD_INT 18
25194: PUSH
25195: LD_INT 19
25197: PUSH
25198: LD_INT 20
25200: PUSH
25201: LD_INT 21
25203: PUSH
25204: LD_INT 22
25206: PUSH
25207: LD_INT 23
25209: PUSH
25210: LD_INT 24
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 26
25218: PUSH
25219: LD_INT 27
25221: PUSH
25222: LD_INT 28
25224: PUSH
25225: LD_INT 29
25227: PUSH
25228: LD_INT 30
25230: PUSH
25231: LD_INT 31
25233: PUSH
25234: LD_INT 32
25236: PUSH
25237: LD_INT 33
25239: PUSH
25240: LD_INT 34
25242: PUSH
25243: LD_INT 35
25245: PUSH
25246: LD_INT 36
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 101
25289: PUSH
25290: LD_INT 102
25292: PUSH
25293: LD_INT 103
25295: PUSH
25296: LD_INT 104
25298: PUSH
25299: LD_INT 105
25301: PUSH
25302: LD_INT 106
25304: PUSH
25305: LD_INT 107
25307: PUSH
25308: LD_INT 108
25310: PUSH
25311: LD_INT 109
25313: PUSH
25314: LD_INT 110
25316: PUSH
25317: LD_INT 111
25319: PUSH
25320: LD_INT 112
25322: PUSH
25323: LD_INT 113
25325: PUSH
25326: LD_INT 114
25328: PUSH
25329: LD_INT 115
25331: PUSH
25332: LD_INT 116
25334: PUSH
25335: LD_INT 117
25337: PUSH
25338: LD_INT 118
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: ST_TO_ADDR
// if result then
25365: LD_VAR 0 2
25369: IFFALSE 26155
// begin normal :=  ;
25371: LD_ADDR_VAR 0 5
25375: PUSH
25376: LD_STRING 
25378: ST_TO_ADDR
// hardcore :=  ;
25379: LD_ADDR_VAR 0 6
25383: PUSH
25384: LD_STRING 
25386: ST_TO_ADDR
// active :=  ;
25387: LD_ADDR_VAR 0 7
25391: PUSH
25392: LD_STRING 
25394: ST_TO_ADDR
// for i = 1 to normalCounter do
25395: LD_ADDR_VAR 0 8
25399: PUSH
25400: DOUBLE
25401: LD_INT 1
25403: DEC
25404: ST_TO_ADDR
25405: LD_EXP 69
25409: PUSH
25410: FOR_TO
25411: IFFALSE 25512
// begin tmp := 0 ;
25413: LD_ADDR_VAR 0 3
25417: PUSH
25418: LD_STRING 0
25420: ST_TO_ADDR
// if result [ 1 ] then
25421: LD_VAR 0 2
25425: PUSH
25426: LD_INT 1
25428: ARRAY
25429: IFFALSE 25494
// if result [ 1 ] [ 1 ] = i then
25431: LD_VAR 0 2
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PUSH
25440: LD_INT 1
25442: ARRAY
25443: PUSH
25444: LD_VAR 0 8
25448: EQUAL
25449: IFFALSE 25494
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_VAR 0 2
25460: PPUSH
25461: LD_INT 1
25463: PPUSH
25464: LD_VAR 0 2
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PPUSH
25473: LD_INT 1
25475: PPUSH
25476: CALL_OW 3
25480: PPUSH
25481: CALL_OW 1
25485: ST_TO_ADDR
// tmp := 1 ;
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_STRING 1
25493: ST_TO_ADDR
// end ; normal := normal & tmp ;
25494: LD_ADDR_VAR 0 5
25498: PUSH
25499: LD_VAR 0 5
25503: PUSH
25504: LD_VAR 0 3
25508: STR
25509: ST_TO_ADDR
// end ;
25510: GO 25410
25512: POP
25513: POP
// for i = 1 to hardcoreCounter do
25514: LD_ADDR_VAR 0 8
25518: PUSH
25519: DOUBLE
25520: LD_INT 1
25522: DEC
25523: ST_TO_ADDR
25524: LD_EXP 70
25528: PUSH
25529: FOR_TO
25530: IFFALSE 25635
// begin tmp := 0 ;
25532: LD_ADDR_VAR 0 3
25536: PUSH
25537: LD_STRING 0
25539: ST_TO_ADDR
// if result [ 2 ] then
25540: LD_VAR 0 2
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: IFFALSE 25617
// if result [ 2 ] [ 1 ] = 100 + i then
25550: LD_VAR 0 2
25554: PUSH
25555: LD_INT 2
25557: ARRAY
25558: PUSH
25559: LD_INT 1
25561: ARRAY
25562: PUSH
25563: LD_INT 100
25565: PUSH
25566: LD_VAR 0 8
25570: PLUS
25571: EQUAL
25572: IFFALSE 25617
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_VAR 0 2
25583: PPUSH
25584: LD_INT 2
25586: PPUSH
25587: LD_VAR 0 2
25591: PUSH
25592: LD_INT 2
25594: ARRAY
25595: PPUSH
25596: LD_INT 1
25598: PPUSH
25599: CALL_OW 3
25603: PPUSH
25604: CALL_OW 1
25608: ST_TO_ADDR
// tmp := 1 ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_STRING 1
25616: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25617: LD_ADDR_VAR 0 6
25621: PUSH
25622: LD_VAR 0 6
25626: PUSH
25627: LD_VAR 0 3
25631: STR
25632: ST_TO_ADDR
// end ;
25633: GO 25529
25635: POP
25636: POP
// if isGameLoad then
25637: LD_VAR 0 1
25641: IFFALSE 26116
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25643: LD_ADDR_VAR 0 4
25647: PUSH
25648: LD_EXP 73
25652: PUSH
25653: LD_EXP 72
25657: PUSH
25658: LD_EXP 74
25662: PUSH
25663: LD_EXP 71
25667: PUSH
25668: LD_EXP 75
25672: PUSH
25673: LD_EXP 76
25677: PUSH
25678: LD_EXP 77
25682: PUSH
25683: LD_EXP 78
25687: PUSH
25688: LD_EXP 79
25692: PUSH
25693: LD_EXP 80
25697: PUSH
25698: LD_EXP 81
25702: PUSH
25703: LD_EXP 82
25707: PUSH
25708: LD_EXP 83
25712: PUSH
25713: LD_EXP 84
25717: PUSH
25718: LD_EXP 92
25722: PUSH
25723: LD_EXP 93
25727: PUSH
25728: LD_EXP 94
25732: PUSH
25733: LD_EXP 95
25737: PUSH
25738: LD_EXP 97
25742: PUSH
25743: LD_EXP 98
25747: PUSH
25748: LD_EXP 99
25752: PUSH
25753: LD_EXP 102
25757: PUSH
25758: LD_EXP 104
25762: PUSH
25763: LD_EXP 105
25767: PUSH
25768: LD_EXP 106
25772: PUSH
25773: LD_EXP 108
25777: PUSH
25778: LD_EXP 109
25782: PUSH
25783: LD_EXP 112
25787: PUSH
25788: LD_EXP 113
25792: PUSH
25793: LD_EXP 114
25797: PUSH
25798: LD_EXP 115
25802: PUSH
25803: LD_EXP 116
25807: PUSH
25808: LD_EXP 117
25812: PUSH
25813: LD_EXP 118
25817: PUSH
25818: LD_EXP 119
25822: PUSH
25823: LD_EXP 120
25827: PUSH
25828: LD_EXP 85
25832: PUSH
25833: LD_EXP 86
25837: PUSH
25838: LD_EXP 89
25842: PUSH
25843: LD_EXP 90
25847: PUSH
25848: LD_EXP 91
25852: PUSH
25853: LD_EXP 87
25857: PUSH
25858: LD_EXP 88
25862: PUSH
25863: LD_EXP 96
25867: PUSH
25868: LD_EXP 100
25872: PUSH
25873: LD_EXP 101
25877: PUSH
25878: LD_EXP 103
25882: PUSH
25883: LD_EXP 107
25887: PUSH
25888: LD_EXP 110
25892: PUSH
25893: LD_EXP 111
25897: PUSH
25898: LD_EXP 121
25902: PUSH
25903: LD_EXP 122
25907: PUSH
25908: LD_EXP 123
25912: PUSH
25913: LD_EXP 124
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: ST_TO_ADDR
// tmp :=  ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_STRING 
25981: ST_TO_ADDR
// for i = 1 to normalCounter do
25982: LD_ADDR_VAR 0 8
25986: PUSH
25987: DOUBLE
25988: LD_INT 1
25990: DEC
25991: ST_TO_ADDR
25992: LD_EXP 69
25996: PUSH
25997: FOR_TO
25998: IFFALSE 26034
// begin if flags [ i ] then
26000: LD_VAR 0 4
26004: PUSH
26005: LD_VAR 0 8
26009: ARRAY
26010: IFFALSE 26032
// tmp := tmp & i & ; ;
26012: LD_ADDR_VAR 0 3
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 8
26026: STR
26027: PUSH
26028: LD_STRING ;
26030: STR
26031: ST_TO_ADDR
// end ;
26032: GO 25997
26034: POP
26035: POP
// for i = 1 to hardcoreCounter do
26036: LD_ADDR_VAR 0 8
26040: PUSH
26041: DOUBLE
26042: LD_INT 1
26044: DEC
26045: ST_TO_ADDR
26046: LD_EXP 70
26050: PUSH
26051: FOR_TO
26052: IFFALSE 26098
// begin if flags [ normalCounter + i ] then
26054: LD_VAR 0 4
26058: PUSH
26059: LD_EXP 69
26063: PUSH
26064: LD_VAR 0 8
26068: PLUS
26069: ARRAY
26070: IFFALSE 26096
// tmp := tmp & ( 100 + i ) & ; ;
26072: LD_ADDR_VAR 0 3
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: LD_INT 100
26084: PUSH
26085: LD_VAR 0 8
26089: PLUS
26090: STR
26091: PUSH
26092: LD_STRING ;
26094: STR
26095: ST_TO_ADDR
// end ;
26096: GO 26051
26098: POP
26099: POP
// if tmp then
26100: LD_VAR 0 3
26104: IFFALSE 26116
// active := tmp ;
26106: LD_ADDR_VAR 0 7
26110: PUSH
26111: LD_VAR 0 3
26115: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26116: LD_STRING getStreamItemsFromMission("
26118: PUSH
26119: LD_VAR 0 5
26123: STR
26124: PUSH
26125: LD_STRING ","
26127: STR
26128: PUSH
26129: LD_VAR 0 6
26133: STR
26134: PUSH
26135: LD_STRING ","
26137: STR
26138: PUSH
26139: LD_VAR 0 7
26143: STR
26144: PUSH
26145: LD_STRING ")
26147: STR
26148: PPUSH
26149: CALL_OW 559
// end else
26153: GO 26162
// ToLua ( getStreamItemsFromMission("","","") ) ;
26155: LD_STRING getStreamItemsFromMission("","","")
26157: PPUSH
26158: CALL_OW 559
// end ;
26162: LD_VAR 0 2
26166: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26167: LD_EXP 68
26171: PUSH
26172: LD_EXP 73
26176: AND
26177: IFFALSE 26301
26179: GO 26181
26181: DISABLE
26182: LD_INT 0
26184: PPUSH
26185: PPUSH
// begin enable ;
26186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_INT 22
26194: PUSH
26195: LD_OWVAR 2
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 2
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 7
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 34
26219: PUSH
26220: LD_INT 45
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 34
26229: PUSH
26230: LD_INT 28
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 34
26239: PUSH
26240: LD_INT 47
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 69
26262: ST_TO_ADDR
// if not tmp then
26263: LD_VAR 0 2
26267: NOT
26268: IFFALSE 26272
// exit ;
26270: GO 26301
// for i in tmp do
26272: LD_ADDR_VAR 0 1
26276: PUSH
26277: LD_VAR 0 2
26281: PUSH
26282: FOR_IN
26283: IFFALSE 26299
// begin SetLives ( i , 0 ) ;
26285: LD_VAR 0 1
26289: PPUSH
26290: LD_INT 0
26292: PPUSH
26293: CALL_OW 234
// end ;
26297: GO 26282
26299: POP
26300: POP
// end ;
26301: PPOPN 2
26303: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26304: LD_EXP 68
26308: PUSH
26309: LD_EXP 74
26313: AND
26314: IFFALSE 26398
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
// begin enable ;
26323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_OWVAR 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 32
26343: PUSH
26344: LD_INT 3
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PPUSH
26355: CALL_OW 69
26359: ST_TO_ADDR
// if not tmp then
26360: LD_VAR 0 2
26364: NOT
26365: IFFALSE 26369
// exit ;
26367: GO 26398
// for i in tmp do
26369: LD_ADDR_VAR 0 1
26373: PUSH
26374: LD_VAR 0 2
26378: PUSH
26379: FOR_IN
26380: IFFALSE 26396
// begin SetLives ( i , 0 ) ;
26382: LD_VAR 0 1
26386: PPUSH
26387: LD_INT 0
26389: PPUSH
26390: CALL_OW 234
// end ;
26394: GO 26379
26396: POP
26397: POP
// end ;
26398: PPOPN 2
26400: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26401: LD_EXP 68
26405: PUSH
26406: LD_EXP 71
26410: AND
26411: IFFALSE 26504
26413: GO 26415
26415: DISABLE
26416: LD_INT 0
26418: PPUSH
// begin enable ;
26419: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26420: LD_ADDR_VAR 0 1
26424: PUSH
26425: LD_INT 22
26427: PUSH
26428: LD_OWVAR 2
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 25
26442: PUSH
26443: LD_INT 5
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 25
26452: PUSH
26453: LD_INT 9
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 25
26462: PUSH
26463: LD_INT 8
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26502
// begin SetClass ( i , 1 ) ;
26488: LD_VAR 0 1
26492: PPUSH
26493: LD_INT 1
26495: PPUSH
26496: CALL_OW 336
// end ;
26500: GO 26485
26502: POP
26503: POP
// end ;
26504: PPOPN 1
26506: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26507: LD_EXP 68
26511: PUSH
26512: LD_EXP 72
26516: AND
26517: PUSH
26518: LD_OWVAR 65
26522: PUSH
26523: LD_INT 7
26525: LESS
26526: AND
26527: IFFALSE 26541
26529: GO 26531
26531: DISABLE
// begin enable ;
26532: ENABLE
// game_speed := 7 ;
26533: LD_ADDR_OWVAR 65
26537: PUSH
26538: LD_INT 7
26540: ST_TO_ADDR
// end ;
26541: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26542: LD_EXP 68
26546: PUSH
26547: LD_EXP 75
26551: AND
26552: IFFALSE 26754
26554: GO 26556
26556: DISABLE
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_INT 81
26569: PUSH
26570: LD_OWVAR 2
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PPUSH
26593: CALL_OW 69
26597: ST_TO_ADDR
// if not tmp then
26598: LD_VAR 0 3
26602: NOT
26603: IFFALSE 26607
// exit ;
26605: GO 26754
// if tmp > 5 then
26607: LD_VAR 0 3
26611: PUSH
26612: LD_INT 5
26614: GREATER
26615: IFFALSE 26627
// k := 5 else
26617: LD_ADDR_VAR 0 2
26621: PUSH
26622: LD_INT 5
26624: ST_TO_ADDR
26625: GO 26637
// k := tmp ;
26627: LD_ADDR_VAR 0 2
26631: PUSH
26632: LD_VAR 0 3
26636: ST_TO_ADDR
// for i := 1 to k do
26637: LD_ADDR_VAR 0 1
26641: PUSH
26642: DOUBLE
26643: LD_INT 1
26645: DEC
26646: ST_TO_ADDR
26647: LD_VAR 0 2
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26752
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26655: LD_VAR 0 3
26659: PUSH
26660: LD_VAR 0 1
26664: ARRAY
26665: PPUSH
26666: LD_VAR 0 1
26670: PUSH
26671: LD_INT 4
26673: MOD
26674: PUSH
26675: LD_INT 1
26677: PLUS
26678: PPUSH
26679: CALL_OW 259
26683: PUSH
26684: LD_INT 10
26686: LESS
26687: IFFALSE 26750
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26689: LD_VAR 0 3
26693: PUSH
26694: LD_VAR 0 1
26698: ARRAY
26699: PPUSH
26700: LD_VAR 0 1
26704: PUSH
26705: LD_INT 4
26707: MOD
26708: PUSH
26709: LD_INT 1
26711: PLUS
26712: PPUSH
26713: LD_VAR 0 3
26717: PUSH
26718: LD_VAR 0 1
26722: ARRAY
26723: PPUSH
26724: LD_VAR 0 1
26728: PUSH
26729: LD_INT 4
26731: MOD
26732: PUSH
26733: LD_INT 1
26735: PLUS
26736: PPUSH
26737: CALL_OW 259
26741: PUSH
26742: LD_INT 1
26744: PLUS
26745: PPUSH
26746: CALL_OW 237
26750: GO 26652
26752: POP
26753: POP
// end ;
26754: PPOPN 3
26756: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26757: LD_EXP 68
26761: PUSH
26762: LD_EXP 76
26766: AND
26767: IFFALSE 26787
26769: GO 26771
26771: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26772: LD_INT 4
26774: PPUSH
26775: LD_OWVAR 2
26779: PPUSH
26780: LD_INT 0
26782: PPUSH
26783: CALL_OW 324
26787: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26788: LD_EXP 68
26792: PUSH
26793: LD_EXP 105
26797: AND
26798: IFFALSE 26818
26800: GO 26802
26802: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26803: LD_INT 19
26805: PPUSH
26806: LD_OWVAR 2
26810: PPUSH
26811: LD_INT 0
26813: PPUSH
26814: CALL_OW 324
26818: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26819: LD_EXP 68
26823: PUSH
26824: LD_EXP 77
26828: AND
26829: IFFALSE 26931
26831: GO 26833
26833: DISABLE
26834: LD_INT 0
26836: PPUSH
26837: PPUSH
// begin enable ;
26838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26839: LD_ADDR_VAR 0 2
26843: PUSH
26844: LD_INT 22
26846: PUSH
26847: LD_OWVAR 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 34
26861: PUSH
26862: LD_INT 11
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 34
26871: PUSH
26872: LD_INT 30
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 2
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 26931
// for i in tmp do
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: LD_VAR 0 2
26911: PUSH
26912: FOR_IN
26913: IFFALSE 26929
// begin SetLives ( i , 0 ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_INT 0
26922: PPUSH
26923: CALL_OW 234
// end ;
26927: GO 26912
26929: POP
26930: POP
// end ;
26931: PPOPN 2
26933: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26934: LD_EXP 68
26938: PUSH
26939: LD_EXP 78
26943: AND
26944: IFFALSE 26964
26946: GO 26948
26948: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26949: LD_INT 32
26951: PPUSH
26952: LD_OWVAR 2
26956: PPUSH
26957: LD_INT 0
26959: PPUSH
26960: CALL_OW 324
26964: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26965: LD_EXP 68
26969: PUSH
26970: LD_EXP 79
26974: AND
26975: IFFALSE 27156
26977: GO 26979
26979: DISABLE
26980: LD_INT 0
26982: PPUSH
26983: PPUSH
26984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: LD_INT 22
26992: PUSH
26993: LD_OWVAR 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 33
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PPUSH
27016: CALL_OW 69
27020: ST_TO_ADDR
// if not tmp then
27021: LD_VAR 0 2
27025: NOT
27026: IFFALSE 27030
// exit ;
27028: GO 27156
// side := 0 ;
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_INT 0
27037: ST_TO_ADDR
// for i := 1 to 8 do
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: DOUBLE
27044: LD_INT 1
27046: DEC
27047: ST_TO_ADDR
27048: LD_INT 8
27050: PUSH
27051: FOR_TO
27052: IFFALSE 27100
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27054: LD_OWVAR 2
27058: PUSH
27059: LD_VAR 0 1
27063: NONEQUAL
27064: PUSH
27065: LD_OWVAR 2
27069: PPUSH
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 81
27079: PUSH
27080: LD_INT 2
27082: EQUAL
27083: AND
27084: IFFALSE 27098
// begin side := i ;
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_VAR 0 1
27095: ST_TO_ADDR
// break ;
27096: GO 27100
// end ;
27098: GO 27051
27100: POP
27101: POP
// if not side then
27102: LD_VAR 0 3
27106: NOT
27107: IFFALSE 27111
// exit ;
27109: GO 27156
// for i := 1 to tmp do
27111: LD_ADDR_VAR 0 1
27115: PUSH
27116: DOUBLE
27117: LD_INT 1
27119: DEC
27120: ST_TO_ADDR
27121: LD_VAR 0 2
27125: PUSH
27126: FOR_TO
27127: IFFALSE 27154
// if Prob ( 60 ) then
27129: LD_INT 60
27131: PPUSH
27132: CALL_OW 13
27136: IFFALSE 27152
// SetSide ( i , side ) ;
27138: LD_VAR 0 1
27142: PPUSH
27143: LD_VAR 0 3
27147: PPUSH
27148: CALL_OW 235
27152: GO 27126
27154: POP
27155: POP
// end ;
27156: PPOPN 3
27158: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27159: LD_EXP 68
27163: PUSH
27164: LD_EXP 81
27168: AND
27169: IFFALSE 27288
27171: GO 27173
27173: DISABLE
27174: LD_INT 0
27176: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27177: LD_ADDR_VAR 0 1
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_OWVAR 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 21
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: LD_INT 23
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: PPUSH
27226: CALL_OW 69
27230: PUSH
27231: FOR_IN
27232: IFFALSE 27286
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 257
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: LD_INT 4
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: IN
27262: IFFALSE 27284
// SetClass ( un , rand ( 1 , 4 ) ) ;
27264: LD_VAR 0 1
27268: PPUSH
27269: LD_INT 1
27271: PPUSH
27272: LD_INT 4
27274: PPUSH
27275: CALL_OW 12
27279: PPUSH
27280: CALL_OW 336
27284: GO 27231
27286: POP
27287: POP
// end ;
27288: PPOPN 1
27290: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27291: LD_EXP 68
27295: PUSH
27296: LD_EXP 80
27300: AND
27301: IFFALSE 27380
27303: GO 27305
27305: DISABLE
27306: LD_INT 0
27308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27309: LD_ADDR_VAR 0 1
27313: PUSH
27314: LD_INT 22
27316: PUSH
27317: LD_OWVAR 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 21
27328: PUSH
27329: LD_INT 3
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PPUSH
27340: CALL_OW 69
27344: ST_TO_ADDR
// if not tmp then
27345: LD_VAR 0 1
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 1
27361: PPUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 12
27371: ARRAY
27372: PPUSH
27373: LD_INT 100
27375: PPUSH
27376: CALL_OW 234
// end ;
27380: PPOPN 1
27382: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27383: LD_EXP 68
27387: PUSH
27388: LD_EXP 82
27392: AND
27393: IFFALSE 27491
27395: GO 27397
27397: DISABLE
27398: LD_INT 0
27400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27401: LD_ADDR_VAR 0 1
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_OWVAR 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 21
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 69
27436: ST_TO_ADDR
// if not tmp then
27437: LD_VAR 0 1
27441: NOT
27442: IFFALSE 27446
// exit ;
27444: GO 27491
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27446: LD_VAR 0 1
27450: PUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 12
27463: ARRAY
27464: PPUSH
27465: LD_INT 1
27467: PPUSH
27468: LD_INT 4
27470: PPUSH
27471: CALL_OW 12
27475: PPUSH
27476: LD_INT 3000
27478: PPUSH
27479: LD_INT 9000
27481: PPUSH
27482: CALL_OW 12
27486: PPUSH
27487: CALL_OW 492
// end ;
27491: PPOPN 1
27493: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27494: LD_EXP 68
27498: PUSH
27499: LD_EXP 83
27503: AND
27504: IFFALSE 27524
27506: GO 27508
27508: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27509: LD_INT 1
27511: PPUSH
27512: LD_OWVAR 2
27516: PPUSH
27517: LD_INT 0
27519: PPUSH
27520: CALL_OW 324
27524: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27525: LD_EXP 68
27529: PUSH
27530: LD_EXP 84
27534: AND
27535: IFFALSE 27618
27537: GO 27539
27539: DISABLE
27540: LD_INT 0
27542: PPUSH
27543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27544: LD_ADDR_VAR 0 2
27548: PUSH
27549: LD_INT 22
27551: PUSH
27552: LD_OWVAR 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 21
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: CALL_OW 69
27579: ST_TO_ADDR
// if not tmp then
27580: LD_VAR 0 2
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 27618
// for i in tmp do
27589: LD_ADDR_VAR 0 1
27593: PUSH
27594: LD_VAR 0 2
27598: PUSH
27599: FOR_IN
27600: IFFALSE 27616
// SetBLevel ( i , 10 ) ;
27602: LD_VAR 0 1
27606: PPUSH
27607: LD_INT 10
27609: PPUSH
27610: CALL_OW 241
27614: GO 27599
27616: POP
27617: POP
// end ;
27618: PPOPN 2
27620: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27621: LD_EXP 68
27625: PUSH
27626: LD_EXP 85
27630: AND
27631: IFFALSE 27742
27633: GO 27635
27635: DISABLE
27636: LD_INT 0
27638: PPUSH
27639: PPUSH
27640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27641: LD_ADDR_VAR 0 3
27645: PUSH
27646: LD_INT 22
27648: PUSH
27649: LD_OWVAR 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 25
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not tmp then
27677: LD_VAR 0 3
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 27742
// un := tmp [ rand ( 1 , tmp ) ] ;
27686: LD_ADDR_VAR 0 2
27690: PUSH
27691: LD_VAR 0 3
27695: PUSH
27696: LD_INT 1
27698: PPUSH
27699: LD_VAR 0 3
27703: PPUSH
27704: CALL_OW 12
27708: ARRAY
27709: ST_TO_ADDR
// if Crawls ( un ) then
27710: LD_VAR 0 2
27714: PPUSH
27715: CALL_OW 318
27719: IFFALSE 27730
// ComWalk ( un ) ;
27721: LD_VAR 0 2
27725: PPUSH
27726: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27730: LD_VAR 0 2
27734: PPUSH
27735: LD_INT 5
27737: PPUSH
27738: CALL_OW 336
// end ;
27742: PPOPN 3
27744: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27745: LD_EXP 68
27749: PUSH
27750: LD_EXP 86
27754: AND
27755: PUSH
27756: LD_OWVAR 67
27760: PUSH
27761: LD_INT 4
27763: LESS
27764: AND
27765: IFFALSE 27784
27767: GO 27769
27769: DISABLE
// begin Difficulty := Difficulty + 1 ;
27770: LD_ADDR_OWVAR 67
27774: PUSH
27775: LD_OWVAR 67
27779: PUSH
27780: LD_INT 1
27782: PLUS
27783: ST_TO_ADDR
// end ;
27784: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27785: LD_EXP 68
27789: PUSH
27790: LD_EXP 87
27794: AND
27795: IFFALSE 27898
27797: GO 27799
27799: DISABLE
27800: LD_INT 0
27802: PPUSH
// begin for i := 1 to 5 do
27803: LD_ADDR_VAR 0 1
27807: PUSH
27808: DOUBLE
27809: LD_INT 1
27811: DEC
27812: ST_TO_ADDR
27813: LD_INT 5
27815: PUSH
27816: FOR_TO
27817: IFFALSE 27896
// begin uc_nation := nation_nature ;
27819: LD_ADDR_OWVAR 21
27823: PUSH
27824: LD_INT 0
27826: ST_TO_ADDR
// uc_side := 0 ;
27827: LD_ADDR_OWVAR 20
27831: PUSH
27832: LD_INT 0
27834: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27835: LD_ADDR_OWVAR 29
27839: PUSH
27840: LD_INT 12
27842: PUSH
27843: LD_INT 12
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: ST_TO_ADDR
// hc_agressivity := 20 ;
27850: LD_ADDR_OWVAR 35
27854: PUSH
27855: LD_INT 20
27857: ST_TO_ADDR
// hc_class := class_tiger ;
27858: LD_ADDR_OWVAR 28
27862: PUSH
27863: LD_INT 14
27865: ST_TO_ADDR
// hc_gallery :=  ;
27866: LD_ADDR_OWVAR 33
27870: PUSH
27871: LD_STRING 
27873: ST_TO_ADDR
// hc_name :=  ;
27874: LD_ADDR_OWVAR 26
27878: PUSH
27879: LD_STRING 
27881: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27882: CALL_OW 44
27886: PPUSH
27887: LD_INT 0
27889: PPUSH
27890: CALL_OW 51
// end ;
27894: GO 27816
27896: POP
27897: POP
// end ;
27898: PPOPN 1
27900: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27901: LD_EXP 68
27905: PUSH
27906: LD_EXP 88
27910: AND
27911: IFFALSE 27920
27913: GO 27915
27915: DISABLE
// StreamSibBomb ;
27916: CALL 27921 0 0
27920: END
// export function StreamSibBomb ; var i , x , y ; begin
27921: LD_INT 0
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
// result := false ;
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: LD_INT 0
27934: ST_TO_ADDR
// for i := 1 to 16 do
27935: LD_ADDR_VAR 0 2
27939: PUSH
27940: DOUBLE
27941: LD_INT 1
27943: DEC
27944: ST_TO_ADDR
27945: LD_INT 16
27947: PUSH
27948: FOR_TO
27949: IFFALSE 28148
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: LD_INT 10
27958: PUSH
27959: LD_INT 20
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 40
27967: PUSH
27968: LD_INT 50
27970: PUSH
27971: LD_INT 60
27973: PUSH
27974: LD_INT 70
27976: PUSH
27977: LD_INT 80
27979: PUSH
27980: LD_INT 90
27982: PUSH
27983: LD_INT 100
27985: PUSH
27986: LD_INT 110
27988: PUSH
27989: LD_INT 120
27991: PUSH
27992: LD_INT 130
27994: PUSH
27995: LD_INT 140
27997: PUSH
27998: LD_INT 150
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PPUSH
28021: LD_INT 15
28023: PPUSH
28024: CALL_OW 12
28028: ARRAY
28029: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28030: LD_ADDR_VAR 0 4
28034: PUSH
28035: LD_INT 10
28037: PUSH
28038: LD_INT 20
28040: PUSH
28041: LD_INT 30
28043: PUSH
28044: LD_INT 40
28046: PUSH
28047: LD_INT 50
28049: PUSH
28050: LD_INT 60
28052: PUSH
28053: LD_INT 70
28055: PUSH
28056: LD_INT 80
28058: PUSH
28059: LD_INT 90
28061: PUSH
28062: LD_INT 100
28064: PUSH
28065: LD_INT 110
28067: PUSH
28068: LD_INT 120
28070: PUSH
28071: LD_INT 130
28073: PUSH
28074: LD_INT 140
28076: PUSH
28077: LD_INT 150
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PPUSH
28100: LD_INT 15
28102: PPUSH
28103: CALL_OW 12
28107: ARRAY
28108: ST_TO_ADDR
// if ValidHex ( x , y ) then
28109: LD_VAR 0 3
28113: PPUSH
28114: LD_VAR 0 4
28118: PPUSH
28119: CALL_OW 488
28123: IFFALSE 28146
// begin result := [ x , y ] ;
28125: LD_ADDR_VAR 0 1
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: LD_VAR 0 4
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// break ;
28144: GO 28148
// end ; end ;
28146: GO 27948
28148: POP
28149: POP
// if result then
28150: LD_VAR 0 1
28154: IFFALSE 28214
// begin ToLua ( playSibBomb() ) ;
28156: LD_STRING playSibBomb()
28158: PPUSH
28159: CALL_OW 559
// wait ( 0 0$14 ) ;
28163: LD_INT 490
28165: PPUSH
28166: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28170: LD_VAR 0 1
28174: PUSH
28175: LD_INT 1
28177: ARRAY
28178: PPUSH
28179: LD_VAR 0 1
28183: PUSH
28184: LD_INT 2
28186: ARRAY
28187: PPUSH
28188: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28192: LD_VAR 0 1
28196: PUSH
28197: LD_INT 1
28199: ARRAY
28200: PPUSH
28201: LD_VAR 0 1
28205: PUSH
28206: LD_INT 2
28208: ARRAY
28209: PPUSH
28210: CALL_OW 429
// end ; end ;
28214: LD_VAR 0 1
28218: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28219: LD_EXP 68
28223: PUSH
28224: LD_EXP 90
28228: AND
28229: IFFALSE 28241
28231: GO 28233
28233: DISABLE
// YouLost (  ) ;
28234: LD_STRING 
28236: PPUSH
28237: CALL_OW 104
28241: END
// every 0 0$1 trigger StreamModeActive and sFog do
28242: LD_EXP 68
28246: PUSH
28247: LD_EXP 89
28251: AND
28252: IFFALSE 28266
28254: GO 28256
28256: DISABLE
// FogOff ( your_side ) ;
28257: LD_OWVAR 2
28261: PPUSH
28262: CALL_OW 344
28266: END
// every 0 0$1 trigger StreamModeActive and sSun do
28267: LD_EXP 68
28271: PUSH
28272: LD_EXP 91
28276: AND
28277: IFFALSE 28305
28279: GO 28281
28281: DISABLE
// begin solar_recharge_percent := 0 ;
28282: LD_ADDR_OWVAR 79
28286: PUSH
28287: LD_INT 0
28289: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28290: LD_INT 10500
28292: PPUSH
28293: CALL_OW 67
// solar_recharge_percent := 100 ;
28297: LD_ADDR_OWVAR 79
28301: PUSH
28302: LD_INT 100
28304: ST_TO_ADDR
// end ;
28305: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28306: LD_EXP 68
28310: PUSH
28311: LD_EXP 92
28315: AND
28316: IFFALSE 28555
28318: GO 28320
28320: DISABLE
28321: LD_INT 0
28323: PPUSH
28324: PPUSH
28325: PPUSH
// begin tmp := [ ] ;
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: EMPTY
28332: ST_TO_ADDR
// for i := 1 to 6 do
28333: LD_ADDR_VAR 0 1
28337: PUSH
28338: DOUBLE
28339: LD_INT 1
28341: DEC
28342: ST_TO_ADDR
28343: LD_INT 6
28345: PUSH
28346: FOR_TO
28347: IFFALSE 28452
// begin uc_nation := nation_nature ;
28349: LD_ADDR_OWVAR 21
28353: PUSH
28354: LD_INT 0
28356: ST_TO_ADDR
// uc_side := 0 ;
28357: LD_ADDR_OWVAR 20
28361: PUSH
28362: LD_INT 0
28364: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28365: LD_ADDR_OWVAR 29
28369: PUSH
28370: LD_INT 12
28372: PUSH
28373: LD_INT 12
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: ST_TO_ADDR
// hc_agressivity := 20 ;
28380: LD_ADDR_OWVAR 35
28384: PUSH
28385: LD_INT 20
28387: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28388: LD_ADDR_OWVAR 28
28392: PUSH
28393: LD_INT 17
28395: ST_TO_ADDR
// hc_gallery :=  ;
28396: LD_ADDR_OWVAR 33
28400: PUSH
28401: LD_STRING 
28403: ST_TO_ADDR
// hc_name :=  ;
28404: LD_ADDR_OWVAR 26
28408: PUSH
28409: LD_STRING 
28411: ST_TO_ADDR
// un := CreateHuman ;
28412: LD_ADDR_VAR 0 2
28416: PUSH
28417: CALL_OW 44
28421: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28422: LD_VAR 0 2
28426: PPUSH
28427: LD_INT 1
28429: PPUSH
28430: CALL_OW 51
// tmp := tmp ^ un ;
28434: LD_ADDR_VAR 0 3
28438: PUSH
28439: LD_VAR 0 3
28443: PUSH
28444: LD_VAR 0 2
28448: ADD
28449: ST_TO_ADDR
// end ;
28450: GO 28346
28452: POP
28453: POP
// repeat wait ( 0 0$1 ) ;
28454: LD_INT 35
28456: PPUSH
28457: CALL_OW 67
// for un in tmp do
28461: LD_ADDR_VAR 0 2
28465: PUSH
28466: LD_VAR 0 3
28470: PUSH
28471: FOR_IN
28472: IFFALSE 28546
// begin if IsDead ( un ) then
28474: LD_VAR 0 2
28478: PPUSH
28479: CALL_OW 301
28483: IFFALSE 28503
// begin tmp := tmp diff un ;
28485: LD_ADDR_VAR 0 3
28489: PUSH
28490: LD_VAR 0 3
28494: PUSH
28495: LD_VAR 0 2
28499: DIFF
28500: ST_TO_ADDR
// continue ;
28501: GO 28471
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28503: LD_VAR 0 2
28507: PPUSH
28508: LD_INT 3
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PPUSH
28525: CALL_OW 69
28529: PPUSH
28530: LD_VAR 0 2
28534: PPUSH
28535: CALL_OW 74
28539: PPUSH
28540: CALL_OW 115
// end ;
28544: GO 28471
28546: POP
28547: POP
// until not tmp ;
28548: LD_VAR 0 3
28552: NOT
28553: IFFALSE 28454
// end ;
28555: PPOPN 3
28557: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28558: LD_EXP 68
28562: PUSH
28563: LD_EXP 93
28567: AND
28568: IFFALSE 28622
28570: GO 28572
28572: DISABLE
// begin ToLua ( displayTroll(); ) ;
28573: LD_STRING displayTroll();
28575: PPUSH
28576: CALL_OW 559
// wait ( 3 3$00 ) ;
28580: LD_INT 6300
28582: PPUSH
28583: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28587: LD_STRING hideTroll();
28589: PPUSH
28590: CALL_OW 559
// wait ( 1 1$00 ) ;
28594: LD_INT 2100
28596: PPUSH
28597: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28601: LD_STRING displayTroll();
28603: PPUSH
28604: CALL_OW 559
// wait ( 1 1$00 ) ;
28608: LD_INT 2100
28610: PPUSH
28611: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28615: LD_STRING hideTroll();
28617: PPUSH
28618: CALL_OW 559
// end ;
28622: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28623: LD_EXP 68
28627: PUSH
28628: LD_EXP 94
28632: AND
28633: IFFALSE 28696
28635: GO 28637
28637: DISABLE
28638: LD_INT 0
28640: PPUSH
// begin p := 0 ;
28641: LD_ADDR_VAR 0 1
28645: PUSH
28646: LD_INT 0
28648: ST_TO_ADDR
// repeat game_speed := 1 ;
28649: LD_ADDR_OWVAR 65
28653: PUSH
28654: LD_INT 1
28656: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28657: LD_INT 35
28659: PPUSH
28660: CALL_OW 67
// p := p + 1 ;
28664: LD_ADDR_VAR 0 1
28668: PUSH
28669: LD_VAR 0 1
28673: PUSH
28674: LD_INT 1
28676: PLUS
28677: ST_TO_ADDR
// until p >= 60 ;
28678: LD_VAR 0 1
28682: PUSH
28683: LD_INT 60
28685: GREATEREQUAL
28686: IFFALSE 28649
// game_speed := 4 ;
28688: LD_ADDR_OWVAR 65
28692: PUSH
28693: LD_INT 4
28695: ST_TO_ADDR
// end ;
28696: PPOPN 1
28698: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28699: LD_EXP 68
28703: PUSH
28704: LD_EXP 95
28708: AND
28709: IFFALSE 28855
28711: GO 28713
28713: DISABLE
28714: LD_INT 0
28716: PPUSH
28717: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28718: LD_ADDR_VAR 0 1
28722: PUSH
28723: LD_INT 22
28725: PUSH
28726: LD_OWVAR 2
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 30
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 30
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: ST_TO_ADDR
// if not depot then
28772: LD_VAR 0 1
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 28855
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28781: LD_ADDR_VAR 0 2
28785: PUSH
28786: LD_VAR 0 1
28790: PUSH
28791: LD_INT 1
28793: PPUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 12
28803: ARRAY
28804: PPUSH
28805: CALL_OW 274
28809: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 1
28817: PPUSH
28818: LD_INT 0
28820: PPUSH
28821: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28825: LD_VAR 0 2
28829: PPUSH
28830: LD_INT 2
28832: PPUSH
28833: LD_INT 0
28835: PPUSH
28836: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_INT 3
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 277
// end ;
28855: PPOPN 2
28857: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28858: LD_EXP 68
28862: PUSH
28863: LD_EXP 96
28867: AND
28868: IFFALSE 28965
28870: GO 28872
28872: DISABLE
28873: LD_INT 0
28875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28876: LD_ADDR_VAR 0 1
28880: PUSH
28881: LD_INT 22
28883: PUSH
28884: LD_OWVAR 2
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 21
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: LD_INT 23
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ST_TO_ADDR
// if not tmp then
28930: LD_VAR 0 1
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 28965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28939: LD_VAR 0 1
28943: PUSH
28944: LD_INT 1
28946: PPUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 12
28956: ARRAY
28957: PPUSH
28958: LD_INT 200
28960: PPUSH
28961: CALL_OW 234
// end ;
28965: PPOPN 1
28967: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28968: LD_EXP 68
28972: PUSH
28973: LD_EXP 97
28977: AND
28978: IFFALSE 29057
28980: GO 28982
28982: DISABLE
28983: LD_INT 0
28985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28986: LD_ADDR_VAR 0 1
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 21
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: ST_TO_ADDR
// if not tmp then
29022: LD_VAR 0 1
29026: NOT
29027: IFFALSE 29031
// exit ;
29029: GO 29057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29031: LD_VAR 0 1
29035: PUSH
29036: LD_INT 1
29038: PPUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 12
29048: ARRAY
29049: PPUSH
29050: LD_INT 60
29052: PPUSH
29053: CALL_OW 234
// end ;
29057: PPOPN 1
29059: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29060: LD_EXP 68
29064: PUSH
29065: LD_EXP 98
29069: AND
29070: IFFALSE 29169
29072: GO 29074
29074: DISABLE
29075: LD_INT 0
29077: PPUSH
29078: PPUSH
// begin enable ;
29079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29080: LD_ADDR_VAR 0 1
29084: PUSH
29085: LD_INT 22
29087: PUSH
29088: LD_OWVAR 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 61
29099: PUSH
29100: EMPTY
29101: LIST
29102: PUSH
29103: LD_INT 33
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 1
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29169
// for i in tmp do
29132: LD_ADDR_VAR 0 2
29136: PUSH
29137: LD_VAR 0 1
29141: PUSH
29142: FOR_IN
29143: IFFALSE 29167
// if IsControledBy ( i ) then
29145: LD_VAR 0 2
29149: PPUSH
29150: CALL_OW 312
29154: IFFALSE 29165
// ComUnlink ( i ) ;
29156: LD_VAR 0 2
29160: PPUSH
29161: CALL_OW 136
29165: GO 29142
29167: POP
29168: POP
// end ;
29169: PPOPN 2
29171: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29172: LD_EXP 68
29176: PUSH
29177: LD_EXP 99
29181: AND
29182: IFFALSE 29322
29184: GO 29186
29186: DISABLE
29187: LD_INT 0
29189: PPUSH
29190: PPUSH
// begin ToLua ( displayPowell(); ) ;
29191: LD_STRING displayPowell();
29193: PPUSH
29194: CALL_OW 559
// uc_side := 0 ;
29198: LD_ADDR_OWVAR 20
29202: PUSH
29203: LD_INT 0
29205: ST_TO_ADDR
// uc_nation := 2 ;
29206: LD_ADDR_OWVAR 21
29210: PUSH
29211: LD_INT 2
29213: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29214: LD_ADDR_OWVAR 37
29218: PUSH
29219: LD_INT 14
29221: ST_TO_ADDR
// vc_engine := engine_siberite ;
29222: LD_ADDR_OWVAR 39
29226: PUSH
29227: LD_INT 3
29229: ST_TO_ADDR
// vc_control := control_apeman ;
29230: LD_ADDR_OWVAR 38
29234: PUSH
29235: LD_INT 5
29237: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29238: LD_ADDR_OWVAR 40
29242: PUSH
29243: LD_INT 29
29245: ST_TO_ADDR
// un := CreateVehicle ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: CALL_OW 45
29255: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_INT 1
29263: PPUSH
29264: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29268: LD_INT 35
29270: PPUSH
29271: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29275: LD_VAR 0 2
29279: PPUSH
29280: LD_INT 22
29282: PUSH
29283: LD_OWVAR 2
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL_OW 69
29296: PPUSH
29297: LD_VAR 0 2
29301: PPUSH
29302: CALL_OW 74
29306: PPUSH
29307: CALL_OW 115
// until IsDead ( un ) ;
29311: LD_VAR 0 2
29315: PPUSH
29316: CALL_OW 301
29320: IFFALSE 29268
// end ;
29322: PPOPN 2
29324: END
// every 0 0$1 trigger StreamModeActive and sStu do
29325: LD_EXP 68
29329: PUSH
29330: LD_EXP 107
29334: AND
29335: IFFALSE 29351
29337: GO 29339
29339: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29340: LD_STRING displayStucuk();
29342: PPUSH
29343: CALL_OW 559
// ResetFog ;
29347: CALL_OW 335
// end ;
29351: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29352: LD_EXP 68
29356: PUSH
29357: LD_EXP 100
29361: AND
29362: IFFALSE 29503
29364: GO 29366
29366: DISABLE
29367: LD_INT 0
29369: PPUSH
29370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29371: LD_ADDR_VAR 0 2
29375: PUSH
29376: LD_INT 22
29378: PUSH
29379: LD_OWVAR 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 21
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PPUSH
29402: CALL_OW 69
29406: ST_TO_ADDR
// if not tmp then
29407: LD_VAR 0 2
29411: NOT
29412: IFFALSE 29416
// exit ;
29414: GO 29503
// un := tmp [ rand ( 1 , tmp ) ] ;
29416: LD_ADDR_VAR 0 1
29420: PUSH
29421: LD_VAR 0 2
29425: PUSH
29426: LD_INT 1
29428: PPUSH
29429: LD_VAR 0 2
29433: PPUSH
29434: CALL_OW 12
29438: ARRAY
29439: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29440: LD_VAR 0 1
29444: PPUSH
29445: LD_INT 0
29447: PPUSH
29448: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29452: LD_VAR 0 1
29456: PPUSH
29457: LD_OWVAR 3
29461: PUSH
29462: LD_VAR 0 1
29466: DIFF
29467: PPUSH
29468: LD_VAR 0 1
29472: PPUSH
29473: CALL_OW 74
29477: PPUSH
29478: CALL_OW 115
// wait ( 0 0$20 ) ;
29482: LD_INT 700
29484: PPUSH
29485: CALL_OW 67
// SetSide ( un , your_side ) ;
29489: LD_VAR 0 1
29493: PPUSH
29494: LD_OWVAR 2
29498: PPUSH
29499: CALL_OW 235
// end ;
29503: PPOPN 2
29505: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29506: LD_EXP 68
29510: PUSH
29511: LD_EXP 101
29515: AND
29516: IFFALSE 29622
29518: GO 29520
29520: DISABLE
29521: LD_INT 0
29523: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29524: LD_ADDR_VAR 0 1
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_OWVAR 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 30
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 30
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PPUSH
29573: CALL_OW 69
29577: ST_TO_ADDR
// if not depot then
29578: LD_VAR 0 1
29582: NOT
29583: IFFALSE 29587
// exit ;
29585: GO 29622
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29587: LD_VAR 0 1
29591: PUSH
29592: LD_INT 1
29594: ARRAY
29595: PPUSH
29596: CALL_OW 250
29600: PPUSH
29601: LD_VAR 0 1
29605: PUSH
29606: LD_INT 1
29608: ARRAY
29609: PPUSH
29610: CALL_OW 251
29614: PPUSH
29615: LD_INT 70
29617: PPUSH
29618: CALL_OW 495
// end ;
29622: PPOPN 1
29624: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29625: LD_EXP 68
29629: PUSH
29630: LD_EXP 102
29634: AND
29635: IFFALSE 29846
29637: GO 29639
29639: DISABLE
29640: LD_INT 0
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
29646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29647: LD_ADDR_VAR 0 5
29651: PUSH
29652: LD_INT 22
29654: PUSH
29655: LD_OWVAR 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 21
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PPUSH
29678: CALL_OW 69
29682: ST_TO_ADDR
// if not tmp then
29683: LD_VAR 0 5
29687: NOT
29688: IFFALSE 29692
// exit ;
29690: GO 29846
// for i in tmp do
29692: LD_ADDR_VAR 0 1
29696: PUSH
29697: LD_VAR 0 5
29701: PUSH
29702: FOR_IN
29703: IFFALSE 29844
// begin d := rand ( 0 , 5 ) ;
29705: LD_ADDR_VAR 0 4
29709: PUSH
29710: LD_INT 0
29712: PPUSH
29713: LD_INT 5
29715: PPUSH
29716: CALL_OW 12
29720: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 250
29735: PPUSH
29736: LD_VAR 0 4
29740: PPUSH
29741: LD_INT 3
29743: PPUSH
29744: LD_INT 12
29746: PPUSH
29747: CALL_OW 12
29751: PPUSH
29752: CALL_OW 272
29756: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL_OW 251
29771: PPUSH
29772: LD_VAR 0 4
29776: PPUSH
29777: LD_INT 3
29779: PPUSH
29780: LD_INT 12
29782: PPUSH
29783: CALL_OW 12
29787: PPUSH
29788: CALL_OW 273
29792: ST_TO_ADDR
// if ValidHex ( x , y ) then
29793: LD_VAR 0 2
29797: PPUSH
29798: LD_VAR 0 3
29802: PPUSH
29803: CALL_OW 488
29807: IFFALSE 29842
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29809: LD_VAR 0 1
29813: PPUSH
29814: LD_VAR 0 2
29818: PPUSH
29819: LD_VAR 0 3
29823: PPUSH
29824: LD_INT 3
29826: PPUSH
29827: LD_INT 6
29829: PPUSH
29830: CALL_OW 12
29834: PPUSH
29835: LD_INT 1
29837: PPUSH
29838: CALL_OW 483
// end ;
29842: GO 29702
29844: POP
29845: POP
// end ;
29846: PPOPN 5
29848: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29849: LD_EXP 68
29853: PUSH
29854: LD_EXP 103
29858: AND
29859: IFFALSE 29953
29861: GO 29863
29863: DISABLE
29864: LD_INT 0
29866: PPUSH
29867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29868: LD_ADDR_VAR 0 2
29872: PUSH
29873: LD_INT 22
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 32
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 21
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PPUSH
29910: CALL_OW 69
29914: ST_TO_ADDR
// if not tmp then
29915: LD_VAR 0 2
29919: NOT
29920: IFFALSE 29924
// exit ;
29922: GO 29953
// for i in tmp do
29924: LD_ADDR_VAR 0 1
29928: PUSH
29929: LD_VAR 0 2
29933: PUSH
29934: FOR_IN
29935: IFFALSE 29951
// SetFuel ( i , 0 ) ;
29937: LD_VAR 0 1
29941: PPUSH
29942: LD_INT 0
29944: PPUSH
29945: CALL_OW 240
29949: GO 29934
29951: POP
29952: POP
// end ;
29953: PPOPN 2
29955: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29956: LD_EXP 68
29960: PUSH
29961: LD_EXP 104
29965: AND
29966: IFFALSE 30032
29968: GO 29970
29970: DISABLE
29971: LD_INT 0
29973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29974: LD_ADDR_VAR 0 1
29978: PUSH
29979: LD_INT 22
29981: PUSH
29982: LD_OWVAR 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 30
29993: PUSH
29994: LD_INT 29
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PPUSH
30005: CALL_OW 69
30009: ST_TO_ADDR
// if not tmp then
30010: LD_VAR 0 1
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 30032
// DestroyUnit ( tmp [ 1 ] ) ;
30019: LD_VAR 0 1
30023: PUSH
30024: LD_INT 1
30026: ARRAY
30027: PPUSH
30028: CALL_OW 65
// end ;
30032: PPOPN 1
30034: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30035: LD_EXP 68
30039: PUSH
30040: LD_EXP 106
30044: AND
30045: IFFALSE 30174
30047: GO 30049
30049: DISABLE
30050: LD_INT 0
30052: PPUSH
// begin uc_side := 0 ;
30053: LD_ADDR_OWVAR 20
30057: PUSH
30058: LD_INT 0
30060: ST_TO_ADDR
// uc_nation := nation_arabian ;
30061: LD_ADDR_OWVAR 21
30065: PUSH
30066: LD_INT 2
30068: ST_TO_ADDR
// hc_gallery :=  ;
30069: LD_ADDR_OWVAR 33
30073: PUSH
30074: LD_STRING 
30076: ST_TO_ADDR
// hc_name :=  ;
30077: LD_ADDR_OWVAR 26
30081: PUSH
30082: LD_STRING 
30084: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 11
30090: PPUSH
30091: LD_INT 10
30093: PPUSH
30094: CALL_OW 380
// un := CreateHuman ;
30098: LD_ADDR_VAR 0 1
30102: PUSH
30103: CALL_OW 44
30107: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30108: LD_VAR 0 1
30112: PPUSH
30113: LD_INT 1
30115: PPUSH
30116: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30120: LD_INT 35
30122: PPUSH
30123: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30127: LD_VAR 0 1
30131: PPUSH
30132: LD_INT 22
30134: PUSH
30135: LD_OWVAR 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: PPUSH
30149: LD_VAR 0 1
30153: PPUSH
30154: CALL_OW 74
30158: PPUSH
30159: CALL_OW 115
// until IsDead ( un ) ;
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 301
30172: IFFALSE 30120
// end ;
30174: PPOPN 1
30176: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30177: LD_EXP 68
30181: PUSH
30182: LD_EXP 108
30186: AND
30187: IFFALSE 30199
30189: GO 30191
30191: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30192: LD_STRING earthquake(getX(game), 0, 32)
30194: PPUSH
30195: CALL_OW 559
30199: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30200: LD_EXP 68
30204: PUSH
30205: LD_EXP 109
30209: AND
30210: IFFALSE 30301
30212: GO 30214
30214: DISABLE
30215: LD_INT 0
30217: PPUSH
// begin enable ;
30218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_INT 22
30226: PUSH
30227: LD_OWVAR 2
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 21
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 33
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: PPUSH
30261: CALL_OW 69
30265: ST_TO_ADDR
// if not tmp then
30266: LD_VAR 0 1
30270: NOT
30271: IFFALSE 30275
// exit ;
30273: GO 30301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30275: LD_VAR 0 1
30279: PUSH
30280: LD_INT 1
30282: PPUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 12
30292: ARRAY
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL_OW 234
// end ;
30301: PPOPN 1
30303: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30304: LD_EXP 68
30308: PUSH
30309: LD_EXP 110
30313: AND
30314: IFFALSE 30455
30316: GO 30318
30318: DISABLE
30319: LD_INT 0
30321: PPUSH
30322: PPUSH
30323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30324: LD_ADDR_VAR 0 3
30328: PUSH
30329: LD_INT 22
30331: PUSH
30332: LD_OWVAR 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 25
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL_OW 69
30359: ST_TO_ADDR
// if not tmp then
30360: LD_VAR 0 3
30364: NOT
30365: IFFALSE 30369
// exit ;
30367: GO 30455
// un := tmp [ rand ( 1 , tmp ) ] ;
30369: LD_ADDR_VAR 0 2
30373: PUSH
30374: LD_VAR 0 3
30378: PUSH
30379: LD_INT 1
30381: PPUSH
30382: LD_VAR 0 3
30386: PPUSH
30387: CALL_OW 12
30391: ARRAY
30392: ST_TO_ADDR
// if Crawls ( un ) then
30393: LD_VAR 0 2
30397: PPUSH
30398: CALL_OW 318
30402: IFFALSE 30413
// ComWalk ( un ) ;
30404: LD_VAR 0 2
30408: PPUSH
30409: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30413: LD_VAR 0 2
30417: PPUSH
30418: LD_INT 9
30420: PPUSH
30421: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30425: LD_INT 28
30427: PPUSH
30428: LD_OWVAR 2
30432: PPUSH
30433: LD_INT 2
30435: PPUSH
30436: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30440: LD_INT 29
30442: PPUSH
30443: LD_OWVAR 2
30447: PPUSH
30448: LD_INT 2
30450: PPUSH
30451: CALL_OW 322
// end ;
30455: PPOPN 3
30457: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30458: LD_EXP 68
30462: PUSH
30463: LD_EXP 111
30467: AND
30468: IFFALSE 30579
30470: GO 30472
30472: DISABLE
30473: LD_INT 0
30475: PPUSH
30476: PPUSH
30477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_INT 22
30485: PUSH
30486: LD_OWVAR 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 25
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PPUSH
30509: CALL_OW 69
30513: ST_TO_ADDR
// if not tmp then
30514: LD_VAR 0 3
30518: NOT
30519: IFFALSE 30523
// exit ;
30521: GO 30579
// un := tmp [ rand ( 1 , tmp ) ] ;
30523: LD_ADDR_VAR 0 2
30527: PUSH
30528: LD_VAR 0 3
30532: PUSH
30533: LD_INT 1
30535: PPUSH
30536: LD_VAR 0 3
30540: PPUSH
30541: CALL_OW 12
30545: ARRAY
30546: ST_TO_ADDR
// if Crawls ( un ) then
30547: LD_VAR 0 2
30551: PPUSH
30552: CALL_OW 318
30556: IFFALSE 30567
// ComWalk ( un ) ;
30558: LD_VAR 0 2
30562: PPUSH
30563: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30567: LD_VAR 0 2
30571: PPUSH
30572: LD_INT 8
30574: PPUSH
30575: CALL_OW 336
// end ;
30579: PPOPN 3
30581: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30582: LD_EXP 68
30586: PUSH
30587: LD_EXP 112
30591: AND
30592: IFFALSE 30736
30594: GO 30596
30596: DISABLE
30597: LD_INT 0
30599: PPUSH
30600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30601: LD_ADDR_VAR 0 2
30605: PUSH
30606: LD_INT 22
30608: PUSH
30609: LD_OWVAR 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 21
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 34
30633: PUSH
30634: LD_INT 12
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 34
30643: PUSH
30644: LD_INT 51
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 34
30653: PUSH
30654: LD_INT 32
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: PPUSH
30672: CALL_OW 69
30676: ST_TO_ADDR
// if not tmp then
30677: LD_VAR 0 2
30681: NOT
30682: IFFALSE 30686
// exit ;
30684: GO 30736
// for i in tmp do
30686: LD_ADDR_VAR 0 1
30690: PUSH
30691: LD_VAR 0 2
30695: PUSH
30696: FOR_IN
30697: IFFALSE 30734
// if GetCargo ( i , mat_artifact ) = 0 then
30699: LD_VAR 0 1
30703: PPUSH
30704: LD_INT 4
30706: PPUSH
30707: CALL_OW 289
30711: PUSH
30712: LD_INT 0
30714: EQUAL
30715: IFFALSE 30732
// SetCargo ( i , mat_siberit , 100 ) ;
30717: LD_VAR 0 1
30721: PPUSH
30722: LD_INT 3
30724: PPUSH
30725: LD_INT 100
30727: PPUSH
30728: CALL_OW 290
30732: GO 30696
30734: POP
30735: POP
// end ;
30736: PPOPN 2
30738: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30739: LD_EXP 68
30743: PUSH
30744: LD_EXP 113
30748: AND
30749: IFFALSE 30932
30751: GO 30753
30753: DISABLE
30754: LD_INT 0
30756: PPUSH
30757: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30758: LD_ADDR_VAR 0 2
30762: PUSH
30763: LD_INT 22
30765: PUSH
30766: LD_OWVAR 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: ST_TO_ADDR
// if not tmp then
30780: LD_VAR 0 2
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 30932
// for i := 1 to 2 do
30789: LD_ADDR_VAR 0 1
30793: PUSH
30794: DOUBLE
30795: LD_INT 1
30797: DEC
30798: ST_TO_ADDR
30799: LD_INT 2
30801: PUSH
30802: FOR_TO
30803: IFFALSE 30930
// begin uc_side := your_side ;
30805: LD_ADDR_OWVAR 20
30809: PUSH
30810: LD_OWVAR 2
30814: ST_TO_ADDR
// uc_nation := nation_american ;
30815: LD_ADDR_OWVAR 21
30819: PUSH
30820: LD_INT 1
30822: ST_TO_ADDR
// vc_chassis := us_morphling ;
30823: LD_ADDR_OWVAR 37
30827: PUSH
30828: LD_INT 5
30830: ST_TO_ADDR
// vc_engine := engine_siberite ;
30831: LD_ADDR_OWVAR 39
30835: PUSH
30836: LD_INT 3
30838: ST_TO_ADDR
// vc_control := control_computer ;
30839: LD_ADDR_OWVAR 38
30843: PUSH
30844: LD_INT 3
30846: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30847: LD_ADDR_OWVAR 40
30851: PUSH
30852: LD_INT 10
30854: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30855: LD_VAR 0 2
30859: PUSH
30860: LD_INT 1
30862: ARRAY
30863: PPUSH
30864: CALL_OW 310
30868: NOT
30869: IFFALSE 30916
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30871: CALL_OW 45
30875: PPUSH
30876: LD_VAR 0 2
30880: PUSH
30881: LD_INT 1
30883: ARRAY
30884: PPUSH
30885: CALL_OW 250
30889: PPUSH
30890: LD_VAR 0 2
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: CALL_OW 251
30903: PPUSH
30904: LD_INT 12
30906: PPUSH
30907: LD_INT 1
30909: PPUSH
30910: CALL_OW 50
30914: GO 30928
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30916: CALL_OW 45
30920: PPUSH
30921: LD_INT 1
30923: PPUSH
30924: CALL_OW 51
// end ;
30928: GO 30802
30930: POP
30931: POP
// end ;
30932: PPOPN 2
30934: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30935: LD_EXP 68
30939: PUSH
30940: LD_EXP 114
30944: AND
30945: IFFALSE 31167
30947: GO 30949
30949: DISABLE
30950: LD_INT 0
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30958: LD_ADDR_VAR 0 6
30962: PUSH
30963: LD_INT 22
30965: PUSH
30966: LD_OWVAR 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 21
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: LD_INT 23
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: PPUSH
31007: CALL_OW 69
31011: ST_TO_ADDR
// if not tmp then
31012: LD_VAR 0 6
31016: NOT
31017: IFFALSE 31021
// exit ;
31019: GO 31167
// s1 := rand ( 1 , 4 ) ;
31021: LD_ADDR_VAR 0 2
31025: PUSH
31026: LD_INT 1
31028: PPUSH
31029: LD_INT 4
31031: PPUSH
31032: CALL_OW 12
31036: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31037: LD_ADDR_VAR 0 4
31041: PUSH
31042: LD_VAR 0 6
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: LD_VAR 0 2
31055: PPUSH
31056: CALL_OW 259
31060: ST_TO_ADDR
// if s1 = 1 then
31061: LD_VAR 0 2
31065: PUSH
31066: LD_INT 1
31068: EQUAL
31069: IFFALSE 31089
// s2 := rand ( 2 , 4 ) else
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 2
31078: PPUSH
31079: LD_INT 4
31081: PPUSH
31082: CALL_OW 12
31086: ST_TO_ADDR
31087: GO 31097
// s2 := 1 ;
31089: LD_ADDR_VAR 0 3
31093: PUSH
31094: LD_INT 1
31096: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31097: LD_ADDR_VAR 0 5
31101: PUSH
31102: LD_VAR 0 6
31106: PUSH
31107: LD_INT 1
31109: ARRAY
31110: PPUSH
31111: LD_VAR 0 3
31115: PPUSH
31116: CALL_OW 259
31120: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31121: LD_VAR 0 6
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: PPUSH
31130: LD_VAR 0 2
31134: PPUSH
31135: LD_VAR 0 5
31139: PPUSH
31140: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31144: LD_VAR 0 6
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: PPUSH
31153: LD_VAR 0 3
31157: PPUSH
31158: LD_VAR 0 4
31162: PPUSH
31163: CALL_OW 237
// end ;
31167: PPOPN 6
31169: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31170: LD_EXP 68
31174: PUSH
31175: LD_EXP 115
31179: AND
31180: IFFALSE 31259
31182: GO 31184
31184: DISABLE
31185: LD_INT 0
31187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31188: LD_ADDR_VAR 0 1
31192: PUSH
31193: LD_INT 22
31195: PUSH
31196: LD_OWVAR 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 30
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: ST_TO_ADDR
// if not tmp then
31224: LD_VAR 0 1
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31259
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31233: LD_VAR 0 1
31237: PUSH
31238: LD_INT 1
31240: PPUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 12
31250: ARRAY
31251: PPUSH
31252: LD_INT 1
31254: PPUSH
31255: CALL_OW 234
// end ;
31259: PPOPN 1
31261: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31262: LD_EXP 68
31266: PUSH
31267: LD_EXP 116
31271: AND
31272: IFFALSE 31384
31274: GO 31276
31276: DISABLE
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31281: LD_ADDR_VAR 0 2
31285: PUSH
31286: LD_INT 22
31288: PUSH
31289: LD_OWVAR 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 30
31303: PUSH
31304: LD_INT 27
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 30
31313: PUSH
31314: LD_INT 26
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 30
31323: PUSH
31324: LD_INT 28
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: ST_TO_ADDR
// if not tmp then
31346: LD_VAR 0 2
31350: NOT
31351: IFFALSE 31355
// exit ;
31353: GO 31384
// for i in tmp do
31355: LD_ADDR_VAR 0 1
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: FOR_IN
31366: IFFALSE 31382
// SetLives ( i , 1 ) ;
31368: LD_VAR 0 1
31372: PPUSH
31373: LD_INT 1
31375: PPUSH
31376: CALL_OW 234
31380: GO 31365
31382: POP
31383: POP
// end ;
31384: PPOPN 2
31386: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31387: LD_EXP 68
31391: PUSH
31392: LD_EXP 117
31396: AND
31397: IFFALSE 31684
31399: GO 31401
31401: DISABLE
31402: LD_INT 0
31404: PPUSH
31405: PPUSH
31406: PPUSH
// begin i := rand ( 1 , 7 ) ;
31407: LD_ADDR_VAR 0 1
31411: PUSH
31412: LD_INT 1
31414: PPUSH
31415: LD_INT 7
31417: PPUSH
31418: CALL_OW 12
31422: ST_TO_ADDR
// case i of 1 :
31423: LD_VAR 0 1
31427: PUSH
31428: LD_INT 1
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31446
31436: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31437: LD_STRING earthquake(getX(game), 0, 32)
31439: PPUSH
31440: CALL_OW 559
31444: GO 31684
31446: LD_INT 2
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31468
31454: POP
// begin ToLua ( displayStucuk(); ) ;
31455: LD_STRING displayStucuk();
31457: PPUSH
31458: CALL_OW 559
// ResetFog ;
31462: CALL_OW 335
// end ; 3 :
31466: GO 31684
31468: LD_INT 3
31470: DOUBLE
31471: EQUAL
31472: IFTRUE 31476
31474: GO 31580
31476: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31477: LD_ADDR_VAR 0 2
31481: PUSH
31482: LD_INT 22
31484: PUSH
31485: LD_OWVAR 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 25
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PPUSH
31508: CALL_OW 69
31512: ST_TO_ADDR
// if not tmp then
31513: LD_VAR 0 2
31517: NOT
31518: IFFALSE 31522
// exit ;
31520: GO 31684
// un := tmp [ rand ( 1 , tmp ) ] ;
31522: LD_ADDR_VAR 0 3
31526: PUSH
31527: LD_VAR 0 2
31531: PUSH
31532: LD_INT 1
31534: PPUSH
31535: LD_VAR 0 2
31539: PPUSH
31540: CALL_OW 12
31544: ARRAY
31545: ST_TO_ADDR
// if Crawls ( un ) then
31546: LD_VAR 0 3
31550: PPUSH
31551: CALL_OW 318
31555: IFFALSE 31566
// ComWalk ( un ) ;
31557: LD_VAR 0 3
31561: PPUSH
31562: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31566: LD_VAR 0 3
31570: PPUSH
31571: LD_INT 8
31573: PPUSH
31574: CALL_OW 336
// end ; 4 :
31578: GO 31684
31580: LD_INT 4
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31662
31588: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31589: LD_ADDR_VAR 0 2
31593: PUSH
31594: LD_INT 22
31596: PUSH
31597: LD_OWVAR 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 30
31608: PUSH
31609: LD_INT 29
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PPUSH
31620: CALL_OW 69
31624: ST_TO_ADDR
// if not tmp then
31625: LD_VAR 0 2
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31684
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31634: LD_VAR 0 2
31638: PUSH
31639: LD_INT 1
31641: ARRAY
31642: PPUSH
31643: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31647: LD_VAR 0 2
31651: PUSH
31652: LD_INT 1
31654: ARRAY
31655: PPUSH
31656: CALL_OW 65
// end ; 5 .. 7 :
31660: GO 31684
31662: LD_INT 5
31664: DOUBLE
31665: GREATEREQUAL
31666: IFFALSE 31674
31668: LD_INT 7
31670: DOUBLE
31671: LESSEQUAL
31672: IFTRUE 31676
31674: GO 31683
31676: POP
// StreamSibBomb ; end ;
31677: CALL 27921 0 0
31681: GO 31684
31683: POP
// end ;
31684: PPOPN 3
31686: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31687: LD_EXP 68
31691: PUSH
31692: LD_EXP 118
31696: AND
31697: IFFALSE 31853
31699: GO 31701
31701: DISABLE
31702: LD_INT 0
31704: PPUSH
31705: PPUSH
31706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31707: LD_ADDR_VAR 0 2
31711: PUSH
31712: LD_INT 81
31714: PUSH
31715: LD_OWVAR 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 21
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 21
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PPUSH
31756: CALL_OW 69
31760: ST_TO_ADDR
// if not tmp then
31761: LD_VAR 0 2
31765: NOT
31766: IFFALSE 31770
// exit ;
31768: GO 31853
// p := 0 ;
31770: LD_ADDR_VAR 0 3
31774: PUSH
31775: LD_INT 0
31777: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31778: LD_INT 35
31780: PPUSH
31781: CALL_OW 67
// p := p + 1 ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_VAR 0 3
31794: PUSH
31795: LD_INT 1
31797: PLUS
31798: ST_TO_ADDR
// for i in tmp do
31799: LD_ADDR_VAR 0 1
31803: PUSH
31804: LD_VAR 0 2
31808: PUSH
31809: FOR_IN
31810: IFFALSE 31841
// if GetLives ( i ) < 1000 then
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 256
31821: PUSH
31822: LD_INT 1000
31824: LESS
31825: IFFALSE 31839
// SetLives ( i , 1000 ) ;
31827: LD_VAR 0 1
31831: PPUSH
31832: LD_INT 1000
31834: PPUSH
31835: CALL_OW 234
31839: GO 31809
31841: POP
31842: POP
// until p > 20 ;
31843: LD_VAR 0 3
31847: PUSH
31848: LD_INT 20
31850: GREATER
31851: IFFALSE 31778
// end ;
31853: PPOPN 3
31855: END
// every 0 0$1 trigger StreamModeActive and sTime do
31856: LD_EXP 68
31860: PUSH
31861: LD_EXP 119
31865: AND
31866: IFFALSE 31901
31868: GO 31870
31870: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31871: LD_INT 28
31873: PPUSH
31874: LD_OWVAR 2
31878: PPUSH
31879: LD_INT 2
31881: PPUSH
31882: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31886: LD_INT 30
31888: PPUSH
31889: LD_OWVAR 2
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 322
// end ;
31901: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31902: LD_EXP 68
31906: PUSH
31907: LD_EXP 120
31911: AND
31912: IFFALSE 32033
31914: GO 31916
31916: DISABLE
31917: LD_INT 0
31919: PPUSH
31920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31921: LD_ADDR_VAR 0 2
31925: PUSH
31926: LD_INT 22
31928: PUSH
31929: LD_OWVAR 2
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 21
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: LD_INT 23
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 69
31974: ST_TO_ADDR
// if not tmp then
31975: LD_VAR 0 2
31979: NOT
31980: IFFALSE 31984
// exit ;
31982: GO 32033
// for i in tmp do
31984: LD_ADDR_VAR 0 1
31988: PUSH
31989: LD_VAR 0 2
31993: PUSH
31994: FOR_IN
31995: IFFALSE 32031
// begin if Crawls ( i ) then
31997: LD_VAR 0 1
32001: PPUSH
32002: CALL_OW 318
32006: IFFALSE 32017
// ComWalk ( i ) ;
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 138
// SetClass ( i , 2 ) ;
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_INT 2
32024: PPUSH
32025: CALL_OW 336
// end ;
32029: GO 31994
32031: POP
32032: POP
// end ;
32033: PPOPN 2
32035: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32036: LD_EXP 68
32040: PUSH
32041: LD_EXP 121
32045: AND
32046: IFFALSE 32334
32048: GO 32050
32050: DISABLE
32051: LD_INT 0
32053: PPUSH
32054: PPUSH
32055: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32056: LD_OWVAR 2
32060: PPUSH
32061: LD_INT 9
32063: PPUSH
32064: LD_INT 1
32066: PPUSH
32067: LD_INT 1
32069: PPUSH
32070: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32074: LD_INT 9
32076: PPUSH
32077: LD_OWVAR 2
32081: PPUSH
32082: CALL_OW 343
// uc_side := 9 ;
32086: LD_ADDR_OWVAR 20
32090: PUSH
32091: LD_INT 9
32093: ST_TO_ADDR
// uc_nation := 2 ;
32094: LD_ADDR_OWVAR 21
32098: PUSH
32099: LD_INT 2
32101: ST_TO_ADDR
// hc_name := Dark Warrior ;
32102: LD_ADDR_OWVAR 26
32106: PUSH
32107: LD_STRING Dark Warrior
32109: ST_TO_ADDR
// hc_gallery :=  ;
32110: LD_ADDR_OWVAR 33
32114: PUSH
32115: LD_STRING 
32117: ST_TO_ADDR
// hc_noskilllimit := true ;
32118: LD_ADDR_OWVAR 76
32122: PUSH
32123: LD_INT 1
32125: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32126: LD_ADDR_OWVAR 31
32130: PUSH
32131: LD_INT 30
32133: PUSH
32134: LD_INT 30
32136: PUSH
32137: LD_INT 30
32139: PUSH
32140: LD_INT 30
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// un := CreateHuman ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: CALL_OW 44
32158: ST_TO_ADDR
// hc_noskilllimit := false ;
32159: LD_ADDR_OWVAR 76
32163: PUSH
32164: LD_INT 0
32166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32167: LD_VAR 0 3
32171: PPUSH
32172: LD_INT 1
32174: PPUSH
32175: CALL_OW 51
// ToLua ( playRanger() ) ;
32179: LD_STRING playRanger()
32181: PPUSH
32182: CALL_OW 559
// p := 0 ;
32186: LD_ADDR_VAR 0 2
32190: PUSH
32191: LD_INT 0
32193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32194: LD_INT 35
32196: PPUSH
32197: CALL_OW 67
// p := p + 1 ;
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: LD_VAR 0 2
32210: PUSH
32211: LD_INT 1
32213: PLUS
32214: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32215: LD_VAR 0 3
32219: PPUSH
32220: CALL_OW 256
32224: PUSH
32225: LD_INT 1000
32227: LESS
32228: IFFALSE 32242
// SetLives ( un , 1000 ) ;
32230: LD_VAR 0 3
32234: PPUSH
32235: LD_INT 1000
32237: PPUSH
32238: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32242: LD_VAR 0 3
32246: PPUSH
32247: LD_INT 81
32249: PUSH
32250: LD_OWVAR 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 91
32261: PUSH
32262: LD_VAR 0 3
32266: PUSH
32267: LD_INT 30
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PPUSH
32279: CALL_OW 69
32283: PPUSH
32284: LD_VAR 0 3
32288: PPUSH
32289: CALL_OW 74
32293: PPUSH
32294: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32298: LD_VAR 0 2
32302: PUSH
32303: LD_INT 80
32305: GREATER
32306: PUSH
32307: LD_VAR 0 3
32311: PPUSH
32312: CALL_OW 301
32316: OR
32317: IFFALSE 32194
// if un then
32319: LD_VAR 0 3
32323: IFFALSE 32334
// RemoveUnit ( un ) ;
32325: LD_VAR 0 3
32329: PPUSH
32330: CALL_OW 64
// end ;
32334: PPOPN 3
32336: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32337: LD_EXP 122
32341: IFFALSE 32457
32343: GO 32345
32345: DISABLE
32346: LD_INT 0
32348: PPUSH
32349: PPUSH
32350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32351: LD_ADDR_VAR 0 2
32355: PUSH
32356: LD_INT 81
32358: PUSH
32359: LD_OWVAR 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 21
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PPUSH
32382: CALL_OW 69
32386: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32387: LD_STRING playComputer()
32389: PPUSH
32390: CALL_OW 559
// if not tmp then
32394: LD_VAR 0 2
32398: NOT
32399: IFFALSE 32403
// exit ;
32401: GO 32457
// for i in tmp do
32403: LD_ADDR_VAR 0 1
32407: PUSH
32408: LD_VAR 0 2
32412: PUSH
32413: FOR_IN
32414: IFFALSE 32455
// for j := 1 to 4 do
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: DOUBLE
32422: LD_INT 1
32424: DEC
32425: ST_TO_ADDR
32426: LD_INT 4
32428: PUSH
32429: FOR_TO
32430: IFFALSE 32451
// SetSkill ( i , j , 10 ) ;
32432: LD_VAR 0 1
32436: PPUSH
32437: LD_VAR 0 3
32441: PPUSH
32442: LD_INT 10
32444: PPUSH
32445: CALL_OW 237
32449: GO 32429
32451: POP
32452: POP
32453: GO 32413
32455: POP
32456: POP
// end ;
32457: PPOPN 3
32459: END
// every 0 0$1 trigger s30 do var i , tmp ;
32460: LD_EXP 123
32464: IFFALSE 32533
32466: GO 32468
32468: DISABLE
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32473: LD_ADDR_VAR 0 2
32477: PUSH
32478: LD_INT 22
32480: PUSH
32481: LD_OWVAR 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PPUSH
32490: CALL_OW 69
32494: ST_TO_ADDR
// if not tmp then
32495: LD_VAR 0 2
32499: NOT
32500: IFFALSE 32504
// exit ;
32502: GO 32533
// for i in tmp do
32504: LD_ADDR_VAR 0 1
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: FOR_IN
32515: IFFALSE 32531
// SetLives ( i , 300 ) ;
32517: LD_VAR 0 1
32521: PPUSH
32522: LD_INT 300
32524: PPUSH
32525: CALL_OW 234
32529: GO 32514
32531: POP
32532: POP
// end ;
32533: PPOPN 2
32535: END
// every 0 0$1 trigger s60 do var i , tmp ;
32536: LD_EXP 124
32540: IFFALSE 32609
32542: GO 32544
32544: DISABLE
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: LD_INT 22
32556: PUSH
32557: LD_OWVAR 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PPUSH
32566: CALL_OW 69
32570: ST_TO_ADDR
// if not tmp then
32571: LD_VAR 0 2
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 32609
// for i in tmp do
32580: LD_ADDR_VAR 0 1
32584: PUSH
32585: LD_VAR 0 2
32589: PUSH
32590: FOR_IN
32591: IFFALSE 32607
// SetLives ( i , 600 ) ;
32593: LD_VAR 0 1
32597: PPUSH
32598: LD_INT 600
32600: PPUSH
32601: CALL_OW 234
32605: GO 32590
32607: POP
32608: POP
// end ;
32609: PPOPN 2
32611: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32612: LD_INT 0
32614: PPUSH
// case cmd of 301 :
32615: LD_VAR 0 1
32619: PUSH
32620: LD_INT 301
32622: DOUBLE
32623: EQUAL
32624: IFTRUE 32628
32626: GO 32660
32628: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32629: LD_VAR 0 6
32633: PPUSH
32634: LD_VAR 0 7
32638: PPUSH
32639: LD_VAR 0 8
32643: PPUSH
32644: LD_VAR 0 4
32648: PPUSH
32649: LD_VAR 0 5
32653: PPUSH
32654: CALL 33861 0 5
32658: GO 32781
32660: LD_INT 302
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32705
32668: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32669: LD_VAR 0 6
32673: PPUSH
32674: LD_VAR 0 7
32678: PPUSH
32679: LD_VAR 0 8
32683: PPUSH
32684: LD_VAR 0 9
32688: PPUSH
32689: LD_VAR 0 4
32693: PPUSH
32694: LD_VAR 0 5
32698: PPUSH
32699: CALL 33952 0 6
32703: GO 32781
32705: LD_INT 303
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32750
32713: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32714: LD_VAR 0 6
32718: PPUSH
32719: LD_VAR 0 7
32723: PPUSH
32724: LD_VAR 0 8
32728: PPUSH
32729: LD_VAR 0 9
32733: PPUSH
32734: LD_VAR 0 4
32738: PPUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: CALL 32786 0 6
32748: GO 32781
32750: LD_INT 304
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32780
32758: POP
// hHackTeleport ( unit , x , y ) ; end ;
32759: LD_VAR 0 2
32763: PPUSH
32764: LD_VAR 0 4
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: CALL 34545 0 3
32778: GO 32781
32780: POP
// end ;
32781: LD_VAR 0 12
32785: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32786: LD_INT 0
32788: PPUSH
32789: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32790: LD_VAR 0 1
32794: PUSH
32795: LD_INT 1
32797: LESS
32798: PUSH
32799: LD_VAR 0 1
32803: PUSH
32804: LD_INT 3
32806: GREATER
32807: OR
32808: PUSH
32809: LD_VAR 0 5
32813: PPUSH
32814: LD_VAR 0 6
32818: PPUSH
32819: CALL_OW 428
32823: OR
32824: IFFALSE 32828
// exit ;
32826: GO 33548
// uc_side := your_side ;
32828: LD_ADDR_OWVAR 20
32832: PUSH
32833: LD_OWVAR 2
32837: ST_TO_ADDR
// uc_nation := nation ;
32838: LD_ADDR_OWVAR 21
32842: PUSH
32843: LD_VAR 0 1
32847: ST_TO_ADDR
// bc_level = 1 ;
32848: LD_ADDR_OWVAR 43
32852: PUSH
32853: LD_INT 1
32855: ST_TO_ADDR
// case btype of 1 :
32856: LD_VAR 0 2
32860: PUSH
32861: LD_INT 1
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32880
32869: POP
// bc_type := b_depot ; 2 :
32870: LD_ADDR_OWVAR 42
32874: PUSH
32875: LD_INT 0
32877: ST_TO_ADDR
32878: GO 33492
32880: LD_INT 2
32882: DOUBLE
32883: EQUAL
32884: IFTRUE 32888
32886: GO 32899
32888: POP
// bc_type := b_warehouse ; 3 :
32889: LD_ADDR_OWVAR 42
32893: PUSH
32894: LD_INT 1
32896: ST_TO_ADDR
32897: GO 33492
32899: LD_INT 3
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32918
32907: POP
// bc_type := b_lab ; 4 .. 9 :
32908: LD_ADDR_OWVAR 42
32912: PUSH
32913: LD_INT 6
32915: ST_TO_ADDR
32916: GO 33492
32918: LD_INT 4
32920: DOUBLE
32921: GREATEREQUAL
32922: IFFALSE 32930
32924: LD_INT 9
32926: DOUBLE
32927: LESSEQUAL
32928: IFTRUE 32932
32930: GO 32984
32932: POP
// begin bc_type := b_lab_half ;
32933: LD_ADDR_OWVAR 42
32937: PUSH
32938: LD_INT 7
32940: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32941: LD_ADDR_OWVAR 44
32945: PUSH
32946: LD_INT 10
32948: PUSH
32949: LD_INT 11
32951: PUSH
32952: LD_INT 12
32954: PUSH
32955: LD_INT 15
32957: PUSH
32958: LD_INT 14
32960: PUSH
32961: LD_INT 13
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: PUSH
32972: LD_VAR 0 2
32976: PUSH
32977: LD_INT 3
32979: MINUS
32980: ARRAY
32981: ST_TO_ADDR
// end ; 10 .. 13 :
32982: GO 33492
32984: LD_INT 10
32986: DOUBLE
32987: GREATEREQUAL
32988: IFFALSE 32996
32990: LD_INT 13
32992: DOUBLE
32993: LESSEQUAL
32994: IFTRUE 32998
32996: GO 33075
32998: POP
// begin bc_type := b_lab_full ;
32999: LD_ADDR_OWVAR 42
33003: PUSH
33004: LD_INT 8
33006: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33007: LD_ADDR_OWVAR 44
33011: PUSH
33012: LD_INT 10
33014: PUSH
33015: LD_INT 12
33017: PUSH
33018: LD_INT 14
33020: PUSH
33021: LD_INT 13
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: PUSH
33030: LD_VAR 0 2
33034: PUSH
33035: LD_INT 9
33037: MINUS
33038: ARRAY
33039: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33040: LD_ADDR_OWVAR 45
33044: PUSH
33045: LD_INT 11
33047: PUSH
33048: LD_INT 15
33050: PUSH
33051: LD_INT 12
33053: PUSH
33054: LD_INT 15
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_INT 9
33070: MINUS
33071: ARRAY
33072: ST_TO_ADDR
// end ; 14 :
33073: GO 33492
33075: LD_INT 14
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33094
33083: POP
// bc_type := b_workshop ; 15 :
33084: LD_ADDR_OWVAR 42
33088: PUSH
33089: LD_INT 2
33091: ST_TO_ADDR
33092: GO 33492
33094: LD_INT 15
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33113
33102: POP
// bc_type := b_factory ; 16 :
33103: LD_ADDR_OWVAR 42
33107: PUSH
33108: LD_INT 3
33110: ST_TO_ADDR
33111: GO 33492
33113: LD_INT 16
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33132
33121: POP
// bc_type := b_ext_gun ; 17 :
33122: LD_ADDR_OWVAR 42
33126: PUSH
33127: LD_INT 17
33129: ST_TO_ADDR
33130: GO 33492
33132: LD_INT 17
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33168
33140: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33141: LD_ADDR_OWVAR 42
33145: PUSH
33146: LD_INT 19
33148: PUSH
33149: LD_INT 23
33151: PUSH
33152: LD_INT 19
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: PUSH
33160: LD_VAR 0 1
33164: ARRAY
33165: ST_TO_ADDR
33166: GO 33492
33168: LD_INT 18
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33187
33176: POP
// bc_type := b_ext_radar ; 19 :
33177: LD_ADDR_OWVAR 42
33181: PUSH
33182: LD_INT 20
33184: ST_TO_ADDR
33185: GO 33492
33187: LD_INT 19
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33206
33195: POP
// bc_type := b_ext_radio ; 20 :
33196: LD_ADDR_OWVAR 42
33200: PUSH
33201: LD_INT 22
33203: ST_TO_ADDR
33204: GO 33492
33206: LD_INT 20
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33225
33214: POP
// bc_type := b_ext_siberium ; 21 :
33215: LD_ADDR_OWVAR 42
33219: PUSH
33220: LD_INT 21
33222: ST_TO_ADDR
33223: GO 33492
33225: LD_INT 21
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33244
33233: POP
// bc_type := b_ext_computer ; 22 :
33234: LD_ADDR_OWVAR 42
33238: PUSH
33239: LD_INT 24
33241: ST_TO_ADDR
33242: GO 33492
33244: LD_INT 22
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33263
33252: POP
// bc_type := b_ext_track ; 23 :
33253: LD_ADDR_OWVAR 42
33257: PUSH
33258: LD_INT 16
33260: ST_TO_ADDR
33261: GO 33492
33263: LD_INT 23
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33282
33271: POP
// bc_type := b_ext_laser ; 24 :
33272: LD_ADDR_OWVAR 42
33276: PUSH
33277: LD_INT 25
33279: ST_TO_ADDR
33280: GO 33492
33282: LD_INT 24
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33301
33290: POP
// bc_type := b_control_tower ; 25 :
33291: LD_ADDR_OWVAR 42
33295: PUSH
33296: LD_INT 36
33298: ST_TO_ADDR
33299: GO 33492
33301: LD_INT 25
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33320
33309: POP
// bc_type := b_breastwork ; 26 :
33310: LD_ADDR_OWVAR 42
33314: PUSH
33315: LD_INT 31
33317: ST_TO_ADDR
33318: GO 33492
33320: LD_INT 26
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33328
33326: GO 33339
33328: POP
// bc_type := b_bunker ; 27 :
33329: LD_ADDR_OWVAR 42
33333: PUSH
33334: LD_INT 32
33336: ST_TO_ADDR
33337: GO 33492
33339: LD_INT 27
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33358
33347: POP
// bc_type := b_turret ; 28 :
33348: LD_ADDR_OWVAR 42
33352: PUSH
33353: LD_INT 33
33355: ST_TO_ADDR
33356: GO 33492
33358: LD_INT 28
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33377
33366: POP
// bc_type := b_armoury ; 29 :
33367: LD_ADDR_OWVAR 42
33371: PUSH
33372: LD_INT 4
33374: ST_TO_ADDR
33375: GO 33492
33377: LD_INT 29
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33396
33385: POP
// bc_type := b_barracks ; 30 :
33386: LD_ADDR_OWVAR 42
33390: PUSH
33391: LD_INT 5
33393: ST_TO_ADDR
33394: GO 33492
33396: LD_INT 30
33398: DOUBLE
33399: EQUAL
33400: IFTRUE 33404
33402: GO 33415
33404: POP
// bc_type := b_solar_power ; 31 :
33405: LD_ADDR_OWVAR 42
33409: PUSH
33410: LD_INT 27
33412: ST_TO_ADDR
33413: GO 33492
33415: LD_INT 31
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33434
33423: POP
// bc_type := b_oil_power ; 32 :
33424: LD_ADDR_OWVAR 42
33428: PUSH
33429: LD_INT 26
33431: ST_TO_ADDR
33432: GO 33492
33434: LD_INT 32
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33453
33442: POP
// bc_type := b_siberite_power ; 33 :
33443: LD_ADDR_OWVAR 42
33447: PUSH
33448: LD_INT 28
33450: ST_TO_ADDR
33451: GO 33492
33453: LD_INT 33
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33472
33461: POP
// bc_type := b_oil_mine ; 34 :
33462: LD_ADDR_OWVAR 42
33466: PUSH
33467: LD_INT 29
33469: ST_TO_ADDR
33470: GO 33492
33472: LD_INT 34
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 33491
33480: POP
// bc_type := b_siberite_mine ; end ;
33481: LD_ADDR_OWVAR 42
33485: PUSH
33486: LD_INT 30
33488: ST_TO_ADDR
33489: GO 33492
33491: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33492: LD_ADDR_VAR 0 8
33496: PUSH
33497: LD_VAR 0 5
33501: PPUSH
33502: LD_VAR 0 6
33506: PPUSH
33507: LD_VAR 0 3
33511: PPUSH
33512: CALL_OW 47
33516: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33517: LD_OWVAR 42
33521: PUSH
33522: LD_INT 32
33524: PUSH
33525: LD_INT 33
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: IN
33532: IFFALSE 33548
// PlaceWeaponTurret ( b , weapon ) ;
33534: LD_VAR 0 8
33538: PPUSH
33539: LD_VAR 0 4
33543: PPUSH
33544: CALL_OW 431
// end ;
33548: LD_VAR 0 7
33552: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33553: LD_INT 0
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33559: LD_ADDR_VAR 0 4
33563: PUSH
33564: LD_INT 22
33566: PUSH
33567: LD_OWVAR 2
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 30
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 30
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PPUSH
33608: CALL_OW 69
33612: ST_TO_ADDR
// if not tmp then
33613: LD_VAR 0 4
33617: NOT
33618: IFFALSE 33622
// exit ;
33620: GO 33681
// for i in tmp do
33622: LD_ADDR_VAR 0 2
33626: PUSH
33627: LD_VAR 0 4
33631: PUSH
33632: FOR_IN
33633: IFFALSE 33679
// for j = 1 to 3 do
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: DOUBLE
33641: LD_INT 1
33643: DEC
33644: ST_TO_ADDR
33645: LD_INT 3
33647: PUSH
33648: FOR_TO
33649: IFFALSE 33675
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33651: LD_VAR 0 2
33655: PPUSH
33656: CALL_OW 274
33660: PPUSH
33661: LD_VAR 0 3
33665: PPUSH
33666: LD_INT 99999
33668: PPUSH
33669: CALL_OW 277
33673: GO 33648
33675: POP
33676: POP
33677: GO 33632
33679: POP
33680: POP
// end ;
33681: LD_VAR 0 1
33685: RET
// export function hHackSetLevel10 ; var i , j ; begin
33686: LD_INT 0
33688: PPUSH
33689: PPUSH
33690: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33691: LD_ADDR_VAR 0 2
33695: PUSH
33696: LD_INT 21
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PPUSH
33706: CALL_OW 69
33710: PUSH
33711: FOR_IN
33712: IFFALSE 33764
// if IsSelected ( i ) then
33714: LD_VAR 0 2
33718: PPUSH
33719: CALL_OW 306
33723: IFFALSE 33762
// begin for j := 1 to 4 do
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: DOUBLE
33731: LD_INT 1
33733: DEC
33734: ST_TO_ADDR
33735: LD_INT 4
33737: PUSH
33738: FOR_TO
33739: IFFALSE 33760
// SetSkill ( i , j , 10 ) ;
33741: LD_VAR 0 2
33745: PPUSH
33746: LD_VAR 0 3
33750: PPUSH
33751: LD_INT 10
33753: PPUSH
33754: CALL_OW 237
33758: GO 33738
33760: POP
33761: POP
// end ;
33762: GO 33711
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_INT 22
33783: PUSH
33784: LD_OWVAR 2
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 21
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PPUSH
33807: CALL_OW 69
33811: PUSH
33812: FOR_IN
33813: IFFALSE 33854
// begin for j := 1 to 4 do
33815: LD_ADDR_VAR 0 3
33819: PUSH
33820: DOUBLE
33821: LD_INT 1
33823: DEC
33824: ST_TO_ADDR
33825: LD_INT 4
33827: PUSH
33828: FOR_TO
33829: IFFALSE 33850
// SetSkill ( i , j , 10 ) ;
33831: LD_VAR 0 2
33835: PPUSH
33836: LD_VAR 0 3
33840: PPUSH
33841: LD_INT 10
33843: PPUSH
33844: CALL_OW 237
33848: GO 33828
33850: POP
33851: POP
// end ;
33852: GO 33812
33854: POP
33855: POP
// end ;
33856: LD_VAR 0 1
33860: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33861: LD_INT 0
33863: PPUSH
// uc_side := your_side ;
33864: LD_ADDR_OWVAR 20
33868: PUSH
33869: LD_OWVAR 2
33873: ST_TO_ADDR
// uc_nation := nation ;
33874: LD_ADDR_OWVAR 21
33878: PUSH
33879: LD_VAR 0 1
33883: ST_TO_ADDR
// InitHc ;
33884: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33888: LD_INT 0
33890: PPUSH
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33905: LD_VAR 0 4
33909: PPUSH
33910: LD_VAR 0 5
33914: PPUSH
33915: CALL_OW 428
33919: PUSH
33920: LD_INT 0
33922: EQUAL
33923: IFFALSE 33947
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33925: CALL_OW 44
33929: PPUSH
33930: LD_VAR 0 4
33934: PPUSH
33935: LD_VAR 0 5
33939: PPUSH
33940: LD_INT 1
33942: PPUSH
33943: CALL_OW 48
// end ;
33947: LD_VAR 0 6
33951: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33952: LD_INT 0
33954: PPUSH
33955: PPUSH
// uc_side := your_side ;
33956: LD_ADDR_OWVAR 20
33960: PUSH
33961: LD_OWVAR 2
33965: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33966: LD_VAR 0 1
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: LD_INT 5
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: IN
33993: IFFALSE 34005
// uc_nation := nation_american else
33995: LD_ADDR_OWVAR 21
33999: PUSH
34000: LD_INT 1
34002: ST_TO_ADDR
34003: GO 34048
// if chassis in [ 11 , 12 , 13 , 14 ] then
34005: LD_VAR 0 1
34009: PUSH
34010: LD_INT 11
34012: PUSH
34013: LD_INT 12
34015: PUSH
34016: LD_INT 13
34018: PUSH
34019: LD_INT 14
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: IN
34028: IFFALSE 34040
// uc_nation := nation_arabian else
34030: LD_ADDR_OWVAR 21
34034: PUSH
34035: LD_INT 2
34037: ST_TO_ADDR
34038: GO 34048
// uc_nation := nation_russian ;
34040: LD_ADDR_OWVAR 21
34044: PUSH
34045: LD_INT 3
34047: ST_TO_ADDR
// vc_chassis := chassis ;
34048: LD_ADDR_OWVAR 37
34052: PUSH
34053: LD_VAR 0 1
34057: ST_TO_ADDR
// vc_engine := engine ;
34058: LD_ADDR_OWVAR 39
34062: PUSH
34063: LD_VAR 0 2
34067: ST_TO_ADDR
// vc_control := control ;
34068: LD_ADDR_OWVAR 38
34072: PUSH
34073: LD_VAR 0 3
34077: ST_TO_ADDR
// vc_weapon := weapon ;
34078: LD_ADDR_OWVAR 40
34082: PUSH
34083: LD_VAR 0 4
34087: ST_TO_ADDR
// un := CreateVehicle ;
34088: LD_ADDR_VAR 0 8
34092: PUSH
34093: CALL_OW 45
34097: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34098: LD_VAR 0 8
34102: PPUSH
34103: LD_INT 0
34105: PPUSH
34106: LD_INT 5
34108: PPUSH
34109: CALL_OW 12
34113: PPUSH
34114: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34118: LD_VAR 0 8
34122: PPUSH
34123: LD_VAR 0 5
34127: PPUSH
34128: LD_VAR 0 6
34132: PPUSH
34133: LD_INT 1
34135: PPUSH
34136: CALL_OW 48
// end ;
34140: LD_VAR 0 7
34144: RET
// export hInvincible ; every 1 do
34145: GO 34147
34147: DISABLE
// hInvincible := [ ] ;
34148: LD_ADDR_EXP 125
34152: PUSH
34153: EMPTY
34154: ST_TO_ADDR
34155: END
// every 10 do var i ;
34156: GO 34158
34158: DISABLE
34159: LD_INT 0
34161: PPUSH
// begin enable ;
34162: ENABLE
// if not hInvincible then
34163: LD_EXP 125
34167: NOT
34168: IFFALSE 34172
// exit ;
34170: GO 34216
// for i in hInvincible do
34172: LD_ADDR_VAR 0 1
34176: PUSH
34177: LD_EXP 125
34181: PUSH
34182: FOR_IN
34183: IFFALSE 34214
// if GetLives ( i ) < 1000 then
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 256
34194: PUSH
34195: LD_INT 1000
34197: LESS
34198: IFFALSE 34212
// SetLives ( i , 1000 ) ;
34200: LD_VAR 0 1
34204: PPUSH
34205: LD_INT 1000
34207: PPUSH
34208: CALL_OW 234
34212: GO 34182
34214: POP
34215: POP
// end ;
34216: PPOPN 1
34218: END
// export function hHackInvincible ; var i ; begin
34219: LD_INT 0
34221: PPUSH
34222: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34223: LD_ADDR_VAR 0 2
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 21
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: PPUSH
34256: CALL_OW 69
34260: PUSH
34261: FOR_IN
34262: IFFALSE 34323
// if IsSelected ( i ) then
34264: LD_VAR 0 2
34268: PPUSH
34269: CALL_OW 306
34273: IFFALSE 34321
// begin if i in hInvincible then
34275: LD_VAR 0 2
34279: PUSH
34280: LD_EXP 125
34284: IN
34285: IFFALSE 34305
// hInvincible := hInvincible diff i else
34287: LD_ADDR_EXP 125
34291: PUSH
34292: LD_EXP 125
34296: PUSH
34297: LD_VAR 0 2
34301: DIFF
34302: ST_TO_ADDR
34303: GO 34321
// hInvincible := hInvincible union i ;
34305: LD_ADDR_EXP 125
34309: PUSH
34310: LD_EXP 125
34314: PUSH
34315: LD_VAR 0 2
34319: UNION
34320: ST_TO_ADDR
// end ;
34321: GO 34261
34323: POP
34324: POP
// end ;
34325: LD_VAR 0 1
34329: RET
// export function hHackInvisible ; var i , j ; begin
34330: LD_INT 0
34332: PPUSH
34333: PPUSH
34334: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34335: LD_ADDR_VAR 0 2
34339: PUSH
34340: LD_INT 21
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PPUSH
34350: CALL_OW 69
34354: PUSH
34355: FOR_IN
34356: IFFALSE 34380
// if IsSelected ( i ) then
34358: LD_VAR 0 2
34362: PPUSH
34363: CALL_OW 306
34367: IFFALSE 34378
// ComForceInvisible ( i ) ;
34369: LD_VAR 0 2
34373: PPUSH
34374: CALL_OW 496
34378: GO 34355
34380: POP
34381: POP
// end ;
34382: LD_VAR 0 1
34386: RET
// export function hHackChangeYourSide ; begin
34387: LD_INT 0
34389: PPUSH
// if your_side = 8 then
34390: LD_OWVAR 2
34394: PUSH
34395: LD_INT 8
34397: EQUAL
34398: IFFALSE 34410
// your_side := 0 else
34400: LD_ADDR_OWVAR 2
34404: PUSH
34405: LD_INT 0
34407: ST_TO_ADDR
34408: GO 34424
// your_side := your_side + 1 ;
34410: LD_ADDR_OWVAR 2
34414: PUSH
34415: LD_OWVAR 2
34419: PUSH
34420: LD_INT 1
34422: PLUS
34423: ST_TO_ADDR
// end ;
34424: LD_VAR 0 1
34428: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34429: LD_INT 0
34431: PPUSH
34432: PPUSH
34433: PPUSH
// for i in all_units do
34434: LD_ADDR_VAR 0 2
34438: PUSH
34439: LD_OWVAR 3
34443: PUSH
34444: FOR_IN
34445: IFFALSE 34523
// if IsSelected ( i ) then
34447: LD_VAR 0 2
34451: PPUSH
34452: CALL_OW 306
34456: IFFALSE 34521
// begin j := GetSide ( i ) ;
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: CALL_OW 255
34472: ST_TO_ADDR
// if j = 8 then
34473: LD_VAR 0 3
34477: PUSH
34478: LD_INT 8
34480: EQUAL
34481: IFFALSE 34493
// j := 0 else
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_INT 0
34490: ST_TO_ADDR
34491: GO 34507
// j := j + 1 ;
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_VAR 0 3
34502: PUSH
34503: LD_INT 1
34505: PLUS
34506: ST_TO_ADDR
// SetSide ( i , j ) ;
34507: LD_VAR 0 2
34511: PPUSH
34512: LD_VAR 0 3
34516: PPUSH
34517: CALL_OW 235
// end ;
34521: GO 34444
34523: POP
34524: POP
// end ;
34525: LD_VAR 0 1
34529: RET
// export function hHackFog ; begin
34530: LD_INT 0
34532: PPUSH
// FogOff ( true ) ;
34533: LD_INT 1
34535: PPUSH
34536: CALL_OW 344
// end ;
34540: LD_VAR 0 1
34544: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34545: LD_INT 0
34547: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34548: LD_VAR 0 1
34552: PPUSH
34553: LD_VAR 0 2
34557: PPUSH
34558: LD_VAR 0 3
34562: PPUSH
34563: LD_INT 1
34565: PPUSH
34566: LD_INT 1
34568: PPUSH
34569: CALL_OW 483
// CenterOnXY ( x , y ) ;
34573: LD_VAR 0 2
34577: PPUSH
34578: LD_VAR 0 3
34582: PPUSH
34583: CALL_OW 84
// end ; end_of_file
34587: LD_VAR 0 4
34591: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34592: LD_INT 0
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 264
34607: PUSH
34608: LD_EXP 53
34612: EQUAL
34613: IFFALSE 34685
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34615: LD_INT 68
34617: PPUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: CALL_OW 255
34627: PPUSH
34628: CALL_OW 321
34632: PUSH
34633: LD_INT 2
34635: EQUAL
34636: IFFALSE 34648
// eff := 70 else
34638: LD_ADDR_VAR 0 4
34642: PUSH
34643: LD_INT 70
34645: ST_TO_ADDR
34646: GO 34656
// eff := 30 ;
34648: LD_ADDR_VAR 0 4
34652: PUSH
34653: LD_INT 30
34655: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL_OW 250
34665: PPUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 251
34675: PPUSH
34676: LD_VAR 0 4
34680: PPUSH
34681: CALL_OW 495
// end ; end ;
34685: LD_VAR 0 2
34689: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34690: LD_INT 0
34692: PPUSH
// end ;
34693: LD_VAR 0 4
34697: RET
// export function SOS_Command ( cmd ) ; begin
34698: LD_INT 0
34700: PPUSH
// end ;
34701: LD_VAR 0 2
34705: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34706: LD_INT 0
34708: PPUSH
// end ;
34709: LD_VAR 0 6
34713: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34714: LD_INT 0
34716: PPUSH
34717: PPUSH
// if not vehicle or not factory then
34718: LD_VAR 0 1
34722: NOT
34723: PUSH
34724: LD_VAR 0 2
34728: NOT
34729: OR
34730: IFFALSE 34734
// exit ;
34732: GO 34965
// if factoryWaypoints >= factory then
34734: LD_EXP 126
34738: PUSH
34739: LD_VAR 0 2
34743: GREATEREQUAL
34744: IFFALSE 34965
// if factoryWaypoints [ factory ] then
34746: LD_EXP 126
34750: PUSH
34751: LD_VAR 0 2
34755: ARRAY
34756: IFFALSE 34965
// begin if GetControl ( vehicle ) = control_manual then
34758: LD_VAR 0 1
34762: PPUSH
34763: CALL_OW 263
34767: PUSH
34768: LD_INT 1
34770: EQUAL
34771: IFFALSE 34852
// begin driver := IsDrivenBy ( vehicle ) ;
34773: LD_ADDR_VAR 0 4
34777: PUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL_OW 311
34787: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34788: LD_VAR 0 4
34792: PPUSH
34793: LD_EXP 126
34797: PUSH
34798: LD_VAR 0 2
34802: ARRAY
34803: PUSH
34804: LD_INT 1
34806: ARRAY
34807: PPUSH
34808: LD_EXP 126
34812: PUSH
34813: LD_VAR 0 2
34817: ARRAY
34818: PUSH
34819: LD_INT 2
34821: ARRAY
34822: PPUSH
34823: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34827: LD_VAR 0 4
34831: PPUSH
34832: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34836: LD_VAR 0 4
34840: PPUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: CALL_OW 180
// end else
34850: GO 34965
// if GetControl ( vehicle ) = control_remote then
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 263
34861: PUSH
34862: LD_INT 2
34864: EQUAL
34865: IFFALSE 34926
// begin wait ( 0 0$2 ) ;
34867: LD_INT 70
34869: PPUSH
34870: CALL_OW 67
// if Connect ( vehicle ) then
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL 47189 0 1
34883: IFFALSE 34924
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34885: LD_VAR 0 1
34889: PPUSH
34890: LD_EXP 126
34894: PUSH
34895: LD_VAR 0 2
34899: ARRAY
34900: PUSH
34901: LD_INT 1
34903: ARRAY
34904: PPUSH
34905: LD_EXP 126
34909: PUSH
34910: LD_VAR 0 2
34914: ARRAY
34915: PUSH
34916: LD_INT 2
34918: ARRAY
34919: PPUSH
34920: CALL_OW 171
// end else
34924: GO 34965
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_EXP 126
34935: PUSH
34936: LD_VAR 0 2
34940: ARRAY
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: PPUSH
34946: LD_EXP 126
34950: PUSH
34951: LD_VAR 0 2
34955: ARRAY
34956: PUSH
34957: LD_INT 2
34959: ARRAY
34960: PPUSH
34961: CALL_OW 171
// end ; end ;
34965: LD_VAR 0 3
34969: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34970: LD_INT 0
34972: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 250
34980: EQUAL
34981: PUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: CALL_OW 264
34991: PUSH
34992: LD_EXP 56
34996: EQUAL
34997: AND
34998: IFFALSE 35019
// MinerPlaceMine ( unit , x , y ) ;
35000: LD_VAR 0 2
35004: PPUSH
35005: LD_VAR 0 4
35009: PPUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: CALL 37747 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35019: LD_VAR 0 1
35023: PUSH
35024: LD_INT 251
35026: EQUAL
35027: PUSH
35028: LD_VAR 0 2
35032: PPUSH
35033: CALL_OW 264
35037: PUSH
35038: LD_EXP 56
35042: EQUAL
35043: AND
35044: IFFALSE 35065
// MinerDetonateMine ( unit , x , y ) ;
35046: LD_VAR 0 2
35050: PPUSH
35051: LD_VAR 0 4
35055: PPUSH
35056: LD_VAR 0 5
35060: PPUSH
35061: CALL 38024 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35065: LD_VAR 0 1
35069: PUSH
35070: LD_INT 252
35072: EQUAL
35073: PUSH
35074: LD_VAR 0 2
35078: PPUSH
35079: CALL_OW 264
35083: PUSH
35084: LD_EXP 56
35088: EQUAL
35089: AND
35090: IFFALSE 35111
// MinerCreateMinefield ( unit , x , y ) ;
35092: LD_VAR 0 2
35096: PPUSH
35097: LD_VAR 0 4
35101: PPUSH
35102: LD_VAR 0 5
35106: PPUSH
35107: CALL 38441 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35111: LD_VAR 0 1
35115: PUSH
35116: LD_INT 253
35118: EQUAL
35119: PUSH
35120: LD_VAR 0 2
35124: PPUSH
35125: CALL_OW 257
35129: PUSH
35130: LD_INT 5
35132: EQUAL
35133: AND
35134: IFFALSE 35155
// ComBinocular ( unit , x , y ) ;
35136: LD_VAR 0 2
35140: PPUSH
35141: LD_VAR 0 4
35145: PPUSH
35146: LD_VAR 0 5
35150: PPUSH
35151: CALL 38812 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35155: LD_VAR 0 1
35159: PUSH
35160: LD_INT 254
35162: EQUAL
35163: PUSH
35164: LD_VAR 0 2
35168: PPUSH
35169: CALL_OW 264
35173: PUSH
35174: LD_EXP 51
35178: EQUAL
35179: AND
35180: PUSH
35181: LD_VAR 0 3
35185: PPUSH
35186: CALL_OW 263
35190: PUSH
35191: LD_INT 3
35193: EQUAL
35194: AND
35195: IFFALSE 35211
// HackDestroyVehicle ( unit , selectedUnit ) ;
35197: LD_VAR 0 2
35201: PPUSH
35202: LD_VAR 0 3
35206: PPUSH
35207: CALL 37107 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 255
35218: EQUAL
35219: PUSH
35220: LD_VAR 0 2
35224: PPUSH
35225: CALL_OW 264
35229: PUSH
35230: LD_INT 14
35232: PUSH
35233: LD_INT 53
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: IN
35240: AND
35241: PUSH
35242: LD_VAR 0 4
35246: PPUSH
35247: LD_VAR 0 5
35251: PPUSH
35252: CALL_OW 488
35256: AND
35257: IFFALSE 35281
// CutTreeXYR ( unit , x , y , 12 ) ;
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_VAR 0 4
35268: PPUSH
35269: LD_VAR 0 5
35273: PPUSH
35274: LD_INT 12
35276: PPUSH
35277: CALL 35673 0 4
// if cmd = 256 then
35281: LD_VAR 0 1
35285: PUSH
35286: LD_INT 256
35288: EQUAL
35289: IFFALSE 35310
// SetFactoryWaypoint ( unit , x , y ) ;
35291: LD_VAR 0 2
35295: PPUSH
35296: LD_VAR 0 4
35300: PPUSH
35301: LD_VAR 0 5
35305: PPUSH
35306: CALL 35315 0 3
// end ;
35310: LD_VAR 0 6
35314: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35315: LD_INT 0
35317: PPUSH
35318: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35319: LD_VAR 0 1
35323: NOT
35324: PUSH
35325: LD_VAR 0 2
35329: PPUSH
35330: LD_VAR 0 3
35334: PPUSH
35335: CALL_OW 488
35339: NOT
35340: OR
35341: PUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 266
35351: PUSH
35352: LD_INT 3
35354: NONEQUAL
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 247
35365: PUSH
35366: LD_INT 1
35368: EQUAL
35369: NOT
35370: AND
35371: OR
35372: IFFALSE 35376
// exit ;
35374: GO 35525
// if GetType ( factory ) = unit_human then
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 247
35385: PUSH
35386: LD_INT 1
35388: EQUAL
35389: IFFALSE 35406
// factory := IsInUnit ( factory ) ;
35391: LD_ADDR_VAR 0 1
35395: PUSH
35396: LD_VAR 0 1
35400: PPUSH
35401: CALL_OW 310
35405: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35406: LD_VAR 0 1
35410: PPUSH
35411: CALL_OW 266
35415: PUSH
35416: LD_INT 3
35418: NONEQUAL
35419: IFFALSE 35423
// exit ;
35421: GO 35525
// if HexInfo ( x , y ) = factory then
35423: LD_VAR 0 2
35427: PPUSH
35428: LD_VAR 0 3
35432: PPUSH
35433: CALL_OW 428
35437: PUSH
35438: LD_VAR 0 1
35442: EQUAL
35443: IFFALSE 35470
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35445: LD_ADDR_EXP 126
35449: PUSH
35450: LD_EXP 126
35454: PPUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_INT 0
35462: PPUSH
35463: CALL_OW 1
35467: ST_TO_ADDR
35468: GO 35521
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35470: LD_ADDR_EXP 126
35474: PUSH
35475: LD_EXP 126
35479: PPUSH
35480: LD_VAR 0 1
35484: PPUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 255
35494: PUSH
35495: LD_VAR 0 1
35499: PUSH
35500: LD_VAR 0 2
35504: PUSH
35505: LD_VAR 0 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: PPUSH
35516: CALL_OW 1
35520: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35521: CALL 35530 0 0
// end ;
35525: LD_VAR 0 4
35529: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35530: LD_INT 0
35532: PPUSH
35533: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35534: LD_STRING resetFactoryWaypoint();
35536: PPUSH
35537: CALL_OW 559
// if factoryWaypoints then
35541: LD_EXP 126
35545: IFFALSE 35668
// begin for i := 1 to factoryWaypoints do
35547: LD_ADDR_VAR 0 2
35551: PUSH
35552: DOUBLE
35553: LD_INT 1
35555: DEC
35556: ST_TO_ADDR
35557: LD_EXP 126
35561: PUSH
35562: FOR_TO
35563: IFFALSE 35666
// if factoryWaypoints [ i ] then
35565: LD_EXP 126
35569: PUSH
35570: LD_VAR 0 2
35574: ARRAY
35575: IFFALSE 35664
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35577: LD_STRING setFactoryWaypointXY(
35579: PUSH
35580: LD_EXP 126
35584: PUSH
35585: LD_VAR 0 2
35589: ARRAY
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: STR
35595: PUSH
35596: LD_STRING ,
35598: STR
35599: PUSH
35600: LD_EXP 126
35604: PUSH
35605: LD_VAR 0 2
35609: ARRAY
35610: PUSH
35611: LD_INT 2
35613: ARRAY
35614: STR
35615: PUSH
35616: LD_STRING ,
35618: STR
35619: PUSH
35620: LD_EXP 126
35624: PUSH
35625: LD_VAR 0 2
35629: ARRAY
35630: PUSH
35631: LD_INT 3
35633: ARRAY
35634: STR
35635: PUSH
35636: LD_STRING ,
35638: STR
35639: PUSH
35640: LD_EXP 126
35644: PUSH
35645: LD_VAR 0 2
35649: ARRAY
35650: PUSH
35651: LD_INT 4
35653: ARRAY
35654: STR
35655: PUSH
35656: LD_STRING )
35658: STR
35659: PPUSH
35660: CALL_OW 559
35664: GO 35562
35666: POP
35667: POP
// end ; end ;
35668: LD_VAR 0 1
35672: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35673: LD_INT 0
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35684: LD_VAR 0 1
35688: NOT
35689: PUSH
35690: LD_VAR 0 2
35694: PPUSH
35695: LD_VAR 0 3
35699: PPUSH
35700: CALL_OW 488
35704: NOT
35705: OR
35706: PUSH
35707: LD_VAR 0 4
35711: NOT
35712: OR
35713: IFFALSE 35717
// exit ;
35715: GO 36057
// list := [ ] ;
35717: LD_ADDR_VAR 0 13
35721: PUSH
35722: EMPTY
35723: ST_TO_ADDR
// if x - r < 0 then
35724: LD_VAR 0 2
35728: PUSH
35729: LD_VAR 0 4
35733: MINUS
35734: PUSH
35735: LD_INT 0
35737: LESS
35738: IFFALSE 35750
// min_x := 0 else
35740: LD_ADDR_VAR 0 7
35744: PUSH
35745: LD_INT 0
35747: ST_TO_ADDR
35748: GO 35766
// min_x := x - r ;
35750: LD_ADDR_VAR 0 7
35754: PUSH
35755: LD_VAR 0 2
35759: PUSH
35760: LD_VAR 0 4
35764: MINUS
35765: ST_TO_ADDR
// if y - r < 0 then
35766: LD_VAR 0 3
35770: PUSH
35771: LD_VAR 0 4
35775: MINUS
35776: PUSH
35777: LD_INT 0
35779: LESS
35780: IFFALSE 35792
// min_y := 0 else
35782: LD_ADDR_VAR 0 8
35786: PUSH
35787: LD_INT 0
35789: ST_TO_ADDR
35790: GO 35808
// min_y := y - r ;
35792: LD_ADDR_VAR 0 8
35796: PUSH
35797: LD_VAR 0 3
35801: PUSH
35802: LD_VAR 0 4
35806: MINUS
35807: ST_TO_ADDR
// max_x := x + r ;
35808: LD_ADDR_VAR 0 9
35812: PUSH
35813: LD_VAR 0 2
35817: PUSH
35818: LD_VAR 0 4
35822: PLUS
35823: ST_TO_ADDR
// max_y := y + r ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 3
35833: PUSH
35834: LD_VAR 0 4
35838: PLUS
35839: ST_TO_ADDR
// for _x = min_x to max_x do
35840: LD_ADDR_VAR 0 11
35844: PUSH
35845: DOUBLE
35846: LD_VAR 0 7
35850: DEC
35851: ST_TO_ADDR
35852: LD_VAR 0 9
35856: PUSH
35857: FOR_TO
35858: IFFALSE 35975
// for _y = min_y to max_y do
35860: LD_ADDR_VAR 0 12
35864: PUSH
35865: DOUBLE
35866: LD_VAR 0 8
35870: DEC
35871: ST_TO_ADDR
35872: LD_VAR 0 10
35876: PUSH
35877: FOR_TO
35878: IFFALSE 35971
// begin if not ValidHex ( _x , _y ) then
35880: LD_VAR 0 11
35884: PPUSH
35885: LD_VAR 0 12
35889: PPUSH
35890: CALL_OW 488
35894: NOT
35895: IFFALSE 35899
// continue ;
35897: GO 35877
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35899: LD_VAR 0 11
35903: PPUSH
35904: LD_VAR 0 12
35908: PPUSH
35909: CALL_OW 351
35913: PUSH
35914: LD_VAR 0 11
35918: PPUSH
35919: LD_VAR 0 12
35923: PPUSH
35924: CALL_OW 554
35928: AND
35929: IFFALSE 35969
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35931: LD_ADDR_VAR 0 13
35935: PUSH
35936: LD_VAR 0 13
35940: PPUSH
35941: LD_VAR 0 13
35945: PUSH
35946: LD_INT 1
35948: PLUS
35949: PPUSH
35950: LD_VAR 0 11
35954: PUSH
35955: LD_VAR 0 12
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL_OW 2
35968: ST_TO_ADDR
// end ;
35969: GO 35877
35971: POP
35972: POP
35973: GO 35857
35975: POP
35976: POP
// if not list then
35977: LD_VAR 0 13
35981: NOT
35982: IFFALSE 35986
// exit ;
35984: GO 36057
// for i in list do
35986: LD_ADDR_VAR 0 6
35990: PUSH
35991: LD_VAR 0 13
35995: PUSH
35996: FOR_IN
35997: IFFALSE 36055
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35999: LD_VAR 0 1
36003: PPUSH
36004: LD_STRING M
36006: PUSH
36007: LD_VAR 0 6
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: PUSH
36016: LD_VAR 0 6
36020: PUSH
36021: LD_INT 2
36023: ARRAY
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: PPUSH
36049: CALL_OW 447
36053: GO 35996
36055: POP
36056: POP
// end ;
36057: LD_VAR 0 5
36061: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36062: LD_EXP 127
36066: NOT
36067: IFFALSE 36117
36069: GO 36071
36071: DISABLE
// begin initHack := true ;
36072: LD_ADDR_EXP 127
36076: PUSH
36077: LD_INT 1
36079: ST_TO_ADDR
// hackTanks := [ ] ;
36080: LD_ADDR_EXP 128
36084: PUSH
36085: EMPTY
36086: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36087: LD_ADDR_EXP 129
36091: PUSH
36092: EMPTY
36093: ST_TO_ADDR
// hackLimit := 3 ;
36094: LD_ADDR_EXP 130
36098: PUSH
36099: LD_INT 3
36101: ST_TO_ADDR
// hackDist := 12 ;
36102: LD_ADDR_EXP 131
36106: PUSH
36107: LD_INT 12
36109: ST_TO_ADDR
// hackCounter := [ ] ;
36110: LD_ADDR_EXP 132
36114: PUSH
36115: EMPTY
36116: ST_TO_ADDR
// end ;
36117: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36118: LD_EXP 127
36122: PUSH
36123: LD_INT 34
36125: PUSH
36126: LD_EXP 51
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PPUSH
36135: CALL_OW 69
36139: AND
36140: IFFALSE 36395
36142: GO 36144
36144: DISABLE
36145: LD_INT 0
36147: PPUSH
36148: PPUSH
// begin enable ;
36149: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36150: LD_ADDR_VAR 0 1
36154: PUSH
36155: LD_INT 34
36157: PUSH
36158: LD_EXP 51
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PPUSH
36167: CALL_OW 69
36171: PUSH
36172: FOR_IN
36173: IFFALSE 36393
// begin if not i in hackTanks then
36175: LD_VAR 0 1
36179: PUSH
36180: LD_EXP 128
36184: IN
36185: NOT
36186: IFFALSE 36269
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36188: LD_ADDR_EXP 128
36192: PUSH
36193: LD_EXP 128
36197: PPUSH
36198: LD_EXP 128
36202: PUSH
36203: LD_INT 1
36205: PLUS
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 1
36216: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36217: LD_ADDR_EXP 129
36221: PUSH
36222: LD_EXP 129
36226: PPUSH
36227: LD_EXP 129
36231: PUSH
36232: LD_INT 1
36234: PLUS
36235: PPUSH
36236: EMPTY
36237: PPUSH
36238: CALL_OW 1
36242: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36243: LD_ADDR_EXP 132
36247: PUSH
36248: LD_EXP 132
36252: PPUSH
36253: LD_EXP 132
36257: PUSH
36258: LD_INT 1
36260: PLUS
36261: PPUSH
36262: EMPTY
36263: PPUSH
36264: CALL_OW 1
36268: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 302
36278: NOT
36279: IFFALSE 36292
// begin HackUnlinkAll ( i ) ;
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL 36398 0 1
// continue ;
36290: GO 36172
// end ; HackCheckCapturedStatus ( i ) ;
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL 36841 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36301: LD_ADDR_VAR 0 2
36305: PUSH
36306: LD_INT 81
36308: PUSH
36309: LD_VAR 0 1
36313: PPUSH
36314: CALL_OW 255
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 33
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 91
36335: PUSH
36336: LD_VAR 0 1
36340: PUSH
36341: LD_EXP 131
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 50
36353: PUSH
36354: EMPTY
36355: LIST
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: PPUSH
36363: CALL_OW 69
36367: ST_TO_ADDR
// if not tmp then
36368: LD_VAR 0 2
36372: NOT
36373: IFFALSE 36377
// continue ;
36375: GO 36172
// HackLink ( i , tmp ) ;
36377: LD_VAR 0 1
36381: PPUSH
36382: LD_VAR 0 2
36386: PPUSH
36387: CALL 36534 0 2
// end ;
36391: GO 36172
36393: POP
36394: POP
// end ;
36395: PPOPN 2
36397: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36398: LD_INT 0
36400: PPUSH
36401: PPUSH
36402: PPUSH
// if not hack in hackTanks then
36403: LD_VAR 0 1
36407: PUSH
36408: LD_EXP 128
36412: IN
36413: NOT
36414: IFFALSE 36418
// exit ;
36416: GO 36529
// index := GetElementIndex ( hackTanks , hack ) ;
36418: LD_ADDR_VAR 0 4
36422: PUSH
36423: LD_EXP 128
36427: PPUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: CALL 44003 0 2
36437: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36438: LD_EXP 129
36442: PUSH
36443: LD_VAR 0 4
36447: ARRAY
36448: IFFALSE 36529
// begin for i in hackTanksCaptured [ index ] do
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_EXP 129
36459: PUSH
36460: LD_VAR 0 4
36464: ARRAY
36465: PUSH
36466: FOR_IN
36467: IFFALSE 36493
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36469: LD_VAR 0 3
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PPUSH
36478: LD_VAR 0 3
36482: PUSH
36483: LD_INT 2
36485: ARRAY
36486: PPUSH
36487: CALL_OW 235
36491: GO 36466
36493: POP
36494: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36495: LD_ADDR_EXP 129
36499: PUSH
36500: LD_EXP 129
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: EMPTY
36511: PPUSH
36512: CALL_OW 1
36516: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36517: LD_VAR 0 1
36521: PPUSH
36522: LD_INT 0
36524: PPUSH
36525: CALL_OW 505
// end ; end ;
36529: LD_VAR 0 2
36533: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36534: LD_INT 0
36536: PPUSH
36537: PPUSH
36538: PPUSH
// if not hack in hackTanks or not vehicles then
36539: LD_VAR 0 1
36543: PUSH
36544: LD_EXP 128
36548: IN
36549: NOT
36550: PUSH
36551: LD_VAR 0 2
36555: NOT
36556: OR
36557: IFFALSE 36561
// exit ;
36559: GO 36836
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36561: LD_ADDR_VAR 0 2
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: LD_VAR 0 2
36575: PPUSH
36576: LD_INT 1
36578: PPUSH
36579: LD_INT 1
36581: PPUSH
36582: CALL 44653 0 4
36586: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36587: LD_ADDR_VAR 0 5
36591: PUSH
36592: LD_EXP 128
36596: PPUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL 44003 0 2
36606: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36607: LD_EXP 129
36611: PUSH
36612: LD_VAR 0 5
36616: ARRAY
36617: PUSH
36618: LD_EXP 130
36622: LESS
36623: IFFALSE 36812
// begin for i := 1 to vehicles do
36625: LD_ADDR_VAR 0 4
36629: PUSH
36630: DOUBLE
36631: LD_INT 1
36633: DEC
36634: ST_TO_ADDR
36635: LD_VAR 0 2
36639: PUSH
36640: FOR_TO
36641: IFFALSE 36810
// begin if hackTanksCaptured [ index ] = hackLimit then
36643: LD_EXP 129
36647: PUSH
36648: LD_VAR 0 5
36652: ARRAY
36653: PUSH
36654: LD_EXP 130
36658: EQUAL
36659: IFFALSE 36663
// break ;
36661: GO 36810
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36663: LD_ADDR_EXP 132
36667: PUSH
36668: LD_EXP 132
36672: PPUSH
36673: LD_VAR 0 5
36677: PPUSH
36678: LD_EXP 132
36682: PUSH
36683: LD_VAR 0 5
36687: ARRAY
36688: PUSH
36689: LD_INT 1
36691: PLUS
36692: PPUSH
36693: CALL_OW 1
36697: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36698: LD_ADDR_EXP 129
36702: PUSH
36703: LD_EXP 129
36707: PPUSH
36708: LD_VAR 0 5
36712: PUSH
36713: LD_EXP 129
36717: PUSH
36718: LD_VAR 0 5
36722: ARRAY
36723: PUSH
36724: LD_INT 1
36726: PLUS
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PPUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_VAR 0 4
36741: ARRAY
36742: PUSH
36743: LD_VAR 0 2
36747: PUSH
36748: LD_VAR 0 4
36752: ARRAY
36753: PPUSH
36754: CALL_OW 255
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PPUSH
36763: CALL 44218 0 3
36767: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36768: LD_VAR 0 2
36772: PUSH
36773: LD_VAR 0 4
36777: ARRAY
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 255
36788: PPUSH
36789: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36793: LD_VAR 0 2
36797: PUSH
36798: LD_VAR 0 4
36802: ARRAY
36803: PPUSH
36804: CALL_OW 141
// end ;
36808: GO 36640
36810: POP
36811: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36812: LD_VAR 0 1
36816: PPUSH
36817: LD_EXP 129
36821: PUSH
36822: LD_VAR 0 5
36826: ARRAY
36827: PUSH
36828: LD_INT 0
36830: PLUS
36831: PPUSH
36832: CALL_OW 505
// end ;
36836: LD_VAR 0 3
36840: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36841: LD_INT 0
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
// if not hack in hackTanks then
36847: LD_VAR 0 1
36851: PUSH
36852: LD_EXP 128
36856: IN
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 37102
// index := GetElementIndex ( hackTanks , hack ) ;
36862: LD_ADDR_VAR 0 4
36866: PUSH
36867: LD_EXP 128
36871: PPUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL 44003 0 2
36881: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: DOUBLE
36888: LD_EXP 129
36892: PUSH
36893: LD_VAR 0 4
36897: ARRAY
36898: INC
36899: ST_TO_ADDR
36900: LD_INT 1
36902: PUSH
36903: FOR_DOWNTO
36904: IFFALSE 37076
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36906: LD_ADDR_VAR 0 5
36910: PUSH
36911: LD_EXP 129
36915: PUSH
36916: LD_VAR 0 4
36920: ARRAY
36921: PUSH
36922: LD_VAR 0 3
36926: ARRAY
36927: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36928: LD_VAR 0 5
36932: PUSH
36933: LD_INT 1
36935: ARRAY
36936: PPUSH
36937: CALL_OW 302
36941: NOT
36942: PUSH
36943: LD_VAR 0 5
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PPUSH
36952: CALL_OW 255
36956: PUSH
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 255
36966: NONEQUAL
36967: OR
36968: IFFALSE 37074
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: CALL_OW 305
36983: PUSH
36984: LD_VAR 0 5
36988: PUSH
36989: LD_INT 1
36991: ARRAY
36992: PPUSH
36993: CALL_OW 255
36997: PUSH
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL_OW 255
37007: EQUAL
37008: AND
37009: IFFALSE 37033
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37011: LD_VAR 0 5
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 5
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: PPUSH
37029: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37033: LD_ADDR_EXP 129
37037: PUSH
37038: LD_EXP 129
37042: PPUSH
37043: LD_VAR 0 4
37047: PPUSH
37048: LD_EXP 129
37052: PUSH
37053: LD_VAR 0 4
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 3
37063: PPUSH
37064: CALL_OW 3
37068: PPUSH
37069: CALL_OW 1
37073: ST_TO_ADDR
// end ; end ;
37074: GO 36903
37076: POP
37077: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37078: LD_VAR 0 1
37082: PPUSH
37083: LD_EXP 129
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: PUSH
37094: LD_INT 0
37096: PLUS
37097: PPUSH
37098: CALL_OW 505
// end ;
37102: LD_VAR 0 2
37106: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37107: LD_INT 0
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
// if not hack in hackTanks then
37113: LD_VAR 0 1
37117: PUSH
37118: LD_EXP 128
37122: IN
37123: NOT
37124: IFFALSE 37128
// exit ;
37126: GO 37213
// index := GetElementIndex ( hackTanks , hack ) ;
37128: LD_ADDR_VAR 0 5
37132: PUSH
37133: LD_EXP 128
37137: PPUSH
37138: LD_VAR 0 1
37142: PPUSH
37143: CALL 44003 0 2
37147: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37148: LD_ADDR_VAR 0 4
37152: PUSH
37153: DOUBLE
37154: LD_INT 1
37156: DEC
37157: ST_TO_ADDR
37158: LD_EXP 129
37162: PUSH
37163: LD_VAR 0 5
37167: ARRAY
37168: PUSH
37169: FOR_TO
37170: IFFALSE 37211
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37172: LD_EXP 129
37176: PUSH
37177: LD_VAR 0 5
37181: ARRAY
37182: PUSH
37183: LD_VAR 0 4
37187: ARRAY
37188: PUSH
37189: LD_INT 1
37191: ARRAY
37192: PUSH
37193: LD_VAR 0 2
37197: EQUAL
37198: IFFALSE 37209
// KillUnit ( vehicle ) ;
37200: LD_VAR 0 2
37204: PPUSH
37205: CALL_OW 66
37209: GO 37169
37211: POP
37212: POP
// end ;
37213: LD_VAR 0 3
37217: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37218: LD_EXP 133
37222: NOT
37223: IFFALSE 37258
37225: GO 37227
37227: DISABLE
// begin initMiner := true ;
37228: LD_ADDR_EXP 133
37232: PUSH
37233: LD_INT 1
37235: ST_TO_ADDR
// minersList := [ ] ;
37236: LD_ADDR_EXP 134
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// minerMinesList := [ ] ;
37243: LD_ADDR_EXP 135
37247: PUSH
37248: EMPTY
37249: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37250: LD_ADDR_EXP 136
37254: PUSH
37255: LD_INT 5
37257: ST_TO_ADDR
// end ;
37258: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37259: LD_EXP 133
37263: PUSH
37264: LD_INT 34
37266: PUSH
37267: LD_EXP 56
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PPUSH
37276: CALL_OW 69
37280: AND
37281: IFFALSE 37744
37283: GO 37285
37285: DISABLE
37286: LD_INT 0
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
// begin enable ;
37292: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37293: LD_ADDR_VAR 0 1
37297: PUSH
37298: LD_INT 34
37300: PUSH
37301: LD_EXP 56
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PPUSH
37310: CALL_OW 69
37314: PUSH
37315: FOR_IN
37316: IFFALSE 37388
// begin if not i in minersList then
37318: LD_VAR 0 1
37322: PUSH
37323: LD_EXP 134
37327: IN
37328: NOT
37329: IFFALSE 37386
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37331: LD_ADDR_EXP 134
37335: PUSH
37336: LD_EXP 134
37340: PPUSH
37341: LD_EXP 134
37345: PUSH
37346: LD_INT 1
37348: PLUS
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 1
37359: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37360: LD_ADDR_EXP 135
37364: PUSH
37365: LD_EXP 135
37369: PPUSH
37370: LD_EXP 135
37374: PUSH
37375: LD_INT 1
37377: PLUS
37378: PPUSH
37379: EMPTY
37380: PPUSH
37381: CALL_OW 1
37385: ST_TO_ADDR
// end end ;
37386: GO 37315
37388: POP
37389: POP
// for i := minerMinesList downto 1 do
37390: LD_ADDR_VAR 0 1
37394: PUSH
37395: DOUBLE
37396: LD_EXP 135
37400: INC
37401: ST_TO_ADDR
37402: LD_INT 1
37404: PUSH
37405: FOR_DOWNTO
37406: IFFALSE 37742
// begin if IsLive ( minersList [ i ] ) then
37408: LD_EXP 134
37412: PUSH
37413: LD_VAR 0 1
37417: ARRAY
37418: PPUSH
37419: CALL_OW 300
37423: IFFALSE 37451
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37425: LD_EXP 134
37429: PUSH
37430: LD_VAR 0 1
37434: ARRAY
37435: PPUSH
37436: LD_EXP 135
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PPUSH
37447: CALL_OW 505
// if not minerMinesList [ i ] then
37451: LD_EXP 135
37455: PUSH
37456: LD_VAR 0 1
37460: ARRAY
37461: NOT
37462: IFFALSE 37466
// continue ;
37464: GO 37405
// for j := minerMinesList [ i ] downto 1 do
37466: LD_ADDR_VAR 0 2
37470: PUSH
37471: DOUBLE
37472: LD_EXP 135
37476: PUSH
37477: LD_VAR 0 1
37481: ARRAY
37482: INC
37483: ST_TO_ADDR
37484: LD_INT 1
37486: PUSH
37487: FOR_DOWNTO
37488: IFFALSE 37738
// begin side := GetSide ( minersList [ i ] ) ;
37490: LD_ADDR_VAR 0 3
37494: PUSH
37495: LD_EXP 134
37499: PUSH
37500: LD_VAR 0 1
37504: ARRAY
37505: PPUSH
37506: CALL_OW 255
37510: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37511: LD_ADDR_VAR 0 4
37515: PUSH
37516: LD_EXP 135
37520: PUSH
37521: LD_VAR 0 1
37525: ARRAY
37526: PUSH
37527: LD_VAR 0 2
37531: ARRAY
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PPUSH
37537: LD_EXP 135
37541: PUSH
37542: LD_VAR 0 1
37546: ARRAY
37547: PUSH
37548: LD_VAR 0 2
37552: ARRAY
37553: PUSH
37554: LD_INT 2
37556: ARRAY
37557: PPUSH
37558: CALL_OW 428
37562: ST_TO_ADDR
// if not tmp then
37563: LD_VAR 0 4
37567: NOT
37568: IFFALSE 37572
// continue ;
37570: GO 37487
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37572: LD_VAR 0 4
37576: PUSH
37577: LD_INT 81
37579: PUSH
37580: LD_VAR 0 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PPUSH
37589: CALL_OW 69
37593: IN
37594: PUSH
37595: LD_EXP 135
37599: PUSH
37600: LD_VAR 0 1
37604: ARRAY
37605: PUSH
37606: LD_VAR 0 2
37610: ARRAY
37611: PUSH
37612: LD_INT 1
37614: ARRAY
37615: PPUSH
37616: LD_EXP 135
37620: PUSH
37621: LD_VAR 0 1
37625: ARRAY
37626: PUSH
37627: LD_VAR 0 2
37631: ARRAY
37632: PUSH
37633: LD_INT 2
37635: ARRAY
37636: PPUSH
37637: CALL_OW 458
37641: AND
37642: IFFALSE 37736
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37644: LD_EXP 135
37648: PUSH
37649: LD_VAR 0 1
37653: ARRAY
37654: PUSH
37655: LD_VAR 0 2
37659: ARRAY
37660: PUSH
37661: LD_INT 1
37663: ARRAY
37664: PPUSH
37665: LD_EXP 135
37669: PUSH
37670: LD_VAR 0 1
37674: ARRAY
37675: PUSH
37676: LD_VAR 0 2
37680: ARRAY
37681: PUSH
37682: LD_INT 2
37684: ARRAY
37685: PPUSH
37686: LD_VAR 0 3
37690: PPUSH
37691: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37695: LD_ADDR_EXP 135
37699: PUSH
37700: LD_EXP 135
37704: PPUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: LD_EXP 135
37714: PUSH
37715: LD_VAR 0 1
37719: ARRAY
37720: PPUSH
37721: LD_VAR 0 2
37725: PPUSH
37726: CALL_OW 3
37730: PPUSH
37731: CALL_OW 1
37735: ST_TO_ADDR
// end ; end ;
37736: GO 37487
37738: POP
37739: POP
// end ;
37740: GO 37405
37742: POP
37743: POP
// end ;
37744: PPOPN 4
37746: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37747: LD_INT 0
37749: PPUSH
37750: PPUSH
// result := false ;
37751: LD_ADDR_VAR 0 4
37755: PUSH
37756: LD_INT 0
37758: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37759: LD_VAR 0 1
37763: PPUSH
37764: CALL_OW 264
37768: PUSH
37769: LD_EXP 56
37773: EQUAL
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 38019
// index := GetElementIndex ( minersList , unit ) ;
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_EXP 134
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL 44003 0 2
37798: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37799: LD_EXP 135
37803: PUSH
37804: LD_VAR 0 5
37808: ARRAY
37809: PUSH
37810: LD_EXP 136
37814: GREATEREQUAL
37815: IFFALSE 37819
// exit ;
37817: GO 38019
// ComMoveXY ( unit , x , y ) ;
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 2
37828: PPUSH
37829: LD_VAR 0 3
37833: PPUSH
37834: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37838: LD_INT 35
37840: PPUSH
37841: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37845: LD_VAR 0 1
37849: PPUSH
37850: LD_VAR 0 2
37854: PPUSH
37855: LD_VAR 0 3
37859: PPUSH
37860: CALL 74775 0 3
37864: NOT
37865: PUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 314
37875: AND
37876: IFFALSE 37880
// exit ;
37878: GO 38019
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37880: LD_VAR 0 2
37884: PPUSH
37885: LD_VAR 0 3
37889: PPUSH
37890: CALL_OW 428
37894: PUSH
37895: LD_VAR 0 1
37899: EQUAL
37900: PUSH
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 314
37910: NOT
37911: AND
37912: IFFALSE 37838
// PlaySoundXY ( x , y , PlantMine ) ;
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 3
37923: PPUSH
37924: LD_STRING PlantMine
37926: PPUSH
37927: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_VAR 0 3
37940: PPUSH
37941: LD_VAR 0 1
37945: PPUSH
37946: CALL_OW 255
37950: PPUSH
37951: LD_INT 0
37953: PPUSH
37954: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37958: LD_ADDR_EXP 135
37962: PUSH
37963: LD_EXP 135
37967: PPUSH
37968: LD_VAR 0 5
37972: PUSH
37973: LD_EXP 135
37977: PUSH
37978: LD_VAR 0 5
37982: ARRAY
37983: PUSH
37984: LD_INT 1
37986: PLUS
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PPUSH
37992: LD_VAR 0 2
37996: PUSH
37997: LD_VAR 0 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PPUSH
38006: CALL 44218 0 3
38010: ST_TO_ADDR
// result := true ;
38011: LD_ADDR_VAR 0 4
38015: PUSH
38016: LD_INT 1
38018: ST_TO_ADDR
// end ;
38019: LD_VAR 0 4
38023: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38024: LD_INT 0
38026: PPUSH
38027: PPUSH
38028: PPUSH
// if not unit in minersList then
38029: LD_VAR 0 1
38033: PUSH
38034: LD_EXP 134
38038: IN
38039: NOT
38040: IFFALSE 38044
// exit ;
38042: GO 38436
// index := GetElementIndex ( minersList , unit ) ;
38044: LD_ADDR_VAR 0 6
38048: PUSH
38049: LD_EXP 134
38053: PPUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: CALL 44003 0 2
38063: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: DOUBLE
38070: LD_EXP 135
38074: PUSH
38075: LD_VAR 0 6
38079: ARRAY
38080: INC
38081: ST_TO_ADDR
38082: LD_INT 1
38084: PUSH
38085: FOR_DOWNTO
38086: IFFALSE 38247
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38088: LD_EXP 135
38092: PUSH
38093: LD_VAR 0 6
38097: ARRAY
38098: PUSH
38099: LD_VAR 0 5
38103: ARRAY
38104: PUSH
38105: LD_INT 1
38107: ARRAY
38108: PUSH
38109: LD_VAR 0 2
38113: EQUAL
38114: PUSH
38115: LD_EXP 135
38119: PUSH
38120: LD_VAR 0 6
38124: ARRAY
38125: PUSH
38126: LD_VAR 0 5
38130: ARRAY
38131: PUSH
38132: LD_INT 2
38134: ARRAY
38135: PUSH
38136: LD_VAR 0 3
38140: EQUAL
38141: AND
38142: IFFALSE 38245
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38144: LD_EXP 135
38148: PUSH
38149: LD_VAR 0 6
38153: ARRAY
38154: PUSH
38155: LD_VAR 0 5
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PPUSH
38165: LD_EXP 135
38169: PUSH
38170: LD_VAR 0 6
38174: ARRAY
38175: PUSH
38176: LD_VAR 0 5
38180: ARRAY
38181: PUSH
38182: LD_INT 2
38184: ARRAY
38185: PPUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 255
38195: PPUSH
38196: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38200: LD_ADDR_EXP 135
38204: PUSH
38205: LD_EXP 135
38209: PPUSH
38210: LD_VAR 0 6
38214: PPUSH
38215: LD_EXP 135
38219: PUSH
38220: LD_VAR 0 6
38224: ARRAY
38225: PPUSH
38226: LD_VAR 0 5
38230: PPUSH
38231: CALL_OW 3
38235: PPUSH
38236: CALL_OW 1
38240: ST_TO_ADDR
// exit ;
38241: POP
38242: POP
38243: GO 38436
// end ; end ;
38245: GO 38085
38247: POP
38248: POP
// for i := minerMinesList [ index ] downto 1 do
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: DOUBLE
38255: LD_EXP 135
38259: PUSH
38260: LD_VAR 0 6
38264: ARRAY
38265: INC
38266: ST_TO_ADDR
38267: LD_INT 1
38269: PUSH
38270: FOR_DOWNTO
38271: IFFALSE 38434
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38273: LD_EXP 135
38277: PUSH
38278: LD_VAR 0 6
38282: ARRAY
38283: PUSH
38284: LD_VAR 0 5
38288: ARRAY
38289: PUSH
38290: LD_INT 1
38292: ARRAY
38293: PPUSH
38294: LD_EXP 135
38298: PUSH
38299: LD_VAR 0 6
38303: ARRAY
38304: PUSH
38305: LD_VAR 0 5
38309: ARRAY
38310: PUSH
38311: LD_INT 2
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 2
38319: PPUSH
38320: LD_VAR 0 3
38324: PPUSH
38325: CALL_OW 298
38329: PUSH
38330: LD_INT 6
38332: LESS
38333: IFFALSE 38432
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38335: LD_EXP 135
38339: PUSH
38340: LD_VAR 0 6
38344: ARRAY
38345: PUSH
38346: LD_VAR 0 5
38350: ARRAY
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PPUSH
38356: LD_EXP 135
38360: PUSH
38361: LD_VAR 0 6
38365: ARRAY
38366: PUSH
38367: LD_VAR 0 5
38371: ARRAY
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PPUSH
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 255
38386: PPUSH
38387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38391: LD_ADDR_EXP 135
38395: PUSH
38396: LD_EXP 135
38400: PPUSH
38401: LD_VAR 0 6
38405: PPUSH
38406: LD_EXP 135
38410: PUSH
38411: LD_VAR 0 6
38415: ARRAY
38416: PPUSH
38417: LD_VAR 0 5
38421: PPUSH
38422: CALL_OW 3
38426: PPUSH
38427: CALL_OW 1
38431: ST_TO_ADDR
// end ; end ;
38432: GO 38270
38434: POP
38435: POP
// end ;
38436: LD_VAR 0 4
38440: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38441: LD_INT 0
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 264
38461: PUSH
38462: LD_EXP 56
38466: EQUAL
38467: NOT
38468: PUSH
38469: LD_VAR 0 1
38473: PUSH
38474: LD_EXP 134
38478: IN
38479: NOT
38480: OR
38481: IFFALSE 38485
// exit ;
38483: GO 38807
// index := GetElementIndex ( minersList , unit ) ;
38485: LD_ADDR_VAR 0 6
38489: PUSH
38490: LD_EXP 134
38494: PPUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL 44003 0 2
38504: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38505: LD_ADDR_VAR 0 8
38509: PUSH
38510: LD_EXP 136
38514: PUSH
38515: LD_EXP 135
38519: PUSH
38520: LD_VAR 0 6
38524: ARRAY
38525: MINUS
38526: ST_TO_ADDR
// if not minesFreeAmount then
38527: LD_VAR 0 8
38531: NOT
38532: IFFALSE 38536
// exit ;
38534: GO 38807
// tmp := [ ] ;
38536: LD_ADDR_VAR 0 7
38540: PUSH
38541: EMPTY
38542: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38543: LD_ADDR_VAR 0 5
38547: PUSH
38548: DOUBLE
38549: LD_INT 1
38551: DEC
38552: ST_TO_ADDR
38553: LD_VAR 0 8
38557: PUSH
38558: FOR_TO
38559: IFFALSE 38754
// begin _d := rand ( 0 , 5 ) ;
38561: LD_ADDR_VAR 0 11
38565: PUSH
38566: LD_INT 0
38568: PPUSH
38569: LD_INT 5
38571: PPUSH
38572: CALL_OW 12
38576: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38577: LD_ADDR_VAR 0 12
38581: PUSH
38582: LD_INT 2
38584: PPUSH
38585: LD_INT 6
38587: PPUSH
38588: CALL_OW 12
38592: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38593: LD_ADDR_VAR 0 9
38597: PUSH
38598: LD_VAR 0 2
38602: PPUSH
38603: LD_VAR 0 11
38607: PPUSH
38608: LD_VAR 0 12
38612: PPUSH
38613: CALL_OW 272
38617: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38618: LD_ADDR_VAR 0 10
38622: PUSH
38623: LD_VAR 0 3
38627: PPUSH
38628: LD_VAR 0 11
38632: PPUSH
38633: LD_VAR 0 12
38637: PPUSH
38638: CALL_OW 273
38642: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38643: LD_VAR 0 9
38647: PPUSH
38648: LD_VAR 0 10
38652: PPUSH
38653: CALL_OW 488
38657: PUSH
38658: LD_VAR 0 9
38662: PUSH
38663: LD_VAR 0 10
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_VAR 0 7
38676: IN
38677: NOT
38678: AND
38679: PUSH
38680: LD_VAR 0 9
38684: PPUSH
38685: LD_VAR 0 10
38689: PPUSH
38690: CALL_OW 458
38694: NOT
38695: AND
38696: IFFALSE 38738
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38698: LD_ADDR_VAR 0 7
38702: PUSH
38703: LD_VAR 0 7
38707: PPUSH
38708: LD_VAR 0 7
38712: PUSH
38713: LD_INT 1
38715: PLUS
38716: PPUSH
38717: LD_VAR 0 9
38721: PUSH
38722: LD_VAR 0 10
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PPUSH
38731: CALL_OW 1
38735: ST_TO_ADDR
38736: GO 38752
// i := i - 1 ;
38738: LD_ADDR_VAR 0 5
38742: PUSH
38743: LD_VAR 0 5
38747: PUSH
38748: LD_INT 1
38750: MINUS
38751: ST_TO_ADDR
// end ;
38752: GO 38558
38754: POP
38755: POP
// for i in tmp do
38756: LD_ADDR_VAR 0 5
38760: PUSH
38761: LD_VAR 0 7
38765: PUSH
38766: FOR_IN
38767: IFFALSE 38805
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38769: LD_VAR 0 1
38773: PPUSH
38774: LD_VAR 0 5
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PPUSH
38783: LD_VAR 0 5
38787: PUSH
38788: LD_INT 2
38790: ARRAY
38791: PPUSH
38792: CALL 37747 0 3
38796: NOT
38797: IFFALSE 38803
// exit ;
38799: POP
38800: POP
38801: GO 38807
38803: GO 38766
38805: POP
38806: POP
// end ;
38807: LD_VAR 0 4
38811: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38812: LD_INT 0
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
// if not GetClass ( unit ) = class_sniper then
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 257
38830: PUSH
38831: LD_INT 5
38833: EQUAL
38834: NOT
38835: IFFALSE 38839
// exit ;
38837: GO 39227
// dist := 8 ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_INT 8
38846: ST_TO_ADDR
// viewRange := 12 ;
38847: LD_ADDR_VAR 0 7
38851: PUSH
38852: LD_INT 12
38854: ST_TO_ADDR
// side := GetSide ( unit ) ;
38855: LD_ADDR_VAR 0 6
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 255
38869: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38870: LD_INT 61
38872: PPUSH
38873: LD_VAR 0 6
38877: PPUSH
38878: CALL_OW 321
38882: PUSH
38883: LD_INT 2
38885: EQUAL
38886: IFFALSE 38896
// viewRange := 16 ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_INT 16
38895: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38896: LD_VAR 0 1
38900: PPUSH
38901: LD_VAR 0 2
38905: PPUSH
38906: LD_VAR 0 3
38910: PPUSH
38911: CALL_OW 297
38915: PUSH
38916: LD_VAR 0 5
38920: GREATER
38921: IFFALSE 39000
// begin ComMoveXY ( unit , x , y ) ;
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_VAR 0 3
38937: PPUSH
38938: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38942: LD_INT 35
38944: PPUSH
38945: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38949: LD_VAR 0 1
38953: PPUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_VAR 0 3
38963: PPUSH
38964: CALL 74775 0 3
38968: NOT
38969: IFFALSE 38973
// exit ;
38971: GO 39227
// until GetDistUnitXY ( unit , x , y ) < dist ;
38973: LD_VAR 0 1
38977: PPUSH
38978: LD_VAR 0 2
38982: PPUSH
38983: LD_VAR 0 3
38987: PPUSH
38988: CALL_OW 297
38992: PUSH
38993: LD_VAR 0 5
38997: LESS
38998: IFFALSE 38942
// end ; ComTurnXY ( unit , x , y ) ;
39000: LD_VAR 0 1
39004: PPUSH
39005: LD_VAR 0 2
39009: PPUSH
39010: LD_VAR 0 3
39014: PPUSH
39015: CALL_OW 118
// wait ( 5 ) ;
39019: LD_INT 5
39021: PPUSH
39022: CALL_OW 67
// _d := GetDir ( unit ) ;
39026: LD_ADDR_VAR 0 10
39030: PUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 254
39040: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39041: LD_ADDR_VAR 0 8
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 250
39055: PPUSH
39056: LD_VAR 0 10
39060: PPUSH
39061: LD_VAR 0 5
39065: PPUSH
39066: CALL_OW 272
39070: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39071: LD_ADDR_VAR 0 9
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 251
39085: PPUSH
39086: LD_VAR 0 10
39090: PPUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: CALL_OW 273
39100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39101: LD_VAR 0 8
39105: PPUSH
39106: LD_VAR 0 9
39110: PPUSH
39111: CALL_OW 488
39115: NOT
39116: IFFALSE 39120
// exit ;
39118: GO 39227
// ComAnimCustom ( unit , 1 ) ;
39120: LD_VAR 0 1
39124: PPUSH
39125: LD_INT 1
39127: PPUSH
39128: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39132: LD_VAR 0 8
39136: PPUSH
39137: LD_VAR 0 9
39141: PPUSH
39142: LD_VAR 0 6
39146: PPUSH
39147: LD_VAR 0 7
39151: PPUSH
39152: CALL_OW 330
// repeat wait ( 1 ) ;
39156: LD_INT 1
39158: PPUSH
39159: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39163: LD_VAR 0 1
39167: PPUSH
39168: CALL_OW 316
39172: PUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: CALL_OW 314
39182: OR
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 302
39193: NOT
39194: OR
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 301
39205: OR
39206: IFFALSE 39156
// RemoveSeeing ( _x , _y , side ) ;
39208: LD_VAR 0 8
39212: PPUSH
39213: LD_VAR 0 9
39217: PPUSH
39218: LD_VAR 0 6
39222: PPUSH
39223: CALL_OW 331
// end ; end_of_file
39227: LD_VAR 0 4
39231: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39232: LD_INT 0
39234: PPUSH
39235: PPUSH
// if exist_mode then
39236: LD_VAR 0 2
39240: IFFALSE 39265
// unit := CreateCharacter ( prefix & ident ) else
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 3
39251: PUSH
39252: LD_VAR 0 1
39256: STR
39257: PPUSH
39258: CALL_OW 34
39262: ST_TO_ADDR
39263: GO 39280
// unit := NewCharacter ( ident ) ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 25
39279: ST_TO_ADDR
// result := unit ;
39280: LD_ADDR_VAR 0 4
39284: PUSH
39285: LD_VAR 0 5
39289: ST_TO_ADDR
// end ;
39290: LD_VAR 0 4
39294: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39295: LD_INT 0
39297: PPUSH
39298: PPUSH
// if not side or not nation then
39299: LD_VAR 0 1
39303: NOT
39304: PUSH
39305: LD_VAR 0 2
39309: NOT
39310: OR
39311: IFFALSE 39315
// exit ;
39313: GO 40083
// case nation of nation_american :
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 1
39322: DOUBLE
39323: EQUAL
39324: IFTRUE 39328
39326: GO 39542
39328: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39329: LD_ADDR_VAR 0 4
39333: PUSH
39334: LD_INT 35
39336: PUSH
39337: LD_INT 45
39339: PUSH
39340: LD_INT 46
39342: PUSH
39343: LD_INT 47
39345: PUSH
39346: LD_INT 82
39348: PUSH
39349: LD_INT 83
39351: PUSH
39352: LD_INT 84
39354: PUSH
39355: LD_INT 85
39357: PUSH
39358: LD_INT 86
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: LD_INT 6
39369: PUSH
39370: LD_INT 15
39372: PUSH
39373: LD_INT 16
39375: PUSH
39376: LD_INT 7
39378: PUSH
39379: LD_INT 12
39381: PUSH
39382: LD_INT 13
39384: PUSH
39385: LD_INT 10
39387: PUSH
39388: LD_INT 14
39390: PUSH
39391: LD_INT 20
39393: PUSH
39394: LD_INT 21
39396: PUSH
39397: LD_INT 22
39399: PUSH
39400: LD_INT 25
39402: PUSH
39403: LD_INT 32
39405: PUSH
39406: LD_INT 27
39408: PUSH
39409: LD_INT 36
39411: PUSH
39412: LD_INT 69
39414: PUSH
39415: LD_INT 39
39417: PUSH
39418: LD_INT 34
39420: PUSH
39421: LD_INT 40
39423: PUSH
39424: LD_INT 48
39426: PUSH
39427: LD_INT 49
39429: PUSH
39430: LD_INT 50
39432: PUSH
39433: LD_INT 51
39435: PUSH
39436: LD_INT 52
39438: PUSH
39439: LD_INT 53
39441: PUSH
39442: LD_INT 54
39444: PUSH
39445: LD_INT 55
39447: PUSH
39448: LD_INT 56
39450: PUSH
39451: LD_INT 57
39453: PUSH
39454: LD_INT 58
39456: PUSH
39457: LD_INT 59
39459: PUSH
39460: LD_INT 60
39462: PUSH
39463: LD_INT 61
39465: PUSH
39466: LD_INT 62
39468: PUSH
39469: LD_INT 80
39471: PUSH
39472: LD_INT 82
39474: PUSH
39475: LD_INT 83
39477: PUSH
39478: LD_INT 84
39480: PUSH
39481: LD_INT 85
39483: PUSH
39484: LD_INT 86
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
39540: GO 40007
39542: LD_INT 2
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39776
39550: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39551: LD_ADDR_VAR 0 4
39555: PUSH
39556: LD_INT 35
39558: PUSH
39559: LD_INT 45
39561: PUSH
39562: LD_INT 46
39564: PUSH
39565: LD_INT 47
39567: PUSH
39568: LD_INT 82
39570: PUSH
39571: LD_INT 83
39573: PUSH
39574: LD_INT 84
39576: PUSH
39577: LD_INT 85
39579: PUSH
39580: LD_INT 87
39582: PUSH
39583: LD_INT 70
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 11
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 5
39600: PUSH
39601: LD_INT 6
39603: PUSH
39604: LD_INT 15
39606: PUSH
39607: LD_INT 18
39609: PUSH
39610: LD_INT 7
39612: PUSH
39613: LD_INT 17
39615: PUSH
39616: LD_INT 8
39618: PUSH
39619: LD_INT 20
39621: PUSH
39622: LD_INT 21
39624: PUSH
39625: LD_INT 22
39627: PUSH
39628: LD_INT 72
39630: PUSH
39631: LD_INT 26
39633: PUSH
39634: LD_INT 69
39636: PUSH
39637: LD_INT 39
39639: PUSH
39640: LD_INT 40
39642: PUSH
39643: LD_INT 41
39645: PUSH
39646: LD_INT 42
39648: PUSH
39649: LD_INT 43
39651: PUSH
39652: LD_INT 48
39654: PUSH
39655: LD_INT 49
39657: PUSH
39658: LD_INT 50
39660: PUSH
39661: LD_INT 51
39663: PUSH
39664: LD_INT 52
39666: PUSH
39667: LD_INT 53
39669: PUSH
39670: LD_INT 54
39672: PUSH
39673: LD_INT 55
39675: PUSH
39676: LD_INT 56
39678: PUSH
39679: LD_INT 60
39681: PUSH
39682: LD_INT 61
39684: PUSH
39685: LD_INT 62
39687: PUSH
39688: LD_INT 66
39690: PUSH
39691: LD_INT 67
39693: PUSH
39694: LD_INT 68
39696: PUSH
39697: LD_INT 81
39699: PUSH
39700: LD_INT 82
39702: PUSH
39703: LD_INT 83
39705: PUSH
39706: LD_INT 84
39708: PUSH
39709: LD_INT 85
39711: PUSH
39712: LD_INT 87
39714: PUSH
39715: LD_INT 88
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
39774: GO 40007
39776: LD_INT 3
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 40006
39784: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39785: LD_ADDR_VAR 0 4
39789: PUSH
39790: LD_INT 46
39792: PUSH
39793: LD_INT 47
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: LD_INT 82
39804: PUSH
39805: LD_INT 83
39807: PUSH
39808: LD_INT 84
39810: PUSH
39811: LD_INT 85
39813: PUSH
39814: LD_INT 86
39816: PUSH
39817: LD_INT 11
39819: PUSH
39820: LD_INT 9
39822: PUSH
39823: LD_INT 20
39825: PUSH
39826: LD_INT 19
39828: PUSH
39829: LD_INT 21
39831: PUSH
39832: LD_INT 24
39834: PUSH
39835: LD_INT 22
39837: PUSH
39838: LD_INT 25
39840: PUSH
39841: LD_INT 28
39843: PUSH
39844: LD_INT 29
39846: PUSH
39847: LD_INT 30
39849: PUSH
39850: LD_INT 31
39852: PUSH
39853: LD_INT 37
39855: PUSH
39856: LD_INT 38
39858: PUSH
39859: LD_INT 32
39861: PUSH
39862: LD_INT 27
39864: PUSH
39865: LD_INT 33
39867: PUSH
39868: LD_INT 69
39870: PUSH
39871: LD_INT 39
39873: PUSH
39874: LD_INT 34
39876: PUSH
39877: LD_INT 40
39879: PUSH
39880: LD_INT 71
39882: PUSH
39883: LD_INT 23
39885: PUSH
39886: LD_INT 44
39888: PUSH
39889: LD_INT 48
39891: PUSH
39892: LD_INT 49
39894: PUSH
39895: LD_INT 50
39897: PUSH
39898: LD_INT 51
39900: PUSH
39901: LD_INT 52
39903: PUSH
39904: LD_INT 53
39906: PUSH
39907: LD_INT 54
39909: PUSH
39910: LD_INT 55
39912: PUSH
39913: LD_INT 56
39915: PUSH
39916: LD_INT 57
39918: PUSH
39919: LD_INT 58
39921: PUSH
39922: LD_INT 59
39924: PUSH
39925: LD_INT 63
39927: PUSH
39928: LD_INT 64
39930: PUSH
39931: LD_INT 65
39933: PUSH
39934: LD_INT 82
39936: PUSH
39937: LD_INT 83
39939: PUSH
39940: LD_INT 84
39942: PUSH
39943: LD_INT 85
39945: PUSH
39946: LD_INT 86
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
40004: GO 40007
40006: POP
// if state > - 1 and state < 3 then
40007: LD_VAR 0 3
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: GREATER
40016: PUSH
40017: LD_VAR 0 3
40021: PUSH
40022: LD_INT 3
40024: LESS
40025: AND
40026: IFFALSE 40083
// for i in result do
40028: LD_ADDR_VAR 0 5
40032: PUSH
40033: LD_VAR 0 4
40037: PUSH
40038: FOR_IN
40039: IFFALSE 40081
// if GetTech ( i , side ) <> state then
40041: LD_VAR 0 5
40045: PPUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 321
40055: PUSH
40056: LD_VAR 0 3
40060: NONEQUAL
40061: IFFALSE 40079
// result := result diff i ;
40063: LD_ADDR_VAR 0 4
40067: PUSH
40068: LD_VAR 0 4
40072: PUSH
40073: LD_VAR 0 5
40077: DIFF
40078: ST_TO_ADDR
40079: GO 40038
40081: POP
40082: POP
// end ;
40083: LD_VAR 0 4
40087: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40088: LD_INT 0
40090: PPUSH
40091: PPUSH
40092: PPUSH
// result := true ;
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_INT 1
40100: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40101: LD_ADDR_VAR 0 5
40105: PUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 480
40115: ST_TO_ADDR
// if not tmp then
40116: LD_VAR 0 5
40120: NOT
40121: IFFALSE 40125
// exit ;
40123: GO 40174
// for i in tmp do
40125: LD_ADDR_VAR 0 4
40129: PUSH
40130: LD_VAR 0 5
40134: PUSH
40135: FOR_IN
40136: IFFALSE 40172
// if GetTech ( i , side ) <> state_researched then
40138: LD_VAR 0 4
40142: PPUSH
40143: LD_VAR 0 1
40147: PPUSH
40148: CALL_OW 321
40152: PUSH
40153: LD_INT 2
40155: NONEQUAL
40156: IFFALSE 40170
// begin result := false ;
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_INT 0
40165: ST_TO_ADDR
// exit ;
40166: POP
40167: POP
40168: GO 40174
// end ;
40170: GO 40135
40172: POP
40173: POP
// end ;
40174: LD_VAR 0 3
40178: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40179: LD_INT 0
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40194: LD_VAR 0 1
40198: NOT
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 257
40209: PUSH
40210: LD_INT 9
40212: NONEQUAL
40213: OR
40214: IFFALSE 40218
// exit ;
40216: GO 40791
// side := GetSide ( unit ) ;
40218: LD_ADDR_VAR 0 9
40222: PUSH
40223: LD_VAR 0 1
40227: PPUSH
40228: CALL_OW 255
40232: ST_TO_ADDR
// tech_space := tech_spacanom ;
40233: LD_ADDR_VAR 0 12
40237: PUSH
40238: LD_INT 29
40240: ST_TO_ADDR
// tech_time := tech_taurad ;
40241: LD_ADDR_VAR 0 13
40245: PUSH
40246: LD_INT 28
40248: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40249: LD_ADDR_VAR 0 11
40253: PUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 310
40263: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40264: LD_VAR 0 11
40268: PPUSH
40269: CALL_OW 247
40273: PUSH
40274: LD_INT 2
40276: EQUAL
40277: IFFALSE 40281
// exit ;
40279: GO 40791
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40281: LD_ADDR_VAR 0 8
40285: PUSH
40286: LD_INT 81
40288: PUSH
40289: LD_VAR 0 9
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 21
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PPUSH
40319: CALL_OW 69
40323: ST_TO_ADDR
// if not tmp then
40324: LD_VAR 0 8
40328: NOT
40329: IFFALSE 40333
// exit ;
40331: GO 40791
// if in_unit then
40333: LD_VAR 0 11
40337: IFFALSE 40361
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40339: LD_ADDR_VAR 0 10
40343: PUSH
40344: LD_VAR 0 8
40348: PPUSH
40349: LD_VAR 0 11
40353: PPUSH
40354: CALL_OW 74
40358: ST_TO_ADDR
40359: GO 40381
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40361: LD_ADDR_VAR 0 10
40365: PUSH
40366: LD_VAR 0 8
40370: PPUSH
40371: LD_VAR 0 1
40375: PPUSH
40376: CALL_OW 74
40380: ST_TO_ADDR
// if not enemy then
40381: LD_VAR 0 10
40385: NOT
40386: IFFALSE 40390
// exit ;
40388: GO 40791
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40390: LD_VAR 0 11
40394: PUSH
40395: LD_VAR 0 11
40399: PPUSH
40400: LD_VAR 0 10
40404: PPUSH
40405: CALL_OW 296
40409: PUSH
40410: LD_INT 13
40412: GREATER
40413: AND
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: LD_VAR 0 10
40424: PPUSH
40425: CALL_OW 296
40429: PUSH
40430: LD_INT 12
40432: GREATER
40433: OR
40434: IFFALSE 40438
// exit ;
40436: GO 40791
// missile := [ 1 ] ;
40438: LD_ADDR_VAR 0 14
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40449: LD_VAR 0 9
40453: PPUSH
40454: LD_VAR 0 12
40458: PPUSH
40459: CALL_OW 325
40463: IFFALSE 40492
// missile := Insert ( missile , missile + 1 , 2 ) ;
40465: LD_ADDR_VAR 0 14
40469: PUSH
40470: LD_VAR 0 14
40474: PPUSH
40475: LD_VAR 0 14
40479: PUSH
40480: LD_INT 1
40482: PLUS
40483: PPUSH
40484: LD_INT 2
40486: PPUSH
40487: CALL_OW 2
40491: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40492: LD_VAR 0 9
40496: PPUSH
40497: LD_VAR 0 13
40501: PPUSH
40502: CALL_OW 325
40506: PUSH
40507: LD_VAR 0 10
40511: PPUSH
40512: CALL_OW 255
40516: PPUSH
40517: LD_VAR 0 13
40521: PPUSH
40522: CALL_OW 325
40526: NOT
40527: AND
40528: IFFALSE 40557
// missile := Insert ( missile , missile + 1 , 3 ) ;
40530: LD_ADDR_VAR 0 14
40534: PUSH
40535: LD_VAR 0 14
40539: PPUSH
40540: LD_VAR 0 14
40544: PUSH
40545: LD_INT 1
40547: PLUS
40548: PPUSH
40549: LD_INT 3
40551: PPUSH
40552: CALL_OW 2
40556: ST_TO_ADDR
// if missile < 2 then
40557: LD_VAR 0 14
40561: PUSH
40562: LD_INT 2
40564: LESS
40565: IFFALSE 40569
// exit ;
40567: GO 40791
// x := GetX ( enemy ) ;
40569: LD_ADDR_VAR 0 4
40573: PUSH
40574: LD_VAR 0 10
40578: PPUSH
40579: CALL_OW 250
40583: ST_TO_ADDR
// y := GetY ( enemy ) ;
40584: LD_ADDR_VAR 0 5
40588: PUSH
40589: LD_VAR 0 10
40593: PPUSH
40594: CALL_OW 251
40598: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40599: LD_ADDR_VAR 0 6
40603: PUSH
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PPUSH
40613: LD_INT 1
40615: PPUSH
40616: CALL_OW 12
40620: PLUS
40621: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40622: LD_ADDR_VAR 0 7
40626: PUSH
40627: LD_VAR 0 5
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PPUSH
40636: LD_INT 1
40638: PPUSH
40639: CALL_OW 12
40643: PLUS
40644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40645: LD_VAR 0 6
40649: PPUSH
40650: LD_VAR 0 7
40654: PPUSH
40655: CALL_OW 488
40659: NOT
40660: IFFALSE 40682
// begin _x := x ;
40662: LD_ADDR_VAR 0 6
40666: PUSH
40667: LD_VAR 0 4
40671: ST_TO_ADDR
// _y := y ;
40672: LD_ADDR_VAR 0 7
40676: PUSH
40677: LD_VAR 0 5
40681: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 1
40689: PPUSH
40690: LD_VAR 0 14
40694: PPUSH
40695: CALL_OW 12
40699: ST_TO_ADDR
// case i of 1 :
40700: LD_VAR 0 3
40704: PUSH
40705: LD_INT 1
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40730
40713: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40714: LD_VAR 0 1
40718: PPUSH
40719: LD_VAR 0 10
40723: PPUSH
40724: CALL_OW 115
40728: GO 40791
40730: LD_INT 2
40732: DOUBLE
40733: EQUAL
40734: IFTRUE 40738
40736: GO 40760
40738: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40739: LD_VAR 0 1
40743: PPUSH
40744: LD_VAR 0 6
40748: PPUSH
40749: LD_VAR 0 7
40753: PPUSH
40754: CALL_OW 153
40758: GO 40791
40760: LD_INT 3
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40790
40768: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40769: LD_VAR 0 1
40773: PPUSH
40774: LD_VAR 0 6
40778: PPUSH
40779: LD_VAR 0 7
40783: PPUSH
40784: CALL_OW 154
40788: GO 40791
40790: POP
// end ;
40791: LD_VAR 0 2
40795: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40796: LD_INT 0
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
// if not unit or not building then
40804: LD_VAR 0 1
40808: NOT
40809: PUSH
40810: LD_VAR 0 2
40814: NOT
40815: OR
40816: IFFALSE 40820
// exit ;
40818: GO 40978
// x := GetX ( building ) ;
40820: LD_ADDR_VAR 0 5
40824: PUSH
40825: LD_VAR 0 2
40829: PPUSH
40830: CALL_OW 250
40834: ST_TO_ADDR
// y := GetY ( building ) ;
40835: LD_ADDR_VAR 0 6
40839: PUSH
40840: LD_VAR 0 2
40844: PPUSH
40845: CALL_OW 251
40849: ST_TO_ADDR
// for i = 0 to 5 do
40850: LD_ADDR_VAR 0 4
40854: PUSH
40855: DOUBLE
40856: LD_INT 0
40858: DEC
40859: ST_TO_ADDR
40860: LD_INT 5
40862: PUSH
40863: FOR_TO
40864: IFFALSE 40976
// begin _x := ShiftX ( x , i , 3 ) ;
40866: LD_ADDR_VAR 0 7
40870: PUSH
40871: LD_VAR 0 5
40875: PPUSH
40876: LD_VAR 0 4
40880: PPUSH
40881: LD_INT 3
40883: PPUSH
40884: CALL_OW 272
40888: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40889: LD_ADDR_VAR 0 8
40893: PUSH
40894: LD_VAR 0 6
40898: PPUSH
40899: LD_VAR 0 4
40903: PPUSH
40904: LD_INT 3
40906: PPUSH
40907: CALL_OW 273
40911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40912: LD_VAR 0 7
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: CALL_OW 488
40926: NOT
40927: IFFALSE 40931
// continue ;
40929: GO 40863
// if HexInfo ( _x , _y ) = 0 then
40931: LD_VAR 0 7
40935: PPUSH
40936: LD_VAR 0 8
40940: PPUSH
40941: CALL_OW 428
40945: PUSH
40946: LD_INT 0
40948: EQUAL
40949: IFFALSE 40974
// begin ComMoveXY ( unit , _x , _y ) ;
40951: LD_VAR 0 1
40955: PPUSH
40956: LD_VAR 0 7
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: CALL_OW 111
// exit ;
40970: POP
40971: POP
40972: GO 40978
// end ; end ;
40974: GO 40863
40976: POP
40977: POP
// end ;
40978: LD_VAR 0 3
40982: RET
// export function ScanBase ( side , base_area ) ; begin
40983: LD_INT 0
40985: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 2
40995: PPUSH
40996: LD_INT 81
40998: PUSH
40999: LD_VAR 0 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PPUSH
41008: CALL_OW 70
41012: ST_TO_ADDR
// end ;
41013: LD_VAR 0 3
41017: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41018: LD_INT 0
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
// result := false ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_INT 0
41031: ST_TO_ADDR
// side := GetSide ( unit ) ;
41032: LD_ADDR_VAR 0 3
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 255
41046: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41047: LD_ADDR_VAR 0 4
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 248
41061: ST_TO_ADDR
// case nat of 1 :
41062: LD_VAR 0 4
41066: PUSH
41067: LD_INT 1
41069: DOUBLE
41070: EQUAL
41071: IFTRUE 41075
41073: GO 41086
41075: POP
// tech := tech_lassight ; 2 :
41076: LD_ADDR_VAR 0 5
41080: PUSH
41081: LD_INT 12
41083: ST_TO_ADDR
41084: GO 41125
41086: LD_INT 2
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41105
41094: POP
// tech := tech_mortar ; 3 :
41095: LD_ADDR_VAR 0 5
41099: PUSH
41100: LD_INT 41
41102: ST_TO_ADDR
41103: GO 41125
41105: LD_INT 3
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41113
41111: GO 41124
41113: POP
// tech := tech_bazooka ; end ;
41114: LD_ADDR_VAR 0 5
41118: PUSH
41119: LD_INT 44
41121: ST_TO_ADDR
41122: GO 41125
41124: POP
// if Researched ( side , tech ) then
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: CALL_OW 325
41139: IFFALSE 41166
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41141: LD_ADDR_VAR 0 2
41145: PUSH
41146: LD_INT 5
41148: PUSH
41149: LD_INT 8
41151: PUSH
41152: LD_INT 9
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: PUSH
41160: LD_VAR 0 4
41164: ARRAY
41165: ST_TO_ADDR
// end ;
41166: LD_VAR 0 2
41170: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
41175: PPUSH
// if not mines then
41176: LD_VAR 0 2
41180: NOT
41181: IFFALSE 41185
// exit ;
41183: GO 41329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41185: LD_ADDR_VAR 0 5
41189: PUSH
41190: LD_INT 81
41192: PUSH
41193: LD_VAR 0 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: LD_INT 21
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 69
41227: ST_TO_ADDR
// for i in mines do
41228: LD_ADDR_VAR 0 4
41232: PUSH
41233: LD_VAR 0 2
41237: PUSH
41238: FOR_IN
41239: IFFALSE 41327
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41241: LD_VAR 0 4
41245: PUSH
41246: LD_INT 1
41248: ARRAY
41249: PPUSH
41250: LD_VAR 0 4
41254: PUSH
41255: LD_INT 2
41257: ARRAY
41258: PPUSH
41259: CALL_OW 458
41263: NOT
41264: IFFALSE 41268
// continue ;
41266: GO 41238
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41268: LD_VAR 0 4
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PPUSH
41277: LD_VAR 0 4
41281: PUSH
41282: LD_INT 2
41284: ARRAY
41285: PPUSH
41286: CALL_OW 428
41290: PUSH
41291: LD_VAR 0 5
41295: IN
41296: IFFALSE 41325
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: PPUSH
41307: LD_VAR 0 4
41311: PUSH
41312: LD_INT 2
41314: ARRAY
41315: PPUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 456
// end ;
41325: GO 41238
41327: POP
41328: POP
// end ;
41329: LD_VAR 0 3
41333: RET
// export function Count ( array ) ; var i ; begin
41334: LD_INT 0
41336: PPUSH
41337: PPUSH
// result := 0 ;
41338: LD_ADDR_VAR 0 2
41342: PUSH
41343: LD_INT 0
41345: ST_TO_ADDR
// for i in array do
41346: LD_ADDR_VAR 0 3
41350: PUSH
41351: LD_VAR 0 1
41355: PUSH
41356: FOR_IN
41357: IFFALSE 41381
// if i then
41359: LD_VAR 0 3
41363: IFFALSE 41379
// result := result + 1 ;
41365: LD_ADDR_VAR 0 2
41369: PUSH
41370: LD_VAR 0 2
41374: PUSH
41375: LD_INT 1
41377: PLUS
41378: ST_TO_ADDR
41379: GO 41356
41381: POP
41382: POP
// end ;
41383: LD_VAR 0 2
41387: RET
// export function IsEmpty ( building ) ; begin
41388: LD_INT 0
41390: PPUSH
// if not building then
41391: LD_VAR 0 1
41395: NOT
41396: IFFALSE 41400
// exit ;
41398: GO 41443
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41400: LD_ADDR_VAR 0 2
41404: PUSH
41405: LD_VAR 0 1
41409: PUSH
41410: LD_INT 22
41412: PUSH
41413: LD_VAR 0 1
41417: PPUSH
41418: CALL_OW 255
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 58
41429: PUSH
41430: EMPTY
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PPUSH
41437: CALL_OW 69
41441: IN
41442: ST_TO_ADDR
// end ;
41443: LD_VAR 0 2
41447: RET
// export function IsNotFull ( building ) ; begin
41448: LD_INT 0
41450: PPUSH
// if not building then
41451: LD_VAR 0 1
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 41479
// result := UnitsInside ( building ) < 6 ;
41460: LD_ADDR_VAR 0 2
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: CALL_OW 313
41474: PUSH
41475: LD_INT 6
41477: LESS
41478: ST_TO_ADDR
// end ;
41479: LD_VAR 0 2
41483: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41484: LD_INT 0
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
// tmp := [ ] ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: EMPTY
41496: ST_TO_ADDR
// list := [ ] ;
41497: LD_ADDR_VAR 0 5
41501: PUSH
41502: EMPTY
41503: ST_TO_ADDR
// for i = 16 to 25 do
41504: LD_ADDR_VAR 0 4
41508: PUSH
41509: DOUBLE
41510: LD_INT 16
41512: DEC
41513: ST_TO_ADDR
41514: LD_INT 25
41516: PUSH
41517: FOR_TO
41518: IFFALSE 41591
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_VAR 0 3
41529: PUSH
41530: LD_INT 22
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 255
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 91
41549: PUSH
41550: LD_VAR 0 1
41554: PUSH
41555: LD_INT 6
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 30
41565: PUSH
41566: LD_VAR 0 4
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: PPUSH
41583: CALL_OW 69
41587: ADD
41588: ST_TO_ADDR
41589: GO 41517
41591: POP
41592: POP
// for i = 1 to tmp do
41593: LD_ADDR_VAR 0 4
41597: PUSH
41598: DOUBLE
41599: LD_INT 1
41601: DEC
41602: ST_TO_ADDR
41603: LD_VAR 0 3
41607: PUSH
41608: FOR_TO
41609: IFFALSE 41697
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41611: LD_ADDR_VAR 0 5
41615: PUSH
41616: LD_VAR 0 5
41620: PUSH
41621: LD_VAR 0 3
41625: PUSH
41626: LD_VAR 0 4
41630: ARRAY
41631: PPUSH
41632: CALL_OW 266
41636: PUSH
41637: LD_VAR 0 3
41641: PUSH
41642: LD_VAR 0 4
41646: ARRAY
41647: PPUSH
41648: CALL_OW 250
41652: PUSH
41653: LD_VAR 0 3
41657: PUSH
41658: LD_VAR 0 4
41662: ARRAY
41663: PPUSH
41664: CALL_OW 251
41668: PUSH
41669: LD_VAR 0 3
41673: PUSH
41674: LD_VAR 0 4
41678: ARRAY
41679: PPUSH
41680: CALL_OW 254
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: ADD
41694: ST_TO_ADDR
41695: GO 41608
41697: POP
41698: POP
// result := list ;
41699: LD_ADDR_VAR 0 2
41703: PUSH
41704: LD_VAR 0 5
41708: ST_TO_ADDR
// end ;
41709: LD_VAR 0 2
41713: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41714: LD_INT 0
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
// if not factory then
41723: LD_VAR 0 1
41727: NOT
41728: IFFALSE 41732
// exit ;
41730: GO 42325
// if control = control_apeman then
41732: LD_VAR 0 4
41736: PUSH
41737: LD_INT 5
41739: EQUAL
41740: IFFALSE 41849
// begin tmp := UnitsInside ( factory ) ;
41742: LD_ADDR_VAR 0 8
41746: PUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 313
41756: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41757: LD_VAR 0 8
41761: PPUSH
41762: LD_INT 25
41764: PUSH
41765: LD_INT 12
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PPUSH
41772: CALL_OW 72
41776: NOT
41777: IFFALSE 41787
// control := control_manual ;
41779: LD_ADDR_VAR 0 4
41783: PUSH
41784: LD_INT 1
41786: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41787: LD_ADDR_VAR 0 8
41791: PUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: CALL 41484 0 1
41801: ST_TO_ADDR
// if tmp then
41802: LD_VAR 0 8
41806: IFFALSE 41849
// begin for i in tmp do
41808: LD_ADDR_VAR 0 7
41812: PUSH
41813: LD_VAR 0 8
41817: PUSH
41818: FOR_IN
41819: IFFALSE 41847
// if i [ 1 ] = b_ext_radio then
41821: LD_VAR 0 7
41825: PUSH
41826: LD_INT 1
41828: ARRAY
41829: PUSH
41830: LD_INT 22
41832: EQUAL
41833: IFFALSE 41845
// begin control := control_remote ;
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: LD_INT 2
41842: ST_TO_ADDR
// break ;
41843: GO 41847
// end ;
41845: GO 41818
41847: POP
41848: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41849: LD_VAR 0 1
41853: PPUSH
41854: LD_VAR 0 2
41858: PPUSH
41859: LD_VAR 0 3
41863: PPUSH
41864: LD_VAR 0 4
41868: PPUSH
41869: LD_VAR 0 5
41873: PPUSH
41874: CALL_OW 448
41878: IFFALSE 41913
// begin result := [ chassis , engine , control , weapon ] ;
41880: LD_ADDR_VAR 0 6
41884: PUSH
41885: LD_VAR 0 2
41889: PUSH
41890: LD_VAR 0 3
41894: PUSH
41895: LD_VAR 0 4
41899: PUSH
41900: LD_VAR 0 5
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
// exit ;
41911: GO 42325
// end ; _chassis := AvailableChassisList ( factory ) ;
41913: LD_ADDR_VAR 0 9
41917: PUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 475
41927: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41928: LD_ADDR_VAR 0 11
41932: PUSH
41933: LD_VAR 0 1
41937: PPUSH
41938: CALL_OW 476
41942: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41943: LD_ADDR_VAR 0 12
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 477
41957: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41958: LD_ADDR_VAR 0 10
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: CALL_OW 478
41972: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41973: LD_VAR 0 9
41977: NOT
41978: PUSH
41979: LD_VAR 0 11
41983: NOT
41984: OR
41985: PUSH
41986: LD_VAR 0 12
41990: NOT
41991: OR
41992: PUSH
41993: LD_VAR 0 10
41997: NOT
41998: OR
41999: IFFALSE 42034
// begin result := [ chassis , engine , control , weapon ] ;
42001: LD_ADDR_VAR 0 6
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_VAR 0 3
42015: PUSH
42016: LD_VAR 0 4
42020: PUSH
42021: LD_VAR 0 5
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// exit ;
42032: GO 42325
// end ; if not chassis in _chassis then
42034: LD_VAR 0 2
42038: PUSH
42039: LD_VAR 0 9
42043: IN
42044: NOT
42045: IFFALSE 42071
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42047: LD_ADDR_VAR 0 2
42051: PUSH
42052: LD_VAR 0 9
42056: PUSH
42057: LD_INT 1
42059: PPUSH
42060: LD_VAR 0 9
42064: PPUSH
42065: CALL_OW 12
42069: ARRAY
42070: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42071: LD_VAR 0 2
42075: PPUSH
42076: LD_VAR 0 3
42080: PPUSH
42081: CALL 42330 0 2
42085: NOT
42086: IFFALSE 42145
// repeat engine := _engine [ 1 ] ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_VAR 0 11
42097: PUSH
42098: LD_INT 1
42100: ARRAY
42101: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42102: LD_ADDR_VAR 0 11
42106: PUSH
42107: LD_VAR 0 11
42111: PPUSH
42112: LD_INT 1
42114: PPUSH
42115: CALL_OW 3
42119: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42120: LD_VAR 0 2
42124: PPUSH
42125: LD_VAR 0 3
42129: PPUSH
42130: CALL 42330 0 2
42134: PUSH
42135: LD_VAR 0 11
42139: PUSH
42140: EMPTY
42141: EQUAL
42142: OR
42143: IFFALSE 42088
// if not control in _control then
42145: LD_VAR 0 4
42149: PUSH
42150: LD_VAR 0 12
42154: IN
42155: NOT
42156: IFFALSE 42182
// control := _control [ rand ( 1 , _control ) ] ;
42158: LD_ADDR_VAR 0 4
42162: PUSH
42163: LD_VAR 0 12
42167: PUSH
42168: LD_INT 1
42170: PPUSH
42171: LD_VAR 0 12
42175: PPUSH
42176: CALL_OW 12
42180: ARRAY
42181: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42182: LD_VAR 0 2
42186: PPUSH
42187: LD_VAR 0 5
42191: PPUSH
42192: CALL 42550 0 2
42196: NOT
42197: IFFALSE 42256
// repeat weapon := _weapon [ 1 ] ;
42199: LD_ADDR_VAR 0 5
42203: PUSH
42204: LD_VAR 0 10
42208: PUSH
42209: LD_INT 1
42211: ARRAY
42212: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42213: LD_ADDR_VAR 0 10
42217: PUSH
42218: LD_VAR 0 10
42222: PPUSH
42223: LD_INT 1
42225: PPUSH
42226: CALL_OW 3
42230: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42231: LD_VAR 0 2
42235: PPUSH
42236: LD_VAR 0 5
42240: PPUSH
42241: CALL 42550 0 2
42245: PUSH
42246: LD_VAR 0 10
42250: PUSH
42251: EMPTY
42252: EQUAL
42253: OR
42254: IFFALSE 42199
// result := [ ] ;
42256: LD_ADDR_VAR 0 6
42260: PUSH
42261: EMPTY
42262: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42263: LD_VAR 0 1
42267: PPUSH
42268: LD_VAR 0 2
42272: PPUSH
42273: LD_VAR 0 3
42277: PPUSH
42278: LD_VAR 0 4
42282: PPUSH
42283: LD_VAR 0 5
42287: PPUSH
42288: CALL_OW 448
42292: IFFALSE 42325
// result := [ chassis , engine , control , weapon ] ;
42294: LD_ADDR_VAR 0 6
42298: PUSH
42299: LD_VAR 0 2
42303: PUSH
42304: LD_VAR 0 3
42308: PUSH
42309: LD_VAR 0 4
42313: PUSH
42314: LD_VAR 0 5
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// end ;
42325: LD_VAR 0 6
42329: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42330: LD_INT 0
42332: PPUSH
// if not chassis or not engine then
42333: LD_VAR 0 1
42337: NOT
42338: PUSH
42339: LD_VAR 0 2
42343: NOT
42344: OR
42345: IFFALSE 42349
// exit ;
42347: GO 42545
// case engine of engine_solar :
42349: LD_VAR 0 2
42353: PUSH
42354: LD_INT 2
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42400
42362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 11
42370: PUSH
42371: LD_INT 12
42373: PUSH
42374: LD_INT 13
42376: PUSH
42377: LD_INT 14
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: ST_TO_ADDR
42398: GO 42529
42400: LD_INT 1
42402: DOUBLE
42403: EQUAL
42404: IFTRUE 42408
42406: GO 42470
42408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_INT 11
42416: PUSH
42417: LD_INT 12
42419: PUSH
42420: LD_INT 13
42422: PUSH
42423: LD_INT 14
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: LD_INT 5
42440: PUSH
42441: LD_INT 21
42443: PUSH
42444: LD_INT 23
42446: PUSH
42447: LD_INT 22
42449: PUSH
42450: LD_INT 24
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
42468: GO 42529
42470: LD_INT 3
42472: DOUBLE
42473: EQUAL
42474: IFTRUE 42478
42476: GO 42528
42478: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42479: LD_ADDR_VAR 0 3
42483: PUSH
42484: LD_INT 13
42486: PUSH
42487: LD_INT 14
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 4
42498: PUSH
42499: LD_INT 5
42501: PUSH
42502: LD_INT 21
42504: PUSH
42505: LD_INT 22
42507: PUSH
42508: LD_INT 23
42510: PUSH
42511: LD_INT 24
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
42526: GO 42529
42528: POP
// result := ( chassis in result ) ;
42529: LD_ADDR_VAR 0 3
42533: PUSH
42534: LD_VAR 0 1
42538: PUSH
42539: LD_VAR 0 3
42543: IN
42544: ST_TO_ADDR
// end ;
42545: LD_VAR 0 3
42549: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42550: LD_INT 0
42552: PPUSH
// if not chassis or not weapon then
42553: LD_VAR 0 1
42557: NOT
42558: PUSH
42559: LD_VAR 0 2
42563: NOT
42564: OR
42565: IFFALSE 42569
// exit ;
42567: GO 43631
// case weapon of us_machine_gun :
42569: LD_VAR 0 2
42573: PUSH
42574: LD_INT 2
42576: DOUBLE
42577: EQUAL
42578: IFTRUE 42582
42580: GO 42612
42582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42583: LD_ADDR_VAR 0 3
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: LD_INT 5
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
42610: GO 43615
42612: LD_INT 3
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42620
42618: GO 42650
42620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: LD_INT 4
42637: PUSH
42638: LD_INT 5
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: ST_TO_ADDR
42648: GO 43615
42650: LD_INT 11
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42658
42656: GO 42688
42658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 4
42675: PUSH
42676: LD_INT 5
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 43615
42688: LD_INT 4
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42722
42696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: LD_INT 5
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
42720: GO 43615
42722: LD_INT 5
42724: DOUBLE
42725: EQUAL
42726: IFTRUE 42730
42728: GO 42756
42730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42731: LD_ADDR_VAR 0 3
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: LD_INT 4
42744: PUSH
42745: LD_INT 5
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: ST_TO_ADDR
42754: GO 43615
42756: LD_INT 9
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42790
42764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 4
42778: PUSH
42779: LD_INT 5
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
42788: GO 43615
42790: LD_INT 7
42792: DOUBLE
42793: EQUAL
42794: IFTRUE 42798
42796: GO 42824
42798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 4
42812: PUSH
42813: LD_INT 5
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
42822: GO 43615
42824: LD_INT 12
42826: DOUBLE
42827: EQUAL
42828: IFTRUE 42832
42830: GO 42858
42832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 3
42843: PUSH
42844: LD_INT 4
42846: PUSH
42847: LD_INT 5
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
42856: GO 43615
42858: LD_INT 13
42860: DOUBLE
42861: EQUAL
42862: IFTRUE 42866
42864: GO 42892
42866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42867: LD_ADDR_VAR 0 3
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 4
42880: PUSH
42881: LD_INT 5
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
42890: GO 43615
42892: LD_INT 14
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42900
42898: GO 42918
42900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: LD_INT 5
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: ST_TO_ADDR
42916: GO 43615
42918: LD_INT 6
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42944
42926: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42927: LD_ADDR_VAR 0 3
42931: PUSH
42932: LD_INT 4
42934: PUSH
42935: LD_INT 5
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: ST_TO_ADDR
42942: GO 43615
42944: LD_INT 10
42946: DOUBLE
42947: EQUAL
42948: IFTRUE 42952
42950: GO 42970
42952: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: LD_INT 4
42960: PUSH
42961: LD_INT 5
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: ST_TO_ADDR
42968: GO 43615
42970: LD_INT 22
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42978
42976: GO 43004
42978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_INT 11
42986: PUSH
42987: LD_INT 12
42989: PUSH
42990: LD_INT 13
42992: PUSH
42993: LD_INT 14
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
43002: GO 43615
43004: LD_INT 23
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43038
43012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 11
43020: PUSH
43021: LD_INT 12
43023: PUSH
43024: LD_INT 13
43026: PUSH
43027: LD_INT 14
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
43036: GO 43615
43038: LD_INT 24
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43072
43046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 11
43054: PUSH
43055: LD_INT 12
43057: PUSH
43058: LD_INT 13
43060: PUSH
43061: LD_INT 14
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
43070: GO 43615
43072: LD_INT 30
43074: DOUBLE
43075: EQUAL
43076: IFTRUE 43080
43078: GO 43106
43080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_INT 11
43088: PUSH
43089: LD_INT 12
43091: PUSH
43092: LD_INT 13
43094: PUSH
43095: LD_INT 14
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
43104: GO 43615
43106: LD_INT 25
43108: DOUBLE
43109: EQUAL
43110: IFTRUE 43114
43112: GO 43132
43114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 13
43122: PUSH
43123: LD_INT 14
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: ST_TO_ADDR
43130: GO 43615
43132: LD_INT 27
43134: DOUBLE
43135: EQUAL
43136: IFTRUE 43140
43138: GO 43158
43140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43141: LD_ADDR_VAR 0 3
43145: PUSH
43146: LD_INT 13
43148: PUSH
43149: LD_INT 14
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: ST_TO_ADDR
43156: GO 43615
43158: LD_EXP 54
43162: DOUBLE
43163: EQUAL
43164: IFTRUE 43168
43166: GO 43194
43168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_INT 11
43176: PUSH
43177: LD_INT 12
43179: PUSH
43180: LD_INT 13
43182: PUSH
43183: LD_INT 14
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
43192: GO 43615
43194: LD_INT 28
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43220
43202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_INT 13
43210: PUSH
43211: LD_INT 14
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: ST_TO_ADDR
43218: GO 43615
43220: LD_INT 29
43222: DOUBLE
43223: EQUAL
43224: IFTRUE 43228
43226: GO 43246
43228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43229: LD_ADDR_VAR 0 3
43233: PUSH
43234: LD_INT 13
43236: PUSH
43237: LD_INT 14
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: ST_TO_ADDR
43244: GO 43615
43246: LD_INT 31
43248: DOUBLE
43249: EQUAL
43250: IFTRUE 43254
43252: GO 43272
43254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_INT 13
43262: PUSH
43263: LD_INT 14
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: ST_TO_ADDR
43270: GO 43615
43272: LD_INT 26
43274: DOUBLE
43275: EQUAL
43276: IFTRUE 43280
43278: GO 43298
43280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: LD_INT 13
43288: PUSH
43289: LD_INT 14
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: ST_TO_ADDR
43296: GO 43615
43298: LD_INT 42
43300: DOUBLE
43301: EQUAL
43302: IFTRUE 43306
43304: GO 43332
43306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43307: LD_ADDR_VAR 0 3
43311: PUSH
43312: LD_INT 21
43314: PUSH
43315: LD_INT 22
43317: PUSH
43318: LD_INT 23
43320: PUSH
43321: LD_INT 24
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
43330: GO 43615
43332: LD_INT 43
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43340
43338: GO 43366
43340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 21
43348: PUSH
43349: LD_INT 22
43351: PUSH
43352: LD_INT 23
43354: PUSH
43355: LD_INT 24
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 43615
43366: LD_INT 44
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43400
43374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 21
43382: PUSH
43383: LD_INT 22
43385: PUSH
43386: LD_INT 23
43388: PUSH
43389: LD_INT 24
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
43398: GO 43615
43400: LD_INT 45
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43434
43408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_INT 21
43416: PUSH
43417: LD_INT 22
43419: PUSH
43420: LD_INT 23
43422: PUSH
43423: LD_INT 24
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
43432: GO 43615
43434: LD_INT 49
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43468
43442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 21
43450: PUSH
43451: LD_INT 22
43453: PUSH
43454: LD_INT 23
43456: PUSH
43457: LD_INT 24
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
43466: GO 43615
43468: LD_INT 51
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43502
43476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_INT 21
43484: PUSH
43485: LD_INT 22
43487: PUSH
43488: LD_INT 23
43490: PUSH
43491: LD_INT 24
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
43500: GO 43615
43502: LD_INT 52
43504: DOUBLE
43505: EQUAL
43506: IFTRUE 43510
43508: GO 43536
43510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43511: LD_ADDR_VAR 0 3
43515: PUSH
43516: LD_INT 21
43518: PUSH
43519: LD_INT 22
43521: PUSH
43522: LD_INT 23
43524: PUSH
43525: LD_INT 24
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
43534: GO 43615
43536: LD_INT 53
43538: DOUBLE
43539: EQUAL
43540: IFTRUE 43544
43542: GO 43562
43544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_INT 23
43552: PUSH
43553: LD_INT 24
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: ST_TO_ADDR
43560: GO 43615
43562: LD_INT 46
43564: DOUBLE
43565: EQUAL
43566: IFTRUE 43570
43568: GO 43588
43570: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_INT 23
43578: PUSH
43579: LD_INT 24
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: ST_TO_ADDR
43586: GO 43615
43588: LD_INT 47
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43614
43596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 23
43604: PUSH
43605: LD_INT 24
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: ST_TO_ADDR
43612: GO 43615
43614: POP
// result := ( chassis in result ) ;
43615: LD_ADDR_VAR 0 3
43619: PUSH
43620: LD_VAR 0 1
43624: PUSH
43625: LD_VAR 0 3
43629: IN
43630: ST_TO_ADDR
// end ;
43631: LD_VAR 0 3
43635: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43636: LD_INT 0
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
// result := array ;
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: LD_VAR 0 1
43654: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43655: LD_VAR 0 1
43659: NOT
43660: PUSH
43661: LD_VAR 0 2
43665: NOT
43666: OR
43667: PUSH
43668: LD_VAR 0 3
43672: NOT
43673: OR
43674: PUSH
43675: LD_VAR 0 2
43679: PUSH
43680: LD_VAR 0 1
43684: GREATER
43685: OR
43686: PUSH
43687: LD_VAR 0 3
43691: PUSH
43692: LD_VAR 0 1
43696: GREATER
43697: OR
43698: IFFALSE 43702
// exit ;
43700: GO 43998
// if direction then
43702: LD_VAR 0 4
43706: IFFALSE 43770
// begin d := 1 ;
43708: LD_ADDR_VAR 0 9
43712: PUSH
43713: LD_INT 1
43715: ST_TO_ADDR
// if i_from > i_to then
43716: LD_VAR 0 2
43720: PUSH
43721: LD_VAR 0 3
43725: GREATER
43726: IFFALSE 43752
// length := ( array - i_from ) + i_to else
43728: LD_ADDR_VAR 0 11
43732: PUSH
43733: LD_VAR 0 1
43737: PUSH
43738: LD_VAR 0 2
43742: MINUS
43743: PUSH
43744: LD_VAR 0 3
43748: PLUS
43749: ST_TO_ADDR
43750: GO 43768
// length := i_to - i_from ;
43752: LD_ADDR_VAR 0 11
43756: PUSH
43757: LD_VAR 0 3
43761: PUSH
43762: LD_VAR 0 2
43766: MINUS
43767: ST_TO_ADDR
// end else
43768: GO 43831
// begin d := - 1 ;
43770: LD_ADDR_VAR 0 9
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: ST_TO_ADDR
// if i_from > i_to then
43779: LD_VAR 0 2
43783: PUSH
43784: LD_VAR 0 3
43788: GREATER
43789: IFFALSE 43809
// length := i_from - i_to else
43791: LD_ADDR_VAR 0 11
43795: PUSH
43796: LD_VAR 0 2
43800: PUSH
43801: LD_VAR 0 3
43805: MINUS
43806: ST_TO_ADDR
43807: GO 43831
// length := ( array - i_to ) + i_from ;
43809: LD_ADDR_VAR 0 11
43813: PUSH
43814: LD_VAR 0 1
43818: PUSH
43819: LD_VAR 0 3
43823: MINUS
43824: PUSH
43825: LD_VAR 0 2
43829: PLUS
43830: ST_TO_ADDR
// end ; if not length then
43831: LD_VAR 0 11
43835: NOT
43836: IFFALSE 43840
// exit ;
43838: GO 43998
// tmp := array ;
43840: LD_ADDR_VAR 0 10
43844: PUSH
43845: LD_VAR 0 1
43849: ST_TO_ADDR
// for i = 1 to length do
43850: LD_ADDR_VAR 0 6
43854: PUSH
43855: DOUBLE
43856: LD_INT 1
43858: DEC
43859: ST_TO_ADDR
43860: LD_VAR 0 11
43864: PUSH
43865: FOR_TO
43866: IFFALSE 43986
// begin for j = 1 to array do
43868: LD_ADDR_VAR 0 7
43872: PUSH
43873: DOUBLE
43874: LD_INT 1
43876: DEC
43877: ST_TO_ADDR
43878: LD_VAR 0 1
43882: PUSH
43883: FOR_TO
43884: IFFALSE 43972
// begin k := j + d ;
43886: LD_ADDR_VAR 0 8
43890: PUSH
43891: LD_VAR 0 7
43895: PUSH
43896: LD_VAR 0 9
43900: PLUS
43901: ST_TO_ADDR
// if k > array then
43902: LD_VAR 0 8
43906: PUSH
43907: LD_VAR 0 1
43911: GREATER
43912: IFFALSE 43922
// k := 1 ;
43914: LD_ADDR_VAR 0 8
43918: PUSH
43919: LD_INT 1
43921: ST_TO_ADDR
// if not k then
43922: LD_VAR 0 8
43926: NOT
43927: IFFALSE 43939
// k := array ;
43929: LD_ADDR_VAR 0 8
43933: PUSH
43934: LD_VAR 0 1
43938: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43939: LD_ADDR_VAR 0 10
43943: PUSH
43944: LD_VAR 0 10
43948: PPUSH
43949: LD_VAR 0 8
43953: PPUSH
43954: LD_VAR 0 1
43958: PUSH
43959: LD_VAR 0 7
43963: ARRAY
43964: PPUSH
43965: CALL_OW 1
43969: ST_TO_ADDR
// end ;
43970: GO 43883
43972: POP
43973: POP
// array := tmp ;
43974: LD_ADDR_VAR 0 1
43978: PUSH
43979: LD_VAR 0 10
43983: ST_TO_ADDR
// end ;
43984: GO 43865
43986: POP
43987: POP
// result := array ;
43988: LD_ADDR_VAR 0 5
43992: PUSH
43993: LD_VAR 0 1
43997: ST_TO_ADDR
// end ;
43998: LD_VAR 0 5
44002: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44003: LD_INT 0
44005: PPUSH
44006: PPUSH
// result := 0 ;
44007: LD_ADDR_VAR 0 3
44011: PUSH
44012: LD_INT 0
44014: ST_TO_ADDR
// if not array or not value in array then
44015: LD_VAR 0 1
44019: NOT
44020: PUSH
44021: LD_VAR 0 2
44025: PUSH
44026: LD_VAR 0 1
44030: IN
44031: NOT
44032: OR
44033: IFFALSE 44037
// exit ;
44035: GO 44091
// for i = 1 to array do
44037: LD_ADDR_VAR 0 4
44041: PUSH
44042: DOUBLE
44043: LD_INT 1
44045: DEC
44046: ST_TO_ADDR
44047: LD_VAR 0 1
44051: PUSH
44052: FOR_TO
44053: IFFALSE 44089
// if value = array [ i ] then
44055: LD_VAR 0 2
44059: PUSH
44060: LD_VAR 0 1
44064: PUSH
44065: LD_VAR 0 4
44069: ARRAY
44070: EQUAL
44071: IFFALSE 44087
// begin result := i ;
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_VAR 0 4
44082: ST_TO_ADDR
// exit ;
44083: POP
44084: POP
44085: GO 44091
// end ;
44087: GO 44052
44089: POP
44090: POP
// end ;
44091: LD_VAR 0 3
44095: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44096: LD_INT 0
44098: PPUSH
// vc_chassis := chassis ;
44099: LD_ADDR_OWVAR 37
44103: PUSH
44104: LD_VAR 0 1
44108: ST_TO_ADDR
// vc_engine := engine ;
44109: LD_ADDR_OWVAR 39
44113: PUSH
44114: LD_VAR 0 2
44118: ST_TO_ADDR
// vc_control := control ;
44119: LD_ADDR_OWVAR 38
44123: PUSH
44124: LD_VAR 0 3
44128: ST_TO_ADDR
// vc_weapon := weapon ;
44129: LD_ADDR_OWVAR 40
44133: PUSH
44134: LD_VAR 0 4
44138: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44139: LD_ADDR_OWVAR 41
44143: PUSH
44144: LD_VAR 0 5
44148: ST_TO_ADDR
// end ;
44149: LD_VAR 0 6
44153: RET
// export function WantPlant ( unit ) ; var task ; begin
44154: LD_INT 0
44156: PPUSH
44157: PPUSH
// result := false ;
44158: LD_ADDR_VAR 0 2
44162: PUSH
44163: LD_INT 0
44165: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 437
44180: ST_TO_ADDR
// if task then
44181: LD_VAR 0 3
44185: IFFALSE 44213
// if task [ 1 ] [ 1 ] = p then
44187: LD_VAR 0 3
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: PUSH
44200: LD_STRING p
44202: EQUAL
44203: IFFALSE 44213
// result := true ;
44205: LD_ADDR_VAR 0 2
44209: PUSH
44210: LD_INT 1
44212: ST_TO_ADDR
// end ;
44213: LD_VAR 0 2
44217: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44218: LD_INT 0
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
// if pos < 1 then
44224: LD_VAR 0 2
44228: PUSH
44229: LD_INT 1
44231: LESS
44232: IFFALSE 44236
// exit ;
44234: GO 44539
// if pos = 1 then
44236: LD_VAR 0 2
44240: PUSH
44241: LD_INT 1
44243: EQUAL
44244: IFFALSE 44277
// result := Replace ( arr , pos [ 1 ] , value ) else
44246: LD_ADDR_VAR 0 4
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: LD_VAR 0 2
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PPUSH
44265: LD_VAR 0 3
44269: PPUSH
44270: CALL_OW 1
44274: ST_TO_ADDR
44275: GO 44539
// begin tmp := arr ;
44277: LD_ADDR_VAR 0 6
44281: PUSH
44282: LD_VAR 0 1
44286: ST_TO_ADDR
// s_arr := [ tmp ] ;
44287: LD_ADDR_VAR 0 7
44291: PUSH
44292: LD_VAR 0 6
44296: PUSH
44297: EMPTY
44298: LIST
44299: ST_TO_ADDR
// for i = 1 to pos - 1 do
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: DOUBLE
44306: LD_INT 1
44308: DEC
44309: ST_TO_ADDR
44310: LD_VAR 0 2
44314: PUSH
44315: LD_INT 1
44317: MINUS
44318: PUSH
44319: FOR_TO
44320: IFFALSE 44365
// begin tmp := tmp [ pos [ i ] ] ;
44322: LD_ADDR_VAR 0 6
44326: PUSH
44327: LD_VAR 0 6
44331: PUSH
44332: LD_VAR 0 2
44336: PUSH
44337: LD_VAR 0 5
44341: ARRAY
44342: ARRAY
44343: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44344: LD_ADDR_VAR 0 7
44348: PUSH
44349: LD_VAR 0 7
44353: PUSH
44354: LD_VAR 0 6
44358: PUSH
44359: EMPTY
44360: LIST
44361: ADD
44362: ST_TO_ADDR
// end ;
44363: GO 44319
44365: POP
44366: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44367: LD_ADDR_VAR 0 6
44371: PUSH
44372: LD_VAR 0 6
44376: PPUSH
44377: LD_VAR 0 2
44381: PUSH
44382: LD_VAR 0 2
44386: ARRAY
44387: PPUSH
44388: LD_VAR 0 3
44392: PPUSH
44393: CALL_OW 1
44397: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44398: LD_ADDR_VAR 0 7
44402: PUSH
44403: LD_VAR 0 7
44407: PPUSH
44408: LD_VAR 0 7
44412: PPUSH
44413: LD_VAR 0 6
44417: PPUSH
44418: CALL_OW 1
44422: ST_TO_ADDR
// for i = s_arr downto 2 do
44423: LD_ADDR_VAR 0 5
44427: PUSH
44428: DOUBLE
44429: LD_VAR 0 7
44433: INC
44434: ST_TO_ADDR
44435: LD_INT 2
44437: PUSH
44438: FOR_DOWNTO
44439: IFFALSE 44523
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44441: LD_ADDR_VAR 0 6
44445: PUSH
44446: LD_VAR 0 7
44450: PUSH
44451: LD_VAR 0 5
44455: PUSH
44456: LD_INT 1
44458: MINUS
44459: ARRAY
44460: PPUSH
44461: LD_VAR 0 2
44465: PUSH
44466: LD_VAR 0 5
44470: PUSH
44471: LD_INT 1
44473: MINUS
44474: ARRAY
44475: PPUSH
44476: LD_VAR 0 7
44480: PUSH
44481: LD_VAR 0 5
44485: ARRAY
44486: PPUSH
44487: CALL_OW 1
44491: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44492: LD_ADDR_VAR 0 7
44496: PUSH
44497: LD_VAR 0 7
44501: PPUSH
44502: LD_VAR 0 5
44506: PUSH
44507: LD_INT 1
44509: MINUS
44510: PPUSH
44511: LD_VAR 0 6
44515: PPUSH
44516: CALL_OW 1
44520: ST_TO_ADDR
// end ;
44521: GO 44438
44523: POP
44524: POP
// result := s_arr [ 1 ] ;
44525: LD_ADDR_VAR 0 4
44529: PUSH
44530: LD_VAR 0 7
44534: PUSH
44535: LD_INT 1
44537: ARRAY
44538: ST_TO_ADDR
// end ; end ;
44539: LD_VAR 0 4
44543: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44544: LD_INT 0
44546: PPUSH
44547: PPUSH
// if not list then
44548: LD_VAR 0 1
44552: NOT
44553: IFFALSE 44557
// exit ;
44555: GO 44648
// i := list [ pos1 ] ;
44557: LD_ADDR_VAR 0 5
44561: PUSH
44562: LD_VAR 0 1
44566: PUSH
44567: LD_VAR 0 2
44571: ARRAY
44572: ST_TO_ADDR
// if not i then
44573: LD_VAR 0 5
44577: NOT
44578: IFFALSE 44582
// exit ;
44580: GO 44648
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44582: LD_ADDR_VAR 0 1
44586: PUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: LD_VAR 0 2
44596: PPUSH
44597: LD_VAR 0 1
44601: PUSH
44602: LD_VAR 0 3
44606: ARRAY
44607: PPUSH
44608: CALL_OW 1
44612: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44613: LD_ADDR_VAR 0 1
44617: PUSH
44618: LD_VAR 0 1
44622: PPUSH
44623: LD_VAR 0 3
44627: PPUSH
44628: LD_VAR 0 5
44632: PPUSH
44633: CALL_OW 1
44637: ST_TO_ADDR
// result := list ;
44638: LD_ADDR_VAR 0 4
44642: PUSH
44643: LD_VAR 0 1
44647: ST_TO_ADDR
// end ;
44648: LD_VAR 0 4
44652: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44653: LD_INT 0
44655: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44656: LD_ADDR_VAR 0 5
44660: PUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 250
44670: PPUSH
44671: LD_VAR 0 1
44675: PPUSH
44676: CALL_OW 251
44680: PPUSH
44681: LD_VAR 0 2
44685: PPUSH
44686: LD_VAR 0 3
44690: PPUSH
44691: LD_VAR 0 4
44695: PPUSH
44696: CALL 44706 0 5
44700: ST_TO_ADDR
// end ;
44701: LD_VAR 0 5
44705: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44706: LD_INT 0
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
// if not list then
44712: LD_VAR 0 3
44716: NOT
44717: IFFALSE 44721
// exit ;
44719: GO 45109
// result := [ ] ;
44721: LD_ADDR_VAR 0 6
44725: PUSH
44726: EMPTY
44727: ST_TO_ADDR
// for i in list do
44728: LD_ADDR_VAR 0 7
44732: PUSH
44733: LD_VAR 0 3
44737: PUSH
44738: FOR_IN
44739: IFFALSE 44941
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_VAR 0 7
44750: PPUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: LD_VAR 0 2
44760: PPUSH
44761: CALL_OW 297
44765: ST_TO_ADDR
// if not result then
44766: LD_VAR 0 6
44770: NOT
44771: IFFALSE 44797
// result := [ [ i , tmp ] ] else
44773: LD_ADDR_VAR 0 6
44777: PUSH
44778: LD_VAR 0 7
44782: PUSH
44783: LD_VAR 0 9
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: ST_TO_ADDR
44795: GO 44939
// begin if result [ result ] [ 2 ] < tmp then
44797: LD_VAR 0 6
44801: PUSH
44802: LD_VAR 0 6
44806: ARRAY
44807: PUSH
44808: LD_INT 2
44810: ARRAY
44811: PUSH
44812: LD_VAR 0 9
44816: LESS
44817: IFFALSE 44859
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44819: LD_ADDR_VAR 0 6
44823: PUSH
44824: LD_VAR 0 6
44828: PPUSH
44829: LD_VAR 0 6
44833: PUSH
44834: LD_INT 1
44836: PLUS
44837: PPUSH
44838: LD_VAR 0 7
44842: PUSH
44843: LD_VAR 0 9
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PPUSH
44852: CALL_OW 2
44856: ST_TO_ADDR
44857: GO 44939
// for j = 1 to result do
44859: LD_ADDR_VAR 0 8
44863: PUSH
44864: DOUBLE
44865: LD_INT 1
44867: DEC
44868: ST_TO_ADDR
44869: LD_VAR 0 6
44873: PUSH
44874: FOR_TO
44875: IFFALSE 44937
// begin if tmp < result [ j ] [ 2 ] then
44877: LD_VAR 0 9
44881: PUSH
44882: LD_VAR 0 6
44886: PUSH
44887: LD_VAR 0 8
44891: ARRAY
44892: PUSH
44893: LD_INT 2
44895: ARRAY
44896: LESS
44897: IFFALSE 44935
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44899: LD_ADDR_VAR 0 6
44903: PUSH
44904: LD_VAR 0 6
44908: PPUSH
44909: LD_VAR 0 8
44913: PPUSH
44914: LD_VAR 0 7
44918: PUSH
44919: LD_VAR 0 9
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PPUSH
44928: CALL_OW 2
44932: ST_TO_ADDR
// break ;
44933: GO 44937
// end ; end ;
44935: GO 44874
44937: POP
44938: POP
// end ; end ;
44939: GO 44738
44941: POP
44942: POP
// if result and not asc then
44943: LD_VAR 0 6
44947: PUSH
44948: LD_VAR 0 4
44952: NOT
44953: AND
44954: IFFALSE 45029
// begin tmp := result ;
44956: LD_ADDR_VAR 0 9
44960: PUSH
44961: LD_VAR 0 6
44965: ST_TO_ADDR
// for i = tmp downto 1 do
44966: LD_ADDR_VAR 0 7
44970: PUSH
44971: DOUBLE
44972: LD_VAR 0 9
44976: INC
44977: ST_TO_ADDR
44978: LD_INT 1
44980: PUSH
44981: FOR_DOWNTO
44982: IFFALSE 45027
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44984: LD_ADDR_VAR 0 6
44988: PUSH
44989: LD_VAR 0 6
44993: PPUSH
44994: LD_VAR 0 9
44998: PUSH
44999: LD_VAR 0 7
45003: MINUS
45004: PUSH
45005: LD_INT 1
45007: PLUS
45008: PPUSH
45009: LD_VAR 0 9
45013: PUSH
45014: LD_VAR 0 7
45018: ARRAY
45019: PPUSH
45020: CALL_OW 1
45024: ST_TO_ADDR
45025: GO 44981
45027: POP
45028: POP
// end ; tmp := [ ] ;
45029: LD_ADDR_VAR 0 9
45033: PUSH
45034: EMPTY
45035: ST_TO_ADDR
// if mode then
45036: LD_VAR 0 5
45040: IFFALSE 45109
// begin for i = 1 to result do
45042: LD_ADDR_VAR 0 7
45046: PUSH
45047: DOUBLE
45048: LD_INT 1
45050: DEC
45051: ST_TO_ADDR
45052: LD_VAR 0 6
45056: PUSH
45057: FOR_TO
45058: IFFALSE 45097
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45060: LD_ADDR_VAR 0 9
45064: PUSH
45065: LD_VAR 0 9
45069: PPUSH
45070: LD_VAR 0 7
45074: PPUSH
45075: LD_VAR 0 6
45079: PUSH
45080: LD_VAR 0 7
45084: ARRAY
45085: PUSH
45086: LD_INT 1
45088: ARRAY
45089: PPUSH
45090: CALL_OW 1
45094: ST_TO_ADDR
45095: GO 45057
45097: POP
45098: POP
// result := tmp ;
45099: LD_ADDR_VAR 0 6
45103: PUSH
45104: LD_VAR 0 9
45108: ST_TO_ADDR
// end ; end ;
45109: LD_VAR 0 6
45113: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45114: LD_INT 0
45116: PPUSH
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45122: LD_ADDR_VAR 0 5
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// if not x or not y then
45144: LD_VAR 0 2
45148: NOT
45149: PUSH
45150: LD_VAR 0 3
45154: NOT
45155: OR
45156: IFFALSE 45160
// exit ;
45158: GO 46812
// if not range then
45160: LD_VAR 0 4
45164: NOT
45165: IFFALSE 45175
// range := 10 ;
45167: LD_ADDR_VAR 0 4
45171: PUSH
45172: LD_INT 10
45174: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45175: LD_ADDR_VAR 0 8
45179: PUSH
45180: LD_INT 81
45182: PUSH
45183: LD_VAR 0 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 92
45194: PUSH
45195: LD_VAR 0 2
45199: PUSH
45200: LD_VAR 0 3
45204: PUSH
45205: LD_VAR 0 4
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 21
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: PPUSH
45238: CALL_OW 69
45242: ST_TO_ADDR
// if not tmp then
45243: LD_VAR 0 8
45247: NOT
45248: IFFALSE 45252
// exit ;
45250: GO 46812
// for i in tmp do
45252: LD_ADDR_VAR 0 6
45256: PUSH
45257: LD_VAR 0 8
45261: PUSH
45262: FOR_IN
45263: IFFALSE 46787
// begin points := [ 0 , 0 , 0 ] ;
45265: LD_ADDR_VAR 0 9
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// bpoints := 1 ;
45284: LD_ADDR_VAR 0 10
45288: PUSH
45289: LD_INT 1
45291: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45292: LD_VAR 0 6
45296: PPUSH
45297: CALL_OW 247
45301: PUSH
45302: LD_INT 1
45304: DOUBLE
45305: EQUAL
45306: IFTRUE 45310
45308: GO 45888
45310: POP
// begin if GetClass ( i ) = 1 then
45311: LD_VAR 0 6
45315: PPUSH
45316: CALL_OW 257
45320: PUSH
45321: LD_INT 1
45323: EQUAL
45324: IFFALSE 45345
// points := [ 10 , 5 , 3 ] ;
45326: LD_ADDR_VAR 0 9
45330: PUSH
45331: LD_INT 10
45333: PUSH
45334: LD_INT 5
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45345: LD_VAR 0 6
45349: PPUSH
45350: CALL_OW 257
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 4
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: IN
45369: IFFALSE 45390
// points := [ 3 , 2 , 1 ] ;
45371: LD_ADDR_VAR 0 9
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45390: LD_VAR 0 6
45394: PPUSH
45395: CALL_OW 257
45399: PUSH
45400: LD_INT 5
45402: EQUAL
45403: IFFALSE 45424
// points := [ 130 , 5 , 2 ] ;
45405: LD_ADDR_VAR 0 9
45409: PUSH
45410: LD_INT 130
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45424: LD_VAR 0 6
45428: PPUSH
45429: CALL_OW 257
45433: PUSH
45434: LD_INT 8
45436: EQUAL
45437: IFFALSE 45458
// points := [ 35 , 35 , 30 ] ;
45439: LD_ADDR_VAR 0 9
45443: PUSH
45444: LD_INT 35
45446: PUSH
45447: LD_INT 35
45449: PUSH
45450: LD_INT 30
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45458: LD_VAR 0 6
45462: PPUSH
45463: CALL_OW 257
45467: PUSH
45468: LD_INT 9
45470: EQUAL
45471: IFFALSE 45492
// points := [ 20 , 55 , 40 ] ;
45473: LD_ADDR_VAR 0 9
45477: PUSH
45478: LD_INT 20
45480: PUSH
45481: LD_INT 55
45483: PUSH
45484: LD_INT 40
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45492: LD_VAR 0 6
45496: PPUSH
45497: CALL_OW 257
45501: PUSH
45502: LD_INT 12
45504: PUSH
45505: LD_INT 16
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: IN
45512: IFFALSE 45533
// points := [ 5 , 3 , 2 ] ;
45514: LD_ADDR_VAR 0 9
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45533: LD_VAR 0 6
45537: PPUSH
45538: CALL_OW 257
45542: PUSH
45543: LD_INT 17
45545: EQUAL
45546: IFFALSE 45567
// points := [ 100 , 50 , 75 ] ;
45548: LD_ADDR_VAR 0 9
45552: PUSH
45553: LD_INT 100
45555: PUSH
45556: LD_INT 50
45558: PUSH
45559: LD_INT 75
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45567: LD_VAR 0 6
45571: PPUSH
45572: CALL_OW 257
45576: PUSH
45577: LD_INT 15
45579: EQUAL
45580: IFFALSE 45601
// points := [ 10 , 5 , 3 ] ;
45582: LD_ADDR_VAR 0 9
45586: PUSH
45587: LD_INT 10
45589: PUSH
45590: LD_INT 5
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45601: LD_VAR 0 6
45605: PPUSH
45606: CALL_OW 257
45610: PUSH
45611: LD_INT 14
45613: EQUAL
45614: IFFALSE 45635
// points := [ 10 , 0 , 0 ] ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: LD_INT 10
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45635: LD_VAR 0 6
45639: PPUSH
45640: CALL_OW 257
45644: PUSH
45645: LD_INT 11
45647: EQUAL
45648: IFFALSE 45669
// points := [ 30 , 10 , 5 ] ;
45650: LD_ADDR_VAR 0 9
45654: PUSH
45655: LD_INT 30
45657: PUSH
45658: LD_INT 10
45660: PUSH
45661: LD_INT 5
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45669: LD_VAR 0 1
45673: PPUSH
45674: LD_INT 5
45676: PPUSH
45677: CALL_OW 321
45681: PUSH
45682: LD_INT 2
45684: EQUAL
45685: IFFALSE 45702
// bpoints := bpoints * 1.8 ;
45687: LD_ADDR_VAR 0 10
45691: PUSH
45692: LD_VAR 0 10
45696: PUSH
45697: LD_REAL  1.80000000000000E+0000
45700: MUL
45701: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45702: LD_VAR 0 6
45706: PPUSH
45707: CALL_OW 257
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: IN
45730: PUSH
45731: LD_VAR 0 1
45735: PPUSH
45736: LD_INT 51
45738: PPUSH
45739: CALL_OW 321
45743: PUSH
45744: LD_INT 2
45746: EQUAL
45747: AND
45748: IFFALSE 45765
// bpoints := bpoints * 1.2 ;
45750: LD_ADDR_VAR 0 10
45754: PUSH
45755: LD_VAR 0 10
45759: PUSH
45760: LD_REAL  1.20000000000000E+0000
45763: MUL
45764: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45765: LD_VAR 0 6
45769: PPUSH
45770: CALL_OW 257
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: LD_INT 7
45780: PUSH
45781: LD_INT 9
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: IN
45789: PUSH
45790: LD_VAR 0 1
45794: PPUSH
45795: LD_INT 52
45797: PPUSH
45798: CALL_OW 321
45802: PUSH
45803: LD_INT 2
45805: EQUAL
45806: AND
45807: IFFALSE 45824
// bpoints := bpoints * 1.5 ;
45809: LD_ADDR_VAR 0 10
45813: PUSH
45814: LD_VAR 0 10
45818: PUSH
45819: LD_REAL  1.50000000000000E+0000
45822: MUL
45823: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45824: LD_VAR 0 1
45828: PPUSH
45829: LD_INT 66
45831: PPUSH
45832: CALL_OW 321
45836: PUSH
45837: LD_INT 2
45839: EQUAL
45840: IFFALSE 45857
// bpoints := bpoints * 1.1 ;
45842: LD_ADDR_VAR 0 10
45846: PUSH
45847: LD_VAR 0 10
45851: PUSH
45852: LD_REAL  1.10000000000000E+0000
45855: MUL
45856: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45857: LD_ADDR_VAR 0 10
45861: PUSH
45862: LD_VAR 0 10
45866: PUSH
45867: LD_VAR 0 6
45871: PPUSH
45872: LD_INT 1
45874: PPUSH
45875: CALL_OW 259
45879: PUSH
45880: LD_REAL  1.15000000000000E+0000
45883: MUL
45884: MUL
45885: ST_TO_ADDR
// end ; unit_vehicle :
45886: GO 46716
45888: LD_INT 2
45890: DOUBLE
45891: EQUAL
45892: IFTRUE 45896
45894: GO 46704
45896: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45897: LD_VAR 0 6
45901: PPUSH
45902: CALL_OW 264
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 42
45912: PUSH
45913: LD_INT 24
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: IN
45921: IFFALSE 45942
// points := [ 25 , 5 , 3 ] ;
45923: LD_ADDR_VAR 0 9
45927: PUSH
45928: LD_INT 25
45930: PUSH
45931: LD_INT 5
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45942: LD_VAR 0 6
45946: PPUSH
45947: CALL_OW 264
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: LD_INT 43
45957: PUSH
45958: LD_INT 25
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: IN
45966: IFFALSE 45987
// points := [ 40 , 15 , 5 ] ;
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_INT 40
45975: PUSH
45976: LD_INT 15
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45987: LD_VAR 0 6
45991: PPUSH
45992: CALL_OW 264
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: LD_INT 23
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: IN
46007: IFFALSE 46028
// points := [ 7 , 25 , 8 ] ;
46009: LD_ADDR_VAR 0 9
46013: PUSH
46014: LD_INT 7
46016: PUSH
46017: LD_INT 25
46019: PUSH
46020: LD_INT 8
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 264
46037: PUSH
46038: LD_INT 5
46040: PUSH
46041: LD_INT 27
46043: PUSH
46044: LD_INT 44
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: LIST
46051: IN
46052: IFFALSE 46073
// points := [ 14 , 50 , 16 ] ;
46054: LD_ADDR_VAR 0 9
46058: PUSH
46059: LD_INT 14
46061: PUSH
46062: LD_INT 50
46064: PUSH
46065: LD_INT 16
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46073: LD_VAR 0 6
46077: PPUSH
46078: CALL_OW 264
46082: PUSH
46083: LD_INT 6
46085: PUSH
46086: LD_INT 46
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: IN
46093: IFFALSE 46114
// points := [ 32 , 120 , 70 ] ;
46095: LD_ADDR_VAR 0 9
46099: PUSH
46100: LD_INT 32
46102: PUSH
46103: LD_INT 120
46105: PUSH
46106: LD_INT 70
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46114: LD_VAR 0 6
46118: PPUSH
46119: CALL_OW 264
46123: PUSH
46124: LD_INT 7
46126: PUSH
46127: LD_INT 28
46129: PUSH
46130: LD_INT 45
46132: PUSH
46133: LD_EXP 54
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: IN
46144: IFFALSE 46165
// points := [ 35 , 20 , 45 ] ;
46146: LD_ADDR_VAR 0 9
46150: PUSH
46151: LD_INT 35
46153: PUSH
46154: LD_INT 20
46156: PUSH
46157: LD_INT 45
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46165: LD_VAR 0 6
46169: PPUSH
46170: CALL_OW 264
46174: PUSH
46175: LD_INT 47
46177: PUSH
46178: EMPTY
46179: LIST
46180: IN
46181: IFFALSE 46202
// points := [ 67 , 45 , 75 ] ;
46183: LD_ADDR_VAR 0 9
46187: PUSH
46188: LD_INT 67
46190: PUSH
46191: LD_INT 45
46193: PUSH
46194: LD_INT 75
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46202: LD_VAR 0 6
46206: PPUSH
46207: CALL_OW 264
46211: PUSH
46212: LD_INT 26
46214: PUSH
46215: EMPTY
46216: LIST
46217: IN
46218: IFFALSE 46239
// points := [ 120 , 30 , 80 ] ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_INT 120
46227: PUSH
46228: LD_INT 30
46230: PUSH
46231: LD_INT 80
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46239: LD_VAR 0 6
46243: PPUSH
46244: CALL_OW 264
46248: PUSH
46249: LD_INT 22
46251: PUSH
46252: EMPTY
46253: LIST
46254: IN
46255: IFFALSE 46276
// points := [ 40 , 1 , 1 ] ;
46257: LD_ADDR_VAR 0 9
46261: PUSH
46262: LD_INT 40
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46276: LD_VAR 0 6
46280: PPUSH
46281: CALL_OW 264
46285: PUSH
46286: LD_INT 29
46288: PUSH
46289: EMPTY
46290: LIST
46291: IN
46292: IFFALSE 46313
// points := [ 70 , 200 , 400 ] ;
46294: LD_ADDR_VAR 0 9
46298: PUSH
46299: LD_INT 70
46301: PUSH
46302: LD_INT 200
46304: PUSH
46305: LD_INT 400
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46313: LD_VAR 0 6
46317: PPUSH
46318: CALL_OW 264
46322: PUSH
46323: LD_INT 14
46325: PUSH
46326: LD_INT 53
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: IN
46333: IFFALSE 46354
// points := [ 40 , 10 , 20 ] ;
46335: LD_ADDR_VAR 0 9
46339: PUSH
46340: LD_INT 40
46342: PUSH
46343: LD_INT 10
46345: PUSH
46346: LD_INT 20
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46354: LD_VAR 0 6
46358: PPUSH
46359: CALL_OW 264
46363: PUSH
46364: LD_INT 9
46366: PUSH
46367: EMPTY
46368: LIST
46369: IN
46370: IFFALSE 46391
// points := [ 5 , 70 , 20 ] ;
46372: LD_ADDR_VAR 0 9
46376: PUSH
46377: LD_INT 5
46379: PUSH
46380: LD_INT 70
46382: PUSH
46383: LD_INT 20
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46391: LD_VAR 0 6
46395: PPUSH
46396: CALL_OW 264
46400: PUSH
46401: LD_INT 10
46403: PUSH
46404: EMPTY
46405: LIST
46406: IN
46407: IFFALSE 46428
// points := [ 35 , 110 , 70 ] ;
46409: LD_ADDR_VAR 0 9
46413: PUSH
46414: LD_INT 35
46416: PUSH
46417: LD_INT 110
46419: PUSH
46420: LD_INT 70
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46428: LD_VAR 0 6
46432: PPUSH
46433: CALL_OW 265
46437: PUSH
46438: LD_INT 25
46440: EQUAL
46441: IFFALSE 46462
// points := [ 80 , 65 , 100 ] ;
46443: LD_ADDR_VAR 0 9
46447: PUSH
46448: LD_INT 80
46450: PUSH
46451: LD_INT 65
46453: PUSH
46454: LD_INT 100
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46462: LD_VAR 0 6
46466: PPUSH
46467: CALL_OW 263
46471: PUSH
46472: LD_INT 1
46474: EQUAL
46475: IFFALSE 46510
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46477: LD_ADDR_VAR 0 10
46481: PUSH
46482: LD_VAR 0 10
46486: PUSH
46487: LD_VAR 0 6
46491: PPUSH
46492: CALL_OW 311
46496: PPUSH
46497: LD_INT 3
46499: PPUSH
46500: CALL_OW 259
46504: PUSH
46505: LD_INT 4
46507: MUL
46508: MUL
46509: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46510: LD_VAR 0 6
46514: PPUSH
46515: CALL_OW 263
46519: PUSH
46520: LD_INT 2
46522: EQUAL
46523: IFFALSE 46574
// begin j := IsControledBy ( i ) ;
46525: LD_ADDR_VAR 0 7
46529: PUSH
46530: LD_VAR 0 6
46534: PPUSH
46535: CALL_OW 312
46539: ST_TO_ADDR
// if j then
46540: LD_VAR 0 7
46544: IFFALSE 46574
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46546: LD_ADDR_VAR 0 10
46550: PUSH
46551: LD_VAR 0 10
46555: PUSH
46556: LD_VAR 0 7
46560: PPUSH
46561: LD_INT 3
46563: PPUSH
46564: CALL_OW 259
46568: PUSH
46569: LD_INT 3
46571: MUL
46572: MUL
46573: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46574: LD_VAR 0 6
46578: PPUSH
46579: CALL_OW 264
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: LD_INT 6
46589: PUSH
46590: LD_INT 46
46592: PUSH
46593: LD_INT 44
46595: PUSH
46596: LD_INT 47
46598: PUSH
46599: LD_INT 45
46601: PUSH
46602: LD_INT 28
46604: PUSH
46605: LD_INT 7
46607: PUSH
46608: LD_INT 27
46610: PUSH
46611: LD_INT 29
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: IN
46626: PUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: LD_INT 52
46634: PPUSH
46635: CALL_OW 321
46639: PUSH
46640: LD_INT 2
46642: EQUAL
46643: AND
46644: IFFALSE 46661
// bpoints := bpoints * 1.2 ;
46646: LD_ADDR_VAR 0 10
46650: PUSH
46651: LD_VAR 0 10
46655: PUSH
46656: LD_REAL  1.20000000000000E+0000
46659: MUL
46660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46661: LD_VAR 0 6
46665: PPUSH
46666: CALL_OW 264
46670: PUSH
46671: LD_INT 6
46673: PUSH
46674: LD_INT 46
46676: PUSH
46677: LD_INT 47
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: IN
46685: IFFALSE 46702
// bpoints := bpoints * 1.2 ;
46687: LD_ADDR_VAR 0 10
46691: PUSH
46692: LD_VAR 0 10
46696: PUSH
46697: LD_REAL  1.20000000000000E+0000
46700: MUL
46701: ST_TO_ADDR
// end ; unit_building :
46702: GO 46716
46704: LD_INT 3
46706: DOUBLE
46707: EQUAL
46708: IFTRUE 46712
46710: GO 46715
46712: POP
// ; end ;
46713: GO 46716
46715: POP
// for j = 1 to 3 do
46716: LD_ADDR_VAR 0 7
46720: PUSH
46721: DOUBLE
46722: LD_INT 1
46724: DEC
46725: ST_TO_ADDR
46726: LD_INT 3
46728: PUSH
46729: FOR_TO
46730: IFFALSE 46783
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46732: LD_ADDR_VAR 0 5
46736: PUSH
46737: LD_VAR 0 5
46741: PPUSH
46742: LD_VAR 0 7
46746: PPUSH
46747: LD_VAR 0 5
46751: PUSH
46752: LD_VAR 0 7
46756: ARRAY
46757: PUSH
46758: LD_VAR 0 9
46762: PUSH
46763: LD_VAR 0 7
46767: ARRAY
46768: PUSH
46769: LD_VAR 0 10
46773: MUL
46774: PLUS
46775: PPUSH
46776: CALL_OW 1
46780: ST_TO_ADDR
46781: GO 46729
46783: POP
46784: POP
// end ;
46785: GO 45262
46787: POP
46788: POP
// result := Replace ( result , 4 , tmp ) ;
46789: LD_ADDR_VAR 0 5
46793: PUSH
46794: LD_VAR 0 5
46798: PPUSH
46799: LD_INT 4
46801: PPUSH
46802: LD_VAR 0 8
46806: PPUSH
46807: CALL_OW 1
46811: ST_TO_ADDR
// end ;
46812: LD_VAR 0 5
46816: RET
// export function DangerAtRange ( unit , range ) ; begin
46817: LD_INT 0
46819: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46820: LD_ADDR_VAR 0 3
46824: PUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 255
46834: PPUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 250
46844: PPUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 251
46854: PPUSH
46855: LD_VAR 0 2
46859: PPUSH
46860: CALL 45114 0 4
46864: ST_TO_ADDR
// end ;
46865: LD_VAR 0 3
46869: RET
// export function DangerInArea ( side , area ) ; begin
46870: LD_INT 0
46872: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46873: LD_ADDR_VAR 0 3
46877: PUSH
46878: LD_VAR 0 2
46882: PPUSH
46883: LD_INT 81
46885: PUSH
46886: LD_VAR 0 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PPUSH
46895: CALL_OW 70
46899: ST_TO_ADDR
// end ;
46900: LD_VAR 0 3
46904: RET
// export function IsExtension ( b ) ; begin
46905: LD_INT 0
46907: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46908: LD_ADDR_VAR 0 2
46912: PUSH
46913: LD_VAR 0 1
46917: PUSH
46918: LD_INT 23
46920: PUSH
46921: LD_INT 20
46923: PUSH
46924: LD_INT 22
46926: PUSH
46927: LD_INT 17
46929: PUSH
46930: LD_INT 24
46932: PUSH
46933: LD_INT 21
46935: PUSH
46936: LD_INT 19
46938: PUSH
46939: LD_INT 16
46941: PUSH
46942: LD_INT 25
46944: PUSH
46945: LD_INT 18
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: IN
46960: ST_TO_ADDR
// end ;
46961: LD_VAR 0 2
46965: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46966: LD_INT 0
46968: PPUSH
46969: PPUSH
46970: PPUSH
// result := [ ] ;
46971: LD_ADDR_VAR 0 4
46975: PUSH
46976: EMPTY
46977: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46978: LD_ADDR_VAR 0 5
46982: PUSH
46983: LD_VAR 0 2
46987: PPUSH
46988: LD_INT 21
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PPUSH
46998: CALL_OW 70
47002: ST_TO_ADDR
// if not tmp then
47003: LD_VAR 0 5
47007: NOT
47008: IFFALSE 47012
// exit ;
47010: GO 47076
// if checkLink then
47012: LD_VAR 0 3
47016: IFFALSE 47066
// begin for i in tmp do
47018: LD_ADDR_VAR 0 6
47022: PUSH
47023: LD_VAR 0 5
47027: PUSH
47028: FOR_IN
47029: IFFALSE 47064
// if GetBase ( i ) <> base then
47031: LD_VAR 0 6
47035: PPUSH
47036: CALL_OW 274
47040: PUSH
47041: LD_VAR 0 1
47045: NONEQUAL
47046: IFFALSE 47062
// ComLinkToBase ( base , i ) ;
47048: LD_VAR 0 1
47052: PPUSH
47053: LD_VAR 0 6
47057: PPUSH
47058: CALL_OW 169
47062: GO 47028
47064: POP
47065: POP
// end ; result := tmp ;
47066: LD_ADDR_VAR 0 4
47070: PUSH
47071: LD_VAR 0 5
47075: ST_TO_ADDR
// end ;
47076: LD_VAR 0 4
47080: RET
// export function ComComplete ( units , b ) ; var i ; begin
47081: LD_INT 0
47083: PPUSH
47084: PPUSH
// if not units then
47085: LD_VAR 0 1
47089: NOT
47090: IFFALSE 47094
// exit ;
47092: GO 47184
// for i in units do
47094: LD_ADDR_VAR 0 4
47098: PUSH
47099: LD_VAR 0 1
47103: PUSH
47104: FOR_IN
47105: IFFALSE 47182
// if BuildingStatus ( b ) = bs_build then
47107: LD_VAR 0 2
47111: PPUSH
47112: CALL_OW 461
47116: PUSH
47117: LD_INT 1
47119: EQUAL
47120: IFFALSE 47180
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47122: LD_VAR 0 4
47126: PPUSH
47127: LD_STRING h
47129: PUSH
47130: LD_VAR 0 2
47134: PPUSH
47135: CALL_OW 250
47139: PUSH
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 251
47149: PUSH
47150: LD_VAR 0 2
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: PPUSH
47176: CALL_OW 446
47180: GO 47104
47182: POP
47183: POP
// end ;
47184: LD_VAR 0 3
47188: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47189: LD_INT 0
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47197: LD_VAR 0 1
47201: NOT
47202: PUSH
47203: LD_VAR 0 1
47207: PPUSH
47208: CALL_OW 263
47212: PUSH
47213: LD_INT 2
47215: NONEQUAL
47216: OR
47217: IFFALSE 47221
// exit ;
47219: GO 47537
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47221: LD_ADDR_VAR 0 6
47225: PUSH
47226: LD_INT 22
47228: PUSH
47229: LD_VAR 0 1
47233: PPUSH
47234: CALL_OW 255
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 30
47248: PUSH
47249: LD_INT 36
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 34
47258: PUSH
47259: LD_INT 31
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PPUSH
47275: CALL_OW 69
47279: ST_TO_ADDR
// if not tmp then
47280: LD_VAR 0 6
47284: NOT
47285: IFFALSE 47289
// exit ;
47287: GO 47537
// result := [ ] ;
47289: LD_ADDR_VAR 0 2
47293: PUSH
47294: EMPTY
47295: ST_TO_ADDR
// for i in tmp do
47296: LD_ADDR_VAR 0 3
47300: PUSH
47301: LD_VAR 0 6
47305: PUSH
47306: FOR_IN
47307: IFFALSE 47378
// begin t := UnitsInside ( i ) ;
47309: LD_ADDR_VAR 0 4
47313: PUSH
47314: LD_VAR 0 3
47318: PPUSH
47319: CALL_OW 313
47323: ST_TO_ADDR
// if t then
47324: LD_VAR 0 4
47328: IFFALSE 47376
// for j in t do
47330: LD_ADDR_VAR 0 7
47334: PUSH
47335: LD_VAR 0 4
47339: PUSH
47340: FOR_IN
47341: IFFALSE 47374
// result := Replace ( result , result + 1 , j ) ;
47343: LD_ADDR_VAR 0 2
47347: PUSH
47348: LD_VAR 0 2
47352: PPUSH
47353: LD_VAR 0 2
47357: PUSH
47358: LD_INT 1
47360: PLUS
47361: PPUSH
47362: LD_VAR 0 7
47366: PPUSH
47367: CALL_OW 1
47371: ST_TO_ADDR
47372: GO 47340
47374: POP
47375: POP
// end ;
47376: GO 47306
47378: POP
47379: POP
// if not result then
47380: LD_VAR 0 2
47384: NOT
47385: IFFALSE 47389
// exit ;
47387: GO 47537
// mech := result [ 1 ] ;
47389: LD_ADDR_VAR 0 5
47393: PUSH
47394: LD_VAR 0 2
47398: PUSH
47399: LD_INT 1
47401: ARRAY
47402: ST_TO_ADDR
// if result > 1 then
47403: LD_VAR 0 2
47407: PUSH
47408: LD_INT 1
47410: GREATER
47411: IFFALSE 47523
// begin for i = 2 to result do
47413: LD_ADDR_VAR 0 3
47417: PUSH
47418: DOUBLE
47419: LD_INT 2
47421: DEC
47422: ST_TO_ADDR
47423: LD_VAR 0 2
47427: PUSH
47428: FOR_TO
47429: IFFALSE 47521
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47431: LD_ADDR_VAR 0 4
47435: PUSH
47436: LD_VAR 0 2
47440: PUSH
47441: LD_VAR 0 3
47445: ARRAY
47446: PPUSH
47447: LD_INT 3
47449: PPUSH
47450: CALL_OW 259
47454: PUSH
47455: LD_VAR 0 2
47459: PUSH
47460: LD_VAR 0 3
47464: ARRAY
47465: PPUSH
47466: CALL_OW 432
47470: MINUS
47471: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47472: LD_VAR 0 4
47476: PUSH
47477: LD_VAR 0 5
47481: PPUSH
47482: LD_INT 3
47484: PPUSH
47485: CALL_OW 259
47489: PUSH
47490: LD_VAR 0 5
47494: PPUSH
47495: CALL_OW 432
47499: MINUS
47500: GREATEREQUAL
47501: IFFALSE 47519
// mech := result [ i ] ;
47503: LD_ADDR_VAR 0 5
47507: PUSH
47508: LD_VAR 0 2
47512: PUSH
47513: LD_VAR 0 3
47517: ARRAY
47518: ST_TO_ADDR
// end ;
47519: GO 47428
47521: POP
47522: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47523: LD_VAR 0 1
47527: PPUSH
47528: LD_VAR 0 5
47532: PPUSH
47533: CALL_OW 135
// end ;
47537: LD_VAR 0 2
47541: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47542: LD_INT 0
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
// result := [ ] ;
47557: LD_ADDR_VAR 0 7
47561: PUSH
47562: EMPTY
47563: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47564: LD_VAR 0 1
47568: PPUSH
47569: CALL_OW 266
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: IN
47584: NOT
47585: IFFALSE 47589
// exit ;
47587: GO 49223
// if name then
47589: LD_VAR 0 3
47593: IFFALSE 47609
// SetBName ( base_dep , name ) ;
47595: LD_VAR 0 1
47599: PPUSH
47600: LD_VAR 0 3
47604: PPUSH
47605: CALL_OW 500
// base := GetBase ( base_dep ) ;
47609: LD_ADDR_VAR 0 15
47613: PUSH
47614: LD_VAR 0 1
47618: PPUSH
47619: CALL_OW 274
47623: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47624: LD_ADDR_VAR 0 16
47628: PUSH
47629: LD_VAR 0 1
47633: PPUSH
47634: CALL_OW 255
47638: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47639: LD_ADDR_VAR 0 17
47643: PUSH
47644: LD_VAR 0 1
47648: PPUSH
47649: CALL_OW 248
47653: ST_TO_ADDR
// if sources then
47654: LD_VAR 0 5
47658: IFFALSE 47705
// for i = 1 to 3 do
47660: LD_ADDR_VAR 0 8
47664: PUSH
47665: DOUBLE
47666: LD_INT 1
47668: DEC
47669: ST_TO_ADDR
47670: LD_INT 3
47672: PUSH
47673: FOR_TO
47674: IFFALSE 47703
// AddResourceType ( base , i , sources [ i ] ) ;
47676: LD_VAR 0 15
47680: PPUSH
47681: LD_VAR 0 8
47685: PPUSH
47686: LD_VAR 0 5
47690: PUSH
47691: LD_VAR 0 8
47695: ARRAY
47696: PPUSH
47697: CALL_OW 276
47701: GO 47673
47703: POP
47704: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47705: LD_ADDR_VAR 0 18
47709: PUSH
47710: LD_VAR 0 15
47714: PPUSH
47715: LD_VAR 0 2
47719: PPUSH
47720: LD_INT 1
47722: PPUSH
47723: CALL 46966 0 3
47727: ST_TO_ADDR
// InitHc ;
47728: CALL_OW 19
// InitUc ;
47732: CALL_OW 18
// uc_side := side ;
47736: LD_ADDR_OWVAR 20
47740: PUSH
47741: LD_VAR 0 16
47745: ST_TO_ADDR
// uc_nation := nation ;
47746: LD_ADDR_OWVAR 21
47750: PUSH
47751: LD_VAR 0 17
47755: ST_TO_ADDR
// if buildings then
47756: LD_VAR 0 18
47760: IFFALSE 49082
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47762: LD_ADDR_VAR 0 19
47766: PUSH
47767: LD_VAR 0 18
47771: PPUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 30
47777: PUSH
47778: LD_INT 29
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 30
47787: PUSH
47788: LD_INT 30
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: PPUSH
47800: CALL_OW 72
47804: ST_TO_ADDR
// if tmp then
47805: LD_VAR 0 19
47809: IFFALSE 47857
// for i in tmp do
47811: LD_ADDR_VAR 0 8
47815: PUSH
47816: LD_VAR 0 19
47820: PUSH
47821: FOR_IN
47822: IFFALSE 47855
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47824: LD_VAR 0 8
47828: PPUSH
47829: CALL_OW 250
47833: PPUSH
47834: LD_VAR 0 8
47838: PPUSH
47839: CALL_OW 251
47843: PPUSH
47844: LD_VAR 0 16
47848: PPUSH
47849: CALL_OW 441
47853: GO 47821
47855: POP
47856: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47857: LD_VAR 0 18
47861: PPUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 30
47867: PUSH
47868: LD_INT 32
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 30
47877: PUSH
47878: LD_INT 33
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: PPUSH
47890: CALL_OW 72
47894: IFFALSE 47982
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47896: LD_ADDR_VAR 0 8
47900: PUSH
47901: LD_VAR 0 18
47905: PPUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 30
47911: PUSH
47912: LD_INT 32
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 33
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: PPUSH
47934: CALL_OW 72
47938: PUSH
47939: FOR_IN
47940: IFFALSE 47980
// begin if not GetBWeapon ( i ) then
47942: LD_VAR 0 8
47946: PPUSH
47947: CALL_OW 269
47951: NOT
47952: IFFALSE 47978
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47954: LD_VAR 0 8
47958: PPUSH
47959: LD_VAR 0 8
47963: PPUSH
47964: LD_VAR 0 2
47968: PPUSH
47969: CALL 49228 0 2
47973: PPUSH
47974: CALL_OW 431
// end ;
47978: GO 47939
47980: POP
47981: POP
// end ; for i = 1 to personel do
47982: LD_ADDR_VAR 0 8
47986: PUSH
47987: DOUBLE
47988: LD_INT 1
47990: DEC
47991: ST_TO_ADDR
47992: LD_VAR 0 6
47996: PUSH
47997: FOR_TO
47998: IFFALSE 49062
// begin if i > 4 then
48000: LD_VAR 0 8
48004: PUSH
48005: LD_INT 4
48007: GREATER
48008: IFFALSE 48012
// break ;
48010: GO 49062
// case i of 1 :
48012: LD_VAR 0 8
48016: PUSH
48017: LD_INT 1
48019: DOUBLE
48020: EQUAL
48021: IFTRUE 48025
48023: GO 48105
48025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48026: LD_ADDR_VAR 0 12
48030: PUSH
48031: LD_VAR 0 18
48035: PPUSH
48036: LD_INT 22
48038: PUSH
48039: LD_VAR 0 16
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 58
48050: PUSH
48051: EMPTY
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 30
48059: PUSH
48060: LD_INT 32
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 30
48069: PUSH
48070: LD_INT 4
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 30
48079: PUSH
48080: LD_INT 5
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: PPUSH
48098: CALL_OW 72
48102: ST_TO_ADDR
48103: GO 48327
48105: LD_INT 2
48107: DOUBLE
48108: EQUAL
48109: IFTRUE 48113
48111: GO 48175
48113: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48114: LD_ADDR_VAR 0 12
48118: PUSH
48119: LD_VAR 0 18
48123: PPUSH
48124: LD_INT 22
48126: PUSH
48127: LD_VAR 0 16
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 30
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 30
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 72
48172: ST_TO_ADDR
48173: GO 48327
48175: LD_INT 3
48177: DOUBLE
48178: EQUAL
48179: IFTRUE 48183
48181: GO 48245
48183: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48184: LD_ADDR_VAR 0 12
48188: PUSH
48189: LD_VAR 0 18
48193: PPUSH
48194: LD_INT 22
48196: PUSH
48197: LD_VAR 0 16
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 30
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 30
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PPUSH
48238: CALL_OW 72
48242: ST_TO_ADDR
48243: GO 48327
48245: LD_INT 4
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48253
48251: GO 48326
48253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48254: LD_ADDR_VAR 0 12
48258: PUSH
48259: LD_VAR 0 18
48263: PPUSH
48264: LD_INT 22
48266: PUSH
48267: LD_VAR 0 16
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 30
48281: PUSH
48282: LD_INT 6
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 30
48291: PUSH
48292: LD_INT 7
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 30
48301: PUSH
48302: LD_INT 8
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PPUSH
48319: CALL_OW 72
48323: ST_TO_ADDR
48324: GO 48327
48326: POP
// if i = 1 then
48327: LD_VAR 0 8
48331: PUSH
48332: LD_INT 1
48334: EQUAL
48335: IFFALSE 48446
// begin tmp := [ ] ;
48337: LD_ADDR_VAR 0 19
48341: PUSH
48342: EMPTY
48343: ST_TO_ADDR
// for j in f do
48344: LD_ADDR_VAR 0 9
48348: PUSH
48349: LD_VAR 0 12
48353: PUSH
48354: FOR_IN
48355: IFFALSE 48428
// if GetBType ( j ) = b_bunker then
48357: LD_VAR 0 9
48361: PPUSH
48362: CALL_OW 266
48366: PUSH
48367: LD_INT 32
48369: EQUAL
48370: IFFALSE 48397
// tmp := Insert ( tmp , 1 , j ) else
48372: LD_ADDR_VAR 0 19
48376: PUSH
48377: LD_VAR 0 19
48381: PPUSH
48382: LD_INT 1
48384: PPUSH
48385: LD_VAR 0 9
48389: PPUSH
48390: CALL_OW 2
48394: ST_TO_ADDR
48395: GO 48426
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48397: LD_ADDR_VAR 0 19
48401: PUSH
48402: LD_VAR 0 19
48406: PPUSH
48407: LD_VAR 0 19
48411: PUSH
48412: LD_INT 1
48414: PLUS
48415: PPUSH
48416: LD_VAR 0 9
48420: PPUSH
48421: CALL_OW 2
48425: ST_TO_ADDR
48426: GO 48354
48428: POP
48429: POP
// if tmp then
48430: LD_VAR 0 19
48434: IFFALSE 48446
// f := tmp ;
48436: LD_ADDR_VAR 0 12
48440: PUSH
48441: LD_VAR 0 19
48445: ST_TO_ADDR
// end ; x := personel [ i ] ;
48446: LD_ADDR_VAR 0 13
48450: PUSH
48451: LD_VAR 0 6
48455: PUSH
48456: LD_VAR 0 8
48460: ARRAY
48461: ST_TO_ADDR
// if x = - 1 then
48462: LD_VAR 0 13
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: EQUAL
48471: IFFALSE 48680
// begin for j in f do
48473: LD_ADDR_VAR 0 9
48477: PUSH
48478: LD_VAR 0 12
48482: PUSH
48483: FOR_IN
48484: IFFALSE 48676
// repeat InitHc ;
48486: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48490: LD_VAR 0 9
48494: PPUSH
48495: CALL_OW 266
48499: PUSH
48500: LD_INT 5
48502: EQUAL
48503: IFFALSE 48573
// begin if UnitsInside ( j ) < 3 then
48505: LD_VAR 0 9
48509: PPUSH
48510: CALL_OW 313
48514: PUSH
48515: LD_INT 3
48517: LESS
48518: IFFALSE 48554
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48520: LD_INT 0
48522: PPUSH
48523: LD_INT 5
48525: PUSH
48526: LD_INT 8
48528: PUSH
48529: LD_INT 9
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: PUSH
48537: LD_VAR 0 17
48541: ARRAY
48542: PPUSH
48543: LD_VAR 0 4
48547: PPUSH
48548: CALL_OW 380
48552: GO 48571
// PrepareHuman ( false , i , skill ) ;
48554: LD_INT 0
48556: PPUSH
48557: LD_VAR 0 8
48561: PPUSH
48562: LD_VAR 0 4
48566: PPUSH
48567: CALL_OW 380
// end else
48571: GO 48590
// PrepareHuman ( false , i , skill ) ;
48573: LD_INT 0
48575: PPUSH
48576: LD_VAR 0 8
48580: PPUSH
48581: LD_VAR 0 4
48585: PPUSH
48586: CALL_OW 380
// un := CreateHuman ;
48590: LD_ADDR_VAR 0 14
48594: PUSH
48595: CALL_OW 44
48599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48600: LD_ADDR_VAR 0 7
48604: PUSH
48605: LD_VAR 0 7
48609: PPUSH
48610: LD_INT 1
48612: PPUSH
48613: LD_VAR 0 14
48617: PPUSH
48618: CALL_OW 2
48622: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48623: LD_VAR 0 14
48627: PPUSH
48628: LD_VAR 0 9
48632: PPUSH
48633: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48637: LD_VAR 0 9
48641: PPUSH
48642: CALL_OW 313
48646: PUSH
48647: LD_INT 6
48649: EQUAL
48650: PUSH
48651: LD_VAR 0 9
48655: PPUSH
48656: CALL_OW 266
48660: PUSH
48661: LD_INT 32
48663: PUSH
48664: LD_INT 31
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: IN
48671: OR
48672: IFFALSE 48486
48674: GO 48483
48676: POP
48677: POP
// end else
48678: GO 49060
// for j = 1 to x do
48680: LD_ADDR_VAR 0 9
48684: PUSH
48685: DOUBLE
48686: LD_INT 1
48688: DEC
48689: ST_TO_ADDR
48690: LD_VAR 0 13
48694: PUSH
48695: FOR_TO
48696: IFFALSE 49058
// begin InitHc ;
48698: CALL_OW 19
// if not f then
48702: LD_VAR 0 12
48706: NOT
48707: IFFALSE 48796
// begin PrepareHuman ( false , i , skill ) ;
48709: LD_INT 0
48711: PPUSH
48712: LD_VAR 0 8
48716: PPUSH
48717: LD_VAR 0 4
48721: PPUSH
48722: CALL_OW 380
// un := CreateHuman ;
48726: LD_ADDR_VAR 0 14
48730: PUSH
48731: CALL_OW 44
48735: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48736: LD_ADDR_VAR 0 7
48740: PUSH
48741: LD_VAR 0 7
48745: PPUSH
48746: LD_INT 1
48748: PPUSH
48749: LD_VAR 0 14
48753: PPUSH
48754: CALL_OW 2
48758: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48759: LD_VAR 0 14
48763: PPUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 250
48773: PPUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: CALL_OW 251
48783: PPUSH
48784: LD_INT 10
48786: PPUSH
48787: LD_INT 0
48789: PPUSH
48790: CALL_OW 50
// continue ;
48794: GO 48695
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48796: LD_VAR 0 12
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: CALL_OW 313
48809: PUSH
48810: LD_VAR 0 12
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 266
48823: PUSH
48824: LD_INT 32
48826: PUSH
48827: LD_INT 31
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: IN
48834: AND
48835: PUSH
48836: LD_VAR 0 12
48840: PUSH
48841: LD_INT 1
48843: ARRAY
48844: PPUSH
48845: CALL_OW 313
48849: PUSH
48850: LD_INT 6
48852: EQUAL
48853: OR
48854: IFFALSE 48874
// f := Delete ( f , 1 ) ;
48856: LD_ADDR_VAR 0 12
48860: PUSH
48861: LD_VAR 0 12
48865: PPUSH
48866: LD_INT 1
48868: PPUSH
48869: CALL_OW 3
48873: ST_TO_ADDR
// if not f then
48874: LD_VAR 0 12
48878: NOT
48879: IFFALSE 48897
// begin x := x + 2 ;
48881: LD_ADDR_VAR 0 13
48885: PUSH
48886: LD_VAR 0 13
48890: PUSH
48891: LD_INT 2
48893: PLUS
48894: ST_TO_ADDR
// continue ;
48895: GO 48695
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48897: LD_VAR 0 12
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: PPUSH
48906: CALL_OW 266
48910: PUSH
48911: LD_INT 5
48913: EQUAL
48914: IFFALSE 48988
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48916: LD_VAR 0 12
48920: PUSH
48921: LD_INT 1
48923: ARRAY
48924: PPUSH
48925: CALL_OW 313
48929: PUSH
48930: LD_INT 3
48932: LESS
48933: IFFALSE 48969
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48935: LD_INT 0
48937: PPUSH
48938: LD_INT 5
48940: PUSH
48941: LD_INT 8
48943: PUSH
48944: LD_INT 9
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: PUSH
48952: LD_VAR 0 17
48956: ARRAY
48957: PPUSH
48958: LD_VAR 0 4
48962: PPUSH
48963: CALL_OW 380
48967: GO 48986
// PrepareHuman ( false , i , skill ) ;
48969: LD_INT 0
48971: PPUSH
48972: LD_VAR 0 8
48976: PPUSH
48977: LD_VAR 0 4
48981: PPUSH
48982: CALL_OW 380
// end else
48986: GO 49005
// PrepareHuman ( false , i , skill ) ;
48988: LD_INT 0
48990: PPUSH
48991: LD_VAR 0 8
48995: PPUSH
48996: LD_VAR 0 4
49000: PPUSH
49001: CALL_OW 380
// un := CreateHuman ;
49005: LD_ADDR_VAR 0 14
49009: PUSH
49010: CALL_OW 44
49014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49015: LD_ADDR_VAR 0 7
49019: PUSH
49020: LD_VAR 0 7
49024: PPUSH
49025: LD_INT 1
49027: PPUSH
49028: LD_VAR 0 14
49032: PPUSH
49033: CALL_OW 2
49037: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49038: LD_VAR 0 14
49042: PPUSH
49043: LD_VAR 0 12
49047: PUSH
49048: LD_INT 1
49050: ARRAY
49051: PPUSH
49052: CALL_OW 52
// end ;
49056: GO 48695
49058: POP
49059: POP
// end ;
49060: GO 47997
49062: POP
49063: POP
// result := result ^ buildings ;
49064: LD_ADDR_VAR 0 7
49068: PUSH
49069: LD_VAR 0 7
49073: PUSH
49074: LD_VAR 0 18
49078: ADD
49079: ST_TO_ADDR
// end else
49080: GO 49223
// begin for i = 1 to personel do
49082: LD_ADDR_VAR 0 8
49086: PUSH
49087: DOUBLE
49088: LD_INT 1
49090: DEC
49091: ST_TO_ADDR
49092: LD_VAR 0 6
49096: PUSH
49097: FOR_TO
49098: IFFALSE 49221
// begin if i > 4 then
49100: LD_VAR 0 8
49104: PUSH
49105: LD_INT 4
49107: GREATER
49108: IFFALSE 49112
// break ;
49110: GO 49221
// x := personel [ i ] ;
49112: LD_ADDR_VAR 0 13
49116: PUSH
49117: LD_VAR 0 6
49121: PUSH
49122: LD_VAR 0 8
49126: ARRAY
49127: ST_TO_ADDR
// if x = - 1 then
49128: LD_VAR 0 13
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: EQUAL
49137: IFFALSE 49141
// continue ;
49139: GO 49097
// PrepareHuman ( false , i , skill ) ;
49141: LD_INT 0
49143: PPUSH
49144: LD_VAR 0 8
49148: PPUSH
49149: LD_VAR 0 4
49153: PPUSH
49154: CALL_OW 380
// un := CreateHuman ;
49158: LD_ADDR_VAR 0 14
49162: PUSH
49163: CALL_OW 44
49167: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49168: LD_VAR 0 14
49172: PPUSH
49173: LD_VAR 0 1
49177: PPUSH
49178: CALL_OW 250
49182: PPUSH
49183: LD_VAR 0 1
49187: PPUSH
49188: CALL_OW 251
49192: PPUSH
49193: LD_INT 10
49195: PPUSH
49196: LD_INT 0
49198: PPUSH
49199: CALL_OW 50
// result := result ^ un ;
49203: LD_ADDR_VAR 0 7
49207: PUSH
49208: LD_VAR 0 7
49212: PUSH
49213: LD_VAR 0 14
49217: ADD
49218: ST_TO_ADDR
// end ;
49219: GO 49097
49221: POP
49222: POP
// end ; end ;
49223: LD_VAR 0 7
49227: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49228: LD_INT 0
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
// result := false ;
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49254: LD_VAR 0 1
49258: NOT
49259: PUSH
49260: LD_VAR 0 1
49264: PPUSH
49265: CALL_OW 266
49269: PUSH
49270: LD_INT 32
49272: PUSH
49273: LD_INT 33
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: IN
49280: NOT
49281: OR
49282: IFFALSE 49286
// exit ;
49284: GO 50395
// nat := GetNation ( tower ) ;
49286: LD_ADDR_VAR 0 12
49290: PUSH
49291: LD_VAR 0 1
49295: PPUSH
49296: CALL_OW 248
49300: ST_TO_ADDR
// side := GetSide ( tower ) ;
49301: LD_ADDR_VAR 0 16
49305: PUSH
49306: LD_VAR 0 1
49310: PPUSH
49311: CALL_OW 255
49315: ST_TO_ADDR
// x := GetX ( tower ) ;
49316: LD_ADDR_VAR 0 10
49320: PUSH
49321: LD_VAR 0 1
49325: PPUSH
49326: CALL_OW 250
49330: ST_TO_ADDR
// y := GetY ( tower ) ;
49331: LD_ADDR_VAR 0 11
49335: PUSH
49336: LD_VAR 0 1
49340: PPUSH
49341: CALL_OW 251
49345: ST_TO_ADDR
// if not x or not y then
49346: LD_VAR 0 10
49350: NOT
49351: PUSH
49352: LD_VAR 0 11
49356: NOT
49357: OR
49358: IFFALSE 49362
// exit ;
49360: GO 50395
// weapon := 0 ;
49362: LD_ADDR_VAR 0 18
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// fac_list := [ ] ;
49370: LD_ADDR_VAR 0 17
49374: PUSH
49375: EMPTY
49376: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49377: LD_ADDR_VAR 0 6
49381: PUSH
49382: LD_VAR 0 1
49386: PPUSH
49387: CALL_OW 274
49391: PPUSH
49392: LD_VAR 0 2
49396: PPUSH
49397: LD_INT 0
49399: PPUSH
49400: CALL 46966 0 3
49404: PPUSH
49405: LD_INT 30
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PPUSH
49415: CALL_OW 72
49419: ST_TO_ADDR
// if not factories then
49420: LD_VAR 0 6
49424: NOT
49425: IFFALSE 49429
// exit ;
49427: GO 50395
// for i in factories do
49429: LD_ADDR_VAR 0 8
49433: PUSH
49434: LD_VAR 0 6
49438: PUSH
49439: FOR_IN
49440: IFFALSE 49465
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49442: LD_ADDR_VAR 0 17
49446: PUSH
49447: LD_VAR 0 17
49451: PUSH
49452: LD_VAR 0 8
49456: PPUSH
49457: CALL_OW 478
49461: UNION
49462: ST_TO_ADDR
49463: GO 49439
49465: POP
49466: POP
// if not fac_list then
49467: LD_VAR 0 17
49471: NOT
49472: IFFALSE 49476
// exit ;
49474: GO 50395
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49476: LD_ADDR_VAR 0 5
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 5
49486: PUSH
49487: LD_INT 9
49489: PUSH
49490: LD_INT 10
49492: PUSH
49493: LD_INT 6
49495: PUSH
49496: LD_INT 7
49498: PUSH
49499: LD_INT 11
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 27
49513: PUSH
49514: LD_INT 28
49516: PUSH
49517: LD_INT 26
49519: PUSH
49520: LD_INT 30
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 43
49531: PUSH
49532: LD_INT 44
49534: PUSH
49535: LD_INT 46
49537: PUSH
49538: LD_INT 45
49540: PUSH
49541: LD_INT 47
49543: PUSH
49544: LD_INT 49
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: PUSH
49560: LD_VAR 0 12
49564: ARRAY
49565: ST_TO_ADDR
// list := list isect fac_list ;
49566: LD_ADDR_VAR 0 5
49570: PUSH
49571: LD_VAR 0 5
49575: PUSH
49576: LD_VAR 0 17
49580: ISECT
49581: ST_TO_ADDR
// if not list then
49582: LD_VAR 0 5
49586: NOT
49587: IFFALSE 49591
// exit ;
49589: GO 50395
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49591: LD_VAR 0 12
49595: PUSH
49596: LD_INT 3
49598: EQUAL
49599: PUSH
49600: LD_INT 49
49602: PUSH
49603: LD_VAR 0 5
49607: IN
49608: AND
49609: PUSH
49610: LD_INT 31
49612: PPUSH
49613: LD_VAR 0 16
49617: PPUSH
49618: CALL_OW 321
49622: PUSH
49623: LD_INT 2
49625: EQUAL
49626: AND
49627: IFFALSE 49687
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49629: LD_INT 22
49631: PUSH
49632: LD_VAR 0 16
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 35
49643: PUSH
49644: LD_INT 49
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 91
49653: PUSH
49654: LD_VAR 0 1
49658: PUSH
49659: LD_INT 10
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: PPUSH
49672: CALL_OW 69
49676: NOT
49677: IFFALSE 49687
// weapon := ru_time_lapser ;
49679: LD_ADDR_VAR 0 18
49683: PUSH
49684: LD_INT 49
49686: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49687: LD_VAR 0 12
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: IN
49702: PUSH
49703: LD_INT 11
49705: PUSH
49706: LD_VAR 0 5
49710: IN
49711: PUSH
49712: LD_INT 30
49714: PUSH
49715: LD_VAR 0 5
49719: IN
49720: OR
49721: AND
49722: PUSH
49723: LD_INT 6
49725: PPUSH
49726: LD_VAR 0 16
49730: PPUSH
49731: CALL_OW 321
49735: PUSH
49736: LD_INT 2
49738: EQUAL
49739: AND
49740: IFFALSE 49905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49742: LD_INT 22
49744: PUSH
49745: LD_VAR 0 16
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 35
49759: PUSH
49760: LD_INT 11
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 35
49769: PUSH
49770: LD_INT 30
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 91
49784: PUSH
49785: LD_VAR 0 1
49789: PUSH
49790: LD_INT 18
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: PPUSH
49803: CALL_OW 69
49807: NOT
49808: PUSH
49809: LD_INT 22
49811: PUSH
49812: LD_VAR 0 16
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 30
49826: PUSH
49827: LD_INT 32
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 30
49836: PUSH
49837: LD_INT 33
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 91
49851: PUSH
49852: LD_VAR 0 1
49856: PUSH
49857: LD_INT 12
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: PPUSH
49873: CALL_OW 69
49877: PUSH
49878: LD_INT 2
49880: GREATER
49881: AND
49882: IFFALSE 49905
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49884: LD_ADDR_VAR 0 18
49888: PUSH
49889: LD_INT 11
49891: PUSH
49892: LD_INT 30
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_VAR 0 12
49903: ARRAY
49904: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49905: LD_VAR 0 18
49909: NOT
49910: PUSH
49911: LD_INT 40
49913: PPUSH
49914: LD_VAR 0 16
49918: PPUSH
49919: CALL_OW 321
49923: PUSH
49924: LD_INT 2
49926: EQUAL
49927: AND
49928: PUSH
49929: LD_INT 7
49931: PUSH
49932: LD_VAR 0 5
49936: IN
49937: PUSH
49938: LD_INT 28
49940: PUSH
49941: LD_VAR 0 5
49945: IN
49946: OR
49947: PUSH
49948: LD_INT 45
49950: PUSH
49951: LD_VAR 0 5
49955: IN
49956: OR
49957: AND
49958: IFFALSE 50212
// begin hex := GetHexInfo ( x , y ) ;
49960: LD_ADDR_VAR 0 4
49964: PUSH
49965: LD_VAR 0 10
49969: PPUSH
49970: LD_VAR 0 11
49974: PPUSH
49975: CALL_OW 546
49979: ST_TO_ADDR
// if hex [ 1 ] then
49980: LD_VAR 0 4
49984: PUSH
49985: LD_INT 1
49987: ARRAY
49988: IFFALSE 49992
// exit ;
49990: GO 50395
// height := hex [ 2 ] ;
49992: LD_ADDR_VAR 0 15
49996: PUSH
49997: LD_VAR 0 4
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50006: LD_ADDR_VAR 0 14
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: LD_INT 5
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: ST_TO_ADDR
// for i in tmp do
50029: LD_ADDR_VAR 0 8
50033: PUSH
50034: LD_VAR 0 14
50038: PUSH
50039: FOR_IN
50040: IFFALSE 50210
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50042: LD_ADDR_VAR 0 9
50046: PUSH
50047: LD_VAR 0 10
50051: PPUSH
50052: LD_VAR 0 8
50056: PPUSH
50057: LD_INT 5
50059: PPUSH
50060: CALL_OW 272
50064: PUSH
50065: LD_VAR 0 11
50069: PPUSH
50070: LD_VAR 0 8
50074: PPUSH
50075: LD_INT 5
50077: PPUSH
50078: CALL_OW 273
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50087: LD_VAR 0 9
50091: PUSH
50092: LD_INT 1
50094: ARRAY
50095: PPUSH
50096: LD_VAR 0 9
50100: PUSH
50101: LD_INT 2
50103: ARRAY
50104: PPUSH
50105: CALL_OW 488
50109: IFFALSE 50208
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50111: LD_ADDR_VAR 0 4
50115: PUSH
50116: LD_VAR 0 9
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PPUSH
50125: LD_VAR 0 9
50129: PUSH
50130: LD_INT 2
50132: ARRAY
50133: PPUSH
50134: CALL_OW 546
50138: ST_TO_ADDR
// if hex [ 1 ] then
50139: LD_VAR 0 4
50143: PUSH
50144: LD_INT 1
50146: ARRAY
50147: IFFALSE 50151
// continue ;
50149: GO 50039
// h := hex [ 2 ] ;
50151: LD_ADDR_VAR 0 13
50155: PUSH
50156: LD_VAR 0 4
50160: PUSH
50161: LD_INT 2
50163: ARRAY
50164: ST_TO_ADDR
// if h + 7 < height then
50165: LD_VAR 0 13
50169: PUSH
50170: LD_INT 7
50172: PLUS
50173: PUSH
50174: LD_VAR 0 15
50178: LESS
50179: IFFALSE 50208
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50181: LD_ADDR_VAR 0 18
50185: PUSH
50186: LD_INT 7
50188: PUSH
50189: LD_INT 28
50191: PUSH
50192: LD_INT 45
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: PUSH
50200: LD_VAR 0 12
50204: ARRAY
50205: ST_TO_ADDR
// break ;
50206: GO 50210
// end ; end ; end ;
50208: GO 50039
50210: POP
50211: POP
// end ; if not weapon then
50212: LD_VAR 0 18
50216: NOT
50217: IFFALSE 50277
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50219: LD_ADDR_VAR 0 5
50223: PUSH
50224: LD_VAR 0 5
50228: PUSH
50229: LD_INT 11
50231: PUSH
50232: LD_INT 30
50234: PUSH
50235: LD_INT 49
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: DIFF
50243: ST_TO_ADDR
// if not list then
50244: LD_VAR 0 5
50248: NOT
50249: IFFALSE 50253
// exit ;
50251: GO 50395
// weapon := list [ rand ( 1 , list ) ] ;
50253: LD_ADDR_VAR 0 18
50257: PUSH
50258: LD_VAR 0 5
50262: PUSH
50263: LD_INT 1
50265: PPUSH
50266: LD_VAR 0 5
50270: PPUSH
50271: CALL_OW 12
50275: ARRAY
50276: ST_TO_ADDR
// end ; if weapon then
50277: LD_VAR 0 18
50281: IFFALSE 50395
// begin tmp := CostOfWeapon ( weapon ) ;
50283: LD_ADDR_VAR 0 14
50287: PUSH
50288: LD_VAR 0 18
50292: PPUSH
50293: CALL_OW 451
50297: ST_TO_ADDR
// j := GetBase ( tower ) ;
50298: LD_ADDR_VAR 0 9
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 274
50312: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50313: LD_VAR 0 9
50317: PPUSH
50318: LD_INT 1
50320: PPUSH
50321: CALL_OW 275
50325: PUSH
50326: LD_VAR 0 14
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: GREATEREQUAL
50335: PUSH
50336: LD_VAR 0 9
50340: PPUSH
50341: LD_INT 2
50343: PPUSH
50344: CALL_OW 275
50348: PUSH
50349: LD_VAR 0 14
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: GREATEREQUAL
50358: AND
50359: PUSH
50360: LD_VAR 0 9
50364: PPUSH
50365: LD_INT 3
50367: PPUSH
50368: CALL_OW 275
50372: PUSH
50373: LD_VAR 0 14
50377: PUSH
50378: LD_INT 3
50380: ARRAY
50381: GREATEREQUAL
50382: AND
50383: IFFALSE 50395
// result := weapon ;
50385: LD_ADDR_VAR 0 3
50389: PUSH
50390: LD_VAR 0 18
50394: ST_TO_ADDR
// end ; end ;
50395: LD_VAR 0 3
50399: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50400: LD_INT 0
50402: PPUSH
50403: PPUSH
// result := true ;
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_INT 1
50411: ST_TO_ADDR
// if array1 = array2 then
50412: LD_VAR 0 1
50416: PUSH
50417: LD_VAR 0 2
50421: EQUAL
50422: IFFALSE 50482
// begin for i = 1 to array1 do
50424: LD_ADDR_VAR 0 4
50428: PUSH
50429: DOUBLE
50430: LD_INT 1
50432: DEC
50433: ST_TO_ADDR
50434: LD_VAR 0 1
50438: PUSH
50439: FOR_TO
50440: IFFALSE 50478
// if array1 [ i ] <> array2 [ i ] then
50442: LD_VAR 0 1
50446: PUSH
50447: LD_VAR 0 4
50451: ARRAY
50452: PUSH
50453: LD_VAR 0 2
50457: PUSH
50458: LD_VAR 0 4
50462: ARRAY
50463: NONEQUAL
50464: IFFALSE 50476
// begin result := false ;
50466: LD_ADDR_VAR 0 3
50470: PUSH
50471: LD_INT 0
50473: ST_TO_ADDR
// break ;
50474: GO 50478
// end ;
50476: GO 50439
50478: POP
50479: POP
// end else
50480: GO 50490
// result := false ;
50482: LD_ADDR_VAR 0 3
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// end ;
50490: LD_VAR 0 3
50494: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50495: LD_INT 0
50497: PPUSH
50498: PPUSH
// if not array1 or not array2 then
50499: LD_VAR 0 1
50503: NOT
50504: PUSH
50505: LD_VAR 0 2
50509: NOT
50510: OR
50511: IFFALSE 50515
// exit ;
50513: GO 50579
// result := true ;
50515: LD_ADDR_VAR 0 3
50519: PUSH
50520: LD_INT 1
50522: ST_TO_ADDR
// for i = 1 to array1 do
50523: LD_ADDR_VAR 0 4
50527: PUSH
50528: DOUBLE
50529: LD_INT 1
50531: DEC
50532: ST_TO_ADDR
50533: LD_VAR 0 1
50537: PUSH
50538: FOR_TO
50539: IFFALSE 50577
// if array1 [ i ] <> array2 [ i ] then
50541: LD_VAR 0 1
50545: PUSH
50546: LD_VAR 0 4
50550: ARRAY
50551: PUSH
50552: LD_VAR 0 2
50556: PUSH
50557: LD_VAR 0 4
50561: ARRAY
50562: NONEQUAL
50563: IFFALSE 50575
// begin result := false ;
50565: LD_ADDR_VAR 0 3
50569: PUSH
50570: LD_INT 0
50572: ST_TO_ADDR
// break ;
50573: GO 50577
// end ;
50575: GO 50538
50577: POP
50578: POP
// end ;
50579: LD_VAR 0 3
50583: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50584: LD_INT 0
50586: PPUSH
50587: PPUSH
50588: PPUSH
// pom := GetBase ( fac ) ;
50589: LD_ADDR_VAR 0 5
50593: PUSH
50594: LD_VAR 0 1
50598: PPUSH
50599: CALL_OW 274
50603: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50604: LD_ADDR_VAR 0 4
50608: PUSH
50609: LD_VAR 0 2
50613: PUSH
50614: LD_INT 1
50616: ARRAY
50617: PPUSH
50618: LD_VAR 0 2
50622: PUSH
50623: LD_INT 2
50625: ARRAY
50626: PPUSH
50627: LD_VAR 0 2
50631: PUSH
50632: LD_INT 3
50634: ARRAY
50635: PPUSH
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 4
50643: ARRAY
50644: PPUSH
50645: CALL_OW 449
50649: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_VAR 0 5
50659: PPUSH
50660: LD_INT 1
50662: PPUSH
50663: CALL_OW 275
50667: PUSH
50668: LD_VAR 0 4
50672: PUSH
50673: LD_INT 1
50675: ARRAY
50676: GREATEREQUAL
50677: PUSH
50678: LD_VAR 0 5
50682: PPUSH
50683: LD_INT 2
50685: PPUSH
50686: CALL_OW 275
50690: PUSH
50691: LD_VAR 0 4
50695: PUSH
50696: LD_INT 2
50698: ARRAY
50699: GREATEREQUAL
50700: AND
50701: PUSH
50702: LD_VAR 0 5
50706: PPUSH
50707: LD_INT 3
50709: PPUSH
50710: CALL_OW 275
50714: PUSH
50715: LD_VAR 0 4
50719: PUSH
50720: LD_INT 3
50722: ARRAY
50723: GREATEREQUAL
50724: AND
50725: ST_TO_ADDR
// end ;
50726: LD_VAR 0 3
50730: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50731: LD_INT 0
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
// pom := GetBase ( building ) ;
50737: LD_ADDR_VAR 0 3
50741: PUSH
50742: LD_VAR 0 1
50746: PPUSH
50747: CALL_OW 274
50751: ST_TO_ADDR
// if not pom then
50752: LD_VAR 0 3
50756: NOT
50757: IFFALSE 50761
// exit ;
50759: GO 50931
// btype := GetBType ( building ) ;
50761: LD_ADDR_VAR 0 5
50765: PUSH
50766: LD_VAR 0 1
50770: PPUSH
50771: CALL_OW 266
50775: ST_TO_ADDR
// if btype = b_armoury then
50776: LD_VAR 0 5
50780: PUSH
50781: LD_INT 4
50783: EQUAL
50784: IFFALSE 50794
// btype := b_barracks ;
50786: LD_ADDR_VAR 0 5
50790: PUSH
50791: LD_INT 5
50793: ST_TO_ADDR
// if btype = b_depot then
50794: LD_VAR 0 5
50798: PUSH
50799: LD_INT 0
50801: EQUAL
50802: IFFALSE 50812
// btype := b_warehouse ;
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: LD_INT 1
50811: ST_TO_ADDR
// if btype = b_workshop then
50812: LD_VAR 0 5
50816: PUSH
50817: LD_INT 2
50819: EQUAL
50820: IFFALSE 50830
// btype := b_factory ;
50822: LD_ADDR_VAR 0 5
50826: PUSH
50827: LD_INT 3
50829: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50830: LD_ADDR_VAR 0 4
50834: PUSH
50835: LD_VAR 0 5
50839: PPUSH
50840: LD_VAR 0 1
50844: PPUSH
50845: CALL_OW 248
50849: PPUSH
50850: CALL_OW 450
50854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50855: LD_ADDR_VAR 0 2
50859: PUSH
50860: LD_VAR 0 3
50864: PPUSH
50865: LD_INT 1
50867: PPUSH
50868: CALL_OW 275
50872: PUSH
50873: LD_VAR 0 4
50877: PUSH
50878: LD_INT 1
50880: ARRAY
50881: GREATEREQUAL
50882: PUSH
50883: LD_VAR 0 3
50887: PPUSH
50888: LD_INT 2
50890: PPUSH
50891: CALL_OW 275
50895: PUSH
50896: LD_VAR 0 4
50900: PUSH
50901: LD_INT 2
50903: ARRAY
50904: GREATEREQUAL
50905: AND
50906: PUSH
50907: LD_VAR 0 3
50911: PPUSH
50912: LD_INT 3
50914: PPUSH
50915: CALL_OW 275
50919: PUSH
50920: LD_VAR 0 4
50924: PUSH
50925: LD_INT 3
50927: ARRAY
50928: GREATEREQUAL
50929: AND
50930: ST_TO_ADDR
// end ;
50931: LD_VAR 0 2
50935: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50936: LD_INT 0
50938: PPUSH
50939: PPUSH
50940: PPUSH
// pom := GetBase ( building ) ;
50941: LD_ADDR_VAR 0 4
50945: PUSH
50946: LD_VAR 0 1
50950: PPUSH
50951: CALL_OW 274
50955: ST_TO_ADDR
// if not pom then
50956: LD_VAR 0 4
50960: NOT
50961: IFFALSE 50965
// exit ;
50963: GO 51066
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50965: LD_ADDR_VAR 0 5
50969: PUSH
50970: LD_VAR 0 2
50974: PPUSH
50975: LD_VAR 0 1
50979: PPUSH
50980: CALL_OW 248
50984: PPUSH
50985: CALL_OW 450
50989: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50990: LD_ADDR_VAR 0 3
50994: PUSH
50995: LD_VAR 0 4
50999: PPUSH
51000: LD_INT 1
51002: PPUSH
51003: CALL_OW 275
51007: PUSH
51008: LD_VAR 0 5
51012: PUSH
51013: LD_INT 1
51015: ARRAY
51016: GREATEREQUAL
51017: PUSH
51018: LD_VAR 0 4
51022: PPUSH
51023: LD_INT 2
51025: PPUSH
51026: CALL_OW 275
51030: PUSH
51031: LD_VAR 0 5
51035: PUSH
51036: LD_INT 2
51038: ARRAY
51039: GREATEREQUAL
51040: AND
51041: PUSH
51042: LD_VAR 0 4
51046: PPUSH
51047: LD_INT 3
51049: PPUSH
51050: CALL_OW 275
51054: PUSH
51055: LD_VAR 0 5
51059: PUSH
51060: LD_INT 3
51062: ARRAY
51063: GREATEREQUAL
51064: AND
51065: ST_TO_ADDR
// end ;
51066: LD_VAR 0 3
51070: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51071: LD_INT 0
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
// result := false ;
51084: LD_ADDR_VAR 0 8
51088: PUSH
51089: LD_INT 0
51091: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51092: LD_VAR 0 5
51096: NOT
51097: PUSH
51098: LD_VAR 0 1
51102: NOT
51103: OR
51104: PUSH
51105: LD_VAR 0 2
51109: NOT
51110: OR
51111: PUSH
51112: LD_VAR 0 3
51116: NOT
51117: OR
51118: IFFALSE 51122
// exit ;
51120: GO 51936
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51122: LD_ADDR_VAR 0 14
51126: PUSH
51127: LD_VAR 0 1
51131: PPUSH
51132: LD_VAR 0 2
51136: PPUSH
51137: LD_VAR 0 3
51141: PPUSH
51142: LD_VAR 0 4
51146: PPUSH
51147: LD_VAR 0 5
51151: PUSH
51152: LD_INT 1
51154: ARRAY
51155: PPUSH
51156: CALL_OW 248
51160: PPUSH
51161: LD_INT 0
51163: PPUSH
51164: CALL 53173 0 6
51168: ST_TO_ADDR
// if not hexes then
51169: LD_VAR 0 14
51173: NOT
51174: IFFALSE 51178
// exit ;
51176: GO 51936
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51178: LD_ADDR_VAR 0 17
51182: PUSH
51183: LD_VAR 0 5
51187: PPUSH
51188: LD_INT 22
51190: PUSH
51191: LD_VAR 0 13
51195: PPUSH
51196: CALL_OW 255
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 30
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 30
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PPUSH
51237: CALL_OW 72
51241: ST_TO_ADDR
// for i = 1 to hexes do
51242: LD_ADDR_VAR 0 9
51246: PUSH
51247: DOUBLE
51248: LD_INT 1
51250: DEC
51251: ST_TO_ADDR
51252: LD_VAR 0 14
51256: PUSH
51257: FOR_TO
51258: IFFALSE 51934
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51260: LD_ADDR_VAR 0 13
51264: PUSH
51265: LD_VAR 0 14
51269: PUSH
51270: LD_VAR 0 9
51274: ARRAY
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 14
51284: PUSH
51285: LD_VAR 0 9
51289: ARRAY
51290: PUSH
51291: LD_INT 2
51293: ARRAY
51294: PPUSH
51295: CALL_OW 428
51299: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51300: LD_VAR 0 14
51304: PUSH
51305: LD_VAR 0 9
51309: ARRAY
51310: PUSH
51311: LD_INT 1
51313: ARRAY
51314: PPUSH
51315: LD_VAR 0 14
51319: PUSH
51320: LD_VAR 0 9
51324: ARRAY
51325: PUSH
51326: LD_INT 2
51328: ARRAY
51329: PPUSH
51330: CALL_OW 351
51334: PUSH
51335: LD_VAR 0 14
51339: PUSH
51340: LD_VAR 0 9
51344: ARRAY
51345: PUSH
51346: LD_INT 1
51348: ARRAY
51349: PPUSH
51350: LD_VAR 0 14
51354: PUSH
51355: LD_VAR 0 9
51359: ARRAY
51360: PUSH
51361: LD_INT 2
51363: ARRAY
51364: PPUSH
51365: CALL_OW 488
51369: NOT
51370: OR
51371: PUSH
51372: LD_VAR 0 13
51376: PPUSH
51377: CALL_OW 247
51381: PUSH
51382: LD_INT 3
51384: EQUAL
51385: OR
51386: IFFALSE 51392
// exit ;
51388: POP
51389: POP
51390: GO 51936
// if not tmp then
51392: LD_VAR 0 13
51396: NOT
51397: IFFALSE 51401
// continue ;
51399: GO 51257
// result := true ;
51401: LD_ADDR_VAR 0 8
51405: PUSH
51406: LD_INT 1
51408: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51409: LD_VAR 0 6
51413: PUSH
51414: LD_VAR 0 13
51418: PPUSH
51419: CALL_OW 247
51423: PUSH
51424: LD_INT 2
51426: EQUAL
51427: AND
51428: PUSH
51429: LD_VAR 0 13
51433: PPUSH
51434: CALL_OW 263
51438: PUSH
51439: LD_INT 1
51441: EQUAL
51442: AND
51443: IFFALSE 51607
// begin if IsDrivenBy ( tmp ) then
51445: LD_VAR 0 13
51449: PPUSH
51450: CALL_OW 311
51454: IFFALSE 51458
// continue ;
51456: GO 51257
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51458: LD_VAR 0 6
51462: PPUSH
51463: LD_INT 3
51465: PUSH
51466: LD_INT 60
51468: PUSH
51469: EMPTY
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: LD_INT 55
51481: PUSH
51482: EMPTY
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PPUSH
51493: CALL_OW 72
51497: IFFALSE 51605
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51499: LD_ADDR_VAR 0 18
51503: PUSH
51504: LD_VAR 0 6
51508: PPUSH
51509: LD_INT 3
51511: PUSH
51512: LD_INT 60
51514: PUSH
51515: EMPTY
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: LD_INT 55
51527: PUSH
51528: EMPTY
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PPUSH
51539: CALL_OW 72
51543: PUSH
51544: LD_INT 1
51546: ARRAY
51547: ST_TO_ADDR
// if IsInUnit ( driver ) then
51548: LD_VAR 0 18
51552: PPUSH
51553: CALL_OW 310
51557: IFFALSE 51568
// ComExit ( driver ) ;
51559: LD_VAR 0 18
51563: PPUSH
51564: CALL 76357 0 1
// AddComEnterUnit ( driver , tmp ) ;
51568: LD_VAR 0 18
51572: PPUSH
51573: LD_VAR 0 13
51577: PPUSH
51578: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51582: LD_VAR 0 18
51586: PPUSH
51587: LD_VAR 0 7
51591: PPUSH
51592: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51596: LD_VAR 0 18
51600: PPUSH
51601: CALL_OW 181
// end ; continue ;
51605: GO 51257
// end ; if not cleaners or not tmp in cleaners then
51607: LD_VAR 0 6
51611: NOT
51612: PUSH
51613: LD_VAR 0 13
51617: PUSH
51618: LD_VAR 0 6
51622: IN
51623: NOT
51624: OR
51625: IFFALSE 51932
// begin if dep then
51627: LD_VAR 0 17
51631: IFFALSE 51767
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51633: LD_ADDR_VAR 0 16
51637: PUSH
51638: LD_VAR 0 17
51642: PUSH
51643: LD_INT 1
51645: ARRAY
51646: PPUSH
51647: CALL_OW 250
51651: PPUSH
51652: LD_VAR 0 17
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PPUSH
51661: CALL_OW 254
51665: PPUSH
51666: LD_INT 5
51668: PPUSH
51669: CALL_OW 272
51673: PUSH
51674: LD_VAR 0 17
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: PPUSH
51683: CALL_OW 251
51687: PPUSH
51688: LD_VAR 0 17
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: PPUSH
51697: CALL_OW 254
51701: PPUSH
51702: LD_INT 5
51704: PPUSH
51705: CALL_OW 273
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51714: LD_VAR 0 16
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: PPUSH
51723: LD_VAR 0 16
51727: PUSH
51728: LD_INT 2
51730: ARRAY
51731: PPUSH
51732: CALL_OW 488
51736: IFFALSE 51767
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51738: LD_VAR 0 13
51742: PPUSH
51743: LD_VAR 0 16
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PPUSH
51752: LD_VAR 0 16
51756: PUSH
51757: LD_INT 2
51759: ARRAY
51760: PPUSH
51761: CALL_OW 111
// continue ;
51765: GO 51257
// end ; end ; r := GetDir ( tmp ) ;
51767: LD_ADDR_VAR 0 15
51771: PUSH
51772: LD_VAR 0 13
51776: PPUSH
51777: CALL_OW 254
51781: ST_TO_ADDR
// if r = 5 then
51782: LD_VAR 0 15
51786: PUSH
51787: LD_INT 5
51789: EQUAL
51790: IFFALSE 51800
// r := 0 ;
51792: LD_ADDR_VAR 0 15
51796: PUSH
51797: LD_INT 0
51799: ST_TO_ADDR
// for j = r to 5 do
51800: LD_ADDR_VAR 0 10
51804: PUSH
51805: DOUBLE
51806: LD_VAR 0 15
51810: DEC
51811: ST_TO_ADDR
51812: LD_INT 5
51814: PUSH
51815: FOR_TO
51816: IFFALSE 51930
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51818: LD_ADDR_VAR 0 11
51822: PUSH
51823: LD_VAR 0 13
51827: PPUSH
51828: CALL_OW 250
51832: PPUSH
51833: LD_VAR 0 10
51837: PPUSH
51838: LD_INT 2
51840: PPUSH
51841: CALL_OW 272
51845: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51846: LD_ADDR_VAR 0 12
51850: PUSH
51851: LD_VAR 0 13
51855: PPUSH
51856: CALL_OW 251
51860: PPUSH
51861: LD_VAR 0 10
51865: PPUSH
51866: LD_INT 2
51868: PPUSH
51869: CALL_OW 273
51873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51874: LD_VAR 0 11
51878: PPUSH
51879: LD_VAR 0 12
51883: PPUSH
51884: CALL_OW 488
51888: PUSH
51889: LD_VAR 0 11
51893: PPUSH
51894: LD_VAR 0 12
51898: PPUSH
51899: CALL_OW 428
51903: NOT
51904: AND
51905: IFFALSE 51928
// begin ComMoveXY ( tmp , _x , _y ) ;
51907: LD_VAR 0 13
51911: PPUSH
51912: LD_VAR 0 11
51916: PPUSH
51917: LD_VAR 0 12
51921: PPUSH
51922: CALL_OW 111
// break ;
51926: GO 51930
// end ; end ;
51928: GO 51815
51930: POP
51931: POP
// end ; end ;
51932: GO 51257
51934: POP
51935: POP
// end ;
51936: LD_VAR 0 8
51940: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51941: LD_INT 0
51943: PPUSH
// result := true ;
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_INT 1
51951: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51952: LD_VAR 0 2
51956: PUSH
51957: LD_INT 24
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51971
51963: LD_INT 33
51965: DOUBLE
51966: EQUAL
51967: IFTRUE 51971
51969: GO 51996
51971: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51972: LD_ADDR_VAR 0 3
51976: PUSH
51977: LD_INT 32
51979: PPUSH
51980: LD_VAR 0 1
51984: PPUSH
51985: CALL_OW 321
51989: PUSH
51990: LD_INT 2
51992: EQUAL
51993: ST_TO_ADDR
51994: GO 52316
51996: LD_INT 20
51998: DOUBLE
51999: EQUAL
52000: IFTRUE 52004
52002: GO 52029
52004: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52005: LD_ADDR_VAR 0 3
52009: PUSH
52010: LD_INT 6
52012: PPUSH
52013: LD_VAR 0 1
52017: PPUSH
52018: CALL_OW 321
52022: PUSH
52023: LD_INT 2
52025: EQUAL
52026: ST_TO_ADDR
52027: GO 52316
52029: LD_INT 22
52031: DOUBLE
52032: EQUAL
52033: IFTRUE 52043
52035: LD_INT 36
52037: DOUBLE
52038: EQUAL
52039: IFTRUE 52043
52041: GO 52068
52043: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52044: LD_ADDR_VAR 0 3
52048: PUSH
52049: LD_INT 15
52051: PPUSH
52052: LD_VAR 0 1
52056: PPUSH
52057: CALL_OW 321
52061: PUSH
52062: LD_INT 2
52064: EQUAL
52065: ST_TO_ADDR
52066: GO 52316
52068: LD_INT 30
52070: DOUBLE
52071: EQUAL
52072: IFTRUE 52076
52074: GO 52101
52076: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52077: LD_ADDR_VAR 0 3
52081: PUSH
52082: LD_INT 20
52084: PPUSH
52085: LD_VAR 0 1
52089: PPUSH
52090: CALL_OW 321
52094: PUSH
52095: LD_INT 2
52097: EQUAL
52098: ST_TO_ADDR
52099: GO 52316
52101: LD_INT 28
52103: DOUBLE
52104: EQUAL
52105: IFTRUE 52115
52107: LD_INT 21
52109: DOUBLE
52110: EQUAL
52111: IFTRUE 52115
52113: GO 52140
52115: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52116: LD_ADDR_VAR 0 3
52120: PUSH
52121: LD_INT 21
52123: PPUSH
52124: LD_VAR 0 1
52128: PPUSH
52129: CALL_OW 321
52133: PUSH
52134: LD_INT 2
52136: EQUAL
52137: ST_TO_ADDR
52138: GO 52316
52140: LD_INT 16
52142: DOUBLE
52143: EQUAL
52144: IFTRUE 52148
52146: GO 52175
52148: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52149: LD_ADDR_VAR 0 3
52153: PUSH
52154: LD_EXP 61
52158: PPUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: CALL_OW 321
52168: PUSH
52169: LD_INT 2
52171: EQUAL
52172: ST_TO_ADDR
52173: GO 52316
52175: LD_INT 19
52177: DOUBLE
52178: EQUAL
52179: IFTRUE 52189
52181: LD_INT 23
52183: DOUBLE
52184: EQUAL
52185: IFTRUE 52189
52187: GO 52216
52189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52190: LD_ADDR_VAR 0 3
52194: PUSH
52195: LD_EXP 60
52199: PPUSH
52200: LD_VAR 0 1
52204: PPUSH
52205: CALL_OW 321
52209: PUSH
52210: LD_INT 2
52212: EQUAL
52213: ST_TO_ADDR
52214: GO 52316
52216: LD_INT 17
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52224
52222: GO 52249
52224: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52225: LD_ADDR_VAR 0 3
52229: PUSH
52230: LD_INT 39
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 321
52242: PUSH
52243: LD_INT 2
52245: EQUAL
52246: ST_TO_ADDR
52247: GO 52316
52249: LD_INT 18
52251: DOUBLE
52252: EQUAL
52253: IFTRUE 52257
52255: GO 52282
52257: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52258: LD_ADDR_VAR 0 3
52262: PUSH
52263: LD_INT 40
52265: PPUSH
52266: LD_VAR 0 1
52270: PPUSH
52271: CALL_OW 321
52275: PUSH
52276: LD_INT 2
52278: EQUAL
52279: ST_TO_ADDR
52280: GO 52316
52282: LD_INT 27
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52290
52288: GO 52315
52290: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52291: LD_ADDR_VAR 0 3
52295: PUSH
52296: LD_INT 35
52298: PPUSH
52299: LD_VAR 0 1
52303: PPUSH
52304: CALL_OW 321
52308: PUSH
52309: LD_INT 2
52311: EQUAL
52312: ST_TO_ADDR
52313: GO 52316
52315: POP
// end ;
52316: LD_VAR 0 3
52320: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52321: LD_INT 0
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
// result := false ;
52334: LD_ADDR_VAR 0 6
52338: PUSH
52339: LD_INT 0
52341: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52342: LD_VAR 0 1
52346: NOT
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: CALL_OW 266
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: IN
52368: NOT
52369: OR
52370: PUSH
52371: LD_VAR 0 2
52375: NOT
52376: OR
52377: PUSH
52378: LD_VAR 0 5
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: LD_INT 5
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: IN
52409: NOT
52410: OR
52411: PUSH
52412: LD_VAR 0 3
52416: PPUSH
52417: LD_VAR 0 4
52421: PPUSH
52422: CALL_OW 488
52426: NOT
52427: OR
52428: IFFALSE 52432
// exit ;
52430: GO 53168
// side := GetSide ( depot ) ;
52432: LD_ADDR_VAR 0 9
52436: PUSH
52437: LD_VAR 0 1
52441: PPUSH
52442: CALL_OW 255
52446: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52447: LD_VAR 0 9
52451: PPUSH
52452: LD_VAR 0 2
52456: PPUSH
52457: CALL 51941 0 2
52461: NOT
52462: IFFALSE 52466
// exit ;
52464: GO 53168
// pom := GetBase ( depot ) ;
52466: LD_ADDR_VAR 0 10
52470: PUSH
52471: LD_VAR 0 1
52475: PPUSH
52476: CALL_OW 274
52480: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52481: LD_ADDR_VAR 0 11
52485: PUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: LD_VAR 0 1
52495: PPUSH
52496: CALL_OW 248
52500: PPUSH
52501: CALL_OW 450
52505: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52506: LD_VAR 0 10
52510: PPUSH
52511: LD_INT 1
52513: PPUSH
52514: CALL_OW 275
52518: PUSH
52519: LD_VAR 0 11
52523: PUSH
52524: LD_INT 1
52526: ARRAY
52527: GREATEREQUAL
52528: PUSH
52529: LD_VAR 0 10
52533: PPUSH
52534: LD_INT 2
52536: PPUSH
52537: CALL_OW 275
52541: PUSH
52542: LD_VAR 0 11
52546: PUSH
52547: LD_INT 2
52549: ARRAY
52550: GREATEREQUAL
52551: AND
52552: PUSH
52553: LD_VAR 0 10
52557: PPUSH
52558: LD_INT 3
52560: PPUSH
52561: CALL_OW 275
52565: PUSH
52566: LD_VAR 0 11
52570: PUSH
52571: LD_INT 3
52573: ARRAY
52574: GREATEREQUAL
52575: AND
52576: NOT
52577: IFFALSE 52581
// exit ;
52579: GO 53168
// if GetBType ( depot ) = b_depot then
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 266
52590: PUSH
52591: LD_INT 0
52593: EQUAL
52594: IFFALSE 52606
// dist := 28 else
52596: LD_ADDR_VAR 0 14
52600: PUSH
52601: LD_INT 28
52603: ST_TO_ADDR
52604: GO 52614
// dist := 36 ;
52606: LD_ADDR_VAR 0 14
52610: PUSH
52611: LD_INT 36
52613: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52614: LD_VAR 0 1
52618: PPUSH
52619: LD_VAR 0 3
52623: PPUSH
52624: LD_VAR 0 4
52628: PPUSH
52629: CALL_OW 297
52633: PUSH
52634: LD_VAR 0 14
52638: GREATER
52639: IFFALSE 52643
// exit ;
52641: GO 53168
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52643: LD_ADDR_VAR 0 12
52647: PUSH
52648: LD_VAR 0 2
52652: PPUSH
52653: LD_VAR 0 3
52657: PPUSH
52658: LD_VAR 0 4
52662: PPUSH
52663: LD_VAR 0 5
52667: PPUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 248
52677: PPUSH
52678: LD_INT 0
52680: PPUSH
52681: CALL 53173 0 6
52685: ST_TO_ADDR
// if not hexes then
52686: LD_VAR 0 12
52690: NOT
52691: IFFALSE 52695
// exit ;
52693: GO 53168
// hex := GetHexInfo ( x , y ) ;
52695: LD_ADDR_VAR 0 15
52699: PUSH
52700: LD_VAR 0 3
52704: PPUSH
52705: LD_VAR 0 4
52709: PPUSH
52710: CALL_OW 546
52714: ST_TO_ADDR
// if hex [ 1 ] then
52715: LD_VAR 0 15
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: IFFALSE 52727
// exit ;
52725: GO 53168
// height := hex [ 2 ] ;
52727: LD_ADDR_VAR 0 13
52731: PUSH
52732: LD_VAR 0 15
52736: PUSH
52737: LD_INT 2
52739: ARRAY
52740: ST_TO_ADDR
// for i = 1 to hexes do
52741: LD_ADDR_VAR 0 7
52745: PUSH
52746: DOUBLE
52747: LD_INT 1
52749: DEC
52750: ST_TO_ADDR
52751: LD_VAR 0 12
52755: PUSH
52756: FOR_TO
52757: IFFALSE 53087
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52759: LD_VAR 0 12
52763: PUSH
52764: LD_VAR 0 7
52768: ARRAY
52769: PUSH
52770: LD_INT 1
52772: ARRAY
52773: PPUSH
52774: LD_VAR 0 12
52778: PUSH
52779: LD_VAR 0 7
52783: ARRAY
52784: PUSH
52785: LD_INT 2
52787: ARRAY
52788: PPUSH
52789: CALL_OW 488
52793: NOT
52794: PUSH
52795: LD_VAR 0 12
52799: PUSH
52800: LD_VAR 0 7
52804: ARRAY
52805: PUSH
52806: LD_INT 1
52808: ARRAY
52809: PPUSH
52810: LD_VAR 0 12
52814: PUSH
52815: LD_VAR 0 7
52819: ARRAY
52820: PUSH
52821: LD_INT 2
52823: ARRAY
52824: PPUSH
52825: CALL_OW 428
52829: PUSH
52830: LD_INT 0
52832: GREATER
52833: OR
52834: PUSH
52835: LD_VAR 0 12
52839: PUSH
52840: LD_VAR 0 7
52844: ARRAY
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 12
52854: PUSH
52855: LD_VAR 0 7
52859: ARRAY
52860: PUSH
52861: LD_INT 2
52863: ARRAY
52864: PPUSH
52865: CALL_OW 351
52869: OR
52870: IFFALSE 52876
// exit ;
52872: POP
52873: POP
52874: GO 53168
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52876: LD_ADDR_VAR 0 8
52880: PUSH
52881: LD_VAR 0 12
52885: PUSH
52886: LD_VAR 0 7
52890: ARRAY
52891: PUSH
52892: LD_INT 1
52894: ARRAY
52895: PPUSH
52896: LD_VAR 0 12
52900: PUSH
52901: LD_VAR 0 7
52905: ARRAY
52906: PUSH
52907: LD_INT 2
52909: ARRAY
52910: PPUSH
52911: CALL_OW 546
52915: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52916: LD_VAR 0 8
52920: PUSH
52921: LD_INT 1
52923: ARRAY
52924: PUSH
52925: LD_VAR 0 8
52929: PUSH
52930: LD_INT 2
52932: ARRAY
52933: PUSH
52934: LD_VAR 0 13
52938: PUSH
52939: LD_INT 2
52941: PLUS
52942: GREATER
52943: OR
52944: PUSH
52945: LD_VAR 0 8
52949: PUSH
52950: LD_INT 2
52952: ARRAY
52953: PUSH
52954: LD_VAR 0 13
52958: PUSH
52959: LD_INT 2
52961: MINUS
52962: LESS
52963: OR
52964: PUSH
52965: LD_VAR 0 8
52969: PUSH
52970: LD_INT 3
52972: ARRAY
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 8
52979: PUSH
52980: LD_INT 9
52982: PUSH
52983: LD_INT 10
52985: PUSH
52986: LD_INT 11
52988: PUSH
52989: LD_INT 12
52991: PUSH
52992: LD_INT 13
52994: PUSH
52995: LD_INT 16
52997: PUSH
52998: LD_INT 17
53000: PUSH
53001: LD_INT 18
53003: PUSH
53004: LD_INT 19
53006: PUSH
53007: LD_INT 20
53009: PUSH
53010: LD_INT 21
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: IN
53028: NOT
53029: OR
53030: PUSH
53031: LD_VAR 0 8
53035: PUSH
53036: LD_INT 5
53038: ARRAY
53039: NOT
53040: OR
53041: PUSH
53042: LD_VAR 0 8
53046: PUSH
53047: LD_INT 6
53049: ARRAY
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 7
53059: PUSH
53060: LD_INT 9
53062: PUSH
53063: LD_INT 10
53065: PUSH
53066: LD_INT 11
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: IN
53077: NOT
53078: OR
53079: IFFALSE 53085
// exit ;
53081: POP
53082: POP
53083: GO 53168
// end ;
53085: GO 52756
53087: POP
53088: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53089: LD_VAR 0 9
53093: PPUSH
53094: LD_VAR 0 3
53098: PPUSH
53099: LD_VAR 0 4
53103: PPUSH
53104: LD_INT 20
53106: PPUSH
53107: CALL 45114 0 4
53111: PUSH
53112: LD_INT 4
53114: ARRAY
53115: IFFALSE 53119
// exit ;
53117: GO 53168
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53119: LD_VAR 0 2
53123: PUSH
53124: LD_INT 29
53126: PUSH
53127: LD_INT 30
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: IN
53134: PUSH
53135: LD_VAR 0 3
53139: PPUSH
53140: LD_VAR 0 4
53144: PPUSH
53145: LD_VAR 0 9
53149: PPUSH
53150: CALL_OW 440
53154: NOT
53155: AND
53156: IFFALSE 53160
// exit ;
53158: GO 53168
// result := true ;
53160: LD_ADDR_VAR 0 6
53164: PUSH
53165: LD_INT 1
53167: ST_TO_ADDR
// end ;
53168: LD_VAR 0 6
53172: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53173: LD_INT 0
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
// result = [ ] ;
53233: LD_ADDR_VAR 0 7
53237: PUSH
53238: EMPTY
53239: ST_TO_ADDR
// temp_list = [ ] ;
53240: LD_ADDR_VAR 0 9
53244: PUSH
53245: EMPTY
53246: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53247: LD_VAR 0 4
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: LD_INT 5
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: IN
53278: NOT
53279: PUSH
53280: LD_VAR 0 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: IN
53295: PUSH
53296: LD_VAR 0 5
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: IN
53315: NOT
53316: AND
53317: OR
53318: IFFALSE 53322
// exit ;
53320: GO 71713
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53322: LD_VAR 0 1
53326: PUSH
53327: LD_INT 6
53329: PUSH
53330: LD_INT 7
53332: PUSH
53333: LD_INT 8
53335: PUSH
53336: LD_INT 13
53338: PUSH
53339: LD_INT 12
53341: PUSH
53342: LD_INT 15
53344: PUSH
53345: LD_INT 11
53347: PUSH
53348: LD_INT 14
53350: PUSH
53351: LD_INT 10
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: IN
53365: IFFALSE 53375
// btype = b_lab ;
53367: LD_ADDR_VAR 0 1
53371: PUSH
53372: LD_INT 6
53374: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53375: LD_VAR 0 6
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: IN
53394: NOT
53395: PUSH
53396: LD_VAR 0 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 6
53415: PUSH
53416: LD_INT 36
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: LD_INT 31
53427: PUSH
53428: LD_INT 32
53430: PUSH
53431: LD_INT 33
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: IN
53447: NOT
53448: PUSH
53449: LD_VAR 0 6
53453: PUSH
53454: LD_INT 1
53456: EQUAL
53457: AND
53458: OR
53459: PUSH
53460: LD_VAR 0 1
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: IN
53475: NOT
53476: PUSH
53477: LD_VAR 0 6
53481: PUSH
53482: LD_INT 2
53484: EQUAL
53485: AND
53486: OR
53487: IFFALSE 53497
// mode = 0 ;
53489: LD_ADDR_VAR 0 6
53493: PUSH
53494: LD_INT 0
53496: ST_TO_ADDR
// case mode of 0 :
53497: LD_VAR 0 6
53501: PUSH
53502: LD_INT 0
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 64963
53510: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53511: LD_ADDR_VAR 0 11
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53704: LD_ADDR_VAR 0 12
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53900: LD_ADDR_VAR 0 13
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54099: LD_ADDR_VAR 0 14
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54295: LD_ADDR_VAR 0 15
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54488: LD_ADDR_VAR 0 16
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54681: LD_ADDR_VAR 0 17
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54911: LD_ADDR_VAR 0 18
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 19
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55371: LD_ADDR_VAR 0 20
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55601: LD_ADDR_VAR 0 21
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55831: LD_ADDR_VAR 0 22
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56061: LD_ADDR_VAR 0 23
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56341: LD_ADDR_VAR 0 24
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56617: LD_ADDR_VAR 0 25
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56891: LD_ADDR_VAR 0 26
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57167: LD_ADDR_VAR 0 27
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 28
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57729: LD_ADDR_VAR 0 29
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58008: LD_ADDR_VAR 0 30
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58286: LD_ADDR_VAR 0 31
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58564: LD_ADDR_VAR 0 32
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58842: LD_ADDR_VAR 0 33
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59121: LD_ADDR_VAR 0 34
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59401: LD_ADDR_VAR 0 35
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59513: LD_ADDR_VAR 0 36
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59625: LD_ADDR_VAR 0 37
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59737: LD_ADDR_VAR 0 38
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59849: LD_ADDR_VAR 0 39
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59961: LD_ADDR_VAR 0 40
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60073: LD_ADDR_VAR 0 41
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60423: LD_ADDR_VAR 0 42
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60773: LD_ADDR_VAR 0 43
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61121: LD_ADDR_VAR 0 44
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61471: LD_ADDR_VAR 0 45
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 2
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61821: LD_ADDR_VAR 0 46
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62169: LD_ADDR_VAR 0 47
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62320: LD_ADDR_VAR 0 48
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62467: LD_ADDR_VAR 0 49
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62611: LD_ADDR_VAR 0 50
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62755: LD_ADDR_VAR 0 51
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62902: LD_ADDR_VAR 0 52
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63053: LD_ADDR_VAR 0 53
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63283: LD_ADDR_VAR 0 54
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63513: LD_ADDR_VAR 0 55
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63743: LD_ADDR_VAR 0 56
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63973: LD_ADDR_VAR 0 57
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64203: LD_ADDR_VAR 0 58
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64433: LD_ADDR_VAR 0 59
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64521: LD_ADDR_VAR 0 60
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64609: LD_ADDR_VAR 0 61
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64697: LD_ADDR_VAR 0 62
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64785: LD_ADDR_VAR 0 63
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64873: LD_ADDR_VAR 0 64
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// end ; 1 :
64961: GO 70858
64963: LD_INT 1
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 67594
64971: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64972: LD_ADDR_VAR 0 11
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65016: LD_ADDR_VAR 0 12
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65057: LD_ADDR_VAR 0 13
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65097: LD_ADDR_VAR 0 14
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65138: LD_ADDR_VAR 0 15
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65182: LD_ADDR_VAR 0 16
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65228: LD_ADDR_VAR 0 17
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65272: LD_ADDR_VAR 0 18
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65313: LD_ADDR_VAR 0 19
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65353: LD_ADDR_VAR 0 20
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65394: LD_ADDR_VAR 0 21
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65438: LD_ADDR_VAR 0 22
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65484: LD_ADDR_VAR 0 23
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: LD_INT 4
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65528: LD_ADDR_VAR 0 24
65532: PUSH
65533: LD_INT 3
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65569: LD_ADDR_VAR 0 25
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 4
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65609: LD_ADDR_VAR 0 26
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 4
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65650: LD_ADDR_VAR 0 27
65654: PUSH
65655: LD_INT 3
65657: NEG
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 4
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65694: LD_ADDR_VAR 0 28
65698: PUSH
65699: LD_INT 3
65701: NEG
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 3
65713: NEG
65714: PUSH
65715: LD_INT 4
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 4
65725: NEG
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65740: LD_ADDR_VAR 0 29
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 4
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 4
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: LD_INT 5
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 5
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 4
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: LD_INT 6
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 6
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 5
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65895: LD_ADDR_VAR 0 30
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 5
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 5
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 6
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 6
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66038: LD_ADDR_VAR 0 31
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 4
66085: PUSH
66086: LD_INT 4
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: LD_INT 4
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 5
66105: PUSH
66106: LD_INT 4
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 5
66115: PUSH
66116: LD_INT 5
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 4
66125: PUSH
66126: LD_INT 5
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 6
66135: PUSH
66136: LD_INT 5
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 6
66145: PUSH
66146: LD_INT 6
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: LD_INT 6
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66177: LD_ADDR_VAR 0 32
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: LD_INT 5
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: LD_INT 5
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 6
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: LD_INT 6
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: LD_INT 5
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66320: LD_ADDR_VAR 0 33
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: NEG
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 4
66383: NEG
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 5
66406: NEG
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 5
66417: NEG
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 5
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 6
66440: NEG
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 6
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66475: LD_ADDR_VAR 0 34
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: LD_INT 2
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: LD_INT 4
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 4
66530: NEG
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 4
66542: NEG
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: LD_INT 5
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: NEG
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: NEG
66579: PUSH
66580: LD_INT 5
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 5
66590: NEG
66591: PUSH
66592: LD_INT 6
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 6
66602: NEG
66603: PUSH
66604: LD_INT 5
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 6
66614: NEG
66615: PUSH
66616: LD_INT 6
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66638: LD_ADDR_VAR 0 41
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66682: LD_ADDR_VAR 0 42
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66723: LD_ADDR_VAR 0 43
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66763: LD_ADDR_VAR 0 44
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66804: LD_ADDR_VAR 0 45
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66848: LD_ADDR_VAR 0 46
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66894: LD_ADDR_VAR 0 47
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66927: LD_ADDR_VAR 0 48
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 2
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66958: LD_ADDR_VAR 0 49
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66987: LD_ADDR_VAR 0 50
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67016: LD_ADDR_VAR 0 51
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67047: LD_ADDR_VAR 0 52
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67080: LD_ADDR_VAR 0 53
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67124: LD_ADDR_VAR 0 54
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67165: LD_ADDR_VAR 0 55
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67205: LD_ADDR_VAR 0 56
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67246: LD_ADDR_VAR 0 57
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67290: LD_ADDR_VAR 0 58
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67336: LD_ADDR_VAR 0 59
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 2
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67380: LD_ADDR_VAR 0 60
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: LD_INT 1
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 2
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67421: LD_ADDR_VAR 0 61
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67461: LD_ADDR_VAR 0 62
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67502: LD_ADDR_VAR 0 63
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67546: LD_ADDR_VAR 0 64
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: ST_TO_ADDR
// end ; 2 :
67592: GO 70858
67594: LD_INT 2
67596: DOUBLE
67597: EQUAL
67598: IFTRUE 67602
67600: GO 70857
67602: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67603: LD_ADDR_VAR 0 29
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 4
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 5
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 5
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 3
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 4
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 4
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 5
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 5
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: NEG
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 4
67965: NEG
67966: PUSH
67967: LD_INT 2
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 4
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: NEG
68001: PUSH
68002: LD_INT 5
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 4
68036: NEG
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 5
68048: NEG
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: NEG
68061: PUSH
68062: LD_INT 5
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: LD_INT 5
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 5
68084: NEG
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68141: LD_ADDR_VAR 0 30
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 4
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: LD_INT 5
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: LD_INT 3
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: LD_INT 4
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 4
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 2
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: NEG
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 4
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 4
68376: NEG
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 5
68387: NEG
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 5
68398: NEG
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 5
68410: NEG
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: NEG
68482: PUSH
68483: LD_INT 2
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: NEG
68494: PUSH
68495: LD_INT 3
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 4
68505: NEG
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 4
68529: NEG
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 4
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 5
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 4
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_INT 3
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: LD_INT 4
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 5
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68688: LD_ADDR_VAR 0 31
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 5
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 5
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 5
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 1
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 4
68844: NEG
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: LD_INT 2
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 4
68890: NEG
68891: PUSH
68892: LD_INT 4
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: NEG
68903: PUSH
68904: LD_INT 5
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: NEG
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 4
68938: NEG
68939: PUSH
68940: LD_INT 3
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 5
68950: NEG
68951: PUSH
68952: LD_INT 4
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 5
68962: NEG
68963: PUSH
68964: LD_INT 5
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: NEG
68975: PUSH
68976: LD_INT 5
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 5
68986: NEG
68987: PUSH
68988: LD_INT 3
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 4
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: LD_INT 4
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 2
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 5
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 5
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: PUSH
69184: LD_INT 2
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69238: LD_ADDR_VAR 0 32
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: NEG
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 3
69268: NEG
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 3
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 4
69290: NEG
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 5
69301: NEG
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 5
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 5
69324: NEG
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: LD_INT 3
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: LD_INT 4
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 4
69407: NEG
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 4
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: LD_INT 4
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 5
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: PUSH
69512: LD_INT 4
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 5
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 2
69534: PUSH
69535: LD_INT 3
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: LD_INT 5
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: PUSH
69568: LD_INT 1
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 5
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: LD_INT 5
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: PUSH
69691: LD_INT 5
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 3
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 5
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69785: LD_ADDR_VAR 0 33
69789: PUSH
69790: LD_INT 4
69792: NEG
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: NEG
69805: PUSH
69806: LD_INT 5
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 3
69816: NEG
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: NEG
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: LD_INT 3
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 5
69852: NEG
69853: PUSH
69854: LD_INT 4
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 5
69864: NEG
69865: PUSH
69866: LD_INT 5
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: LD_INT 5
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 5
69888: NEG
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 4
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 3
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: LD_INT 4
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: LD_INT 4
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 4
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 1
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 5
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 5
70033: PUSH
70034: LD_INT 1
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: LD_INT 1
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 3
70074: PUSH
70075: LD_INT 2
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 5
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 4
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 4
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: LD_INT 4
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 4
70165: PUSH
70166: LD_INT 2
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 4
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: LD_INT 4
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: LD_INT 5
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 0
70225: PUSH
70226: LD_INT 5
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: LD_INT 4
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 1
70246: NEG
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: LD_INT 5
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70323: LD_ADDR_VAR 0 34
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: LD_INT 4
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: LD_INT 5
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: LD_INT 5
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 3
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 4
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: LD_INT 5
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 5
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 1
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 3
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: LD_INT 4
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: LD_INT 1
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 3
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 4
70753: NEG
70754: PUSH
70755: LD_INT 1
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 5
70764: NEG
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 5
70775: NEG
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 5
70787: NEG
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 3
70799: NEG
70800: PUSH
70801: LD_INT 2
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: ST_TO_ADDR
// end ; end ;
70855: GO 70858
70857: POP
// case btype of b_depot , b_warehouse :
70858: LD_VAR 0 1
70862: PUSH
70863: LD_INT 0
70865: DOUBLE
70866: EQUAL
70867: IFTRUE 70877
70869: LD_INT 1
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 71078
70877: POP
// case nation of nation_american :
70878: LD_VAR 0 5
70882: PUSH
70883: LD_INT 1
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 70947
70891: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70892: LD_ADDR_VAR 0 9
70896: PUSH
70897: LD_VAR 0 11
70901: PUSH
70902: LD_VAR 0 12
70906: PUSH
70907: LD_VAR 0 13
70911: PUSH
70912: LD_VAR 0 14
70916: PUSH
70917: LD_VAR 0 15
70921: PUSH
70922: LD_VAR 0 16
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: PUSH
70935: LD_VAR 0 4
70939: PUSH
70940: LD_INT 1
70942: PLUS
70943: ARRAY
70944: ST_TO_ADDR
70945: GO 71076
70947: LD_INT 2
70949: DOUBLE
70950: EQUAL
70951: IFTRUE 70955
70953: GO 71011
70955: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70956: LD_ADDR_VAR 0 9
70960: PUSH
70961: LD_VAR 0 17
70965: PUSH
70966: LD_VAR 0 18
70970: PUSH
70971: LD_VAR 0 19
70975: PUSH
70976: LD_VAR 0 20
70980: PUSH
70981: LD_VAR 0 21
70985: PUSH
70986: LD_VAR 0 22
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 4
71003: PUSH
71004: LD_INT 1
71006: PLUS
71007: ARRAY
71008: ST_TO_ADDR
71009: GO 71076
71011: LD_INT 3
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71019
71017: GO 71075
71019: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71020: LD_ADDR_VAR 0 9
71024: PUSH
71025: LD_VAR 0 23
71029: PUSH
71030: LD_VAR 0 24
71034: PUSH
71035: LD_VAR 0 25
71039: PUSH
71040: LD_VAR 0 26
71044: PUSH
71045: LD_VAR 0 27
71049: PUSH
71050: LD_VAR 0 28
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: PUSH
71063: LD_VAR 0 4
71067: PUSH
71068: LD_INT 1
71070: PLUS
71071: ARRAY
71072: ST_TO_ADDR
71073: GO 71076
71075: POP
71076: GO 71631
71078: LD_INT 2
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71092
71084: LD_INT 3
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71092
71090: GO 71148
71092: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71093: LD_ADDR_VAR 0 9
71097: PUSH
71098: LD_VAR 0 29
71102: PUSH
71103: LD_VAR 0 30
71107: PUSH
71108: LD_VAR 0 31
71112: PUSH
71113: LD_VAR 0 32
71117: PUSH
71118: LD_VAR 0 33
71122: PUSH
71123: LD_VAR 0 34
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 4
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: ARRAY
71145: ST_TO_ADDR
71146: GO 71631
71148: LD_INT 16
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71210
71154: LD_INT 17
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71210
71160: LD_INT 18
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71210
71166: LD_INT 19
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71210
71172: LD_INT 22
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71210
71178: LD_INT 20
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71210
71184: LD_INT 21
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71210
71190: LD_INT 23
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71210
71196: LD_INT 24
71198: DOUBLE
71199: EQUAL
71200: IFTRUE 71210
71202: LD_INT 25
71204: DOUBLE
71205: EQUAL
71206: IFTRUE 71210
71208: GO 71266
71210: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71211: LD_ADDR_VAR 0 9
71215: PUSH
71216: LD_VAR 0 35
71220: PUSH
71221: LD_VAR 0 36
71225: PUSH
71226: LD_VAR 0 37
71230: PUSH
71231: LD_VAR 0 38
71235: PUSH
71236: LD_VAR 0 39
71240: PUSH
71241: LD_VAR 0 40
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: PUSH
71254: LD_VAR 0 4
71258: PUSH
71259: LD_INT 1
71261: PLUS
71262: ARRAY
71263: ST_TO_ADDR
71264: GO 71631
71266: LD_INT 6
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71322
71272: LD_INT 7
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71322
71278: LD_INT 8
71280: DOUBLE
71281: EQUAL
71282: IFTRUE 71322
71284: LD_INT 13
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71322
71290: LD_INT 12
71292: DOUBLE
71293: EQUAL
71294: IFTRUE 71322
71296: LD_INT 15
71298: DOUBLE
71299: EQUAL
71300: IFTRUE 71322
71302: LD_INT 11
71304: DOUBLE
71305: EQUAL
71306: IFTRUE 71322
71308: LD_INT 14
71310: DOUBLE
71311: EQUAL
71312: IFTRUE 71322
71314: LD_INT 10
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71322
71320: GO 71378
71322: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71323: LD_ADDR_VAR 0 9
71327: PUSH
71328: LD_VAR 0 41
71332: PUSH
71333: LD_VAR 0 42
71337: PUSH
71338: LD_VAR 0 43
71342: PUSH
71343: LD_VAR 0 44
71347: PUSH
71348: LD_VAR 0 45
71352: PUSH
71353: LD_VAR 0 46
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: PUSH
71366: LD_VAR 0 4
71370: PUSH
71371: LD_INT 1
71373: PLUS
71374: ARRAY
71375: ST_TO_ADDR
71376: GO 71631
71378: LD_INT 36
71380: DOUBLE
71381: EQUAL
71382: IFTRUE 71386
71384: GO 71442
71386: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71387: LD_ADDR_VAR 0 9
71391: PUSH
71392: LD_VAR 0 47
71396: PUSH
71397: LD_VAR 0 48
71401: PUSH
71402: LD_VAR 0 49
71406: PUSH
71407: LD_VAR 0 50
71411: PUSH
71412: LD_VAR 0 51
71416: PUSH
71417: LD_VAR 0 52
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: PUSH
71430: LD_VAR 0 4
71434: PUSH
71435: LD_INT 1
71437: PLUS
71438: ARRAY
71439: ST_TO_ADDR
71440: GO 71631
71442: LD_INT 4
71444: DOUBLE
71445: EQUAL
71446: IFTRUE 71468
71448: LD_INT 5
71450: DOUBLE
71451: EQUAL
71452: IFTRUE 71468
71454: LD_INT 34
71456: DOUBLE
71457: EQUAL
71458: IFTRUE 71468
71460: LD_INT 37
71462: DOUBLE
71463: EQUAL
71464: IFTRUE 71468
71466: GO 71524
71468: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71469: LD_ADDR_VAR 0 9
71473: PUSH
71474: LD_VAR 0 53
71478: PUSH
71479: LD_VAR 0 54
71483: PUSH
71484: LD_VAR 0 55
71488: PUSH
71489: LD_VAR 0 56
71493: PUSH
71494: LD_VAR 0 57
71498: PUSH
71499: LD_VAR 0 58
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: PUSH
71512: LD_VAR 0 4
71516: PUSH
71517: LD_INT 1
71519: PLUS
71520: ARRAY
71521: ST_TO_ADDR
71522: GO 71631
71524: LD_INT 31
71526: DOUBLE
71527: EQUAL
71528: IFTRUE 71574
71530: LD_INT 32
71532: DOUBLE
71533: EQUAL
71534: IFTRUE 71574
71536: LD_INT 33
71538: DOUBLE
71539: EQUAL
71540: IFTRUE 71574
71542: LD_INT 27
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71574
71548: LD_INT 26
71550: DOUBLE
71551: EQUAL
71552: IFTRUE 71574
71554: LD_INT 28
71556: DOUBLE
71557: EQUAL
71558: IFTRUE 71574
71560: LD_INT 29
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71574
71566: LD_INT 30
71568: DOUBLE
71569: EQUAL
71570: IFTRUE 71574
71572: GO 71630
71574: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71575: LD_ADDR_VAR 0 9
71579: PUSH
71580: LD_VAR 0 59
71584: PUSH
71585: LD_VAR 0 60
71589: PUSH
71590: LD_VAR 0 61
71594: PUSH
71595: LD_VAR 0 62
71599: PUSH
71600: LD_VAR 0 63
71604: PUSH
71605: LD_VAR 0 64
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: PUSH
71618: LD_VAR 0 4
71622: PUSH
71623: LD_INT 1
71625: PLUS
71626: ARRAY
71627: ST_TO_ADDR
71628: GO 71631
71630: POP
// temp_list2 = [ ] ;
71631: LD_ADDR_VAR 0 10
71635: PUSH
71636: EMPTY
71637: ST_TO_ADDR
// for i in temp_list do
71638: LD_ADDR_VAR 0 8
71642: PUSH
71643: LD_VAR 0 9
71647: PUSH
71648: FOR_IN
71649: IFFALSE 71701
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71651: LD_ADDR_VAR 0 10
71655: PUSH
71656: LD_VAR 0 10
71660: PUSH
71661: LD_VAR 0 8
71665: PUSH
71666: LD_INT 1
71668: ARRAY
71669: PUSH
71670: LD_VAR 0 2
71674: PLUS
71675: PUSH
71676: LD_VAR 0 8
71680: PUSH
71681: LD_INT 2
71683: ARRAY
71684: PUSH
71685: LD_VAR 0 3
71689: PLUS
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: ADD
71698: ST_TO_ADDR
71699: GO 71648
71701: POP
71702: POP
// result = temp_list2 ;
71703: LD_ADDR_VAR 0 7
71707: PUSH
71708: LD_VAR 0 10
71712: ST_TO_ADDR
// end ;
71713: LD_VAR 0 7
71717: RET
// export function EnemyInRange ( unit , dist ) ; begin
71718: LD_INT 0
71720: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: LD_VAR 0 1
71730: PPUSH
71731: CALL_OW 255
71735: PPUSH
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 250
71745: PPUSH
71746: LD_VAR 0 1
71750: PPUSH
71751: CALL_OW 251
71755: PPUSH
71756: LD_VAR 0 2
71760: PPUSH
71761: CALL 45114 0 4
71765: PUSH
71766: LD_INT 4
71768: ARRAY
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 3
71774: RET
// export function PlayerSeeMe ( unit ) ; begin
71775: LD_INT 0
71777: PPUSH
// result := See ( your_side , unit ) ;
71778: LD_ADDR_VAR 0 2
71782: PUSH
71783: LD_OWVAR 2
71787: PPUSH
71788: LD_VAR 0 1
71792: PPUSH
71793: CALL_OW 292
71797: ST_TO_ADDR
// end ;
71798: LD_VAR 0 2
71802: RET
// export function ReverseDir ( unit ) ; begin
71803: LD_INT 0
71805: PPUSH
// if not unit then
71806: LD_VAR 0 1
71810: NOT
71811: IFFALSE 71815
// exit ;
71813: GO 71838
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 1
71824: PPUSH
71825: CALL_OW 254
71829: PUSH
71830: LD_INT 3
71832: PLUS
71833: PUSH
71834: LD_INT 6
71836: MOD
71837: ST_TO_ADDR
// end ;
71838: LD_VAR 0 2
71842: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71843: LD_INT 0
71845: PPUSH
71846: PPUSH
71847: PPUSH
71848: PPUSH
71849: PPUSH
// if not hexes then
71850: LD_VAR 0 2
71854: NOT
71855: IFFALSE 71859
// exit ;
71857: GO 72007
// dist := 9999 ;
71859: LD_ADDR_VAR 0 5
71863: PUSH
71864: LD_INT 9999
71866: ST_TO_ADDR
// for i = 1 to hexes do
71867: LD_ADDR_VAR 0 4
71871: PUSH
71872: DOUBLE
71873: LD_INT 1
71875: DEC
71876: ST_TO_ADDR
71877: LD_VAR 0 2
71881: PUSH
71882: FOR_TO
71883: IFFALSE 71995
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71885: LD_VAR 0 1
71889: PPUSH
71890: LD_VAR 0 2
71894: PUSH
71895: LD_VAR 0 4
71899: ARRAY
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PPUSH
71905: LD_VAR 0 2
71909: PUSH
71910: LD_VAR 0 4
71914: ARRAY
71915: PUSH
71916: LD_INT 2
71918: ARRAY
71919: PPUSH
71920: CALL_OW 297
71924: PUSH
71925: LD_VAR 0 5
71929: LESS
71930: IFFALSE 71993
// begin hex := hexes [ i ] ;
71932: LD_ADDR_VAR 0 7
71936: PUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_VAR 0 4
71946: ARRAY
71947: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71948: LD_ADDR_VAR 0 5
71952: PUSH
71953: LD_VAR 0 1
71957: PPUSH
71958: LD_VAR 0 2
71962: PUSH
71963: LD_VAR 0 4
71967: ARRAY
71968: PUSH
71969: LD_INT 1
71971: ARRAY
71972: PPUSH
71973: LD_VAR 0 2
71977: PUSH
71978: LD_VAR 0 4
71982: ARRAY
71983: PUSH
71984: LD_INT 2
71986: ARRAY
71987: PPUSH
71988: CALL_OW 297
71992: ST_TO_ADDR
// end ; end ;
71993: GO 71882
71995: POP
71996: POP
// result := hex ;
71997: LD_ADDR_VAR 0 3
72001: PUSH
72002: LD_VAR 0 7
72006: ST_TO_ADDR
// end ;
72007: LD_VAR 0 3
72011: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72012: LD_INT 0
72014: PPUSH
72015: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72016: LD_VAR 0 1
72020: NOT
72021: PUSH
72022: LD_VAR 0 1
72026: PUSH
72027: LD_INT 21
72029: PUSH
72030: LD_INT 2
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 23
72039: PUSH
72040: LD_INT 2
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PPUSH
72051: CALL_OW 69
72055: IN
72056: NOT
72057: OR
72058: IFFALSE 72062
// exit ;
72060: GO 72109
// for i = 1 to 3 do
72062: LD_ADDR_VAR 0 3
72066: PUSH
72067: DOUBLE
72068: LD_INT 1
72070: DEC
72071: ST_TO_ADDR
72072: LD_INT 3
72074: PUSH
72075: FOR_TO
72076: IFFALSE 72107
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72078: LD_VAR 0 1
72082: PPUSH
72083: CALL_OW 250
72087: PPUSH
72088: LD_VAR 0 1
72092: PPUSH
72093: CALL_OW 251
72097: PPUSH
72098: LD_INT 1
72100: PPUSH
72101: CALL_OW 453
72105: GO 72075
72107: POP
72108: POP
// end ;
72109: LD_VAR 0 2
72113: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72114: LD_INT 0
72116: PPUSH
72117: PPUSH
72118: PPUSH
72119: PPUSH
72120: PPUSH
72121: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72122: LD_VAR 0 1
72126: NOT
72127: PUSH
72128: LD_VAR 0 2
72132: NOT
72133: OR
72134: PUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 314
72144: OR
72145: IFFALSE 72149
// exit ;
72147: GO 72590
// x := GetX ( enemy_unit ) ;
72149: LD_ADDR_VAR 0 7
72153: PUSH
72154: LD_VAR 0 2
72158: PPUSH
72159: CALL_OW 250
72163: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72164: LD_ADDR_VAR 0 8
72168: PUSH
72169: LD_VAR 0 2
72173: PPUSH
72174: CALL_OW 251
72178: ST_TO_ADDR
// if not x or not y then
72179: LD_VAR 0 7
72183: NOT
72184: PUSH
72185: LD_VAR 0 8
72189: NOT
72190: OR
72191: IFFALSE 72195
// exit ;
72193: GO 72590
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72195: LD_ADDR_VAR 0 6
72199: PUSH
72200: LD_VAR 0 7
72204: PPUSH
72205: LD_INT 0
72207: PPUSH
72208: LD_INT 4
72210: PPUSH
72211: CALL_OW 272
72215: PUSH
72216: LD_VAR 0 8
72220: PPUSH
72221: LD_INT 0
72223: PPUSH
72224: LD_INT 4
72226: PPUSH
72227: CALL_OW 273
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_VAR 0 7
72240: PPUSH
72241: LD_INT 1
72243: PPUSH
72244: LD_INT 4
72246: PPUSH
72247: CALL_OW 272
72251: PUSH
72252: LD_VAR 0 8
72256: PPUSH
72257: LD_INT 1
72259: PPUSH
72260: LD_INT 4
72262: PPUSH
72263: CALL_OW 273
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 7
72276: PPUSH
72277: LD_INT 2
72279: PPUSH
72280: LD_INT 4
72282: PPUSH
72283: CALL_OW 272
72287: PUSH
72288: LD_VAR 0 8
72292: PPUSH
72293: LD_INT 2
72295: PPUSH
72296: LD_INT 4
72298: PPUSH
72299: CALL_OW 273
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_VAR 0 7
72312: PPUSH
72313: LD_INT 3
72315: PPUSH
72316: LD_INT 4
72318: PPUSH
72319: CALL_OW 272
72323: PUSH
72324: LD_VAR 0 8
72328: PPUSH
72329: LD_INT 3
72331: PPUSH
72332: LD_INT 4
72334: PPUSH
72335: CALL_OW 273
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_VAR 0 7
72348: PPUSH
72349: LD_INT 4
72351: PPUSH
72352: LD_INT 4
72354: PPUSH
72355: CALL_OW 272
72359: PUSH
72360: LD_VAR 0 8
72364: PPUSH
72365: LD_INT 4
72367: PPUSH
72368: LD_INT 4
72370: PPUSH
72371: CALL_OW 273
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_VAR 0 7
72384: PPUSH
72385: LD_INT 5
72387: PPUSH
72388: LD_INT 4
72390: PPUSH
72391: CALL_OW 272
72395: PUSH
72396: LD_VAR 0 8
72400: PPUSH
72401: LD_INT 5
72403: PPUSH
72404: LD_INT 4
72406: PPUSH
72407: CALL_OW 273
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: ST_TO_ADDR
// for i = tmp downto 1 do
72424: LD_ADDR_VAR 0 4
72428: PUSH
72429: DOUBLE
72430: LD_VAR 0 6
72434: INC
72435: ST_TO_ADDR
72436: LD_INT 1
72438: PUSH
72439: FOR_DOWNTO
72440: IFFALSE 72541
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72442: LD_VAR 0 6
72446: PUSH
72447: LD_VAR 0 4
72451: ARRAY
72452: PUSH
72453: LD_INT 1
72455: ARRAY
72456: PPUSH
72457: LD_VAR 0 6
72461: PUSH
72462: LD_VAR 0 4
72466: ARRAY
72467: PUSH
72468: LD_INT 2
72470: ARRAY
72471: PPUSH
72472: CALL_OW 488
72476: NOT
72477: PUSH
72478: LD_VAR 0 6
72482: PUSH
72483: LD_VAR 0 4
72487: ARRAY
72488: PUSH
72489: LD_INT 1
72491: ARRAY
72492: PPUSH
72493: LD_VAR 0 6
72497: PUSH
72498: LD_VAR 0 4
72502: ARRAY
72503: PUSH
72504: LD_INT 2
72506: ARRAY
72507: PPUSH
72508: CALL_OW 428
72512: PUSH
72513: LD_INT 0
72515: NONEQUAL
72516: OR
72517: IFFALSE 72539
// tmp := Delete ( tmp , i ) ;
72519: LD_ADDR_VAR 0 6
72523: PUSH
72524: LD_VAR 0 6
72528: PPUSH
72529: LD_VAR 0 4
72533: PPUSH
72534: CALL_OW 3
72538: ST_TO_ADDR
72539: GO 72439
72541: POP
72542: POP
// j := GetClosestHex ( unit , tmp ) ;
72543: LD_ADDR_VAR 0 5
72547: PUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_VAR 0 6
72557: PPUSH
72558: CALL 71843 0 2
72562: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_VAR 0 5
72572: PUSH
72573: LD_INT 1
72575: ARRAY
72576: PPUSH
72577: LD_VAR 0 5
72581: PUSH
72582: LD_INT 2
72584: ARRAY
72585: PPUSH
72586: CALL_OW 111
// end ;
72590: LD_VAR 0 3
72594: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72595: LD_INT 0
72597: PPUSH
72598: PPUSH
72599: PPUSH
// uc_side = 0 ;
72600: LD_ADDR_OWVAR 20
72604: PUSH
72605: LD_INT 0
72607: ST_TO_ADDR
// uc_nation = 0 ;
72608: LD_ADDR_OWVAR 21
72612: PUSH
72613: LD_INT 0
72615: ST_TO_ADDR
// InitHc_All ( ) ;
72616: CALL_OW 584
// InitVc ;
72620: CALL_OW 20
// if mastodonts then
72624: LD_VAR 0 6
72628: IFFALSE 72695
// for i = 1 to mastodonts do
72630: LD_ADDR_VAR 0 11
72634: PUSH
72635: DOUBLE
72636: LD_INT 1
72638: DEC
72639: ST_TO_ADDR
72640: LD_VAR 0 6
72644: PUSH
72645: FOR_TO
72646: IFFALSE 72693
// begin vc_chassis := 31 ;
72648: LD_ADDR_OWVAR 37
72652: PUSH
72653: LD_INT 31
72655: ST_TO_ADDR
// vc_control := control_rider ;
72656: LD_ADDR_OWVAR 38
72660: PUSH
72661: LD_INT 4
72663: ST_TO_ADDR
// animal := CreateVehicle ;
72664: LD_ADDR_VAR 0 12
72668: PUSH
72669: CALL_OW 45
72673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72674: LD_VAR 0 12
72678: PPUSH
72679: LD_VAR 0 8
72683: PPUSH
72684: LD_INT 0
72686: PPUSH
72687: CALL 74883 0 3
// end ;
72691: GO 72645
72693: POP
72694: POP
// if horses then
72695: LD_VAR 0 5
72699: IFFALSE 72766
// for i = 1 to horses do
72701: LD_ADDR_VAR 0 11
72705: PUSH
72706: DOUBLE
72707: LD_INT 1
72709: DEC
72710: ST_TO_ADDR
72711: LD_VAR 0 5
72715: PUSH
72716: FOR_TO
72717: IFFALSE 72764
// begin hc_class := 21 ;
72719: LD_ADDR_OWVAR 28
72723: PUSH
72724: LD_INT 21
72726: ST_TO_ADDR
// hc_gallery :=  ;
72727: LD_ADDR_OWVAR 33
72731: PUSH
72732: LD_STRING 
72734: ST_TO_ADDR
// animal := CreateHuman ;
72735: LD_ADDR_VAR 0 12
72739: PUSH
72740: CALL_OW 44
72744: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72745: LD_VAR 0 12
72749: PPUSH
72750: LD_VAR 0 8
72754: PPUSH
72755: LD_INT 0
72757: PPUSH
72758: CALL 74883 0 3
// end ;
72762: GO 72716
72764: POP
72765: POP
// if birds then
72766: LD_VAR 0 1
72770: IFFALSE 72837
// for i = 1 to birds do
72772: LD_ADDR_VAR 0 11
72776: PUSH
72777: DOUBLE
72778: LD_INT 1
72780: DEC
72781: ST_TO_ADDR
72782: LD_VAR 0 1
72786: PUSH
72787: FOR_TO
72788: IFFALSE 72835
// begin hc_class = 18 ;
72790: LD_ADDR_OWVAR 28
72794: PUSH
72795: LD_INT 18
72797: ST_TO_ADDR
// hc_gallery =  ;
72798: LD_ADDR_OWVAR 33
72802: PUSH
72803: LD_STRING 
72805: ST_TO_ADDR
// animal := CreateHuman ;
72806: LD_ADDR_VAR 0 12
72810: PUSH
72811: CALL_OW 44
72815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72816: LD_VAR 0 12
72820: PPUSH
72821: LD_VAR 0 8
72825: PPUSH
72826: LD_INT 0
72828: PPUSH
72829: CALL 74883 0 3
// end ;
72833: GO 72787
72835: POP
72836: POP
// if tigers then
72837: LD_VAR 0 2
72841: IFFALSE 72925
// for i = 1 to tigers do
72843: LD_ADDR_VAR 0 11
72847: PUSH
72848: DOUBLE
72849: LD_INT 1
72851: DEC
72852: ST_TO_ADDR
72853: LD_VAR 0 2
72857: PUSH
72858: FOR_TO
72859: IFFALSE 72923
// begin hc_class = class_tiger ;
72861: LD_ADDR_OWVAR 28
72865: PUSH
72866: LD_INT 14
72868: ST_TO_ADDR
// hc_gallery =  ;
72869: LD_ADDR_OWVAR 33
72873: PUSH
72874: LD_STRING 
72876: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72877: LD_ADDR_OWVAR 35
72881: PUSH
72882: LD_INT 7
72884: NEG
72885: PPUSH
72886: LD_INT 7
72888: PPUSH
72889: CALL_OW 12
72893: ST_TO_ADDR
// animal := CreateHuman ;
72894: LD_ADDR_VAR 0 12
72898: PUSH
72899: CALL_OW 44
72903: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72904: LD_VAR 0 12
72908: PPUSH
72909: LD_VAR 0 8
72913: PPUSH
72914: LD_INT 0
72916: PPUSH
72917: CALL 74883 0 3
// end ;
72921: GO 72858
72923: POP
72924: POP
// if apemans then
72925: LD_VAR 0 3
72929: IFFALSE 73052
// for i = 1 to apemans do
72931: LD_ADDR_VAR 0 11
72935: PUSH
72936: DOUBLE
72937: LD_INT 1
72939: DEC
72940: ST_TO_ADDR
72941: LD_VAR 0 3
72945: PUSH
72946: FOR_TO
72947: IFFALSE 73050
// begin hc_class = class_apeman ;
72949: LD_ADDR_OWVAR 28
72953: PUSH
72954: LD_INT 12
72956: ST_TO_ADDR
// hc_gallery =  ;
72957: LD_ADDR_OWVAR 33
72961: PUSH
72962: LD_STRING 
72964: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72965: LD_ADDR_OWVAR 35
72969: PUSH
72970: LD_INT 2
72972: NEG
72973: PPUSH
72974: LD_INT 2
72976: PPUSH
72977: CALL_OW 12
72981: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72982: LD_ADDR_OWVAR 31
72986: PUSH
72987: LD_INT 1
72989: PPUSH
72990: LD_INT 3
72992: PPUSH
72993: CALL_OW 12
72997: PUSH
72998: LD_INT 1
73000: PPUSH
73001: LD_INT 3
73003: PPUSH
73004: CALL_OW 12
73008: PUSH
73009: LD_INT 0
73011: PUSH
73012: LD_INT 0
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: ST_TO_ADDR
// animal := CreateHuman ;
73021: LD_ADDR_VAR 0 12
73025: PUSH
73026: CALL_OW 44
73030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73031: LD_VAR 0 12
73035: PPUSH
73036: LD_VAR 0 8
73040: PPUSH
73041: LD_INT 0
73043: PPUSH
73044: CALL 74883 0 3
// end ;
73048: GO 72946
73050: POP
73051: POP
// if enchidnas then
73052: LD_VAR 0 4
73056: IFFALSE 73123
// for i = 1 to enchidnas do
73058: LD_ADDR_VAR 0 11
73062: PUSH
73063: DOUBLE
73064: LD_INT 1
73066: DEC
73067: ST_TO_ADDR
73068: LD_VAR 0 4
73072: PUSH
73073: FOR_TO
73074: IFFALSE 73121
// begin hc_class = 13 ;
73076: LD_ADDR_OWVAR 28
73080: PUSH
73081: LD_INT 13
73083: ST_TO_ADDR
// hc_gallery =  ;
73084: LD_ADDR_OWVAR 33
73088: PUSH
73089: LD_STRING 
73091: ST_TO_ADDR
// animal := CreateHuman ;
73092: LD_ADDR_VAR 0 12
73096: PUSH
73097: CALL_OW 44
73101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73102: LD_VAR 0 12
73106: PPUSH
73107: LD_VAR 0 8
73111: PPUSH
73112: LD_INT 0
73114: PPUSH
73115: CALL 74883 0 3
// end ;
73119: GO 73073
73121: POP
73122: POP
// if fishes then
73123: LD_VAR 0 7
73127: IFFALSE 73194
// for i = 1 to fishes do
73129: LD_ADDR_VAR 0 11
73133: PUSH
73134: DOUBLE
73135: LD_INT 1
73137: DEC
73138: ST_TO_ADDR
73139: LD_VAR 0 7
73143: PUSH
73144: FOR_TO
73145: IFFALSE 73192
// begin hc_class = 20 ;
73147: LD_ADDR_OWVAR 28
73151: PUSH
73152: LD_INT 20
73154: ST_TO_ADDR
// hc_gallery =  ;
73155: LD_ADDR_OWVAR 33
73159: PUSH
73160: LD_STRING 
73162: ST_TO_ADDR
// animal := CreateHuman ;
73163: LD_ADDR_VAR 0 12
73167: PUSH
73168: CALL_OW 44
73172: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73173: LD_VAR 0 12
73177: PPUSH
73178: LD_VAR 0 9
73182: PPUSH
73183: LD_INT 0
73185: PPUSH
73186: CALL 74883 0 3
// end ;
73190: GO 73144
73192: POP
73193: POP
// end ;
73194: LD_VAR 0 10
73198: RET
// export function WantHeal ( sci , unit ) ; begin
73199: LD_INT 0
73201: PPUSH
// if GetTaskList ( sci ) > 0 then
73202: LD_VAR 0 1
73206: PPUSH
73207: CALL_OW 437
73211: PUSH
73212: LD_INT 0
73214: GREATER
73215: IFFALSE 73285
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73217: LD_VAR 0 1
73221: PPUSH
73222: CALL_OW 437
73226: PUSH
73227: LD_INT 1
73229: ARRAY
73230: PUSH
73231: LD_INT 1
73233: ARRAY
73234: PUSH
73235: LD_STRING l
73237: EQUAL
73238: PUSH
73239: LD_VAR 0 1
73243: PPUSH
73244: CALL_OW 437
73248: PUSH
73249: LD_INT 1
73251: ARRAY
73252: PUSH
73253: LD_INT 4
73255: ARRAY
73256: PUSH
73257: LD_VAR 0 2
73261: EQUAL
73262: AND
73263: IFFALSE 73275
// result := true else
73265: LD_ADDR_VAR 0 3
73269: PUSH
73270: LD_INT 1
73272: ST_TO_ADDR
73273: GO 73283
// result := false ;
73275: LD_ADDR_VAR 0 3
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// end else
73283: GO 73293
// result := false ;
73285: LD_ADDR_VAR 0 3
73289: PUSH
73290: LD_INT 0
73292: ST_TO_ADDR
// end ;
73293: LD_VAR 0 3
73297: RET
// export function HealTarget ( sci ) ; begin
73298: LD_INT 0
73300: PPUSH
// if not sci then
73301: LD_VAR 0 1
73305: NOT
73306: IFFALSE 73310
// exit ;
73308: GO 73375
// result := 0 ;
73310: LD_ADDR_VAR 0 2
73314: PUSH
73315: LD_INT 0
73317: ST_TO_ADDR
// if GetTaskList ( sci ) then
73318: LD_VAR 0 1
73322: PPUSH
73323: CALL_OW 437
73327: IFFALSE 73375
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73329: LD_VAR 0 1
73333: PPUSH
73334: CALL_OW 437
73338: PUSH
73339: LD_INT 1
73341: ARRAY
73342: PUSH
73343: LD_INT 1
73345: ARRAY
73346: PUSH
73347: LD_STRING l
73349: EQUAL
73350: IFFALSE 73375
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73352: LD_ADDR_VAR 0 2
73356: PUSH
73357: LD_VAR 0 1
73361: PPUSH
73362: CALL_OW 437
73366: PUSH
73367: LD_INT 1
73369: ARRAY
73370: PUSH
73371: LD_INT 4
73373: ARRAY
73374: ST_TO_ADDR
// end ;
73375: LD_VAR 0 2
73379: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73380: LD_INT 0
73382: PPUSH
73383: PPUSH
73384: PPUSH
73385: PPUSH
// if not base_units then
73386: LD_VAR 0 1
73390: NOT
73391: IFFALSE 73395
// exit ;
73393: GO 73482
// result := false ;
73395: LD_ADDR_VAR 0 2
73399: PUSH
73400: LD_INT 0
73402: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73403: LD_ADDR_VAR 0 5
73407: PUSH
73408: LD_VAR 0 1
73412: PPUSH
73413: LD_INT 21
73415: PUSH
73416: LD_INT 3
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PPUSH
73423: CALL_OW 72
73427: ST_TO_ADDR
// if not tmp then
73428: LD_VAR 0 5
73432: NOT
73433: IFFALSE 73437
// exit ;
73435: GO 73482
// for i in tmp do
73437: LD_ADDR_VAR 0 3
73441: PUSH
73442: LD_VAR 0 5
73446: PUSH
73447: FOR_IN
73448: IFFALSE 73480
// begin result := EnemyInRange ( i , 22 ) ;
73450: LD_ADDR_VAR 0 2
73454: PUSH
73455: LD_VAR 0 3
73459: PPUSH
73460: LD_INT 22
73462: PPUSH
73463: CALL 71718 0 2
73467: ST_TO_ADDR
// if result then
73468: LD_VAR 0 2
73472: IFFALSE 73478
// exit ;
73474: POP
73475: POP
73476: GO 73482
// end ;
73478: GO 73447
73480: POP
73481: POP
// end ;
73482: LD_VAR 0 2
73486: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73487: LD_INT 0
73489: PPUSH
73490: PPUSH
// if not units then
73491: LD_VAR 0 1
73495: NOT
73496: IFFALSE 73500
// exit ;
73498: GO 73570
// result := [ ] ;
73500: LD_ADDR_VAR 0 3
73504: PUSH
73505: EMPTY
73506: ST_TO_ADDR
// for i in units do
73507: LD_ADDR_VAR 0 4
73511: PUSH
73512: LD_VAR 0 1
73516: PUSH
73517: FOR_IN
73518: IFFALSE 73568
// if GetTag ( i ) = tag then
73520: LD_VAR 0 4
73524: PPUSH
73525: CALL_OW 110
73529: PUSH
73530: LD_VAR 0 2
73534: EQUAL
73535: IFFALSE 73566
// result := Replace ( result , result + 1 , i ) ;
73537: LD_ADDR_VAR 0 3
73541: PUSH
73542: LD_VAR 0 3
73546: PPUSH
73547: LD_VAR 0 3
73551: PUSH
73552: LD_INT 1
73554: PLUS
73555: PPUSH
73556: LD_VAR 0 4
73560: PPUSH
73561: CALL_OW 1
73565: ST_TO_ADDR
73566: GO 73517
73568: POP
73569: POP
// end ;
73570: LD_VAR 0 3
73574: RET
// export function IsDriver ( un ) ; begin
73575: LD_INT 0
73577: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73578: LD_ADDR_VAR 0 2
73582: PUSH
73583: LD_VAR 0 1
73587: PUSH
73588: LD_INT 55
73590: PUSH
73591: EMPTY
73592: LIST
73593: PPUSH
73594: CALL_OW 69
73598: IN
73599: ST_TO_ADDR
// end ;
73600: LD_VAR 0 2
73604: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73605: LD_INT 0
73607: PPUSH
73608: PPUSH
// list := [ ] ;
73609: LD_ADDR_VAR 0 5
73613: PUSH
73614: EMPTY
73615: ST_TO_ADDR
// case d of 0 :
73616: LD_VAR 0 3
73620: PUSH
73621: LD_INT 0
73623: DOUBLE
73624: EQUAL
73625: IFTRUE 73629
73627: GO 73762
73629: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: LD_VAR 0 1
73639: PUSH
73640: LD_INT 4
73642: MINUS
73643: PUSH
73644: LD_VAR 0 2
73648: PUSH
73649: LD_INT 4
73651: MINUS
73652: PUSH
73653: LD_INT 2
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: LIST
73660: PUSH
73661: LD_VAR 0 1
73665: PUSH
73666: LD_INT 3
73668: MINUS
73669: PUSH
73670: LD_VAR 0 2
73674: PUSH
73675: LD_INT 1
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: PUSH
73683: LD_VAR 0 1
73687: PUSH
73688: LD_INT 4
73690: PLUS
73691: PUSH
73692: LD_VAR 0 2
73696: PUSH
73697: LD_INT 4
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: LIST
73704: PUSH
73705: LD_VAR 0 1
73709: PUSH
73710: LD_INT 3
73712: PLUS
73713: PUSH
73714: LD_VAR 0 2
73718: PUSH
73719: LD_INT 3
73721: PLUS
73722: PUSH
73723: LD_INT 5
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: PUSH
73731: LD_VAR 0 1
73735: PUSH
73736: LD_VAR 0 2
73740: PUSH
73741: LD_INT 4
73743: PLUS
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: ST_TO_ADDR
// end ; 1 :
73760: GO 74460
73762: LD_INT 1
73764: DOUBLE
73765: EQUAL
73766: IFTRUE 73770
73768: GO 73903
73770: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73771: LD_ADDR_VAR 0 5
73775: PUSH
73776: LD_VAR 0 1
73780: PUSH
73781: LD_VAR 0 2
73785: PUSH
73786: LD_INT 4
73788: MINUS
73789: PUSH
73790: LD_INT 3
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: PUSH
73798: LD_VAR 0 1
73802: PUSH
73803: LD_INT 3
73805: MINUS
73806: PUSH
73807: LD_VAR 0 2
73811: PUSH
73812: LD_INT 3
73814: MINUS
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_INT 4
73831: MINUS
73832: PUSH
73833: LD_VAR 0 2
73837: PUSH
73838: LD_INT 1
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: PUSH
73846: LD_VAR 0 1
73850: PUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 3
73858: PLUS
73859: PUSH
73860: LD_INT 0
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: LIST
73867: PUSH
73868: LD_VAR 0 1
73872: PUSH
73873: LD_INT 4
73875: PLUS
73876: PUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_INT 4
73884: PLUS
73885: PUSH
73886: LD_INT 5
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: LIST
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: ST_TO_ADDR
// end ; 2 :
73901: GO 74460
73903: LD_INT 2
73905: DOUBLE
73906: EQUAL
73907: IFTRUE 73911
73909: GO 74040
73911: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73912: LD_ADDR_VAR 0 5
73916: PUSH
73917: LD_VAR 0 1
73921: PUSH
73922: LD_VAR 0 2
73926: PUSH
73927: LD_INT 3
73929: MINUS
73930: PUSH
73931: LD_INT 3
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: LIST
73938: PUSH
73939: LD_VAR 0 1
73943: PUSH
73944: LD_INT 4
73946: PLUS
73947: PUSH
73948: LD_VAR 0 2
73952: PUSH
73953: LD_INT 4
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: PUSH
73961: LD_VAR 0 1
73965: PUSH
73966: LD_VAR 0 2
73970: PUSH
73971: LD_INT 4
73973: PLUS
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: PUSH
73983: LD_VAR 0 1
73987: PUSH
73988: LD_INT 3
73990: MINUS
73991: PUSH
73992: LD_VAR 0 2
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: PUSH
74005: LD_VAR 0 1
74009: PUSH
74010: LD_INT 4
74012: MINUS
74013: PUSH
74014: LD_VAR 0 2
74018: PUSH
74019: LD_INT 4
74021: MINUS
74022: PUSH
74023: LD_INT 2
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: ST_TO_ADDR
// end ; 3 :
74038: GO 74460
74040: LD_INT 3
74042: DOUBLE
74043: EQUAL
74044: IFTRUE 74048
74046: GO 74181
74048: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74049: LD_ADDR_VAR 0 5
74053: PUSH
74054: LD_VAR 0 1
74058: PUSH
74059: LD_INT 3
74061: PLUS
74062: PUSH
74063: LD_VAR 0 2
74067: PUSH
74068: LD_INT 4
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: LIST
74075: PUSH
74076: LD_VAR 0 1
74080: PUSH
74081: LD_INT 4
74083: PLUS
74084: PUSH
74085: LD_VAR 0 2
74089: PUSH
74090: LD_INT 4
74092: PLUS
74093: PUSH
74094: LD_INT 5
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: LIST
74101: PUSH
74102: LD_VAR 0 1
74106: PUSH
74107: LD_INT 4
74109: MINUS
74110: PUSH
74111: LD_VAR 0 2
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: LD_VAR 0 1
74128: PUSH
74129: LD_VAR 0 2
74133: PUSH
74134: LD_INT 4
74136: MINUS
74137: PUSH
74138: LD_INT 3
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: LIST
74145: PUSH
74146: LD_VAR 0 1
74150: PUSH
74151: LD_INT 3
74153: MINUS
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_INT 3
74162: MINUS
74163: PUSH
74164: LD_INT 2
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: ST_TO_ADDR
// end ; 4 :
74179: GO 74460
74181: LD_INT 4
74183: DOUBLE
74184: EQUAL
74185: IFTRUE 74189
74187: GO 74322
74189: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74190: LD_ADDR_VAR 0 5
74194: PUSH
74195: LD_VAR 0 1
74199: PUSH
74200: LD_VAR 0 2
74204: PUSH
74205: LD_INT 4
74207: PLUS
74208: PUSH
74209: LD_INT 0
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: LIST
74216: PUSH
74217: LD_VAR 0 1
74221: PUSH
74222: LD_INT 3
74224: PLUS
74225: PUSH
74226: LD_VAR 0 2
74230: PUSH
74231: LD_INT 3
74233: PLUS
74234: PUSH
74235: LD_INT 5
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: PUSH
74243: LD_VAR 0 1
74247: PUSH
74248: LD_INT 4
74250: PLUS
74251: PUSH
74252: LD_VAR 0 2
74256: PUSH
74257: LD_INT 4
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_VAR 0 2
74274: PUSH
74275: LD_INT 3
74277: MINUS
74278: PUSH
74279: LD_INT 3
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 1
74291: PUSH
74292: LD_INT 4
74294: MINUS
74295: PUSH
74296: LD_VAR 0 2
74300: PUSH
74301: LD_INT 4
74303: MINUS
74304: PUSH
74305: LD_INT 2
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: ST_TO_ADDR
// end ; 5 :
74320: GO 74460
74322: LD_INT 5
74324: DOUBLE
74325: EQUAL
74326: IFTRUE 74330
74328: GO 74459
74330: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74331: LD_ADDR_VAR 0 5
74335: PUSH
74336: LD_VAR 0 1
74340: PUSH
74341: LD_INT 4
74343: MINUS
74344: PUSH
74345: LD_VAR 0 2
74349: PUSH
74350: LD_INT 1
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: LIST
74357: PUSH
74358: LD_VAR 0 1
74362: PUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_INT 4
74370: MINUS
74371: PUSH
74372: LD_INT 3
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: LIST
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: LD_INT 4
74387: PLUS
74388: PUSH
74389: LD_VAR 0 2
74393: PUSH
74394: LD_INT 4
74396: PLUS
74397: PUSH
74398: LD_INT 5
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: PUSH
74406: LD_VAR 0 1
74410: PUSH
74411: LD_INT 3
74413: PLUS
74414: PUSH
74415: LD_VAR 0 2
74419: PUSH
74420: LD_INT 4
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_VAR 0 2
74437: PUSH
74438: LD_INT 3
74440: PLUS
74441: PUSH
74442: LD_INT 0
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: LIST
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: ST_TO_ADDR
// end ; end ;
74457: GO 74460
74459: POP
// result := list ;
74460: LD_ADDR_VAR 0 4
74464: PUSH
74465: LD_VAR 0 5
74469: ST_TO_ADDR
// end ;
74470: LD_VAR 0 4
74474: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74475: LD_INT 0
74477: PPUSH
74478: PPUSH
74479: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74480: LD_VAR 0 1
74484: NOT
74485: PUSH
74486: LD_VAR 0 2
74490: PUSH
74491: LD_INT 1
74493: PUSH
74494: LD_INT 2
74496: PUSH
74497: LD_INT 3
74499: PUSH
74500: LD_INT 4
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: IN
74509: NOT
74510: OR
74511: IFFALSE 74515
// exit ;
74513: GO 74607
// tmp := [ ] ;
74515: LD_ADDR_VAR 0 5
74519: PUSH
74520: EMPTY
74521: ST_TO_ADDR
// for i in units do
74522: LD_ADDR_VAR 0 4
74526: PUSH
74527: LD_VAR 0 1
74531: PUSH
74532: FOR_IN
74533: IFFALSE 74576
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74535: LD_ADDR_VAR 0 5
74539: PUSH
74540: LD_VAR 0 5
74544: PPUSH
74545: LD_VAR 0 5
74549: PUSH
74550: LD_INT 1
74552: PLUS
74553: PPUSH
74554: LD_VAR 0 4
74558: PPUSH
74559: LD_VAR 0 2
74563: PPUSH
74564: CALL_OW 259
74568: PPUSH
74569: CALL_OW 2
74573: ST_TO_ADDR
74574: GO 74532
74576: POP
74577: POP
// if not tmp then
74578: LD_VAR 0 5
74582: NOT
74583: IFFALSE 74587
// exit ;
74585: GO 74607
// result := SortListByListDesc ( units , tmp ) ;
74587: LD_ADDR_VAR 0 3
74591: PUSH
74592: LD_VAR 0 1
74596: PPUSH
74597: LD_VAR 0 5
74601: PPUSH
74602: CALL_OW 77
74606: ST_TO_ADDR
// end ;
74607: LD_VAR 0 3
74611: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74612: LD_INT 0
74614: PPUSH
74615: PPUSH
74616: PPUSH
// result := false ;
74617: LD_ADDR_VAR 0 3
74621: PUSH
74622: LD_INT 0
74624: ST_TO_ADDR
// x := GetX ( building ) ;
74625: LD_ADDR_VAR 0 4
74629: PUSH
74630: LD_VAR 0 2
74634: PPUSH
74635: CALL_OW 250
74639: ST_TO_ADDR
// y := GetY ( building ) ;
74640: LD_ADDR_VAR 0 5
74644: PUSH
74645: LD_VAR 0 2
74649: PPUSH
74650: CALL_OW 251
74654: ST_TO_ADDR
// if not building or not x or not y then
74655: LD_VAR 0 2
74659: NOT
74660: PUSH
74661: LD_VAR 0 4
74665: NOT
74666: OR
74667: PUSH
74668: LD_VAR 0 5
74672: NOT
74673: OR
74674: IFFALSE 74678
// exit ;
74676: GO 74770
// if GetTaskList ( unit ) then
74678: LD_VAR 0 1
74682: PPUSH
74683: CALL_OW 437
74687: IFFALSE 74770
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74689: LD_STRING e
74691: PUSH
74692: LD_VAR 0 1
74696: PPUSH
74697: CALL_OW 437
74701: PUSH
74702: LD_INT 1
74704: ARRAY
74705: PUSH
74706: LD_INT 1
74708: ARRAY
74709: EQUAL
74710: PUSH
74711: LD_VAR 0 4
74715: PUSH
74716: LD_VAR 0 1
74720: PPUSH
74721: CALL_OW 437
74725: PUSH
74726: LD_INT 1
74728: ARRAY
74729: PUSH
74730: LD_INT 2
74732: ARRAY
74733: EQUAL
74734: AND
74735: PUSH
74736: LD_VAR 0 5
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: CALL_OW 437
74750: PUSH
74751: LD_INT 1
74753: ARRAY
74754: PUSH
74755: LD_INT 3
74757: ARRAY
74758: EQUAL
74759: AND
74760: IFFALSE 74770
// result := true end ;
74762: LD_ADDR_VAR 0 3
74766: PUSH
74767: LD_INT 1
74769: ST_TO_ADDR
// end ;
74770: LD_VAR 0 3
74774: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74775: LD_INT 0
74777: PPUSH
// result := false ;
74778: LD_ADDR_VAR 0 4
74782: PUSH
74783: LD_INT 0
74785: ST_TO_ADDR
// if GetTaskList ( unit ) then
74786: LD_VAR 0 1
74790: PPUSH
74791: CALL_OW 437
74795: IFFALSE 74878
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74797: LD_STRING M
74799: PUSH
74800: LD_VAR 0 1
74804: PPUSH
74805: CALL_OW 437
74809: PUSH
74810: LD_INT 1
74812: ARRAY
74813: PUSH
74814: LD_INT 1
74816: ARRAY
74817: EQUAL
74818: PUSH
74819: LD_VAR 0 2
74823: PUSH
74824: LD_VAR 0 1
74828: PPUSH
74829: CALL_OW 437
74833: PUSH
74834: LD_INT 1
74836: ARRAY
74837: PUSH
74838: LD_INT 2
74840: ARRAY
74841: EQUAL
74842: AND
74843: PUSH
74844: LD_VAR 0 3
74848: PUSH
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 437
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PUSH
74863: LD_INT 3
74865: ARRAY
74866: EQUAL
74867: AND
74868: IFFALSE 74878
// result := true ;
74870: LD_ADDR_VAR 0 4
74874: PUSH
74875: LD_INT 1
74877: ST_TO_ADDR
// end ; end ;
74878: LD_VAR 0 4
74882: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74883: LD_INT 0
74885: PPUSH
74886: PPUSH
74887: PPUSH
74888: PPUSH
// if not unit or not area then
74889: LD_VAR 0 1
74893: NOT
74894: PUSH
74895: LD_VAR 0 2
74899: NOT
74900: OR
74901: IFFALSE 74905
// exit ;
74903: GO 75069
// tmp := AreaToList ( area , i ) ;
74905: LD_ADDR_VAR 0 6
74909: PUSH
74910: LD_VAR 0 2
74914: PPUSH
74915: LD_VAR 0 5
74919: PPUSH
74920: CALL_OW 517
74924: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74925: LD_ADDR_VAR 0 5
74929: PUSH
74930: DOUBLE
74931: LD_INT 1
74933: DEC
74934: ST_TO_ADDR
74935: LD_VAR 0 6
74939: PUSH
74940: LD_INT 1
74942: ARRAY
74943: PUSH
74944: FOR_TO
74945: IFFALSE 75067
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74947: LD_ADDR_VAR 0 7
74951: PUSH
74952: LD_VAR 0 6
74956: PUSH
74957: LD_INT 1
74959: ARRAY
74960: PUSH
74961: LD_VAR 0 5
74965: ARRAY
74966: PUSH
74967: LD_VAR 0 6
74971: PUSH
74972: LD_INT 2
74974: ARRAY
74975: PUSH
74976: LD_VAR 0 5
74980: ARRAY
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74986: LD_VAR 0 7
74990: PUSH
74991: LD_INT 1
74993: ARRAY
74994: PPUSH
74995: LD_VAR 0 7
74999: PUSH
75000: LD_INT 2
75002: ARRAY
75003: PPUSH
75004: CALL_OW 428
75008: PUSH
75009: LD_INT 0
75011: EQUAL
75012: IFFALSE 75065
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75014: LD_VAR 0 1
75018: PPUSH
75019: LD_VAR 0 7
75023: PUSH
75024: LD_INT 1
75026: ARRAY
75027: PPUSH
75028: LD_VAR 0 7
75032: PUSH
75033: LD_INT 2
75035: ARRAY
75036: PPUSH
75037: LD_VAR 0 3
75041: PPUSH
75042: CALL_OW 48
// result := IsPlaced ( unit ) ;
75046: LD_ADDR_VAR 0 4
75050: PUSH
75051: LD_VAR 0 1
75055: PPUSH
75056: CALL_OW 305
75060: ST_TO_ADDR
// exit ;
75061: POP
75062: POP
75063: GO 75069
// end ; end ;
75065: GO 74944
75067: POP
75068: POP
// end ;
75069: LD_VAR 0 4
75073: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75074: LD_INT 0
75076: PPUSH
75077: PPUSH
75078: PPUSH
// if not side or side > 8 then
75079: LD_VAR 0 1
75083: NOT
75084: PUSH
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 8
75092: GREATER
75093: OR
75094: IFFALSE 75098
// exit ;
75096: GO 75285
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75098: LD_ADDR_VAR 0 4
75102: PUSH
75103: LD_INT 22
75105: PUSH
75106: LD_VAR 0 1
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 21
75117: PUSH
75118: LD_INT 3
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PPUSH
75129: CALL_OW 69
75133: ST_TO_ADDR
// if not tmp then
75134: LD_VAR 0 4
75138: NOT
75139: IFFALSE 75143
// exit ;
75141: GO 75285
// enable_addtolog := true ;
75143: LD_ADDR_OWVAR 81
75147: PUSH
75148: LD_INT 1
75150: ST_TO_ADDR
// AddToLog ( [ ) ;
75151: LD_STRING [
75153: PPUSH
75154: CALL_OW 561
// for i in tmp do
75158: LD_ADDR_VAR 0 3
75162: PUSH
75163: LD_VAR 0 4
75167: PUSH
75168: FOR_IN
75169: IFFALSE 75276
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75171: LD_STRING [
75173: PUSH
75174: LD_VAR 0 3
75178: PPUSH
75179: CALL_OW 266
75183: STR
75184: PUSH
75185: LD_STRING , 
75187: STR
75188: PUSH
75189: LD_VAR 0 3
75193: PPUSH
75194: CALL_OW 250
75198: STR
75199: PUSH
75200: LD_STRING , 
75202: STR
75203: PUSH
75204: LD_VAR 0 3
75208: PPUSH
75209: CALL_OW 251
75213: STR
75214: PUSH
75215: LD_STRING , 
75217: STR
75218: PUSH
75219: LD_VAR 0 3
75223: PPUSH
75224: CALL_OW 254
75228: STR
75229: PUSH
75230: LD_STRING , 
75232: STR
75233: PUSH
75234: LD_VAR 0 3
75238: PPUSH
75239: LD_INT 1
75241: PPUSH
75242: CALL_OW 268
75246: STR
75247: PUSH
75248: LD_STRING , 
75250: STR
75251: PUSH
75252: LD_VAR 0 3
75256: PPUSH
75257: LD_INT 2
75259: PPUSH
75260: CALL_OW 268
75264: STR
75265: PUSH
75266: LD_STRING ],
75268: STR
75269: PPUSH
75270: CALL_OW 561
// end ;
75274: GO 75168
75276: POP
75277: POP
// AddToLog ( ]; ) ;
75278: LD_STRING ];
75280: PPUSH
75281: CALL_OW 561
// end ;
75285: LD_VAR 0 2
75289: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75290: LD_INT 0
75292: PPUSH
75293: PPUSH
75294: PPUSH
75295: PPUSH
75296: PPUSH
// if not area or not rate or not max then
75297: LD_VAR 0 1
75301: NOT
75302: PUSH
75303: LD_VAR 0 2
75307: NOT
75308: OR
75309: PUSH
75310: LD_VAR 0 4
75314: NOT
75315: OR
75316: IFFALSE 75320
// exit ;
75318: GO 75512
// while 1 do
75320: LD_INT 1
75322: IFFALSE 75512
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75324: LD_ADDR_VAR 0 9
75328: PUSH
75329: LD_VAR 0 1
75333: PPUSH
75334: LD_INT 1
75336: PPUSH
75337: CALL_OW 287
75341: PUSH
75342: LD_INT 10
75344: MUL
75345: ST_TO_ADDR
// r := rate / 10 ;
75346: LD_ADDR_VAR 0 7
75350: PUSH
75351: LD_VAR 0 2
75355: PUSH
75356: LD_INT 10
75358: DIVREAL
75359: ST_TO_ADDR
// time := 1 1$00 ;
75360: LD_ADDR_VAR 0 8
75364: PUSH
75365: LD_INT 2100
75367: ST_TO_ADDR
// if amount < min then
75368: LD_VAR 0 9
75372: PUSH
75373: LD_VAR 0 3
75377: LESS
75378: IFFALSE 75396
// r := r * 2 else
75380: LD_ADDR_VAR 0 7
75384: PUSH
75385: LD_VAR 0 7
75389: PUSH
75390: LD_INT 2
75392: MUL
75393: ST_TO_ADDR
75394: GO 75422
// if amount > max then
75396: LD_VAR 0 9
75400: PUSH
75401: LD_VAR 0 4
75405: GREATER
75406: IFFALSE 75422
// r := r / 2 ;
75408: LD_ADDR_VAR 0 7
75412: PUSH
75413: LD_VAR 0 7
75417: PUSH
75418: LD_INT 2
75420: DIVREAL
75421: ST_TO_ADDR
// time := time / r ;
75422: LD_ADDR_VAR 0 8
75426: PUSH
75427: LD_VAR 0 8
75431: PUSH
75432: LD_VAR 0 7
75436: DIVREAL
75437: ST_TO_ADDR
// if time < 0 then
75438: LD_VAR 0 8
75442: PUSH
75443: LD_INT 0
75445: LESS
75446: IFFALSE 75463
// time := time * - 1 ;
75448: LD_ADDR_VAR 0 8
75452: PUSH
75453: LD_VAR 0 8
75457: PUSH
75458: LD_INT 1
75460: NEG
75461: MUL
75462: ST_TO_ADDR
// wait ( time ) ;
75463: LD_VAR 0 8
75467: PPUSH
75468: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75472: LD_INT 35
75474: PPUSH
75475: LD_INT 875
75477: PPUSH
75478: CALL_OW 12
75482: PPUSH
75483: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75487: LD_INT 1
75489: PPUSH
75490: LD_INT 5
75492: PPUSH
75493: CALL_OW 12
75497: PPUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: LD_INT 1
75505: PPUSH
75506: CALL_OW 55
// end ;
75510: GO 75320
// end ;
75512: LD_VAR 0 5
75516: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75517: LD_INT 0
75519: PPUSH
75520: PPUSH
75521: PPUSH
75522: PPUSH
75523: PPUSH
75524: PPUSH
75525: PPUSH
75526: PPUSH
// if not turrets or not factories then
75527: LD_VAR 0 1
75531: NOT
75532: PUSH
75533: LD_VAR 0 2
75537: NOT
75538: OR
75539: IFFALSE 75543
// exit ;
75541: GO 75850
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75543: LD_ADDR_VAR 0 10
75547: PUSH
75548: LD_INT 5
75550: PUSH
75551: LD_INT 6
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: LD_INT 4
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: LD_INT 3
75570: PUSH
75571: LD_INT 5
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 24
75585: PUSH
75586: LD_INT 25
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: PUSH
75593: LD_INT 23
75595: PUSH
75596: LD_INT 27
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 42
75609: PUSH
75610: LD_INT 43
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 44
75619: PUSH
75620: LD_INT 46
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 45
75629: PUSH
75630: LD_INT 47
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: LIST
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: LIST
75646: ST_TO_ADDR
// result := [ ] ;
75647: LD_ADDR_VAR 0 3
75651: PUSH
75652: EMPTY
75653: ST_TO_ADDR
// for i in turrets do
75654: LD_ADDR_VAR 0 4
75658: PUSH
75659: LD_VAR 0 1
75663: PUSH
75664: FOR_IN
75665: IFFALSE 75848
// begin nat := GetNation ( i ) ;
75667: LD_ADDR_VAR 0 7
75671: PUSH
75672: LD_VAR 0 4
75676: PPUSH
75677: CALL_OW 248
75681: ST_TO_ADDR
// weapon := 0 ;
75682: LD_ADDR_VAR 0 8
75686: PUSH
75687: LD_INT 0
75689: ST_TO_ADDR
// if not nat then
75690: LD_VAR 0 7
75694: NOT
75695: IFFALSE 75699
// continue ;
75697: GO 75664
// for j in list [ nat ] do
75699: LD_ADDR_VAR 0 5
75703: PUSH
75704: LD_VAR 0 10
75708: PUSH
75709: LD_VAR 0 7
75713: ARRAY
75714: PUSH
75715: FOR_IN
75716: IFFALSE 75757
// if GetBWeapon ( i ) = j [ 1 ] then
75718: LD_VAR 0 4
75722: PPUSH
75723: CALL_OW 269
75727: PUSH
75728: LD_VAR 0 5
75732: PUSH
75733: LD_INT 1
75735: ARRAY
75736: EQUAL
75737: IFFALSE 75755
// begin weapon := j [ 2 ] ;
75739: LD_ADDR_VAR 0 8
75743: PUSH
75744: LD_VAR 0 5
75748: PUSH
75749: LD_INT 2
75751: ARRAY
75752: ST_TO_ADDR
// break ;
75753: GO 75757
// end ;
75755: GO 75715
75757: POP
75758: POP
// if not weapon then
75759: LD_VAR 0 8
75763: NOT
75764: IFFALSE 75768
// continue ;
75766: GO 75664
// for k in factories do
75768: LD_ADDR_VAR 0 6
75772: PUSH
75773: LD_VAR 0 2
75777: PUSH
75778: FOR_IN
75779: IFFALSE 75844
// begin weapons := AvailableWeaponList ( k ) ;
75781: LD_ADDR_VAR 0 9
75785: PUSH
75786: LD_VAR 0 6
75790: PPUSH
75791: CALL_OW 478
75795: ST_TO_ADDR
// if not weapons then
75796: LD_VAR 0 9
75800: NOT
75801: IFFALSE 75805
// continue ;
75803: GO 75778
// if weapon in weapons then
75805: LD_VAR 0 8
75809: PUSH
75810: LD_VAR 0 9
75814: IN
75815: IFFALSE 75842
// begin result := [ i , weapon ] ;
75817: LD_ADDR_VAR 0 3
75821: PUSH
75822: LD_VAR 0 4
75826: PUSH
75827: LD_VAR 0 8
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: ST_TO_ADDR
// exit ;
75836: POP
75837: POP
75838: POP
75839: POP
75840: GO 75850
// end ; end ;
75842: GO 75778
75844: POP
75845: POP
// end ;
75846: GO 75664
75848: POP
75849: POP
// end ;
75850: LD_VAR 0 3
75854: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75855: LD_INT 0
75857: PPUSH
// if not side or side > 8 then
75858: LD_VAR 0 3
75862: NOT
75863: PUSH
75864: LD_VAR 0 3
75868: PUSH
75869: LD_INT 8
75871: GREATER
75872: OR
75873: IFFALSE 75877
// exit ;
75875: GO 75936
// if not range then
75877: LD_VAR 0 4
75881: NOT
75882: IFFALSE 75893
// range := - 12 ;
75884: LD_ADDR_VAR 0 4
75888: PUSH
75889: LD_INT 12
75891: NEG
75892: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: LD_VAR 0 3
75907: PPUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 2
75926: PPUSH
75927: LD_VAR 0 3
75931: PPUSH
75932: CALL_OW 331
// end ;
75936: LD_VAR 0 5
75940: RET
// export function Video ( mode ) ; begin
75941: LD_INT 0
75943: PPUSH
// ingame_video = mode ;
75944: LD_ADDR_OWVAR 52
75948: PUSH
75949: LD_VAR 0 1
75953: ST_TO_ADDR
// interface_hidden = mode ;
75954: LD_ADDR_OWVAR 54
75958: PUSH
75959: LD_VAR 0 1
75963: ST_TO_ADDR
// end ;
75964: LD_VAR 0 2
75968: RET
// export function Join ( array , element ) ; begin
75969: LD_INT 0
75971: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75972: LD_ADDR_VAR 0 3
75976: PUSH
75977: LD_VAR 0 1
75981: PPUSH
75982: LD_VAR 0 1
75986: PUSH
75987: LD_INT 1
75989: PLUS
75990: PPUSH
75991: LD_VAR 0 2
75995: PPUSH
75996: CALL_OW 1
76000: ST_TO_ADDR
// end ;
76001: LD_VAR 0 3
76005: RET
// export function JoinUnion ( array , element ) ; begin
76006: LD_INT 0
76008: PPUSH
// result := array union element ;
76009: LD_ADDR_VAR 0 3
76013: PUSH
76014: LD_VAR 0 1
76018: PUSH
76019: LD_VAR 0 2
76023: UNION
76024: ST_TO_ADDR
// end ;
76025: LD_VAR 0 3
76029: RET
// export function GetBehemoths ( side ) ; begin
76030: LD_INT 0
76032: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76033: LD_ADDR_VAR 0 2
76037: PUSH
76038: LD_INT 22
76040: PUSH
76041: LD_VAR 0 1
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 31
76052: PUSH
76053: LD_INT 25
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PPUSH
76064: CALL_OW 69
76068: ST_TO_ADDR
// end ;
76069: LD_VAR 0 2
76073: RET
// export function Shuffle ( array ) ; var i , index ; begin
76074: LD_INT 0
76076: PPUSH
76077: PPUSH
76078: PPUSH
// result := [ ] ;
76079: LD_ADDR_VAR 0 2
76083: PUSH
76084: EMPTY
76085: ST_TO_ADDR
// if not array then
76086: LD_VAR 0 1
76090: NOT
76091: IFFALSE 76095
// exit ;
76093: GO 76194
// Randomize ;
76095: CALL_OW 10
// for i = array downto 1 do
76099: LD_ADDR_VAR 0 3
76103: PUSH
76104: DOUBLE
76105: LD_VAR 0 1
76109: INC
76110: ST_TO_ADDR
76111: LD_INT 1
76113: PUSH
76114: FOR_DOWNTO
76115: IFFALSE 76192
// begin index := rand ( 1 , array ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_INT 1
76124: PPUSH
76125: LD_VAR 0 1
76129: PPUSH
76130: CALL_OW 12
76134: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76135: LD_ADDR_VAR 0 2
76139: PUSH
76140: LD_VAR 0 2
76144: PPUSH
76145: LD_VAR 0 2
76149: PUSH
76150: LD_INT 1
76152: PLUS
76153: PPUSH
76154: LD_VAR 0 1
76158: PUSH
76159: LD_VAR 0 4
76163: ARRAY
76164: PPUSH
76165: CALL_OW 2
76169: ST_TO_ADDR
// array := Delete ( array , index ) ;
76170: LD_ADDR_VAR 0 1
76174: PUSH
76175: LD_VAR 0 1
76179: PPUSH
76180: LD_VAR 0 4
76184: PPUSH
76185: CALL_OW 3
76189: ST_TO_ADDR
// end ;
76190: GO 76114
76192: POP
76193: POP
// end ;
76194: LD_VAR 0 2
76198: RET
// export function GetBaseMaterials ( base ) ; begin
76199: LD_INT 0
76201: PPUSH
// result := [ 0 , 0 , 0 ] ;
76202: LD_ADDR_VAR 0 2
76206: PUSH
76207: LD_INT 0
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: LD_INT 0
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: ST_TO_ADDR
// if not base then
76221: LD_VAR 0 1
76225: NOT
76226: IFFALSE 76230
// exit ;
76228: GO 76279
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76230: LD_ADDR_VAR 0 2
76234: PUSH
76235: LD_VAR 0 1
76239: PPUSH
76240: LD_INT 1
76242: PPUSH
76243: CALL_OW 275
76247: PUSH
76248: LD_VAR 0 1
76252: PPUSH
76253: LD_INT 2
76255: PPUSH
76256: CALL_OW 275
76260: PUSH
76261: LD_VAR 0 1
76265: PPUSH
76266: LD_INT 3
76268: PPUSH
76269: CALL_OW 275
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: LIST
76278: ST_TO_ADDR
// end ;
76279: LD_VAR 0 2
76283: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76284: LD_INT 0
76286: PPUSH
76287: PPUSH
// result := array ;
76288: LD_ADDR_VAR 0 3
76292: PUSH
76293: LD_VAR 0 1
76297: ST_TO_ADDR
// if size > 0 then
76298: LD_VAR 0 2
76302: PUSH
76303: LD_INT 0
76305: GREATER
76306: IFFALSE 76352
// for i := array downto size do
76308: LD_ADDR_VAR 0 4
76312: PUSH
76313: DOUBLE
76314: LD_VAR 0 1
76318: INC
76319: ST_TO_ADDR
76320: LD_VAR 0 2
76324: PUSH
76325: FOR_DOWNTO
76326: IFFALSE 76350
// result := Delete ( result , result ) ;
76328: LD_ADDR_VAR 0 3
76332: PUSH
76333: LD_VAR 0 3
76337: PPUSH
76338: LD_VAR 0 3
76342: PPUSH
76343: CALL_OW 3
76347: ST_TO_ADDR
76348: GO 76325
76350: POP
76351: POP
// end ;
76352: LD_VAR 0 3
76356: RET
// export function ComExit ( unit ) ; var tmp ; begin
76357: LD_INT 0
76359: PPUSH
76360: PPUSH
// if not IsInUnit ( unit ) then
76361: LD_VAR 0 1
76365: PPUSH
76366: CALL_OW 310
76370: NOT
76371: IFFALSE 76375
// exit ;
76373: GO 76435
// tmp := IsInUnit ( unit ) ;
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 1
76384: PPUSH
76385: CALL_OW 310
76389: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76390: LD_VAR 0 3
76394: PPUSH
76395: CALL_OW 247
76399: PUSH
76400: LD_INT 2
76402: EQUAL
76403: IFFALSE 76416
// ComExitVehicle ( unit ) else
76405: LD_VAR 0 1
76409: PPUSH
76410: CALL_OW 121
76414: GO 76425
// ComExitBuilding ( unit ) ;
76416: LD_VAR 0 1
76420: PPUSH
76421: CALL_OW 122
// result := tmp ;
76425: LD_ADDR_VAR 0 2
76429: PUSH
76430: LD_VAR 0 3
76434: ST_TO_ADDR
// end ;
76435: LD_VAR 0 2
76439: RET
// export function ComExitAll ( units ) ; var i ; begin
76440: LD_INT 0
76442: PPUSH
76443: PPUSH
// if not units then
76444: LD_VAR 0 1
76448: NOT
76449: IFFALSE 76453
// exit ;
76451: GO 76479
// for i in units do
76453: LD_ADDR_VAR 0 3
76457: PUSH
76458: LD_VAR 0 1
76462: PUSH
76463: FOR_IN
76464: IFFALSE 76477
// ComExit ( i ) ;
76466: LD_VAR 0 3
76470: PPUSH
76471: CALL 76357 0 1
76475: GO 76463
76477: POP
76478: POP
// end ;
76479: LD_VAR 0 2
76483: RET
// export function ResetHc ; begin
76484: LD_INT 0
76486: PPUSH
// InitHc ;
76487: CALL_OW 19
// hc_importance := 0 ;
76491: LD_ADDR_OWVAR 32
76495: PUSH
76496: LD_INT 0
76498: ST_TO_ADDR
// end ;
76499: LD_VAR 0 1
76503: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76504: LD_INT 0
76506: PPUSH
76507: PPUSH
76508: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76509: LD_ADDR_VAR 0 6
76513: PUSH
76514: LD_VAR 0 1
76518: PUSH
76519: LD_VAR 0 3
76523: PLUS
76524: PUSH
76525: LD_INT 2
76527: DIV
76528: ST_TO_ADDR
// if _x < 0 then
76529: LD_VAR 0 6
76533: PUSH
76534: LD_INT 0
76536: LESS
76537: IFFALSE 76554
// _x := _x * - 1 ;
76539: LD_ADDR_VAR 0 6
76543: PUSH
76544: LD_VAR 0 6
76548: PUSH
76549: LD_INT 1
76551: NEG
76552: MUL
76553: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76554: LD_ADDR_VAR 0 7
76558: PUSH
76559: LD_VAR 0 2
76563: PUSH
76564: LD_VAR 0 4
76568: PLUS
76569: PUSH
76570: LD_INT 2
76572: DIV
76573: ST_TO_ADDR
// if _y < 0 then
76574: LD_VAR 0 7
76578: PUSH
76579: LD_INT 0
76581: LESS
76582: IFFALSE 76599
// _y := _y * - 1 ;
76584: LD_ADDR_VAR 0 7
76588: PUSH
76589: LD_VAR 0 7
76593: PUSH
76594: LD_INT 1
76596: NEG
76597: MUL
76598: ST_TO_ADDR
// result := [ _x , _y ] ;
76599: LD_ADDR_VAR 0 5
76603: PUSH
76604: LD_VAR 0 6
76608: PUSH
76609: LD_VAR 0 7
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: ST_TO_ADDR
// end ;
76618: LD_VAR 0 5
76622: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76623: LD_INT 0
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
// task := GetTaskList ( unit ) ;
76629: LD_ADDR_VAR 0 7
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 437
76643: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76644: LD_VAR 0 7
76648: NOT
76649: PUSH
76650: LD_VAR 0 1
76654: PPUSH
76655: LD_VAR 0 2
76659: PPUSH
76660: CALL_OW 308
76664: NOT
76665: AND
76666: IFFALSE 76670
// exit ;
76668: GO 76788
// if IsInArea ( unit , area ) then
76670: LD_VAR 0 1
76674: PPUSH
76675: LD_VAR 0 2
76679: PPUSH
76680: CALL_OW 308
76684: IFFALSE 76702
// begin ComMoveToArea ( unit , goAway ) ;
76686: LD_VAR 0 1
76690: PPUSH
76691: LD_VAR 0 3
76695: PPUSH
76696: CALL_OW 113
// exit ;
76700: GO 76788
// end ; if task [ 1 ] [ 1 ] <> M then
76702: LD_VAR 0 7
76706: PUSH
76707: LD_INT 1
76709: ARRAY
76710: PUSH
76711: LD_INT 1
76713: ARRAY
76714: PUSH
76715: LD_STRING M
76717: NONEQUAL
76718: IFFALSE 76722
// exit ;
76720: GO 76788
// x := task [ 1 ] [ 2 ] ;
76722: LD_ADDR_VAR 0 5
76726: PUSH
76727: LD_VAR 0 7
76731: PUSH
76732: LD_INT 1
76734: ARRAY
76735: PUSH
76736: LD_INT 2
76738: ARRAY
76739: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76740: LD_ADDR_VAR 0 6
76744: PUSH
76745: LD_VAR 0 7
76749: PUSH
76750: LD_INT 1
76752: ARRAY
76753: PUSH
76754: LD_INT 3
76756: ARRAY
76757: ST_TO_ADDR
// if InArea ( x , y , area ) then
76758: LD_VAR 0 5
76762: PPUSH
76763: LD_VAR 0 6
76767: PPUSH
76768: LD_VAR 0 2
76772: PPUSH
76773: CALL_OW 309
76777: IFFALSE 76788
// ComStop ( unit ) ;
76779: LD_VAR 0 1
76783: PPUSH
76784: CALL_OW 141
// end ;
76788: LD_VAR 0 4
76792: RET
// export function Abs ( value ) ; begin
76793: LD_INT 0
76795: PPUSH
// result := value ;
76796: LD_ADDR_VAR 0 2
76800: PUSH
76801: LD_VAR 0 1
76805: ST_TO_ADDR
// if value < 0 then
76806: LD_VAR 0 1
76810: PUSH
76811: LD_INT 0
76813: LESS
76814: IFFALSE 76831
// result := value * - 1 ;
76816: LD_ADDR_VAR 0 2
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_INT 1
76828: NEG
76829: MUL
76830: ST_TO_ADDR
// end ;
76831: LD_VAR 0 2
76835: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76836: LD_INT 0
76838: PPUSH
76839: PPUSH
76840: PPUSH
76841: PPUSH
76842: PPUSH
76843: PPUSH
76844: PPUSH
76845: PPUSH
// if not unit or not building then
76846: LD_VAR 0 1
76850: NOT
76851: PUSH
76852: LD_VAR 0 2
76856: NOT
76857: OR
76858: IFFALSE 76862
// exit ;
76860: GO 77088
// x := GetX ( building ) ;
76862: LD_ADDR_VAR 0 4
76866: PUSH
76867: LD_VAR 0 2
76871: PPUSH
76872: CALL_OW 250
76876: ST_TO_ADDR
// y := GetY ( building ) ;
76877: LD_ADDR_VAR 0 6
76881: PUSH
76882: LD_VAR 0 2
76886: PPUSH
76887: CALL_OW 251
76891: ST_TO_ADDR
// d := GetDir ( building ) ;
76892: LD_ADDR_VAR 0 8
76896: PUSH
76897: LD_VAR 0 2
76901: PPUSH
76902: CALL_OW 254
76906: ST_TO_ADDR
// r := 4 ;
76907: LD_ADDR_VAR 0 9
76911: PUSH
76912: LD_INT 4
76914: ST_TO_ADDR
// for i := 1 to 5 do
76915: LD_ADDR_VAR 0 10
76919: PUSH
76920: DOUBLE
76921: LD_INT 1
76923: DEC
76924: ST_TO_ADDR
76925: LD_INT 5
76927: PUSH
76928: FOR_TO
76929: IFFALSE 77086
// begin _x := ShiftX ( x , d , r + i ) ;
76931: LD_ADDR_VAR 0 5
76935: PUSH
76936: LD_VAR 0 4
76940: PPUSH
76941: LD_VAR 0 8
76945: PPUSH
76946: LD_VAR 0 9
76950: PUSH
76951: LD_VAR 0 10
76955: PLUS
76956: PPUSH
76957: CALL_OW 272
76961: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76962: LD_ADDR_VAR 0 7
76966: PUSH
76967: LD_VAR 0 6
76971: PPUSH
76972: LD_VAR 0 8
76976: PPUSH
76977: LD_VAR 0 9
76981: PUSH
76982: LD_VAR 0 10
76986: PLUS
76987: PPUSH
76988: CALL_OW 273
76992: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76993: LD_VAR 0 5
76997: PPUSH
76998: LD_VAR 0 7
77002: PPUSH
77003: CALL_OW 488
77007: PUSH
77008: LD_VAR 0 5
77012: PPUSH
77013: LD_VAR 0 7
77017: PPUSH
77018: CALL_OW 428
77022: PPUSH
77023: CALL_OW 247
77027: PUSH
77028: LD_INT 3
77030: PUSH
77031: LD_INT 2
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: IN
77038: NOT
77039: AND
77040: IFFALSE 77084
// begin ComMoveXY ( unit , _x , _y ) ;
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_VAR 0 5
77051: PPUSH
77052: LD_VAR 0 7
77056: PPUSH
77057: CALL_OW 111
// result := [ _x , _y ] ;
77061: LD_ADDR_VAR 0 3
77065: PUSH
77066: LD_VAR 0 5
77070: PUSH
77071: LD_VAR 0 7
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: ST_TO_ADDR
// exit ;
77080: POP
77081: POP
77082: GO 77088
// end ; end ;
77084: GO 76928
77086: POP
77087: POP
// end ;
77088: LD_VAR 0 3
77092: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77093: LD_INT 0
77095: PPUSH
77096: PPUSH
77097: PPUSH
// result := 0 ;
77098: LD_ADDR_VAR 0 3
77102: PUSH
77103: LD_INT 0
77105: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77106: LD_VAR 0 1
77110: PUSH
77111: LD_INT 0
77113: LESS
77114: PUSH
77115: LD_VAR 0 1
77119: PUSH
77120: LD_INT 8
77122: GREATER
77123: OR
77124: PUSH
77125: LD_VAR 0 2
77129: PUSH
77130: LD_INT 0
77132: LESS
77133: OR
77134: PUSH
77135: LD_VAR 0 2
77139: PUSH
77140: LD_INT 8
77142: GREATER
77143: OR
77144: IFFALSE 77148
// exit ;
77146: GO 77223
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77148: LD_ADDR_VAR 0 4
77152: PUSH
77153: LD_INT 22
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PPUSH
77165: CALL_OW 69
77169: PUSH
77170: FOR_IN
77171: IFFALSE 77221
// begin un := UnitShoot ( i ) ;
77173: LD_ADDR_VAR 0 5
77177: PUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 504
77187: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77188: LD_VAR 0 5
77192: PPUSH
77193: CALL_OW 255
77197: PUSH
77198: LD_VAR 0 1
77202: EQUAL
77203: IFFALSE 77219
// begin result := un ;
77205: LD_ADDR_VAR 0 3
77209: PUSH
77210: LD_VAR 0 5
77214: ST_TO_ADDR
// exit ;
77215: POP
77216: POP
77217: GO 77223
// end ; end ;
77219: GO 77170
77221: POP
77222: POP
// end ;
77223: LD_VAR 0 3
77227: RET
// export function GetCargoBay ( units ) ; begin
77228: LD_INT 0
77230: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77231: LD_ADDR_VAR 0 2
77235: PUSH
77236: LD_VAR 0 1
77240: PPUSH
77241: LD_INT 2
77243: PUSH
77244: LD_INT 34
77246: PUSH
77247: LD_INT 12
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 34
77256: PUSH
77257: LD_INT 51
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 34
77266: PUSH
77267: LD_INT 32
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 34
77276: PUSH
77277: LD_EXP 50
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: EMPTY
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: PPUSH
77293: CALL_OW 72
77297: ST_TO_ADDR
// end ;
77298: LD_VAR 0 2
77302: RET
// export function Negate ( value ) ; begin
77303: LD_INT 0
77305: PPUSH
// result := not value ;
77306: LD_ADDR_VAR 0 2
77310: PUSH
77311: LD_VAR 0 1
77315: NOT
77316: ST_TO_ADDR
// end ;
77317: LD_VAR 0 2
77321: RET
// export function Inc ( value ) ; begin
77322: LD_INT 0
77324: PPUSH
// result := value + 1 ;
77325: LD_ADDR_VAR 0 2
77329: PUSH
77330: LD_VAR 0 1
77334: PUSH
77335: LD_INT 1
77337: PLUS
77338: ST_TO_ADDR
// end ;
77339: LD_VAR 0 2
77343: RET
// export function Dec ( value ) ; begin
77344: LD_INT 0
77346: PPUSH
// result := value - 1 ;
77347: LD_ADDR_VAR 0 2
77351: PUSH
77352: LD_VAR 0 1
77356: PUSH
77357: LD_INT 1
77359: MINUS
77360: ST_TO_ADDR
// end ;
77361: LD_VAR 0 2
77365: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
77370: PPUSH
77371: PPUSH
77372: PPUSH
77373: PPUSH
77374: PPUSH
77375: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77376: LD_VAR 0 1
77380: PPUSH
77381: LD_VAR 0 2
77385: PPUSH
77386: CALL_OW 488
77390: NOT
77391: PUSH
77392: LD_VAR 0 3
77396: PPUSH
77397: LD_VAR 0 4
77401: PPUSH
77402: CALL_OW 488
77406: NOT
77407: OR
77408: IFFALSE 77421
// begin result := - 1 ;
77410: LD_ADDR_VAR 0 5
77414: PUSH
77415: LD_INT 1
77417: NEG
77418: ST_TO_ADDR
// exit ;
77419: GO 77656
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77421: LD_ADDR_VAR 0 12
77425: PUSH
77426: LD_VAR 0 1
77430: PPUSH
77431: LD_VAR 0 2
77435: PPUSH
77436: LD_VAR 0 3
77440: PPUSH
77441: LD_VAR 0 4
77445: PPUSH
77446: CALL 76504 0 4
77450: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77451: LD_ADDR_VAR 0 11
77455: PUSH
77456: LD_VAR 0 1
77460: PPUSH
77461: LD_VAR 0 2
77465: PPUSH
77466: LD_VAR 0 12
77470: PUSH
77471: LD_INT 1
77473: ARRAY
77474: PPUSH
77475: LD_VAR 0 12
77479: PUSH
77480: LD_INT 2
77482: ARRAY
77483: PPUSH
77484: CALL_OW 298
77488: ST_TO_ADDR
// distance := 9999 ;
77489: LD_ADDR_VAR 0 10
77493: PUSH
77494: LD_INT 9999
77496: ST_TO_ADDR
// for i := 0 to 5 do
77497: LD_ADDR_VAR 0 6
77501: PUSH
77502: DOUBLE
77503: LD_INT 0
77505: DEC
77506: ST_TO_ADDR
77507: LD_INT 5
77509: PUSH
77510: FOR_TO
77511: IFFALSE 77654
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77513: LD_ADDR_VAR 0 7
77517: PUSH
77518: LD_VAR 0 1
77522: PPUSH
77523: LD_VAR 0 6
77527: PPUSH
77528: LD_VAR 0 11
77532: PPUSH
77533: CALL_OW 272
77537: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77538: LD_ADDR_VAR 0 8
77542: PUSH
77543: LD_VAR 0 2
77547: PPUSH
77548: LD_VAR 0 6
77552: PPUSH
77553: LD_VAR 0 11
77557: PPUSH
77558: CALL_OW 273
77562: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77563: LD_VAR 0 7
77567: PPUSH
77568: LD_VAR 0 8
77572: PPUSH
77573: CALL_OW 488
77577: NOT
77578: IFFALSE 77582
// continue ;
77580: GO 77510
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77582: LD_ADDR_VAR 0 9
77586: PUSH
77587: LD_VAR 0 12
77591: PUSH
77592: LD_INT 1
77594: ARRAY
77595: PPUSH
77596: LD_VAR 0 12
77600: PUSH
77601: LD_INT 2
77603: ARRAY
77604: PPUSH
77605: LD_VAR 0 7
77609: PPUSH
77610: LD_VAR 0 8
77614: PPUSH
77615: CALL_OW 298
77619: ST_TO_ADDR
// if tmp < distance then
77620: LD_VAR 0 9
77624: PUSH
77625: LD_VAR 0 10
77629: LESS
77630: IFFALSE 77652
// begin result := i ;
77632: LD_ADDR_VAR 0 5
77636: PUSH
77637: LD_VAR 0 6
77641: ST_TO_ADDR
// distance := tmp ;
77642: LD_ADDR_VAR 0 10
77646: PUSH
77647: LD_VAR 0 9
77651: ST_TO_ADDR
// end ; end ;
77652: GO 77510
77654: POP
77655: POP
// end ;
77656: LD_VAR 0 5
77660: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77661: LD_INT 0
77663: PPUSH
77664: PPUSH
// if not driver or not IsInUnit ( driver ) then
77665: LD_VAR 0 1
77669: NOT
77670: PUSH
77671: LD_VAR 0 1
77675: PPUSH
77676: CALL_OW 310
77680: NOT
77681: OR
77682: IFFALSE 77686
// exit ;
77684: GO 77776
// vehicle := IsInUnit ( driver ) ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 310
77700: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77701: LD_VAR 0 1
77705: PPUSH
77706: LD_STRING \
77708: PUSH
77709: LD_INT 0
77711: PUSH
77712: LD_INT 0
77714: PUSH
77715: LD_INT 0
77717: PUSH
77718: LD_INT 0
77720: PUSH
77721: LD_INT 0
77723: PUSH
77724: LD_INT 0
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: PUSH
77736: LD_STRING E
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: LD_INT 0
77744: PUSH
77745: LD_VAR 0 3
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: LD_INT 0
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: LIST
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PPUSH
77772: CALL_OW 446
// end ;
77776: LD_VAR 0 2
77780: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
// if not driver or not IsInUnit ( driver ) then
77785: LD_VAR 0 1
77789: NOT
77790: PUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: CALL_OW 310
77800: NOT
77801: OR
77802: IFFALSE 77806
// exit ;
77804: GO 77896
// vehicle := IsInUnit ( driver ) ;
77806: LD_ADDR_VAR 0 3
77810: PUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: CALL_OW 310
77820: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77821: LD_VAR 0 1
77825: PPUSH
77826: LD_STRING \
77828: PUSH
77829: LD_INT 0
77831: PUSH
77832: LD_INT 0
77834: PUSH
77835: LD_INT 0
77837: PUSH
77838: LD_INT 0
77840: PUSH
77841: LD_INT 0
77843: PUSH
77844: LD_INT 0
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: PUSH
77856: LD_STRING E
77858: PUSH
77859: LD_INT 0
77861: PUSH
77862: LD_INT 0
77864: PUSH
77865: LD_VAR 0 3
77869: PUSH
77870: LD_INT 0
77872: PUSH
77873: LD_INT 0
77875: PUSH
77876: LD_INT 0
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PPUSH
77892: CALL_OW 447
// end ;
77896: LD_VAR 0 2
77900: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77901: LD_INT 0
77903: PPUSH
77904: PPUSH
77905: PPUSH
// tmp := [ ] ;
77906: LD_ADDR_VAR 0 5
77910: PUSH
77911: EMPTY
77912: ST_TO_ADDR
// for i in units do
77913: LD_ADDR_VAR 0 4
77917: PUSH
77918: LD_VAR 0 1
77922: PUSH
77923: FOR_IN
77924: IFFALSE 77962
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77926: LD_ADDR_VAR 0 5
77930: PUSH
77931: LD_VAR 0 5
77935: PPUSH
77936: LD_VAR 0 5
77940: PUSH
77941: LD_INT 1
77943: PLUS
77944: PPUSH
77945: LD_VAR 0 4
77949: PPUSH
77950: CALL_OW 256
77954: PPUSH
77955: CALL_OW 2
77959: ST_TO_ADDR
77960: GO 77923
77962: POP
77963: POP
// if not tmp then
77964: LD_VAR 0 5
77968: NOT
77969: IFFALSE 77973
// exit ;
77971: GO 78021
// if asc then
77973: LD_VAR 0 2
77977: IFFALSE 78001
// result := SortListByListAsc ( units , tmp ) else
77979: LD_ADDR_VAR 0 3
77983: PUSH
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_VAR 0 5
77993: PPUSH
77994: CALL_OW 76
77998: ST_TO_ADDR
77999: GO 78021
// result := SortListByListDesc ( units , tmp ) ;
78001: LD_ADDR_VAR 0 3
78005: PUSH
78006: LD_VAR 0 1
78010: PPUSH
78011: LD_VAR 0 5
78015: PPUSH
78016: CALL_OW 77
78020: ST_TO_ADDR
// end ;
78021: LD_VAR 0 3
78025: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78026: LD_INT 0
78028: PPUSH
78029: PPUSH
// task := GetTaskList ( mech ) ;
78030: LD_ADDR_VAR 0 4
78034: PUSH
78035: LD_VAR 0 1
78039: PPUSH
78040: CALL_OW 437
78044: ST_TO_ADDR
// if not task then
78045: LD_VAR 0 4
78049: NOT
78050: IFFALSE 78054
// exit ;
78052: GO 78096
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78054: LD_ADDR_VAR 0 3
78058: PUSH
78059: LD_VAR 0 4
78063: PUSH
78064: LD_INT 1
78066: ARRAY
78067: PUSH
78068: LD_INT 1
78070: ARRAY
78071: PUSH
78072: LD_STRING r
78074: EQUAL
78075: PUSH
78076: LD_VAR 0 4
78080: PUSH
78081: LD_INT 1
78083: ARRAY
78084: PUSH
78085: LD_INT 4
78087: ARRAY
78088: PUSH
78089: LD_VAR 0 2
78093: EQUAL
78094: AND
78095: ST_TO_ADDR
// end ;
78096: LD_VAR 0 3
78100: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78101: LD_INT 0
78103: PPUSH
// SetDir ( unit , d ) ;
78104: LD_VAR 0 1
78108: PPUSH
78109: LD_VAR 0 4
78113: PPUSH
78114: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78118: LD_VAR 0 1
78122: PPUSH
78123: LD_VAR 0 2
78127: PPUSH
78128: LD_VAR 0 3
78132: PPUSH
78133: LD_VAR 0 5
78137: PPUSH
78138: CALL_OW 48
// end ;
78142: LD_VAR 0 6
78146: RET
// export function ToNaturalNumber ( number ) ; begin
78147: LD_INT 0
78149: PPUSH
// result := number div 1 ;
78150: LD_ADDR_VAR 0 2
78154: PUSH
78155: LD_VAR 0 1
78159: PUSH
78160: LD_INT 1
78162: DIV
78163: ST_TO_ADDR
// if number < 0 then
78164: LD_VAR 0 1
78168: PUSH
78169: LD_INT 0
78171: LESS
78172: IFFALSE 78182
// result := 0 ;
78174: LD_ADDR_VAR 0 2
78178: PUSH
78179: LD_INT 0
78181: ST_TO_ADDR
// end ;
78182: LD_VAR 0 2
78186: RET
// export function SortByClass ( units , class ) ; var un ; begin
78187: LD_INT 0
78189: PPUSH
78190: PPUSH
// if not units or not class then
78191: LD_VAR 0 1
78195: NOT
78196: PUSH
78197: LD_VAR 0 2
78201: NOT
78202: OR
78203: IFFALSE 78207
// exit ;
78205: GO 78302
// result := [ ] ;
78207: LD_ADDR_VAR 0 3
78211: PUSH
78212: EMPTY
78213: ST_TO_ADDR
// for un in units do
78214: LD_ADDR_VAR 0 4
78218: PUSH
78219: LD_VAR 0 1
78223: PUSH
78224: FOR_IN
78225: IFFALSE 78300
// if GetClass ( un ) = class then
78227: LD_VAR 0 4
78231: PPUSH
78232: CALL_OW 257
78236: PUSH
78237: LD_VAR 0 2
78241: EQUAL
78242: IFFALSE 78269
// result := Insert ( result , 1 , un ) else
78244: LD_ADDR_VAR 0 3
78248: PUSH
78249: LD_VAR 0 3
78253: PPUSH
78254: LD_INT 1
78256: PPUSH
78257: LD_VAR 0 4
78261: PPUSH
78262: CALL_OW 2
78266: ST_TO_ADDR
78267: GO 78298
// result := Replace ( result , result + 1 , un ) ;
78269: LD_ADDR_VAR 0 3
78273: PUSH
78274: LD_VAR 0 3
78278: PPUSH
78279: LD_VAR 0 3
78283: PUSH
78284: LD_INT 1
78286: PLUS
78287: PPUSH
78288: LD_VAR 0 4
78292: PPUSH
78293: CALL_OW 1
78297: ST_TO_ADDR
78298: GO 78224
78300: POP
78301: POP
// end ;
78302: LD_VAR 0 3
78306: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78307: LD_INT 0
78309: PPUSH
78310: PPUSH
78311: PPUSH
78312: PPUSH
78313: PPUSH
78314: PPUSH
78315: PPUSH
// result := [ ] ;
78316: LD_ADDR_VAR 0 4
78320: PUSH
78321: EMPTY
78322: ST_TO_ADDR
// if x - r < 0 then
78323: LD_VAR 0 1
78327: PUSH
78328: LD_VAR 0 3
78332: MINUS
78333: PUSH
78334: LD_INT 0
78336: LESS
78337: IFFALSE 78349
// min_x := 0 else
78339: LD_ADDR_VAR 0 8
78343: PUSH
78344: LD_INT 0
78346: ST_TO_ADDR
78347: GO 78365
// min_x := x - r ;
78349: LD_ADDR_VAR 0 8
78353: PUSH
78354: LD_VAR 0 1
78358: PUSH
78359: LD_VAR 0 3
78363: MINUS
78364: ST_TO_ADDR
// if y - r < 0 then
78365: LD_VAR 0 2
78369: PUSH
78370: LD_VAR 0 3
78374: MINUS
78375: PUSH
78376: LD_INT 0
78378: LESS
78379: IFFALSE 78391
// min_y := 0 else
78381: LD_ADDR_VAR 0 7
78385: PUSH
78386: LD_INT 0
78388: ST_TO_ADDR
78389: GO 78407
// min_y := y - r ;
78391: LD_ADDR_VAR 0 7
78395: PUSH
78396: LD_VAR 0 2
78400: PUSH
78401: LD_VAR 0 3
78405: MINUS
78406: ST_TO_ADDR
// max_x := x + r ;
78407: LD_ADDR_VAR 0 9
78411: PUSH
78412: LD_VAR 0 1
78416: PUSH
78417: LD_VAR 0 3
78421: PLUS
78422: ST_TO_ADDR
// max_y := y + r ;
78423: LD_ADDR_VAR 0 10
78427: PUSH
78428: LD_VAR 0 2
78432: PUSH
78433: LD_VAR 0 3
78437: PLUS
78438: ST_TO_ADDR
// for _x = min_x to max_x do
78439: LD_ADDR_VAR 0 5
78443: PUSH
78444: DOUBLE
78445: LD_VAR 0 8
78449: DEC
78450: ST_TO_ADDR
78451: LD_VAR 0 9
78455: PUSH
78456: FOR_TO
78457: IFFALSE 78558
// for _y = min_y to max_y do
78459: LD_ADDR_VAR 0 6
78463: PUSH
78464: DOUBLE
78465: LD_VAR 0 7
78469: DEC
78470: ST_TO_ADDR
78471: LD_VAR 0 10
78475: PUSH
78476: FOR_TO
78477: IFFALSE 78554
// begin if not ValidHex ( _x , _y ) then
78479: LD_VAR 0 5
78483: PPUSH
78484: LD_VAR 0 6
78488: PPUSH
78489: CALL_OW 488
78493: NOT
78494: IFFALSE 78498
// continue ;
78496: GO 78476
// if GetResourceTypeXY ( _x , _y ) then
78498: LD_VAR 0 5
78502: PPUSH
78503: LD_VAR 0 6
78507: PPUSH
78508: CALL_OW 283
78512: IFFALSE 78552
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78514: LD_ADDR_VAR 0 4
78518: PUSH
78519: LD_VAR 0 4
78523: PPUSH
78524: LD_VAR 0 4
78528: PUSH
78529: LD_INT 1
78531: PLUS
78532: PPUSH
78533: LD_VAR 0 5
78537: PUSH
78538: LD_VAR 0 6
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PPUSH
78547: CALL_OW 1
78551: ST_TO_ADDR
// end ;
78552: GO 78476
78554: POP
78555: POP
78556: GO 78456
78558: POP
78559: POP
// end ;
78560: LD_VAR 0 4
78564: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78565: LD_INT 0
78567: PPUSH
78568: PPUSH
78569: PPUSH
78570: PPUSH
78571: PPUSH
78572: PPUSH
78573: PPUSH
78574: PPUSH
// if not units then
78575: LD_VAR 0 1
78579: NOT
78580: IFFALSE 78584
// exit ;
78582: GO 79009
// result := UnitFilter ( units , [ f_ok ] ) ;
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 1
78593: PPUSH
78594: LD_INT 50
78596: PUSH
78597: EMPTY
78598: LIST
78599: PPUSH
78600: CALL_OW 72
78604: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78605: LD_ADDR_VAR 0 8
78609: PUSH
78610: LD_VAR 0 1
78614: PUSH
78615: LD_INT 1
78617: ARRAY
78618: PPUSH
78619: CALL_OW 255
78623: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78624: LD_ADDR_VAR 0 10
78628: PUSH
78629: LD_INT 29
78631: PUSH
78632: LD_EXP 53
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: ST_TO_ADDR
// if not result then
78641: LD_VAR 0 3
78645: NOT
78646: IFFALSE 78650
// exit ;
78648: GO 79009
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78650: LD_ADDR_VAR 0 5
78654: PUSH
78655: LD_INT 81
78657: PUSH
78658: LD_VAR 0 8
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PPUSH
78667: CALL_OW 69
78671: ST_TO_ADDR
// for i in result do
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_VAR 0 3
78681: PUSH
78682: FOR_IN
78683: IFFALSE 79007
// begin tag := GetTag ( i ) + 1 ;
78685: LD_ADDR_VAR 0 9
78689: PUSH
78690: LD_VAR 0 4
78694: PPUSH
78695: CALL_OW 110
78699: PUSH
78700: LD_INT 1
78702: PLUS
78703: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78704: LD_ADDR_VAR 0 7
78708: PUSH
78709: LD_VAR 0 4
78713: PPUSH
78714: CALL_OW 250
78718: PPUSH
78719: LD_VAR 0 4
78723: PPUSH
78724: CALL_OW 251
78728: PPUSH
78729: LD_INT 6
78731: PPUSH
78732: CALL 78307 0 3
78736: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78737: LD_VAR 0 7
78741: PUSH
78742: LD_VAR 0 4
78746: PPUSH
78747: CALL_OW 264
78751: PUSH
78752: LD_VAR 0 10
78756: IN
78757: NOT
78758: AND
78759: IFFALSE 78798
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78761: LD_VAR 0 4
78765: PPUSH
78766: LD_VAR 0 7
78770: PUSH
78771: LD_INT 1
78773: ARRAY
78774: PUSH
78775: LD_INT 1
78777: ARRAY
78778: PPUSH
78779: LD_VAR 0 7
78783: PUSH
78784: LD_INT 1
78786: ARRAY
78787: PUSH
78788: LD_INT 2
78790: ARRAY
78791: PPUSH
78792: CALL_OW 116
78796: GO 79005
// if path > tag then
78798: LD_VAR 0 2
78802: PUSH
78803: LD_VAR 0 9
78807: GREATER
78808: IFFALSE 78975
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78810: LD_ADDR_VAR 0 6
78814: PUSH
78815: LD_VAR 0 5
78819: PPUSH
78820: LD_INT 91
78822: PUSH
78823: LD_VAR 0 4
78827: PUSH
78828: LD_INT 12
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: LIST
78835: PPUSH
78836: CALL_OW 72
78840: ST_TO_ADDR
// if nearEnemy then
78841: LD_VAR 0 6
78845: IFFALSE 78873
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78847: LD_VAR 0 4
78851: PPUSH
78852: LD_VAR 0 6
78856: PPUSH
78857: LD_VAR 0 4
78861: PPUSH
78862: CALL_OW 74
78866: PPUSH
78867: CALL_OW 115
78871: GO 78973
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78873: LD_VAR 0 4
78877: PPUSH
78878: LD_VAR 0 2
78882: PUSH
78883: LD_VAR 0 9
78887: ARRAY
78888: PUSH
78889: LD_INT 1
78891: ARRAY
78892: PPUSH
78893: LD_VAR 0 2
78897: PUSH
78898: LD_VAR 0 9
78902: ARRAY
78903: PUSH
78904: LD_INT 2
78906: ARRAY
78907: PPUSH
78908: CALL_OW 297
78912: PUSH
78913: LD_INT 6
78915: GREATER
78916: IFFALSE 78959
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78918: LD_VAR 0 4
78922: PPUSH
78923: LD_VAR 0 2
78927: PUSH
78928: LD_VAR 0 9
78932: ARRAY
78933: PUSH
78934: LD_INT 1
78936: ARRAY
78937: PPUSH
78938: LD_VAR 0 2
78942: PUSH
78943: LD_VAR 0 9
78947: ARRAY
78948: PUSH
78949: LD_INT 2
78951: ARRAY
78952: PPUSH
78953: CALL_OW 114
78957: GO 78973
// SetTag ( i , tag ) ;
78959: LD_VAR 0 4
78963: PPUSH
78964: LD_VAR 0 9
78968: PPUSH
78969: CALL_OW 109
// end else
78973: GO 79005
// if enemy then
78975: LD_VAR 0 5
78979: IFFALSE 79005
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78981: LD_VAR 0 4
78985: PPUSH
78986: LD_VAR 0 5
78990: PPUSH
78991: LD_VAR 0 4
78995: PPUSH
78996: CALL_OW 74
79000: PPUSH
79001: CALL_OW 115
// end ;
79005: GO 78682
79007: POP
79008: POP
// end ;
79009: LD_VAR 0 3
79013: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79014: LD_INT 0
79016: PPUSH
79017: PPUSH
79018: PPUSH
// if not unit or IsInUnit ( unit ) then
79019: LD_VAR 0 1
79023: NOT
79024: PUSH
79025: LD_VAR 0 1
79029: PPUSH
79030: CALL_OW 310
79034: OR
79035: IFFALSE 79039
// exit ;
79037: GO 79130
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79039: LD_ADDR_VAR 0 4
79043: PUSH
79044: LD_VAR 0 1
79048: PPUSH
79049: CALL_OW 250
79053: PPUSH
79054: LD_VAR 0 2
79058: PPUSH
79059: LD_INT 1
79061: PPUSH
79062: CALL_OW 272
79066: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79067: LD_ADDR_VAR 0 5
79071: PUSH
79072: LD_VAR 0 1
79076: PPUSH
79077: CALL_OW 251
79081: PPUSH
79082: LD_VAR 0 2
79086: PPUSH
79087: LD_INT 1
79089: PPUSH
79090: CALL_OW 273
79094: ST_TO_ADDR
// if ValidHex ( x , y ) then
79095: LD_VAR 0 4
79099: PPUSH
79100: LD_VAR 0 5
79104: PPUSH
79105: CALL_OW 488
79109: IFFALSE 79130
// ComTurnXY ( unit , x , y ) ;
79111: LD_VAR 0 1
79115: PPUSH
79116: LD_VAR 0 4
79120: PPUSH
79121: LD_VAR 0 5
79125: PPUSH
79126: CALL_OW 118
// end ;
79130: LD_VAR 0 3
79134: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79135: LD_INT 0
79137: PPUSH
79138: PPUSH
// result := false ;
79139: LD_ADDR_VAR 0 3
79143: PUSH
79144: LD_INT 0
79146: ST_TO_ADDR
// if not units then
79147: LD_VAR 0 2
79151: NOT
79152: IFFALSE 79156
// exit ;
79154: GO 79201
// for i in units do
79156: LD_ADDR_VAR 0 4
79160: PUSH
79161: LD_VAR 0 2
79165: PUSH
79166: FOR_IN
79167: IFFALSE 79199
// if See ( side , i ) then
79169: LD_VAR 0 1
79173: PPUSH
79174: LD_VAR 0 4
79178: PPUSH
79179: CALL_OW 292
79183: IFFALSE 79197
// begin result := true ;
79185: LD_ADDR_VAR 0 3
79189: PUSH
79190: LD_INT 1
79192: ST_TO_ADDR
// exit ;
79193: POP
79194: POP
79195: GO 79201
// end ;
79197: GO 79166
79199: POP
79200: POP
// end ;
79201: LD_VAR 0 3
79205: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79206: LD_INT 0
79208: PPUSH
79209: PPUSH
79210: PPUSH
79211: PPUSH
// if not unit or not points then
79212: LD_VAR 0 1
79216: NOT
79217: PUSH
79218: LD_VAR 0 2
79222: NOT
79223: OR
79224: IFFALSE 79228
// exit ;
79226: GO 79318
// dist := 99999 ;
79228: LD_ADDR_VAR 0 5
79232: PUSH
79233: LD_INT 99999
79235: ST_TO_ADDR
// for i in points do
79236: LD_ADDR_VAR 0 4
79240: PUSH
79241: LD_VAR 0 2
79245: PUSH
79246: FOR_IN
79247: IFFALSE 79316
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79249: LD_ADDR_VAR 0 6
79253: PUSH
79254: LD_VAR 0 1
79258: PPUSH
79259: LD_VAR 0 4
79263: PUSH
79264: LD_INT 1
79266: ARRAY
79267: PPUSH
79268: LD_VAR 0 4
79272: PUSH
79273: LD_INT 2
79275: ARRAY
79276: PPUSH
79277: CALL_OW 297
79281: ST_TO_ADDR
// if tmpDist < dist then
79282: LD_VAR 0 6
79286: PUSH
79287: LD_VAR 0 5
79291: LESS
79292: IFFALSE 79314
// begin result := i ;
79294: LD_ADDR_VAR 0 3
79298: PUSH
79299: LD_VAR 0 4
79303: ST_TO_ADDR
// dist := tmpDist ;
79304: LD_ADDR_VAR 0 5
79308: PUSH
79309: LD_VAR 0 6
79313: ST_TO_ADDR
// end ; end ;
79314: GO 79246
79316: POP
79317: POP
// end ; end_of_file
79318: LD_VAR 0 3
79322: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79323: LD_VAR 0 1
79327: PUSH
79328: LD_INT 200
79330: DOUBLE
79331: GREATEREQUAL
79332: IFFALSE 79340
79334: LD_INT 299
79336: DOUBLE
79337: LESSEQUAL
79338: IFTRUE 79342
79340: GO 79374
79342: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79343: LD_VAR 0 1
79347: PPUSH
79348: LD_VAR 0 2
79352: PPUSH
79353: LD_VAR 0 3
79357: PPUSH
79358: LD_VAR 0 4
79362: PPUSH
79363: LD_VAR 0 5
79367: PPUSH
79368: CALL 34970 0 5
79372: GO 79451
79374: LD_INT 300
79376: DOUBLE
79377: GREATEREQUAL
79378: IFFALSE 79386
79380: LD_INT 399
79382: DOUBLE
79383: LESSEQUAL
79384: IFTRUE 79388
79386: GO 79450
79388: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79389: LD_VAR 0 1
79393: PPUSH
79394: LD_VAR 0 2
79398: PPUSH
79399: LD_VAR 0 3
79403: PPUSH
79404: LD_VAR 0 4
79408: PPUSH
79409: LD_VAR 0 5
79413: PPUSH
79414: LD_VAR 0 6
79418: PPUSH
79419: LD_VAR 0 7
79423: PPUSH
79424: LD_VAR 0 8
79428: PPUSH
79429: LD_VAR 0 9
79433: PPUSH
79434: LD_VAR 0 10
79438: PPUSH
79439: LD_VAR 0 11
79443: PPUSH
79444: CALL 32612 0 11
79448: GO 79451
79450: POP
// end ;
79451: PPOPN 11
79453: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79454: LD_VAR 0 1
79458: PPUSH
79459: LD_VAR 0 2
79463: PPUSH
79464: LD_VAR 0 3
79468: PPUSH
79469: LD_VAR 0 4
79473: PPUSH
79474: LD_VAR 0 5
79478: PPUSH
79479: CALL 34706 0 5
// end ; end_of_file
79483: PPOPN 5
79485: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79486: LD_VAR 0 1
79490: PPUSH
79491: LD_VAR 0 2
79495: PPUSH
79496: LD_VAR 0 3
79500: PPUSH
79501: LD_VAR 0 4
79505: PPUSH
79506: LD_VAR 0 5
79510: PPUSH
79511: LD_VAR 0 6
79515: PPUSH
79516: CALL 20305 0 6
// end ;
79520: PPOPN 6
79522: END
