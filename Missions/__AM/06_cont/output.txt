// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// sendedConvoys = 0 ;
 177: LD_ADDR_EXP 39
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// tamedApemans = 0 ;
 185: LD_ADDR_EXP 32
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// ignoreTarget := [ ] ;
 193: LD_ADDR_EXP 45
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// arrivals := [ ] ;
 200: LD_ADDR_EXP 46
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// unitLost = 0 ;
 207: LD_ADDR_EXP 30
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 215: LD_ADDR_EXP 31
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// russianTanks = [ ] ;
 222: LD_ADDR_EXP 36
 226: PUSH
 227: EMPTY
 228: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 229: LD_ADDR_EXP 37
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// disableHealAI = 0 ;
 236: LD_ADDR_EXP 33
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// strings = [ ] ;
 244: LD_ADDR_EXP 27
 248: PUSH
 249: EMPTY
 250: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 251: LD_INT 4
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 343
// PrepareDifficulty ;
 261: CALL 6405 0 0
// PrepareNature ;
 265: CALL 23522 0 0
// PrepareRussian ;
 269: CALL 5590 0 0
// PrepareVehicles ;
 273: CALL 1610 0 0
// PrepareHeroes ;
 277: CALL 618 0 0
// PrepareOthers ;
 281: CALL 2031 0 0
// PreparePlayerApemans ;
 285: CALL 2173 0 0
// end ;
 289: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 290: LD_EXP 42
 294: PUSH
 295: LD_INT 1
 297: EQUAL
 298: IFFALSE 525
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// fogoff ( true ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 21
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 367: LD_ADDR_VAR 0 1
 371: PUSH
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 30
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: FOR_IN
 402: IFFALSE 426
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 274
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 401
 426: POP
 427: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 428: LD_ADDR_VAR 0 1
 432: PUSH
 433: LD_INT 22
 435: PUSH
 436: LD_INT 1
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: LD_INT 30
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PPUSH
 457: CALL_OW 69
 461: PUSH
 462: FOR_IN
 463: IFFALSE 487
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 2
 477: PPUSH
 478: LD_INT 9999
 480: PPUSH
 481: CALL_OW 277
 485: GO 462
 487: POP
 488: POP
// if IsSelected ( rudepo ) then
 489: LD_INT 2
 491: PPUSH
 492: CALL_OW 306
 496: IFFALSE 506
// your_side = 3 ;
 498: LD_ADDR_OWVAR 2
 502: PUSH
 503: LD_INT 3
 505: ST_TO_ADDR
// if IsSelected ( JMM ) then
 506: LD_EXP 1
 510: PPUSH
 511: CALL_OW 306
 515: IFFALSE 525
// your_side = 1 ;
 517: LD_ADDR_OWVAR 2
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// end ;
 525: PPOPN 1
 527: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 528: LD_INT 22
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 21
 540: PUSH
 541: LD_INT 3
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PPUSH
 552: CALL_OW 69
 556: PUSH
 557: LD_INT 0
 559: EQUAL
 560: IFFALSE 572
 562: GO 564
 564: DISABLE
// SetAchievement ( ACH_BASEDESTROYER ) ;
 565: LD_STRING ACH_BASEDESTROYER
 567: PPUSH
 568: CALL_OW 543
 572: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 573: LD_INT 22
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: PUSH
 583: LD_INT 34
 585: PUSH
 586: LD_INT 12
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PPUSH
 597: CALL_OW 69
 601: PUSH
 602: LD_INT 3
 604: GREATEREQUAL
 605: IFFALSE 617
 607: GO 609
 609: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 610: LD_STRING ACH_FULLCARGO
 612: PPUSH
 613: CALL_OW 543
 617: END
// export function PrepareHeroes ; var veh ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// uc_side = 1 ;
 622: LD_ADDR_OWVAR 20
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
// uc_nation = 1 ;
 630: LD_ADDR_OWVAR 21
 634: PUSH
 635: LD_INT 1
 637: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 638: LD_ADDR_EXP 1
 642: PUSH
 643: LD_STRING JMM
 645: PPUSH
 646: LD_INT 1
 648: PPUSH
 649: CALL 5967 0 2
 653: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 654: LD_ADDR_EXP 14
 658: PUSH
 659: LD_STRING Harisson
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL 5967 0 2
 669: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING DeltaDoctor
 677: PPUSH
 678: CALL_OW 34
 682: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 683: LD_ADDR_VAR 0 2
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 1
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 21
 700: PUSH
 701: LD_INT 2
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PUSH
 708: LD_INT 58
 710: PUSH
 711: EMPTY
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: PPUSH
 719: CALL_OW 69
 723: ST_TO_ADDR
// if veh > 0 then
 724: LD_VAR 0 2
 728: PUSH
 729: LD_INT 0
 731: GREATER
 732: IFFALSE 754
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 734: LD_EXP 1
 738: PPUSH
 739: LD_VAR 0 2
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 52
// end else
 752: GO 769
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 754: LD_EXP 1
 758: PPUSH
 759: LD_INT 2
 761: PPUSH
 762: LD_INT 0
 764: PPUSH
 765: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 769: LD_STRING LisaIn06
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 30
 779: PUSH
 780: LD_INT 1
 782: EQUAL
 783: IFFALSE 887
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 785: LD_ADDR_VAR 0 2
 789: PUSH
 790: LD_INT 22
 792: PUSH
 793: LD_INT 1
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 21
 802: PUSH
 803: LD_INT 2
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 58
 812: PUSH
 813: EMPTY
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PPUSH
 821: CALL_OW 69
 825: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 826: LD_ADDR_EXP 2
 830: PUSH
 831: LD_STRING Lisa
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: CALL 5967 0 2
 841: ST_TO_ADDR
// if veh > 0 then
 842: LD_VAR 0 2
 846: PUSH
 847: LD_INT 0
 849: GREATER
 850: IFFALSE 872
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 852: LD_EXP 2
 856: PPUSH
 857: LD_VAR 0 2
 861: PUSH
 862: LD_INT 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 52
// end else
 870: GO 887
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 872: LD_EXP 2
 876: PPUSH
 877: LD_INT 2
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: PUSH
 898: LD_INT 1
 900: EQUAL
 901: IFFALSE 1005
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 1
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 21
 920: PUSH
 921: LD_INT 2
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 58
 930: PUSH
 931: EMPTY
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: PPUSH
 939: CALL_OW 69
 943: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 944: LD_ADDR_EXP 3
 948: PUSH
 949: LD_STRING Bobby
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: CALL 5967 0 2
 959: ST_TO_ADDR
// if veh > 0 then
 960: LD_VAR 0 2
 964: PUSH
 965: LD_INT 0
 967: GREATER
 968: IFFALSE 990
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 970: LD_EXP 3
 974: PPUSH
 975: LD_VAR 0 2
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end else
 988: GO 1005
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 990: LD_EXP 3
 994: PPUSH
 995: LD_INT 2
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
1005: LD_STRING CyrusIn06
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 30
1015: PUSH
1016: LD_INT 1
1018: EQUAL
1019: IFFALSE 1123
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1021: LD_ADDR_VAR 0 2
1025: PUSH
1026: LD_INT 22
1028: PUSH
1029: LD_INT 1
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 58
1048: PUSH
1049: EMPTY
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 69
1061: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1062: LD_ADDR_EXP 4
1066: PUSH
1067: LD_STRING Cyrus
1069: PPUSH
1070: LD_INT 1
1072: PPUSH
1073: CALL 5967 0 2
1077: ST_TO_ADDR
// if veh > 0 then
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 0
1085: GREATER
1086: IFFALSE 1108
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1088: LD_EXP 4
1092: PPUSH
1093: LD_VAR 0 2
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 52
// end else
1106: GO 1123
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1108: LD_EXP 4
1112: PPUSH
1113: LD_INT 2
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1123: LD_STRING FrankIn06
1125: PPUSH
1126: LD_INT 0
1128: PPUSH
1129: CALL_OW 30
1133: PUSH
1134: LD_INT 1
1136: EQUAL
1137: IFFALSE 1241
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1139: LD_ADDR_VAR 0 2
1143: PUSH
1144: LD_INT 22
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 58
1166: PUSH
1167: EMPTY
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1180: LD_ADDR_EXP 5
1184: PUSH
1185: LD_STRING Frank
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL 5967 0 2
1195: ST_TO_ADDR
// if veh > 0 then
1196: LD_VAR 0 2
1200: PUSH
1201: LD_INT 0
1203: GREATER
1204: IFFALSE 1226
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1206: LD_EXP 5
1210: PPUSH
1211: LD_VAR 0 2
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 52
// end else
1224: GO 1241
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1226: LD_EXP 5
1230: PPUSH
1231: LD_INT 2
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1241: LD_STRING BrownIn06
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: CALL_OW 30
1251: PUSH
1252: LD_INT 1
1254: EQUAL
1255: IFFALSE 1359
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1257: LD_ADDR_VAR 0 2
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 21
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 58
1284: PUSH
1285: EMPTY
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 69
1297: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1298: LD_ADDR_EXP 6
1302: PUSH
1303: LD_STRING Brown
1305: PPUSH
1306: LD_INT 1
1308: PPUSH
1309: CALL 5967 0 2
1313: ST_TO_ADDR
// if veh > 0 then
1314: LD_VAR 0 2
1318: PUSH
1319: LD_INT 0
1321: GREATER
1322: IFFALSE 1344
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1324: LD_EXP 6
1328: PPUSH
1329: LD_VAR 0 2
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: CALL_OW 52
// end else
1342: GO 1359
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1344: LD_EXP 6
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1359: LD_STRING DonaldsonIn06
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 30
1369: PUSH
1370: LD_INT 1
1372: EQUAL
1373: IFFALSE 1477
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1375: LD_ADDR_VAR 0 2
1379: PUSH
1380: LD_INT 22
1382: PUSH
1383: LD_INT 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 21
1392: PUSH
1393: LD_INT 2
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 58
1402: PUSH
1403: EMPTY
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1416: LD_ADDR_EXP 7
1420: PUSH
1421: LD_STRING Donaldson
1423: PPUSH
1424: LD_INT 1
1426: PPUSH
1427: CALL 5967 0 2
1431: ST_TO_ADDR
// if veh > 0 then
1432: LD_VAR 0 2
1436: PUSH
1437: LD_INT 0
1439: GREATER
1440: IFFALSE 1462
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1442: LD_EXP 7
1446: PPUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PPUSH
1456: CALL_OW 52
// end else
1460: GO 1477
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1462: LD_EXP 7
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1477: LD_STRING GladstoneIn06
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 30
1487: PUSH
1488: LD_INT 1
1490: EQUAL
1491: IFFALSE 1595
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1493: LD_ADDR_VAR 0 2
1497: PUSH
1498: LD_INT 22
1500: PUSH
1501: LD_INT 1
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 21
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 58
1520: PUSH
1521: EMPTY
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1534: LD_ADDR_EXP 8
1538: PUSH
1539: LD_STRING Gladstone
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: CALL 5967 0 2
1549: ST_TO_ADDR
// if veh > 0 then
1550: LD_VAR 0 2
1554: PUSH
1555: LD_INT 0
1557: GREATER
1558: IFFALSE 1580
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1560: LD_EXP 8
1564: PPUSH
1565: LD_VAR 0 2
1569: PUSH
1570: LD_INT 1
1572: ARRAY
1573: PPUSH
1574: CALL_OW 52
// end else
1578: GO 1595
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1580: LD_EXP 8
1584: PPUSH
1585: LD_INT 2
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1595: LD_INT 66
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 86
// end ;
1605: LD_VAR 0 1
1609: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1610: LD_INT 0
1612: PPUSH
1613: PPUSH
1614: PPUSH
1615: PPUSH
1616: PPUSH
1617: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1618: LD_ADDR_VAR 0 5
1622: PUSH
1623: LD_STRING 06_VehiclesIn06_1
1625: PPUSH
1626: EMPTY
1627: PPUSH
1628: CALL_OW 30
1632: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1633: LD_ADDR_EXP 40
1637: PUSH
1638: LD_STRING 06_ResourcesInCargo06_1
1640: PPUSH
1641: EMPTY
1642: PPUSH
1643: CALL_OW 30
1647: ST_TO_ADDR
// cargoList = [ ] ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: EMPTY
1654: ST_TO_ADDR
// uc_side = 1 ;
1655: LD_ADDR_OWVAR 20
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// if vehicles > 0 then
1663: LD_VAR 0 5
1667: PUSH
1668: LD_INT 0
1670: GREATER
1671: IFFALSE 2026
// begin for i := 1 to vehicles do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_VAR 0 5
1687: PUSH
1688: FOR_TO
1689: IFFALSE 1838
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1691: LD_ADDR_OWVAR 21
1695: PUSH
1696: LD_VAR 0 5
1700: PUSH
1701: LD_VAR 0 2
1705: ARRAY
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1711: LD_ADDR_OWVAR 37
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_VAR 0 2
1725: ARRAY
1726: PUSH
1727: LD_INT 2
1729: ARRAY
1730: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1731: LD_ADDR_OWVAR 39
1735: PUSH
1736: LD_VAR 0 5
1740: PUSH
1741: LD_VAR 0 2
1745: ARRAY
1746: PUSH
1747: LD_INT 3
1749: ARRAY
1750: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1751: LD_ADDR_OWVAR 38
1755: PUSH
1756: LD_VAR 0 5
1760: PUSH
1761: LD_VAR 0 2
1765: ARRAY
1766: PUSH
1767: LD_INT 4
1769: ARRAY
1770: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1771: LD_ADDR_OWVAR 40
1775: PUSH
1776: LD_VAR 0 5
1780: PUSH
1781: LD_VAR 0 2
1785: ARRAY
1786: PUSH
1787: LD_INT 5
1789: ARRAY
1790: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1791: LD_ADDR_OWVAR 41
1795: PUSH
1796: LD_INT 40
1798: ST_TO_ADDR
// veh = CreateVehicle ;
1799: LD_ADDR_VAR 0 4
1803: PUSH
1804: CALL_OW 45
1808: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1809: LD_VAR 0 4
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 2
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// end ;
1836: GO 1688
1838: POP
1839: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1840: LD_ADDR_VAR 0 6
1844: PUSH
1845: LD_INT 22
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 21
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 34
1867: PUSH
1868: LD_INT 12
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PPUSH
1880: CALL_OW 69
1884: ST_TO_ADDR
// if cargoList > 0 then
1885: LD_VAR 0 6
1889: PUSH
1890: LD_INT 0
1892: GREATER
1893: IFFALSE 2026
// for i = 1 to cargoList do
1895: LD_ADDR_VAR 0 2
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 6
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2024
// begin if resources > 0 then
1913: LD_EXP 40
1917: PUSH
1918: LD_INT 0
1920: GREATER
1921: IFFALSE 2022
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1923: LD_VAR 0 6
1927: PUSH
1928: LD_VAR 0 2
1932: ARRAY
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_EXP 40
1941: PUSH
1942: LD_VAR 0 2
1946: ARRAY
1947: PUSH
1948: LD_INT 1
1950: ARRAY
1951: PPUSH
1952: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1956: LD_VAR 0 6
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: LD_EXP 40
1974: PUSH
1975: LD_VAR 0 2
1979: ARRAY
1980: PUSH
1981: LD_INT 2
1983: ARRAY
1984: PPUSH
1985: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1989: LD_VAR 0 6
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PPUSH
2000: LD_INT 3
2002: PPUSH
2003: LD_EXP 40
2007: PUSH
2008: LD_VAR 0 2
2012: ARRAY
2013: PUSH
2014: LD_INT 3
2016: ARRAY
2017: PPUSH
2018: CALL_OW 291
// end ; end ;
2022: GO 1910
2024: POP
2025: POP
// end ; end ;
2026: LD_VAR 0 1
2030: RET
// export function PrepareOthers ; var i , veh ; begin
2031: LD_INT 0
2033: PPUSH
2034: PPUSH
2035: PPUSH
// uc_side = 1 ;
2036: LD_ADDR_OWVAR 20
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// uc_nation = 1 ;
2044: LD_ADDR_OWVAR 21
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2052: LD_ADDR_EXP 11
2056: PUSH
2057: LD_STRING OthersIn06
2059: PPUSH
2060: CALL_OW 31
2064: ST_TO_ADDR
// for i in others do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: LD_EXP 11
2074: PUSH
2075: FOR_IN
2076: IFFALSE 2166
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2078: LD_ADDR_VAR 0 3
2082: PUSH
2083: LD_INT 22
2085: PUSH
2086: LD_INT 1
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 21
2095: PUSH
2096: LD_INT 2
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 58
2105: PUSH
2106: EMPTY
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: ST_TO_ADDR
// if veh > 0 then
2119: LD_VAR 0 3
2123: PUSH
2124: LD_INT 0
2126: GREATER
2127: IFFALSE 2149
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_INT 1
2141: ARRAY
2142: PPUSH
2143: CALL_OW 52
// end else
2147: GO 2164
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_INT 2
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// end ; end ;
2164: GO 2075
2166: POP
2167: POP
// end ;
2168: LD_VAR 0 1
2172: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2173: LD_INT 0
2175: PPUSH
2176: PPUSH
2177: PPUSH
// uc_side = 1 ;
2178: LD_ADDR_OWVAR 20
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// uc_nation = 0 ;
2186: LD_ADDR_OWVAR 21
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2194: LD_ADDR_EXP 12
2198: PUSH
2199: LD_STRING ApeIn06
2201: PPUSH
2202: CALL_OW 31
2206: ST_TO_ADDR
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 12
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side = 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation = 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: CALL 5967 0 2
2375: ST_TO_ADDR
// for i = 1 to xy do
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: DOUBLE
2382: LD_INT 1
2384: DEC
2385: ST_TO_ADDR
2386: LD_VAR 0 2
2390: PUSH
2391: FOR_TO
2392: IFFALSE 2491
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2394: LD_VAR 0 2
2398: PUSH
2399: LD_VAR 0 3
2403: ARRAY
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_VAR 0 2
2413: PUSH
2414: LD_VAR 0 3
2418: ARRAY
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PPUSH
2424: CALL_OW 428
2428: PUSH
2429: LD_INT 0
2431: EQUAL
2432: IFFALSE 2489
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2434: LD_EXP 9
2438: PPUSH
2439: LD_VAR 0 2
2443: PUSH
2444: LD_VAR 0 3
2448: ARRAY
2449: PUSH
2450: LD_INT 1
2452: ARRAY
2453: PPUSH
2454: LD_VAR 0 2
2458: PUSH
2459: LD_VAR 0 3
2463: ARRAY
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 0
2471: PPUSH
2472: CALL_OW 48
// if IsPlaced ( Denis ) then
2476: LD_EXP 9
2480: PPUSH
2481: CALL_OW 305
2485: IFFALSE 2489
// break ;
2487: GO 2491
// end ;
2489: GO 2391
2491: POP
2492: POP
// SetClass ( Denis , 4 ) ;
2493: LD_EXP 9
2497: PPUSH
2498: LD_INT 4
2500: PPUSH
2501: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2505: LD_EXP 9
2509: PPUSH
2510: LD_INT 750
2512: PPUSH
2513: CALL_OW 234
// end ;
2517: LD_VAR 0 1
2521: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
// area := HarrisonSupportArea ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_INT 3
2536: ST_TO_ADDR
// dir := 2 ;
2537: LD_ADDR_VAR 0 5
2541: PUSH
2542: LD_INT 2
2544: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2545: LD_VAR 0 4
2549: PPUSH
2550: LD_INT 21
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 70
2564: IFFALSE 2582
// begin area := HarrisonSupportArea2 ;
2566: LD_ADDR_VAR 0 4
2570: PUSH
2571: LD_INT 31
2573: ST_TO_ADDR
// dir := 1 ;
2574: LD_ADDR_VAR 0 5
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ; uc_side = 1 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// uc_nation = 1 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// vc_engine = 1 ;
2598: LD_ADDR_OWVAR 39
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// vc_control = 1 ;
2606: LD_ADDR_OWVAR 38
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2614: LD_ADDR_OWVAR 40
2618: PUSH
2619: LD_INT 4
2621: PUSH
2622: LD_INT 4
2624: PUSH
2625: LD_INT 2
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_OWVAR 67
2637: ARRAY
2638: ST_TO_ADDR
// vc_chassis = 2 ;
2639: LD_ADDR_OWVAR 37
2643: PUSH
2644: LD_INT 2
2646: ST_TO_ADDR
// veh = CreateVehicle ;
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: CALL_OW 45
2656: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_VAR 0 5
2666: PPUSH
2667: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2671: LD_VAR 0 3
2675: PPUSH
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2688: LD_VAR 0 3
2692: PPUSH
2693: LD_INT 50
2695: PPUSH
2696: CALL_OW 240
// hc_class := 2 ;
2700: LD_ADDR_OWVAR 28
2704: PUSH
2705: LD_INT 2
2707: ST_TO_ADDR
// hc_sex := sex_male ;
2708: LD_ADDR_OWVAR 27
2712: PUSH
2713: LD_INT 1
2715: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2716: LD_ADDR_OWVAR 33
2720: PUSH
2721: LD_STRING SecondCharsGal
2723: ST_TO_ADDR
// hc_face_number := 52 ;
2724: LD_ADDR_OWVAR 34
2728: PUSH
2729: LD_INT 52
2731: ST_TO_ADDR
// hc_name := Craig Brown ;
2732: LD_ADDR_OWVAR 26
2736: PUSH
2737: LD_STRING Craig Brown
2739: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2740: LD_ADDR_OWVAR 29
2744: PUSH
2745: LD_INT 10
2747: PUSH
2748: LD_INT 10
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2755: LD_ADDR_OWVAR 30
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: LD_INT 2
2765: PUSH
2766: LD_INT 0
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2778: LD_ADDR_OWVAR 31
2782: PUSH
2783: LD_INT 2
2785: PUSH
2786: LD_INT 3
2788: PUSH
2789: LD_INT 0
2791: PUSH
2792: LD_INT 0
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2801: LD_ADDR_EXP 17
2805: PUSH
2806: CALL_OW 44
2810: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2811: LD_EXP 17
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: CALL_OW 52
// vc_engine = 1 ;
2825: LD_ADDR_OWVAR 39
2829: PUSH
2830: LD_INT 1
2832: ST_TO_ADDR
// vc_control = 1 ;
2833: LD_ADDR_OWVAR 38
2837: PUSH
2838: LD_INT 1
2840: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2841: LD_ADDR_OWVAR 40
2845: PUSH
2846: LD_INT 3
2848: ST_TO_ADDR
// vc_chassis = 2 ;
2849: LD_ADDR_OWVAR 37
2853: PUSH
2854: LD_INT 2
2856: ST_TO_ADDR
// veh = CreateVehicle ;
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: CALL_OW 45
2866: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2867: LD_VAR 0 3
2871: PPUSH
2872: LD_VAR 0 5
2876: PPUSH
2877: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2881: LD_VAR 0 3
2885: PPUSH
2886: LD_VAR 0 4
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2898: LD_VAR 0 3
2902: PPUSH
2903: LD_INT 50
2905: PPUSH
2906: CALL_OW 240
// hc_class := 1 ;
2910: LD_ADDR_OWVAR 28
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// hc_sex := sex_female ;
2918: LD_ADDR_OWVAR 27
2922: PUSH
2923: LD_INT 2
2925: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2926: LD_ADDR_OWVAR 33
2930: PUSH
2931: LD_STRING SecondCharsGal
2933: ST_TO_ADDR
// hc_face_number := 45 ;
2934: LD_ADDR_OWVAR 34
2938: PUSH
2939: LD_INT 45
2941: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2942: LD_ADDR_OWVAR 29
2946: PUSH
2947: LD_INT 11
2949: PUSH
2950: LD_INT 10
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2957: LD_ADDR_OWVAR 26
2961: PUSH
2962: LD_STRING Ingrid Jonsson
2964: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2965: LD_ADDR_OWVAR 30
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2988: LD_ADDR_OWVAR 31
2992: PUSH
2993: LD_INT 3
2995: PUSH
2996: LD_INT 1
2998: PUSH
2999: LD_INT 1
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3011: LD_ADDR_EXP 18
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3021: LD_EXP 18
3025: PPUSH
3026: LD_VAR 0 3
3030: PPUSH
3031: CALL_OW 52
// end ;
3035: LD_VAR 0 1
3039: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
// j = 0 ;
3047: LD_ADDR_VAR 0 3
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3055: LD_INT 35
3057: PPUSH
3058: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: LD_INT 22
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 21
3079: PUSH
3080: LD_INT 1
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 26
3089: PUSH
3090: LD_INT 1
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: LD_INT 25
3102: PUSH
3103: LD_INT 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 2
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 25
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 69
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3285
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3161: LD_INT 22
3163: PUSH
3164: LD_INT 3
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 2
3173: PUSH
3174: LD_INT 21
3176: PUSH
3177: LD_INT 1
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 21
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PUSH
3194: LD_INT 21
3196: PUSH
3197: LD_INT 3
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 59
3206: PUSH
3207: EMPTY
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 91
3219: PUSH
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 25
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 69
3242: NOT
3243: PUSH
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_EXP 1
3253: PPUSH
3254: CALL_OW 296
3258: PUSH
3259: LD_INT 15
3261: LESS
3262: AND
3263: IFFALSE 3283
// begin tmp = i ;
3265: LD_ADDR_VAR 0 4
3269: PUSH
3270: LD_VAR 0 2
3274: ST_TO_ADDR
// j = 1 ;
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: LD_INT 1
3282: ST_TO_ADDR
// end ; end ;
3283: GO 3158
3285: POP
3286: POP
// until j = 1 ;
3287: LD_VAR 0 3
3291: PUSH
3292: LD_INT 1
3294: EQUAL
3295: IFFALSE 3055
// blockSpawn = 1 ;
3297: LD_ADDR_EXP 29
3301: PUSH
3302: LD_INT 1
3304: ST_TO_ADDR
// uc_side = 4 ;
3305: LD_ADDR_OWVAR 20
3309: PUSH
3310: LD_INT 4
3312: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3313: LD_ADDR_EXP 15
3317: PUSH
3318: LD_STRING Joan
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL 5967 0 2
3328: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3329: LD_EXP 15
3333: PPUSH
3334: LD_VAR 0 4
3338: PPUSH
3339: CALL_OW 250
3343: PPUSH
3344: LD_VAR 0 4
3348: PPUSH
3349: CALL_OW 251
3353: PPUSH
3354: LD_INT 5
3356: PPUSH
3357: LD_INT 1
3359: PPUSH
3360: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3364: LD_EXP 15
3368: PPUSH
3369: LD_INT 250
3371: PPUSH
3372: CALL_OW 234
// InGameOn ;
3376: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3380: LD_EXP 15
3384: PPUSH
3385: CALL_OW 87
// wait ( 0 0$2 ) ;
3389: LD_INT 70
3391: PPUSH
3392: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3396: LD_VAR 0 4
3400: PPUSH
3401: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3405: LD_VAR 0 4
3409: PPUSH
3410: CALL_OW 122
// wait ( 0 0$1 ) ;
3414: LD_INT 35
3416: PPUSH
3417: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3421: LD_VAR 0 4
3425: PPUSH
3426: LD_EXP 15
3430: PPUSH
3431: CALL_OW 112
// wait ( 0 0$2 ) ;
3435: LD_INT 70
3437: PPUSH
3438: CALL_OW 67
// DialogueOn ;
3442: CALL_OW 6
// if tmp = JMM then
3446: LD_VAR 0 4
3450: PUSH
3451: LD_EXP 1
3455: EQUAL
3456: IFFALSE 3605
// begin ComTurnUnit ( JMM , Joan ) ;
3458: LD_EXP 1
3462: PPUSH
3463: LD_EXP 15
3467: PPUSH
3468: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3472: LD_EXP 1
3476: PPUSH
3477: LD_STRING D5b-JMM-1
3479: PPUSH
3480: CALL_OW 88
// DialogueOff ;
3484: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3488: LD_EXP 15
3492: PPUSH
3493: LD_INT 500
3495: PPUSH
3496: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3500: LD_EXP 15
3504: PPUSH
3505: LD_EXP 1
3509: PPUSH
3510: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3514: LD_EXP 1
3518: PPUSH
3519: LD_EXP 15
3523: PPUSH
3524: CALL_OW 119
// wait ( 0 0$1 ) ;
3528: LD_INT 35
3530: PPUSH
3531: CALL_OW 67
// DialogueOn ;
3535: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-1
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D5b-JMM-3
3582: PPUSH
3583: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3587: LD_EXP 15
3591: PPUSH
3592: LD_STRING D5b-Joan-3
3594: PPUSH
3595: CALL_OW 88
// DialogueOff ;
3599: CALL_OW 7
// end else
3603: GO 3940
// begin ComTurnUnit ( tmp , Joan ) ;
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_EXP 15
3614: PPUSH
3615: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3619: LD_VAR 0 4
3623: PPUSH
3624: LD_STRING D5a-Sol1-1
3626: PPUSH
3627: CALL_OW 88
// DialogueOff ;
3631: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3635: LD_EXP 15
3639: PPUSH
3640: LD_INT 500
3642: PPUSH
3643: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3647: LD_EXP 15
3651: PPUSH
3652: LD_VAR 0 4
3656: PPUSH
3657: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_EXP 15
3670: PPUSH
3671: CALL_OW 119
// wait ( 0 0$1 ) ;
3675: LD_INT 35
3677: PPUSH
3678: CALL_OW 67
// DialogueOn ;
3682: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-1
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-2
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-2
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3734: LD_EXP 15
3738: PPUSH
3739: LD_STRING D5a-Joan-3
3741: PPUSH
3742: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3746: LD_VAR 0 4
3750: PPUSH
3751: LD_STRING D5a-Sol1-4
3753: PPUSH
3754: CALL_OW 88
// DialogueOff ;
3758: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3762: LD_EXP 1
3766: PPUSH
3767: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3771: LD_EXP 1
3775: PPUSH
3776: CALL_OW 122
// wait ( 0 0$1 ) ;
3780: LD_INT 35
3782: PPUSH
3783: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3787: LD_INT 35
3789: PPUSH
3790: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3794: LD_EXP 15
3798: PUSH
3799: LD_VAR 0 4
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PPUSH
3808: LD_EXP 1
3812: PPUSH
3813: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3817: LD_EXP 15
3821: PPUSH
3822: LD_EXP 1
3826: PPUSH
3827: CALL_OW 296
3831: PUSH
3832: LD_INT 5
3834: LESS
3835: IFFALSE 3787
// ComTurnUnit ( Joan , JMM ) ;
3837: LD_EXP 15
3841: PPUSH
3842: LD_EXP 1
3846: PPUSH
3847: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3851: LD_EXP 1
3855: PPUSH
3856: LD_EXP 15
3860: PPUSH
3861: CALL_OW 119
// wait ( 0 0$1 ) ;
3865: LD_INT 35
3867: PPUSH
3868: CALL_OW 67
// DialogueOn ;
3872: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-4
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-4
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-5
3907: PPUSH
3908: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D5a-JMM-5
3919: PPUSH
3920: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3924: LD_EXP 15
3928: PPUSH
3929: LD_STRING D5a-Joan-6
3931: PPUSH
3932: CALL_OW 88
// DialogueOff ;
3936: CALL_OW 7
// end ; DialogueOn ;
3940: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-1
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-1
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-2
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-2
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-3
3999: PPUSH
4000: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4004: LD_EXP 15
4008: PPUSH
4009: LD_STRING D6-Joan-3
4011: PPUSH
4012: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4016: LD_EXP 1
4020: PPUSH
4021: LD_STRING D6-JMM-4
4023: PPUSH
4024: CALL_OW 88
// DialogueOff ;
4028: CALL_OW 7
// InGameOff ;
4032: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4036: LD_EXP 15
4040: PPUSH
4041: LD_INT 1
4043: PPUSH
4044: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4048: LD_STRING MJ
4050: PPUSH
4051: CALL_OW 337
// JoanStatus = 1 ;
4055: LD_ADDR_EXP 16
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// blockSpawn = 0 ;
4063: LD_ADDR_EXP 29
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// end ;
4071: LD_VAR 0 1
4075: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4076: LD_INT 0
4078: PPUSH
4079: PPUSH
// repeat wait ( 0 0$7 ) ;
4080: LD_INT 245
4082: PPUSH
4083: CALL_OW 67
// until blockSpawn = 0 ;
4087: LD_EXP 29
4091: PUSH
4092: LD_INT 0
4094: EQUAL
4095: IFFALSE 4080
// uc_side = 1 ;
4097: LD_ADDR_OWVAR 20
4101: PUSH
4102: LD_INT 1
4104: ST_TO_ADDR
// uc_nation = 1 ;
4105: LD_ADDR_OWVAR 21
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// InitHc ;
4113: CALL_OW 19
// if number = 1 then
4117: LD_VAR 0 1
4121: PUSH
4122: LD_INT 1
4124: EQUAL
4125: IFFALSE 4301
// begin hc_class := 3 ;
4127: LD_ADDR_OWVAR 28
4131: PUSH
4132: LD_INT 3
4134: ST_TO_ADDR
// hc_sex := sex_male ;
4135: LD_ADDR_OWVAR 27
4139: PUSH
4140: LD_INT 1
4142: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4143: LD_ADDR_OWVAR 33
4147: PUSH
4148: LD_STRING SecondCharsGal
4150: ST_TO_ADDR
// hc_face_number := 55 ;
4151: LD_ADDR_OWVAR 34
4155: PUSH
4156: LD_INT 55
4158: ST_TO_ADDR
// hc_name := George McCarthy ;
4159: LD_ADDR_OWVAR 26
4163: PUSH
4164: LD_STRING George McCarthy
4166: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4167: LD_ADDR_OWVAR 29
4171: PUSH
4172: LD_INT 11
4174: PUSH
4175: LD_INT 10
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4182: LD_ADDR_OWVAR 30
4186: PUSH
4187: LD_INT 0
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: LD_INT 2
4195: PUSH
4196: LD_INT 0
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4205: LD_ADDR_OWVAR 31
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 3
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: ST_TO_ADDR
// un = CreateHuman ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: CALL_OW 44
4237: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4238: LD_VAR 0 3
4242: PPUSH
4243: LD_INT 23
4245: PPUSH
4246: LD_INT 1
4248: PPUSH
4249: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4253: LD_VAR 0 3
4257: PPUSH
4258: CALL_OW 87
// wait ( 0 0$1 ) ;
4262: LD_INT 35
4264: PPUSH
4265: CALL_OW 67
// DialogueOn ;
4269: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4273: LD_VAR 0 3
4277: PPUSH
4278: LD_STRING D11d-Sol4-1
4280: PPUSH
4281: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4285: LD_EXP 1
4289: PPUSH
4290: LD_STRING D11d-JMM-1
4292: PPUSH
4293: CALL_OW 88
// DialogueOff ;
4297: CALL_OW 7
// end ; if number = 2 then
4301: LD_VAR 0 1
4305: PUSH
4306: LD_INT 2
4308: EQUAL
4309: IFFALSE 4485
// begin hc_class := 1 ;
4311: LD_ADDR_OWVAR 28
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// hc_sex := sex_male ;
4319: LD_ADDR_OWVAR 27
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4327: LD_ADDR_OWVAR 33
4331: PUSH
4332: LD_STRING AmGalRemake
4334: ST_TO_ADDR
// hc_face_number := 7 ;
4335: LD_ADDR_OWVAR 34
4339: PUSH
4340: LD_INT 7
4342: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4343: LD_ADDR_OWVAR 26
4347: PUSH
4348: LD_STRING Bobby Jordan
4350: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4351: LD_ADDR_OWVAR 29
4355: PUSH
4356: LD_INT 9
4358: PUSH
4359: LD_INT 11
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4366: LD_ADDR_OWVAR 30
4370: PUSH
4371: LD_INT 1
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 1
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4389: LD_ADDR_OWVAR 31
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
// un = CreateHuman ;
4412: LD_ADDR_VAR 0 3
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4422: LD_VAR 0 3
4426: PPUSH
4427: LD_INT 24
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: CALL_OW 49
// wait ( 0 0$1 ) ;
4437: LD_INT 35
4439: PPUSH
4440: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 87
// DialogueOn ;
4453: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4457: LD_VAR 0 3
4461: PPUSH
4462: LD_STRING D11b-Sol3-1
4464: PPUSH
4465: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4469: LD_EXP 1
4473: PPUSH
4474: LD_STRING D11b-JMM-1
4476: PPUSH
4477: CALL_OW 88
// DialogueOff ;
4481: CALL_OW 7
// end ; if number = 3 then
4485: LD_VAR 0 1
4489: PUSH
4490: LD_INT 3
4492: EQUAL
4493: IFFALSE 4657
// begin hc_class := 1 ;
4495: LD_ADDR_OWVAR 28
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// hc_sex := sex_male ;
4503: LD_ADDR_OWVAR 27
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// hc_gallery := DJ ;
4511: LD_ADDR_OWVAR 33
4515: PUSH
4516: LD_STRING DJ
4518: ST_TO_ADDR
// hc_face_number := 1 ;
4519: LD_ADDR_OWVAR 34
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// hc_name := Darius Dajay ;
4527: LD_ADDR_OWVAR 26
4531: PUSH
4532: LD_STRING Darius Dajay
4534: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4535: LD_ADDR_OWVAR 29
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 11
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4550: LD_ADDR_OWVAR 30
4554: PUSH
4555: LD_INT 2
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4573: LD_ADDR_OWVAR 31
4577: PUSH
4578: LD_INT 4
4580: PUSH
4581: LD_INT 0
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: LD_INT 0
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: ST_TO_ADDR
// un = CreateHuman ;
4596: LD_ADDR_VAR 0 3
4600: PUSH
4601: CALL_OW 44
4605: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4606: LD_VAR 0 3
4610: PPUSH
4611: LD_INT 25
4613: PPUSH
4614: LD_INT 1
4616: PPUSH
4617: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4621: LD_VAR 0 3
4625: PPUSH
4626: CALL_OW 87
// wait ( 0 0$1 ) ;
4630: LD_INT 35
4632: PPUSH
4633: CALL_OW 67
// DialogueOn ;
4637: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4641: LD_VAR 0 3
4645: PPUSH
4646: LD_STRING D11f-Sol5-1
4648: PPUSH
4649: CALL_OW 88
// DialogueOff ;
4653: CALL_OW 7
// end ; if number = 4 then
4657: LD_VAR 0 1
4661: PUSH
4662: LD_INT 4
4664: EQUAL
4665: IFFALSE 4829
// begin hc_class := 3 ;
4667: LD_ADDR_OWVAR 28
4671: PUSH
4672: LD_INT 3
4674: ST_TO_ADDR
// hc_sex := sex_female ;
4675: LD_ADDR_OWVAR 27
4679: PUSH
4680: LD_INT 2
4682: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4683: LD_ADDR_OWVAR 33
4687: PUSH
4688: LD_STRING SecondCharsGal
4690: ST_TO_ADDR
// hc_face_number := 46 ;
4691: LD_ADDR_OWVAR 34
4695: PUSH
4696: LD_INT 46
4698: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4699: LD_ADDR_OWVAR 26
4703: PUSH
4704: LD_STRING Sylvia Creak
4706: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4707: LD_ADDR_OWVAR 29
4711: PUSH
4712: LD_INT 10
4714: PUSH
4715: LD_INT 9
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4722: LD_ADDR_OWVAR 30
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4745: LD_ADDR_OWVAR 31
4749: PUSH
4750: LD_INT 1
4752: PUSH
4753: LD_INT 3
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// un = CreateHuman ;
4768: LD_ADDR_VAR 0 3
4772: PUSH
4773: CALL_OW 44
4777: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 26
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4793: LD_VAR 0 3
4797: PPUSH
4798: CALL_OW 87
// wait ( 0 0$1 ) ;
4802: LD_INT 35
4804: PPUSH
4805: CALL_OW 67
// DialogueOn ;
4809: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4813: LD_VAR 0 3
4817: PPUSH
4818: LD_STRING D11e-FSol4-1
4820: PPUSH
4821: CALL_OW 88
// DialogueOff ;
4825: CALL_OW 7
// end ; if number = 5 then
4829: LD_VAR 0 1
4833: PUSH
4834: LD_INT 5
4836: EQUAL
4837: IFFALSE 5013
// begin hc_class := 1 ;
4839: LD_ADDR_OWVAR 28
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// hc_sex := sex_female ;
4847: LD_ADDR_OWVAR 27
4851: PUSH
4852: LD_INT 2
4854: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4855: LD_ADDR_OWVAR 33
4859: PUSH
4860: LD_STRING SecondCharsGal
4862: ST_TO_ADDR
// hc_face_number := 37 ;
4863: LD_ADDR_OWVAR 34
4867: PUSH
4868: LD_INT 37
4870: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4871: LD_ADDR_OWVAR 26
4875: PUSH
4876: LD_STRING Margherite Simpson
4878: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4879: LD_ADDR_OWVAR 29
4883: PUSH
4884: LD_INT 11
4886: PUSH
4887: LD_INT 10
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4894: LD_ADDR_OWVAR 30
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: LD_INT 0
4907: PUSH
4908: LD_INT 0
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4917: LD_ADDR_OWVAR 31
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: LD_INT 1
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: ST_TO_ADDR
// un = CreateHuman ;
4940: LD_ADDR_VAR 0 3
4944: PUSH
4945: CALL_OW 44
4949: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4950: LD_VAR 0 3
4954: PPUSH
4955: LD_INT 27
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 87
// wait ( 0 0$1 ) ;
4974: LD_INT 35
4976: PPUSH
4977: CALL_OW 67
// DialogueOn ;
4981: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_STRING D11c-FSol3-1
4992: PPUSH
4993: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4997: LD_EXP 1
5001: PPUSH
5002: LD_STRING D11c-JMM-1
5004: PPUSH
5005: CALL_OW 88
// DialogueOff ;
5009: CALL_OW 7
// end ; if number = 6 then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 6
5020: EQUAL
5021: IFFALSE 5195
// begin hc_class := 1 ;
5023: LD_ADDR_OWVAR 28
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// hc_sex := sex_male ;
5031: LD_ADDR_OWVAR 27
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5039: LD_ADDR_OWVAR 33
5043: PUSH
5044: LD_STRING AmGalRemake
5046: ST_TO_ADDR
// hc_face_number := 1 ;
5047: LD_ADDR_OWVAR 34
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// hc_name := Charles Brown ;
5055: LD_ADDR_OWVAR 26
5059: PUSH
5060: LD_STRING Charles Brown
5062: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5063: LD_ADDR_OWVAR 29
5067: PUSH
5068: LD_INT 12
5070: PUSH
5071: LD_INT 11
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5078: LD_ADDR_OWVAR 30
5082: PUSH
5083: LD_INT 2
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: LD_INT 0
5091: PUSH
5092: LD_INT 0
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5101: LD_ADDR_OWVAR 31
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 0
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// un = CreateHuman ;
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: CALL_OW 44
5133: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 28
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5149: LD_VAR 0 3
5153: PPUSH
5154: CALL_OW 87
// wait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 67
// DialogueOn ;
5165: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5169: LD_VAR 0 3
5173: PPUSH
5174: LD_STRING D4-Sol1-5
5176: PPUSH
5177: CALL_OW 88
// DialogueOff ;
5181: CALL_OW 7
// tempCharles = un ;
5185: LD_ADDR_EXP 13
5189: PUSH
5190: LD_VAR 0 3
5194: ST_TO_ADDR
// end ; if number = 7 then
5195: LD_VAR 0 1
5199: PUSH
5200: LD_INT 7
5202: EQUAL
5203: IFFALSE 5453
// begin hc_class := 1 ;
5205: LD_ADDR_OWVAR 28
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// hc_sex := sex_female ;
5213: LD_ADDR_OWVAR 27
5217: PUSH
5218: LD_INT 2
5220: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5221: LD_ADDR_OWVAR 33
5225: PUSH
5226: LD_STRING AmGalRemake
5228: ST_TO_ADDR
// hc_face_number := 2 ;
5229: LD_ADDR_OWVAR 34
5233: PUSH
5234: LD_INT 2
5236: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5237: LD_ADDR_OWVAR 26
5241: PUSH
5242: LD_STRING Rebecca Macdonald
5244: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5245: LD_ADDR_OWVAR 29
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: LD_INT 10
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5260: LD_ADDR_OWVAR 30
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 0
5270: PUSH
5271: LD_INT 0
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5283: LD_ADDR_OWVAR 31
5287: PUSH
5288: LD_INT 1
5290: PUSH
5291: LD_INT 0
5293: PUSH
5294: LD_INT 0
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: ST_TO_ADDR
// un = CreateHuman ;
5306: LD_ADDR_VAR 0 3
5310: PUSH
5311: CALL_OW 44
5315: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5316: LD_VAR 0 3
5320: PPUSH
5321: LD_INT 29
5323: PPUSH
5324: LD_INT 1
5326: PPUSH
5327: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5331: LD_VAR 0 3
5335: PPUSH
5336: CALL_OW 87
// wait ( 0 0$1 ) ;
5340: LD_INT 35
5342: PPUSH
5343: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5347: LD_INT 30
5349: PPUSH
5350: LD_INT 22
5352: PUSH
5353: LD_INT 3
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PPUSH
5360: CALL_OW 70
5364: IFFALSE 5453
// begin DialogueOn ;
5366: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5370: LD_VAR 0 3
5374: PPUSH
5375: CALL_OW 250
5379: PPUSH
5380: LD_VAR 0 3
5384: PPUSH
5385: CALL_OW 251
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 15
5395: NEG
5396: PPUSH
5397: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL_OW 250
5410: PPUSH
5411: LD_VAR 0 3
5415: PPUSH
5416: CALL_OW 251
5420: PPUSH
5421: LD_INT 1
5423: PPUSH
5424: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5428: LD_VAR 0 3
5432: PPUSH
5433: LD_STRING D11a-FSol2-1
5435: PPUSH
5436: CALL_OW 88
// ComCrawl ( un ) ;
5440: LD_VAR 0 3
5444: PPUSH
5445: CALL_OW 137
// DialogueOff ;
5449: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5453: LD_ADDR_EXP 45
5457: PUSH
5458: LD_EXP 45
5462: PUSH
5463: LD_VAR 0 3
5467: UNION
5468: ST_TO_ADDR
// arrivals := arrivals union un ;
5469: LD_ADDR_EXP 46
5473: PUSH
5474: LD_EXP 46
5478: PUSH
5479: LD_VAR 0 3
5483: UNION
5484: ST_TO_ADDR
// end ;
5485: LD_VAR 0 2
5489: RET
// every 0 0$1 do var i ;
5490: GO 5492
5492: DISABLE
5493: LD_INT 0
5495: PPUSH
// begin enable ;
5496: ENABLE
// if not ignoreTarget then
5497: LD_EXP 45
5501: NOT
5502: IFFALSE 5506
// exit ;
5504: GO 5587
// for i in ignoreTarget do
5506: LD_ADDR_VAR 0 1
5510: PUSH
5511: LD_EXP 45
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5585
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 91
5531: PUSH
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 10
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: PUSH
5554: LD_EXP 45
5558: DIFF
5559: PUSH
5560: LD_INT 1
5562: GREATER
5563: IFFALSE 5583
// begin ignoreTarget := ignoreTarget diff i ;
5565: LD_ADDR_EXP 45
5569: PUSH
5570: LD_EXP 45
5574: PUSH
5575: LD_VAR 0 1
5579: DIFF
5580: ST_TO_ADDR
// break ;
5581: GO 5585
// end ;
5583: GO 5516
5585: POP
5586: POP
// end ; end_of_file
5587: PPOPN 1
5589: END
// export function PrepareRussian ; var i ; begin
5590: LD_INT 0
5592: PPUSH
5593: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5594: LD_INT 3
5596: PPUSH
5597: LD_INT 3
5599: PPUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_EXP 34
5607: PPUSH
5608: LD_EXP 35
5612: PPUSH
5613: CALL_OW 12
5617: PPUSH
5618: LD_INT 2
5620: PPUSH
5621: LD_INT 4
5623: PPUSH
5624: CALL 6159 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5628: LD_INT 3
5630: PPUSH
5631: LD_INT 3
5633: PPUSH
5634: LD_INT 8
5636: PPUSH
5637: LD_EXP 34
5641: PPUSH
5642: LD_EXP 35
5646: PPUSH
5647: CALL_OW 12
5651: PPUSH
5652: LD_INT 1
5654: PPUSH
5655: LD_INT 4
5657: PPUSH
5658: CALL 6159 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5662: LD_INT 3
5664: PPUSH
5665: LD_INT 3
5667: PPUSH
5668: LD_INT 67
5670: PPUSH
5671: LD_EXP 34
5675: PPUSH
5676: LD_EXP 35
5680: PPUSH
5681: CALL_OW 12
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 2
5691: PPUSH
5692: CALL 6159 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5696: LD_INT 3
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_INT 21
5704: PPUSH
5705: LD_EXP 34
5709: PPUSH
5710: LD_EXP 35
5714: PPUSH
5715: CALL_OW 12
5719: PPUSH
5720: LD_INT 3
5722: PPUSH
5723: LD_INT 6
5725: PPUSH
5726: CALL 6159 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5730: LD_INT 3
5732: PPUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_INT 17
5738: PPUSH
5739: LD_EXP 34
5743: PPUSH
5744: LD_EXP 35
5748: PPUSH
5749: CALL_OW 12
5753: PPUSH
5754: LD_INT 3
5756: PPUSH
5757: LD_INT 6
5759: PPUSH
5760: CALL 6159 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5764: LD_INT 3
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: LD_INT 32
5772: PPUSH
5773: LD_EXP 34
5777: PPUSH
5778: LD_EXP 35
5782: PPUSH
5783: CALL_OW 12
5787: PPUSH
5788: LD_INT 4
5790: PPUSH
5791: LD_INT 2
5793: PPUSH
5794: CALL 6159 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5798: LD_ADDR_VAR 0 2
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 3
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 3
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 32
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PPUSH
5838: CALL_OW 69
5842: PUSH
5843: FOR_IN
5844: IFFALSE 5884
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5846: LD_INT 3
5848: PPUSH
5849: LD_INT 3
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_EXP 34
5861: PPUSH
5862: LD_EXP 35
5866: PPUSH
5867: CALL_OW 12
5871: PPUSH
5872: LD_INT 1
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL 6159 0 6
5882: GO 5843
5884: POP
5885: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 21
5903: PUSH
5904: LD_INT 3
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 30
5913: PUSH
5914: LD_INT 31
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: PUSH
5931: FOR_IN
5932: IFFALSE 5960
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5934: LD_EXP 34
5938: PPUSH
5939: LD_EXP 35
5943: PPUSH
5944: CALL_OW 12
5948: PPUSH
5949: LD_VAR 0 2
5953: PPUSH
5954: CALL 6269 0 2
5958: GO 5931
5960: POP
5961: POP
// end ; end_of_file
5962: LD_VAR 0 1
5966: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
// if exist_mode then
5971: LD_VAR 0 2
5975: IFFALSE 6000
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5977: LD_ADDR_VAR 0 4
5981: PUSH
5982: LD_EXP 44
5986: PUSH
5987: LD_VAR 0 1
5991: STR
5992: PPUSH
5993: CALL_OW 34
5997: ST_TO_ADDR
// end else
5998: GO 6015
// begin unit := NewCharacter ( ident ) ;
6000: LD_ADDR_VAR 0 4
6004: PUSH
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 25
6014: ST_TO_ADDR
// end ; result := unit ;
6015: LD_ADDR_VAR 0 3
6019: PUSH
6020: LD_VAR 0 4
6024: ST_TO_ADDR
// end ;
6025: LD_VAR 0 3
6029: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6035: LD_ADDR_VAR 0 6
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 12
6057: ARRAY
6058: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6059: LD_VAR 0 6
6063: PPUSH
6064: CALL_OW 258
6068: PUSH
6069: LD_INT 1
6071: EQUAL
6072: IFFALSE 6090
// Say ( speaker , dialogMID ) else
6074: LD_VAR 0 6
6078: PPUSH
6079: LD_VAR 0 2
6083: PPUSH
6084: CALL_OW 88
6088: GO 6104
// Say ( speaker , dialogFID ) ;
6090: LD_VAR 0 6
6094: PPUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 88
// result := speaker ;
6104: LD_ADDR_VAR 0 4
6108: PUSH
6109: LD_VAR 0 6
6113: ST_TO_ADDR
// end ;
6114: LD_VAR 0 4
6118: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6119: LD_INT 0
6121: PPUSH
6122: PPUSH
// for i in charactersList do
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: LD_VAR 0 1
6132: PUSH
6133: FOR_IN
6134: IFFALSE 6152
// SaveCharacters ( i , ident ) ;
6136: LD_VAR 0 4
6140: PPUSH
6141: LD_VAR 0 2
6145: PPUSH
6146: CALL_OW 38
6150: GO 6133
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 3
6158: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
// for i = 1 to count do
6165: LD_ADDR_VAR 0 8
6169: PUSH
6170: DOUBLE
6171: LD_INT 1
6173: DEC
6174: ST_TO_ADDR
6175: LD_VAR 0 6
6179: PUSH
6180: FOR_TO
6181: IFFALSE 6262
// begin uc_side = side ;
6183: LD_ADDR_OWVAR 20
6187: PUSH
6188: LD_VAR 0 1
6192: ST_TO_ADDR
// uc_nation = nation ;
6193: LD_ADDR_OWVAR 21
6197: PUSH
6198: LD_VAR 0 2
6202: ST_TO_ADDR
// hc_gallery =  ;
6203: LD_ADDR_OWVAR 33
6207: PUSH
6208: LD_STRING 
6210: ST_TO_ADDR
// hc_name =  ;
6211: LD_ADDR_OWVAR 26
6215: PUSH
6216: LD_STRING 
6218: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6219: LD_INT 0
6221: PPUSH
6222: LD_VAR 0 5
6226: PPUSH
6227: LD_VAR 0 4
6231: PPUSH
6232: CALL_OW 380
// un = CreateHuman ;
6236: LD_ADDR_VAR 0 10
6240: PUSH
6241: CALL_OW 44
6245: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6246: LD_VAR 0 10
6250: PPUSH
6251: LD_VAR 0 3
6255: PPUSH
6256: CALL_OW 52
// end ;
6260: GO 6180
6262: POP
6263: POP
// end ;
6264: LD_VAR 0 7
6268: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6269: LD_INT 0
6271: PPUSH
6272: PPUSH
6273: PPUSH
// uc_side := GetSide ( b ) ;
6274: LD_ADDR_OWVAR 20
6278: PUSH
6279: LD_VAR 0 2
6283: PPUSH
6284: CALL_OW 255
6288: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6289: LD_ADDR_OWVAR 21
6293: PUSH
6294: LD_VAR 0 2
6298: PPUSH
6299: CALL_OW 248
6303: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6304: LD_INT 0
6306: PPUSH
6307: LD_INT 1
6309: PPUSH
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 2
6328: PPUSH
6329: CALL_OW 254
6333: PUSH
6334: LD_INT 3
6336: MINUS
6337: ST_TO_ADDR
// if dir < 0 then
6338: LD_VAR 0 5
6342: PUSH
6343: LD_INT 0
6345: LESS
6346: IFFALSE 6362
// dir := 6 + dir ;
6348: LD_ADDR_VAR 0 5
6352: PUSH
6353: LD_INT 6
6355: PUSH
6356: LD_VAR 0 5
6360: PLUS
6361: ST_TO_ADDR
// un := CreateHuman ;
6362: LD_ADDR_VAR 0 4
6366: PUSH
6367: CALL_OW 44
6371: ST_TO_ADDR
// SetDir ( un , dir ) ;
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_VAR 0 5
6381: PPUSH
6382: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_VAR 0 2
6395: PPUSH
6396: CALL_OW 52
// end ;
6400: LD_VAR 0 3
6404: RET
// export function PrepareDifficulty ; begin
6405: LD_INT 0
6407: PPUSH
// if Difficulty = 1 then
6408: LD_OWVAR 67
6412: PUSH
6413: LD_INT 1
6415: EQUAL
6416: IFFALSE 6434
// begin RuSolMinLevel = 2 ;
6418: LD_ADDR_EXP 34
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6426: LD_ADDR_EXP 35
6430: PUSH
6431: LD_INT 4
6433: ST_TO_ADDR
// end ; if Difficulty = 2 then
6434: LD_OWVAR 67
6438: PUSH
6439: LD_INT 2
6441: EQUAL
6442: IFFALSE 6460
// begin RuSolMinLevel = 3 ;
6444: LD_ADDR_EXP 34
6448: PUSH
6449: LD_INT 3
6451: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6452: LD_ADDR_EXP 35
6456: PUSH
6457: LD_INT 5
6459: ST_TO_ADDR
// end ; if Difficulty = 3 then
6460: LD_OWVAR 67
6464: PUSH
6465: LD_INT 3
6467: EQUAL
6468: IFFALSE 6486
// begin RuSolMinLevel = 3 ;
6470: LD_ADDR_EXP 34
6474: PUSH
6475: LD_INT 3
6477: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6478: LD_ADDR_EXP 35
6482: PUSH
6483: LD_INT 6
6485: ST_TO_ADDR
// end ; end ;
6486: LD_VAR 0 1
6490: RET
// export function ShowQuery1 ; begin
6491: LD_INT 0
6493: PPUSH
// case query ( QKill ) of 1 :
6494: LD_STRING QKill
6496: PPUSH
6497: CALL_OW 97
6501: PUSH
6502: LD_INT 1
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6521
6510: POP
// begin result = 1 ;
6511: LD_ADDR_VAR 0 1
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// end ; 2 :
6519: GO 6560
6521: LD_INT 2
6523: DOUBLE
6524: EQUAL
6525: IFTRUE 6529
6527: GO 6540
6529: POP
// begin result = 2 ;
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: LD_INT 2
6537: ST_TO_ADDR
// end ; 3 :
6538: GO 6560
6540: LD_INT 3
6542: DOUBLE
6543: EQUAL
6544: IFTRUE 6548
6546: GO 6559
6548: POP
// begin result = 3 ;
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: LD_INT 3
6556: ST_TO_ADDR
// end ; end ;
6557: GO 6560
6559: POP
// end ;
6560: LD_VAR 0 1
6564: RET
// export function ShowQuery2 ; begin
6565: LD_INT 0
6567: PPUSH
// case query ( QKill2 ) of 1 :
6568: LD_STRING QKill2
6570: PPUSH
6571: CALL_OW 97
6575: PUSH
6576: LD_INT 1
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6584
6582: GO 6595
6584: POP
// begin result = 1 ;
6585: LD_ADDR_VAR 0 1
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// end ; 2 :
6593: GO 6615
6595: LD_INT 2
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6614
6603: POP
// begin result = 2 ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 2
6611: ST_TO_ADDR
// end ; end ;
6612: GO 6615
6614: POP
// end ;
6615: LD_VAR 0 1
6619: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
6625: PPUSH
6626: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: LD_INT 48
6634: PUSH
6635: LD_INT 49
6637: PUSH
6638: LD_INT 50
6640: PUSH
6641: LD_INT 20
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: LD_INT 51
6649: PUSH
6650: LD_INT 52
6652: PUSH
6653: LD_INT 69
6655: PUSH
6656: LD_INT 39
6658: PUSH
6659: LD_INT 34
6661: PUSH
6662: LD_INT 40
6664: PUSH
6665: LD_INT 53
6667: PUSH
6668: LD_INT 71
6670: PUSH
6671: LD_INT 57
6673: PUSH
6674: LD_INT 58
6676: PUSH
6677: LD_INT 44
6679: PUSH
6680: LD_INT 32
6682: PUSH
6683: LD_INT 27
6685: PUSH
6686: LD_INT 23
6688: PUSH
6689: LD_INT 33
6691: PUSH
6692: LD_INT 59
6694: PUSH
6695: LD_INT 54
6697: PUSH
6698: LD_INT 55
6700: PUSH
6701: LD_INT 56
6703: PUSH
6704: LD_INT 63
6706: PUSH
6707: LD_INT 64
6709: PUSH
6710: LD_INT 65
6712: PUSH
6713: LD_INT 30
6715: PUSH
6716: LD_INT 31
6718: PUSH
6719: LD_INT 21
6721: PUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 25
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6762: LD_ADDR_VAR 0 5
6766: PUSH
6767: DOUBLE
6768: LD_INT 1
6770: DEC
6771: ST_TO_ADDR
6772: LD_VAR 0 8
6776: PUSH
6777: FOR_TO
6778: IFFALSE 6854
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6780: LD_VAR 0 8
6784: PUSH
6785: LD_VAR 0 5
6789: ARRAY
6790: PPUSH
6791: LD_VAR 0 1
6795: PPUSH
6796: CALL_OW 321
6800: PUSH
6801: LD_INT 1
6803: EQUAL
6804: PUSH
6805: LD_VAR 0 8
6809: PUSH
6810: LD_VAR 0 5
6814: ARRAY
6815: PPUSH
6816: LD_VAR 0 3
6820: PPUSH
6821: CALL_OW 482
6825: PUSH
6826: LD_INT 1
6828: EQUAL
6829: AND
6830: IFFALSE 6852
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6832: LD_VAR 0 2
6836: PPUSH
6837: LD_VAR 0 8
6841: PUSH
6842: LD_VAR 0 5
6846: ARRAY
6847: PPUSH
6848: CALL_OW 184
6852: GO 6777
6854: POP
6855: POP
// end ;
6856: LD_VAR 0 4
6860: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6861: LD_INT 0
6863: PPUSH
6864: PPUSH
6865: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6866: LD_INT 22
6868: PUSH
6869: LD_VAR 0 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 21
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: PUSH
6897: LD_VAR 0 3
6901: LESSEQUAL
6902: IFFALSE 7010
// begin for i = 1 to vehCount do
6904: LD_ADDR_VAR 0 9
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 3
6918: PUSH
6919: FOR_TO
6920: IFFALSE 7008
// begin weapon = weaponTab [ i ] ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_VAR 0 4
6931: PUSH
6932: LD_VAR 0 9
6936: ARRAY
6937: ST_TO_ADDR
// if weapon = 46 then
6938: LD_VAR 0 10
6942: PUSH
6943: LD_INT 46
6945: EQUAL
6946: IFFALSE 6977
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_INT 24
6955: PPUSH
6956: LD_VAR 0 5
6960: PPUSH
6961: LD_VAR 0 6
6965: PPUSH
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 185
// end else
6975: GO 7006
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6977: LD_VAR 0 2
6981: PPUSH
6982: LD_VAR 0 7
6986: PPUSH
6987: LD_VAR 0 5
6991: PPUSH
6992: LD_VAR 0 6
6996: PPUSH
6997: LD_VAR 0 10
7001: PPUSH
7002: CALL_OW 185
// end ; end ;
7006: GO 6919
7008: POP
7009: POP
// end ; end ;
7010: LD_VAR 0 8
7014: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7015: LD_INT 0
7017: PPUSH
7018: PPUSH
7019: PPUSH
7020: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7021: LD_ADDR_VAR 0 8
7025: PUSH
7026: LD_INT 22
7028: PUSH
7029: LD_VAR 0 1
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 21
7040: PUSH
7041: LD_INT 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 3
7050: PUSH
7051: LD_INT 24
7053: PUSH
7054: LD_INT 650
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: PPUSH
7070: CALL_OW 69
7074: ST_TO_ADDR
// if damageVehicles > 0 then
7075: LD_VAR 0 8
7079: PUSH
7080: LD_INT 0
7082: GREATER
7083: IFFALSE 7104
// ComMoveXY ( damageVehicles , repX , repY ) ;
7085: LD_VAR 0 8
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: LD_VAR 0 4
7099: PPUSH
7100: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7104: LD_VAR 0 8
7108: PPUSH
7109: LD_INT 95
7111: PUSH
7112: LD_VAR 0 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 3
7123: PUSH
7124: LD_INT 58
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PPUSH
7138: CALL_OW 72
7142: PUSH
7143: LD_INT 0
7145: GREATER
7146: IFFALSE 7213
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7148: LD_ADDR_VAR 0 6
7152: PUSH
7153: LD_VAR 0 8
7157: PPUSH
7158: LD_INT 95
7160: PUSH
7161: LD_VAR 0 2
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: LD_INT 58
7175: PUSH
7176: EMPTY
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7211
// ComExitVehicle ( UnitsInside ( i ) ) ;
7195: LD_VAR 0 6
7199: PPUSH
7200: CALL_OW 313
7204: PPUSH
7205: CALL_OW 121
7209: GO 7192
7211: POP
7212: POP
// end ;
7213: LD_VAR 0 5
7217: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7227: LD_ADDR_VAR 0 8
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_VAR 0 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 21
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 24
7256: PUSH
7257: LD_INT 660
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 3
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: EMPTY
7271: LIST
7272: PUSH
7273: LD_INT 2
7275: PUSH
7276: LD_INT 34
7278: PUSH
7279: LD_INT 43
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 34
7288: PUSH
7289: LD_INT 44
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 34
7298: PUSH
7299: LD_INT 46
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PPUSH
7323: CALL_OW 69
7327: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7328: LD_INT 22
7330: PUSH
7331: LD_VAR 0 1
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 24
7352: PUSH
7353: LD_INT 1000
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: LD_INT 58
7365: PUSH
7366: EMPTY
7367: LIST
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 34
7374: PUSH
7375: LD_INT 43
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 34
7384: PUSH
7385: LD_INT 44
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 34
7394: PUSH
7395: LD_INT 46
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: PUSH
7424: LD_INT 5
7426: PUSH
7427: LD_INT 6
7429: PUSH
7430: LD_INT 6
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: PUSH
7438: LD_OWVAR 67
7442: ARRAY
7443: EQUAL
7444: IFFALSE 7700
// if seeEnemy = 0 then
7446: LD_VAR 0 11
7450: PUSH
7451: LD_INT 0
7453: EQUAL
7454: IFFALSE 7700
// repeat wait ( 0 0$1 ) ;
7456: LD_INT 35
7458: PPUSH
7459: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 21
7482: PUSH
7483: LD_INT 2
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 24
7492: PUSH
7493: LD_INT 660
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 3
7502: PUSH
7503: LD_INT 58
7505: PUSH
7506: EMPTY
7507: LIST
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 43
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 34
7524: PUSH
7525: LD_INT 44
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 34
7534: PUSH
7535: LD_INT 46
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 69
7563: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7564: LD_INT 22
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 95
7578: PUSH
7579: LD_VAR 0 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PPUSH
7592: CALL_OW 69
7596: NOT
7597: PUSH
7598: LD_VAR 0 11
7602: PUSH
7603: LD_INT 0
7605: EQUAL
7606: AND
7607: IFFALSE 7662
// for i := 1 to wayX do
7609: LD_ADDR_VAR 0 6
7613: PUSH
7614: DOUBLE
7615: LD_INT 1
7617: DEC
7618: ST_TO_ADDR
7619: LD_VAR 0 3
7623: PUSH
7624: FOR_TO
7625: IFFALSE 7660
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7627: LD_VAR 0 8
7631: PPUSH
7632: LD_VAR 0 3
7636: PUSH
7637: LD_VAR 0 6
7641: ARRAY
7642: PPUSH
7643: LD_VAR 0 4
7647: PUSH
7648: LD_VAR 0 6
7652: ARRAY
7653: PPUSH
7654: CALL_OW 114
7658: GO 7624
7660: POP
7661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7662: LD_INT 22
7664: PUSH
7665: LD_VAR 0 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 95
7676: PUSH
7677: LD_VAR 0 2
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: PUSH
7695: LD_INT 0
7697: GREATER
7698: IFFALSE 7456
// seeEnemy = 1 ;
7700: LD_ADDR_VAR 0 11
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7708: LD_INT 35
7710: PPUSH
7711: CALL_OW 67
// for j in vehiclesOK do
7715: LD_ADDR_VAR 0 7
7719: PUSH
7720: LD_VAR 0 8
7724: PUSH
7725: FOR_IN
7726: IFFALSE 7939
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7728: LD_ADDR_VAR 0 9
7732: PUSH
7733: LD_INT 81
7735: PUSH
7736: LD_VAR 0 1
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 101
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PPUSH
7759: CALL_OW 69
7763: PUSH
7764: LD_EXP 45
7768: DIFF
7769: PPUSH
7770: LD_VAR 0 7
7774: PPUSH
7775: CALL_OW 74
7779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7780: LD_ADDR_VAR 0 10
7784: PUSH
7785: LD_INT 81
7787: PUSH
7788: LD_VAR 0 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 101
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: LD_INT 59
7812: PUSH
7813: EMPTY
7814: LIST
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 21
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: PPUSH
7850: CALL_OW 69
7854: PUSH
7855: LD_EXP 45
7859: DIFF
7860: PPUSH
7861: LD_VAR 0 7
7865: PPUSH
7866: CALL_OW 74
7870: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7871: LD_VAR 0 7
7875: PPUSH
7876: LD_VAR 0 9
7880: PPUSH
7881: CALL_OW 296
7885: PUSH
7886: LD_INT 8
7888: PLUS
7889: PUSH
7890: LD_VAR 0 7
7894: PPUSH
7895: LD_VAR 0 10
7899: PPUSH
7900: CALL_OW 296
7904: LESS
7905: IFFALSE 7923
// ComAttackUnit ( j , target1 ) else
7907: LD_VAR 0 7
7911: PPUSH
7912: LD_VAR 0 9
7916: PPUSH
7917: CALL_OW 115
7921: GO 7937
// ComAttackUnit ( j , target2 ) ;
7923: LD_VAR 0 7
7927: PPUSH
7928: LD_VAR 0 10
7932: PPUSH
7933: CALL_OW 115
// end ;
7937: GO 7725
7939: POP
7940: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7941: LD_INT 22
7943: PUSH
7944: LD_VAR 0 1
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 21
7955: PUSH
7956: LD_INT 2
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 24
7965: PUSH
7966: LD_INT 1000
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: LD_INT 58
7978: PUSH
7979: EMPTY
7980: LIST
7981: PUSH
7982: LD_INT 2
7984: PUSH
7985: LD_INT 34
7987: PUSH
7988: LD_INT 43
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 34
7997: PUSH
7998: LD_INT 44
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 34
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PPUSH
8032: CALL_OW 69
8036: PUSH
8037: LD_INT 0
8039: EQUAL
8040: IFFALSE 7708
// seeEnemy = 0 ;
8042: LD_ADDR_VAR 0 11
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// end ;
8050: LD_VAR 0 5
8054: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8063: LD_ADDR_VAR 0 8
8067: PUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 313
8077: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8078: LD_ADDR_VAR 0 9
8082: PUSH
8083: LD_VAR 0 3
8087: PPUSH
8088: LD_INT 22
8090: PUSH
8091: LD_VAR 0 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 25
8102: PUSH
8103: LD_INT 2
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 24
8112: PUSH
8113: LD_INT 750
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 54
8125: PUSH
8126: EMPTY
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 70
8143: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8144: LD_ADDR_VAR 0 6
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 3
8178: PUSH
8179: LD_INT 24
8181: PUSH
8182: LD_INT 1000
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: PPUSH
8201: CALL_OW 70
8205: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8206: LD_VAR 0 6
8210: NOT
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_VAR 0 1
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 25
8226: PUSH
8227: LD_INT 2
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 24
8236: PUSH
8237: LD_INT 250
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: NOT
8254: AND
8255: IFFALSE 8259
// exit ;
8257: GO 8441
// if buildings_list > 0 and engineerOkInside then
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 0
8266: GREATER
8267: PUSH
8268: LD_VAR 0 8
8272: AND
8273: IFFALSE 8284
// ComExitBuilding ( engineerOkInside ) ;
8275: LD_VAR 0 8
8279: PPUSH
8280: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8284: LD_VAR 0 6
8288: PUSH
8289: LD_INT 0
8291: GREATER
8292: PUSH
8293: LD_VAR 0 9
8297: PUSH
8298: LD_INT 0
8300: GREATER
8301: AND
8302: IFFALSE 8322
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8304: LD_VAR 0 9
8308: PPUSH
8309: LD_VAR 0 6
8313: PUSH
8314: LD_INT 1
8316: ARRAY
8317: PPUSH
8318: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8322: LD_VAR 0 6
8326: PUSH
8327: LD_INT 0
8329: EQUAL
8330: PUSH
8331: LD_VAR 0 4
8335: PUSH
8336: LD_INT 0
8338: EQUAL
8339: AND
8340: PUSH
8341: LD_VAR 0 9
8345: PUSH
8346: LD_INT 0
8348: GREATER
8349: AND
8350: IFFALSE 8366
// ComEnterUnit ( engineerOkOutside , building ) ;
8352: LD_VAR 0 9
8356: PPUSH
8357: LD_VAR 0 2
8361: PPUSH
8362: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8366: LD_VAR 0 9
8370: PUSH
8371: LD_INT 0
8373: GREATER
8374: PUSH
8375: LD_VAR 0 6
8379: PUSH
8380: LD_INT 0
8382: EQUAL
8383: AND
8384: PUSH
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 0
8392: GREATER
8393: AND
8394: IFFALSE 8441
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8396: LD_VAR 0 9
8400: PPUSH
8401: LD_VAR 0 4
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 4
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 4
8423: PUSH
8424: LD_INT 3
8426: ARRAY
8427: PPUSH
8428: LD_VAR 0 4
8432: PUSH
8433: LD_INT 4
8435: ARRAY
8436: PPUSH
8437: CALL_OW 145
// end ;
8441: LD_VAR 0 5
8445: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8457: LD_ADDR_VAR 0 6
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_VAR 0 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 25
8476: PUSH
8477: LD_INT 4
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 23
8486: PUSH
8487: LD_INT 2
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 24
8496: PUSH
8497: LD_INT 251
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 69
8514: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8515: LD_ADDR_VAR 0 7
8519: PUSH
8520: LD_VAR 0 3
8524: PPUSH
8525: LD_INT 22
8527: PUSH
8528: LD_VAR 0 1
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: LD_INT 23
8539: PUSH
8540: LD_INT 2
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 25
8549: PUSH
8550: LD_INT 4
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 50
8559: PUSH
8560: EMPTY
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 70
8573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8574: LD_ADDR_VAR 0 10
8578: PUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: LD_INT 25
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: LD_INT 24
8628: PUSH
8629: LD_INT 750
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 70
8650: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8651: LD_ADDR_VAR 0 11
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 21
8675: PUSH
8676: LD_INT 1
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 3
8685: PUSH
8686: LD_INT 25
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: LD_INT 1000
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 70
8727: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8728: LD_VAR 0 10
8732: NOT
8733: PUSH
8734: LD_VAR 0 11
8738: NOT
8739: AND
8740: PUSH
8741: LD_VAR 0 6
8745: NOT
8746: AND
8747: IFFALSE 8751
// exit ;
8749: GO 8985
// if damageUnits > 0 and sci_list > 0 then
8751: LD_VAR 0 10
8755: PUSH
8756: LD_INT 0
8758: GREATER
8759: PUSH
8760: LD_VAR 0 6
8764: PUSH
8765: LD_INT 0
8767: GREATER
8768: AND
8769: IFFALSE 8785
// ComMoveToArea ( damageUnits , healArea ) ;
8771: LD_VAR 0 10
8775: PPUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8785: LD_VAR 0 11
8789: PUSH
8790: LD_INT 0
8792: GREATER
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 0
8801: GREATER
8802: AND
8803: IFFALSE 8814
// ComExitBuilding ( sci_list ) ;
8805: LD_VAR 0 6
8809: PPUSH
8810: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8814: LD_VAR 0 11
8818: PUSH
8819: LD_INT 0
8821: GREATER
8822: PUSH
8823: LD_VAR 0 7
8827: PUSH
8828: LD_INT 0
8830: GREATER
8831: AND
8832: IFFALSE 8852
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8834: LD_VAR 0 7
8838: PPUSH
8839: LD_VAR 0 11
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8852: LD_VAR 0 10
8856: PUSH
8857: LD_INT 0
8859: EQUAL
8860: PUSH
8861: LD_VAR 0 11
8865: PUSH
8866: LD_INT 0
8868: EQUAL
8869: AND
8870: PUSH
8871: LD_VAR 0 7
8875: PUSH
8876: LD_INT 0
8878: GREATER
8879: AND
8880: IFFALSE 8985
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8882: LD_ADDR_VAR 0 12
8886: PUSH
8887: LD_INT 22
8889: PUSH
8890: LD_VAR 0 1
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 21
8901: PUSH
8902: LD_INT 3
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 30
8911: PUSH
8912: LD_INT 8
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_INT 1
8936: PPUSH
8937: LD_VAR 0 12
8941: PPUSH
8942: CALL_OW 12
8946: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8947: LD_VAR 0 7
8951: PPUSH
8952: LD_INT 3
8954: PUSH
8955: LD_INT 60
8957: PUSH
8958: EMPTY
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 72
8969: PPUSH
8970: LD_VAR 0 12
8974: PUSH
8975: LD_VAR 0 13
8979: ARRAY
8980: PPUSH
8981: CALL_OW 120
// end ; end ;
8985: LD_VAR 0 5
8989: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8990: LD_INT 0
8992: PPUSH
8993: PPUSH
8994: PPUSH
8995: PPUSH
// tmpTab = [ ] ;
8996: LD_ADDR_VAR 0 6
9000: PUSH
9001: EMPTY
9002: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9003: LD_INT 22
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 30
9017: PUSH
9018: LD_INT 32
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PPUSH
9029: CALL_OW 69
9033: PUSH
9034: LD_INT 0
9036: GREATER
9037: IFFALSE 9120
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9039: LD_ADDR_VAR 0 4
9043: PUSH
9044: LD_INT 22
9046: PUSH
9047: LD_VAR 0 1
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 30
9058: PUSH
9059: LD_INT 32
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 69
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9118
// begin for j in UnitsInside ( i ) do
9078: LD_ADDR_VAR 0 5
9082: PUSH
9083: LD_VAR 0 4
9087: PPUSH
9088: CALL_OW 313
9092: PUSH
9093: FOR_IN
9094: IFFALSE 9114
// tmpTab = tmpTab ^ j ;
9096: LD_ADDR_VAR 0 6
9100: PUSH
9101: LD_VAR 0 6
9105: PUSH
9106: LD_VAR 0 5
9110: ADD
9111: ST_TO_ADDR
9112: GO 9093
9114: POP
9115: POP
// end ;
9116: GO 9075
9118: POP
9119: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9120: LD_VAR 0 6
9124: PPUSH
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 250
9134: PPUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 251
9144: PPUSH
9145: CALL_OW 114
// end ;
9149: LD_VAR 0 3
9153: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// enable ;
9160: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9161: LD_ADDR_VAR 0 7
9165: PUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: CALL_OW 435
9175: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9176: LD_ADDR_VAR 0 6
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_VAR 0 1
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 34
9195: PUSH
9196: LD_VAR 0 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 69
9213: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9214: LD_VAR 0 6
9218: PUSH
9219: LD_INT 0
9221: GREATER
9222: PUSH
9223: LD_VAR 0 3
9227: PPUSH
9228: CALL_OW 435
9232: AND
9233: PUSH
9234: LD_VAR 0 7
9238: PUSH
9239: LD_INT 0
9241: GREATER
9242: AND
9243: IFFALSE 9292
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9245: LD_VAR 0 6
9249: PUSH
9250: LD_INT 1
9252: ARRAY
9253: PPUSH
9254: LD_VAR 0 7
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_VAR 0 7
9267: PUSH
9268: LD_INT 2
9270: ARRAY
9271: PPUSH
9272: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9276: LD_VAR 0 6
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: PPUSH
9285: LD_INT 100
9287: PPUSH
9288: CALL_OW 240
// end ; end ;
9292: LD_VAR 0 4
9296: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9297: LD_INT 0
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9307: LD_ADDR_VAR 0 6
9311: PUSH
9312: LD_VAR 0 2
9316: PPUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 56
9331: PUSH
9332: EMPTY
9333: LIST
9334: PUSH
9335: LD_INT 24
9337: PUSH
9338: LD_INT 700
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 3
9347: PUSH
9348: LD_INT 60
9350: PUSH
9351: EMPTY
9352: LIST
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 2
9360: PUSH
9361: LD_INT 25
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 25
9373: PUSH
9374: LD_INT 5
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 25
9383: PUSH
9384: LD_INT 8
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 25
9393: PUSH
9394: LD_INT 9
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 70
9419: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9420: LD_ADDR_VAR 0 7
9424: PUSH
9425: LD_VAR 0 2
9429: PPUSH
9430: LD_INT 22
9432: PUSH
9433: LD_VAR 0 1
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 30
9444: PUSH
9445: LD_INT 32
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 58
9454: PUSH
9455: EMPTY
9456: LIST
9457: PUSH
9458: LD_INT 24
9460: PUSH
9461: LD_INT 251
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9479: LD_ADDR_VAR 0 9
9483: PUSH
9484: LD_VAR 0 2
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 30
9506: PUSH
9507: LD_INT 4
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: LD_INT 30
9516: PUSH
9517: LD_INT 5
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 24
9531: PUSH
9532: LD_INT 251
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: PPUSH
9544: CALL_OW 70
9548: ST_TO_ADDR
// if barrackList > 0 then
9549: LD_VAR 0 9
9553: PUSH
9554: LD_INT 0
9556: GREATER
9557: IFFALSE 9705
// begin if turretList = 0 then
9559: LD_VAR 0 7
9563: PUSH
9564: LD_INT 0
9566: EQUAL
9567: IFFALSE 9609
// begin if soldiers_list > 0 then
9569: LD_VAR 0 6
9573: PUSH
9574: LD_INT 0
9576: GREATER
9577: IFFALSE 9607
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9579: LD_VAR 0 6
9583: PPUSH
9584: LD_VAR 0 9
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 9
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: PPUSH
9603: CALL_OW 120
// end else
9607: GO 9705
// begin for i in barrackList do
9609: LD_ADDR_VAR 0 4
9613: PUSH
9614: LD_VAR 0 9
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9703
// begin insideUnits = UnitsInside ( i ) ;
9622: LD_ADDR_VAR 0 10
9626: PUSH
9627: LD_VAR 0 4
9631: PPUSH
9632: CALL_OW 313
9636: ST_TO_ADDR
// if insideUnits > 0 then
9637: LD_VAR 0 10
9641: PUSH
9642: LD_INT 0
9644: GREATER
9645: IFFALSE 9669
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9647: LD_VAR 0 10
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: LD_VAR 0 7
9660: PUSH
9661: LD_INT 1
9663: ARRAY
9664: PPUSH
9665: CALL_OW 120
// if soldiers_list > 0 then
9669: LD_VAR 0 6
9673: PUSH
9674: LD_INT 0
9676: GREATER
9677: IFFALSE 9701
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9679: LD_VAR 0 6
9683: PUSH
9684: LD_INT 1
9686: ARRAY
9687: PPUSH
9688: LD_VAR 0 7
9692: PUSH
9693: LD_INT 1
9695: ARRAY
9696: PPUSH
9697: CALL_OW 120
// end ;
9701: GO 9619
9703: POP
9704: POP
// end ; end ; end ;
9705: LD_VAR 0 3
9709: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9710: LD_INT 0
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9717: LD_ADDR_VAR 0 6
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_VAR 0 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 32
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 30
9759: PUSH
9760: LD_INT 33
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 30
9779: PUSH
9780: LD_INT 5
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9804: LD_ADDR_VAR 0 7
9808: PUSH
9809: LD_INT 22
9811: PUSH
9812: LD_VAR 0 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 58
9833: PUSH
9834: EMPTY
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: PPUSH
9842: CALL_OW 69
9846: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9847: LD_VAR 0 6
9851: PUSH
9852: LD_INT 0
9854: GREATER
9855: PUSH
9856: LD_VAR 0 7
9860: PUSH
9861: LD_INT 0
9863: GREATER
9864: AND
9865: IFFALSE 9935
// begin for i in turretsList do
9867: LD_ADDR_VAR 0 4
9871: PUSH
9872: LD_VAR 0 6
9876: PUSH
9877: FOR_IN
9878: IFFALSE 9933
// begin for j in enemyBuildings do
9880: LD_ADDR_VAR 0 5
9884: PUSH
9885: LD_VAR 0 7
9889: PUSH
9890: FOR_IN
9891: IFFALSE 9929
// begin if GetDistUnits ( i , j ) < 20 then
9893: LD_VAR 0 4
9897: PPUSH
9898: LD_VAR 0 5
9902: PPUSH
9903: CALL_OW 296
9907: PUSH
9908: LD_INT 20
9910: LESS
9911: IFFALSE 9927
// begin ComAttackUnit ( i , j ) ;
9913: LD_VAR 0 4
9917: PPUSH
9918: LD_VAR 0 5
9922: PPUSH
9923: CALL_OW 115
// end ; end ;
9927: GO 9890
9929: POP
9930: POP
// end ;
9931: GO 9877
9933: POP
9934: POP
// end ; end ;
9935: LD_VAR 0 3
9939: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9948: LD_ADDR_VAR 0 8
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_VAR 0 1
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 2
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 34
9977: PUSH
9978: LD_INT 52
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: PPUSH
9990: CALL_OW 69
9994: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9995: LD_ADDR_VAR 0 9
9999: PUSH
10000: LD_INT 22
10002: PUSH
10003: LD_VAR 0 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 3
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: LD_INT 24
10027: PUSH
10028: LD_INT 1000
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: PPUSH
10047: CALL_OW 69
10051: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10052: LD_VAR 0 9
10056: PUSH
10057: LD_INT 0
10059: GREATER
10060: PUSH
10061: LD_VAR 0 8
10065: PPUSH
10066: LD_INT 24
10068: PUSH
10069: LD_INT 750
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 72
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: AND
10085: IFFALSE 10120
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10087: LD_VAR 0 8
10091: PPUSH
10092: LD_INT 24
10094: PUSH
10095: LD_INT 750
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 72
10106: PPUSH
10107: LD_VAR 0 9
10111: PUSH
10112: LD_INT 1
10114: ARRAY
10115: PPUSH
10116: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10120: LD_VAR 0 8
10124: PPUSH
10125: LD_INT 3
10127: PUSH
10128: LD_INT 24
10130: PUSH
10131: LD_INT 750
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 72
10146: PUSH
10147: LD_INT 0
10149: GREATER
10150: IFFALSE 10188
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10152: LD_VAR 0 8
10156: PPUSH
10157: LD_INT 3
10159: PUSH
10160: LD_INT 24
10162: PUSH
10163: LD_INT 750
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 72
10178: PPUSH
10179: LD_VAR 0 2
10183: PPUSH
10184: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10188: LD_VAR 0 8
10192: PUSH
10193: LD_INT 0
10195: GREATER
10196: PUSH
10197: LD_VAR 0 9
10201: PUSH
10202: LD_INT 0
10204: EQUAL
10205: AND
10206: PUSH
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 0
10214: GREATER
10215: AND
10216: IFFALSE 10263
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 1
10230: ARRAY
10231: PPUSH
10232: LD_VAR 0 3
10236: PUSH
10237: LD_INT 2
10239: ARRAY
10240: PPUSH
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PPUSH
10250: LD_VAR 0 3
10254: PUSH
10255: LD_INT 4
10257: ARRAY
10258: PPUSH
10259: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10263: LD_VAR 0 2
10267: PPUSH
10268: LD_INT 22
10270: PUSH
10271: LD_VAR 0 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 21
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 34
10292: PUSH
10293: LD_INT 52
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 3
10302: PUSH
10303: LD_INT 24
10305: PUSH
10306: LD_INT 750
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 70
10327: PUSH
10328: LD_INT 0
10330: GREATER
10331: IFFALSE 10533
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: LD_VAR 0 2
10342: PPUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 34
10367: PUSH
10368: LD_INT 52
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 24
10380: PUSH
10381: LD_INT 750
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10531
// begin mechTmp = UnitsInside ( i ) ;
10406: LD_ADDR_VAR 0 6
10410: PUSH
10411: LD_VAR 0 5
10415: PPUSH
10416: CALL_OW 313
10420: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10430: LD_VAR 0 6
10434: PPUSH
10435: LD_VAR 0 7
10439: PPUSH
10440: CALL_OW 189
// wait ( 0 0$2 ) ;
10444: LD_INT 70
10446: PPUSH
10447: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10451: LD_VAR 0 6
10455: PPUSH
10456: LD_VAR 0 2
10460: PPUSH
10461: LD_INT 22
10463: PUSH
10464: LD_VAR 0 1
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 2
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 52
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 24
10495: PUSH
10496: LD_INT 1000
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 58
10505: PUSH
10506: EMPTY
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 70
10520: PUSH
10521: LD_INT 1
10523: ARRAY
10524: PPUSH
10525: CALL_OW 180
// end ;
10529: GO 10403
10531: POP
10532: POP
// end ; end ;
10533: LD_VAR 0 4
10537: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
// for i = 1 to medicCount do
10551: LD_ADDR_VAR 0 14
10555: PUSH
10556: DOUBLE
10557: LD_INT 1
10559: DEC
10560: ST_TO_ADDR
10561: LD_VAR 0 7
10565: PUSH
10566: FOR_TO
10567: IFFALSE 10649
// begin uc_side = side ;
10569: LD_ADDR_OWVAR 20
10573: PUSH
10574: LD_VAR 0 1
10578: ST_TO_ADDR
// uc_nation = nation ;
10579: LD_ADDR_OWVAR 21
10583: PUSH
10584: LD_VAR 0 2
10588: ST_TO_ADDR
// hc_name =  ;
10589: LD_ADDR_OWVAR 26
10593: PUSH
10594: LD_STRING 
10596: ST_TO_ADDR
// hc_gallery =  ;
10597: LD_ADDR_OWVAR 33
10601: PUSH
10602: LD_STRING 
10604: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10605: LD_INT 0
10607: PPUSH
10608: LD_INT 4
10610: PPUSH
10611: LD_VAR 0 8
10615: PPUSH
10616: CALL_OW 380
// un = CreateHuman ;
10620: LD_ADDR_VAR 0 16
10624: PUSH
10625: CALL_OW 44
10629: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10630: LD_VAR 0 16
10634: PPUSH
10635: LD_VAR 0 9
10639: PPUSH
10640: LD_INT 0
10642: PPUSH
10643: CALL_OW 49
// end ;
10647: GO 10566
10649: POP
10650: POP
// for i = 1 to soldierCount do
10651: LD_ADDR_VAR 0 14
10655: PUSH
10656: DOUBLE
10657: LD_INT 1
10659: DEC
10660: ST_TO_ADDR
10661: LD_VAR 0 3
10665: PUSH
10666: FOR_TO
10667: IFFALSE 10749
// begin uc_side = side ;
10669: LD_ADDR_OWVAR 20
10673: PUSH
10674: LD_VAR 0 1
10678: ST_TO_ADDR
// uc_nation = nation ;
10679: LD_ADDR_OWVAR 21
10683: PUSH
10684: LD_VAR 0 2
10688: ST_TO_ADDR
// hc_name =  ;
10689: LD_ADDR_OWVAR 26
10693: PUSH
10694: LD_STRING 
10696: ST_TO_ADDR
// hc_gallery =  ;
10697: LD_ADDR_OWVAR 33
10701: PUSH
10702: LD_STRING 
10704: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10705: LD_INT 0
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: LD_VAR 0 8
10715: PPUSH
10716: CALL_OW 380
// un = CreateHuman ;
10720: LD_ADDR_VAR 0 16
10724: PUSH
10725: CALL_OW 44
10729: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10730: LD_VAR 0 16
10734: PPUSH
10735: LD_VAR 0 9
10739: PPUSH
10740: LD_INT 0
10742: PPUSH
10743: CALL_OW 49
// end ;
10747: GO 10666
10749: POP
10750: POP
// for i = 1 to sniperCount do
10751: LD_ADDR_VAR 0 14
10755: PUSH
10756: DOUBLE
10757: LD_INT 1
10759: DEC
10760: ST_TO_ADDR
10761: LD_VAR 0 4
10765: PUSH
10766: FOR_TO
10767: IFFALSE 10849
// begin uc_side = side ;
10769: LD_ADDR_OWVAR 20
10773: PUSH
10774: LD_VAR 0 1
10778: ST_TO_ADDR
// uc_nation = nation ;
10779: LD_ADDR_OWVAR 21
10783: PUSH
10784: LD_VAR 0 2
10788: ST_TO_ADDR
// hc_name =  ;
10789: LD_ADDR_OWVAR 26
10793: PUSH
10794: LD_STRING 
10796: ST_TO_ADDR
// hc_gallery =  ;
10797: LD_ADDR_OWVAR 33
10801: PUSH
10802: LD_STRING 
10804: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10805: LD_INT 0
10807: PPUSH
10808: LD_INT 5
10810: PPUSH
10811: LD_VAR 0 8
10815: PPUSH
10816: CALL_OW 380
// un = CreateHuman ;
10820: LD_ADDR_VAR 0 16
10824: PUSH
10825: CALL_OW 44
10829: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10830: LD_VAR 0 16
10834: PPUSH
10835: LD_VAR 0 9
10839: PPUSH
10840: LD_INT 0
10842: PPUSH
10843: CALL_OW 49
// end ;
10847: GO 10766
10849: POP
10850: POP
// for i = 1 to bazookCount do
10851: LD_ADDR_VAR 0 14
10855: PUSH
10856: DOUBLE
10857: LD_INT 1
10859: DEC
10860: ST_TO_ADDR
10861: LD_VAR 0 5
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10949
// begin uc_side = side ;
10869: LD_ADDR_OWVAR 20
10873: PUSH
10874: LD_VAR 0 1
10878: ST_TO_ADDR
// uc_nation = nation ;
10879: LD_ADDR_OWVAR 21
10883: PUSH
10884: LD_VAR 0 2
10888: ST_TO_ADDR
// hc_name =  ;
10889: LD_ADDR_OWVAR 26
10893: PUSH
10894: LD_STRING 
10896: ST_TO_ADDR
// hc_gallery =  ;
10897: LD_ADDR_OWVAR 33
10901: PUSH
10902: LD_STRING 
10904: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 9
10910: PPUSH
10911: LD_VAR 0 8
10915: PPUSH
10916: CALL_OW 380
// un = CreateHuman ;
10920: LD_ADDR_VAR 0 16
10924: PUSH
10925: CALL_OW 44
10929: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10930: LD_VAR 0 16
10934: PPUSH
10935: LD_VAR 0 9
10939: PPUSH
10940: LD_INT 0
10942: PPUSH
10943: CALL_OW 49
// end ;
10947: GO 10866
10949: POP
10950: POP
// for i = 1 to mortalCount do
10951: LD_ADDR_VAR 0 14
10955: PUSH
10956: DOUBLE
10957: LD_INT 1
10959: DEC
10960: ST_TO_ADDR
10961: LD_VAR 0 6
10965: PUSH
10966: FOR_TO
10967: IFFALSE 11049
// begin uc_side = side ;
10969: LD_ADDR_OWVAR 20
10973: PUSH
10974: LD_VAR 0 1
10978: ST_TO_ADDR
// uc_nation = nation ;
10979: LD_ADDR_OWVAR 21
10983: PUSH
10984: LD_VAR 0 2
10988: ST_TO_ADDR
// hc_name =  ;
10989: LD_ADDR_OWVAR 26
10993: PUSH
10994: LD_STRING 
10996: ST_TO_ADDR
// hc_gallery =  ;
10997: LD_ADDR_OWVAR 33
11001: PUSH
11002: LD_STRING 
11004: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11005: LD_INT 0
11007: PPUSH
11008: LD_INT 8
11010: PPUSH
11011: LD_VAR 0 8
11015: PPUSH
11016: CALL_OW 380
// un = CreateHuman ;
11020: LD_ADDR_VAR 0 16
11024: PUSH
11025: CALL_OW 44
11029: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11030: LD_VAR 0 16
11034: PPUSH
11035: LD_VAR 0 9
11039: PPUSH
11040: LD_INT 0
11042: PPUSH
11043: CALL_OW 49
// end ;
11047: GO 10966
11049: POP
11050: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11051: LD_ADDR_VAR 0 19
11055: PUSH
11056: LD_INT 22
11058: PUSH
11059: LD_VAR 0 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 25
11083: PUSH
11084: LD_INT 5
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 25
11093: PUSH
11094: LD_INT 8
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 25
11103: PUSH
11104: LD_INT 9
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PPUSH
11122: CALL_OW 69
11126: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11127: LD_ADDR_VAR 0 18
11131: PUSH
11132: LD_INT 22
11134: PUSH
11135: LD_VAR 0 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 4
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// for i in medic_list do
11163: LD_ADDR_VAR 0 14
11167: PUSH
11168: LD_VAR 0 18
11172: PUSH
11173: FOR_IN
11174: IFFALSE 11192
// ComMoveToArea ( i , healArea ) ;
11176: LD_VAR 0 14
11180: PPUSH
11181: LD_VAR 0 10
11185: PPUSH
11186: CALL_OW 113
11190: GO 11173
11192: POP
11193: POP
// if strategy = 1 then
11194: LD_VAR 0 12
11198: PUSH
11199: LD_INT 1
11201: EQUAL
11202: IFFALSE 11919
// begin repeat wait ( 0 0$3 ) ;
11204: LD_INT 105
11206: PPUSH
11207: CALL_OW 67
// for i in soldiersOK_list do
11211: LD_ADDR_VAR 0 14
11215: PUSH
11216: LD_VAR 0 19
11220: PUSH
11221: FOR_IN
11222: IFFALSE 11256
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11224: LD_VAR 0 14
11228: PPUSH
11229: LD_INT 80
11231: PPUSH
11232: LD_INT 109
11234: PPUSH
11235: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11239: LD_VAR 0 14
11243: PPUSH
11244: LD_INT 39
11246: PPUSH
11247: LD_INT 49
11249: PPUSH
11250: CALL_OW 174
// end ;
11254: GO 11221
11256: POP
11257: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11258: LD_INT 13
11260: PPUSH
11261: LD_INT 22
11263: PUSH
11264: LD_VAR 0 1
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 70
11277: PUSH
11278: LD_INT 0
11280: GREATER
11281: IFFALSE 11204
// repeat wait ( 0 0$1 ) ;
11283: LD_INT 35
11285: PPUSH
11286: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11290: LD_ADDR_VAR 0 17
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_VAR 0 1
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: LD_INT 3
11312: PUSH
11313: LD_INT 24
11315: PUSH
11316: LD_INT 550
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 24
11329: PUSH
11330: LD_INT 250
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PPUSH
11346: CALL_OW 69
11350: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11351: LD_ADDR_VAR 0 19
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_VAR 0 1
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 25
11373: PUSH
11374: LD_INT 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 25
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 25
11393: PUSH
11394: LD_INT 8
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 25
11403: PUSH
11404: LD_INT 9
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 24
11420: PUSH
11421: LD_INT 1000
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: PPUSH
11433: CALL_OW 69
11437: ST_TO_ADDR
// if medicCount > 0 then
11438: LD_VAR 0 7
11442: PUSH
11443: LD_INT 0
11445: GREATER
11446: IFFALSE 11520
// begin if damageUnit_list > 0 then
11448: LD_VAR 0 17
11452: PUSH
11453: LD_INT 0
11455: GREATER
11456: IFFALSE 11520
// begin for i in damageUnit_list do
11458: LD_ADDR_VAR 0 14
11462: PUSH
11463: LD_VAR 0 17
11467: PUSH
11468: FOR_IN
11469: IFFALSE 11518
// begin ComMoveToArea ( i , healArea ) ;
11471: LD_VAR 0 14
11475: PPUSH
11476: LD_VAR 0 10
11480: PPUSH
11481: CALL_OW 113
// for j in medic_list do
11485: LD_ADDR_VAR 0 15
11489: PUSH
11490: LD_VAR 0 18
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11514
// AddComHeal ( j , i ) ;
11498: LD_VAR 0 15
11502: PPUSH
11503: LD_VAR 0 14
11507: PPUSH
11508: CALL_OW 188
11512: GO 11495
11514: POP
11515: POP
// end ;
11516: GO 11468
11518: POP
11519: POP
// end ; end ; for i in soldiersOK_list do
11520: LD_ADDR_VAR 0 14
11524: PUSH
11525: LD_VAR 0 19
11529: PUSH
11530: FOR_IN
11531: IFFALSE 11713
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11533: LD_ADDR_VAR 0 22
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_VAR 0 11
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: PUSH
11555: LD_EXP 45
11559: DIFF
11560: PPUSH
11561: LD_VAR 0 14
11565: PPUSH
11566: CALL_OW 74
11570: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11571: LD_ADDR_VAR 0 23
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_VAR 0 11
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 59
11593: PUSH
11594: EMPTY
11595: LIST
11596: PUSH
11597: LD_INT 21
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: PPUSH
11635: LD_VAR 0 14
11639: PPUSH
11640: CALL_OW 74
11644: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11645: LD_VAR 0 14
11649: PPUSH
11650: LD_VAR 0 22
11654: PPUSH
11655: CALL_OW 296
11659: PUSH
11660: LD_INT 8
11662: PLUS
11663: PUSH
11664: LD_VAR 0 14
11668: PPUSH
11669: LD_VAR 0 23
11673: PPUSH
11674: CALL_OW 296
11678: LESS
11679: IFFALSE 11697
// begin ComAttackUnit ( i , target1 ) ;
11681: LD_VAR 0 14
11685: PPUSH
11686: LD_VAR 0 22
11690: PPUSH
11691: CALL_OW 115
// end else
11695: GO 11711
// begin ComAttackUnit ( i , target2 ) ;
11697: LD_VAR 0 14
11701: PPUSH
11702: LD_VAR 0 23
11706: PPUSH
11707: CALL_OW 115
// end ; end ;
11711: GO 11530
11713: POP
11714: POP
// for i in soldiersOK_list do
11715: LD_ADDR_VAR 0 14
11719: PUSH
11720: LD_VAR 0 19
11724: PUSH
11725: FOR_IN
11726: IFFALSE 11908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11728: LD_ADDR_VAR 0 22
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_VAR 0 11
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: PUSH
11750: LD_EXP 45
11754: DIFF
11755: PPUSH
11756: LD_VAR 0 14
11760: PPUSH
11761: CALL_OW 74
11765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11766: LD_ADDR_VAR 0 23
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_VAR 0 11
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 59
11788: PUSH
11789: EMPTY
11790: LIST
11791: PUSH
11792: LD_INT 21
11794: PUSH
11795: LD_INT 1
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 21
11804: PUSH
11805: LD_INT 2
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: PPUSH
11825: CALL_OW 69
11829: PPUSH
11830: LD_VAR 0 14
11834: PPUSH
11835: CALL_OW 74
11839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11840: LD_VAR 0 14
11844: PPUSH
11845: LD_VAR 0 22
11849: PPUSH
11850: CALL_OW 296
11854: PUSH
11855: LD_INT 8
11857: PLUS
11858: PUSH
11859: LD_VAR 0 14
11863: PPUSH
11864: LD_VAR 0 23
11868: PPUSH
11869: CALL_OW 296
11873: LESS
11874: IFFALSE 11892
// begin ComAttackUnit ( i , target1 ) ;
11876: LD_VAR 0 14
11880: PPUSH
11881: LD_VAR 0 22
11885: PPUSH
11886: CALL_OW 115
// end else
11890: GO 11906
// begin ComAttackUnit ( i , target2 ) ;
11892: LD_VAR 0 14
11896: PPUSH
11897: LD_VAR 0 23
11901: PPUSH
11902: CALL_OW 115
// end ; end ;
11906: GO 11725
11908: POP
11909: POP
// until soldiersOK_list = [ ] ;
11910: LD_VAR 0 19
11914: PUSH
11915: EMPTY
11916: EQUAL
11917: IFFALSE 11283
// end ; if strategy = 2 then
11919: LD_VAR 0 12
11923: PUSH
11924: LD_INT 2
11926: EQUAL
11927: IFFALSE 12632
// begin repeat wait ( 0 0$1 ) ;
11929: LD_INT 35
11931: PPUSH
11932: CALL_OW 67
// for i in soldiersOK_list do
11936: LD_ADDR_VAR 0 14
11940: PUSH
11941: LD_VAR 0 19
11945: PUSH
11946: FOR_IN
11947: IFFALSE 11981
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11949: LD_VAR 0 14
11953: PPUSH
11954: LD_INT 117
11956: PPUSH
11957: LD_INT 97
11959: PPUSH
11960: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11964: LD_VAR 0 14
11968: PPUSH
11969: LD_INT 94
11971: PPUSH
11972: LD_INT 50
11974: PPUSH
11975: CALL_OW 174
// end ;
11979: GO 11946
11981: POP
11982: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11983: LD_INT 14
11985: PPUSH
11986: LD_INT 22
11988: PUSH
11989: LD_VAR 0 1
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 70
12002: PUSH
12003: LD_INT 0
12005: GREATER
12006: IFFALSE 11929
// repeat wait ( 0 0$3 ) ;
12008: LD_INT 105
12010: PPUSH
12011: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12015: LD_ADDR_VAR 0 17
12019: PUSH
12020: LD_INT 22
12022: PUSH
12023: LD_VAR 0 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 1
12034: PUSH
12035: LD_INT 3
12037: PUSH
12038: LD_INT 24
12040: PUSH
12041: LD_INT 550
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 24
12054: PUSH
12055: LD_INT 250
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12076: LD_ADDR_VAR 0 19
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_VAR 0 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 25
12118: PUSH
12119: LD_INT 8
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 9
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 24
12145: PUSH
12146: LD_INT 1000
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: PPUSH
12158: CALL_OW 69
12162: ST_TO_ADDR
// if medicCount > 0 then
12163: LD_VAR 0 7
12167: PUSH
12168: LD_INT 0
12170: GREATER
12171: IFFALSE 12245
// begin if damageUnit_list > 0 then
12173: LD_VAR 0 17
12177: PUSH
12178: LD_INT 0
12180: GREATER
12181: IFFALSE 12245
// begin for i in damageUnit_list do
12183: LD_ADDR_VAR 0 14
12187: PUSH
12188: LD_VAR 0 17
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12243
// begin ComMoveToArea ( i , healArea ) ;
12196: LD_VAR 0 14
12200: PPUSH
12201: LD_VAR 0 10
12205: PPUSH
12206: CALL_OW 113
// for j in medic_list do
12210: LD_ADDR_VAR 0 15
12214: PUSH
12215: LD_VAR 0 18
12219: PUSH
12220: FOR_IN
12221: IFFALSE 12239
// AddComHeal ( j , i ) ;
12223: LD_VAR 0 15
12227: PPUSH
12228: LD_VAR 0 14
12232: PPUSH
12233: CALL_OW 188
12237: GO 12220
12239: POP
12240: POP
// end ;
12241: GO 12193
12243: POP
12244: POP
// end ; end ; for i in soldiersOK_list do
12245: LD_ADDR_VAR 0 14
12249: PUSH
12250: LD_VAR 0 19
12254: PUSH
12255: FOR_IN
12256: IFFALSE 12432
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12258: LD_ADDR_VAR 0 22
12262: PUSH
12263: LD_INT 22
12265: PUSH
12266: LD_VAR 0 11
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: PPUSH
12280: LD_VAR 0 14
12284: PPUSH
12285: CALL_OW 74
12289: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12290: LD_ADDR_VAR 0 23
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_VAR 0 11
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 59
12312: PUSH
12313: EMPTY
12314: LIST
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: PPUSH
12354: LD_VAR 0 14
12358: PPUSH
12359: CALL_OW 74
12363: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12364: LD_VAR 0 14
12368: PPUSH
12369: LD_VAR 0 22
12373: PPUSH
12374: CALL_OW 296
12378: PUSH
12379: LD_INT 8
12381: PLUS
12382: PUSH
12383: LD_VAR 0 14
12387: PPUSH
12388: LD_VAR 0 23
12392: PPUSH
12393: CALL_OW 296
12397: LESS
12398: IFFALSE 12416
// begin ComAttackUnit ( i , target1 ) ;
12400: LD_VAR 0 14
12404: PPUSH
12405: LD_VAR 0 22
12409: PPUSH
12410: CALL_OW 115
// end else
12414: GO 12430
// begin ComAttackUnit ( i , target2 ) ;
12416: LD_VAR 0 14
12420: PPUSH
12421: LD_VAR 0 23
12425: PPUSH
12426: CALL_OW 115
// end ; end ;
12430: GO 12255
12432: POP
12433: POP
// for i in soldiersOK_list do
12434: LD_ADDR_VAR 0 14
12438: PUSH
12439: LD_VAR 0 19
12443: PUSH
12444: FOR_IN
12445: IFFALSE 12621
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12447: LD_ADDR_VAR 0 22
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_VAR 0 11
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: PPUSH
12469: LD_VAR 0 14
12473: PPUSH
12474: CALL_OW 74
12478: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12479: LD_ADDR_VAR 0 23
12483: PUSH
12484: LD_INT 22
12486: PUSH
12487: LD_VAR 0 11
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 59
12501: PUSH
12502: EMPTY
12503: LIST
12504: PUSH
12505: LD_INT 21
12507: PUSH
12508: LD_INT 1
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: PPUSH
12538: CALL_OW 69
12542: PPUSH
12543: LD_VAR 0 14
12547: PPUSH
12548: CALL_OW 74
12552: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12553: LD_VAR 0 14
12557: PPUSH
12558: LD_VAR 0 22
12562: PPUSH
12563: CALL_OW 296
12567: PUSH
12568: LD_INT 8
12570: PLUS
12571: PUSH
12572: LD_VAR 0 14
12576: PPUSH
12577: LD_VAR 0 23
12581: PPUSH
12582: CALL_OW 296
12586: LESS
12587: IFFALSE 12605
// begin ComAttackUnit ( i , target1 ) ;
12589: LD_VAR 0 14
12593: PPUSH
12594: LD_VAR 0 22
12598: PPUSH
12599: CALL_OW 115
// end else
12603: GO 12619
// begin ComAttackUnit ( i , target2 ) ;
12605: LD_VAR 0 14
12609: PPUSH
12610: LD_VAR 0 23
12614: PPUSH
12615: CALL_OW 115
// end ; end ;
12619: GO 12444
12621: POP
12622: POP
// until soldiersOK_list = [ ] ;
12623: LD_VAR 0 19
12627: PUSH
12628: EMPTY
12629: EQUAL
12630: IFFALSE 12008
// end ; end ; end_of_file
12632: LD_VAR 0 13
12636: RET
// every 0 0$01 do
12637: GO 12639
12639: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12640: LD_INT 22
12642: PUSH
12643: LD_INT 1
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: PUSH
12669: LD_INT 0
12671: EQUAL
12672: IFFALSE 12686
// SetClass ( JMM , 2 ) ;
12674: LD_EXP 1
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12686: LD_STRING M1
12688: PPUSH
12689: CALL_OW 337
// case difficulty of 1 :
12693: LD_OWVAR 67
12697: PUSH
12698: LD_INT 1
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12716
12706: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12707: LD_STRING M1-1
12709: PPUSH
12710: CALL_OW 337
12714: GO 12753
12716: LD_INT 2
12718: DOUBLE
12719: EQUAL
12720: IFTRUE 12724
12722: GO 12734
12724: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12725: LD_STRING M1-2
12727: PPUSH
12728: CALL_OW 337
12732: GO 12753
12734: LD_INT 3
12736: DOUBLE
12737: EQUAL
12738: IFTRUE 12742
12740: GO 12752
12742: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12743: LD_STRING M1-3
12745: PPUSH
12746: CALL_OW 337
12750: GO 12753
12752: POP
// ChangeMissionObjectives ( M1cont ) ;
12753: LD_STRING M1cont
12755: PPUSH
12756: CALL_OW 337
// SaveForQuickRestart ;
12760: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12764: LD_INT 525
12766: PPUSH
12767: LD_INT 700
12769: PPUSH
12770: CALL_OW 12
12774: PPUSH
12775: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12779: LD_INT 5
12781: PPUSH
12782: LD_INT 82
12784: PPUSH
12785: LD_INT 38
12787: PPUSH
12788: LD_INT 10
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 56
// wait ( 0 0$14 ) ;
12798: LD_INT 490
12800: PPUSH
12801: CALL_OW 67
// firstCrateSpawn := true ;
12805: LD_ADDR_EXP 41
12809: PUSH
12810: LD_INT 1
12812: ST_TO_ADDR
// end ;
12813: END
// every 0 0$02 trigger firstCrateSpawn do
12814: LD_EXP 41
12818: IFFALSE 13181
12820: GO 12822
12822: DISABLE
// begin if IsOk ( Lisa ) then
12823: LD_EXP 2
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12848
// Say ( Lisa , DR0-Lisa-1 ) else
12834: LD_EXP 2
12838: PPUSH
12839: LD_STRING DR0-Lisa-1
12841: PPUSH
12842: CALL_OW 88
12846: GO 12994
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12848: LD_INT 22
12850: PUSH
12851: LD_INT 1
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 21
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 26
12870: PUSH
12871: LD_INT 1
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 2
12880: PUSH
12881: LD_INT 25
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 25
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 25
12903: PUSH
12904: LD_INT 3
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 25
12913: PUSH
12914: LD_INT 4
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: PUSH
12939: LD_EXP 1
12943: PUSH
12944: LD_EXP 8
12948: PUSH
12949: LD_EXP 5
12953: PUSH
12954: LD_EXP 6
12958: PUSH
12959: LD_EXP 7
12963: PUSH
12964: LD_EXP 4
12968: PUSH
12969: LD_EXP 3
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: DIFF
12983: PPUSH
12984: LD_STRING DR0-Sol1-1
12986: PPUSH
12987: LD_STRING DR0-Sol1-1
12989: PPUSH
12990: CALL 6030 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12994: LD_INT 22
12996: PUSH
12997: LD_INT 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 21
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 26
13016: PUSH
13017: LD_INT 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 2
13026: PUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 25
13039: PUSH
13040: LD_INT 2
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 25
13049: PUSH
13050: LD_INT 3
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 25
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: PPUSH
13080: CALL_OW 69
13084: PUSH
13085: LD_EXP 1
13089: PUSH
13090: LD_EXP 8
13094: PUSH
13095: LD_EXP 5
13099: PUSH
13100: LD_EXP 2
13104: PUSH
13105: LD_EXP 6
13109: PUSH
13110: LD_EXP 7
13114: PUSH
13115: LD_EXP 4
13119: PUSH
13120: LD_EXP 3
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: DIFF
13135: PPUSH
13136: LD_STRING DR0-Sol2-1
13138: PPUSH
13139: LD_STRING DR0-Sol2-1
13141: PPUSH
13142: CALL 6030 0 3
// if IsOk ( Cyrus ) then
13146: LD_EXP 4
13150: PPUSH
13151: CALL_OW 302
13155: IFFALSE 13169
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13157: LD_EXP 4
13161: PPUSH
13162: LD_STRING DR0-Cyrus-1
13164: PPUSH
13165: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13169: LD_EXP 1
13173: PPUSH
13174: LD_STRING DR0-JMM-1
13176: PPUSH
13177: CALL_OW 88
// end ;
13181: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13182: LD_EXP 5
13186: PPUSH
13187: CALL_OW 302
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 25
13204: PUSH
13205: LD_INT 16
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PPUSH
13216: CALL_OW 69
13220: PUSH
13221: LD_INT 0
13223: GREATER
13224: AND
13225: PUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 463
13233: NOT
13234: AND
13235: IFFALSE 13513
13237: GO 13239
13239: DISABLE
// begin DialogueOn ;
13240: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13244: LD_EXP 5
13248: PPUSH
13249: LD_STRING D10-Frank-1
13251: PPUSH
13252: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13256: LD_INT 22
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 25
13291: PUSH
13292: LD_INT 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 25
13301: PUSH
13302: LD_INT 3
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 25
13311: PUSH
13312: LD_INT 4
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 69
13335: PUSH
13336: LD_EXP 1
13340: PUSH
13341: LD_EXP 5
13345: PUSH
13346: LD_EXP 2
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: DIFF
13356: PPUSH
13357: LD_STRING D10-Sol1-1
13359: PPUSH
13360: LD_STRING D10-FSol1-1
13362: PPUSH
13363: CALL 6030 0 3
// Say ( Frank , D10-Frank-2 ) ;
13367: LD_EXP 5
13371: PPUSH
13372: LD_STRING D10-Frank-2
13374: PPUSH
13375: CALL_OW 88
// if IsOK ( Lisa ) then
13379: LD_EXP 2
13383: PPUSH
13384: CALL_OW 302
13388: IFFALSE 13404
// begin Say ( Lisa , D10-Lisa-2 ) ;
13390: LD_EXP 2
13394: PPUSH
13395: LD_STRING D10-Lisa-2
13397: PPUSH
13398: CALL_OW 88
// end else
13402: GO 13509
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13404: LD_INT 22
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 2
13426: PUSH
13427: LD_INT 25
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 25
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 25
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 25
13459: PUSH
13460: LD_INT 4
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PPUSH
13479: CALL_OW 69
13483: PUSH
13484: LD_EXP 1
13488: PUSH
13489: LD_EXP 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: DIFF
13498: PPUSH
13499: LD_STRING D10-Sol1-2
13501: PPUSH
13502: LD_STRING D10-FSol1-2
13504: PPUSH
13505: CALL 6030 0 3
// end ; DialogueOff ;
13509: CALL_OW 7
// end ;
13513: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 463
13521: NOT
13522: IFFALSE 13785
13524: GO 13526
13526: DISABLE
// begin HarrisonSupport ;
13527: CALL 2522 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13531: LD_EXP 17
13535: PPUSH
13536: CALL_OW 310
13540: PPUSH
13541: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13545: LD_EXP 17
13549: PPUSH
13550: LD_STRING DEng-Eng1-1
13552: PPUSH
13553: CALL_OW 88
// wait ( 1 1$0 ) ;
13557: LD_INT 2100
13559: PPUSH
13560: CALL_OW 67
// DialogueOn ;
13564: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13568: LD_EXP 14
13572: PPUSH
13573: LD_STRING DRem-Har-1
13575: PPUSH
13576: CALL_OW 94
// if contactWithRussian = 1 then
13580: LD_EXP 22
13584: PUSH
13585: LD_INT 1
13587: EQUAL
13588: IFFALSE 13604
// begin Say ( JMM , DRem-JMM-1 ) ;
13590: LD_EXP 1
13594: PPUSH
13595: LD_STRING DRem-JMM-1
13597: PPUSH
13598: CALL_OW 88
// end else
13602: GO 13616
// begin Say ( JMM , DRem-JMM-1a ) ;
13604: LD_EXP 1
13608: PPUSH
13609: LD_STRING DRem-JMM-1a
13611: PPUSH
13612: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13616: LD_EXP 14
13620: PPUSH
13621: LD_STRING DRem-Har-2
13623: PPUSH
13624: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13628: LD_STRING DenisInDelta
13630: PPUSH
13631: LD_INT 0
13633: PPUSH
13634: CALL_OW 30
13638: PUSH
13639: LD_INT 1
13641: EQUAL
13642: IFFALSE 13658
// begin Say ( JMM , DRem-JMM-2 ) ;
13644: LD_EXP 1
13648: PPUSH
13649: LD_STRING DRem-JMM-2
13651: PPUSH
13652: CALL_OW 88
// end else
13656: GO 13670
// begin Say ( JMM , DRem-JMM-2a ) ;
13658: LD_EXP 1
13662: PPUSH
13663: LD_STRING DRem-JMM-2a
13665: PPUSH
13666: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13670: LD_EXP 14
13674: PPUSH
13675: LD_STRING DRem-Har-3
13677: PPUSH
13678: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13682: LD_EXP 1
13686: PPUSH
13687: LD_STRING DRem-JMM-3
13689: PPUSH
13690: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13694: LD_EXP 14
13698: PPUSH
13699: LD_STRING DRem-Har-4
13701: PPUSH
13702: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13706: LD_STRING DenisInDelta
13708: PPUSH
13709: LD_INT 0
13711: PPUSH
13712: CALL_OW 30
13716: PUSH
13717: LD_INT 1
13719: EQUAL
13720: IFFALSE 13748
// begin Say ( JMM , DRem-JMM-4 ) ;
13722: LD_EXP 1
13726: PPUSH
13727: LD_STRING DRem-JMM-4
13729: PPUSH
13730: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13734: LD_EXP 14
13738: PPUSH
13739: LD_STRING DRem-Har-5
13741: PPUSH
13742: CALL_OW 94
// end else
13746: GO 13781
// begin SetRestrict ( 36 , 1 , true ) ;
13748: LD_INT 36
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13761: LD_INT 15
13763: PPUSH
13764: LD_INT 1
13766: PPUSH
13767: LD_INT 1
13769: PPUSH
13770: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13774: LD_STRING MR
13776: PPUSH
13777: CALL_OW 337
// end ; DialogueOff ;
13781: CALL_OW 7
// end ;
13785: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13786: LD_STRING DenisInDelta
13788: PPUSH
13789: LD_INT 0
13791: PPUSH
13792: CALL_OW 30
13796: PUSH
13797: LD_INT 1
13799: EQUAL
13800: PUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 463
13808: NOT
13809: AND
13810: IFFALSE 14043
13812: GO 13814
13814: DISABLE
13815: LD_INT 0
13817: PPUSH
// begin PrepareDenis ;
13818: CALL 2244 0 0
// CenterNowOnUnits ( Denis ) ;
13822: LD_EXP 9
13826: PPUSH
13827: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13831: LD_ADDR_VAR 0 1
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13851: LD_EXP 9
13855: PPUSH
13856: LD_VAR 0 1
13860: PPUSH
13861: LD_EXP 9
13865: PPUSH
13866: CALL_OW 74
13870: PPUSH
13871: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13875: LD_INT 35
13877: PPUSH
13878: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13882: LD_INT 22
13884: PUSH
13885: LD_INT 1
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 91
13894: PUSH
13895: LD_EXP 9
13899: PUSH
13900: LD_INT 10
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: IFFALSE 13875
// SetSide ( Denis , 1 ) ;
13918: LD_EXP 9
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 235
// DialogueOn ;
13930: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13934: LD_EXP 9
13938: PPUSH
13939: LD_STRING DDen-Den-1
13941: PPUSH
13942: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13946: LD_EXP 1
13950: PPUSH
13951: LD_STRING DDen-JMM-1
13953: PPUSH
13954: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13958: LD_EXP 9
13962: PPUSH
13963: LD_STRING DDen-Den-2
13965: PPUSH
13966: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13970: LD_EXP 1
13974: PPUSH
13975: LD_STRING DDen-JMM-2
13977: PPUSH
13978: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13982: LD_EXP 9
13986: PPUSH
13987: LD_STRING DDen-Den-3
13989: PPUSH
13990: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13994: LD_EXP 1
13998: PPUSH
13999: LD_STRING DDen-JMM-3
14001: PPUSH
14002: CALL_OW 88
// DialogueOff ;
14006: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14010: LD_INT 36
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14023: LD_INT 15
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14036: LD_STRING MR
14038: PPUSH
14039: CALL_OW 337
// end ;
14043: PPOPN 1
14045: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14046: CALL 14101 0 0
14050: PUSH
14051: LD_EXP 9
14055: PPUSH
14056: CALL_OW 302
14060: AND
14061: PUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 463
14069: NOT
14070: AND
14071: IFFALSE 14100
14073: GO 14075
14075: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14076: LD_EXP 9
14080: PPUSH
14081: LD_STRING DR1-Den-1
14083: PPUSH
14084: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14088: LD_EXP 1
14092: PPUSH
14093: LD_STRING DR1-JMM-1
14095: PPUSH
14096: CALL_OW 88
// end ;
14100: END
// function CheckOptoLab ; var i ; begin
14101: LD_INT 0
14103: PPUSH
14104: PPUSH
// result = false ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_INT 0
14112: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14113: LD_ADDR_VAR 0 2
14117: PUSH
14118: LD_INT 22
14120: PUSH
14121: LD_INT 1
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: LD_INT 7
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 30
14143: PUSH
14144: LD_INT 8
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14218
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14168: LD_VAR 0 2
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 268
14180: PUSH
14181: LD_INT 15
14183: EQUAL
14184: PUSH
14185: LD_VAR 0 2
14189: PPUSH
14190: LD_INT 2
14192: PPUSH
14193: CALL_OW 268
14197: PUSH
14198: LD_INT 15
14200: EQUAL
14201: OR
14202: IFFALSE 14214
// begin result = true ;
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// break ;
14212: GO 14218
// end ; break ;
14214: GO 14218
// end ;
14216: GO 14165
14218: POP
14219: POP
// end ;
14220: LD_VAR 0 1
14224: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14225: LD_INT 15
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 321
14235: PUSH
14236: LD_INT 2
14238: EQUAL
14239: PUSH
14240: LD_EXP 9
14244: PPUSH
14245: CALL_OW 302
14249: AND
14250: PUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 463
14258: NOT
14259: AND
14260: IFFALSE 14492
14262: GO 14264
14264: DISABLE
// begin DialogueOn ;
14265: CALL_OW 6
// if IsOK ( Denis ) then
14269: LD_EXP 9
14273: PPUSH
14274: CALL_OW 302
14278: IFFALSE 14294
// begin Say ( Denis , DR2-Den-1 ) ;
14280: LD_EXP 9
14284: PPUSH
14285: LD_STRING DR2-Den-1
14287: PPUSH
14288: CALL_OW 88
// end else
14292: GO 14353
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14294: LD_INT 22
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 21
14306: PUSH
14307: LD_INT 1
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 25
14316: PUSH
14317: LD_INT 4
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: PUSH
14334: LD_EXP 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: DIFF
14342: PPUSH
14343: LD_STRING DR2-Sci1-1
14345: PPUSH
14346: LD_STRING DR2-FSci1-1
14348: PPUSH
14349: CALL 6030 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14353: LD_EXP 1
14357: PPUSH
14358: LD_STRING DR2-JMM-1
14360: PPUSH
14361: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14365: LD_INT 22
14367: PUSH
14368: LD_INT 1
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 21
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_EXP 1
14449: PUSH
14450: LD_EXP 9
14454: PUSH
14455: LD_EXP 8
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: DIFF
14465: PPUSH
14466: LD_STRING DR2-Sol1-1
14468: PPUSH
14469: LD_STRING DR2-Sol1-11
14471: PPUSH
14472: CALL 6030 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14476: LD_EXP 1
14480: PPUSH
14481: LD_STRING DR2-JMM-2
14483: PPUSH
14484: CALL_OW 88
// DialogueOff ;
14488: CALL_OW 7
// end ;
14492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14493: LD_INT 22
14495: PUSH
14496: LD_INT 1
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 36
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: PUSH
14522: LD_INT 0
14524: EQUAL
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 21
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 33
14548: PUSH
14549: LD_INT 2
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: PUSH
14566: LD_INT 0
14568: GREATER
14569: AND
14570: PUSH
14571: LD_EXP 23
14575: PUSH
14576: LD_INT 0
14578: EQUAL
14579: AND
14580: PUSH
14581: LD_INT 1
14583: PPUSH
14584: CALL_OW 463
14588: NOT
14589: AND
14590: IFFALSE 14716
14592: GO 14594
14594: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14595: LD_INT 22
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 1
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 3
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: PUSH
14635: LD_EXP 1
14639: PUSH
14640: LD_EXP 6
14644: PUSH
14645: LD_EXP 7
14649: PUSH
14650: LD_EXP 9
14654: PUSH
14655: LD_EXP 15
14659: PUSH
14660: LD_EXP 3
14664: PUSH
14665: LD_EXP 4
14669: PUSH
14670: LD_EXP 2
14674: PUSH
14675: LD_EXP 5
14679: PUSH
14680: LD_EXP 8
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: DIFF
14697: PPUSH
14698: LD_STRING D3a-Mech1-1
14700: PPUSH
14701: LD_STRING D3a-Mech1-1
14703: PPUSH
14704: CALL 6030 0 3
// firstTower = 2 ;
14708: LD_ADDR_EXP 23
14712: PUSH
14713: LD_INT 2
14715: ST_TO_ADDR
// end ;
14716: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14717: LD_INT 22
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 21
14729: PUSH
14730: LD_INT 3
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PPUSH
14741: CALL_OW 69
14745: PUSH
14746: LD_INT 0
14748: EQUAL
14749: IFFALSE 14864
14751: GO 14753
14753: DISABLE
14754: LD_INT 0
14756: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14757: LD_ADDR_VAR 0 1
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 21
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 2
14784: PUSH
14785: LD_INT 25
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 25
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 25
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: PUSH
14842: FOR_IN
14843: IFFALSE 14862
// AddExperience ( i , 1 , 10000 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 1
14852: PPUSH
14853: LD_INT 10000
14855: PPUSH
14856: CALL_OW 492
14860: GO 14842
14862: POP
14863: POP
// end ;
14864: PPOPN 1
14866: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14867: LD_INT 22
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 30
14879: PUSH
14880: LD_INT 36
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: PUSH
14896: LD_INT 0
14898: GREATER
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 21
14912: PUSH
14913: LD_INT 2
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 33
14922: PUSH
14923: LD_INT 2
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 69
14939: PUSH
14940: LD_INT 0
14942: GREATER
14943: AND
14944: PUSH
14945: CALL 15537 0 0
14949: AND
14950: PUSH
14951: LD_INT 1
14953: PPUSH
14954: CALL_OW 463
14958: NOT
14959: AND
14960: IFFALSE 15534
14962: GO 14964
14964: DISABLE
14965: LD_INT 0
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14972: LD_ADDR_VAR 0 3
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 36
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15006: LD_ADDR_VAR 0 4
15010: PUSH
15011: LD_INT 22
15013: PUSH
15014: LD_INT 1
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 33
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15051: LD_ADDR_VAR 0 5
15055: PUSH
15056: EMPTY
15057: ST_TO_ADDR
// for i in tmpControlTowers do
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_VAR 0 3
15067: PUSH
15068: FOR_IN
15069: IFFALSE 15532
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15071: LD_EXP 1
15075: PPUSH
15076: CALL_OW 310
15080: PUSH
15081: LD_VAR 0 1
15085: EQUAL
15086: PUSH
15087: LD_EXP 1
15091: PPUSH
15092: CALL_OW 257
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: AND
15101: IFFALSE 15231
// begin InGameOn ;
15103: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15107: LD_VAR 0 4
15111: PUSH
15112: LD_INT 1
15114: ARRAY
15115: PPUSH
15116: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15120: LD_EXP 1
15124: PPUSH
15125: LD_STRING D4a-JMM-1
15127: PPUSH
15128: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15132: LD_VAR 0 4
15136: PUSH
15137: LD_INT 1
15139: ARRAY
15140: PPUSH
15141: LD_EXP 1
15145: PPUSH
15146: CALL_OW 53
// wait ( 0 0$1 ) ;
15150: LD_INT 35
15152: PPUSH
15153: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15157: LD_VAR 0 4
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: PPUSH
15166: LD_VAR 0 4
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 250
15179: PUSH
15180: LD_INT 3
15182: PLUS
15183: PPUSH
15184: LD_VAR 0 4
15188: PUSH
15189: LD_INT 1
15191: ARRAY
15192: PPUSH
15193: CALL_OW 251
15197: PUSH
15198: LD_INT 2
15200: MINUS
15201: PPUSH
15202: CALL_OW 111
// wait ( 0 0$2 ) ;
15206: LD_INT 70
15208: PPUSH
15209: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15213: LD_EXP 1
15217: PPUSH
15218: LD_STRING D4b-JMM-1
15220: PPUSH
15221: CALL_OW 88
// InGameOff ;
15225: CALL_OW 9
// end else
15229: GO 15530
// begin InGameOn ;
15231: CALL_OW 8
// for j in UnitsInside ( i ) do
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 313
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15286
// if GetClass ( j ) = 3 then
15253: LD_VAR 0 2
15257: PPUSH
15258: CALL_OW 257
15262: PUSH
15263: LD_INT 3
15265: EQUAL
15266: IFFALSE 15284
// tmpMechanicInside = tmpMechanicInside ^ j ;
15268: LD_ADDR_VAR 0 5
15272: PUSH
15273: LD_VAR 0 5
15277: PUSH
15278: LD_VAR 0 2
15282: ADD
15283: ST_TO_ADDR
15284: GO 15250
15286: POP
15287: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15288: LD_VAR 0 5
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PPUSH
15297: CALL_OW 258
15301: PUSH
15302: LD_INT 1
15304: EQUAL
15305: IFFALSE 15323
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15307: LD_VAR 0 5
15311: PUSH
15312: LD_INT 1
15314: ARRAY
15315: PPUSH
15316: LD_STRING D4a-Mech1-1
15318: PPUSH
15319: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15323: LD_VAR 0 5
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: CALL_OW 258
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: IFFALSE 15358
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15342: LD_VAR 0 5
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: LD_STRING D4a-FMech1-1
15353: PPUSH
15354: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15358: LD_VAR 0 4
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15371: LD_VAR 0 4
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: LD_VAR 0 5
15384: PUSH
15385: LD_INT 1
15387: ARRAY
15388: PPUSH
15389: CALL_OW 53
// wait ( 0 0$1 ) ;
15393: LD_INT 35
15395: PPUSH
15396: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15400: LD_VAR 0 4
15404: PUSH
15405: LD_INT 1
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 4
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 250
15422: PUSH
15423: LD_INT 3
15425: PLUS
15426: PPUSH
15427: LD_VAR 0 4
15431: PUSH
15432: LD_INT 1
15434: ARRAY
15435: PPUSH
15436: CALL_OW 251
15440: PUSH
15441: LD_INT 2
15443: MINUS
15444: PPUSH
15445: CALL_OW 111
// wait ( 0 0$2 ) ;
15449: LD_INT 70
15451: PPUSH
15452: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15456: LD_VAR 0 5
15460: PUSH
15461: LD_INT 1
15463: ARRAY
15464: PPUSH
15465: CALL_OW 258
15469: PUSH
15470: LD_INT 1
15472: EQUAL
15473: IFFALSE 15491
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15475: LD_VAR 0 5
15479: PUSH
15480: LD_INT 1
15482: ARRAY
15483: PPUSH
15484: LD_STRING D4b-Mech1-1
15486: PPUSH
15487: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15491: LD_VAR 0 5
15495: PUSH
15496: LD_INT 1
15498: ARRAY
15499: PPUSH
15500: CALL_OW 258
15504: PUSH
15505: LD_INT 2
15507: EQUAL
15508: IFFALSE 15526
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15510: LD_VAR 0 5
15514: PUSH
15515: LD_INT 1
15517: ARRAY
15518: PPUSH
15519: LD_STRING D4b-FMech1-1
15521: PPUSH
15522: CALL_OW 88
// InGameOff ;
15526: CALL_OW 9
// end ; end ;
15530: GO 15068
15532: POP
15533: POP
// end ;
15534: PPOPN 5
15536: END
// function CheckMehInside ; var i , j ; begin
15537: LD_INT 0
15539: PPUSH
15540: PPUSH
15541: PPUSH
// result = false ;
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15550: LD_ADDR_VAR 0 2
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 30
15567: PUSH
15568: LD_INT 36
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 69
15583: PUSH
15584: FOR_IN
15585: IFFALSE 15636
// begin for j in UnitsInside ( i ) do
15587: LD_ADDR_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: CALL_OW 313
15601: PUSH
15602: FOR_IN
15603: IFFALSE 15632
// begin if GetClass ( j ) = 3 then
15605: LD_VAR 0 3
15609: PPUSH
15610: CALL_OW 257
15614: PUSH
15615: LD_INT 3
15617: EQUAL
15618: IFFALSE 15630
// begin result = true ;
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_INT 1
15627: ST_TO_ADDR
// break ;
15628: GO 15632
// end ; end ;
15630: GO 15602
15632: POP
15633: POP
// end ;
15634: GO 15584
15636: POP
15637: POP
// end ;
15638: LD_VAR 0 1
15642: RET
// every 25 25$0 do
15643: GO 15645
15645: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// until not InBattle ( 1 ) ;
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 463
15660: NOT
15661: IFFALSE 15646
// PrepareKurt ;
15663: CALL 19201 0 0
// end ;
15667: END
// every 35 35$0 do
15668: GO 15670
15670: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15671: LD_INT 35
15673: PPUSH
15674: CALL_OW 67
// until not InBattle ( 1 ) ;
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 463
15685: NOT
15686: IFFALSE 15671
// PrepareJoan ;
15688: CALL 3040 0 0
// wait ( 1 1$0 ) ;
15692: LD_INT 2100
15694: PPUSH
15695: CALL_OW 67
// if IsOK ( Lisa ) then
15699: LD_EXP 2
15703: PPUSH
15704: CALL_OW 302
15708: IFFALSE 15838
// begin DialogueOn ;
15710: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15714: LD_EXP 2
15718: PPUSH
15719: LD_STRING D7-Lisa-1
15721: PPUSH
15722: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15726: LD_EXP 1
15730: PPUSH
15731: LD_STRING D7-JMM-1
15733: PPUSH
15734: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15738: LD_EXP 2
15742: PPUSH
15743: LD_STRING D7-Lisa-2
15745: PPUSH
15746: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15750: LD_EXP 1
15754: PPUSH
15755: LD_STRING D7-JMM-2
15757: PPUSH
15758: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15762: LD_EXP 2
15766: PPUSH
15767: LD_STRING D7-Lisa-3
15769: PPUSH
15770: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15774: LD_EXP 1
15778: PPUSH
15779: LD_STRING D7-JMM-3
15781: PPUSH
15782: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15786: LD_EXP 2
15790: PPUSH
15791: LD_STRING D7-Lisa-4
15793: PPUSH
15794: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15798: LD_EXP 1
15802: PPUSH
15803: LD_STRING D7-JMM-4
15805: PPUSH
15806: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15810: LD_EXP 1
15814: PPUSH
15815: LD_STRING D7-JMM-4a
15817: PPUSH
15818: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15822: LD_EXP 2
15826: PPUSH
15827: LD_STRING D7-Lisa-5
15829: PPUSH
15830: CALL_OW 88
// DialogueOff ;
15834: CALL_OW 7
// end ; end ;
15838: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15839: LD_EXP 13
15843: PUSH
15844: LD_INT 22
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 91
15856: PUSH
15857: LD_EXP 13
15861: PUSH
15862: LD_INT 10
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: LD_INT 25
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 25
15885: PUSH
15886: LD_INT 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 25
15895: PUSH
15896: LD_INT 3
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 4
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: PPUSH
15925: CALL_OW 69
15929: PUSH
15930: LD_INT 1
15932: GREATER
15933: AND
15934: IFFALSE 15951
15936: GO 15938
15938: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15939: LD_EXP 13
15943: PPUSH
15944: LD_STRING D5-Sol1-1
15946: PPUSH
15947: CALL_OW 88
// end ;
15951: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15952: LD_INT 22
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 33
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: PUSH
15981: LD_INT 2
15983: GREATEREQUAL
15984: IFFALSE 16004
15986: GO 15988
15988: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15989: LD_STRING MRa
15991: PPUSH
15992: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15996: LD_ADDR_EXP 28
16000: PUSH
16001: LD_INT 1
16003: ST_TO_ADDR
// end ;
16004: END
// every 0 0$10 do var i , last ;
16005: GO 16007
16007: DISABLE
16008: LD_INT 0
16010: PPUSH
16011: PPUSH
// begin last := 7 ;
16012: LD_ADDR_VAR 0 2
16016: PUSH
16017: LD_INT 7
16019: ST_TO_ADDR
// for i = 1 to last do
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: DOUBLE
16026: LD_INT 1
16028: DEC
16029: ST_TO_ADDR
16030: LD_VAR 0 2
16034: PUSH
16035: FOR_TO
16036: IFFALSE 16064
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16038: LD_INT 6300
16040: PPUSH
16041: LD_INT 14700
16043: PPUSH
16044: CALL_OW 12
16048: PPUSH
16049: CALL_OW 67
// PrepareRandoms ( i ) ;
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL 4076 0 1
// end ;
16062: GO 16035
16064: POP
16065: POP
// end ;
16066: PPOPN 2
16068: END
// every 5 5$20 do
16069: GO 16071
16071: DISABLE
// begin DialogueOn ;
16072: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16076: LD_EXP 10
16080: PPUSH
16081: LD_STRING D12a-Sci-1
16083: PPUSH
16084: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16088: LD_EXP 1
16092: PPUSH
16093: LD_STRING D12a-JMM-1
16095: PPUSH
16096: CALL_OW 88
// DialogueOff ;
16100: CALL_OW 7
// cratesStatus = 1 ;
16104: LD_ADDR_EXP 38
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// end ;
16112: END
// every 13 13$0 do
16113: GO 16115
16115: DISABLE
// begin DialogueOn ;
16116: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16120: LD_EXP 10
16124: PPUSH
16125: LD_STRING D12b-Sci-1
16127: PPUSH
16128: CALL_OW 94
// DialogueOff ;
16132: CALL_OW 7
// cratesStatus = 2 ;
16136: LD_ADDR_EXP 38
16140: PUSH
16141: LD_INT 2
16143: ST_TO_ADDR
// end ;
16144: END
// every 32 32$0 do
16145: GO 16147
16147: DISABLE
// begin DialogueOn ;
16148: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16152: LD_EXP 10
16156: PPUSH
16157: LD_STRING D12c-Sci-1
16159: PPUSH
16160: CALL_OW 94
// DialogueOff ;
16164: CALL_OW 7
// wait ( 3 3$0 ) ;
16168: LD_INT 6300
16170: PPUSH
16171: CALL_OW 67
// DialogueOn ;
16175: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16179: LD_EXP 10
16183: PPUSH
16184: LD_STRING D12d-Sci-1
16186: PPUSH
16187: CALL_OW 94
// DialogueOff ;
16191: CALL_OW 7
// cratesStatus = 1 ;
16195: LD_ADDR_EXP 38
16199: PUSH
16200: LD_INT 1
16202: ST_TO_ADDR
// end ;
16203: END
// every 42 42$0 do
16204: GO 16206
16206: DISABLE
// begin DialogueOn ;
16207: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16211: LD_EXP 10
16215: PPUSH
16216: LD_STRING D12e-Sci-1
16218: PPUSH
16219: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16223: LD_EXP 1
16227: PPUSH
16228: LD_STRING D12e-JMM-1
16230: PPUSH
16231: CALL_OW 88
// DialogueOff ;
16235: CALL_OW 7
// cratesStatus = 2 ;
16239: LD_ADDR_EXP 38
16243: PUSH
16244: LD_INT 2
16246: ST_TO_ADDR
// end ;
16247: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16248: LD_INT 22
16250: PUSH
16251: LD_INT 6
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 34
16270: PUSH
16271: LD_INT 51
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 69
16287: PUSH
16288: LD_INT 0
16290: GREATER
16291: IFFALSE 16374
16293: GO 16295
16295: DISABLE
16296: LD_INT 0
16298: PPUSH
// begin enable ;
16299: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_INT 6
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 2
16317: PUSH
16318: LD_INT 21
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 21
16330: PUSH
16331: LD_INT 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16372
// ComAgressiveMove ( i , 138 , 168 ) ;
16355: LD_VAR 0 1
16359: PPUSH
16360: LD_INT 138
16362: PPUSH
16363: LD_INT 168
16365: PPUSH
16366: CALL_OW 114
16370: GO 16352
16372: POP
16373: POP
// end ;
16374: PPOPN 1
16376: END
// every 0 0$1 do var i ;
16377: GO 16379
16379: DISABLE
16380: LD_INT 0
16382: PPUSH
// begin enable ;
16383: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16384: LD_ADDR_VAR 0 1
16388: PUSH
16389: LD_INT 4
16391: PPUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 22
16397: PUSH
16398: LD_INT 3
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 22
16407: PUSH
16408: LD_INT 6
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: EMPTY
16421: LIST
16422: PPUSH
16423: CALL_OW 70
16427: PUSH
16428: FOR_IN
16429: IFFALSE 16493
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16431: LD_INT 4
16433: PPUSH
16434: LD_INT 22
16436: PUSH
16437: LD_INT 6
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 34
16446: PUSH
16447: LD_INT 51
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 70
16462: PUSH
16463: LD_INT 0
16465: GREATER
16466: IFFALSE 16482
// sendedConvoys = sendedConvoys + 1 ;
16468: LD_ADDR_EXP 39
16472: PUSH
16473: LD_EXP 39
16477: PUSH
16478: LD_INT 1
16480: PLUS
16481: ST_TO_ADDR
// RemoveUnit ( i ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 64
// end ;
16491: GO 16428
16493: POP
16494: POP
// end ; end_of_file
16495: PPOPN 1
16497: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 1
16505: EQUAL
16506: PUSH
16507: LD_VAR 0 2
16511: PUSH
16512: LD_INT 3
16514: EQUAL
16515: AND
16516: IFFALSE 16526
// contactWithRussian = 1 ;
16518: LD_ADDR_EXP 22
16522: PUSH
16523: LD_INT 1
16525: ST_TO_ADDR
// end ;
16526: PPOPN 2
16528: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 266
16538: PUSH
16539: LD_INT 36
16541: EQUAL
16542: PUSH
16543: LD_VAR 0 1
16547: PPUSH
16548: CALL_OW 255
16552: PUSH
16553: LD_INT 1
16555: EQUAL
16556: AND
16557: PUSH
16558: LD_INT 22
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 21
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 33
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: PPUSH
16593: CALL_OW 69
16597: PUSH
16598: LD_INT 0
16600: EQUAL
16601: AND
16602: PUSH
16603: LD_EXP 23
16607: PUSH
16608: LD_INT 0
16610: EQUAL
16611: AND
16612: IFFALSE 16692
// begin firstTower = 1 ;
16614: LD_ADDR_EXP 23
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16622: LD_INT 22
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 21
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 25
16644: PUSH
16645: LD_INT 3
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 26
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 69
16672: PUSH
16673: LD_EXP 1
16677: PUSH
16678: EMPTY
16679: LIST
16680: DIFF
16681: PPUSH
16682: LD_STRING D3b-Mech1-1
16684: PPUSH
16685: LD_STRING D3b-Mech1-1
16687: PPUSH
16688: CALL 6030 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 266
16701: PUSH
16702: LD_INT 0
16704: EQUAL
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 255
16715: PUSH
16716: LD_INT 1
16718: EQUAL
16719: AND
16720: IFFALSE 16734
// SetBName ( building , theta ) ;
16722: LD_VAR 0 1
16726: PPUSH
16727: LD_STRING theta
16729: PPUSH
16730: CALL_OW 500
// if GetSide ( building ) = 3 then
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 255
16743: PUSH
16744: LD_INT 3
16746: EQUAL
16747: IFFALSE 16821
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16749: LD_ADDR_EXP 31
16753: PUSH
16754: LD_EXP 31
16758: PPUSH
16759: LD_INT 1
16761: PPUSH
16762: CALL_OW 3
16766: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16767: LD_ADDR_EXP 31
16771: PUSH
16772: LD_EXP 31
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: CALL_OW 3
16784: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16785: LD_ADDR_EXP 31
16789: PUSH
16790: LD_EXP 31
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 3
16802: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16803: LD_ADDR_EXP 31
16807: PUSH
16808: LD_EXP 31
16812: PPUSH
16813: LD_INT 1
16815: PPUSH
16816: CALL_OW 3
16820: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL_OW 255
16830: PUSH
16831: LD_INT 3
16833: EQUAL
16834: PUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 266
16844: PUSH
16845: LD_INT 0
16847: EQUAL
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 266
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: OR
16863: PUSH
16864: LD_VAR 0 1
16868: PPUSH
16869: CALL_OW 266
16873: PUSH
16874: LD_INT 4
16876: EQUAL
16877: OR
16878: PUSH
16879: EMPTY
16880: LIST
16881: AND
16882: IFFALSE 16893
// ComUpgrade ( building ) ;
16884: LD_VAR 0 1
16888: PPUSH
16889: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 255
16902: PUSH
16903: LD_INT 3
16905: EQUAL
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 266
16916: PUSH
16917: LD_INT 32
16919: EQUAL
16920: AND
16921: IFFALSE 16962
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 42
16930: PUSH
16931: LD_INT 43
16933: PUSH
16934: LD_INT 44
16936: PUSH
16937: LD_INT 46
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 1
16948: PPUSH
16949: LD_INT 4
16951: PPUSH
16952: CALL_OW 12
16956: ARRAY
16957: PPUSH
16958: CALL_OW 208
// end ; end ;
16962: PPOPN 1
16964: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 21
16982: PUSH
16983: LD_INT 1
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 23
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: LIST
17004: PPUSH
17005: CALL_OW 69
17009: IN
17010: IFFALSE 17026
// killCounter := killCounter + 1 ;
17012: LD_ADDR_EXP 47
17016: PUSH
17017: LD_EXP 47
17021: PUSH
17022: LD_INT 1
17024: PLUS
17025: ST_TO_ADDR
// if unit = JMM then
17026: LD_VAR 0 1
17030: PUSH
17031: LD_EXP 1
17035: EQUAL
17036: IFFALSE 17045
// YouLost ( JMM ) ;
17038: LD_STRING JMM
17040: PPUSH
17041: CALL_OW 104
// if unit = Joan then
17045: LD_VAR 0 1
17049: PUSH
17050: LD_EXP 15
17054: EQUAL
17055: IFFALSE 17065
// JoanStatus = 0 ;
17057: LD_ADDR_EXP 16
17061: PUSH
17062: LD_INT 0
17064: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 255
17074: PUSH
17075: LD_INT 1
17077: EQUAL
17078: PUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 247
17088: PUSH
17089: LD_INT 1
17091: EQUAL
17092: AND
17093: IFFALSE 17169
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 257
17104: PUSH
17105: LD_INT 1
17107: EQUAL
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 257
17118: PUSH
17119: LD_INT 2
17121: EQUAL
17122: OR
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 257
17133: PUSH
17134: LD_INT 3
17136: EQUAL
17137: OR
17138: PUSH
17139: LD_VAR 0 1
17143: PPUSH
17144: CALL_OW 257
17148: PUSH
17149: LD_INT 4
17151: EQUAL
17152: OR
17153: IFFALSE 17169
// unitLost = unitLost + 1 ;
17155: LD_ADDR_EXP 30
17159: PUSH
17160: LD_EXP 30
17164: PUSH
17165: LD_INT 1
17167: PLUS
17168: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 255
17178: PUSH
17179: LD_INT 3
17181: EQUAL
17182: PUSH
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 247
17192: PUSH
17193: LD_INT 3
17195: EQUAL
17196: AND
17197: IFFALSE 17889
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 266
17208: PUSH
17209: LD_INT 31
17211: EQUAL
17212: PUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 266
17222: PUSH
17223: LD_INT 32
17225: EQUAL
17226: OR
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: CALL_OW 266
17237: PUSH
17238: LD_INT 36
17240: EQUAL
17241: OR
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 266
17252: PUSH
17253: LD_INT 0
17255: EQUAL
17256: OR
17257: PUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 266
17267: PUSH
17268: LD_INT 24
17270: EQUAL
17271: OR
17272: PUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL_OW 266
17282: PUSH
17283: LD_INT 17
17285: EQUAL
17286: OR
17287: PUSH
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 266
17297: PUSH
17298: LD_INT 25
17300: EQUAL
17301: OR
17302: PUSH
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 266
17312: PUSH
17313: LD_INT 19
17315: EQUAL
17316: OR
17317: PUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 266
17327: PUSH
17328: LD_INT 20
17330: EQUAL
17331: OR
17332: PUSH
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 266
17342: PUSH
17343: LD_INT 18
17345: EQUAL
17346: OR
17347: PUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 266
17357: PUSH
17358: LD_INT 21
17360: EQUAL
17361: OR
17362: PUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 266
17372: PUSH
17373: LD_INT 23
17375: EQUAL
17376: OR
17377: PUSH
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 266
17387: PUSH
17388: LD_INT 16
17390: EQUAL
17391: OR
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 266
17402: PUSH
17403: LD_INT 6
17405: EQUAL
17406: OR
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 266
17417: PUSH
17418: LD_INT 29
17420: EQUAL
17421: OR
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 266
17432: PUSH
17433: LD_INT 26
17435: EQUAL
17436: OR
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 266
17447: PUSH
17448: LD_INT 30
17450: EQUAL
17451: OR
17452: PUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 266
17462: PUSH
17463: LD_INT 28
17465: EQUAL
17466: OR
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 266
17477: PUSH
17478: LD_INT 27
17480: EQUAL
17481: OR
17482: PUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: CALL_OW 266
17492: PUSH
17493: LD_INT 33
17495: EQUAL
17496: OR
17497: PUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 266
17507: PUSH
17508: LD_INT 2
17510: EQUAL
17511: OR
17512: PUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 266
17522: PUSH
17523: LD_INT 4
17525: EQUAL
17526: OR
17527: IFFALSE 17613
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17529: LD_ADDR_EXP 31
17533: PUSH
17534: LD_EXP 31
17538: PUSH
17539: LD_VAR 0 1
17543: PPUSH
17544: CALL_OW 266
17548: ADD
17549: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17550: LD_ADDR_EXP 31
17554: PUSH
17555: LD_EXP 31
17559: PUSH
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 250
17569: ADD
17570: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17571: LD_ADDR_EXP 31
17575: PUSH
17576: LD_EXP 31
17580: PUSH
17581: LD_VAR 0 1
17585: PPUSH
17586: CALL_OW 251
17590: ADD
17591: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17592: LD_ADDR_EXP 31
17596: PUSH
17597: LD_EXP 31
17601: PUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 254
17611: ADD
17612: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 266
17622: PUSH
17623: LD_INT 1
17625: EQUAL
17626: IFFALSE 17705
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17628: LD_ADDR_EXP 31
17632: PUSH
17633: LD_EXP 31
17637: PUSH
17638: LD_INT 0
17640: ADD
17641: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17642: LD_ADDR_EXP 31
17646: PUSH
17647: LD_EXP 31
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 250
17661: ADD
17662: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17663: LD_ADDR_EXP 31
17667: PUSH
17668: LD_EXP 31
17672: PUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 251
17682: ADD
17683: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17684: LD_ADDR_EXP 31
17688: PUSH
17689: LD_EXP 31
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 254
17703: ADD
17704: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17705: LD_VAR 0 1
17709: PPUSH
17710: CALL_OW 266
17714: PUSH
17715: LD_INT 3
17717: EQUAL
17718: IFFALSE 17797
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17720: LD_ADDR_EXP 31
17724: PUSH
17725: LD_EXP 31
17729: PUSH
17730: LD_INT 2
17732: ADD
17733: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17734: LD_ADDR_EXP 31
17738: PUSH
17739: LD_EXP 31
17743: PUSH
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 250
17753: ADD
17754: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17755: LD_ADDR_EXP 31
17759: PUSH
17760: LD_EXP 31
17764: PUSH
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 251
17774: ADD
17775: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17776: LD_ADDR_EXP 31
17780: PUSH
17781: LD_EXP 31
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 254
17795: ADD
17796: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 266
17806: PUSH
17807: LD_INT 5
17809: EQUAL
17810: IFFALSE 17889
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17812: LD_ADDR_EXP 31
17816: PUSH
17817: LD_EXP 31
17821: PUSH
17822: LD_INT 4
17824: ADD
17825: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17826: LD_ADDR_EXP 31
17830: PUSH
17831: LD_EXP 31
17835: PUSH
17836: LD_VAR 0 1
17840: PPUSH
17841: CALL_OW 250
17845: ADD
17846: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17847: LD_ADDR_EXP 31
17851: PUSH
17852: LD_EXP 31
17856: PUSH
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 251
17866: ADD
17867: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17868: LD_ADDR_EXP 31
17872: PUSH
17873: LD_EXP 31
17877: PUSH
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 254
17887: ADD
17888: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 257
17898: PUSH
17899: LD_INT 3
17901: EQUAL
17902: PUSH
17903: LD_VAR 0 1
17907: PPUSH
17908: CALL_OW 255
17912: PUSH
17913: LD_INT 3
17915: EQUAL
17916: AND
17917: PUSH
17918: LD_INT 21
17920: PPUSH
17921: CALL_OW 302
17925: AND
17926: PUSH
17927: LD_INT 21
17929: PPUSH
17930: CALL_OW 255
17934: PUSH
17935: LD_INT 3
17937: EQUAL
17938: AND
17939: IFFALSE 18007
// begin uc_side = 3 ;
17941: LD_ADDR_OWVAR 20
17945: PUSH
17946: LD_INT 3
17948: ST_TO_ADDR
// uc_nation = 3 ;
17949: LD_ADDR_OWVAR 21
17953: PUSH
17954: LD_INT 3
17956: ST_TO_ADDR
// hc_gallery :=  ;
17957: LD_ADDR_OWVAR 33
17961: PUSH
17962: LD_STRING 
17964: ST_TO_ADDR
// hc_name :=  ;
17965: LD_ADDR_OWVAR 26
17969: PUSH
17970: LD_STRING 
17972: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17973: LD_INT 0
17975: PPUSH
17976: LD_EXP 34
17980: PPUSH
17981: LD_EXP 35
17985: PPUSH
17986: CALL_OW 12
17990: PPUSH
17991: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17995: CALL_OW 44
17999: PPUSH
18000: LD_INT 21
18002: PPUSH
18003: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 255
18016: PUSH
18017: LD_INT 3
18019: EQUAL
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 264
18030: PUSH
18031: LD_INT 52
18033: EQUAL
18034: AND
18035: PUSH
18036: LD_INT 21
18038: PPUSH
18039: CALL_OW 302
18043: AND
18044: PUSH
18045: LD_INT 21
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_INT 3
18055: EQUAL
18056: AND
18057: IFFALSE 18078
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18059: LD_INT 21
18061: PPUSH
18062: LD_INT 22
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_INT 52
18073: PPUSH
18074: CALL_OW 125
// end ;
18078: PPOPN 1
18080: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
18085: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 264
18095: PUSH
18096: LD_INT 51
18098: EQUAL
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 255
18109: PUSH
18110: LD_INT 3
18112: EQUAL
18113: AND
18114: IFFALSE 18176
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 2
18123: PPUSH
18124: CALL_OW 274
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 275
18136: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18137: LD_INT 2
18139: PPUSH
18140: CALL_OW 274
18144: PPUSH
18145: LD_INT 1
18147: PPUSH
18148: LD_VAR 0 5
18152: PUSH
18153: LD_INT 100
18155: MINUS
18156: PPUSH
18157: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: LD_INT 100
18171: PPUSH
18172: CALL_OW 291
// end ; if building = rufabsupp then
18176: LD_VAR 0 2
18180: PUSH
18181: LD_INT 17
18183: EQUAL
18184: IFFALSE 18198
// SetSide ( vehicle , 6 ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_INT 6
18193: PPUSH
18194: CALL_OW 235
// end ;
18198: PPOPN 5
18200: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 255
18210: PUSH
18211: LD_INT 3
18213: EQUAL
18214: IFFALSE 18245
// begin tamedApemans = tamedApemans + 1 ;
18216: LD_ADDR_EXP 32
18220: PUSH
18221: LD_EXP 32
18225: PUSH
18226: LD_INT 1
18228: PLUS
18229: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_INT 106
18237: PPUSH
18238: LD_INT 85
18240: PPUSH
18241: CALL_OW 111
// end ; end ;
18245: PPOPN 2
18247: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 255
18261: PUSH
18262: LD_INT 3
18264: EQUAL
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 247
18275: PUSH
18276: LD_INT 2
18278: EQUAL
18279: AND
18280: IFFALSE 18389
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 264
18291: PUSH
18292: LD_INT 42
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 264
18305: PUSH
18306: LD_INT 43
18308: EQUAL
18309: OR
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 264
18320: PUSH
18321: LD_INT 44
18323: EQUAL
18324: OR
18325: PUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 264
18335: PUSH
18336: LD_INT 46
18338: EQUAL
18339: OR
18340: IFFALSE 18389
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18342: LD_INT 21
18344: PPUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 265
18354: PPUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 262
18364: PPUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 263
18374: PPUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 264
18384: PPUSH
18385: CALL_OW 185
// end ;
18389: PPOPN 3
18391: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 255
18401: PUSH
18402: LD_INT 3
18404: EQUAL
18405: PUSH
18406: LD_VAR 0 2
18410: PPUSH
18411: CALL_OW 255
18415: PUSH
18416: LD_INT 3
18418: EQUAL
18419: AND
18420: PUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 302
18430: AND
18431: IFFALSE 18473
// begin ComRepairVehicle ( human , vehicle ) ;
18433: LD_VAR 0 2
18437: PPUSH
18438: LD_VAR 0 1
18442: PPUSH
18443: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18447: LD_VAR 0 2
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 100
18468: PPUSH
18469: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 255
18482: PUSH
18483: LD_INT 3
18485: EQUAL
18486: PUSH
18487: LD_VAR 0 2
18491: PPUSH
18492: CALL_OW 255
18496: PUSH
18497: LD_INT 3
18499: EQUAL
18500: AND
18501: PUSH
18502: LD_INT 21
18504: PPUSH
18505: CALL_OW 302
18509: AND
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 302
18520: NOT
18521: AND
18522: IFFALSE 18536
// ComEnterUnit ( human , rufab ) ;
18524: LD_VAR 0 2
18528: PPUSH
18529: LD_INT 21
18531: PPUSH
18532: CALL_OW 120
// end ;
18536: PPOPN 2
18538: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18539: LD_VAR 0 1
18543: PUSH
18544: LD_INT 21
18546: EQUAL
18547: PUSH
18548: LD_VAR 0 2
18552: PPUSH
18553: CALL_OW 255
18557: PUSH
18558: LD_INT 3
18560: EQUAL
18561: AND
18562: IFFALSE 18576
// SetLives ( human , 1000 ) ;
18564: LD_VAR 0 2
18568: PPUSH
18569: LD_INT 1000
18571: PPUSH
18572: CALL_OW 234
// end ;
18576: PPOPN 2
18578: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL 24240 0 1
// end ; end_of_file
18588: PPOPN 1
18590: END
// every 0 0$30 trigger cratesStatus = 1 do
18591: LD_EXP 38
18595: PUSH
18596: LD_INT 1
18598: EQUAL
18599: IFFALSE 18682
18601: GO 18603
18603: DISABLE
// begin enable ;
18604: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18605: LD_INT 350
18607: PUSH
18608: LD_INT 1050
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PPUSH
18618: LD_INT 2
18620: PPUSH
18621: CALL_OW 12
18625: ARRAY
18626: PPUSH
18627: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18631: LD_INT 4
18633: PUSH
18634: LD_INT 5
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_INT 2
18646: PPUSH
18647: CALL_OW 12
18651: ARRAY
18652: PPUSH
18653: LD_INT 6
18655: PUSH
18656: LD_INT 7
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PPUSH
18666: LD_INT 2
18668: PPUSH
18669: CALL_OW 12
18673: ARRAY
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 55
// end ;
18682: END
// every 1 1$0 trigger cratesStatus = 2 do
18683: LD_EXP 38
18687: PUSH
18688: LD_INT 2
18690: EQUAL
18691: IFFALSE 18774
18693: GO 18695
18695: DISABLE
// begin enable ;
18696: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18697: LD_INT 3150
18699: PUSH
18700: LD_INT 4550
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_INT 2
18712: PPUSH
18713: CALL_OW 12
18717: ARRAY
18718: PPUSH
18719: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18723: LD_INT 2
18725: PUSH
18726: LD_INT 5
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_INT 2
18738: PPUSH
18739: CALL_OW 12
18743: ARRAY
18744: PPUSH
18745: LD_INT 6
18747: PUSH
18748: LD_INT 7
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 12
18765: ARRAY
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 55
// end ;
18774: END
// every 0 0$30 + 0 0$10 do
18775: GO 18777
18777: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18778: LD_INT 4
18780: PUSH
18781: LD_INT 5
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: PPUSH
18791: LD_INT 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: PPUSH
18800: LD_INT 7
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: CALL_OW 55
// Wait ( 0 0$15 ) ;
18810: LD_INT 525
18812: PPUSH
18813: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18817: LD_INT 4
18819: PUSH
18820: LD_INT 5
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: PPUSH
18830: LD_INT 2
18832: PPUSH
18833: CALL_OW 12
18837: ARRAY
18838: PPUSH
18839: LD_INT 7
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 55
// Wait ( 0 0$20 ) ;
18849: LD_INT 700
18851: PPUSH
18852: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18856: LD_INT 4
18858: PUSH
18859: LD_INT 5
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PPUSH
18869: LD_INT 2
18871: PPUSH
18872: CALL_OW 12
18876: ARRAY
18877: PPUSH
18878: LD_INT 7
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 55
// end ; end_of_file
18888: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18889: LD_EXP 24
18893: PUSH
18894: LD_INT 1
18896: EQUAL
18897: IFFALSE 19198
18899: GO 18901
18901: DISABLE
18902: LD_INT 0
18904: PPUSH
18905: PPUSH
18906: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18907: LD_ADDR_VAR 0 2
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 21
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 30
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
// for i in tmp do
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_VAR 0 2
18979: PUSH
18980: FOR_IN
18981: IFFALSE 19014
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18983: LD_ADDR_VAR 0 3
18987: PUSH
18988: LD_VAR 0 3
18992: PUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 274
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 275
19010: PLUS
19011: ST_TO_ADDR
19012: GO 18980
19014: POP
19015: POP
// strings = [ ] ;
19016: LD_ADDR_EXP 27
19020: PUSH
19021: EMPTY
19022: ST_TO_ADDR
// if tmp = 0 then
19023: LD_VAR 0 2
19027: PUSH
19028: LD_INT 0
19030: EQUAL
19031: IFFALSE 19056
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19033: LD_ADDR_EXP 27
19037: PUSH
19038: LD_EXP 27
19042: PUSH
19043: LD_STRING #Am06-1
19045: PUSH
19046: LD_EXP 25
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: ADD
19055: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19056: LD_VAR 0 2
19060: PUSH
19061: LD_INT 0
19063: GREATER
19064: PUSH
19065: LD_EXP 25
19069: PUSH
19070: LD_VAR 0 3
19074: GREATER
19075: AND
19076: IFFALSE 19107
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19078: LD_ADDR_EXP 27
19082: PUSH
19083: LD_EXP 27
19087: PUSH
19088: LD_STRING #Am06-1
19090: PUSH
19091: LD_EXP 25
19095: PUSH
19096: LD_VAR 0 3
19100: MINUS
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: ADD
19106: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19107: LD_VAR 0 2
19111: PUSH
19112: LD_INT 0
19114: GREATER
19115: PUSH
19116: LD_EXP 25
19120: PUSH
19121: LD_VAR 0 3
19125: LESSEQUAL
19126: AND
19127: IFFALSE 19150
// strings = strings ^ [ #Am06-1 , 0 ] ;
19129: LD_ADDR_EXP 27
19133: PUSH
19134: LD_EXP 27
19138: PUSH
19139: LD_STRING #Am06-1
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ADD
19149: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19150: LD_ADDR_EXP 26
19154: PUSH
19155: LD_EXP 26
19159: PUSH
19160: LD_INT 35
19162: MINUS
19163: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19164: LD_ADDR_EXP 27
19168: PUSH
19169: LD_EXP 27
19173: PUSH
19174: LD_STRING #Am06-2
19176: PUSH
19177: LD_EXP 26
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ADD
19186: ST_TO_ADDR
// display_strings = strings ;
19187: LD_ADDR_OWVAR 47
19191: PUSH
19192: LD_EXP 27
19196: ST_TO_ADDR
// enable ;
19197: ENABLE
// end ; end_of_file
19198: PPOPN 3
19200: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 30
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 30
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19262: LD_INT 35
19264: PPUSH
19265: CALL_OW 67
// until depot ;
19269: LD_VAR 0 3
19273: IFFALSE 19210
// repeat wait ( 0 0$1 ) ;
19275: LD_INT 35
19277: PPUSH
19278: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 91
19299: PUSH
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PUSH
19309: LD_INT 15
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 21
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 25
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 25
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 25
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 25
19362: PUSH
19363: LD_INT 4
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 3
19379: PUSH
19380: LD_INT 54
19382: PUSH
19383: EMPTY
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 3
19392: PUSH
19393: LD_INT 55
19395: PUSH
19396: EMPTY
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: CALL_OW 69
19415: PUSH
19416: LD_EXP 2
19420: PUSH
19421: LD_EXP 3
19425: PUSH
19426: LD_EXP 4
19430: PUSH
19431: LD_EXP 5
19435: PUSH
19436: LD_EXP 7
19440: PUSH
19441: LD_EXP 8
19445: PUSH
19446: LD_EXP 9
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: LD_EXP 46
19464: ADD
19465: DIFF
19466: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19467: LD_VAR 0 4
19471: PUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 463
19479: NOT
19480: AND
19481: IFFALSE 19275
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19483: LD_ADDR_VAR 0 4
19487: PUSH
19488: LD_VAR 0 4
19492: PUSH
19493: LD_INT 1
19495: PPUSH
19496: LD_VAR 0 4
19500: PPUSH
19501: CALL_OW 12
19505: ARRAY
19506: ST_TO_ADDR
// blockSpawn = 1 ;
19507: LD_ADDR_EXP 29
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// uc_side = 2 ;
19515: LD_ADDR_OWVAR 20
19519: PUSH
19520: LD_INT 2
19522: ST_TO_ADDR
// uc_nation = 2 ;
19523: LD_ADDR_OWVAR 21
19527: PUSH
19528: LD_INT 2
19530: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19531: LD_ADDR_EXP 19
19535: PUSH
19536: LD_STRING Kurt
19538: PPUSH
19539: LD_INT 0
19541: PPUSH
19542: CALL 5967 0 2
19546: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19547: LD_EXP 19
19551: PPUSH
19552: LD_VAR 0 4
19556: PPUSH
19557: CALL_OW 250
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: CALL_OW 251
19571: PPUSH
19572: LD_INT 5
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 50
// InGameOn ;
19582: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19586: LD_EXP 19
19590: PPUSH
19591: CALL_OW 87
// wait ( 0 0$2 ) ;
19595: LD_INT 70
19597: PPUSH
19598: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19602: LD_EXP 19
19606: PPUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19616: LD_VAR 0 4
19620: PPUSH
19621: LD_EXP 19
19625: PPUSH
19626: CALL_OW 112
// wait ( 0 0$1 ) ;
19630: LD_INT 35
19632: PPUSH
19633: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19637: LD_VAR 0 4
19641: PPUSH
19642: LD_EXP 19
19646: PPUSH
19647: CALL_OW 119
// DialogueOn ;
19651: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19655: LD_EXP 19
19659: PPUSH
19660: LD_STRING D2-Kurt-1
19662: PPUSH
19663: CALL_OW 88
// if tmp = JMM then
19667: LD_VAR 0 4
19671: PUSH
19672: LD_EXP 1
19676: EQUAL
19677: IFFALSE 19769
// begin Say ( JMM , D2-JMM-1 ) ;
19679: LD_EXP 1
19683: PPUSH
19684: LD_STRING D2-JMM-1
19686: PPUSH
19687: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19691: LD_EXP 19
19695: PPUSH
19696: LD_STRING D2-Kurt-2
19698: PPUSH
19699: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19703: LD_EXP 1
19707: PPUSH
19708: LD_STRING D2-JMM-2
19710: PPUSH
19711: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19715: LD_EXP 19
19719: PPUSH
19720: LD_STRING D2-Kurt-3
19722: PPUSH
19723: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19727: LD_EXP 1
19731: PPUSH
19732: LD_STRING D2-JMM-3
19734: PPUSH
19735: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19739: LD_EXP 19
19743: PPUSH
19744: LD_STRING D2-Kurt-4
19746: PPUSH
19747: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19751: LD_EXP 1
19755: PPUSH
19756: LD_STRING D2-JMM-4
19758: PPUSH
19759: CALL_OW 88
// DialogueOff ;
19763: CALL_OW 7
// end else
19767: GO 20079
// begin if GetSex ( tmp ) = 1 then
19769: LD_VAR 0 4
19773: PPUSH
19774: CALL_OW 258
19778: PUSH
19779: LD_INT 1
19781: EQUAL
19782: IFFALSE 19796
// Say ( tmp , D2-Sol1-1 ) ;
19784: LD_VAR 0 4
19788: PPUSH
19789: LD_STRING D2-Sol1-1
19791: PPUSH
19792: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19796: LD_VAR 0 4
19800: PPUSH
19801: CALL_OW 258
19805: PUSH
19806: LD_INT 2
19808: EQUAL
19809: IFFALSE 19823
// Say ( tmp , D2-FSol1-1 ) ;
19811: LD_VAR 0 4
19815: PPUSH
19816: LD_STRING D2-FSol1-1
19818: PPUSH
19819: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19823: LD_EXP 19
19827: PPUSH
19828: LD_STRING D2-Kurt-2
19830: PPUSH
19831: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19835: LD_VAR 0 4
19839: PPUSH
19840: CALL_OW 258
19844: PUSH
19845: LD_INT 1
19847: EQUAL
19848: IFFALSE 19862
// Say ( tmp , D2-Sol1-2 ) ;
19850: LD_VAR 0 4
19854: PPUSH
19855: LD_STRING D2-Sol1-2
19857: PPUSH
19858: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19862: LD_VAR 0 4
19866: PPUSH
19867: CALL_OW 258
19871: PUSH
19872: LD_INT 2
19874: EQUAL
19875: IFFALSE 19889
// Say ( tmp , D2-FSol1-2 ) ;
19877: LD_VAR 0 4
19881: PPUSH
19882: LD_STRING D2-FSol1-2
19884: PPUSH
19885: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19889: LD_EXP 19
19893: PPUSH
19894: LD_STRING D2-Kurt-3
19896: PPUSH
19897: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 258
19910: PUSH
19911: LD_INT 1
19913: EQUAL
19914: IFFALSE 19928
// Say ( tmp , D2-Sol1-3 ) ;
19916: LD_VAR 0 4
19920: PPUSH
19921: LD_STRING D2-Sol1-3
19923: PPUSH
19924: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19928: LD_VAR 0 4
19932: PPUSH
19933: CALL_OW 258
19937: PUSH
19938: LD_INT 2
19940: EQUAL
19941: IFFALSE 19955
// Say ( tmp , D2-FSol1-3 ) ;
19943: LD_VAR 0 4
19947: PPUSH
19948: LD_STRING D2-FSol1-3
19950: PPUSH
19951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19955: LD_EXP 19
19959: PPUSH
19960: LD_STRING D2-Kurt-4
19962: PPUSH
19963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19967: LD_VAR 0 4
19971: PPUSH
19972: CALL_OW 258
19976: PUSH
19977: LD_INT 1
19979: EQUAL
19980: IFFALSE 19994
// Say ( tmp , D2-Sol1-4 ) ;
19982: LD_VAR 0 4
19986: PPUSH
19987: LD_STRING D2-Sol1-4
19989: PPUSH
19990: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19994: LD_VAR 0 4
19998: PPUSH
19999: CALL_OW 258
20003: PUSH
20004: LD_INT 2
20006: EQUAL
20007: IFFALSE 20021
// Say ( tmp , D2-FSol1-4 ) ;
20009: LD_VAR 0 4
20013: PPUSH
20014: LD_STRING D2-FSol1-4
20016: PPUSH
20017: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 258
20030: PUSH
20031: LD_INT 1
20033: EQUAL
20034: IFFALSE 20048
// Say ( tmp , D2-Sol1-5 ) ;
20036: LD_VAR 0 4
20040: PPUSH
20041: LD_STRING D2-Sol1-5
20043: PPUSH
20044: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20048: LD_VAR 0 4
20052: PPUSH
20053: CALL_OW 258
20057: PUSH
20058: LD_INT 2
20060: EQUAL
20061: IFFALSE 20075
// Say ( tmp , D2-FSol1-5 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_STRING D2-FSol1-5
20070: PPUSH
20071: CALL_OW 88
// DialogueOff ;
20075: CALL_OW 7
// end ; dec = ShowQuery1 ;
20079: LD_ADDR_VAR 0 6
20083: PUSH
20084: CALL 6491 0 0
20088: ST_TO_ADDR
// if dec = 1 then
20089: LD_VAR 0 6
20093: PUSH
20094: LD_INT 1
20096: EQUAL
20097: IFFALSE 20139
// begin DialogueOn ;
20099: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20103: LD_EXP 19
20107: PPUSH
20108: LD_STRING D2a-Kurt-1
20110: PPUSH
20111: CALL_OW 88
// DialogueOff ;
20115: CALL_OW 7
// InGameOff ;
20119: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20123: LD_INT 1
20125: PPUSH
20126: LD_INT 2
20128: PPUSH
20129: LD_INT 2
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: CALL_OW 80
// end ; if dec = 2 then
20139: LD_VAR 0 6
20143: PUSH
20144: LD_INT 2
20146: EQUAL
20147: IFFALSE 20647
// begin DialogueOn ;
20149: CALL_OW 6
// if tmp = JMM then
20153: LD_VAR 0 4
20157: PUSH
20158: LD_EXP 1
20162: EQUAL
20163: IFFALSE 20219
// begin Say ( JMM , D2b-JMM-1 ) ;
20165: LD_EXP 1
20169: PPUSH
20170: LD_STRING D2b-JMM-1
20172: PPUSH
20173: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20177: LD_EXP 19
20181: PPUSH
20182: LD_STRING D2b-Kurt-1
20184: PPUSH
20185: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20189: LD_EXP 1
20193: PPUSH
20194: LD_STRING D2b-JMM-2
20196: PPUSH
20197: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20201: LD_EXP 19
20205: PPUSH
20206: LD_STRING D2b-Kurt-2
20208: PPUSH
20209: CALL_OW 88
// DialogueOff ;
20213: CALL_OW 7
// end else
20217: GO 20409
// begin if GetSex ( tmp ) = 1 then
20219: LD_VAR 0 4
20223: PPUSH
20224: CALL_OW 258
20228: PUSH
20229: LD_INT 1
20231: EQUAL
20232: IFFALSE 20246
// Say ( tmp , D2b-Sol1-1 ) ;
20234: LD_VAR 0 4
20238: PPUSH
20239: LD_STRING D2b-Sol1-1
20241: PPUSH
20242: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20246: LD_VAR 0 4
20250: PPUSH
20251: CALL_OW 258
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20273
// Say ( tmp , D2b-FSol1-1 ) ;
20261: LD_VAR 0 4
20265: PPUSH
20266: LD_STRING D2b-FSol1-1
20268: PPUSH
20269: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20273: LD_EXP 19
20277: PPUSH
20278: LD_STRING D2b-Kurt-1
20280: PPUSH
20281: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20285: LD_VAR 0 4
20289: PPUSH
20290: CALL_OW 258
20294: PUSH
20295: LD_INT 1
20297: EQUAL
20298: IFFALSE 20312
// Say ( tmp , D2b-Sol1-2 ) ;
20300: LD_VAR 0 4
20304: PPUSH
20305: LD_STRING D2b-Sol1-2
20307: PPUSH
20308: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20312: LD_VAR 0 4
20316: PPUSH
20317: CALL_OW 258
20321: PUSH
20322: LD_INT 2
20324: EQUAL
20325: IFFALSE 20339
// Say ( tmp , D2b-FSol1-2 ) ;
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_STRING D2b-FSol1-2
20334: PPUSH
20335: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20339: LD_EXP 19
20343: PPUSH
20344: LD_STRING D2b-Kurt-2
20346: PPUSH
20347: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20351: LD_VAR 0 4
20355: PPUSH
20356: CALL_OW 258
20360: PUSH
20361: LD_INT 1
20363: EQUAL
20364: IFFALSE 20378
// Say ( tmp , D2c-Sol1-2 ) ;
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_STRING D2c-Sol1-2
20373: PPUSH
20374: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20378: LD_VAR 0 4
20382: PPUSH
20383: CALL_OW 258
20387: PUSH
20388: LD_INT 2
20390: EQUAL
20391: IFFALSE 20405
// Say ( tmp , D2c-FSol1-2 ) ;
20393: LD_VAR 0 4
20397: PPUSH
20398: LD_STRING D2c-FSol1-2
20400: PPUSH
20401: CALL_OW 88
// DialogueOff ;
20405: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20409: LD_ADDR_VAR 0 7
20413: PUSH
20414: CALL 6565 0 0
20418: ST_TO_ADDR
// if dec2 = 1 then
20419: LD_VAR 0 7
20423: PUSH
20424: LD_INT 1
20426: EQUAL
20427: IFFALSE 20469
// begin DialogueOn ;
20429: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20433: LD_EXP 19
20437: PPUSH
20438: LD_STRING D2a-Kurt-1
20440: PPUSH
20441: CALL_OW 88
// DialogueOff ;
20445: CALL_OW 7
// InGameOff ;
20449: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20453: LD_INT 1
20455: PPUSH
20456: LD_INT 2
20458: PPUSH
20459: LD_INT 2
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 80
// end ; if dec2 = 2 then
20469: LD_VAR 0 7
20473: PUSH
20474: LD_INT 2
20476: EQUAL
20477: IFFALSE 20647
// begin if tmp = JMM then
20479: LD_VAR 0 4
20483: PUSH
20484: LD_EXP 1
20488: EQUAL
20489: IFFALSE 20549
// begin DialogueOn ;
20491: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20495: LD_EXP 1
20499: PPUSH
20500: LD_STRING D2c-JMM-1
20502: PPUSH
20503: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20507: LD_EXP 19
20511: PPUSH
20512: LD_STRING D2c-Kurt-1
20514: PPUSH
20515: CALL_OW 88
// DialogueOff ;
20519: CALL_OW 7
// InGameOff ;
20523: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20527: LD_EXP 19
20531: PPUSH
20532: LD_INT 8
20534: PPUSH
20535: CALL_OW 113
// readyToEscape = 1 ;
20539: LD_ADDR_EXP 21
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// end else
20547: GO 20647
// begin DialogueOn ;
20549: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20553: LD_VAR 0 4
20557: PPUSH
20558: CALL_OW 258
20562: PUSH
20563: LD_INT 1
20565: EQUAL
20566: IFFALSE 20580
// Say ( tmp , D2c-Sol1-1 ) ;
20568: LD_VAR 0 4
20572: PPUSH
20573: LD_STRING D2c-Sol1-1
20575: PPUSH
20576: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20580: LD_VAR 0 4
20584: PPUSH
20585: CALL_OW 258
20589: PUSH
20590: LD_INT 2
20592: EQUAL
20593: IFFALSE 20607
// Say ( tmp , D2c-FSol1-1 ) ;
20595: LD_VAR 0 4
20599: PPUSH
20600: LD_STRING D2c-FSol1-1
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20607: LD_EXP 19
20611: PPUSH
20612: LD_STRING D2c-Kurt-1
20614: PPUSH
20615: CALL_OW 88
// DialogueOff ;
20619: CALL_OW 7
// InGameOff ;
20623: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20627: LD_EXP 19
20631: PPUSH
20632: LD_INT 8
20634: PPUSH
20635: CALL_OW 113
// readyToEscape = 1 ;
20639: LD_ADDR_EXP 21
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20647: LD_VAR 0 6
20651: PUSH
20652: LD_INT 3
20654: EQUAL
20655: IFFALSE 20829
// begin DialogueOn ;
20657: CALL_OW 6
// if tmp = JMM then
20661: LD_VAR 0 4
20665: PUSH
20666: LD_EXP 1
20670: EQUAL
20671: IFFALSE 20731
// begin DialogueOn ;
20673: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20677: LD_EXP 1
20681: PPUSH
20682: LD_STRING D2c-JMM-1
20684: PPUSH
20685: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20689: LD_EXP 19
20693: PPUSH
20694: LD_STRING D2c-Kurt-1
20696: PPUSH
20697: CALL_OW 88
// DialogueOff ;
20701: CALL_OW 7
// InGameOff ;
20705: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20709: LD_EXP 19
20713: PPUSH
20714: LD_INT 8
20716: PPUSH
20717: CALL_OW 113
// readyToEscape = 1 ;
20721: LD_ADDR_EXP 21
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// end else
20729: GO 20829
// begin DialogueOn ;
20731: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20735: LD_VAR 0 4
20739: PPUSH
20740: CALL_OW 258
20744: PUSH
20745: LD_INT 1
20747: EQUAL
20748: IFFALSE 20762
// Say ( tmp , D2c-Sol1-1 ) ;
20750: LD_VAR 0 4
20754: PPUSH
20755: LD_STRING D2c-Sol1-1
20757: PPUSH
20758: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20762: LD_VAR 0 4
20766: PPUSH
20767: CALL_OW 258
20771: PUSH
20772: LD_INT 2
20774: EQUAL
20775: IFFALSE 20789
// Say ( tmp , D2c-FSol1-1 ) ;
20777: LD_VAR 0 4
20781: PPUSH
20782: LD_STRING D2c-FSol1-1
20784: PPUSH
20785: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20789: LD_EXP 19
20793: PPUSH
20794: LD_STRING D2c-Kurt-1
20796: PPUSH
20797: CALL_OW 88
// DialogueOff ;
20801: CALL_OW 7
// InGameOff ;
20805: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20809: LD_EXP 19
20813: PPUSH
20814: LD_INT 8
20816: PPUSH
20817: CALL_OW 113
// readyToEscape = 1 ;
20821: LD_ADDR_EXP 21
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20829: LD_ADDR_EXP 29
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20837: LD_INT 35
20839: PPUSH
20840: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20844: LD_EXP 19
20848: PPUSH
20849: LD_INT 8
20851: PPUSH
20852: CALL_OW 308
20856: PUSH
20857: LD_EXP 21
20861: AND
20862: PUSH
20863: LD_EXP 19
20867: PPUSH
20868: CALL_OW 301
20872: OR
20873: IFFALSE 20837
// if IsDead ( Kurt ) then
20875: LD_EXP 19
20879: PPUSH
20880: CALL_OW 301
20884: IFFALSE 20888
// exit ;
20886: GO 20957
// RemoveUnit ( Kurt ) ;
20888: LD_EXP 19
20892: PPUSH
20893: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20897: LD_EXP 19
20901: PPUSH
20902: LD_STRING Kurt
20904: PPUSH
20905: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20909: LD_INT 1
20911: PPUSH
20912: LD_INT 2
20914: PPUSH
20915: CALL_OW 81
20919: PUSH
20920: LD_INT 0
20922: EQUAL
20923: IFFALSE 20933
// KurtStatus = 1 ;
20925: LD_ADDR_EXP 20
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20933: LD_INT 1
20935: PPUSH
20936: LD_INT 2
20938: PPUSH
20939: CALL_OW 81
20943: PUSH
20944: LD_INT 2
20946: EQUAL
20947: IFFALSE 20957
// KurtStatus = 2 ;
20949: LD_ADDR_EXP 20
20953: PUSH
20954: LD_INT 2
20956: ST_TO_ADDR
// end ; end_of_file
20957: LD_VAR 0 1
20961: RET
// every 0 0$1 do
20962: GO 20964
20964: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20965: LD_INT 3
20967: PPUSH
20968: LD_INT 32
20970: PPUSH
20971: LD_INT 3
20973: PPUSH
20974: CALL 6620 0 3
20978: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
// begin enemyWayX = [ ] ;
20985: LD_ADDR_EXP 48
20989: PUSH
20990: EMPTY
20991: ST_TO_ADDR
// enemyWayY = [ ] ;
20992: LD_ADDR_EXP 49
20996: PUSH
20997: EMPTY
20998: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20999: LD_ADDR_VAR 0 1
21003: PUSH
21004: LD_INT 1
21006: PPUSH
21007: LD_INT 2
21009: PPUSH
21010: CALL_OW 12
21014: ST_TO_ADDR
// if rnd = 1 then
21015: LD_VAR 0 1
21019: PUSH
21020: LD_INT 1
21022: EQUAL
21023: IFFALSE 21063
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21025: LD_ADDR_EXP 48
21029: PUSH
21030: LD_INT 93
21032: PUSH
21033: LD_INT 84
21035: PUSH
21036: LD_INT 104
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21044: LD_ADDR_EXP 49
21048: PUSH
21049: LD_INT 51
21051: PUSH
21052: LD_INT 35
21054: PUSH
21055: LD_INT 28
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// end ; if rnd = 2 then
21063: LD_VAR 0 1
21067: PUSH
21068: LD_INT 2
21070: EQUAL
21071: IFFALSE 21127
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21073: LD_ADDR_EXP 48
21077: PUSH
21078: LD_INT 93
21080: PUSH
21081: LD_INT 52
21083: PUSH
21084: LD_INT 34
21086: PUSH
21087: LD_INT 28
21089: PUSH
21090: LD_INT 30
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21100: LD_ADDR_EXP 49
21104: PUSH
21105: LD_INT 51
21107: PUSH
21108: LD_INT 45
21110: PUSH
21111: LD_INT 35
21113: PUSH
21114: LD_INT 26
21116: PUSH
21117: LD_INT 20
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: ST_TO_ADDR
// end ; enable ;
21127: ENABLE
// end ;
21128: PPOPN 1
21130: END
// every 0 0$1 do
21131: GO 21133
21133: DISABLE
// begin enable ;
21134: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 2
21140: PPUSH
21141: LD_INT 10
21143: PPUSH
21144: LD_EXP 31
21148: PPUSH
21149: CALL 8055 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21153: LD_INT 3
21155: PPUSH
21156: LD_INT 12
21158: PPUSH
21159: LD_EXP 31
21163: PPUSH
21164: CALL 9940 0 3
// if disableHealAI = 0 then
21168: LD_EXP 33
21172: PUSH
21173: LD_INT 0
21175: EQUAL
21176: IFFALSE 21197
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21178: LD_INT 3
21180: PPUSH
21181: LD_INT 9
21183: PPUSH
21184: LD_INT 10
21186: PPUSH
21187: LD_INT 32
21189: PUSH
21190: EMPTY
21191: LIST
21192: PPUSH
21193: CALL 8446 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21197: LD_INT 3
21199: PPUSH
21200: LD_INT 51
21202: PPUSH
21203: LD_INT 6
21205: PPUSH
21206: CALL 9154 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21210: LD_INT 3
21212: PPUSH
21213: LD_INT 12
21215: PPUSH
21216: LD_INT 121
21218: PPUSH
21219: LD_INT 100
21221: PPUSH
21222: CALL 7015 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21226: LD_INT 3
21228: PPUSH
21229: LD_INT 22
21231: PPUSH
21232: LD_EXP 48
21236: PPUSH
21237: LD_EXP 49
21241: PPUSH
21242: CALL 7218 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21246: LD_INT 3
21248: PPUSH
21249: LD_INT 10
21251: PPUSH
21252: CALL 9297 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21256: LD_INT 3
21258: PPUSH
21259: LD_INT 1
21261: PPUSH
21262: CALL 9710 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21266: LD_INT 2
21268: PPUSH
21269: CALL_OW 303
21273: PUSH
21274: LD_INT 2
21276: PPUSH
21277: CALL_OW 255
21281: PUSH
21282: LD_INT 1
21284: EQUAL
21285: OR
21286: IFFALSE 21298
// DefendDepot ( 3 , rudepo ) ;
21288: LD_INT 3
21290: PPUSH
21291: LD_INT 2
21293: PPUSH
21294: CALL 8990 0 2
// end ;
21298: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21299: LD_INT 22
21301: PUSH
21302: LD_INT 3
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 55
21321: PUSH
21322: EMPTY
21323: LIST
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: LD_INT 34
21330: PUSH
21331: LD_INT 51
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PUSH
21353: LD_INT 0
21355: EQUAL
21356: PUSH
21357: LD_INT 21
21359: PPUSH
21360: CALL_OW 255
21364: PUSH
21365: LD_INT 3
21367: EQUAL
21368: AND
21369: PUSH
21370: LD_INT 21
21372: PPUSH
21373: CALL_OW 302
21377: AND
21378: PUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 255
21386: PUSH
21387: LD_INT 3
21389: EQUAL
21390: AND
21391: PUSH
21392: LD_INT 2
21394: PPUSH
21395: CALL_OW 302
21399: AND
21400: IFFALSE 21584
21402: GO 21404
21404: DISABLE
// begin enable ;
21405: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21406: LD_INT 2
21408: PPUSH
21409: CALL_OW 274
21413: PPUSH
21414: LD_INT 1
21416: PPUSH
21417: LD_INT 1000
21419: PPUSH
21420: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21424: LD_INT 3
21426: PPUSH
21427: LD_INT 21
21429: PPUSH
21430: LD_INT 5
21432: PUSH
21433: LD_INT 6
21435: PUSH
21436: LD_INT 6
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_OWVAR 67
21448: ARRAY
21449: PPUSH
21450: LD_INT 43
21452: PUSH
21453: LD_INT 43
21455: PUSH
21456: LD_INT 44
21458: PUSH
21459: LD_INT 44
21461: PUSH
21462: LD_INT 46
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 43
21474: PUSH
21475: LD_INT 43
21477: PUSH
21478: LD_INT 43
21480: PUSH
21481: LD_INT 44
21483: PUSH
21484: LD_INT 44
21486: PUSH
21487: LD_INT 46
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 43
21500: PUSH
21501: LD_INT 43
21503: PUSH
21504: LD_INT 43
21506: PUSH
21507: LD_INT 44
21509: PUSH
21510: LD_INT 44
21512: PUSH
21513: LD_INT 46
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: PUSH
21529: LD_OWVAR 67
21533: ARRAY
21534: PPUSH
21535: LD_INT 1
21537: PPUSH
21538: LD_INT 1
21540: PPUSH
21541: LD_INT 22
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_INT 24
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: PPUSH
21557: LD_INT 2
21559: PPUSH
21560: CALL_OW 12
21564: ARRAY
21565: PUSH
21566: LD_INT 24
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: LD_OWVAR 67
21578: ARRAY
21579: PPUSH
21580: CALL 6861 0 7
// end ;
21584: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21585: LD_INT 17
21587: PPUSH
21588: CALL_OW 255
21592: PUSH
21593: LD_INT 3
21595: EQUAL
21596: PUSH
21597: LD_INT 17
21599: PPUSH
21600: CALL_OW 302
21604: AND
21605: PUSH
21606: LD_INT 2
21608: PPUSH
21609: CALL_OW 255
21613: PUSH
21614: LD_INT 3
21616: EQUAL
21617: AND
21618: PUSH
21619: LD_INT 2
21621: PPUSH
21622: CALL_OW 302
21626: AND
21627: IFFALSE 21694
21629: GO 21631
21631: DISABLE
// begin enable ;
21632: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21633: LD_INT 17
21635: PPUSH
21636: LD_INT 22
21638: PPUSH
21639: LD_INT 1
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: LD_INT 42
21647: PUSH
21648: LD_INT 43
21650: PUSH
21651: LD_INT 44
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PPUSH
21662: LD_INT 3
21664: PPUSH
21665: CALL_OW 12
21669: ARRAY
21670: PPUSH
21671: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21675: LD_INT 17
21677: PPUSH
21678: LD_INT 22
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: LD_INT 1
21686: PPUSH
21687: LD_INT 51
21689: PPUSH
21690: CALL_OW 185
// end ;
21694: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21695: LD_INT 17
21697: PPUSH
21698: CALL_OW 302
21702: PUSH
21703: LD_INT 17
21705: PPUSH
21706: CALL_OW 255
21710: PUSH
21711: LD_INT 3
21713: EQUAL
21714: AND
21715: PUSH
21716: LD_INT 2
21718: PPUSH
21719: CALL_OW 302
21723: AND
21724: PUSH
21725: LD_INT 2
21727: PPUSH
21728: CALL_OW 255
21732: PUSH
21733: LD_INT 3
21735: EQUAL
21736: AND
21737: PUSH
21738: LD_INT 17
21740: PPUSH
21741: CALL_OW 313
21745: NOT
21746: AND
21747: IFFALSE 21841
21749: GO 21751
21751: DISABLE
21752: LD_INT 0
21754: PPUSH
// begin for i = 1 to 6 do
21755: LD_ADDR_VAR 0 1
21759: PUSH
21760: DOUBLE
21761: LD_INT 1
21763: DEC
21764: ST_TO_ADDR
21765: LD_INT 6
21767: PUSH
21768: FOR_TO
21769: IFFALSE 21839
// begin uc_side = 3 ;
21771: LD_ADDR_OWVAR 20
21775: PUSH
21776: LD_INT 3
21778: ST_TO_ADDR
// uc_nation = 3 ;
21779: LD_ADDR_OWVAR 21
21783: PUSH
21784: LD_INT 3
21786: ST_TO_ADDR
// hc_gallery :=  ;
21787: LD_ADDR_OWVAR 33
21791: PUSH
21792: LD_STRING 
21794: ST_TO_ADDR
// hc_name :=  ;
21795: LD_ADDR_OWVAR 26
21799: PUSH
21800: LD_STRING 
21802: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21803: LD_INT 0
21805: PPUSH
21806: LD_EXP 34
21810: PPUSH
21811: LD_EXP 35
21815: PPUSH
21816: CALL_OW 12
21820: PPUSH
21821: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21825: CALL_OW 44
21829: PPUSH
21830: LD_INT 17
21832: PPUSH
21833: CALL_OW 52
// end ;
21837: GO 21768
21839: POP
21840: POP
// end ;
21841: PPOPN 1
21843: END
// every 2 2$0 do var i , j ;
21844: GO 21846
21846: DISABLE
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21851: LD_INT 14700
21853: PUSH
21854: LD_INT 33600
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_INT 2
21866: PPUSH
21867: CALL_OW 12
21871: ARRAY
21872: PPUSH
21873: CALL_OW 67
// disableHealAI = 1 ;
21877: LD_ADDR_EXP 33
21881: PUSH
21882: LD_INT 1
21884: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21885: LD_ADDR_VAR 0 1
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 25
21902: PUSH
21903: LD_INT 4
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 69
21918: PUSH
21919: FOR_IN
21920: IFFALSE 21933
// ComExitBuilding ( i ) ;
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 122
21931: GO 21919
21933: POP
21934: POP
// wait ( 0 0$1 ) ;
21935: LD_INT 35
21937: PPUSH
21938: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21942: LD_INT 35
21944: PPUSH
21945: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21949: LD_ADDR_VAR 0 1
21953: PUSH
21954: LD_INT 22
21956: PUSH
21957: LD_INT 3
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 4
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PPUSH
21978: CALL_OW 69
21982: PUSH
21983: FOR_IN
21984: IFFALSE 22061
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 17
21993: PPUSH
21994: LD_INT 22
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 25
22006: PUSH
22007: LD_INT 12
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 70
22022: PUSH
22023: FOR_IN
22024: IFFALSE 22057
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22026: LD_VAR 0 1
22030: PPUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: CALL_OW 250
22040: PPUSH
22041: LD_VAR 0 2
22045: PPUSH
22046: CALL_OW 251
22050: PPUSH
22051: CALL_OW 191
// end ;
22055: GO 22023
22057: POP
22058: POP
// end ;
22059: GO 21983
22061: POP
22062: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22063: LD_INT 22
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 4
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL_OW 69
22091: PUSH
22092: LD_INT 0
22094: EQUAL
22095: PUSH
22096: LD_EXP 32
22100: PUSH
22101: LD_INT 6
22103: PUSH
22104: LD_INT 7
22106: PUSH
22107: LD_INT 8
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: LD_OWVAR 67
22119: ARRAY
22120: GREATEREQUAL
22121: OR
22122: PUSH
22123: LD_INT 17
22125: PPUSH
22126: LD_INT 22
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 25
22138: PUSH
22139: LD_INT 12
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 70
22154: PUSH
22155: LD_INT 0
22157: EQUAL
22158: OR
22159: IFFALSE 21942
// disableHealAI = 0 ;
22161: LD_ADDR_EXP 33
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22169: LD_ADDR_VAR 0 1
22173: PUSH
22174: LD_INT 22
22176: PUSH
22177: LD_INT 3
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 25
22186: PUSH
22187: LD_INT 12
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PPUSH
22198: CALL_OW 69
22202: PUSH
22203: FOR_IN
22204: IFFALSE 22220
// SetClass ( i , 16 ) ;
22206: LD_VAR 0 1
22210: PPUSH
22211: LD_INT 16
22213: PPUSH
22214: CALL_OW 336
22218: GO 22203
22220: POP
22221: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22222: LD_ADDR_VAR 0 1
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_INT 3
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 25
22239: PUSH
22240: LD_INT 4
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PPUSH
22251: CALL_OW 69
22255: PUSH
22256: FOR_IN
22257: IFFALSE 22276
// ComMoveXY ( i , 113 , 94 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 113
22266: PPUSH
22267: LD_INT 94
22269: PPUSH
22270: CALL_OW 111
22274: GO 22256
22276: POP
22277: POP
// end ;
22278: PPOPN 2
22280: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22281: LD_INT 21
22283: PPUSH
22284: CALL_OW 255
22288: PUSH
22289: LD_INT 3
22291: EQUAL
22292: PUSH
22293: LD_INT 21
22295: PPUSH
22296: CALL_OW 302
22300: AND
22301: PUSH
22302: LD_INT 22
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 34
22314: PUSH
22315: LD_INT 51
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: PUSH
22331: LD_INT 0
22333: EQUAL
22334: AND
22335: IFFALSE 22367
22337: GO 22339
22339: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22340: LD_INT 21
22342: PPUSH
22343: LD_INT 23
22345: PPUSH
22346: LD_INT 1
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: LD_INT 51
22354: PPUSH
22355: CALL_OW 185
// wait ( 5 5$0 ) ;
22359: LD_INT 10500
22361: PPUSH
22362: CALL_OW 67
// enable ;
22366: ENABLE
// end ; end_of_file
22367: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22368: LD_EXP 26
22372: PUSH
22373: LD_INT 0
22375: LESSEQUAL
22376: IFFALSE 22525
22378: GO 22380
22380: DISABLE
22381: LD_INT 0
22383: PPUSH
22384: PPUSH
22385: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22386: LD_ADDR_VAR 0 2
22390: PUSH
22391: LD_INT 22
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 21
22403: PUSH
22404: LD_INT 3
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 69
22448: ST_TO_ADDR
// for i in tmp do
22449: LD_ADDR_VAR 0 1
22453: PUSH
22454: LD_VAR 0 2
22458: PUSH
22459: FOR_IN
22460: IFFALSE 22493
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22462: LD_ADDR_VAR 0 3
22466: PUSH
22467: LD_VAR 0 3
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 274
22481: PPUSH
22482: LD_INT 1
22484: PPUSH
22485: CALL_OW 275
22489: PLUS
22490: ST_TO_ADDR
22491: GO 22459
22493: POP
22494: POP
// if yourCrates >= needCrates then
22495: LD_VAR 0 3
22499: PUSH
22500: LD_EXP 25
22504: GREATEREQUAL
22505: IFFALSE 22518
// begin FinishMission ( yourCrates ) ;
22507: LD_VAR 0 3
22511: PPUSH
22512: CALL 22528 0 1
// end else
22516: GO 22525
// begin YouLost ( matmin ) ;
22518: LD_STRING matmin
22520: PPUSH
22521: CALL_OW 104
// end ; end ;
22525: PPOPN 3
22527: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22528: LD_INT 0
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// if killCounter = 0 then
22534: LD_EXP 47
22538: PUSH
22539: LD_INT 0
22541: EQUAL
22542: IFFALSE 22551
// SetAchievement ( ACH_SURV ) ;
22544: LD_STRING ACH_SURV
22546: PPUSH
22547: CALL_OW 543
// m1 := false ;
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: LD_INT 0
22558: ST_TO_ADDR
// m2 := false ;
22559: LD_ADDR_VAR 0 4
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
// m3 := false ;
22567: LD_ADDR_VAR 0 5
22571: PUSH
22572: LD_INT 0
22574: ST_TO_ADDR
// if crates + 100 > crates then
22575: LD_VAR 0 1
22579: PUSH
22580: LD_INT 100
22582: PLUS
22583: PUSH
22584: LD_VAR 0 1
22588: GREATER
22589: IFFALSE 22621
// begin AddMedal ( cans , 1 ) ;
22591: LD_STRING cans
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22601: LD_INT 1
22603: PPUSH
22604: LD_STRING 06_crates_1
22606: PPUSH
22607: CALL_OW 39
// m1 := true ;
22611: LD_ADDR_VAR 0 3
22615: PUSH
22616: LD_INT 1
22618: ST_TO_ADDR
// end else
22619: GO 22642
// begin AddMedal ( cans , - 1 ) ;
22621: LD_STRING cans
22623: PPUSH
22624: LD_INT 1
22626: NEG
22627: PPUSH
22628: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22632: LD_INT 0
22634: PPUSH
22635: LD_STRING 06_crates_1
22637: PPUSH
22638: CALL_OW 39
// end ; if unitLost < 3 then
22642: LD_EXP 30
22646: PUSH
22647: LD_INT 3
22649: LESS
22650: IFFALSE 22672
// begin AddMedal ( people , 1 ) ;
22652: LD_STRING people
22654: PPUSH
22655: LD_INT 1
22657: PPUSH
22658: CALL_OW 101
// m2 := true ;
22662: LD_ADDR_VAR 0 4
22666: PUSH
22667: LD_INT 1
22669: ST_TO_ADDR
// end else
22670: GO 22683
// begin AddMedal ( people , - 1 ) ;
22672: LD_STRING people
22674: PPUSH
22675: LD_INT 1
22677: NEG
22678: PPUSH
22679: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22683: LD_EXP 28
22687: PPUSH
22688: LD_STRING 06_remoteVehs_1
22690: PPUSH
22691: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22695: LD_EXP 28
22699: PUSH
22700: LD_INT 1
22702: EQUAL
22703: IFFALSE 22725
// begin AddMedal ( remote , 1 ) ;
22705: LD_STRING remote
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 101
// m3 := true ;
22715: LD_ADDR_VAR 0 5
22719: PUSH
22720: LD_INT 1
22722: ST_TO_ADDR
// end else
22723: GO 22765
// begin if GetTech ( 18 , 1 ) = state_enabled then
22725: LD_INT 18
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 321
22735: PUSH
22736: LD_INT 1
22738: EQUAL
22739: IFFALSE 22754
// begin AddMedal ( remote , - 1 ) ;
22741: LD_STRING remote
22743: PPUSH
22744: LD_INT 1
22746: NEG
22747: PPUSH
22748: CALL_OW 101
// end else
22752: GO 22765
// begin AddMedal ( remote , - 2 ) ;
22754: LD_STRING remote
22756: PPUSH
22757: LD_INT 2
22759: NEG
22760: PPUSH
22761: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22765: LD_VAR 0 3
22769: PUSH
22770: LD_VAR 0 4
22774: AND
22775: PUSH
22776: LD_VAR 0 5
22780: AND
22781: IFFALSE 22797
// begin wait ( 3 ) ;
22783: LD_INT 3
22785: PPUSH
22786: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22790: LD_STRING ACH_ASPEED_6
22792: PPUSH
22793: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22797: LD_OWVAR 67
22801: PUSH
22802: LD_INT 3
22804: EQUAL
22805: PUSH
22806: LD_VAR 0 3
22810: AND
22811: PUSH
22812: LD_VAR 0 4
22816: AND
22817: PUSH
22818: LD_VAR 0 5
22822: AND
22823: IFFALSE 22835
// SetAchievementEX ( ACH_AMER , 6 ) ;
22825: LD_STRING ACH_AMER
22827: PPUSH
22828: LD_INT 6
22830: PPUSH
22831: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22835: LD_EXP 20
22839: PPUSH
22840: LD_STRING 06_KurtStatus_1
22842: PPUSH
22843: CALL_OW 39
// GiveMedals ( Main ) ;
22847: LD_STRING Main
22849: PPUSH
22850: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22854: LD_INT 22
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 21
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 50
22876: PUSH
22877: EMPTY
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 25
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 25
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 4
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PPUSH
22936: CALL_OW 69
22940: PPUSH
22941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22945: LD_EXP 1
22949: PPUSH
22950: LD_EXP 43
22954: PUSH
22955: LD_STRING JMM
22957: STR
22958: PPUSH
22959: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22963: LD_EXP 2
22967: PPUSH
22968: LD_EXP 43
22972: PUSH
22973: LD_STRING Lisa
22975: STR
22976: PPUSH
22977: CALL 6119 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22981: LD_EXP 3
22985: PPUSH
22986: LD_EXP 43
22990: PUSH
22991: LD_STRING Bobby
22993: STR
22994: PPUSH
22995: CALL 6119 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22999: LD_EXP 4
23003: PPUSH
23004: LD_EXP 43
23008: PUSH
23009: LD_STRING Cyrus
23011: STR
23012: PPUSH
23013: CALL 6119 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23017: LD_EXP 5
23021: PPUSH
23022: LD_EXP 43
23026: PUSH
23027: LD_STRING Frank
23029: STR
23030: PPUSH
23031: CALL 6119 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23035: LD_EXP 6
23039: PPUSH
23040: LD_EXP 43
23044: PUSH
23045: LD_STRING Brown
23047: STR
23048: PPUSH
23049: CALL 6119 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23053: LD_EXP 7
23057: PPUSH
23058: LD_EXP 43
23062: PUSH
23063: LD_STRING Donaldson
23065: STR
23066: PPUSH
23067: CALL 6119 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23071: LD_EXP 8
23075: PPUSH
23076: LD_EXP 43
23080: PUSH
23081: LD_STRING Gladstone
23083: STR
23084: PPUSH
23085: CALL 6119 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23089: LD_EXP 9
23093: PPUSH
23094: LD_EXP 43
23098: PUSH
23099: LD_STRING Denis
23101: STR
23102: PPUSH
23103: CALL 6119 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23107: LD_EXP 15
23111: PPUSH
23112: LD_EXP 43
23116: PUSH
23117: LD_STRING Joan
23119: STR
23120: PPUSH
23121: CALL 6119 0 2
// if IsLive ( Joan ) then
23125: LD_EXP 15
23129: PPUSH
23130: CALL_OW 300
23134: IFFALSE 23148
// SaveCharacters ( Joan , Joan ) ;
23136: LD_EXP 15
23140: PPUSH
23141: LD_STRING Joan
23143: PPUSH
23144: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23148: LD_EXP 16
23152: PPUSH
23153: LD_STRING 06_JoanStatus_1
23155: PPUSH
23156: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23160: LD_INT 50
23162: PUSH
23163: EMPTY
23164: LIST
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 21
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: LD_INT 25
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 25
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 25
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 4
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: PPUSH
23242: CALL_OW 69
23246: PUSH
23247: LD_EXP 1
23251: PUSH
23252: LD_EXP 2
23256: PUSH
23257: LD_EXP 3
23261: PUSH
23262: LD_EXP 4
23266: PUSH
23267: LD_EXP 5
23271: PUSH
23272: LD_EXP 6
23276: PUSH
23277: LD_EXP 7
23281: PUSH
23282: LD_EXP 8
23286: PUSH
23287: LD_EXP 9
23291: PUSH
23292: LD_EXP 15
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: DIFF
23309: PPUSH
23310: LD_STRING 06_other_survivors
23312: PPUSH
23313: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23317: LD_INT 50
23319: PUSH
23320: EMPTY
23321: LIST
23322: PUSH
23323: LD_INT 22
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 21
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: LD_INT 25
23348: PUSH
23349: LD_INT 12
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 25
23358: PUSH
23359: LD_INT 16
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PPUSH
23377: CALL_OW 69
23381: PPUSH
23382: LD_STRING 06_other_apemans
23384: PPUSH
23385: CALL_OW 38
// YouWin ;
23389: CALL_OW 103
// end ; end_of_file
23393: LD_VAR 0 2
23397: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23398: LD_EXP 39
23402: PUSH
23403: LD_INT 3
23405: EQUAL
23406: IFFALSE 23521
23408: GO 23410
23410: DISABLE
// begin enable ;
23411: ENABLE
// sendedConvoys = 0 ;
23412: LD_ADDR_EXP 39
23416: PUSH
23417: LD_INT 0
23419: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23420: LD_INT 6
23422: PPUSH
23423: LD_INT 3
23425: PPUSH
23426: LD_INT 5
23428: PPUSH
23429: LD_INT 10
23431: PPUSH
23432: CALL_OW 12
23436: PUSH
23437: LD_INT 5
23439: PPUSH
23440: LD_INT 11
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 8
23450: PPUSH
23451: LD_INT 12
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: PUSH
23464: LD_OWVAR 67
23468: ARRAY
23469: PPUSH
23470: LD_INT 0
23472: PPUSH
23473: LD_INT 0
23475: PPUSH
23476: LD_INT 0
23478: PPUSH
23479: LD_INT 0
23481: PPUSH
23482: LD_EXP 34
23486: PPUSH
23487: LD_EXP 35
23491: PPUSH
23492: CALL_OW 12
23496: PPUSH
23497: LD_INT 16
23499: PPUSH
23500: LD_INT 15
23502: PPUSH
23503: LD_INT 1
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: LD_INT 2
23511: PPUSH
23512: CALL_OW 12
23516: PPUSH
23517: CALL 10538 0 12
// end ; end_of_file
23521: END
// export function PrepareNature ; var i , un ; begin
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
23526: PPUSH
// for i = 1 to Difficulty + 2 do
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: DOUBLE
23533: LD_INT 1
23535: DEC
23536: ST_TO_ADDR
23537: LD_OWVAR 67
23541: PUSH
23542: LD_INT 2
23544: PLUS
23545: PUSH
23546: FOR_TO
23547: IFFALSE 23656
// begin hc_sex = sex_male ;
23549: LD_ADDR_OWVAR 27
23553: PUSH
23554: LD_INT 1
23556: ST_TO_ADDR
// uc_side = 0 ;
23557: LD_ADDR_OWVAR 20
23561: PUSH
23562: LD_INT 0
23564: ST_TO_ADDR
// uc_nation = nation_nature ;
23565: LD_ADDR_OWVAR 21
23569: PUSH
23570: LD_INT 0
23572: ST_TO_ADDR
// hc_class = class_tiger ;
23573: LD_ADDR_OWVAR 28
23577: PUSH
23578: LD_INT 14
23580: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23581: LD_ADDR_OWVAR 31
23585: PUSH
23586: LD_EXP 35
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23606: LD_ADDR_OWVAR 35
23610: PUSH
23611: LD_INT 5
23613: NEG
23614: PPUSH
23615: LD_INT 5
23617: PPUSH
23618: CALL_OW 12
23622: PUSH
23623: LD_OWVAR 67
23627: MUL
23628: ST_TO_ADDR
// un = CreateHuman ;
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: CALL_OW 44
23638: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 18
23646: PPUSH
23647: LD_INT 0
23649: PPUSH
23650: CALL_OW 49
// end ;
23654: GO 23546
23656: POP
23657: POP
// for i = 1 to rand ( 3 , 4 ) do
23658: LD_ADDR_VAR 0 2
23662: PUSH
23663: DOUBLE
23664: LD_INT 1
23666: DEC
23667: ST_TO_ADDR
23668: LD_INT 3
23670: PPUSH
23671: LD_INT 4
23673: PPUSH
23674: CALL_OW 12
23678: PUSH
23679: FOR_TO
23680: IFFALSE 23774
// begin hc_sex = sex_male ;
23682: LD_ADDR_OWVAR 27
23686: PUSH
23687: LD_INT 1
23689: ST_TO_ADDR
// uc_side = 0 ;
23690: LD_ADDR_OWVAR 20
23694: PUSH
23695: LD_INT 0
23697: ST_TO_ADDR
// uc_nation = nation_nature ;
23698: LD_ADDR_OWVAR 21
23702: PUSH
23703: LD_INT 0
23705: ST_TO_ADDR
// hc_class = 18 ;
23706: LD_ADDR_OWVAR 28
23710: PUSH
23711: LD_INT 18
23713: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23714: LD_ADDR_OWVAR 31
23718: PUSH
23719: LD_EXP 35
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: ST_TO_ADDR
// hc_agressivity = 0 ;
23739: LD_ADDR_OWVAR 35
23743: PUSH
23744: LD_INT 0
23746: ST_TO_ADDR
// un = CreateHuman ;
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: CALL_OW 44
23756: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23757: LD_VAR 0 3
23761: PPUSH
23762: LD_INT 18
23764: PPUSH
23765: LD_INT 0
23767: PPUSH
23768: CALL_OW 49
// end ;
23772: GO 23679
23774: POP
23775: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23776: LD_ADDR_VAR 0 2
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_INT 1
23788: PPUSH
23789: LD_INT 3
23791: PPUSH
23792: CALL_OW 12
23796: PUSH
23797: LD_OWVAR 67
23801: PLUS
23802: PUSH
23803: FOR_TO
23804: IFFALSE 23953
// begin hc_sex = sex_male ;
23806: LD_ADDR_OWVAR 27
23810: PUSH
23811: LD_INT 1
23813: ST_TO_ADDR
// uc_side = 0 ;
23814: LD_ADDR_OWVAR 20
23818: PUSH
23819: LD_INT 0
23821: ST_TO_ADDR
// uc_nation = nation_nature ;
23822: LD_ADDR_OWVAR 21
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
// hc_class = class_apeman ;
23830: LD_ADDR_OWVAR 28
23834: PUSH
23835: LD_INT 12
23837: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23838: LD_ADDR_OWVAR 31
23842: PUSH
23843: LD_INT 2
23845: PPUSH
23846: LD_INT 5
23848: PPUSH
23849: CALL_OW 12
23853: PUSH
23854: LD_INT 0
23856: PPUSH
23857: LD_INT 2
23859: PPUSH
23860: CALL_OW 12
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23877: LD_ADDR_OWVAR 35
23881: PUSH
23882: LD_INT 20
23884: PPUSH
23885: LD_INT 30
23887: PPUSH
23888: CALL_OW 12
23892: PUSH
23893: LD_INT 30
23895: PPUSH
23896: LD_INT 40
23898: PPUSH
23899: CALL_OW 12
23903: PUSH
23904: LD_INT 40
23906: PPUSH
23907: LD_INT 50
23909: PPUSH
23910: CALL_OW 12
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: PUSH
23920: LD_OWVAR 67
23924: ARRAY
23925: ST_TO_ADDR
// un = CreateHuman ;
23926: LD_ADDR_VAR 0 3
23930: PUSH
23931: CALL_OW 44
23935: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23936: LD_VAR 0 3
23940: PPUSH
23941: LD_INT 19
23943: PPUSH
23944: LD_INT 0
23946: PPUSH
23947: CALL_OW 49
// end ;
23951: GO 23803
23953: POP
23954: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: DOUBLE
23961: LD_INT 1
23963: DEC
23964: ST_TO_ADDR
23965: LD_INT 5
23967: PPUSH
23968: LD_INT 6
23970: PPUSH
23971: CALL_OW 12
23975: PUSH
23976: LD_OWVAR 67
23980: PLUS
23981: PUSH
23982: FOR_TO
23983: IFFALSE 24091
// begin hc_sex = sex_male ;
23985: LD_ADDR_OWVAR 27
23989: PUSH
23990: LD_INT 1
23992: ST_TO_ADDR
// uc_side = 0 ;
23993: LD_ADDR_OWVAR 20
23997: PUSH
23998: LD_INT 0
24000: ST_TO_ADDR
// uc_nation = nation_nature ;
24001: LD_ADDR_OWVAR 21
24005: PUSH
24006: LD_INT 0
24008: ST_TO_ADDR
// hc_class = class_apeman ;
24009: LD_ADDR_OWVAR 28
24013: PUSH
24014: LD_INT 12
24016: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24017: LD_ADDR_OWVAR 31
24021: PUSH
24022: LD_INT 2
24024: PPUSH
24025: LD_INT 5
24027: PPUSH
24028: CALL_OW 12
24032: PUSH
24033: LD_INT 0
24035: PPUSH
24036: LD_INT 2
24038: PPUSH
24039: CALL_OW 12
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: ST_TO_ADDR
// hc_agressivity = 0 ;
24056: LD_ADDR_OWVAR 35
24060: PUSH
24061: LD_INT 0
24063: ST_TO_ADDR
// un = CreateHuman ;
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: CALL_OW 44
24073: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24074: LD_VAR 0 3
24078: PPUSH
24079: LD_INT 20
24081: PPUSH
24082: LD_INT 0
24084: PPUSH
24085: CALL_OW 49
// end ;
24089: GO 23982
24091: POP
24092: POP
// end ; end_of_file end_of_file
24093: LD_VAR 0 1
24097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24098: GO 24100
24100: DISABLE
// begin ru_radar := 98 ;
24101: LD_ADDR_EXP 50
24105: PUSH
24106: LD_INT 98
24108: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24109: LD_ADDR_EXP 51
24113: PUSH
24114: LD_INT 89
24116: ST_TO_ADDR
// us_hack := 99 ;
24117: LD_ADDR_EXP 52
24121: PUSH
24122: LD_INT 99
24124: ST_TO_ADDR
// us_artillery := 97 ;
24125: LD_ADDR_EXP 53
24129: PUSH
24130: LD_INT 97
24132: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24133: LD_ADDR_EXP 54
24137: PUSH
24138: LD_INT 91
24140: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24141: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
24146: PPUSH
24147: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 264
24157: PUSH
24158: LD_EXP 54
24162: EQUAL
24163: IFFALSE 24235
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24165: LD_INT 68
24167: PPUSH
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 255
24177: PPUSH
24178: CALL_OW 321
24182: PUSH
24183: LD_INT 2
24185: EQUAL
24186: IFFALSE 24198
// eff := 70 else
24188: LD_ADDR_VAR 0 6
24192: PUSH
24193: LD_INT 70
24195: ST_TO_ADDR
24196: GO 24206
// eff := 30 ;
24198: LD_ADDR_VAR 0 6
24202: PUSH
24203: LD_INT 30
24205: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 250
24215: PPUSH
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 251
24225: PPUSH
24226: LD_VAR 0 6
24230: PPUSH
24231: CALL_OW 495
// end ; end ;
24235: LD_VAR 0 4
24239: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
// if cmd = 124 then
24248: LD_VAR 0 1
24252: PUSH
24253: LD_INT 124
24255: EQUAL
24256: IFFALSE 24462
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24258: LD_ADDR_VAR 0 5
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 34
24268: PUSH
24269: LD_INT 53
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 34
24278: PUSH
24279: LD_INT 14
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: PPUSH
24291: CALL_OW 69
24295: ST_TO_ADDR
// if not tmp then
24296: LD_VAR 0 5
24300: NOT
24301: IFFALSE 24305
// exit ;
24303: GO 24462
// for i in tmp do
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_VAR 0 5
24314: PUSH
24315: FOR_IN
24316: IFFALSE 24460
// begin taskList := GetTaskList ( i ) ;
24318: LD_ADDR_VAR 0 6
24322: PUSH
24323: LD_VAR 0 3
24327: PPUSH
24328: CALL_OW 437
24332: ST_TO_ADDR
// if not taskList then
24333: LD_VAR 0 6
24337: NOT
24338: IFFALSE 24342
// continue ;
24340: GO 24315
// for j = 1 to taskList do
24342: LD_ADDR_VAR 0 4
24346: PUSH
24347: DOUBLE
24348: LD_INT 1
24350: DEC
24351: ST_TO_ADDR
24352: LD_VAR 0 6
24356: PUSH
24357: FOR_TO
24358: IFFALSE 24456
// if taskList [ j ] [ 1 ] = | then
24360: LD_VAR 0 6
24364: PUSH
24365: LD_VAR 0 4
24369: ARRAY
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: PUSH
24375: LD_STRING |
24377: EQUAL
24378: IFFALSE 24454
// begin _taskList := Delete ( taskList , 1 ) ;
24380: LD_ADDR_VAR 0 7
24384: PUSH
24385: LD_VAR 0 6
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: CALL_OW 3
24397: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24398: LD_VAR 0 3
24402: PPUSH
24403: LD_VAR 0 7
24407: PPUSH
24408: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24412: LD_VAR 0 3
24416: PPUSH
24417: LD_VAR 0 6
24421: PUSH
24422: LD_VAR 0 4
24426: ARRAY
24427: PUSH
24428: LD_INT 2
24430: ARRAY
24431: PPUSH
24432: LD_VAR 0 6
24436: PUSH
24437: LD_VAR 0 4
24441: ARRAY
24442: PUSH
24443: LD_INT 3
24445: ARRAY
24446: PPUSH
24447: LD_INT 8
24449: PPUSH
24450: CALL 24467 0 4
// end ;
24454: GO 24357
24456: POP
24457: POP
// end ;
24458: GO 24315
24460: POP
24461: POP
// end ; end ;
24462: LD_VAR 0 2
24466: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24478: LD_VAR 0 1
24482: NOT
24483: PUSH
24484: LD_VAR 0 2
24488: PPUSH
24489: LD_VAR 0 3
24493: PPUSH
24494: CALL_OW 488
24498: NOT
24499: OR
24500: PUSH
24501: LD_VAR 0 4
24505: NOT
24506: OR
24507: IFFALSE 24511
// exit ;
24509: GO 24851
// list := [ ] ;
24511: LD_ADDR_VAR 0 13
24515: PUSH
24516: EMPTY
24517: ST_TO_ADDR
// if x - r < 0 then
24518: LD_VAR 0 2
24522: PUSH
24523: LD_VAR 0 4
24527: MINUS
24528: PUSH
24529: LD_INT 0
24531: LESS
24532: IFFALSE 24544
// min_x := 0 else
24534: LD_ADDR_VAR 0 7
24538: PUSH
24539: LD_INT 0
24541: ST_TO_ADDR
24542: GO 24560
// min_x := x - r ;
24544: LD_ADDR_VAR 0 7
24548: PUSH
24549: LD_VAR 0 2
24553: PUSH
24554: LD_VAR 0 4
24558: MINUS
24559: ST_TO_ADDR
// if y - r < 0 then
24560: LD_VAR 0 3
24564: PUSH
24565: LD_VAR 0 4
24569: MINUS
24570: PUSH
24571: LD_INT 0
24573: LESS
24574: IFFALSE 24586
// min_y := 0 else
24576: LD_ADDR_VAR 0 8
24580: PUSH
24581: LD_INT 0
24583: ST_TO_ADDR
24584: GO 24602
// min_y := y - r ;
24586: LD_ADDR_VAR 0 8
24590: PUSH
24591: LD_VAR 0 3
24595: PUSH
24596: LD_VAR 0 4
24600: MINUS
24601: ST_TO_ADDR
// max_x := x + r ;
24602: LD_ADDR_VAR 0 9
24606: PUSH
24607: LD_VAR 0 2
24611: PUSH
24612: LD_VAR 0 4
24616: PLUS
24617: ST_TO_ADDR
// max_y := y + r ;
24618: LD_ADDR_VAR 0 10
24622: PUSH
24623: LD_VAR 0 3
24627: PUSH
24628: LD_VAR 0 4
24632: PLUS
24633: ST_TO_ADDR
// for _x = min_x to max_x do
24634: LD_ADDR_VAR 0 11
24638: PUSH
24639: DOUBLE
24640: LD_VAR 0 7
24644: DEC
24645: ST_TO_ADDR
24646: LD_VAR 0 9
24650: PUSH
24651: FOR_TO
24652: IFFALSE 24769
// for _y = min_y to max_y do
24654: LD_ADDR_VAR 0 12
24658: PUSH
24659: DOUBLE
24660: LD_VAR 0 8
24664: DEC
24665: ST_TO_ADDR
24666: LD_VAR 0 10
24670: PUSH
24671: FOR_TO
24672: IFFALSE 24765
// begin if not ValidHex ( _x , _y ) then
24674: LD_VAR 0 11
24678: PPUSH
24679: LD_VAR 0 12
24683: PPUSH
24684: CALL_OW 488
24688: NOT
24689: IFFALSE 24693
// continue ;
24691: GO 24671
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24693: LD_VAR 0 11
24697: PPUSH
24698: LD_VAR 0 12
24702: PPUSH
24703: CALL_OW 351
24707: PUSH
24708: LD_VAR 0 11
24712: PPUSH
24713: LD_VAR 0 12
24717: PPUSH
24718: CALL_OW 554
24722: AND
24723: IFFALSE 24763
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24725: LD_ADDR_VAR 0 13
24729: PUSH
24730: LD_VAR 0 13
24734: PPUSH
24735: LD_VAR 0 13
24739: PUSH
24740: LD_INT 1
24742: PLUS
24743: PPUSH
24744: LD_VAR 0 11
24748: PUSH
24749: LD_VAR 0 12
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PPUSH
24758: CALL_OW 2
24762: ST_TO_ADDR
// end ;
24763: GO 24671
24765: POP
24766: POP
24767: GO 24651
24769: POP
24770: POP
// if not list then
24771: LD_VAR 0 13
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 24851
// for i in list do
24780: LD_ADDR_VAR 0 6
24784: PUSH
24785: LD_VAR 0 13
24789: PUSH
24790: FOR_IN
24791: IFFALSE 24849
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24793: LD_VAR 0 1
24797: PPUSH
24798: LD_STRING M
24800: PUSH
24801: LD_VAR 0 6
24805: PUSH
24806: LD_INT 1
24808: ARRAY
24809: PUSH
24810: LD_VAR 0 6
24814: PUSH
24815: LD_INT 2
24817: ARRAY
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: PPUSH
24843: CALL_OW 447
24847: GO 24790
24849: POP
24850: POP
// end ;
24851: LD_VAR 0 5
24855: RET
