// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6406 0 0
// PrepareNature ;
 290: CALL 23607 0 0
// PrepareRussian ;
 294: CALL 5566 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 5968 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 5968 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 5968 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 5968 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 5968 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 5968 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 5968 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 5968 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 5968 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 5968 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 5968 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// repeat wait ( 0 0$7 ) ;
4056: LD_INT 245
4058: PPUSH
4059: CALL_OW 67
// until blockSpawn = 0 ;
4063: LD_EXP 29
4067: PUSH
4068: LD_INT 0
4070: EQUAL
4071: IFFALSE 4056
// uc_side = 1 ;
4073: LD_ADDR_OWVAR 20
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// uc_nation = 1 ;
4081: LD_ADDR_OWVAR 21
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// InitHc ;
4089: CALL_OW 19
// if number = 1 then
4093: LD_VAR 0 1
4097: PUSH
4098: LD_INT 1
4100: EQUAL
4101: IFFALSE 4277
// begin hc_class := 3 ;
4103: LD_ADDR_OWVAR 28
4107: PUSH
4108: LD_INT 3
4110: ST_TO_ADDR
// hc_sex := sex_male ;
4111: LD_ADDR_OWVAR 27
4115: PUSH
4116: LD_INT 1
4118: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4119: LD_ADDR_OWVAR 33
4123: PUSH
4124: LD_STRING SecondCharsGal
4126: ST_TO_ADDR
// hc_face_number := 55 ;
4127: LD_ADDR_OWVAR 34
4131: PUSH
4132: LD_INT 55
4134: ST_TO_ADDR
// hc_name := George McCarthy ;
4135: LD_ADDR_OWVAR 26
4139: PUSH
4140: LD_STRING George McCarthy
4142: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4143: LD_ADDR_OWVAR 29
4147: PUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 10
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4158: LD_ADDR_OWVAR 30
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4181: LD_ADDR_OWVAR 31
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// un = CreateHuman ;
4204: LD_ADDR_VAR 0 3
4208: PUSH
4209: CALL_OW 44
4213: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 23
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL_OW 87
// wait ( 0 0$1 ) ;
4238: LD_INT 35
4240: PPUSH
4241: CALL_OW 67
// DialogueOn ;
4245: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_STRING D11d-Sol4-1
4256: PPUSH
4257: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4261: LD_EXP 1
4265: PPUSH
4266: LD_STRING D11d-JMM-1
4268: PPUSH
4269: CALL_OW 88
// DialogueOff ;
4273: CALL_OW 7
// end ; if number = 2 then
4277: LD_VAR 0 1
4281: PUSH
4282: LD_INT 2
4284: EQUAL
4285: IFFALSE 4461
// begin hc_class := 1 ;
4287: LD_ADDR_OWVAR 28
4291: PUSH
4292: LD_INT 1
4294: ST_TO_ADDR
// hc_sex := sex_male ;
4295: LD_ADDR_OWVAR 27
4299: PUSH
4300: LD_INT 1
4302: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4303: LD_ADDR_OWVAR 33
4307: PUSH
4308: LD_STRING AmGalRemake
4310: ST_TO_ADDR
// hc_face_number := 7 ;
4311: LD_ADDR_OWVAR 34
4315: PUSH
4316: LD_INT 7
4318: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4319: LD_ADDR_OWVAR 26
4323: PUSH
4324: LD_STRING Bobby Jordan
4326: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4327: LD_ADDR_OWVAR 29
4331: PUSH
4332: LD_INT 9
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4342: LD_ADDR_OWVAR 30
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4365: LD_ADDR_OWVAR 31
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// un = CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 24
4405: PPUSH
4406: LD_INT 1
4408: PPUSH
4409: CALL_OW 49
// wait ( 0 0$1 ) ;
4413: LD_INT 35
4415: PPUSH
4416: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: CALL_OW 87
// DialogueOn ;
4429: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_STRING D11b-Sol3-1
4440: PPUSH
4441: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4445: LD_EXP 1
4449: PPUSH
4450: LD_STRING D11b-JMM-1
4452: PPUSH
4453: CALL_OW 88
// DialogueOff ;
4457: CALL_OW 7
// end ; if number = 3 then
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 3
4468: EQUAL
4469: IFFALSE 4633
// begin hc_class := 1 ;
4471: LD_ADDR_OWVAR 28
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// hc_sex := sex_male ;
4479: LD_ADDR_OWVAR 27
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// hc_gallery := DJ ;
4487: LD_ADDR_OWVAR 33
4491: PUSH
4492: LD_STRING DJ
4494: ST_TO_ADDR
// hc_face_number := 1 ;
4495: LD_ADDR_OWVAR 34
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// hc_name := Darius Dajay ;
4503: LD_ADDR_OWVAR 26
4507: PUSH
4508: LD_STRING Darius Dajay
4510: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4511: LD_ADDR_OWVAR 29
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 11
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4526: LD_ADDR_OWVAR 30
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4549: LD_ADDR_OWVAR 31
4553: PUSH
4554: LD_INT 4
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 25
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: CALL_OW 87
// wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// DialogueOn ;
4613: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: LD_STRING D11f-Sol5-1
4624: PPUSH
4625: CALL_OW 88
// DialogueOff ;
4629: CALL_OW 7
// end ; if number = 4 then
4633: LD_VAR 0 1
4637: PUSH
4638: LD_INT 4
4640: EQUAL
4641: IFFALSE 4805
// begin hc_class := 3 ;
4643: LD_ADDR_OWVAR 28
4647: PUSH
4648: LD_INT 3
4650: ST_TO_ADDR
// hc_sex := sex_female ;
4651: LD_ADDR_OWVAR 27
4655: PUSH
4656: LD_INT 2
4658: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING SecondCharsGal
4666: ST_TO_ADDR
// hc_face_number := 46 ;
4667: LD_ADDR_OWVAR 34
4671: PUSH
4672: LD_INT 46
4674: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4675: LD_ADDR_OWVAR 26
4679: PUSH
4680: LD_STRING Sylvia Creak
4682: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4683: LD_ADDR_OWVAR 29
4687: PUSH
4688: LD_INT 10
4690: PUSH
4691: LD_INT 9
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4698: LD_ADDR_OWVAR 30
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 1
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4721: LD_ADDR_OWVAR 31
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: ST_TO_ADDR
// un = CreateHuman ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: CALL_OW 44
4753: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4754: LD_VAR 0 3
4758: PPUSH
4759: LD_INT 26
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4769: LD_VAR 0 3
4773: PPUSH
4774: CALL_OW 87
// wait ( 0 0$1 ) ;
4778: LD_INT 35
4780: PPUSH
4781: CALL_OW 67
// DialogueOn ;
4785: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_STRING D11e-FSol4-1
4796: PPUSH
4797: CALL_OW 88
// DialogueOff ;
4801: CALL_OW 7
// end ; if number = 5 then
4805: LD_VAR 0 1
4809: PUSH
4810: LD_INT 5
4812: EQUAL
4813: IFFALSE 4989
// begin hc_class := 1 ;
4815: LD_ADDR_OWVAR 28
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// hc_sex := sex_female ;
4823: LD_ADDR_OWVAR 27
4827: PUSH
4828: LD_INT 2
4830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4831: LD_ADDR_OWVAR 33
4835: PUSH
4836: LD_STRING SecondCharsGal
4838: ST_TO_ADDR
// hc_face_number := 37 ;
4839: LD_ADDR_OWVAR 34
4843: PUSH
4844: LD_INT 37
4846: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4847: LD_ADDR_OWVAR 26
4851: PUSH
4852: LD_STRING Margherite Simpson
4854: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4855: LD_ADDR_OWVAR 29
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 10
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4870: LD_ADDR_OWVAR 30
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4893: LD_ADDR_OWVAR 31
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// un = CreateHuman ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4926: LD_VAR 0 3
4930: PPUSH
4931: LD_INT 27
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: CALL_OW 87
// wait ( 0 0$1 ) ;
4950: LD_INT 35
4952: PPUSH
4953: CALL_OW 67
// DialogueOn ;
4957: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_STRING D11c-FSol3-1
4968: PPUSH
4969: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4973: LD_EXP 1
4977: PPUSH
4978: LD_STRING D11c-JMM-1
4980: PPUSH
4981: CALL_OW 88
// DialogueOff ;
4985: CALL_OW 7
// end ; if number = 6 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 6
4996: EQUAL
4997: IFFALSE 5171
// begin hc_class := 1 ;
4999: LD_ADDR_OWVAR 28
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// hc_sex := sex_male ;
5007: LD_ADDR_OWVAR 27
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5015: LD_ADDR_OWVAR 33
5019: PUSH
5020: LD_STRING AmGalRemake
5022: ST_TO_ADDR
// hc_face_number := 1 ;
5023: LD_ADDR_OWVAR 34
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// hc_name := Charles Brown ;
5031: LD_ADDR_OWVAR 26
5035: PUSH
5036: LD_STRING Charles Brown
5038: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5039: LD_ADDR_OWVAR 29
5043: PUSH
5044: LD_INT 12
5046: PUSH
5047: LD_INT 11
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5054: LD_ADDR_OWVAR 30
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: LD_INT 0
5067: PUSH
5068: LD_INT 0
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5077: LD_ADDR_OWVAR 31
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 28
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5125: LD_VAR 0 3
5129: PPUSH
5130: CALL_OW 87
// wait ( 0 0$1 ) ;
5134: LD_INT 35
5136: PPUSH
5137: CALL_OW 67
// DialogueOn ;
5141: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_STRING D4-Sol1-5
5152: PPUSH
5153: CALL_OW 88
// DialogueOff ;
5157: CALL_OW 7
// tempCharles = un ;
5161: LD_ADDR_EXP 13
5165: PUSH
5166: LD_VAR 0 3
5170: ST_TO_ADDR
// end ; if number = 7 then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 7
5178: EQUAL
5179: IFFALSE 5429
// begin hc_class := 1 ;
5181: LD_ADDR_OWVAR 28
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// hc_sex := sex_female ;
5189: LD_ADDR_OWVAR 27
5193: PUSH
5194: LD_INT 2
5196: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5197: LD_ADDR_OWVAR 33
5201: PUSH
5202: LD_STRING AmGalRemake
5204: ST_TO_ADDR
// hc_face_number := 2 ;
5205: LD_ADDR_OWVAR 34
5209: PUSH
5210: LD_INT 2
5212: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5213: LD_ADDR_OWVAR 26
5217: PUSH
5218: LD_STRING Rebecca Macdonald
5220: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5221: LD_ADDR_OWVAR 29
5225: PUSH
5226: LD_INT 10
5228: PUSH
5229: LD_INT 10
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5236: LD_ADDR_OWVAR 30
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: LD_INT 0
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5259: LD_ADDR_OWVAR 31
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: LD_INT 0
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// un = CreateHuman ;
5282: LD_ADDR_VAR 0 3
5286: PUSH
5287: CALL_OW 44
5291: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5292: LD_VAR 0 3
5296: PPUSH
5297: LD_INT 29
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5307: LD_VAR 0 3
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5323: LD_INT 30
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 70
5340: IFFALSE 5429
// begin DialogueOn ;
5342: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 250
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 251
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 15
5371: NEG
5372: PPUSH
5373: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 250
5386: PPUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 251
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5404: LD_VAR 0 3
5408: PPUSH
5409: LD_STRING D11a-FSol2-1
5411: PPUSH
5412: CALL_OW 88
// ComCrawl ( un ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: CALL_OW 137
// DialogueOff ;
5425: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5429: LD_ADDR_EXP 45
5433: PUSH
5434: LD_EXP 45
5438: PUSH
5439: LD_VAR 0 3
5443: UNION
5444: ST_TO_ADDR
// arrivals := arrivals union un ;
5445: LD_ADDR_EXP 46
5449: PUSH
5450: LD_EXP 46
5454: PUSH
5455: LD_VAR 0 3
5459: UNION
5460: ST_TO_ADDR
// end ;
5461: LD_VAR 0 2
5465: RET
// every 0 0$1 do var i ;
5466: GO 5468
5468: DISABLE
5469: LD_INT 0
5471: PPUSH
// begin enable ;
5472: ENABLE
// if not ignoreTarget then
5473: LD_EXP 45
5477: NOT
5478: IFFALSE 5482
// exit ;
5480: GO 5563
// for i in ignoreTarget do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_EXP 45
5491: PUSH
5492: FOR_IN
5493: IFFALSE 5561
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5495: LD_INT 22
5497: PUSH
5498: LD_INT 1
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 91
5507: PUSH
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 10
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: PUSH
5530: LD_EXP 45
5534: DIFF
5535: PUSH
5536: LD_INT 1
5538: GREATER
5539: IFFALSE 5559
// begin ignoreTarget := ignoreTarget diff i ;
5541: LD_ADDR_EXP 45
5545: PUSH
5546: LD_EXP 45
5550: PUSH
5551: LD_VAR 0 1
5555: DIFF
5556: ST_TO_ADDR
// break ;
5557: GO 5561
// end ;
5559: GO 5492
5561: POP
5562: POP
// end ; end_of_file
5563: PPOPN 1
5565: END
// export function PrepareRussian ; var i ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
// if Difficulty < 3 then
5570: LD_OWVAR 67
5574: PUSH
5575: LD_INT 3
5577: LESS
5578: IFFALSE 5595
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5580: LD_INT 130
5582: PPUSH
5583: LD_INT 81
5585: PPUSH
5586: CALL_OW 428
5590: PPUSH
5591: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 2
5603: PPUSH
5604: LD_EXP 34
5608: PPUSH
5609: LD_EXP 35
5613: PPUSH
5614: CALL_OW 12
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_INT 4
5624: PPUSH
5625: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5629: LD_INT 3
5631: PPUSH
5632: LD_INT 3
5634: PPUSH
5635: LD_INT 8
5637: PPUSH
5638: LD_EXP 34
5642: PPUSH
5643: LD_EXP 35
5647: PPUSH
5648: CALL_OW 12
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: LD_INT 4
5658: PPUSH
5659: CALL 6160 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5663: LD_INT 3
5665: PPUSH
5666: LD_INT 3
5668: PPUSH
5669: LD_INT 67
5671: PPUSH
5672: LD_EXP 34
5676: PPUSH
5677: LD_EXP 35
5681: PPUSH
5682: CALL_OW 12
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 21
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 6
5726: PPUSH
5727: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 17
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 3
5757: PPUSH
5758: LD_INT 6
5760: PPUSH
5761: CALL 6160 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 32
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 4
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6160 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5799: LD_ADDR_VAR 0 2
5803: PUSH
5804: LD_INT 22
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 21
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 30
5826: PUSH
5827: LD_INT 32
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 69
5843: PUSH
5844: FOR_IN
5845: IFFALSE 5885
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 34
5862: PPUSH
5863: LD_EXP 35
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL 6160 0 6
5883: GO 5844
5885: POP
5886: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5887: LD_ADDR_VAR 0 2
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 3
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 30
5914: PUSH
5915: LD_INT 31
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5961
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5935: LD_EXP 34
5939: PPUSH
5940: LD_EXP 35
5944: PPUSH
5945: CALL_OW 12
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL 6270 0 2
5959: GO 5932
5961: POP
5962: POP
// end ; end_of_file
5963: LD_VAR 0 1
5967: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5968: LD_INT 0
5970: PPUSH
5971: PPUSH
// if exist_mode then
5972: LD_VAR 0 2
5976: IFFALSE 6001
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_EXP 44
5987: PUSH
5988: LD_VAR 0 1
5992: STR
5993: PPUSH
5994: CALL_OW 34
5998: ST_TO_ADDR
// end else
5999: GO 6016
// begin unit := NewCharacter ( ident ) ;
6001: LD_ADDR_VAR 0 4
6005: PUSH
6006: LD_VAR 0 1
6010: PPUSH
6011: CALL_OW 25
6015: ST_TO_ADDR
// end ; result := unit ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 4
6025: ST_TO_ADDR
// end ;
6026: LD_VAR 0 3
6030: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6031: LD_INT 0
6033: PPUSH
6034: PPUSH
6035: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6036: LD_ADDR_VAR 0 6
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 1
6048: PPUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6060: LD_VAR 0 6
6064: PPUSH
6065: CALL_OW 258
6069: PUSH
6070: LD_INT 1
6072: EQUAL
6073: IFFALSE 6091
// Say ( speaker , dialogMID ) else
6075: LD_VAR 0 6
6079: PPUSH
6080: LD_VAR 0 2
6084: PPUSH
6085: CALL_OW 88
6089: GO 6105
// Say ( speaker , dialogFID ) ;
6091: LD_VAR 0 6
6095: PPUSH
6096: LD_VAR 0 3
6100: PPUSH
6101: CALL_OW 88
// result := speaker ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 6
6114: ST_TO_ADDR
// end ;
6115: LD_VAR 0 4
6119: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
// for i in charactersList do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6153
// SaveCharacters ( i , ident ) ;
6137: LD_VAR 0 4
6141: PPUSH
6142: LD_VAR 0 2
6146: PPUSH
6147: CALL_OW 38
6151: GO 6134
6153: POP
6154: POP
// end ;
6155: LD_VAR 0 3
6159: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6160: LD_INT 0
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// for i = 1 to count do
6166: LD_ADDR_VAR 0 8
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_VAR 0 6
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6263
// begin uc_side = side ;
6184: LD_ADDR_OWVAR 20
6188: PUSH
6189: LD_VAR 0 1
6193: ST_TO_ADDR
// uc_nation = nation ;
6194: LD_ADDR_OWVAR 21
6198: PUSH
6199: LD_VAR 0 2
6203: ST_TO_ADDR
// hc_gallery =  ;
6204: LD_ADDR_OWVAR 33
6208: PUSH
6209: LD_STRING 
6211: ST_TO_ADDR
// hc_name =  ;
6212: LD_ADDR_OWVAR 26
6216: PUSH
6217: LD_STRING 
6219: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6220: LD_INT 0
6222: PPUSH
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_VAR 0 4
6232: PPUSH
6233: CALL_OW 380
// un = CreateHuman ;
6237: LD_ADDR_VAR 0 10
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6247: LD_VAR 0 10
6251: PPUSH
6252: LD_VAR 0 3
6256: PPUSH
6257: CALL_OW 52
// end ;
6261: GO 6181
6263: POP
6264: POP
// end ;
6265: LD_VAR 0 7
6269: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
6274: PPUSH
// uc_side := GetSide ( b ) ;
6275: LD_ADDR_OWVAR 20
6279: PUSH
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL_OW 255
6289: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6290: LD_ADDR_OWVAR 21
6294: PUSH
6295: LD_VAR 0 2
6299: PPUSH
6300: CALL_OW 248
6304: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6305: LD_INT 0
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6320: LD_ADDR_VAR 0 5
6324: PUSH
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 254
6334: PUSH
6335: LD_INT 3
6337: MINUS
6338: ST_TO_ADDR
// if dir < 0 then
6339: LD_VAR 0 5
6343: PUSH
6344: LD_INT 0
6346: LESS
6347: IFFALSE 6363
// dir := 6 + dir ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 6
6356: PUSH
6357: LD_VAR 0 5
6361: PLUS
6362: ST_TO_ADDR
// un := CreateHuman ;
6363: LD_ADDR_VAR 0 4
6367: PUSH
6368: CALL_OW 44
6372: ST_TO_ADDR
// SetDir ( un , dir ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_VAR 0 5
6382: PPUSH
6383: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6387: LD_VAR 0 4
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 52
// end ;
6401: LD_VAR 0 3
6405: RET
// export function PrepareDifficulty ; begin
6406: LD_INT 0
6408: PPUSH
// if Difficulty = 1 then
6409: LD_OWVAR 67
6413: PUSH
6414: LD_INT 1
6416: EQUAL
6417: IFFALSE 6435
// begin RuSolMinLevel = 2 ;
6419: LD_ADDR_EXP 34
6423: PUSH
6424: LD_INT 2
6426: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6427: LD_ADDR_EXP 35
6431: PUSH
6432: LD_INT 3
6434: ST_TO_ADDR
// end ; if Difficulty = 2 then
6435: LD_OWVAR 67
6439: PUSH
6440: LD_INT 2
6442: EQUAL
6443: IFFALSE 6461
// begin RuSolMinLevel = 3 ;
6445: LD_ADDR_EXP 34
6449: PUSH
6450: LD_INT 3
6452: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6453: LD_ADDR_EXP 35
6457: PUSH
6458: LD_INT 5
6460: ST_TO_ADDR
// end ; if Difficulty = 3 then
6461: LD_OWVAR 67
6465: PUSH
6466: LD_INT 3
6468: EQUAL
6469: IFFALSE 6487
// begin RuSolMinLevel = 4 ;
6471: LD_ADDR_EXP 34
6475: PUSH
6476: LD_INT 4
6478: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6479: LD_ADDR_EXP 35
6483: PUSH
6484: LD_INT 6
6486: ST_TO_ADDR
// end ; end ;
6487: LD_VAR 0 1
6491: RET
// export function ShowQuery1 ; begin
6492: LD_INT 0
6494: PPUSH
// case query ( QKill ) of 1 :
6495: LD_STRING QKill
6497: PPUSH
6498: CALL_OW 97
6502: PUSH
6503: LD_INT 1
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6522
6511: POP
// begin result = 1 ;
6512: LD_ADDR_VAR 0 1
6516: PUSH
6517: LD_INT 1
6519: ST_TO_ADDR
// end ; 2 :
6520: GO 6561
6522: LD_INT 2
6524: DOUBLE
6525: EQUAL
6526: IFTRUE 6530
6528: GO 6541
6530: POP
// begin result = 2 ;
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_INT 2
6538: ST_TO_ADDR
// end ; 3 :
6539: GO 6561
6541: LD_INT 3
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6560
6549: POP
// begin result = 3 ;
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_INT 3
6557: ST_TO_ADDR
// end ; end ;
6558: GO 6561
6560: POP
// end ;
6561: LD_VAR 0 1
6565: RET
// export function ShowQuery2 ; begin
6566: LD_INT 0
6568: PPUSH
// case query ( QKill2 ) of 1 :
6569: LD_STRING QKill2
6571: PPUSH
6572: CALL_OW 97
6576: PUSH
6577: LD_INT 1
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6596
6585: POP
// begin result = 1 ;
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// end ; 2 :
6594: GO 6616
6596: LD_INT 2
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6615
6604: POP
// begin result = 2 ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: ST_TO_ADDR
// end ; end ;
6613: GO 6616
6615: POP
// end ;
6616: LD_VAR 0 1
6620: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6621: LD_INT 0
6623: PPUSH
6624: PPUSH
6625: PPUSH
6626: PPUSH
6627: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 48
6635: PUSH
6636: LD_INT 49
6638: PUSH
6639: LD_INT 50
6641: PUSH
6642: LD_INT 20
6644: PUSH
6645: LD_INT 1
6647: PUSH
6648: LD_INT 51
6650: PUSH
6651: LD_INT 52
6653: PUSH
6654: LD_INT 69
6656: PUSH
6657: LD_INT 39
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 40
6665: PUSH
6666: LD_INT 53
6668: PUSH
6669: LD_INT 71
6671: PUSH
6672: LD_INT 57
6674: PUSH
6675: LD_INT 58
6677: PUSH
6678: LD_INT 44
6680: PUSH
6681: LD_INT 32
6683: PUSH
6684: LD_INT 27
6686: PUSH
6687: LD_INT 23
6689: PUSH
6690: LD_INT 33
6692: PUSH
6693: LD_INT 59
6695: PUSH
6696: LD_INT 54
6698: PUSH
6699: LD_INT 55
6701: PUSH
6702: LD_INT 56
6704: PUSH
6705: LD_INT 63
6707: PUSH
6708: LD_INT 64
6710: PUSH
6711: LD_INT 65
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: LD_INT 31
6719: PUSH
6720: LD_INT 21
6722: PUSH
6723: LD_INT 22
6725: PUSH
6726: LD_INT 25
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6763: LD_ADDR_VAR 0 5
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 8
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6855
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6781: LD_VAR 0 8
6785: PUSH
6786: LD_VAR 0 5
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 321
6801: PUSH
6802: LD_INT 1
6804: EQUAL
6805: PUSH
6806: LD_VAR 0 8
6810: PUSH
6811: LD_VAR 0 5
6815: ARRAY
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 482
6826: PUSH
6827: LD_INT 1
6829: EQUAL
6830: AND
6831: IFFALSE 6853
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 8
6842: PUSH
6843: LD_VAR 0 5
6847: ARRAY
6848: PPUSH
6849: CALL_OW 184
6853: GO 6778
6855: POP
6856: POP
// end ;
6857: LD_VAR 0 4
6861: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6867: LD_INT 22
6869: PUSH
6870: LD_VAR 0 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 21
6881: PUSH
6882: LD_INT 2
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 69
6897: PUSH
6898: LD_VAR 0 3
6902: LESSEQUAL
6903: IFFALSE 7011
// begin for i = 1 to vehCount do
6905: LD_ADDR_VAR 0 9
6909: PUSH
6910: DOUBLE
6911: LD_INT 1
6913: DEC
6914: ST_TO_ADDR
6915: LD_VAR 0 3
6919: PUSH
6920: FOR_TO
6921: IFFALSE 7009
// begin weapon = weaponTab [ i ] ;
6923: LD_ADDR_VAR 0 10
6927: PUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_VAR 0 9
6937: ARRAY
6938: ST_TO_ADDR
// if weapon = 46 then
6939: LD_VAR 0 10
6943: PUSH
6944: LD_INT 46
6946: EQUAL
6947: IFFALSE 6978
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6949: LD_VAR 0 2
6953: PPUSH
6954: LD_INT 24
6956: PPUSH
6957: LD_VAR 0 5
6961: PPUSH
6962: LD_VAR 0 6
6966: PPUSH
6967: LD_VAR 0 10
6971: PPUSH
6972: CALL_OW 185
// end else
6976: GO 7007
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_VAR 0 7
6987: PPUSH
6988: LD_VAR 0 5
6992: PPUSH
6993: LD_VAR 0 6
6997: PPUSH
6998: LD_VAR 0 10
7002: PPUSH
7003: CALL_OW 185
// end ; end ;
7007: GO 6920
7009: POP
7010: POP
// end ; end ;
7011: LD_VAR 0 8
7015: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7022: LD_ADDR_VAR 0 8
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 21
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 24
7054: PUSH
7055: LD_INT 650
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if damageVehicles > 0 then
7076: LD_VAR 0 8
7080: PUSH
7081: LD_INT 0
7083: GREATER
7084: IFFALSE 7105
// ComMoveXY ( damageVehicles , repX , repY ) ;
7086: LD_VAR 0 8
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_VAR 0 4
7100: PPUSH
7101: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7105: LD_VAR 0 8
7109: PPUSH
7110: LD_INT 95
7112: PUSH
7113: LD_VAR 0 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 3
7124: PUSH
7125: LD_INT 58
7127: PUSH
7128: EMPTY
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 72
7143: PUSH
7144: LD_INT 0
7146: GREATER
7147: IFFALSE 7214
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7149: LD_ADDR_VAR 0 6
7153: PUSH
7154: LD_VAR 0 8
7158: PPUSH
7159: LD_INT 95
7161: PUSH
7162: LD_VAR 0 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 58
7176: PUSH
7177: EMPTY
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 72
7192: PUSH
7193: FOR_IN
7194: IFFALSE 7212
// ComExitVehicle ( UnitsInside ( i ) ) ;
7196: LD_VAR 0 6
7200: PPUSH
7201: CALL_OW 313
7205: PPUSH
7206: CALL_OW 121
7210: GO 7193
7212: POP
7213: POP
// end ;
7214: LD_VAR 0 5
7218: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7219: LD_INT 0
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7228: LD_ADDR_VAR 0 8
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 660
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7329: LD_INT 22
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 24
7353: PUSH
7354: LD_INT 1000
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 3
7363: PUSH
7364: LD_INT 58
7366: PUSH
7367: EMPTY
7368: LIST
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: LD_INT 34
7375: PUSH
7376: LD_INT 43
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 44
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 34
7395: PUSH
7396: LD_INT 46
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 69
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: PUSH
7439: LD_OWVAR 67
7443: ARRAY
7444: EQUAL
7445: IFFALSE 7701
// if seeEnemy = 0 then
7447: LD_VAR 0 11
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: IFFALSE 7701
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 24
7493: PUSH
7494: LD_INT 660
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 58
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 43
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 34
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 34
7535: PUSH
7536: LD_INT 46
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7565: LD_INT 22
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 95
7579: PUSH
7580: LD_VAR 0 2
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 69
7597: NOT
7598: PUSH
7599: LD_VAR 0 11
7603: PUSH
7604: LD_INT 0
7606: EQUAL
7607: AND
7608: IFFALSE 7663
// for i := 1 to wayX do
7610: LD_ADDR_VAR 0 6
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_VAR 0 3
7624: PUSH
7625: FOR_TO
7626: IFFALSE 7661
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7628: LD_VAR 0 8
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_VAR 0 6
7642: ARRAY
7643: PPUSH
7644: LD_VAR 0 4
7648: PUSH
7649: LD_VAR 0 6
7653: ARRAY
7654: PPUSH
7655: CALL_OW 114
7659: GO 7625
7661: POP
7662: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7663: LD_INT 22
7665: PUSH
7666: LD_VAR 0 1
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 95
7677: PUSH
7678: LD_VAR 0 2
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PPUSH
7691: CALL_OW 69
7695: PUSH
7696: LD_INT 0
7698: GREATER
7699: IFFALSE 7457
// seeEnemy = 1 ;
7701: LD_ADDR_VAR 0 11
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7709: LD_INT 35
7711: PPUSH
7712: CALL_OW 67
// for j in vehiclesOK do
7716: LD_ADDR_VAR 0 7
7720: PUSH
7721: LD_VAR 0 8
7725: PUSH
7726: FOR_IN
7727: IFFALSE 7940
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 81
7736: PUSH
7737: LD_VAR 0 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 101
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 69
7764: PUSH
7765: LD_EXP 45
7769: DIFF
7770: PPUSH
7771: LD_VAR 0 7
7775: PPUSH
7776: CALL_OW 74
7780: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7781: LD_ADDR_VAR 0 10
7785: PUSH
7786: LD_INT 81
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 101
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 2
7810: PUSH
7811: LD_INT 59
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: LD_INT 21
7819: PUSH
7820: LD_INT 1
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 21
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: PUSH
7856: LD_EXP 45
7860: DIFF
7861: PPUSH
7862: LD_VAR 0 7
7866: PPUSH
7867: CALL_OW 74
7871: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7872: LD_VAR 0 7
7876: PPUSH
7877: LD_VAR 0 9
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 8
7889: PLUS
7890: PUSH
7891: LD_VAR 0 7
7895: PPUSH
7896: LD_VAR 0 10
7900: PPUSH
7901: CALL_OW 296
7905: LESS
7906: IFFALSE 7924
// ComAttackUnit ( j , target1 ) else
7908: LD_VAR 0 7
7912: PPUSH
7913: LD_VAR 0 9
7917: PPUSH
7918: CALL_OW 115
7922: GO 7938
// ComAttackUnit ( j , target2 ) ;
7924: LD_VAR 0 7
7928: PPUSH
7929: LD_VAR 0 10
7933: PPUSH
7934: CALL_OW 115
// end ;
7938: GO 7726
7940: POP
7941: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7942: LD_INT 22
7944: PUSH
7945: LD_VAR 0 1
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 21
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: LD_INT 1000
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 58
7979: PUSH
7980: EMPTY
7981: LIST
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 34
7988: PUSH
7989: LD_INT 43
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 34
7998: PUSH
7999: LD_INT 44
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 46
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PPUSH
8033: CALL_OW 69
8037: PUSH
8038: LD_INT 0
8040: EQUAL
8041: IFFALSE 7709
// seeEnemy = 0 ;
8043: LD_ADDR_VAR 0 11
8047: PUSH
8048: LD_INT 0
8050: ST_TO_ADDR
// end ;
8051: LD_VAR 0 5
8055: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8056: LD_INT 0
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8064: LD_ADDR_VAR 0 8
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: CALL_OW 313
8078: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8079: LD_ADDR_VAR 0 9
8083: PUSH
8084: LD_VAR 0 3
8088: PPUSH
8089: LD_INT 22
8091: PUSH
8092: LD_VAR 0 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 750
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: LD_INT 54
8126: PUSH
8127: EMPTY
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 70
8144: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8145: LD_ADDR_VAR 0 6
8149: PUSH
8150: LD_VAR 0 3
8154: PPUSH
8155: LD_INT 22
8157: PUSH
8158: LD_VAR 0 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 21
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 3
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 1000
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: PPUSH
8202: CALL_OW 70
8206: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8207: LD_VAR 0 6
8211: NOT
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 250
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 69
8254: NOT
8255: AND
8256: IFFALSE 8260
// exit ;
8258: GO 8442
// if buildings_list > 0 and engineerOkInside then
8260: LD_VAR 0 6
8264: PUSH
8265: LD_INT 0
8267: GREATER
8268: PUSH
8269: LD_VAR 0 8
8273: AND
8274: IFFALSE 8285
// ComExitBuilding ( engineerOkInside ) ;
8276: LD_VAR 0 8
8280: PPUSH
8281: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8285: LD_VAR 0 6
8289: PUSH
8290: LD_INT 0
8292: GREATER
8293: PUSH
8294: LD_VAR 0 9
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: AND
8303: IFFALSE 8323
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8305: LD_VAR 0 9
8309: PPUSH
8310: LD_VAR 0 6
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8323: LD_VAR 0 6
8327: PUSH
8328: LD_INT 0
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 4
8336: PUSH
8337: LD_INT 0
8339: EQUAL
8340: AND
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: AND
8351: IFFALSE 8367
// ComEnterUnit ( engineerOkOutside , building ) ;
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8367: LD_VAR 0 9
8371: PUSH
8372: LD_INT 0
8374: GREATER
8375: PUSH
8376: LD_VAR 0 6
8380: PUSH
8381: LD_INT 0
8383: EQUAL
8384: AND
8385: PUSH
8386: LD_VAR 0 4
8390: PUSH
8391: LD_INT 0
8393: GREATER
8394: AND
8395: IFFALSE 8442
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8397: LD_VAR 0 9
8401: PPUSH
8402: LD_VAR 0 4
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 2
8418: ARRAY
8419: PPUSH
8420: LD_VAR 0 4
8424: PUSH
8425: LD_INT 3
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 4
8433: PUSH
8434: LD_INT 4
8436: ARRAY
8437: PPUSH
8438: CALL_OW 145
// end ;
8442: LD_VAR 0 5
8446: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8458: LD_ADDR_VAR 0 6
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_VAR 0 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 4
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 23
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 24
8497: PUSH
8498: LD_INT 251
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PPUSH
8511: CALL_OW 69
8515: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8516: LD_ADDR_VAR 0 7
8520: PUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 22
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 23
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 50
8560: PUSH
8561: EMPTY
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 70
8574: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8575: LD_ADDR_VAR 0 10
8579: PUSH
8580: LD_VAR 0 3
8584: PPUSH
8585: LD_INT 22
8587: PUSH
8588: LD_VAR 0 1
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 21
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 750
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 70
8651: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8652: LD_ADDR_VAR 0 11
8656: PUSH
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 3
8703: PUSH
8704: LD_INT 24
8706: PUSH
8707: LD_INT 1000
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 70
8728: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8729: LD_VAR 0 10
8733: NOT
8734: PUSH
8735: LD_VAR 0 11
8739: NOT
8740: AND
8741: PUSH
8742: LD_VAR 0 6
8746: NOT
8747: AND
8748: IFFALSE 8752
// exit ;
8750: GO 8986
// if damageUnits > 0 and sci_list > 0 then
8752: LD_VAR 0 10
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: PUSH
8761: LD_VAR 0 6
8765: PUSH
8766: LD_INT 0
8768: GREATER
8769: AND
8770: IFFALSE 8786
// ComMoveToArea ( damageUnits , healArea ) ;
8772: LD_VAR 0 10
8776: PPUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8786: LD_VAR 0 11
8790: PUSH
8791: LD_INT 0
8793: GREATER
8794: PUSH
8795: LD_VAR 0 6
8799: PUSH
8800: LD_INT 0
8802: GREATER
8803: AND
8804: IFFALSE 8815
// ComExitBuilding ( sci_list ) ;
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8815: LD_VAR 0 11
8819: PUSH
8820: LD_INT 0
8822: GREATER
8823: PUSH
8824: LD_VAR 0 7
8828: PUSH
8829: LD_INT 0
8831: GREATER
8832: AND
8833: IFFALSE 8853
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8835: LD_VAR 0 7
8839: PPUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8853: LD_VAR 0 10
8857: PUSH
8858: LD_INT 0
8860: EQUAL
8861: PUSH
8862: LD_VAR 0 11
8866: PUSH
8867: LD_INT 0
8869: EQUAL
8870: AND
8871: PUSH
8872: LD_VAR 0 7
8876: PUSH
8877: LD_INT 0
8879: GREATER
8880: AND
8881: IFFALSE 8986
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8883: LD_ADDR_VAR 0 12
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: PPUSH
8925: CALL_OW 69
8929: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8930: LD_ADDR_VAR 0 13
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 12
8942: PPUSH
8943: CALL_OW 12
8947: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8948: LD_VAR 0 7
8952: PPUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 60
8958: PUSH
8959: EMPTY
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 72
8970: PPUSH
8971: LD_VAR 0 12
8975: PUSH
8976: LD_VAR 0 13
8980: ARRAY
8981: PPUSH
8982: CALL_OW 120
// end ; end ;
8986: LD_VAR 0 5
8990: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8991: LD_INT 0
8993: PPUSH
8994: PPUSH
8995: PPUSH
8996: PPUSH
// tmpTab = [ ] ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9004: LD_INT 22
9006: PUSH
9007: LD_VAR 0 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 30
9018: PUSH
9019: LD_INT 32
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9121
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 32
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 69
9075: PUSH
9076: FOR_IN
9077: IFFALSE 9119
// begin for j in UnitsInside ( i ) do
9079: LD_ADDR_VAR 0 5
9083: PUSH
9084: LD_VAR 0 4
9088: PPUSH
9089: CALL_OW 313
9093: PUSH
9094: FOR_IN
9095: IFFALSE 9115
// tmpTab = tmpTab ^ j ;
9097: LD_ADDR_VAR 0 6
9101: PUSH
9102: LD_VAR 0 6
9106: PUSH
9107: LD_VAR 0 5
9111: ADD
9112: ST_TO_ADDR
9113: GO 9094
9115: POP
9116: POP
// end ;
9117: GO 9076
9119: POP
9120: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: CALL_OW 250
9135: PPUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: CALL_OW 251
9145: PPUSH
9146: CALL_OW 114
// end ;
9150: LD_VAR 0 3
9154: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9155: LD_INT 0
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// enable ;
9161: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9162: LD_ADDR_VAR 0 7
9166: PUSH
9167: LD_VAR 0 3
9171: PPUSH
9172: CALL_OW 435
9176: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_INT 22
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 34
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9215: LD_VAR 0 6
9219: PUSH
9220: LD_INT 0
9222: GREATER
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 435
9233: AND
9234: PUSH
9235: LD_VAR 0 7
9239: PUSH
9240: LD_INT 0
9242: GREATER
9243: AND
9244: IFFALSE 9293
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9246: LD_VAR 0 6
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: LD_VAR 0 7
9268: PUSH
9269: LD_INT 2
9271: ARRAY
9272: PPUSH
9273: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9277: LD_VAR 0 6
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: LD_INT 100
9288: PPUSH
9289: CALL_OW 240
// end ; end ;
9293: LD_VAR 0 4
9297: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9308: LD_ADDR_VAR 0 6
9312: PUSH
9313: LD_VAR 0 2
9317: PPUSH
9318: LD_INT 22
9320: PUSH
9321: LD_VAR 0 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 56
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: LD_INT 24
9338: PUSH
9339: LD_INT 700
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 3
9348: PUSH
9349: LD_INT 60
9351: PUSH
9352: EMPTY
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: LD_INT 25
9364: PUSH
9365: LD_INT 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 25
9374: PUSH
9375: LD_INT 5
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 25
9384: PUSH
9385: LD_INT 8
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 25
9394: PUSH
9395: LD_INT 9
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9421: LD_ADDR_VAR 0 7
9425: PUSH
9426: LD_VAR 0 2
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 30
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 58
9455: PUSH
9456: EMPTY
9457: LIST
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 251
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 70
9479: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: LD_INT 30
9507: PUSH
9508: LD_INT 4
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 30
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 24
9532: PUSH
9533: LD_INT 251
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 70
9549: ST_TO_ADDR
// if barrackList > 0 then
9550: LD_VAR 0 9
9554: PUSH
9555: LD_INT 0
9557: GREATER
9558: IFFALSE 9706
// begin if turretList = 0 then
9560: LD_VAR 0 7
9564: PUSH
9565: LD_INT 0
9567: EQUAL
9568: IFFALSE 9610
// begin if soldiers_list > 0 then
9570: LD_VAR 0 6
9574: PUSH
9575: LD_INT 0
9577: GREATER
9578: IFFALSE 9608
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9580: LD_VAR 0 6
9584: PPUSH
9585: LD_VAR 0 9
9589: PUSH
9590: LD_INT 1
9592: PPUSH
9593: LD_VAR 0 9
9597: PPUSH
9598: CALL_OW 12
9602: ARRAY
9603: PPUSH
9604: CALL_OW 120
// end else
9608: GO 9706
// begin for i in barrackList do
9610: LD_ADDR_VAR 0 4
9614: PUSH
9615: LD_VAR 0 9
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9704
// begin insideUnits = UnitsInside ( i ) ;
9623: LD_ADDR_VAR 0 10
9627: PUSH
9628: LD_VAR 0 4
9632: PPUSH
9633: CALL_OW 313
9637: ST_TO_ADDR
// if insideUnits > 0 then
9638: LD_VAR 0 10
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: IFFALSE 9670
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9648: LD_VAR 0 10
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: LD_VAR 0 7
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PPUSH
9666: CALL_OW 120
// if soldiers_list > 0 then
9670: LD_VAR 0 6
9674: PUSH
9675: LD_INT 0
9677: GREATER
9678: IFFALSE 9702
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9680: LD_VAR 0 6
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 7
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: CALL_OW 120
// end ;
9702: GO 9620
9704: POP
9705: POP
// end ; end ; end ;
9706: LD_VAR 0 3
9710: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9711: LD_INT 0
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9718: LD_ADDR_VAR 0 6
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 31
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 30
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 30
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9805: LD_ADDR_VAR 0 7
9809: PUSH
9810: LD_INT 22
9812: PUSH
9813: LD_VAR 0 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 21
9824: PUSH
9825: LD_INT 3
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 58
9834: PUSH
9835: EMPTY
9836: LIST
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9848: LD_VAR 0 6
9852: PUSH
9853: LD_INT 0
9855: GREATER
9856: PUSH
9857: LD_VAR 0 7
9861: PUSH
9862: LD_INT 0
9864: GREATER
9865: AND
9866: IFFALSE 9936
// begin for i in turretsList do
9868: LD_ADDR_VAR 0 4
9872: PUSH
9873: LD_VAR 0 6
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9934
// begin for j in enemyBuildings do
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_VAR 0 7
9890: PUSH
9891: FOR_IN
9892: IFFALSE 9930
// begin if GetDistUnits ( i , j ) < 20 then
9894: LD_VAR 0 4
9898: PPUSH
9899: LD_VAR 0 5
9903: PPUSH
9904: CALL_OW 296
9908: PUSH
9909: LD_INT 20
9911: LESS
9912: IFFALSE 9928
// begin ComAttackUnit ( i , j ) ;
9914: LD_VAR 0 4
9918: PPUSH
9919: LD_VAR 0 5
9923: PPUSH
9924: CALL_OW 115
// end ; end ;
9928: GO 9891
9930: POP
9931: POP
// end ;
9932: GO 9878
9934: POP
9935: POP
// end ; end ;
9936: LD_VAR 0 3
9940: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
9948: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9949: LD_ADDR_VAR 0 8
9953: PUSH
9954: LD_INT 22
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 34
9978: PUSH
9979: LD_INT 52
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_INT 22
10003: PUSH
10004: LD_VAR 0 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 21
10015: PUSH
10016: LD_INT 3
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 3
10025: PUSH
10026: LD_INT 24
10028: PUSH
10029: LD_INT 1000
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10053: LD_VAR 0 9
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: PUSH
10062: LD_VAR 0 8
10066: PPUSH
10067: LD_INT 24
10069: PUSH
10070: LD_INT 750
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 72
10081: PUSH
10082: LD_INT 0
10084: GREATER
10085: AND
10086: IFFALSE 10121
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10088: LD_VAR 0 8
10092: PPUSH
10093: LD_INT 24
10095: PUSH
10096: LD_INT 750
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 72
10107: PPUSH
10108: LD_VAR 0 9
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10121: LD_VAR 0 8
10125: PPUSH
10126: LD_INT 3
10128: PUSH
10129: LD_INT 24
10131: PUSH
10132: LD_INT 750
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 72
10147: PUSH
10148: LD_INT 0
10150: GREATER
10151: IFFALSE 10189
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10153: LD_VAR 0 8
10157: PPUSH
10158: LD_INT 3
10160: PUSH
10161: LD_INT 24
10163: PUSH
10164: LD_INT 750
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 72
10179: PPUSH
10180: LD_VAR 0 2
10184: PPUSH
10185: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10189: LD_VAR 0 8
10193: PUSH
10194: LD_INT 0
10196: GREATER
10197: PUSH
10198: LD_VAR 0 9
10202: PUSH
10203: LD_INT 0
10205: EQUAL
10206: AND
10207: PUSH
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 0
10215: GREATER
10216: AND
10217: IFFALSE 10264
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10219: LD_VAR 0 8
10223: PPUSH
10224: LD_VAR 0 3
10228: PUSH
10229: LD_INT 1
10231: ARRAY
10232: PPUSH
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 2
10240: ARRAY
10241: PPUSH
10242: LD_VAR 0 3
10246: PUSH
10247: LD_INT 3
10249: ARRAY
10250: PPUSH
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 4
10258: ARRAY
10259: PPUSH
10260: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10264: LD_VAR 0 2
10268: PPUSH
10269: LD_INT 22
10271: PUSH
10272: LD_VAR 0 1
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 21
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 34
10293: PUSH
10294: LD_INT 52
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: LD_INT 24
10306: PUSH
10307: LD_INT 750
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 70
10328: PUSH
10329: LD_INT 0
10331: GREATER
10332: IFFALSE 10534
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10334: LD_ADDR_VAR 0 5
10338: PUSH
10339: LD_VAR 0 2
10343: PPUSH
10344: LD_INT 22
10346: PUSH
10347: LD_VAR 0 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 21
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 34
10368: PUSH
10369: LD_INT 52
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 24
10381: PUSH
10382: LD_INT 750
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 70
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10532
// begin mechTmp = UnitsInside ( i ) ;
10407: LD_ADDR_VAR 0 6
10411: PUSH
10412: LD_VAR 0 5
10416: PPUSH
10417: CALL_OW 313
10421: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10431: LD_VAR 0 6
10435: PPUSH
10436: LD_VAR 0 7
10440: PPUSH
10441: CALL_OW 189
// wait ( 0 0$2 ) ;
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10452: LD_VAR 0 6
10456: PPUSH
10457: LD_VAR 0 2
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 34
10486: PUSH
10487: LD_INT 52
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 24
10496: PUSH
10497: LD_INT 1000
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 58
10506: PUSH
10507: EMPTY
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 70
10521: PUSH
10522: LD_INT 1
10524: ARRAY
10525: PPUSH
10526: CALL_OW 180
// end ;
10530: GO 10404
10532: POP
10533: POP
// end ; end ;
10534: LD_VAR 0 4
10538: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
// for i = 1 to medicCount do
10552: LD_ADDR_VAR 0 14
10556: PUSH
10557: DOUBLE
10558: LD_INT 1
10560: DEC
10561: ST_TO_ADDR
10562: LD_VAR 0 7
10566: PUSH
10567: FOR_TO
10568: IFFALSE 10650
// begin uc_side = side ;
10570: LD_ADDR_OWVAR 20
10574: PUSH
10575: LD_VAR 0 1
10579: ST_TO_ADDR
// uc_nation = nation ;
10580: LD_ADDR_OWVAR 21
10584: PUSH
10585: LD_VAR 0 2
10589: ST_TO_ADDR
// hc_name =  ;
10590: LD_ADDR_OWVAR 26
10594: PUSH
10595: LD_STRING 
10597: ST_TO_ADDR
// hc_gallery =  ;
10598: LD_ADDR_OWVAR 33
10602: PUSH
10603: LD_STRING 
10605: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10606: LD_INT 0
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: LD_VAR 0 8
10616: PPUSH
10617: CALL_OW 380
// un = CreateHuman ;
10621: LD_ADDR_VAR 0 16
10625: PUSH
10626: CALL_OW 44
10630: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10631: LD_VAR 0 16
10635: PPUSH
10636: LD_VAR 0 9
10640: PPUSH
10641: LD_INT 0
10643: PPUSH
10644: CALL_OW 49
// end ;
10648: GO 10567
10650: POP
10651: POP
// for i = 1 to soldierCount do
10652: LD_ADDR_VAR 0 14
10656: PUSH
10657: DOUBLE
10658: LD_INT 1
10660: DEC
10661: ST_TO_ADDR
10662: LD_VAR 0 3
10666: PUSH
10667: FOR_TO
10668: IFFALSE 10750
// begin uc_side = side ;
10670: LD_ADDR_OWVAR 20
10674: PUSH
10675: LD_VAR 0 1
10679: ST_TO_ADDR
// uc_nation = nation ;
10680: LD_ADDR_OWVAR 21
10684: PUSH
10685: LD_VAR 0 2
10689: ST_TO_ADDR
// hc_name =  ;
10690: LD_ADDR_OWVAR 26
10694: PUSH
10695: LD_STRING 
10697: ST_TO_ADDR
// hc_gallery =  ;
10698: LD_ADDR_OWVAR 33
10702: PUSH
10703: LD_STRING 
10705: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10706: LD_INT 0
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: LD_VAR 0 8
10716: PPUSH
10717: CALL_OW 380
// un = CreateHuman ;
10721: LD_ADDR_VAR 0 16
10725: PUSH
10726: CALL_OW 44
10730: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10731: LD_VAR 0 16
10735: PPUSH
10736: LD_VAR 0 9
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL_OW 49
// end ;
10748: GO 10667
10750: POP
10751: POP
// for i = 1 to sniperCount do
10752: LD_ADDR_VAR 0 14
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_VAR 0 4
10766: PUSH
10767: FOR_TO
10768: IFFALSE 10850
// begin uc_side = side ;
10770: LD_ADDR_OWVAR 20
10774: PUSH
10775: LD_VAR 0 1
10779: ST_TO_ADDR
// uc_nation = nation ;
10780: LD_ADDR_OWVAR 21
10784: PUSH
10785: LD_VAR 0 2
10789: ST_TO_ADDR
// hc_name =  ;
10790: LD_ADDR_OWVAR 26
10794: PUSH
10795: LD_STRING 
10797: ST_TO_ADDR
// hc_gallery =  ;
10798: LD_ADDR_OWVAR 33
10802: PUSH
10803: LD_STRING 
10805: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10806: LD_INT 0
10808: PPUSH
10809: LD_INT 5
10811: PPUSH
10812: LD_VAR 0 8
10816: PPUSH
10817: CALL_OW 380
// un = CreateHuman ;
10821: LD_ADDR_VAR 0 16
10825: PUSH
10826: CALL_OW 44
10830: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10831: LD_VAR 0 16
10835: PPUSH
10836: LD_VAR 0 9
10840: PPUSH
10841: LD_INT 0
10843: PPUSH
10844: CALL_OW 49
// end ;
10848: GO 10767
10850: POP
10851: POP
// for i = 1 to bazookCount do
10852: LD_ADDR_VAR 0 14
10856: PUSH
10857: DOUBLE
10858: LD_INT 1
10860: DEC
10861: ST_TO_ADDR
10862: LD_VAR 0 5
10866: PUSH
10867: FOR_TO
10868: IFFALSE 10950
// begin uc_side = side ;
10870: LD_ADDR_OWVAR 20
10874: PUSH
10875: LD_VAR 0 1
10879: ST_TO_ADDR
// uc_nation = nation ;
10880: LD_ADDR_OWVAR 21
10884: PUSH
10885: LD_VAR 0 2
10889: ST_TO_ADDR
// hc_name =  ;
10890: LD_ADDR_OWVAR 26
10894: PUSH
10895: LD_STRING 
10897: ST_TO_ADDR
// hc_gallery =  ;
10898: LD_ADDR_OWVAR 33
10902: PUSH
10903: LD_STRING 
10905: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10906: LD_INT 0
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: LD_VAR 0 8
10916: PPUSH
10917: CALL_OW 380
// un = CreateHuman ;
10921: LD_ADDR_VAR 0 16
10925: PUSH
10926: CALL_OW 44
10930: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10931: LD_VAR 0 16
10935: PPUSH
10936: LD_VAR 0 9
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 49
// end ;
10948: GO 10867
10950: POP
10951: POP
// for i = 1 to mortalCount do
10952: LD_ADDR_VAR 0 14
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_VAR 0 6
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11050
// begin uc_side = side ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_VAR 0 1
10979: ST_TO_ADDR
// uc_nation = nation ;
10980: LD_ADDR_OWVAR 21
10984: PUSH
10985: LD_VAR 0 2
10989: ST_TO_ADDR
// hc_name =  ;
10990: LD_ADDR_OWVAR 26
10994: PUSH
10995: LD_STRING 
10997: ST_TO_ADDR
// hc_gallery =  ;
10998: LD_ADDR_OWVAR 33
11002: PUSH
11003: LD_STRING 
11005: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11006: LD_INT 0
11008: PPUSH
11009: LD_INT 8
11011: PPUSH
11012: LD_VAR 0 8
11016: PPUSH
11017: CALL_OW 380
// un = CreateHuman ;
11021: LD_ADDR_VAR 0 16
11025: PUSH
11026: CALL_OW 44
11030: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11031: LD_VAR 0 16
11035: PPUSH
11036: LD_VAR 0 9
11040: PPUSH
11041: LD_INT 0
11043: PPUSH
11044: CALL_OW 49
// end ;
11048: GO 10967
11050: POP
11051: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11052: LD_ADDR_VAR 0 19
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: LD_INT 25
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 25
11084: PUSH
11085: LD_INT 5
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 25
11094: PUSH
11095: LD_INT 8
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 25
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11128: LD_ADDR_VAR 0 18
11132: PUSH
11133: LD_INT 22
11135: PUSH
11136: LD_VAR 0 1
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 69
11163: ST_TO_ADDR
// for i in medic_list do
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: LD_VAR 0 18
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11193
// ComMoveToArea ( i , healArea ) ;
11177: LD_VAR 0 14
11181: PPUSH
11182: LD_VAR 0 10
11186: PPUSH
11187: CALL_OW 113
11191: GO 11174
11193: POP
11194: POP
// if strategy = 1 then
11195: LD_VAR 0 12
11199: PUSH
11200: LD_INT 1
11202: EQUAL
11203: IFFALSE 11920
// begin repeat wait ( 0 0$3 ) ;
11205: LD_INT 105
11207: PPUSH
11208: CALL_OW 67
// for i in soldiersOK_list do
11212: LD_ADDR_VAR 0 14
11216: PUSH
11217: LD_VAR 0 19
11221: PUSH
11222: FOR_IN
11223: IFFALSE 11257
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_INT 80
11232: PPUSH
11233: LD_INT 109
11235: PPUSH
11236: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11240: LD_VAR 0 14
11244: PPUSH
11245: LD_INT 39
11247: PPUSH
11248: LD_INT 49
11250: PPUSH
11251: CALL_OW 174
// end ;
11255: GO 11222
11257: POP
11258: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11259: LD_INT 13
11261: PPUSH
11262: LD_INT 22
11264: PUSH
11265: LD_VAR 0 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PPUSH
11274: CALL_OW 70
11278: PUSH
11279: LD_INT 0
11281: GREATER
11282: IFFALSE 11205
// repeat wait ( 0 0$1 ) ;
11284: LD_INT 35
11286: PPUSH
11287: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11291: LD_ADDR_VAR 0 17
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: LD_INT 24
11316: PUSH
11317: LD_INT 550
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 24
11330: PUSH
11331: LD_INT 250
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11352: LD_ADDR_VAR 0 19
11356: PUSH
11357: LD_INT 22
11359: PUSH
11360: LD_VAR 0 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 8
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 9
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 69
11438: ST_TO_ADDR
// if medicCount > 0 then
11439: LD_VAR 0 7
11443: PUSH
11444: LD_INT 0
11446: GREATER
11447: IFFALSE 11521
// begin if damageUnit_list > 0 then
11449: LD_VAR 0 17
11453: PUSH
11454: LD_INT 0
11456: GREATER
11457: IFFALSE 11521
// begin for i in damageUnit_list do
11459: LD_ADDR_VAR 0 14
11463: PUSH
11464: LD_VAR 0 17
11468: PUSH
11469: FOR_IN
11470: IFFALSE 11519
// begin ComMoveToArea ( i , healArea ) ;
11472: LD_VAR 0 14
11476: PPUSH
11477: LD_VAR 0 10
11481: PPUSH
11482: CALL_OW 113
// for j in medic_list do
11486: LD_ADDR_VAR 0 15
11490: PUSH
11491: LD_VAR 0 18
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11515
// AddComHeal ( j , i ) ;
11499: LD_VAR 0 15
11503: PPUSH
11504: LD_VAR 0 14
11508: PPUSH
11509: CALL_OW 188
11513: GO 11496
11515: POP
11516: POP
// end ;
11517: GO 11469
11519: POP
11520: POP
// end ; end ; for i in soldiersOK_list do
11521: LD_ADDR_VAR 0 14
11525: PUSH
11526: LD_VAR 0 19
11530: PUSH
11531: FOR_IN
11532: IFFALSE 11714
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11534: LD_ADDR_VAR 0 22
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_VAR 0 11
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: PUSH
11556: LD_EXP 45
11560: DIFF
11561: PPUSH
11562: LD_VAR 0 14
11566: PPUSH
11567: CALL_OW 74
11571: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11572: LD_ADDR_VAR 0 23
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_VAR 0 11
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: LD_INT 59
11594: PUSH
11595: EMPTY
11596: LIST
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: PPUSH
11636: LD_VAR 0 14
11640: PPUSH
11641: CALL_OW 74
11645: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11646: LD_VAR 0 14
11650: PPUSH
11651: LD_VAR 0 22
11655: PPUSH
11656: CALL_OW 296
11660: PUSH
11661: LD_INT 8
11663: PLUS
11664: PUSH
11665: LD_VAR 0 14
11669: PPUSH
11670: LD_VAR 0 23
11674: PPUSH
11675: CALL_OW 296
11679: LESS
11680: IFFALSE 11698
// begin ComAttackUnit ( i , target1 ) ;
11682: LD_VAR 0 14
11686: PPUSH
11687: LD_VAR 0 22
11691: PPUSH
11692: CALL_OW 115
// end else
11696: GO 11712
// begin ComAttackUnit ( i , target2 ) ;
11698: LD_VAR 0 14
11702: PPUSH
11703: LD_VAR 0 23
11707: PPUSH
11708: CALL_OW 115
// end ; end ;
11712: GO 11531
11714: POP
11715: POP
// for i in soldiersOK_list do
11716: LD_ADDR_VAR 0 14
11720: PUSH
11721: LD_VAR 0 19
11725: PUSH
11726: FOR_IN
11727: IFFALSE 11909
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11729: LD_ADDR_VAR 0 22
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_VAR 0 11
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: PUSH
11751: LD_EXP 45
11755: DIFF
11756: PPUSH
11757: LD_VAR 0 14
11761: PPUSH
11762: CALL_OW 74
11766: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11767: LD_ADDR_VAR 0 23
11771: PUSH
11772: LD_INT 22
11774: PUSH
11775: LD_VAR 0 11
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 59
11789: PUSH
11790: EMPTY
11791: LIST
11792: PUSH
11793: LD_INT 21
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 21
11805: PUSH
11806: LD_INT 2
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: PPUSH
11831: LD_VAR 0 14
11835: PPUSH
11836: CALL_OW 74
11840: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11841: LD_VAR 0 14
11845: PPUSH
11846: LD_VAR 0 22
11850: PPUSH
11851: CALL_OW 296
11855: PUSH
11856: LD_INT 8
11858: PLUS
11859: PUSH
11860: LD_VAR 0 14
11864: PPUSH
11865: LD_VAR 0 23
11869: PPUSH
11870: CALL_OW 296
11874: LESS
11875: IFFALSE 11893
// begin ComAttackUnit ( i , target1 ) ;
11877: LD_VAR 0 14
11881: PPUSH
11882: LD_VAR 0 22
11886: PPUSH
11887: CALL_OW 115
// end else
11891: GO 11907
// begin ComAttackUnit ( i , target2 ) ;
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 115
// end ; end ;
11907: GO 11726
11909: POP
11910: POP
// until soldiersOK_list = [ ] ;
11911: LD_VAR 0 19
11915: PUSH
11916: EMPTY
11917: EQUAL
11918: IFFALSE 11284
// end ; if strategy = 2 then
11920: LD_VAR 0 12
11924: PUSH
11925: LD_INT 2
11927: EQUAL
11928: IFFALSE 12633
// begin repeat wait ( 0 0$1 ) ;
11930: LD_INT 35
11932: PPUSH
11933: CALL_OW 67
// for i in soldiersOK_list do
11937: LD_ADDR_VAR 0 14
11941: PUSH
11942: LD_VAR 0 19
11946: PUSH
11947: FOR_IN
11948: IFFALSE 11982
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11950: LD_VAR 0 14
11954: PPUSH
11955: LD_INT 117
11957: PPUSH
11958: LD_INT 97
11960: PPUSH
11961: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11965: LD_VAR 0 14
11969: PPUSH
11970: LD_INT 94
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: CALL_OW 174
// end ;
11980: GO 11947
11982: POP
11983: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11984: LD_INT 14
11986: PPUSH
11987: LD_INT 22
11989: PUSH
11990: LD_VAR 0 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 70
12003: PUSH
12004: LD_INT 0
12006: GREATER
12007: IFFALSE 11930
// repeat wait ( 0 0$3 ) ;
12009: LD_INT 105
12011: PPUSH
12012: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12016: LD_ADDR_VAR 0 17
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_VAR 0 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 24
12041: PUSH
12042: LD_INT 550
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: LD_INT 250
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12077: LD_ADDR_VAR 0 19
12081: PUSH
12082: LD_INT 22
12084: PUSH
12085: LD_VAR 0 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 1
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 25
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 9
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 24
12146: PUSH
12147: LD_INT 1000
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: ST_TO_ADDR
// if medicCount > 0 then
12164: LD_VAR 0 7
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: IFFALSE 12246
// begin if damageUnit_list > 0 then
12174: LD_VAR 0 17
12178: PUSH
12179: LD_INT 0
12181: GREATER
12182: IFFALSE 12246
// begin for i in damageUnit_list do
12184: LD_ADDR_VAR 0 14
12188: PUSH
12189: LD_VAR 0 17
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12244
// begin ComMoveToArea ( i , healArea ) ;
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 10
12206: PPUSH
12207: CALL_OW 113
// for j in medic_list do
12211: LD_ADDR_VAR 0 15
12215: PUSH
12216: LD_VAR 0 18
12220: PUSH
12221: FOR_IN
12222: IFFALSE 12240
// AddComHeal ( j , i ) ;
12224: LD_VAR 0 15
12228: PPUSH
12229: LD_VAR 0 14
12233: PPUSH
12234: CALL_OW 188
12238: GO 12221
12240: POP
12241: POP
// end ;
12242: GO 12194
12244: POP
12245: POP
// end ; end ; for i in soldiersOK_list do
12246: LD_ADDR_VAR 0 14
12250: PUSH
12251: LD_VAR 0 19
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12433
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12259: LD_ADDR_VAR 0 22
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_VAR 0 11
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: PPUSH
12281: LD_VAR 0 14
12285: PPUSH
12286: CALL_OW 74
12290: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12291: LD_ADDR_VAR 0 23
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_VAR 0 11
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 2
12310: PUSH
12311: LD_INT 59
12313: PUSH
12314: EMPTY
12315: LIST
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 21
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PPUSH
12355: LD_VAR 0 14
12359: PPUSH
12360: CALL_OW 74
12364: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12365: LD_VAR 0 14
12369: PPUSH
12370: LD_VAR 0 22
12374: PPUSH
12375: CALL_OW 296
12379: PUSH
12380: LD_INT 8
12382: PLUS
12383: PUSH
12384: LD_VAR 0 14
12388: PPUSH
12389: LD_VAR 0 23
12393: PPUSH
12394: CALL_OW 296
12398: LESS
12399: IFFALSE 12417
// begin ComAttackUnit ( i , target1 ) ;
12401: LD_VAR 0 14
12405: PPUSH
12406: LD_VAR 0 22
12410: PPUSH
12411: CALL_OW 115
// end else
12415: GO 12431
// begin ComAttackUnit ( i , target2 ) ;
12417: LD_VAR 0 14
12421: PPUSH
12422: LD_VAR 0 23
12426: PPUSH
12427: CALL_OW 115
// end ; end ;
12431: GO 12256
12433: POP
12434: POP
// for i in soldiersOK_list do
12435: LD_ADDR_VAR 0 14
12439: PUSH
12440: LD_VAR 0 19
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12622
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12448: LD_ADDR_VAR 0 22
12452: PUSH
12453: LD_INT 22
12455: PUSH
12456: LD_VAR 0 11
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: PPUSH
12470: LD_VAR 0 14
12474: PPUSH
12475: CALL_OW 74
12479: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12480: LD_ADDR_VAR 0 23
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_VAR 0 11
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: LD_INT 59
12502: PUSH
12503: EMPTY
12504: LIST
12505: PUSH
12506: LD_INT 21
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 21
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: PPUSH
12544: LD_VAR 0 14
12548: PPUSH
12549: CALL_OW 74
12553: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12554: LD_VAR 0 14
12558: PPUSH
12559: LD_VAR 0 22
12563: PPUSH
12564: CALL_OW 296
12568: PUSH
12569: LD_INT 8
12571: PLUS
12572: PUSH
12573: LD_VAR 0 14
12577: PPUSH
12578: LD_VAR 0 23
12582: PPUSH
12583: CALL_OW 296
12587: LESS
12588: IFFALSE 12606
// begin ComAttackUnit ( i , target1 ) ;
12590: LD_VAR 0 14
12594: PPUSH
12595: LD_VAR 0 22
12599: PPUSH
12600: CALL_OW 115
// end else
12604: GO 12620
// begin ComAttackUnit ( i , target2 ) ;
12606: LD_VAR 0 14
12610: PPUSH
12611: LD_VAR 0 23
12615: PPUSH
12616: CALL_OW 115
// end ; end ;
12620: GO 12445
12622: POP
12623: POP
// until soldiersOK_list = [ ] ;
12624: LD_VAR 0 19
12628: PUSH
12629: EMPTY
12630: EQUAL
12631: IFFALSE 12009
// end ; end ; end_of_file
12633: LD_VAR 0 13
12637: RET
// every 0 0$01 do
12638: GO 12640
12640: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12641: LD_INT 22
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PPUSH
12665: CALL_OW 69
12669: PUSH
12670: LD_INT 0
12672: EQUAL
12673: IFFALSE 12687
// SetClass ( JMM , 2 ) ;
12675: LD_EXP 1
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12687: LD_STRING M1
12689: PPUSH
12690: CALL_OW 337
// case difficulty of 1 :
12694: LD_OWVAR 67
12698: PUSH
12699: LD_INT 1
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12717
12707: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12708: LD_STRING M1-1
12710: PPUSH
12711: CALL_OW 337
12715: GO 12754
12717: LD_INT 2
12719: DOUBLE
12720: EQUAL
12721: IFTRUE 12725
12723: GO 12735
12725: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12726: LD_STRING M1-2
12728: PPUSH
12729: CALL_OW 337
12733: GO 12754
12735: LD_INT 3
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12753
12743: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12744: LD_STRING M1-3
12746: PPUSH
12747: CALL_OW 337
12751: GO 12754
12753: POP
// ChangeMissionObjectives ( M1cont ) ;
12754: LD_STRING M1cont
12756: PPUSH
12757: CALL_OW 337
// SaveForQuickRestart ;
12761: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12765: LD_INT 525
12767: PPUSH
12768: LD_INT 700
12770: PPUSH
12771: CALL_OW 12
12775: PPUSH
12776: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 82
12785: PPUSH
12786: LD_INT 38
12788: PPUSH
12789: LD_INT 10
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 56
// wait ( 0 0$14 ) ;
12799: LD_INT 490
12801: PPUSH
12802: CALL_OW 67
// firstCrateSpawn := true ;
12806: LD_ADDR_EXP 41
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// end ;
12814: END
// every 0 0$02 trigger firstCrateSpawn do
12815: LD_EXP 41
12819: IFFALSE 13182
12821: GO 12823
12823: DISABLE
// begin if IsOk ( Lisa ) then
12824: LD_EXP 2
12828: PPUSH
12829: CALL_OW 302
12833: IFFALSE 12849
// Say ( Lisa , DR0-Lisa-1 ) else
12835: LD_EXP 2
12839: PPUSH
12840: LD_STRING DR0-Lisa-1
12842: PPUSH
12843: CALL_OW 88
12847: GO 12995
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12849: LD_INT 22
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 26
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: LD_INT 25
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 25
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 25
12914: PUSH
12915: LD_INT 4
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: PUSH
12940: LD_EXP 1
12944: PUSH
12945: LD_EXP 8
12949: PUSH
12950: LD_EXP 5
12954: PUSH
12955: LD_EXP 6
12959: PUSH
12960: LD_EXP 7
12964: PUSH
12965: LD_EXP 4
12969: PUSH
12970: LD_EXP 3
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: DIFF
12984: PPUSH
12985: LD_STRING DR0-Sol1-1
12987: PPUSH
12988: LD_STRING DR0-Sol1-1
12990: PPUSH
12991: CALL 6031 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12995: LD_INT 22
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 26
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: LD_INT 25
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 3
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 4
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PUSH
13086: LD_EXP 1
13090: PUSH
13091: LD_EXP 8
13095: PUSH
13096: LD_EXP 5
13100: PUSH
13101: LD_EXP 2
13105: PUSH
13106: LD_EXP 6
13110: PUSH
13111: LD_EXP 7
13115: PUSH
13116: LD_EXP 4
13120: PUSH
13121: LD_EXP 3
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: DIFF
13136: PPUSH
13137: LD_STRING DR0-Sol2-1
13139: PPUSH
13140: LD_STRING DR0-Sol2-1
13142: PPUSH
13143: CALL 6031 0 3
// if IsOk ( Cyrus ) then
13147: LD_EXP 4
13151: PPUSH
13152: CALL_OW 302
13156: IFFALSE 13170
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13158: LD_EXP 4
13162: PPUSH
13163: LD_STRING DR0-Cyrus-1
13165: PPUSH
13166: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13170: LD_EXP 1
13174: PPUSH
13175: LD_STRING DR0-JMM-1
13177: PPUSH
13178: CALL_OW 88
// end ;
13182: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13183: LD_EXP 5
13187: PPUSH
13188: CALL_OW 302
13192: PUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 25
13205: PUSH
13206: LD_INT 16
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: PUSH
13222: LD_INT 0
13224: GREATER
13225: AND
13226: PUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 463
13234: NOT
13235: AND
13236: IFFALSE 13514
13238: GO 13240
13240: DISABLE
// begin DialogueOn ;
13241: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13245: LD_EXP 5
13249: PPUSH
13250: LD_STRING D10-Frank-1
13252: PPUSH
13253: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13257: LD_INT 22
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 25
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 25
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: PUSH
13337: LD_EXP 1
13341: PUSH
13342: LD_EXP 5
13346: PUSH
13347: LD_EXP 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: DIFF
13357: PPUSH
13358: LD_STRING D10-Sol1-1
13360: PPUSH
13361: LD_STRING D10-FSol1-1
13363: PPUSH
13364: CALL 6031 0 3
// Say ( Frank , D10-Frank-2 ) ;
13368: LD_EXP 5
13372: PPUSH
13373: LD_STRING D10-Frank-2
13375: PPUSH
13376: CALL_OW 88
// if IsOK ( Lisa ) then
13380: LD_EXP 2
13384: PPUSH
13385: CALL_OW 302
13389: IFFALSE 13405
// begin Say ( Lisa , D10-Lisa-2 ) ;
13391: LD_EXP 2
13395: PPUSH
13396: LD_STRING D10-Lisa-2
13398: PPUSH
13399: CALL_OW 88
// end else
13403: GO 13510
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13405: LD_INT 22
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 3
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_EXP 1
13489: PUSH
13490: LD_EXP 5
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: DIFF
13499: PPUSH
13500: LD_STRING D10-Sol1-2
13502: PPUSH
13503: LD_STRING D10-FSol1-2
13505: PPUSH
13506: CALL 6031 0 3
// end ; DialogueOff ;
13510: CALL_OW 7
// end ;
13514: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 463
13522: NOT
13523: IFFALSE 13786
13525: GO 13527
13527: DISABLE
// begin HarrisonSupport ;
13528: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13532: LD_EXP 17
13536: PPUSH
13537: CALL_OW 310
13541: PPUSH
13542: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13546: LD_EXP 17
13550: PPUSH
13551: LD_STRING DEng-Eng1-1
13553: PPUSH
13554: CALL_OW 88
// wait ( 1 1$0 ) ;
13558: LD_INT 2100
13560: PPUSH
13561: CALL_OW 67
// DialogueOn ;
13565: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13569: LD_EXP 14
13573: PPUSH
13574: LD_STRING DRem-Har-1
13576: PPUSH
13577: CALL_OW 94
// if contactWithRussian = 1 then
13581: LD_EXP 22
13585: PUSH
13586: LD_INT 1
13588: EQUAL
13589: IFFALSE 13605
// begin Say ( JMM , DRem-JMM-1 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING DRem-JMM-1
13598: PPUSH
13599: CALL_OW 88
// end else
13603: GO 13617
// begin Say ( JMM , DRem-JMM-1a ) ;
13605: LD_EXP 1
13609: PPUSH
13610: LD_STRING DRem-JMM-1a
13612: PPUSH
13613: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13617: LD_EXP 14
13621: PPUSH
13622: LD_STRING DRem-Har-2
13624: PPUSH
13625: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13629: LD_STRING DenisInDelta
13631: PPUSH
13632: LD_INT 0
13634: PPUSH
13635: CALL_OW 30
13639: PUSH
13640: LD_INT 1
13642: EQUAL
13643: IFFALSE 13659
// begin Say ( JMM , DRem-JMM-2 ) ;
13645: LD_EXP 1
13649: PPUSH
13650: LD_STRING DRem-JMM-2
13652: PPUSH
13653: CALL_OW 88
// end else
13657: GO 13671
// begin Say ( JMM , DRem-JMM-2a ) ;
13659: LD_EXP 1
13663: PPUSH
13664: LD_STRING DRem-JMM-2a
13666: PPUSH
13667: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13671: LD_EXP 14
13675: PPUSH
13676: LD_STRING DRem-Har-3
13678: PPUSH
13679: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING DRem-JMM-3
13690: PPUSH
13691: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13695: LD_EXP 14
13699: PPUSH
13700: LD_STRING DRem-Har-4
13702: PPUSH
13703: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13707: LD_STRING DenisInDelta
13709: PPUSH
13710: LD_INT 0
13712: PPUSH
13713: CALL_OW 30
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: IFFALSE 13749
// begin Say ( JMM , DRem-JMM-4 ) ;
13723: LD_EXP 1
13727: PPUSH
13728: LD_STRING DRem-JMM-4
13730: PPUSH
13731: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13735: LD_EXP 14
13739: PPUSH
13740: LD_STRING DRem-Har-5
13742: PPUSH
13743: CALL_OW 94
// end else
13747: GO 13782
// begin SetRestrict ( 36 , 1 , true ) ;
13749: LD_INT 36
13751: PPUSH
13752: LD_INT 1
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13762: LD_INT 15
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13775: LD_STRING MR
13777: PPUSH
13778: CALL_OW 337
// end ; DialogueOff ;
13782: CALL_OW 7
// end ;
13786: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13787: LD_STRING DenisInDelta
13789: PPUSH
13790: LD_INT 0
13792: PPUSH
13793: CALL_OW 30
13797: PUSH
13798: LD_INT 1
13800: EQUAL
13801: PUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 463
13809: NOT
13810: AND
13811: IFFALSE 14044
13813: GO 13815
13815: DISABLE
13816: LD_INT 0
13818: PPUSH
// begin PrepareDenis ;
13819: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
13823: LD_EXP 9
13827: PPUSH
13828: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 69
13851: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13852: LD_EXP 9
13856: PPUSH
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_EXP 9
13866: PPUSH
13867: CALL_OW 74
13871: PPUSH
13872: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13876: LD_INT 35
13878: PPUSH
13879: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13883: LD_INT 22
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 91
13895: PUSH
13896: LD_EXP 9
13900: PUSH
13901: LD_INT 10
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: IFFALSE 13876
// SetSide ( Denis , 1 ) ;
13919: LD_EXP 9
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 235
// DialogueOn ;
13931: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13935: LD_EXP 9
13939: PPUSH
13940: LD_STRING DDen-Den-1
13942: PPUSH
13943: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13947: LD_EXP 1
13951: PPUSH
13952: LD_STRING DDen-JMM-1
13954: PPUSH
13955: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13959: LD_EXP 9
13963: PPUSH
13964: LD_STRING DDen-Den-2
13966: PPUSH
13967: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13971: LD_EXP 1
13975: PPUSH
13976: LD_STRING DDen-JMM-2
13978: PPUSH
13979: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13983: LD_EXP 9
13987: PPUSH
13988: LD_STRING DDen-Den-3
13990: PPUSH
13991: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13995: LD_EXP 1
13999: PPUSH
14000: LD_STRING DDen-JMM-3
14002: PPUSH
14003: CALL_OW 88
// DialogueOff ;
14007: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14011: LD_INT 36
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14024: LD_INT 15
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_INT 1
14032: PPUSH
14033: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14037: LD_STRING MR
14039: PPUSH
14040: CALL_OW 337
// end ;
14044: PPOPN 1
14046: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14047: CALL 14102 0 0
14051: PUSH
14052: LD_EXP 9
14056: PPUSH
14057: CALL_OW 302
14061: AND
14062: PUSH
14063: LD_INT 1
14065: PPUSH
14066: CALL_OW 463
14070: NOT
14071: AND
14072: IFFALSE 14101
14074: GO 14076
14076: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14077: LD_EXP 9
14081: PPUSH
14082: LD_STRING DR1-Den-1
14084: PPUSH
14085: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14089: LD_EXP 1
14093: PPUSH
14094: LD_STRING DR1-JMM-1
14096: PPUSH
14097: CALL_OW 88
// end ;
14101: END
// function CheckOptoLab ; var i ; begin
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
// result = false ;
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 0
14113: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14114: LD_ADDR_VAR 0 2
14118: PUSH
14119: LD_INT 22
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 7
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 30
14144: PUSH
14145: LD_INT 8
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PPUSH
14161: CALL_OW 69
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14219
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14169: LD_VAR 0 2
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 268
14181: PUSH
14182: LD_INT 15
14184: EQUAL
14185: PUSH
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: CALL_OW 268
14198: PUSH
14199: LD_INT 15
14201: EQUAL
14202: OR
14203: IFFALSE 14215
// begin result = true ;
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: LD_INT 1
14212: ST_TO_ADDR
// break ;
14213: GO 14219
// end ; break ;
14215: GO 14219
// end ;
14217: GO 14166
14219: POP
14220: POP
// end ;
14221: LD_VAR 0 1
14225: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14226: LD_INT 15
14228: PPUSH
14229: LD_INT 1
14231: PPUSH
14232: CALL_OW 321
14236: PUSH
14237: LD_INT 2
14239: EQUAL
14240: PUSH
14241: LD_EXP 9
14245: PPUSH
14246: CALL_OW 302
14250: AND
14251: PUSH
14252: LD_INT 1
14254: PPUSH
14255: CALL_OW 463
14259: NOT
14260: AND
14261: IFFALSE 14493
14263: GO 14265
14265: DISABLE
// begin DialogueOn ;
14266: CALL_OW 6
// if IsOK ( Denis ) then
14270: LD_EXP 9
14274: PPUSH
14275: CALL_OW 302
14279: IFFALSE 14295
// begin Say ( Denis , DR2-Den-1 ) ;
14281: LD_EXP 9
14285: PPUSH
14286: LD_STRING DR2-Den-1
14288: PPUSH
14289: CALL_OW 88
// end else
14293: GO 14354
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14295: LD_INT 22
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 21
14307: PUSH
14308: LD_INT 1
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 25
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: PUSH
14335: LD_EXP 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: DIFF
14343: PPUSH
14344: LD_STRING DR2-Sci1-1
14346: PPUSH
14347: LD_STRING DR2-FSci1-1
14349: PPUSH
14350: CALL 6031 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14354: LD_EXP 1
14358: PPUSH
14359: LD_STRING DR2-JMM-1
14361: PPUSH
14362: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14366: LD_INT 22
14368: PUSH
14369: LD_INT 1
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 1
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 25
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 25
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 25
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: PUSH
14446: LD_EXP 1
14450: PUSH
14451: LD_EXP 9
14455: PUSH
14456: LD_EXP 8
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: DIFF
14466: PPUSH
14467: LD_STRING DR2-Sol1-1
14469: PPUSH
14470: LD_STRING DR2-Sol1-11
14472: PPUSH
14473: CALL 6031 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14477: LD_EXP 1
14481: PPUSH
14482: LD_STRING DR2-JMM-2
14484: PPUSH
14485: CALL_OW 88
// DialogueOff ;
14489: CALL_OW 7
// end ;
14493: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14494: LD_INT 22
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 30
14506: PUSH
14507: LD_INT 36
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: PUSH
14523: LD_INT 0
14525: EQUAL
14526: PUSH
14527: LD_INT 22
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 21
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 33
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: PPUSH
14562: CALL_OW 69
14566: PUSH
14567: LD_INT 0
14569: GREATER
14570: AND
14571: PUSH
14572: LD_EXP 23
14576: PUSH
14577: LD_INT 0
14579: EQUAL
14580: AND
14581: PUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 463
14589: NOT
14590: AND
14591: IFFALSE 14717
14593: GO 14595
14595: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14596: LD_INT 22
14598: PUSH
14599: LD_INT 1
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 21
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 69
14635: PUSH
14636: LD_EXP 1
14640: PUSH
14641: LD_EXP 6
14645: PUSH
14646: LD_EXP 7
14650: PUSH
14651: LD_EXP 9
14655: PUSH
14656: LD_EXP 15
14660: PUSH
14661: LD_EXP 3
14665: PUSH
14666: LD_EXP 4
14670: PUSH
14671: LD_EXP 2
14675: PUSH
14676: LD_EXP 5
14680: PUSH
14681: LD_EXP 8
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: DIFF
14698: PPUSH
14699: LD_STRING D3a-Mech1-1
14701: PPUSH
14702: LD_STRING D3a-Mech1-1
14704: PPUSH
14705: CALL 6031 0 3
// firstTower = 2 ;
14709: LD_ADDR_EXP 23
14713: PUSH
14714: LD_INT 2
14716: ST_TO_ADDR
// end ;
14717: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14718: LD_INT 22
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 69
14746: PUSH
14747: LD_INT 0
14749: EQUAL
14750: IFFALSE 14865
14752: GO 14754
14754: DISABLE
14755: LD_INT 0
14757: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14758: LD_ADDR_VAR 0 1
14762: PUSH
14763: LD_INT 22
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 21
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: LD_INT 25
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 25
14798: PUSH
14799: LD_INT 2
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 25
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 25
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: PUSH
14843: FOR_IN
14844: IFFALSE 14863
// AddExperience ( i , 1 , 10000 ) ;
14846: LD_VAR 0 1
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: LD_INT 10000
14856: PPUSH
14857: CALL_OW 492
14861: GO 14843
14863: POP
14864: POP
// end ;
14865: PPOPN 1
14867: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14868: LD_INT 22
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 36
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: PUSH
14897: LD_INT 0
14899: GREATER
14900: PUSH
14901: LD_INT 22
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 21
14913: PUSH
14914: LD_INT 2
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 33
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 69
14940: PUSH
14941: LD_INT 0
14943: GREATER
14944: AND
14945: PUSH
14946: CALL 15538 0 0
14950: AND
14951: PUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 463
14959: NOT
14960: AND
14961: IFFALSE 15535
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: LD_INT 22
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 30
14990: PUSH
14991: LD_INT 36
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15007: LD_ADDR_VAR 0 4
15011: PUSH
15012: LD_INT 22
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 21
15024: PUSH
15025: LD_INT 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 33
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: PPUSH
15047: CALL_OW 69
15051: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15052: LD_ADDR_VAR 0 5
15056: PUSH
15057: EMPTY
15058: ST_TO_ADDR
// for i in tmpControlTowers do
15059: LD_ADDR_VAR 0 1
15063: PUSH
15064: LD_VAR 0 3
15068: PUSH
15069: FOR_IN
15070: IFFALSE 15533
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15072: LD_EXP 1
15076: PPUSH
15077: CALL_OW 310
15081: PUSH
15082: LD_VAR 0 1
15086: EQUAL
15087: PUSH
15088: LD_EXP 1
15092: PPUSH
15093: CALL_OW 257
15097: PUSH
15098: LD_INT 3
15100: EQUAL
15101: AND
15102: IFFALSE 15232
// begin InGameOn ;
15104: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15108: LD_VAR 0 4
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15121: LD_EXP 1
15125: PPUSH
15126: LD_STRING D4a-JMM-1
15128: PPUSH
15129: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15133: LD_VAR 0 4
15137: PUSH
15138: LD_INT 1
15140: ARRAY
15141: PPUSH
15142: LD_EXP 1
15146: PPUSH
15147: CALL_OW 53
// wait ( 0 0$1 ) ;
15151: LD_INT 35
15153: PPUSH
15154: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15158: LD_VAR 0 4
15162: PUSH
15163: LD_INT 1
15165: ARRAY
15166: PPUSH
15167: LD_VAR 0 4
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 250
15180: PUSH
15181: LD_INT 3
15183: PLUS
15184: PPUSH
15185: LD_VAR 0 4
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: CALL_OW 251
15198: PUSH
15199: LD_INT 2
15201: MINUS
15202: PPUSH
15203: CALL_OW 111
// wait ( 0 0$2 ) ;
15207: LD_INT 70
15209: PPUSH
15210: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15214: LD_EXP 1
15218: PPUSH
15219: LD_STRING D4b-JMM-1
15221: PPUSH
15222: CALL_OW 88
// InGameOff ;
15226: CALL_OW 9
// end else
15230: GO 15531
// begin InGameOn ;
15232: CALL_OW 8
// for j in UnitsInside ( i ) do
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 313
15250: PUSH
15251: FOR_IN
15252: IFFALSE 15287
// if GetClass ( j ) = 3 then
15254: LD_VAR 0 2
15258: PPUSH
15259: CALL_OW 257
15263: PUSH
15264: LD_INT 3
15266: EQUAL
15267: IFFALSE 15285
// tmpMechanicInside = tmpMechanicInside ^ j ;
15269: LD_ADDR_VAR 0 5
15273: PUSH
15274: LD_VAR 0 5
15278: PUSH
15279: LD_VAR 0 2
15283: ADD
15284: ST_TO_ADDR
15285: GO 15251
15287: POP
15288: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15289: LD_VAR 0 5
15293: PUSH
15294: LD_INT 1
15296: ARRAY
15297: PPUSH
15298: CALL_OW 258
15302: PUSH
15303: LD_INT 1
15305: EQUAL
15306: IFFALSE 15324
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15308: LD_VAR 0 5
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PPUSH
15317: LD_STRING D4a-Mech1-1
15319: PPUSH
15320: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15324: LD_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ARRAY
15332: PPUSH
15333: CALL_OW 258
15337: PUSH
15338: LD_INT 2
15340: EQUAL
15341: IFFALSE 15359
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15343: LD_VAR 0 5
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: LD_STRING D4a-FMech1-1
15354: PPUSH
15355: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15359: LD_VAR 0 4
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: PPUSH
15368: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15372: LD_VAR 0 4
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: LD_VAR 0 5
15385: PUSH
15386: LD_INT 1
15388: ARRAY
15389: PPUSH
15390: CALL_OW 53
// wait ( 0 0$1 ) ;
15394: LD_INT 35
15396: PPUSH
15397: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15401: LD_VAR 0 4
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: LD_VAR 0 4
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: CALL_OW 250
15423: PUSH
15424: LD_INT 3
15426: PLUS
15427: PPUSH
15428: LD_VAR 0 4
15432: PUSH
15433: LD_INT 1
15435: ARRAY
15436: PPUSH
15437: CALL_OW 251
15441: PUSH
15442: LD_INT 2
15444: MINUS
15445: PPUSH
15446: CALL_OW 111
// wait ( 0 0$2 ) ;
15450: LD_INT 70
15452: PPUSH
15453: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15457: LD_VAR 0 5
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: CALL_OW 258
15470: PUSH
15471: LD_INT 1
15473: EQUAL
15474: IFFALSE 15492
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15476: LD_VAR 0 5
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: LD_STRING D4b-Mech1-1
15487: PPUSH
15488: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15492: LD_VAR 0 5
15496: PUSH
15497: LD_INT 1
15499: ARRAY
15500: PPUSH
15501: CALL_OW 258
15505: PUSH
15506: LD_INT 2
15508: EQUAL
15509: IFFALSE 15527
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15511: LD_VAR 0 5
15515: PUSH
15516: LD_INT 1
15518: ARRAY
15519: PPUSH
15520: LD_STRING D4b-FMech1-1
15522: PPUSH
15523: CALL_OW 88
// InGameOff ;
15527: CALL_OW 9
// end ; end ;
15531: GO 15069
15533: POP
15534: POP
// end ;
15535: PPOPN 5
15537: END
// function CheckMehInside ; var i , j ; begin
15538: LD_INT 0
15540: PPUSH
15541: PPUSH
15542: PPUSH
// result = false ;
15543: LD_ADDR_VAR 0 1
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15551: LD_ADDR_VAR 0 2
15555: PUSH
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 30
15568: PUSH
15569: LD_INT 36
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15637
// begin for j in UnitsInside ( i ) do
15588: LD_ADDR_VAR 0 3
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 313
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15633
// begin if GetClass ( j ) = 3 then
15606: LD_VAR 0 3
15610: PPUSH
15611: CALL_OW 257
15615: PUSH
15616: LD_INT 3
15618: EQUAL
15619: IFFALSE 15631
// begin result = true ;
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// break ;
15629: GO 15633
// end ; end ;
15631: GO 15603
15633: POP
15634: POP
// end ;
15635: GO 15585
15637: POP
15638: POP
// end ;
15639: LD_VAR 0 1
15643: RET
// every 25 25$0 do
15644: GO 15646
15646: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15647: LD_INT 35
15649: PPUSH
15650: CALL_OW 67
// until not InBattle ( 1 ) ;
15654: LD_INT 1
15656: PPUSH
15657: CALL_OW 463
15661: NOT
15662: IFFALSE 15647
// PrepareKurt ;
15664: CALL 19242 0 0
// end ;
15668: END
// every 35 35$0 do
15669: GO 15671
15671: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15672: LD_INT 35
15674: PPUSH
15675: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 463
15686: NOT
15687: PUSH
15688: LD_INT 32
15690: PPUSH
15691: LD_INT 81
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 70
15705: NOT
15706: AND
15707: IFFALSE 15672
// PrepareJoan ;
15709: CALL 3016 0 0
// wait ( 1 1$0 ) ;
15713: LD_INT 2100
15715: PPUSH
15716: CALL_OW 67
// if IsOK ( Lisa ) then
15720: LD_EXP 2
15724: PPUSH
15725: CALL_OW 302
15729: IFFALSE 15859
// begin DialogueOn ;
15731: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15735: LD_EXP 2
15739: PPUSH
15740: LD_STRING D7-Lisa-1
15742: PPUSH
15743: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15747: LD_EXP 1
15751: PPUSH
15752: LD_STRING D7-JMM-1
15754: PPUSH
15755: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15759: LD_EXP 2
15763: PPUSH
15764: LD_STRING D7-Lisa-2
15766: PPUSH
15767: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15771: LD_EXP 1
15775: PPUSH
15776: LD_STRING D7-JMM-2
15778: PPUSH
15779: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15783: LD_EXP 2
15787: PPUSH
15788: LD_STRING D7-Lisa-3
15790: PPUSH
15791: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D7-JMM-3
15802: PPUSH
15803: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15807: LD_EXP 2
15811: PPUSH
15812: LD_STRING D7-Lisa-4
15814: PPUSH
15815: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D7-JMM-4
15826: PPUSH
15827: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15831: LD_EXP 1
15835: PPUSH
15836: LD_STRING D7-JMM-4a
15838: PPUSH
15839: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15843: LD_EXP 2
15847: PPUSH
15848: LD_STRING D7-Lisa-5
15850: PPUSH
15851: CALL_OW 88
// DialogueOff ;
15855: CALL_OW 7
// end ; end ;
15859: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15860: LD_EXP 13
15864: PUSH
15865: LD_INT 22
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 91
15877: PUSH
15878: LD_EXP 13
15882: PUSH
15883: LD_INT 10
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 25
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 25
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 25
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 25
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: PUSH
15951: LD_INT 1
15953: GREATER
15954: AND
15955: IFFALSE 15972
15957: GO 15959
15959: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15960: LD_EXP 13
15964: PPUSH
15965: LD_STRING D5-Sol1-1
15967: PPUSH
15968: CALL_OW 88
// end ;
15972: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15973: LD_INT 22
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 33
15985: PUSH
15986: LD_INT 2
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: PUSH
16002: LD_INT 2
16004: GREATEREQUAL
16005: IFFALSE 16025
16007: GO 16009
16009: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16010: LD_STRING MRa
16012: PPUSH
16013: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16017: LD_ADDR_EXP 28
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// end ;
16025: END
// every 0 0$10 do var i , last ;
16026: GO 16028
16028: DISABLE
16029: LD_INT 0
16031: PPUSH
16032: PPUSH
// begin last := 7 ;
16033: LD_ADDR_VAR 0 2
16037: PUSH
16038: LD_INT 7
16040: ST_TO_ADDR
// for i = 1 to last do
16041: LD_ADDR_VAR 0 1
16045: PUSH
16046: DOUBLE
16047: LD_INT 1
16049: DEC
16050: ST_TO_ADDR
16051: LD_VAR 0 2
16055: PUSH
16056: FOR_TO
16057: IFFALSE 16085
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16059: LD_INT 6300
16061: PPUSH
16062: LD_INT 14700
16064: PPUSH
16065: CALL_OW 12
16069: PPUSH
16070: CALL_OW 67
// PrepareRandoms ( i ) ;
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL 4052 0 1
// end ;
16083: GO 16056
16085: POP
16086: POP
// end ;
16087: PPOPN 2
16089: END
// every 5 5$20 do
16090: GO 16092
16092: DISABLE
// begin DialogueOn ;
16093: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16097: LD_EXP 10
16101: PPUSH
16102: LD_STRING D12a-Sci-1
16104: PPUSH
16105: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16109: LD_EXP 1
16113: PPUSH
16114: LD_STRING D12a-JMM-1
16116: PPUSH
16117: CALL_OW 88
// DialogueOff ;
16121: CALL_OW 7
// cratesStatus = 1 ;
16125: LD_ADDR_EXP 38
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// end ;
16133: END
// every 13 13$0 do
16134: GO 16136
16136: DISABLE
// begin DialogueOn ;
16137: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16141: LD_EXP 10
16145: PPUSH
16146: LD_STRING D12b-Sci-1
16148: PPUSH
16149: CALL_OW 94
// DialogueOff ;
16153: CALL_OW 7
// cratesStatus = 2 ;
16157: LD_ADDR_EXP 38
16161: PUSH
16162: LD_INT 2
16164: ST_TO_ADDR
// end ;
16165: END
// every 32 32$0 do
16166: GO 16168
16168: DISABLE
// begin DialogueOn ;
16169: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16173: LD_EXP 10
16177: PPUSH
16178: LD_STRING D12c-Sci-1
16180: PPUSH
16181: CALL_OW 94
// DialogueOff ;
16185: CALL_OW 7
// wait ( 3 3$0 ) ;
16189: LD_INT 6300
16191: PPUSH
16192: CALL_OW 67
// DialogueOn ;
16196: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16200: LD_EXP 10
16204: PPUSH
16205: LD_STRING D12d-Sci-1
16207: PPUSH
16208: CALL_OW 94
// DialogueOff ;
16212: CALL_OW 7
// cratesStatus = 1 ;
16216: LD_ADDR_EXP 38
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// end ;
16224: END
// every 42 42$0 do
16225: GO 16227
16227: DISABLE
// begin DialogueOn ;
16228: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16232: LD_EXP 10
16236: PPUSH
16237: LD_STRING D12e-Sci-1
16239: PPUSH
16240: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16244: LD_EXP 1
16248: PPUSH
16249: LD_STRING D12e-JMM-1
16251: PPUSH
16252: CALL_OW 88
// DialogueOff ;
16256: CALL_OW 7
// cratesStatus = 2 ;
16260: LD_ADDR_EXP 38
16264: PUSH
16265: LD_INT 2
16267: ST_TO_ADDR
// end ;
16268: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16269: LD_INT 22
16271: PUSH
16272: LD_INT 6
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 21
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 34
16291: PUSH
16292: LD_INT 51
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: PUSH
16309: LD_INT 0
16311: GREATER
16312: IFFALSE 16395
16314: GO 16316
16316: DISABLE
16317: LD_INT 0
16319: PPUSH
// begin enable ;
16320: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16321: LD_ADDR_VAR 0 1
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_INT 6
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 2
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: PUSH
16373: FOR_IN
16374: IFFALSE 16393
// ComAgressiveMove ( i , 138 , 168 ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 138
16383: PPUSH
16384: LD_INT 168
16386: PPUSH
16387: CALL_OW 114
16391: GO 16373
16393: POP
16394: POP
// end ;
16395: PPOPN 1
16397: END
// every 0 0$1 do var i ;
16398: GO 16400
16400: DISABLE
16401: LD_INT 0
16403: PPUSH
// begin enable ;
16404: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_INT 4
16412: PPUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 22
16428: PUSH
16429: LD_INT 6
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: PPUSH
16444: CALL_OW 70
16448: PUSH
16449: FOR_IN
16450: IFFALSE 16514
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16452: LD_INT 4
16454: PPUSH
16455: LD_INT 22
16457: PUSH
16458: LD_INT 6
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 34
16467: PUSH
16468: LD_INT 51
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 70
16483: PUSH
16484: LD_INT 0
16486: GREATER
16487: IFFALSE 16503
// sendedConvoys = sendedConvoys + 1 ;
16489: LD_ADDR_EXP 39
16493: PUSH
16494: LD_EXP 39
16498: PUSH
16499: LD_INT 1
16501: PLUS
16502: ST_TO_ADDR
// RemoveUnit ( i ) ;
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 64
// end ;
16512: GO 16449
16514: POP
16515: POP
// end ; end_of_file
16516: PPOPN 1
16518: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16519: LD_VAR 0 1
16523: PUSH
16524: LD_INT 1
16526: EQUAL
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: LD_INT 3
16535: EQUAL
16536: AND
16537: IFFALSE 16547
// contactWithRussian = 1 ;
16539: LD_ADDR_EXP 22
16543: PUSH
16544: LD_INT 1
16546: ST_TO_ADDR
// end ;
16547: PPOPN 2
16549: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 36
16562: EQUAL
16563: PUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 255
16573: PUSH
16574: LD_INT 1
16576: EQUAL
16577: AND
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 21
16591: PUSH
16592: LD_INT 2
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 33
16601: PUSH
16602: LD_INT 2
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: LIST
16613: PPUSH
16614: CALL_OW 69
16618: PUSH
16619: LD_INT 0
16621: EQUAL
16622: AND
16623: PUSH
16624: LD_EXP 23
16628: PUSH
16629: LD_INT 0
16631: EQUAL
16632: AND
16633: IFFALSE 16713
// begin firstTower = 1 ;
16635: LD_ADDR_EXP 23
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16643: LD_INT 22
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 25
16665: PUSH
16666: LD_INT 3
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 26
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 69
16693: PUSH
16694: LD_EXP 1
16698: PUSH
16699: EMPTY
16700: LIST
16701: DIFF
16702: PPUSH
16703: LD_STRING D3b-Mech1-1
16705: PPUSH
16706: LD_STRING D3b-Mech1-1
16708: PPUSH
16709: CALL 6031 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 266
16722: PUSH
16723: LD_INT 0
16725: EQUAL
16726: PUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 255
16736: PUSH
16737: LD_INT 1
16739: EQUAL
16740: AND
16741: IFFALSE 16755
// SetBName ( building , theta ) ;
16743: LD_VAR 0 1
16747: PPUSH
16748: LD_STRING theta
16750: PPUSH
16751: CALL_OW 500
// if GetSide ( building ) = 3 then
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 255
16764: PUSH
16765: LD_INT 3
16767: EQUAL
16768: IFFALSE 16842
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16770: LD_ADDR_EXP 31
16774: PUSH
16775: LD_EXP 31
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 3
16787: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16788: LD_ADDR_EXP 31
16792: PUSH
16793: LD_EXP 31
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: CALL_OW 3
16805: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16806: LD_ADDR_EXP 31
16810: PUSH
16811: LD_EXP 31
16815: PPUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 3
16823: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16824: LD_ADDR_EXP 31
16828: PUSH
16829: LD_EXP 31
16833: PPUSH
16834: LD_INT 1
16836: PPUSH
16837: CALL_OW 3
16841: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 255
16851: PUSH
16852: LD_INT 3
16854: EQUAL
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 266
16865: PUSH
16866: LD_INT 0
16868: EQUAL
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 266
16879: PUSH
16880: LD_INT 2
16882: EQUAL
16883: OR
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 266
16894: PUSH
16895: LD_INT 4
16897: EQUAL
16898: OR
16899: PUSH
16900: EMPTY
16901: LIST
16902: AND
16903: IFFALSE 16914
// ComUpgrade ( building ) ;
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 255
16923: PUSH
16924: LD_INT 3
16926: EQUAL
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 266
16937: PUSH
16938: LD_INT 32
16940: EQUAL
16941: AND
16942: IFFALSE 16983
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16944: LD_VAR 0 1
16948: PPUSH
16949: LD_INT 42
16951: PUSH
16952: LD_INT 43
16954: PUSH
16955: LD_INT 44
16957: PUSH
16958: LD_INT 46
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 1
16969: PPUSH
16970: LD_INT 4
16972: PPUSH
16973: CALL_OW 12
16977: ARRAY
16978: PPUSH
16979: CALL_OW 208
// end ; end ;
16983: PPOPN 1
16985: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 22
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 23
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: IN
17031: IFFALSE 17047
// killCounter := killCounter + 1 ;
17033: LD_ADDR_EXP 47
17037: PUSH
17038: LD_EXP 47
17042: PUSH
17043: LD_INT 1
17045: PLUS
17046: ST_TO_ADDR
// if unit = JMM then
17047: LD_VAR 0 1
17051: PUSH
17052: LD_EXP 1
17056: EQUAL
17057: IFFALSE 17066
// YouLost ( JMM ) ;
17059: LD_STRING JMM
17061: PPUSH
17062: CALL_OW 104
// if unit = Joan then
17066: LD_VAR 0 1
17070: PUSH
17071: LD_EXP 15
17075: EQUAL
17076: IFFALSE 17086
// JoanStatus = 0 ;
17078: LD_ADDR_EXP 16
17082: PUSH
17083: LD_INT 0
17085: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 255
17095: PUSH
17096: LD_INT 1
17098: EQUAL
17099: PUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 247
17109: PUSH
17110: LD_INT 1
17112: EQUAL
17113: AND
17114: IFFALSE 17190
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 257
17125: PUSH
17126: LD_INT 1
17128: EQUAL
17129: PUSH
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL_OW 257
17139: PUSH
17140: LD_INT 2
17142: EQUAL
17143: OR
17144: PUSH
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 257
17154: PUSH
17155: LD_INT 3
17157: EQUAL
17158: OR
17159: PUSH
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 257
17169: PUSH
17170: LD_INT 4
17172: EQUAL
17173: OR
17174: IFFALSE 17190
// unitLost = unitLost + 1 ;
17176: LD_ADDR_EXP 30
17180: PUSH
17181: LD_EXP 30
17185: PUSH
17186: LD_INT 1
17188: PLUS
17189: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 255
17199: PUSH
17200: LD_INT 3
17202: EQUAL
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 247
17213: PUSH
17214: LD_INT 3
17216: EQUAL
17217: AND
17218: IFFALSE 17910
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 266
17229: PUSH
17230: LD_INT 31
17232: EQUAL
17233: PUSH
17234: LD_VAR 0 1
17238: PPUSH
17239: CALL_OW 266
17243: PUSH
17244: LD_INT 32
17246: EQUAL
17247: OR
17248: PUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 266
17258: PUSH
17259: LD_INT 36
17261: EQUAL
17262: OR
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 266
17273: PUSH
17274: LD_INT 0
17276: EQUAL
17277: OR
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 266
17288: PUSH
17289: LD_INT 24
17291: EQUAL
17292: OR
17293: PUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 266
17303: PUSH
17304: LD_INT 17
17306: EQUAL
17307: OR
17308: PUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 266
17318: PUSH
17319: LD_INT 25
17321: EQUAL
17322: OR
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 266
17333: PUSH
17334: LD_INT 19
17336: EQUAL
17337: OR
17338: PUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 266
17348: PUSH
17349: LD_INT 20
17351: EQUAL
17352: OR
17353: PUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 266
17363: PUSH
17364: LD_INT 18
17366: EQUAL
17367: OR
17368: PUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 266
17378: PUSH
17379: LD_INT 21
17381: EQUAL
17382: OR
17383: PUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: CALL_OW 266
17393: PUSH
17394: LD_INT 23
17396: EQUAL
17397: OR
17398: PUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 266
17408: PUSH
17409: LD_INT 16
17411: EQUAL
17412: OR
17413: PUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: CALL_OW 266
17423: PUSH
17424: LD_INT 6
17426: EQUAL
17427: OR
17428: PUSH
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 266
17438: PUSH
17439: LD_INT 29
17441: EQUAL
17442: OR
17443: PUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 266
17453: PUSH
17454: LD_INT 26
17456: EQUAL
17457: OR
17458: PUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 266
17468: PUSH
17469: LD_INT 30
17471: EQUAL
17472: OR
17473: PUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 266
17483: PUSH
17484: LD_INT 28
17486: EQUAL
17487: OR
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 266
17498: PUSH
17499: LD_INT 27
17501: EQUAL
17502: OR
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 266
17513: PUSH
17514: LD_INT 33
17516: EQUAL
17517: OR
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 266
17528: PUSH
17529: LD_INT 2
17531: EQUAL
17532: OR
17533: PUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 266
17543: PUSH
17544: LD_INT 4
17546: EQUAL
17547: OR
17548: IFFALSE 17634
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17550: LD_ADDR_EXP 31
17554: PUSH
17555: LD_EXP 31
17559: PUSH
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 266
17569: ADD
17570: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17571: LD_ADDR_EXP 31
17575: PUSH
17576: LD_EXP 31
17580: PUSH
17581: LD_VAR 0 1
17585: PPUSH
17586: CALL_OW 250
17590: ADD
17591: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17592: LD_ADDR_EXP 31
17596: PUSH
17597: LD_EXP 31
17601: PUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 251
17611: ADD
17612: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17613: LD_ADDR_EXP 31
17617: PUSH
17618: LD_EXP 31
17622: PUSH
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL_OW 254
17632: ADD
17633: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 266
17643: PUSH
17644: LD_INT 1
17646: EQUAL
17647: IFFALSE 17726
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17649: LD_ADDR_EXP 31
17653: PUSH
17654: LD_EXP 31
17658: PUSH
17659: LD_INT 0
17661: ADD
17662: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17663: LD_ADDR_EXP 31
17667: PUSH
17668: LD_EXP 31
17672: PUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 250
17682: ADD
17683: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17684: LD_ADDR_EXP 31
17688: PUSH
17689: LD_EXP 31
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 251
17703: ADD
17704: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17705: LD_ADDR_EXP 31
17709: PUSH
17710: LD_EXP 31
17714: PUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 254
17724: ADD
17725: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 266
17735: PUSH
17736: LD_INT 3
17738: EQUAL
17739: IFFALSE 17818
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17741: LD_ADDR_EXP 31
17745: PUSH
17746: LD_EXP 31
17750: PUSH
17751: LD_INT 2
17753: ADD
17754: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17755: LD_ADDR_EXP 31
17759: PUSH
17760: LD_EXP 31
17764: PUSH
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 250
17774: ADD
17775: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17776: LD_ADDR_EXP 31
17780: PUSH
17781: LD_EXP 31
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 251
17795: ADD
17796: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17797: LD_ADDR_EXP 31
17801: PUSH
17802: LD_EXP 31
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 254
17816: ADD
17817: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 266
17827: PUSH
17828: LD_INT 5
17830: EQUAL
17831: IFFALSE 17910
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17833: LD_ADDR_EXP 31
17837: PUSH
17838: LD_EXP 31
17842: PUSH
17843: LD_INT 4
17845: ADD
17846: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17847: LD_ADDR_EXP 31
17851: PUSH
17852: LD_EXP 31
17856: PUSH
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 250
17866: ADD
17867: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17868: LD_ADDR_EXP 31
17872: PUSH
17873: LD_EXP 31
17877: PUSH
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 251
17887: ADD
17888: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17889: LD_ADDR_EXP 31
17893: PUSH
17894: LD_EXP 31
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 254
17908: ADD
17909: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17910: LD_EXP 48
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 257
17924: PUSH
17925: LD_INT 3
17927: EQUAL
17928: AND
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 255
17939: PUSH
17940: LD_INT 3
17942: EQUAL
17943: AND
17944: PUSH
17945: LD_INT 21
17947: PPUSH
17948: CALL_OW 302
17952: AND
17953: PUSH
17954: LD_INT 21
17956: PPUSH
17957: CALL_OW 255
17961: PUSH
17962: LD_INT 3
17964: EQUAL
17965: AND
17966: IFFALSE 18048
// begin ruMechCounter := ruMechCounter - 1 ;
17968: LD_ADDR_EXP 48
17972: PUSH
17973: LD_EXP 48
17977: PUSH
17978: LD_INT 1
17980: MINUS
17981: ST_TO_ADDR
// uc_side = 3 ;
17982: LD_ADDR_OWVAR 20
17986: PUSH
17987: LD_INT 3
17989: ST_TO_ADDR
// uc_nation = 3 ;
17990: LD_ADDR_OWVAR 21
17994: PUSH
17995: LD_INT 3
17997: ST_TO_ADDR
// hc_gallery :=  ;
17998: LD_ADDR_OWVAR 33
18002: PUSH
18003: LD_STRING 
18005: ST_TO_ADDR
// hc_name :=  ;
18006: LD_ADDR_OWVAR 26
18010: PUSH
18011: LD_STRING 
18013: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18014: LD_INT 0
18016: PPUSH
18017: LD_EXP 34
18021: PPUSH
18022: LD_EXP 35
18026: PPUSH
18027: CALL_OW 12
18031: PPUSH
18032: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18036: CALL_OW 44
18040: PPUSH
18041: LD_INT 21
18043: PPUSH
18044: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 255
18057: PUSH
18058: LD_INT 3
18060: EQUAL
18061: PUSH
18062: LD_VAR 0 1
18066: PPUSH
18067: CALL_OW 264
18071: PUSH
18072: LD_INT 52
18074: EQUAL
18075: AND
18076: PUSH
18077: LD_INT 21
18079: PPUSH
18080: CALL_OW 302
18084: AND
18085: PUSH
18086: LD_INT 21
18088: PPUSH
18089: CALL_OW 255
18093: PUSH
18094: LD_INT 3
18096: EQUAL
18097: AND
18098: IFFALSE 18119
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18100: LD_INT 21
18102: PPUSH
18103: LD_INT 22
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: LD_INT 1
18111: PPUSH
18112: LD_INT 52
18114: PPUSH
18115: CALL_OW 125
// end ;
18119: PPOPN 1
18121: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18122: LD_INT 0
18124: PPUSH
18125: PPUSH
18126: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 264
18136: PUSH
18137: LD_INT 51
18139: EQUAL
18140: PUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 255
18150: PUSH
18151: LD_INT 3
18153: EQUAL
18154: AND
18155: IFFALSE 18217
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18157: LD_ADDR_VAR 0 5
18161: PUSH
18162: LD_INT 2
18164: PPUSH
18165: CALL_OW 274
18169: PPUSH
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 275
18177: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18178: LD_INT 2
18180: PPUSH
18181: CALL_OW 274
18185: PPUSH
18186: LD_INT 1
18188: PPUSH
18189: LD_VAR 0 5
18193: PUSH
18194: LD_INT 100
18196: MINUS
18197: PPUSH
18198: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18202: LD_VAR 0 1
18206: PPUSH
18207: LD_INT 1
18209: PPUSH
18210: LD_INT 100
18212: PPUSH
18213: CALL_OW 291
// end ; if building = rufabsupp then
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 17
18224: EQUAL
18225: IFFALSE 18239
// SetSide ( vehicle , 6 ) ;
18227: LD_VAR 0 1
18231: PPUSH
18232: LD_INT 6
18234: PPUSH
18235: CALL_OW 235
// end ;
18239: PPOPN 5
18241: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18242: LD_VAR 0 1
18246: PPUSH
18247: CALL_OW 255
18251: PUSH
18252: LD_INT 3
18254: EQUAL
18255: IFFALSE 18286
// begin tamedApemans = tamedApemans + 1 ;
18257: LD_ADDR_EXP 32
18261: PUSH
18262: LD_EXP 32
18266: PUSH
18267: LD_INT 1
18269: PLUS
18270: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_INT 106
18278: PPUSH
18279: LD_INT 85
18281: PPUSH
18282: CALL_OW 111
// end ; end ;
18286: PPOPN 2
18288: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18289: LD_INT 0
18291: PPUSH
18292: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 255
18302: PUSH
18303: LD_INT 3
18305: EQUAL
18306: PUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 247
18316: PUSH
18317: LD_INT 2
18319: EQUAL
18320: AND
18321: IFFALSE 18430
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18323: LD_VAR 0 1
18327: PPUSH
18328: CALL_OW 264
18332: PUSH
18333: LD_INT 42
18335: EQUAL
18336: PUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 264
18346: PUSH
18347: LD_INT 43
18349: EQUAL
18350: OR
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 264
18361: PUSH
18362: LD_INT 44
18364: EQUAL
18365: OR
18366: PUSH
18367: LD_VAR 0 1
18371: PPUSH
18372: CALL_OW 264
18376: PUSH
18377: LD_INT 46
18379: EQUAL
18380: OR
18381: IFFALSE 18430
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18383: LD_INT 21
18385: PPUSH
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 265
18395: PPUSH
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 262
18405: PPUSH
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 263
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: CALL_OW 264
18425: PPUSH
18426: CALL_OW 185
// end ;
18430: PPOPN 3
18432: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_INT 3
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 2
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 3
18459: EQUAL
18460: AND
18461: PUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 302
18471: AND
18472: IFFALSE 18514
// begin ComRepairVehicle ( human , vehicle ) ;
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18488: LD_VAR 0 2
18492: PPUSH
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: LD_INT 100
18509: PPUSH
18510: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 255
18523: PUSH
18524: LD_INT 3
18526: EQUAL
18527: PUSH
18528: LD_VAR 0 2
18532: PPUSH
18533: CALL_OW 255
18537: PUSH
18538: LD_INT 3
18540: EQUAL
18541: AND
18542: PUSH
18543: LD_INT 21
18545: PPUSH
18546: CALL_OW 302
18550: AND
18551: PUSH
18552: LD_VAR 0 1
18556: PPUSH
18557: CALL_OW 302
18561: NOT
18562: AND
18563: IFFALSE 18577
// ComEnterUnit ( human , rufab ) ;
18565: LD_VAR 0 2
18569: PPUSH
18570: LD_INT 21
18572: PPUSH
18573: CALL_OW 120
// end ;
18577: PPOPN 2
18579: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18580: LD_VAR 0 1
18584: PUSH
18585: LD_INT 21
18587: EQUAL
18588: PUSH
18589: LD_VAR 0 2
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: AND
18603: IFFALSE 18617
// SetLives ( human , 1000 ) ;
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_INT 1000
18612: PPUSH
18613: CALL_OW 234
// end ;
18617: PPOPN 2
18619: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL 24325 0 1
// end ; end_of_file
18629: PPOPN 1
18631: END
// every 0 0$30 trigger cratesStatus = 1 do
18632: LD_EXP 38
18636: PUSH
18637: LD_INT 1
18639: EQUAL
18640: IFFALSE 18723
18642: GO 18644
18644: DISABLE
// begin enable ;
18645: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18646: LD_INT 350
18648: PUSH
18649: LD_INT 1050
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PPUSH
18659: LD_INT 2
18661: PPUSH
18662: CALL_OW 12
18666: ARRAY
18667: PPUSH
18668: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18672: LD_INT 4
18674: PUSH
18675: LD_INT 5
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: PPUSH
18685: LD_INT 2
18687: PPUSH
18688: CALL_OW 12
18692: ARRAY
18693: PPUSH
18694: LD_INT 6
18696: PUSH
18697: LD_INT 7
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: PPUSH
18707: LD_INT 2
18709: PPUSH
18710: CALL_OW 12
18714: ARRAY
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 55
// end ;
18723: END
// every 1 1$0 trigger cratesStatus = 2 do
18724: LD_EXP 38
18728: PUSH
18729: LD_INT 2
18731: EQUAL
18732: IFFALSE 18815
18734: GO 18736
18736: DISABLE
// begin enable ;
18737: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18738: LD_INT 3150
18740: PUSH
18741: LD_INT 4550
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PPUSH
18751: LD_INT 2
18753: PPUSH
18754: CALL_OW 12
18758: ARRAY
18759: PPUSH
18760: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18764: LD_INT 2
18766: PUSH
18767: LD_INT 5
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PPUSH
18777: LD_INT 2
18779: PPUSH
18780: CALL_OW 12
18784: ARRAY
18785: PPUSH
18786: LD_INT 6
18788: PUSH
18789: LD_INT 7
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PPUSH
18799: LD_INT 2
18801: PPUSH
18802: CALL_OW 12
18806: ARRAY
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 55
// end ;
18815: END
// every 0 0$30 + 0 0$10 do
18816: GO 18818
18818: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18819: LD_INT 4
18821: PUSH
18822: LD_INT 5
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_INT 2
18834: PPUSH
18835: CALL_OW 12
18839: ARRAY
18840: PPUSH
18841: LD_INT 7
18843: PPUSH
18844: LD_INT 1
18846: PPUSH
18847: CALL_OW 55
// Wait ( 0 0$15 ) ;
18851: LD_INT 525
18853: PPUSH
18854: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18858: LD_INT 4
18860: PUSH
18861: LD_INT 5
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_INT 2
18873: PPUSH
18874: CALL_OW 12
18878: ARRAY
18879: PPUSH
18880: LD_INT 7
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 55
// Wait ( 0 0$20 ) ;
18890: LD_INT 700
18892: PPUSH
18893: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18897: LD_INT 4
18899: PUSH
18900: LD_INT 5
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PPUSH
18910: LD_INT 2
18912: PPUSH
18913: CALL_OW 12
18917: ARRAY
18918: PPUSH
18919: LD_INT 7
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 55
// end ; end_of_file
18929: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18930: LD_EXP 24
18934: PUSH
18935: LD_INT 1
18937: EQUAL
18938: IFFALSE 19239
18940: GO 18942
18942: DISABLE
18943: LD_INT 0
18945: PPUSH
18946: PPUSH
18947: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_INT 22
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 21
18965: PUSH
18966: LD_INT 3
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: LD_INT 30
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: ST_TO_ADDR
// for i in tmp do
19011: LD_ADDR_VAR 0 1
19015: PUSH
19016: LD_VAR 0 2
19020: PUSH
19021: FOR_IN
19022: IFFALSE 19055
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19024: LD_ADDR_VAR 0 3
19028: PUSH
19029: LD_VAR 0 3
19033: PUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 274
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 275
19051: PLUS
19052: ST_TO_ADDR
19053: GO 19021
19055: POP
19056: POP
// strings = [ ] ;
19057: LD_ADDR_EXP 27
19061: PUSH
19062: EMPTY
19063: ST_TO_ADDR
// if tmp = 0 then
19064: LD_VAR 0 2
19068: PUSH
19069: LD_INT 0
19071: EQUAL
19072: IFFALSE 19097
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19074: LD_ADDR_EXP 27
19078: PUSH
19079: LD_EXP 27
19083: PUSH
19084: LD_STRING #Am06-1
19086: PUSH
19087: LD_EXP 25
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: ADD
19096: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19097: LD_VAR 0 2
19101: PUSH
19102: LD_INT 0
19104: GREATER
19105: PUSH
19106: LD_EXP 25
19110: PUSH
19111: LD_VAR 0 3
19115: GREATER
19116: AND
19117: IFFALSE 19148
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19119: LD_ADDR_EXP 27
19123: PUSH
19124: LD_EXP 27
19128: PUSH
19129: LD_STRING #Am06-1
19131: PUSH
19132: LD_EXP 25
19136: PUSH
19137: LD_VAR 0 3
19141: MINUS
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: ADD
19147: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19148: LD_VAR 0 2
19152: PUSH
19153: LD_INT 0
19155: GREATER
19156: PUSH
19157: LD_EXP 25
19161: PUSH
19162: LD_VAR 0 3
19166: LESSEQUAL
19167: AND
19168: IFFALSE 19191
// strings = strings ^ [ #Am06-1 , 0 ] ;
19170: LD_ADDR_EXP 27
19174: PUSH
19175: LD_EXP 27
19179: PUSH
19180: LD_STRING #Am06-1
19182: PUSH
19183: LD_INT 0
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: ADD
19190: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19191: LD_ADDR_EXP 26
19195: PUSH
19196: LD_EXP 26
19200: PUSH
19201: LD_INT 35
19203: MINUS
19204: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19205: LD_ADDR_EXP 27
19209: PUSH
19210: LD_EXP 27
19214: PUSH
19215: LD_STRING #Am06-2
19217: PUSH
19218: LD_EXP 26
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: ADD
19227: ST_TO_ADDR
// display_strings = strings ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: LD_EXP 27
19237: ST_TO_ADDR
// enable ;
19238: ENABLE
// end ; end_of_file
19239: PPOPN 3
19241: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19251: LD_ADDR_VAR 0 3
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 30
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 30
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PPUSH
19298: CALL_OW 69
19302: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19303: LD_INT 35
19305: PPUSH
19306: CALL_OW 67
// until depot ;
19310: LD_VAR 0 3
19314: IFFALSE 19251
// repeat wait ( 0 0$1 ) ;
19316: LD_INT 35
19318: PPUSH
19319: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19323: LD_ADDR_VAR 0 4
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 91
19340: PUSH
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 1
19348: ARRAY
19349: PUSH
19350: LD_INT 15
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 25
19403: PUSH
19404: LD_INT 4
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 54
19423: PUSH
19424: EMPTY
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 3
19433: PUSH
19434: LD_INT 55
19436: PUSH
19437: EMPTY
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: PPUSH
19452: CALL_OW 69
19456: PUSH
19457: LD_EXP 2
19461: PUSH
19462: LD_EXP 3
19466: PUSH
19467: LD_EXP 4
19471: PUSH
19472: LD_EXP 5
19476: PUSH
19477: LD_EXP 7
19481: PUSH
19482: LD_EXP 8
19486: PUSH
19487: LD_EXP 9
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: PUSH
19501: LD_EXP 46
19505: ADD
19506: DIFF
19507: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19508: LD_VAR 0 4
19512: PUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 463
19520: NOT
19521: AND
19522: IFFALSE 19316
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19524: LD_ADDR_VAR 0 4
19528: PUSH
19529: LD_VAR 0 4
19533: PUSH
19534: LD_INT 1
19536: PPUSH
19537: LD_VAR 0 4
19541: PPUSH
19542: CALL_OW 12
19546: ARRAY
19547: ST_TO_ADDR
// blockSpawn = 1 ;
19548: LD_ADDR_EXP 29
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// uc_side = 2 ;
19556: LD_ADDR_OWVAR 20
19560: PUSH
19561: LD_INT 2
19563: ST_TO_ADDR
// uc_nation = 2 ;
19564: LD_ADDR_OWVAR 21
19568: PUSH
19569: LD_INT 2
19571: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19572: LD_ADDR_EXP 19
19576: PUSH
19577: LD_STRING Kurt
19579: PPUSH
19580: LD_INT 0
19582: PPUSH
19583: CALL 5968 0 2
19587: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19588: LD_EXP 19
19592: PPUSH
19593: LD_VAR 0 4
19597: PPUSH
19598: CALL_OW 250
19602: PPUSH
19603: LD_VAR 0 4
19607: PPUSH
19608: CALL_OW 251
19612: PPUSH
19613: LD_INT 5
19615: PPUSH
19616: LD_INT 1
19618: PPUSH
19619: CALL_OW 50
// InGameOn ;
19623: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19627: LD_EXP 19
19631: PPUSH
19632: CALL_OW 87
// wait ( 0 0$2 ) ;
19636: LD_INT 70
19638: PPUSH
19639: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19643: LD_EXP 19
19647: PPUSH
19648: LD_VAR 0 4
19652: PPUSH
19653: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19657: LD_VAR 0 4
19661: PPUSH
19662: LD_EXP 19
19666: PPUSH
19667: CALL_OW 112
// wait ( 0 0$1 ) ;
19671: LD_INT 35
19673: PPUSH
19674: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19678: LD_VAR 0 4
19682: PPUSH
19683: LD_EXP 19
19687: PPUSH
19688: CALL_OW 119
// DialogueOn ;
19692: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19696: LD_EXP 19
19700: PPUSH
19701: LD_STRING D2-Kurt-1
19703: PPUSH
19704: CALL_OW 88
// if tmp = JMM then
19708: LD_VAR 0 4
19712: PUSH
19713: LD_EXP 1
19717: EQUAL
19718: IFFALSE 19810
// begin Say ( JMM , D2-JMM-1 ) ;
19720: LD_EXP 1
19724: PPUSH
19725: LD_STRING D2-JMM-1
19727: PPUSH
19728: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19732: LD_EXP 19
19736: PPUSH
19737: LD_STRING D2-Kurt-2
19739: PPUSH
19740: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19744: LD_EXP 1
19748: PPUSH
19749: LD_STRING D2-JMM-2
19751: PPUSH
19752: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19756: LD_EXP 19
19760: PPUSH
19761: LD_STRING D2-Kurt-3
19763: PPUSH
19764: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19768: LD_EXP 1
19772: PPUSH
19773: LD_STRING D2-JMM-3
19775: PPUSH
19776: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19780: LD_EXP 19
19784: PPUSH
19785: LD_STRING D2-Kurt-4
19787: PPUSH
19788: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19792: LD_EXP 1
19796: PPUSH
19797: LD_STRING D2-JMM-4
19799: PPUSH
19800: CALL_OW 88
// DialogueOff ;
19804: CALL_OW 7
// end else
19808: GO 20120
// begin if GetSex ( tmp ) = 1 then
19810: LD_VAR 0 4
19814: PPUSH
19815: CALL_OW 258
19819: PUSH
19820: LD_INT 1
19822: EQUAL
19823: IFFALSE 19837
// Say ( tmp , D2-Sol1-1 ) ;
19825: LD_VAR 0 4
19829: PPUSH
19830: LD_STRING D2-Sol1-1
19832: PPUSH
19833: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19837: LD_VAR 0 4
19841: PPUSH
19842: CALL_OW 258
19846: PUSH
19847: LD_INT 2
19849: EQUAL
19850: IFFALSE 19864
// Say ( tmp , D2-FSol1-1 ) ;
19852: LD_VAR 0 4
19856: PPUSH
19857: LD_STRING D2-FSol1-1
19859: PPUSH
19860: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19864: LD_EXP 19
19868: PPUSH
19869: LD_STRING D2-Kurt-2
19871: PPUSH
19872: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19876: LD_VAR 0 4
19880: PPUSH
19881: CALL_OW 258
19885: PUSH
19886: LD_INT 1
19888: EQUAL
19889: IFFALSE 19903
// Say ( tmp , D2-Sol1-2 ) ;
19891: LD_VAR 0 4
19895: PPUSH
19896: LD_STRING D2-Sol1-2
19898: PPUSH
19899: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19903: LD_VAR 0 4
19907: PPUSH
19908: CALL_OW 258
19912: PUSH
19913: LD_INT 2
19915: EQUAL
19916: IFFALSE 19930
// Say ( tmp , D2-FSol1-2 ) ;
19918: LD_VAR 0 4
19922: PPUSH
19923: LD_STRING D2-FSol1-2
19925: PPUSH
19926: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19930: LD_EXP 19
19934: PPUSH
19935: LD_STRING D2-Kurt-3
19937: PPUSH
19938: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19942: LD_VAR 0 4
19946: PPUSH
19947: CALL_OW 258
19951: PUSH
19952: LD_INT 1
19954: EQUAL
19955: IFFALSE 19969
// Say ( tmp , D2-Sol1-3 ) ;
19957: LD_VAR 0 4
19961: PPUSH
19962: LD_STRING D2-Sol1-3
19964: PPUSH
19965: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19969: LD_VAR 0 4
19973: PPUSH
19974: CALL_OW 258
19978: PUSH
19979: LD_INT 2
19981: EQUAL
19982: IFFALSE 19996
// Say ( tmp , D2-FSol1-3 ) ;
19984: LD_VAR 0 4
19988: PPUSH
19989: LD_STRING D2-FSol1-3
19991: PPUSH
19992: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19996: LD_EXP 19
20000: PPUSH
20001: LD_STRING D2-Kurt-4
20003: PPUSH
20004: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20008: LD_VAR 0 4
20012: PPUSH
20013: CALL_OW 258
20017: PUSH
20018: LD_INT 1
20020: EQUAL
20021: IFFALSE 20035
// Say ( tmp , D2-Sol1-4 ) ;
20023: LD_VAR 0 4
20027: PPUSH
20028: LD_STRING D2-Sol1-4
20030: PPUSH
20031: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20035: LD_VAR 0 4
20039: PPUSH
20040: CALL_OW 258
20044: PUSH
20045: LD_INT 2
20047: EQUAL
20048: IFFALSE 20062
// Say ( tmp , D2-FSol1-4 ) ;
20050: LD_VAR 0 4
20054: PPUSH
20055: LD_STRING D2-FSol1-4
20057: PPUSH
20058: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20062: LD_VAR 0 4
20066: PPUSH
20067: CALL_OW 258
20071: PUSH
20072: LD_INT 1
20074: EQUAL
20075: IFFALSE 20089
// Say ( tmp , D2-Sol1-5 ) ;
20077: LD_VAR 0 4
20081: PPUSH
20082: LD_STRING D2-Sol1-5
20084: PPUSH
20085: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20089: LD_VAR 0 4
20093: PPUSH
20094: CALL_OW 258
20098: PUSH
20099: LD_INT 2
20101: EQUAL
20102: IFFALSE 20116
// Say ( tmp , D2-FSol1-5 ) ;
20104: LD_VAR 0 4
20108: PPUSH
20109: LD_STRING D2-FSol1-5
20111: PPUSH
20112: CALL_OW 88
// DialogueOff ;
20116: CALL_OW 7
// end ; dec = ShowQuery1 ;
20120: LD_ADDR_VAR 0 6
20124: PUSH
20125: CALL 6492 0 0
20129: ST_TO_ADDR
// if dec = 1 then
20130: LD_VAR 0 6
20134: PUSH
20135: LD_INT 1
20137: EQUAL
20138: IFFALSE 20180
// begin DialogueOn ;
20140: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20144: LD_EXP 19
20148: PPUSH
20149: LD_STRING D2a-Kurt-1
20151: PPUSH
20152: CALL_OW 88
// DialogueOff ;
20156: CALL_OW 7
// InGameOff ;
20160: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20164: LD_INT 1
20166: PPUSH
20167: LD_INT 2
20169: PPUSH
20170: LD_INT 2
20172: PPUSH
20173: LD_INT 1
20175: PPUSH
20176: CALL_OW 80
// end ; if dec = 2 then
20180: LD_VAR 0 6
20184: PUSH
20185: LD_INT 2
20187: EQUAL
20188: IFFALSE 20688
// begin DialogueOn ;
20190: CALL_OW 6
// if tmp = JMM then
20194: LD_VAR 0 4
20198: PUSH
20199: LD_EXP 1
20203: EQUAL
20204: IFFALSE 20260
// begin Say ( JMM , D2b-JMM-1 ) ;
20206: LD_EXP 1
20210: PPUSH
20211: LD_STRING D2b-JMM-1
20213: PPUSH
20214: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20218: LD_EXP 19
20222: PPUSH
20223: LD_STRING D2b-Kurt-1
20225: PPUSH
20226: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20230: LD_EXP 1
20234: PPUSH
20235: LD_STRING D2b-JMM-2
20237: PPUSH
20238: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20242: LD_EXP 19
20246: PPUSH
20247: LD_STRING D2b-Kurt-2
20249: PPUSH
20250: CALL_OW 88
// DialogueOff ;
20254: CALL_OW 7
// end else
20258: GO 20450
// begin if GetSex ( tmp ) = 1 then
20260: LD_VAR 0 4
20264: PPUSH
20265: CALL_OW 258
20269: PUSH
20270: LD_INT 1
20272: EQUAL
20273: IFFALSE 20287
// Say ( tmp , D2b-Sol1-1 ) ;
20275: LD_VAR 0 4
20279: PPUSH
20280: LD_STRING D2b-Sol1-1
20282: PPUSH
20283: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20287: LD_VAR 0 4
20291: PPUSH
20292: CALL_OW 258
20296: PUSH
20297: LD_INT 2
20299: EQUAL
20300: IFFALSE 20314
// Say ( tmp , D2b-FSol1-1 ) ;
20302: LD_VAR 0 4
20306: PPUSH
20307: LD_STRING D2b-FSol1-1
20309: PPUSH
20310: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20314: LD_EXP 19
20318: PPUSH
20319: LD_STRING D2b-Kurt-1
20321: PPUSH
20322: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20326: LD_VAR 0 4
20330: PPUSH
20331: CALL_OW 258
20335: PUSH
20336: LD_INT 1
20338: EQUAL
20339: IFFALSE 20353
// Say ( tmp , D2b-Sol1-2 ) ;
20341: LD_VAR 0 4
20345: PPUSH
20346: LD_STRING D2b-Sol1-2
20348: PPUSH
20349: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20353: LD_VAR 0 4
20357: PPUSH
20358: CALL_OW 258
20362: PUSH
20363: LD_INT 2
20365: EQUAL
20366: IFFALSE 20380
// Say ( tmp , D2b-FSol1-2 ) ;
20368: LD_VAR 0 4
20372: PPUSH
20373: LD_STRING D2b-FSol1-2
20375: PPUSH
20376: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20380: LD_EXP 19
20384: PPUSH
20385: LD_STRING D2b-Kurt-2
20387: PPUSH
20388: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20392: LD_VAR 0 4
20396: PPUSH
20397: CALL_OW 258
20401: PUSH
20402: LD_INT 1
20404: EQUAL
20405: IFFALSE 20419
// Say ( tmp , D2c-Sol1-2 ) ;
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_STRING D2c-Sol1-2
20414: PPUSH
20415: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20419: LD_VAR 0 4
20423: PPUSH
20424: CALL_OW 258
20428: PUSH
20429: LD_INT 2
20431: EQUAL
20432: IFFALSE 20446
// Say ( tmp , D2c-FSol1-2 ) ;
20434: LD_VAR 0 4
20438: PPUSH
20439: LD_STRING D2c-FSol1-2
20441: PPUSH
20442: CALL_OW 88
// DialogueOff ;
20446: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20450: LD_ADDR_VAR 0 7
20454: PUSH
20455: CALL 6566 0 0
20459: ST_TO_ADDR
// if dec2 = 1 then
20460: LD_VAR 0 7
20464: PUSH
20465: LD_INT 1
20467: EQUAL
20468: IFFALSE 20510
// begin DialogueOn ;
20470: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20474: LD_EXP 19
20478: PPUSH
20479: LD_STRING D2a-Kurt-1
20481: PPUSH
20482: CALL_OW 88
// DialogueOff ;
20486: CALL_OW 7
// InGameOff ;
20490: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20494: LD_INT 1
20496: PPUSH
20497: LD_INT 2
20499: PPUSH
20500: LD_INT 2
20502: PPUSH
20503: LD_INT 1
20505: PPUSH
20506: CALL_OW 80
// end ; if dec2 = 2 then
20510: LD_VAR 0 7
20514: PUSH
20515: LD_INT 2
20517: EQUAL
20518: IFFALSE 20688
// begin if tmp = JMM then
20520: LD_VAR 0 4
20524: PUSH
20525: LD_EXP 1
20529: EQUAL
20530: IFFALSE 20590
// begin DialogueOn ;
20532: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20536: LD_EXP 1
20540: PPUSH
20541: LD_STRING D2c-JMM-1
20543: PPUSH
20544: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20548: LD_EXP 19
20552: PPUSH
20553: LD_STRING D2c-Kurt-1
20555: PPUSH
20556: CALL_OW 88
// DialogueOff ;
20560: CALL_OW 7
// InGameOff ;
20564: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20568: LD_EXP 19
20572: PPUSH
20573: LD_INT 8
20575: PPUSH
20576: CALL_OW 113
// readyToEscape = 1 ;
20580: LD_ADDR_EXP 21
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// end else
20588: GO 20688
// begin DialogueOn ;
20590: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20594: LD_VAR 0 4
20598: PPUSH
20599: CALL_OW 258
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20621
// Say ( tmp , D2c-Sol1-1 ) ;
20609: LD_VAR 0 4
20613: PPUSH
20614: LD_STRING D2c-Sol1-1
20616: PPUSH
20617: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20621: LD_VAR 0 4
20625: PPUSH
20626: CALL_OW 258
20630: PUSH
20631: LD_INT 2
20633: EQUAL
20634: IFFALSE 20648
// Say ( tmp , D2c-FSol1-1 ) ;
20636: LD_VAR 0 4
20640: PPUSH
20641: LD_STRING D2c-FSol1-1
20643: PPUSH
20644: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20648: LD_EXP 19
20652: PPUSH
20653: LD_STRING D2c-Kurt-1
20655: PPUSH
20656: CALL_OW 88
// DialogueOff ;
20660: CALL_OW 7
// InGameOff ;
20664: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20668: LD_EXP 19
20672: PPUSH
20673: LD_INT 8
20675: PPUSH
20676: CALL_OW 113
// readyToEscape = 1 ;
20680: LD_ADDR_EXP 21
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20688: LD_VAR 0 6
20692: PUSH
20693: LD_INT 3
20695: EQUAL
20696: IFFALSE 20870
// begin DialogueOn ;
20698: CALL_OW 6
// if tmp = JMM then
20702: LD_VAR 0 4
20706: PUSH
20707: LD_EXP 1
20711: EQUAL
20712: IFFALSE 20772
// begin DialogueOn ;
20714: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20718: LD_EXP 1
20722: PPUSH
20723: LD_STRING D2c-JMM-1
20725: PPUSH
20726: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20730: LD_EXP 19
20734: PPUSH
20735: LD_STRING D2c-Kurt-1
20737: PPUSH
20738: CALL_OW 88
// DialogueOff ;
20742: CALL_OW 7
// InGameOff ;
20746: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20750: LD_EXP 19
20754: PPUSH
20755: LD_INT 8
20757: PPUSH
20758: CALL_OW 113
// readyToEscape = 1 ;
20762: LD_ADDR_EXP 21
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// end else
20770: GO 20870
// begin DialogueOn ;
20772: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20776: LD_VAR 0 4
20780: PPUSH
20781: CALL_OW 258
20785: PUSH
20786: LD_INT 1
20788: EQUAL
20789: IFFALSE 20803
// Say ( tmp , D2c-Sol1-1 ) ;
20791: LD_VAR 0 4
20795: PPUSH
20796: LD_STRING D2c-Sol1-1
20798: PPUSH
20799: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20803: LD_VAR 0 4
20807: PPUSH
20808: CALL_OW 258
20812: PUSH
20813: LD_INT 2
20815: EQUAL
20816: IFFALSE 20830
// Say ( tmp , D2c-FSol1-1 ) ;
20818: LD_VAR 0 4
20822: PPUSH
20823: LD_STRING D2c-FSol1-1
20825: PPUSH
20826: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20830: LD_EXP 19
20834: PPUSH
20835: LD_STRING D2c-Kurt-1
20837: PPUSH
20838: CALL_OW 88
// DialogueOff ;
20842: CALL_OW 7
// InGameOff ;
20846: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20850: LD_EXP 19
20854: PPUSH
20855: LD_INT 8
20857: PPUSH
20858: CALL_OW 113
// readyToEscape = 1 ;
20862: LD_ADDR_EXP 21
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20870: LD_ADDR_EXP 29
20874: PUSH
20875: LD_INT 0
20877: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20878: LD_INT 35
20880: PPUSH
20881: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20885: LD_EXP 19
20889: PPUSH
20890: LD_INT 8
20892: PPUSH
20893: CALL_OW 308
20897: PUSH
20898: LD_EXP 21
20902: AND
20903: PUSH
20904: LD_EXP 19
20908: PPUSH
20909: CALL_OW 301
20913: OR
20914: IFFALSE 20878
// if IsDead ( Kurt ) then
20916: LD_EXP 19
20920: PPUSH
20921: CALL_OW 301
20925: IFFALSE 20929
// exit ;
20927: GO 20998
// RemoveUnit ( Kurt ) ;
20929: LD_EXP 19
20933: PPUSH
20934: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20938: LD_EXP 19
20942: PPUSH
20943: LD_STRING Kurt
20945: PPUSH
20946: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20950: LD_INT 1
20952: PPUSH
20953: LD_INT 2
20955: PPUSH
20956: CALL_OW 81
20960: PUSH
20961: LD_INT 0
20963: EQUAL
20964: IFFALSE 20974
// KurtStatus = 1 ;
20966: LD_ADDR_EXP 20
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20974: LD_INT 1
20976: PPUSH
20977: LD_INT 2
20979: PPUSH
20980: CALL_OW 81
20984: PUSH
20985: LD_INT 2
20987: EQUAL
20988: IFFALSE 20998
// KurtStatus = 2 ;
20990: LD_ADDR_EXP 20
20994: PUSH
20995: LD_INT 2
20997: ST_TO_ADDR
// end ; end_of_file
20998: LD_VAR 0 1
21002: RET
// every 0 0$1 do
21003: GO 21005
21005: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21006: LD_INT 3
21008: PPUSH
21009: LD_INT 32
21011: PPUSH
21012: LD_INT 3
21014: PPUSH
21015: CALL 6621 0 3
21019: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
// begin enemyWayX = [ ] ;
21026: LD_ADDR_EXP 49
21030: PUSH
21031: EMPTY
21032: ST_TO_ADDR
// enemyWayY = [ ] ;
21033: LD_ADDR_EXP 50
21037: PUSH
21038: EMPTY
21039: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21040: LD_ADDR_VAR 0 1
21044: PUSH
21045: LD_INT 1
21047: PPUSH
21048: LD_INT 2
21050: PPUSH
21051: CALL_OW 12
21055: ST_TO_ADDR
// if rnd = 1 then
21056: LD_VAR 0 1
21060: PUSH
21061: LD_INT 1
21063: EQUAL
21064: IFFALSE 21104
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21066: LD_ADDR_EXP 49
21070: PUSH
21071: LD_INT 93
21073: PUSH
21074: LD_INT 84
21076: PUSH
21077: LD_INT 104
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21085: LD_ADDR_EXP 50
21089: PUSH
21090: LD_INT 51
21092: PUSH
21093: LD_INT 35
21095: PUSH
21096: LD_INT 28
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: ST_TO_ADDR
// end ; if rnd = 2 then
21104: LD_VAR 0 1
21108: PUSH
21109: LD_INT 2
21111: EQUAL
21112: IFFALSE 21168
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21114: LD_ADDR_EXP 49
21118: PUSH
21119: LD_INT 93
21121: PUSH
21122: LD_INT 52
21124: PUSH
21125: LD_INT 34
21127: PUSH
21128: LD_INT 28
21130: PUSH
21131: LD_INT 30
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21141: LD_ADDR_EXP 50
21145: PUSH
21146: LD_INT 51
21148: PUSH
21149: LD_INT 45
21151: PUSH
21152: LD_INT 35
21154: PUSH
21155: LD_INT 26
21157: PUSH
21158: LD_INT 20
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: ST_TO_ADDR
// end ; enable ;
21168: ENABLE
// end ;
21169: PPOPN 1
21171: END
// every 0 0$1 do
21172: GO 21174
21174: DISABLE
// begin enable ;
21175: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21176: LD_INT 3
21178: PPUSH
21179: LD_INT 2
21181: PPUSH
21182: LD_INT 10
21184: PPUSH
21185: LD_EXP 31
21189: PPUSH
21190: CALL 8056 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21194: LD_INT 3
21196: PPUSH
21197: LD_INT 12
21199: PPUSH
21200: LD_EXP 31
21204: PPUSH
21205: CALL 9941 0 3
// if disableHealAI = 0 then
21209: LD_EXP 33
21213: PUSH
21214: LD_INT 0
21216: EQUAL
21217: IFFALSE 21238
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21219: LD_INT 3
21221: PPUSH
21222: LD_INT 9
21224: PPUSH
21225: LD_INT 10
21227: PPUSH
21228: LD_INT 32
21230: PUSH
21231: EMPTY
21232: LIST
21233: PPUSH
21234: CALL 8447 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21238: LD_INT 3
21240: PPUSH
21241: LD_INT 51
21243: PPUSH
21244: LD_INT 6
21246: PPUSH
21247: CALL 9155 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21251: LD_INT 3
21253: PPUSH
21254: LD_INT 12
21256: PPUSH
21257: LD_INT 121
21259: PPUSH
21260: LD_INT 100
21262: PPUSH
21263: CALL 7016 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21267: LD_INT 3
21269: PPUSH
21270: LD_INT 22
21272: PPUSH
21273: LD_EXP 49
21277: PPUSH
21278: LD_EXP 50
21282: PPUSH
21283: CALL 7219 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21287: LD_INT 3
21289: PPUSH
21290: LD_INT 10
21292: PPUSH
21293: CALL 9298 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21297: LD_INT 3
21299: PPUSH
21300: LD_INT 1
21302: PPUSH
21303: CALL 9711 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21307: LD_INT 2
21309: PPUSH
21310: CALL_OW 303
21314: PUSH
21315: LD_INT 2
21317: PPUSH
21318: CALL_OW 255
21322: PUSH
21323: LD_INT 1
21325: EQUAL
21326: OR
21327: IFFALSE 21339
// DefendDepot ( 3 , rudepo ) ;
21329: LD_INT 3
21331: PPUSH
21332: LD_INT 2
21334: PPUSH
21335: CALL 8991 0 2
// end ;
21339: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21340: LD_INT 22
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 21
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 55
21362: PUSH
21363: EMPTY
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 34
21371: PUSH
21372: LD_INT 51
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 69
21393: PUSH
21394: LD_INT 0
21396: EQUAL
21397: PUSH
21398: LD_INT 21
21400: PPUSH
21401: CALL_OW 255
21405: PUSH
21406: LD_INT 3
21408: EQUAL
21409: AND
21410: PUSH
21411: LD_INT 21
21413: PPUSH
21414: CALL_OW 302
21418: AND
21419: PUSH
21420: LD_INT 2
21422: PPUSH
21423: CALL_OW 255
21427: PUSH
21428: LD_INT 3
21430: EQUAL
21431: AND
21432: PUSH
21433: LD_INT 2
21435: PPUSH
21436: CALL_OW 302
21440: AND
21441: IFFALSE 21621
21443: GO 21445
21445: DISABLE
// begin enable ;
21446: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21447: LD_INT 2
21449: PPUSH
21450: CALL_OW 274
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: LD_INT 1000
21460: PPUSH
21461: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21465: LD_INT 3
21467: PPUSH
21468: LD_INT 21
21470: PPUSH
21471: LD_INT 4
21473: PUSH
21474: LD_INT 5
21476: PUSH
21477: LD_INT 6
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: PUSH
21485: LD_OWVAR 67
21489: ARRAY
21490: PPUSH
21491: LD_INT 43
21493: PUSH
21494: LD_INT 43
21496: PUSH
21497: LD_INT 44
21499: PUSH
21500: LD_INT 44
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 43
21511: PUSH
21512: LD_INT 43
21514: PUSH
21515: LD_INT 43
21517: PUSH
21518: LD_INT 44
21520: PUSH
21521: LD_INT 44
21523: PUSH
21524: LD_INT 46
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 43
21537: PUSH
21538: LD_INT 43
21540: PUSH
21541: LD_INT 43
21543: PUSH
21544: LD_INT 44
21546: PUSH
21547: LD_INT 44
21549: PUSH
21550: LD_INT 46
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: PUSH
21566: LD_OWVAR 67
21570: ARRAY
21571: PPUSH
21572: LD_INT 1
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: LD_INT 22
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 24
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PPUSH
21594: LD_INT 2
21596: PPUSH
21597: CALL_OW 12
21601: ARRAY
21602: PUSH
21603: LD_INT 24
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: PUSH
21611: LD_OWVAR 67
21615: ARRAY
21616: PPUSH
21617: CALL 6862 0 7
// end ;
21621: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21622: LD_INT 17
21624: PPUSH
21625: CALL_OW 255
21629: PUSH
21630: LD_INT 3
21632: EQUAL
21633: PUSH
21634: LD_INT 17
21636: PPUSH
21637: CALL_OW 302
21641: AND
21642: PUSH
21643: LD_INT 2
21645: PPUSH
21646: CALL_OW 255
21650: PUSH
21651: LD_INT 3
21653: EQUAL
21654: AND
21655: PUSH
21656: LD_INT 2
21658: PPUSH
21659: CALL_OW 302
21663: AND
21664: IFFALSE 21731
21666: GO 21668
21668: DISABLE
// begin enable ;
21669: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21670: LD_INT 17
21672: PPUSH
21673: LD_INT 22
21675: PPUSH
21676: LD_INT 1
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: LD_INT 42
21684: PUSH
21685: LD_INT 43
21687: PUSH
21688: LD_INT 44
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PPUSH
21699: LD_INT 3
21701: PPUSH
21702: CALL_OW 12
21706: ARRAY
21707: PPUSH
21708: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21712: LD_INT 17
21714: PPUSH
21715: LD_INT 22
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: LD_INT 1
21723: PPUSH
21724: LD_INT 51
21726: PPUSH
21727: CALL_OW 185
// end ;
21731: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21732: LD_INT 17
21734: PPUSH
21735: CALL_OW 302
21739: PUSH
21740: LD_INT 17
21742: PPUSH
21743: CALL_OW 255
21747: PUSH
21748: LD_INT 3
21750: EQUAL
21751: AND
21752: PUSH
21753: LD_INT 2
21755: PPUSH
21756: CALL_OW 302
21760: AND
21761: PUSH
21762: LD_INT 2
21764: PPUSH
21765: CALL_OW 255
21769: PUSH
21770: LD_INT 3
21772: EQUAL
21773: AND
21774: PUSH
21775: LD_INT 17
21777: PPUSH
21778: CALL_OW 313
21782: NOT
21783: AND
21784: IFFALSE 21878
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
// begin for i = 1 to 6 do
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: DOUBLE
21798: LD_INT 1
21800: DEC
21801: ST_TO_ADDR
21802: LD_INT 6
21804: PUSH
21805: FOR_TO
21806: IFFALSE 21876
// begin uc_side = 3 ;
21808: LD_ADDR_OWVAR 20
21812: PUSH
21813: LD_INT 3
21815: ST_TO_ADDR
// uc_nation = 3 ;
21816: LD_ADDR_OWVAR 21
21820: PUSH
21821: LD_INT 3
21823: ST_TO_ADDR
// hc_gallery :=  ;
21824: LD_ADDR_OWVAR 33
21828: PUSH
21829: LD_STRING 
21831: ST_TO_ADDR
// hc_name :=  ;
21832: LD_ADDR_OWVAR 26
21836: PUSH
21837: LD_STRING 
21839: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21840: LD_INT 0
21842: PPUSH
21843: LD_EXP 34
21847: PPUSH
21848: LD_EXP 35
21852: PPUSH
21853: CALL_OW 12
21857: PPUSH
21858: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21862: CALL_OW 44
21866: PPUSH
21867: LD_INT 17
21869: PPUSH
21870: CALL_OW 52
// end ;
21874: GO 21805
21876: POP
21877: POP
// end ;
21878: PPOPN 1
21880: END
// every 2 2$0 do var i , j ;
21881: GO 21883
21883: DISABLE
21884: LD_INT 0
21886: PPUSH
21887: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21888: LD_INT 14700
21890: PUSH
21891: LD_INT 33600
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: CALL_OW 12
21908: ARRAY
21909: PPUSH
21910: CALL_OW 67
// disableHealAI = 1 ;
21914: LD_ADDR_EXP 33
21918: PUSH
21919: LD_INT 1
21921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21922: LD_ADDR_VAR 0 1
21926: PUSH
21927: LD_INT 22
21929: PUSH
21930: LD_INT 3
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 25
21939: PUSH
21940: LD_INT 4
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PPUSH
21951: CALL_OW 69
21955: PUSH
21956: FOR_IN
21957: IFFALSE 21970
// ComExitBuilding ( i ) ;
21959: LD_VAR 0 1
21963: PPUSH
21964: CALL_OW 122
21968: GO 21956
21970: POP
21971: POP
// wait ( 0 0$1 ) ;
21972: LD_INT 35
21974: PPUSH
21975: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21979: LD_INT 35
21981: PPUSH
21982: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21986: LD_ADDR_VAR 0 1
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 3
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 25
22003: PUSH
22004: LD_INT 4
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 69
22019: PUSH
22020: FOR_IN
22021: IFFALSE 22098
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22023: LD_ADDR_VAR 0 2
22027: PUSH
22028: LD_INT 17
22030: PPUSH
22031: LD_INT 22
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 12
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 70
22059: PUSH
22060: FOR_IN
22061: IFFALSE 22094
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22063: LD_VAR 0 1
22067: PPUSH
22068: LD_VAR 0 2
22072: PPUSH
22073: CALL_OW 250
22077: PPUSH
22078: LD_VAR 0 2
22082: PPUSH
22083: CALL_OW 251
22087: PPUSH
22088: CALL_OW 191
// end ;
22092: GO 22060
22094: POP
22095: POP
// end ;
22096: GO 22020
22098: POP
22099: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22100: LD_INT 22
22102: PUSH
22103: LD_INT 3
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 25
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PPUSH
22124: CALL_OW 69
22128: PUSH
22129: LD_INT 0
22131: EQUAL
22132: PUSH
22133: LD_EXP 32
22137: PUSH
22138: LD_INT 6
22140: PUSH
22141: LD_INT 7
22143: PUSH
22144: LD_INT 8
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: LD_OWVAR 67
22156: ARRAY
22157: GREATEREQUAL
22158: OR
22159: PUSH
22160: LD_INT 17
22162: PPUSH
22163: LD_INT 22
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 25
22175: PUSH
22176: LD_INT 12
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 70
22191: PUSH
22192: LD_INT 0
22194: EQUAL
22195: OR
22196: IFFALSE 21979
// disableHealAI = 0 ;
22198: LD_ADDR_EXP 33
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 12
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PPUSH
22235: CALL_OW 69
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22257
// SetClass ( i , 16 ) ;
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_INT 16
22250: PPUSH
22251: CALL_OW 336
22255: GO 22240
22257: POP
22258: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22259: LD_ADDR_VAR 0 1
22263: PUSH
22264: LD_INT 22
22266: PUSH
22267: LD_INT 3
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 25
22276: PUSH
22277: LD_INT 4
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: PUSH
22293: FOR_IN
22294: IFFALSE 22313
// ComMoveXY ( i , 113 , 94 ) ;
22296: LD_VAR 0 1
22300: PPUSH
22301: LD_INT 113
22303: PPUSH
22304: LD_INT 94
22306: PPUSH
22307: CALL_OW 111
22311: GO 22293
22313: POP
22314: POP
// end ;
22315: PPOPN 2
22317: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22318: LD_INT 21
22320: PPUSH
22321: CALL_OW 255
22325: PUSH
22326: LD_INT 3
22328: EQUAL
22329: PUSH
22330: LD_INT 21
22332: PPUSH
22333: CALL_OW 302
22337: AND
22338: PUSH
22339: LD_INT 22
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 34
22351: PUSH
22352: LD_INT 51
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: PUSH
22368: LD_INT 0
22370: EQUAL
22371: AND
22372: IFFALSE 22404
22374: GO 22376
22376: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22377: LD_INT 21
22379: PPUSH
22380: LD_INT 23
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: LD_INT 51
22391: PPUSH
22392: CALL_OW 185
// wait ( 5 5$0 ) ;
22396: LD_INT 10500
22398: PPUSH
22399: CALL_OW 67
// enable ;
22403: ENABLE
// end ; end_of_file
22404: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22405: LD_EXP 26
22409: PUSH
22410: LD_INT 0
22412: LESSEQUAL
22413: IFFALSE 22562
22415: GO 22417
22417: DISABLE
22418: LD_INT 0
22420: PPUSH
22421: PPUSH
22422: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22423: LD_ADDR_VAR 0 2
22427: PUSH
22428: LD_INT 22
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 21
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 69
22485: ST_TO_ADDR
// for i in tmp do
22486: LD_ADDR_VAR 0 1
22490: PUSH
22491: LD_VAR 0 2
22495: PUSH
22496: FOR_IN
22497: IFFALSE 22530
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22499: LD_ADDR_VAR 0 3
22503: PUSH
22504: LD_VAR 0 3
22508: PUSH
22509: LD_VAR 0 1
22513: PPUSH
22514: CALL_OW 274
22518: PPUSH
22519: LD_INT 1
22521: PPUSH
22522: CALL_OW 275
22526: PLUS
22527: ST_TO_ADDR
22528: GO 22496
22530: POP
22531: POP
// if yourCrates >= needCrates then
22532: LD_VAR 0 3
22536: PUSH
22537: LD_EXP 25
22541: GREATEREQUAL
22542: IFFALSE 22555
// begin FinishMission ( yourCrates ) ;
22544: LD_VAR 0 3
22548: PPUSH
22549: CALL 22565 0 1
// end else
22553: GO 22562
// begin YouLost ( matmin ) ;
22555: LD_STRING matmin
22557: PPUSH
22558: CALL_OW 104
// end ; end ;
22562: PPOPN 3
22564: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22565: LD_INT 0
22567: PPUSH
22568: PPUSH
22569: PPUSH
22570: PPUSH
// if killCounter = 0 then
22571: LD_EXP 47
22575: PUSH
22576: LD_INT 0
22578: EQUAL
22579: IFFALSE 22588
// SetAchievement ( ACH_SURV ) ;
22581: LD_STRING ACH_SURV
22583: PPUSH
22584: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22588: LD_INT 22
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 21
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL_OW 69
22616: PUSH
22617: LD_INT 0
22619: EQUAL
22620: IFFALSE 22636
// begin wait ( 3 ) ;
22622: LD_INT 3
22624: PPUSH
22625: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22629: LD_STRING ACH_BASEDESTROYER
22631: PPUSH
22632: CALL_OW 543
// end ; m1 := false ;
22636: LD_ADDR_VAR 0 3
22640: PUSH
22641: LD_INT 0
22643: ST_TO_ADDR
// m2 := false ;
22644: LD_ADDR_VAR 0 4
22648: PUSH
22649: LD_INT 0
22651: ST_TO_ADDR
// m3 := false ;
22652: LD_ADDR_VAR 0 5
22656: PUSH
22657: LD_INT 0
22659: ST_TO_ADDR
// if crates + 100 > crates then
22660: LD_VAR 0 1
22664: PUSH
22665: LD_INT 100
22667: PLUS
22668: PUSH
22669: LD_VAR 0 1
22673: GREATER
22674: IFFALSE 22706
// begin AddMedal ( cans , 1 ) ;
22676: LD_STRING cans
22678: PPUSH
22679: LD_INT 1
22681: PPUSH
22682: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22686: LD_INT 1
22688: PPUSH
22689: LD_STRING 06_crates_1
22691: PPUSH
22692: CALL_OW 39
// m1 := true ;
22696: LD_ADDR_VAR 0 3
22700: PUSH
22701: LD_INT 1
22703: ST_TO_ADDR
// end else
22704: GO 22727
// begin AddMedal ( cans , - 1 ) ;
22706: LD_STRING cans
22708: PPUSH
22709: LD_INT 1
22711: NEG
22712: PPUSH
22713: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22717: LD_INT 0
22719: PPUSH
22720: LD_STRING 06_crates_1
22722: PPUSH
22723: CALL_OW 39
// end ; if unitLost < 3 then
22727: LD_EXP 30
22731: PUSH
22732: LD_INT 3
22734: LESS
22735: IFFALSE 22757
// begin AddMedal ( people , 1 ) ;
22737: LD_STRING people
22739: PPUSH
22740: LD_INT 1
22742: PPUSH
22743: CALL_OW 101
// m2 := true ;
22747: LD_ADDR_VAR 0 4
22751: PUSH
22752: LD_INT 1
22754: ST_TO_ADDR
// end else
22755: GO 22768
// begin AddMedal ( people , - 1 ) ;
22757: LD_STRING people
22759: PPUSH
22760: LD_INT 1
22762: NEG
22763: PPUSH
22764: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22768: LD_EXP 28
22772: PPUSH
22773: LD_STRING 06_remoteVehs_1
22775: PPUSH
22776: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22780: LD_EXP 28
22784: PUSH
22785: LD_INT 1
22787: EQUAL
22788: IFFALSE 22810
// begin AddMedal ( remote , 1 ) ;
22790: LD_STRING remote
22792: PPUSH
22793: LD_INT 1
22795: PPUSH
22796: CALL_OW 101
// m3 := true ;
22800: LD_ADDR_VAR 0 5
22804: PUSH
22805: LD_INT 1
22807: ST_TO_ADDR
// end else
22808: GO 22850
// begin if GetTech ( 18 , 1 ) = state_enabled then
22810: LD_INT 18
22812: PPUSH
22813: LD_INT 1
22815: PPUSH
22816: CALL_OW 321
22820: PUSH
22821: LD_INT 1
22823: EQUAL
22824: IFFALSE 22839
// begin AddMedal ( remote , - 1 ) ;
22826: LD_STRING remote
22828: PPUSH
22829: LD_INT 1
22831: NEG
22832: PPUSH
22833: CALL_OW 101
// end else
22837: GO 22850
// begin AddMedal ( remote , - 2 ) ;
22839: LD_STRING remote
22841: PPUSH
22842: LD_INT 2
22844: NEG
22845: PPUSH
22846: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22850: LD_VAR 0 3
22854: PUSH
22855: LD_VAR 0 4
22859: AND
22860: PUSH
22861: LD_VAR 0 5
22865: AND
22866: IFFALSE 22882
// begin wait ( 3 ) ;
22868: LD_INT 3
22870: PPUSH
22871: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22875: LD_STRING ACH_ASPEED_6
22877: PPUSH
22878: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22882: LD_OWVAR 67
22886: PUSH
22887: LD_INT 3
22889: EQUAL
22890: PUSH
22891: LD_VAR 0 3
22895: AND
22896: PUSH
22897: LD_VAR 0 4
22901: AND
22902: PUSH
22903: LD_VAR 0 5
22907: AND
22908: IFFALSE 22920
// SetAchievementEX ( ACH_AMER , 6 ) ;
22910: LD_STRING ACH_AMER
22912: PPUSH
22913: LD_INT 6
22915: PPUSH
22916: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22920: LD_EXP 20
22924: PPUSH
22925: LD_STRING 06_KurtStatus_1
22927: PPUSH
22928: CALL_OW 39
// GiveMedals ( Main ) ;
22932: LD_STRING Main
22934: PPUSH
22935: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22939: LD_INT 22
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 21
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 50
22961: PUSH
22962: EMPTY
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 25
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 25
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 25
23000: PUSH
23001: LD_INT 4
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: PPUSH
23021: CALL_OW 69
23025: PPUSH
23026: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23030: LD_EXP 1
23034: PPUSH
23035: LD_EXP 43
23039: PUSH
23040: LD_STRING JMM
23042: STR
23043: PPUSH
23044: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23048: LD_EXP 2
23052: PPUSH
23053: LD_EXP 43
23057: PUSH
23058: LD_STRING Lisa
23060: STR
23061: PPUSH
23062: CALL 6120 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23066: LD_EXP 3
23070: PPUSH
23071: LD_EXP 43
23075: PUSH
23076: LD_STRING Bobby
23078: STR
23079: PPUSH
23080: CALL 6120 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23084: LD_EXP 4
23088: PPUSH
23089: LD_EXP 43
23093: PUSH
23094: LD_STRING Cyrus
23096: STR
23097: PPUSH
23098: CALL 6120 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23102: LD_EXP 5
23106: PPUSH
23107: LD_EXP 43
23111: PUSH
23112: LD_STRING Frank
23114: STR
23115: PPUSH
23116: CALL 6120 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23120: LD_EXP 6
23124: PPUSH
23125: LD_EXP 43
23129: PUSH
23130: LD_STRING Brown
23132: STR
23133: PPUSH
23134: CALL 6120 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23138: LD_EXP 7
23142: PPUSH
23143: LD_EXP 43
23147: PUSH
23148: LD_STRING Donaldson
23150: STR
23151: PPUSH
23152: CALL 6120 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23156: LD_EXP 8
23160: PPUSH
23161: LD_EXP 43
23165: PUSH
23166: LD_STRING Gladstone
23168: STR
23169: PPUSH
23170: CALL 6120 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23174: LD_EXP 9
23178: PPUSH
23179: LD_EXP 43
23183: PUSH
23184: LD_STRING Denis
23186: STR
23187: PPUSH
23188: CALL 6120 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23192: LD_EXP 15
23196: PPUSH
23197: LD_EXP 43
23201: PUSH
23202: LD_STRING Joan
23204: STR
23205: PPUSH
23206: CALL 6120 0 2
// if IsLive ( Joan ) then
23210: LD_EXP 15
23214: PPUSH
23215: CALL_OW 300
23219: IFFALSE 23233
// SaveCharacters ( Joan , Joan ) ;
23221: LD_EXP 15
23225: PPUSH
23226: LD_STRING Joan
23228: PPUSH
23229: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23233: LD_EXP 16
23237: PPUSH
23238: LD_STRING 06_JoanStatus_1
23240: PPUSH
23241: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23245: LD_INT 50
23247: PUSH
23248: EMPTY
23249: LIST
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 21
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 25
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 3
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PPUSH
23327: CALL_OW 69
23331: PUSH
23332: LD_EXP 1
23336: PUSH
23337: LD_EXP 2
23341: PUSH
23342: LD_EXP 3
23346: PUSH
23347: LD_EXP 4
23351: PUSH
23352: LD_EXP 5
23356: PUSH
23357: LD_EXP 6
23361: PUSH
23362: LD_EXP 7
23366: PUSH
23367: LD_EXP 8
23371: PUSH
23372: LD_EXP 9
23376: PUSH
23377: LD_EXP 15
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: DIFF
23394: PPUSH
23395: LD_STRING 06_other_survivors
23397: PPUSH
23398: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23402: LD_INT 50
23404: PUSH
23405: EMPTY
23406: LIST
23407: PUSH
23408: LD_INT 22
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 21
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: LD_INT 25
23433: PUSH
23434: LD_INT 12
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 25
23443: PUSH
23444: LD_INT 16
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PPUSH
23462: CALL_OW 69
23466: PPUSH
23467: LD_STRING 06_other_apemans
23469: PPUSH
23470: CALL_OW 38
// YouWin ;
23474: CALL_OW 103
// end ; end_of_file
23478: LD_VAR 0 2
23482: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23483: LD_EXP 39
23487: PUSH
23488: LD_INT 3
23490: EQUAL
23491: IFFALSE 23606
23493: GO 23495
23495: DISABLE
// begin enable ;
23496: ENABLE
// sendedConvoys = 0 ;
23497: LD_ADDR_EXP 39
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23505: LD_INT 6
23507: PPUSH
23508: LD_INT 3
23510: PPUSH
23511: LD_INT 5
23513: PPUSH
23514: LD_INT 10
23516: PPUSH
23517: CALL_OW 12
23521: PUSH
23522: LD_INT 5
23524: PPUSH
23525: LD_INT 11
23527: PPUSH
23528: CALL_OW 12
23532: PUSH
23533: LD_INT 8
23535: PPUSH
23536: LD_INT 12
23538: PPUSH
23539: CALL_OW 12
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_OWVAR 67
23553: ARRAY
23554: PPUSH
23555: LD_INT 0
23557: PPUSH
23558: LD_INT 0
23560: PPUSH
23561: LD_INT 0
23563: PPUSH
23564: LD_INT 0
23566: PPUSH
23567: LD_EXP 34
23571: PPUSH
23572: LD_EXP 35
23576: PPUSH
23577: CALL_OW 12
23581: PPUSH
23582: LD_INT 16
23584: PPUSH
23585: LD_INT 15
23587: PPUSH
23588: LD_INT 1
23590: PPUSH
23591: LD_INT 1
23593: PPUSH
23594: LD_INT 2
23596: PPUSH
23597: CALL_OW 12
23601: PPUSH
23602: CALL 10539 0 12
// end ; end_of_file
23606: END
// export function PrepareNature ; var i , un ; begin
23607: LD_INT 0
23609: PPUSH
23610: PPUSH
23611: PPUSH
// for i = 1 to Difficulty + 2 do
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_OWVAR 67
23626: PUSH
23627: LD_INT 2
23629: PLUS
23630: PUSH
23631: FOR_TO
23632: IFFALSE 23741
// begin hc_sex = sex_male ;
23634: LD_ADDR_OWVAR 27
23638: PUSH
23639: LD_INT 1
23641: ST_TO_ADDR
// uc_side = 0 ;
23642: LD_ADDR_OWVAR 20
23646: PUSH
23647: LD_INT 0
23649: ST_TO_ADDR
// uc_nation = nation_nature ;
23650: LD_ADDR_OWVAR 21
23654: PUSH
23655: LD_INT 0
23657: ST_TO_ADDR
// hc_class = class_tiger ;
23658: LD_ADDR_OWVAR 28
23662: PUSH
23663: LD_INT 14
23665: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23666: LD_ADDR_OWVAR 31
23670: PUSH
23671: LD_EXP 35
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23691: LD_ADDR_OWVAR 35
23695: PUSH
23696: LD_INT 5
23698: NEG
23699: PPUSH
23700: LD_INT 5
23702: PPUSH
23703: CALL_OW 12
23707: PUSH
23708: LD_OWVAR 67
23712: MUL
23713: ST_TO_ADDR
// un = CreateHuman ;
23714: LD_ADDR_VAR 0 3
23718: PUSH
23719: CALL_OW 44
23723: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23724: LD_VAR 0 3
23728: PPUSH
23729: LD_INT 18
23731: PPUSH
23732: LD_INT 0
23734: PPUSH
23735: CALL_OW 49
// end ;
23739: GO 23631
23741: POP
23742: POP
// for i = 1 to rand ( 3 , 4 ) do
23743: LD_ADDR_VAR 0 2
23747: PUSH
23748: DOUBLE
23749: LD_INT 1
23751: DEC
23752: ST_TO_ADDR
23753: LD_INT 3
23755: PPUSH
23756: LD_INT 4
23758: PPUSH
23759: CALL_OW 12
23763: PUSH
23764: FOR_TO
23765: IFFALSE 23859
// begin hc_sex = sex_male ;
23767: LD_ADDR_OWVAR 27
23771: PUSH
23772: LD_INT 1
23774: ST_TO_ADDR
// uc_side = 0 ;
23775: LD_ADDR_OWVAR 20
23779: PUSH
23780: LD_INT 0
23782: ST_TO_ADDR
// uc_nation = nation_nature ;
23783: LD_ADDR_OWVAR 21
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// hc_class = 18 ;
23791: LD_ADDR_OWVAR 28
23795: PUSH
23796: LD_INT 18
23798: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23799: LD_ADDR_OWVAR 31
23803: PUSH
23804: LD_EXP 35
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: ST_TO_ADDR
// hc_agressivity = 0 ;
23824: LD_ADDR_OWVAR 35
23828: PUSH
23829: LD_INT 0
23831: ST_TO_ADDR
// un = CreateHuman ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: CALL_OW 44
23841: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23842: LD_VAR 0 3
23846: PPUSH
23847: LD_INT 18
23849: PPUSH
23850: LD_INT 0
23852: PPUSH
23853: CALL_OW 49
// end ;
23857: GO 23764
23859: POP
23860: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: DOUBLE
23867: LD_INT 1
23869: DEC
23870: ST_TO_ADDR
23871: LD_INT 1
23873: PPUSH
23874: LD_INT 3
23876: PPUSH
23877: CALL_OW 12
23881: PUSH
23882: LD_OWVAR 67
23886: PLUS
23887: PUSH
23888: FOR_TO
23889: IFFALSE 24038
// begin hc_sex = sex_male ;
23891: LD_ADDR_OWVAR 27
23895: PUSH
23896: LD_INT 1
23898: ST_TO_ADDR
// uc_side = 0 ;
23899: LD_ADDR_OWVAR 20
23903: PUSH
23904: LD_INT 0
23906: ST_TO_ADDR
// uc_nation = nation_nature ;
23907: LD_ADDR_OWVAR 21
23911: PUSH
23912: LD_INT 0
23914: ST_TO_ADDR
// hc_class = class_apeman ;
23915: LD_ADDR_OWVAR 28
23919: PUSH
23920: LD_INT 12
23922: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23923: LD_ADDR_OWVAR 31
23927: PUSH
23928: LD_INT 2
23930: PPUSH
23931: LD_INT 5
23933: PPUSH
23934: CALL_OW 12
23938: PUSH
23939: LD_INT 0
23941: PPUSH
23942: LD_INT 2
23944: PPUSH
23945: CALL_OW 12
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23962: LD_ADDR_OWVAR 35
23966: PUSH
23967: LD_INT 20
23969: PPUSH
23970: LD_INT 30
23972: PPUSH
23973: CALL_OW 12
23977: PUSH
23978: LD_INT 30
23980: PPUSH
23981: LD_INT 40
23983: PPUSH
23984: CALL_OW 12
23988: PUSH
23989: LD_INT 40
23991: PPUSH
23992: LD_INT 50
23994: PPUSH
23995: CALL_OW 12
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: PUSH
24005: LD_OWVAR 67
24009: ARRAY
24010: ST_TO_ADDR
// un = CreateHuman ;
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: CALL_OW 44
24020: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24021: LD_VAR 0 3
24025: PPUSH
24026: LD_INT 19
24028: PPUSH
24029: LD_INT 0
24031: PPUSH
24032: CALL_OW 49
// end ;
24036: GO 23888
24038: POP
24039: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24040: LD_ADDR_VAR 0 2
24044: PUSH
24045: DOUBLE
24046: LD_INT 1
24048: DEC
24049: ST_TO_ADDR
24050: LD_INT 5
24052: PPUSH
24053: LD_INT 6
24055: PPUSH
24056: CALL_OW 12
24060: PUSH
24061: LD_OWVAR 67
24065: PLUS
24066: PUSH
24067: FOR_TO
24068: IFFALSE 24176
// begin hc_sex = sex_male ;
24070: LD_ADDR_OWVAR 27
24074: PUSH
24075: LD_INT 1
24077: ST_TO_ADDR
// uc_side = 0 ;
24078: LD_ADDR_OWVAR 20
24082: PUSH
24083: LD_INT 0
24085: ST_TO_ADDR
// uc_nation = nation_nature ;
24086: LD_ADDR_OWVAR 21
24090: PUSH
24091: LD_INT 0
24093: ST_TO_ADDR
// hc_class = class_apeman ;
24094: LD_ADDR_OWVAR 28
24098: PUSH
24099: LD_INT 12
24101: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24102: LD_ADDR_OWVAR 31
24106: PUSH
24107: LD_INT 2
24109: PPUSH
24110: LD_INT 5
24112: PPUSH
24113: CALL_OW 12
24117: PUSH
24118: LD_INT 0
24120: PPUSH
24121: LD_INT 2
24123: PPUSH
24124: CALL_OW 12
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: ST_TO_ADDR
// hc_agressivity = 0 ;
24141: LD_ADDR_OWVAR 35
24145: PUSH
24146: LD_INT 0
24148: ST_TO_ADDR
// un = CreateHuman ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: CALL_OW 44
24158: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24159: LD_VAR 0 3
24163: PPUSH
24164: LD_INT 20
24166: PPUSH
24167: LD_INT 0
24169: PPUSH
24170: CALL_OW 49
// end ;
24174: GO 24067
24176: POP
24177: POP
// end ; end_of_file end_of_file
24178: LD_VAR 0 1
24182: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24183: GO 24185
24185: DISABLE
// begin ru_radar := 98 ;
24186: LD_ADDR_EXP 51
24190: PUSH
24191: LD_INT 98
24193: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24194: LD_ADDR_EXP 52
24198: PUSH
24199: LD_INT 89
24201: ST_TO_ADDR
// us_hack := 99 ;
24202: LD_ADDR_EXP 53
24206: PUSH
24207: LD_INT 99
24209: ST_TO_ADDR
// us_artillery := 97 ;
24210: LD_ADDR_EXP 54
24214: PUSH
24215: LD_INT 97
24217: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24218: LD_ADDR_EXP 55
24222: PUSH
24223: LD_INT 91
24225: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24226: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24227: LD_INT 0
24229: PPUSH
24230: PPUSH
24231: PPUSH
24232: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 264
24242: PUSH
24243: LD_EXP 55
24247: EQUAL
24248: IFFALSE 24320
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24250: LD_INT 68
24252: PPUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL_OW 255
24262: PPUSH
24263: CALL_OW 321
24267: PUSH
24268: LD_INT 2
24270: EQUAL
24271: IFFALSE 24283
// eff := 70 else
24273: LD_ADDR_VAR 0 6
24277: PUSH
24278: LD_INT 70
24280: ST_TO_ADDR
24281: GO 24291
// eff := 30 ;
24283: LD_ADDR_VAR 0 6
24287: PUSH
24288: LD_INT 30
24290: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: CALL_OW 250
24300: PPUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 251
24310: PPUSH
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 495
// end ; end ;
24320: LD_VAR 0 4
24324: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24325: LD_INT 0
24327: PPUSH
24328: PPUSH
24329: PPUSH
24330: PPUSH
24331: PPUSH
24332: PPUSH
// if cmd = 124 then
24333: LD_VAR 0 1
24337: PUSH
24338: LD_INT 124
24340: EQUAL
24341: IFFALSE 24547
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24343: LD_ADDR_VAR 0 5
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: LD_INT 34
24353: PUSH
24354: LD_INT 53
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 34
24363: PUSH
24364: LD_INT 14
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 69
24380: ST_TO_ADDR
// if not tmp then
24381: LD_VAR 0 5
24385: NOT
24386: IFFALSE 24390
// exit ;
24388: GO 24547
// for i in tmp do
24390: LD_ADDR_VAR 0 3
24394: PUSH
24395: LD_VAR 0 5
24399: PUSH
24400: FOR_IN
24401: IFFALSE 24545
// begin taskList := GetTaskList ( i ) ;
24403: LD_ADDR_VAR 0 6
24407: PUSH
24408: LD_VAR 0 3
24412: PPUSH
24413: CALL_OW 437
24417: ST_TO_ADDR
// if not taskList then
24418: LD_VAR 0 6
24422: NOT
24423: IFFALSE 24427
// continue ;
24425: GO 24400
// for j = 1 to taskList do
24427: LD_ADDR_VAR 0 4
24431: PUSH
24432: DOUBLE
24433: LD_INT 1
24435: DEC
24436: ST_TO_ADDR
24437: LD_VAR 0 6
24441: PUSH
24442: FOR_TO
24443: IFFALSE 24541
// if taskList [ j ] [ 1 ] = | then
24445: LD_VAR 0 6
24449: PUSH
24450: LD_VAR 0 4
24454: ARRAY
24455: PUSH
24456: LD_INT 1
24458: ARRAY
24459: PUSH
24460: LD_STRING |
24462: EQUAL
24463: IFFALSE 24539
// begin _taskList := Delete ( taskList , 1 ) ;
24465: LD_ADDR_VAR 0 7
24469: PUSH
24470: LD_VAR 0 6
24474: PPUSH
24475: LD_INT 1
24477: PPUSH
24478: CALL_OW 3
24482: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_VAR 0 7
24492: PPUSH
24493: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24497: LD_VAR 0 3
24501: PPUSH
24502: LD_VAR 0 6
24506: PUSH
24507: LD_VAR 0 4
24511: ARRAY
24512: PUSH
24513: LD_INT 2
24515: ARRAY
24516: PPUSH
24517: LD_VAR 0 6
24521: PUSH
24522: LD_VAR 0 4
24526: ARRAY
24527: PUSH
24528: LD_INT 3
24530: ARRAY
24531: PPUSH
24532: LD_INT 8
24534: PPUSH
24535: CALL 24552 0 4
// end ;
24539: GO 24442
24541: POP
24542: POP
// end ;
24543: GO 24400
24545: POP
24546: POP
// end ; end ;
24547: LD_VAR 0 2
24551: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24552: LD_INT 0
24554: PPUSH
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24563: LD_VAR 0 1
24567: NOT
24568: PUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: LD_VAR 0 3
24578: PPUSH
24579: CALL_OW 488
24583: NOT
24584: OR
24585: PUSH
24586: LD_VAR 0 4
24590: NOT
24591: OR
24592: IFFALSE 24596
// exit ;
24594: GO 24936
// list := [ ] ;
24596: LD_ADDR_VAR 0 13
24600: PUSH
24601: EMPTY
24602: ST_TO_ADDR
// if x - r < 0 then
24603: LD_VAR 0 2
24607: PUSH
24608: LD_VAR 0 4
24612: MINUS
24613: PUSH
24614: LD_INT 0
24616: LESS
24617: IFFALSE 24629
// min_x := 0 else
24619: LD_ADDR_VAR 0 7
24623: PUSH
24624: LD_INT 0
24626: ST_TO_ADDR
24627: GO 24645
// min_x := x - r ;
24629: LD_ADDR_VAR 0 7
24633: PUSH
24634: LD_VAR 0 2
24638: PUSH
24639: LD_VAR 0 4
24643: MINUS
24644: ST_TO_ADDR
// if y - r < 0 then
24645: LD_VAR 0 3
24649: PUSH
24650: LD_VAR 0 4
24654: MINUS
24655: PUSH
24656: LD_INT 0
24658: LESS
24659: IFFALSE 24671
// min_y := 0 else
24661: LD_ADDR_VAR 0 8
24665: PUSH
24666: LD_INT 0
24668: ST_TO_ADDR
24669: GO 24687
// min_y := y - r ;
24671: LD_ADDR_VAR 0 8
24675: PUSH
24676: LD_VAR 0 3
24680: PUSH
24681: LD_VAR 0 4
24685: MINUS
24686: ST_TO_ADDR
// max_x := x + r ;
24687: LD_ADDR_VAR 0 9
24691: PUSH
24692: LD_VAR 0 2
24696: PUSH
24697: LD_VAR 0 4
24701: PLUS
24702: ST_TO_ADDR
// max_y := y + r ;
24703: LD_ADDR_VAR 0 10
24707: PUSH
24708: LD_VAR 0 3
24712: PUSH
24713: LD_VAR 0 4
24717: PLUS
24718: ST_TO_ADDR
// for _x = min_x to max_x do
24719: LD_ADDR_VAR 0 11
24723: PUSH
24724: DOUBLE
24725: LD_VAR 0 7
24729: DEC
24730: ST_TO_ADDR
24731: LD_VAR 0 9
24735: PUSH
24736: FOR_TO
24737: IFFALSE 24854
// for _y = min_y to max_y do
24739: LD_ADDR_VAR 0 12
24743: PUSH
24744: DOUBLE
24745: LD_VAR 0 8
24749: DEC
24750: ST_TO_ADDR
24751: LD_VAR 0 10
24755: PUSH
24756: FOR_TO
24757: IFFALSE 24850
// begin if not ValidHex ( _x , _y ) then
24759: LD_VAR 0 11
24763: PPUSH
24764: LD_VAR 0 12
24768: PPUSH
24769: CALL_OW 488
24773: NOT
24774: IFFALSE 24778
// continue ;
24776: GO 24756
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24778: LD_VAR 0 11
24782: PPUSH
24783: LD_VAR 0 12
24787: PPUSH
24788: CALL_OW 351
24792: PUSH
24793: LD_VAR 0 11
24797: PPUSH
24798: LD_VAR 0 12
24802: PPUSH
24803: CALL_OW 554
24807: AND
24808: IFFALSE 24848
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24810: LD_ADDR_VAR 0 13
24814: PUSH
24815: LD_VAR 0 13
24819: PPUSH
24820: LD_VAR 0 13
24824: PUSH
24825: LD_INT 1
24827: PLUS
24828: PPUSH
24829: LD_VAR 0 11
24833: PUSH
24834: LD_VAR 0 12
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PPUSH
24843: CALL_OW 2
24847: ST_TO_ADDR
// end ;
24848: GO 24756
24850: POP
24851: POP
24852: GO 24736
24854: POP
24855: POP
// if not list then
24856: LD_VAR 0 13
24860: NOT
24861: IFFALSE 24865
// exit ;
24863: GO 24936
// for i in list do
24865: LD_ADDR_VAR 0 6
24869: PUSH
24870: LD_VAR 0 13
24874: PUSH
24875: FOR_IN
24876: IFFALSE 24934
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_STRING M
24885: PUSH
24886: LD_VAR 0 6
24890: PUSH
24891: LD_INT 1
24893: ARRAY
24894: PUSH
24895: LD_VAR 0 6
24899: PUSH
24900: LD_INT 2
24902: ARRAY
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: PPUSH
24928: CALL_OW 447
24932: GO 24875
24934: POP
24935: POP
// end ;
24936: LD_VAR 0 5
24940: RET
