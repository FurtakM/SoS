// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7206 0 0
// CreateNature ;
  57: CALL 20560 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10525 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41182 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41182 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41182 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41182 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41182 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41182 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41182 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41182 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41182 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41182 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41182 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41182 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79048 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 6960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 6960 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7070 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7349 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ; end_of_file
6819: PPOPN 4
6821: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// if not characters then
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6836
// exit ;
6834: GO 6915
// speaker := characters [ rand ( 1 , characters ) ] ;
6836: LD_ADDR_VAR 0 6
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 12
6858: ARRAY
6859: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL_OW 258
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: IFFALSE 6891
// Say ( speaker , dialogMID ) else
6875: LD_VAR 0 6
6879: PPUSH
6880: LD_VAR 0 2
6884: PPUSH
6885: CALL_OW 88
6889: GO 6905
// Say ( speaker , dialogFID ) ;
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 3
6900: PPUSH
6901: CALL_OW 88
// result := speaker ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_VAR 0 6
6914: ST_TO_ADDR
// end ;
6915: LD_VAR 0 4
6919: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// for i in charactersList do
6924: LD_ADDR_VAR 0 4
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: FOR_IN
6935: IFFALSE 6953
// SaveCharacters ( i , ident ) ;
6937: LD_VAR 0 4
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 38
6951: GO 6934
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 3
6959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to count do
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 6
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7063
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_gallery =  ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_name =  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: CALL_OW 380
// un = CreateHuman ;
7037: LD_ADDR_VAR 0 10
7041: PUSH
7042: CALL_OW 44
7046: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7047: LD_VAR 0 10
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: CALL_OW 52
// end ;
7061: GO 6981
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 7
7069: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
// uc_side := GetSide ( b ) ;
7075: LD_ADDR_OWVAR 20
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7090: LD_ADDR_OWVAR 21
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 248
7104: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: CALL_OW 254
7134: PUSH
7135: LD_INT 3
7137: MINUS
7138: ST_TO_ADDR
// if dir < 0 then
7139: LD_VAR 0 5
7143: PUSH
7144: LD_INT 0
7146: LESS
7147: IFFALSE 7163
// dir := 6 + dir ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: LD_INT 6
7156: PUSH
7157: LD_VAR 0 5
7161: PLUS
7162: ST_TO_ADDR
// un := CreateHuman ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: CALL_OW 44
7172: ST_TO_ADDR
// SetDir ( un , dir ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 5
7182: PPUSH
7183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 52
// end ;
7201: LD_VAR 0 3
7205: RET
// export function PrepareDifficulty ; begin
7206: LD_INT 0
7208: PPUSH
// case Difficulty of 1 :
7209: LD_OWVAR 67
7213: PUSH
7214: LD_INT 1
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7241
7222: POP
// begin RuSolMinLevel = 2 ;
7223: LD_ADDR_EXP 35
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7231: LD_ADDR_EXP 36
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// end ; 2 :
7239: GO 7302
7241: LD_INT 2
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7268
7249: POP
// begin RuSolMinLevel = 3 ;
7250: LD_ADDR_EXP 35
7254: PUSH
7255: LD_INT 3
7257: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7258: LD_ADDR_EXP 36
7262: PUSH
7263: LD_INT 5
7265: ST_TO_ADDR
// end ; 3 .. 4 :
7266: GO 7302
7268: LD_INT 3
7270: DOUBLE
7271: GREATEREQUAL
7272: IFFALSE 7280
7274: LD_INT 4
7276: DOUBLE
7277: LESSEQUAL
7278: IFTRUE 7282
7280: GO 7301
7282: POP
// begin RuSolMinLevel = 4 ;
7283: LD_ADDR_EXP 35
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7291: LD_ADDR_EXP 36
7295: PUSH
7296: LD_INT 6
7298: ST_TO_ADDR
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: LD_VAR 0 1
7306: RET
// export function ShowQuery1 ; begin
7307: LD_INT 0
7309: PPUSH
// result := Query ( QKill ) ;
7310: LD_ADDR_VAR 0 1
7314: PUSH
7315: LD_STRING QKill
7317: PPUSH
7318: CALL_OW 97
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// export function ShowQuery2 ; begin
7328: LD_INT 0
7330: PPUSH
// result := Query ( QKill2 ) ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: LD_STRING QKill2
7338: PPUSH
7339: CALL_OW 97
7343: ST_TO_ADDR
// end ;
7344: LD_VAR 0 1
7348: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7355: LD_ADDR_VAR 0 7
7359: PUSH
7360: LD_INT 48
7362: PUSH
7363: LD_INT 49
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 51
7377: PUSH
7378: LD_INT 52
7380: PUSH
7381: LD_INT 69
7383: PUSH
7384: LD_INT 39
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 40
7392: PUSH
7393: LD_INT 53
7395: PUSH
7396: LD_INT 71
7398: PUSH
7399: LD_INT 57
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 59
7422: PUSH
7423: LD_INT 54
7425: PUSH
7426: LD_INT 55
7428: PUSH
7429: LD_INT 56
7431: PUSH
7432: LD_INT 63
7434: PUSH
7435: LD_INT 64
7437: PUSH
7438: LD_INT 65
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 82
7458: PUSH
7459: LD_INT 83
7461: PUSH
7462: LD_INT 84
7464: PUSH
7465: LD_INT 85
7467: PUSH
7468: LD_INT 86
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: ST_TO_ADDR
// for i = 1 to list do
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: DOUBLE
7516: LD_INT 1
7518: DEC
7519: ST_TO_ADDR
7520: LD_VAR 0 7
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7598
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 5
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 1
7551: EQUAL
7552: PUSH
7553: LD_VAR 0 7
7557: PUSH
7558: LD_VAR 0 5
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 3
7568: PPUSH
7569: CALL_OW 482
7573: AND
7574: IFFALSE 7596
// AddComResearch ( lab , list [ i ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 7
7585: PUSH
7586: LD_VAR 0 5
7590: ARRAY
7591: PPUSH
7592: CALL_OW 184
7596: GO 7525
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 4
7604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
7609: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_VAR 0 3
7645: LESSEQUAL
7646: IFFALSE 7754
// begin for i = 1 to vehCount do
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7752
// begin weapon := weaponTab [ i ] ;
7666: LD_ADDR_VAR 0 10
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: LD_VAR 0 9
7680: ARRAY
7681: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7682: LD_VAR 0 10
7686: PUSH
7687: LD_INT 46
7689: EQUAL
7690: IFFALSE 7721
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7692: LD_VAR 0 2
7696: PPUSH
7697: LD_INT 24
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
7719: GO 7750
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: LD_VAR 0 7
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 6
7740: PPUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: CALL_OW 185
// end ;
7750: GO 7663
7752: POP
7753: POP
// end ; end ;
7754: LD_VAR 0 8
7758: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 313
7781: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_VAR 0 3
7791: PPUSH
7792: LD_INT 22
7794: PUSH
7795: LD_VAR 0 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 750
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 54
7829: PUSH
7830: EMPTY
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 1000
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7910: LD_VAR 0 6
7914: NOT
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: LD_INT 250
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: NOT
7958: AND
7959: IFFALSE 7963
// exit ;
7961: GO 8121
// if buildingsList and engineerOkInside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 8
7972: AND
7973: IFFALSE 7984
// ComExitBuilding ( engineerOkInside ) ;
7975: LD_VAR 0 8
7979: PPUSH
7980: CALL_OW 122
// if buildingsList and engineerOkOutside then
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 9
7993: AND
7994: IFFALSE 8014
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7996: LD_VAR 0 9
8000: PPUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8014: LD_VAR 0 6
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 4
8027: PUSH
8028: LD_INT 0
8030: EQUAL
8031: AND
8032: PUSH
8033: LD_VAR 0 9
8037: AND
8038: IFFALSE 8054
// ComEnterUnit ( engineerOkOutside , depot ) ;
8040: LD_VAR 0 9
8044: PPUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8054: LD_VAR 0 9
8058: PUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_VAR 0 4
8073: AND
8074: IFFALSE 8121
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_VAR 0 4
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_INT 4
8115: ARRAY
8116: PPUSH
8117: CALL_OW 145
// end ;
8121: LD_VAR 0 5
8125: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_INT 22
8144: PUSH
8145: LD_VAR 0 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 251
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 23
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 50
8239: PUSH
8240: EMPTY
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8254: LD_ADDR_VAR 0 10
8258: PUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 750
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8331: LD_ADDR_VAR 0 11
8335: PUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 21
8355: PUSH
8356: LD_INT 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 3
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 24
8385: PUSH
8386: LD_INT 1000
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8408: LD_VAR 0 10
8412: NOT
8413: PUSH
8414: LD_VAR 0 11
8418: NOT
8419: AND
8420: PUSH
8421: LD_VAR 0 6
8425: NOT
8426: AND
8427: IFFALSE 8431
// exit ;
8429: GO 8637
// if damageUnits and sci_list then
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: AND
8441: IFFALSE 8457
// ComMoveToArea ( damageUnits , healArea ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 113
// if unitsToHeal and sci_list then
8457: LD_VAR 0 11
8461: PUSH
8462: LD_VAR 0 6
8466: AND
8467: IFFALSE 8478
// ComExitBuilding ( sci_list ) ;
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8478: LD_VAR 0 11
8482: PUSH
8483: LD_VAR 0 7
8487: AND
8488: IFFALSE 8508
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8490: LD_VAR 0 7
8494: PPUSH
8495: LD_VAR 0 11
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: PUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 0
8524: EQUAL
8525: AND
8526: PUSH
8527: LD_VAR 0 7
8531: AND
8532: IFFALSE 8637
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8581: LD_ADDR_VAR 0 13
8585: PUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_VAR 0 12
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8599: LD_VAR 0 7
8603: PPUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 60
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PPUSH
8622: LD_VAR 0 12
8626: PUSH
8627: LD_VAR 0 13
8631: ARRAY
8632: PPUSH
8633: CALL_OW 120
// end ; end ;
8637: LD_VAR 0 5
8641: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// tmp := [ ] ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8656: LD_ADDR_VAR 0 7
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: ST_TO_ADDR
// if bunkers then
8692: LD_VAR 0 7
8696: IFFALSE 8766
// for i in bunkers do
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 7
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8764
// for j in UnitsInside ( i ) do
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 4
8720: PPUSH
8721: CALL_OW 313
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8760
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_INT 1
8746: PLUS
8747: PPUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
8758: GO 8726
8760: POP
8761: POP
8762: GO 8708
8764: POP
8765: POP
// if tmp then
8766: LD_VAR 0 6
8770: IFFALSE 8810
// begin ComExitBuilding ( tmp ) ;
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PPUSH
8806: CALL_OW 174
// end ; end ;
8810: LD_VAR 0 3
8814: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// enable ;
8820: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8821: LD_ADDR_VAR 0 6
8825: PUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL_OW 435
8835: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 34
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8874: LD_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 435
8888: AND
8889: PUSH
8890: LD_VAR 0 6
8894: AND
8895: IFFALSE 8928
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 177
// end ;
8928: LD_VAR 0 4
8932: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 56
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 700
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 60
8986: PUSH
8987: EMPTY
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 8
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: PUSH
9056: LD_EXP 48
9060: PUSH
9061: LD_EXP 49
9065: UNION
9066: DIFF
9067: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 70
9126: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 251
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: ST_TO_ADDR
// if barrackList then
9197: LD_VAR 0 9
9201: IFFALSE 9357
// begin if turretList = 0 then
9203: LD_VAR 0 7
9207: PUSH
9208: LD_INT 0
9210: EQUAL
9211: IFFALSE 9249
// begin if soldiersList then
9213: LD_VAR 0 6
9217: IFFALSE 9247
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9219: LD_VAR 0 6
9223: PPUSH
9224: LD_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: PPUSH
9243: CALL_OW 120
// end else
9247: GO 9357
// begin for i in barrackList do
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 9
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9355
// begin if not turretList then
9262: LD_VAR 0 7
9266: NOT
9267: IFFALSE 9273
// exit ;
9269: POP
9270: POP
9271: GO 9357
// insideUnits = UnitsInside ( i ) ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 313
9287: ST_TO_ADDR
// if insideUnits then
9288: LD_VAR 0 10
9292: IFFALSE 9353
// begin tmp := insideUnits [ 1 ] ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9317: LD_VAR 0 8
9321: PPUSH
9322: LD_VAR 0 7
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 3
9352: ST_TO_ADDR
// end ; end ;
9353: GO 9259
9355: POP
9356: POP
// end ; end ; end ;
9357: LD_VAR 0 3
9361: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9370: LD_ADDR_VAR 0 8
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 52
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: ST_TO_ADDR
// if not craneList then
9417: LD_VAR 0 8
9421: NOT
9422: IFFALSE 9426
// exit ;
9424: GO 9860
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 1000
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9483: LD_VAR 0 9
9487: PUSH
9488: LD_VAR 0 8
9492: PPUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 750
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: AND
9508: IFFALSE 9543
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 750
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: LD_VAR 0 9
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9543: LD_VAR 0 8
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 750
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 72
9569: IFFALSE 9607
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: LD_INT 750
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 2
9602: PPUSH
9603: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9607: LD_VAR 0 8
9611: PUSH
9612: LD_VAR 0 9
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: AND
9621: PUSH
9622: LD_VAR 0 3
9626: AND
9627: IFFALSE 9674
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9629: LD_VAR 0 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 2
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 3
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 4
9668: ARRAY
9669: PPUSH
9670: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9674: LD_ADDR_VAR 0 7
9678: PUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 52
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 750
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 70
9743: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9744: LD_ADDR_VAR 0 6
9748: PUSH
9749: LD_VAR 0 2
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 70
9802: ST_TO_ADDR
// if crane then
9803: LD_VAR 0 7
9807: IFFALSE 9860
// for i in crane do
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 7
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9858
// begin if dep then
9822: LD_VAR 0 6
9826: IFFALSE 9842
// ComMoveUnit ( i , dep ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9842: LD_VAR 0 5
9846: PPUSH
9847: CALL_OW 311
9851: PPUSH
9852: CALL 80470 0 1
// end ;
9856: GO 9819
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function BuildBulldozer ; begin
9865: LD_INT 0
9867: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 302
9875: NOT
9876: PUSH
9877: LD_INT 17
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: NONEQUAL
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 9912
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9893: LD_INT 17
9895: PPUSH
9896: LD_INT 24
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 53
9907: PPUSH
9908: CALL_OW 185
// end ;
9912: LD_VAR 0 1
9916: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if not bulldozer then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10215
// list := ListEnvironmentArea ( area ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 353
9947: ST_TO_ADDR
// tmp := [ ] ;
9948: LD_ADDR_VAR 0 6
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// for i = 1 to list do
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: DOUBLE
9961: LD_INT 1
9963: DEC
9964: ST_TO_ADDR
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_TO
9971: IFFALSE 10069
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_VAR 0 4
9982: ARRAY
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_VAR 0 4
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: CALL_OW 554
10007: IFFALSE 10067
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10009: LD_ADDR_VAR 0 6
10013: PUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 1
10026: PLUS
10027: PPUSH
10028: LD_VAR 0 5
10032: PUSH
10033: LD_VAR 0 4
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PUSH
10043: LD_VAR 0 5
10047: PUSH
10048: LD_VAR 0 4
10052: ARRAY
10053: PUSH
10054: LD_INT 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
// end ;
10067: GO 9970
10069: POP
10070: POP
// ComStop ( bulldozer ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// for i = tmp downto 1 do
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: DOUBLE
10115: LD_VAR 0 6
10119: INC
10120: ST_TO_ADDR
10121: LD_INT 1
10123: PUSH
10124: FOR_DOWNTO
10125: IFFALSE 10213
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_INT 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 7
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL 10316 0 3
10159: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PPUSH
10183: CALL 10220 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_VAR 0 7
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 3
10210: ST_TO_ADDR
// end ;
10211: GO 10124
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 3
10219: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10220: LD_INT 0
10222: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: CALL_OW 351
10237: PUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: CALL_OW 554
10252: AND
10253: PUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 488
10268: AND
10269: PUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: CALL_OW 428
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: AND
10290: IFFALSE 10311
// AddComMoveXY ( bulldozer , x , y ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 171
// end ;
10311: LD_VAR 0 4
10315: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// dist := 99999 ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 99999
10332: ST_TO_ADDR
// for i = 1 to list do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: DOUBLE
10339: LD_INT 1
10341: DEC
10342: ST_TO_ADDR
10343: LD_VAR 0 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10487
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_VAR 0 5
10375: ARRAY
10376: PUSH
10377: LD_INT 1
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PPUSH
10396: CALL_OW 298
10400: ST_TO_ADDR
// if d = 0 then
10401: LD_VAR 0 7
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: IFFALSE 10413
// continue ;
10411: GO 10348
// if d < dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 6
10422: LESS
10423: IFFALSE 10485
// begin _x := list [ i ] [ 1 ] ;
10425: LD_ADDR_VAR 0 8
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_VAR 0 5
10439: ARRAY
10440: PUSH
10441: LD_INT 1
10443: ARRAY
10444: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_VAR 0 5
10459: ARRAY
10460: PUSH
10461: LD_INT 2
10463: ARRAY
10464: ST_TO_ADDR
// _i := i ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 5
10474: ST_TO_ADDR
// dist := d ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 7
10484: ST_TO_ADDR
// end ; end ;
10485: GO 10348
10487: POP
10488: POP
// result := [ _x , _y , _i , dist ] ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 8
10498: PUSH
10499: LD_VAR 0 9
10503: PUSH
10504: LD_VAR 0 10
10508: PUSH
10509: LD_VAR 0 6
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// end ; end_of_file
10520: LD_VAR 0 4
10524: RET
// export function Action ; begin
10525: LD_INT 0
10527: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10528: LD_INT 66
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10538: LD_INT 22
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10584
// SetClass ( JMM , 2 ) ;
10572: LD_EXP 1
10576: PPUSH
10577: LD_INT 2
10579: PPUSH
10580: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10584: LD_STRING M1
10586: PPUSH
10587: CALL_OW 337
// case Difficulty of 1 :
10591: LD_OWVAR 67
10595: PUSH
10596: LD_INT 1
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10614
10604: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10605: LD_STRING M1-1
10607: PPUSH
10608: CALL_OW 337
10612: GO 10657
10614: LD_INT 2
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10632
10622: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10623: LD_STRING M1-2
10625: PPUSH
10626: CALL_OW 337
10630: GO 10657
10632: LD_INT 3
10634: DOUBLE
10635: GREATEREQUAL
10636: IFFALSE 10644
10638: LD_INT 4
10640: DOUBLE
10641: LESSEQUAL
10642: IFTRUE 10646
10644: GO 10656
10646: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10647: LD_STRING M1-3
10649: PPUSH
10650: CALL_OW 337
10654: GO 10657
10656: POP
// ChangeMissionObjectives ( M1cont ) ;
10657: LD_STRING M1cont
10659: PPUSH
10660: CALL_OW 337
// SaveForQuickRestart ;
10664: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10668: LD_INT 525
10670: PPUSH
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 12
10678: PPUSH
10679: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10683: LD_INT 5
10685: PPUSH
10686: LD_INT 82
10688: PPUSH
10689: LD_INT 38
10691: PPUSH
10692: LD_INT 10
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 56
// wait ( 0 0$14 ) ;
10702: LD_INT 490
10704: PPUSH
10705: CALL_OW 67
// firstCrateSpawn := true ;
10709: LD_ADDR_EXP 41
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: LD_VAR 0 1
10721: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10722: LD_EXP 41
10726: IFFALSE 11115
10728: GO 10730
10730: DISABLE
10731: LD_INT 0
10733: PPUSH
// begin if IsOk ( Lisa ) then
10734: LD_EXP 2
10738: PPUSH
10739: CALL_OW 302
10743: IFFALSE 10759
// Say ( Lisa , DR0-Lisa-1 ) else
10745: LD_EXP 2
10749: PPUSH
10750: LD_STRING DR0-Lisa-1
10752: PPUSH
10753: CALL_OW 88
10757: GO 10905
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10759: LD_INT 22
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 26
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 3
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PUSH
10850: LD_EXP 1
10854: PUSH
10855: LD_EXP 8
10859: PUSH
10860: LD_EXP 5
10864: PUSH
10865: LD_EXP 6
10869: PUSH
10870: LD_EXP 7
10874: PUSH
10875: LD_EXP 4
10879: PUSH
10880: LD_EXP 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: DIFF
10894: PPUSH
10895: LD_STRING DR0-Sol1-1
10897: PPUSH
10898: LD_STRING DR0-Sol1-1
10900: PPUSH
10901: CALL 6822 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 26
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 25
10975: PUSH
10976: LD_INT 4
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: PUSH
11001: LD_EXP 1
11005: PUSH
11006: LD_EXP 8
11010: PUSH
11011: LD_EXP 5
11015: PUSH
11016: LD_EXP 2
11020: PUSH
11021: LD_EXP 6
11025: PUSH
11026: LD_EXP 7
11030: PUSH
11031: LD_EXP 4
11035: PUSH
11036: LD_EXP 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: DIFF
11051: PPUSH
11052: LD_STRING DR0-Sol2-1
11054: PPUSH
11055: LD_STRING DR0-Sol2-1
11057: PPUSH
11058: CALL 6822 0 3
11062: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11063: LD_EXP 4
11067: PPUSH
11068: CALL_OW 302
11072: IFFALSE 11086
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11074: LD_EXP 4
11078: PPUSH
11079: LD_STRING DR0-Cyrus-1
11081: PPUSH
11082: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11086: LD_EXP 2
11090: PPUSH
11091: CALL_OW 302
11095: PUSH
11096: LD_VAR 0 1
11100: OR
11101: IFFALSE 11115
// Say ( JMM , DR0-JMM-1 ) ;
11103: LD_EXP 1
11107: PPUSH
11108: LD_STRING DR0-JMM-1
11110: PPUSH
11111: CALL_OW 88
// end ;
11115: PPOPN 1
11117: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11118: LD_EXP 5
11122: PPUSH
11123: CALL_OW 302
11127: PUSH
11128: LD_INT 22
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 16
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: PUSH
11157: LD_INT 0
11159: GREATER
11160: AND
11161: PUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 463
11169: NOT
11170: AND
11171: IFFALSE 11449
11173: GO 11175
11175: DISABLE
// begin DialogueOn ;
11176: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11180: LD_EXP 5
11184: PPUSH
11185: LD_STRING D10-Frank-1
11187: PPUSH
11188: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 25
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 25
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PUSH
11272: LD_EXP 1
11276: PUSH
11277: LD_EXP 5
11281: PUSH
11282: LD_EXP 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: DIFF
11292: PPUSH
11293: LD_STRING D10-Sol1-1
11295: PPUSH
11296: LD_STRING D10-FSol1-1
11298: PPUSH
11299: CALL 6822 0 3
// Say ( Frank , D10-Frank-2 ) ;
11303: LD_EXP 5
11307: PPUSH
11308: LD_STRING D10-Frank-2
11310: PPUSH
11311: CALL_OW 88
// if IsOk ( Lisa ) then
11315: LD_EXP 2
11319: PPUSH
11320: CALL_OW 302
11324: IFFALSE 11340
// Say ( Lisa , D10-Lisa-2 ) else
11326: LD_EXP 2
11330: PPUSH
11331: LD_STRING D10-Lisa-2
11333: PPUSH
11334: CALL_OW 88
11338: GO 11445
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11340: LD_INT 22
11342: PUSH
11343: LD_INT 1
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 4
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: LD_EXP 1
11424: PUSH
11425: LD_EXP 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: DIFF
11434: PPUSH
11435: LD_STRING D10-Sol1-2
11437: PPUSH
11438: LD_STRING D10-FSol1-2
11440: PPUSH
11441: CALL 6822 0 3
// DialogueOff ;
11445: CALL_OW 7
// end ;
11449: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 463
11457: NOT
11458: IFFALSE 11741
11460: GO 11462
11462: DISABLE
// begin HarrisonSupport ;
11463: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11467: LD_EXP 18
11471: PPUSH
11472: CALL_OW 310
11476: PPUSH
11477: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11481: LD_EXP 18
11485: PPUSH
11486: LD_STRING DEng-Eng1-1
11488: PPUSH
11489: CALL_OW 88
// wait ( 1 1$0 ) ;
11493: LD_INT 2100
11495: PPUSH
11496: CALL_OW 67
// DialogueOn ;
11500: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11504: LD_EXP 15
11508: PPUSH
11509: LD_STRING DRem-Har-1
11511: PPUSH
11512: CALL_OW 94
// if contactWithRussian then
11516: LD_EXP 23
11520: IFFALSE 11536
// Say ( JMM , DRem-JMM-1 ) else
11522: LD_EXP 1
11526: PPUSH
11527: LD_STRING DRem-JMM-1
11529: PPUSH
11530: CALL_OW 88
11534: GO 11548
// Say ( JMM , DRem-JMM-1a ) ;
11536: LD_EXP 1
11540: PPUSH
11541: LD_STRING DRem-JMM-1a
11543: PPUSH
11544: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11548: LD_EXP 15
11552: PPUSH
11553: LD_STRING DRem-Har-2
11555: PPUSH
11556: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11560: LD_STRING DenisInDelta
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL_OW 30
11570: IFFALSE 11586
// Say ( JMM , DRem-JMM-2 ) else
11572: LD_EXP 1
11576: PPUSH
11577: LD_STRING DRem-JMM-2
11579: PPUSH
11580: CALL_OW 88
11584: GO 11598
// Say ( JMM , DRem-JMM-2a ) ;
11586: LD_EXP 1
11590: PPUSH
11591: LD_STRING DRem-JMM-2a
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING DRem-Har-3
11605: PPUSH
11606: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11610: LD_EXP 1
11614: PPUSH
11615: LD_STRING DRem-JMM-3
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11622: LD_EXP 15
11626: PPUSH
11627: LD_STRING DRem-Har-4
11629: PPUSH
11630: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11634: LD_STRING DenisInDelta
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: CALL_OW 30
11644: IFFALSE 11704
// begin Say ( JMM , DRem-JMM-4 ) ;
11646: LD_EXP 1
11650: PPUSH
11651: LD_STRING DRem-JMM-4
11653: PPUSH
11654: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11658: LD_EXP 15
11662: PPUSH
11663: LD_STRING DRem-Har-5
11665: PPUSH
11666: CALL_OW 94
// DialogueOff ;
11670: CALL_OW 7
// wait ( 4 4$00 ) ;
11674: LD_INT 8400
11676: PPUSH
11677: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until not InBattle ( 1 ) ;
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 463
11695: NOT
11696: IFFALSE 11681
// SpawnDenis ;
11698: CALL 11742 0 0
// end else
11702: GO 11741
// begin DialogueOff ;
11704: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11708: LD_INT 36
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11721: LD_INT 15
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11734: LD_STRING MR
11736: PPUSH
11737: CALL_OW 337
// end ; end ;
11741: END
// export function SpawnDenis ; var tmp ; begin
11742: LD_INT 0
11744: PPUSH
11745: PPUSH
// PrepareDenis ;
11746: CALL 2244 0 0
// if not Denis then
11750: LD_EXP 9
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11980
// CenterNowOnUnits ( Denis ) ;
11759: LD_EXP 9
11763: PPUSH
11764: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11788: LD_EXP 9
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_EXP 9
11802: PPUSH
11803: CALL_OW 74
11807: PPUSH
11808: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11812: LD_INT 35
11814: PPUSH
11815: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11819: LD_INT 22
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 91
11831: PUSH
11832: LD_EXP 9
11836: PUSH
11837: LD_INT 10
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: IFFALSE 11812
// SetSide ( Denis , 1 ) ;
11855: LD_EXP 9
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 235
// DialogueOn ;
11867: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11871: LD_EXP 9
11875: PPUSH
11876: LD_STRING DDen-Den-1
11878: PPUSH
11879: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11883: LD_EXP 1
11887: PPUSH
11888: LD_STRING DDen-JMM-1
11890: PPUSH
11891: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11895: LD_EXP 9
11899: PPUSH
11900: LD_STRING DDen-Den-2
11902: PPUSH
11903: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING DDen-JMM-2
11914: PPUSH
11915: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11919: LD_EXP 9
11923: PPUSH
11924: LD_STRING DDen-Den-3
11926: PPUSH
11927: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11931: LD_EXP 1
11935: PPUSH
11936: LD_STRING DDen-JMM-3
11938: PPUSH
11939: CALL_OW 88
// DialogueOff ;
11943: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11947: LD_INT 36
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11960: LD_INT 15
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11973: LD_STRING MR
11975: PPUSH
11976: CALL_OW 337
// end ;
11980: LD_VAR 0 1
11984: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11985: LD_INT 22
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 30
11997: PUSH
11998: LD_INT 15
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PUSH
12014: LD_EXP 9
12018: PPUSH
12019: CALL_OW 302
12023: AND
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 463
12032: NOT
12033: AND
12034: IFFALSE 12063
12036: GO 12038
12038: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12039: LD_EXP 9
12043: PPUSH
12044: LD_STRING DR1-Den-1
12046: PPUSH
12047: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12051: LD_EXP 1
12055: PPUSH
12056: LD_STRING DR1-JMM-1
12058: PPUSH
12059: CALL_OW 88
// end ;
12063: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12064: LD_INT 15
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 321
12074: PUSH
12075: LD_INT 2
12077: EQUAL
12078: PUSH
12079: LD_EXP 9
12083: PPUSH
12084: CALL_OW 302
12088: AND
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 463
12097: NOT
12098: AND
12099: IFFALSE 12308
12101: GO 12103
12103: DISABLE
// begin DialogueOn ;
12104: CALL_OW 6
// if IsOK ( Denis ) then
12108: LD_EXP 9
12112: PPUSH
12113: CALL_OW 302
12117: IFFALSE 12133
// Say ( Denis , DR2-Den-1 ) else
12119: LD_EXP 9
12123: PPUSH
12124: LD_STRING DR2-Den-1
12126: PPUSH
12127: CALL_OW 88
12131: GO 12192
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12133: LD_INT 22
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 25
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: PUSH
12173: LD_EXP 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: DIFF
12181: PPUSH
12182: LD_STRING DR2-Sci1-1
12184: PPUSH
12185: LD_STRING DR2-FSci1-1
12187: PPUSH
12188: CALL 6822 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12192: LD_EXP 1
12196: PPUSH
12197: LD_STRING DR2-JMM-1
12199: PPUSH
12200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12204: LD_INT 22
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 26
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 23
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PUSH
12255: LD_EXP 1
12259: PUSH
12260: LD_EXP 9
12264: PUSH
12265: LD_EXP 8
12269: PUSH
12270: LD_EXP 5
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: DIFF
12281: PPUSH
12282: LD_STRING DR2-Sol1-1
12284: PPUSH
12285: LD_STRING 
12287: PPUSH
12288: CALL 6822 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING DR2-JMM-2
12299: PPUSH
12300: CALL_OW 88
// DialogueOff ;
12304: CALL_OW 7
// end ;
12308: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12309: LD_INT 22
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 36
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: PUSH
12338: LD_INT 0
12340: EQUAL
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 33
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: PUSH
12382: LD_INT 0
12384: GREATER
12385: AND
12386: PUSH
12387: LD_EXP 24
12391: PUSH
12392: LD_INT 0
12394: EQUAL
12395: AND
12396: PUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 463
12404: NOT
12405: AND
12406: IFFALSE 12543
12408: GO 12410
12410: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12411: LD_INT 22
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 3
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 26
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: PUSH
12462: LD_EXP 1
12466: PUSH
12467: LD_EXP 6
12471: PUSH
12472: LD_EXP 7
12476: PUSH
12477: LD_EXP 9
12481: PUSH
12482: LD_EXP 16
12486: PUSH
12487: LD_EXP 3
12491: PUSH
12492: LD_EXP 4
12496: PUSH
12497: LD_EXP 2
12501: PUSH
12502: LD_EXP 5
12506: PUSH
12507: LD_EXP 8
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: DIFF
12524: PPUSH
12525: LD_STRING D3a-Mech1-1
12527: PPUSH
12528: LD_STRING 
12530: PPUSH
12531: CALL 6822 0 3
// firstTower = 2 ;
12535: LD_ADDR_EXP 24
12539: PUSH
12540: LD_INT 2
12542: ST_TO_ADDR
// end ;
12543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12544: LD_INT 22
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: PUSH
12573: LD_INT 0
12575: EQUAL
12576: IFFALSE 12707
12578: GO 12580
12580: DISABLE
12581: LD_INT 0
12583: PPUSH
// begin stop_talking := true ;
12584: LD_ADDR_OWVAR 56
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12592: LD_ADDR_VAR 0 1
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 4
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12697
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 7500
12690: PPUSH
12691: CALL_OW 591
12695: GO 12677
12697: POP
12698: POP
// stop_talking := false ;
12699: LD_ADDR_OWVAR 56
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// end ;
12707: PPOPN 1
12709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12710: LD_INT 22
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 30
12722: PUSH
12723: LD_INT 36
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 1
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 33
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: AND
12779: PUSH
12780: CALL 13332 0 0
12784: AND
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 463
12793: NOT
12794: AND
12795: IFFALSE 13329
12797: GO 12799
12799: DISABLE
12800: LD_INT 0
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 36
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12841: LD_ADDR_VAR 0 4
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: EMPTY
12892: ST_TO_ADDR
// for i in tmpControlTowers do
12893: LD_ADDR_VAR 0 1
12897: PUSH
12898: LD_VAR 0 3
12902: PUSH
12903: FOR_IN
12904: IFFALSE 13327
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12906: LD_EXP 1
12910: PPUSH
12911: CALL_OW 310
12915: PUSH
12916: LD_VAR 0 1
12920: EQUAL
12921: PUSH
12922: LD_EXP 1
12926: PPUSH
12927: CALL_OW 257
12931: PUSH
12932: LD_INT 3
12934: EQUAL
12935: AND
12936: IFFALSE 13070
// begin InGameOn ;
12938: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12942: LD_VAR 0 4
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12955: LD_EXP 1
12959: PPUSH
12960: LD_STRING D4a-JMM-1
12962: PPUSH
12963: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12967: LD_VAR 0 4
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_EXP 1
12980: PPUSH
12981: CALL_OW 53
// wait ( 0 0$1 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12992: LD_VAR 0 4
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 4
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: CALL_OW 250
13014: PUSH
13015: LD_INT 3
13017: PLUS
13018: PPUSH
13019: LD_VAR 0 4
13023: PUSH
13024: LD_INT 1
13026: ARRAY
13027: PPUSH
13028: CALL_OW 251
13032: PUSH
13033: LD_INT 2
13035: MINUS
13036: PPUSH
13037: CALL_OW 111
// wait ( 0 0$2 ) ;
13041: LD_INT 70
13043: PPUSH
13044: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13048: LD_EXP 1
13052: PPUSH
13053: LD_STRING D4b-JMM-1
13055: PPUSH
13056: CALL_OW 88
// InGameOff ;
13060: CALL_OW 9
// exit ;
13064: POP
13065: POP
13066: GO 13329
// end else
13068: GO 13325
// begin InGameOn ;
13070: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13074: LD_ADDR_VAR 0 5
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 313
13088: PPUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 72
13103: ST_TO_ADDR
// if not tmpMechanicInside then
13104: LD_VAR 0 5
13108: NOT
13109: IFFALSE 13113
// continue ;
13111: GO 12903
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13113: LD_VAR 0 5
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 258
13126: PUSH
13127: LD_INT 1
13129: EQUAL
13130: IFFALSE 13150
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13132: LD_VAR 0 5
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: PPUSH
13141: LD_STRING D4a-Mech1-1
13143: PPUSH
13144: CALL_OW 88
13148: GO 13166
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: PPUSH
13159: LD_STRING D4a-FMech1-1
13161: PPUSH
13162: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13179: LD_VAR 0 4
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_VAR 0 5
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 53
// wait ( 0 0$1 ) ;
13201: LD_INT 35
13203: PPUSH
13204: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13208: LD_VAR 0 4
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 4
13221: PUSH
13222: LD_INT 1
13224: ARRAY
13225: PPUSH
13226: CALL_OW 250
13230: PUSH
13231: LD_INT 3
13233: PLUS
13234: PPUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 251
13248: PUSH
13249: LD_INT 2
13251: MINUS
13252: PPUSH
13253: CALL_OW 111
// wait ( 0 0$2 ) ;
13257: LD_INT 70
13259: PPUSH
13260: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13264: LD_VAR 0 5
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: PPUSH
13273: CALL_OW 258
13277: PUSH
13278: LD_INT 1
13280: EQUAL
13281: IFFALSE 13301
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13283: LD_VAR 0 5
13287: PUSH
13288: LD_INT 1
13290: ARRAY
13291: PPUSH
13292: LD_STRING D4b-Mech1-1
13294: PPUSH
13295: CALL_OW 88
13299: GO 13317
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13301: LD_VAR 0 5
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_STRING D4b-FMech1-1
13312: PPUSH
13313: CALL_OW 88
// InGameOff ;
13317: CALL_OW 9
// exit ;
13321: POP
13322: POP
13323: GO 13329
// end ; end ;
13325: GO 12903
13327: POP
13328: POP
// end ;
13329: PPOPN 5
13331: END
// function CheckMehInside ; var i , j , tmp ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
// result := false ;
13338: LD_ADDR_VAR 0 1
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 36
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 4
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13453
// for i in tmp do
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_VAR 0 4
13398: PUSH
13399: FOR_IN
13400: IFFALSE 13451
// for j in UnitsInside ( i ) do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 2
13411: PPUSH
13412: CALL_OW 313
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13447
// if GetClass ( j ) = class_mechanic then
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 257
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: IFFALSE 13445
// begin result := true ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// break ;
13443: GO 13447
// end ;
13445: GO 13417
13447: POP
13448: POP
13449: GO 13399
13451: POP
13452: POP
// end ;
13453: LD_VAR 0 1
13457: RET
// every 12 12$0 do
13458: GO 13460
13460: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13461: LD_INT 35
13463: PPUSH
13464: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 463
13475: NOT
13476: PUSH
13477: LD_INT 32
13479: PPUSH
13480: LD_INT 81
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 70
13494: NOT
13495: AND
13496: PUSH
13497: LD_EXP 27
13501: PUSH
13502: LD_INT 10500
13504: LESS
13505: OR
13506: IFFALSE 13461
// PrepareKurt ;
13508: CALL 16141 0 0
// end ;
13512: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13513: LD_EXP 16
13517: PPUSH
13518: CALL_OW 302
13522: PUSH
13523: LD_EXP 16
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 2
13542: AND
13543: IFFALSE 13708
13545: GO 13547
13547: DISABLE
// begin wait ( 0 0$50 ) ;
13548: LD_INT 1750
13550: PPUSH
13551: CALL_OW 67
// if not IsOk ( Joan ) then
13555: LD_EXP 16
13559: PPUSH
13560: CALL_OW 302
13564: NOT
13565: IFFALSE 13569
// exit ;
13567: GO 13708
// if IsOK ( Lisa ) then
13569: LD_EXP 2
13573: PPUSH
13574: CALL_OW 302
13578: IFFALSE 13708
// begin DialogueOn ;
13580: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13584: LD_EXP 2
13588: PPUSH
13589: LD_STRING D7-Lisa-1
13591: PPUSH
13592: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13596: LD_EXP 1
13600: PPUSH
13601: LD_STRING D7-JMM-1
13603: PPUSH
13604: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13608: LD_EXP 2
13612: PPUSH
13613: LD_STRING D7-Lisa-2
13615: PPUSH
13616: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13620: LD_EXP 1
13624: PPUSH
13625: LD_STRING D7-JMM-2
13627: PPUSH
13628: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13632: LD_EXP 2
13636: PPUSH
13637: LD_STRING D7-Lisa-3
13639: PPUSH
13640: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13644: LD_EXP 1
13648: PPUSH
13649: LD_STRING D7-JMM-3
13651: PPUSH
13652: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13656: LD_EXP 2
13660: PPUSH
13661: LD_STRING D7-Lisa-4
13663: PPUSH
13664: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13668: LD_EXP 1
13672: PPUSH
13673: LD_STRING D7-JMM-4
13675: PPUSH
13676: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13680: LD_EXP 1
13684: PPUSH
13685: LD_STRING D7-JMM-4a
13687: PPUSH
13688: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13692: LD_EXP 2
13696: PPUSH
13697: LD_STRING D7-Lisa-5
13699: PPUSH
13700: CALL_OW 88
// DialogueOff ;
13704: CALL_OW 7
// end ; end ;
13708: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13709: LD_EXP 14
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 91
13726: PUSH
13727: LD_EXP 14
13731: PUSH
13732: LD_INT 10
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: LD_INT 25
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 3
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 1
13802: GREATER
13803: AND
13804: IFFALSE 13821
13806: GO 13808
13808: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13809: LD_EXP 14
13813: PPUSH
13814: LD_STRING D5-Sol1-1
13816: PPUSH
13817: CALL_OW 88
13821: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13822: LD_INT 22
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: PUSH
13851: LD_INT 2
13853: GREATEREQUAL
13854: IFFALSE 13874
13856: GO 13858
13858: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13859: LD_STRING MRa
13861: PPUSH
13862: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13866: LD_ADDR_EXP 29
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// end ;
13874: END
// every 2 2$00 do var i , last ;
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
// begin last := 8 ;
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: LD_INT 8
13889: ST_TO_ADDR
// for i = 1 to last do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_VAR 0 2
13904: PUSH
13905: FOR_TO
13906: IFFALSE 13934
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13908: LD_INT 6300
13910: PPUSH
13911: LD_INT 12600
13913: PPUSH
13914: CALL_OW 12
13918: PPUSH
13919: CALL_OW 67
// PrepareRandoms ( i ) ;
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL 4129 0 1
// end ;
13932: GO 13905
13934: POP
13935: POP
// end ;
13936: PPOPN 2
13938: END
// every 5 5$20 do
13939: GO 13941
13941: DISABLE
// begin DialogueOn ;
13942: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13946: LD_EXP 10
13950: PPUSH
13951: LD_STRING D12a-Sci-1
13953: PPUSH
13954: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING D12a-JMM-1
13965: PPUSH
13966: CALL_OW 88
// DialogueOff ;
13970: CALL_OW 7
// cratesStatus := 1 ;
13974: LD_ADDR_EXP 39
13978: PUSH
13979: LD_INT 1
13981: ST_TO_ADDR
// end ;
13982: END
// every 13 13$0 do
13983: GO 13985
13985: DISABLE
// begin DialogueOn ;
13986: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13990: LD_EXP 10
13994: PPUSH
13995: LD_STRING D12b-Sci-1
13997: PPUSH
13998: CALL_OW 94
// DialogueOff ;
14002: CALL_OW 7
// cratesStatus := 2 ;
14006: LD_ADDR_EXP 39
14010: PUSH
14011: LD_INT 2
14013: ST_TO_ADDR
// BuildBulldozer ;
14014: CALL 9865 0 0
// end ;
14018: END
// every 32 32$0 do
14019: GO 14021
14021: DISABLE
// begin DialogueOn ;
14022: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14026: LD_EXP 10
14030: PPUSH
14031: LD_STRING D12c-Sci-1
14033: PPUSH
14034: CALL_OW 94
// DialogueOff ;
14038: CALL_OW 7
// wait ( 3 3$0 ) ;
14042: LD_INT 6300
14044: PPUSH
14045: CALL_OW 67
// DialogueOn ;
14049: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14053: LD_EXP 10
14057: PPUSH
14058: LD_STRING D12d-Sci-1
14060: PPUSH
14061: CALL_OW 94
// DialogueOff ;
14065: CALL_OW 7
// cratesStatus = 1 ;
14069: LD_ADDR_EXP 39
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14077: CALL 20338 0 0
// wait ( 2 2$30 ) ;
14081: LD_INT 5250
14083: PPUSH
14084: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 463
14102: NOT
14103: PUSH
14104: LD_INT 32
14106: PPUSH
14107: LD_INT 81
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 70
14121: NOT
14122: AND
14123: PUSH
14124: LD_EXP 27
14128: PUSH
14129: LD_INT 6300
14131: LESS
14132: OR
14133: IFFALSE 14088
// PrepareJoan ;
14135: CALL 3085 0 0
// end ;
14139: END
// every 42 42$0 do
14140: GO 14142
14142: DISABLE
// begin DialogueOn ;
14143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14147: LD_EXP 10
14151: PPUSH
14152: LD_STRING D12e-Sci-1
14154: PPUSH
14155: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14159: LD_EXP 1
14163: PPUSH
14164: LD_STRING D12e-JMM-1
14166: PPUSH
14167: CALL_OW 88
// DialogueOff ;
14171: CALL_OW 7
// cratesStatus := 2 ;
14175: LD_ADDR_EXP 39
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
// end ; end_of_file
14183: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14184: LD_VAR 0 1
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: PUSH
14193: LD_VAR 0 2
14197: PUSH
14198: LD_INT 3
14200: EQUAL
14201: AND
14202: IFFALSE 14212
// contactWithRussian := 1 ;
14204: LD_ADDR_EXP 23
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// end ;
14212: PPOPN 2
14214: END
// on BuildingComplete ( building ) do var i ;
14215: LD_INT 0
14217: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 266
14227: PUSH
14228: LD_INT 36
14230: EQUAL
14231: PUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 255
14241: PUSH
14242: LD_INT 1
14244: EQUAL
14245: AND
14246: PUSH
14247: LD_EXP 24
14251: PUSH
14252: LD_INT 0
14254: EQUAL
14255: AND
14256: IFFALSE 14336
// begin firstTower = 1 ;
14258: LD_ADDR_EXP 24
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14266: LD_INT 22
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 21
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 26
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: PUSH
14317: LD_EXP 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: DIFF
14325: PPUSH
14326: LD_STRING D3b-Mech1-1
14328: PPUSH
14329: LD_STRING D3b-Mech1-1
14331: PPUSH
14332: CALL 6822 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 266
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: PUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 1
14362: EQUAL
14363: AND
14364: IFFALSE 14378
// SetBName ( building , theta ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: LD_STRING theta
14373: PPUSH
14374: CALL_OW 500
// if GetSide ( building ) = 3 then
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 255
14387: PUSH
14388: LD_INT 3
14390: EQUAL
14391: IFFALSE 14431
// begin for i := 1 to 4 do
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: DOUBLE
14399: LD_INT 1
14401: DEC
14402: ST_TO_ADDR
14403: LD_INT 4
14405: PUSH
14406: FOR_TO
14407: IFFALSE 14429
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14409: LD_ADDR_EXP 32
14413: PUSH
14414: LD_EXP 32
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 3
14426: ST_TO_ADDR
14427: GO 14406
14429: POP
14430: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 266
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: PUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 266
14468: PUSH
14469: LD_INT 2
14471: EQUAL
14472: OR
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 266
14483: PUSH
14484: LD_INT 4
14486: EQUAL
14487: OR
14488: PUSH
14489: EMPTY
14490: LIST
14491: AND
14492: IFFALSE 14503
// ComUpgrade ( building ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 255
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: PUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 32
14529: EQUAL
14530: AND
14531: IFFALSE 14572
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 42
14540: PUSH
14541: LD_INT 43
14543: PUSH
14544: LD_INT 44
14546: PUSH
14547: LD_INT 46
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_INT 4
14561: PPUSH
14562: CALL_OW 12
14566: ARRAY
14567: PPUSH
14568: CALL_OW 208
// end ;
14572: PPOPN 2
14574: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL 36893 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14584: LD_VAR 0 1
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 23
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: IN
14629: IFFALSE 14645
// killCounter := killCounter + 1 ;
14631: LD_ADDR_EXP 46
14635: PUSH
14636: LD_EXP 46
14640: PUSH
14641: LD_INT 1
14643: PLUS
14644: ST_TO_ADDR
// if unit in ruAttackersInForest then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_EXP 49
14654: IN
14655: IFFALSE 14673
// ruAttackersInForest := ruAttackersInForest diff unit ;
14657: LD_ADDR_EXP 49
14661: PUSH
14662: LD_EXP 49
14666: PUSH
14667: LD_VAR 0 1
14671: DIFF
14672: ST_TO_ADDR
// if unit in ruAttackers then
14673: LD_VAR 0 1
14677: PUSH
14678: LD_EXP 48
14682: IN
14683: IFFALSE 14701
// ruAttackers := ruAttackers diff unit ;
14685: LD_ADDR_EXP 48
14689: PUSH
14690: LD_EXP 48
14694: PUSH
14695: LD_VAR 0 1
14699: DIFF
14700: ST_TO_ADDR
// if unit = JMM then
14701: LD_VAR 0 1
14705: PUSH
14706: LD_EXP 1
14710: EQUAL
14711: IFFALSE 14720
// YouLost ( JMM ) ;
14713: LD_STRING JMM
14715: PPUSH
14716: CALL_OW 104
// if unit = Joan then
14720: LD_VAR 0 1
14724: PUSH
14725: LD_EXP 16
14729: EQUAL
14730: IFFALSE 14740
// JoanStatus := 0 ;
14732: LD_ADDR_EXP 17
14736: PUSH
14737: LD_INT 0
14739: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 255
14749: PUSH
14750: LD_INT 1
14752: EQUAL
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 247
14763: PUSH
14764: LD_INT 1
14766: EQUAL
14767: AND
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 248
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: AND
14783: IFFALSE 14799
// unitLost = unitLost + 1 ;
14785: LD_ADDR_EXP 31
14789: PUSH
14790: LD_EXP 31
14794: PUSH
14795: LD_INT 1
14797: PLUS
14798: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 255
14808: PUSH
14809: LD_INT 3
14811: EQUAL
14812: PUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 247
14822: PUSH
14823: LD_INT 3
14825: EQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 4
14840: PUSH
14841: LD_INT 5
14843: PUSH
14844: LD_INT 32
14846: PUSH
14847: LD_INT 31
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: IN
14856: AND
14857: IFFALSE 14943
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14859: LD_ADDR_EXP 32
14863: PUSH
14864: LD_EXP 32
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 266
14878: ADD
14879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14880: LD_ADDR_EXP 32
14884: PUSH
14885: LD_EXP 32
14889: PUSH
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 250
14899: ADD
14900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14901: LD_ADDR_EXP 32
14905: PUSH
14906: LD_EXP 32
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 251
14920: ADD
14921: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14922: LD_ADDR_EXP 32
14926: PUSH
14927: LD_EXP 32
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 254
14941: ADD
14942: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14943: LD_EXP 47
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 257
14957: PUSH
14958: LD_INT 3
14960: EQUAL
14961: AND
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 255
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_INT 21
14980: PPUSH
14981: CALL_OW 302
14985: AND
14986: PUSH
14987: LD_INT 21
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 3
14997: EQUAL
14998: AND
14999: IFFALSE 15081
// begin ruMechCounter := ruMechCounter - 1 ;
15001: LD_ADDR_EXP 47
15005: PUSH
15006: LD_EXP 47
15010: PUSH
15011: LD_INT 1
15013: MINUS
15014: ST_TO_ADDR
// uc_side := 3 ;
15015: LD_ADDR_OWVAR 20
15019: PUSH
15020: LD_INT 3
15022: ST_TO_ADDR
// uc_nation := 3 ;
15023: LD_ADDR_OWVAR 21
15027: PUSH
15028: LD_INT 3
15030: ST_TO_ADDR
// hc_gallery :=  ;
15031: LD_ADDR_OWVAR 33
15035: PUSH
15036: LD_STRING 
15038: ST_TO_ADDR
// hc_name :=  ;
15039: LD_ADDR_OWVAR 26
15043: PUSH
15044: LD_STRING 
15046: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15047: LD_INT 0
15049: PPUSH
15050: LD_EXP 35
15054: PPUSH
15055: LD_EXP 36
15059: PPUSH
15060: CALL_OW 12
15064: PPUSH
15065: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15069: CALL_OW 44
15073: PPUSH
15074: LD_INT 21
15076: PPUSH
15077: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 255
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 264
15104: PUSH
15105: LD_INT 52
15107: EQUAL
15108: AND
15109: PUSH
15110: LD_INT 21
15112: PPUSH
15113: CALL_OW 302
15117: AND
15118: PUSH
15119: LD_INT 21
15121: PPUSH
15122: CALL_OW 255
15126: PUSH
15127: LD_INT 3
15129: EQUAL
15130: AND
15131: IFFALSE 15152
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15133: LD_INT 21
15135: PPUSH
15136: LD_INT 22
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: LD_INT 52
15147: PPUSH
15148: CALL_OW 125
// end ;
15152: PPOPN 1
15154: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
15159: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL 37013 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 255
15183: PUSH
15184: LD_INT 3
15186: EQUAL
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 264
15197: PUSH
15198: LD_INT 51
15200: PUSH
15201: LD_INT 52
15203: PUSH
15204: LD_INT 53
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: IN
15212: NOT
15213: AND
15214: IFFALSE 15245
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15216: LD_ADDR_EXP 48
15220: PUSH
15221: LD_EXP 48
15225: PPUSH
15226: LD_EXP 48
15230: PUSH
15231: LD_INT 1
15233: PLUS
15234: PPUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 1
15244: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 264
15254: PUSH
15255: LD_INT 53
15257: EQUAL
15258: IFFALSE 15413
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15260: LD_VAR 0 1
15264: PPUSH
15265: LD_INT 60
15267: PPUSH
15268: LD_INT 85
15270: PPUSH
15271: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_INT 43
15282: PPUSH
15283: LD_INT 69
15285: PPUSH
15286: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_INT 37
15297: PPUSH
15298: LD_INT 46
15300: PPUSH
15301: CALL_OW 171
// wait ( 0 0$1 ) ;
15305: LD_INT 35
15307: PPUSH
15308: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15312: LD_INT 35
15314: PPUSH
15315: CALL_OW 67
// until not HasTask ( vehicle ) ;
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 314
15328: NOT
15329: IFFALSE 15312
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 34
15338: PPUSH
15339: CALL 9917 0 2
// repeat wait ( 0 0$1 ) ;
15343: LD_INT 35
15345: PPUSH
15346: CALL_OW 67
// until not HasTask ( vehicle ) ;
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 314
15359: NOT
15360: IFFALSE 15343
// un := IsDrivenBy ( vehicle ) ;
15362: LD_ADDR_VAR 0 4
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 311
15376: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15377: LD_VAR 0 4
15381: PPUSH
15382: LD_INT 96
15384: PPUSH
15385: LD_INT 77
15387: PPUSH
15388: CALL_OW 171
// AddComExitVehicle ( un ) ;
15392: LD_VAR 0 4
15396: PPUSH
15397: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15401: LD_VAR 0 4
15405: PPUSH
15406: LD_INT 17
15408: PPUSH
15409: CALL_OW 180
// end ; end ;
15413: PPOPN 5
15415: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 3
15428: EQUAL
15429: IFFALSE 15460
// begin tamedApemans = tamedApemans + 1 ;
15431: LD_ADDR_EXP 33
15435: PUSH
15436: LD_EXP 33
15440: PUSH
15441: LD_INT 1
15443: PLUS
15444: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 106
15452: PPUSH
15453: LD_INT 85
15455: PPUSH
15456: CALL_OW 111
// end ; end ;
15460: PPOPN 2
15462: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15463: LD_VAR 0 2
15467: PPUSH
15468: CALL_OW 255
15472: PUSH
15473: LD_INT 3
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 3
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_INT 21
15494: PPUSH
15495: CALL_OW 302
15499: AND
15500: IFFALSE 15514
// ComEnterUnit ( human , rufab ) ;
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_INT 21
15509: PPUSH
15510: CALL_OW 120
// end ;
15514: PPOPN 4
15516: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_INT 21
15524: EQUAL
15525: PUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 255
15535: PUSH
15536: LD_INT 3
15538: EQUAL
15539: AND
15540: IFFALSE 15554
// SetLives ( human , 1000 ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_INT 1000
15549: PPUSH
15550: CALL_OW 234
// end ;
15554: PPOPN 2
15556: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL 36997 0 1
// end ; end_of_file
15566: PPOPN 1
15568: END
// every 0 0$30 trigger cratesStatus = 1 do
15569: LD_EXP 39
15573: PUSH
15574: LD_INT 1
15576: EQUAL
15577: IFFALSE 15630
15579: GO 15581
15581: DISABLE
// begin enable ;
15582: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15583: LD_INT 350
15585: PUSH
15586: LD_INT 875
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 1
15595: PPUSH
15596: LD_INT 2
15598: PPUSH
15599: CALL_OW 12
15603: ARRAY
15604: PPUSH
15605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15609: LD_INT 1
15611: PPUSH
15612: LD_INT 5
15614: PPUSH
15615: CALL_OW 12
15619: PPUSH
15620: LD_INT 7
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 55
// end ;
15630: END
// every 1 1$0 trigger cratesStatus = 2 do
15631: LD_EXP 39
15635: PUSH
15636: LD_INT 2
15638: EQUAL
15639: IFFALSE 15722
15641: GO 15643
15643: DISABLE
// begin enable ;
15644: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15645: LD_INT 3150
15647: PUSH
15648: LD_INT 4550
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_INT 2
15660: PPUSH
15661: CALL_OW 12
15665: ARRAY
15666: PPUSH
15667: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15671: LD_INT 2
15673: PUSH
15674: LD_INT 5
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: PPUSH
15684: LD_INT 2
15686: PPUSH
15687: CALL_OW 12
15691: ARRAY
15692: PPUSH
15693: LD_INT 6
15695: PUSH
15696: LD_INT 7
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_INT 2
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 55
// end ;
15722: END
// every 0 0$30 + 0 0$10 do
15723: GO 15725
15725: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15726: LD_INT 4
15728: PUSH
15729: LD_INT 5
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 2
15741: PPUSH
15742: CALL_OW 12
15746: ARRAY
15747: PPUSH
15748: LD_INT 7
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 55
// Wait ( 0 0$15 ) ;
15758: LD_INT 525
15760: PPUSH
15761: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15765: LD_INT 4
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_INT 2
15780: PPUSH
15781: CALL_OW 12
15785: ARRAY
15786: PPUSH
15787: LD_INT 7
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 55
// Wait ( 0 0$20 ) ;
15797: LD_INT 700
15799: PPUSH
15800: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15804: LD_INT 4
15806: PUSH
15807: LD_INT 5
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: PPUSH
15817: LD_INT 2
15819: PPUSH
15820: CALL_OW 12
15824: ARRAY
15825: PPUSH
15826: LD_INT 7
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 55
// end ; end_of_file
15836: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15837: LD_EXP 25
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: IFFALSE 16138
15847: GO 15849
15849: DISABLE
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
15854: PPUSH
// begin enable ;
15855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 21
15873: PUSH
15874: LD_INT 3
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// for i in tmp do
15919: LD_ADDR_VAR 0 1
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: FOR_IN
15930: IFFALSE 15963
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PLUS
15960: ST_TO_ADDR
15961: GO 15929
15963: POP
15964: POP
// strings = [ ] ;
15965: LD_ADDR_EXP 28
15969: PUSH
15970: EMPTY
15971: ST_TO_ADDR
// if tmp = 0 then
15972: LD_VAR 0 2
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16005
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15982: LD_ADDR_EXP 28
15986: PUSH
15987: LD_EXP 28
15991: PUSH
15992: LD_STRING #Am06-1
15994: PUSH
15995: LD_EXP 26
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: ADD
16004: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16005: LD_VAR 0 2
16009: PUSH
16010: LD_EXP 26
16014: PUSH
16015: LD_VAR 0 3
16019: GREATER
16020: AND
16021: IFFALSE 16052
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16023: LD_ADDR_EXP 28
16027: PUSH
16028: LD_EXP 28
16032: PUSH
16033: LD_STRING #Am06-1
16035: PUSH
16036: LD_EXP 26
16040: PUSH
16041: LD_VAR 0 3
16045: MINUS
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ADD
16051: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16052: LD_VAR 0 2
16056: PUSH
16057: LD_EXP 26
16061: PUSH
16062: LD_VAR 0 3
16066: LESSEQUAL
16067: AND
16068: IFFALSE 16091
// strings = strings ^ [ #Am06-1 , 0 ] ;
16070: LD_ADDR_EXP 28
16074: PUSH
16075: LD_EXP 28
16079: PUSH
16080: LD_STRING #Am06-1
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ADD
16090: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16091: LD_ADDR_EXP 27
16095: PUSH
16096: LD_EXP 27
16100: PUSH
16101: LD_INT 35
16103: MINUS
16104: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16105: LD_ADDR_EXP 28
16109: PUSH
16110: LD_EXP 28
16114: PUSH
16115: LD_STRING #Am06-2
16117: PUSH
16118: LD_EXP 27
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: ADD
16127: ST_TO_ADDR
// display_strings = strings ;
16128: LD_ADDR_OWVAR 47
16132: PUSH
16133: LD_EXP 28
16137: ST_TO_ADDR
// end ; end_of_file
16138: PPOPN 3
16140: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16141: LD_INT 0
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: LD_INT 30
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16202: LD_INT 35
16204: PPUSH
16205: CALL_OW 67
// until depot ;
16209: LD_VAR 0 3
16213: IFFALSE 16150
// repeat wait ( 0 0$1 ) ;
16215: LD_INT 35
16217: PPUSH
16218: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_INT 22
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 91
16239: PUSH
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 25
16282: PUSH
16283: LD_INT 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 25
16302: PUSH
16303: LD_INT 4
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 54
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 55
16335: PUSH
16336: EMPTY
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: PUSH
16356: LD_EXP 2
16360: PUSH
16361: LD_EXP 3
16365: PUSH
16366: LD_EXP 4
16370: PUSH
16371: LD_EXP 5
16375: PUSH
16376: LD_EXP 7
16380: PUSH
16381: LD_EXP 8
16385: PUSH
16386: LD_EXP 9
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_EXP 45
16404: ADD
16405: DIFF
16406: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16407: LD_VAR 0 4
16411: PUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 463
16419: NOT
16420: AND
16421: IFFALSE 16215
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16423: LD_ADDR_VAR 0 4
16427: PUSH
16428: LD_VAR 0 4
16432: PUSH
16433: LD_INT 1
16435: PPUSH
16436: LD_VAR 0 4
16440: PPUSH
16441: CALL_OW 12
16445: ARRAY
16446: ST_TO_ADDR
// blockSpawn := 1 ;
16447: LD_ADDR_EXP 30
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// uc_side := 2 ;
16455: LD_ADDR_OWVAR 20
16459: PUSH
16460: LD_INT 2
16462: ST_TO_ADDR
// uc_nation := 2 ;
16463: LD_ADDR_OWVAR 21
16467: PUSH
16468: LD_INT 2
16470: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16471: LD_ADDR_EXP 20
16475: PUSH
16476: LD_STRING Kurt
16478: PPUSH
16479: LD_INT 0
16481: PPUSH
16482: LD_STRING 
16484: PPUSH
16485: CALL 41182 0 3
16489: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16490: LD_EXP 20
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL_OW 250
16504: PPUSH
16505: LD_VAR 0 4
16509: PPUSH
16510: CALL_OW 251
16514: PPUSH
16515: LD_INT 5
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 50
// InGameOn ;
16525: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16529: LD_EXP 20
16533: PPUSH
16534: CALL_OW 87
// wait ( 0 0$2 ) ;
16538: LD_INT 70
16540: PPUSH
16541: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16545: LD_EXP 20
16549: PPUSH
16550: LD_VAR 0 4
16554: PPUSH
16555: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16559: LD_VAR 0 4
16563: PPUSH
16564: LD_EXP 20
16568: PPUSH
16569: CALL_OW 112
// wait ( 0 0$1 ) ;
16573: LD_INT 35
16575: PPUSH
16576: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16580: LD_VAR 0 4
16584: PPUSH
16585: LD_EXP 20
16589: PPUSH
16590: CALL_OW 119
// DialogueOn ;
16594: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16598: LD_EXP 20
16602: PPUSH
16603: LD_STRING D2-Kurt-1
16605: PPUSH
16606: CALL_OW 88
// if tmp = JMM then
16610: LD_VAR 0 4
16614: PUSH
16615: LD_EXP 1
16619: EQUAL
16620: IFFALSE 16712
// begin Say ( JMM , D2-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16634: LD_EXP 20
16638: PPUSH
16639: LD_STRING D2-Kurt-2
16641: PPUSH
16642: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16646: LD_EXP 1
16650: PPUSH
16651: LD_STRING D2-JMM-2
16653: PPUSH
16654: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16658: LD_EXP 20
16662: PPUSH
16663: LD_STRING D2-Kurt-3
16665: PPUSH
16666: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16670: LD_EXP 1
16674: PPUSH
16675: LD_STRING D2-JMM-3
16677: PPUSH
16678: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16682: LD_EXP 20
16686: PPUSH
16687: LD_STRING D2-Kurt-4
16689: PPUSH
16690: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16694: LD_EXP 1
16698: PPUSH
16699: LD_STRING D2-JMM-4
16701: PPUSH
16702: CALL_OW 88
// DialogueOff ;
16706: CALL_OW 7
// end else
16710: GO 16940
// begin if GetSex ( tmp ) = 1 then
16712: LD_VAR 0 4
16716: PPUSH
16717: CALL_OW 258
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 16741
// Say ( tmp , D2-Sol1-1 ) else
16727: LD_VAR 0 4
16731: PPUSH
16732: LD_STRING D2-Sol1-1
16734: PPUSH
16735: CALL_OW 88
16739: GO 16753
// Say ( tmp , D2-FSol1-1 ) ;
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_STRING D2-FSol1-1
16748: PPUSH
16749: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16753: LD_EXP 20
16757: PPUSH
16758: LD_STRING D2-Kurt-2
16760: PPUSH
16761: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16765: LD_VAR 0 4
16769: PPUSH
16770: CALL_OW 258
16774: PUSH
16775: LD_INT 1
16777: EQUAL
16778: IFFALSE 16794
// Say ( tmp , D2-Sol1-2 ) else
16780: LD_VAR 0 4
16784: PPUSH
16785: LD_STRING D2-Sol1-2
16787: PPUSH
16788: CALL_OW 88
16792: GO 16806
// Say ( tmp , D2-FSol1-2 ) ;
16794: LD_VAR 0 4
16798: PPUSH
16799: LD_STRING D2-FSol1-2
16801: PPUSH
16802: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16806: LD_EXP 20
16810: PPUSH
16811: LD_STRING D2-Kurt-3
16813: PPUSH
16814: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16818: LD_VAR 0 4
16822: PPUSH
16823: CALL_OW 258
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16847
// Say ( tmp , D2-Sol1-3 ) else
16833: LD_VAR 0 4
16837: PPUSH
16838: LD_STRING D2-Sol1-3
16840: PPUSH
16841: CALL_OW 88
16845: GO 16859
// Say ( tmp , D2-FSol1-3 ) ;
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_STRING D2-FSol1-3
16854: PPUSH
16855: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16859: LD_EXP 20
16863: PPUSH
16864: LD_STRING D2-Kurt-4
16866: PPUSH
16867: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16871: LD_VAR 0 4
16875: PPUSH
16876: CALL_OW 258
16880: PUSH
16881: LD_INT 1
16883: EQUAL
16884: IFFALSE 16912
// begin Say ( tmp , D2-Sol1-4 ) ;
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_STRING D2-Sol1-4
16893: PPUSH
16894: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16898: LD_VAR 0 4
16902: PPUSH
16903: LD_STRING D2-Sol1-5
16905: PPUSH
16906: CALL_OW 88
// end else
16910: GO 16936
// begin Say ( tmp , D2-FSol1-4 ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: LD_STRING D2-FSol1-4
16919: PPUSH
16920: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_STRING D2-FSol1-5
16931: PPUSH
16932: CALL_OW 88
// end ; DialogueOff ;
16936: CALL_OW 7
// end ; dec := ShowQuery1 ;
16940: LD_ADDR_VAR 0 6
16944: PUSH
16945: CALL 7307 0 0
16949: ST_TO_ADDR
// if dec = 1 then
16950: LD_VAR 0 6
16954: PUSH
16955: LD_INT 1
16957: EQUAL
16958: IFFALSE 17020
// begin DialogueOn ;
16960: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16964: LD_EXP 20
16968: PPUSH
16969: LD_STRING D2a-Kurt-1
16971: PPUSH
16972: CALL_OW 88
// DialogueOff ;
16976: CALL_OW 7
// InGameOff ;
16980: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16984: LD_INT 1
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17000: LD_EXP 20
17004: PPUSH
17005: LD_INT 8
17007: PPUSH
17008: CALL_OW 113
// readyToEscape := 1 ;
17012: LD_ADDR_EXP 22
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
// end ; if dec = 2 then
17020: LD_VAR 0 6
17024: PUSH
17025: LD_INT 2
17027: EQUAL
17028: IFFALSE 17496
// begin DialogueOn ;
17030: CALL_OW 6
// if tmp = JMM then
17034: LD_VAR 0 4
17038: PUSH
17039: LD_EXP 1
17043: EQUAL
17044: IFFALSE 17100
// begin Say ( JMM , D2b-JMM-1 ) ;
17046: LD_EXP 1
17050: PPUSH
17051: LD_STRING D2b-JMM-1
17053: PPUSH
17054: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17058: LD_EXP 20
17062: PPUSH
17063: LD_STRING D2b-Kurt-1
17065: PPUSH
17066: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17070: LD_EXP 1
17074: PPUSH
17075: LD_STRING D2b-JMM-2
17077: PPUSH
17078: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17082: LD_EXP 20
17086: PPUSH
17087: LD_STRING D2b-Kurt-2
17089: PPUSH
17090: CALL_OW 88
// DialogueOff ;
17094: CALL_OW 7
// end else
17098: GO 17251
// begin if GetSex ( tmp ) = 1 then
17100: LD_VAR 0 4
17104: PPUSH
17105: CALL_OW 258
17109: PUSH
17110: LD_INT 1
17112: EQUAL
17113: IFFALSE 17129
// Say ( tmp , D2b-Sol1-1 ) else
17115: LD_VAR 0 4
17119: PPUSH
17120: LD_STRING D2b-Sol1-1
17122: PPUSH
17123: CALL_OW 88
17127: GO 17141
// Say ( tmp , D2b-FSol1-1 ) ;
17129: LD_VAR 0 4
17133: PPUSH
17134: LD_STRING D2b-FSol1-1
17136: PPUSH
17137: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17141: LD_EXP 20
17145: PPUSH
17146: LD_STRING D2b-Kurt-1
17148: PPUSH
17149: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17153: LD_VAR 0 4
17157: PPUSH
17158: CALL_OW 258
17162: PUSH
17163: LD_INT 1
17165: EQUAL
17166: IFFALSE 17182
// Say ( tmp , D2b-Sol1-2 ) else
17168: LD_VAR 0 4
17172: PPUSH
17173: LD_STRING D2b-Sol1-2
17175: PPUSH
17176: CALL_OW 88
17180: GO 17194
// Say ( tmp , D2b-FSol1-2 ) ;
17182: LD_VAR 0 4
17186: PPUSH
17187: LD_STRING D2b-FSol1-2
17189: PPUSH
17190: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17194: LD_EXP 20
17198: PPUSH
17199: LD_STRING D2b-Kurt-2
17201: PPUSH
17202: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17206: LD_VAR 0 4
17210: PPUSH
17211: CALL_OW 258
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17235
// Say ( tmp , D2c-Sol1-2 ) else
17221: LD_VAR 0 4
17225: PPUSH
17226: LD_STRING D2c-Sol1-2
17228: PPUSH
17229: CALL_OW 88
17233: GO 17247
// Say ( tmp , D2c-FSol1-2 ) ;
17235: LD_VAR 0 4
17239: PPUSH
17240: LD_STRING D2c-FSol1-2
17242: PPUSH
17243: CALL_OW 88
// DialogueOff ;
17247: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17251: LD_ADDR_VAR 0 7
17255: PUSH
17256: CALL 7328 0 0
17260: ST_TO_ADDR
// if dec2 = 1 then
17261: LD_VAR 0 7
17265: PUSH
17266: LD_INT 1
17268: EQUAL
17269: IFFALSE 17331
// begin DialogueOn ;
17271: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17275: LD_EXP 20
17279: PPUSH
17280: LD_STRING D2a-Kurt-1
17282: PPUSH
17283: CALL_OW 88
// DialogueOff ;
17287: CALL_OW 7
// InGameOff ;
17291: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17295: LD_INT 1
17297: PPUSH
17298: LD_INT 2
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17311: LD_EXP 20
17315: PPUSH
17316: LD_INT 8
17318: PPUSH
17319: CALL_OW 113
// readyToEscape := 1 ;
17323: LD_ADDR_EXP 22
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// end ; if dec2 = 2 then
17331: LD_VAR 0 7
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17496
// begin if tmp = JMM then
17341: LD_VAR 0 4
17345: PUSH
17346: LD_EXP 1
17350: EQUAL
17351: IFFALSE 17411
// begin DialogueOn ;
17353: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17357: LD_EXP 1
17361: PPUSH
17362: LD_STRING D2c-JMM-1
17364: PPUSH
17365: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17369: LD_EXP 20
17373: PPUSH
17374: LD_STRING D2c-Kurt-1
17376: PPUSH
17377: CALL_OW 88
// DialogueOff ;
17381: CALL_OW 7
// InGameOff ;
17385: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17389: LD_EXP 20
17393: PPUSH
17394: LD_INT 8
17396: PPUSH
17397: CALL_OW 113
// readyToEscape := 1 ;
17401: LD_ADDR_EXP 22
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// end else
17409: GO 17496
// begin DialogueOn ;
17411: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17415: LD_VAR 0 4
17419: PPUSH
17420: CALL_OW 258
17424: PUSH
17425: LD_INT 1
17427: EQUAL
17428: IFFALSE 17444
// Say ( tmp , D2c-Sol1-1 ) else
17430: LD_VAR 0 4
17434: PPUSH
17435: LD_STRING D2c-Sol1-1
17437: PPUSH
17438: CALL_OW 88
17442: GO 17456
// Say ( tmp , D2c-FSol1-1 ) ;
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_STRING D2c-FSol1-1
17451: PPUSH
17452: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17456: LD_EXP 20
17460: PPUSH
17461: LD_STRING D2c-Kurt-1
17463: PPUSH
17464: CALL_OW 88
// DialogueOff ;
17468: CALL_OW 7
// InGameOff ;
17472: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17476: LD_EXP 20
17480: PPUSH
17481: LD_INT 8
17483: PPUSH
17484: CALL_OW 113
// readyToEscape := 1 ;
17488: LD_ADDR_EXP 22
17492: PUSH
17493: LD_INT 1
17495: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17496: LD_VAR 0 6
17500: PUSH
17501: LD_INT 3
17503: EQUAL
17504: IFFALSE 17665
// begin DialogueOn ;
17506: CALL_OW 6
// if tmp = JMM then
17510: LD_VAR 0 4
17514: PUSH
17515: LD_EXP 1
17519: EQUAL
17520: IFFALSE 17580
// begin DialogueOn ;
17522: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17526: LD_EXP 1
17530: PPUSH
17531: LD_STRING D2c-JMM-1
17533: PPUSH
17534: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17538: LD_EXP 20
17542: PPUSH
17543: LD_STRING D2c-Kurt-1
17545: PPUSH
17546: CALL_OW 88
// DialogueOff ;
17550: CALL_OW 7
// InGameOff ;
17554: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17558: LD_EXP 20
17562: PPUSH
17563: LD_INT 8
17565: PPUSH
17566: CALL_OW 113
// readyToEscape := 1 ;
17570: LD_ADDR_EXP 22
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// end else
17578: GO 17665
// begin DialogueOn ;
17580: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17584: LD_VAR 0 4
17588: PPUSH
17589: CALL_OW 258
17593: PUSH
17594: LD_INT 1
17596: EQUAL
17597: IFFALSE 17613
// Say ( tmp , D2c-Sol1-1 ) else
17599: LD_VAR 0 4
17603: PPUSH
17604: LD_STRING D2c-Sol1-1
17606: PPUSH
17607: CALL_OW 88
17611: GO 17625
// Say ( tmp , D2c-FSol1-1 ) ;
17613: LD_VAR 0 4
17617: PPUSH
17618: LD_STRING D2c-FSol1-1
17620: PPUSH
17621: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17625: LD_EXP 20
17629: PPUSH
17630: LD_STRING D2c-Kurt-1
17632: PPUSH
17633: CALL_OW 88
// DialogueOff ;
17637: CALL_OW 7
// InGameOff ;
17641: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17645: LD_EXP 20
17649: PPUSH
17650: LD_INT 8
17652: PPUSH
17653: CALL_OW 113
// readyToEscape := 1 ;
17657: LD_ADDR_EXP 22
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17665: LD_ADDR_EXP 30
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17673: LD_INT 35
17675: PPUSH
17676: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17680: LD_EXP 20
17684: PPUSH
17685: LD_INT 8
17687: PPUSH
17688: CALL_OW 308
17692: PUSH
17693: LD_EXP 22
17697: AND
17698: PUSH
17699: LD_EXP 20
17703: PPUSH
17704: CALL_OW 301
17708: OR
17709: IFFALSE 17673
// if IsDead ( Kurt ) then
17711: LD_EXP 20
17715: PPUSH
17716: CALL_OW 301
17720: IFFALSE 17724
// exit ;
17722: GO 17779
// RemoveUnit ( Kurt ) ;
17724: LD_EXP 20
17728: PPUSH
17729: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17733: LD_EXP 20
17737: PPUSH
17738: LD_STRING Kurt
17740: PPUSH
17741: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: CALL_OW 81
17755: PUSH
17756: LD_INT 0
17758: EQUAL
17759: IFFALSE 17771
// kurtStatus = 1 else
17761: LD_ADDR_EXP 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
17769: GO 17779
// kurtStatus = 2 ;
17771: LD_ADDR_EXP 21
17775: PUSH
17776: LD_INT 2
17778: ST_TO_ADDR
// end ; end_of_file
17779: LD_VAR 0 1
17783: RET
// every 0 0$2 do
17784: GO 17786
17786: DISABLE
// begin enable ;
17787: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17788: LD_INT 3
17790: PPUSH
17791: LD_INT 2
17793: PPUSH
17794: LD_INT 10
17796: PPUSH
17797: LD_EXP 32
17801: PPUSH
17802: CALL 7759 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 12
17811: PPUSH
17812: LD_EXP 32
17816: PPUSH
17817: CALL 9362 0 3
// if disableHealAI = 0 then
17821: LD_EXP 34
17825: PUSH
17826: LD_INT 0
17828: EQUAL
17829: IFFALSE 17850
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17831: LD_INT 3
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 10
17839: PPUSH
17840: LD_INT 32
17842: PUSH
17843: EMPTY
17844: LIST
17845: PPUSH
17846: CALL 8126 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17850: LD_INT 3
17852: PPUSH
17853: LD_INT 51
17855: PPUSH
17856: LD_INT 6
17858: PPUSH
17859: CALL 8815 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17863: LD_INT 2
17865: PPUSH
17866: CALL_OW 303
17870: PUSH
17871: LD_INT 2
17873: PPUSH
17874: CALL_OW 255
17878: PUSH
17879: LD_INT 1
17881: EQUAL
17882: OR
17883: IFFALSE 17897
// DefendDepot ( 3 , rudepo ) else
17885: LD_INT 3
17887: PPUSH
17888: LD_INT 2
17890: PPUSH
17891: CALL 8642 0 2
17895: GO 17907
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 10
17902: PPUSH
17903: CALL 8933 0 2
// end ;
17907: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17908: LD_INT 22
17910: PUSH
17911: LD_INT 3
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 21
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 55
17930: PUSH
17931: EMPTY
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 34
17939: PUSH
17940: LD_INT 51
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PUSH
17962: LD_INT 0
17964: EQUAL
17965: PUSH
17966: LD_INT 21
17968: PPUSH
17969: CALL_OW 255
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: AND
17978: PUSH
17979: LD_INT 21
17981: PPUSH
17982: CALL_OW 302
17986: AND
17987: PUSH
17988: LD_INT 2
17990: PPUSH
17991: CALL_OW 255
17995: PUSH
17996: LD_INT 3
17998: EQUAL
17999: AND
18000: PUSH
18001: LD_INT 2
18003: PPUSH
18004: CALL_OW 302
18008: AND
18009: PUSH
18010: LD_INT 21
18012: PPUSH
18013: CALL_OW 313
18017: AND
18018: PUSH
18019: LD_EXP 48
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: LD_INT 6
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: LD_OWVAR 67
18046: ARRAY
18047: LESS
18048: AND
18049: IFFALSE 18270
18051: GO 18053
18053: DISABLE
// begin enable ;
18054: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18055: LD_INT 2
18057: PPUSH
18058: CALL_OW 274
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 2000
18068: PPUSH
18069: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18073: LD_INT 3
18075: PPUSH
18076: LD_INT 21
18078: PPUSH
18079: LD_INT 4
18081: PUSH
18082: LD_INT 5
18084: PUSH
18085: LD_INT 6
18087: PUSH
18088: LD_INT 6
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PUSH
18097: LD_OWVAR 67
18101: ARRAY
18102: PUSH
18103: LD_EXP 48
18107: MINUS
18108: PPUSH
18109: LD_INT 43
18111: PUSH
18112: LD_INT 43
18114: PUSH
18115: LD_INT 44
18117: PUSH
18118: LD_INT 44
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 43
18129: PUSH
18130: LD_INT 43
18132: PUSH
18133: LD_INT 43
18135: PUSH
18136: LD_INT 44
18138: PUSH
18139: LD_INT 44
18141: PUSH
18142: LD_INT 46
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 43
18155: PUSH
18156: LD_INT 43
18158: PUSH
18159: LD_INT 43
18161: PUSH
18162: LD_INT 44
18164: PUSH
18165: LD_INT 44
18167: PUSH
18168: LD_INT 46
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 43
18181: PUSH
18182: LD_INT 43
18184: PUSH
18185: LD_INT 44
18187: PUSH
18188: LD_INT 46
18190: PUSH
18191: LD_INT 46
18193: PUSH
18194: LD_INT 46
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_OWVAR 67
18215: ARRAY
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: LD_INT 22
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_INT 24
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PPUSH
18239: LD_INT 2
18241: PPUSH
18242: CALL_OW 12
18246: ARRAY
18247: PUSH
18248: LD_INT 24
18250: PUSH
18251: LD_INT 24
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: LD_OWVAR 67
18264: ARRAY
18265: PPUSH
18266: CALL 7605 0 7
// end ;
18270: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18271: LD_INT 17
18273: PPUSH
18274: CALL_OW 255
18278: PUSH
18279: LD_INT 3
18281: EQUAL
18282: PUSH
18283: LD_INT 17
18285: PPUSH
18286: CALL_OW 302
18290: AND
18291: PUSH
18292: LD_INT 2
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 3
18302: EQUAL
18303: AND
18304: PUSH
18305: LD_INT 2
18307: PPUSH
18308: CALL_OW 302
18312: AND
18313: PUSH
18314: LD_EXP 48
18318: PUSH
18319: LD_INT 4
18321: PUSH
18322: LD_INT 5
18324: PUSH
18325: LD_INT 6
18327: PUSH
18328: LD_INT 7
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: LD_OWVAR 67
18341: ARRAY
18342: LESS
18343: AND
18344: IFFALSE 18392
18346: GO 18348
18348: DISABLE
// begin enable ;
18349: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18350: LD_INT 17
18352: PPUSH
18353: LD_INT 22
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: LD_INT 42
18364: PUSH
18365: LD_INT 43
18367: PUSH
18368: LD_INT 44
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: PPUSH
18379: LD_INT 3
18381: PPUSH
18382: CALL_OW 12
18386: ARRAY
18387: PPUSH
18388: CALL_OW 185
// end ;
18392: END
// every 2 2$0 do var i , j ;
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18400: LD_INT 14700
18402: PUSH
18403: LD_INT 33600
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 2
18415: PPUSH
18416: CALL_OW 12
18420: ARRAY
18421: PPUSH
18422: CALL_OW 67
// disableHealAI = 1 ;
18426: LD_ADDR_EXP 34
18430: PUSH
18431: LD_INT 1
18433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18434: LD_ADDR_VAR 0 1
18438: PUSH
18439: LD_INT 22
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 25
18451: PUSH
18452: LD_INT 4
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: PUSH
18468: FOR_IN
18469: IFFALSE 18482
// ComExitBuilding ( i ) ;
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 122
18480: GO 18468
18482: POP
18483: POP
// wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18491: LD_INT 35
18493: PPUSH
18494: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_INT 3
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PUSH
18532: FOR_IN
18533: IFFALSE 18610
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 17
18542: PPUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 25
18555: PUSH
18556: LD_INT 12
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 70
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18606
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 250
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 251
18599: PPUSH
18600: CALL_OW 191
18604: GO 18572
18606: POP
18607: POP
18608: GO 18532
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18612: LD_INT 22
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 25
18624: PUSH
18625: LD_INT 4
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: PUSH
18645: LD_EXP 33
18649: PUSH
18650: LD_INT 6
18652: PUSH
18653: LD_INT 7
18655: PUSH
18656: LD_INT 8
18658: PUSH
18659: LD_INT 8
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_OWVAR 67
18672: ARRAY
18673: GREATEREQUAL
18674: OR
18675: PUSH
18676: LD_INT 17
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 12
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: PUSH
18708: LD_INT 0
18710: EQUAL
18711: OR
18712: IFFALSE 18491
// disableHealAI = 0 ;
18714: LD_ADDR_EXP 34
18718: PUSH
18719: LD_INT 0
18721: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_INT 3
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 25
18739: PUSH
18740: LD_INT 12
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18773
// SetClass ( i , 16 ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 16
18766: PPUSH
18767: CALL_OW 336
18771: GO 18756
18773: POP
18774: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 3
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 25
18792: PUSH
18793: LD_INT 4
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18826
// ComEnterUnit ( i , rulab ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 32
18819: PPUSH
18820: CALL_OW 120
18824: GO 18809
18826: POP
18827: POP
// end ; end_of_file
18828: PPOPN 2
18830: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18831: LD_EXP 27
18835: PUSH
18836: LD_INT 0
18838: LESSEQUAL
18839: IFFALSE 18993
18841: GO 18843
18843: DISABLE
18844: LD_INT 0
18846: PPUSH
18847: PPUSH
18848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 21
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 30
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 69
18911: ST_TO_ADDR
// for i in tmp do
18912: LD_ADDR_VAR 0 1
18916: PUSH
18917: LD_VAR 0 2
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18956
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18925: LD_ADDR_VAR 0 3
18929: PUSH
18930: LD_VAR 0 3
18934: PUSH
18935: LD_VAR 0 1
18939: PPUSH
18940: CALL_OW 274
18944: PPUSH
18945: LD_INT 1
18947: PPUSH
18948: CALL_OW 275
18952: PLUS
18953: ST_TO_ADDR
18954: GO 18922
18956: POP
18957: POP
// if yourCrates >= needCrates then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_EXP 26
18967: GREATEREQUAL
18968: IFFALSE 18986
// FinishMission ( yourCrates , needCrates ) else
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_EXP 26
18979: PPUSH
18980: CALL 18996 0 2
18984: GO 18993
// YouLost ( matmin ) ;
18986: LD_STRING matmin
18988: PPUSH
18989: CALL_OW 104
// end ;
18993: PPOPN 3
18995: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
// if killCounter = 0 then
19002: LD_EXP 46
19006: PUSH
19007: LD_INT 0
19009: EQUAL
19010: IFFALSE 19019
// SetAchievement ( ACH_SURV ) ;
19012: LD_STRING ACH_SURV
19014: PPUSH
19015: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19019: LD_INT 22
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_INT 0
19050: EQUAL
19051: IFFALSE 19067
// begin wait ( 3 ) ;
19053: LD_INT 3
19055: PPUSH
19056: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19060: LD_STRING ACH_BASEDESTROYER
19062: PPUSH
19063: CALL_OW 543
// end ; m1 := false ;
19067: LD_ADDR_VAR 0 4
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// m2 := false ;
19075: LD_ADDR_VAR 0 5
19079: PUSH
19080: LD_INT 0
19082: ST_TO_ADDR
// m3 := false ;
19083: LD_ADDR_VAR 0 6
19087: PUSH
19088: LD_INT 0
19090: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19091: LD_VAR 0 1
19095: PUSH
19096: LD_INT 100
19098: PUSH
19099: LD_INT 140
19101: PUSH
19102: LD_INT 180
19104: PUSH
19105: LD_INT 220
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: LD_OWVAR 67
19118: ARRAY
19119: PLUS
19120: PUSH
19121: LD_VAR 0 2
19125: GREATER
19126: IFFALSE 19158
// begin AddMedal ( cans , 1 ) ;
19128: LD_STRING cans
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19138: LD_INT 1
19140: PPUSH
19141: LD_STRING 06_crates_1
19143: PPUSH
19144: CALL_OW 39
// m1 := true ;
19148: LD_ADDR_VAR 0 4
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// end else
19156: GO 19179
// begin AddMedal ( cans , - 1 ) ;
19158: LD_STRING cans
19160: PPUSH
19161: LD_INT 1
19163: NEG
19164: PPUSH
19165: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19169: LD_INT 0
19171: PPUSH
19172: LD_STRING 06_crates_1
19174: PPUSH
19175: CALL_OW 39
// end ; if unitLost < 3 then
19179: LD_EXP 31
19183: PUSH
19184: LD_INT 3
19186: LESS
19187: IFFALSE 19209
// begin AddMedal ( people , 1 ) ;
19189: LD_STRING people
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 101
// m2 := true ;
19199: LD_ADDR_VAR 0 5
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// end else
19207: GO 19220
// AddMedal ( people , - 1 ) ;
19209: LD_STRING people
19211: PPUSH
19212: LD_INT 1
19214: NEG
19215: PPUSH
19216: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19220: LD_EXP 29
19224: PPUSH
19225: LD_STRING 06_remoteVehs_1
19227: PPUSH
19228: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19232: LD_EXP 29
19236: PUSH
19237: LD_INT 1
19239: EQUAL
19240: IFFALSE 19262
// begin AddMedal ( remote , 1 ) ;
19242: LD_STRING remote
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 101
// m3 := true ;
19252: LD_ADDR_VAR 0 6
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// end else
19260: GO 19302
// begin if GetTech ( 18 , 1 ) = state_enabled then
19262: LD_INT 18
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 321
19272: PUSH
19273: LD_INT 1
19275: EQUAL
19276: IFFALSE 19291
// AddMedal ( remote , - 1 ) else
19278: LD_STRING remote
19280: PPUSH
19281: LD_INT 1
19283: NEG
19284: PPUSH
19285: CALL_OW 101
19289: GO 19302
// AddMedal ( remote , - 2 ) ;
19291: LD_STRING remote
19293: PPUSH
19294: LD_INT 2
19296: NEG
19297: PPUSH
19298: CALL_OW 101
// end ; if m1 and m2 and m3 then
19302: LD_VAR 0 4
19306: PUSH
19307: LD_VAR 0 5
19311: AND
19312: PUSH
19313: LD_VAR 0 6
19317: AND
19318: IFFALSE 19334
// begin wait ( 3 ) ;
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19327: LD_STRING ACH_ASPEED_6
19329: PPUSH
19330: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19334: LD_OWVAR 67
19338: PUSH
19339: LD_INT 3
19341: GREATEREQUAL
19342: PUSH
19343: LD_VAR 0 4
19347: AND
19348: PUSH
19349: LD_VAR 0 5
19353: AND
19354: PUSH
19355: LD_VAR 0 6
19359: AND
19360: IFFALSE 19372
// SetAchievementEX ( ACH_AMER , 6 ) ;
19362: LD_STRING ACH_AMER
19364: PPUSH
19365: LD_INT 6
19367: PPUSH
19368: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19372: LD_EXP 21
19376: PPUSH
19377: LD_STRING 06_KurtStatus_1
19379: PPUSH
19380: CALL_OW 39
// GiveMedals ( Main ) ;
19384: LD_STRING Main
19386: PPUSH
19387: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19391: LD_INT 22
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 21
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 50
19413: PUSH
19414: EMPTY
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 25
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 25
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 3
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 25
19452: PUSH
19453: LD_INT 4
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: PPUSH
19478: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19482: LD_EXP 1
19486: PPUSH
19487: LD_EXP 43
19491: PUSH
19492: LD_STRING JMM
19494: STR
19495: PPUSH
19496: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19500: LD_EXP 2
19504: PPUSH
19505: LD_EXP 43
19509: PUSH
19510: LD_STRING Lisa
19512: STR
19513: PPUSH
19514: CALL 6920 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19518: LD_EXP 3
19522: PPUSH
19523: LD_EXP 43
19527: PUSH
19528: LD_STRING Bobby
19530: STR
19531: PPUSH
19532: CALL 6920 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19536: LD_EXP 4
19540: PPUSH
19541: LD_EXP 43
19545: PUSH
19546: LD_STRING Cyrus
19548: STR
19549: PPUSH
19550: CALL 6920 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19554: LD_EXP 5
19558: PPUSH
19559: LD_EXP 43
19563: PUSH
19564: LD_STRING Frank
19566: STR
19567: PPUSH
19568: CALL 6920 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19572: LD_EXP 6
19576: PPUSH
19577: LD_EXP 43
19581: PUSH
19582: LD_STRING Brown
19584: STR
19585: PPUSH
19586: CALL 6920 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19590: LD_EXP 7
19594: PPUSH
19595: LD_EXP 43
19599: PUSH
19600: LD_STRING Donaldson
19602: STR
19603: PPUSH
19604: CALL 6920 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19608: LD_EXP 8
19612: PPUSH
19613: LD_EXP 43
19617: PUSH
19618: LD_STRING Gladstone
19620: STR
19621: PPUSH
19622: CALL 6920 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19626: LD_EXP 9
19630: PPUSH
19631: LD_EXP 43
19635: PUSH
19636: LD_STRING Denis
19638: STR
19639: PPUSH
19640: CALL 6920 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19644: LD_EXP 16
19648: PPUSH
19649: LD_EXP 43
19653: PUSH
19654: LD_STRING Joan
19656: STR
19657: PPUSH
19658: CALL 6920 0 2
// if IsLive ( Mike ) then
19662: LD_EXP 11
19666: PPUSH
19667: CALL_OW 300
19671: IFFALSE 19691
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19673: LD_EXP 11
19677: PPUSH
19678: LD_EXP 43
19682: PUSH
19683: LD_STRING Mike
19685: STR
19686: PPUSH
19687: CALL_OW 38
// if IsLive ( Joan ) then
19691: LD_EXP 16
19695: PPUSH
19696: CALL_OW 300
19700: IFFALSE 19714
// SaveCharacters ( Joan , Joan ) ;
19702: LD_EXP 16
19706: PPUSH
19707: LD_STRING Joan
19709: PPUSH
19710: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19714: LD_EXP 17
19718: PPUSH
19719: LD_STRING 06_JoanStatus_1
19721: PPUSH
19722: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19726: LD_INT 50
19728: PUSH
19729: EMPTY
19730: LIST
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 25
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 25
19787: PUSH
19788: LD_INT 4
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: PUSH
19813: LD_EXP 1
19817: PUSH
19818: LD_EXP 2
19822: PUSH
19823: LD_EXP 3
19827: PUSH
19828: LD_EXP 4
19832: PUSH
19833: LD_EXP 5
19837: PUSH
19838: LD_EXP 6
19842: PUSH
19843: LD_EXP 7
19847: PUSH
19848: LD_EXP 8
19852: PUSH
19853: LD_EXP 9
19857: PUSH
19858: LD_EXP 16
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: DIFF
19875: PPUSH
19876: LD_STRING 06_other_survivors
19878: PPUSH
19879: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19883: LD_INT 50
19885: PUSH
19886: EMPTY
19887: LIST
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 21
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 12
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: LD_INT 16
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: PPUSH
19948: LD_STRING 06_other_apemans
19950: PPUSH
19951: CALL_OW 38
// YouWin ;
19955: CALL_OW 103
// end ; end_of_file
19959: LD_VAR 0 3
19963: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19964: LD_EXP 48
19968: PUSH
19969: LD_OWVAR 1
19973: PUSH
19974: LD_INT 23100
19976: PUSH
19977: LD_INT 21000
19979: PUSH
19980: LD_INT 18900
19982: PUSH
19983: LD_INT 16800
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_OWVAR 67
19996: ARRAY
19997: GREATER
19998: AND
19999: IFFALSE 20335
20001: GO 20003
20003: DISABLE
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
// begin enable ;
20010: ENABLE
// for i in ruAttackers do
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_EXP 48
20020: PUSH
20021: FOR_IN
20022: IFFALSE 20333
// begin if not IsDrivenBy ( i ) then
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 311
20033: NOT
20034: IFFALSE 20038
// continue ;
20036: GO 20021
// if i mod 2 = 0 then
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 2
20045: MOD
20046: PUSH
20047: LD_INT 0
20049: EQUAL
20050: IFFALSE 20116
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
20052: LD_ADDR_VAR 0 3
20056: PUSH
20057: LD_INT 91
20059: PUSH
20060: LD_INT 52
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 82
20069: PUSH
20070: LD_INT 34
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 90
20079: PUSH
20080: LD_INT 26
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 86
20089: PUSH
20090: LD_INT 16
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 80
20099: PUSH
20100: LD_INT 12
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: ST_TO_ADDR
20114: GO 20189
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20116: LD_ADDR_VAR 0 3
20120: PUSH
20121: LD_INT 91
20123: PUSH
20124: LD_INT 52
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 68
20133: PUSH
20134: LD_INT 46
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 48
20143: PUSH
20144: LD_INT 43
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 33
20153: PUSH
20154: LD_INT 34
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: LD_INT 19
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 38
20173: PUSH
20174: LD_INT 16
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 256
20198: PUSH
20199: LD_INT 1000
20201: EQUAL
20202: IFFALSE 20220
// AgressiveMove ( i , path ) else
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: CALL 81254 0 2
20218: GO 20331
// if GetLives ( i ) < 650 then
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 256
20229: PUSH
20230: LD_INT 650
20232: LESS
20233: IFFALSE 20331
// begin if not IsInArea ( i , russianRepairArea ) then
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_INT 12
20242: PPUSH
20243: CALL_OW 308
20247: NOT
20248: IFFALSE 20317
// begin SetTag ( i , 0 ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_INT 0
20257: PPUSH
20258: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 261
20271: PUSH
20272: LD_INT 50
20274: LESS
20275: PUSH
20276: LD_INT 21
20278: PPUSH
20279: CALL_OW 302
20283: AND
20284: IFFALSE 20300
// ComMoveUnit ( i , rufab ) else
20286: LD_VAR 0 1
20290: PPUSH
20291: LD_INT 21
20293: PPUSH
20294: CALL_OW 112
20298: GO 20315
// ComMoveXY ( i , 121 , 99 ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 121
20307: PPUSH
20308: LD_INT 99
20310: PPUSH
20311: CALL_OW 111
// end else
20315: GO 20331
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 311
20326: PPUSH
20327: CALL 80350 0 1
// end ; end ;
20331: GO 20021
20333: POP
20334: POP
// end ;
20335: PPOPN 4
20337: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: DOUBLE
20349: LD_INT 1
20351: DEC
20352: ST_TO_ADDR
20353: LD_INT 4
20355: PUSH
20356: LD_INT 5
20358: PUSH
20359: LD_INT 6
20361: PUSH
20362: LD_INT 6
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: PUSH
20371: LD_OWVAR 67
20375: ARRAY
20376: PUSH
20377: FOR_TO
20378: IFFALSE 20553
// begin uc_side := 3 ;
20380: LD_ADDR_OWVAR 20
20384: PUSH
20385: LD_INT 3
20387: ST_TO_ADDR
// uc_nation := 3 ;
20388: LD_ADDR_OWVAR 21
20392: PUSH
20393: LD_INT 3
20395: ST_TO_ADDR
// InitHC_All ( ) ;
20396: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20400: LD_INT 0
20402: PPUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: LD_INT 6
20411: PUSH
20412: LD_INT 6
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: LD_OWVAR 67
20425: ARRAY
20426: PPUSH
20427: CALL_OW 381
// un := CreateHuman ;
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: CALL_OW 44
20440: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20441: LD_VAR 0 3
20445: PPUSH
20446: LD_INT 127
20448: PPUSH
20449: LD_INT 62
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: LD_INT 0
20457: PPUSH
20458: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_EXP 49
20471: PPUSH
20472: LD_EXP 49
20476: PUSH
20477: LD_INT 1
20479: PLUS
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 1
20490: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 83
20498: PPUSH
20499: LD_INT 49
20501: PPUSH
20502: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 49
20513: PPUSH
20514: LD_INT 43
20516: PPUSH
20517: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 31
20528: PPUSH
20529: LD_INT 15
20531: PPUSH
20532: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 63
20543: PPUSH
20544: LD_INT 9
20546: PPUSH
20547: CALL_OW 174
// end ;
20551: GO 20377
20553: POP
20554: POP
// end ; end_of_file
20555: LD_VAR 0 1
20559: RET
// export function CreateNature ; var i , un ; begin
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
20564: PPUSH
// for i := 1 to Difficulty + 2 do
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: DOUBLE
20571: LD_INT 1
20573: DEC
20574: ST_TO_ADDR
20575: LD_OWVAR 67
20579: PUSH
20580: LD_INT 2
20582: PLUS
20583: PUSH
20584: FOR_TO
20585: IFFALSE 20694
// begin hc_sex := sex_male ;
20587: LD_ADDR_OWVAR 27
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// uc_side := 0 ;
20595: LD_ADDR_OWVAR 20
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// uc_nation := nation_nature ;
20603: LD_ADDR_OWVAR 21
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// hc_class := class_tiger ;
20611: LD_ADDR_OWVAR 28
20615: PUSH
20616: LD_INT 14
20618: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20619: LD_ADDR_OWVAR 31
20623: PUSH
20624: LD_EXP 36
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20644: LD_ADDR_OWVAR 35
20648: PUSH
20649: LD_INT 5
20651: NEG
20652: PPUSH
20653: LD_INT 5
20655: PPUSH
20656: CALL_OW 12
20660: PUSH
20661: LD_OWVAR 67
20665: MUL
20666: ST_TO_ADDR
// un := CreateHuman ;
20667: LD_ADDR_VAR 0 3
20671: PUSH
20672: CALL_OW 44
20676: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20677: LD_VAR 0 3
20681: PPUSH
20682: LD_INT 18
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 49
// end ;
20692: GO 20584
20694: POP
20695: POP
// for i = 1 to rand ( 3 , 4 ) do
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: DOUBLE
20702: LD_INT 1
20704: DEC
20705: ST_TO_ADDR
20706: LD_INT 3
20708: PPUSH
20709: LD_INT 4
20711: PPUSH
20712: CALL_OW 12
20716: PUSH
20717: FOR_TO
20718: IFFALSE 20788
// begin hc_class := class_phororhacos ;
20720: LD_ADDR_OWVAR 28
20724: PUSH
20725: LD_INT 18
20727: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20728: LD_ADDR_OWVAR 31
20732: PUSH
20733: LD_EXP 36
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: ST_TO_ADDR
// hc_agressivity := 0 ;
20753: LD_ADDR_OWVAR 35
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// un = CreateHuman ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: CALL_OW 44
20770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20771: LD_VAR 0 3
20775: PPUSH
20776: LD_INT 18
20778: PPUSH
20779: LD_INT 0
20781: PPUSH
20782: CALL_OW 49
// end ;
20786: GO 20717
20788: POP
20789: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: DOUBLE
20796: LD_INT 1
20798: DEC
20799: ST_TO_ADDR
20800: LD_INT 3
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_OWVAR 67
20822: ARRAY
20823: PUSH
20824: FOR_TO
20825: IFFALSE 20962
// begin hc_class := class_apeman ;
20827: LD_ADDR_OWVAR 28
20831: PUSH
20832: LD_INT 12
20834: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20835: LD_ADDR_OWVAR 31
20839: PUSH
20840: LD_INT 2
20842: PPUSH
20843: LD_INT 5
20845: PPUSH
20846: CALL_OW 12
20850: PUSH
20851: LD_INT 0
20853: PPUSH
20854: LD_INT 2
20856: PPUSH
20857: CALL_OW 12
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20874: LD_ADDR_OWVAR 35
20878: PUSH
20879: LD_INT 0
20881: PPUSH
20882: LD_INT 10
20884: PPUSH
20885: CALL_OW 12
20889: PUSH
20890: LD_INT 10
20892: PPUSH
20893: LD_INT 20
20895: PPUSH
20896: CALL_OW 12
20900: PUSH
20901: LD_INT 20
20903: PPUSH
20904: LD_INT 25
20906: PPUSH
20907: CALL_OW 12
20911: PUSH
20912: LD_INT 20
20914: PPUSH
20915: LD_INT 30
20917: PPUSH
20918: CALL_OW 12
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: PUSH
20929: LD_OWVAR 67
20933: ARRAY
20934: ST_TO_ADDR
// un := CreateHuman ;
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: CALL_OW 44
20944: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 19
20952: PPUSH
20953: LD_INT 0
20955: PPUSH
20956: CALL_OW 49
// end ;
20960: GO 20824
20962: POP
20963: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: DOUBLE
20970: LD_INT 1
20972: DEC
20973: ST_TO_ADDR
20974: LD_INT 3
20976: PUSH
20977: LD_INT 4
20979: PUSH
20980: LD_INT 5
20982: PUSH
20983: LD_INT 6
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_OWVAR 67
20996: ARRAY
20997: PUSH
20998: FOR_TO
20999: IFFALSE 21092
// begin hc_class := class_apeman ;
21001: LD_ADDR_OWVAR 28
21005: PUSH
21006: LD_INT 12
21008: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21009: LD_ADDR_OWVAR 31
21013: PUSH
21014: LD_INT 2
21016: PPUSH
21017: LD_INT 5
21019: PPUSH
21020: CALL_OW 12
21024: PUSH
21025: LD_INT 0
21027: PPUSH
21028: LD_INT 2
21030: PPUSH
21031: CALL_OW 12
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 10 ) ;
21048: LD_ADDR_OWVAR 35
21052: PUSH
21053: LD_INT 10
21055: NEG
21056: PPUSH
21057: LD_INT 10
21059: PPUSH
21060: CALL_OW 12
21064: ST_TO_ADDR
// un = CreateHuman ;
21065: LD_ADDR_VAR 0 3
21069: PUSH
21070: CALL_OW 44
21074: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21075: LD_VAR 0 3
21079: PPUSH
21080: LD_INT 20
21082: PPUSH
21083: LD_INT 0
21085: PPUSH
21086: CALL_OW 49
// end ;
21090: GO 20998
21092: POP
21093: POP
// end ; end_of_file end_of_file
21094: LD_VAR 0 1
21098: RET
// export globalGameSaveCounter ; every 0 0$1 do
21099: GO 21101
21101: DISABLE
// begin enable ;
21102: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21103: LD_STRING updateTimer(
21105: PUSH
21106: LD_OWVAR 1
21110: STR
21111: PUSH
21112: LD_STRING );
21114: STR
21115: PPUSH
21116: CALL_OW 559
// end ;
21120: END
// every 0 0$1 do
21121: GO 21123
21123: DISABLE
// begin globalGameSaveCounter := 0 ;
21124: LD_ADDR_EXP 50
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21132: LD_STRING setGameSaveCounter(0)
21134: PPUSH
21135: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21139: LD_STRING initStreamRollete();
21141: PPUSH
21142: CALL_OW 559
// InitStreamMode ;
21146: CALL 22472 0 0
// DefineStreamItems ( false ) ;
21150: LD_INT 0
21152: PPUSH
21153: CALL 22936 0 1
// end ;
21157: END
// export function SOS_MapStart ( ) ; begin
21158: LD_INT 0
21160: PPUSH
// if streamModeActive then
21161: LD_EXP 51
21165: IFFALSE 21174
// DefineStreamItems ( true ) ;
21167: LD_INT 1
21169: PPUSH
21170: CALL 22936 0 1
// UpdateLuaVariables ( ) ;
21174: CALL 21191 0 0
// UpdateFactoryWaypoints ( ) ;
21178: CALL 35797 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21182: CALL 36054 0 0
// end ;
21186: LD_VAR 0 1
21190: RET
// function UpdateLuaVariables ( ) ; begin
21191: LD_INT 0
21193: PPUSH
// if globalGameSaveCounter then
21194: LD_EXP 50
21198: IFFALSE 21232
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21200: LD_ADDR_EXP 50
21204: PUSH
21205: LD_EXP 50
21209: PPUSH
21210: CALL 80011 0 1
21214: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21215: LD_STRING setGameSaveCounter(
21217: PUSH
21218: LD_EXP 50
21222: STR
21223: PUSH
21224: LD_STRING )
21226: STR
21227: PPUSH
21228: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21232: LD_STRING setGameDifficulty(
21234: PUSH
21235: LD_OWVAR 67
21239: STR
21240: PUSH
21241: LD_STRING )
21243: STR
21244: PPUSH
21245: CALL_OW 559
// end ;
21249: LD_VAR 0 1
21253: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21254: LD_INT 0
21256: PPUSH
// if p2 = stream_mode then
21257: LD_VAR 0 2
21261: PUSH
21262: LD_INT 100
21264: EQUAL
21265: IFFALSE 22268
// begin if not StreamModeActive then
21267: LD_EXP 51
21271: NOT
21272: IFFALSE 21282
// StreamModeActive := true ;
21274: LD_ADDR_EXP 51
21278: PUSH
21279: LD_INT 1
21281: ST_TO_ADDR
// if p3 = 0 then
21282: LD_VAR 0 3
21286: PUSH
21287: LD_INT 0
21289: EQUAL
21290: IFFALSE 21296
// InitStreamMode ;
21292: CALL 22472 0 0
// if p3 = 1 then
21296: LD_VAR 0 3
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 21314
// sRocket := true ;
21306: LD_ADDR_EXP 56
21310: PUSH
21311: LD_INT 1
21313: ST_TO_ADDR
// if p3 = 2 then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_INT 2
21321: EQUAL
21322: IFFALSE 21332
// sSpeed := true ;
21324: LD_ADDR_EXP 55
21328: PUSH
21329: LD_INT 1
21331: ST_TO_ADDR
// if p3 = 3 then
21332: LD_VAR 0 3
21336: PUSH
21337: LD_INT 3
21339: EQUAL
21340: IFFALSE 21350
// sEngine := true ;
21342: LD_ADDR_EXP 57
21346: PUSH
21347: LD_INT 1
21349: ST_TO_ADDR
// if p3 = 4 then
21350: LD_VAR 0 3
21354: PUSH
21355: LD_INT 4
21357: EQUAL
21358: IFFALSE 21368
// sSpec := true ;
21360: LD_ADDR_EXP 54
21364: PUSH
21365: LD_INT 1
21367: ST_TO_ADDR
// if p3 = 5 then
21368: LD_VAR 0 3
21372: PUSH
21373: LD_INT 5
21375: EQUAL
21376: IFFALSE 21386
// sLevel := true ;
21378: LD_ADDR_EXP 58
21382: PUSH
21383: LD_INT 1
21385: ST_TO_ADDR
// if p3 = 6 then
21386: LD_VAR 0 3
21390: PUSH
21391: LD_INT 6
21393: EQUAL
21394: IFFALSE 21404
// sArmoury := true ;
21396: LD_ADDR_EXP 59
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
// if p3 = 7 then
21404: LD_VAR 0 3
21408: PUSH
21409: LD_INT 7
21411: EQUAL
21412: IFFALSE 21422
// sRadar := true ;
21414: LD_ADDR_EXP 60
21418: PUSH
21419: LD_INT 1
21421: ST_TO_ADDR
// if p3 = 8 then
21422: LD_VAR 0 3
21426: PUSH
21427: LD_INT 8
21429: EQUAL
21430: IFFALSE 21440
// sBunker := true ;
21432: LD_ADDR_EXP 61
21436: PUSH
21437: LD_INT 1
21439: ST_TO_ADDR
// if p3 = 9 then
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 9
21447: EQUAL
21448: IFFALSE 21458
// sHack := true ;
21450: LD_ADDR_EXP 62
21454: PUSH
21455: LD_INT 1
21457: ST_TO_ADDR
// if p3 = 10 then
21458: LD_VAR 0 3
21462: PUSH
21463: LD_INT 10
21465: EQUAL
21466: IFFALSE 21476
// sFire := true ;
21468: LD_ADDR_EXP 63
21472: PUSH
21473: LD_INT 1
21475: ST_TO_ADDR
// if p3 = 11 then
21476: LD_VAR 0 3
21480: PUSH
21481: LD_INT 11
21483: EQUAL
21484: IFFALSE 21494
// sRefresh := true ;
21486: LD_ADDR_EXP 64
21490: PUSH
21491: LD_INT 1
21493: ST_TO_ADDR
// if p3 = 12 then
21494: LD_VAR 0 3
21498: PUSH
21499: LD_INT 12
21501: EQUAL
21502: IFFALSE 21512
// sExp := true ;
21504: LD_ADDR_EXP 65
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// if p3 = 13 then
21512: LD_VAR 0 3
21516: PUSH
21517: LD_INT 13
21519: EQUAL
21520: IFFALSE 21530
// sDepot := true ;
21522: LD_ADDR_EXP 66
21526: PUSH
21527: LD_INT 1
21529: ST_TO_ADDR
// if p3 = 14 then
21530: LD_VAR 0 3
21534: PUSH
21535: LD_INT 14
21537: EQUAL
21538: IFFALSE 21548
// sFlag := true ;
21540: LD_ADDR_EXP 67
21544: PUSH
21545: LD_INT 1
21547: ST_TO_ADDR
// if p3 = 15 then
21548: LD_VAR 0 3
21552: PUSH
21553: LD_INT 15
21555: EQUAL
21556: IFFALSE 21566
// sKamikadze := true ;
21558: LD_ADDR_EXP 75
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// if p3 = 16 then
21566: LD_VAR 0 3
21570: PUSH
21571: LD_INT 16
21573: EQUAL
21574: IFFALSE 21584
// sTroll := true ;
21576: LD_ADDR_EXP 76
21580: PUSH
21581: LD_INT 1
21583: ST_TO_ADDR
// if p3 = 17 then
21584: LD_VAR 0 3
21588: PUSH
21589: LD_INT 17
21591: EQUAL
21592: IFFALSE 21602
// sSlow := true ;
21594: LD_ADDR_EXP 77
21598: PUSH
21599: LD_INT 1
21601: ST_TO_ADDR
// if p3 = 18 then
21602: LD_VAR 0 3
21606: PUSH
21607: LD_INT 18
21609: EQUAL
21610: IFFALSE 21620
// sLack := true ;
21612: LD_ADDR_EXP 78
21616: PUSH
21617: LD_INT 1
21619: ST_TO_ADDR
// if p3 = 19 then
21620: LD_VAR 0 3
21624: PUSH
21625: LD_INT 19
21627: EQUAL
21628: IFFALSE 21638
// sTank := true ;
21630: LD_ADDR_EXP 80
21634: PUSH
21635: LD_INT 1
21637: ST_TO_ADDR
// if p3 = 20 then
21638: LD_VAR 0 3
21642: PUSH
21643: LD_INT 20
21645: EQUAL
21646: IFFALSE 21656
// sRemote := true ;
21648: LD_ADDR_EXP 81
21652: PUSH
21653: LD_INT 1
21655: ST_TO_ADDR
// if p3 = 21 then
21656: LD_VAR 0 3
21660: PUSH
21661: LD_INT 21
21663: EQUAL
21664: IFFALSE 21674
// sPowell := true ;
21666: LD_ADDR_EXP 82
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// if p3 = 22 then
21674: LD_VAR 0 3
21678: PUSH
21679: LD_INT 22
21681: EQUAL
21682: IFFALSE 21692
// sTeleport := true ;
21684: LD_ADDR_EXP 85
21688: PUSH
21689: LD_INT 1
21691: ST_TO_ADDR
// if p3 = 23 then
21692: LD_VAR 0 3
21696: PUSH
21697: LD_INT 23
21699: EQUAL
21700: IFFALSE 21710
// sOilTower := true ;
21702: LD_ADDR_EXP 87
21706: PUSH
21707: LD_INT 1
21709: ST_TO_ADDR
// if p3 = 24 then
21710: LD_VAR 0 3
21714: PUSH
21715: LD_INT 24
21717: EQUAL
21718: IFFALSE 21728
// sShovel := true ;
21720: LD_ADDR_EXP 88
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// if p3 = 25 then
21728: LD_VAR 0 3
21732: PUSH
21733: LD_INT 25
21735: EQUAL
21736: IFFALSE 21746
// sSheik := true ;
21738: LD_ADDR_EXP 89
21742: PUSH
21743: LD_INT 1
21745: ST_TO_ADDR
// if p3 = 26 then
21746: LD_VAR 0 3
21750: PUSH
21751: LD_INT 26
21753: EQUAL
21754: IFFALSE 21764
// sEarthquake := true ;
21756: LD_ADDR_EXP 91
21760: PUSH
21761: LD_INT 1
21763: ST_TO_ADDR
// if p3 = 27 then
21764: LD_VAR 0 3
21768: PUSH
21769: LD_INT 27
21771: EQUAL
21772: IFFALSE 21782
// sAI := true ;
21774: LD_ADDR_EXP 92
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// if p3 = 28 then
21782: LD_VAR 0 3
21786: PUSH
21787: LD_INT 28
21789: EQUAL
21790: IFFALSE 21800
// sCargo := true ;
21792: LD_ADDR_EXP 95
21796: PUSH
21797: LD_INT 1
21799: ST_TO_ADDR
// if p3 = 29 then
21800: LD_VAR 0 3
21804: PUSH
21805: LD_INT 29
21807: EQUAL
21808: IFFALSE 21818
// sDLaser := true ;
21810: LD_ADDR_EXP 96
21814: PUSH
21815: LD_INT 1
21817: ST_TO_ADDR
// if p3 = 30 then
21818: LD_VAR 0 3
21822: PUSH
21823: LD_INT 30
21825: EQUAL
21826: IFFALSE 21836
// sExchange := true ;
21828: LD_ADDR_EXP 97
21832: PUSH
21833: LD_INT 1
21835: ST_TO_ADDR
// if p3 = 31 then
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 31
21843: EQUAL
21844: IFFALSE 21854
// sFac := true ;
21846: LD_ADDR_EXP 98
21850: PUSH
21851: LD_INT 1
21853: ST_TO_ADDR
// if p3 = 32 then
21854: LD_VAR 0 3
21858: PUSH
21859: LD_INT 32
21861: EQUAL
21862: IFFALSE 21872
// sPower := true ;
21864: LD_ADDR_EXP 99
21868: PUSH
21869: LD_INT 1
21871: ST_TO_ADDR
// if p3 = 33 then
21872: LD_VAR 0 3
21876: PUSH
21877: LD_INT 33
21879: EQUAL
21880: IFFALSE 21890
// sRandom := true ;
21882: LD_ADDR_EXP 100
21886: PUSH
21887: LD_INT 1
21889: ST_TO_ADDR
// if p3 = 34 then
21890: LD_VAR 0 3
21894: PUSH
21895: LD_INT 34
21897: EQUAL
21898: IFFALSE 21908
// sShield := true ;
21900: LD_ADDR_EXP 101
21904: PUSH
21905: LD_INT 1
21907: ST_TO_ADDR
// if p3 = 35 then
21908: LD_VAR 0 3
21912: PUSH
21913: LD_INT 35
21915: EQUAL
21916: IFFALSE 21926
// sTime := true ;
21918: LD_ADDR_EXP 102
21922: PUSH
21923: LD_INT 1
21925: ST_TO_ADDR
// if p3 = 36 then
21926: LD_VAR 0 3
21930: PUSH
21931: LD_INT 36
21933: EQUAL
21934: IFFALSE 21944
// sTools := true ;
21936: LD_ADDR_EXP 103
21940: PUSH
21941: LD_INT 1
21943: ST_TO_ADDR
// if p3 = 101 then
21944: LD_VAR 0 3
21948: PUSH
21949: LD_INT 101
21951: EQUAL
21952: IFFALSE 21962
// sSold := true ;
21954: LD_ADDR_EXP 68
21958: PUSH
21959: LD_INT 1
21961: ST_TO_ADDR
// if p3 = 102 then
21962: LD_VAR 0 3
21966: PUSH
21967: LD_INT 102
21969: EQUAL
21970: IFFALSE 21980
// sDiff := true ;
21972: LD_ADDR_EXP 69
21976: PUSH
21977: LD_INT 1
21979: ST_TO_ADDR
// if p3 = 103 then
21980: LD_VAR 0 3
21984: PUSH
21985: LD_INT 103
21987: EQUAL
21988: IFFALSE 21998
// sFog := true ;
21990: LD_ADDR_EXP 72
21994: PUSH
21995: LD_INT 1
21997: ST_TO_ADDR
// if p3 = 104 then
21998: LD_VAR 0 3
22002: PUSH
22003: LD_INT 104
22005: EQUAL
22006: IFFALSE 22016
// sReset := true ;
22008: LD_ADDR_EXP 73
22012: PUSH
22013: LD_INT 1
22015: ST_TO_ADDR
// if p3 = 105 then
22016: LD_VAR 0 3
22020: PUSH
22021: LD_INT 105
22023: EQUAL
22024: IFFALSE 22034
// sSun := true ;
22026: LD_ADDR_EXP 74
22030: PUSH
22031: LD_INT 1
22033: ST_TO_ADDR
// if p3 = 106 then
22034: LD_VAR 0 3
22038: PUSH
22039: LD_INT 106
22041: EQUAL
22042: IFFALSE 22052
// sTiger := true ;
22044: LD_ADDR_EXP 70
22048: PUSH
22049: LD_INT 1
22051: ST_TO_ADDR
// if p3 = 107 then
22052: LD_VAR 0 3
22056: PUSH
22057: LD_INT 107
22059: EQUAL
22060: IFFALSE 22070
// sBomb := true ;
22062: LD_ADDR_EXP 71
22066: PUSH
22067: LD_INT 1
22069: ST_TO_ADDR
// if p3 = 108 then
22070: LD_VAR 0 3
22074: PUSH
22075: LD_INT 108
22077: EQUAL
22078: IFFALSE 22088
// sWound := true ;
22080: LD_ADDR_EXP 79
22084: PUSH
22085: LD_INT 1
22087: ST_TO_ADDR
// if p3 = 109 then
22088: LD_VAR 0 3
22092: PUSH
22093: LD_INT 109
22095: EQUAL
22096: IFFALSE 22106
// sBetray := true ;
22098: LD_ADDR_EXP 83
22102: PUSH
22103: LD_INT 1
22105: ST_TO_ADDR
// if p3 = 110 then
22106: LD_VAR 0 3
22110: PUSH
22111: LD_INT 110
22113: EQUAL
22114: IFFALSE 22124
// sContamin := true ;
22116: LD_ADDR_EXP 84
22120: PUSH
22121: LD_INT 1
22123: ST_TO_ADDR
// if p3 = 111 then
22124: LD_VAR 0 3
22128: PUSH
22129: LD_INT 111
22131: EQUAL
22132: IFFALSE 22142
// sOil := true ;
22134: LD_ADDR_EXP 86
22138: PUSH
22139: LD_INT 1
22141: ST_TO_ADDR
// if p3 = 112 then
22142: LD_VAR 0 3
22146: PUSH
22147: LD_INT 112
22149: EQUAL
22150: IFFALSE 22160
// sStu := true ;
22152: LD_ADDR_EXP 90
22156: PUSH
22157: LD_INT 1
22159: ST_TO_ADDR
// if p3 = 113 then
22160: LD_VAR 0 3
22164: PUSH
22165: LD_INT 113
22167: EQUAL
22168: IFFALSE 22178
// sBazooka := true ;
22170: LD_ADDR_EXP 93
22174: PUSH
22175: LD_INT 1
22177: ST_TO_ADDR
// if p3 = 114 then
22178: LD_VAR 0 3
22182: PUSH
22183: LD_INT 114
22185: EQUAL
22186: IFFALSE 22196
// sMortar := true ;
22188: LD_ADDR_EXP 94
22192: PUSH
22193: LD_INT 1
22195: ST_TO_ADDR
// if p3 = 115 then
22196: LD_VAR 0 3
22200: PUSH
22201: LD_INT 115
22203: EQUAL
22204: IFFALSE 22214
// sRanger := true ;
22206: LD_ADDR_EXP 104
22210: PUSH
22211: LD_INT 1
22213: ST_TO_ADDR
// if p3 = 116 then
22214: LD_VAR 0 3
22218: PUSH
22219: LD_INT 116
22221: EQUAL
22222: IFFALSE 22232
// sComputer := true ;
22224: LD_ADDR_EXP 105
22228: PUSH
22229: LD_INT 1
22231: ST_TO_ADDR
// if p3 = 117 then
22232: LD_VAR 0 3
22236: PUSH
22237: LD_INT 117
22239: EQUAL
22240: IFFALSE 22250
// s30 := true ;
22242: LD_ADDR_EXP 106
22246: PUSH
22247: LD_INT 1
22249: ST_TO_ADDR
// if p3 = 118 then
22250: LD_VAR 0 3
22254: PUSH
22255: LD_INT 118
22257: EQUAL
22258: IFFALSE 22268
// s60 := true ;
22260: LD_ADDR_EXP 107
22264: PUSH
22265: LD_INT 1
22267: ST_TO_ADDR
// end ; if p2 = hack_mode then
22268: LD_VAR 0 2
22272: PUSH
22273: LD_INT 101
22275: EQUAL
22276: IFFALSE 22404
// begin case p3 of 1 :
22278: LD_VAR 0 3
22282: PUSH
22283: LD_INT 1
22285: DOUBLE
22286: EQUAL
22287: IFTRUE 22291
22289: GO 22298
22291: POP
// hHackUnlimitedResources ; 2 :
22292: CALL 34543 0 0
22296: GO 22404
22298: LD_INT 2
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22306
22304: GO 22313
22306: POP
// hHackSetLevel10 ; 3 :
22307: CALL 34676 0 0
22311: GO 22404
22313: LD_INT 3
22315: DOUBLE
22316: EQUAL
22317: IFTRUE 22321
22319: GO 22328
22321: POP
// hHackSetLevel10YourUnits ; 4 :
22322: CALL 34761 0 0
22326: GO 22404
22328: LD_INT 4
22330: DOUBLE
22331: EQUAL
22332: IFTRUE 22336
22334: GO 22343
22336: POP
// hHackInvincible ; 5 :
22337: CALL 35209 0 0
22341: GO 22404
22343: LD_INT 5
22345: DOUBLE
22346: EQUAL
22347: IFTRUE 22351
22349: GO 22358
22351: POP
// hHackInvisible ; 6 :
22352: CALL 35320 0 0
22356: GO 22404
22358: LD_INT 6
22360: DOUBLE
22361: EQUAL
22362: IFTRUE 22366
22364: GO 22373
22366: POP
// hHackChangeYourSide ; 7 :
22367: CALL 35377 0 0
22371: GO 22404
22373: LD_INT 7
22375: DOUBLE
22376: EQUAL
22377: IFTRUE 22381
22379: GO 22388
22381: POP
// hHackChangeUnitSide ; 8 :
22382: CALL 35419 0 0
22386: GO 22404
22388: LD_INT 8
22390: DOUBLE
22391: EQUAL
22392: IFTRUE 22396
22394: GO 22403
22396: POP
// hHackFog ; end ;
22397: CALL 35520 0 0
22401: GO 22404
22403: POP
// end ; if p2 = game_save_mode then
22404: LD_VAR 0 2
22408: PUSH
22409: LD_INT 102
22411: EQUAL
22412: IFFALSE 22467
// begin if p3 = 1 then
22414: LD_VAR 0 3
22418: PUSH
22419: LD_INT 1
22421: EQUAL
22422: IFFALSE 22434
// globalGameSaveCounter := p4 ;
22424: LD_ADDR_EXP 50
22428: PUSH
22429: LD_VAR 0 4
22433: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22434: LD_VAR 0 3
22438: PUSH
22439: LD_INT 2
22441: EQUAL
22442: PUSH
22443: LD_EXP 50
22447: AND
22448: IFFALSE 22467
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22450: LD_STRING setGameSaveCounter(
22452: PUSH
22453: LD_EXP 50
22457: STR
22458: PUSH
22459: LD_STRING )
22461: STR
22462: PPUSH
22463: CALL_OW 559
// end ; end ;
22467: LD_VAR 0 7
22471: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22472: LD_INT 0
22474: PPUSH
// streamModeActive := false ;
22475: LD_ADDR_EXP 51
22479: PUSH
22480: LD_INT 0
22482: ST_TO_ADDR
// normalCounter := 36 ;
22483: LD_ADDR_EXP 52
22487: PUSH
22488: LD_INT 36
22490: ST_TO_ADDR
// hardcoreCounter := 18 ;
22491: LD_ADDR_EXP 53
22495: PUSH
22496: LD_INT 18
22498: ST_TO_ADDR
// sRocket := false ;
22499: LD_ADDR_EXP 56
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
// sSpeed := false ;
22507: LD_ADDR_EXP 55
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
// sEngine := false ;
22515: LD_ADDR_EXP 57
22519: PUSH
22520: LD_INT 0
22522: ST_TO_ADDR
// sSpec := false ;
22523: LD_ADDR_EXP 54
22527: PUSH
22528: LD_INT 0
22530: ST_TO_ADDR
// sLevel := false ;
22531: LD_ADDR_EXP 58
22535: PUSH
22536: LD_INT 0
22538: ST_TO_ADDR
// sArmoury := false ;
22539: LD_ADDR_EXP 59
22543: PUSH
22544: LD_INT 0
22546: ST_TO_ADDR
// sRadar := false ;
22547: LD_ADDR_EXP 60
22551: PUSH
22552: LD_INT 0
22554: ST_TO_ADDR
// sBunker := false ;
22555: LD_ADDR_EXP 61
22559: PUSH
22560: LD_INT 0
22562: ST_TO_ADDR
// sHack := false ;
22563: LD_ADDR_EXP 62
22567: PUSH
22568: LD_INT 0
22570: ST_TO_ADDR
// sFire := false ;
22571: LD_ADDR_EXP 63
22575: PUSH
22576: LD_INT 0
22578: ST_TO_ADDR
// sRefresh := false ;
22579: LD_ADDR_EXP 64
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// sExp := false ;
22587: LD_ADDR_EXP 65
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// sDepot := false ;
22595: LD_ADDR_EXP 66
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// sFlag := false ;
22603: LD_ADDR_EXP 67
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
// sKamikadze := false ;
22611: LD_ADDR_EXP 75
22615: PUSH
22616: LD_INT 0
22618: ST_TO_ADDR
// sTroll := false ;
22619: LD_ADDR_EXP 76
22623: PUSH
22624: LD_INT 0
22626: ST_TO_ADDR
// sSlow := false ;
22627: LD_ADDR_EXP 77
22631: PUSH
22632: LD_INT 0
22634: ST_TO_ADDR
// sLack := false ;
22635: LD_ADDR_EXP 78
22639: PUSH
22640: LD_INT 0
22642: ST_TO_ADDR
// sTank := false ;
22643: LD_ADDR_EXP 80
22647: PUSH
22648: LD_INT 0
22650: ST_TO_ADDR
// sRemote := false ;
22651: LD_ADDR_EXP 81
22655: PUSH
22656: LD_INT 0
22658: ST_TO_ADDR
// sPowell := false ;
22659: LD_ADDR_EXP 82
22663: PUSH
22664: LD_INT 0
22666: ST_TO_ADDR
// sTeleport := false ;
22667: LD_ADDR_EXP 85
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// sOilTower := false ;
22675: LD_ADDR_EXP 87
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
// sShovel := false ;
22683: LD_ADDR_EXP 88
22687: PUSH
22688: LD_INT 0
22690: ST_TO_ADDR
// sSheik := false ;
22691: LD_ADDR_EXP 89
22695: PUSH
22696: LD_INT 0
22698: ST_TO_ADDR
// sEarthquake := false ;
22699: LD_ADDR_EXP 91
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// sAI := false ;
22707: LD_ADDR_EXP 92
22711: PUSH
22712: LD_INT 0
22714: ST_TO_ADDR
// sCargo := false ;
22715: LD_ADDR_EXP 95
22719: PUSH
22720: LD_INT 0
22722: ST_TO_ADDR
// sDLaser := false ;
22723: LD_ADDR_EXP 96
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
// sExchange := false ;
22731: LD_ADDR_EXP 97
22735: PUSH
22736: LD_INT 0
22738: ST_TO_ADDR
// sFac := false ;
22739: LD_ADDR_EXP 98
22743: PUSH
22744: LD_INT 0
22746: ST_TO_ADDR
// sPower := false ;
22747: LD_ADDR_EXP 99
22751: PUSH
22752: LD_INT 0
22754: ST_TO_ADDR
// sRandom := false ;
22755: LD_ADDR_EXP 100
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// sShield := false ;
22763: LD_ADDR_EXP 101
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// sTime := false ;
22771: LD_ADDR_EXP 102
22775: PUSH
22776: LD_INT 0
22778: ST_TO_ADDR
// sTools := false ;
22779: LD_ADDR_EXP 103
22783: PUSH
22784: LD_INT 0
22786: ST_TO_ADDR
// sSold := false ;
22787: LD_ADDR_EXP 68
22791: PUSH
22792: LD_INT 0
22794: ST_TO_ADDR
// sDiff := false ;
22795: LD_ADDR_EXP 69
22799: PUSH
22800: LD_INT 0
22802: ST_TO_ADDR
// sFog := false ;
22803: LD_ADDR_EXP 72
22807: PUSH
22808: LD_INT 0
22810: ST_TO_ADDR
// sReset := false ;
22811: LD_ADDR_EXP 73
22815: PUSH
22816: LD_INT 0
22818: ST_TO_ADDR
// sSun := false ;
22819: LD_ADDR_EXP 74
22823: PUSH
22824: LD_INT 0
22826: ST_TO_ADDR
// sTiger := false ;
22827: LD_ADDR_EXP 70
22831: PUSH
22832: LD_INT 0
22834: ST_TO_ADDR
// sBomb := false ;
22835: LD_ADDR_EXP 71
22839: PUSH
22840: LD_INT 0
22842: ST_TO_ADDR
// sWound := false ;
22843: LD_ADDR_EXP 79
22847: PUSH
22848: LD_INT 0
22850: ST_TO_ADDR
// sBetray := false ;
22851: LD_ADDR_EXP 83
22855: PUSH
22856: LD_INT 0
22858: ST_TO_ADDR
// sContamin := false ;
22859: LD_ADDR_EXP 84
22863: PUSH
22864: LD_INT 0
22866: ST_TO_ADDR
// sOil := false ;
22867: LD_ADDR_EXP 86
22871: PUSH
22872: LD_INT 0
22874: ST_TO_ADDR
// sStu := false ;
22875: LD_ADDR_EXP 90
22879: PUSH
22880: LD_INT 0
22882: ST_TO_ADDR
// sBazooka := false ;
22883: LD_ADDR_EXP 93
22887: PUSH
22888: LD_INT 0
22890: ST_TO_ADDR
// sMortar := false ;
22891: LD_ADDR_EXP 94
22895: PUSH
22896: LD_INT 0
22898: ST_TO_ADDR
// sRanger := false ;
22899: LD_ADDR_EXP 104
22903: PUSH
22904: LD_INT 0
22906: ST_TO_ADDR
// sComputer := false ;
22907: LD_ADDR_EXP 105
22911: PUSH
22912: LD_INT 0
22914: ST_TO_ADDR
// s30 := false ;
22915: LD_ADDR_EXP 106
22919: PUSH
22920: LD_INT 0
22922: ST_TO_ADDR
// s60 := false ;
22923: LD_ADDR_EXP 107
22927: PUSH
22928: LD_INT 0
22930: ST_TO_ADDR
// end ;
22931: LD_VAR 0 1
22935: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22936: LD_INT 0
22938: PPUSH
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
// result := [ ] ;
22945: LD_ADDR_VAR 0 2
22949: PUSH
22950: EMPTY
22951: ST_TO_ADDR
// if campaign_id = 1 then
22952: LD_OWVAR 69
22956: PUSH
22957: LD_INT 1
22959: EQUAL
22960: IFFALSE 26126
// begin case mission_number of 1 :
22962: LD_OWVAR 70
22966: PUSH
22967: LD_INT 1
22969: DOUBLE
22970: EQUAL
22971: IFTRUE 22975
22973: GO 23051
22975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22976: LD_ADDR_VAR 0 2
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 4
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_INT 23
23004: PUSH
23005: LD_INT 26
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 101
23021: PUSH
23022: LD_INT 102
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 116
23030: PUSH
23031: LD_INT 117
23033: PUSH
23034: LD_INT 118
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
23049: GO 26124
23051: LD_INT 2
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23143
23059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23060: LD_ADDR_VAR 0 2
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 4
23070: PUSH
23071: LD_INT 11
23073: PUSH
23074: LD_INT 12
23076: PUSH
23077: LD_INT 15
23079: PUSH
23080: LD_INT 16
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 26
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 101
23105: PUSH
23106: LD_INT 102
23108: PUSH
23109: LD_INT 105
23111: PUSH
23112: LD_INT 106
23114: PUSH
23115: LD_INT 108
23117: PUSH
23118: LD_INT 116
23120: PUSH
23121: LD_INT 117
23123: PUSH
23124: LD_INT 118
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: ST_TO_ADDR
23141: GO 26124
23143: LD_INT 3
23145: DOUBLE
23146: EQUAL
23147: IFTRUE 23151
23149: GO 23239
23151: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23152: LD_ADDR_VAR 0 2
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 4
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 11
23168: PUSH
23169: LD_INT 12
23171: PUSH
23172: LD_INT 15
23174: PUSH
23175: LD_INT 16
23177: PUSH
23178: LD_INT 22
23180: PUSH
23181: LD_INT 26
23183: PUSH
23184: LD_INT 36
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 101
23201: PUSH
23202: LD_INT 102
23204: PUSH
23205: LD_INT 105
23207: PUSH
23208: LD_INT 106
23210: PUSH
23211: LD_INT 108
23213: PUSH
23214: LD_INT 116
23216: PUSH
23217: LD_INT 117
23219: PUSH
23220: LD_INT 118
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 26124
23239: LD_INT 4
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23343
23247: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 4
23258: PUSH
23259: LD_INT 5
23261: PUSH
23262: LD_INT 8
23264: PUSH
23265: LD_INT 11
23267: PUSH
23268: LD_INT 12
23270: PUSH
23271: LD_INT 15
23273: PUSH
23274: LD_INT 16
23276: PUSH
23277: LD_INT 22
23279: PUSH
23280: LD_INT 23
23282: PUSH
23283: LD_INT 26
23285: PUSH
23286: LD_INT 36
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 101
23305: PUSH
23306: LD_INT 102
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 108
23317: PUSH
23318: LD_INT 116
23320: PUSH
23321: LD_INT 117
23323: PUSH
23324: LD_INT 118
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: ST_TO_ADDR
23341: GO 26124
23343: LD_INT 5
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23463
23351: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23352: LD_ADDR_VAR 0 2
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 4
23362: PUSH
23363: LD_INT 5
23365: PUSH
23366: LD_INT 6
23368: PUSH
23369: LD_INT 8
23371: PUSH
23372: LD_INT 11
23374: PUSH
23375: LD_INT 12
23377: PUSH
23378: LD_INT 15
23380: PUSH
23381: LD_INT 16
23383: PUSH
23384: LD_INT 22
23386: PUSH
23387: LD_INT 23
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 36
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 101
23417: PUSH
23418: LD_INT 102
23420: PUSH
23421: LD_INT 105
23423: PUSH
23424: LD_INT 106
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 112
23435: PUSH
23436: LD_INT 116
23438: PUSH
23439: LD_INT 117
23441: PUSH
23442: LD_INT 118
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 26124
23463: LD_INT 6
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23603
23471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 4
23482: PUSH
23483: LD_INT 5
23485: PUSH
23486: LD_INT 6
23488: PUSH
23489: LD_INT 8
23491: PUSH
23492: LD_INT 11
23494: PUSH
23495: LD_INT 12
23497: PUSH
23498: LD_INT 15
23500: PUSH
23501: LD_INT 16
23503: PUSH
23504: LD_INT 20
23506: PUSH
23507: LD_INT 21
23509: PUSH
23510: LD_INT 22
23512: PUSH
23513: LD_INT 23
23515: PUSH
23516: LD_INT 25
23518: PUSH
23519: LD_INT 26
23521: PUSH
23522: LD_INT 30
23524: PUSH
23525: LD_INT 31
23527: PUSH
23528: LD_INT 32
23530: PUSH
23531: LD_INT 36
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 101
23557: PUSH
23558: LD_INT 102
23560: PUSH
23561: LD_INT 105
23563: PUSH
23564: LD_INT 106
23566: PUSH
23567: LD_INT 108
23569: PUSH
23570: LD_INT 109
23572: PUSH
23573: LD_INT 112
23575: PUSH
23576: LD_INT 116
23578: PUSH
23579: LD_INT 117
23581: PUSH
23582: LD_INT 118
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: ST_TO_ADDR
23601: GO 26124
23603: LD_INT 7
23605: DOUBLE
23606: EQUAL
23607: IFTRUE 23611
23609: GO 23723
23611: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: LD_INT 2
23619: PUSH
23620: LD_INT 4
23622: PUSH
23623: LD_INT 5
23625: PUSH
23626: LD_INT 7
23628: PUSH
23629: LD_INT 11
23631: PUSH
23632: LD_INT 12
23634: PUSH
23635: LD_INT 15
23637: PUSH
23638: LD_INT 16
23640: PUSH
23641: LD_INT 20
23643: PUSH
23644: LD_INT 21
23646: PUSH
23647: LD_INT 22
23649: PUSH
23650: LD_INT 23
23652: PUSH
23653: LD_INT 25
23655: PUSH
23656: LD_INT 26
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 101
23677: PUSH
23678: LD_INT 102
23680: PUSH
23681: LD_INT 103
23683: PUSH
23684: LD_INT 105
23686: PUSH
23687: LD_INT 106
23689: PUSH
23690: LD_INT 108
23692: PUSH
23693: LD_INT 112
23695: PUSH
23696: LD_INT 116
23698: PUSH
23699: LD_INT 117
23701: PUSH
23702: LD_INT 118
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: ST_TO_ADDR
23721: GO 26124
23723: LD_INT 8
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23871
23731: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23732: LD_ADDR_VAR 0 2
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 4
23742: PUSH
23743: LD_INT 5
23745: PUSH
23746: LD_INT 6
23748: PUSH
23749: LD_INT 7
23751: PUSH
23752: LD_INT 8
23754: PUSH
23755: LD_INT 11
23757: PUSH
23758: LD_INT 12
23760: PUSH
23761: LD_INT 15
23763: PUSH
23764: LD_INT 16
23766: PUSH
23767: LD_INT 20
23769: PUSH
23770: LD_INT 21
23772: PUSH
23773: LD_INT 22
23775: PUSH
23776: LD_INT 23
23778: PUSH
23779: LD_INT 25
23781: PUSH
23782: LD_INT 26
23784: PUSH
23785: LD_INT 30
23787: PUSH
23788: LD_INT 31
23790: PUSH
23791: LD_INT 32
23793: PUSH
23794: LD_INT 36
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 101
23821: PUSH
23822: LD_INT 102
23824: PUSH
23825: LD_INT 103
23827: PUSH
23828: LD_INT 105
23830: PUSH
23831: LD_INT 106
23833: PUSH
23834: LD_INT 108
23836: PUSH
23837: LD_INT 109
23839: PUSH
23840: LD_INT 112
23842: PUSH
23843: LD_INT 116
23845: PUSH
23846: LD_INT 117
23848: PUSH
23849: LD_INT 118
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: ST_TO_ADDR
23869: GO 26124
23871: LD_INT 9
23873: DOUBLE
23874: EQUAL
23875: IFTRUE 23879
23877: GO 24027
23879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 4
23890: PUSH
23891: LD_INT 5
23893: PUSH
23894: LD_INT 6
23896: PUSH
23897: LD_INT 7
23899: PUSH
23900: LD_INT 8
23902: PUSH
23903: LD_INT 11
23905: PUSH
23906: LD_INT 12
23908: PUSH
23909: LD_INT 15
23911: PUSH
23912: LD_INT 16
23914: PUSH
23915: LD_INT 20
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 22
23923: PUSH
23924: LD_INT 23
23926: PUSH
23927: LD_INT 25
23929: PUSH
23930: LD_INT 26
23932: PUSH
23933: LD_INT 28
23935: PUSH
23936: LD_INT 30
23938: PUSH
23939: LD_INT 31
23941: PUSH
23942: LD_INT 32
23944: PUSH
23945: LD_INT 36
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 101
23973: PUSH
23974: LD_INT 102
23976: PUSH
23977: LD_INT 103
23979: PUSH
23980: LD_INT 105
23982: PUSH
23983: LD_INT 106
23985: PUSH
23986: LD_INT 108
23988: PUSH
23989: LD_INT 109
23991: PUSH
23992: LD_INT 112
23994: PUSH
23995: LD_INT 114
23997: PUSH
23998: LD_INT 116
24000: PUSH
24001: LD_INT 117
24003: PUSH
24004: LD_INT 118
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: ST_TO_ADDR
24025: GO 26124
24027: LD_INT 10
24029: DOUBLE
24030: EQUAL
24031: IFTRUE 24035
24033: GO 24231
24035: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24036: LD_ADDR_VAR 0 2
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: LD_INT 4
24046: PUSH
24047: LD_INT 5
24049: PUSH
24050: LD_INT 6
24052: PUSH
24053: LD_INT 7
24055: PUSH
24056: LD_INT 8
24058: PUSH
24059: LD_INT 9
24061: PUSH
24062: LD_INT 10
24064: PUSH
24065: LD_INT 11
24067: PUSH
24068: LD_INT 12
24070: PUSH
24071: LD_INT 13
24073: PUSH
24074: LD_INT 14
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 16
24082: PUSH
24083: LD_INT 17
24085: PUSH
24086: LD_INT 18
24088: PUSH
24089: LD_INT 19
24091: PUSH
24092: LD_INT 20
24094: PUSH
24095: LD_INT 21
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 24
24106: PUSH
24107: LD_INT 25
24109: PUSH
24110: LD_INT 26
24112: PUSH
24113: LD_INT 28
24115: PUSH
24116: LD_INT 30
24118: PUSH
24119: LD_INT 31
24121: PUSH
24122: LD_INT 32
24124: PUSH
24125: LD_INT 36
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 101
24161: PUSH
24162: LD_INT 102
24164: PUSH
24165: LD_INT 103
24167: PUSH
24168: LD_INT 104
24170: PUSH
24171: LD_INT 105
24173: PUSH
24174: LD_INT 106
24176: PUSH
24177: LD_INT 107
24179: PUSH
24180: LD_INT 108
24182: PUSH
24183: LD_INT 109
24185: PUSH
24186: LD_INT 110
24188: PUSH
24189: LD_INT 111
24191: PUSH
24192: LD_INT 112
24194: PUSH
24195: LD_INT 114
24197: PUSH
24198: LD_INT 116
24200: PUSH
24201: LD_INT 117
24203: PUSH
24204: LD_INT 118
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: ST_TO_ADDR
24229: GO 26124
24231: LD_INT 11
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24443
24239: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24240: LD_ADDR_VAR 0 2
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 4
24253: PUSH
24254: LD_INT 5
24256: PUSH
24257: LD_INT 6
24259: PUSH
24260: LD_INT 7
24262: PUSH
24263: LD_INT 8
24265: PUSH
24266: LD_INT 9
24268: PUSH
24269: LD_INT 10
24271: PUSH
24272: LD_INT 11
24274: PUSH
24275: LD_INT 12
24277: PUSH
24278: LD_INT 13
24280: PUSH
24281: LD_INT 14
24283: PUSH
24284: LD_INT 15
24286: PUSH
24287: LD_INT 16
24289: PUSH
24290: LD_INT 17
24292: PUSH
24293: LD_INT 18
24295: PUSH
24296: LD_INT 19
24298: PUSH
24299: LD_INT 20
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: LD_INT 22
24307: PUSH
24308: LD_INT 23
24310: PUSH
24311: LD_INT 24
24313: PUSH
24314: LD_INT 25
24316: PUSH
24317: LD_INT 26
24319: PUSH
24320: LD_INT 28
24322: PUSH
24323: LD_INT 30
24325: PUSH
24326: LD_INT 31
24328: PUSH
24329: LD_INT 32
24331: PUSH
24332: LD_INT 34
24334: PUSH
24335: LD_INT 36
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 101
24373: PUSH
24374: LD_INT 102
24376: PUSH
24377: LD_INT 103
24379: PUSH
24380: LD_INT 104
24382: PUSH
24383: LD_INT 105
24385: PUSH
24386: LD_INT 106
24388: PUSH
24389: LD_INT 107
24391: PUSH
24392: LD_INT 108
24394: PUSH
24395: LD_INT 109
24397: PUSH
24398: LD_INT 110
24400: PUSH
24401: LD_INT 111
24403: PUSH
24404: LD_INT 112
24406: PUSH
24407: LD_INT 114
24409: PUSH
24410: LD_INT 116
24412: PUSH
24413: LD_INT 117
24415: PUSH
24416: LD_INT 118
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: ST_TO_ADDR
24441: GO 26124
24443: LD_INT 12
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24671
24451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24452: LD_ADDR_VAR 0 2
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: LD_INT 6
24474: PUSH
24475: LD_INT 7
24477: PUSH
24478: LD_INT 8
24480: PUSH
24481: LD_INT 9
24483: PUSH
24484: LD_INT 10
24486: PUSH
24487: LD_INT 11
24489: PUSH
24490: LD_INT 12
24492: PUSH
24493: LD_INT 13
24495: PUSH
24496: LD_INT 14
24498: PUSH
24499: LD_INT 15
24501: PUSH
24502: LD_INT 16
24504: PUSH
24505: LD_INT 17
24507: PUSH
24508: LD_INT 18
24510: PUSH
24511: LD_INT 19
24513: PUSH
24514: LD_INT 20
24516: PUSH
24517: LD_INT 21
24519: PUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 23
24525: PUSH
24526: LD_INT 24
24528: PUSH
24529: LD_INT 25
24531: PUSH
24532: LD_INT 26
24534: PUSH
24535: LD_INT 27
24537: PUSH
24538: LD_INT 28
24540: PUSH
24541: LD_INT 30
24543: PUSH
24544: LD_INT 31
24546: PUSH
24547: LD_INT 32
24549: PUSH
24550: LD_INT 33
24552: PUSH
24553: LD_INT 34
24555: PUSH
24556: LD_INT 36
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 101
24597: PUSH
24598: LD_INT 102
24600: PUSH
24601: LD_INT 103
24603: PUSH
24604: LD_INT 104
24606: PUSH
24607: LD_INT 105
24609: PUSH
24610: LD_INT 106
24612: PUSH
24613: LD_INT 107
24615: PUSH
24616: LD_INT 108
24618: PUSH
24619: LD_INT 109
24621: PUSH
24622: LD_INT 110
24624: PUSH
24625: LD_INT 111
24627: PUSH
24628: LD_INT 112
24630: PUSH
24631: LD_INT 113
24633: PUSH
24634: LD_INT 114
24636: PUSH
24637: LD_INT 116
24639: PUSH
24640: LD_INT 117
24642: PUSH
24643: LD_INT 118
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: ST_TO_ADDR
24669: GO 26124
24671: LD_INT 13
24673: DOUBLE
24674: EQUAL
24675: IFTRUE 24679
24677: GO 24887
24679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 4
24696: PUSH
24697: LD_INT 5
24699: PUSH
24700: LD_INT 8
24702: PUSH
24703: LD_INT 9
24705: PUSH
24706: LD_INT 10
24708: PUSH
24709: LD_INT 11
24711: PUSH
24712: LD_INT 12
24714: PUSH
24715: LD_INT 14
24717: PUSH
24718: LD_INT 15
24720: PUSH
24721: LD_INT 16
24723: PUSH
24724: LD_INT 17
24726: PUSH
24727: LD_INT 18
24729: PUSH
24730: LD_INT 19
24732: PUSH
24733: LD_INT 20
24735: PUSH
24736: LD_INT 21
24738: PUSH
24739: LD_INT 22
24741: PUSH
24742: LD_INT 23
24744: PUSH
24745: LD_INT 24
24747: PUSH
24748: LD_INT 25
24750: PUSH
24751: LD_INT 26
24753: PUSH
24754: LD_INT 27
24756: PUSH
24757: LD_INT 28
24759: PUSH
24760: LD_INT 30
24762: PUSH
24763: LD_INT 31
24765: PUSH
24766: LD_INT 32
24768: PUSH
24769: LD_INT 33
24771: PUSH
24772: LD_INT 34
24774: PUSH
24775: LD_INT 36
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 101
24813: PUSH
24814: LD_INT 102
24816: PUSH
24817: LD_INT 103
24819: PUSH
24820: LD_INT 104
24822: PUSH
24823: LD_INT 105
24825: PUSH
24826: LD_INT 106
24828: PUSH
24829: LD_INT 107
24831: PUSH
24832: LD_INT 108
24834: PUSH
24835: LD_INT 109
24837: PUSH
24838: LD_INT 110
24840: PUSH
24841: LD_INT 111
24843: PUSH
24844: LD_INT 112
24846: PUSH
24847: LD_INT 113
24849: PUSH
24850: LD_INT 114
24852: PUSH
24853: LD_INT 116
24855: PUSH
24856: LD_INT 117
24858: PUSH
24859: LD_INT 118
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: ST_TO_ADDR
24885: GO 26124
24887: LD_INT 14
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 25119
24895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24896: LD_ADDR_VAR 0 2
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: LD_INT 4
24912: PUSH
24913: LD_INT 5
24915: PUSH
24916: LD_INT 6
24918: PUSH
24919: LD_INT 7
24921: PUSH
24922: LD_INT 8
24924: PUSH
24925: LD_INT 9
24927: PUSH
24928: LD_INT 10
24930: PUSH
24931: LD_INT 11
24933: PUSH
24934: LD_INT 12
24936: PUSH
24937: LD_INT 13
24939: PUSH
24940: LD_INT 14
24942: PUSH
24943: LD_INT 15
24945: PUSH
24946: LD_INT 16
24948: PUSH
24949: LD_INT 17
24951: PUSH
24952: LD_INT 18
24954: PUSH
24955: LD_INT 19
24957: PUSH
24958: LD_INT 20
24960: PUSH
24961: LD_INT 21
24963: PUSH
24964: LD_INT 22
24966: PUSH
24967: LD_INT 23
24969: PUSH
24970: LD_INT 24
24972: PUSH
24973: LD_INT 25
24975: PUSH
24976: LD_INT 26
24978: PUSH
24979: LD_INT 27
24981: PUSH
24982: LD_INT 28
24984: PUSH
24985: LD_INT 29
24987: PUSH
24988: LD_INT 30
24990: PUSH
24991: LD_INT 31
24993: PUSH
24994: LD_INT 32
24996: PUSH
24997: LD_INT 33
24999: PUSH
25000: LD_INT 34
25002: PUSH
25003: LD_INT 36
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 101
25045: PUSH
25046: LD_INT 102
25048: PUSH
25049: LD_INT 103
25051: PUSH
25052: LD_INT 104
25054: PUSH
25055: LD_INT 105
25057: PUSH
25058: LD_INT 106
25060: PUSH
25061: LD_INT 107
25063: PUSH
25064: LD_INT 108
25066: PUSH
25067: LD_INT 109
25069: PUSH
25070: LD_INT 110
25072: PUSH
25073: LD_INT 111
25075: PUSH
25076: LD_INT 112
25078: PUSH
25079: LD_INT 113
25081: PUSH
25082: LD_INT 114
25084: PUSH
25085: LD_INT 116
25087: PUSH
25088: LD_INT 117
25090: PUSH
25091: LD_INT 118
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: ST_TO_ADDR
25117: GO 26124
25119: LD_INT 15
25121: DOUBLE
25122: EQUAL
25123: IFTRUE 25127
25125: GO 25351
25127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25128: LD_ADDR_VAR 0 2
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: LD_INT 4
25144: PUSH
25145: LD_INT 5
25147: PUSH
25148: LD_INT 6
25150: PUSH
25151: LD_INT 7
25153: PUSH
25154: LD_INT 8
25156: PUSH
25157: LD_INT 9
25159: PUSH
25160: LD_INT 10
25162: PUSH
25163: LD_INT 11
25165: PUSH
25166: LD_INT 12
25168: PUSH
25169: LD_INT 13
25171: PUSH
25172: LD_INT 14
25174: PUSH
25175: LD_INT 15
25177: PUSH
25178: LD_INT 16
25180: PUSH
25181: LD_INT 17
25183: PUSH
25184: LD_INT 18
25186: PUSH
25187: LD_INT 19
25189: PUSH
25190: LD_INT 20
25192: PUSH
25193: LD_INT 21
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_INT 23
25201: PUSH
25202: LD_INT 24
25204: PUSH
25205: LD_INT 25
25207: PUSH
25208: LD_INT 26
25210: PUSH
25211: LD_INT 27
25213: PUSH
25214: LD_INT 28
25216: PUSH
25217: LD_INT 29
25219: PUSH
25220: LD_INT 30
25222: PUSH
25223: LD_INT 31
25225: PUSH
25226: LD_INT 32
25228: PUSH
25229: LD_INT 33
25231: PUSH
25232: LD_INT 34
25234: PUSH
25235: LD_INT 36
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 101
25277: PUSH
25278: LD_INT 102
25280: PUSH
25281: LD_INT 103
25283: PUSH
25284: LD_INT 104
25286: PUSH
25287: LD_INT 105
25289: PUSH
25290: LD_INT 106
25292: PUSH
25293: LD_INT 107
25295: PUSH
25296: LD_INT 108
25298: PUSH
25299: LD_INT 109
25301: PUSH
25302: LD_INT 110
25304: PUSH
25305: LD_INT 111
25307: PUSH
25308: LD_INT 112
25310: PUSH
25311: LD_INT 113
25313: PUSH
25314: LD_INT 114
25316: PUSH
25317: LD_INT 116
25319: PUSH
25320: LD_INT 117
25322: PUSH
25323: LD_INT 118
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: ST_TO_ADDR
25349: GO 26124
25351: LD_INT 16
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25495
25359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25360: LD_ADDR_VAR 0 2
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 4
25370: PUSH
25371: LD_INT 5
25373: PUSH
25374: LD_INT 7
25376: PUSH
25377: LD_INT 11
25379: PUSH
25380: LD_INT 12
25382: PUSH
25383: LD_INT 15
25385: PUSH
25386: LD_INT 16
25388: PUSH
25389: LD_INT 20
25391: PUSH
25392: LD_INT 21
25394: PUSH
25395: LD_INT 22
25397: PUSH
25398: LD_INT 23
25400: PUSH
25401: LD_INT 25
25403: PUSH
25404: LD_INT 26
25406: PUSH
25407: LD_INT 30
25409: PUSH
25410: LD_INT 31
25412: PUSH
25413: LD_INT 32
25415: PUSH
25416: LD_INT 33
25418: PUSH
25419: LD_INT 34
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 101
25445: PUSH
25446: LD_INT 102
25448: PUSH
25449: LD_INT 103
25451: PUSH
25452: LD_INT 106
25454: PUSH
25455: LD_INT 108
25457: PUSH
25458: LD_INT 112
25460: PUSH
25461: LD_INT 113
25463: PUSH
25464: LD_INT 114
25466: PUSH
25467: LD_INT 116
25469: PUSH
25470: LD_INT 117
25472: PUSH
25473: LD_INT 118
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: ST_TO_ADDR
25493: GO 26124
25495: LD_INT 17
25497: DOUBLE
25498: EQUAL
25499: IFTRUE 25503
25501: GO 25727
25503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 3
25517: PUSH
25518: LD_INT 4
25520: PUSH
25521: LD_INT 5
25523: PUSH
25524: LD_INT 6
25526: PUSH
25527: LD_INT 7
25529: PUSH
25530: LD_INT 8
25532: PUSH
25533: LD_INT 9
25535: PUSH
25536: LD_INT 10
25538: PUSH
25539: LD_INT 11
25541: PUSH
25542: LD_INT 12
25544: PUSH
25545: LD_INT 13
25547: PUSH
25548: LD_INT 14
25550: PUSH
25551: LD_INT 15
25553: PUSH
25554: LD_INT 16
25556: PUSH
25557: LD_INT 17
25559: PUSH
25560: LD_INT 18
25562: PUSH
25563: LD_INT 19
25565: PUSH
25566: LD_INT 20
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 22
25574: PUSH
25575: LD_INT 23
25577: PUSH
25578: LD_INT 24
25580: PUSH
25581: LD_INT 25
25583: PUSH
25584: LD_INT 26
25586: PUSH
25587: LD_INT 27
25589: PUSH
25590: LD_INT 28
25592: PUSH
25593: LD_INT 29
25595: PUSH
25596: LD_INT 30
25598: PUSH
25599: LD_INT 31
25601: PUSH
25602: LD_INT 32
25604: PUSH
25605: LD_INT 33
25607: PUSH
25608: LD_INT 34
25610: PUSH
25611: LD_INT 36
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 101
25653: PUSH
25654: LD_INT 102
25656: PUSH
25657: LD_INT 103
25659: PUSH
25660: LD_INT 104
25662: PUSH
25663: LD_INT 105
25665: PUSH
25666: LD_INT 106
25668: PUSH
25669: LD_INT 107
25671: PUSH
25672: LD_INT 108
25674: PUSH
25675: LD_INT 109
25677: PUSH
25678: LD_INT 110
25680: PUSH
25681: LD_INT 111
25683: PUSH
25684: LD_INT 112
25686: PUSH
25687: LD_INT 113
25689: PUSH
25690: LD_INT 114
25692: PUSH
25693: LD_INT 116
25695: PUSH
25696: LD_INT 117
25698: PUSH
25699: LD_INT 118
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: ST_TO_ADDR
25725: GO 26124
25727: LD_INT 18
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25883
25735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25736: LD_ADDR_VAR 0 2
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 4
25746: PUSH
25747: LD_INT 5
25749: PUSH
25750: LD_INT 7
25752: PUSH
25753: LD_INT 11
25755: PUSH
25756: LD_INT 12
25758: PUSH
25759: LD_INT 15
25761: PUSH
25762: LD_INT 16
25764: PUSH
25765: LD_INT 20
25767: PUSH
25768: LD_INT 21
25770: PUSH
25771: LD_INT 22
25773: PUSH
25774: LD_INT 23
25776: PUSH
25777: LD_INT 25
25779: PUSH
25780: LD_INT 26
25782: PUSH
25783: LD_INT 30
25785: PUSH
25786: LD_INT 31
25788: PUSH
25789: LD_INT 32
25791: PUSH
25792: LD_INT 33
25794: PUSH
25795: LD_INT 34
25797: PUSH
25798: LD_INT 35
25800: PUSH
25801: LD_INT 36
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 101
25829: PUSH
25830: LD_INT 102
25832: PUSH
25833: LD_INT 103
25835: PUSH
25836: LD_INT 106
25838: PUSH
25839: LD_INT 108
25841: PUSH
25842: LD_INT 112
25844: PUSH
25845: LD_INT 113
25847: PUSH
25848: LD_INT 114
25850: PUSH
25851: LD_INT 115
25853: PUSH
25854: LD_INT 116
25856: PUSH
25857: LD_INT 117
25859: PUSH
25860: LD_INT 118
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: ST_TO_ADDR
25881: GO 26124
25883: LD_INT 19
25885: DOUBLE
25886: EQUAL
25887: IFTRUE 25891
25889: GO 26123
25891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25892: LD_ADDR_VAR 0 2
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: LD_INT 4
25908: PUSH
25909: LD_INT 5
25911: PUSH
25912: LD_INT 6
25914: PUSH
25915: LD_INT 7
25917: PUSH
25918: LD_INT 8
25920: PUSH
25921: LD_INT 9
25923: PUSH
25924: LD_INT 10
25926: PUSH
25927: LD_INT 11
25929: PUSH
25930: LD_INT 12
25932: PUSH
25933: LD_INT 13
25935: PUSH
25936: LD_INT 14
25938: PUSH
25939: LD_INT 15
25941: PUSH
25942: LD_INT 16
25944: PUSH
25945: LD_INT 17
25947: PUSH
25948: LD_INT 18
25950: PUSH
25951: LD_INT 19
25953: PUSH
25954: LD_INT 20
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_INT 23
25965: PUSH
25966: LD_INT 24
25968: PUSH
25969: LD_INT 25
25971: PUSH
25972: LD_INT 26
25974: PUSH
25975: LD_INT 27
25977: PUSH
25978: LD_INT 28
25980: PUSH
25981: LD_INT 29
25983: PUSH
25984: LD_INT 30
25986: PUSH
25987: LD_INT 31
25989: PUSH
25990: LD_INT 32
25992: PUSH
25993: LD_INT 33
25995: PUSH
25996: LD_INT 34
25998: PUSH
25999: LD_INT 35
26001: PUSH
26002: LD_INT 36
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 101
26045: PUSH
26046: LD_INT 102
26048: PUSH
26049: LD_INT 103
26051: PUSH
26052: LD_INT 104
26054: PUSH
26055: LD_INT 105
26057: PUSH
26058: LD_INT 106
26060: PUSH
26061: LD_INT 107
26063: PUSH
26064: LD_INT 108
26066: PUSH
26067: LD_INT 109
26069: PUSH
26070: LD_INT 110
26072: PUSH
26073: LD_INT 111
26075: PUSH
26076: LD_INT 112
26078: PUSH
26079: LD_INT 113
26081: PUSH
26082: LD_INT 114
26084: PUSH
26085: LD_INT 115
26087: PUSH
26088: LD_INT 116
26090: PUSH
26091: LD_INT 117
26093: PUSH
26094: LD_INT 118
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: ST_TO_ADDR
26121: GO 26124
26123: POP
// end else
26124: GO 26355
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26126: LD_ADDR_VAR 0 2
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: LD_INT 4
26142: PUSH
26143: LD_INT 5
26145: PUSH
26146: LD_INT 6
26148: PUSH
26149: LD_INT 7
26151: PUSH
26152: LD_INT 8
26154: PUSH
26155: LD_INT 9
26157: PUSH
26158: LD_INT 10
26160: PUSH
26161: LD_INT 11
26163: PUSH
26164: LD_INT 12
26166: PUSH
26167: LD_INT 13
26169: PUSH
26170: LD_INT 14
26172: PUSH
26173: LD_INT 15
26175: PUSH
26176: LD_INT 16
26178: PUSH
26179: LD_INT 17
26181: PUSH
26182: LD_INT 18
26184: PUSH
26185: LD_INT 19
26187: PUSH
26188: LD_INT 20
26190: PUSH
26191: LD_INT 21
26193: PUSH
26194: LD_INT 22
26196: PUSH
26197: LD_INT 23
26199: PUSH
26200: LD_INT 24
26202: PUSH
26203: LD_INT 25
26205: PUSH
26206: LD_INT 26
26208: PUSH
26209: LD_INT 27
26211: PUSH
26212: LD_INT 28
26214: PUSH
26215: LD_INT 29
26217: PUSH
26218: LD_INT 30
26220: PUSH
26221: LD_INT 31
26223: PUSH
26224: LD_INT 32
26226: PUSH
26227: LD_INT 33
26229: PUSH
26230: LD_INT 34
26232: PUSH
26233: LD_INT 35
26235: PUSH
26236: LD_INT 36
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 101
26279: PUSH
26280: LD_INT 102
26282: PUSH
26283: LD_INT 103
26285: PUSH
26286: LD_INT 104
26288: PUSH
26289: LD_INT 105
26291: PUSH
26292: LD_INT 106
26294: PUSH
26295: LD_INT 107
26297: PUSH
26298: LD_INT 108
26300: PUSH
26301: LD_INT 109
26303: PUSH
26304: LD_INT 110
26306: PUSH
26307: LD_INT 111
26309: PUSH
26310: LD_INT 112
26312: PUSH
26313: LD_INT 113
26315: PUSH
26316: LD_INT 114
26318: PUSH
26319: LD_INT 115
26321: PUSH
26322: LD_INT 116
26324: PUSH
26325: LD_INT 117
26327: PUSH
26328: LD_INT 118
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: ST_TO_ADDR
// if result then
26355: LD_VAR 0 2
26359: IFFALSE 27145
// begin normal :=  ;
26361: LD_ADDR_VAR 0 5
26365: PUSH
26366: LD_STRING 
26368: ST_TO_ADDR
// hardcore :=  ;
26369: LD_ADDR_VAR 0 6
26373: PUSH
26374: LD_STRING 
26376: ST_TO_ADDR
// active :=  ;
26377: LD_ADDR_VAR 0 7
26381: PUSH
26382: LD_STRING 
26384: ST_TO_ADDR
// for i = 1 to normalCounter do
26385: LD_ADDR_VAR 0 8
26389: PUSH
26390: DOUBLE
26391: LD_INT 1
26393: DEC
26394: ST_TO_ADDR
26395: LD_EXP 52
26399: PUSH
26400: FOR_TO
26401: IFFALSE 26502
// begin tmp := 0 ;
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: LD_STRING 0
26410: ST_TO_ADDR
// if result [ 1 ] then
26411: LD_VAR 0 2
26415: PUSH
26416: LD_INT 1
26418: ARRAY
26419: IFFALSE 26484
// if result [ 1 ] [ 1 ] = i then
26421: LD_VAR 0 2
26425: PUSH
26426: LD_INT 1
26428: ARRAY
26429: PUSH
26430: LD_INT 1
26432: ARRAY
26433: PUSH
26434: LD_VAR 0 8
26438: EQUAL
26439: IFFALSE 26484
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26441: LD_ADDR_VAR 0 2
26445: PUSH
26446: LD_VAR 0 2
26450: PPUSH
26451: LD_INT 1
26453: PPUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_INT 1
26461: ARRAY
26462: PPUSH
26463: LD_INT 1
26465: PPUSH
26466: CALL_OW 3
26470: PPUSH
26471: CALL_OW 1
26475: ST_TO_ADDR
// tmp := 1 ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_STRING 1
26483: ST_TO_ADDR
// end ; normal := normal & tmp ;
26484: LD_ADDR_VAR 0 5
26488: PUSH
26489: LD_VAR 0 5
26493: PUSH
26494: LD_VAR 0 3
26498: STR
26499: ST_TO_ADDR
// end ;
26500: GO 26400
26502: POP
26503: POP
// for i = 1 to hardcoreCounter do
26504: LD_ADDR_VAR 0 8
26508: PUSH
26509: DOUBLE
26510: LD_INT 1
26512: DEC
26513: ST_TO_ADDR
26514: LD_EXP 53
26518: PUSH
26519: FOR_TO
26520: IFFALSE 26625
// begin tmp := 0 ;
26522: LD_ADDR_VAR 0 3
26526: PUSH
26527: LD_STRING 0
26529: ST_TO_ADDR
// if result [ 2 ] then
26530: LD_VAR 0 2
26534: PUSH
26535: LD_INT 2
26537: ARRAY
26538: IFFALSE 26607
// if result [ 2 ] [ 1 ] = 100 + i then
26540: LD_VAR 0 2
26544: PUSH
26545: LD_INT 2
26547: ARRAY
26548: PUSH
26549: LD_INT 1
26551: ARRAY
26552: PUSH
26553: LD_INT 100
26555: PUSH
26556: LD_VAR 0 8
26560: PLUS
26561: EQUAL
26562: IFFALSE 26607
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 2
26573: PPUSH
26574: LD_INT 2
26576: PPUSH
26577: LD_VAR 0 2
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: PPUSH
26586: LD_INT 1
26588: PPUSH
26589: CALL_OW 3
26593: PPUSH
26594: CALL_OW 1
26598: ST_TO_ADDR
// tmp := 1 ;
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_STRING 1
26606: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26607: LD_ADDR_VAR 0 6
26611: PUSH
26612: LD_VAR 0 6
26616: PUSH
26617: LD_VAR 0 3
26621: STR
26622: ST_TO_ADDR
// end ;
26623: GO 26519
26625: POP
26626: POP
// if isGameLoad then
26627: LD_VAR 0 1
26631: IFFALSE 27106
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26633: LD_ADDR_VAR 0 4
26637: PUSH
26638: LD_EXP 56
26642: PUSH
26643: LD_EXP 55
26647: PUSH
26648: LD_EXP 57
26652: PUSH
26653: LD_EXP 54
26657: PUSH
26658: LD_EXP 58
26662: PUSH
26663: LD_EXP 59
26667: PUSH
26668: LD_EXP 60
26672: PUSH
26673: LD_EXP 61
26677: PUSH
26678: LD_EXP 62
26682: PUSH
26683: LD_EXP 63
26687: PUSH
26688: LD_EXP 64
26692: PUSH
26693: LD_EXP 65
26697: PUSH
26698: LD_EXP 66
26702: PUSH
26703: LD_EXP 67
26707: PUSH
26708: LD_EXP 75
26712: PUSH
26713: LD_EXP 76
26717: PUSH
26718: LD_EXP 77
26722: PUSH
26723: LD_EXP 78
26727: PUSH
26728: LD_EXP 80
26732: PUSH
26733: LD_EXP 81
26737: PUSH
26738: LD_EXP 82
26742: PUSH
26743: LD_EXP 85
26747: PUSH
26748: LD_EXP 87
26752: PUSH
26753: LD_EXP 88
26757: PUSH
26758: LD_EXP 89
26762: PUSH
26763: LD_EXP 91
26767: PUSH
26768: LD_EXP 92
26772: PUSH
26773: LD_EXP 95
26777: PUSH
26778: LD_EXP 96
26782: PUSH
26783: LD_EXP 97
26787: PUSH
26788: LD_EXP 98
26792: PUSH
26793: LD_EXP 99
26797: PUSH
26798: LD_EXP 100
26802: PUSH
26803: LD_EXP 101
26807: PUSH
26808: LD_EXP 102
26812: PUSH
26813: LD_EXP 103
26817: PUSH
26818: LD_EXP 68
26822: PUSH
26823: LD_EXP 69
26827: PUSH
26828: LD_EXP 72
26832: PUSH
26833: LD_EXP 73
26837: PUSH
26838: LD_EXP 74
26842: PUSH
26843: LD_EXP 70
26847: PUSH
26848: LD_EXP 71
26852: PUSH
26853: LD_EXP 79
26857: PUSH
26858: LD_EXP 83
26862: PUSH
26863: LD_EXP 84
26867: PUSH
26868: LD_EXP 86
26872: PUSH
26873: LD_EXP 90
26877: PUSH
26878: LD_EXP 93
26882: PUSH
26883: LD_EXP 94
26887: PUSH
26888: LD_EXP 104
26892: PUSH
26893: LD_EXP 105
26897: PUSH
26898: LD_EXP 106
26902: PUSH
26903: LD_EXP 107
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// tmp :=  ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_STRING 
26971: ST_TO_ADDR
// for i = 1 to normalCounter do
26972: LD_ADDR_VAR 0 8
26976: PUSH
26977: DOUBLE
26978: LD_INT 1
26980: DEC
26981: ST_TO_ADDR
26982: LD_EXP 52
26986: PUSH
26987: FOR_TO
26988: IFFALSE 27024
// begin if flags [ i ] then
26990: LD_VAR 0 4
26994: PUSH
26995: LD_VAR 0 8
26999: ARRAY
27000: IFFALSE 27022
// tmp := tmp & i & ; ;
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_VAR 0 3
27011: PUSH
27012: LD_VAR 0 8
27016: STR
27017: PUSH
27018: LD_STRING ;
27020: STR
27021: ST_TO_ADDR
// end ;
27022: GO 26987
27024: POP
27025: POP
// for i = 1 to hardcoreCounter do
27026: LD_ADDR_VAR 0 8
27030: PUSH
27031: DOUBLE
27032: LD_INT 1
27034: DEC
27035: ST_TO_ADDR
27036: LD_EXP 53
27040: PUSH
27041: FOR_TO
27042: IFFALSE 27088
// begin if flags [ normalCounter + i ] then
27044: LD_VAR 0 4
27048: PUSH
27049: LD_EXP 52
27053: PUSH
27054: LD_VAR 0 8
27058: PLUS
27059: ARRAY
27060: IFFALSE 27086
// tmp := tmp & ( 100 + i ) & ; ;
27062: LD_ADDR_VAR 0 3
27066: PUSH
27067: LD_VAR 0 3
27071: PUSH
27072: LD_INT 100
27074: PUSH
27075: LD_VAR 0 8
27079: PLUS
27080: STR
27081: PUSH
27082: LD_STRING ;
27084: STR
27085: ST_TO_ADDR
// end ;
27086: GO 27041
27088: POP
27089: POP
// if tmp then
27090: LD_VAR 0 3
27094: IFFALSE 27106
// active := tmp ;
27096: LD_ADDR_VAR 0 7
27100: PUSH
27101: LD_VAR 0 3
27105: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27106: LD_STRING getStreamItemsFromMission("
27108: PUSH
27109: LD_VAR 0 5
27113: STR
27114: PUSH
27115: LD_STRING ","
27117: STR
27118: PUSH
27119: LD_VAR 0 6
27123: STR
27124: PUSH
27125: LD_STRING ","
27127: STR
27128: PUSH
27129: LD_VAR 0 7
27133: STR
27134: PUSH
27135: LD_STRING ")
27137: STR
27138: PPUSH
27139: CALL_OW 559
// end else
27143: GO 27152
// ToLua ( getStreamItemsFromMission("","","") ) ;
27145: LD_STRING getStreamItemsFromMission("","","")
27147: PPUSH
27148: CALL_OW 559
// end ;
27152: LD_VAR 0 2
27156: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27157: LD_EXP 51
27161: PUSH
27162: LD_EXP 56
27166: AND
27167: IFFALSE 27291
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin enable ;
27176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27177: LD_ADDR_VAR 0 2
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_OWVAR 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 34
27199: PUSH
27200: LD_INT 7
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 34
27209: PUSH
27210: LD_INT 45
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 34
27219: PUSH
27220: LD_INT 28
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 34
27229: PUSH
27230: LD_INT 47
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PPUSH
27248: CALL_OW 69
27252: ST_TO_ADDR
// if not tmp then
27253: LD_VAR 0 2
27257: NOT
27258: IFFALSE 27262
// exit ;
27260: GO 27291
// for i in tmp do
27262: LD_ADDR_VAR 0 1
27266: PUSH
27267: LD_VAR 0 2
27271: PUSH
27272: FOR_IN
27273: IFFALSE 27289
// begin SetLives ( i , 0 ) ;
27275: LD_VAR 0 1
27279: PPUSH
27280: LD_INT 0
27282: PPUSH
27283: CALL_OW 234
// end ;
27287: GO 27272
27289: POP
27290: POP
// end ;
27291: PPOPN 2
27293: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27294: LD_EXP 51
27298: PUSH
27299: LD_EXP 57
27303: AND
27304: IFFALSE 27388
27306: GO 27308
27308: DISABLE
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
// begin enable ;
27313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: LD_INT 22
27321: PUSH
27322: LD_OWVAR 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 32
27333: PUSH
27334: LD_INT 3
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 69
27349: ST_TO_ADDR
// if not tmp then
27350: LD_VAR 0 2
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27388
// for i in tmp do
27359: LD_ADDR_VAR 0 1
27363: PUSH
27364: LD_VAR 0 2
27368: PUSH
27369: FOR_IN
27370: IFFALSE 27386
// begin SetLives ( i , 0 ) ;
27372: LD_VAR 0 1
27376: PPUSH
27377: LD_INT 0
27379: PPUSH
27380: CALL_OW 234
// end ;
27384: GO 27369
27386: POP
27387: POP
// end ;
27388: PPOPN 2
27390: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27391: LD_EXP 51
27395: PUSH
27396: LD_EXP 54
27400: AND
27401: IFFALSE 27494
27403: GO 27405
27405: DISABLE
27406: LD_INT 0
27408: PPUSH
// begin enable ;
27409: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27410: LD_ADDR_VAR 0 1
27414: PUSH
27415: LD_INT 22
27417: PUSH
27418: LD_OWVAR 2
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: LD_INT 25
27432: PUSH
27433: LD_INT 5
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 25
27442: PUSH
27443: LD_INT 9
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 25
27452: PUSH
27453: LD_INT 8
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PPUSH
27470: CALL_OW 69
27474: PUSH
27475: FOR_IN
27476: IFFALSE 27492
// begin SetClass ( i , 1 ) ;
27478: LD_VAR 0 1
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: CALL_OW 336
// end ;
27490: GO 27475
27492: POP
27493: POP
// end ;
27494: PPOPN 1
27496: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27497: LD_EXP 51
27501: PUSH
27502: LD_EXP 55
27506: AND
27507: PUSH
27508: LD_OWVAR 65
27512: PUSH
27513: LD_INT 7
27515: LESS
27516: AND
27517: IFFALSE 27531
27519: GO 27521
27521: DISABLE
// begin enable ;
27522: ENABLE
// game_speed := 7 ;
27523: LD_ADDR_OWVAR 65
27527: PUSH
27528: LD_INT 7
27530: ST_TO_ADDR
// end ;
27531: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27532: LD_EXP 51
27536: PUSH
27537: LD_EXP 58
27541: AND
27542: IFFALSE 27744
27544: GO 27546
27546: DISABLE
27547: LD_INT 0
27549: PPUSH
27550: PPUSH
27551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_INT 81
27559: PUSH
27560: LD_OWVAR 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 21
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// if not tmp then
27588: LD_VAR 0 3
27592: NOT
27593: IFFALSE 27597
// exit ;
27595: GO 27744
// if tmp > 5 then
27597: LD_VAR 0 3
27601: PUSH
27602: LD_INT 5
27604: GREATER
27605: IFFALSE 27617
// k := 5 else
27607: LD_ADDR_VAR 0 2
27611: PUSH
27612: LD_INT 5
27614: ST_TO_ADDR
27615: GO 27627
// k := tmp ;
27617: LD_ADDR_VAR 0 2
27621: PUSH
27622: LD_VAR 0 3
27626: ST_TO_ADDR
// for i := 1 to k do
27627: LD_ADDR_VAR 0 1
27631: PUSH
27632: DOUBLE
27633: LD_INT 1
27635: DEC
27636: ST_TO_ADDR
27637: LD_VAR 0 2
27641: PUSH
27642: FOR_TO
27643: IFFALSE 27742
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27645: LD_VAR 0 3
27649: PUSH
27650: LD_VAR 0 1
27654: ARRAY
27655: PPUSH
27656: LD_VAR 0 1
27660: PUSH
27661: LD_INT 4
27663: MOD
27664: PUSH
27665: LD_INT 1
27667: PLUS
27668: PPUSH
27669: CALL_OW 259
27673: PUSH
27674: LD_INT 10
27676: LESS
27677: IFFALSE 27740
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 1
27688: ARRAY
27689: PPUSH
27690: LD_VAR 0 1
27694: PUSH
27695: LD_INT 4
27697: MOD
27698: PUSH
27699: LD_INT 1
27701: PLUS
27702: PPUSH
27703: LD_VAR 0 3
27707: PUSH
27708: LD_VAR 0 1
27712: ARRAY
27713: PPUSH
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 4
27721: MOD
27722: PUSH
27723: LD_INT 1
27725: PLUS
27726: PPUSH
27727: CALL_OW 259
27731: PUSH
27732: LD_INT 1
27734: PLUS
27735: PPUSH
27736: CALL_OW 237
27740: GO 27642
27742: POP
27743: POP
// end ;
27744: PPOPN 3
27746: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27747: LD_EXP 51
27751: PUSH
27752: LD_EXP 59
27756: AND
27757: IFFALSE 27777
27759: GO 27761
27761: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27762: LD_INT 4
27764: PPUSH
27765: LD_OWVAR 2
27769: PPUSH
27770: LD_INT 0
27772: PPUSH
27773: CALL_OW 324
27777: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27778: LD_EXP 51
27782: PUSH
27783: LD_EXP 88
27787: AND
27788: IFFALSE 27808
27790: GO 27792
27792: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27793: LD_INT 19
27795: PPUSH
27796: LD_OWVAR 2
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 324
27808: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27809: LD_EXP 51
27813: PUSH
27814: LD_EXP 60
27818: AND
27819: IFFALSE 27921
27821: GO 27823
27823: DISABLE
27824: LD_INT 0
27826: PPUSH
27827: PPUSH
// begin enable ;
27828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27829: LD_ADDR_VAR 0 2
27833: PUSH
27834: LD_INT 22
27836: PUSH
27837: LD_OWVAR 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 34
27851: PUSH
27852: LD_INT 11
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 34
27861: PUSH
27862: LD_INT 30
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: CALL_OW 69
27882: ST_TO_ADDR
// if not tmp then
27883: LD_VAR 0 2
27887: NOT
27888: IFFALSE 27892
// exit ;
27890: GO 27921
// for i in tmp do
27892: LD_ADDR_VAR 0 1
27896: PUSH
27897: LD_VAR 0 2
27901: PUSH
27902: FOR_IN
27903: IFFALSE 27919
// begin SetLives ( i , 0 ) ;
27905: LD_VAR 0 1
27909: PPUSH
27910: LD_INT 0
27912: PPUSH
27913: CALL_OW 234
// end ;
27917: GO 27902
27919: POP
27920: POP
// end ;
27921: PPOPN 2
27923: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27924: LD_EXP 51
27928: PUSH
27929: LD_EXP 61
27933: AND
27934: IFFALSE 27954
27936: GO 27938
27938: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27939: LD_INT 32
27941: PPUSH
27942: LD_OWVAR 2
27946: PPUSH
27947: LD_INT 0
27949: PPUSH
27950: CALL_OW 324
27954: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27955: LD_EXP 51
27959: PUSH
27960: LD_EXP 62
27964: AND
27965: IFFALSE 28146
27967: GO 27969
27969: DISABLE
27970: LD_INT 0
27972: PPUSH
27973: PPUSH
27974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_INT 22
27982: PUSH
27983: LD_OWVAR 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 33
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PPUSH
28006: CALL_OW 69
28010: ST_TO_ADDR
// if not tmp then
28011: LD_VAR 0 2
28015: NOT
28016: IFFALSE 28020
// exit ;
28018: GO 28146
// side := 0 ;
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 0
28027: ST_TO_ADDR
// for i := 1 to 8 do
28028: LD_ADDR_VAR 0 1
28032: PUSH
28033: DOUBLE
28034: LD_INT 1
28036: DEC
28037: ST_TO_ADDR
28038: LD_INT 8
28040: PUSH
28041: FOR_TO
28042: IFFALSE 28090
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28044: LD_OWVAR 2
28048: PUSH
28049: LD_VAR 0 1
28053: NONEQUAL
28054: PUSH
28055: LD_OWVAR 2
28059: PPUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 81
28069: PUSH
28070: LD_INT 2
28072: EQUAL
28073: AND
28074: IFFALSE 28088
// begin side := i ;
28076: LD_ADDR_VAR 0 3
28080: PUSH
28081: LD_VAR 0 1
28085: ST_TO_ADDR
// break ;
28086: GO 28090
// end ;
28088: GO 28041
28090: POP
28091: POP
// if not side then
28092: LD_VAR 0 3
28096: NOT
28097: IFFALSE 28101
// exit ;
28099: GO 28146
// for i := 1 to tmp do
28101: LD_ADDR_VAR 0 1
28105: PUSH
28106: DOUBLE
28107: LD_INT 1
28109: DEC
28110: ST_TO_ADDR
28111: LD_VAR 0 2
28115: PUSH
28116: FOR_TO
28117: IFFALSE 28144
// if Prob ( 60 ) then
28119: LD_INT 60
28121: PPUSH
28122: CALL_OW 13
28126: IFFALSE 28142
// SetSide ( i , side ) ;
28128: LD_VAR 0 1
28132: PPUSH
28133: LD_VAR 0 3
28137: PPUSH
28138: CALL_OW 235
28142: GO 28116
28144: POP
28145: POP
// end ;
28146: PPOPN 3
28148: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28149: LD_EXP 51
28153: PUSH
28154: LD_EXP 64
28158: AND
28159: IFFALSE 28278
28161: GO 28163
28163: DISABLE
28164: LD_INT 0
28166: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28167: LD_ADDR_VAR 0 1
28171: PUSH
28172: LD_INT 22
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 21
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 23
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28276
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28224: LD_VAR 0 1
28228: PPUSH
28229: CALL_OW 257
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: LD_INT 4
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: IN
28252: IFFALSE 28274
// SetClass ( un , rand ( 1 , 4 ) ) ;
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: LD_INT 4
28264: PPUSH
28265: CALL_OW 12
28269: PPUSH
28270: CALL_OW 336
28274: GO 28221
28276: POP
28277: POP
// end ;
28278: PPOPN 1
28280: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28281: LD_EXP 51
28285: PUSH
28286: LD_EXP 63
28290: AND
28291: IFFALSE 28370
28293: GO 28295
28295: DISABLE
28296: LD_INT 0
28298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28299: LD_ADDR_VAR 0 1
28303: PUSH
28304: LD_INT 22
28306: PUSH
28307: LD_OWVAR 2
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 21
28318: PUSH
28319: LD_INT 3
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 69
28334: ST_TO_ADDR
// if not tmp then
28335: LD_VAR 0 1
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28344: LD_VAR 0 1
28348: PUSH
28349: LD_INT 1
28351: PPUSH
28352: LD_VAR 0 1
28356: PPUSH
28357: CALL_OW 12
28361: ARRAY
28362: PPUSH
28363: LD_INT 100
28365: PPUSH
28366: CALL_OW 234
// end ;
28370: PPOPN 1
28372: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28373: LD_EXP 51
28377: PUSH
28378: LD_EXP 65
28382: AND
28383: IFFALSE 28481
28385: GO 28387
28387: DISABLE
28388: LD_INT 0
28390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28391: LD_ADDR_VAR 0 1
28395: PUSH
28396: LD_INT 22
28398: PUSH
28399: LD_OWVAR 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 21
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PPUSH
28422: CALL_OW 69
28426: ST_TO_ADDR
// if not tmp then
28427: LD_VAR 0 1
28431: NOT
28432: IFFALSE 28436
// exit ;
28434: GO 28481
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28436: LD_VAR 0 1
28440: PUSH
28441: LD_INT 1
28443: PPUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 12
28453: ARRAY
28454: PPUSH
28455: LD_INT 1
28457: PPUSH
28458: LD_INT 4
28460: PPUSH
28461: CALL_OW 12
28465: PPUSH
28466: LD_INT 3000
28468: PPUSH
28469: LD_INT 9000
28471: PPUSH
28472: CALL_OW 12
28476: PPUSH
28477: CALL_OW 492
// end ;
28481: PPOPN 1
28483: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28484: LD_EXP 51
28488: PUSH
28489: LD_EXP 66
28493: AND
28494: IFFALSE 28514
28496: GO 28498
28498: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28499: LD_INT 1
28501: PPUSH
28502: LD_OWVAR 2
28506: PPUSH
28507: LD_INT 0
28509: PPUSH
28510: CALL_OW 324
28514: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28515: LD_EXP 51
28519: PUSH
28520: LD_EXP 67
28524: AND
28525: IFFALSE 28608
28527: GO 28529
28529: DISABLE
28530: LD_INT 0
28532: PPUSH
28533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28534: LD_ADDR_VAR 0 2
28538: PUSH
28539: LD_INT 22
28541: PUSH
28542: LD_OWVAR 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 21
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 69
28569: ST_TO_ADDR
// if not tmp then
28570: LD_VAR 0 2
28574: NOT
28575: IFFALSE 28579
// exit ;
28577: GO 28608
// for i in tmp do
28579: LD_ADDR_VAR 0 1
28583: PUSH
28584: LD_VAR 0 2
28588: PUSH
28589: FOR_IN
28590: IFFALSE 28606
// SetBLevel ( i , 10 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 10
28599: PPUSH
28600: CALL_OW 241
28604: GO 28589
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28611: LD_EXP 51
28615: PUSH
28616: LD_EXP 68
28620: AND
28621: IFFALSE 28732
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 22
28638: PUSH
28639: LD_OWVAR 2
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 25
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PPUSH
28662: CALL_OW 69
28666: ST_TO_ADDR
// if not tmp then
28667: LD_VAR 0 3
28671: NOT
28672: IFFALSE 28676
// exit ;
28674: GO 28732
// un := tmp [ rand ( 1 , tmp ) ] ;
28676: LD_ADDR_VAR 0 2
28680: PUSH
28681: LD_VAR 0 3
28685: PUSH
28686: LD_INT 1
28688: PPUSH
28689: LD_VAR 0 3
28693: PPUSH
28694: CALL_OW 12
28698: ARRAY
28699: ST_TO_ADDR
// if Crawls ( un ) then
28700: LD_VAR 0 2
28704: PPUSH
28705: CALL_OW 318
28709: IFFALSE 28720
// ComWalk ( un ) ;
28711: LD_VAR 0 2
28715: PPUSH
28716: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28720: LD_VAR 0 2
28724: PPUSH
28725: LD_INT 5
28727: PPUSH
28728: CALL_OW 336
// end ;
28732: PPOPN 3
28734: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28735: LD_EXP 51
28739: PUSH
28740: LD_EXP 69
28744: AND
28745: PUSH
28746: LD_OWVAR 67
28750: PUSH
28751: LD_INT 4
28753: LESS
28754: AND
28755: IFFALSE 28774
28757: GO 28759
28759: DISABLE
// begin Difficulty := Difficulty + 1 ;
28760: LD_ADDR_OWVAR 67
28764: PUSH
28765: LD_OWVAR 67
28769: PUSH
28770: LD_INT 1
28772: PLUS
28773: ST_TO_ADDR
// end ;
28774: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28775: LD_EXP 51
28779: PUSH
28780: LD_EXP 70
28784: AND
28785: IFFALSE 28888
28787: GO 28789
28789: DISABLE
28790: LD_INT 0
28792: PPUSH
// begin for i := 1 to 5 do
28793: LD_ADDR_VAR 0 1
28797: PUSH
28798: DOUBLE
28799: LD_INT 1
28801: DEC
28802: ST_TO_ADDR
28803: LD_INT 5
28805: PUSH
28806: FOR_TO
28807: IFFALSE 28886
// begin uc_nation := nation_nature ;
28809: LD_ADDR_OWVAR 21
28813: PUSH
28814: LD_INT 0
28816: ST_TO_ADDR
// uc_side := 0 ;
28817: LD_ADDR_OWVAR 20
28821: PUSH
28822: LD_INT 0
28824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28825: LD_ADDR_OWVAR 29
28829: PUSH
28830: LD_INT 12
28832: PUSH
28833: LD_INT 12
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// hc_agressivity := 20 ;
28840: LD_ADDR_OWVAR 35
28844: PUSH
28845: LD_INT 20
28847: ST_TO_ADDR
// hc_class := class_tiger ;
28848: LD_ADDR_OWVAR 28
28852: PUSH
28853: LD_INT 14
28855: ST_TO_ADDR
// hc_gallery :=  ;
28856: LD_ADDR_OWVAR 33
28860: PUSH
28861: LD_STRING 
28863: ST_TO_ADDR
// hc_name :=  ;
28864: LD_ADDR_OWVAR 26
28868: PUSH
28869: LD_STRING 
28871: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28872: CALL_OW 44
28876: PPUSH
28877: LD_INT 0
28879: PPUSH
28880: CALL_OW 51
// end ;
28884: GO 28806
28886: POP
28887: POP
// end ;
28888: PPOPN 1
28890: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28891: LD_EXP 51
28895: PUSH
28896: LD_EXP 71
28900: AND
28901: IFFALSE 28910
28903: GO 28905
28905: DISABLE
// StreamSibBomb ;
28906: CALL 28911 0 0
28910: END
// export function StreamSibBomb ; var i , x , y ; begin
28911: LD_INT 0
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
// result := false ;
28917: LD_ADDR_VAR 0 1
28921: PUSH
28922: LD_INT 0
28924: ST_TO_ADDR
// for i := 1 to 16 do
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: DOUBLE
28931: LD_INT 1
28933: DEC
28934: ST_TO_ADDR
28935: LD_INT 16
28937: PUSH
28938: FOR_TO
28939: IFFALSE 29138
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28941: LD_ADDR_VAR 0 3
28945: PUSH
28946: LD_INT 10
28948: PUSH
28949: LD_INT 20
28951: PUSH
28952: LD_INT 30
28954: PUSH
28955: LD_INT 40
28957: PUSH
28958: LD_INT 50
28960: PUSH
28961: LD_INT 60
28963: PUSH
28964: LD_INT 70
28966: PUSH
28967: LD_INT 80
28969: PUSH
28970: LD_INT 90
28972: PUSH
28973: LD_INT 100
28975: PUSH
28976: LD_INT 110
28978: PUSH
28979: LD_INT 120
28981: PUSH
28982: LD_INT 130
28984: PUSH
28985: LD_INT 140
28987: PUSH
28988: LD_INT 150
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PPUSH
29011: LD_INT 15
29013: PPUSH
29014: CALL_OW 12
29018: ARRAY
29019: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29020: LD_ADDR_VAR 0 4
29024: PUSH
29025: LD_INT 10
29027: PUSH
29028: LD_INT 20
29030: PUSH
29031: LD_INT 30
29033: PUSH
29034: LD_INT 40
29036: PUSH
29037: LD_INT 50
29039: PUSH
29040: LD_INT 60
29042: PUSH
29043: LD_INT 70
29045: PUSH
29046: LD_INT 80
29048: PUSH
29049: LD_INT 90
29051: PUSH
29052: LD_INT 100
29054: PUSH
29055: LD_INT 110
29057: PUSH
29058: LD_INT 120
29060: PUSH
29061: LD_INT 130
29063: PUSH
29064: LD_INT 140
29066: PUSH
29067: LD_INT 150
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PPUSH
29090: LD_INT 15
29092: PPUSH
29093: CALL_OW 12
29097: ARRAY
29098: ST_TO_ADDR
// if ValidHex ( x , y ) then
29099: LD_VAR 0 3
29103: PPUSH
29104: LD_VAR 0 4
29108: PPUSH
29109: CALL_OW 488
29113: IFFALSE 29136
// begin result := [ x , y ] ;
29115: LD_ADDR_VAR 0 1
29119: PUSH
29120: LD_VAR 0 3
29124: PUSH
29125: LD_VAR 0 4
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// break ;
29134: GO 29138
// end ; end ;
29136: GO 28938
29138: POP
29139: POP
// if result then
29140: LD_VAR 0 1
29144: IFFALSE 29204
// begin ToLua ( playSibBomb() ) ;
29146: LD_STRING playSibBomb()
29148: PPUSH
29149: CALL_OW 559
// wait ( 0 0$14 ) ;
29153: LD_INT 490
29155: PPUSH
29156: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29160: LD_VAR 0 1
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PPUSH
29169: LD_VAR 0 1
29173: PUSH
29174: LD_INT 2
29176: ARRAY
29177: PPUSH
29178: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29182: LD_VAR 0 1
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 2
29198: ARRAY
29199: PPUSH
29200: CALL_OW 429
// end ; end ;
29204: LD_VAR 0 1
29208: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29209: LD_EXP 51
29213: PUSH
29214: LD_EXP 73
29218: AND
29219: IFFALSE 29231
29221: GO 29223
29223: DISABLE
// YouLost (  ) ;
29224: LD_STRING 
29226: PPUSH
29227: CALL_OW 104
29231: END
// every 0 0$1 trigger StreamModeActive and sFog do
29232: LD_EXP 51
29236: PUSH
29237: LD_EXP 72
29241: AND
29242: IFFALSE 29256
29244: GO 29246
29246: DISABLE
// FogOff ( your_side ) ;
29247: LD_OWVAR 2
29251: PPUSH
29252: CALL_OW 344
29256: END
// every 0 0$1 trigger StreamModeActive and sSun do
29257: LD_EXP 51
29261: PUSH
29262: LD_EXP 74
29266: AND
29267: IFFALSE 29295
29269: GO 29271
29271: DISABLE
// begin solar_recharge_percent := 0 ;
29272: LD_ADDR_OWVAR 79
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29280: LD_INT 10500
29282: PPUSH
29283: CALL_OW 67
// solar_recharge_percent := 100 ;
29287: LD_ADDR_OWVAR 79
29291: PUSH
29292: LD_INT 100
29294: ST_TO_ADDR
// end ;
29295: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29296: LD_EXP 51
29300: PUSH
29301: LD_EXP 75
29305: AND
29306: IFFALSE 29545
29308: GO 29310
29310: DISABLE
29311: LD_INT 0
29313: PPUSH
29314: PPUSH
29315: PPUSH
// begin tmp := [ ] ;
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: EMPTY
29322: ST_TO_ADDR
// for i := 1 to 6 do
29323: LD_ADDR_VAR 0 1
29327: PUSH
29328: DOUBLE
29329: LD_INT 1
29331: DEC
29332: ST_TO_ADDR
29333: LD_INT 6
29335: PUSH
29336: FOR_TO
29337: IFFALSE 29442
// begin uc_nation := nation_nature ;
29339: LD_ADDR_OWVAR 21
29343: PUSH
29344: LD_INT 0
29346: ST_TO_ADDR
// uc_side := 0 ;
29347: LD_ADDR_OWVAR 20
29351: PUSH
29352: LD_INT 0
29354: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29355: LD_ADDR_OWVAR 29
29359: PUSH
29360: LD_INT 12
29362: PUSH
29363: LD_INT 12
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: ST_TO_ADDR
// hc_agressivity := 20 ;
29370: LD_ADDR_OWVAR 35
29374: PUSH
29375: LD_INT 20
29377: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29378: LD_ADDR_OWVAR 28
29382: PUSH
29383: LD_INT 17
29385: ST_TO_ADDR
// hc_gallery :=  ;
29386: LD_ADDR_OWVAR 33
29390: PUSH
29391: LD_STRING 
29393: ST_TO_ADDR
// hc_name :=  ;
29394: LD_ADDR_OWVAR 26
29398: PUSH
29399: LD_STRING 
29401: ST_TO_ADDR
// un := CreateHuman ;
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: CALL_OW 44
29411: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29412: LD_VAR 0 2
29416: PPUSH
29417: LD_INT 1
29419: PPUSH
29420: CALL_OW 51
// tmp := tmp ^ un ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_VAR 0 3
29433: PUSH
29434: LD_VAR 0 2
29438: ADD
29439: ST_TO_ADDR
// end ;
29440: GO 29336
29442: POP
29443: POP
// repeat wait ( 0 0$1 ) ;
29444: LD_INT 35
29446: PPUSH
29447: CALL_OW 67
// for un in tmp do
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_VAR 0 3
29460: PUSH
29461: FOR_IN
29462: IFFALSE 29536
// begin if IsDead ( un ) then
29464: LD_VAR 0 2
29468: PPUSH
29469: CALL_OW 301
29473: IFFALSE 29493
// begin tmp := tmp diff un ;
29475: LD_ADDR_VAR 0 3
29479: PUSH
29480: LD_VAR 0 3
29484: PUSH
29485: LD_VAR 0 2
29489: DIFF
29490: ST_TO_ADDR
// continue ;
29491: GO 29461
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_INT 3
29500: PUSH
29501: LD_INT 22
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PPUSH
29515: CALL_OW 69
29519: PPUSH
29520: LD_VAR 0 2
29524: PPUSH
29525: CALL_OW 74
29529: PPUSH
29530: CALL_OW 115
// end ;
29534: GO 29461
29536: POP
29537: POP
// until not tmp ;
29538: LD_VAR 0 3
29542: NOT
29543: IFFALSE 29444
// end ;
29545: PPOPN 3
29547: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29548: LD_EXP 51
29552: PUSH
29553: LD_EXP 76
29557: AND
29558: IFFALSE 29612
29560: GO 29562
29562: DISABLE
// begin ToLua ( displayTroll(); ) ;
29563: LD_STRING displayTroll();
29565: PPUSH
29566: CALL_OW 559
// wait ( 3 3$00 ) ;
29570: LD_INT 6300
29572: PPUSH
29573: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29577: LD_STRING hideTroll();
29579: PPUSH
29580: CALL_OW 559
// wait ( 1 1$00 ) ;
29584: LD_INT 2100
29586: PPUSH
29587: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29591: LD_STRING displayTroll();
29593: PPUSH
29594: CALL_OW 559
// wait ( 1 1$00 ) ;
29598: LD_INT 2100
29600: PPUSH
29601: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29605: LD_STRING hideTroll();
29607: PPUSH
29608: CALL_OW 559
// end ;
29612: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29613: LD_EXP 51
29617: PUSH
29618: LD_EXP 77
29622: AND
29623: IFFALSE 29686
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
// begin p := 0 ;
29631: LD_ADDR_VAR 0 1
29635: PUSH
29636: LD_INT 0
29638: ST_TO_ADDR
// repeat game_speed := 1 ;
29639: LD_ADDR_OWVAR 65
29643: PUSH
29644: LD_INT 1
29646: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29647: LD_INT 35
29649: PPUSH
29650: CALL_OW 67
// p := p + 1 ;
29654: LD_ADDR_VAR 0 1
29658: PUSH
29659: LD_VAR 0 1
29663: PUSH
29664: LD_INT 1
29666: PLUS
29667: ST_TO_ADDR
// until p >= 60 ;
29668: LD_VAR 0 1
29672: PUSH
29673: LD_INT 60
29675: GREATEREQUAL
29676: IFFALSE 29639
// game_speed := 4 ;
29678: LD_ADDR_OWVAR 65
29682: PUSH
29683: LD_INT 4
29685: ST_TO_ADDR
// end ;
29686: PPOPN 1
29688: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29689: LD_EXP 51
29693: PUSH
29694: LD_EXP 78
29698: AND
29699: IFFALSE 29845
29701: GO 29703
29703: DISABLE
29704: LD_INT 0
29706: PPUSH
29707: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29708: LD_ADDR_VAR 0 1
29712: PUSH
29713: LD_INT 22
29715: PUSH
29716: LD_OWVAR 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 30
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PPUSH
29757: CALL_OW 69
29761: ST_TO_ADDR
// if not depot then
29762: LD_VAR 0 1
29766: NOT
29767: IFFALSE 29771
// exit ;
29769: GO 29845
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29771: LD_ADDR_VAR 0 2
29775: PUSH
29776: LD_VAR 0 1
29780: PUSH
29781: LD_INT 1
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 12
29793: ARRAY
29794: PPUSH
29795: CALL_OW 274
29799: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29800: LD_VAR 0 2
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: LD_INT 0
29810: PPUSH
29811: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29815: LD_VAR 0 2
29819: PPUSH
29820: LD_INT 2
29822: PPUSH
29823: LD_INT 0
29825: PPUSH
29826: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29830: LD_VAR 0 2
29834: PPUSH
29835: LD_INT 3
29837: PPUSH
29838: LD_INT 0
29840: PPUSH
29841: CALL_OW 277
// end ;
29845: PPOPN 2
29847: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29848: LD_EXP 51
29852: PUSH
29853: LD_EXP 79
29857: AND
29858: IFFALSE 29955
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29866: LD_ADDR_VAR 0 1
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 21
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 23
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: PPUSH
29915: CALL_OW 69
29919: ST_TO_ADDR
// if not tmp then
29920: LD_VAR 0 1
29924: NOT
29925: IFFALSE 29929
// exit ;
29927: GO 29955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29929: LD_VAR 0 1
29933: PUSH
29934: LD_INT 1
29936: PPUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 12
29946: ARRAY
29947: PPUSH
29948: LD_INT 200
29950: PPUSH
29951: CALL_OW 234
// end ;
29955: PPOPN 1
29957: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29958: LD_EXP 51
29962: PUSH
29963: LD_EXP 80
29967: AND
29968: IFFALSE 30047
29970: GO 29972
29972: DISABLE
29973: LD_INT 0
29975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29976: LD_ADDR_VAR 0 1
29980: PUSH
29981: LD_INT 22
29983: PUSH
29984: LD_OWVAR 2
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 21
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PPUSH
30007: CALL_OW 69
30011: ST_TO_ADDR
// if not tmp then
30012: LD_VAR 0 1
30016: NOT
30017: IFFALSE 30021
// exit ;
30019: GO 30047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30021: LD_VAR 0 1
30025: PUSH
30026: LD_INT 1
30028: PPUSH
30029: LD_VAR 0 1
30033: PPUSH
30034: CALL_OW 12
30038: ARRAY
30039: PPUSH
30040: LD_INT 60
30042: PPUSH
30043: CALL_OW 234
// end ;
30047: PPOPN 1
30049: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30050: LD_EXP 51
30054: PUSH
30055: LD_EXP 81
30059: AND
30060: IFFALSE 30159
30062: GO 30064
30064: DISABLE
30065: LD_INT 0
30067: PPUSH
30068: PPUSH
// begin enable ;
30069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30070: LD_ADDR_VAR 0 1
30074: PUSH
30075: LD_INT 22
30077: PUSH
30078: LD_OWVAR 2
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 61
30089: PUSH
30090: EMPTY
30091: LIST
30092: PUSH
30093: LD_INT 33
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 69
30112: ST_TO_ADDR
// if not tmp then
30113: LD_VAR 0 1
30117: NOT
30118: IFFALSE 30122
// exit ;
30120: GO 30159
// for i in tmp do
30122: LD_ADDR_VAR 0 2
30126: PUSH
30127: LD_VAR 0 1
30131: PUSH
30132: FOR_IN
30133: IFFALSE 30157
// if IsControledBy ( i ) then
30135: LD_VAR 0 2
30139: PPUSH
30140: CALL_OW 312
30144: IFFALSE 30155
// ComUnlink ( i ) ;
30146: LD_VAR 0 2
30150: PPUSH
30151: CALL_OW 136
30155: GO 30132
30157: POP
30158: POP
// end ;
30159: PPOPN 2
30161: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30162: LD_EXP 51
30166: PUSH
30167: LD_EXP 82
30171: AND
30172: IFFALSE 30312
30174: GO 30176
30176: DISABLE
30177: LD_INT 0
30179: PPUSH
30180: PPUSH
// begin ToLua ( displayPowell(); ) ;
30181: LD_STRING displayPowell();
30183: PPUSH
30184: CALL_OW 559
// uc_side := 0 ;
30188: LD_ADDR_OWVAR 20
30192: PUSH
30193: LD_INT 0
30195: ST_TO_ADDR
// uc_nation := 2 ;
30196: LD_ADDR_OWVAR 21
30200: PUSH
30201: LD_INT 2
30203: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30204: LD_ADDR_OWVAR 37
30208: PUSH
30209: LD_INT 14
30211: ST_TO_ADDR
// vc_engine := engine_siberite ;
30212: LD_ADDR_OWVAR 39
30216: PUSH
30217: LD_INT 3
30219: ST_TO_ADDR
// vc_control := control_apeman ;
30220: LD_ADDR_OWVAR 38
30224: PUSH
30225: LD_INT 5
30227: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30228: LD_ADDR_OWVAR 40
30232: PUSH
30233: LD_INT 29
30235: ST_TO_ADDR
// un := CreateVehicle ;
30236: LD_ADDR_VAR 0 2
30240: PUSH
30241: CALL_OW 45
30245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_INT 1
30253: PPUSH
30254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30258: LD_INT 35
30260: PPUSH
30261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_INT 22
30272: PUSH
30273: LD_OWVAR 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 69
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: CALL_OW 74
30296: PPUSH
30297: CALL_OW 115
// until IsDead ( un ) ;
30301: LD_VAR 0 2
30305: PPUSH
30306: CALL_OW 301
30310: IFFALSE 30258
// end ;
30312: PPOPN 2
30314: END
// every 0 0$1 trigger StreamModeActive and sStu do
30315: LD_EXP 51
30319: PUSH
30320: LD_EXP 90
30324: AND
30325: IFFALSE 30341
30327: GO 30329
30329: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30330: LD_STRING displayStucuk();
30332: PPUSH
30333: CALL_OW 559
// ResetFog ;
30337: CALL_OW 335
// end ;
30341: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30342: LD_EXP 51
30346: PUSH
30347: LD_EXP 83
30351: AND
30352: IFFALSE 30493
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_INT 22
30368: PUSH
30369: LD_OWVAR 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 21
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30493
// un := tmp [ rand ( 1 , tmp ) ] ;
30406: LD_ADDR_VAR 0 1
30410: PUSH
30411: LD_VAR 0 2
30415: PUSH
30416: LD_INT 1
30418: PPUSH
30419: LD_VAR 0 2
30423: PPUSH
30424: CALL_OW 12
30428: ARRAY
30429: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30430: LD_VAR 0 1
30434: PPUSH
30435: LD_INT 0
30437: PPUSH
30438: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30442: LD_VAR 0 1
30446: PPUSH
30447: LD_OWVAR 3
30451: PUSH
30452: LD_VAR 0 1
30456: DIFF
30457: PPUSH
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL_OW 74
30467: PPUSH
30468: CALL_OW 115
// wait ( 0 0$20 ) ;
30472: LD_INT 700
30474: PPUSH
30475: CALL_OW 67
// SetSide ( un , your_side ) ;
30479: LD_VAR 0 1
30483: PPUSH
30484: LD_OWVAR 2
30488: PPUSH
30489: CALL_OW 235
// end ;
30493: PPOPN 2
30495: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30496: LD_EXP 51
30500: PUSH
30501: LD_EXP 84
30505: AND
30506: IFFALSE 30612
30508: GO 30510
30510: DISABLE
30511: LD_INT 0
30513: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30514: LD_ADDR_VAR 0 1
30518: PUSH
30519: LD_INT 22
30521: PUSH
30522: LD_OWVAR 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 30
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 69
30567: ST_TO_ADDR
// if not depot then
30568: LD_VAR 0 1
30572: NOT
30573: IFFALSE 30577
// exit ;
30575: GO 30612
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30577: LD_VAR 0 1
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 250
30590: PPUSH
30591: LD_VAR 0 1
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: CALL_OW 251
30604: PPUSH
30605: LD_INT 70
30607: PPUSH
30608: CALL_OW 495
// end ;
30612: PPOPN 1
30614: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30615: LD_EXP 51
30619: PUSH
30620: LD_EXP 85
30624: AND
30625: IFFALSE 30836
30627: GO 30629
30629: DISABLE
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30637: LD_ADDR_VAR 0 5
30641: PUSH
30642: LD_INT 22
30644: PUSH
30645: LD_OWVAR 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 21
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PPUSH
30668: CALL_OW 69
30672: ST_TO_ADDR
// if not tmp then
30673: LD_VAR 0 5
30677: NOT
30678: IFFALSE 30682
// exit ;
30680: GO 30836
// for i in tmp do
30682: LD_ADDR_VAR 0 1
30686: PUSH
30687: LD_VAR 0 5
30691: PUSH
30692: FOR_IN
30693: IFFALSE 30834
// begin d := rand ( 0 , 5 ) ;
30695: LD_ADDR_VAR 0 4
30699: PUSH
30700: LD_INT 0
30702: PPUSH
30703: LD_INT 5
30705: PPUSH
30706: CALL_OW 12
30710: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30711: LD_ADDR_VAR 0 2
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 250
30725: PPUSH
30726: LD_VAR 0 4
30730: PPUSH
30731: LD_INT 3
30733: PPUSH
30734: LD_INT 12
30736: PPUSH
30737: CALL_OW 12
30741: PPUSH
30742: CALL_OW 272
30746: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: CALL_OW 251
30761: PPUSH
30762: LD_VAR 0 4
30766: PPUSH
30767: LD_INT 3
30769: PPUSH
30770: LD_INT 12
30772: PPUSH
30773: CALL_OW 12
30777: PPUSH
30778: CALL_OW 273
30782: ST_TO_ADDR
// if ValidHex ( x , y ) then
30783: LD_VAR 0 2
30787: PPUSH
30788: LD_VAR 0 3
30792: PPUSH
30793: CALL_OW 488
30797: IFFALSE 30832
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30799: LD_VAR 0 1
30803: PPUSH
30804: LD_VAR 0 2
30808: PPUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: LD_INT 3
30816: PPUSH
30817: LD_INT 6
30819: PPUSH
30820: CALL_OW 12
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: CALL_OW 483
// end ;
30832: GO 30692
30834: POP
30835: POP
// end ;
30836: PPOPN 5
30838: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30839: LD_EXP 51
30843: PUSH
30844: LD_EXP 86
30848: AND
30849: IFFALSE 30943
30851: GO 30853
30853: DISABLE
30854: LD_INT 0
30856: PPUSH
30857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30858: LD_ADDR_VAR 0 2
30862: PUSH
30863: LD_INT 22
30865: PUSH
30866: LD_OWVAR 2
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 32
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 21
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: PPUSH
30900: CALL_OW 69
30904: ST_TO_ADDR
// if not tmp then
30905: LD_VAR 0 2
30909: NOT
30910: IFFALSE 30914
// exit ;
30912: GO 30943
// for i in tmp do
30914: LD_ADDR_VAR 0 1
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: FOR_IN
30925: IFFALSE 30941
// SetFuel ( i , 0 ) ;
30927: LD_VAR 0 1
30931: PPUSH
30932: LD_INT 0
30934: PPUSH
30935: CALL_OW 240
30939: GO 30924
30941: POP
30942: POP
// end ;
30943: PPOPN 2
30945: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30946: LD_EXP 51
30950: PUSH
30951: LD_EXP 87
30955: AND
30956: IFFALSE 31022
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30964: LD_ADDR_VAR 0 1
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_OWVAR 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 30
30983: PUSH
30984: LD_INT 29
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PPUSH
30995: CALL_OW 69
30999: ST_TO_ADDR
// if not tmp then
31000: LD_VAR 0 1
31004: NOT
31005: IFFALSE 31009
// exit ;
31007: GO 31022
// DestroyUnit ( tmp [ 1 ] ) ;
31009: LD_VAR 0 1
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: PPUSH
31018: CALL_OW 65
// end ;
31022: PPOPN 1
31024: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31025: LD_EXP 51
31029: PUSH
31030: LD_EXP 89
31034: AND
31035: IFFALSE 31164
31037: GO 31039
31039: DISABLE
31040: LD_INT 0
31042: PPUSH
// begin uc_side := 0 ;
31043: LD_ADDR_OWVAR 20
31047: PUSH
31048: LD_INT 0
31050: ST_TO_ADDR
// uc_nation := nation_arabian ;
31051: LD_ADDR_OWVAR 21
31055: PUSH
31056: LD_INT 2
31058: ST_TO_ADDR
// hc_gallery :=  ;
31059: LD_ADDR_OWVAR 33
31063: PUSH
31064: LD_STRING 
31066: ST_TO_ADDR
// hc_name :=  ;
31067: LD_ADDR_OWVAR 26
31071: PUSH
31072: LD_STRING 
31074: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31075: LD_INT 1
31077: PPUSH
31078: LD_INT 11
31080: PPUSH
31081: LD_INT 10
31083: PPUSH
31084: CALL_OW 380
// un := CreateHuman ;
31088: LD_ADDR_VAR 0 1
31092: PUSH
31093: CALL_OW 44
31097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31098: LD_VAR 0 1
31102: PPUSH
31103: LD_INT 1
31105: PPUSH
31106: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31110: LD_INT 35
31112: PPUSH
31113: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31117: LD_VAR 0 1
31121: PPUSH
31122: LD_INT 22
31124: PUSH
31125: LD_OWVAR 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PPUSH
31134: CALL_OW 69
31138: PPUSH
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 74
31148: PPUSH
31149: CALL_OW 115
// until IsDead ( un ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 301
31162: IFFALSE 31110
// end ;
31164: PPOPN 1
31166: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31167: LD_EXP 51
31171: PUSH
31172: LD_EXP 91
31176: AND
31177: IFFALSE 31189
31179: GO 31181
31181: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31182: LD_STRING earthquake(getX(game), 0, 32)
31184: PPUSH
31185: CALL_OW 559
31189: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31190: LD_EXP 51
31194: PUSH
31195: LD_EXP 92
31199: AND
31200: IFFALSE 31291
31202: GO 31204
31204: DISABLE
31205: LD_INT 0
31207: PPUSH
// begin enable ;
31208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31209: LD_ADDR_VAR 0 1
31213: PUSH
31214: LD_INT 22
31216: PUSH
31217: LD_OWVAR 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 21
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 33
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: PPUSH
31251: CALL_OW 69
31255: ST_TO_ADDR
// if not tmp then
31256: LD_VAR 0 1
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 31291
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31265: LD_VAR 0 1
31269: PUSH
31270: LD_INT 1
31272: PPUSH
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 12
31282: ARRAY
31283: PPUSH
31284: LD_INT 1
31286: PPUSH
31287: CALL_OW 234
// end ;
31291: PPOPN 1
31293: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31294: LD_EXP 51
31298: PUSH
31299: LD_EXP 93
31303: AND
31304: IFFALSE 31445
31306: GO 31308
31308: DISABLE
31309: LD_INT 0
31311: PPUSH
31312: PPUSH
31313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_OWVAR 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 25
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PPUSH
31345: CALL_OW 69
31349: ST_TO_ADDR
// if not tmp then
31350: LD_VAR 0 3
31354: NOT
31355: IFFALSE 31359
// exit ;
31357: GO 31445
// un := tmp [ rand ( 1 , tmp ) ] ;
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: LD_VAR 0 3
31368: PUSH
31369: LD_INT 1
31371: PPUSH
31372: LD_VAR 0 3
31376: PPUSH
31377: CALL_OW 12
31381: ARRAY
31382: ST_TO_ADDR
// if Crawls ( un ) then
31383: LD_VAR 0 2
31387: PPUSH
31388: CALL_OW 318
31392: IFFALSE 31403
// ComWalk ( un ) ;
31394: LD_VAR 0 2
31398: PPUSH
31399: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31403: LD_VAR 0 2
31407: PPUSH
31408: LD_INT 9
31410: PPUSH
31411: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31415: LD_INT 28
31417: PPUSH
31418: LD_OWVAR 2
31422: PPUSH
31423: LD_INT 2
31425: PPUSH
31426: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31430: LD_INT 29
31432: PPUSH
31433: LD_OWVAR 2
31437: PPUSH
31438: LD_INT 2
31440: PPUSH
31441: CALL_OW 322
// end ;
31445: PPOPN 3
31447: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31448: LD_EXP 51
31452: PUSH
31453: LD_EXP 94
31457: AND
31458: IFFALSE 31569
31460: GO 31462
31462: DISABLE
31463: LD_INT 0
31465: PPUSH
31466: PPUSH
31467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31468: LD_ADDR_VAR 0 3
31472: PUSH
31473: LD_INT 22
31475: PUSH
31476: LD_OWVAR 2
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 25
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PPUSH
31499: CALL_OW 69
31503: ST_TO_ADDR
// if not tmp then
31504: LD_VAR 0 3
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31569
// un := tmp [ rand ( 1 , tmp ) ] ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_VAR 0 3
31522: PUSH
31523: LD_INT 1
31525: PPUSH
31526: LD_VAR 0 3
31530: PPUSH
31531: CALL_OW 12
31535: ARRAY
31536: ST_TO_ADDR
// if Crawls ( un ) then
31537: LD_VAR 0 2
31541: PPUSH
31542: CALL_OW 318
31546: IFFALSE 31557
// ComWalk ( un ) ;
31548: LD_VAR 0 2
31552: PPUSH
31553: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31557: LD_VAR 0 2
31561: PPUSH
31562: LD_INT 8
31564: PPUSH
31565: CALL_OW 336
// end ;
31569: PPOPN 3
31571: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31572: LD_EXP 51
31576: PUSH
31577: LD_EXP 95
31581: AND
31582: IFFALSE 31726
31584: GO 31586
31586: DISABLE
31587: LD_INT 0
31589: PPUSH
31590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_INT 22
31598: PUSH
31599: LD_OWVAR 2
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 21
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 34
31623: PUSH
31624: LD_INT 12
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 34
31633: PUSH
31634: LD_INT 51
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 34
31643: PUSH
31644: LD_INT 32
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PPUSH
31662: CALL_OW 69
31666: ST_TO_ADDR
// if not tmp then
31667: LD_VAR 0 2
31671: NOT
31672: IFFALSE 31676
// exit ;
31674: GO 31726
// for i in tmp do
31676: LD_ADDR_VAR 0 1
31680: PUSH
31681: LD_VAR 0 2
31685: PUSH
31686: FOR_IN
31687: IFFALSE 31724
// if GetCargo ( i , mat_artifact ) = 0 then
31689: LD_VAR 0 1
31693: PPUSH
31694: LD_INT 4
31696: PPUSH
31697: CALL_OW 289
31701: PUSH
31702: LD_INT 0
31704: EQUAL
31705: IFFALSE 31722
// SetCargo ( i , mat_siberit , 100 ) ;
31707: LD_VAR 0 1
31711: PPUSH
31712: LD_INT 3
31714: PPUSH
31715: LD_INT 100
31717: PPUSH
31718: CALL_OW 290
31722: GO 31686
31724: POP
31725: POP
// end ;
31726: PPOPN 2
31728: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31729: LD_EXP 51
31733: PUSH
31734: LD_EXP 96
31738: AND
31739: IFFALSE 31922
31741: GO 31743
31743: DISABLE
31744: LD_INT 0
31746: PPUSH
31747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31748: LD_ADDR_VAR 0 2
31752: PUSH
31753: LD_INT 22
31755: PUSH
31756: LD_OWVAR 2
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PPUSH
31765: CALL_OW 69
31769: ST_TO_ADDR
// if not tmp then
31770: LD_VAR 0 2
31774: NOT
31775: IFFALSE 31779
// exit ;
31777: GO 31922
// for i := 1 to 2 do
31779: LD_ADDR_VAR 0 1
31783: PUSH
31784: DOUBLE
31785: LD_INT 1
31787: DEC
31788: ST_TO_ADDR
31789: LD_INT 2
31791: PUSH
31792: FOR_TO
31793: IFFALSE 31920
// begin uc_side := your_side ;
31795: LD_ADDR_OWVAR 20
31799: PUSH
31800: LD_OWVAR 2
31804: ST_TO_ADDR
// uc_nation := nation_american ;
31805: LD_ADDR_OWVAR 21
31809: PUSH
31810: LD_INT 1
31812: ST_TO_ADDR
// vc_chassis := us_morphling ;
31813: LD_ADDR_OWVAR 37
31817: PUSH
31818: LD_INT 5
31820: ST_TO_ADDR
// vc_engine := engine_siberite ;
31821: LD_ADDR_OWVAR 39
31825: PUSH
31826: LD_INT 3
31828: ST_TO_ADDR
// vc_control := control_computer ;
31829: LD_ADDR_OWVAR 38
31833: PUSH
31834: LD_INT 3
31836: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31837: LD_ADDR_OWVAR 40
31841: PUSH
31842: LD_INT 10
31844: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31845: LD_VAR 0 2
31849: PUSH
31850: LD_INT 1
31852: ARRAY
31853: PPUSH
31854: CALL_OW 310
31858: NOT
31859: IFFALSE 31906
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31861: CALL_OW 45
31865: PPUSH
31866: LD_VAR 0 2
31870: PUSH
31871: LD_INT 1
31873: ARRAY
31874: PPUSH
31875: CALL_OW 250
31879: PPUSH
31880: LD_VAR 0 2
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: PPUSH
31889: CALL_OW 251
31893: PPUSH
31894: LD_INT 12
31896: PPUSH
31897: LD_INT 1
31899: PPUSH
31900: CALL_OW 50
31904: GO 31918
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31906: CALL_OW 45
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: CALL_OW 51
// end ;
31918: GO 31792
31920: POP
31921: POP
// end ;
31922: PPOPN 2
31924: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31925: LD_EXP 51
31929: PUSH
31930: LD_EXP 97
31934: AND
31935: IFFALSE 32157
31937: GO 31939
31939: DISABLE
31940: LD_INT 0
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31948: LD_ADDR_VAR 0 6
31952: PUSH
31953: LD_INT 22
31955: PUSH
31956: LD_OWVAR 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 21
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 23
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: PPUSH
31997: CALL_OW 69
32001: ST_TO_ADDR
// if not tmp then
32002: LD_VAR 0 6
32006: NOT
32007: IFFALSE 32011
// exit ;
32009: GO 32157
// s1 := rand ( 1 , 4 ) ;
32011: LD_ADDR_VAR 0 2
32015: PUSH
32016: LD_INT 1
32018: PPUSH
32019: LD_INT 4
32021: PPUSH
32022: CALL_OW 12
32026: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32027: LD_ADDR_VAR 0 4
32031: PUSH
32032: LD_VAR 0 6
32036: PUSH
32037: LD_INT 1
32039: ARRAY
32040: PPUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: CALL_OW 259
32050: ST_TO_ADDR
// if s1 = 1 then
32051: LD_VAR 0 2
32055: PUSH
32056: LD_INT 1
32058: EQUAL
32059: IFFALSE 32079
// s2 := rand ( 2 , 4 ) else
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: LD_INT 2
32068: PPUSH
32069: LD_INT 4
32071: PPUSH
32072: CALL_OW 12
32076: ST_TO_ADDR
32077: GO 32087
// s2 := 1 ;
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 1
32086: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32087: LD_ADDR_VAR 0 5
32091: PUSH
32092: LD_VAR 0 6
32096: PUSH
32097: LD_INT 1
32099: ARRAY
32100: PPUSH
32101: LD_VAR 0 3
32105: PPUSH
32106: CALL_OW 259
32110: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32111: LD_VAR 0 6
32115: PUSH
32116: LD_INT 1
32118: ARRAY
32119: PPUSH
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_VAR 0 5
32129: PPUSH
32130: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32134: LD_VAR 0 6
32138: PUSH
32139: LD_INT 1
32141: ARRAY
32142: PPUSH
32143: LD_VAR 0 3
32147: PPUSH
32148: LD_VAR 0 4
32152: PPUSH
32153: CALL_OW 237
// end ;
32157: PPOPN 6
32159: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32160: LD_EXP 51
32164: PUSH
32165: LD_EXP 98
32169: AND
32170: IFFALSE 32249
32172: GO 32174
32174: DISABLE
32175: LD_INT 0
32177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32178: LD_ADDR_VAR 0 1
32182: PUSH
32183: LD_INT 22
32185: PUSH
32186: LD_OWVAR 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 30
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PPUSH
32209: CALL_OW 69
32213: ST_TO_ADDR
// if not tmp then
32214: LD_VAR 0 1
32218: NOT
32219: IFFALSE 32223
// exit ;
32221: GO 32249
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32223: LD_VAR 0 1
32227: PUSH
32228: LD_INT 1
32230: PPUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: CALL_OW 12
32240: ARRAY
32241: PPUSH
32242: LD_INT 1
32244: PPUSH
32245: CALL_OW 234
// end ;
32249: PPOPN 1
32251: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32252: LD_EXP 51
32256: PUSH
32257: LD_EXP 99
32261: AND
32262: IFFALSE 32374
32264: GO 32266
32266: DISABLE
32267: LD_INT 0
32269: PPUSH
32270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32271: LD_ADDR_VAR 0 2
32275: PUSH
32276: LD_INT 22
32278: PUSH
32279: LD_OWVAR 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 30
32293: PUSH
32294: LD_INT 27
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 30
32303: PUSH
32304: LD_INT 26
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 30
32313: PUSH
32314: LD_INT 28
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PPUSH
32331: CALL_OW 69
32335: ST_TO_ADDR
// if not tmp then
32336: LD_VAR 0 2
32340: NOT
32341: IFFALSE 32345
// exit ;
32343: GO 32374
// for i in tmp do
32345: LD_ADDR_VAR 0 1
32349: PUSH
32350: LD_VAR 0 2
32354: PUSH
32355: FOR_IN
32356: IFFALSE 32372
// SetLives ( i , 1 ) ;
32358: LD_VAR 0 1
32362: PPUSH
32363: LD_INT 1
32365: PPUSH
32366: CALL_OW 234
32370: GO 32355
32372: POP
32373: POP
// end ;
32374: PPOPN 2
32376: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32377: LD_EXP 51
32381: PUSH
32382: LD_EXP 100
32386: AND
32387: IFFALSE 32674
32389: GO 32391
32391: DISABLE
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
32396: PPUSH
// begin i := rand ( 1 , 7 ) ;
32397: LD_ADDR_VAR 0 1
32401: PUSH
32402: LD_INT 1
32404: PPUSH
32405: LD_INT 7
32407: PPUSH
32408: CALL_OW 12
32412: ST_TO_ADDR
// case i of 1 :
32413: LD_VAR 0 1
32417: PUSH
32418: LD_INT 1
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32436
32426: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32427: LD_STRING earthquake(getX(game), 0, 32)
32429: PPUSH
32430: CALL_OW 559
32434: GO 32674
32436: LD_INT 2
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32458
32444: POP
// begin ToLua ( displayStucuk(); ) ;
32445: LD_STRING displayStucuk();
32447: PPUSH
32448: CALL_OW 559
// ResetFog ;
32452: CALL_OW 335
// end ; 3 :
32456: GO 32674
32458: LD_INT 3
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32570
32466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_INT 22
32474: PUSH
32475: LD_OWVAR 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 25
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PPUSH
32498: CALL_OW 69
32502: ST_TO_ADDR
// if not tmp then
32503: LD_VAR 0 2
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32674
// un := tmp [ rand ( 1 , tmp ) ] ;
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_VAR 0 2
32521: PUSH
32522: LD_INT 1
32524: PPUSH
32525: LD_VAR 0 2
32529: PPUSH
32530: CALL_OW 12
32534: ARRAY
32535: ST_TO_ADDR
// if Crawls ( un ) then
32536: LD_VAR 0 3
32540: PPUSH
32541: CALL_OW 318
32545: IFFALSE 32556
// ComWalk ( un ) ;
32547: LD_VAR 0 3
32551: PPUSH
32552: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32556: LD_VAR 0 3
32560: PPUSH
32561: LD_INT 8
32563: PPUSH
32564: CALL_OW 336
// end ; 4 :
32568: GO 32674
32570: LD_INT 4
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32652
32578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32579: LD_ADDR_VAR 0 2
32583: PUSH
32584: LD_INT 22
32586: PUSH
32587: LD_OWVAR 2
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 30
32598: PUSH
32599: LD_INT 29
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PPUSH
32610: CALL_OW 69
32614: ST_TO_ADDR
// if not tmp then
32615: LD_VAR 0 2
32619: NOT
32620: IFFALSE 32624
// exit ;
32622: GO 32674
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32624: LD_VAR 0 2
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: PPUSH
32633: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32637: LD_VAR 0 2
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: PPUSH
32646: CALL_OW 65
// end ; 5 .. 7 :
32650: GO 32674
32652: LD_INT 5
32654: DOUBLE
32655: GREATEREQUAL
32656: IFFALSE 32664
32658: LD_INT 7
32660: DOUBLE
32661: LESSEQUAL
32662: IFTRUE 32666
32664: GO 32673
32666: POP
// StreamSibBomb ; end ;
32667: CALL 28911 0 0
32671: GO 32674
32673: POP
// end ;
32674: PPOPN 3
32676: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32677: LD_EXP 51
32681: PUSH
32682: LD_EXP 101
32686: AND
32687: IFFALSE 32843
32689: GO 32691
32691: DISABLE
32692: LD_INT 0
32694: PPUSH
32695: PPUSH
32696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32697: LD_ADDR_VAR 0 2
32701: PUSH
32702: LD_INT 81
32704: PUSH
32705: LD_OWVAR 2
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 21
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 21
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PPUSH
32746: CALL_OW 69
32750: ST_TO_ADDR
// if not tmp then
32751: LD_VAR 0 2
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 32843
// p := 0 ;
32760: LD_ADDR_VAR 0 3
32764: PUSH
32765: LD_INT 0
32767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32768: LD_INT 35
32770: PPUSH
32771: CALL_OW 67
// p := p + 1 ;
32775: LD_ADDR_VAR 0 3
32779: PUSH
32780: LD_VAR 0 3
32784: PUSH
32785: LD_INT 1
32787: PLUS
32788: ST_TO_ADDR
// for i in tmp do
32789: LD_ADDR_VAR 0 1
32793: PUSH
32794: LD_VAR 0 2
32798: PUSH
32799: FOR_IN
32800: IFFALSE 32831
// if GetLives ( i ) < 1000 then
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 256
32811: PUSH
32812: LD_INT 1000
32814: LESS
32815: IFFALSE 32829
// SetLives ( i , 1000 ) ;
32817: LD_VAR 0 1
32821: PPUSH
32822: LD_INT 1000
32824: PPUSH
32825: CALL_OW 234
32829: GO 32799
32831: POP
32832: POP
// until p > 20 ;
32833: LD_VAR 0 3
32837: PUSH
32838: LD_INT 20
32840: GREATER
32841: IFFALSE 32768
// end ;
32843: PPOPN 3
32845: END
// every 0 0$1 trigger StreamModeActive and sTime do
32846: LD_EXP 51
32850: PUSH
32851: LD_EXP 102
32855: AND
32856: IFFALSE 32891
32858: GO 32860
32860: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32861: LD_INT 28
32863: PPUSH
32864: LD_OWVAR 2
32868: PPUSH
32869: LD_INT 2
32871: PPUSH
32872: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32876: LD_INT 30
32878: PPUSH
32879: LD_OWVAR 2
32883: PPUSH
32884: LD_INT 2
32886: PPUSH
32887: CALL_OW 322
// end ;
32891: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32892: LD_EXP 51
32896: PUSH
32897: LD_EXP 103
32901: AND
32902: IFFALSE 33023
32904: GO 32906
32906: DISABLE
32907: LD_INT 0
32909: PPUSH
32910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32911: LD_ADDR_VAR 0 2
32915: PUSH
32916: LD_INT 22
32918: PUSH
32919: LD_OWVAR 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 21
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 23
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: PPUSH
32960: CALL_OW 69
32964: ST_TO_ADDR
// if not tmp then
32965: LD_VAR 0 2
32969: NOT
32970: IFFALSE 32974
// exit ;
32972: GO 33023
// for i in tmp do
32974: LD_ADDR_VAR 0 1
32978: PUSH
32979: LD_VAR 0 2
32983: PUSH
32984: FOR_IN
32985: IFFALSE 33021
// begin if Crawls ( i ) then
32987: LD_VAR 0 1
32991: PPUSH
32992: CALL_OW 318
32996: IFFALSE 33007
// ComWalk ( i ) ;
32998: LD_VAR 0 1
33002: PPUSH
33003: CALL_OW 138
// SetClass ( i , 2 ) ;
33007: LD_VAR 0 1
33011: PPUSH
33012: LD_INT 2
33014: PPUSH
33015: CALL_OW 336
// end ;
33019: GO 32984
33021: POP
33022: POP
// end ;
33023: PPOPN 2
33025: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33026: LD_EXP 51
33030: PUSH
33031: LD_EXP 104
33035: AND
33036: IFFALSE 33324
33038: GO 33040
33040: DISABLE
33041: LD_INT 0
33043: PPUSH
33044: PPUSH
33045: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33046: LD_OWVAR 2
33050: PPUSH
33051: LD_INT 9
33053: PPUSH
33054: LD_INT 1
33056: PPUSH
33057: LD_INT 1
33059: PPUSH
33060: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33064: LD_INT 9
33066: PPUSH
33067: LD_OWVAR 2
33071: PPUSH
33072: CALL_OW 343
// uc_side := 9 ;
33076: LD_ADDR_OWVAR 20
33080: PUSH
33081: LD_INT 9
33083: ST_TO_ADDR
// uc_nation := 2 ;
33084: LD_ADDR_OWVAR 21
33088: PUSH
33089: LD_INT 2
33091: ST_TO_ADDR
// hc_name := Dark Warrior ;
33092: LD_ADDR_OWVAR 26
33096: PUSH
33097: LD_STRING Dark Warrior
33099: ST_TO_ADDR
// hc_gallery :=  ;
33100: LD_ADDR_OWVAR 33
33104: PUSH
33105: LD_STRING 
33107: ST_TO_ADDR
// hc_noskilllimit := true ;
33108: LD_ADDR_OWVAR 76
33112: PUSH
33113: LD_INT 1
33115: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33116: LD_ADDR_OWVAR 31
33120: PUSH
33121: LD_INT 30
33123: PUSH
33124: LD_INT 30
33126: PUSH
33127: LD_INT 30
33129: PUSH
33130: LD_INT 30
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: ST_TO_ADDR
// un := CreateHuman ;
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: CALL_OW 44
33148: ST_TO_ADDR
// hc_noskilllimit := false ;
33149: LD_ADDR_OWVAR 76
33153: PUSH
33154: LD_INT 0
33156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33157: LD_VAR 0 3
33161: PPUSH
33162: LD_INT 1
33164: PPUSH
33165: CALL_OW 51
// ToLua ( playRanger() ) ;
33169: LD_STRING playRanger()
33171: PPUSH
33172: CALL_OW 559
// p := 0 ;
33176: LD_ADDR_VAR 0 2
33180: PUSH
33181: LD_INT 0
33183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33184: LD_INT 35
33186: PPUSH
33187: CALL_OW 67
// p := p + 1 ;
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: LD_VAR 0 2
33200: PUSH
33201: LD_INT 1
33203: PLUS
33204: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33205: LD_VAR 0 3
33209: PPUSH
33210: CALL_OW 256
33214: PUSH
33215: LD_INT 1000
33217: LESS
33218: IFFALSE 33232
// SetLives ( un , 1000 ) ;
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_INT 1000
33227: PPUSH
33228: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33232: LD_VAR 0 3
33236: PPUSH
33237: LD_INT 81
33239: PUSH
33240: LD_OWVAR 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 91
33251: PUSH
33252: LD_VAR 0 3
33256: PUSH
33257: LD_INT 30
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PPUSH
33269: CALL_OW 69
33273: PPUSH
33274: LD_VAR 0 3
33278: PPUSH
33279: CALL_OW 74
33283: PPUSH
33284: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33288: LD_VAR 0 2
33292: PUSH
33293: LD_INT 80
33295: GREATER
33296: PUSH
33297: LD_VAR 0 3
33301: PPUSH
33302: CALL_OW 301
33306: OR
33307: IFFALSE 33184
// if un then
33309: LD_VAR 0 3
33313: IFFALSE 33324
// RemoveUnit ( un ) ;
33315: LD_VAR 0 3
33319: PPUSH
33320: CALL_OW 64
// end ;
33324: PPOPN 3
33326: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33327: LD_EXP 105
33331: IFFALSE 33447
33333: GO 33335
33335: DISABLE
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
33340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33341: LD_ADDR_VAR 0 2
33345: PUSH
33346: LD_INT 81
33348: PUSH
33349: LD_OWVAR 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 21
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33377: LD_STRING playComputer()
33379: PPUSH
33380: CALL_OW 559
// if not tmp then
33384: LD_VAR 0 2
33388: NOT
33389: IFFALSE 33393
// exit ;
33391: GO 33447
// for i in tmp do
33393: LD_ADDR_VAR 0 1
33397: PUSH
33398: LD_VAR 0 2
33402: PUSH
33403: FOR_IN
33404: IFFALSE 33445
// for j := 1 to 4 do
33406: LD_ADDR_VAR 0 3
33410: PUSH
33411: DOUBLE
33412: LD_INT 1
33414: DEC
33415: ST_TO_ADDR
33416: LD_INT 4
33418: PUSH
33419: FOR_TO
33420: IFFALSE 33441
// SetSkill ( i , j , 10 ) ;
33422: LD_VAR 0 1
33426: PPUSH
33427: LD_VAR 0 3
33431: PPUSH
33432: LD_INT 10
33434: PPUSH
33435: CALL_OW 237
33439: GO 33419
33441: POP
33442: POP
33443: GO 33403
33445: POP
33446: POP
// end ;
33447: PPOPN 3
33449: END
// every 0 0$1 trigger s30 do var i , tmp ;
33450: LD_EXP 106
33454: IFFALSE 33523
33456: GO 33458
33458: DISABLE
33459: LD_INT 0
33461: PPUSH
33462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33463: LD_ADDR_VAR 0 2
33467: PUSH
33468: LD_INT 22
33470: PUSH
33471: LD_OWVAR 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PPUSH
33480: CALL_OW 69
33484: ST_TO_ADDR
// if not tmp then
33485: LD_VAR 0 2
33489: NOT
33490: IFFALSE 33494
// exit ;
33492: GO 33523
// for i in tmp do
33494: LD_ADDR_VAR 0 1
33498: PUSH
33499: LD_VAR 0 2
33503: PUSH
33504: FOR_IN
33505: IFFALSE 33521
// SetLives ( i , 300 ) ;
33507: LD_VAR 0 1
33511: PPUSH
33512: LD_INT 300
33514: PPUSH
33515: CALL_OW 234
33519: GO 33504
33521: POP
33522: POP
// end ;
33523: PPOPN 2
33525: END
// every 0 0$1 trigger s60 do var i , tmp ;
33526: LD_EXP 107
33530: IFFALSE 33599
33532: GO 33534
33534: DISABLE
33535: LD_INT 0
33537: PPUSH
33538: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33539: LD_ADDR_VAR 0 2
33543: PUSH
33544: LD_INT 22
33546: PUSH
33547: LD_OWVAR 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PPUSH
33556: CALL_OW 69
33560: ST_TO_ADDR
// if not tmp then
33561: LD_VAR 0 2
33565: NOT
33566: IFFALSE 33570
// exit ;
33568: GO 33599
// for i in tmp do
33570: LD_ADDR_VAR 0 1
33574: PUSH
33575: LD_VAR 0 2
33579: PUSH
33580: FOR_IN
33581: IFFALSE 33597
// SetLives ( i , 600 ) ;
33583: LD_VAR 0 1
33587: PPUSH
33588: LD_INT 600
33590: PPUSH
33591: CALL_OW 234
33595: GO 33580
33597: POP
33598: POP
// end ;
33599: PPOPN 2
33601: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33602: LD_INT 0
33604: PPUSH
// case cmd of 301 :
33605: LD_VAR 0 1
33609: PUSH
33610: LD_INT 301
33612: DOUBLE
33613: EQUAL
33614: IFTRUE 33618
33616: GO 33650
33618: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33619: LD_VAR 0 6
33623: PPUSH
33624: LD_VAR 0 7
33628: PPUSH
33629: LD_VAR 0 8
33633: PPUSH
33634: LD_VAR 0 4
33638: PPUSH
33639: LD_VAR 0 5
33643: PPUSH
33644: CALL 34851 0 5
33648: GO 33771
33650: LD_INT 302
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33695
33658: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33659: LD_VAR 0 6
33663: PPUSH
33664: LD_VAR 0 7
33668: PPUSH
33669: LD_VAR 0 8
33673: PPUSH
33674: LD_VAR 0 9
33678: PPUSH
33679: LD_VAR 0 4
33683: PPUSH
33684: LD_VAR 0 5
33688: PPUSH
33689: CALL 34942 0 6
33693: GO 33771
33695: LD_INT 303
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33740
33703: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33704: LD_VAR 0 6
33708: PPUSH
33709: LD_VAR 0 7
33713: PPUSH
33714: LD_VAR 0 8
33718: PPUSH
33719: LD_VAR 0 9
33723: PPUSH
33724: LD_VAR 0 4
33728: PPUSH
33729: LD_VAR 0 5
33733: PPUSH
33734: CALL 33776 0 6
33738: GO 33771
33740: LD_INT 304
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33770
33748: POP
// hHackTeleport ( unit , x , y ) ; end ;
33749: LD_VAR 0 2
33753: PPUSH
33754: LD_VAR 0 4
33758: PPUSH
33759: LD_VAR 0 5
33763: PPUSH
33764: CALL 35535 0 3
33768: GO 33771
33770: POP
// end ;
33771: LD_VAR 0 12
33775: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33776: LD_INT 0
33778: PPUSH
33779: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33780: LD_VAR 0 1
33784: PUSH
33785: LD_INT 1
33787: LESS
33788: PUSH
33789: LD_VAR 0 1
33793: PUSH
33794: LD_INT 3
33796: GREATER
33797: OR
33798: PUSH
33799: LD_VAR 0 5
33803: PPUSH
33804: LD_VAR 0 6
33808: PPUSH
33809: CALL_OW 428
33813: OR
33814: IFFALSE 33818
// exit ;
33816: GO 34538
// uc_side := your_side ;
33818: LD_ADDR_OWVAR 20
33822: PUSH
33823: LD_OWVAR 2
33827: ST_TO_ADDR
// uc_nation := nation ;
33828: LD_ADDR_OWVAR 21
33832: PUSH
33833: LD_VAR 0 1
33837: ST_TO_ADDR
// bc_level = 1 ;
33838: LD_ADDR_OWVAR 43
33842: PUSH
33843: LD_INT 1
33845: ST_TO_ADDR
// case btype of 1 :
33846: LD_VAR 0 2
33850: PUSH
33851: LD_INT 1
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33870
33859: POP
// bc_type := b_depot ; 2 :
33860: LD_ADDR_OWVAR 42
33864: PUSH
33865: LD_INT 0
33867: ST_TO_ADDR
33868: GO 34482
33870: LD_INT 2
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33889
33878: POP
// bc_type := b_warehouse ; 3 :
33879: LD_ADDR_OWVAR 42
33883: PUSH
33884: LD_INT 1
33886: ST_TO_ADDR
33887: GO 34482
33889: LD_INT 3
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33908
33897: POP
// bc_type := b_lab ; 4 .. 9 :
33898: LD_ADDR_OWVAR 42
33902: PUSH
33903: LD_INT 6
33905: ST_TO_ADDR
33906: GO 34482
33908: LD_INT 4
33910: DOUBLE
33911: GREATEREQUAL
33912: IFFALSE 33920
33914: LD_INT 9
33916: DOUBLE
33917: LESSEQUAL
33918: IFTRUE 33922
33920: GO 33974
33922: POP
// begin bc_type := b_lab_half ;
33923: LD_ADDR_OWVAR 42
33927: PUSH
33928: LD_INT 7
33930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33931: LD_ADDR_OWVAR 44
33935: PUSH
33936: LD_INT 10
33938: PUSH
33939: LD_INT 11
33941: PUSH
33942: LD_INT 12
33944: PUSH
33945: LD_INT 15
33947: PUSH
33948: LD_INT 14
33950: PUSH
33951: LD_INT 13
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: PUSH
33962: LD_VAR 0 2
33966: PUSH
33967: LD_INT 3
33969: MINUS
33970: ARRAY
33971: ST_TO_ADDR
// end ; 10 .. 13 :
33972: GO 34482
33974: LD_INT 10
33976: DOUBLE
33977: GREATEREQUAL
33978: IFFALSE 33986
33980: LD_INT 13
33982: DOUBLE
33983: LESSEQUAL
33984: IFTRUE 33988
33986: GO 34065
33988: POP
// begin bc_type := b_lab_full ;
33989: LD_ADDR_OWVAR 42
33993: PUSH
33994: LD_INT 8
33996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33997: LD_ADDR_OWVAR 44
34001: PUSH
34002: LD_INT 10
34004: PUSH
34005: LD_INT 12
34007: PUSH
34008: LD_INT 14
34010: PUSH
34011: LD_INT 13
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: PUSH
34020: LD_VAR 0 2
34024: PUSH
34025: LD_INT 9
34027: MINUS
34028: ARRAY
34029: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34030: LD_ADDR_OWVAR 45
34034: PUSH
34035: LD_INT 11
34037: PUSH
34038: LD_INT 15
34040: PUSH
34041: LD_INT 12
34043: PUSH
34044: LD_INT 15
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: PUSH
34053: LD_VAR 0 2
34057: PUSH
34058: LD_INT 9
34060: MINUS
34061: ARRAY
34062: ST_TO_ADDR
// end ; 14 :
34063: GO 34482
34065: LD_INT 14
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34073
34071: GO 34084
34073: POP
// bc_type := b_workshop ; 15 :
34074: LD_ADDR_OWVAR 42
34078: PUSH
34079: LD_INT 2
34081: ST_TO_ADDR
34082: GO 34482
34084: LD_INT 15
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34103
34092: POP
// bc_type := b_factory ; 16 :
34093: LD_ADDR_OWVAR 42
34097: PUSH
34098: LD_INT 3
34100: ST_TO_ADDR
34101: GO 34482
34103: LD_INT 16
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34111
34109: GO 34122
34111: POP
// bc_type := b_ext_gun ; 17 :
34112: LD_ADDR_OWVAR 42
34116: PUSH
34117: LD_INT 17
34119: ST_TO_ADDR
34120: GO 34482
34122: LD_INT 17
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34130
34128: GO 34158
34130: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34131: LD_ADDR_OWVAR 42
34135: PUSH
34136: LD_INT 19
34138: PUSH
34139: LD_INT 23
34141: PUSH
34142: LD_INT 19
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: PUSH
34150: LD_VAR 0 1
34154: ARRAY
34155: ST_TO_ADDR
34156: GO 34482
34158: LD_INT 18
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34177
34166: POP
// bc_type := b_ext_radar ; 19 :
34167: LD_ADDR_OWVAR 42
34171: PUSH
34172: LD_INT 20
34174: ST_TO_ADDR
34175: GO 34482
34177: LD_INT 19
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34196
34185: POP
// bc_type := b_ext_radio ; 20 :
34186: LD_ADDR_OWVAR 42
34190: PUSH
34191: LD_INT 22
34193: ST_TO_ADDR
34194: GO 34482
34196: LD_INT 20
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34204
34202: GO 34215
34204: POP
// bc_type := b_ext_siberium ; 21 :
34205: LD_ADDR_OWVAR 42
34209: PUSH
34210: LD_INT 21
34212: ST_TO_ADDR
34213: GO 34482
34215: LD_INT 21
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34223
34221: GO 34234
34223: POP
// bc_type := b_ext_computer ; 22 :
34224: LD_ADDR_OWVAR 42
34228: PUSH
34229: LD_INT 24
34231: ST_TO_ADDR
34232: GO 34482
34234: LD_INT 22
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34253
34242: POP
// bc_type := b_ext_track ; 23 :
34243: LD_ADDR_OWVAR 42
34247: PUSH
34248: LD_INT 16
34250: ST_TO_ADDR
34251: GO 34482
34253: LD_INT 23
34255: DOUBLE
34256: EQUAL
34257: IFTRUE 34261
34259: GO 34272
34261: POP
// bc_type := b_ext_laser ; 24 :
34262: LD_ADDR_OWVAR 42
34266: PUSH
34267: LD_INT 25
34269: ST_TO_ADDR
34270: GO 34482
34272: LD_INT 24
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34291
34280: POP
// bc_type := b_control_tower ; 25 :
34281: LD_ADDR_OWVAR 42
34285: PUSH
34286: LD_INT 36
34288: ST_TO_ADDR
34289: GO 34482
34291: LD_INT 25
34293: DOUBLE
34294: EQUAL
34295: IFTRUE 34299
34297: GO 34310
34299: POP
// bc_type := b_breastwork ; 26 :
34300: LD_ADDR_OWVAR 42
34304: PUSH
34305: LD_INT 31
34307: ST_TO_ADDR
34308: GO 34482
34310: LD_INT 26
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34318
34316: GO 34329
34318: POP
// bc_type := b_bunker ; 27 :
34319: LD_ADDR_OWVAR 42
34323: PUSH
34324: LD_INT 32
34326: ST_TO_ADDR
34327: GO 34482
34329: LD_INT 27
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34337
34335: GO 34348
34337: POP
// bc_type := b_turret ; 28 :
34338: LD_ADDR_OWVAR 42
34342: PUSH
34343: LD_INT 33
34345: ST_TO_ADDR
34346: GO 34482
34348: LD_INT 28
34350: DOUBLE
34351: EQUAL
34352: IFTRUE 34356
34354: GO 34367
34356: POP
// bc_type := b_armoury ; 29 :
34357: LD_ADDR_OWVAR 42
34361: PUSH
34362: LD_INT 4
34364: ST_TO_ADDR
34365: GO 34482
34367: LD_INT 29
34369: DOUBLE
34370: EQUAL
34371: IFTRUE 34375
34373: GO 34386
34375: POP
// bc_type := b_barracks ; 30 :
34376: LD_ADDR_OWVAR 42
34380: PUSH
34381: LD_INT 5
34383: ST_TO_ADDR
34384: GO 34482
34386: LD_INT 30
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34394
34392: GO 34405
34394: POP
// bc_type := b_solar_power ; 31 :
34395: LD_ADDR_OWVAR 42
34399: PUSH
34400: LD_INT 27
34402: ST_TO_ADDR
34403: GO 34482
34405: LD_INT 31
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34424
34413: POP
// bc_type := b_oil_power ; 32 :
34414: LD_ADDR_OWVAR 42
34418: PUSH
34419: LD_INT 26
34421: ST_TO_ADDR
34422: GO 34482
34424: LD_INT 32
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34443
34432: POP
// bc_type := b_siberite_power ; 33 :
34433: LD_ADDR_OWVAR 42
34437: PUSH
34438: LD_INT 28
34440: ST_TO_ADDR
34441: GO 34482
34443: LD_INT 33
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34462
34451: POP
// bc_type := b_oil_mine ; 34 :
34452: LD_ADDR_OWVAR 42
34456: PUSH
34457: LD_INT 29
34459: ST_TO_ADDR
34460: GO 34482
34462: LD_INT 34
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34481
34470: POP
// bc_type := b_siberite_mine ; end ;
34471: LD_ADDR_OWVAR 42
34475: PUSH
34476: LD_INT 30
34478: ST_TO_ADDR
34479: GO 34482
34481: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34482: LD_ADDR_VAR 0 8
34486: PUSH
34487: LD_VAR 0 5
34491: PPUSH
34492: LD_VAR 0 6
34496: PPUSH
34497: LD_VAR 0 3
34501: PPUSH
34502: CALL_OW 47
34506: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34507: LD_OWVAR 42
34511: PUSH
34512: LD_INT 32
34514: PUSH
34515: LD_INT 33
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: IN
34522: IFFALSE 34538
// PlaceWeaponTurret ( b , weapon ) ;
34524: LD_VAR 0 8
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: CALL_OW 431
// end ;
34538: LD_VAR 0 7
34542: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: LD_INT 22
34556: PUSH
34557: LD_OWVAR 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 30
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 30
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PPUSH
34598: CALL_OW 69
34602: ST_TO_ADDR
// if not tmp then
34603: LD_VAR 0 4
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 34671
// for i in tmp do
34612: LD_ADDR_VAR 0 2
34616: PUSH
34617: LD_VAR 0 4
34621: PUSH
34622: FOR_IN
34623: IFFALSE 34669
// for j = 1 to 3 do
34625: LD_ADDR_VAR 0 3
34629: PUSH
34630: DOUBLE
34631: LD_INT 1
34633: DEC
34634: ST_TO_ADDR
34635: LD_INT 3
34637: PUSH
34638: FOR_TO
34639: IFFALSE 34665
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34641: LD_VAR 0 2
34645: PPUSH
34646: CALL_OW 274
34650: PPUSH
34651: LD_VAR 0 3
34655: PPUSH
34656: LD_INT 99999
34658: PPUSH
34659: CALL_OW 277
34663: GO 34638
34665: POP
34666: POP
34667: GO 34622
34669: POP
34670: POP
// end ;
34671: LD_VAR 0 1
34675: RET
// export function hHackSetLevel10 ; var i , j ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
34680: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34681: LD_ADDR_VAR 0 2
34685: PUSH
34686: LD_INT 21
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PPUSH
34696: CALL_OW 69
34700: PUSH
34701: FOR_IN
34702: IFFALSE 34754
// if IsSelected ( i ) then
34704: LD_VAR 0 2
34708: PPUSH
34709: CALL_OW 306
34713: IFFALSE 34752
// begin for j := 1 to 4 do
34715: LD_ADDR_VAR 0 3
34719: PUSH
34720: DOUBLE
34721: LD_INT 1
34723: DEC
34724: ST_TO_ADDR
34725: LD_INT 4
34727: PUSH
34728: FOR_TO
34729: IFFALSE 34750
// SetSkill ( i , j , 10 ) ;
34731: LD_VAR 0 2
34735: PPUSH
34736: LD_VAR 0 3
34740: PPUSH
34741: LD_INT 10
34743: PPUSH
34744: CALL_OW 237
34748: GO 34728
34750: POP
34751: POP
// end ;
34752: GO 34701
34754: POP
34755: POP
// end ;
34756: LD_VAR 0 1
34760: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34761: LD_INT 0
34763: PPUSH
34764: PPUSH
34765: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34766: LD_ADDR_VAR 0 2
34770: PUSH
34771: LD_INT 22
34773: PUSH
34774: LD_OWVAR 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 21
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PPUSH
34797: CALL_OW 69
34801: PUSH
34802: FOR_IN
34803: IFFALSE 34844
// begin for j := 1 to 4 do
34805: LD_ADDR_VAR 0 3
34809: PUSH
34810: DOUBLE
34811: LD_INT 1
34813: DEC
34814: ST_TO_ADDR
34815: LD_INT 4
34817: PUSH
34818: FOR_TO
34819: IFFALSE 34840
// SetSkill ( i , j , 10 ) ;
34821: LD_VAR 0 2
34825: PPUSH
34826: LD_VAR 0 3
34830: PPUSH
34831: LD_INT 10
34833: PPUSH
34834: CALL_OW 237
34838: GO 34818
34840: POP
34841: POP
// end ;
34842: GO 34802
34844: POP
34845: POP
// end ;
34846: LD_VAR 0 1
34850: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34851: LD_INT 0
34853: PPUSH
// uc_side := your_side ;
34854: LD_ADDR_OWVAR 20
34858: PUSH
34859: LD_OWVAR 2
34863: ST_TO_ADDR
// uc_nation := nation ;
34864: LD_ADDR_OWVAR 21
34868: PUSH
34869: LD_VAR 0 1
34873: ST_TO_ADDR
// InitHc ;
34874: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34878: LD_INT 0
34880: PPUSH
34881: LD_VAR 0 2
34885: PPUSH
34886: LD_VAR 0 3
34890: PPUSH
34891: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34895: LD_VAR 0 4
34899: PPUSH
34900: LD_VAR 0 5
34904: PPUSH
34905: CALL_OW 428
34909: PUSH
34910: LD_INT 0
34912: EQUAL
34913: IFFALSE 34937
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34915: CALL_OW 44
34919: PPUSH
34920: LD_VAR 0 4
34924: PPUSH
34925: LD_VAR 0 5
34929: PPUSH
34930: LD_INT 1
34932: PPUSH
34933: CALL_OW 48
// end ;
34937: LD_VAR 0 6
34941: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34942: LD_INT 0
34944: PPUSH
34945: PPUSH
// uc_side := your_side ;
34946: LD_ADDR_OWVAR 20
34950: PUSH
34951: LD_OWVAR 2
34955: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34956: LD_VAR 0 1
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: LD_INT 5
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: IN
34983: IFFALSE 34995
// uc_nation := nation_american else
34985: LD_ADDR_OWVAR 21
34989: PUSH
34990: LD_INT 1
34992: ST_TO_ADDR
34993: GO 35038
// if chassis in [ 11 , 12 , 13 , 14 ] then
34995: LD_VAR 0 1
34999: PUSH
35000: LD_INT 11
35002: PUSH
35003: LD_INT 12
35005: PUSH
35006: LD_INT 13
35008: PUSH
35009: LD_INT 14
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: IN
35018: IFFALSE 35030
// uc_nation := nation_arabian else
35020: LD_ADDR_OWVAR 21
35024: PUSH
35025: LD_INT 2
35027: ST_TO_ADDR
35028: GO 35038
// uc_nation := nation_russian ;
35030: LD_ADDR_OWVAR 21
35034: PUSH
35035: LD_INT 3
35037: ST_TO_ADDR
// vc_chassis := chassis ;
35038: LD_ADDR_OWVAR 37
35042: PUSH
35043: LD_VAR 0 1
35047: ST_TO_ADDR
// vc_engine := engine ;
35048: LD_ADDR_OWVAR 39
35052: PUSH
35053: LD_VAR 0 2
35057: ST_TO_ADDR
// vc_control := control ;
35058: LD_ADDR_OWVAR 38
35062: PUSH
35063: LD_VAR 0 3
35067: ST_TO_ADDR
// vc_weapon := weapon ;
35068: LD_ADDR_OWVAR 40
35072: PUSH
35073: LD_VAR 0 4
35077: ST_TO_ADDR
// un := CreateVehicle ;
35078: LD_ADDR_VAR 0 8
35082: PUSH
35083: CALL_OW 45
35087: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35088: LD_VAR 0 8
35092: PPUSH
35093: LD_INT 0
35095: PPUSH
35096: LD_INT 5
35098: PPUSH
35099: CALL_OW 12
35103: PPUSH
35104: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35108: LD_VAR 0 8
35112: PPUSH
35113: LD_VAR 0 5
35117: PPUSH
35118: LD_VAR 0 6
35122: PPUSH
35123: LD_INT 1
35125: PPUSH
35126: CALL_OW 48
// end ;
35130: LD_VAR 0 7
35134: RET
// export hInvincible ; every 1 do
35135: GO 35137
35137: DISABLE
// hInvincible := [ ] ;
35138: LD_ADDR_EXP 108
35142: PUSH
35143: EMPTY
35144: ST_TO_ADDR
35145: END
// every 10 do var i ;
35146: GO 35148
35148: DISABLE
35149: LD_INT 0
35151: PPUSH
// begin enable ;
35152: ENABLE
// if not hInvincible then
35153: LD_EXP 108
35157: NOT
35158: IFFALSE 35162
// exit ;
35160: GO 35206
// for i in hInvincible do
35162: LD_ADDR_VAR 0 1
35166: PUSH
35167: LD_EXP 108
35171: PUSH
35172: FOR_IN
35173: IFFALSE 35204
// if GetLives ( i ) < 1000 then
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 256
35184: PUSH
35185: LD_INT 1000
35187: LESS
35188: IFFALSE 35202
// SetLives ( i , 1000 ) ;
35190: LD_VAR 0 1
35194: PPUSH
35195: LD_INT 1000
35197: PPUSH
35198: CALL_OW 234
35202: GO 35172
35204: POP
35205: POP
// end ;
35206: PPOPN 1
35208: END
// export function hHackInvincible ; var i ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 21
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 21
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: PPUSH
35246: CALL_OW 69
35250: PUSH
35251: FOR_IN
35252: IFFALSE 35313
// if IsSelected ( i ) then
35254: LD_VAR 0 2
35258: PPUSH
35259: CALL_OW 306
35263: IFFALSE 35311
// begin if i in hInvincible then
35265: LD_VAR 0 2
35269: PUSH
35270: LD_EXP 108
35274: IN
35275: IFFALSE 35295
// hInvincible := hInvincible diff i else
35277: LD_ADDR_EXP 108
35281: PUSH
35282: LD_EXP 108
35286: PUSH
35287: LD_VAR 0 2
35291: DIFF
35292: ST_TO_ADDR
35293: GO 35311
// hInvincible := hInvincible union i ;
35295: LD_ADDR_EXP 108
35299: PUSH
35300: LD_EXP 108
35304: PUSH
35305: LD_VAR 0 2
35309: UNION
35310: ST_TO_ADDR
// end ;
35311: GO 35251
35313: POP
35314: POP
// end ;
35315: LD_VAR 0 1
35319: RET
// export function hHackInvisible ; var i , j ; begin
35320: LD_INT 0
35322: PPUSH
35323: PPUSH
35324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35325: LD_ADDR_VAR 0 2
35329: PUSH
35330: LD_INT 21
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PPUSH
35340: CALL_OW 69
35344: PUSH
35345: FOR_IN
35346: IFFALSE 35370
// if IsSelected ( i ) then
35348: LD_VAR 0 2
35352: PPUSH
35353: CALL_OW 306
35357: IFFALSE 35368
// ComForceInvisible ( i ) ;
35359: LD_VAR 0 2
35363: PPUSH
35364: CALL_OW 496
35368: GO 35345
35370: POP
35371: POP
// end ;
35372: LD_VAR 0 1
35376: RET
// export function hHackChangeYourSide ; begin
35377: LD_INT 0
35379: PPUSH
// if your_side = 8 then
35380: LD_OWVAR 2
35384: PUSH
35385: LD_INT 8
35387: EQUAL
35388: IFFALSE 35400
// your_side := 0 else
35390: LD_ADDR_OWVAR 2
35394: PUSH
35395: LD_INT 0
35397: ST_TO_ADDR
35398: GO 35414
// your_side := your_side + 1 ;
35400: LD_ADDR_OWVAR 2
35404: PUSH
35405: LD_OWVAR 2
35409: PUSH
35410: LD_INT 1
35412: PLUS
35413: ST_TO_ADDR
// end ;
35414: LD_VAR 0 1
35418: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
35423: PPUSH
// for i in all_units do
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_OWVAR 3
35433: PUSH
35434: FOR_IN
35435: IFFALSE 35513
// if IsSelected ( i ) then
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 306
35446: IFFALSE 35511
// begin j := GetSide ( i ) ;
35448: LD_ADDR_VAR 0 3
35452: PUSH
35453: LD_VAR 0 2
35457: PPUSH
35458: CALL_OW 255
35462: ST_TO_ADDR
// if j = 8 then
35463: LD_VAR 0 3
35467: PUSH
35468: LD_INT 8
35470: EQUAL
35471: IFFALSE 35483
// j := 0 else
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: LD_INT 0
35480: ST_TO_ADDR
35481: GO 35497
// j := j + 1 ;
35483: LD_ADDR_VAR 0 3
35487: PUSH
35488: LD_VAR 0 3
35492: PUSH
35493: LD_INT 1
35495: PLUS
35496: ST_TO_ADDR
// SetSide ( i , j ) ;
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_VAR 0 3
35506: PPUSH
35507: CALL_OW 235
// end ;
35511: GO 35434
35513: POP
35514: POP
// end ;
35515: LD_VAR 0 1
35519: RET
// export function hHackFog ; begin
35520: LD_INT 0
35522: PPUSH
// FogOff ( true ) ;
35523: LD_INT 1
35525: PPUSH
35526: CALL_OW 344
// end ;
35530: LD_VAR 0 1
35534: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35535: LD_INT 0
35537: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35538: LD_VAR 0 1
35542: PPUSH
35543: LD_VAR 0 2
35547: PPUSH
35548: LD_VAR 0 3
35552: PPUSH
35553: LD_INT 1
35555: PPUSH
35556: LD_INT 1
35558: PPUSH
35559: CALL_OW 483
// CenterOnXY ( x , y ) ;
35563: LD_VAR 0 2
35567: PPUSH
35568: LD_VAR 0 3
35572: PPUSH
35573: CALL_OW 84
// end ;
35577: LD_VAR 0 4
35581: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35582: LD_INT 0
35584: PPUSH
35585: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35586: LD_VAR 0 1
35590: NOT
35591: PUSH
35592: LD_VAR 0 2
35596: PPUSH
35597: LD_VAR 0 3
35601: PPUSH
35602: CALL_OW 488
35606: NOT
35607: OR
35608: PUSH
35609: LD_VAR 0 1
35613: PPUSH
35614: CALL_OW 266
35618: PUSH
35619: LD_INT 3
35621: NONEQUAL
35622: PUSH
35623: LD_VAR 0 1
35627: PPUSH
35628: CALL_OW 247
35632: PUSH
35633: LD_INT 1
35635: EQUAL
35636: NOT
35637: AND
35638: OR
35639: IFFALSE 35643
// exit ;
35641: GO 35792
// if GetType ( factory ) = unit_human then
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 247
35652: PUSH
35653: LD_INT 1
35655: EQUAL
35656: IFFALSE 35673
// factory := IsInUnit ( factory ) ;
35658: LD_ADDR_VAR 0 1
35662: PUSH
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL_OW 310
35672: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 266
35682: PUSH
35683: LD_INT 3
35685: NONEQUAL
35686: IFFALSE 35690
// exit ;
35688: GO 35792
// if HexInfo ( x , y ) = factory then
35690: LD_VAR 0 2
35694: PPUSH
35695: LD_VAR 0 3
35699: PPUSH
35700: CALL_OW 428
35704: PUSH
35705: LD_VAR 0 1
35709: EQUAL
35710: IFFALSE 35737
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35712: LD_ADDR_EXP 109
35716: PUSH
35717: LD_EXP 109
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: LD_INT 0
35729: PPUSH
35730: CALL_OW 1
35734: ST_TO_ADDR
35735: GO 35788
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35737: LD_ADDR_EXP 109
35741: PUSH
35742: LD_EXP 109
35746: PPUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 255
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_VAR 0 2
35771: PUSH
35772: LD_VAR 0 3
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: PPUSH
35783: CALL_OW 1
35787: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35788: CALL 35797 0 0
// end ;
35792: LD_VAR 0 4
35796: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35797: LD_INT 0
35799: PPUSH
35800: PPUSH
35801: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35802: LD_STRING resetFactoryWaypoint();
35804: PPUSH
35805: CALL_OW 559
// if factoryWaypoints then
35809: LD_EXP 109
35813: IFFALSE 35939
// begin list := PrepareArray ( factoryWaypoints ) ;
35815: LD_ADDR_VAR 0 3
35819: PUSH
35820: LD_EXP 109
35824: PPUSH
35825: CALL 82408 0 1
35829: ST_TO_ADDR
// for i := 1 to list do
35830: LD_ADDR_VAR 0 2
35834: PUSH
35835: DOUBLE
35836: LD_INT 1
35838: DEC
35839: ST_TO_ADDR
35840: LD_VAR 0 3
35844: PUSH
35845: FOR_TO
35846: IFFALSE 35937
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35848: LD_STRING setFactoryWaypointXY(
35850: PUSH
35851: LD_VAR 0 3
35855: PUSH
35856: LD_VAR 0 2
35860: ARRAY
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: STR
35866: PUSH
35867: LD_STRING ,
35869: STR
35870: PUSH
35871: LD_VAR 0 3
35875: PUSH
35876: LD_VAR 0 2
35880: ARRAY
35881: PUSH
35882: LD_INT 2
35884: ARRAY
35885: STR
35886: PUSH
35887: LD_STRING ,
35889: STR
35890: PUSH
35891: LD_VAR 0 3
35895: PUSH
35896: LD_VAR 0 2
35900: ARRAY
35901: PUSH
35902: LD_INT 3
35904: ARRAY
35905: STR
35906: PUSH
35907: LD_STRING ,
35909: STR
35910: PUSH
35911: LD_VAR 0 3
35915: PUSH
35916: LD_VAR 0 2
35920: ARRAY
35921: PUSH
35922: LD_INT 4
35924: ARRAY
35925: STR
35926: PUSH
35927: LD_STRING )
35929: STR
35930: PPUSH
35931: CALL_OW 559
35935: GO 35845
35937: POP
35938: POP
// end ; end ;
35939: LD_VAR 0 1
35943: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35944: LD_INT 0
35946: PPUSH
// if HexInfo ( x , y ) = warehouse then
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 3
35956: PPUSH
35957: CALL_OW 428
35961: PUSH
35962: LD_VAR 0 1
35966: EQUAL
35967: IFFALSE 35994
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35969: LD_ADDR_EXP 110
35973: PUSH
35974: LD_EXP 110
35978: PPUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_INT 0
35986: PPUSH
35987: CALL_OW 1
35991: ST_TO_ADDR
35992: GO 36045
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35994: LD_ADDR_EXP 110
35998: PUSH
35999: LD_EXP 110
36003: PPUSH
36004: LD_VAR 0 1
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 255
36018: PUSH
36019: LD_VAR 0 1
36023: PUSH
36024: LD_VAR 0 2
36028: PUSH
36029: LD_VAR 0 3
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PPUSH
36040: CALL_OW 1
36044: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36045: CALL 36054 0 0
// end ;
36049: LD_VAR 0 4
36053: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36054: LD_INT 0
36056: PPUSH
36057: PPUSH
36058: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36059: LD_STRING resetWarehouseGatheringPoints();
36061: PPUSH
36062: CALL_OW 559
// if warehouseGatheringPoints then
36066: LD_EXP 110
36070: IFFALSE 36196
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_EXP 110
36081: PPUSH
36082: CALL 82408 0 1
36086: ST_TO_ADDR
// for i := 1 to list do
36087: LD_ADDR_VAR 0 2
36091: PUSH
36092: DOUBLE
36093: LD_INT 1
36095: DEC
36096: ST_TO_ADDR
36097: LD_VAR 0 3
36101: PUSH
36102: FOR_TO
36103: IFFALSE 36194
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36105: LD_STRING setWarehouseGatheringPointXY(
36107: PUSH
36108: LD_VAR 0 3
36112: PUSH
36113: LD_VAR 0 2
36117: ARRAY
36118: PUSH
36119: LD_INT 1
36121: ARRAY
36122: STR
36123: PUSH
36124: LD_STRING ,
36126: STR
36127: PUSH
36128: LD_VAR 0 3
36132: PUSH
36133: LD_VAR 0 2
36137: ARRAY
36138: PUSH
36139: LD_INT 2
36141: ARRAY
36142: STR
36143: PUSH
36144: LD_STRING ,
36146: STR
36147: PUSH
36148: LD_VAR 0 3
36152: PUSH
36153: LD_VAR 0 2
36157: ARRAY
36158: PUSH
36159: LD_INT 3
36161: ARRAY
36162: STR
36163: PUSH
36164: LD_STRING ,
36166: STR
36167: PUSH
36168: LD_VAR 0 3
36172: PUSH
36173: LD_VAR 0 2
36177: ARRAY
36178: PUSH
36179: LD_INT 4
36181: ARRAY
36182: STR
36183: PUSH
36184: LD_STRING )
36186: STR
36187: PPUSH
36188: CALL_OW 559
36192: GO 36102
36194: POP
36195: POP
// end ; end ;
36196: LD_VAR 0 1
36200: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36201: LD_EXP 110
36205: IFFALSE 36890
36207: GO 36209
36209: DISABLE
36210: LD_INT 0
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
// begin enable ;
36221: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36222: LD_ADDR_VAR 0 3
36226: PUSH
36227: LD_EXP 110
36231: PPUSH
36232: CALL 82408 0 1
36236: ST_TO_ADDR
// if not list then
36237: LD_VAR 0 3
36241: NOT
36242: IFFALSE 36246
// exit ;
36244: GO 36890
// for i := 1 to list do
36246: LD_ADDR_VAR 0 1
36250: PUSH
36251: DOUBLE
36252: LD_INT 1
36254: DEC
36255: ST_TO_ADDR
36256: LD_VAR 0 3
36260: PUSH
36261: FOR_TO
36262: IFFALSE 36888
// begin depot := list [ i ] [ 2 ] ;
36264: LD_ADDR_VAR 0 8
36268: PUSH
36269: LD_VAR 0 3
36273: PUSH
36274: LD_VAR 0 1
36278: ARRAY
36279: PUSH
36280: LD_INT 2
36282: ARRAY
36283: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_VAR 0 3
36293: PUSH
36294: LD_VAR 0 1
36298: ARRAY
36299: PUSH
36300: LD_INT 1
36302: ARRAY
36303: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36304: LD_VAR 0 8
36308: PPUSH
36309: CALL_OW 301
36313: PUSH
36314: LD_VAR 0 5
36318: PUSH
36319: LD_VAR 0 8
36323: PPUSH
36324: CALL_OW 255
36328: NONEQUAL
36329: OR
36330: IFFALSE 36359
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36332: LD_ADDR_EXP 110
36336: PUSH
36337: LD_EXP 110
36341: PPUSH
36342: LD_VAR 0 8
36346: PPUSH
36347: LD_INT 0
36349: PPUSH
36350: CALL_OW 1
36354: ST_TO_ADDR
// exit ;
36355: POP
36356: POP
36357: GO 36890
// end ; x := list [ i ] [ 3 ] ;
36359: LD_ADDR_VAR 0 6
36363: PUSH
36364: LD_VAR 0 3
36368: PUSH
36369: LD_VAR 0 1
36373: ARRAY
36374: PUSH
36375: LD_INT 3
36377: ARRAY
36378: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36379: LD_ADDR_VAR 0 7
36383: PUSH
36384: LD_VAR 0 3
36388: PUSH
36389: LD_VAR 0 1
36393: ARRAY
36394: PUSH
36395: LD_INT 4
36397: ARRAY
36398: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_VAR 0 6
36408: PPUSH
36409: LD_VAR 0 7
36413: PPUSH
36414: LD_INT 16
36416: PPUSH
36417: CALL 80996 0 3
36421: ST_TO_ADDR
// if not cratesNearbyPoint then
36422: LD_VAR 0 9
36426: NOT
36427: IFFALSE 36433
// exit ;
36429: POP
36430: POP
36431: GO 36890
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36433: LD_ADDR_VAR 0 4
36437: PUSH
36438: LD_INT 22
36440: PUSH
36441: LD_VAR 0 5
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 60
36455: PUSH
36456: EMPTY
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 91
36465: PUSH
36466: LD_VAR 0 8
36470: PUSH
36471: LD_INT 6
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 25
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 25
36494: PUSH
36495: LD_INT 16
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: PPUSH
36513: CALL_OW 69
36517: PUSH
36518: LD_VAR 0 8
36522: PPUSH
36523: CALL_OW 313
36527: PPUSH
36528: LD_INT 3
36530: PUSH
36531: LD_INT 60
36533: PUSH
36534: EMPTY
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 25
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 25
36556: PUSH
36557: LD_INT 16
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PPUSH
36573: CALL_OW 72
36577: UNION
36578: ST_TO_ADDR
// if tmp then
36579: LD_VAR 0 4
36583: IFFALSE 36663
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36585: LD_ADDR_VAR 0 4
36589: PUSH
36590: LD_VAR 0 4
36594: PPUSH
36595: LD_INT 3
36597: PPUSH
36598: CALL 78965 0 2
36602: ST_TO_ADDR
// for j in tmp do
36603: LD_ADDR_VAR 0 2
36607: PUSH
36608: LD_VAR 0 4
36612: PUSH
36613: FOR_IN
36614: IFFALSE 36657
// begin if IsInUnit ( j ) then
36616: LD_VAR 0 2
36620: PPUSH
36621: CALL_OW 310
36625: IFFALSE 36636
// ComExit ( j ) ;
36627: LD_VAR 0 2
36631: PPUSH
36632: CALL 79048 0 1
// AddComCollect ( j , x , y ) ;
36636: LD_VAR 0 2
36640: PPUSH
36641: LD_VAR 0 6
36645: PPUSH
36646: LD_VAR 0 7
36650: PPUSH
36651: CALL_OW 177
// end ;
36655: GO 36613
36657: POP
36658: POP
// exit ;
36659: POP
36660: POP
36661: GO 36890
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: LD_INT 22
36670: PUSH
36671: LD_VAR 0 5
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 91
36682: PUSH
36683: LD_VAR 0 8
36687: PUSH
36688: LD_INT 8
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 34
36701: PUSH
36702: LD_INT 12
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 34
36711: PUSH
36712: LD_INT 51
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 34
36721: PUSH
36722: LD_INT 32
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 34
36731: PUSH
36732: LD_INT 89
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 69
36755: ST_TO_ADDR
// if tmp then
36756: LD_VAR 0 4
36760: IFFALSE 36886
// begin for j in tmp do
36762: LD_ADDR_VAR 0 2
36766: PUSH
36767: LD_VAR 0 4
36771: PUSH
36772: FOR_IN
36773: IFFALSE 36884
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36775: LD_VAR 0 2
36779: PPUSH
36780: CALL_OW 262
36784: PUSH
36785: LD_INT 3
36787: EQUAL
36788: PUSH
36789: LD_VAR 0 2
36793: PPUSH
36794: CALL_OW 261
36798: PUSH
36799: LD_INT 20
36801: GREATER
36802: OR
36803: PUSH
36804: LD_VAR 0 2
36808: PPUSH
36809: CALL_OW 314
36813: NOT
36814: AND
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 263
36825: PUSH
36826: LD_INT 1
36828: NONEQUAL
36829: PUSH
36830: LD_VAR 0 2
36834: PPUSH
36835: CALL_OW 311
36839: OR
36840: AND
36841: IFFALSE 36882
// begin ComCollect ( j , x , y ) ;
36843: LD_VAR 0 2
36847: PPUSH
36848: LD_VAR 0 6
36852: PPUSH
36853: LD_VAR 0 7
36857: PPUSH
36858: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36862: LD_VAR 0 2
36866: PPUSH
36867: LD_VAR 0 8
36871: PPUSH
36872: CALL_OW 172
// exit ;
36876: POP
36877: POP
36878: POP
36879: POP
36880: GO 36890
// end ;
36882: GO 36772
36884: POP
36885: POP
// end ; end ;
36886: GO 36261
36888: POP
36889: POP
// end ; end_of_file
36890: PPOPN 9
36892: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36893: LD_INT 0
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 264
36908: PUSH
36909: LD_INT 91
36911: EQUAL
36912: IFFALSE 36984
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36914: LD_INT 68
36916: PPUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 255
36926: PPUSH
36927: CALL_OW 321
36931: PUSH
36932: LD_INT 2
36934: EQUAL
36935: IFFALSE 36947
// eff := 70 else
36937: LD_ADDR_VAR 0 4
36941: PUSH
36942: LD_INT 70
36944: ST_TO_ADDR
36945: GO 36955
// eff := 30 ;
36947: LD_ADDR_VAR 0 4
36951: PUSH
36952: LD_INT 30
36954: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 250
36964: PPUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL_OW 251
36974: PPUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: CALL_OW 495
// end ; end ;
36984: LD_VAR 0 2
36988: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36989: LD_INT 0
36991: PPUSH
// end ;
36992: LD_VAR 0 4
36996: RET
// export function SOS_Command ( cmd ) ; begin
36997: LD_INT 0
36999: PPUSH
// end ;
37000: LD_VAR 0 2
37004: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37005: LD_INT 0
37007: PPUSH
// end ;
37008: LD_VAR 0 6
37012: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
// if not vehicle or not factory then
37017: LD_VAR 0 1
37021: NOT
37022: PUSH
37023: LD_VAR 0 2
37027: NOT
37028: OR
37029: IFFALSE 37033
// exit ;
37031: GO 37264
// if factoryWaypoints >= factory then
37033: LD_EXP 109
37037: PUSH
37038: LD_VAR 0 2
37042: GREATEREQUAL
37043: IFFALSE 37264
// if factoryWaypoints [ factory ] then
37045: LD_EXP 109
37049: PUSH
37050: LD_VAR 0 2
37054: ARRAY
37055: IFFALSE 37264
// begin if GetControl ( vehicle ) = control_manual then
37057: LD_VAR 0 1
37061: PPUSH
37062: CALL_OW 263
37066: PUSH
37067: LD_INT 1
37069: EQUAL
37070: IFFALSE 37151
// begin driver := IsDrivenBy ( vehicle ) ;
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 311
37086: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37087: LD_VAR 0 4
37091: PPUSH
37092: LD_EXP 109
37096: PUSH
37097: LD_VAR 0 2
37101: ARRAY
37102: PUSH
37103: LD_INT 3
37105: ARRAY
37106: PPUSH
37107: LD_EXP 109
37111: PUSH
37112: LD_VAR 0 2
37116: ARRAY
37117: PUSH
37118: LD_INT 4
37120: ARRAY
37121: PPUSH
37122: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37126: LD_VAR 0 4
37130: PPUSH
37131: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37135: LD_VAR 0 4
37139: PPUSH
37140: LD_VAR 0 2
37144: PPUSH
37145: CALL_OW 180
// end else
37149: GO 37264
// if GetControl ( vehicle ) = control_remote then
37151: LD_VAR 0 1
37155: PPUSH
37156: CALL_OW 263
37160: PUSH
37161: LD_INT 2
37163: EQUAL
37164: IFFALSE 37225
// begin wait ( 0 0$2 ) ;
37166: LD_INT 70
37168: PPUSH
37169: CALL_OW 67
// if Connect ( vehicle ) then
37173: LD_VAR 0 1
37177: PPUSH
37178: CALL 49288 0 1
37182: IFFALSE 37223
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37184: LD_VAR 0 1
37188: PPUSH
37189: LD_EXP 109
37193: PUSH
37194: LD_VAR 0 2
37198: ARRAY
37199: PUSH
37200: LD_INT 3
37202: ARRAY
37203: PPUSH
37204: LD_EXP 109
37208: PUSH
37209: LD_VAR 0 2
37213: ARRAY
37214: PUSH
37215: LD_INT 4
37217: ARRAY
37218: PPUSH
37219: CALL_OW 171
// end else
37223: GO 37264
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37225: LD_VAR 0 1
37229: PPUSH
37230: LD_EXP 109
37234: PUSH
37235: LD_VAR 0 2
37239: ARRAY
37240: PUSH
37241: LD_INT 3
37243: ARRAY
37244: PPUSH
37245: LD_EXP 109
37249: PUSH
37250: LD_VAR 0 2
37254: ARRAY
37255: PUSH
37256: LD_INT 4
37258: ARRAY
37259: PPUSH
37260: CALL_OW 171
// end ; end ;
37264: LD_VAR 0 3
37268: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37269: LD_INT 0
37271: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37272: LD_VAR 0 1
37276: PUSH
37277: LD_INT 250
37279: EQUAL
37280: PUSH
37281: LD_VAR 0 2
37285: PPUSH
37286: CALL_OW 264
37290: PUSH
37291: LD_INT 81
37293: EQUAL
37294: AND
37295: IFFALSE 37316
// MinerPlaceMine ( unit , x , y ) ;
37297: LD_VAR 0 2
37301: PPUSH
37302: LD_VAR 0 4
37306: PPUSH
37307: LD_VAR 0 5
37311: PPUSH
37312: CALL 39701 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37316: LD_VAR 0 1
37320: PUSH
37321: LD_INT 251
37323: EQUAL
37324: PUSH
37325: LD_VAR 0 2
37329: PPUSH
37330: CALL_OW 264
37334: PUSH
37335: LD_INT 81
37337: EQUAL
37338: AND
37339: IFFALSE 37360
// MinerDetonateMine ( unit , x , y ) ;
37341: LD_VAR 0 2
37345: PPUSH
37346: LD_VAR 0 4
37350: PPUSH
37351: LD_VAR 0 5
37355: PPUSH
37356: CALL 39976 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37360: LD_VAR 0 1
37364: PUSH
37365: LD_INT 252
37367: EQUAL
37368: PUSH
37369: LD_VAR 0 2
37373: PPUSH
37374: CALL_OW 264
37378: PUSH
37379: LD_INT 81
37381: EQUAL
37382: AND
37383: IFFALSE 37404
// MinerCreateMinefield ( unit , x , y ) ;
37385: LD_VAR 0 2
37389: PPUSH
37390: LD_VAR 0 4
37394: PPUSH
37395: LD_VAR 0 5
37399: PPUSH
37400: CALL 40393 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37404: LD_VAR 0 1
37408: PUSH
37409: LD_INT 253
37411: EQUAL
37412: PUSH
37413: LD_VAR 0 2
37417: PPUSH
37418: CALL_OW 257
37422: PUSH
37423: LD_INT 5
37425: EQUAL
37426: AND
37427: IFFALSE 37448
// ComBinocular ( unit , x , y ) ;
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 4
37438: PPUSH
37439: LD_VAR 0 5
37443: PPUSH
37444: CALL 40762 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37448: LD_VAR 0 1
37452: PUSH
37453: LD_INT 254
37455: EQUAL
37456: PUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: CALL_OW 264
37466: PUSH
37467: LD_INT 99
37469: EQUAL
37470: AND
37471: PUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: CALL_OW 263
37481: PUSH
37482: LD_INT 3
37484: EQUAL
37485: AND
37486: IFFALSE 37502
// HackDestroyVehicle ( unit , selectedUnit ) ;
37488: LD_VAR 0 2
37492: PPUSH
37493: LD_VAR 0 3
37497: PPUSH
37498: CALL 39065 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37502: LD_VAR 0 1
37506: PUSH
37507: LD_INT 255
37509: EQUAL
37510: PUSH
37511: LD_VAR 0 2
37515: PPUSH
37516: CALL_OW 264
37520: PUSH
37521: LD_INT 14
37523: PUSH
37524: LD_INT 53
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: IN
37531: AND
37532: PUSH
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_VAR 0 5
37542: PPUSH
37543: CALL_OW 488
37547: AND
37548: IFFALSE 37572
// CutTreeXYR ( unit , x , y , 12 ) ;
37550: LD_VAR 0 2
37554: PPUSH
37555: LD_VAR 0 4
37559: PPUSH
37560: LD_VAR 0 5
37564: PPUSH
37565: LD_INT 12
37567: PPUSH
37568: CALL 37635 0 4
// if cmd = 256 then
37572: LD_VAR 0 1
37576: PUSH
37577: LD_INT 256
37579: EQUAL
37580: IFFALSE 37601
// SetFactoryWaypoint ( unit , x , y ) ;
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 4
37591: PPUSH
37592: LD_VAR 0 5
37596: PPUSH
37597: CALL 35582 0 3
// if cmd = 257 then
37601: LD_VAR 0 1
37605: PUSH
37606: LD_INT 257
37608: EQUAL
37609: IFFALSE 37630
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37611: LD_VAR 0 2
37615: PPUSH
37616: LD_VAR 0 4
37620: PPUSH
37621: LD_VAR 0 5
37625: PPUSH
37626: CALL 35944 0 3
// end ;
37630: LD_VAR 0 6
37634: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37635: LD_INT 0
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37646: LD_VAR 0 1
37650: NOT
37651: PUSH
37652: LD_VAR 0 2
37656: PPUSH
37657: LD_VAR 0 3
37661: PPUSH
37662: CALL_OW 488
37666: NOT
37667: OR
37668: PUSH
37669: LD_VAR 0 4
37673: NOT
37674: OR
37675: IFFALSE 37679
// exit ;
37677: GO 38019
// list := [ ] ;
37679: LD_ADDR_VAR 0 13
37683: PUSH
37684: EMPTY
37685: ST_TO_ADDR
// if x - r < 0 then
37686: LD_VAR 0 2
37690: PUSH
37691: LD_VAR 0 4
37695: MINUS
37696: PUSH
37697: LD_INT 0
37699: LESS
37700: IFFALSE 37712
// min_x := 0 else
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_INT 0
37709: ST_TO_ADDR
37710: GO 37728
// min_x := x - r ;
37712: LD_ADDR_VAR 0 7
37716: PUSH
37717: LD_VAR 0 2
37721: PUSH
37722: LD_VAR 0 4
37726: MINUS
37727: ST_TO_ADDR
// if y - r < 0 then
37728: LD_VAR 0 3
37732: PUSH
37733: LD_VAR 0 4
37737: MINUS
37738: PUSH
37739: LD_INT 0
37741: LESS
37742: IFFALSE 37754
// min_y := 0 else
37744: LD_ADDR_VAR 0 8
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
37752: GO 37770
// min_y := y - r ;
37754: LD_ADDR_VAR 0 8
37758: PUSH
37759: LD_VAR 0 3
37763: PUSH
37764: LD_VAR 0 4
37768: MINUS
37769: ST_TO_ADDR
// max_x := x + r ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_VAR 0 2
37779: PUSH
37780: LD_VAR 0 4
37784: PLUS
37785: ST_TO_ADDR
// max_y := y + r ;
37786: LD_ADDR_VAR 0 10
37790: PUSH
37791: LD_VAR 0 3
37795: PUSH
37796: LD_VAR 0 4
37800: PLUS
37801: ST_TO_ADDR
// for _x = min_x to max_x do
37802: LD_ADDR_VAR 0 11
37806: PUSH
37807: DOUBLE
37808: LD_VAR 0 7
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 9
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37937
// for _y = min_y to max_y do
37822: LD_ADDR_VAR 0 12
37826: PUSH
37827: DOUBLE
37828: LD_VAR 0 8
37832: DEC
37833: ST_TO_ADDR
37834: LD_VAR 0 10
37838: PUSH
37839: FOR_TO
37840: IFFALSE 37933
// begin if not ValidHex ( _x , _y ) then
37842: LD_VAR 0 11
37846: PPUSH
37847: LD_VAR 0 12
37851: PPUSH
37852: CALL_OW 488
37856: NOT
37857: IFFALSE 37861
// continue ;
37859: GO 37839
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37861: LD_VAR 0 11
37865: PPUSH
37866: LD_VAR 0 12
37870: PPUSH
37871: CALL_OW 351
37875: PUSH
37876: LD_VAR 0 11
37880: PPUSH
37881: LD_VAR 0 12
37885: PPUSH
37886: CALL_OW 554
37890: AND
37891: IFFALSE 37931
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37893: LD_ADDR_VAR 0 13
37897: PUSH
37898: LD_VAR 0 13
37902: PPUSH
37903: LD_VAR 0 13
37907: PUSH
37908: LD_INT 1
37910: PLUS
37911: PPUSH
37912: LD_VAR 0 11
37916: PUSH
37917: LD_VAR 0 12
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PPUSH
37926: CALL_OW 2
37930: ST_TO_ADDR
// end ;
37931: GO 37839
37933: POP
37934: POP
37935: GO 37819
37937: POP
37938: POP
// if not list then
37939: LD_VAR 0 13
37943: NOT
37944: IFFALSE 37948
// exit ;
37946: GO 38019
// for i in list do
37948: LD_ADDR_VAR 0 6
37952: PUSH
37953: LD_VAR 0 13
37957: PUSH
37958: FOR_IN
37959: IFFALSE 38017
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37961: LD_VAR 0 1
37965: PPUSH
37966: LD_STRING M
37968: PUSH
37969: LD_VAR 0 6
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PUSH
37978: LD_VAR 0 6
37982: PUSH
37983: LD_INT 2
37985: ARRAY
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: PPUSH
38011: CALL_OW 447
38015: GO 37958
38017: POP
38018: POP
// end ;
38019: LD_VAR 0 5
38023: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38024: LD_EXP 112
38028: NOT
38029: IFFALSE 38079
38031: GO 38033
38033: DISABLE
// begin initHack := true ;
38034: LD_ADDR_EXP 112
38038: PUSH
38039: LD_INT 1
38041: ST_TO_ADDR
// hackTanks := [ ] ;
38042: LD_ADDR_EXP 113
38046: PUSH
38047: EMPTY
38048: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38049: LD_ADDR_EXP 114
38053: PUSH
38054: EMPTY
38055: ST_TO_ADDR
// hackLimit := 3 ;
38056: LD_ADDR_EXP 115
38060: PUSH
38061: LD_INT 3
38063: ST_TO_ADDR
// hackDist := 12 ;
38064: LD_ADDR_EXP 116
38068: PUSH
38069: LD_INT 12
38071: ST_TO_ADDR
// hackCounter := [ ] ;
38072: LD_ADDR_EXP 117
38076: PUSH
38077: EMPTY
38078: ST_TO_ADDR
// end ;
38079: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38080: LD_EXP 112
38084: PUSH
38085: LD_INT 34
38087: PUSH
38088: LD_INT 99
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PPUSH
38095: CALL_OW 69
38099: AND
38100: IFFALSE 38353
38102: GO 38104
38104: DISABLE
38105: LD_INT 0
38107: PPUSH
38108: PPUSH
// begin enable ;
38109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38110: LD_ADDR_VAR 0 1
38114: PUSH
38115: LD_INT 34
38117: PUSH
38118: LD_INT 99
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL_OW 69
38129: PUSH
38130: FOR_IN
38131: IFFALSE 38351
// begin if not i in hackTanks then
38133: LD_VAR 0 1
38137: PUSH
38138: LD_EXP 113
38142: IN
38143: NOT
38144: IFFALSE 38227
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38146: LD_ADDR_EXP 113
38150: PUSH
38151: LD_EXP 113
38155: PPUSH
38156: LD_EXP 113
38160: PUSH
38161: LD_INT 1
38163: PLUS
38164: PPUSH
38165: LD_VAR 0 1
38169: PPUSH
38170: CALL_OW 1
38174: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38175: LD_ADDR_EXP 114
38179: PUSH
38180: LD_EXP 114
38184: PPUSH
38185: LD_EXP 114
38189: PUSH
38190: LD_INT 1
38192: PLUS
38193: PPUSH
38194: EMPTY
38195: PPUSH
38196: CALL_OW 1
38200: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38201: LD_ADDR_EXP 117
38205: PUSH
38206: LD_EXP 117
38210: PPUSH
38211: LD_EXP 117
38215: PUSH
38216: LD_INT 1
38218: PLUS
38219: PPUSH
38220: EMPTY
38221: PPUSH
38222: CALL_OW 1
38226: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 302
38236: NOT
38237: IFFALSE 38250
// begin HackUnlinkAll ( i ) ;
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL 38356 0 1
// continue ;
38248: GO 38130
// end ; HackCheckCapturedStatus ( i ) ;
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL 38799 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38259: LD_ADDR_VAR 0 2
38263: PUSH
38264: LD_INT 81
38266: PUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 255
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 33
38283: PUSH
38284: LD_INT 3
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 91
38293: PUSH
38294: LD_VAR 0 1
38298: PUSH
38299: LD_EXP 116
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 50
38311: PUSH
38312: EMPTY
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: PPUSH
38321: CALL_OW 69
38325: ST_TO_ADDR
// if not tmp then
38326: LD_VAR 0 2
38330: NOT
38331: IFFALSE 38335
// continue ;
38333: GO 38130
// HackLink ( i , tmp ) ;
38335: LD_VAR 0 1
38339: PPUSH
38340: LD_VAR 0 2
38344: PPUSH
38345: CALL 38492 0 2
// end ;
38349: GO 38130
38351: POP
38352: POP
// end ;
38353: PPOPN 2
38355: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38356: LD_INT 0
38358: PPUSH
38359: PPUSH
38360: PPUSH
// if not hack in hackTanks then
38361: LD_VAR 0 1
38365: PUSH
38366: LD_EXP 113
38370: IN
38371: NOT
38372: IFFALSE 38376
// exit ;
38374: GO 38487
// index := GetElementIndex ( hackTanks , hack ) ;
38376: LD_ADDR_VAR 0 4
38380: PUSH
38381: LD_EXP 113
38385: PPUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL 46104 0 2
38395: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38396: LD_EXP 114
38400: PUSH
38401: LD_VAR 0 4
38405: ARRAY
38406: IFFALSE 38487
// begin for i in hackTanksCaptured [ index ] do
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_EXP 114
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: PUSH
38424: FOR_IN
38425: IFFALSE 38451
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38427: LD_VAR 0 3
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_VAR 0 3
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: PPUSH
38445: CALL_OW 235
38449: GO 38424
38451: POP
38452: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38453: LD_ADDR_EXP 114
38457: PUSH
38458: LD_EXP 114
38462: PPUSH
38463: LD_VAR 0 4
38467: PPUSH
38468: EMPTY
38469: PPUSH
38470: CALL_OW 1
38474: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38475: LD_VAR 0 1
38479: PPUSH
38480: LD_INT 0
38482: PPUSH
38483: CALL_OW 505
// end ; end ;
38487: LD_VAR 0 2
38491: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
38496: PPUSH
// if not hack in hackTanks or not vehicles then
38497: LD_VAR 0 1
38501: PUSH
38502: LD_EXP 113
38506: IN
38507: NOT
38508: PUSH
38509: LD_VAR 0 2
38513: NOT
38514: OR
38515: IFFALSE 38519
// exit ;
38517: GO 38794
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38519: LD_ADDR_VAR 0 2
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 2
38533: PPUSH
38534: LD_INT 1
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: CALL 46754 0 4
38544: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: LD_EXP 113
38554: PPUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL 46104 0 2
38564: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38565: LD_EXP 114
38569: PUSH
38570: LD_VAR 0 5
38574: ARRAY
38575: PUSH
38576: LD_EXP 115
38580: LESS
38581: IFFALSE 38770
// begin for i := 1 to vehicles do
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: DOUBLE
38589: LD_INT 1
38591: DEC
38592: ST_TO_ADDR
38593: LD_VAR 0 2
38597: PUSH
38598: FOR_TO
38599: IFFALSE 38768
// begin if hackTanksCaptured [ index ] = hackLimit then
38601: LD_EXP 114
38605: PUSH
38606: LD_VAR 0 5
38610: ARRAY
38611: PUSH
38612: LD_EXP 115
38616: EQUAL
38617: IFFALSE 38621
// break ;
38619: GO 38768
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38621: LD_ADDR_EXP 117
38625: PUSH
38626: LD_EXP 117
38630: PPUSH
38631: LD_VAR 0 5
38635: PPUSH
38636: LD_EXP 117
38640: PUSH
38641: LD_VAR 0 5
38645: ARRAY
38646: PUSH
38647: LD_INT 1
38649: PLUS
38650: PPUSH
38651: CALL_OW 1
38655: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38656: LD_ADDR_EXP 114
38660: PUSH
38661: LD_EXP 114
38665: PPUSH
38666: LD_VAR 0 5
38670: PUSH
38671: LD_EXP 114
38675: PUSH
38676: LD_VAR 0 5
38680: ARRAY
38681: PUSH
38682: LD_INT 1
38684: PLUS
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PPUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_VAR 0 4
38699: ARRAY
38700: PUSH
38701: LD_VAR 0 2
38705: PUSH
38706: LD_VAR 0 4
38710: ARRAY
38711: PPUSH
38712: CALL_OW 255
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL 46319 0 3
38725: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38726: LD_VAR 0 2
38730: PUSH
38731: LD_VAR 0 4
38735: ARRAY
38736: PPUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 255
38746: PPUSH
38747: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38751: LD_VAR 0 2
38755: PUSH
38756: LD_VAR 0 4
38760: ARRAY
38761: PPUSH
38762: CALL_OW 141
// end ;
38766: GO 38598
38768: POP
38769: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38770: LD_VAR 0 1
38774: PPUSH
38775: LD_EXP 114
38779: PUSH
38780: LD_VAR 0 5
38784: ARRAY
38785: PUSH
38786: LD_INT 0
38788: PLUS
38789: PPUSH
38790: CALL_OW 505
// end ;
38794: LD_VAR 0 3
38798: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38799: LD_INT 0
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
// if not hack in hackTanks then
38805: LD_VAR 0 1
38809: PUSH
38810: LD_EXP 113
38814: IN
38815: NOT
38816: IFFALSE 38820
// exit ;
38818: GO 39060
// index := GetElementIndex ( hackTanks , hack ) ;
38820: LD_ADDR_VAR 0 4
38824: PUSH
38825: LD_EXP 113
38829: PPUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: CALL 46104 0 2
38839: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38840: LD_ADDR_VAR 0 3
38844: PUSH
38845: DOUBLE
38846: LD_EXP 114
38850: PUSH
38851: LD_VAR 0 4
38855: ARRAY
38856: INC
38857: ST_TO_ADDR
38858: LD_INT 1
38860: PUSH
38861: FOR_DOWNTO
38862: IFFALSE 39034
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38864: LD_ADDR_VAR 0 5
38868: PUSH
38869: LD_EXP 114
38873: PUSH
38874: LD_VAR 0 4
38878: ARRAY
38879: PUSH
38880: LD_VAR 0 3
38884: ARRAY
38885: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38886: LD_VAR 0 5
38890: PUSH
38891: LD_INT 1
38893: ARRAY
38894: PPUSH
38895: CALL_OW 302
38899: NOT
38900: PUSH
38901: LD_VAR 0 5
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PPUSH
38910: CALL_OW 255
38914: PUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 255
38924: NONEQUAL
38925: OR
38926: IFFALSE 39032
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38928: LD_VAR 0 5
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: CALL_OW 305
38941: PUSH
38942: LD_VAR 0 5
38946: PUSH
38947: LD_INT 1
38949: ARRAY
38950: PPUSH
38951: CALL_OW 255
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 255
38965: EQUAL
38966: AND
38967: IFFALSE 38991
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38969: LD_VAR 0 5
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PPUSH
38978: LD_VAR 0 5
38982: PUSH
38983: LD_INT 2
38985: ARRAY
38986: PPUSH
38987: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38991: LD_ADDR_EXP 114
38995: PUSH
38996: LD_EXP 114
39000: PPUSH
39001: LD_VAR 0 4
39005: PPUSH
39006: LD_EXP 114
39010: PUSH
39011: LD_VAR 0 4
39015: ARRAY
39016: PPUSH
39017: LD_VAR 0 3
39021: PPUSH
39022: CALL_OW 3
39026: PPUSH
39027: CALL_OW 1
39031: ST_TO_ADDR
// end ; end ;
39032: GO 38861
39034: POP
39035: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39036: LD_VAR 0 1
39040: PPUSH
39041: LD_EXP 114
39045: PUSH
39046: LD_VAR 0 4
39050: ARRAY
39051: PUSH
39052: LD_INT 0
39054: PLUS
39055: PPUSH
39056: CALL_OW 505
// end ;
39060: LD_VAR 0 2
39064: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39065: LD_INT 0
39067: PPUSH
39068: PPUSH
39069: PPUSH
39070: PPUSH
// if not hack in hackTanks then
39071: LD_VAR 0 1
39075: PUSH
39076: LD_EXP 113
39080: IN
39081: NOT
39082: IFFALSE 39086
// exit ;
39084: GO 39171
// index := GetElementIndex ( hackTanks , hack ) ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: LD_EXP 113
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL 46104 0 2
39105: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: DOUBLE
39112: LD_INT 1
39114: DEC
39115: ST_TO_ADDR
39116: LD_EXP 114
39120: PUSH
39121: LD_VAR 0 5
39125: ARRAY
39126: PUSH
39127: FOR_TO
39128: IFFALSE 39169
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39130: LD_EXP 114
39134: PUSH
39135: LD_VAR 0 5
39139: ARRAY
39140: PUSH
39141: LD_VAR 0 4
39145: ARRAY
39146: PUSH
39147: LD_INT 1
39149: ARRAY
39150: PUSH
39151: LD_VAR 0 2
39155: EQUAL
39156: IFFALSE 39167
// KillUnit ( vehicle ) ;
39158: LD_VAR 0 2
39162: PPUSH
39163: CALL_OW 66
39167: GO 39127
39169: POP
39170: POP
// end ;
39171: LD_VAR 0 3
39175: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39176: LD_EXP 118
39180: NOT
39181: IFFALSE 39216
39183: GO 39185
39185: DISABLE
// begin initMiner := true ;
39186: LD_ADDR_EXP 118
39190: PUSH
39191: LD_INT 1
39193: ST_TO_ADDR
// minersList := [ ] ;
39194: LD_ADDR_EXP 119
39198: PUSH
39199: EMPTY
39200: ST_TO_ADDR
// minerMinesList := [ ] ;
39201: LD_ADDR_EXP 120
39205: PUSH
39206: EMPTY
39207: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39208: LD_ADDR_EXP 121
39212: PUSH
39213: LD_INT 5
39215: ST_TO_ADDR
// end ;
39216: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39217: LD_EXP 118
39221: PUSH
39222: LD_INT 34
39224: PUSH
39225: LD_INT 81
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PPUSH
39232: CALL_OW 69
39236: AND
39237: IFFALSE 39698
39239: GO 39241
39241: DISABLE
39242: LD_INT 0
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
// begin enable ;
39248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39249: LD_ADDR_VAR 0 1
39253: PUSH
39254: LD_INT 34
39256: PUSH
39257: LD_INT 81
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PPUSH
39264: CALL_OW 69
39268: PUSH
39269: FOR_IN
39270: IFFALSE 39342
// begin if not i in minersList then
39272: LD_VAR 0 1
39276: PUSH
39277: LD_EXP 119
39281: IN
39282: NOT
39283: IFFALSE 39340
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39285: LD_ADDR_EXP 119
39289: PUSH
39290: LD_EXP 119
39294: PPUSH
39295: LD_EXP 119
39299: PUSH
39300: LD_INT 1
39302: PLUS
39303: PPUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: CALL_OW 1
39313: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39314: LD_ADDR_EXP 120
39318: PUSH
39319: LD_EXP 120
39323: PPUSH
39324: LD_EXP 120
39328: PUSH
39329: LD_INT 1
39331: PLUS
39332: PPUSH
39333: EMPTY
39334: PPUSH
39335: CALL_OW 1
39339: ST_TO_ADDR
// end end ;
39340: GO 39269
39342: POP
39343: POP
// for i := minerMinesList downto 1 do
39344: LD_ADDR_VAR 0 1
39348: PUSH
39349: DOUBLE
39350: LD_EXP 120
39354: INC
39355: ST_TO_ADDR
39356: LD_INT 1
39358: PUSH
39359: FOR_DOWNTO
39360: IFFALSE 39696
// begin if IsLive ( minersList [ i ] ) then
39362: LD_EXP 119
39366: PUSH
39367: LD_VAR 0 1
39371: ARRAY
39372: PPUSH
39373: CALL_OW 300
39377: IFFALSE 39405
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39379: LD_EXP 119
39383: PUSH
39384: LD_VAR 0 1
39388: ARRAY
39389: PPUSH
39390: LD_EXP 120
39394: PUSH
39395: LD_VAR 0 1
39399: ARRAY
39400: PPUSH
39401: CALL_OW 505
// if not minerMinesList [ i ] then
39405: LD_EXP 120
39409: PUSH
39410: LD_VAR 0 1
39414: ARRAY
39415: NOT
39416: IFFALSE 39420
// continue ;
39418: GO 39359
// for j := minerMinesList [ i ] downto 1 do
39420: LD_ADDR_VAR 0 2
39424: PUSH
39425: DOUBLE
39426: LD_EXP 120
39430: PUSH
39431: LD_VAR 0 1
39435: ARRAY
39436: INC
39437: ST_TO_ADDR
39438: LD_INT 1
39440: PUSH
39441: FOR_DOWNTO
39442: IFFALSE 39692
// begin side := GetSide ( minersList [ i ] ) ;
39444: LD_ADDR_VAR 0 3
39448: PUSH
39449: LD_EXP 119
39453: PUSH
39454: LD_VAR 0 1
39458: ARRAY
39459: PPUSH
39460: CALL_OW 255
39464: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39465: LD_ADDR_VAR 0 4
39469: PUSH
39470: LD_EXP 120
39474: PUSH
39475: LD_VAR 0 1
39479: ARRAY
39480: PUSH
39481: LD_VAR 0 2
39485: ARRAY
39486: PUSH
39487: LD_INT 1
39489: ARRAY
39490: PPUSH
39491: LD_EXP 120
39495: PUSH
39496: LD_VAR 0 1
39500: ARRAY
39501: PUSH
39502: LD_VAR 0 2
39506: ARRAY
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL_OW 428
39516: ST_TO_ADDR
// if not tmp then
39517: LD_VAR 0 4
39521: NOT
39522: IFFALSE 39526
// continue ;
39524: GO 39441
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39526: LD_VAR 0 4
39530: PUSH
39531: LD_INT 81
39533: PUSH
39534: LD_VAR 0 3
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PPUSH
39543: CALL_OW 69
39547: IN
39548: PUSH
39549: LD_EXP 120
39553: PUSH
39554: LD_VAR 0 1
39558: ARRAY
39559: PUSH
39560: LD_VAR 0 2
39564: ARRAY
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: PPUSH
39570: LD_EXP 120
39574: PUSH
39575: LD_VAR 0 1
39579: ARRAY
39580: PUSH
39581: LD_VAR 0 2
39585: ARRAY
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: PPUSH
39591: CALL_OW 458
39595: AND
39596: IFFALSE 39690
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39598: LD_EXP 120
39602: PUSH
39603: LD_VAR 0 1
39607: ARRAY
39608: PUSH
39609: LD_VAR 0 2
39613: ARRAY
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PPUSH
39619: LD_EXP 120
39623: PUSH
39624: LD_VAR 0 1
39628: ARRAY
39629: PUSH
39630: LD_VAR 0 2
39634: ARRAY
39635: PUSH
39636: LD_INT 2
39638: ARRAY
39639: PPUSH
39640: LD_VAR 0 3
39644: PPUSH
39645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39649: LD_ADDR_EXP 120
39653: PUSH
39654: LD_EXP 120
39658: PPUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: LD_EXP 120
39668: PUSH
39669: LD_VAR 0 1
39673: ARRAY
39674: PPUSH
39675: LD_VAR 0 2
39679: PPUSH
39680: CALL_OW 3
39684: PPUSH
39685: CALL_OW 1
39689: ST_TO_ADDR
// end ; end ;
39690: GO 39441
39692: POP
39693: POP
// end ;
39694: GO 39359
39696: POP
39697: POP
// end ;
39698: PPOPN 4
39700: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39701: LD_INT 0
39703: PPUSH
39704: PPUSH
// result := false ;
39705: LD_ADDR_VAR 0 4
39709: PUSH
39710: LD_INT 0
39712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39713: LD_VAR 0 1
39717: PPUSH
39718: CALL_OW 264
39722: PUSH
39723: LD_INT 81
39725: EQUAL
39726: NOT
39727: IFFALSE 39731
// exit ;
39729: GO 39971
// index := GetElementIndex ( minersList , unit ) ;
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: LD_EXP 119
39740: PPUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: CALL 46104 0 2
39750: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39751: LD_EXP 120
39755: PUSH
39756: LD_VAR 0 5
39760: ARRAY
39761: PUSH
39762: LD_EXP 121
39766: GREATEREQUAL
39767: IFFALSE 39771
// exit ;
39769: GO 39971
// ComMoveXY ( unit , x , y ) ;
39771: LD_VAR 0 1
39775: PPUSH
39776: LD_VAR 0 2
39780: PPUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39790: LD_INT 35
39792: PPUSH
39793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39797: LD_VAR 0 1
39801: PPUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: CALL 77459 0 3
39816: NOT
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 314
39827: AND
39828: IFFALSE 39832
// exit ;
39830: GO 39971
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39832: LD_VAR 0 2
39836: PPUSH
39837: LD_VAR 0 3
39841: PPUSH
39842: CALL_OW 428
39846: PUSH
39847: LD_VAR 0 1
39851: EQUAL
39852: PUSH
39853: LD_VAR 0 1
39857: PPUSH
39858: CALL_OW 314
39862: NOT
39863: AND
39864: IFFALSE 39790
// PlaySoundXY ( x , y , PlantMine ) ;
39866: LD_VAR 0 2
39870: PPUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: LD_STRING PlantMine
39878: PPUSH
39879: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39883: LD_VAR 0 2
39887: PPUSH
39888: LD_VAR 0 3
39892: PPUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 255
39902: PPUSH
39903: LD_INT 0
39905: PPUSH
39906: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39910: LD_ADDR_EXP 120
39914: PUSH
39915: LD_EXP 120
39919: PPUSH
39920: LD_VAR 0 5
39924: PUSH
39925: LD_EXP 120
39929: PUSH
39930: LD_VAR 0 5
39934: ARRAY
39935: PUSH
39936: LD_INT 1
39938: PLUS
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PPUSH
39944: LD_VAR 0 2
39948: PUSH
39949: LD_VAR 0 3
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PPUSH
39958: CALL 46319 0 3
39962: ST_TO_ADDR
// result := true ;
39963: LD_ADDR_VAR 0 4
39967: PUSH
39968: LD_INT 1
39970: ST_TO_ADDR
// end ;
39971: LD_VAR 0 4
39975: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39976: LD_INT 0
39978: PPUSH
39979: PPUSH
39980: PPUSH
// if not unit in minersList then
39981: LD_VAR 0 1
39985: PUSH
39986: LD_EXP 119
39990: IN
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40388
// index := GetElementIndex ( minersList , unit ) ;
39996: LD_ADDR_VAR 0 6
40000: PUSH
40001: LD_EXP 119
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL 46104 0 2
40015: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40016: LD_ADDR_VAR 0 5
40020: PUSH
40021: DOUBLE
40022: LD_EXP 120
40026: PUSH
40027: LD_VAR 0 6
40031: ARRAY
40032: INC
40033: ST_TO_ADDR
40034: LD_INT 1
40036: PUSH
40037: FOR_DOWNTO
40038: IFFALSE 40199
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40040: LD_EXP 120
40044: PUSH
40045: LD_VAR 0 6
40049: ARRAY
40050: PUSH
40051: LD_VAR 0 5
40055: ARRAY
40056: PUSH
40057: LD_INT 1
40059: ARRAY
40060: PUSH
40061: LD_VAR 0 2
40065: EQUAL
40066: PUSH
40067: LD_EXP 120
40071: PUSH
40072: LD_VAR 0 6
40076: ARRAY
40077: PUSH
40078: LD_VAR 0 5
40082: ARRAY
40083: PUSH
40084: LD_INT 2
40086: ARRAY
40087: PUSH
40088: LD_VAR 0 3
40092: EQUAL
40093: AND
40094: IFFALSE 40197
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40096: LD_EXP 120
40100: PUSH
40101: LD_VAR 0 6
40105: ARRAY
40106: PUSH
40107: LD_VAR 0 5
40111: ARRAY
40112: PUSH
40113: LD_INT 1
40115: ARRAY
40116: PPUSH
40117: LD_EXP 120
40121: PUSH
40122: LD_VAR 0 6
40126: ARRAY
40127: PUSH
40128: LD_VAR 0 5
40132: ARRAY
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: PPUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 255
40147: PPUSH
40148: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40152: LD_ADDR_EXP 120
40156: PUSH
40157: LD_EXP 120
40161: PPUSH
40162: LD_VAR 0 6
40166: PPUSH
40167: LD_EXP 120
40171: PUSH
40172: LD_VAR 0 6
40176: ARRAY
40177: PPUSH
40178: LD_VAR 0 5
40182: PPUSH
40183: CALL_OW 3
40187: PPUSH
40188: CALL_OW 1
40192: ST_TO_ADDR
// exit ;
40193: POP
40194: POP
40195: GO 40388
// end ; end ;
40197: GO 40037
40199: POP
40200: POP
// for i := minerMinesList [ index ] downto 1 do
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: DOUBLE
40207: LD_EXP 120
40211: PUSH
40212: LD_VAR 0 6
40216: ARRAY
40217: INC
40218: ST_TO_ADDR
40219: LD_INT 1
40221: PUSH
40222: FOR_DOWNTO
40223: IFFALSE 40386
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40225: LD_EXP 120
40229: PUSH
40230: LD_VAR 0 6
40234: ARRAY
40235: PUSH
40236: LD_VAR 0 5
40240: ARRAY
40241: PUSH
40242: LD_INT 1
40244: ARRAY
40245: PPUSH
40246: LD_EXP 120
40250: PUSH
40251: LD_VAR 0 6
40255: ARRAY
40256: PUSH
40257: LD_VAR 0 5
40261: ARRAY
40262: PUSH
40263: LD_INT 2
40265: ARRAY
40266: PPUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: LD_VAR 0 3
40276: PPUSH
40277: CALL_OW 298
40281: PUSH
40282: LD_INT 6
40284: LESS
40285: IFFALSE 40384
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40287: LD_EXP 120
40291: PUSH
40292: LD_VAR 0 6
40296: ARRAY
40297: PUSH
40298: LD_VAR 0 5
40302: ARRAY
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: PPUSH
40308: LD_EXP 120
40312: PUSH
40313: LD_VAR 0 6
40317: ARRAY
40318: PUSH
40319: LD_VAR 0 5
40323: ARRAY
40324: PUSH
40325: LD_INT 2
40327: ARRAY
40328: PPUSH
40329: LD_VAR 0 1
40333: PPUSH
40334: CALL_OW 255
40338: PPUSH
40339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40343: LD_ADDR_EXP 120
40347: PUSH
40348: LD_EXP 120
40352: PPUSH
40353: LD_VAR 0 6
40357: PPUSH
40358: LD_EXP 120
40362: PUSH
40363: LD_VAR 0 6
40367: ARRAY
40368: PPUSH
40369: LD_VAR 0 5
40373: PPUSH
40374: CALL_OW 3
40378: PPUSH
40379: CALL_OW 1
40383: ST_TO_ADDR
// end ; end ;
40384: GO 40222
40386: POP
40387: POP
// end ;
40388: LD_VAR 0 4
40392: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40393: LD_INT 0
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 264
40413: PUSH
40414: LD_INT 81
40416: EQUAL
40417: NOT
40418: PUSH
40419: LD_VAR 0 1
40423: PUSH
40424: LD_EXP 119
40428: IN
40429: NOT
40430: OR
40431: IFFALSE 40435
// exit ;
40433: GO 40757
// index := GetElementIndex ( minersList , unit ) ;
40435: LD_ADDR_VAR 0 6
40439: PUSH
40440: LD_EXP 119
40444: PPUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL 46104 0 2
40454: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_EXP 121
40464: PUSH
40465: LD_EXP 120
40469: PUSH
40470: LD_VAR 0 6
40474: ARRAY
40475: MINUS
40476: ST_TO_ADDR
// if not minesFreeAmount then
40477: LD_VAR 0 8
40481: NOT
40482: IFFALSE 40486
// exit ;
40484: GO 40757
// tmp := [ ] ;
40486: LD_ADDR_VAR 0 7
40490: PUSH
40491: EMPTY
40492: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40493: LD_ADDR_VAR 0 5
40497: PUSH
40498: DOUBLE
40499: LD_INT 1
40501: DEC
40502: ST_TO_ADDR
40503: LD_VAR 0 8
40507: PUSH
40508: FOR_TO
40509: IFFALSE 40704
// begin _d := rand ( 0 , 5 ) ;
40511: LD_ADDR_VAR 0 11
40515: PUSH
40516: LD_INT 0
40518: PPUSH
40519: LD_INT 5
40521: PPUSH
40522: CALL_OW 12
40526: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40527: LD_ADDR_VAR 0 12
40531: PUSH
40532: LD_INT 2
40534: PPUSH
40535: LD_INT 6
40537: PPUSH
40538: CALL_OW 12
40542: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40543: LD_ADDR_VAR 0 9
40547: PUSH
40548: LD_VAR 0 2
40552: PPUSH
40553: LD_VAR 0 11
40557: PPUSH
40558: LD_VAR 0 12
40562: PPUSH
40563: CALL_OW 272
40567: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40568: LD_ADDR_VAR 0 10
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: LD_VAR 0 11
40582: PPUSH
40583: LD_VAR 0 12
40587: PPUSH
40588: CALL_OW 273
40592: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40593: LD_VAR 0 9
40597: PPUSH
40598: LD_VAR 0 10
40602: PPUSH
40603: CALL_OW 488
40607: PUSH
40608: LD_VAR 0 9
40612: PUSH
40613: LD_VAR 0 10
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_VAR 0 7
40626: IN
40627: NOT
40628: AND
40629: PUSH
40630: LD_VAR 0 9
40634: PPUSH
40635: LD_VAR 0 10
40639: PPUSH
40640: CALL_OW 458
40644: NOT
40645: AND
40646: IFFALSE 40688
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40648: LD_ADDR_VAR 0 7
40652: PUSH
40653: LD_VAR 0 7
40657: PPUSH
40658: LD_VAR 0 7
40662: PUSH
40663: LD_INT 1
40665: PLUS
40666: PPUSH
40667: LD_VAR 0 9
40671: PUSH
40672: LD_VAR 0 10
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PPUSH
40681: CALL_OW 1
40685: ST_TO_ADDR
40686: GO 40702
// i := i - 1 ;
40688: LD_ADDR_VAR 0 5
40692: PUSH
40693: LD_VAR 0 5
40697: PUSH
40698: LD_INT 1
40700: MINUS
40701: ST_TO_ADDR
// end ;
40702: GO 40508
40704: POP
40705: POP
// for i in tmp do
40706: LD_ADDR_VAR 0 5
40710: PUSH
40711: LD_VAR 0 7
40715: PUSH
40716: FOR_IN
40717: IFFALSE 40755
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40719: LD_VAR 0 1
40723: PPUSH
40724: LD_VAR 0 5
40728: PUSH
40729: LD_INT 1
40731: ARRAY
40732: PPUSH
40733: LD_VAR 0 5
40737: PUSH
40738: LD_INT 2
40740: ARRAY
40741: PPUSH
40742: CALL 39701 0 3
40746: NOT
40747: IFFALSE 40753
// exit ;
40749: POP
40750: POP
40751: GO 40757
40753: GO 40716
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 4
40761: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
// if not GetClass ( unit ) = class_sniper then
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 257
40780: PUSH
40781: LD_INT 5
40783: EQUAL
40784: NOT
40785: IFFALSE 40789
// exit ;
40787: GO 41177
// dist := 8 ;
40789: LD_ADDR_VAR 0 5
40793: PUSH
40794: LD_INT 8
40796: ST_TO_ADDR
// viewRange := 12 ;
40797: LD_ADDR_VAR 0 7
40801: PUSH
40802: LD_INT 12
40804: ST_TO_ADDR
// side := GetSide ( unit ) ;
40805: LD_ADDR_VAR 0 6
40809: PUSH
40810: LD_VAR 0 1
40814: PPUSH
40815: CALL_OW 255
40819: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40820: LD_INT 61
40822: PPUSH
40823: LD_VAR 0 6
40827: PPUSH
40828: CALL_OW 321
40832: PUSH
40833: LD_INT 2
40835: EQUAL
40836: IFFALSE 40846
// viewRange := 16 ;
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: LD_INT 16
40845: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_VAR 0 2
40855: PPUSH
40856: LD_VAR 0 3
40860: PPUSH
40861: CALL_OW 297
40865: PUSH
40866: LD_VAR 0 5
40870: GREATER
40871: IFFALSE 40950
// begin ComMoveXY ( unit , x , y ) ;
40873: LD_VAR 0 1
40877: PPUSH
40878: LD_VAR 0 2
40882: PPUSH
40883: LD_VAR 0 3
40887: PPUSH
40888: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40892: LD_INT 35
40894: PPUSH
40895: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: CALL 77459 0 3
40918: NOT
40919: IFFALSE 40923
// exit ;
40921: GO 41177
// until GetDistUnitXY ( unit , x , y ) < dist ;
40923: LD_VAR 0 1
40927: PPUSH
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_VAR 0 3
40937: PPUSH
40938: CALL_OW 297
40942: PUSH
40943: LD_VAR 0 5
40947: LESS
40948: IFFALSE 40892
// end ; ComTurnXY ( unit , x , y ) ;
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: CALL_OW 118
// wait ( 5 ) ;
40969: LD_INT 5
40971: PPUSH
40972: CALL_OW 67
// _d := GetDir ( unit ) ;
40976: LD_ADDR_VAR 0 10
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: CALL_OW 254
40990: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: LD_VAR 0 1
41000: PPUSH
41001: CALL_OW 250
41005: PPUSH
41006: LD_VAR 0 10
41010: PPUSH
41011: LD_VAR 0 5
41015: PPUSH
41016: CALL_OW 272
41020: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41021: LD_ADDR_VAR 0 9
41025: PUSH
41026: LD_VAR 0 1
41030: PPUSH
41031: CALL_OW 251
41035: PPUSH
41036: LD_VAR 0 10
41040: PPUSH
41041: LD_VAR 0 5
41045: PPUSH
41046: CALL_OW 273
41050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41051: LD_VAR 0 8
41055: PPUSH
41056: LD_VAR 0 9
41060: PPUSH
41061: CALL_OW 488
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41177
// ComAnimCustom ( unit , 1 ) ;
41070: LD_VAR 0 1
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41082: LD_VAR 0 8
41086: PPUSH
41087: LD_VAR 0 9
41091: PPUSH
41092: LD_VAR 0 6
41096: PPUSH
41097: LD_VAR 0 7
41101: PPUSH
41102: CALL_OW 330
// repeat wait ( 1 ) ;
41106: LD_INT 1
41108: PPUSH
41109: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 316
41122: PUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 314
41132: OR
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 302
41143: NOT
41144: OR
41145: PUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: CALL_OW 301
41155: OR
41156: IFFALSE 41106
// RemoveSeeing ( _x , _y , side ) ;
41158: LD_VAR 0 8
41162: PPUSH
41163: LD_VAR 0 9
41167: PPUSH
41168: LD_VAR 0 6
41172: PPUSH
41173: CALL_OW 331
// end ; end_of_file
41177: LD_VAR 0 4
41181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41182: LD_INT 0
41184: PPUSH
41185: PPUSH
// if exist_mode then
41186: LD_VAR 0 2
41190: IFFALSE 41215
// unit := CreateCharacter ( prefix & ident ) else
41192: LD_ADDR_VAR 0 5
41196: PUSH
41197: LD_VAR 0 3
41201: PUSH
41202: LD_VAR 0 1
41206: STR
41207: PPUSH
41208: CALL_OW 34
41212: ST_TO_ADDR
41213: GO 41230
// unit := NewCharacter ( ident ) ;
41215: LD_ADDR_VAR 0 5
41219: PUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 25
41229: ST_TO_ADDR
// result := unit ;
41230: LD_ADDR_VAR 0 4
41234: PUSH
41235: LD_VAR 0 5
41239: ST_TO_ADDR
// end ;
41240: LD_VAR 0 4
41244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41245: LD_INT 0
41247: PPUSH
41248: PPUSH
// if not side or not nation then
41249: LD_VAR 0 1
41253: NOT
41254: PUSH
41255: LD_VAR 0 2
41259: NOT
41260: OR
41261: IFFALSE 41265
// exit ;
41263: GO 42033
// case nation of nation_american :
41265: LD_VAR 0 2
41269: PUSH
41270: LD_INT 1
41272: DOUBLE
41273: EQUAL
41274: IFTRUE 41278
41276: GO 41492
41278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41279: LD_ADDR_VAR 0 4
41283: PUSH
41284: LD_INT 35
41286: PUSH
41287: LD_INT 45
41289: PUSH
41290: LD_INT 46
41292: PUSH
41293: LD_INT 47
41295: PUSH
41296: LD_INT 82
41298: PUSH
41299: LD_INT 83
41301: PUSH
41302: LD_INT 84
41304: PUSH
41305: LD_INT 85
41307: PUSH
41308: LD_INT 86
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 6
41319: PUSH
41320: LD_INT 15
41322: PUSH
41323: LD_INT 16
41325: PUSH
41326: LD_INT 7
41328: PUSH
41329: LD_INT 12
41331: PUSH
41332: LD_INT 13
41334: PUSH
41335: LD_INT 10
41337: PUSH
41338: LD_INT 14
41340: PUSH
41341: LD_INT 20
41343: PUSH
41344: LD_INT 21
41346: PUSH
41347: LD_INT 22
41349: PUSH
41350: LD_INT 25
41352: PUSH
41353: LD_INT 32
41355: PUSH
41356: LD_INT 27
41358: PUSH
41359: LD_INT 36
41361: PUSH
41362: LD_INT 69
41364: PUSH
41365: LD_INT 39
41367: PUSH
41368: LD_INT 34
41370: PUSH
41371: LD_INT 40
41373: PUSH
41374: LD_INT 48
41376: PUSH
41377: LD_INT 49
41379: PUSH
41380: LD_INT 50
41382: PUSH
41383: LD_INT 51
41385: PUSH
41386: LD_INT 52
41388: PUSH
41389: LD_INT 53
41391: PUSH
41392: LD_INT 54
41394: PUSH
41395: LD_INT 55
41397: PUSH
41398: LD_INT 56
41400: PUSH
41401: LD_INT 57
41403: PUSH
41404: LD_INT 58
41406: PUSH
41407: LD_INT 59
41409: PUSH
41410: LD_INT 60
41412: PUSH
41413: LD_INT 61
41415: PUSH
41416: LD_INT 62
41418: PUSH
41419: LD_INT 80
41421: PUSH
41422: LD_INT 82
41424: PUSH
41425: LD_INT 83
41427: PUSH
41428: LD_INT 84
41430: PUSH
41431: LD_INT 85
41433: PUSH
41434: LD_INT 86
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
41490: GO 41957
41492: LD_INT 2
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41726
41500: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41501: LD_ADDR_VAR 0 4
41505: PUSH
41506: LD_INT 35
41508: PUSH
41509: LD_INT 45
41511: PUSH
41512: LD_INT 46
41514: PUSH
41515: LD_INT 47
41517: PUSH
41518: LD_INT 82
41520: PUSH
41521: LD_INT 83
41523: PUSH
41524: LD_INT 84
41526: PUSH
41527: LD_INT 85
41529: PUSH
41530: LD_INT 87
41532: PUSH
41533: LD_INT 70
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 11
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 4
41547: PUSH
41548: LD_INT 5
41550: PUSH
41551: LD_INT 6
41553: PUSH
41554: LD_INT 15
41556: PUSH
41557: LD_INT 18
41559: PUSH
41560: LD_INT 7
41562: PUSH
41563: LD_INT 17
41565: PUSH
41566: LD_INT 8
41568: PUSH
41569: LD_INT 20
41571: PUSH
41572: LD_INT 21
41574: PUSH
41575: LD_INT 22
41577: PUSH
41578: LD_INT 72
41580: PUSH
41581: LD_INT 26
41583: PUSH
41584: LD_INT 69
41586: PUSH
41587: LD_INT 39
41589: PUSH
41590: LD_INT 40
41592: PUSH
41593: LD_INT 41
41595: PUSH
41596: LD_INT 42
41598: PUSH
41599: LD_INT 43
41601: PUSH
41602: LD_INT 48
41604: PUSH
41605: LD_INT 49
41607: PUSH
41608: LD_INT 50
41610: PUSH
41611: LD_INT 51
41613: PUSH
41614: LD_INT 52
41616: PUSH
41617: LD_INT 53
41619: PUSH
41620: LD_INT 54
41622: PUSH
41623: LD_INT 55
41625: PUSH
41626: LD_INT 56
41628: PUSH
41629: LD_INT 60
41631: PUSH
41632: LD_INT 61
41634: PUSH
41635: LD_INT 62
41637: PUSH
41638: LD_INT 66
41640: PUSH
41641: LD_INT 67
41643: PUSH
41644: LD_INT 68
41646: PUSH
41647: LD_INT 81
41649: PUSH
41650: LD_INT 82
41652: PUSH
41653: LD_INT 83
41655: PUSH
41656: LD_INT 84
41658: PUSH
41659: LD_INT 85
41661: PUSH
41662: LD_INT 87
41664: PUSH
41665: LD_INT 88
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: ST_TO_ADDR
41724: GO 41957
41726: LD_INT 3
41728: DOUBLE
41729: EQUAL
41730: IFTRUE 41734
41732: GO 41956
41734: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41735: LD_ADDR_VAR 0 4
41739: PUSH
41740: LD_INT 46
41742: PUSH
41743: LD_INT 47
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 82
41754: PUSH
41755: LD_INT 83
41757: PUSH
41758: LD_INT 84
41760: PUSH
41761: LD_INT 85
41763: PUSH
41764: LD_INT 86
41766: PUSH
41767: LD_INT 11
41769: PUSH
41770: LD_INT 9
41772: PUSH
41773: LD_INT 20
41775: PUSH
41776: LD_INT 19
41778: PUSH
41779: LD_INT 21
41781: PUSH
41782: LD_INT 24
41784: PUSH
41785: LD_INT 22
41787: PUSH
41788: LD_INT 25
41790: PUSH
41791: LD_INT 28
41793: PUSH
41794: LD_INT 29
41796: PUSH
41797: LD_INT 30
41799: PUSH
41800: LD_INT 31
41802: PUSH
41803: LD_INT 37
41805: PUSH
41806: LD_INT 38
41808: PUSH
41809: LD_INT 32
41811: PUSH
41812: LD_INT 27
41814: PUSH
41815: LD_INT 33
41817: PUSH
41818: LD_INT 69
41820: PUSH
41821: LD_INT 39
41823: PUSH
41824: LD_INT 34
41826: PUSH
41827: LD_INT 40
41829: PUSH
41830: LD_INT 71
41832: PUSH
41833: LD_INT 23
41835: PUSH
41836: LD_INT 44
41838: PUSH
41839: LD_INT 48
41841: PUSH
41842: LD_INT 49
41844: PUSH
41845: LD_INT 50
41847: PUSH
41848: LD_INT 51
41850: PUSH
41851: LD_INT 52
41853: PUSH
41854: LD_INT 53
41856: PUSH
41857: LD_INT 54
41859: PUSH
41860: LD_INT 55
41862: PUSH
41863: LD_INT 56
41865: PUSH
41866: LD_INT 57
41868: PUSH
41869: LD_INT 58
41871: PUSH
41872: LD_INT 59
41874: PUSH
41875: LD_INT 63
41877: PUSH
41878: LD_INT 64
41880: PUSH
41881: LD_INT 65
41883: PUSH
41884: LD_INT 82
41886: PUSH
41887: LD_INT 83
41889: PUSH
41890: LD_INT 84
41892: PUSH
41893: LD_INT 85
41895: PUSH
41896: LD_INT 86
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
41954: GO 41957
41956: POP
// if state > - 1 and state < 3 then
41957: LD_VAR 0 3
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: GREATER
41966: PUSH
41967: LD_VAR 0 3
41971: PUSH
41972: LD_INT 3
41974: LESS
41975: AND
41976: IFFALSE 42033
// for i in result do
41978: LD_ADDR_VAR 0 5
41982: PUSH
41983: LD_VAR 0 4
41987: PUSH
41988: FOR_IN
41989: IFFALSE 42031
// if GetTech ( i , side ) <> state then
41991: LD_VAR 0 5
41995: PPUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 321
42005: PUSH
42006: LD_VAR 0 3
42010: NONEQUAL
42011: IFFALSE 42029
// result := result diff i ;
42013: LD_ADDR_VAR 0 4
42017: PUSH
42018: LD_VAR 0 4
42022: PUSH
42023: LD_VAR 0 5
42027: DIFF
42028: ST_TO_ADDR
42029: GO 41988
42031: POP
42032: POP
// end ;
42033: LD_VAR 0 4
42037: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
42042: PPUSH
// result := true ;
42043: LD_ADDR_VAR 0 3
42047: PUSH
42048: LD_INT 1
42050: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42051: LD_ADDR_VAR 0 5
42055: PUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: CALL_OW 480
42065: ST_TO_ADDR
// if not tmp then
42066: LD_VAR 0 5
42070: NOT
42071: IFFALSE 42075
// exit ;
42073: GO 42124
// for i in tmp do
42075: LD_ADDR_VAR 0 4
42079: PUSH
42080: LD_VAR 0 5
42084: PUSH
42085: FOR_IN
42086: IFFALSE 42122
// if GetTech ( i , side ) <> state_researched then
42088: LD_VAR 0 4
42092: PPUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: CALL_OW 321
42102: PUSH
42103: LD_INT 2
42105: NONEQUAL
42106: IFFALSE 42120
// begin result := false ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_INT 0
42115: ST_TO_ADDR
// exit ;
42116: POP
42117: POP
42118: GO 42124
// end ;
42120: GO 42085
42122: POP
42123: POP
// end ;
42124: LD_VAR 0 3
42128: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42129: LD_INT 0
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
42142: PPUSH
42143: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42144: LD_VAR 0 1
42148: NOT
42149: PUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: CALL_OW 257
42159: PUSH
42160: LD_INT 9
42162: NONEQUAL
42163: OR
42164: IFFALSE 42168
// exit ;
42166: GO 42741
// side := GetSide ( unit ) ;
42168: LD_ADDR_VAR 0 9
42172: PUSH
42173: LD_VAR 0 1
42177: PPUSH
42178: CALL_OW 255
42182: ST_TO_ADDR
// tech_space := tech_spacanom ;
42183: LD_ADDR_VAR 0 12
42187: PUSH
42188: LD_INT 29
42190: ST_TO_ADDR
// tech_time := tech_taurad ;
42191: LD_ADDR_VAR 0 13
42195: PUSH
42196: LD_INT 28
42198: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42199: LD_ADDR_VAR 0 11
42203: PUSH
42204: LD_VAR 0 1
42208: PPUSH
42209: CALL_OW 310
42213: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42214: LD_VAR 0 11
42218: PPUSH
42219: CALL_OW 247
42223: PUSH
42224: LD_INT 2
42226: EQUAL
42227: IFFALSE 42231
// exit ;
42229: GO 42741
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42231: LD_ADDR_VAR 0 8
42235: PUSH
42236: LD_INT 81
42238: PUSH
42239: LD_VAR 0 9
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: LD_INT 21
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PPUSH
42269: CALL_OW 69
42273: ST_TO_ADDR
// if not tmp then
42274: LD_VAR 0 8
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42741
// if in_unit then
42283: LD_VAR 0 11
42287: IFFALSE 42311
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42289: LD_ADDR_VAR 0 10
42293: PUSH
42294: LD_VAR 0 8
42298: PPUSH
42299: LD_VAR 0 11
42303: PPUSH
42304: CALL_OW 74
42308: ST_TO_ADDR
42309: GO 42331
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42311: LD_ADDR_VAR 0 10
42315: PUSH
42316: LD_VAR 0 8
42320: PPUSH
42321: LD_VAR 0 1
42325: PPUSH
42326: CALL_OW 74
42330: ST_TO_ADDR
// if not enemy then
42331: LD_VAR 0 10
42335: NOT
42336: IFFALSE 42340
// exit ;
42338: GO 42741
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42340: LD_VAR 0 11
42344: PUSH
42345: LD_VAR 0 11
42349: PPUSH
42350: LD_VAR 0 10
42354: PPUSH
42355: CALL_OW 296
42359: PUSH
42360: LD_INT 13
42362: GREATER
42363: AND
42364: PUSH
42365: LD_VAR 0 1
42369: PPUSH
42370: LD_VAR 0 10
42374: PPUSH
42375: CALL_OW 296
42379: PUSH
42380: LD_INT 12
42382: GREATER
42383: OR
42384: IFFALSE 42388
// exit ;
42386: GO 42741
// missile := [ 1 ] ;
42388: LD_ADDR_VAR 0 14
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42399: LD_VAR 0 9
42403: PPUSH
42404: LD_VAR 0 12
42408: PPUSH
42409: CALL_OW 325
42413: IFFALSE 42442
// missile := Replace ( missile , missile + 1 , 2 ) ;
42415: LD_ADDR_VAR 0 14
42419: PUSH
42420: LD_VAR 0 14
42424: PPUSH
42425: LD_VAR 0 14
42429: PUSH
42430: LD_INT 1
42432: PLUS
42433: PPUSH
42434: LD_INT 2
42436: PPUSH
42437: CALL_OW 1
42441: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42442: LD_VAR 0 9
42446: PPUSH
42447: LD_VAR 0 13
42451: PPUSH
42452: CALL_OW 325
42456: PUSH
42457: LD_VAR 0 10
42461: PPUSH
42462: CALL_OW 255
42466: PPUSH
42467: LD_VAR 0 13
42471: PPUSH
42472: CALL_OW 325
42476: NOT
42477: AND
42478: IFFALSE 42507
// missile := Replace ( missile , missile + 1 , 3 ) ;
42480: LD_ADDR_VAR 0 14
42484: PUSH
42485: LD_VAR 0 14
42489: PPUSH
42490: LD_VAR 0 14
42494: PUSH
42495: LD_INT 1
42497: PLUS
42498: PPUSH
42499: LD_INT 3
42501: PPUSH
42502: CALL_OW 1
42506: ST_TO_ADDR
// if missile < 2 then
42507: LD_VAR 0 14
42511: PUSH
42512: LD_INT 2
42514: LESS
42515: IFFALSE 42519
// exit ;
42517: GO 42741
// x := GetX ( enemy ) ;
42519: LD_ADDR_VAR 0 4
42523: PUSH
42524: LD_VAR 0 10
42528: PPUSH
42529: CALL_OW 250
42533: ST_TO_ADDR
// y := GetY ( enemy ) ;
42534: LD_ADDR_VAR 0 5
42538: PUSH
42539: LD_VAR 0 10
42543: PPUSH
42544: CALL_OW 251
42548: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42549: LD_ADDR_VAR 0 6
42553: PUSH
42554: LD_VAR 0 4
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PPUSH
42563: LD_INT 1
42565: PPUSH
42566: CALL_OW 12
42570: PLUS
42571: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42572: LD_ADDR_VAR 0 7
42576: PUSH
42577: LD_VAR 0 5
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PPUSH
42586: LD_INT 1
42588: PPUSH
42589: CALL_OW 12
42593: PLUS
42594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42595: LD_VAR 0 6
42599: PPUSH
42600: LD_VAR 0 7
42604: PPUSH
42605: CALL_OW 488
42609: NOT
42610: IFFALSE 42632
// begin _x := x ;
42612: LD_ADDR_VAR 0 6
42616: PUSH
42617: LD_VAR 0 4
42621: ST_TO_ADDR
// _y := y ;
42622: LD_ADDR_VAR 0 7
42626: PUSH
42627: LD_VAR 0 5
42631: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42632: LD_ADDR_VAR 0 3
42636: PUSH
42637: LD_INT 1
42639: PPUSH
42640: LD_VAR 0 14
42644: PPUSH
42645: CALL_OW 12
42649: ST_TO_ADDR
// case i of 1 :
42650: LD_VAR 0 3
42654: PUSH
42655: LD_INT 1
42657: DOUBLE
42658: EQUAL
42659: IFTRUE 42663
42661: GO 42680
42663: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42664: LD_VAR 0 1
42668: PPUSH
42669: LD_VAR 0 10
42673: PPUSH
42674: CALL_OW 115
42678: GO 42741
42680: LD_INT 2
42682: DOUBLE
42683: EQUAL
42684: IFTRUE 42688
42686: GO 42710
42688: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42689: LD_VAR 0 1
42693: PPUSH
42694: LD_VAR 0 6
42698: PPUSH
42699: LD_VAR 0 7
42703: PPUSH
42704: CALL_OW 153
42708: GO 42741
42710: LD_INT 3
42712: DOUBLE
42713: EQUAL
42714: IFTRUE 42718
42716: GO 42740
42718: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42719: LD_VAR 0 1
42723: PPUSH
42724: LD_VAR 0 6
42728: PPUSH
42729: LD_VAR 0 7
42733: PPUSH
42734: CALL_OW 154
42738: GO 42741
42740: POP
// end ;
42741: LD_VAR 0 2
42745: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42746: LD_INT 0
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
// if not unit or not building then
42754: LD_VAR 0 1
42758: NOT
42759: PUSH
42760: LD_VAR 0 2
42764: NOT
42765: OR
42766: IFFALSE 42770
// exit ;
42768: GO 42928
// x := GetX ( building ) ;
42770: LD_ADDR_VAR 0 5
42774: PUSH
42775: LD_VAR 0 2
42779: PPUSH
42780: CALL_OW 250
42784: ST_TO_ADDR
// y := GetY ( building ) ;
42785: LD_ADDR_VAR 0 6
42789: PUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: CALL_OW 251
42799: ST_TO_ADDR
// for i = 0 to 5 do
42800: LD_ADDR_VAR 0 4
42804: PUSH
42805: DOUBLE
42806: LD_INT 0
42808: DEC
42809: ST_TO_ADDR
42810: LD_INT 5
42812: PUSH
42813: FOR_TO
42814: IFFALSE 42926
// begin _x := ShiftX ( x , i , 3 ) ;
42816: LD_ADDR_VAR 0 7
42820: PUSH
42821: LD_VAR 0 5
42825: PPUSH
42826: LD_VAR 0 4
42830: PPUSH
42831: LD_INT 3
42833: PPUSH
42834: CALL_OW 272
42838: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42839: LD_ADDR_VAR 0 8
42843: PUSH
42844: LD_VAR 0 6
42848: PPUSH
42849: LD_VAR 0 4
42853: PPUSH
42854: LD_INT 3
42856: PPUSH
42857: CALL_OW 273
42861: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42862: LD_VAR 0 7
42866: PPUSH
42867: LD_VAR 0 8
42871: PPUSH
42872: CALL_OW 488
42876: NOT
42877: IFFALSE 42881
// continue ;
42879: GO 42813
// if HexInfo ( _x , _y ) = 0 then
42881: LD_VAR 0 7
42885: PPUSH
42886: LD_VAR 0 8
42890: PPUSH
42891: CALL_OW 428
42895: PUSH
42896: LD_INT 0
42898: EQUAL
42899: IFFALSE 42924
// begin ComMoveXY ( unit , _x , _y ) ;
42901: LD_VAR 0 1
42905: PPUSH
42906: LD_VAR 0 7
42910: PPUSH
42911: LD_VAR 0 8
42915: PPUSH
42916: CALL_OW 111
// exit ;
42920: POP
42921: POP
42922: GO 42928
// end ; end ;
42924: GO 42813
42926: POP
42927: POP
// end ;
42928: LD_VAR 0 3
42932: RET
// export function ScanBase ( side , base_area ) ; begin
42933: LD_INT 0
42935: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_VAR 0 2
42945: PPUSH
42946: LD_INT 81
42948: PUSH
42949: LD_VAR 0 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PPUSH
42958: CALL_OW 70
42962: ST_TO_ADDR
// end ;
42963: LD_VAR 0 3
42967: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42968: LD_INT 0
42970: PPUSH
42971: PPUSH
42972: PPUSH
42973: PPUSH
// result := false ;
42974: LD_ADDR_VAR 0 2
42978: PUSH
42979: LD_INT 0
42981: ST_TO_ADDR
// side := GetSide ( unit ) ;
42982: LD_ADDR_VAR 0 3
42986: PUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 255
42996: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42997: LD_ADDR_VAR 0 4
43001: PUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 248
43011: ST_TO_ADDR
// case nat of 1 :
43012: LD_VAR 0 4
43016: PUSH
43017: LD_INT 1
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43036
43025: POP
// tech := tech_lassight ; 2 :
43026: LD_ADDR_VAR 0 5
43030: PUSH
43031: LD_INT 12
43033: ST_TO_ADDR
43034: GO 43075
43036: LD_INT 2
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43055
43044: POP
// tech := tech_mortar ; 3 :
43045: LD_ADDR_VAR 0 5
43049: PUSH
43050: LD_INT 41
43052: ST_TO_ADDR
43053: GO 43075
43055: LD_INT 3
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43074
43063: POP
// tech := tech_bazooka ; end ;
43064: LD_ADDR_VAR 0 5
43068: PUSH
43069: LD_INT 44
43071: ST_TO_ADDR
43072: GO 43075
43074: POP
// if Researched ( side , tech ) then
43075: LD_VAR 0 3
43079: PPUSH
43080: LD_VAR 0 5
43084: PPUSH
43085: CALL_OW 325
43089: IFFALSE 43116
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43091: LD_ADDR_VAR 0 2
43095: PUSH
43096: LD_INT 5
43098: PUSH
43099: LD_INT 8
43101: PUSH
43102: LD_INT 9
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: PUSH
43110: LD_VAR 0 4
43114: ARRAY
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 2
43120: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43121: LD_INT 0
43123: PPUSH
43124: PPUSH
43125: PPUSH
// if not mines then
43126: LD_VAR 0 2
43130: NOT
43131: IFFALSE 43135
// exit ;
43133: GO 43279
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43135: LD_ADDR_VAR 0 5
43139: PUSH
43140: LD_INT 81
43142: PUSH
43143: LD_VAR 0 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: LD_INT 21
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PPUSH
43173: CALL_OW 69
43177: ST_TO_ADDR
// for i in mines do
43178: LD_ADDR_VAR 0 4
43182: PUSH
43183: LD_VAR 0 2
43187: PUSH
43188: FOR_IN
43189: IFFALSE 43277
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43191: LD_VAR 0 4
43195: PUSH
43196: LD_INT 1
43198: ARRAY
43199: PPUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: PPUSH
43209: CALL_OW 458
43213: NOT
43214: IFFALSE 43218
// continue ;
43216: GO 43188
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43218: LD_VAR 0 4
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PPUSH
43227: LD_VAR 0 4
43231: PUSH
43232: LD_INT 2
43234: ARRAY
43235: PPUSH
43236: CALL_OW 428
43240: PUSH
43241: LD_VAR 0 5
43245: IN
43246: IFFALSE 43275
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43248: LD_VAR 0 4
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: PPUSH
43257: LD_VAR 0 4
43261: PUSH
43262: LD_INT 2
43264: ARRAY
43265: PPUSH
43266: LD_VAR 0 1
43270: PPUSH
43271: CALL_OW 456
// end ;
43275: GO 43188
43277: POP
43278: POP
// end ;
43279: LD_VAR 0 3
43283: RET
// export function Count ( array ) ; var i ; begin
43284: LD_INT 0
43286: PPUSH
43287: PPUSH
// result := 0 ;
43288: LD_ADDR_VAR 0 2
43292: PUSH
43293: LD_INT 0
43295: ST_TO_ADDR
// for i in array do
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_VAR 0 1
43305: PUSH
43306: FOR_IN
43307: IFFALSE 43331
// if i then
43309: LD_VAR 0 3
43313: IFFALSE 43329
// result := result + 1 ;
43315: LD_ADDR_VAR 0 2
43319: PUSH
43320: LD_VAR 0 2
43324: PUSH
43325: LD_INT 1
43327: PLUS
43328: ST_TO_ADDR
43329: GO 43306
43331: POP
43332: POP
// end ;
43333: LD_VAR 0 2
43337: RET
// export function IsEmpty ( building ) ; begin
43338: LD_INT 0
43340: PPUSH
// if not building then
43341: LD_VAR 0 1
43345: NOT
43346: IFFALSE 43350
// exit ;
43348: GO 43393
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43350: LD_ADDR_VAR 0 2
43354: PUSH
43355: LD_VAR 0 1
43359: PUSH
43360: LD_INT 22
43362: PUSH
43363: LD_VAR 0 1
43367: PPUSH
43368: CALL_OW 255
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 58
43379: PUSH
43380: EMPTY
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PPUSH
43387: CALL_OW 69
43391: IN
43392: ST_TO_ADDR
// end ;
43393: LD_VAR 0 2
43397: RET
// export function IsNotFull ( building ) ; var places ; begin
43398: LD_INT 0
43400: PPUSH
43401: PPUSH
// if not building then
43402: LD_VAR 0 1
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43582
// result := false ;
43411: LD_ADDR_VAR 0 2
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// places := 0 ;
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_INT 0
43426: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43427: LD_VAR 0 1
43431: PPUSH
43432: CALL_OW 266
43436: PUSH
43437: LD_INT 0
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43499
43443: LD_INT 1
43445: DOUBLE
43446: EQUAL
43447: IFTRUE 43499
43449: LD_INT 6
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43499
43455: LD_INT 7
43457: DOUBLE
43458: EQUAL
43459: IFTRUE 43499
43461: LD_INT 8
43463: DOUBLE
43464: EQUAL
43465: IFTRUE 43499
43467: LD_INT 4
43469: DOUBLE
43470: EQUAL
43471: IFTRUE 43499
43473: LD_INT 5
43475: DOUBLE
43476: EQUAL
43477: IFTRUE 43499
43479: LD_INT 2
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43499
43485: LD_INT 3
43487: DOUBLE
43488: EQUAL
43489: IFTRUE 43499
43491: LD_INT 35
43493: DOUBLE
43494: EQUAL
43495: IFTRUE 43499
43497: GO 43510
43499: POP
// places := 6 ; b_bunker , b_breastwork :
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 6
43507: ST_TO_ADDR
43508: GO 43555
43510: LD_INT 32
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43524
43516: LD_INT 31
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43535
43524: POP
// places := 1 ; b_control_tower :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 1
43532: ST_TO_ADDR
43533: GO 43555
43535: LD_INT 36
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43554
43543: POP
// places := 3 ; end ;
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_INT 3
43551: ST_TO_ADDR
43552: GO 43555
43554: POP
// if places then
43555: LD_VAR 0 3
43559: IFFALSE 43582
// result := UnitsInside ( building ) < places ;
43561: LD_ADDR_VAR 0 2
43565: PUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 313
43575: PUSH
43576: LD_VAR 0 3
43580: LESS
43581: ST_TO_ADDR
// end ;
43582: LD_VAR 0 2
43586: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43587: LD_INT 0
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
// tmp := [ ] ;
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: EMPTY
43599: ST_TO_ADDR
// list := [ ] ;
43600: LD_ADDR_VAR 0 5
43604: PUSH
43605: EMPTY
43606: ST_TO_ADDR
// for i = 16 to 25 do
43607: LD_ADDR_VAR 0 4
43611: PUSH
43612: DOUBLE
43613: LD_INT 16
43615: DEC
43616: ST_TO_ADDR
43617: LD_INT 25
43619: PUSH
43620: FOR_TO
43621: IFFALSE 43694
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_VAR 0 3
43632: PUSH
43633: LD_INT 22
43635: PUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: CALL_OW 255
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 91
43652: PUSH
43653: LD_VAR 0 1
43657: PUSH
43658: LD_INT 6
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 30
43668: PUSH
43669: LD_VAR 0 4
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: PUSH
43683: EMPTY
43684: LIST
43685: PPUSH
43686: CALL_OW 69
43690: ADD
43691: ST_TO_ADDR
43692: GO 43620
43694: POP
43695: POP
// for i = 1 to tmp do
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: DOUBLE
43702: LD_INT 1
43704: DEC
43705: ST_TO_ADDR
43706: LD_VAR 0 3
43710: PUSH
43711: FOR_TO
43712: IFFALSE 43800
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43714: LD_ADDR_VAR 0 5
43718: PUSH
43719: LD_VAR 0 5
43723: PUSH
43724: LD_VAR 0 3
43728: PUSH
43729: LD_VAR 0 4
43733: ARRAY
43734: PPUSH
43735: CALL_OW 266
43739: PUSH
43740: LD_VAR 0 3
43744: PUSH
43745: LD_VAR 0 4
43749: ARRAY
43750: PPUSH
43751: CALL_OW 250
43755: PUSH
43756: LD_VAR 0 3
43760: PUSH
43761: LD_VAR 0 4
43765: ARRAY
43766: PPUSH
43767: CALL_OW 251
43771: PUSH
43772: LD_VAR 0 3
43776: PUSH
43777: LD_VAR 0 4
43781: ARRAY
43782: PPUSH
43783: CALL_OW 254
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: ADD
43797: ST_TO_ADDR
43798: GO 43711
43800: POP
43801: POP
// result := list ;
43802: LD_ADDR_VAR 0 2
43806: PUSH
43807: LD_VAR 0 5
43811: ST_TO_ADDR
// end ;
43812: LD_VAR 0 2
43816: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43817: LD_INT 0
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
// if not factory then
43826: LD_VAR 0 1
43830: NOT
43831: IFFALSE 43835
// exit ;
43833: GO 44428
// if control = control_apeman then
43835: LD_VAR 0 4
43839: PUSH
43840: LD_INT 5
43842: EQUAL
43843: IFFALSE 43952
// begin tmp := UnitsInside ( factory ) ;
43845: LD_ADDR_VAR 0 8
43849: PUSH
43850: LD_VAR 0 1
43854: PPUSH
43855: CALL_OW 313
43859: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43860: LD_VAR 0 8
43864: PPUSH
43865: LD_INT 25
43867: PUSH
43868: LD_INT 12
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PPUSH
43875: CALL_OW 72
43879: NOT
43880: IFFALSE 43890
// control := control_manual ;
43882: LD_ADDR_VAR 0 4
43886: PUSH
43887: LD_INT 1
43889: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43890: LD_ADDR_VAR 0 8
43894: PUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL 43587 0 1
43904: ST_TO_ADDR
// if tmp then
43905: LD_VAR 0 8
43909: IFFALSE 43952
// begin for i in tmp do
43911: LD_ADDR_VAR 0 7
43915: PUSH
43916: LD_VAR 0 8
43920: PUSH
43921: FOR_IN
43922: IFFALSE 43950
// if i [ 1 ] = b_ext_radio then
43924: LD_VAR 0 7
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PUSH
43933: LD_INT 22
43935: EQUAL
43936: IFFALSE 43948
// begin control := control_remote ;
43938: LD_ADDR_VAR 0 4
43942: PUSH
43943: LD_INT 2
43945: ST_TO_ADDR
// break ;
43946: GO 43950
// end ;
43948: GO 43921
43950: POP
43951: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43952: LD_VAR 0 1
43956: PPUSH
43957: LD_VAR 0 2
43961: PPUSH
43962: LD_VAR 0 3
43966: PPUSH
43967: LD_VAR 0 4
43971: PPUSH
43972: LD_VAR 0 5
43976: PPUSH
43977: CALL_OW 448
43981: IFFALSE 44016
// begin result := [ chassis , engine , control , weapon ] ;
43983: LD_ADDR_VAR 0 6
43987: PUSH
43988: LD_VAR 0 2
43992: PUSH
43993: LD_VAR 0 3
43997: PUSH
43998: LD_VAR 0 4
44002: PUSH
44003: LD_VAR 0 5
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// exit ;
44014: GO 44428
// end ; _chassis := AvailableChassisList ( factory ) ;
44016: LD_ADDR_VAR 0 9
44020: PUSH
44021: LD_VAR 0 1
44025: PPUSH
44026: CALL_OW 475
44030: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44031: LD_ADDR_VAR 0 11
44035: PUSH
44036: LD_VAR 0 1
44040: PPUSH
44041: CALL_OW 476
44045: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44046: LD_ADDR_VAR 0 12
44050: PUSH
44051: LD_VAR 0 1
44055: PPUSH
44056: CALL_OW 477
44060: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44061: LD_ADDR_VAR 0 10
44065: PUSH
44066: LD_VAR 0 1
44070: PPUSH
44071: CALL_OW 478
44075: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44076: LD_VAR 0 9
44080: NOT
44081: PUSH
44082: LD_VAR 0 11
44086: NOT
44087: OR
44088: PUSH
44089: LD_VAR 0 12
44093: NOT
44094: OR
44095: PUSH
44096: LD_VAR 0 10
44100: NOT
44101: OR
44102: IFFALSE 44137
// begin result := [ chassis , engine , control , weapon ] ;
44104: LD_ADDR_VAR 0 6
44108: PUSH
44109: LD_VAR 0 2
44113: PUSH
44114: LD_VAR 0 3
44118: PUSH
44119: LD_VAR 0 4
44123: PUSH
44124: LD_VAR 0 5
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// exit ;
44135: GO 44428
// end ; if not chassis in _chassis then
44137: LD_VAR 0 2
44141: PUSH
44142: LD_VAR 0 9
44146: IN
44147: NOT
44148: IFFALSE 44174
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44150: LD_ADDR_VAR 0 2
44154: PUSH
44155: LD_VAR 0 9
44159: PUSH
44160: LD_INT 1
44162: PPUSH
44163: LD_VAR 0 9
44167: PPUSH
44168: CALL_OW 12
44172: ARRAY
44173: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44174: LD_VAR 0 2
44178: PPUSH
44179: LD_VAR 0 3
44183: PPUSH
44184: CALL 44433 0 2
44188: NOT
44189: IFFALSE 44248
// repeat engine := _engine [ 1 ] ;
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_VAR 0 11
44200: PUSH
44201: LD_INT 1
44203: ARRAY
44204: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44205: LD_ADDR_VAR 0 11
44209: PUSH
44210: LD_VAR 0 11
44214: PPUSH
44215: LD_INT 1
44217: PPUSH
44218: CALL_OW 3
44222: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44223: LD_VAR 0 2
44227: PPUSH
44228: LD_VAR 0 3
44232: PPUSH
44233: CALL 44433 0 2
44237: PUSH
44238: LD_VAR 0 11
44242: PUSH
44243: EMPTY
44244: EQUAL
44245: OR
44246: IFFALSE 44191
// if not control in _control then
44248: LD_VAR 0 4
44252: PUSH
44253: LD_VAR 0 12
44257: IN
44258: NOT
44259: IFFALSE 44285
// control := _control [ rand ( 1 , _control ) ] ;
44261: LD_ADDR_VAR 0 4
44265: PUSH
44266: LD_VAR 0 12
44270: PUSH
44271: LD_INT 1
44273: PPUSH
44274: LD_VAR 0 12
44278: PPUSH
44279: CALL_OW 12
44283: ARRAY
44284: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44285: LD_VAR 0 2
44289: PPUSH
44290: LD_VAR 0 5
44294: PPUSH
44295: CALL 44653 0 2
44299: NOT
44300: IFFALSE 44359
// repeat weapon := _weapon [ 1 ] ;
44302: LD_ADDR_VAR 0 5
44306: PUSH
44307: LD_VAR 0 10
44311: PUSH
44312: LD_INT 1
44314: ARRAY
44315: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44316: LD_ADDR_VAR 0 10
44320: PUSH
44321: LD_VAR 0 10
44325: PPUSH
44326: LD_INT 1
44328: PPUSH
44329: CALL_OW 3
44333: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44334: LD_VAR 0 2
44338: PPUSH
44339: LD_VAR 0 5
44343: PPUSH
44344: CALL 44653 0 2
44348: PUSH
44349: LD_VAR 0 10
44353: PUSH
44354: EMPTY
44355: EQUAL
44356: OR
44357: IFFALSE 44302
// result := [ ] ;
44359: LD_ADDR_VAR 0 6
44363: PUSH
44364: EMPTY
44365: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44366: LD_VAR 0 1
44370: PPUSH
44371: LD_VAR 0 2
44375: PPUSH
44376: LD_VAR 0 3
44380: PPUSH
44381: LD_VAR 0 4
44385: PPUSH
44386: LD_VAR 0 5
44390: PPUSH
44391: CALL_OW 448
44395: IFFALSE 44428
// result := [ chassis , engine , control , weapon ] ;
44397: LD_ADDR_VAR 0 6
44401: PUSH
44402: LD_VAR 0 2
44406: PUSH
44407: LD_VAR 0 3
44411: PUSH
44412: LD_VAR 0 4
44416: PUSH
44417: LD_VAR 0 5
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// end ;
44428: LD_VAR 0 6
44432: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44433: LD_INT 0
44435: PPUSH
// if not chassis or not engine then
44436: LD_VAR 0 1
44440: NOT
44441: PUSH
44442: LD_VAR 0 2
44446: NOT
44447: OR
44448: IFFALSE 44452
// exit ;
44450: GO 44648
// case engine of engine_solar :
44452: LD_VAR 0 2
44456: PUSH
44457: LD_INT 2
44459: DOUBLE
44460: EQUAL
44461: IFTRUE 44465
44463: GO 44503
44465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44466: LD_ADDR_VAR 0 3
44470: PUSH
44471: LD_INT 11
44473: PUSH
44474: LD_INT 12
44476: PUSH
44477: LD_INT 13
44479: PUSH
44480: LD_INT 14
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
44501: GO 44632
44503: LD_INT 1
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44511
44509: GO 44573
44511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44512: LD_ADDR_VAR 0 3
44516: PUSH
44517: LD_INT 11
44519: PUSH
44520: LD_INT 12
44522: PUSH
44523: LD_INT 13
44525: PUSH
44526: LD_INT 14
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: LD_INT 4
44540: PUSH
44541: LD_INT 5
44543: PUSH
44544: LD_INT 21
44546: PUSH
44547: LD_INT 23
44549: PUSH
44550: LD_INT 22
44552: PUSH
44553: LD_INT 24
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
44571: GO 44632
44573: LD_INT 3
44575: DOUBLE
44576: EQUAL
44577: IFTRUE 44581
44579: GO 44631
44581: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44582: LD_ADDR_VAR 0 3
44586: PUSH
44587: LD_INT 13
44589: PUSH
44590: LD_INT 14
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: LD_INT 5
44604: PUSH
44605: LD_INT 21
44607: PUSH
44608: LD_INT 22
44610: PUSH
44611: LD_INT 23
44613: PUSH
44614: LD_INT 24
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
44629: GO 44632
44631: POP
// result := ( chassis in result ) ;
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_VAR 0 1
44641: PUSH
44642: LD_VAR 0 3
44646: IN
44647: ST_TO_ADDR
// end ;
44648: LD_VAR 0 3
44652: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44653: LD_INT 0
44655: PPUSH
// if not chassis or not weapon then
44656: LD_VAR 0 1
44660: NOT
44661: PUSH
44662: LD_VAR 0 2
44666: NOT
44667: OR
44668: IFFALSE 44672
// exit ;
44670: GO 45732
// case weapon of us_machine_gun :
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 2
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44715
44685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: LD_INT 4
44702: PUSH
44703: LD_INT 5
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
44713: GO 45716
44715: LD_INT 3
44717: DOUBLE
44718: EQUAL
44719: IFTRUE 44723
44721: GO 44753
44723: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44724: LD_ADDR_VAR 0 3
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: LD_INT 4
44740: PUSH
44741: LD_INT 5
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
44751: GO 45716
44753: LD_INT 11
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44791
44761: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: LD_INT 4
44778: PUSH
44779: LD_INT 5
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
44789: GO 45716
44791: LD_INT 4
44793: DOUBLE
44794: EQUAL
44795: IFTRUE 44799
44797: GO 44825
44799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44800: LD_ADDR_VAR 0 3
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 3
44810: PUSH
44811: LD_INT 4
44813: PUSH
44814: LD_INT 5
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
44823: GO 45716
44825: LD_INT 5
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44833
44831: GO 44859
44833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44834: LD_ADDR_VAR 0 3
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 4
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
44857: GO 45716
44859: LD_INT 9
44861: DOUBLE
44862: EQUAL
44863: IFTRUE 44867
44865: GO 44893
44867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: LD_INT 5
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
44891: GO 45716
44893: LD_INT 7
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44901
44899: GO 44927
44901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44902: LD_ADDR_VAR 0 3
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 4
44915: PUSH
44916: LD_INT 5
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
44925: GO 45716
44927: LD_INT 12
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 44961
44935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: LD_INT 5
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
44959: GO 45716
44961: LD_INT 13
44963: DOUBLE
44964: EQUAL
44965: IFTRUE 44969
44967: GO 44995
44969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: LD_INT 4
44983: PUSH
44984: LD_INT 5
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
44993: GO 45716
44995: LD_INT 14
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45021
45003: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: LD_INT 5
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: ST_TO_ADDR
45019: GO 45716
45021: LD_INT 6
45023: DOUBLE
45024: EQUAL
45025: IFTRUE 45029
45027: GO 45047
45029: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45030: LD_ADDR_VAR 0 3
45034: PUSH
45035: LD_INT 4
45037: PUSH
45038: LD_INT 5
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: ST_TO_ADDR
45045: GO 45716
45047: LD_INT 10
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45073
45055: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 4
45063: PUSH
45064: LD_INT 5
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: ST_TO_ADDR
45071: GO 45716
45073: LD_INT 22
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45081
45079: GO 45107
45081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45082: LD_ADDR_VAR 0 3
45086: PUSH
45087: LD_INT 11
45089: PUSH
45090: LD_INT 12
45092: PUSH
45093: LD_INT 13
45095: PUSH
45096: LD_INT 14
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
45105: GO 45716
45107: LD_INT 23
45109: DOUBLE
45110: EQUAL
45111: IFTRUE 45115
45113: GO 45141
45115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45116: LD_ADDR_VAR 0 3
45120: PUSH
45121: LD_INT 11
45123: PUSH
45124: LD_INT 12
45126: PUSH
45127: LD_INT 13
45129: PUSH
45130: LD_INT 14
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
45139: GO 45716
45141: LD_INT 24
45143: DOUBLE
45144: EQUAL
45145: IFTRUE 45149
45147: GO 45175
45149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45150: LD_ADDR_VAR 0 3
45154: PUSH
45155: LD_INT 11
45157: PUSH
45158: LD_INT 12
45160: PUSH
45161: LD_INT 13
45163: PUSH
45164: LD_INT 14
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
45173: GO 45716
45175: LD_INT 30
45177: DOUBLE
45178: EQUAL
45179: IFTRUE 45183
45181: GO 45209
45183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_INT 11
45191: PUSH
45192: LD_INT 12
45194: PUSH
45195: LD_INT 13
45197: PUSH
45198: LD_INT 14
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
45207: GO 45716
45209: LD_INT 25
45211: DOUBLE
45212: EQUAL
45213: IFTRUE 45217
45215: GO 45235
45217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45218: LD_ADDR_VAR 0 3
45222: PUSH
45223: LD_INT 13
45225: PUSH
45226: LD_INT 14
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: ST_TO_ADDR
45233: GO 45716
45235: LD_INT 27
45237: DOUBLE
45238: EQUAL
45239: IFTRUE 45243
45241: GO 45261
45243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 13
45251: PUSH
45252: LD_INT 14
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: ST_TO_ADDR
45259: GO 45716
45261: LD_INT 92
45263: DOUBLE
45264: EQUAL
45265: IFTRUE 45269
45267: GO 45295
45269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45270: LD_ADDR_VAR 0 3
45274: PUSH
45275: LD_INT 11
45277: PUSH
45278: LD_INT 12
45280: PUSH
45281: LD_INT 13
45283: PUSH
45284: LD_INT 14
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
45293: GO 45716
45295: LD_INT 28
45297: DOUBLE
45298: EQUAL
45299: IFTRUE 45303
45301: GO 45321
45303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45304: LD_ADDR_VAR 0 3
45308: PUSH
45309: LD_INT 13
45311: PUSH
45312: LD_INT 14
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: ST_TO_ADDR
45319: GO 45716
45321: LD_INT 29
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45329
45327: GO 45347
45329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_INT 13
45337: PUSH
45338: LD_INT 14
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: ST_TO_ADDR
45345: GO 45716
45347: LD_INT 31
45349: DOUBLE
45350: EQUAL
45351: IFTRUE 45355
45353: GO 45373
45355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45356: LD_ADDR_VAR 0 3
45360: PUSH
45361: LD_INT 13
45363: PUSH
45364: LD_INT 14
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: ST_TO_ADDR
45371: GO 45716
45373: LD_INT 26
45375: DOUBLE
45376: EQUAL
45377: IFTRUE 45381
45379: GO 45399
45381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45382: LD_ADDR_VAR 0 3
45386: PUSH
45387: LD_INT 13
45389: PUSH
45390: LD_INT 14
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: ST_TO_ADDR
45397: GO 45716
45399: LD_INT 42
45401: DOUBLE
45402: EQUAL
45403: IFTRUE 45407
45405: GO 45433
45407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45408: LD_ADDR_VAR 0 3
45412: PUSH
45413: LD_INT 21
45415: PUSH
45416: LD_INT 22
45418: PUSH
45419: LD_INT 23
45421: PUSH
45422: LD_INT 24
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: ST_TO_ADDR
45431: GO 45716
45433: LD_INT 43
45435: DOUBLE
45436: EQUAL
45437: IFTRUE 45441
45439: GO 45467
45441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45442: LD_ADDR_VAR 0 3
45446: PUSH
45447: LD_INT 21
45449: PUSH
45450: LD_INT 22
45452: PUSH
45453: LD_INT 23
45455: PUSH
45456: LD_INT 24
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: ST_TO_ADDR
45465: GO 45716
45467: LD_INT 44
45469: DOUBLE
45470: EQUAL
45471: IFTRUE 45475
45473: GO 45501
45475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45476: LD_ADDR_VAR 0 3
45480: PUSH
45481: LD_INT 21
45483: PUSH
45484: LD_INT 22
45486: PUSH
45487: LD_INT 23
45489: PUSH
45490: LD_INT 24
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
45499: GO 45716
45501: LD_INT 45
45503: DOUBLE
45504: EQUAL
45505: IFTRUE 45509
45507: GO 45535
45509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45510: LD_ADDR_VAR 0 3
45514: PUSH
45515: LD_INT 21
45517: PUSH
45518: LD_INT 22
45520: PUSH
45521: LD_INT 23
45523: PUSH
45524: LD_INT 24
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
45533: GO 45716
45535: LD_INT 49
45537: DOUBLE
45538: EQUAL
45539: IFTRUE 45543
45541: GO 45569
45543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_INT 21
45551: PUSH
45552: LD_INT 22
45554: PUSH
45555: LD_INT 23
45557: PUSH
45558: LD_INT 24
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
45567: GO 45716
45569: LD_INT 51
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45577
45575: GO 45603
45577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 21
45585: PUSH
45586: LD_INT 22
45588: PUSH
45589: LD_INT 23
45591: PUSH
45592: LD_INT 24
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
45601: GO 45716
45603: LD_INT 52
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 45637
45611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45612: LD_ADDR_VAR 0 3
45616: PUSH
45617: LD_INT 21
45619: PUSH
45620: LD_INT 22
45622: PUSH
45623: LD_INT 23
45625: PUSH
45626: LD_INT 24
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
45635: GO 45716
45637: LD_INT 53
45639: DOUBLE
45640: EQUAL
45641: IFTRUE 45645
45643: GO 45663
45645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45646: LD_ADDR_VAR 0 3
45650: PUSH
45651: LD_INT 23
45653: PUSH
45654: LD_INT 24
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: ST_TO_ADDR
45661: GO 45716
45663: LD_INT 46
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 45689
45671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45672: LD_ADDR_VAR 0 3
45676: PUSH
45677: LD_INT 23
45679: PUSH
45680: LD_INT 24
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: ST_TO_ADDR
45687: GO 45716
45689: LD_INT 47
45691: DOUBLE
45692: EQUAL
45693: IFTRUE 45697
45695: GO 45715
45697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45698: LD_ADDR_VAR 0 3
45702: PUSH
45703: LD_INT 23
45705: PUSH
45706: LD_INT 24
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: ST_TO_ADDR
45713: GO 45716
45715: POP
// result := ( chassis in result ) ;
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_VAR 0 1
45725: PUSH
45726: LD_VAR 0 3
45730: IN
45731: ST_TO_ADDR
// end ;
45732: LD_VAR 0 3
45736: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45737: LD_INT 0
45739: PPUSH
45740: PPUSH
45741: PPUSH
45742: PPUSH
45743: PPUSH
45744: PPUSH
45745: PPUSH
// result := array ;
45746: LD_ADDR_VAR 0 5
45750: PUSH
45751: LD_VAR 0 1
45755: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45756: LD_VAR 0 1
45760: NOT
45761: PUSH
45762: LD_VAR 0 2
45766: NOT
45767: OR
45768: PUSH
45769: LD_VAR 0 3
45773: NOT
45774: OR
45775: PUSH
45776: LD_VAR 0 2
45780: PUSH
45781: LD_VAR 0 1
45785: GREATER
45786: OR
45787: PUSH
45788: LD_VAR 0 3
45792: PUSH
45793: LD_VAR 0 1
45797: GREATER
45798: OR
45799: IFFALSE 45803
// exit ;
45801: GO 46099
// if direction then
45803: LD_VAR 0 4
45807: IFFALSE 45871
// begin d := 1 ;
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_INT 1
45816: ST_TO_ADDR
// if i_from > i_to then
45817: LD_VAR 0 2
45821: PUSH
45822: LD_VAR 0 3
45826: GREATER
45827: IFFALSE 45853
// length := ( array - i_from ) + i_to else
45829: LD_ADDR_VAR 0 11
45833: PUSH
45834: LD_VAR 0 1
45838: PUSH
45839: LD_VAR 0 2
45843: MINUS
45844: PUSH
45845: LD_VAR 0 3
45849: PLUS
45850: ST_TO_ADDR
45851: GO 45869
// length := i_to - i_from ;
45853: LD_ADDR_VAR 0 11
45857: PUSH
45858: LD_VAR 0 3
45862: PUSH
45863: LD_VAR 0 2
45867: MINUS
45868: ST_TO_ADDR
// end else
45869: GO 45932
// begin d := - 1 ;
45871: LD_ADDR_VAR 0 9
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: ST_TO_ADDR
// if i_from > i_to then
45880: LD_VAR 0 2
45884: PUSH
45885: LD_VAR 0 3
45889: GREATER
45890: IFFALSE 45910
// length := i_from - i_to else
45892: LD_ADDR_VAR 0 11
45896: PUSH
45897: LD_VAR 0 2
45901: PUSH
45902: LD_VAR 0 3
45906: MINUS
45907: ST_TO_ADDR
45908: GO 45932
// length := ( array - i_to ) + i_from ;
45910: LD_ADDR_VAR 0 11
45914: PUSH
45915: LD_VAR 0 1
45919: PUSH
45920: LD_VAR 0 3
45924: MINUS
45925: PUSH
45926: LD_VAR 0 2
45930: PLUS
45931: ST_TO_ADDR
// end ; if not length then
45932: LD_VAR 0 11
45936: NOT
45937: IFFALSE 45941
// exit ;
45939: GO 46099
// tmp := array ;
45941: LD_ADDR_VAR 0 10
45945: PUSH
45946: LD_VAR 0 1
45950: ST_TO_ADDR
// for i = 1 to length do
45951: LD_ADDR_VAR 0 6
45955: PUSH
45956: DOUBLE
45957: LD_INT 1
45959: DEC
45960: ST_TO_ADDR
45961: LD_VAR 0 11
45965: PUSH
45966: FOR_TO
45967: IFFALSE 46087
// begin for j = 1 to array do
45969: LD_ADDR_VAR 0 7
45973: PUSH
45974: DOUBLE
45975: LD_INT 1
45977: DEC
45978: ST_TO_ADDR
45979: LD_VAR 0 1
45983: PUSH
45984: FOR_TO
45985: IFFALSE 46073
// begin k := j + d ;
45987: LD_ADDR_VAR 0 8
45991: PUSH
45992: LD_VAR 0 7
45996: PUSH
45997: LD_VAR 0 9
46001: PLUS
46002: ST_TO_ADDR
// if k > array then
46003: LD_VAR 0 8
46007: PUSH
46008: LD_VAR 0 1
46012: GREATER
46013: IFFALSE 46023
// k := 1 ;
46015: LD_ADDR_VAR 0 8
46019: PUSH
46020: LD_INT 1
46022: ST_TO_ADDR
// if not k then
46023: LD_VAR 0 8
46027: NOT
46028: IFFALSE 46040
// k := array ;
46030: LD_ADDR_VAR 0 8
46034: PUSH
46035: LD_VAR 0 1
46039: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46040: LD_ADDR_VAR 0 10
46044: PUSH
46045: LD_VAR 0 10
46049: PPUSH
46050: LD_VAR 0 8
46054: PPUSH
46055: LD_VAR 0 1
46059: PUSH
46060: LD_VAR 0 7
46064: ARRAY
46065: PPUSH
46066: CALL_OW 1
46070: ST_TO_ADDR
// end ;
46071: GO 45984
46073: POP
46074: POP
// array := tmp ;
46075: LD_ADDR_VAR 0 1
46079: PUSH
46080: LD_VAR 0 10
46084: ST_TO_ADDR
// end ;
46085: GO 45966
46087: POP
46088: POP
// result := array ;
46089: LD_ADDR_VAR 0 5
46093: PUSH
46094: LD_VAR 0 1
46098: ST_TO_ADDR
// end ;
46099: LD_VAR 0 5
46103: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46104: LD_INT 0
46106: PPUSH
46107: PPUSH
// result := 0 ;
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: LD_INT 0
46115: ST_TO_ADDR
// if not array or not value in array then
46116: LD_VAR 0 1
46120: NOT
46121: PUSH
46122: LD_VAR 0 2
46126: PUSH
46127: LD_VAR 0 1
46131: IN
46132: NOT
46133: OR
46134: IFFALSE 46138
// exit ;
46136: GO 46192
// for i = 1 to array do
46138: LD_ADDR_VAR 0 4
46142: PUSH
46143: DOUBLE
46144: LD_INT 1
46146: DEC
46147: ST_TO_ADDR
46148: LD_VAR 0 1
46152: PUSH
46153: FOR_TO
46154: IFFALSE 46190
// if value = array [ i ] then
46156: LD_VAR 0 2
46160: PUSH
46161: LD_VAR 0 1
46165: PUSH
46166: LD_VAR 0 4
46170: ARRAY
46171: EQUAL
46172: IFFALSE 46188
// begin result := i ;
46174: LD_ADDR_VAR 0 3
46178: PUSH
46179: LD_VAR 0 4
46183: ST_TO_ADDR
// exit ;
46184: POP
46185: POP
46186: GO 46192
// end ;
46188: GO 46153
46190: POP
46191: POP
// end ;
46192: LD_VAR 0 3
46196: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46197: LD_INT 0
46199: PPUSH
// vc_chassis := chassis ;
46200: LD_ADDR_OWVAR 37
46204: PUSH
46205: LD_VAR 0 1
46209: ST_TO_ADDR
// vc_engine := engine ;
46210: LD_ADDR_OWVAR 39
46214: PUSH
46215: LD_VAR 0 2
46219: ST_TO_ADDR
// vc_control := control ;
46220: LD_ADDR_OWVAR 38
46224: PUSH
46225: LD_VAR 0 3
46229: ST_TO_ADDR
// vc_weapon := weapon ;
46230: LD_ADDR_OWVAR 40
46234: PUSH
46235: LD_VAR 0 4
46239: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46240: LD_ADDR_OWVAR 41
46244: PUSH
46245: LD_VAR 0 5
46249: ST_TO_ADDR
// end ;
46250: LD_VAR 0 6
46254: RET
// export function WantPlant ( unit ) ; var task ; begin
46255: LD_INT 0
46257: PPUSH
46258: PPUSH
// result := false ;
46259: LD_ADDR_VAR 0 2
46263: PUSH
46264: LD_INT 0
46266: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_VAR 0 1
46276: PPUSH
46277: CALL_OW 437
46281: ST_TO_ADDR
// if task then
46282: LD_VAR 0 3
46286: IFFALSE 46314
// if task [ 1 ] [ 1 ] = p then
46288: LD_VAR 0 3
46292: PUSH
46293: LD_INT 1
46295: ARRAY
46296: PUSH
46297: LD_INT 1
46299: ARRAY
46300: PUSH
46301: LD_STRING p
46303: EQUAL
46304: IFFALSE 46314
// result := true ;
46306: LD_ADDR_VAR 0 2
46310: PUSH
46311: LD_INT 1
46313: ST_TO_ADDR
// end ;
46314: LD_VAR 0 2
46318: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46319: LD_INT 0
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
// if pos < 1 then
46325: LD_VAR 0 2
46329: PUSH
46330: LD_INT 1
46332: LESS
46333: IFFALSE 46337
// exit ;
46335: GO 46640
// if pos = 1 then
46337: LD_VAR 0 2
46341: PUSH
46342: LD_INT 1
46344: EQUAL
46345: IFFALSE 46378
// result := Replace ( arr , pos [ 1 ] , value ) else
46347: LD_ADDR_VAR 0 4
46351: PUSH
46352: LD_VAR 0 1
46356: PPUSH
46357: LD_VAR 0 2
46361: PUSH
46362: LD_INT 1
46364: ARRAY
46365: PPUSH
46366: LD_VAR 0 3
46370: PPUSH
46371: CALL_OW 1
46375: ST_TO_ADDR
46376: GO 46640
// begin tmp := arr ;
46378: LD_ADDR_VAR 0 6
46382: PUSH
46383: LD_VAR 0 1
46387: ST_TO_ADDR
// s_arr := [ tmp ] ;
46388: LD_ADDR_VAR 0 7
46392: PUSH
46393: LD_VAR 0 6
46397: PUSH
46398: EMPTY
46399: LIST
46400: ST_TO_ADDR
// for i = 1 to pos - 1 do
46401: LD_ADDR_VAR 0 5
46405: PUSH
46406: DOUBLE
46407: LD_INT 1
46409: DEC
46410: ST_TO_ADDR
46411: LD_VAR 0 2
46415: PUSH
46416: LD_INT 1
46418: MINUS
46419: PUSH
46420: FOR_TO
46421: IFFALSE 46466
// begin tmp := tmp [ pos [ i ] ] ;
46423: LD_ADDR_VAR 0 6
46427: PUSH
46428: LD_VAR 0 6
46432: PUSH
46433: LD_VAR 0 2
46437: PUSH
46438: LD_VAR 0 5
46442: ARRAY
46443: ARRAY
46444: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46445: LD_ADDR_VAR 0 7
46449: PUSH
46450: LD_VAR 0 7
46454: PUSH
46455: LD_VAR 0 6
46459: PUSH
46460: EMPTY
46461: LIST
46462: ADD
46463: ST_TO_ADDR
// end ;
46464: GO 46420
46466: POP
46467: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46468: LD_ADDR_VAR 0 6
46472: PUSH
46473: LD_VAR 0 6
46477: PPUSH
46478: LD_VAR 0 2
46482: PUSH
46483: LD_VAR 0 2
46487: ARRAY
46488: PPUSH
46489: LD_VAR 0 3
46493: PPUSH
46494: CALL_OW 1
46498: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46499: LD_ADDR_VAR 0 7
46503: PUSH
46504: LD_VAR 0 7
46508: PPUSH
46509: LD_VAR 0 7
46513: PPUSH
46514: LD_VAR 0 6
46518: PPUSH
46519: CALL_OW 1
46523: ST_TO_ADDR
// for i = s_arr downto 2 do
46524: LD_ADDR_VAR 0 5
46528: PUSH
46529: DOUBLE
46530: LD_VAR 0 7
46534: INC
46535: ST_TO_ADDR
46536: LD_INT 2
46538: PUSH
46539: FOR_DOWNTO
46540: IFFALSE 46624
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46542: LD_ADDR_VAR 0 6
46546: PUSH
46547: LD_VAR 0 7
46551: PUSH
46552: LD_VAR 0 5
46556: PUSH
46557: LD_INT 1
46559: MINUS
46560: ARRAY
46561: PPUSH
46562: LD_VAR 0 2
46566: PUSH
46567: LD_VAR 0 5
46571: PUSH
46572: LD_INT 1
46574: MINUS
46575: ARRAY
46576: PPUSH
46577: LD_VAR 0 7
46581: PUSH
46582: LD_VAR 0 5
46586: ARRAY
46587: PPUSH
46588: CALL_OW 1
46592: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46593: LD_ADDR_VAR 0 7
46597: PUSH
46598: LD_VAR 0 7
46602: PPUSH
46603: LD_VAR 0 5
46607: PUSH
46608: LD_INT 1
46610: MINUS
46611: PPUSH
46612: LD_VAR 0 6
46616: PPUSH
46617: CALL_OW 1
46621: ST_TO_ADDR
// end ;
46622: GO 46539
46624: POP
46625: POP
// result := s_arr [ 1 ] ;
46626: LD_ADDR_VAR 0 4
46630: PUSH
46631: LD_VAR 0 7
46635: PUSH
46636: LD_INT 1
46638: ARRAY
46639: ST_TO_ADDR
// end ; end ;
46640: LD_VAR 0 4
46644: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46645: LD_INT 0
46647: PPUSH
46648: PPUSH
// if not list then
46649: LD_VAR 0 1
46653: NOT
46654: IFFALSE 46658
// exit ;
46656: GO 46749
// i := list [ pos1 ] ;
46658: LD_ADDR_VAR 0 5
46662: PUSH
46663: LD_VAR 0 1
46667: PUSH
46668: LD_VAR 0 2
46672: ARRAY
46673: ST_TO_ADDR
// if not i then
46674: LD_VAR 0 5
46678: NOT
46679: IFFALSE 46683
// exit ;
46681: GO 46749
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46683: LD_ADDR_VAR 0 1
46687: PUSH
46688: LD_VAR 0 1
46692: PPUSH
46693: LD_VAR 0 2
46697: PPUSH
46698: LD_VAR 0 1
46702: PUSH
46703: LD_VAR 0 3
46707: ARRAY
46708: PPUSH
46709: CALL_OW 1
46713: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46714: LD_ADDR_VAR 0 1
46718: PUSH
46719: LD_VAR 0 1
46723: PPUSH
46724: LD_VAR 0 3
46728: PPUSH
46729: LD_VAR 0 5
46733: PPUSH
46734: CALL_OW 1
46738: ST_TO_ADDR
// result := list ;
46739: LD_ADDR_VAR 0 4
46743: PUSH
46744: LD_VAR 0 1
46748: ST_TO_ADDR
// end ;
46749: LD_VAR 0 4
46753: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46754: LD_INT 0
46756: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46757: LD_ADDR_VAR 0 5
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 250
46771: PPUSH
46772: LD_VAR 0 1
46776: PPUSH
46777: CALL_OW 251
46781: PPUSH
46782: LD_VAR 0 2
46786: PPUSH
46787: LD_VAR 0 3
46791: PPUSH
46792: LD_VAR 0 4
46796: PPUSH
46797: CALL 46807 0 5
46801: ST_TO_ADDR
// end ;
46802: LD_VAR 0 5
46806: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46807: LD_INT 0
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
// if not list then
46813: LD_VAR 0 3
46817: NOT
46818: IFFALSE 46822
// exit ;
46820: GO 47210
// result := [ ] ;
46822: LD_ADDR_VAR 0 6
46826: PUSH
46827: EMPTY
46828: ST_TO_ADDR
// for i in list do
46829: LD_ADDR_VAR 0 7
46833: PUSH
46834: LD_VAR 0 3
46838: PUSH
46839: FOR_IN
46840: IFFALSE 47042
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46842: LD_ADDR_VAR 0 9
46846: PUSH
46847: LD_VAR 0 7
46851: PPUSH
46852: LD_VAR 0 1
46856: PPUSH
46857: LD_VAR 0 2
46861: PPUSH
46862: CALL_OW 297
46866: ST_TO_ADDR
// if not result then
46867: LD_VAR 0 6
46871: NOT
46872: IFFALSE 46898
// result := [ [ i , tmp ] ] else
46874: LD_ADDR_VAR 0 6
46878: PUSH
46879: LD_VAR 0 7
46883: PUSH
46884: LD_VAR 0 9
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: ST_TO_ADDR
46896: GO 47040
// begin if result [ result ] [ 2 ] < tmp then
46898: LD_VAR 0 6
46902: PUSH
46903: LD_VAR 0 6
46907: ARRAY
46908: PUSH
46909: LD_INT 2
46911: ARRAY
46912: PUSH
46913: LD_VAR 0 9
46917: LESS
46918: IFFALSE 46960
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46920: LD_ADDR_VAR 0 6
46924: PUSH
46925: LD_VAR 0 6
46929: PPUSH
46930: LD_VAR 0 6
46934: PUSH
46935: LD_INT 1
46937: PLUS
46938: PPUSH
46939: LD_VAR 0 7
46943: PUSH
46944: LD_VAR 0 9
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PPUSH
46953: CALL_OW 2
46957: ST_TO_ADDR
46958: GO 47040
// for j = 1 to result do
46960: LD_ADDR_VAR 0 8
46964: PUSH
46965: DOUBLE
46966: LD_INT 1
46968: DEC
46969: ST_TO_ADDR
46970: LD_VAR 0 6
46974: PUSH
46975: FOR_TO
46976: IFFALSE 47038
// begin if tmp < result [ j ] [ 2 ] then
46978: LD_VAR 0 9
46982: PUSH
46983: LD_VAR 0 6
46987: PUSH
46988: LD_VAR 0 8
46992: ARRAY
46993: PUSH
46994: LD_INT 2
46996: ARRAY
46997: LESS
46998: IFFALSE 47036
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47000: LD_ADDR_VAR 0 6
47004: PUSH
47005: LD_VAR 0 6
47009: PPUSH
47010: LD_VAR 0 8
47014: PPUSH
47015: LD_VAR 0 7
47019: PUSH
47020: LD_VAR 0 9
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PPUSH
47029: CALL_OW 2
47033: ST_TO_ADDR
// break ;
47034: GO 47038
// end ; end ;
47036: GO 46975
47038: POP
47039: POP
// end ; end ;
47040: GO 46839
47042: POP
47043: POP
// if result and not asc then
47044: LD_VAR 0 6
47048: PUSH
47049: LD_VAR 0 4
47053: NOT
47054: AND
47055: IFFALSE 47130
// begin tmp := result ;
47057: LD_ADDR_VAR 0 9
47061: PUSH
47062: LD_VAR 0 6
47066: ST_TO_ADDR
// for i = tmp downto 1 do
47067: LD_ADDR_VAR 0 7
47071: PUSH
47072: DOUBLE
47073: LD_VAR 0 9
47077: INC
47078: ST_TO_ADDR
47079: LD_INT 1
47081: PUSH
47082: FOR_DOWNTO
47083: IFFALSE 47128
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47085: LD_ADDR_VAR 0 6
47089: PUSH
47090: LD_VAR 0 6
47094: PPUSH
47095: LD_VAR 0 9
47099: PUSH
47100: LD_VAR 0 7
47104: MINUS
47105: PUSH
47106: LD_INT 1
47108: PLUS
47109: PPUSH
47110: LD_VAR 0 9
47114: PUSH
47115: LD_VAR 0 7
47119: ARRAY
47120: PPUSH
47121: CALL_OW 1
47125: ST_TO_ADDR
47126: GO 47082
47128: POP
47129: POP
// end ; tmp := [ ] ;
47130: LD_ADDR_VAR 0 9
47134: PUSH
47135: EMPTY
47136: ST_TO_ADDR
// if mode then
47137: LD_VAR 0 5
47141: IFFALSE 47210
// begin for i = 1 to result do
47143: LD_ADDR_VAR 0 7
47147: PUSH
47148: DOUBLE
47149: LD_INT 1
47151: DEC
47152: ST_TO_ADDR
47153: LD_VAR 0 6
47157: PUSH
47158: FOR_TO
47159: IFFALSE 47198
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47161: LD_ADDR_VAR 0 9
47165: PUSH
47166: LD_VAR 0 9
47170: PPUSH
47171: LD_VAR 0 7
47175: PPUSH
47176: LD_VAR 0 6
47180: PUSH
47181: LD_VAR 0 7
47185: ARRAY
47186: PUSH
47187: LD_INT 1
47189: ARRAY
47190: PPUSH
47191: CALL_OW 1
47195: ST_TO_ADDR
47196: GO 47158
47198: POP
47199: POP
// result := tmp ;
47200: LD_ADDR_VAR 0 6
47204: PUSH
47205: LD_VAR 0 9
47209: ST_TO_ADDR
// end ; end ;
47210: LD_VAR 0 6
47214: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47215: LD_INT 0
47217: PPUSH
47218: PPUSH
47219: PPUSH
47220: PPUSH
47221: PPUSH
47222: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47223: LD_ADDR_VAR 0 5
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: ST_TO_ADDR
// if not x or not y then
47245: LD_VAR 0 2
47249: NOT
47250: PUSH
47251: LD_VAR 0 3
47255: NOT
47256: OR
47257: IFFALSE 47261
// exit ;
47259: GO 48911
// if not range then
47261: LD_VAR 0 4
47265: NOT
47266: IFFALSE 47276
// range := 10 ;
47268: LD_ADDR_VAR 0 4
47272: PUSH
47273: LD_INT 10
47275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47276: LD_ADDR_VAR 0 8
47280: PUSH
47281: LD_INT 81
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 92
47295: PUSH
47296: LD_VAR 0 2
47300: PUSH
47301: LD_VAR 0 3
47305: PUSH
47306: LD_VAR 0 4
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: LD_INT 21
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: PPUSH
47339: CALL_OW 69
47343: ST_TO_ADDR
// if not tmp then
47344: LD_VAR 0 8
47348: NOT
47349: IFFALSE 47353
// exit ;
47351: GO 48911
// for i in tmp do
47353: LD_ADDR_VAR 0 6
47357: PUSH
47358: LD_VAR 0 8
47362: PUSH
47363: FOR_IN
47364: IFFALSE 48886
// begin points := [ 0 , 0 , 0 ] ;
47366: LD_ADDR_VAR 0 9
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// bpoints := 1 ;
47385: LD_ADDR_VAR 0 10
47389: PUSH
47390: LD_INT 1
47392: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47393: LD_VAR 0 6
47397: PPUSH
47398: CALL_OW 247
47402: PUSH
47403: LD_INT 1
47405: DOUBLE
47406: EQUAL
47407: IFTRUE 47411
47409: GO 47989
47411: POP
// begin if GetClass ( i ) = 1 then
47412: LD_VAR 0 6
47416: PPUSH
47417: CALL_OW 257
47421: PUSH
47422: LD_INT 1
47424: EQUAL
47425: IFFALSE 47446
// points := [ 10 , 5 , 3 ] ;
47427: LD_ADDR_VAR 0 9
47431: PUSH
47432: LD_INT 10
47434: PUSH
47435: LD_INT 5
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47446: LD_VAR 0 6
47450: PPUSH
47451: CALL_OW 257
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 4
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: IN
47470: IFFALSE 47491
// points := [ 3 , 2 , 1 ] ;
47472: LD_ADDR_VAR 0 9
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47491: LD_VAR 0 6
47495: PPUSH
47496: CALL_OW 257
47500: PUSH
47501: LD_INT 5
47503: EQUAL
47504: IFFALSE 47525
// points := [ 130 , 5 , 2 ] ;
47506: LD_ADDR_VAR 0 9
47510: PUSH
47511: LD_INT 130
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47525: LD_VAR 0 6
47529: PPUSH
47530: CALL_OW 257
47534: PUSH
47535: LD_INT 8
47537: EQUAL
47538: IFFALSE 47559
// points := [ 35 , 35 , 30 ] ;
47540: LD_ADDR_VAR 0 9
47544: PUSH
47545: LD_INT 35
47547: PUSH
47548: LD_INT 35
47550: PUSH
47551: LD_INT 30
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47559: LD_VAR 0 6
47563: PPUSH
47564: CALL_OW 257
47568: PUSH
47569: LD_INT 9
47571: EQUAL
47572: IFFALSE 47593
// points := [ 20 , 55 , 40 ] ;
47574: LD_ADDR_VAR 0 9
47578: PUSH
47579: LD_INT 20
47581: PUSH
47582: LD_INT 55
47584: PUSH
47585: LD_INT 40
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47593: LD_VAR 0 6
47597: PPUSH
47598: CALL_OW 257
47602: PUSH
47603: LD_INT 12
47605: PUSH
47606: LD_INT 16
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: IN
47613: IFFALSE 47634
// points := [ 5 , 3 , 2 ] ;
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_INT 5
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47634: LD_VAR 0 6
47638: PPUSH
47639: CALL_OW 257
47643: PUSH
47644: LD_INT 17
47646: EQUAL
47647: IFFALSE 47668
// points := [ 100 , 50 , 75 ] ;
47649: LD_ADDR_VAR 0 9
47653: PUSH
47654: LD_INT 100
47656: PUSH
47657: LD_INT 50
47659: PUSH
47660: LD_INT 75
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47668: LD_VAR 0 6
47672: PPUSH
47673: CALL_OW 257
47677: PUSH
47678: LD_INT 15
47680: EQUAL
47681: IFFALSE 47702
// points := [ 10 , 5 , 3 ] ;
47683: LD_ADDR_VAR 0 9
47687: PUSH
47688: LD_INT 10
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47702: LD_VAR 0 6
47706: PPUSH
47707: CALL_OW 257
47711: PUSH
47712: LD_INT 14
47714: EQUAL
47715: IFFALSE 47736
// points := [ 10 , 0 , 0 ] ;
47717: LD_ADDR_VAR 0 9
47721: PUSH
47722: LD_INT 10
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47736: LD_VAR 0 6
47740: PPUSH
47741: CALL_OW 257
47745: PUSH
47746: LD_INT 11
47748: EQUAL
47749: IFFALSE 47770
// points := [ 30 , 10 , 5 ] ;
47751: LD_ADDR_VAR 0 9
47755: PUSH
47756: LD_INT 30
47758: PUSH
47759: LD_INT 10
47761: PUSH
47762: LD_INT 5
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47770: LD_VAR 0 1
47774: PPUSH
47775: LD_INT 5
47777: PPUSH
47778: CALL_OW 321
47782: PUSH
47783: LD_INT 2
47785: EQUAL
47786: IFFALSE 47803
// bpoints := bpoints * 1.8 ;
47788: LD_ADDR_VAR 0 10
47792: PUSH
47793: LD_VAR 0 10
47797: PUSH
47798: LD_REAL  1.80000000000000E+0000
47801: MUL
47802: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47803: LD_VAR 0 6
47807: PPUSH
47808: CALL_OW 257
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: IN
47831: PUSH
47832: LD_VAR 0 1
47836: PPUSH
47837: LD_INT 51
47839: PPUSH
47840: CALL_OW 321
47844: PUSH
47845: LD_INT 2
47847: EQUAL
47848: AND
47849: IFFALSE 47866
// bpoints := bpoints * 1.2 ;
47851: LD_ADDR_VAR 0 10
47855: PUSH
47856: LD_VAR 0 10
47860: PUSH
47861: LD_REAL  1.20000000000000E+0000
47864: MUL
47865: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47866: LD_VAR 0 6
47870: PPUSH
47871: CALL_OW 257
47875: PUSH
47876: LD_INT 5
47878: PUSH
47879: LD_INT 7
47881: PUSH
47882: LD_INT 9
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: IN
47890: PUSH
47891: LD_VAR 0 1
47895: PPUSH
47896: LD_INT 52
47898: PPUSH
47899: CALL_OW 321
47903: PUSH
47904: LD_INT 2
47906: EQUAL
47907: AND
47908: IFFALSE 47925
// bpoints := bpoints * 1.5 ;
47910: LD_ADDR_VAR 0 10
47914: PUSH
47915: LD_VAR 0 10
47919: PUSH
47920: LD_REAL  1.50000000000000E+0000
47923: MUL
47924: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47925: LD_VAR 0 1
47929: PPUSH
47930: LD_INT 66
47932: PPUSH
47933: CALL_OW 321
47937: PUSH
47938: LD_INT 2
47940: EQUAL
47941: IFFALSE 47958
// bpoints := bpoints * 1.1 ;
47943: LD_ADDR_VAR 0 10
47947: PUSH
47948: LD_VAR 0 10
47952: PUSH
47953: LD_REAL  1.10000000000000E+0000
47956: MUL
47957: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47958: LD_ADDR_VAR 0 10
47962: PUSH
47963: LD_VAR 0 10
47967: PUSH
47968: LD_VAR 0 6
47972: PPUSH
47973: LD_INT 1
47975: PPUSH
47976: CALL_OW 259
47980: PUSH
47981: LD_REAL  1.15000000000000E+0000
47984: MUL
47985: MUL
47986: ST_TO_ADDR
// end ; unit_vehicle :
47987: GO 48815
47989: LD_INT 2
47991: DOUBLE
47992: EQUAL
47993: IFTRUE 47997
47995: GO 48803
47997: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47998: LD_VAR 0 6
48002: PPUSH
48003: CALL_OW 264
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 42
48013: PUSH
48014: LD_INT 24
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: IN
48022: IFFALSE 48043
// points := [ 25 , 5 , 3 ] ;
48024: LD_ADDR_VAR 0 9
48028: PUSH
48029: LD_INT 25
48031: PUSH
48032: LD_INT 5
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48043: LD_VAR 0 6
48047: PPUSH
48048: CALL_OW 264
48052: PUSH
48053: LD_INT 4
48055: PUSH
48056: LD_INT 43
48058: PUSH
48059: LD_INT 25
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: IN
48067: IFFALSE 48088
// points := [ 40 , 15 , 5 ] ;
48069: LD_ADDR_VAR 0 9
48073: PUSH
48074: LD_INT 40
48076: PUSH
48077: LD_INT 15
48079: PUSH
48080: LD_INT 5
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48088: LD_VAR 0 6
48092: PPUSH
48093: CALL_OW 264
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 23
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: IN
48108: IFFALSE 48129
// points := [ 7 , 25 , 8 ] ;
48110: LD_ADDR_VAR 0 9
48114: PUSH
48115: LD_INT 7
48117: PUSH
48118: LD_INT 25
48120: PUSH
48121: LD_INT 8
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48129: LD_VAR 0 6
48133: PPUSH
48134: CALL_OW 264
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 27
48144: PUSH
48145: LD_INT 44
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: IN
48153: IFFALSE 48174
// points := [ 14 , 50 , 16 ] ;
48155: LD_ADDR_VAR 0 9
48159: PUSH
48160: LD_INT 14
48162: PUSH
48163: LD_INT 50
48165: PUSH
48166: LD_INT 16
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48174: LD_VAR 0 6
48178: PPUSH
48179: CALL_OW 264
48183: PUSH
48184: LD_INT 6
48186: PUSH
48187: LD_INT 46
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: IN
48194: IFFALSE 48215
// points := [ 32 , 120 , 70 ] ;
48196: LD_ADDR_VAR 0 9
48200: PUSH
48201: LD_INT 32
48203: PUSH
48204: LD_INT 120
48206: PUSH
48207: LD_INT 70
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48215: LD_VAR 0 6
48219: PPUSH
48220: CALL_OW 264
48224: PUSH
48225: LD_INT 7
48227: PUSH
48228: LD_INT 28
48230: PUSH
48231: LD_INT 45
48233: PUSH
48234: LD_INT 92
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: IN
48243: IFFALSE 48264
// points := [ 35 , 20 , 45 ] ;
48245: LD_ADDR_VAR 0 9
48249: PUSH
48250: LD_INT 35
48252: PUSH
48253: LD_INT 20
48255: PUSH
48256: LD_INT 45
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48264: LD_VAR 0 6
48268: PPUSH
48269: CALL_OW 264
48273: PUSH
48274: LD_INT 47
48276: PUSH
48277: EMPTY
48278: LIST
48279: IN
48280: IFFALSE 48301
// points := [ 67 , 45 , 75 ] ;
48282: LD_ADDR_VAR 0 9
48286: PUSH
48287: LD_INT 67
48289: PUSH
48290: LD_INT 45
48292: PUSH
48293: LD_INT 75
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48301: LD_VAR 0 6
48305: PPUSH
48306: CALL_OW 264
48310: PUSH
48311: LD_INT 26
48313: PUSH
48314: EMPTY
48315: LIST
48316: IN
48317: IFFALSE 48338
// points := [ 120 , 30 , 80 ] ;
48319: LD_ADDR_VAR 0 9
48323: PUSH
48324: LD_INT 120
48326: PUSH
48327: LD_INT 30
48329: PUSH
48330: LD_INT 80
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48338: LD_VAR 0 6
48342: PPUSH
48343: CALL_OW 264
48347: PUSH
48348: LD_INT 22
48350: PUSH
48351: EMPTY
48352: LIST
48353: IN
48354: IFFALSE 48375
// points := [ 40 , 1 , 1 ] ;
48356: LD_ADDR_VAR 0 9
48360: PUSH
48361: LD_INT 40
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48375: LD_VAR 0 6
48379: PPUSH
48380: CALL_OW 264
48384: PUSH
48385: LD_INT 29
48387: PUSH
48388: EMPTY
48389: LIST
48390: IN
48391: IFFALSE 48412
// points := [ 70 , 200 , 400 ] ;
48393: LD_ADDR_VAR 0 9
48397: PUSH
48398: LD_INT 70
48400: PUSH
48401: LD_INT 200
48403: PUSH
48404: LD_INT 400
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48412: LD_VAR 0 6
48416: PPUSH
48417: CALL_OW 264
48421: PUSH
48422: LD_INT 14
48424: PUSH
48425: LD_INT 53
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: IN
48432: IFFALSE 48453
// points := [ 40 , 10 , 20 ] ;
48434: LD_ADDR_VAR 0 9
48438: PUSH
48439: LD_INT 40
48441: PUSH
48442: LD_INT 10
48444: PUSH
48445: LD_INT 20
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48453: LD_VAR 0 6
48457: PPUSH
48458: CALL_OW 264
48462: PUSH
48463: LD_INT 9
48465: PUSH
48466: EMPTY
48467: LIST
48468: IN
48469: IFFALSE 48490
// points := [ 5 , 70 , 20 ] ;
48471: LD_ADDR_VAR 0 9
48475: PUSH
48476: LD_INT 5
48478: PUSH
48479: LD_INT 70
48481: PUSH
48482: LD_INT 20
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48490: LD_VAR 0 6
48494: PPUSH
48495: CALL_OW 264
48499: PUSH
48500: LD_INT 10
48502: PUSH
48503: EMPTY
48504: LIST
48505: IN
48506: IFFALSE 48527
// points := [ 35 , 110 , 70 ] ;
48508: LD_ADDR_VAR 0 9
48512: PUSH
48513: LD_INT 35
48515: PUSH
48516: LD_INT 110
48518: PUSH
48519: LD_INT 70
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48527: LD_VAR 0 6
48531: PPUSH
48532: CALL_OW 265
48536: PUSH
48537: LD_INT 25
48539: EQUAL
48540: IFFALSE 48561
// points := [ 80 , 65 , 100 ] ;
48542: LD_ADDR_VAR 0 9
48546: PUSH
48547: LD_INT 80
48549: PUSH
48550: LD_INT 65
48552: PUSH
48553: LD_INT 100
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48561: LD_VAR 0 6
48565: PPUSH
48566: CALL_OW 263
48570: PUSH
48571: LD_INT 1
48573: EQUAL
48574: IFFALSE 48609
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48576: LD_ADDR_VAR 0 10
48580: PUSH
48581: LD_VAR 0 10
48585: PUSH
48586: LD_VAR 0 6
48590: PPUSH
48591: CALL_OW 311
48595: PPUSH
48596: LD_INT 3
48598: PPUSH
48599: CALL_OW 259
48603: PUSH
48604: LD_INT 4
48606: MUL
48607: MUL
48608: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48609: LD_VAR 0 6
48613: PPUSH
48614: CALL_OW 263
48618: PUSH
48619: LD_INT 2
48621: EQUAL
48622: IFFALSE 48673
// begin j := IsControledBy ( i ) ;
48624: LD_ADDR_VAR 0 7
48628: PUSH
48629: LD_VAR 0 6
48633: PPUSH
48634: CALL_OW 312
48638: ST_TO_ADDR
// if j then
48639: LD_VAR 0 7
48643: IFFALSE 48673
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48645: LD_ADDR_VAR 0 10
48649: PUSH
48650: LD_VAR 0 10
48654: PUSH
48655: LD_VAR 0 7
48659: PPUSH
48660: LD_INT 3
48662: PPUSH
48663: CALL_OW 259
48667: PUSH
48668: LD_INT 3
48670: MUL
48671: MUL
48672: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48673: LD_VAR 0 6
48677: PPUSH
48678: CALL_OW 264
48682: PUSH
48683: LD_INT 5
48685: PUSH
48686: LD_INT 6
48688: PUSH
48689: LD_INT 46
48691: PUSH
48692: LD_INT 44
48694: PUSH
48695: LD_INT 47
48697: PUSH
48698: LD_INT 45
48700: PUSH
48701: LD_INT 28
48703: PUSH
48704: LD_INT 7
48706: PUSH
48707: LD_INT 27
48709: PUSH
48710: LD_INT 29
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: IN
48725: PUSH
48726: LD_VAR 0 1
48730: PPUSH
48731: LD_INT 52
48733: PPUSH
48734: CALL_OW 321
48738: PUSH
48739: LD_INT 2
48741: EQUAL
48742: AND
48743: IFFALSE 48760
// bpoints := bpoints * 1.2 ;
48745: LD_ADDR_VAR 0 10
48749: PUSH
48750: LD_VAR 0 10
48754: PUSH
48755: LD_REAL  1.20000000000000E+0000
48758: MUL
48759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48760: LD_VAR 0 6
48764: PPUSH
48765: CALL_OW 264
48769: PUSH
48770: LD_INT 6
48772: PUSH
48773: LD_INT 46
48775: PUSH
48776: LD_INT 47
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: IN
48784: IFFALSE 48801
// bpoints := bpoints * 1.2 ;
48786: LD_ADDR_VAR 0 10
48790: PUSH
48791: LD_VAR 0 10
48795: PUSH
48796: LD_REAL  1.20000000000000E+0000
48799: MUL
48800: ST_TO_ADDR
// end ; unit_building :
48801: GO 48815
48803: LD_INT 3
48805: DOUBLE
48806: EQUAL
48807: IFTRUE 48811
48809: GO 48814
48811: POP
// ; end ;
48812: GO 48815
48814: POP
// for j = 1 to 3 do
48815: LD_ADDR_VAR 0 7
48819: PUSH
48820: DOUBLE
48821: LD_INT 1
48823: DEC
48824: ST_TO_ADDR
48825: LD_INT 3
48827: PUSH
48828: FOR_TO
48829: IFFALSE 48882
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48831: LD_ADDR_VAR 0 5
48835: PUSH
48836: LD_VAR 0 5
48840: PPUSH
48841: LD_VAR 0 7
48845: PPUSH
48846: LD_VAR 0 5
48850: PUSH
48851: LD_VAR 0 7
48855: ARRAY
48856: PUSH
48857: LD_VAR 0 9
48861: PUSH
48862: LD_VAR 0 7
48866: ARRAY
48867: PUSH
48868: LD_VAR 0 10
48872: MUL
48873: PLUS
48874: PPUSH
48875: CALL_OW 1
48879: ST_TO_ADDR
48880: GO 48828
48882: POP
48883: POP
// end ;
48884: GO 47363
48886: POP
48887: POP
// result := Replace ( result , 4 , tmp ) ;
48888: LD_ADDR_VAR 0 5
48892: PUSH
48893: LD_VAR 0 5
48897: PPUSH
48898: LD_INT 4
48900: PPUSH
48901: LD_VAR 0 8
48905: PPUSH
48906: CALL_OW 1
48910: ST_TO_ADDR
// end ;
48911: LD_VAR 0 5
48915: RET
// export function DangerAtRange ( unit , range ) ; begin
48916: LD_INT 0
48918: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48919: LD_ADDR_VAR 0 3
48923: PUSH
48924: LD_VAR 0 1
48928: PPUSH
48929: CALL_OW 255
48933: PPUSH
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 250
48943: PPUSH
48944: LD_VAR 0 1
48948: PPUSH
48949: CALL_OW 251
48953: PPUSH
48954: LD_VAR 0 2
48958: PPUSH
48959: CALL 47215 0 4
48963: ST_TO_ADDR
// end ;
48964: LD_VAR 0 3
48968: RET
// export function DangerInArea ( side , area ) ; begin
48969: LD_INT 0
48971: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48972: LD_ADDR_VAR 0 3
48976: PUSH
48977: LD_VAR 0 2
48981: PPUSH
48982: LD_INT 81
48984: PUSH
48985: LD_VAR 0 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PPUSH
48994: CALL_OW 70
48998: ST_TO_ADDR
// end ;
48999: LD_VAR 0 3
49003: RET
// export function IsExtension ( b ) ; begin
49004: LD_INT 0
49006: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49007: LD_ADDR_VAR 0 2
49011: PUSH
49012: LD_VAR 0 1
49016: PUSH
49017: LD_INT 23
49019: PUSH
49020: LD_INT 20
49022: PUSH
49023: LD_INT 22
49025: PUSH
49026: LD_INT 17
49028: PUSH
49029: LD_INT 24
49031: PUSH
49032: LD_INT 21
49034: PUSH
49035: LD_INT 19
49037: PUSH
49038: LD_INT 16
49040: PUSH
49041: LD_INT 25
49043: PUSH
49044: LD_INT 18
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: IN
49059: ST_TO_ADDR
// end ;
49060: LD_VAR 0 2
49064: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49065: LD_INT 0
49067: PPUSH
49068: PPUSH
49069: PPUSH
// result := [ ] ;
49070: LD_ADDR_VAR 0 4
49074: PUSH
49075: EMPTY
49076: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49077: LD_ADDR_VAR 0 5
49081: PUSH
49082: LD_VAR 0 2
49086: PPUSH
49087: LD_INT 21
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PPUSH
49097: CALL_OW 70
49101: ST_TO_ADDR
// if not tmp then
49102: LD_VAR 0 5
49106: NOT
49107: IFFALSE 49111
// exit ;
49109: GO 49175
// if checkLink then
49111: LD_VAR 0 3
49115: IFFALSE 49165
// begin for i in tmp do
49117: LD_ADDR_VAR 0 6
49121: PUSH
49122: LD_VAR 0 5
49126: PUSH
49127: FOR_IN
49128: IFFALSE 49163
// if GetBase ( i ) <> base then
49130: LD_VAR 0 6
49134: PPUSH
49135: CALL_OW 274
49139: PUSH
49140: LD_VAR 0 1
49144: NONEQUAL
49145: IFFALSE 49161
// ComLinkToBase ( base , i ) ;
49147: LD_VAR 0 1
49151: PPUSH
49152: LD_VAR 0 6
49156: PPUSH
49157: CALL_OW 169
49161: GO 49127
49163: POP
49164: POP
// end ; result := tmp ;
49165: LD_ADDR_VAR 0 4
49169: PUSH
49170: LD_VAR 0 5
49174: ST_TO_ADDR
// end ;
49175: LD_VAR 0 4
49179: RET
// export function ComComplete ( units , b ) ; var i ; begin
49180: LD_INT 0
49182: PPUSH
49183: PPUSH
// if not units then
49184: LD_VAR 0 1
49188: NOT
49189: IFFALSE 49193
// exit ;
49191: GO 49283
// for i in units do
49193: LD_ADDR_VAR 0 4
49197: PUSH
49198: LD_VAR 0 1
49202: PUSH
49203: FOR_IN
49204: IFFALSE 49281
// if BuildingStatus ( b ) = bs_build then
49206: LD_VAR 0 2
49210: PPUSH
49211: CALL_OW 461
49215: PUSH
49216: LD_INT 1
49218: EQUAL
49219: IFFALSE 49279
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49221: LD_VAR 0 4
49225: PPUSH
49226: LD_STRING h
49228: PUSH
49229: LD_VAR 0 2
49233: PPUSH
49234: CALL_OW 250
49238: PUSH
49239: LD_VAR 0 2
49243: PPUSH
49244: CALL_OW 251
49248: PUSH
49249: LD_VAR 0 2
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: PPUSH
49275: CALL_OW 446
49279: GO 49203
49281: POP
49282: POP
// end ;
49283: LD_VAR 0 3
49287: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49288: LD_INT 0
49290: PPUSH
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49296: LD_VAR 0 1
49300: NOT
49301: PUSH
49302: LD_VAR 0 1
49306: PPUSH
49307: CALL_OW 263
49311: PUSH
49312: LD_INT 2
49314: NONEQUAL
49315: OR
49316: IFFALSE 49320
// exit ;
49318: GO 49636
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49320: LD_ADDR_VAR 0 6
49324: PUSH
49325: LD_INT 22
49327: PUSH
49328: LD_VAR 0 1
49332: PPUSH
49333: CALL_OW 255
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 30
49347: PUSH
49348: LD_INT 36
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 34
49357: PUSH
49358: LD_INT 31
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PPUSH
49374: CALL_OW 69
49378: ST_TO_ADDR
// if not tmp then
49379: LD_VAR 0 6
49383: NOT
49384: IFFALSE 49388
// exit ;
49386: GO 49636
// result := [ ] ;
49388: LD_ADDR_VAR 0 2
49392: PUSH
49393: EMPTY
49394: ST_TO_ADDR
// for i in tmp do
49395: LD_ADDR_VAR 0 3
49399: PUSH
49400: LD_VAR 0 6
49404: PUSH
49405: FOR_IN
49406: IFFALSE 49477
// begin t := UnitsInside ( i ) ;
49408: LD_ADDR_VAR 0 4
49412: PUSH
49413: LD_VAR 0 3
49417: PPUSH
49418: CALL_OW 313
49422: ST_TO_ADDR
// if t then
49423: LD_VAR 0 4
49427: IFFALSE 49475
// for j in t do
49429: LD_ADDR_VAR 0 7
49433: PUSH
49434: LD_VAR 0 4
49438: PUSH
49439: FOR_IN
49440: IFFALSE 49473
// result := Replace ( result , result + 1 , j ) ;
49442: LD_ADDR_VAR 0 2
49446: PUSH
49447: LD_VAR 0 2
49451: PPUSH
49452: LD_VAR 0 2
49456: PUSH
49457: LD_INT 1
49459: PLUS
49460: PPUSH
49461: LD_VAR 0 7
49465: PPUSH
49466: CALL_OW 1
49470: ST_TO_ADDR
49471: GO 49439
49473: POP
49474: POP
// end ;
49475: GO 49405
49477: POP
49478: POP
// if not result then
49479: LD_VAR 0 2
49483: NOT
49484: IFFALSE 49488
// exit ;
49486: GO 49636
// mech := result [ 1 ] ;
49488: LD_ADDR_VAR 0 5
49492: PUSH
49493: LD_VAR 0 2
49497: PUSH
49498: LD_INT 1
49500: ARRAY
49501: ST_TO_ADDR
// if result > 1 then
49502: LD_VAR 0 2
49506: PUSH
49507: LD_INT 1
49509: GREATER
49510: IFFALSE 49622
// begin for i = 2 to result do
49512: LD_ADDR_VAR 0 3
49516: PUSH
49517: DOUBLE
49518: LD_INT 2
49520: DEC
49521: ST_TO_ADDR
49522: LD_VAR 0 2
49526: PUSH
49527: FOR_TO
49528: IFFALSE 49620
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49530: LD_ADDR_VAR 0 4
49534: PUSH
49535: LD_VAR 0 2
49539: PUSH
49540: LD_VAR 0 3
49544: ARRAY
49545: PPUSH
49546: LD_INT 3
49548: PPUSH
49549: CALL_OW 259
49553: PUSH
49554: LD_VAR 0 2
49558: PUSH
49559: LD_VAR 0 3
49563: ARRAY
49564: PPUSH
49565: CALL_OW 432
49569: MINUS
49570: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49571: LD_VAR 0 4
49575: PUSH
49576: LD_VAR 0 5
49580: PPUSH
49581: LD_INT 3
49583: PPUSH
49584: CALL_OW 259
49588: PUSH
49589: LD_VAR 0 5
49593: PPUSH
49594: CALL_OW 432
49598: MINUS
49599: GREATEREQUAL
49600: IFFALSE 49618
// mech := result [ i ] ;
49602: LD_ADDR_VAR 0 5
49606: PUSH
49607: LD_VAR 0 2
49611: PUSH
49612: LD_VAR 0 3
49616: ARRAY
49617: ST_TO_ADDR
// end ;
49618: GO 49527
49620: POP
49621: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49622: LD_VAR 0 1
49626: PPUSH
49627: LD_VAR 0 5
49631: PPUSH
49632: CALL_OW 135
// end ;
49636: LD_VAR 0 2
49640: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49641: LD_INT 0
49643: PPUSH
49644: PPUSH
49645: PPUSH
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
// result := [ ] ;
49656: LD_ADDR_VAR 0 7
49660: PUSH
49661: EMPTY
49662: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49663: LD_VAR 0 1
49667: PPUSH
49668: CALL_OW 266
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: IN
49683: NOT
49684: IFFALSE 49688
// exit ;
49686: GO 51322
// if name then
49688: LD_VAR 0 3
49692: IFFALSE 49708
// SetBName ( base_dep , name ) ;
49694: LD_VAR 0 1
49698: PPUSH
49699: LD_VAR 0 3
49703: PPUSH
49704: CALL_OW 500
// base := GetBase ( base_dep ) ;
49708: LD_ADDR_VAR 0 15
49712: PUSH
49713: LD_VAR 0 1
49717: PPUSH
49718: CALL_OW 274
49722: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49723: LD_ADDR_VAR 0 16
49727: PUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 255
49737: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49738: LD_ADDR_VAR 0 17
49742: PUSH
49743: LD_VAR 0 1
49747: PPUSH
49748: CALL_OW 248
49752: ST_TO_ADDR
// if sources then
49753: LD_VAR 0 5
49757: IFFALSE 49804
// for i = 1 to 3 do
49759: LD_ADDR_VAR 0 8
49763: PUSH
49764: DOUBLE
49765: LD_INT 1
49767: DEC
49768: ST_TO_ADDR
49769: LD_INT 3
49771: PUSH
49772: FOR_TO
49773: IFFALSE 49802
// AddResourceType ( base , i , sources [ i ] ) ;
49775: LD_VAR 0 15
49779: PPUSH
49780: LD_VAR 0 8
49784: PPUSH
49785: LD_VAR 0 5
49789: PUSH
49790: LD_VAR 0 8
49794: ARRAY
49795: PPUSH
49796: CALL_OW 276
49800: GO 49772
49802: POP
49803: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49804: LD_ADDR_VAR 0 18
49808: PUSH
49809: LD_VAR 0 15
49813: PPUSH
49814: LD_VAR 0 2
49818: PPUSH
49819: LD_INT 1
49821: PPUSH
49822: CALL 49065 0 3
49826: ST_TO_ADDR
// InitHc ;
49827: CALL_OW 19
// InitUc ;
49831: CALL_OW 18
// uc_side := side ;
49835: LD_ADDR_OWVAR 20
49839: PUSH
49840: LD_VAR 0 16
49844: ST_TO_ADDR
// uc_nation := nation ;
49845: LD_ADDR_OWVAR 21
49849: PUSH
49850: LD_VAR 0 17
49854: ST_TO_ADDR
// if buildings then
49855: LD_VAR 0 18
49859: IFFALSE 51181
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49861: LD_ADDR_VAR 0 19
49865: PUSH
49866: LD_VAR 0 18
49870: PPUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 30
49876: PUSH
49877: LD_INT 29
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 30
49886: PUSH
49887: LD_INT 30
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: PPUSH
49899: CALL_OW 72
49903: ST_TO_ADDR
// if tmp then
49904: LD_VAR 0 19
49908: IFFALSE 49956
// for i in tmp do
49910: LD_ADDR_VAR 0 8
49914: PUSH
49915: LD_VAR 0 19
49919: PUSH
49920: FOR_IN
49921: IFFALSE 49954
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49923: LD_VAR 0 8
49927: PPUSH
49928: CALL_OW 250
49932: PPUSH
49933: LD_VAR 0 8
49937: PPUSH
49938: CALL_OW 251
49942: PPUSH
49943: LD_VAR 0 16
49947: PPUSH
49948: CALL_OW 441
49952: GO 49920
49954: POP
49955: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49956: LD_VAR 0 18
49960: PPUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 30
49966: PUSH
49967: LD_INT 32
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 30
49976: PUSH
49977: LD_INT 33
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: PPUSH
49989: CALL_OW 72
49993: IFFALSE 50081
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49995: LD_ADDR_VAR 0 8
49999: PUSH
50000: LD_VAR 0 18
50004: PPUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 30
50010: PUSH
50011: LD_INT 32
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 30
50020: PUSH
50021: LD_INT 33
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: LIST
50032: PPUSH
50033: CALL_OW 72
50037: PUSH
50038: FOR_IN
50039: IFFALSE 50079
// begin if not GetBWeapon ( i ) then
50041: LD_VAR 0 8
50045: PPUSH
50046: CALL_OW 269
50050: NOT
50051: IFFALSE 50077
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50053: LD_VAR 0 8
50057: PPUSH
50058: LD_VAR 0 8
50062: PPUSH
50063: LD_VAR 0 2
50067: PPUSH
50068: CALL 51327 0 2
50072: PPUSH
50073: CALL_OW 431
// end ;
50077: GO 50038
50079: POP
50080: POP
// end ; for i = 1 to personel do
50081: LD_ADDR_VAR 0 8
50085: PUSH
50086: DOUBLE
50087: LD_INT 1
50089: DEC
50090: ST_TO_ADDR
50091: LD_VAR 0 6
50095: PUSH
50096: FOR_TO
50097: IFFALSE 51161
// begin if i > 4 then
50099: LD_VAR 0 8
50103: PUSH
50104: LD_INT 4
50106: GREATER
50107: IFFALSE 50111
// break ;
50109: GO 51161
// case i of 1 :
50111: LD_VAR 0 8
50115: PUSH
50116: LD_INT 1
50118: DOUBLE
50119: EQUAL
50120: IFTRUE 50124
50122: GO 50204
50124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50125: LD_ADDR_VAR 0 12
50129: PUSH
50130: LD_VAR 0 18
50134: PPUSH
50135: LD_INT 22
50137: PUSH
50138: LD_VAR 0 16
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 58
50149: PUSH
50150: EMPTY
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 30
50158: PUSH
50159: LD_INT 32
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 30
50168: PUSH
50169: LD_INT 4
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 30
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: PPUSH
50197: CALL_OW 72
50201: ST_TO_ADDR
50202: GO 50426
50204: LD_INT 2
50206: DOUBLE
50207: EQUAL
50208: IFTRUE 50212
50210: GO 50274
50212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50213: LD_ADDR_VAR 0 12
50217: PUSH
50218: LD_VAR 0 18
50222: PPUSH
50223: LD_INT 22
50225: PUSH
50226: LD_VAR 0 16
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 30
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 30
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PPUSH
50267: CALL_OW 72
50271: ST_TO_ADDR
50272: GO 50426
50274: LD_INT 3
50276: DOUBLE
50277: EQUAL
50278: IFTRUE 50282
50280: GO 50344
50282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50283: LD_ADDR_VAR 0 12
50287: PUSH
50288: LD_VAR 0 18
50292: PPUSH
50293: LD_INT 22
50295: PUSH
50296: LD_VAR 0 16
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 30
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 30
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PPUSH
50337: CALL_OW 72
50341: ST_TO_ADDR
50342: GO 50426
50344: LD_INT 4
50346: DOUBLE
50347: EQUAL
50348: IFTRUE 50352
50350: GO 50425
50352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50353: LD_ADDR_VAR 0 12
50357: PUSH
50358: LD_VAR 0 18
50362: PPUSH
50363: LD_INT 22
50365: PUSH
50366: LD_VAR 0 16
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 30
50380: PUSH
50381: LD_INT 6
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 30
50390: PUSH
50391: LD_INT 7
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 30
50400: PUSH
50401: LD_INT 8
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PPUSH
50418: CALL_OW 72
50422: ST_TO_ADDR
50423: GO 50426
50425: POP
// if i = 1 then
50426: LD_VAR 0 8
50430: PUSH
50431: LD_INT 1
50433: EQUAL
50434: IFFALSE 50545
// begin tmp := [ ] ;
50436: LD_ADDR_VAR 0 19
50440: PUSH
50441: EMPTY
50442: ST_TO_ADDR
// for j in f do
50443: LD_ADDR_VAR 0 9
50447: PUSH
50448: LD_VAR 0 12
50452: PUSH
50453: FOR_IN
50454: IFFALSE 50527
// if GetBType ( j ) = b_bunker then
50456: LD_VAR 0 9
50460: PPUSH
50461: CALL_OW 266
50465: PUSH
50466: LD_INT 32
50468: EQUAL
50469: IFFALSE 50496
// tmp := Insert ( tmp , 1 , j ) else
50471: LD_ADDR_VAR 0 19
50475: PUSH
50476: LD_VAR 0 19
50480: PPUSH
50481: LD_INT 1
50483: PPUSH
50484: LD_VAR 0 9
50488: PPUSH
50489: CALL_OW 2
50493: ST_TO_ADDR
50494: GO 50525
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50496: LD_ADDR_VAR 0 19
50500: PUSH
50501: LD_VAR 0 19
50505: PPUSH
50506: LD_VAR 0 19
50510: PUSH
50511: LD_INT 1
50513: PLUS
50514: PPUSH
50515: LD_VAR 0 9
50519: PPUSH
50520: CALL_OW 2
50524: ST_TO_ADDR
50525: GO 50453
50527: POP
50528: POP
// if tmp then
50529: LD_VAR 0 19
50533: IFFALSE 50545
// f := tmp ;
50535: LD_ADDR_VAR 0 12
50539: PUSH
50540: LD_VAR 0 19
50544: ST_TO_ADDR
// end ; x := personel [ i ] ;
50545: LD_ADDR_VAR 0 13
50549: PUSH
50550: LD_VAR 0 6
50554: PUSH
50555: LD_VAR 0 8
50559: ARRAY
50560: ST_TO_ADDR
// if x = - 1 then
50561: LD_VAR 0 13
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: EQUAL
50570: IFFALSE 50779
// begin for j in f do
50572: LD_ADDR_VAR 0 9
50576: PUSH
50577: LD_VAR 0 12
50581: PUSH
50582: FOR_IN
50583: IFFALSE 50775
// repeat InitHc ;
50585: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50589: LD_VAR 0 9
50593: PPUSH
50594: CALL_OW 266
50598: PUSH
50599: LD_INT 5
50601: EQUAL
50602: IFFALSE 50672
// begin if UnitsInside ( j ) < 3 then
50604: LD_VAR 0 9
50608: PPUSH
50609: CALL_OW 313
50613: PUSH
50614: LD_INT 3
50616: LESS
50617: IFFALSE 50653
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50619: LD_INT 0
50621: PPUSH
50622: LD_INT 5
50624: PUSH
50625: LD_INT 8
50627: PUSH
50628: LD_INT 9
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: PUSH
50636: LD_VAR 0 17
50640: ARRAY
50641: PPUSH
50642: LD_VAR 0 4
50646: PPUSH
50647: CALL_OW 380
50651: GO 50670
// PrepareHuman ( false , i , skill ) ;
50653: LD_INT 0
50655: PPUSH
50656: LD_VAR 0 8
50660: PPUSH
50661: LD_VAR 0 4
50665: PPUSH
50666: CALL_OW 380
// end else
50670: GO 50689
// PrepareHuman ( false , i , skill ) ;
50672: LD_INT 0
50674: PPUSH
50675: LD_VAR 0 8
50679: PPUSH
50680: LD_VAR 0 4
50684: PPUSH
50685: CALL_OW 380
// un := CreateHuman ;
50689: LD_ADDR_VAR 0 14
50693: PUSH
50694: CALL_OW 44
50698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50699: LD_ADDR_VAR 0 7
50703: PUSH
50704: LD_VAR 0 7
50708: PPUSH
50709: LD_INT 1
50711: PPUSH
50712: LD_VAR 0 14
50716: PPUSH
50717: CALL_OW 2
50721: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50722: LD_VAR 0 14
50726: PPUSH
50727: LD_VAR 0 9
50731: PPUSH
50732: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50736: LD_VAR 0 9
50740: PPUSH
50741: CALL_OW 313
50745: PUSH
50746: LD_INT 6
50748: EQUAL
50749: PUSH
50750: LD_VAR 0 9
50754: PPUSH
50755: CALL_OW 266
50759: PUSH
50760: LD_INT 32
50762: PUSH
50763: LD_INT 31
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: IN
50770: OR
50771: IFFALSE 50585
50773: GO 50582
50775: POP
50776: POP
// end else
50777: GO 51159
// for j = 1 to x do
50779: LD_ADDR_VAR 0 9
50783: PUSH
50784: DOUBLE
50785: LD_INT 1
50787: DEC
50788: ST_TO_ADDR
50789: LD_VAR 0 13
50793: PUSH
50794: FOR_TO
50795: IFFALSE 51157
// begin InitHc ;
50797: CALL_OW 19
// if not f then
50801: LD_VAR 0 12
50805: NOT
50806: IFFALSE 50895
// begin PrepareHuman ( false , i , skill ) ;
50808: LD_INT 0
50810: PPUSH
50811: LD_VAR 0 8
50815: PPUSH
50816: LD_VAR 0 4
50820: PPUSH
50821: CALL_OW 380
// un := CreateHuman ;
50825: LD_ADDR_VAR 0 14
50829: PUSH
50830: CALL_OW 44
50834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50835: LD_ADDR_VAR 0 7
50839: PUSH
50840: LD_VAR 0 7
50844: PPUSH
50845: LD_INT 1
50847: PPUSH
50848: LD_VAR 0 14
50852: PPUSH
50853: CALL_OW 2
50857: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50858: LD_VAR 0 14
50862: PPUSH
50863: LD_VAR 0 1
50867: PPUSH
50868: CALL_OW 250
50872: PPUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 251
50882: PPUSH
50883: LD_INT 10
50885: PPUSH
50886: LD_INT 0
50888: PPUSH
50889: CALL_OW 50
// continue ;
50893: GO 50794
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50895: LD_VAR 0 12
50899: PUSH
50900: LD_INT 1
50902: ARRAY
50903: PPUSH
50904: CALL_OW 313
50908: PUSH
50909: LD_VAR 0 12
50913: PUSH
50914: LD_INT 1
50916: ARRAY
50917: PPUSH
50918: CALL_OW 266
50922: PUSH
50923: LD_INT 32
50925: PUSH
50926: LD_INT 31
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: IN
50933: AND
50934: PUSH
50935: LD_VAR 0 12
50939: PUSH
50940: LD_INT 1
50942: ARRAY
50943: PPUSH
50944: CALL_OW 313
50948: PUSH
50949: LD_INT 6
50951: EQUAL
50952: OR
50953: IFFALSE 50973
// f := Delete ( f , 1 ) ;
50955: LD_ADDR_VAR 0 12
50959: PUSH
50960: LD_VAR 0 12
50964: PPUSH
50965: LD_INT 1
50967: PPUSH
50968: CALL_OW 3
50972: ST_TO_ADDR
// if not f then
50973: LD_VAR 0 12
50977: NOT
50978: IFFALSE 50996
// begin x := x + 2 ;
50980: LD_ADDR_VAR 0 13
50984: PUSH
50985: LD_VAR 0 13
50989: PUSH
50990: LD_INT 2
50992: PLUS
50993: ST_TO_ADDR
// continue ;
50994: GO 50794
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50996: LD_VAR 0 12
51000: PUSH
51001: LD_INT 1
51003: ARRAY
51004: PPUSH
51005: CALL_OW 266
51009: PUSH
51010: LD_INT 5
51012: EQUAL
51013: IFFALSE 51087
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51015: LD_VAR 0 12
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PPUSH
51024: CALL_OW 313
51028: PUSH
51029: LD_INT 3
51031: LESS
51032: IFFALSE 51068
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51034: LD_INT 0
51036: PPUSH
51037: LD_INT 5
51039: PUSH
51040: LD_INT 8
51042: PUSH
51043: LD_INT 9
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: PUSH
51051: LD_VAR 0 17
51055: ARRAY
51056: PPUSH
51057: LD_VAR 0 4
51061: PPUSH
51062: CALL_OW 380
51066: GO 51085
// PrepareHuman ( false , i , skill ) ;
51068: LD_INT 0
51070: PPUSH
51071: LD_VAR 0 8
51075: PPUSH
51076: LD_VAR 0 4
51080: PPUSH
51081: CALL_OW 380
// end else
51085: GO 51104
// PrepareHuman ( false , i , skill ) ;
51087: LD_INT 0
51089: PPUSH
51090: LD_VAR 0 8
51094: PPUSH
51095: LD_VAR 0 4
51099: PPUSH
51100: CALL_OW 380
// un := CreateHuman ;
51104: LD_ADDR_VAR 0 14
51108: PUSH
51109: CALL_OW 44
51113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51114: LD_ADDR_VAR 0 7
51118: PUSH
51119: LD_VAR 0 7
51123: PPUSH
51124: LD_INT 1
51126: PPUSH
51127: LD_VAR 0 14
51131: PPUSH
51132: CALL_OW 2
51136: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51137: LD_VAR 0 14
51141: PPUSH
51142: LD_VAR 0 12
51146: PUSH
51147: LD_INT 1
51149: ARRAY
51150: PPUSH
51151: CALL_OW 52
// end ;
51155: GO 50794
51157: POP
51158: POP
// end ;
51159: GO 50096
51161: POP
51162: POP
// result := result ^ buildings ;
51163: LD_ADDR_VAR 0 7
51167: PUSH
51168: LD_VAR 0 7
51172: PUSH
51173: LD_VAR 0 18
51177: ADD
51178: ST_TO_ADDR
// end else
51179: GO 51322
// begin for i = 1 to personel do
51181: LD_ADDR_VAR 0 8
51185: PUSH
51186: DOUBLE
51187: LD_INT 1
51189: DEC
51190: ST_TO_ADDR
51191: LD_VAR 0 6
51195: PUSH
51196: FOR_TO
51197: IFFALSE 51320
// begin if i > 4 then
51199: LD_VAR 0 8
51203: PUSH
51204: LD_INT 4
51206: GREATER
51207: IFFALSE 51211
// break ;
51209: GO 51320
// x := personel [ i ] ;
51211: LD_ADDR_VAR 0 13
51215: PUSH
51216: LD_VAR 0 6
51220: PUSH
51221: LD_VAR 0 8
51225: ARRAY
51226: ST_TO_ADDR
// if x = - 1 then
51227: LD_VAR 0 13
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: EQUAL
51236: IFFALSE 51240
// continue ;
51238: GO 51196
// PrepareHuman ( false , i , skill ) ;
51240: LD_INT 0
51242: PPUSH
51243: LD_VAR 0 8
51247: PPUSH
51248: LD_VAR 0 4
51252: PPUSH
51253: CALL_OW 380
// un := CreateHuman ;
51257: LD_ADDR_VAR 0 14
51261: PUSH
51262: CALL_OW 44
51266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51267: LD_VAR 0 14
51271: PPUSH
51272: LD_VAR 0 1
51276: PPUSH
51277: CALL_OW 250
51281: PPUSH
51282: LD_VAR 0 1
51286: PPUSH
51287: CALL_OW 251
51291: PPUSH
51292: LD_INT 10
51294: PPUSH
51295: LD_INT 0
51297: PPUSH
51298: CALL_OW 50
// result := result ^ un ;
51302: LD_ADDR_VAR 0 7
51306: PUSH
51307: LD_VAR 0 7
51311: PUSH
51312: LD_VAR 0 14
51316: ADD
51317: ST_TO_ADDR
// end ;
51318: GO 51196
51320: POP
51321: POP
// end ; end ;
51322: LD_VAR 0 7
51326: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51327: LD_INT 0
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
// result := false ;
51345: LD_ADDR_VAR 0 3
51349: PUSH
51350: LD_INT 0
51352: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51353: LD_VAR 0 1
51357: NOT
51358: PUSH
51359: LD_VAR 0 1
51363: PPUSH
51364: CALL_OW 266
51368: PUSH
51369: LD_INT 32
51371: PUSH
51372: LD_INT 33
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: IN
51379: NOT
51380: OR
51381: IFFALSE 51385
// exit ;
51383: GO 52494
// nat := GetNation ( tower ) ;
51385: LD_ADDR_VAR 0 12
51389: PUSH
51390: LD_VAR 0 1
51394: PPUSH
51395: CALL_OW 248
51399: ST_TO_ADDR
// side := GetSide ( tower ) ;
51400: LD_ADDR_VAR 0 16
51404: PUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 255
51414: ST_TO_ADDR
// x := GetX ( tower ) ;
51415: LD_ADDR_VAR 0 10
51419: PUSH
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 250
51429: ST_TO_ADDR
// y := GetY ( tower ) ;
51430: LD_ADDR_VAR 0 11
51434: PUSH
51435: LD_VAR 0 1
51439: PPUSH
51440: CALL_OW 251
51444: ST_TO_ADDR
// if not x or not y then
51445: LD_VAR 0 10
51449: NOT
51450: PUSH
51451: LD_VAR 0 11
51455: NOT
51456: OR
51457: IFFALSE 51461
// exit ;
51459: GO 52494
// weapon := 0 ;
51461: LD_ADDR_VAR 0 18
51465: PUSH
51466: LD_INT 0
51468: ST_TO_ADDR
// fac_list := [ ] ;
51469: LD_ADDR_VAR 0 17
51473: PUSH
51474: EMPTY
51475: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51476: LD_ADDR_VAR 0 6
51480: PUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 274
51490: PPUSH
51491: LD_VAR 0 2
51495: PPUSH
51496: LD_INT 0
51498: PPUSH
51499: CALL 49065 0 3
51503: PPUSH
51504: LD_INT 30
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PPUSH
51514: CALL_OW 72
51518: ST_TO_ADDR
// if not factories then
51519: LD_VAR 0 6
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 52494
// for i in factories do
51528: LD_ADDR_VAR 0 8
51532: PUSH
51533: LD_VAR 0 6
51537: PUSH
51538: FOR_IN
51539: IFFALSE 51564
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51541: LD_ADDR_VAR 0 17
51545: PUSH
51546: LD_VAR 0 17
51550: PUSH
51551: LD_VAR 0 8
51555: PPUSH
51556: CALL_OW 478
51560: UNION
51561: ST_TO_ADDR
51562: GO 51538
51564: POP
51565: POP
// if not fac_list then
51566: LD_VAR 0 17
51570: NOT
51571: IFFALSE 51575
// exit ;
51573: GO 52494
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51575: LD_ADDR_VAR 0 5
51579: PUSH
51580: LD_INT 4
51582: PUSH
51583: LD_INT 5
51585: PUSH
51586: LD_INT 9
51588: PUSH
51589: LD_INT 10
51591: PUSH
51592: LD_INT 6
51594: PUSH
51595: LD_INT 7
51597: PUSH
51598: LD_INT 11
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 27
51612: PUSH
51613: LD_INT 28
51615: PUSH
51616: LD_INT 26
51618: PUSH
51619: LD_INT 30
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 43
51630: PUSH
51631: LD_INT 44
51633: PUSH
51634: LD_INT 46
51636: PUSH
51637: LD_INT 45
51639: PUSH
51640: LD_INT 47
51642: PUSH
51643: LD_INT 49
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: LD_VAR 0 12
51663: ARRAY
51664: ST_TO_ADDR
// list := list isect fac_list ;
51665: LD_ADDR_VAR 0 5
51669: PUSH
51670: LD_VAR 0 5
51674: PUSH
51675: LD_VAR 0 17
51679: ISECT
51680: ST_TO_ADDR
// if not list then
51681: LD_VAR 0 5
51685: NOT
51686: IFFALSE 51690
// exit ;
51688: GO 52494
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51690: LD_VAR 0 12
51694: PUSH
51695: LD_INT 3
51697: EQUAL
51698: PUSH
51699: LD_INT 49
51701: PUSH
51702: LD_VAR 0 5
51706: IN
51707: AND
51708: PUSH
51709: LD_INT 31
51711: PPUSH
51712: LD_VAR 0 16
51716: PPUSH
51717: CALL_OW 321
51721: PUSH
51722: LD_INT 2
51724: EQUAL
51725: AND
51726: IFFALSE 51786
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51728: LD_INT 22
51730: PUSH
51731: LD_VAR 0 16
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 35
51742: PUSH
51743: LD_INT 49
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 91
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: LD_INT 10
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PPUSH
51771: CALL_OW 69
51775: NOT
51776: IFFALSE 51786
// weapon := ru_time_lapser ;
51778: LD_ADDR_VAR 0 18
51782: PUSH
51783: LD_INT 49
51785: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51786: LD_VAR 0 12
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: IN
51801: PUSH
51802: LD_INT 11
51804: PUSH
51805: LD_VAR 0 5
51809: IN
51810: PUSH
51811: LD_INT 30
51813: PUSH
51814: LD_VAR 0 5
51818: IN
51819: OR
51820: AND
51821: PUSH
51822: LD_INT 6
51824: PPUSH
51825: LD_VAR 0 16
51829: PPUSH
51830: CALL_OW 321
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: AND
51839: IFFALSE 52004
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51841: LD_INT 22
51843: PUSH
51844: LD_VAR 0 16
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 35
51858: PUSH
51859: LD_INT 11
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 35
51868: PUSH
51869: LD_INT 30
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 91
51883: PUSH
51884: LD_VAR 0 1
51888: PUSH
51889: LD_INT 18
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: PPUSH
51902: CALL_OW 69
51906: NOT
51907: PUSH
51908: LD_INT 22
51910: PUSH
51911: LD_VAR 0 16
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 30
51925: PUSH
51926: LD_INT 32
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 30
51935: PUSH
51936: LD_INT 33
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 91
51950: PUSH
51951: LD_VAR 0 1
51955: PUSH
51956: LD_INT 12
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: PPUSH
51972: CALL_OW 69
51976: PUSH
51977: LD_INT 2
51979: GREATER
51980: AND
51981: IFFALSE 52004
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51983: LD_ADDR_VAR 0 18
51987: PUSH
51988: LD_INT 11
51990: PUSH
51991: LD_INT 30
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_VAR 0 12
52002: ARRAY
52003: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52004: LD_VAR 0 18
52008: NOT
52009: PUSH
52010: LD_INT 40
52012: PPUSH
52013: LD_VAR 0 16
52017: PPUSH
52018: CALL_OW 321
52022: PUSH
52023: LD_INT 2
52025: EQUAL
52026: AND
52027: PUSH
52028: LD_INT 7
52030: PUSH
52031: LD_VAR 0 5
52035: IN
52036: PUSH
52037: LD_INT 28
52039: PUSH
52040: LD_VAR 0 5
52044: IN
52045: OR
52046: PUSH
52047: LD_INT 45
52049: PUSH
52050: LD_VAR 0 5
52054: IN
52055: OR
52056: AND
52057: IFFALSE 52311
// begin hex := GetHexInfo ( x , y ) ;
52059: LD_ADDR_VAR 0 4
52063: PUSH
52064: LD_VAR 0 10
52068: PPUSH
52069: LD_VAR 0 11
52073: PPUSH
52074: CALL_OW 546
52078: ST_TO_ADDR
// if hex [ 1 ] then
52079: LD_VAR 0 4
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: IFFALSE 52091
// exit ;
52089: GO 52494
// height := hex [ 2 ] ;
52091: LD_ADDR_VAR 0 15
52095: PUSH
52096: LD_VAR 0 4
52100: PUSH
52101: LD_INT 2
52103: ARRAY
52104: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52105: LD_ADDR_VAR 0 14
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 5
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: ST_TO_ADDR
// for i in tmp do
52128: LD_ADDR_VAR 0 8
52132: PUSH
52133: LD_VAR 0 14
52137: PUSH
52138: FOR_IN
52139: IFFALSE 52309
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52141: LD_ADDR_VAR 0 9
52145: PUSH
52146: LD_VAR 0 10
52150: PPUSH
52151: LD_VAR 0 8
52155: PPUSH
52156: LD_INT 5
52158: PPUSH
52159: CALL_OW 272
52163: PUSH
52164: LD_VAR 0 11
52168: PPUSH
52169: LD_VAR 0 8
52173: PPUSH
52174: LD_INT 5
52176: PPUSH
52177: CALL_OW 273
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52186: LD_VAR 0 9
52190: PUSH
52191: LD_INT 1
52193: ARRAY
52194: PPUSH
52195: LD_VAR 0 9
52199: PUSH
52200: LD_INT 2
52202: ARRAY
52203: PPUSH
52204: CALL_OW 488
52208: IFFALSE 52307
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52210: LD_ADDR_VAR 0 4
52214: PUSH
52215: LD_VAR 0 9
52219: PUSH
52220: LD_INT 1
52222: ARRAY
52223: PPUSH
52224: LD_VAR 0 9
52228: PUSH
52229: LD_INT 2
52231: ARRAY
52232: PPUSH
52233: CALL_OW 546
52237: ST_TO_ADDR
// if hex [ 1 ] then
52238: LD_VAR 0 4
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: IFFALSE 52250
// continue ;
52248: GO 52138
// h := hex [ 2 ] ;
52250: LD_ADDR_VAR 0 13
52254: PUSH
52255: LD_VAR 0 4
52259: PUSH
52260: LD_INT 2
52262: ARRAY
52263: ST_TO_ADDR
// if h + 7 < height then
52264: LD_VAR 0 13
52268: PUSH
52269: LD_INT 7
52271: PLUS
52272: PUSH
52273: LD_VAR 0 15
52277: LESS
52278: IFFALSE 52307
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52280: LD_ADDR_VAR 0 18
52284: PUSH
52285: LD_INT 7
52287: PUSH
52288: LD_INT 28
52290: PUSH
52291: LD_INT 45
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: PUSH
52299: LD_VAR 0 12
52303: ARRAY
52304: ST_TO_ADDR
// break ;
52305: GO 52309
// end ; end ; end ;
52307: GO 52138
52309: POP
52310: POP
// end ; if not weapon then
52311: LD_VAR 0 18
52315: NOT
52316: IFFALSE 52376
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52318: LD_ADDR_VAR 0 5
52322: PUSH
52323: LD_VAR 0 5
52327: PUSH
52328: LD_INT 11
52330: PUSH
52331: LD_INT 30
52333: PUSH
52334: LD_INT 49
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: DIFF
52342: ST_TO_ADDR
// if not list then
52343: LD_VAR 0 5
52347: NOT
52348: IFFALSE 52352
// exit ;
52350: GO 52494
// weapon := list [ rand ( 1 , list ) ] ;
52352: LD_ADDR_VAR 0 18
52356: PUSH
52357: LD_VAR 0 5
52361: PUSH
52362: LD_INT 1
52364: PPUSH
52365: LD_VAR 0 5
52369: PPUSH
52370: CALL_OW 12
52374: ARRAY
52375: ST_TO_ADDR
// end ; if weapon then
52376: LD_VAR 0 18
52380: IFFALSE 52494
// begin tmp := CostOfWeapon ( weapon ) ;
52382: LD_ADDR_VAR 0 14
52386: PUSH
52387: LD_VAR 0 18
52391: PPUSH
52392: CALL_OW 451
52396: ST_TO_ADDR
// j := GetBase ( tower ) ;
52397: LD_ADDR_VAR 0 9
52401: PUSH
52402: LD_VAR 0 1
52406: PPUSH
52407: CALL_OW 274
52411: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52412: LD_VAR 0 9
52416: PPUSH
52417: LD_INT 1
52419: PPUSH
52420: CALL_OW 275
52424: PUSH
52425: LD_VAR 0 14
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: GREATEREQUAL
52434: PUSH
52435: LD_VAR 0 9
52439: PPUSH
52440: LD_INT 2
52442: PPUSH
52443: CALL_OW 275
52447: PUSH
52448: LD_VAR 0 14
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: GREATEREQUAL
52457: AND
52458: PUSH
52459: LD_VAR 0 9
52463: PPUSH
52464: LD_INT 3
52466: PPUSH
52467: CALL_OW 275
52471: PUSH
52472: LD_VAR 0 14
52476: PUSH
52477: LD_INT 3
52479: ARRAY
52480: GREATEREQUAL
52481: AND
52482: IFFALSE 52494
// result := weapon ;
52484: LD_ADDR_VAR 0 3
52488: PUSH
52489: LD_VAR 0 18
52493: ST_TO_ADDR
// end ; end ;
52494: LD_VAR 0 3
52498: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52499: LD_INT 0
52501: PPUSH
52502: PPUSH
// result := true ;
52503: LD_ADDR_VAR 0 3
52507: PUSH
52508: LD_INT 1
52510: ST_TO_ADDR
// if array1 = array2 then
52511: LD_VAR 0 1
52515: PUSH
52516: LD_VAR 0 2
52520: EQUAL
52521: IFFALSE 52581
// begin for i = 1 to array1 do
52523: LD_ADDR_VAR 0 4
52527: PUSH
52528: DOUBLE
52529: LD_INT 1
52531: DEC
52532: ST_TO_ADDR
52533: LD_VAR 0 1
52537: PUSH
52538: FOR_TO
52539: IFFALSE 52577
// if array1 [ i ] <> array2 [ i ] then
52541: LD_VAR 0 1
52545: PUSH
52546: LD_VAR 0 4
52550: ARRAY
52551: PUSH
52552: LD_VAR 0 2
52556: PUSH
52557: LD_VAR 0 4
52561: ARRAY
52562: NONEQUAL
52563: IFFALSE 52575
// begin result := false ;
52565: LD_ADDR_VAR 0 3
52569: PUSH
52570: LD_INT 0
52572: ST_TO_ADDR
// break ;
52573: GO 52577
// end ;
52575: GO 52538
52577: POP
52578: POP
// end else
52579: GO 52589
// result := false ;
52581: LD_ADDR_VAR 0 3
52585: PUSH
52586: LD_INT 0
52588: ST_TO_ADDR
// end ;
52589: LD_VAR 0 3
52593: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52594: LD_INT 0
52596: PPUSH
52597: PPUSH
// if not array1 or not array2 then
52598: LD_VAR 0 1
52602: NOT
52603: PUSH
52604: LD_VAR 0 2
52608: NOT
52609: OR
52610: IFFALSE 52614
// exit ;
52612: GO 52678
// result := true ;
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_INT 1
52621: ST_TO_ADDR
// for i = 1 to array1 do
52622: LD_ADDR_VAR 0 4
52626: PUSH
52627: DOUBLE
52628: LD_INT 1
52630: DEC
52631: ST_TO_ADDR
52632: LD_VAR 0 1
52636: PUSH
52637: FOR_TO
52638: IFFALSE 52676
// if array1 [ i ] <> array2 [ i ] then
52640: LD_VAR 0 1
52644: PUSH
52645: LD_VAR 0 4
52649: ARRAY
52650: PUSH
52651: LD_VAR 0 2
52655: PUSH
52656: LD_VAR 0 4
52660: ARRAY
52661: NONEQUAL
52662: IFFALSE 52674
// begin result := false ;
52664: LD_ADDR_VAR 0 3
52668: PUSH
52669: LD_INT 0
52671: ST_TO_ADDR
// break ;
52672: GO 52676
// end ;
52674: GO 52637
52676: POP
52677: POP
// end ;
52678: LD_VAR 0 3
52682: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52683: LD_INT 0
52685: PPUSH
52686: PPUSH
52687: PPUSH
// pom := GetBase ( fac ) ;
52688: LD_ADDR_VAR 0 5
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 274
52702: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52703: LD_ADDR_VAR 0 4
52707: PUSH
52708: LD_VAR 0 2
52712: PUSH
52713: LD_INT 1
52715: ARRAY
52716: PPUSH
52717: LD_VAR 0 2
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PPUSH
52726: LD_VAR 0 2
52730: PUSH
52731: LD_INT 3
52733: ARRAY
52734: PPUSH
52735: LD_VAR 0 2
52739: PUSH
52740: LD_INT 4
52742: ARRAY
52743: PPUSH
52744: CALL_OW 449
52748: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52749: LD_ADDR_VAR 0 3
52753: PUSH
52754: LD_VAR 0 5
52758: PPUSH
52759: LD_INT 1
52761: PPUSH
52762: CALL_OW 275
52766: PUSH
52767: LD_VAR 0 4
52771: PUSH
52772: LD_INT 1
52774: ARRAY
52775: GREATEREQUAL
52776: PUSH
52777: LD_VAR 0 5
52781: PPUSH
52782: LD_INT 2
52784: PPUSH
52785: CALL_OW 275
52789: PUSH
52790: LD_VAR 0 4
52794: PUSH
52795: LD_INT 2
52797: ARRAY
52798: GREATEREQUAL
52799: AND
52800: PUSH
52801: LD_VAR 0 5
52805: PPUSH
52806: LD_INT 3
52808: PPUSH
52809: CALL_OW 275
52813: PUSH
52814: LD_VAR 0 4
52818: PUSH
52819: LD_INT 3
52821: ARRAY
52822: GREATEREQUAL
52823: AND
52824: ST_TO_ADDR
// end ;
52825: LD_VAR 0 3
52829: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52830: LD_INT 0
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
// pom := GetBase ( building ) ;
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 274
52850: ST_TO_ADDR
// if not pom then
52851: LD_VAR 0 3
52855: NOT
52856: IFFALSE 52860
// exit ;
52858: GO 53030
// btype := GetBType ( building ) ;
52860: LD_ADDR_VAR 0 5
52864: PUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: CALL_OW 266
52874: ST_TO_ADDR
// if btype = b_armoury then
52875: LD_VAR 0 5
52879: PUSH
52880: LD_INT 4
52882: EQUAL
52883: IFFALSE 52893
// btype := b_barracks ;
52885: LD_ADDR_VAR 0 5
52889: PUSH
52890: LD_INT 5
52892: ST_TO_ADDR
// if btype = b_depot then
52893: LD_VAR 0 5
52897: PUSH
52898: LD_INT 0
52900: EQUAL
52901: IFFALSE 52911
// btype := b_warehouse ;
52903: LD_ADDR_VAR 0 5
52907: PUSH
52908: LD_INT 1
52910: ST_TO_ADDR
// if btype = b_workshop then
52911: LD_VAR 0 5
52915: PUSH
52916: LD_INT 2
52918: EQUAL
52919: IFFALSE 52929
// btype := b_factory ;
52921: LD_ADDR_VAR 0 5
52925: PUSH
52926: LD_INT 3
52928: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52929: LD_ADDR_VAR 0 4
52933: PUSH
52934: LD_VAR 0 5
52938: PPUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL_OW 248
52948: PPUSH
52949: CALL_OW 450
52953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52954: LD_ADDR_VAR 0 2
52958: PUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: LD_INT 1
52966: PPUSH
52967: CALL_OW 275
52971: PUSH
52972: LD_VAR 0 4
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: GREATEREQUAL
52981: PUSH
52982: LD_VAR 0 3
52986: PPUSH
52987: LD_INT 2
52989: PPUSH
52990: CALL_OW 275
52994: PUSH
52995: LD_VAR 0 4
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: GREATEREQUAL
53004: AND
53005: PUSH
53006: LD_VAR 0 3
53010: PPUSH
53011: LD_INT 3
53013: PPUSH
53014: CALL_OW 275
53018: PUSH
53019: LD_VAR 0 4
53023: PUSH
53024: LD_INT 3
53026: ARRAY
53027: GREATEREQUAL
53028: AND
53029: ST_TO_ADDR
// end ;
53030: LD_VAR 0 2
53034: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53035: LD_INT 0
53037: PPUSH
53038: PPUSH
53039: PPUSH
// pom := GetBase ( building ) ;
53040: LD_ADDR_VAR 0 4
53044: PUSH
53045: LD_VAR 0 1
53049: PPUSH
53050: CALL_OW 274
53054: ST_TO_ADDR
// if not pom then
53055: LD_VAR 0 4
53059: NOT
53060: IFFALSE 53064
// exit ;
53062: GO 53165
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53064: LD_ADDR_VAR 0 5
53068: PUSH
53069: LD_VAR 0 2
53073: PPUSH
53074: LD_VAR 0 1
53078: PPUSH
53079: CALL_OW 248
53083: PPUSH
53084: CALL_OW 450
53088: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53089: LD_ADDR_VAR 0 3
53093: PUSH
53094: LD_VAR 0 4
53098: PPUSH
53099: LD_INT 1
53101: PPUSH
53102: CALL_OW 275
53106: PUSH
53107: LD_VAR 0 5
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: GREATEREQUAL
53116: PUSH
53117: LD_VAR 0 4
53121: PPUSH
53122: LD_INT 2
53124: PPUSH
53125: CALL_OW 275
53129: PUSH
53130: LD_VAR 0 5
53134: PUSH
53135: LD_INT 2
53137: ARRAY
53138: GREATEREQUAL
53139: AND
53140: PUSH
53141: LD_VAR 0 4
53145: PPUSH
53146: LD_INT 3
53148: PPUSH
53149: CALL_OW 275
53153: PUSH
53154: LD_VAR 0 5
53158: PUSH
53159: LD_INT 3
53161: ARRAY
53162: GREATEREQUAL
53163: AND
53164: ST_TO_ADDR
// end ;
53165: LD_VAR 0 3
53169: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
// result := false ;
53183: LD_ADDR_VAR 0 8
53187: PUSH
53188: LD_INT 0
53190: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53191: LD_VAR 0 5
53195: NOT
53196: PUSH
53197: LD_VAR 0 1
53201: NOT
53202: OR
53203: PUSH
53204: LD_VAR 0 2
53208: NOT
53209: OR
53210: PUSH
53211: LD_VAR 0 3
53215: NOT
53216: OR
53217: IFFALSE 53221
// exit ;
53219: GO 54035
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53221: LD_ADDR_VAR 0 14
53225: PUSH
53226: LD_VAR 0 1
53230: PPUSH
53231: LD_VAR 0 2
53235: PPUSH
53236: LD_VAR 0 3
53240: PPUSH
53241: LD_VAR 0 4
53245: PPUSH
53246: LD_VAR 0 5
53250: PUSH
53251: LD_INT 1
53253: ARRAY
53254: PPUSH
53255: CALL_OW 248
53259: PPUSH
53260: LD_INT 0
53262: PPUSH
53263: CALL 55268 0 6
53267: ST_TO_ADDR
// if not hexes then
53268: LD_VAR 0 14
53272: NOT
53273: IFFALSE 53277
// exit ;
53275: GO 54035
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53277: LD_ADDR_VAR 0 17
53281: PUSH
53282: LD_VAR 0 5
53286: PPUSH
53287: LD_INT 22
53289: PUSH
53290: LD_VAR 0 13
53294: PPUSH
53295: CALL_OW 255
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 30
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 30
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PPUSH
53336: CALL_OW 72
53340: ST_TO_ADDR
// for i = 1 to hexes do
53341: LD_ADDR_VAR 0 9
53345: PUSH
53346: DOUBLE
53347: LD_INT 1
53349: DEC
53350: ST_TO_ADDR
53351: LD_VAR 0 14
53355: PUSH
53356: FOR_TO
53357: IFFALSE 54033
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53359: LD_ADDR_VAR 0 13
53363: PUSH
53364: LD_VAR 0 14
53368: PUSH
53369: LD_VAR 0 9
53373: ARRAY
53374: PUSH
53375: LD_INT 1
53377: ARRAY
53378: PPUSH
53379: LD_VAR 0 14
53383: PUSH
53384: LD_VAR 0 9
53388: ARRAY
53389: PUSH
53390: LD_INT 2
53392: ARRAY
53393: PPUSH
53394: CALL_OW 428
53398: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53399: LD_VAR 0 14
53403: PUSH
53404: LD_VAR 0 9
53408: ARRAY
53409: PUSH
53410: LD_INT 1
53412: ARRAY
53413: PPUSH
53414: LD_VAR 0 14
53418: PUSH
53419: LD_VAR 0 9
53423: ARRAY
53424: PUSH
53425: LD_INT 2
53427: ARRAY
53428: PPUSH
53429: CALL_OW 351
53433: PUSH
53434: LD_VAR 0 14
53438: PUSH
53439: LD_VAR 0 9
53443: ARRAY
53444: PUSH
53445: LD_INT 1
53447: ARRAY
53448: PPUSH
53449: LD_VAR 0 14
53453: PUSH
53454: LD_VAR 0 9
53458: ARRAY
53459: PUSH
53460: LD_INT 2
53462: ARRAY
53463: PPUSH
53464: CALL_OW 488
53468: NOT
53469: OR
53470: PUSH
53471: LD_VAR 0 13
53475: PPUSH
53476: CALL_OW 247
53480: PUSH
53481: LD_INT 3
53483: EQUAL
53484: OR
53485: IFFALSE 53491
// exit ;
53487: POP
53488: POP
53489: GO 54035
// if not tmp then
53491: LD_VAR 0 13
53495: NOT
53496: IFFALSE 53500
// continue ;
53498: GO 53356
// result := true ;
53500: LD_ADDR_VAR 0 8
53504: PUSH
53505: LD_INT 1
53507: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53508: LD_VAR 0 6
53512: PUSH
53513: LD_VAR 0 13
53517: PPUSH
53518: CALL_OW 247
53522: PUSH
53523: LD_INT 2
53525: EQUAL
53526: AND
53527: PUSH
53528: LD_VAR 0 13
53532: PPUSH
53533: CALL_OW 263
53537: PUSH
53538: LD_INT 1
53540: EQUAL
53541: AND
53542: IFFALSE 53706
// begin if IsDrivenBy ( tmp ) then
53544: LD_VAR 0 13
53548: PPUSH
53549: CALL_OW 311
53553: IFFALSE 53557
// continue ;
53555: GO 53356
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53557: LD_VAR 0 6
53561: PPUSH
53562: LD_INT 3
53564: PUSH
53565: LD_INT 60
53567: PUSH
53568: EMPTY
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: LD_INT 55
53580: PUSH
53581: EMPTY
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PPUSH
53592: CALL_OW 72
53596: IFFALSE 53704
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53598: LD_ADDR_VAR 0 18
53602: PUSH
53603: LD_VAR 0 6
53607: PPUSH
53608: LD_INT 3
53610: PUSH
53611: LD_INT 60
53613: PUSH
53614: EMPTY
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: LD_INT 55
53626: PUSH
53627: EMPTY
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PPUSH
53638: CALL_OW 72
53642: PUSH
53643: LD_INT 1
53645: ARRAY
53646: ST_TO_ADDR
// if IsInUnit ( driver ) then
53647: LD_VAR 0 18
53651: PPUSH
53652: CALL_OW 310
53656: IFFALSE 53667
// ComExit ( driver ) ;
53658: LD_VAR 0 18
53662: PPUSH
53663: CALL 79048 0 1
// AddComEnterUnit ( driver , tmp ) ;
53667: LD_VAR 0 18
53671: PPUSH
53672: LD_VAR 0 13
53676: PPUSH
53677: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53681: LD_VAR 0 18
53685: PPUSH
53686: LD_VAR 0 7
53690: PPUSH
53691: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53695: LD_VAR 0 18
53699: PPUSH
53700: CALL_OW 181
// end ; continue ;
53704: GO 53356
// end ; if not cleaners or not tmp in cleaners then
53706: LD_VAR 0 6
53710: NOT
53711: PUSH
53712: LD_VAR 0 13
53716: PUSH
53717: LD_VAR 0 6
53721: IN
53722: NOT
53723: OR
53724: IFFALSE 54031
// begin if dep then
53726: LD_VAR 0 17
53730: IFFALSE 53866
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53732: LD_ADDR_VAR 0 16
53736: PUSH
53737: LD_VAR 0 17
53741: PUSH
53742: LD_INT 1
53744: ARRAY
53745: PPUSH
53746: CALL_OW 250
53750: PPUSH
53751: LD_VAR 0 17
53755: PUSH
53756: LD_INT 1
53758: ARRAY
53759: PPUSH
53760: CALL_OW 254
53764: PPUSH
53765: LD_INT 5
53767: PPUSH
53768: CALL_OW 272
53772: PUSH
53773: LD_VAR 0 17
53777: PUSH
53778: LD_INT 1
53780: ARRAY
53781: PPUSH
53782: CALL_OW 251
53786: PPUSH
53787: LD_VAR 0 17
53791: PUSH
53792: LD_INT 1
53794: ARRAY
53795: PPUSH
53796: CALL_OW 254
53800: PPUSH
53801: LD_INT 5
53803: PPUSH
53804: CALL_OW 273
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53813: LD_VAR 0 16
53817: PUSH
53818: LD_INT 1
53820: ARRAY
53821: PPUSH
53822: LD_VAR 0 16
53826: PUSH
53827: LD_INT 2
53829: ARRAY
53830: PPUSH
53831: CALL_OW 488
53835: IFFALSE 53866
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53837: LD_VAR 0 13
53841: PPUSH
53842: LD_VAR 0 16
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: LD_VAR 0 16
53855: PUSH
53856: LD_INT 2
53858: ARRAY
53859: PPUSH
53860: CALL_OW 111
// continue ;
53864: GO 53356
// end ; end ; r := GetDir ( tmp ) ;
53866: LD_ADDR_VAR 0 15
53870: PUSH
53871: LD_VAR 0 13
53875: PPUSH
53876: CALL_OW 254
53880: ST_TO_ADDR
// if r = 5 then
53881: LD_VAR 0 15
53885: PUSH
53886: LD_INT 5
53888: EQUAL
53889: IFFALSE 53899
// r := 0 ;
53891: LD_ADDR_VAR 0 15
53895: PUSH
53896: LD_INT 0
53898: ST_TO_ADDR
// for j = r to 5 do
53899: LD_ADDR_VAR 0 10
53903: PUSH
53904: DOUBLE
53905: LD_VAR 0 15
53909: DEC
53910: ST_TO_ADDR
53911: LD_INT 5
53913: PUSH
53914: FOR_TO
53915: IFFALSE 54029
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53917: LD_ADDR_VAR 0 11
53921: PUSH
53922: LD_VAR 0 13
53926: PPUSH
53927: CALL_OW 250
53931: PPUSH
53932: LD_VAR 0 10
53936: PPUSH
53937: LD_INT 2
53939: PPUSH
53940: CALL_OW 272
53944: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53945: LD_ADDR_VAR 0 12
53949: PUSH
53950: LD_VAR 0 13
53954: PPUSH
53955: CALL_OW 251
53959: PPUSH
53960: LD_VAR 0 10
53964: PPUSH
53965: LD_INT 2
53967: PPUSH
53968: CALL_OW 273
53972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53973: LD_VAR 0 11
53977: PPUSH
53978: LD_VAR 0 12
53982: PPUSH
53983: CALL_OW 488
53987: PUSH
53988: LD_VAR 0 11
53992: PPUSH
53993: LD_VAR 0 12
53997: PPUSH
53998: CALL_OW 428
54002: NOT
54003: AND
54004: IFFALSE 54027
// begin ComMoveXY ( tmp , _x , _y ) ;
54006: LD_VAR 0 13
54010: PPUSH
54011: LD_VAR 0 11
54015: PPUSH
54016: LD_VAR 0 12
54020: PPUSH
54021: CALL_OW 111
// break ;
54025: GO 54029
// end ; end ;
54027: GO 53914
54029: POP
54030: POP
// end ; end ;
54031: GO 53356
54033: POP
54034: POP
// end ;
54035: LD_VAR 0 8
54039: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54040: LD_INT 0
54042: PPUSH
// result := true ;
54043: LD_ADDR_VAR 0 3
54047: PUSH
54048: LD_INT 1
54050: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54051: LD_VAR 0 2
54055: PUSH
54056: LD_INT 24
54058: DOUBLE
54059: EQUAL
54060: IFTRUE 54070
54062: LD_INT 33
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54095
54070: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_INT 32
54078: PPUSH
54079: LD_VAR 0 1
54083: PPUSH
54084: CALL_OW 321
54088: PUSH
54089: LD_INT 2
54091: EQUAL
54092: ST_TO_ADDR
54093: GO 54411
54095: LD_INT 20
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54103
54101: GO 54128
54103: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54104: LD_ADDR_VAR 0 3
54108: PUSH
54109: LD_INT 6
54111: PPUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: CALL_OW 321
54121: PUSH
54122: LD_INT 2
54124: EQUAL
54125: ST_TO_ADDR
54126: GO 54411
54128: LD_INT 22
54130: DOUBLE
54131: EQUAL
54132: IFTRUE 54142
54134: LD_INT 36
54136: DOUBLE
54137: EQUAL
54138: IFTRUE 54142
54140: GO 54167
54142: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54143: LD_ADDR_VAR 0 3
54147: PUSH
54148: LD_INT 15
54150: PPUSH
54151: LD_VAR 0 1
54155: PPUSH
54156: CALL_OW 321
54160: PUSH
54161: LD_INT 2
54163: EQUAL
54164: ST_TO_ADDR
54165: GO 54411
54167: LD_INT 30
54169: DOUBLE
54170: EQUAL
54171: IFTRUE 54175
54173: GO 54200
54175: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_INT 20
54183: PPUSH
54184: LD_VAR 0 1
54188: PPUSH
54189: CALL_OW 321
54193: PUSH
54194: LD_INT 2
54196: EQUAL
54197: ST_TO_ADDR
54198: GO 54411
54200: LD_INT 28
54202: DOUBLE
54203: EQUAL
54204: IFTRUE 54214
54206: LD_INT 21
54208: DOUBLE
54209: EQUAL
54210: IFTRUE 54214
54212: GO 54239
54214: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54215: LD_ADDR_VAR 0 3
54219: PUSH
54220: LD_INT 21
54222: PPUSH
54223: LD_VAR 0 1
54227: PPUSH
54228: CALL_OW 321
54232: PUSH
54233: LD_INT 2
54235: EQUAL
54236: ST_TO_ADDR
54237: GO 54411
54239: LD_INT 16
54241: DOUBLE
54242: EQUAL
54243: IFTRUE 54247
54245: GO 54272
54247: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54248: LD_ADDR_VAR 0 3
54252: PUSH
54253: LD_INT 84
54255: PPUSH
54256: LD_VAR 0 1
54260: PPUSH
54261: CALL_OW 321
54265: PUSH
54266: LD_INT 2
54268: EQUAL
54269: ST_TO_ADDR
54270: GO 54411
54272: LD_INT 19
54274: DOUBLE
54275: EQUAL
54276: IFTRUE 54286
54278: LD_INT 23
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54286
54284: GO 54311
54286: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 83
54294: PPUSH
54295: LD_VAR 0 1
54299: PPUSH
54300: CALL_OW 321
54304: PUSH
54305: LD_INT 2
54307: EQUAL
54308: ST_TO_ADDR
54309: GO 54411
54311: LD_INT 17
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54319
54317: GO 54344
54319: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_INT 39
54327: PPUSH
54328: LD_VAR 0 1
54332: PPUSH
54333: CALL_OW 321
54337: PUSH
54338: LD_INT 2
54340: EQUAL
54341: ST_TO_ADDR
54342: GO 54411
54344: LD_INT 18
54346: DOUBLE
54347: EQUAL
54348: IFTRUE 54352
54350: GO 54377
54352: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54353: LD_ADDR_VAR 0 3
54357: PUSH
54358: LD_INT 40
54360: PPUSH
54361: LD_VAR 0 1
54365: PPUSH
54366: CALL_OW 321
54370: PUSH
54371: LD_INT 2
54373: EQUAL
54374: ST_TO_ADDR
54375: GO 54411
54377: LD_INT 27
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54385
54383: GO 54410
54385: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54386: LD_ADDR_VAR 0 3
54390: PUSH
54391: LD_INT 35
54393: PPUSH
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 321
54403: PUSH
54404: LD_INT 2
54406: EQUAL
54407: ST_TO_ADDR
54408: GO 54411
54410: POP
// end ;
54411: LD_VAR 0 3
54415: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54416: LD_INT 0
54418: PPUSH
54419: PPUSH
54420: PPUSH
54421: PPUSH
54422: PPUSH
54423: PPUSH
54424: PPUSH
54425: PPUSH
54426: PPUSH
54427: PPUSH
54428: PPUSH
// result := false ;
54429: LD_ADDR_VAR 0 6
54433: PUSH
54434: LD_INT 0
54436: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54437: LD_VAR 0 1
54441: NOT
54442: PUSH
54443: LD_VAR 0 1
54447: PPUSH
54448: CALL_OW 266
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: IN
54463: NOT
54464: OR
54465: PUSH
54466: LD_VAR 0 2
54470: NOT
54471: OR
54472: PUSH
54473: LD_VAR 0 5
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 4
54492: PUSH
54493: LD_INT 5
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: IN
54504: NOT
54505: OR
54506: PUSH
54507: LD_VAR 0 3
54511: PPUSH
54512: LD_VAR 0 4
54516: PPUSH
54517: CALL_OW 488
54521: NOT
54522: OR
54523: IFFALSE 54527
// exit ;
54525: GO 55263
// side := GetSide ( depot ) ;
54527: LD_ADDR_VAR 0 9
54531: PUSH
54532: LD_VAR 0 1
54536: PPUSH
54537: CALL_OW 255
54541: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54542: LD_VAR 0 9
54546: PPUSH
54547: LD_VAR 0 2
54551: PPUSH
54552: CALL 54040 0 2
54556: NOT
54557: IFFALSE 54561
// exit ;
54559: GO 55263
// pom := GetBase ( depot ) ;
54561: LD_ADDR_VAR 0 10
54565: PUSH
54566: LD_VAR 0 1
54570: PPUSH
54571: CALL_OW 274
54575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54576: LD_ADDR_VAR 0 11
54580: PUSH
54581: LD_VAR 0 2
54585: PPUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: CALL_OW 248
54595: PPUSH
54596: CALL_OW 450
54600: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54601: LD_VAR 0 10
54605: PPUSH
54606: LD_INT 1
54608: PPUSH
54609: CALL_OW 275
54613: PUSH
54614: LD_VAR 0 11
54618: PUSH
54619: LD_INT 1
54621: ARRAY
54622: GREATEREQUAL
54623: PUSH
54624: LD_VAR 0 10
54628: PPUSH
54629: LD_INT 2
54631: PPUSH
54632: CALL_OW 275
54636: PUSH
54637: LD_VAR 0 11
54641: PUSH
54642: LD_INT 2
54644: ARRAY
54645: GREATEREQUAL
54646: AND
54647: PUSH
54648: LD_VAR 0 10
54652: PPUSH
54653: LD_INT 3
54655: PPUSH
54656: CALL_OW 275
54660: PUSH
54661: LD_VAR 0 11
54665: PUSH
54666: LD_INT 3
54668: ARRAY
54669: GREATEREQUAL
54670: AND
54671: NOT
54672: IFFALSE 54676
// exit ;
54674: GO 55263
// if GetBType ( depot ) = b_depot then
54676: LD_VAR 0 1
54680: PPUSH
54681: CALL_OW 266
54685: PUSH
54686: LD_INT 0
54688: EQUAL
54689: IFFALSE 54701
// dist := 28 else
54691: LD_ADDR_VAR 0 14
54695: PUSH
54696: LD_INT 28
54698: ST_TO_ADDR
54699: GO 54709
// dist := 36 ;
54701: LD_ADDR_VAR 0 14
54705: PUSH
54706: LD_INT 36
54708: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54709: LD_VAR 0 1
54713: PPUSH
54714: LD_VAR 0 3
54718: PPUSH
54719: LD_VAR 0 4
54723: PPUSH
54724: CALL_OW 297
54728: PUSH
54729: LD_VAR 0 14
54733: GREATER
54734: IFFALSE 54738
// exit ;
54736: GO 55263
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54738: LD_ADDR_VAR 0 12
54742: PUSH
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 3
54752: PPUSH
54753: LD_VAR 0 4
54757: PPUSH
54758: LD_VAR 0 5
54762: PPUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 248
54772: PPUSH
54773: LD_INT 0
54775: PPUSH
54776: CALL 55268 0 6
54780: ST_TO_ADDR
// if not hexes then
54781: LD_VAR 0 12
54785: NOT
54786: IFFALSE 54790
// exit ;
54788: GO 55263
// hex := GetHexInfo ( x , y ) ;
54790: LD_ADDR_VAR 0 15
54794: PUSH
54795: LD_VAR 0 3
54799: PPUSH
54800: LD_VAR 0 4
54804: PPUSH
54805: CALL_OW 546
54809: ST_TO_ADDR
// if hex [ 1 ] then
54810: LD_VAR 0 15
54814: PUSH
54815: LD_INT 1
54817: ARRAY
54818: IFFALSE 54822
// exit ;
54820: GO 55263
// height := hex [ 2 ] ;
54822: LD_ADDR_VAR 0 13
54826: PUSH
54827: LD_VAR 0 15
54831: PUSH
54832: LD_INT 2
54834: ARRAY
54835: ST_TO_ADDR
// for i = 1 to hexes do
54836: LD_ADDR_VAR 0 7
54840: PUSH
54841: DOUBLE
54842: LD_INT 1
54844: DEC
54845: ST_TO_ADDR
54846: LD_VAR 0 12
54850: PUSH
54851: FOR_TO
54852: IFFALSE 55182
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54854: LD_VAR 0 12
54858: PUSH
54859: LD_VAR 0 7
54863: ARRAY
54864: PUSH
54865: LD_INT 1
54867: ARRAY
54868: PPUSH
54869: LD_VAR 0 12
54873: PUSH
54874: LD_VAR 0 7
54878: ARRAY
54879: PUSH
54880: LD_INT 2
54882: ARRAY
54883: PPUSH
54884: CALL_OW 488
54888: NOT
54889: PUSH
54890: LD_VAR 0 12
54894: PUSH
54895: LD_VAR 0 7
54899: ARRAY
54900: PUSH
54901: LD_INT 1
54903: ARRAY
54904: PPUSH
54905: LD_VAR 0 12
54909: PUSH
54910: LD_VAR 0 7
54914: ARRAY
54915: PUSH
54916: LD_INT 2
54918: ARRAY
54919: PPUSH
54920: CALL_OW 428
54924: PUSH
54925: LD_INT 0
54927: GREATER
54928: OR
54929: PUSH
54930: LD_VAR 0 12
54934: PUSH
54935: LD_VAR 0 7
54939: ARRAY
54940: PUSH
54941: LD_INT 1
54943: ARRAY
54944: PPUSH
54945: LD_VAR 0 12
54949: PUSH
54950: LD_VAR 0 7
54954: ARRAY
54955: PUSH
54956: LD_INT 2
54958: ARRAY
54959: PPUSH
54960: CALL_OW 351
54964: OR
54965: IFFALSE 54971
// exit ;
54967: POP
54968: POP
54969: GO 55263
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54971: LD_ADDR_VAR 0 8
54975: PUSH
54976: LD_VAR 0 12
54980: PUSH
54981: LD_VAR 0 7
54985: ARRAY
54986: PUSH
54987: LD_INT 1
54989: ARRAY
54990: PPUSH
54991: LD_VAR 0 12
54995: PUSH
54996: LD_VAR 0 7
55000: ARRAY
55001: PUSH
55002: LD_INT 2
55004: ARRAY
55005: PPUSH
55006: CALL_OW 546
55010: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55011: LD_VAR 0 8
55015: PUSH
55016: LD_INT 1
55018: ARRAY
55019: PUSH
55020: LD_VAR 0 8
55024: PUSH
55025: LD_INT 2
55027: ARRAY
55028: PUSH
55029: LD_VAR 0 13
55033: PUSH
55034: LD_INT 2
55036: PLUS
55037: GREATER
55038: OR
55039: PUSH
55040: LD_VAR 0 8
55044: PUSH
55045: LD_INT 2
55047: ARRAY
55048: PUSH
55049: LD_VAR 0 13
55053: PUSH
55054: LD_INT 2
55056: MINUS
55057: LESS
55058: OR
55059: PUSH
55060: LD_VAR 0 8
55064: PUSH
55065: LD_INT 3
55067: ARRAY
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 8
55074: PUSH
55075: LD_INT 9
55077: PUSH
55078: LD_INT 10
55080: PUSH
55081: LD_INT 11
55083: PUSH
55084: LD_INT 12
55086: PUSH
55087: LD_INT 13
55089: PUSH
55090: LD_INT 16
55092: PUSH
55093: LD_INT 17
55095: PUSH
55096: LD_INT 18
55098: PUSH
55099: LD_INT 19
55101: PUSH
55102: LD_INT 20
55104: PUSH
55105: LD_INT 21
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: IN
55123: NOT
55124: OR
55125: PUSH
55126: LD_VAR 0 8
55130: PUSH
55131: LD_INT 5
55133: ARRAY
55134: NOT
55135: OR
55136: PUSH
55137: LD_VAR 0 8
55141: PUSH
55142: LD_INT 6
55144: ARRAY
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 7
55154: PUSH
55155: LD_INT 9
55157: PUSH
55158: LD_INT 10
55160: PUSH
55161: LD_INT 11
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: IN
55172: NOT
55173: OR
55174: IFFALSE 55180
// exit ;
55176: POP
55177: POP
55178: GO 55263
// end ;
55180: GO 54851
55182: POP
55183: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55184: LD_VAR 0 9
55188: PPUSH
55189: LD_VAR 0 3
55193: PPUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_INT 20
55201: PPUSH
55202: CALL 47215 0 4
55206: PUSH
55207: LD_INT 4
55209: ARRAY
55210: IFFALSE 55214
// exit ;
55212: GO 55263
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55214: LD_VAR 0 2
55218: PUSH
55219: LD_INT 29
55221: PUSH
55222: LD_INT 30
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: IN
55229: PUSH
55230: LD_VAR 0 3
55234: PPUSH
55235: LD_VAR 0 4
55239: PPUSH
55240: LD_VAR 0 9
55244: PPUSH
55245: CALL_OW 440
55249: NOT
55250: AND
55251: IFFALSE 55255
// exit ;
55253: GO 55263
// result := true ;
55255: LD_ADDR_VAR 0 6
55259: PUSH
55260: LD_INT 1
55262: ST_TO_ADDR
// end ;
55263: LD_VAR 0 6
55267: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55268: LD_INT 0
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
55283: PPUSH
55284: PPUSH
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
55297: PPUSH
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
55317: PPUSH
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
// result = [ ] ;
55328: LD_ADDR_VAR 0 7
55332: PUSH
55333: EMPTY
55334: ST_TO_ADDR
// temp_list = [ ] ;
55335: LD_ADDR_VAR 0 9
55339: PUSH
55340: EMPTY
55341: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55342: LD_VAR 0 4
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 5
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: IN
55373: NOT
55374: PUSH
55375: LD_VAR 0 1
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: IN
55390: PUSH
55391: LD_VAR 0 5
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: IN
55410: NOT
55411: AND
55412: OR
55413: IFFALSE 55417
// exit ;
55415: GO 73808
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55417: LD_VAR 0 1
55421: PUSH
55422: LD_INT 6
55424: PUSH
55425: LD_INT 7
55427: PUSH
55428: LD_INT 8
55430: PUSH
55431: LD_INT 13
55433: PUSH
55434: LD_INT 12
55436: PUSH
55437: LD_INT 15
55439: PUSH
55440: LD_INT 11
55442: PUSH
55443: LD_INT 14
55445: PUSH
55446: LD_INT 10
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: IN
55460: IFFALSE 55470
// btype = b_lab ;
55462: LD_ADDR_VAR 0 1
55466: PUSH
55467: LD_INT 6
55469: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55470: LD_VAR 0 6
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: LIST
55488: IN
55489: NOT
55490: PUSH
55491: LD_VAR 0 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 6
55510: PUSH
55511: LD_INT 36
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: LD_INT 5
55519: PUSH
55520: LD_INT 31
55522: PUSH
55523: LD_INT 32
55525: PUSH
55526: LD_INT 33
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: IN
55542: NOT
55543: PUSH
55544: LD_VAR 0 6
55548: PUSH
55549: LD_INT 1
55551: EQUAL
55552: AND
55553: OR
55554: PUSH
55555: LD_VAR 0 1
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: IN
55570: NOT
55571: PUSH
55572: LD_VAR 0 6
55576: PUSH
55577: LD_INT 2
55579: EQUAL
55580: AND
55581: OR
55582: IFFALSE 55592
// mode = 0 ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_INT 0
55591: ST_TO_ADDR
// case mode of 0 :
55592: LD_VAR 0 6
55596: PUSH
55597: LD_INT 0
55599: DOUBLE
55600: EQUAL
55601: IFTRUE 55605
55603: GO 67058
55605: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55606: LD_ADDR_VAR 0 11
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55799: LD_ADDR_VAR 0 12
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55995: LD_ADDR_VAR 0 13
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56194: LD_ADDR_VAR 0 14
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 3
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56390: LD_ADDR_VAR 0 15
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56583: LD_ADDR_VAR 0 16
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56776: LD_ADDR_VAR 0 17
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57006: LD_ADDR_VAR 0 18
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57236: LD_ADDR_VAR 0 19
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57466: LD_ADDR_VAR 0 20
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57696: LD_ADDR_VAR 0 21
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57926: LD_ADDR_VAR 0 22
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58156: LD_ADDR_VAR 0 23
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58436: LD_ADDR_VAR 0 24
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 3
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58712: LD_ADDR_VAR 0 25
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58986: LD_ADDR_VAR 0 26
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59262: LD_ADDR_VAR 0 27
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59542: LD_ADDR_VAR 0 28
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59824: LD_ADDR_VAR 0 29
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: NEG
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60103: LD_ADDR_VAR 0 30
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60381: LD_ADDR_VAR 0 31
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60659: LD_ADDR_VAR 0 32
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60937: LD_ADDR_VAR 0 33
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61216: LD_ADDR_VAR 0 34
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61496: LD_ADDR_VAR 0 35
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61608: LD_ADDR_VAR 0 36
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61720: LD_ADDR_VAR 0 37
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61832: LD_ADDR_VAR 0 38
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61944: LD_ADDR_VAR 0 39
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62056: LD_ADDR_VAR 0 40
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62168: LD_ADDR_VAR 0 41
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: NEG
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 3
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62518: LD_ADDR_VAR 0 42
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: LD_INT 2
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: NEG
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 3
62827: NEG
62828: PUSH
62829: LD_INT 3
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62868: LD_ADDR_VAR 0 43
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 3
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 3
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 3
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: NEG
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63216: LD_ADDR_VAR 0 44
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 3
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: LD_INT 3
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 3
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 3
63490: NEG
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: NEG
63526: PUSH
63527: LD_INT 3
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63566: LD_ADDR_VAR 0 45
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 3
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 3
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 3
63875: NEG
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63916: LD_ADDR_VAR 0 46
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 2
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 3
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: NEG
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64264: LD_ADDR_VAR 0 47
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64415: LD_ADDR_VAR 0 48
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64562: LD_ADDR_VAR 0 49
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 2
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64706: LD_ADDR_VAR 0 50
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64850: LD_ADDR_VAR 0 51
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64997: LD_ADDR_VAR 0 52
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65148: LD_ADDR_VAR 0 53
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 2
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: LD_INT 2
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: NEG
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: NEG
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65378: LD_ADDR_VAR 0 54
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 2
65577: NEG
65578: PUSH
65579: LD_INT 2
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65608: LD_ADDR_VAR 0 55
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65838: LD_ADDR_VAR 0 56
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 2
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66068: LD_ADDR_VAR 0 57
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: NEG
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: LD_INT 2
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 2
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: LD_INT 2
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66298: LD_ADDR_VAR 0 58
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: LD_INT 2
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: NEG
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: NEG
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 2
66497: NEG
66498: PUSH
66499: LD_INT 2
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66528: LD_ADDR_VAR 0 59
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: NEG
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66616: LD_ADDR_VAR 0 60
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66704: LD_ADDR_VAR 0 61
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66792: LD_ADDR_VAR 0 62
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 1
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66880: LD_ADDR_VAR 0 63
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: NEG
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66968: LD_ADDR_VAR 0 64
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: ST_TO_ADDR
// end ; 1 :
67056: GO 72953
67058: LD_INT 1
67060: DOUBLE
67061: EQUAL
67062: IFTRUE 67066
67064: GO 69689
67066: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67067: LD_ADDR_VAR 0 11
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67111: LD_ADDR_VAR 0 12
67115: PUSH
67116: LD_INT 2
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: LIST
67151: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67152: LD_ADDR_VAR 0 13
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67192: LD_ADDR_VAR 0 14
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 3
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: LD_INT 3
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: LIST
67232: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67233: LD_ADDR_VAR 0 15
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67277: LD_ADDR_VAR 0 16
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: LD_INT 3
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 3
67296: NEG
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 3
67308: NEG
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67323: LD_ADDR_VAR 0 17
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: LIST
67366: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67367: LD_ADDR_VAR 0 18
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 3
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 3
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67408: LD_ADDR_VAR 0 19
67412: PUSH
67413: LD_INT 3
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: LIST
67447: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67448: LD_ADDR_VAR 0 20
67452: PUSH
67453: LD_INT 1
67455: PUSH
67456: LD_INT 3
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67489: LD_ADDR_VAR 0 21
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 3
67518: NEG
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67533: LD_ADDR_VAR 0 22
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: LD_INT 3
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: NEG
67553: PUSH
67554: LD_INT 2
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 3
67564: NEG
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67579: LD_ADDR_VAR 0 23
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 3
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: PUSH
67599: LD_INT 4
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67623: LD_ADDR_VAR 0 24
67627: PUSH
67628: LD_INT 3
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67664: LD_ADDR_VAR 0 25
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 4
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67704: LD_ADDR_VAR 0 26
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: LD_INT 4
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: LIST
67744: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67745: LD_ADDR_VAR 0 27
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 4
67774: NEG
67775: PUSH
67776: LD_INT 1
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67789: LD_ADDR_VAR 0 28
67793: PUSH
67794: LD_INT 3
67796: NEG
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67835: LD_ADDR_VAR 0 29
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: LD_INT 3
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 3
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: LD_INT 2
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: NEG
67877: PUSH
67878: LD_INT 4
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 4
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 5
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: LD_INT 4
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 6
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 6
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: LD_INT 5
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67990: LD_ADDR_VAR 0 30
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 3
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 3
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 4
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 4
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 5
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 5
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 6
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 6
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68133: LD_ADDR_VAR 0 31
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 2
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 4
68180: PUSH
68181: LD_INT 4
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: LD_INT 4
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 5
68200: PUSH
68201: LD_INT 4
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 5
68210: PUSH
68211: LD_INT 5
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 4
68220: PUSH
68221: LD_INT 5
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 6
68230: PUSH
68231: LD_INT 5
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 6
68240: PUSH
68241: LD_INT 6
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 5
68250: PUSH
68251: LD_INT 6
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68272: LD_ADDR_VAR 0 32
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: LD_INT 3
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 0
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 4
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: PUSH
68342: LD_INT 5
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: LD_INT 5
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: LD_INT 4
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 6
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: LD_INT 6
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: LD_INT 5
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68415: LD_ADDR_VAR 0 33
68419: PUSH
68420: LD_INT 2
68422: NEG
68423: PUSH
68424: LD_INT 1
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 3
68444: NEG
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: NEG
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 4
68467: NEG
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 4
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 4
68490: NEG
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 5
68501: NEG
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 5
68512: NEG
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 5
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 6
68535: NEG
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 6
68546: NEG
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68570: LD_ADDR_VAR 0 34
68574: PUSH
68575: LD_INT 2
68577: NEG
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 3
68601: NEG
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: LD_INT 4
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: LD_INT 3
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: LD_INT 4
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 4
68649: NEG
68650: PUSH
68651: LD_INT 5
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 5
68661: NEG
68662: PUSH
68663: LD_INT 4
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 5
68673: NEG
68674: PUSH
68675: LD_INT 5
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 5
68685: NEG
68686: PUSH
68687: LD_INT 6
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 6
68697: NEG
68698: PUSH
68699: LD_INT 5
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 6
68709: NEG
68710: PUSH
68711: LD_INT 6
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68733: LD_ADDR_VAR 0 41
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 1
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68777: LD_ADDR_VAR 0 42
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 3
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: LIST
68817: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68818: LD_ADDR_VAR 0 43
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: LD_INT 2
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68858: LD_ADDR_VAR 0 44
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 3
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: LD_INT 2
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: LIST
68898: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68899: LD_ADDR_VAR 0 45
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68943: LD_ADDR_VAR 0 46
68947: PUSH
68948: LD_INT 2
68950: NEG
68951: PUSH
68952: LD_INT 2
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 2
68962: NEG
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: NEG
68975: PUSH
68976: LD_INT 2
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68989: LD_ADDR_VAR 0 47
68993: PUSH
68994: LD_INT 2
68996: NEG
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 1
69008: NEG
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69022: LD_ADDR_VAR 0 48
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: LD_INT 2
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69053: LD_ADDR_VAR 0 49
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 3
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69082: LD_ADDR_VAR 0 50
69086: PUSH
69087: LD_INT 2
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69111: LD_ADDR_VAR 0 51
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69142: LD_ADDR_VAR 0 52
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: NEG
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69175: LD_ADDR_VAR 0 53
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: LD_INT 3
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 3
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: LIST
69218: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69219: LD_ADDR_VAR 0 54
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 3
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 3
69247: PUSH
69248: LD_INT 1
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: LIST
69259: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69260: LD_ADDR_VAR 0 55
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: LD_INT 3
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 3
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69300: LD_ADDR_VAR 0 56
69304: PUSH
69305: LD_INT 1
69307: PUSH
69308: LD_INT 3
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 3
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69341: LD_ADDR_VAR 0 57
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 3
69370: NEG
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69385: LD_ADDR_VAR 0 58
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 3
69404: NEG
69405: PUSH
69406: LD_INT 2
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: NEG
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69431: LD_ADDR_VAR 0 59
69435: PUSH
69436: LD_INT 1
69438: NEG
69439: PUSH
69440: LD_INT 2
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: LD_INT 2
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: LIST
69474: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69475: LD_ADDR_VAR 0 60
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: LD_INT 1
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 2
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: LD_INT 1
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69516: LD_ADDR_VAR 0 61
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69556: LD_ADDR_VAR 0 62
69560: PUSH
69561: LD_INT 1
69563: PUSH
69564: LD_INT 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 2
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: LD_INT 1
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69597: LD_ADDR_VAR 0 63
69601: PUSH
69602: LD_INT 1
69604: NEG
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 2
69615: NEG
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: LIST
69640: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69641: LD_ADDR_VAR 0 64
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 2
69660: NEG
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: ST_TO_ADDR
// end ; 2 :
69687: GO 72953
69689: LD_INT 2
69691: DOUBLE
69692: EQUAL
69693: IFTRUE 69697
69695: GO 72952
69697: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69698: LD_ADDR_VAR 0 29
69702: PUSH
69703: LD_INT 4
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 4
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 5
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 5
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 4
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 3
69777: PUSH
69778: LD_INT 2
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 5
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: PUSH
69799: LD_INT 3
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 3
69808: PUSH
69809: LD_INT 2
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 4
69818: PUSH
69819: LD_INT 3
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 4
69828: PUSH
69829: LD_INT 4
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 3
69838: PUSH
69839: LD_INT 4
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 2
69848: PUSH
69849: LD_INT 3
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: LD_INT 2
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 2
69878: PUSH
69879: LD_INT 4
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: LD_INT 4
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: LD_INT 3
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: LD_INT 5
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: LD_INT 4
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 5
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 3
69981: NEG
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 3
69992: NEG
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 2
70004: NEG
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 2
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 4
70037: NEG
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 4
70048: NEG
70049: PUSH
70050: LD_INT 1
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: NEG
70061: PUSH
70062: LD_INT 2
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 2
70072: NEG
70073: PUSH
70074: LD_INT 2
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 4
70083: NEG
70084: PUSH
70085: LD_INT 4
70087: NEG
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 4
70095: NEG
70096: PUSH
70097: LD_INT 5
70099: NEG
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 3
70107: NEG
70108: PUSH
70109: LD_INT 4
70111: NEG
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: NEG
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: NEG
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 5
70143: NEG
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 5
70155: NEG
70156: PUSH
70157: LD_INT 5
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 5
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 5
70179: NEG
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70236: LD_ADDR_VAR 0 30
70240: PUSH
70241: LD_INT 4
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 4
70253: PUSH
70254: LD_INT 3
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 5
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 5
70273: PUSH
70274: LD_INT 5
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 4
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 3
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 5
70313: PUSH
70314: LD_INT 3
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: LD_INT 5
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 3
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 1
70353: PUSH
70354: LD_INT 3
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 4
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 0
70373: PUSH
70374: LD_INT 4
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 1
70383: NEG
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 1
70394: NEG
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: LD_INT 4
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: LD_INT 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 4
70426: NEG
70427: PUSH
70428: LD_INT 0
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 4
70437: NEG
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: NEG
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 4
70471: NEG
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 5
70482: NEG
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 5
70493: NEG
70494: PUSH
70495: LD_INT 1
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 5
70505: NEG
70506: PUSH
70507: LD_INT 2
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 3
70517: NEG
70518: PUSH
70519: LD_INT 2
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: LD_INT 3
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: LD_INT 4
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: NEG
70553: PUSH
70554: LD_INT 3
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: NEG
70565: PUSH
70566: LD_INT 2
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 3
70576: NEG
70577: PUSH
70578: LD_INT 2
70580: NEG
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 4
70588: NEG
70589: PUSH
70590: LD_INT 3
70592: NEG
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 4
70600: NEG
70601: PUSH
70602: LD_INT 4
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 2
70612: NEG
70613: PUSH
70614: LD_INT 4
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 4
70624: NEG
70625: PUSH
70626: LD_INT 2
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: LD_INT 4
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: LD_INT 5
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: LD_INT 4
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 3
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 3
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: LD_INT 4
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 1
70703: NEG
70704: PUSH
70705: LD_INT 5
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: LD_INT 3
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 2
70726: NEG
70727: PUSH
70728: LD_INT 5
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70783: LD_ADDR_VAR 0 31
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 4
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: PUSH
70811: LD_INT 4
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 1
70820: PUSH
70821: LD_INT 5
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: LD_INT 5
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 1
70840: NEG
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: PUSH
70863: LD_INT 5
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 2
70872: NEG
70873: PUSH
70874: LD_INT 3
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 3
70883: NEG
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 3
70894: NEG
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 2
70906: NEG
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 2
70917: NEG
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 4
70950: NEG
70951: PUSH
70952: LD_INT 1
70954: NEG
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 4
70962: NEG
70963: PUSH
70964: LD_INT 2
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 2
70974: NEG
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 4
70985: NEG
70986: PUSH
70987: LD_INT 4
70989: NEG
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: NEG
70998: PUSH
70999: LD_INT 5
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 3
71009: NEG
71010: PUSH
71011: LD_INT 4
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 3
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: NEG
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 5
71045: NEG
71046: PUSH
71047: LD_INT 4
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 5
71057: NEG
71058: PUSH
71059: LD_INT 5
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 3
71069: NEG
71070: PUSH
71071: LD_INT 5
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 5
71081: NEG
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 0
71104: PUSH
71105: LD_INT 4
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 1
71115: PUSH
71116: LD_INT 3
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 0
71137: PUSH
71138: LD_INT 2
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 1
71148: NEG
71149: PUSH
71150: LD_INT 3
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 1
71160: NEG
71161: PUSH
71162: LD_INT 4
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 2
71183: NEG
71184: PUSH
71185: LD_INT 4
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 4
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 4
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 5
71216: PUSH
71217: LD_INT 0
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 5
71226: PUSH
71227: LD_INT 1
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 4
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 3
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 3
71256: PUSH
71257: LD_INT 1
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 2
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 5
71278: PUSH
71279: LD_INT 2
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71333: LD_ADDR_VAR 0 32
71337: PUSH
71338: LD_INT 4
71340: NEG
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 4
71351: NEG
71352: PUSH
71353: LD_INT 1
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 3
71363: NEG
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 3
71374: NEG
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 4
71385: NEG
71386: PUSH
71387: LD_INT 1
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 5
71396: NEG
71397: PUSH
71398: LD_INT 0
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 5
71407: NEG
71408: PUSH
71409: LD_INT 1
71411: NEG
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 5
71419: NEG
71420: PUSH
71421: LD_INT 2
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 3
71442: NEG
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 3
71454: NEG
71455: PUSH
71456: LD_INT 4
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: LD_INT 3
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 2
71478: NEG
71479: PUSH
71480: LD_INT 2
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 3
71490: NEG
71491: PUSH
71492: LD_INT 2
71494: NEG
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 4
71502: NEG
71503: PUSH
71504: LD_INT 3
71506: NEG
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 4
71514: NEG
71515: PUSH
71516: LD_INT 4
71518: NEG
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 2
71526: NEG
71527: PUSH
71528: LD_INT 4
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 4
71538: NEG
71539: PUSH
71540: LD_INT 2
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 0
71550: PUSH
71551: LD_INT 4
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: LD_INT 5
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: PUSH
71573: LD_INT 4
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: LD_INT 3
71586: NEG
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: LD_INT 3
71597: NEG
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 1
71605: NEG
71606: PUSH
71607: LD_INT 4
71609: NEG
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 1
71617: NEG
71618: PUSH
71619: LD_INT 5
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 2
71640: NEG
71641: PUSH
71642: LD_INT 5
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 3
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 3
71662: PUSH
71663: LD_INT 1
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 4
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 4
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: LD_INT 1
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 2
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 2
71713: PUSH
71714: LD_INT 1
71716: NEG
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 2
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 4
71735: PUSH
71736: LD_INT 2
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 4
71745: PUSH
71746: LD_INT 4
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 4
71755: PUSH
71756: LD_INT 3
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 5
71765: PUSH
71766: LD_INT 4
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 5
71775: PUSH
71776: LD_INT 5
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 4
71785: PUSH
71786: LD_INT 5
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 3
71795: PUSH
71796: LD_INT 4
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 3
71805: PUSH
71806: LD_INT 3
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 5
71815: PUSH
71816: LD_INT 3
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 3
71825: PUSH
71826: LD_INT 5
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71880: LD_ADDR_VAR 0 33
71884: PUSH
71885: LD_INT 4
71887: NEG
71888: PUSH
71889: LD_INT 4
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: NEG
71900: PUSH
71901: LD_INT 5
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: LD_INT 4
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 3
71923: NEG
71924: PUSH
71925: LD_INT 3
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 4
71935: NEG
71936: PUSH
71937: LD_INT 3
71939: NEG
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 5
71947: NEG
71948: PUSH
71949: LD_INT 4
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 5
71959: NEG
71960: PUSH
71961: LD_INT 5
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: LD_INT 5
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 5
71983: NEG
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 0
71995: PUSH
71996: LD_INT 3
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: LD_INT 4
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: LD_INT 3
72020: NEG
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: LD_INT 2
72031: NEG
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: LD_INT 2
72042: NEG
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 1
72050: NEG
72051: PUSH
72052: LD_INT 3
72054: NEG
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 1
72062: NEG
72063: PUSH
72064: LD_INT 4
72066: NEG
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 2
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: LD_INT 4
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: LD_INT 1
72110: NEG
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 5
72118: PUSH
72119: LD_INT 0
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 5
72128: PUSH
72129: LD_INT 1
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 4
72138: PUSH
72139: LD_INT 1
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 3
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 3
72158: PUSH
72159: LD_INT 1
72161: NEG
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 3
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 5
72180: PUSH
72181: LD_INT 2
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 3
72190: PUSH
72191: LD_INT 3
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 3
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 4
72210: PUSH
72211: LD_INT 3
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 4
72220: PUSH
72221: LD_INT 4
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 3
72230: PUSH
72231: LD_INT 4
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 2
72240: PUSH
72241: LD_INT 3
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 2
72250: PUSH
72251: LD_INT 2
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: LD_INT 4
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 0
72280: PUSH
72281: LD_INT 4
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 0
72290: PUSH
72291: LD_INT 3
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: LD_INT 4
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: LD_INT 5
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 0
72320: PUSH
72321: LD_INT 5
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 1
72330: NEG
72331: PUSH
72332: LD_INT 4
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 1
72341: NEG
72342: PUSH
72343: LD_INT 3
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: PUSH
72353: LD_INT 5
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 2
72362: NEG
72363: PUSH
72364: LD_INT 3
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72418: LD_ADDR_VAR 0 34
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: LD_INT 4
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 0
72436: PUSH
72437: LD_INT 5
72439: NEG
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 1
72447: PUSH
72448: LD_INT 4
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 1
72458: PUSH
72459: LD_INT 3
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 1
72480: NEG
72481: PUSH
72482: LD_INT 4
72484: NEG
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 1
72492: NEG
72493: PUSH
72494: LD_INT 5
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 2
72504: PUSH
72505: LD_INT 3
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: LD_INT 5
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 3
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 3
72537: PUSH
72538: LD_INT 1
72540: NEG
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: LD_INT 0
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 4
72558: PUSH
72559: LD_INT 1
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 3
72568: PUSH
72569: LD_INT 1
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 2
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 2
72588: PUSH
72589: LD_INT 1
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 2
72599: PUSH
72600: LD_INT 2
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 4
72610: PUSH
72611: LD_INT 2
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 4
72620: PUSH
72621: LD_INT 4
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 4
72630: PUSH
72631: LD_INT 3
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 5
72640: PUSH
72641: LD_INT 4
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 5
72650: PUSH
72651: LD_INT 5
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 4
72660: PUSH
72661: LD_INT 5
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: LD_INT 4
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: LD_INT 3
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 5
72690: PUSH
72691: LD_INT 3
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 3
72700: PUSH
72701: LD_INT 5
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: LD_INT 3
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 0
72720: PUSH
72721: LD_INT 2
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 1
72730: PUSH
72731: LD_INT 3
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 1
72740: PUSH
72741: LD_INT 4
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: LD_INT 4
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 1
72760: NEG
72761: PUSH
72762: LD_INT 3
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 1
72771: NEG
72772: PUSH
72773: LD_INT 2
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 2
72782: PUSH
72783: LD_INT 4
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 2
72792: NEG
72793: PUSH
72794: LD_INT 2
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 4
72803: NEG
72804: PUSH
72805: LD_INT 0
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 4
72814: NEG
72815: PUSH
72816: LD_INT 1
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 3
72826: NEG
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 3
72837: NEG
72838: PUSH
72839: LD_INT 1
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 4
72848: NEG
72849: PUSH
72850: LD_INT 1
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 5
72859: NEG
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 5
72870: NEG
72871: PUSH
72872: LD_INT 1
72874: NEG
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 5
72882: NEG
72883: PUSH
72884: LD_INT 2
72886: NEG
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 3
72894: NEG
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: ST_TO_ADDR
// end ; end ;
72950: GO 72953
72952: POP
// case btype of b_depot , b_warehouse :
72953: LD_VAR 0 1
72957: PUSH
72958: LD_INT 0
72960: DOUBLE
72961: EQUAL
72962: IFTRUE 72972
72964: LD_INT 1
72966: DOUBLE
72967: EQUAL
72968: IFTRUE 72972
72970: GO 73173
72972: POP
// case nation of nation_american :
72973: LD_VAR 0 5
72977: PUSH
72978: LD_INT 1
72980: DOUBLE
72981: EQUAL
72982: IFTRUE 72986
72984: GO 73042
72986: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72987: LD_ADDR_VAR 0 9
72991: PUSH
72992: LD_VAR 0 11
72996: PUSH
72997: LD_VAR 0 12
73001: PUSH
73002: LD_VAR 0 13
73006: PUSH
73007: LD_VAR 0 14
73011: PUSH
73012: LD_VAR 0 15
73016: PUSH
73017: LD_VAR 0 16
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: PUSH
73030: LD_VAR 0 4
73034: PUSH
73035: LD_INT 1
73037: PLUS
73038: ARRAY
73039: ST_TO_ADDR
73040: GO 73171
73042: LD_INT 2
73044: DOUBLE
73045: EQUAL
73046: IFTRUE 73050
73048: GO 73106
73050: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73051: LD_ADDR_VAR 0 9
73055: PUSH
73056: LD_VAR 0 17
73060: PUSH
73061: LD_VAR 0 18
73065: PUSH
73066: LD_VAR 0 19
73070: PUSH
73071: LD_VAR 0 20
73075: PUSH
73076: LD_VAR 0 21
73080: PUSH
73081: LD_VAR 0 22
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: PUSH
73094: LD_VAR 0 4
73098: PUSH
73099: LD_INT 1
73101: PLUS
73102: ARRAY
73103: ST_TO_ADDR
73104: GO 73171
73106: LD_INT 3
73108: DOUBLE
73109: EQUAL
73110: IFTRUE 73114
73112: GO 73170
73114: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73115: LD_ADDR_VAR 0 9
73119: PUSH
73120: LD_VAR 0 23
73124: PUSH
73125: LD_VAR 0 24
73129: PUSH
73130: LD_VAR 0 25
73134: PUSH
73135: LD_VAR 0 26
73139: PUSH
73140: LD_VAR 0 27
73144: PUSH
73145: LD_VAR 0 28
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: PUSH
73158: LD_VAR 0 4
73162: PUSH
73163: LD_INT 1
73165: PLUS
73166: ARRAY
73167: ST_TO_ADDR
73168: GO 73171
73170: POP
73171: GO 73726
73173: LD_INT 2
73175: DOUBLE
73176: EQUAL
73177: IFTRUE 73187
73179: LD_INT 3
73181: DOUBLE
73182: EQUAL
73183: IFTRUE 73187
73185: GO 73243
73187: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73188: LD_ADDR_VAR 0 9
73192: PUSH
73193: LD_VAR 0 29
73197: PUSH
73198: LD_VAR 0 30
73202: PUSH
73203: LD_VAR 0 31
73207: PUSH
73208: LD_VAR 0 32
73212: PUSH
73213: LD_VAR 0 33
73217: PUSH
73218: LD_VAR 0 34
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: PUSH
73231: LD_VAR 0 4
73235: PUSH
73236: LD_INT 1
73238: PLUS
73239: ARRAY
73240: ST_TO_ADDR
73241: GO 73726
73243: LD_INT 16
73245: DOUBLE
73246: EQUAL
73247: IFTRUE 73305
73249: LD_INT 17
73251: DOUBLE
73252: EQUAL
73253: IFTRUE 73305
73255: LD_INT 18
73257: DOUBLE
73258: EQUAL
73259: IFTRUE 73305
73261: LD_INT 19
73263: DOUBLE
73264: EQUAL
73265: IFTRUE 73305
73267: LD_INT 22
73269: DOUBLE
73270: EQUAL
73271: IFTRUE 73305
73273: LD_INT 20
73275: DOUBLE
73276: EQUAL
73277: IFTRUE 73305
73279: LD_INT 21
73281: DOUBLE
73282: EQUAL
73283: IFTRUE 73305
73285: LD_INT 23
73287: DOUBLE
73288: EQUAL
73289: IFTRUE 73305
73291: LD_INT 24
73293: DOUBLE
73294: EQUAL
73295: IFTRUE 73305
73297: LD_INT 25
73299: DOUBLE
73300: EQUAL
73301: IFTRUE 73305
73303: GO 73361
73305: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73306: LD_ADDR_VAR 0 9
73310: PUSH
73311: LD_VAR 0 35
73315: PUSH
73316: LD_VAR 0 36
73320: PUSH
73321: LD_VAR 0 37
73325: PUSH
73326: LD_VAR 0 38
73330: PUSH
73331: LD_VAR 0 39
73335: PUSH
73336: LD_VAR 0 40
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: PUSH
73349: LD_VAR 0 4
73353: PUSH
73354: LD_INT 1
73356: PLUS
73357: ARRAY
73358: ST_TO_ADDR
73359: GO 73726
73361: LD_INT 6
73363: DOUBLE
73364: EQUAL
73365: IFTRUE 73417
73367: LD_INT 7
73369: DOUBLE
73370: EQUAL
73371: IFTRUE 73417
73373: LD_INT 8
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73417
73379: LD_INT 13
73381: DOUBLE
73382: EQUAL
73383: IFTRUE 73417
73385: LD_INT 12
73387: DOUBLE
73388: EQUAL
73389: IFTRUE 73417
73391: LD_INT 15
73393: DOUBLE
73394: EQUAL
73395: IFTRUE 73417
73397: LD_INT 11
73399: DOUBLE
73400: EQUAL
73401: IFTRUE 73417
73403: LD_INT 14
73405: DOUBLE
73406: EQUAL
73407: IFTRUE 73417
73409: LD_INT 10
73411: DOUBLE
73412: EQUAL
73413: IFTRUE 73417
73415: GO 73473
73417: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73418: LD_ADDR_VAR 0 9
73422: PUSH
73423: LD_VAR 0 41
73427: PUSH
73428: LD_VAR 0 42
73432: PUSH
73433: LD_VAR 0 43
73437: PUSH
73438: LD_VAR 0 44
73442: PUSH
73443: LD_VAR 0 45
73447: PUSH
73448: LD_VAR 0 46
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: PUSH
73461: LD_VAR 0 4
73465: PUSH
73466: LD_INT 1
73468: PLUS
73469: ARRAY
73470: ST_TO_ADDR
73471: GO 73726
73473: LD_INT 36
73475: DOUBLE
73476: EQUAL
73477: IFTRUE 73481
73479: GO 73537
73481: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73482: LD_ADDR_VAR 0 9
73486: PUSH
73487: LD_VAR 0 47
73491: PUSH
73492: LD_VAR 0 48
73496: PUSH
73497: LD_VAR 0 49
73501: PUSH
73502: LD_VAR 0 50
73506: PUSH
73507: LD_VAR 0 51
73511: PUSH
73512: LD_VAR 0 52
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: PUSH
73525: LD_VAR 0 4
73529: PUSH
73530: LD_INT 1
73532: PLUS
73533: ARRAY
73534: ST_TO_ADDR
73535: GO 73726
73537: LD_INT 4
73539: DOUBLE
73540: EQUAL
73541: IFTRUE 73563
73543: LD_INT 5
73545: DOUBLE
73546: EQUAL
73547: IFTRUE 73563
73549: LD_INT 34
73551: DOUBLE
73552: EQUAL
73553: IFTRUE 73563
73555: LD_INT 37
73557: DOUBLE
73558: EQUAL
73559: IFTRUE 73563
73561: GO 73619
73563: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73564: LD_ADDR_VAR 0 9
73568: PUSH
73569: LD_VAR 0 53
73573: PUSH
73574: LD_VAR 0 54
73578: PUSH
73579: LD_VAR 0 55
73583: PUSH
73584: LD_VAR 0 56
73588: PUSH
73589: LD_VAR 0 57
73593: PUSH
73594: LD_VAR 0 58
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: PUSH
73607: LD_VAR 0 4
73611: PUSH
73612: LD_INT 1
73614: PLUS
73615: ARRAY
73616: ST_TO_ADDR
73617: GO 73726
73619: LD_INT 31
73621: DOUBLE
73622: EQUAL
73623: IFTRUE 73669
73625: LD_INT 32
73627: DOUBLE
73628: EQUAL
73629: IFTRUE 73669
73631: LD_INT 33
73633: DOUBLE
73634: EQUAL
73635: IFTRUE 73669
73637: LD_INT 27
73639: DOUBLE
73640: EQUAL
73641: IFTRUE 73669
73643: LD_INT 26
73645: DOUBLE
73646: EQUAL
73647: IFTRUE 73669
73649: LD_INT 28
73651: DOUBLE
73652: EQUAL
73653: IFTRUE 73669
73655: LD_INT 29
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73669
73661: LD_INT 30
73663: DOUBLE
73664: EQUAL
73665: IFTRUE 73669
73667: GO 73725
73669: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73670: LD_ADDR_VAR 0 9
73674: PUSH
73675: LD_VAR 0 59
73679: PUSH
73680: LD_VAR 0 60
73684: PUSH
73685: LD_VAR 0 61
73689: PUSH
73690: LD_VAR 0 62
73694: PUSH
73695: LD_VAR 0 63
73699: PUSH
73700: LD_VAR 0 64
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 4
73717: PUSH
73718: LD_INT 1
73720: PLUS
73721: ARRAY
73722: ST_TO_ADDR
73723: GO 73726
73725: POP
// temp_list2 = [ ] ;
73726: LD_ADDR_VAR 0 10
73730: PUSH
73731: EMPTY
73732: ST_TO_ADDR
// for i in temp_list do
73733: LD_ADDR_VAR 0 8
73737: PUSH
73738: LD_VAR 0 9
73742: PUSH
73743: FOR_IN
73744: IFFALSE 73796
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73746: LD_ADDR_VAR 0 10
73750: PUSH
73751: LD_VAR 0 10
73755: PUSH
73756: LD_VAR 0 8
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PUSH
73765: LD_VAR 0 2
73769: PLUS
73770: PUSH
73771: LD_VAR 0 8
73775: PUSH
73776: LD_INT 2
73778: ARRAY
73779: PUSH
73780: LD_VAR 0 3
73784: PLUS
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: EMPTY
73791: LIST
73792: ADD
73793: ST_TO_ADDR
73794: GO 73743
73796: POP
73797: POP
// result = temp_list2 ;
73798: LD_ADDR_VAR 0 7
73802: PUSH
73803: LD_VAR 0 10
73807: ST_TO_ADDR
// end ;
73808: LD_VAR 0 7
73812: RET
// export function EnemyInRange ( unit , dist ) ; begin
73813: LD_INT 0
73815: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73816: LD_ADDR_VAR 0 3
73820: PUSH
73821: LD_VAR 0 1
73825: PPUSH
73826: CALL_OW 255
73830: PPUSH
73831: LD_VAR 0 1
73835: PPUSH
73836: CALL_OW 250
73840: PPUSH
73841: LD_VAR 0 1
73845: PPUSH
73846: CALL_OW 251
73850: PPUSH
73851: LD_VAR 0 2
73855: PPUSH
73856: CALL 47215 0 4
73860: PUSH
73861: LD_INT 4
73863: ARRAY
73864: ST_TO_ADDR
// end ;
73865: LD_VAR 0 3
73869: RET
// export function PlayerSeeMe ( unit ) ; begin
73870: LD_INT 0
73872: PPUSH
// result := See ( your_side , unit ) ;
73873: LD_ADDR_VAR 0 2
73877: PUSH
73878: LD_OWVAR 2
73882: PPUSH
73883: LD_VAR 0 1
73887: PPUSH
73888: CALL_OW 292
73892: ST_TO_ADDR
// end ;
73893: LD_VAR 0 2
73897: RET
// export function ReverseDir ( unit ) ; begin
73898: LD_INT 0
73900: PPUSH
// if not unit then
73901: LD_VAR 0 1
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 73933
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73910: LD_ADDR_VAR 0 2
73914: PUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: CALL_OW 254
73924: PUSH
73925: LD_INT 3
73927: PLUS
73928: PUSH
73929: LD_INT 6
73931: MOD
73932: ST_TO_ADDR
// end ;
73933: LD_VAR 0 2
73937: RET
// export function ReverseArray ( array ) ; var i ; begin
73938: LD_INT 0
73940: PPUSH
73941: PPUSH
// if not array then
73942: LD_VAR 0 1
73946: NOT
73947: IFFALSE 73951
// exit ;
73949: GO 74006
// result := [ ] ;
73951: LD_ADDR_VAR 0 2
73955: PUSH
73956: EMPTY
73957: ST_TO_ADDR
// for i := array downto 1 do
73958: LD_ADDR_VAR 0 3
73962: PUSH
73963: DOUBLE
73964: LD_VAR 0 1
73968: INC
73969: ST_TO_ADDR
73970: LD_INT 1
73972: PUSH
73973: FOR_DOWNTO
73974: IFFALSE 74004
// result := Join ( result , array [ i ] ) ;
73976: LD_ADDR_VAR 0 2
73980: PUSH
73981: LD_VAR 0 2
73985: PPUSH
73986: LD_VAR 0 1
73990: PUSH
73991: LD_VAR 0 3
73995: ARRAY
73996: PPUSH
73997: CALL 78650 0 2
74001: ST_TO_ADDR
74002: GO 73973
74004: POP
74005: POP
// end ;
74006: LD_VAR 0 2
74010: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74011: LD_INT 0
74013: PPUSH
74014: PPUSH
74015: PPUSH
74016: PPUSH
74017: PPUSH
74018: PPUSH
// if not unit or not hexes then
74019: LD_VAR 0 1
74023: NOT
74024: PUSH
74025: LD_VAR 0 2
74029: NOT
74030: OR
74031: IFFALSE 74035
// exit ;
74033: GO 74158
// dist := 9999 ;
74035: LD_ADDR_VAR 0 5
74039: PUSH
74040: LD_INT 9999
74042: ST_TO_ADDR
// for i = 1 to hexes do
74043: LD_ADDR_VAR 0 4
74047: PUSH
74048: DOUBLE
74049: LD_INT 1
74051: DEC
74052: ST_TO_ADDR
74053: LD_VAR 0 2
74057: PUSH
74058: FOR_TO
74059: IFFALSE 74146
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74061: LD_ADDR_VAR 0 6
74065: PUSH
74066: LD_VAR 0 1
74070: PPUSH
74071: LD_VAR 0 2
74075: PUSH
74076: LD_VAR 0 4
74080: ARRAY
74081: PUSH
74082: LD_INT 1
74084: ARRAY
74085: PPUSH
74086: LD_VAR 0 2
74090: PUSH
74091: LD_VAR 0 4
74095: ARRAY
74096: PUSH
74097: LD_INT 2
74099: ARRAY
74100: PPUSH
74101: CALL_OW 297
74105: ST_TO_ADDR
// if tdist < dist then
74106: LD_VAR 0 6
74110: PUSH
74111: LD_VAR 0 5
74115: LESS
74116: IFFALSE 74144
// begin hex := hexes [ i ] ;
74118: LD_ADDR_VAR 0 8
74122: PUSH
74123: LD_VAR 0 2
74127: PUSH
74128: LD_VAR 0 4
74132: ARRAY
74133: ST_TO_ADDR
// dist := tdist ;
74134: LD_ADDR_VAR 0 5
74138: PUSH
74139: LD_VAR 0 6
74143: ST_TO_ADDR
// end ; end ;
74144: GO 74058
74146: POP
74147: POP
// result := hex ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_VAR 0 8
74157: ST_TO_ADDR
// end ;
74158: LD_VAR 0 3
74162: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74163: LD_INT 0
74165: PPUSH
74166: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74167: LD_VAR 0 1
74171: NOT
74172: PUSH
74173: LD_VAR 0 1
74177: PUSH
74178: LD_INT 21
74180: PUSH
74181: LD_INT 2
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 23
74190: PUSH
74191: LD_INT 2
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PPUSH
74202: CALL_OW 69
74206: IN
74207: NOT
74208: OR
74209: IFFALSE 74213
// exit ;
74211: GO 74260
// for i = 1 to 3 do
74213: LD_ADDR_VAR 0 3
74217: PUSH
74218: DOUBLE
74219: LD_INT 1
74221: DEC
74222: ST_TO_ADDR
74223: LD_INT 3
74225: PUSH
74226: FOR_TO
74227: IFFALSE 74258
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74229: LD_VAR 0 1
74233: PPUSH
74234: CALL_OW 250
74238: PPUSH
74239: LD_VAR 0 1
74243: PPUSH
74244: CALL_OW 251
74248: PPUSH
74249: LD_INT 1
74251: PPUSH
74252: CALL_OW 453
74256: GO 74226
74258: POP
74259: POP
// end ;
74260: LD_VAR 0 2
74264: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74265: LD_INT 0
74267: PPUSH
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74273: LD_VAR 0 1
74277: NOT
74278: PUSH
74279: LD_VAR 0 2
74283: NOT
74284: OR
74285: PUSH
74286: LD_VAR 0 1
74290: PPUSH
74291: CALL_OW 314
74295: OR
74296: IFFALSE 74300
// exit ;
74298: GO 74767
// if GetLives ( i ) < 250 then
74300: LD_VAR 0 4
74304: PPUSH
74305: CALL_OW 256
74309: PUSH
74310: LD_INT 250
74312: LESS
74313: IFFALSE 74326
// begin ComAutodestruct ( i ) ;
74315: LD_VAR 0 4
74319: PPUSH
74320: CALL 74163 0 1
// exit ;
74324: GO 74767
// end ; x := GetX ( enemy_unit ) ;
74326: LD_ADDR_VAR 0 7
74330: PUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: CALL_OW 250
74340: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74341: LD_ADDR_VAR 0 8
74345: PUSH
74346: LD_VAR 0 2
74350: PPUSH
74351: CALL_OW 251
74355: ST_TO_ADDR
// if not x or not y then
74356: LD_VAR 0 7
74360: NOT
74361: PUSH
74362: LD_VAR 0 8
74366: NOT
74367: OR
74368: IFFALSE 74372
// exit ;
74370: GO 74767
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74372: LD_ADDR_VAR 0 6
74376: PUSH
74377: LD_VAR 0 7
74381: PPUSH
74382: LD_INT 0
74384: PPUSH
74385: LD_INT 4
74387: PPUSH
74388: CALL_OW 272
74392: PUSH
74393: LD_VAR 0 8
74397: PPUSH
74398: LD_INT 0
74400: PPUSH
74401: LD_INT 4
74403: PPUSH
74404: CALL_OW 273
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_VAR 0 7
74417: PPUSH
74418: LD_INT 1
74420: PPUSH
74421: LD_INT 4
74423: PPUSH
74424: CALL_OW 272
74428: PUSH
74429: LD_VAR 0 8
74433: PPUSH
74434: LD_INT 1
74436: PPUSH
74437: LD_INT 4
74439: PPUSH
74440: CALL_OW 273
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_VAR 0 7
74453: PPUSH
74454: LD_INT 2
74456: PPUSH
74457: LD_INT 4
74459: PPUSH
74460: CALL_OW 272
74464: PUSH
74465: LD_VAR 0 8
74469: PPUSH
74470: LD_INT 2
74472: PPUSH
74473: LD_INT 4
74475: PPUSH
74476: CALL_OW 273
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_VAR 0 7
74489: PPUSH
74490: LD_INT 3
74492: PPUSH
74493: LD_INT 4
74495: PPUSH
74496: CALL_OW 272
74500: PUSH
74501: LD_VAR 0 8
74505: PPUSH
74506: LD_INT 3
74508: PPUSH
74509: LD_INT 4
74511: PPUSH
74512: CALL_OW 273
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_VAR 0 7
74525: PPUSH
74526: LD_INT 4
74528: PPUSH
74529: LD_INT 4
74531: PPUSH
74532: CALL_OW 272
74536: PUSH
74537: LD_VAR 0 8
74541: PPUSH
74542: LD_INT 4
74544: PPUSH
74545: LD_INT 4
74547: PPUSH
74548: CALL_OW 273
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_VAR 0 7
74561: PPUSH
74562: LD_INT 5
74564: PPUSH
74565: LD_INT 4
74567: PPUSH
74568: CALL_OW 272
74572: PUSH
74573: LD_VAR 0 8
74577: PPUSH
74578: LD_INT 5
74580: PPUSH
74581: LD_INT 4
74583: PPUSH
74584: CALL_OW 273
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: ST_TO_ADDR
// for i = tmp downto 1 do
74601: LD_ADDR_VAR 0 4
74605: PUSH
74606: DOUBLE
74607: LD_VAR 0 6
74611: INC
74612: ST_TO_ADDR
74613: LD_INT 1
74615: PUSH
74616: FOR_DOWNTO
74617: IFFALSE 74718
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74619: LD_VAR 0 6
74623: PUSH
74624: LD_VAR 0 4
74628: ARRAY
74629: PUSH
74630: LD_INT 1
74632: ARRAY
74633: PPUSH
74634: LD_VAR 0 6
74638: PUSH
74639: LD_VAR 0 4
74643: ARRAY
74644: PUSH
74645: LD_INT 2
74647: ARRAY
74648: PPUSH
74649: CALL_OW 488
74653: NOT
74654: PUSH
74655: LD_VAR 0 6
74659: PUSH
74660: LD_VAR 0 4
74664: ARRAY
74665: PUSH
74666: LD_INT 1
74668: ARRAY
74669: PPUSH
74670: LD_VAR 0 6
74674: PUSH
74675: LD_VAR 0 4
74679: ARRAY
74680: PUSH
74681: LD_INT 2
74683: ARRAY
74684: PPUSH
74685: CALL_OW 428
74689: PUSH
74690: LD_INT 0
74692: NONEQUAL
74693: OR
74694: IFFALSE 74716
// tmp := Delete ( tmp , i ) ;
74696: LD_ADDR_VAR 0 6
74700: PUSH
74701: LD_VAR 0 6
74705: PPUSH
74706: LD_VAR 0 4
74710: PPUSH
74711: CALL_OW 3
74715: ST_TO_ADDR
74716: GO 74616
74718: POP
74719: POP
// j := GetClosestHex ( unit , tmp ) ;
74720: LD_ADDR_VAR 0 5
74724: PUSH
74725: LD_VAR 0 1
74729: PPUSH
74730: LD_VAR 0 6
74734: PPUSH
74735: CALL 74011 0 2
74739: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74740: LD_VAR 0 1
74744: PPUSH
74745: LD_VAR 0 5
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PPUSH
74754: LD_VAR 0 5
74758: PUSH
74759: LD_INT 2
74761: ARRAY
74762: PPUSH
74763: CALL_OW 111
// end ;
74767: LD_VAR 0 3
74771: RET
// export function PrepareApemanSoldier ( ) ; begin
74772: LD_INT 0
74774: PPUSH
// uc_nation := 0 ;
74775: LD_ADDR_OWVAR 21
74779: PUSH
74780: LD_INT 0
74782: ST_TO_ADDR
// hc_sex := sex_male ;
74783: LD_ADDR_OWVAR 27
74787: PUSH
74788: LD_INT 1
74790: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74791: LD_ADDR_OWVAR 28
74795: PUSH
74796: LD_INT 15
74798: ST_TO_ADDR
// hc_gallery :=  ;
74799: LD_ADDR_OWVAR 33
74803: PUSH
74804: LD_STRING 
74806: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74807: LD_ADDR_OWVAR 31
74811: PUSH
74812: LD_INT 0
74814: PPUSH
74815: LD_INT 3
74817: PPUSH
74818: CALL_OW 12
74822: PUSH
74823: LD_INT 0
74825: PPUSH
74826: LD_INT 3
74828: PPUSH
74829: CALL_OW 12
74833: PUSH
74834: LD_INT 0
74836: PUSH
74837: LD_INT 0
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: ST_TO_ADDR
// end ;
74846: LD_VAR 0 1
74850: RET
// export function PrepareApemanEngineer ( ) ; begin
74851: LD_INT 0
74853: PPUSH
// uc_nation := 0 ;
74854: LD_ADDR_OWVAR 21
74858: PUSH
74859: LD_INT 0
74861: ST_TO_ADDR
// hc_sex := sex_male ;
74862: LD_ADDR_OWVAR 27
74866: PUSH
74867: LD_INT 1
74869: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74870: LD_ADDR_OWVAR 28
74874: PUSH
74875: LD_INT 16
74877: ST_TO_ADDR
// hc_gallery :=  ;
74878: LD_ADDR_OWVAR 33
74882: PUSH
74883: LD_STRING 
74885: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74886: LD_ADDR_OWVAR 31
74890: PUSH
74891: LD_INT 0
74893: PPUSH
74894: LD_INT 3
74896: PPUSH
74897: CALL_OW 12
74901: PUSH
74902: LD_INT 0
74904: PPUSH
74905: LD_INT 3
74907: PPUSH
74908: CALL_OW 12
74912: PUSH
74913: LD_INT 0
74915: PUSH
74916: LD_INT 0
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: ST_TO_ADDR
// end ;
74925: LD_VAR 0 1
74929: RET
// export function PrepareApeman ( agressivity ) ; begin
74930: LD_INT 0
74932: PPUSH
// uc_side := 0 ;
74933: LD_ADDR_OWVAR 20
74937: PUSH
74938: LD_INT 0
74940: ST_TO_ADDR
// uc_nation := 0 ;
74941: LD_ADDR_OWVAR 21
74945: PUSH
74946: LD_INT 0
74948: ST_TO_ADDR
// hc_sex := sex_male ;
74949: LD_ADDR_OWVAR 27
74953: PUSH
74954: LD_INT 1
74956: ST_TO_ADDR
// hc_class := class_apeman ;
74957: LD_ADDR_OWVAR 28
74961: PUSH
74962: LD_INT 12
74964: ST_TO_ADDR
// hc_gallery :=  ;
74965: LD_ADDR_OWVAR 33
74969: PUSH
74970: LD_STRING 
74972: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74973: LD_ADDR_OWVAR 35
74977: PUSH
74978: LD_VAR 0 1
74982: NEG
74983: PPUSH
74984: LD_VAR 0 1
74988: PPUSH
74989: CALL_OW 12
74993: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74994: LD_ADDR_OWVAR 31
74998: PUSH
74999: LD_INT 0
75001: PPUSH
75002: LD_INT 3
75004: PPUSH
75005: CALL_OW 12
75009: PUSH
75010: LD_INT 0
75012: PPUSH
75013: LD_INT 3
75015: PPUSH
75016: CALL_OW 12
75020: PUSH
75021: LD_INT 0
75023: PUSH
75024: LD_INT 0
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: ST_TO_ADDR
// end ;
75033: LD_VAR 0 2
75037: RET
// export function PrepareTiger ( agressivity ) ; begin
75038: LD_INT 0
75040: PPUSH
// uc_side := 0 ;
75041: LD_ADDR_OWVAR 20
75045: PUSH
75046: LD_INT 0
75048: ST_TO_ADDR
// uc_nation := 0 ;
75049: LD_ADDR_OWVAR 21
75053: PUSH
75054: LD_INT 0
75056: ST_TO_ADDR
// hc_class := class_tiger ;
75057: LD_ADDR_OWVAR 28
75061: PUSH
75062: LD_INT 14
75064: ST_TO_ADDR
// hc_gallery :=  ;
75065: LD_ADDR_OWVAR 33
75069: PUSH
75070: LD_STRING 
75072: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75073: LD_ADDR_OWVAR 35
75077: PUSH
75078: LD_VAR 0 1
75082: NEG
75083: PPUSH
75084: LD_VAR 0 1
75088: PPUSH
75089: CALL_OW 12
75093: ST_TO_ADDR
// end ;
75094: LD_VAR 0 2
75098: RET
// export function PrepareEnchidna ( ) ; begin
75099: LD_INT 0
75101: PPUSH
// uc_side := 0 ;
75102: LD_ADDR_OWVAR 20
75106: PUSH
75107: LD_INT 0
75109: ST_TO_ADDR
// uc_nation := 0 ;
75110: LD_ADDR_OWVAR 21
75114: PUSH
75115: LD_INT 0
75117: ST_TO_ADDR
// hc_class := class_baggie ;
75118: LD_ADDR_OWVAR 28
75122: PUSH
75123: LD_INT 13
75125: ST_TO_ADDR
// hc_gallery :=  ;
75126: LD_ADDR_OWVAR 33
75130: PUSH
75131: LD_STRING 
75133: ST_TO_ADDR
// end ;
75134: LD_VAR 0 1
75138: RET
// export function PrepareFrog ( ) ; begin
75139: LD_INT 0
75141: PPUSH
// uc_side := 0 ;
75142: LD_ADDR_OWVAR 20
75146: PUSH
75147: LD_INT 0
75149: ST_TO_ADDR
// uc_nation := 0 ;
75150: LD_ADDR_OWVAR 21
75154: PUSH
75155: LD_INT 0
75157: ST_TO_ADDR
// hc_class := class_frog ;
75158: LD_ADDR_OWVAR 28
75162: PUSH
75163: LD_INT 19
75165: ST_TO_ADDR
// hc_gallery :=  ;
75166: LD_ADDR_OWVAR 33
75170: PUSH
75171: LD_STRING 
75173: ST_TO_ADDR
// end ;
75174: LD_VAR 0 1
75178: RET
// export function PrepareFish ( ) ; begin
75179: LD_INT 0
75181: PPUSH
// uc_side := 0 ;
75182: LD_ADDR_OWVAR 20
75186: PUSH
75187: LD_INT 0
75189: ST_TO_ADDR
// uc_nation := 0 ;
75190: LD_ADDR_OWVAR 21
75194: PUSH
75195: LD_INT 0
75197: ST_TO_ADDR
// hc_class := class_fish ;
75198: LD_ADDR_OWVAR 28
75202: PUSH
75203: LD_INT 20
75205: ST_TO_ADDR
// hc_gallery :=  ;
75206: LD_ADDR_OWVAR 33
75210: PUSH
75211: LD_STRING 
75213: ST_TO_ADDR
// end ;
75214: LD_VAR 0 1
75218: RET
// export function PrepareBird ( ) ; begin
75219: LD_INT 0
75221: PPUSH
// uc_side := 0 ;
75222: LD_ADDR_OWVAR 20
75226: PUSH
75227: LD_INT 0
75229: ST_TO_ADDR
// uc_nation := 0 ;
75230: LD_ADDR_OWVAR 21
75234: PUSH
75235: LD_INT 0
75237: ST_TO_ADDR
// hc_class := class_phororhacos ;
75238: LD_ADDR_OWVAR 28
75242: PUSH
75243: LD_INT 18
75245: ST_TO_ADDR
// hc_gallery :=  ;
75246: LD_ADDR_OWVAR 33
75250: PUSH
75251: LD_STRING 
75253: ST_TO_ADDR
// end ;
75254: LD_VAR 0 1
75258: RET
// export function PrepareHorse ( ) ; begin
75259: LD_INT 0
75261: PPUSH
// uc_side := 0 ;
75262: LD_ADDR_OWVAR 20
75266: PUSH
75267: LD_INT 0
75269: ST_TO_ADDR
// uc_nation := 0 ;
75270: LD_ADDR_OWVAR 21
75274: PUSH
75275: LD_INT 0
75277: ST_TO_ADDR
// hc_class := class_horse ;
75278: LD_ADDR_OWVAR 28
75282: PUSH
75283: LD_INT 21
75285: ST_TO_ADDR
// hc_gallery :=  ;
75286: LD_ADDR_OWVAR 33
75290: PUSH
75291: LD_STRING 
75293: ST_TO_ADDR
// end ;
75294: LD_VAR 0 1
75298: RET
// export function PrepareMastodont ( ) ; begin
75299: LD_INT 0
75301: PPUSH
// uc_side := 0 ;
75302: LD_ADDR_OWVAR 20
75306: PUSH
75307: LD_INT 0
75309: ST_TO_ADDR
// uc_nation := 0 ;
75310: LD_ADDR_OWVAR 21
75314: PUSH
75315: LD_INT 0
75317: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75318: LD_ADDR_OWVAR 37
75322: PUSH
75323: LD_INT 31
75325: ST_TO_ADDR
// vc_control := control_rider ;
75326: LD_ADDR_OWVAR 38
75330: PUSH
75331: LD_INT 4
75333: ST_TO_ADDR
// end ;
75334: LD_VAR 0 1
75338: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75339: LD_INT 0
75341: PPUSH
75342: PPUSH
75343: PPUSH
// uc_side = 0 ;
75344: LD_ADDR_OWVAR 20
75348: PUSH
75349: LD_INT 0
75351: ST_TO_ADDR
// uc_nation = 0 ;
75352: LD_ADDR_OWVAR 21
75356: PUSH
75357: LD_INT 0
75359: ST_TO_ADDR
// InitHc_All ( ) ;
75360: CALL_OW 584
// InitVc ;
75364: CALL_OW 20
// if mastodonts then
75368: LD_VAR 0 6
75372: IFFALSE 75439
// for i = 1 to mastodonts do
75374: LD_ADDR_VAR 0 11
75378: PUSH
75379: DOUBLE
75380: LD_INT 1
75382: DEC
75383: ST_TO_ADDR
75384: LD_VAR 0 6
75388: PUSH
75389: FOR_TO
75390: IFFALSE 75437
// begin vc_chassis := 31 ;
75392: LD_ADDR_OWVAR 37
75396: PUSH
75397: LD_INT 31
75399: ST_TO_ADDR
// vc_control := control_rider ;
75400: LD_ADDR_OWVAR 38
75404: PUSH
75405: LD_INT 4
75407: ST_TO_ADDR
// animal := CreateVehicle ;
75408: LD_ADDR_VAR 0 12
75412: PUSH
75413: CALL_OW 45
75417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75418: LD_VAR 0 12
75422: PPUSH
75423: LD_VAR 0 8
75427: PPUSH
75428: LD_INT 0
75430: PPUSH
75431: CALL 77567 0 3
// end ;
75435: GO 75389
75437: POP
75438: POP
// if horses then
75439: LD_VAR 0 5
75443: IFFALSE 75510
// for i = 1 to horses do
75445: LD_ADDR_VAR 0 11
75449: PUSH
75450: DOUBLE
75451: LD_INT 1
75453: DEC
75454: ST_TO_ADDR
75455: LD_VAR 0 5
75459: PUSH
75460: FOR_TO
75461: IFFALSE 75508
// begin hc_class := 21 ;
75463: LD_ADDR_OWVAR 28
75467: PUSH
75468: LD_INT 21
75470: ST_TO_ADDR
// hc_gallery :=  ;
75471: LD_ADDR_OWVAR 33
75475: PUSH
75476: LD_STRING 
75478: ST_TO_ADDR
// animal := CreateHuman ;
75479: LD_ADDR_VAR 0 12
75483: PUSH
75484: CALL_OW 44
75488: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75489: LD_VAR 0 12
75493: PPUSH
75494: LD_VAR 0 8
75498: PPUSH
75499: LD_INT 0
75501: PPUSH
75502: CALL 77567 0 3
// end ;
75506: GO 75460
75508: POP
75509: POP
// if birds then
75510: LD_VAR 0 1
75514: IFFALSE 75581
// for i = 1 to birds do
75516: LD_ADDR_VAR 0 11
75520: PUSH
75521: DOUBLE
75522: LD_INT 1
75524: DEC
75525: ST_TO_ADDR
75526: LD_VAR 0 1
75530: PUSH
75531: FOR_TO
75532: IFFALSE 75579
// begin hc_class = 18 ;
75534: LD_ADDR_OWVAR 28
75538: PUSH
75539: LD_INT 18
75541: ST_TO_ADDR
// hc_gallery =  ;
75542: LD_ADDR_OWVAR 33
75546: PUSH
75547: LD_STRING 
75549: ST_TO_ADDR
// animal := CreateHuman ;
75550: LD_ADDR_VAR 0 12
75554: PUSH
75555: CALL_OW 44
75559: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75560: LD_VAR 0 12
75564: PPUSH
75565: LD_VAR 0 8
75569: PPUSH
75570: LD_INT 0
75572: PPUSH
75573: CALL 77567 0 3
// end ;
75577: GO 75531
75579: POP
75580: POP
// if tigers then
75581: LD_VAR 0 2
75585: IFFALSE 75669
// for i = 1 to tigers do
75587: LD_ADDR_VAR 0 11
75591: PUSH
75592: DOUBLE
75593: LD_INT 1
75595: DEC
75596: ST_TO_ADDR
75597: LD_VAR 0 2
75601: PUSH
75602: FOR_TO
75603: IFFALSE 75667
// begin hc_class = class_tiger ;
75605: LD_ADDR_OWVAR 28
75609: PUSH
75610: LD_INT 14
75612: ST_TO_ADDR
// hc_gallery =  ;
75613: LD_ADDR_OWVAR 33
75617: PUSH
75618: LD_STRING 
75620: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75621: LD_ADDR_OWVAR 35
75625: PUSH
75626: LD_INT 7
75628: NEG
75629: PPUSH
75630: LD_INT 7
75632: PPUSH
75633: CALL_OW 12
75637: ST_TO_ADDR
// animal := CreateHuman ;
75638: LD_ADDR_VAR 0 12
75642: PUSH
75643: CALL_OW 44
75647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75648: LD_VAR 0 12
75652: PPUSH
75653: LD_VAR 0 8
75657: PPUSH
75658: LD_INT 0
75660: PPUSH
75661: CALL 77567 0 3
// end ;
75665: GO 75602
75667: POP
75668: POP
// if apemans then
75669: LD_VAR 0 3
75673: IFFALSE 75796
// for i = 1 to apemans do
75675: LD_ADDR_VAR 0 11
75679: PUSH
75680: DOUBLE
75681: LD_INT 1
75683: DEC
75684: ST_TO_ADDR
75685: LD_VAR 0 3
75689: PUSH
75690: FOR_TO
75691: IFFALSE 75794
// begin hc_class = class_apeman ;
75693: LD_ADDR_OWVAR 28
75697: PUSH
75698: LD_INT 12
75700: ST_TO_ADDR
// hc_gallery =  ;
75701: LD_ADDR_OWVAR 33
75705: PUSH
75706: LD_STRING 
75708: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75709: LD_ADDR_OWVAR 35
75713: PUSH
75714: LD_INT 2
75716: NEG
75717: PPUSH
75718: LD_INT 2
75720: PPUSH
75721: CALL_OW 12
75725: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75726: LD_ADDR_OWVAR 31
75730: PUSH
75731: LD_INT 1
75733: PPUSH
75734: LD_INT 3
75736: PPUSH
75737: CALL_OW 12
75741: PUSH
75742: LD_INT 1
75744: PPUSH
75745: LD_INT 3
75747: PPUSH
75748: CALL_OW 12
75752: PUSH
75753: LD_INT 0
75755: PUSH
75756: LD_INT 0
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: ST_TO_ADDR
// animal := CreateHuman ;
75765: LD_ADDR_VAR 0 12
75769: PUSH
75770: CALL_OW 44
75774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75775: LD_VAR 0 12
75779: PPUSH
75780: LD_VAR 0 8
75784: PPUSH
75785: LD_INT 0
75787: PPUSH
75788: CALL 77567 0 3
// end ;
75792: GO 75690
75794: POP
75795: POP
// if enchidnas then
75796: LD_VAR 0 4
75800: IFFALSE 75867
// for i = 1 to enchidnas do
75802: LD_ADDR_VAR 0 11
75806: PUSH
75807: DOUBLE
75808: LD_INT 1
75810: DEC
75811: ST_TO_ADDR
75812: LD_VAR 0 4
75816: PUSH
75817: FOR_TO
75818: IFFALSE 75865
// begin hc_class = 13 ;
75820: LD_ADDR_OWVAR 28
75824: PUSH
75825: LD_INT 13
75827: ST_TO_ADDR
// hc_gallery =  ;
75828: LD_ADDR_OWVAR 33
75832: PUSH
75833: LD_STRING 
75835: ST_TO_ADDR
// animal := CreateHuman ;
75836: LD_ADDR_VAR 0 12
75840: PUSH
75841: CALL_OW 44
75845: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75846: LD_VAR 0 12
75850: PPUSH
75851: LD_VAR 0 8
75855: PPUSH
75856: LD_INT 0
75858: PPUSH
75859: CALL 77567 0 3
// end ;
75863: GO 75817
75865: POP
75866: POP
// if fishes then
75867: LD_VAR 0 7
75871: IFFALSE 75938
// for i = 1 to fishes do
75873: LD_ADDR_VAR 0 11
75877: PUSH
75878: DOUBLE
75879: LD_INT 1
75881: DEC
75882: ST_TO_ADDR
75883: LD_VAR 0 7
75887: PUSH
75888: FOR_TO
75889: IFFALSE 75936
// begin hc_class = 20 ;
75891: LD_ADDR_OWVAR 28
75895: PUSH
75896: LD_INT 20
75898: ST_TO_ADDR
// hc_gallery =  ;
75899: LD_ADDR_OWVAR 33
75903: PUSH
75904: LD_STRING 
75906: ST_TO_ADDR
// animal := CreateHuman ;
75907: LD_ADDR_VAR 0 12
75911: PUSH
75912: CALL_OW 44
75916: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75917: LD_VAR 0 12
75921: PPUSH
75922: LD_VAR 0 9
75926: PPUSH
75927: LD_INT 0
75929: PPUSH
75930: CALL 77567 0 3
// end ;
75934: GO 75888
75936: POP
75937: POP
// end ;
75938: LD_VAR 0 10
75942: RET
// export function WantHeal ( sci , unit ) ; begin
75943: LD_INT 0
75945: PPUSH
// if GetTaskList ( sci ) > 0 then
75946: LD_VAR 0 1
75950: PPUSH
75951: CALL_OW 437
75955: PUSH
75956: LD_INT 0
75958: GREATER
75959: IFFALSE 76029
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 437
75970: PUSH
75971: LD_INT 1
75973: ARRAY
75974: PUSH
75975: LD_INT 1
75977: ARRAY
75978: PUSH
75979: LD_STRING l
75981: EQUAL
75982: PUSH
75983: LD_VAR 0 1
75987: PPUSH
75988: CALL_OW 437
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: PUSH
75997: LD_INT 4
75999: ARRAY
76000: PUSH
76001: LD_VAR 0 2
76005: EQUAL
76006: AND
76007: IFFALSE 76019
// result := true else
76009: LD_ADDR_VAR 0 3
76013: PUSH
76014: LD_INT 1
76016: ST_TO_ADDR
76017: GO 76027
// result := false ;
76019: LD_ADDR_VAR 0 3
76023: PUSH
76024: LD_INT 0
76026: ST_TO_ADDR
// end else
76027: GO 76037
// result := false ;
76029: LD_ADDR_VAR 0 3
76033: PUSH
76034: LD_INT 0
76036: ST_TO_ADDR
// end ;
76037: LD_VAR 0 3
76041: RET
// export function HealTarget ( sci ) ; begin
76042: LD_INT 0
76044: PPUSH
// if not sci then
76045: LD_VAR 0 1
76049: NOT
76050: IFFALSE 76054
// exit ;
76052: GO 76119
// result := 0 ;
76054: LD_ADDR_VAR 0 2
76058: PUSH
76059: LD_INT 0
76061: ST_TO_ADDR
// if GetTaskList ( sci ) then
76062: LD_VAR 0 1
76066: PPUSH
76067: CALL_OW 437
76071: IFFALSE 76119
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76073: LD_VAR 0 1
76077: PPUSH
76078: CALL_OW 437
76082: PUSH
76083: LD_INT 1
76085: ARRAY
76086: PUSH
76087: LD_INT 1
76089: ARRAY
76090: PUSH
76091: LD_STRING l
76093: EQUAL
76094: IFFALSE 76119
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76096: LD_ADDR_VAR 0 2
76100: PUSH
76101: LD_VAR 0 1
76105: PPUSH
76106: CALL_OW 437
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: LD_INT 4
76117: ARRAY
76118: ST_TO_ADDR
// end ;
76119: LD_VAR 0 2
76123: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
76128: PPUSH
76129: PPUSH
// if not base_units then
76130: LD_VAR 0 1
76134: NOT
76135: IFFALSE 76139
// exit ;
76137: GO 76226
// result := false ;
76139: LD_ADDR_VAR 0 2
76143: PUSH
76144: LD_INT 0
76146: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76147: LD_ADDR_VAR 0 5
76151: PUSH
76152: LD_VAR 0 1
76156: PPUSH
76157: LD_INT 21
76159: PUSH
76160: LD_INT 3
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PPUSH
76167: CALL_OW 72
76171: ST_TO_ADDR
// if not tmp then
76172: LD_VAR 0 5
76176: NOT
76177: IFFALSE 76181
// exit ;
76179: GO 76226
// for i in tmp do
76181: LD_ADDR_VAR 0 3
76185: PUSH
76186: LD_VAR 0 5
76190: PUSH
76191: FOR_IN
76192: IFFALSE 76224
// begin result := EnemyInRange ( i , 22 ) ;
76194: LD_ADDR_VAR 0 2
76198: PUSH
76199: LD_VAR 0 3
76203: PPUSH
76204: LD_INT 22
76206: PPUSH
76207: CALL 73813 0 2
76211: ST_TO_ADDR
// if result then
76212: LD_VAR 0 2
76216: IFFALSE 76222
// exit ;
76218: POP
76219: POP
76220: GO 76226
// end ;
76222: GO 76191
76224: POP
76225: POP
// end ;
76226: LD_VAR 0 2
76230: RET
// export function FilterByTag ( units , tag ) ; begin
76231: LD_INT 0
76233: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76234: LD_ADDR_VAR 0 3
76238: PUSH
76239: LD_VAR 0 1
76243: PPUSH
76244: LD_INT 120
76246: PUSH
76247: LD_VAR 0 2
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PPUSH
76256: CALL_OW 72
76260: ST_TO_ADDR
// end ;
76261: LD_VAR 0 3
76265: RET
// export function IsDriver ( un ) ; begin
76266: LD_INT 0
76268: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76269: LD_ADDR_VAR 0 2
76273: PUSH
76274: LD_VAR 0 1
76278: PUSH
76279: LD_INT 55
76281: PUSH
76282: EMPTY
76283: LIST
76284: PPUSH
76285: CALL_OW 69
76289: IN
76290: ST_TO_ADDR
// end ;
76291: LD_VAR 0 2
76295: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76296: LD_INT 0
76298: PPUSH
76299: PPUSH
// list := [ ] ;
76300: LD_ADDR_VAR 0 5
76304: PUSH
76305: EMPTY
76306: ST_TO_ADDR
// case d of 0 :
76307: LD_VAR 0 3
76311: PUSH
76312: LD_INT 0
76314: DOUBLE
76315: EQUAL
76316: IFTRUE 76320
76318: GO 76453
76320: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76321: LD_ADDR_VAR 0 5
76325: PUSH
76326: LD_VAR 0 1
76330: PUSH
76331: LD_INT 4
76333: MINUS
76334: PUSH
76335: LD_VAR 0 2
76339: PUSH
76340: LD_INT 4
76342: MINUS
76343: PUSH
76344: LD_INT 2
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: LIST
76351: PUSH
76352: LD_VAR 0 1
76356: PUSH
76357: LD_INT 3
76359: MINUS
76360: PUSH
76361: LD_VAR 0 2
76365: PUSH
76366: LD_INT 1
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: PUSH
76374: LD_VAR 0 1
76378: PUSH
76379: LD_INT 4
76381: PLUS
76382: PUSH
76383: LD_VAR 0 2
76387: PUSH
76388: LD_INT 4
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: LIST
76395: PUSH
76396: LD_VAR 0 1
76400: PUSH
76401: LD_INT 3
76403: PLUS
76404: PUSH
76405: LD_VAR 0 2
76409: PUSH
76410: LD_INT 3
76412: PLUS
76413: PUSH
76414: LD_INT 5
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 1
76426: PUSH
76427: LD_VAR 0 2
76431: PUSH
76432: LD_INT 4
76434: PLUS
76435: PUSH
76436: LD_INT 0
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: ST_TO_ADDR
// end ; 1 :
76451: GO 77151
76453: LD_INT 1
76455: DOUBLE
76456: EQUAL
76457: IFTRUE 76461
76459: GO 76594
76461: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76462: LD_ADDR_VAR 0 5
76466: PUSH
76467: LD_VAR 0 1
76471: PUSH
76472: LD_VAR 0 2
76476: PUSH
76477: LD_INT 4
76479: MINUS
76480: PUSH
76481: LD_INT 3
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: LIST
76488: PUSH
76489: LD_VAR 0 1
76493: PUSH
76494: LD_INT 3
76496: MINUS
76497: PUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_INT 3
76505: MINUS
76506: PUSH
76507: LD_INT 2
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: PUSH
76515: LD_VAR 0 1
76519: PUSH
76520: LD_INT 4
76522: MINUS
76523: PUSH
76524: LD_VAR 0 2
76528: PUSH
76529: LD_INT 1
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: LIST
76536: PUSH
76537: LD_VAR 0 1
76541: PUSH
76542: LD_VAR 0 2
76546: PUSH
76547: LD_INT 3
76549: PLUS
76550: PUSH
76551: LD_INT 0
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: LIST
76558: PUSH
76559: LD_VAR 0 1
76563: PUSH
76564: LD_INT 4
76566: PLUS
76567: PUSH
76568: LD_VAR 0 2
76572: PUSH
76573: LD_INT 4
76575: PLUS
76576: PUSH
76577: LD_INT 5
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: LIST
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: ST_TO_ADDR
// end ; 2 :
76592: GO 77151
76594: LD_INT 2
76596: DOUBLE
76597: EQUAL
76598: IFTRUE 76602
76600: GO 76731
76602: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76603: LD_ADDR_VAR 0 5
76607: PUSH
76608: LD_VAR 0 1
76612: PUSH
76613: LD_VAR 0 2
76617: PUSH
76618: LD_INT 3
76620: MINUS
76621: PUSH
76622: LD_INT 3
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: LIST
76629: PUSH
76630: LD_VAR 0 1
76634: PUSH
76635: LD_INT 4
76637: PLUS
76638: PUSH
76639: LD_VAR 0 2
76643: PUSH
76644: LD_INT 4
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: LD_VAR 0 2
76661: PUSH
76662: LD_INT 4
76664: PLUS
76665: PUSH
76666: LD_INT 0
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: LIST
76673: PUSH
76674: LD_VAR 0 1
76678: PUSH
76679: LD_INT 3
76681: MINUS
76682: PUSH
76683: LD_VAR 0 2
76687: PUSH
76688: LD_INT 1
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: LIST
76695: PUSH
76696: LD_VAR 0 1
76700: PUSH
76701: LD_INT 4
76703: MINUS
76704: PUSH
76705: LD_VAR 0 2
76709: PUSH
76710: LD_INT 4
76712: MINUS
76713: PUSH
76714: LD_INT 2
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: ST_TO_ADDR
// end ; 3 :
76729: GO 77151
76731: LD_INT 3
76733: DOUBLE
76734: EQUAL
76735: IFTRUE 76739
76737: GO 76872
76739: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76740: LD_ADDR_VAR 0 5
76744: PUSH
76745: LD_VAR 0 1
76749: PUSH
76750: LD_INT 3
76752: PLUS
76753: PUSH
76754: LD_VAR 0 2
76758: PUSH
76759: LD_INT 4
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: LIST
76766: PUSH
76767: LD_VAR 0 1
76771: PUSH
76772: LD_INT 4
76774: PLUS
76775: PUSH
76776: LD_VAR 0 2
76780: PUSH
76781: LD_INT 4
76783: PLUS
76784: PUSH
76785: LD_INT 5
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: LIST
76792: PUSH
76793: LD_VAR 0 1
76797: PUSH
76798: LD_INT 4
76800: MINUS
76801: PUSH
76802: LD_VAR 0 2
76806: PUSH
76807: LD_INT 1
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: PUSH
76815: LD_VAR 0 1
76819: PUSH
76820: LD_VAR 0 2
76824: PUSH
76825: LD_INT 4
76827: MINUS
76828: PUSH
76829: LD_INT 3
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: LIST
76836: PUSH
76837: LD_VAR 0 1
76841: PUSH
76842: LD_INT 3
76844: MINUS
76845: PUSH
76846: LD_VAR 0 2
76850: PUSH
76851: LD_INT 3
76853: MINUS
76854: PUSH
76855: LD_INT 2
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: LIST
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: ST_TO_ADDR
// end ; 4 :
76870: GO 77151
76872: LD_INT 4
76874: DOUBLE
76875: EQUAL
76876: IFTRUE 76880
76878: GO 77013
76880: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76881: LD_ADDR_VAR 0 5
76885: PUSH
76886: LD_VAR 0 1
76890: PUSH
76891: LD_VAR 0 2
76895: PUSH
76896: LD_INT 4
76898: PLUS
76899: PUSH
76900: LD_INT 0
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: LIST
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: LD_INT 3
76915: PLUS
76916: PUSH
76917: LD_VAR 0 2
76921: PUSH
76922: LD_INT 3
76924: PLUS
76925: PUSH
76926: LD_INT 5
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: LIST
76933: PUSH
76934: LD_VAR 0 1
76938: PUSH
76939: LD_INT 4
76941: PLUS
76942: PUSH
76943: LD_VAR 0 2
76947: PUSH
76948: LD_INT 4
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: LIST
76955: PUSH
76956: LD_VAR 0 1
76960: PUSH
76961: LD_VAR 0 2
76965: PUSH
76966: LD_INT 3
76968: MINUS
76969: PUSH
76970: LD_INT 3
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: LIST
76977: PUSH
76978: LD_VAR 0 1
76982: PUSH
76983: LD_INT 4
76985: MINUS
76986: PUSH
76987: LD_VAR 0 2
76991: PUSH
76992: LD_INT 4
76994: MINUS
76995: PUSH
76996: LD_INT 2
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: LIST
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: ST_TO_ADDR
// end ; 5 :
77011: GO 77151
77013: LD_INT 5
77015: DOUBLE
77016: EQUAL
77017: IFTRUE 77021
77019: GO 77150
77021: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77022: LD_ADDR_VAR 0 5
77026: PUSH
77027: LD_VAR 0 1
77031: PUSH
77032: LD_INT 4
77034: MINUS
77035: PUSH
77036: LD_VAR 0 2
77040: PUSH
77041: LD_INT 1
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: LIST
77048: PUSH
77049: LD_VAR 0 1
77053: PUSH
77054: LD_VAR 0 2
77058: PUSH
77059: LD_INT 4
77061: MINUS
77062: PUSH
77063: LD_INT 3
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: LIST
77070: PUSH
77071: LD_VAR 0 1
77075: PUSH
77076: LD_INT 4
77078: PLUS
77079: PUSH
77080: LD_VAR 0 2
77084: PUSH
77085: LD_INT 4
77087: PLUS
77088: PUSH
77089: LD_INT 5
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: LIST
77096: PUSH
77097: LD_VAR 0 1
77101: PUSH
77102: LD_INT 3
77104: PLUS
77105: PUSH
77106: LD_VAR 0 2
77110: PUSH
77111: LD_INT 4
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: LIST
77118: PUSH
77119: LD_VAR 0 1
77123: PUSH
77124: LD_VAR 0 2
77128: PUSH
77129: LD_INT 3
77131: PLUS
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: LIST
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: ST_TO_ADDR
// end ; end ;
77148: GO 77151
77150: POP
// result := list ;
77151: LD_ADDR_VAR 0 4
77155: PUSH
77156: LD_VAR 0 5
77160: ST_TO_ADDR
// end ;
77161: LD_VAR 0 4
77165: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77166: LD_INT 0
77168: PPUSH
77169: PPUSH
77170: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77171: LD_VAR 0 1
77175: NOT
77176: PUSH
77177: LD_VAR 0 2
77181: PUSH
77182: LD_INT 1
77184: PUSH
77185: LD_INT 2
77187: PUSH
77188: LD_INT 3
77190: PUSH
77191: LD_INT 4
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: IN
77200: NOT
77201: OR
77202: IFFALSE 77206
// exit ;
77204: GO 77289
// tmp := [ ] ;
77206: LD_ADDR_VAR 0 5
77210: PUSH
77211: EMPTY
77212: ST_TO_ADDR
// for i in units do
77213: LD_ADDR_VAR 0 4
77217: PUSH
77218: LD_VAR 0 1
77222: PUSH
77223: FOR_IN
77224: IFFALSE 77258
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77226: LD_ADDR_VAR 0 5
77230: PUSH
77231: LD_VAR 0 5
77235: PPUSH
77236: LD_VAR 0 4
77240: PPUSH
77241: LD_VAR 0 2
77245: PPUSH
77246: CALL_OW 259
77250: PPUSH
77251: CALL 78650 0 2
77255: ST_TO_ADDR
77256: GO 77223
77258: POP
77259: POP
// if not tmp then
77260: LD_VAR 0 5
77264: NOT
77265: IFFALSE 77269
// exit ;
77267: GO 77289
// result := SortListByListDesc ( units , tmp ) ;
77269: LD_ADDR_VAR 0 3
77273: PUSH
77274: LD_VAR 0 1
77278: PPUSH
77279: LD_VAR 0 5
77283: PPUSH
77284: CALL_OW 77
77288: ST_TO_ADDR
// end ;
77289: LD_VAR 0 3
77293: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77294: LD_INT 0
77296: PPUSH
77297: PPUSH
77298: PPUSH
// result := false ;
77299: LD_ADDR_VAR 0 3
77303: PUSH
77304: LD_INT 0
77306: ST_TO_ADDR
// if not building then
77307: LD_VAR 0 2
77311: NOT
77312: IFFALSE 77316
// exit ;
77314: GO 77454
// x := GetX ( building ) ;
77316: LD_ADDR_VAR 0 4
77320: PUSH
77321: LD_VAR 0 2
77325: PPUSH
77326: CALL_OW 250
77330: ST_TO_ADDR
// y := GetY ( building ) ;
77331: LD_ADDR_VAR 0 5
77335: PUSH
77336: LD_VAR 0 2
77340: PPUSH
77341: CALL_OW 251
77345: ST_TO_ADDR
// if not x or not y then
77346: LD_VAR 0 4
77350: NOT
77351: PUSH
77352: LD_VAR 0 5
77356: NOT
77357: OR
77358: IFFALSE 77362
// exit ;
77360: GO 77454
// if GetTaskList ( unit ) then
77362: LD_VAR 0 1
77366: PPUSH
77367: CALL_OW 437
77371: IFFALSE 77454
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77373: LD_STRING e
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: CALL_OW 437
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PUSH
77390: LD_INT 1
77392: ARRAY
77393: EQUAL
77394: PUSH
77395: LD_VAR 0 4
77399: PUSH
77400: LD_VAR 0 1
77404: PPUSH
77405: CALL_OW 437
77409: PUSH
77410: LD_INT 1
77412: ARRAY
77413: PUSH
77414: LD_INT 2
77416: ARRAY
77417: EQUAL
77418: AND
77419: PUSH
77420: LD_VAR 0 5
77424: PUSH
77425: LD_VAR 0 1
77429: PPUSH
77430: CALL_OW 437
77434: PUSH
77435: LD_INT 1
77437: ARRAY
77438: PUSH
77439: LD_INT 3
77441: ARRAY
77442: EQUAL
77443: AND
77444: IFFALSE 77454
// result := true end ;
77446: LD_ADDR_VAR 0 3
77450: PUSH
77451: LD_INT 1
77453: ST_TO_ADDR
// end ;
77454: LD_VAR 0 3
77458: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77459: LD_INT 0
77461: PPUSH
// result := false ;
77462: LD_ADDR_VAR 0 4
77466: PUSH
77467: LD_INT 0
77469: ST_TO_ADDR
// if GetTaskList ( unit ) then
77470: LD_VAR 0 1
77474: PPUSH
77475: CALL_OW 437
77479: IFFALSE 77562
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77481: LD_STRING M
77483: PUSH
77484: LD_VAR 0 1
77488: PPUSH
77489: CALL_OW 437
77493: PUSH
77494: LD_INT 1
77496: ARRAY
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: EQUAL
77502: PUSH
77503: LD_VAR 0 2
77507: PUSH
77508: LD_VAR 0 1
77512: PPUSH
77513: CALL_OW 437
77517: PUSH
77518: LD_INT 1
77520: ARRAY
77521: PUSH
77522: LD_INT 2
77524: ARRAY
77525: EQUAL
77526: AND
77527: PUSH
77528: LD_VAR 0 3
77532: PUSH
77533: LD_VAR 0 1
77537: PPUSH
77538: CALL_OW 437
77542: PUSH
77543: LD_INT 1
77545: ARRAY
77546: PUSH
77547: LD_INT 3
77549: ARRAY
77550: EQUAL
77551: AND
77552: IFFALSE 77562
// result := true ;
77554: LD_ADDR_VAR 0 4
77558: PUSH
77559: LD_INT 1
77561: ST_TO_ADDR
// end ; end ;
77562: LD_VAR 0 4
77566: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77567: LD_INT 0
77569: PPUSH
77570: PPUSH
77571: PPUSH
77572: PPUSH
// if not unit or not area then
77573: LD_VAR 0 1
77577: NOT
77578: PUSH
77579: LD_VAR 0 2
77583: NOT
77584: OR
77585: IFFALSE 77589
// exit ;
77587: GO 77753
// tmp := AreaToList ( area , i ) ;
77589: LD_ADDR_VAR 0 6
77593: PUSH
77594: LD_VAR 0 2
77598: PPUSH
77599: LD_VAR 0 5
77603: PPUSH
77604: CALL_OW 517
77608: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77609: LD_ADDR_VAR 0 5
77613: PUSH
77614: DOUBLE
77615: LD_INT 1
77617: DEC
77618: ST_TO_ADDR
77619: LD_VAR 0 6
77623: PUSH
77624: LD_INT 1
77626: ARRAY
77627: PUSH
77628: FOR_TO
77629: IFFALSE 77751
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77631: LD_ADDR_VAR 0 7
77635: PUSH
77636: LD_VAR 0 6
77640: PUSH
77641: LD_INT 1
77643: ARRAY
77644: PUSH
77645: LD_VAR 0 5
77649: ARRAY
77650: PUSH
77651: LD_VAR 0 6
77655: PUSH
77656: LD_INT 2
77658: ARRAY
77659: PUSH
77660: LD_VAR 0 5
77664: ARRAY
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77670: LD_VAR 0 7
77674: PUSH
77675: LD_INT 1
77677: ARRAY
77678: PPUSH
77679: LD_VAR 0 7
77683: PUSH
77684: LD_INT 2
77686: ARRAY
77687: PPUSH
77688: CALL_OW 428
77692: PUSH
77693: LD_INT 0
77695: EQUAL
77696: IFFALSE 77749
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77698: LD_VAR 0 1
77702: PPUSH
77703: LD_VAR 0 7
77707: PUSH
77708: LD_INT 1
77710: ARRAY
77711: PPUSH
77712: LD_VAR 0 7
77716: PUSH
77717: LD_INT 2
77719: ARRAY
77720: PPUSH
77721: LD_VAR 0 3
77725: PPUSH
77726: CALL_OW 48
// result := IsPlaced ( unit ) ;
77730: LD_ADDR_VAR 0 4
77734: PUSH
77735: LD_VAR 0 1
77739: PPUSH
77740: CALL_OW 305
77744: ST_TO_ADDR
// exit ;
77745: POP
77746: POP
77747: GO 77753
// end ; end ;
77749: GO 77628
77751: POP
77752: POP
// end ;
77753: LD_VAR 0 4
77757: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77758: LD_INT 0
77760: PPUSH
77761: PPUSH
77762: PPUSH
// if not side or side > 8 then
77763: LD_VAR 0 1
77767: NOT
77768: PUSH
77769: LD_VAR 0 1
77773: PUSH
77774: LD_INT 8
77776: GREATER
77777: OR
77778: IFFALSE 77782
// exit ;
77780: GO 77969
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77782: LD_ADDR_VAR 0 4
77786: PUSH
77787: LD_INT 22
77789: PUSH
77790: LD_VAR 0 1
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: PUSH
77799: LD_INT 21
77801: PUSH
77802: LD_INT 3
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PPUSH
77813: CALL_OW 69
77817: ST_TO_ADDR
// if not tmp then
77818: LD_VAR 0 4
77822: NOT
77823: IFFALSE 77827
// exit ;
77825: GO 77969
// enable_addtolog := true ;
77827: LD_ADDR_OWVAR 81
77831: PUSH
77832: LD_INT 1
77834: ST_TO_ADDR
// AddToLog ( [ ) ;
77835: LD_STRING [
77837: PPUSH
77838: CALL_OW 561
// for i in tmp do
77842: LD_ADDR_VAR 0 3
77846: PUSH
77847: LD_VAR 0 4
77851: PUSH
77852: FOR_IN
77853: IFFALSE 77960
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77855: LD_STRING [
77857: PUSH
77858: LD_VAR 0 3
77862: PPUSH
77863: CALL_OW 266
77867: STR
77868: PUSH
77869: LD_STRING , 
77871: STR
77872: PUSH
77873: LD_VAR 0 3
77877: PPUSH
77878: CALL_OW 250
77882: STR
77883: PUSH
77884: LD_STRING , 
77886: STR
77887: PUSH
77888: LD_VAR 0 3
77892: PPUSH
77893: CALL_OW 251
77897: STR
77898: PUSH
77899: LD_STRING , 
77901: STR
77902: PUSH
77903: LD_VAR 0 3
77907: PPUSH
77908: CALL_OW 254
77912: STR
77913: PUSH
77914: LD_STRING , 
77916: STR
77917: PUSH
77918: LD_VAR 0 3
77922: PPUSH
77923: LD_INT 1
77925: PPUSH
77926: CALL_OW 268
77930: STR
77931: PUSH
77932: LD_STRING , 
77934: STR
77935: PUSH
77936: LD_VAR 0 3
77940: PPUSH
77941: LD_INT 2
77943: PPUSH
77944: CALL_OW 268
77948: STR
77949: PUSH
77950: LD_STRING ],
77952: STR
77953: PPUSH
77954: CALL_OW 561
// end ;
77958: GO 77852
77960: POP
77961: POP
// AddToLog ( ]; ) ;
77962: LD_STRING ];
77964: PPUSH
77965: CALL_OW 561
// end ;
77969: LD_VAR 0 2
77973: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77974: LD_INT 0
77976: PPUSH
77977: PPUSH
77978: PPUSH
77979: PPUSH
77980: PPUSH
// if not area or not rate or not max then
77981: LD_VAR 0 1
77985: NOT
77986: PUSH
77987: LD_VAR 0 2
77991: NOT
77992: OR
77993: PUSH
77994: LD_VAR 0 4
77998: NOT
77999: OR
78000: IFFALSE 78004
// exit ;
78002: GO 78193
// while 1 do
78004: LD_INT 1
78006: IFFALSE 78193
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78008: LD_ADDR_VAR 0 9
78012: PUSH
78013: LD_VAR 0 1
78017: PPUSH
78018: LD_INT 1
78020: PPUSH
78021: CALL_OW 287
78025: PUSH
78026: LD_INT 10
78028: MUL
78029: ST_TO_ADDR
// r := rate / 10 ;
78030: LD_ADDR_VAR 0 7
78034: PUSH
78035: LD_VAR 0 2
78039: PUSH
78040: LD_INT 10
78042: DIVREAL
78043: ST_TO_ADDR
// time := 1 1$00 ;
78044: LD_ADDR_VAR 0 8
78048: PUSH
78049: LD_INT 2100
78051: ST_TO_ADDR
// if amount < min then
78052: LD_VAR 0 9
78056: PUSH
78057: LD_VAR 0 3
78061: LESS
78062: IFFALSE 78080
// r := r * 2 else
78064: LD_ADDR_VAR 0 7
78068: PUSH
78069: LD_VAR 0 7
78073: PUSH
78074: LD_INT 2
78076: MUL
78077: ST_TO_ADDR
78078: GO 78106
// if amount > max then
78080: LD_VAR 0 9
78084: PUSH
78085: LD_VAR 0 4
78089: GREATER
78090: IFFALSE 78106
// r := r / 2 ;
78092: LD_ADDR_VAR 0 7
78096: PUSH
78097: LD_VAR 0 7
78101: PUSH
78102: LD_INT 2
78104: DIVREAL
78105: ST_TO_ADDR
// time := time / r ;
78106: LD_ADDR_VAR 0 8
78110: PUSH
78111: LD_VAR 0 8
78115: PUSH
78116: LD_VAR 0 7
78120: DIVREAL
78121: ST_TO_ADDR
// if time < 0 then
78122: LD_VAR 0 8
78126: PUSH
78127: LD_INT 0
78129: LESS
78130: IFFALSE 78147
// time := time * - 1 ;
78132: LD_ADDR_VAR 0 8
78136: PUSH
78137: LD_VAR 0 8
78141: PUSH
78142: LD_INT 1
78144: NEG
78145: MUL
78146: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78147: LD_VAR 0 8
78151: PUSH
78152: LD_INT 35
78154: PPUSH
78155: LD_INT 875
78157: PPUSH
78158: CALL_OW 12
78162: PLUS
78163: PPUSH
78164: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78168: LD_INT 1
78170: PPUSH
78171: LD_INT 5
78173: PPUSH
78174: CALL_OW 12
78178: PPUSH
78179: LD_VAR 0 1
78183: PPUSH
78184: LD_INT 1
78186: PPUSH
78187: CALL_OW 55
// end ;
78191: GO 78004
// end ;
78193: LD_VAR 0 5
78197: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78198: LD_INT 0
78200: PPUSH
78201: PPUSH
78202: PPUSH
78203: PPUSH
78204: PPUSH
78205: PPUSH
78206: PPUSH
78207: PPUSH
// if not turrets or not factories then
78208: LD_VAR 0 1
78212: NOT
78213: PUSH
78214: LD_VAR 0 2
78218: NOT
78219: OR
78220: IFFALSE 78224
// exit ;
78222: GO 78531
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78224: LD_ADDR_VAR 0 10
78228: PUSH
78229: LD_INT 5
78231: PUSH
78232: LD_INT 6
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: LD_INT 2
78241: PUSH
78242: LD_INT 4
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: LD_INT 3
78251: PUSH
78252: LD_INT 5
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: LIST
78263: PUSH
78264: LD_INT 24
78266: PUSH
78267: LD_INT 25
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PUSH
78274: LD_INT 23
78276: PUSH
78277: LD_INT 27
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 42
78290: PUSH
78291: LD_INT 43
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 44
78300: PUSH
78301: LD_INT 46
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 45
78310: PUSH
78311: LD_INT 47
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: LIST
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: LIST
78327: ST_TO_ADDR
// result := [ ] ;
78328: LD_ADDR_VAR 0 3
78332: PUSH
78333: EMPTY
78334: ST_TO_ADDR
// for i in turrets do
78335: LD_ADDR_VAR 0 4
78339: PUSH
78340: LD_VAR 0 1
78344: PUSH
78345: FOR_IN
78346: IFFALSE 78529
// begin nat := GetNation ( i ) ;
78348: LD_ADDR_VAR 0 7
78352: PUSH
78353: LD_VAR 0 4
78357: PPUSH
78358: CALL_OW 248
78362: ST_TO_ADDR
// weapon := 0 ;
78363: LD_ADDR_VAR 0 8
78367: PUSH
78368: LD_INT 0
78370: ST_TO_ADDR
// if not nat then
78371: LD_VAR 0 7
78375: NOT
78376: IFFALSE 78380
// continue ;
78378: GO 78345
// for j in list [ nat ] do
78380: LD_ADDR_VAR 0 5
78384: PUSH
78385: LD_VAR 0 10
78389: PUSH
78390: LD_VAR 0 7
78394: ARRAY
78395: PUSH
78396: FOR_IN
78397: IFFALSE 78438
// if GetBWeapon ( i ) = j [ 1 ] then
78399: LD_VAR 0 4
78403: PPUSH
78404: CALL_OW 269
78408: PUSH
78409: LD_VAR 0 5
78413: PUSH
78414: LD_INT 1
78416: ARRAY
78417: EQUAL
78418: IFFALSE 78436
// begin weapon := j [ 2 ] ;
78420: LD_ADDR_VAR 0 8
78424: PUSH
78425: LD_VAR 0 5
78429: PUSH
78430: LD_INT 2
78432: ARRAY
78433: ST_TO_ADDR
// break ;
78434: GO 78438
// end ;
78436: GO 78396
78438: POP
78439: POP
// if not weapon then
78440: LD_VAR 0 8
78444: NOT
78445: IFFALSE 78449
// continue ;
78447: GO 78345
// for k in factories do
78449: LD_ADDR_VAR 0 6
78453: PUSH
78454: LD_VAR 0 2
78458: PUSH
78459: FOR_IN
78460: IFFALSE 78525
// begin weapons := AvailableWeaponList ( k ) ;
78462: LD_ADDR_VAR 0 9
78466: PUSH
78467: LD_VAR 0 6
78471: PPUSH
78472: CALL_OW 478
78476: ST_TO_ADDR
// if not weapons then
78477: LD_VAR 0 9
78481: NOT
78482: IFFALSE 78486
// continue ;
78484: GO 78459
// if weapon in weapons then
78486: LD_VAR 0 8
78490: PUSH
78491: LD_VAR 0 9
78495: IN
78496: IFFALSE 78523
// begin result := [ i , weapon ] ;
78498: LD_ADDR_VAR 0 3
78502: PUSH
78503: LD_VAR 0 4
78507: PUSH
78508: LD_VAR 0 8
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: ST_TO_ADDR
// exit ;
78517: POP
78518: POP
78519: POP
78520: POP
78521: GO 78531
// end ; end ;
78523: GO 78459
78525: POP
78526: POP
// end ;
78527: GO 78345
78529: POP
78530: POP
// end ;
78531: LD_VAR 0 3
78535: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78536: LD_INT 0
78538: PPUSH
// if not side or side > 8 then
78539: LD_VAR 0 3
78543: NOT
78544: PUSH
78545: LD_VAR 0 3
78549: PUSH
78550: LD_INT 8
78552: GREATER
78553: OR
78554: IFFALSE 78558
// exit ;
78556: GO 78617
// if not range then
78558: LD_VAR 0 4
78562: NOT
78563: IFFALSE 78574
// range := - 12 ;
78565: LD_ADDR_VAR 0 4
78569: PUSH
78570: LD_INT 12
78572: NEG
78573: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78574: LD_VAR 0 1
78578: PPUSH
78579: LD_VAR 0 2
78583: PPUSH
78584: LD_VAR 0 3
78588: PPUSH
78589: LD_VAR 0 4
78593: PPUSH
78594: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78598: LD_VAR 0 1
78602: PPUSH
78603: LD_VAR 0 2
78607: PPUSH
78608: LD_VAR 0 3
78612: PPUSH
78613: CALL_OW 331
// end ;
78617: LD_VAR 0 5
78621: RET
// export function Video ( mode ) ; begin
78622: LD_INT 0
78624: PPUSH
// ingame_video = mode ;
78625: LD_ADDR_OWVAR 52
78629: PUSH
78630: LD_VAR 0 1
78634: ST_TO_ADDR
// interface_hidden = mode ;
78635: LD_ADDR_OWVAR 54
78639: PUSH
78640: LD_VAR 0 1
78644: ST_TO_ADDR
// end ;
78645: LD_VAR 0 2
78649: RET
// export function Join ( array , element ) ; begin
78650: LD_INT 0
78652: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78653: LD_ADDR_VAR 0 3
78657: PUSH
78658: LD_VAR 0 1
78662: PPUSH
78663: LD_VAR 0 1
78667: PUSH
78668: LD_INT 1
78670: PLUS
78671: PPUSH
78672: LD_VAR 0 2
78676: PPUSH
78677: CALL_OW 1
78681: ST_TO_ADDR
// end ;
78682: LD_VAR 0 3
78686: RET
// export function JoinUnion ( array , element ) ; begin
78687: LD_INT 0
78689: PPUSH
// result := array union element ;
78690: LD_ADDR_VAR 0 3
78694: PUSH
78695: LD_VAR 0 1
78699: PUSH
78700: LD_VAR 0 2
78704: UNION
78705: ST_TO_ADDR
// end ;
78706: LD_VAR 0 3
78710: RET
// export function GetBehemoths ( side ) ; begin
78711: LD_INT 0
78713: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78714: LD_ADDR_VAR 0 2
78718: PUSH
78719: LD_INT 22
78721: PUSH
78722: LD_VAR 0 1
78726: PUSH
78727: EMPTY
78728: LIST
78729: LIST
78730: PUSH
78731: LD_INT 31
78733: PUSH
78734: LD_INT 25
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: EMPTY
78742: LIST
78743: LIST
78744: PPUSH
78745: CALL_OW 69
78749: ST_TO_ADDR
// end ;
78750: LD_VAR 0 2
78754: RET
// export function Shuffle ( array ) ; var i , index ; begin
78755: LD_INT 0
78757: PPUSH
78758: PPUSH
78759: PPUSH
// result := [ ] ;
78760: LD_ADDR_VAR 0 2
78764: PUSH
78765: EMPTY
78766: ST_TO_ADDR
// if not array then
78767: LD_VAR 0 1
78771: NOT
78772: IFFALSE 78776
// exit ;
78774: GO 78875
// Randomize ;
78776: CALL_OW 10
// for i = array downto 1 do
78780: LD_ADDR_VAR 0 3
78784: PUSH
78785: DOUBLE
78786: LD_VAR 0 1
78790: INC
78791: ST_TO_ADDR
78792: LD_INT 1
78794: PUSH
78795: FOR_DOWNTO
78796: IFFALSE 78873
// begin index := rand ( 1 , array ) ;
78798: LD_ADDR_VAR 0 4
78802: PUSH
78803: LD_INT 1
78805: PPUSH
78806: LD_VAR 0 1
78810: PPUSH
78811: CALL_OW 12
78815: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78816: LD_ADDR_VAR 0 2
78820: PUSH
78821: LD_VAR 0 2
78825: PPUSH
78826: LD_VAR 0 2
78830: PUSH
78831: LD_INT 1
78833: PLUS
78834: PPUSH
78835: LD_VAR 0 1
78839: PUSH
78840: LD_VAR 0 4
78844: ARRAY
78845: PPUSH
78846: CALL_OW 2
78850: ST_TO_ADDR
// array := Delete ( array , index ) ;
78851: LD_ADDR_VAR 0 1
78855: PUSH
78856: LD_VAR 0 1
78860: PPUSH
78861: LD_VAR 0 4
78865: PPUSH
78866: CALL_OW 3
78870: ST_TO_ADDR
// end ;
78871: GO 78795
78873: POP
78874: POP
// end ;
78875: LD_VAR 0 2
78879: RET
// export function GetBaseMaterials ( base ) ; begin
78880: LD_INT 0
78882: PPUSH
// result := [ 0 , 0 , 0 ] ;
78883: LD_ADDR_VAR 0 2
78887: PUSH
78888: LD_INT 0
78890: PUSH
78891: LD_INT 0
78893: PUSH
78894: LD_INT 0
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: LIST
78901: ST_TO_ADDR
// if not base then
78902: LD_VAR 0 1
78906: NOT
78907: IFFALSE 78911
// exit ;
78909: GO 78960
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78911: LD_ADDR_VAR 0 2
78915: PUSH
78916: LD_VAR 0 1
78920: PPUSH
78921: LD_INT 1
78923: PPUSH
78924: CALL_OW 275
78928: PUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_INT 2
78936: PPUSH
78937: CALL_OW 275
78941: PUSH
78942: LD_VAR 0 1
78946: PPUSH
78947: LD_INT 3
78949: PPUSH
78950: CALL_OW 275
78954: PUSH
78955: EMPTY
78956: LIST
78957: LIST
78958: LIST
78959: ST_TO_ADDR
// end ;
78960: LD_VAR 0 2
78964: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78965: LD_INT 0
78967: PPUSH
78968: PPUSH
// result := array ;
78969: LD_ADDR_VAR 0 3
78973: PUSH
78974: LD_VAR 0 1
78978: ST_TO_ADDR
// if size >= result then
78979: LD_VAR 0 2
78983: PUSH
78984: LD_VAR 0 3
78988: GREATEREQUAL
78989: IFFALSE 78993
// exit ;
78991: GO 79043
// if size then
78993: LD_VAR 0 2
78997: IFFALSE 79043
// for i := array downto size do
78999: LD_ADDR_VAR 0 4
79003: PUSH
79004: DOUBLE
79005: LD_VAR 0 1
79009: INC
79010: ST_TO_ADDR
79011: LD_VAR 0 2
79015: PUSH
79016: FOR_DOWNTO
79017: IFFALSE 79041
// result := Delete ( result , result ) ;
79019: LD_ADDR_VAR 0 3
79023: PUSH
79024: LD_VAR 0 3
79028: PPUSH
79029: LD_VAR 0 3
79033: PPUSH
79034: CALL_OW 3
79038: ST_TO_ADDR
79039: GO 79016
79041: POP
79042: POP
// end ;
79043: LD_VAR 0 3
79047: RET
// export function ComExit ( unit ) ; var tmp ; begin
79048: LD_INT 0
79050: PPUSH
79051: PPUSH
// if not IsInUnit ( unit ) then
79052: LD_VAR 0 1
79056: PPUSH
79057: CALL_OW 310
79061: NOT
79062: IFFALSE 79066
// exit ;
79064: GO 79126
// tmp := IsInUnit ( unit ) ;
79066: LD_ADDR_VAR 0 3
79070: PUSH
79071: LD_VAR 0 1
79075: PPUSH
79076: CALL_OW 310
79080: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79081: LD_VAR 0 3
79085: PPUSH
79086: CALL_OW 247
79090: PUSH
79091: LD_INT 2
79093: EQUAL
79094: IFFALSE 79107
// ComExitVehicle ( unit ) else
79096: LD_VAR 0 1
79100: PPUSH
79101: CALL_OW 121
79105: GO 79116
// ComExitBuilding ( unit ) ;
79107: LD_VAR 0 1
79111: PPUSH
79112: CALL_OW 122
// result := tmp ;
79116: LD_ADDR_VAR 0 2
79120: PUSH
79121: LD_VAR 0 3
79125: ST_TO_ADDR
// end ;
79126: LD_VAR 0 2
79130: RET
// export function ComExitAll ( units ) ; var i ; begin
79131: LD_INT 0
79133: PPUSH
79134: PPUSH
// if not units then
79135: LD_VAR 0 1
79139: NOT
79140: IFFALSE 79144
// exit ;
79142: GO 79170
// for i in units do
79144: LD_ADDR_VAR 0 3
79148: PUSH
79149: LD_VAR 0 1
79153: PUSH
79154: FOR_IN
79155: IFFALSE 79168
// ComExit ( i ) ;
79157: LD_VAR 0 3
79161: PPUSH
79162: CALL 79048 0 1
79166: GO 79154
79168: POP
79169: POP
// end ;
79170: LD_VAR 0 2
79174: RET
// export function ResetHc ; begin
79175: LD_INT 0
79177: PPUSH
// InitHc ;
79178: CALL_OW 19
// hc_importance := 0 ;
79182: LD_ADDR_OWVAR 32
79186: PUSH
79187: LD_INT 0
79189: ST_TO_ADDR
// end ;
79190: LD_VAR 0 1
79194: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79195: LD_INT 0
79197: PPUSH
79198: PPUSH
79199: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79200: LD_ADDR_VAR 0 6
79204: PUSH
79205: LD_VAR 0 1
79209: PUSH
79210: LD_VAR 0 3
79214: PLUS
79215: PUSH
79216: LD_INT 2
79218: DIV
79219: ST_TO_ADDR
// if _x < 0 then
79220: LD_VAR 0 6
79224: PUSH
79225: LD_INT 0
79227: LESS
79228: IFFALSE 79245
// _x := _x * - 1 ;
79230: LD_ADDR_VAR 0 6
79234: PUSH
79235: LD_VAR 0 6
79239: PUSH
79240: LD_INT 1
79242: NEG
79243: MUL
79244: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79245: LD_ADDR_VAR 0 7
79249: PUSH
79250: LD_VAR 0 2
79254: PUSH
79255: LD_VAR 0 4
79259: PLUS
79260: PUSH
79261: LD_INT 2
79263: DIV
79264: ST_TO_ADDR
// if _y < 0 then
79265: LD_VAR 0 7
79269: PUSH
79270: LD_INT 0
79272: LESS
79273: IFFALSE 79290
// _y := _y * - 1 ;
79275: LD_ADDR_VAR 0 7
79279: PUSH
79280: LD_VAR 0 7
79284: PUSH
79285: LD_INT 1
79287: NEG
79288: MUL
79289: ST_TO_ADDR
// result := [ _x , _y ] ;
79290: LD_ADDR_VAR 0 5
79294: PUSH
79295: LD_VAR 0 6
79299: PUSH
79300: LD_VAR 0 7
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: ST_TO_ADDR
// end ;
79309: LD_VAR 0 5
79313: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79314: LD_INT 0
79316: PPUSH
79317: PPUSH
79318: PPUSH
79319: PPUSH
// task := GetTaskList ( unit ) ;
79320: LD_ADDR_VAR 0 7
79324: PUSH
79325: LD_VAR 0 1
79329: PPUSH
79330: CALL_OW 437
79334: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79335: LD_VAR 0 7
79339: NOT
79340: PUSH
79341: LD_VAR 0 1
79345: PPUSH
79346: LD_VAR 0 2
79350: PPUSH
79351: CALL_OW 308
79355: NOT
79356: AND
79357: IFFALSE 79361
// exit ;
79359: GO 79479
// if IsInArea ( unit , area ) then
79361: LD_VAR 0 1
79365: PPUSH
79366: LD_VAR 0 2
79370: PPUSH
79371: CALL_OW 308
79375: IFFALSE 79393
// begin ComMoveToArea ( unit , goAway ) ;
79377: LD_VAR 0 1
79381: PPUSH
79382: LD_VAR 0 3
79386: PPUSH
79387: CALL_OW 113
// exit ;
79391: GO 79479
// end ; if task [ 1 ] [ 1 ] <> M then
79393: LD_VAR 0 7
79397: PUSH
79398: LD_INT 1
79400: ARRAY
79401: PUSH
79402: LD_INT 1
79404: ARRAY
79405: PUSH
79406: LD_STRING M
79408: NONEQUAL
79409: IFFALSE 79413
// exit ;
79411: GO 79479
// x := task [ 1 ] [ 2 ] ;
79413: LD_ADDR_VAR 0 5
79417: PUSH
79418: LD_VAR 0 7
79422: PUSH
79423: LD_INT 1
79425: ARRAY
79426: PUSH
79427: LD_INT 2
79429: ARRAY
79430: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79431: LD_ADDR_VAR 0 6
79435: PUSH
79436: LD_VAR 0 7
79440: PUSH
79441: LD_INT 1
79443: ARRAY
79444: PUSH
79445: LD_INT 3
79447: ARRAY
79448: ST_TO_ADDR
// if InArea ( x , y , area ) then
79449: LD_VAR 0 5
79453: PPUSH
79454: LD_VAR 0 6
79458: PPUSH
79459: LD_VAR 0 2
79463: PPUSH
79464: CALL_OW 309
79468: IFFALSE 79479
// ComStop ( unit ) ;
79470: LD_VAR 0 1
79474: PPUSH
79475: CALL_OW 141
// end ;
79479: LD_VAR 0 4
79483: RET
// export function Abs ( value ) ; begin
79484: LD_INT 0
79486: PPUSH
// result := value ;
79487: LD_ADDR_VAR 0 2
79491: PUSH
79492: LD_VAR 0 1
79496: ST_TO_ADDR
// if value < 0 then
79497: LD_VAR 0 1
79501: PUSH
79502: LD_INT 0
79504: LESS
79505: IFFALSE 79522
// result := value * - 1 ;
79507: LD_ADDR_VAR 0 2
79511: PUSH
79512: LD_VAR 0 1
79516: PUSH
79517: LD_INT 1
79519: NEG
79520: MUL
79521: ST_TO_ADDR
// end ;
79522: LD_VAR 0 2
79526: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79527: LD_INT 0
79529: PPUSH
79530: PPUSH
79531: PPUSH
79532: PPUSH
79533: PPUSH
79534: PPUSH
79535: PPUSH
79536: PPUSH
// if not unit or not building then
79537: LD_VAR 0 1
79541: NOT
79542: PUSH
79543: LD_VAR 0 2
79547: NOT
79548: OR
79549: IFFALSE 79553
// exit ;
79551: GO 79779
// x := GetX ( building ) ;
79553: LD_ADDR_VAR 0 4
79557: PUSH
79558: LD_VAR 0 2
79562: PPUSH
79563: CALL_OW 250
79567: ST_TO_ADDR
// y := GetY ( building ) ;
79568: LD_ADDR_VAR 0 6
79572: PUSH
79573: LD_VAR 0 2
79577: PPUSH
79578: CALL_OW 251
79582: ST_TO_ADDR
// d := GetDir ( building ) ;
79583: LD_ADDR_VAR 0 8
79587: PUSH
79588: LD_VAR 0 2
79592: PPUSH
79593: CALL_OW 254
79597: ST_TO_ADDR
// r := 4 ;
79598: LD_ADDR_VAR 0 9
79602: PUSH
79603: LD_INT 4
79605: ST_TO_ADDR
// for i := 1 to 5 do
79606: LD_ADDR_VAR 0 10
79610: PUSH
79611: DOUBLE
79612: LD_INT 1
79614: DEC
79615: ST_TO_ADDR
79616: LD_INT 5
79618: PUSH
79619: FOR_TO
79620: IFFALSE 79777
// begin _x := ShiftX ( x , d , r + i ) ;
79622: LD_ADDR_VAR 0 5
79626: PUSH
79627: LD_VAR 0 4
79631: PPUSH
79632: LD_VAR 0 8
79636: PPUSH
79637: LD_VAR 0 9
79641: PUSH
79642: LD_VAR 0 10
79646: PLUS
79647: PPUSH
79648: CALL_OW 272
79652: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79653: LD_ADDR_VAR 0 7
79657: PUSH
79658: LD_VAR 0 6
79662: PPUSH
79663: LD_VAR 0 8
79667: PPUSH
79668: LD_VAR 0 9
79672: PUSH
79673: LD_VAR 0 10
79677: PLUS
79678: PPUSH
79679: CALL_OW 273
79683: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79684: LD_VAR 0 5
79688: PPUSH
79689: LD_VAR 0 7
79693: PPUSH
79694: CALL_OW 488
79698: PUSH
79699: LD_VAR 0 5
79703: PPUSH
79704: LD_VAR 0 7
79708: PPUSH
79709: CALL_OW 428
79713: PPUSH
79714: CALL_OW 247
79718: PUSH
79719: LD_INT 3
79721: PUSH
79722: LD_INT 2
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: IN
79729: NOT
79730: AND
79731: IFFALSE 79775
// begin ComMoveXY ( unit , _x , _y ) ;
79733: LD_VAR 0 1
79737: PPUSH
79738: LD_VAR 0 5
79742: PPUSH
79743: LD_VAR 0 7
79747: PPUSH
79748: CALL_OW 111
// result := [ _x , _y ] ;
79752: LD_ADDR_VAR 0 3
79756: PUSH
79757: LD_VAR 0 5
79761: PUSH
79762: LD_VAR 0 7
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: ST_TO_ADDR
// exit ;
79771: POP
79772: POP
79773: GO 79779
// end ; end ;
79775: GO 79619
79777: POP
79778: POP
// end ;
79779: LD_VAR 0 3
79783: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79784: LD_INT 0
79786: PPUSH
79787: PPUSH
79788: PPUSH
// result := 0 ;
79789: LD_ADDR_VAR 0 3
79793: PUSH
79794: LD_INT 0
79796: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79797: LD_VAR 0 1
79801: PUSH
79802: LD_INT 0
79804: LESS
79805: PUSH
79806: LD_VAR 0 1
79810: PUSH
79811: LD_INT 8
79813: GREATER
79814: OR
79815: PUSH
79816: LD_VAR 0 2
79820: PUSH
79821: LD_INT 0
79823: LESS
79824: OR
79825: PUSH
79826: LD_VAR 0 2
79830: PUSH
79831: LD_INT 8
79833: GREATER
79834: OR
79835: IFFALSE 79839
// exit ;
79837: GO 79914
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79839: LD_ADDR_VAR 0 4
79843: PUSH
79844: LD_INT 22
79846: PUSH
79847: LD_VAR 0 2
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PPUSH
79856: CALL_OW 69
79860: PUSH
79861: FOR_IN
79862: IFFALSE 79912
// begin un := UnitShoot ( i ) ;
79864: LD_ADDR_VAR 0 5
79868: PUSH
79869: LD_VAR 0 4
79873: PPUSH
79874: CALL_OW 504
79878: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79879: LD_VAR 0 5
79883: PPUSH
79884: CALL_OW 255
79888: PUSH
79889: LD_VAR 0 1
79893: EQUAL
79894: IFFALSE 79910
// begin result := un ;
79896: LD_ADDR_VAR 0 3
79900: PUSH
79901: LD_VAR 0 5
79905: ST_TO_ADDR
// exit ;
79906: POP
79907: POP
79908: GO 79914
// end ; end ;
79910: GO 79861
79912: POP
79913: POP
// end ;
79914: LD_VAR 0 3
79918: RET
// export function GetCargoBay ( units ) ; begin
79919: LD_INT 0
79921: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79922: LD_ADDR_VAR 0 2
79926: PUSH
79927: LD_VAR 0 1
79931: PPUSH
79932: LD_INT 2
79934: PUSH
79935: LD_INT 34
79937: PUSH
79938: LD_INT 12
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 34
79947: PUSH
79948: LD_INT 51
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 34
79957: PUSH
79958: LD_INT 32
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 34
79967: PUSH
79968: LD_INT 89
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: LIST
79979: LIST
79980: LIST
79981: PPUSH
79982: CALL_OW 72
79986: ST_TO_ADDR
// end ;
79987: LD_VAR 0 2
79991: RET
// export function Negate ( value ) ; begin
79992: LD_INT 0
79994: PPUSH
// result := not value ;
79995: LD_ADDR_VAR 0 2
79999: PUSH
80000: LD_VAR 0 1
80004: NOT
80005: ST_TO_ADDR
// end ;
80006: LD_VAR 0 2
80010: RET
// export function Inc ( value ) ; begin
80011: LD_INT 0
80013: PPUSH
// result := value + 1 ;
80014: LD_ADDR_VAR 0 2
80018: PUSH
80019: LD_VAR 0 1
80023: PUSH
80024: LD_INT 1
80026: PLUS
80027: ST_TO_ADDR
// end ;
80028: LD_VAR 0 2
80032: RET
// export function Dec ( value ) ; begin
80033: LD_INT 0
80035: PPUSH
// result := value - 1 ;
80036: LD_ADDR_VAR 0 2
80040: PUSH
80041: LD_VAR 0 1
80045: PUSH
80046: LD_INT 1
80048: MINUS
80049: ST_TO_ADDR
// end ;
80050: LD_VAR 0 2
80054: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80055: LD_INT 0
80057: PPUSH
80058: PPUSH
80059: PPUSH
80060: PPUSH
80061: PPUSH
80062: PPUSH
80063: PPUSH
80064: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80065: LD_VAR 0 1
80069: PPUSH
80070: LD_VAR 0 2
80074: PPUSH
80075: CALL_OW 488
80079: NOT
80080: PUSH
80081: LD_VAR 0 3
80085: PPUSH
80086: LD_VAR 0 4
80090: PPUSH
80091: CALL_OW 488
80095: NOT
80096: OR
80097: IFFALSE 80110
// begin result := - 1 ;
80099: LD_ADDR_VAR 0 5
80103: PUSH
80104: LD_INT 1
80106: NEG
80107: ST_TO_ADDR
// exit ;
80108: GO 80345
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80110: LD_ADDR_VAR 0 12
80114: PUSH
80115: LD_VAR 0 1
80119: PPUSH
80120: LD_VAR 0 2
80124: PPUSH
80125: LD_VAR 0 3
80129: PPUSH
80130: LD_VAR 0 4
80134: PPUSH
80135: CALL 79195 0 4
80139: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80140: LD_ADDR_VAR 0 11
80144: PUSH
80145: LD_VAR 0 1
80149: PPUSH
80150: LD_VAR 0 2
80154: PPUSH
80155: LD_VAR 0 12
80159: PUSH
80160: LD_INT 1
80162: ARRAY
80163: PPUSH
80164: LD_VAR 0 12
80168: PUSH
80169: LD_INT 2
80171: ARRAY
80172: PPUSH
80173: CALL_OW 298
80177: ST_TO_ADDR
// distance := 9999 ;
80178: LD_ADDR_VAR 0 10
80182: PUSH
80183: LD_INT 9999
80185: ST_TO_ADDR
// for i := 0 to 5 do
80186: LD_ADDR_VAR 0 6
80190: PUSH
80191: DOUBLE
80192: LD_INT 0
80194: DEC
80195: ST_TO_ADDR
80196: LD_INT 5
80198: PUSH
80199: FOR_TO
80200: IFFALSE 80343
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80202: LD_ADDR_VAR 0 7
80206: PUSH
80207: LD_VAR 0 1
80211: PPUSH
80212: LD_VAR 0 6
80216: PPUSH
80217: LD_VAR 0 11
80221: PPUSH
80222: CALL_OW 272
80226: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80227: LD_ADDR_VAR 0 8
80231: PUSH
80232: LD_VAR 0 2
80236: PPUSH
80237: LD_VAR 0 6
80241: PPUSH
80242: LD_VAR 0 11
80246: PPUSH
80247: CALL_OW 273
80251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80252: LD_VAR 0 7
80256: PPUSH
80257: LD_VAR 0 8
80261: PPUSH
80262: CALL_OW 488
80266: NOT
80267: IFFALSE 80271
// continue ;
80269: GO 80199
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80271: LD_ADDR_VAR 0 9
80275: PUSH
80276: LD_VAR 0 12
80280: PUSH
80281: LD_INT 1
80283: ARRAY
80284: PPUSH
80285: LD_VAR 0 12
80289: PUSH
80290: LD_INT 2
80292: ARRAY
80293: PPUSH
80294: LD_VAR 0 7
80298: PPUSH
80299: LD_VAR 0 8
80303: PPUSH
80304: CALL_OW 298
80308: ST_TO_ADDR
// if tmp < distance then
80309: LD_VAR 0 9
80313: PUSH
80314: LD_VAR 0 10
80318: LESS
80319: IFFALSE 80341
// begin result := i ;
80321: LD_ADDR_VAR 0 5
80325: PUSH
80326: LD_VAR 0 6
80330: ST_TO_ADDR
// distance := tmp ;
80331: LD_ADDR_VAR 0 10
80335: PUSH
80336: LD_VAR 0 9
80340: ST_TO_ADDR
// end ; end ;
80341: GO 80199
80343: POP
80344: POP
// end ;
80345: LD_VAR 0 5
80349: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80350: LD_INT 0
80352: PPUSH
80353: PPUSH
// if not driver or not IsInUnit ( driver ) then
80354: LD_VAR 0 1
80358: NOT
80359: PUSH
80360: LD_VAR 0 1
80364: PPUSH
80365: CALL_OW 310
80369: NOT
80370: OR
80371: IFFALSE 80375
// exit ;
80373: GO 80465
// vehicle := IsInUnit ( driver ) ;
80375: LD_ADDR_VAR 0 3
80379: PUSH
80380: LD_VAR 0 1
80384: PPUSH
80385: CALL_OW 310
80389: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80390: LD_VAR 0 1
80394: PPUSH
80395: LD_STRING \
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: LD_INT 0
80403: PUSH
80404: LD_INT 0
80406: PUSH
80407: LD_INT 0
80409: PUSH
80410: LD_INT 0
80412: PUSH
80413: LD_INT 0
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: PUSH
80425: LD_STRING E
80427: PUSH
80428: LD_INT 0
80430: PUSH
80431: LD_INT 0
80433: PUSH
80434: LD_VAR 0 3
80438: PUSH
80439: LD_INT 0
80441: PUSH
80442: LD_INT 0
80444: PUSH
80445: LD_INT 0
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: LIST
80454: LIST
80455: LIST
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PPUSH
80461: CALL_OW 446
// end ;
80465: LD_VAR 0 2
80469: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80470: LD_INT 0
80472: PPUSH
80473: PPUSH
// if not driver or not IsInUnit ( driver ) then
80474: LD_VAR 0 1
80478: NOT
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: CALL_OW 310
80489: NOT
80490: OR
80491: IFFALSE 80495
// exit ;
80493: GO 80585
// vehicle := IsInUnit ( driver ) ;
80495: LD_ADDR_VAR 0 3
80499: PUSH
80500: LD_VAR 0 1
80504: PPUSH
80505: CALL_OW 310
80509: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80510: LD_VAR 0 1
80514: PPUSH
80515: LD_STRING \
80517: PUSH
80518: LD_INT 0
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: LD_INT 0
80526: PUSH
80527: LD_INT 0
80529: PUSH
80530: LD_INT 0
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: LIST
80540: LIST
80541: LIST
80542: LIST
80543: LIST
80544: PUSH
80545: LD_STRING E
80547: PUSH
80548: LD_INT 0
80550: PUSH
80551: LD_INT 0
80553: PUSH
80554: LD_VAR 0 3
80558: PUSH
80559: LD_INT 0
80561: PUSH
80562: LD_INT 0
80564: PUSH
80565: LD_INT 0
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: LIST
80575: LIST
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PPUSH
80581: CALL_OW 447
// end ;
80585: LD_VAR 0 2
80589: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80590: LD_INT 0
80592: PPUSH
80593: PPUSH
80594: PPUSH
// tmp := [ ] ;
80595: LD_ADDR_VAR 0 5
80599: PUSH
80600: EMPTY
80601: ST_TO_ADDR
// for i in units do
80602: LD_ADDR_VAR 0 4
80606: PUSH
80607: LD_VAR 0 1
80611: PUSH
80612: FOR_IN
80613: IFFALSE 80651
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80615: LD_ADDR_VAR 0 5
80619: PUSH
80620: LD_VAR 0 5
80624: PPUSH
80625: LD_VAR 0 5
80629: PUSH
80630: LD_INT 1
80632: PLUS
80633: PPUSH
80634: LD_VAR 0 4
80638: PPUSH
80639: CALL_OW 256
80643: PPUSH
80644: CALL_OW 2
80648: ST_TO_ADDR
80649: GO 80612
80651: POP
80652: POP
// if not tmp then
80653: LD_VAR 0 5
80657: NOT
80658: IFFALSE 80662
// exit ;
80660: GO 80710
// if asc then
80662: LD_VAR 0 2
80666: IFFALSE 80690
// result := SortListByListAsc ( units , tmp ) else
80668: LD_ADDR_VAR 0 3
80672: PUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: LD_VAR 0 5
80682: PPUSH
80683: CALL_OW 76
80687: ST_TO_ADDR
80688: GO 80710
// result := SortListByListDesc ( units , tmp ) ;
80690: LD_ADDR_VAR 0 3
80694: PUSH
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_VAR 0 5
80704: PPUSH
80705: CALL_OW 77
80709: ST_TO_ADDR
// end ;
80710: LD_VAR 0 3
80714: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80715: LD_INT 0
80717: PPUSH
80718: PPUSH
// task := GetTaskList ( mech ) ;
80719: LD_ADDR_VAR 0 4
80723: PUSH
80724: LD_VAR 0 1
80728: PPUSH
80729: CALL_OW 437
80733: ST_TO_ADDR
// if not task then
80734: LD_VAR 0 4
80738: NOT
80739: IFFALSE 80743
// exit ;
80741: GO 80785
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80743: LD_ADDR_VAR 0 3
80747: PUSH
80748: LD_VAR 0 4
80752: PUSH
80753: LD_INT 1
80755: ARRAY
80756: PUSH
80757: LD_INT 1
80759: ARRAY
80760: PUSH
80761: LD_STRING r
80763: EQUAL
80764: PUSH
80765: LD_VAR 0 4
80769: PUSH
80770: LD_INT 1
80772: ARRAY
80773: PUSH
80774: LD_INT 4
80776: ARRAY
80777: PUSH
80778: LD_VAR 0 2
80782: EQUAL
80783: AND
80784: ST_TO_ADDR
// end ;
80785: LD_VAR 0 3
80789: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80790: LD_INT 0
80792: PPUSH
// SetDir ( unit , d ) ;
80793: LD_VAR 0 1
80797: PPUSH
80798: LD_VAR 0 4
80802: PPUSH
80803: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80807: LD_VAR 0 1
80811: PPUSH
80812: LD_VAR 0 2
80816: PPUSH
80817: LD_VAR 0 3
80821: PPUSH
80822: LD_VAR 0 5
80826: PPUSH
80827: CALL_OW 48
// end ;
80831: LD_VAR 0 6
80835: RET
// export function ToNaturalNumber ( number ) ; begin
80836: LD_INT 0
80838: PPUSH
// result := number div 1 ;
80839: LD_ADDR_VAR 0 2
80843: PUSH
80844: LD_VAR 0 1
80848: PUSH
80849: LD_INT 1
80851: DIV
80852: ST_TO_ADDR
// if number < 0 then
80853: LD_VAR 0 1
80857: PUSH
80858: LD_INT 0
80860: LESS
80861: IFFALSE 80871
// result := 0 ;
80863: LD_ADDR_VAR 0 2
80867: PUSH
80868: LD_INT 0
80870: ST_TO_ADDR
// end ;
80871: LD_VAR 0 2
80875: RET
// export function SortByClass ( units , class ) ; var un ; begin
80876: LD_INT 0
80878: PPUSH
80879: PPUSH
// if not units or not class then
80880: LD_VAR 0 1
80884: NOT
80885: PUSH
80886: LD_VAR 0 2
80890: NOT
80891: OR
80892: IFFALSE 80896
// exit ;
80894: GO 80991
// result := [ ] ;
80896: LD_ADDR_VAR 0 3
80900: PUSH
80901: EMPTY
80902: ST_TO_ADDR
// for un in units do
80903: LD_ADDR_VAR 0 4
80907: PUSH
80908: LD_VAR 0 1
80912: PUSH
80913: FOR_IN
80914: IFFALSE 80989
// if GetClass ( un ) = class then
80916: LD_VAR 0 4
80920: PPUSH
80921: CALL_OW 257
80925: PUSH
80926: LD_VAR 0 2
80930: EQUAL
80931: IFFALSE 80958
// result := Insert ( result , 1 , un ) else
80933: LD_ADDR_VAR 0 3
80937: PUSH
80938: LD_VAR 0 3
80942: PPUSH
80943: LD_INT 1
80945: PPUSH
80946: LD_VAR 0 4
80950: PPUSH
80951: CALL_OW 2
80955: ST_TO_ADDR
80956: GO 80987
// result := Replace ( result , result + 1 , un ) ;
80958: LD_ADDR_VAR 0 3
80962: PUSH
80963: LD_VAR 0 3
80967: PPUSH
80968: LD_VAR 0 3
80972: PUSH
80973: LD_INT 1
80975: PLUS
80976: PPUSH
80977: LD_VAR 0 4
80981: PPUSH
80982: CALL_OW 1
80986: ST_TO_ADDR
80987: GO 80913
80989: POP
80990: POP
// end ;
80991: LD_VAR 0 3
80995: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80996: LD_INT 0
80998: PPUSH
80999: PPUSH
81000: PPUSH
81001: PPUSH
81002: PPUSH
81003: PPUSH
81004: PPUSH
// result := [ ] ;
81005: LD_ADDR_VAR 0 4
81009: PUSH
81010: EMPTY
81011: ST_TO_ADDR
// if x - r < 0 then
81012: LD_VAR 0 1
81016: PUSH
81017: LD_VAR 0 3
81021: MINUS
81022: PUSH
81023: LD_INT 0
81025: LESS
81026: IFFALSE 81038
// min_x := 0 else
81028: LD_ADDR_VAR 0 8
81032: PUSH
81033: LD_INT 0
81035: ST_TO_ADDR
81036: GO 81054
// min_x := x - r ;
81038: LD_ADDR_VAR 0 8
81042: PUSH
81043: LD_VAR 0 1
81047: PUSH
81048: LD_VAR 0 3
81052: MINUS
81053: ST_TO_ADDR
// if y - r < 0 then
81054: LD_VAR 0 2
81058: PUSH
81059: LD_VAR 0 3
81063: MINUS
81064: PUSH
81065: LD_INT 0
81067: LESS
81068: IFFALSE 81080
// min_y := 0 else
81070: LD_ADDR_VAR 0 7
81074: PUSH
81075: LD_INT 0
81077: ST_TO_ADDR
81078: GO 81096
// min_y := y - r ;
81080: LD_ADDR_VAR 0 7
81084: PUSH
81085: LD_VAR 0 2
81089: PUSH
81090: LD_VAR 0 3
81094: MINUS
81095: ST_TO_ADDR
// max_x := x + r ;
81096: LD_ADDR_VAR 0 9
81100: PUSH
81101: LD_VAR 0 1
81105: PUSH
81106: LD_VAR 0 3
81110: PLUS
81111: ST_TO_ADDR
// max_y := y + r ;
81112: LD_ADDR_VAR 0 10
81116: PUSH
81117: LD_VAR 0 2
81121: PUSH
81122: LD_VAR 0 3
81126: PLUS
81127: ST_TO_ADDR
// for _x = min_x to max_x do
81128: LD_ADDR_VAR 0 5
81132: PUSH
81133: DOUBLE
81134: LD_VAR 0 8
81138: DEC
81139: ST_TO_ADDR
81140: LD_VAR 0 9
81144: PUSH
81145: FOR_TO
81146: IFFALSE 81247
// for _y = min_y to max_y do
81148: LD_ADDR_VAR 0 6
81152: PUSH
81153: DOUBLE
81154: LD_VAR 0 7
81158: DEC
81159: ST_TO_ADDR
81160: LD_VAR 0 10
81164: PUSH
81165: FOR_TO
81166: IFFALSE 81243
// begin if not ValidHex ( _x , _y ) then
81168: LD_VAR 0 5
81172: PPUSH
81173: LD_VAR 0 6
81177: PPUSH
81178: CALL_OW 488
81182: NOT
81183: IFFALSE 81187
// continue ;
81185: GO 81165
// if GetResourceTypeXY ( _x , _y ) then
81187: LD_VAR 0 5
81191: PPUSH
81192: LD_VAR 0 6
81196: PPUSH
81197: CALL_OW 283
81201: IFFALSE 81241
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81203: LD_ADDR_VAR 0 4
81207: PUSH
81208: LD_VAR 0 4
81212: PPUSH
81213: LD_VAR 0 4
81217: PUSH
81218: LD_INT 1
81220: PLUS
81221: PPUSH
81222: LD_VAR 0 5
81226: PUSH
81227: LD_VAR 0 6
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: PPUSH
81236: CALL_OW 1
81240: ST_TO_ADDR
// end ;
81241: GO 81165
81243: POP
81244: POP
81245: GO 81145
81247: POP
81248: POP
// end ;
81249: LD_VAR 0 4
81253: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81254: LD_INT 0
81256: PPUSH
81257: PPUSH
81258: PPUSH
81259: PPUSH
81260: PPUSH
81261: PPUSH
81262: PPUSH
81263: PPUSH
// if not units then
81264: LD_VAR 0 1
81268: NOT
81269: IFFALSE 81273
// exit ;
81271: GO 81797
// result := UnitFilter ( units , [ f_ok ] ) ;
81273: LD_ADDR_VAR 0 3
81277: PUSH
81278: LD_VAR 0 1
81282: PPUSH
81283: LD_INT 50
81285: PUSH
81286: EMPTY
81287: LIST
81288: PPUSH
81289: CALL_OW 72
81293: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81294: LD_ADDR_VAR 0 8
81298: PUSH
81299: LD_VAR 0 1
81303: PUSH
81304: LD_INT 1
81306: ARRAY
81307: PPUSH
81308: CALL_OW 255
81312: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81313: LD_ADDR_VAR 0 10
81317: PUSH
81318: LD_INT 29
81320: PUSH
81321: LD_INT 91
81323: PUSH
81324: LD_INT 49
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: LIST
81331: ST_TO_ADDR
// if not result then
81332: LD_VAR 0 3
81336: NOT
81337: IFFALSE 81341
// exit ;
81339: GO 81797
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81341: LD_ADDR_VAR 0 5
81345: PUSH
81346: LD_INT 81
81348: PUSH
81349: LD_VAR 0 8
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: PPUSH
81358: CALL_OW 69
81362: ST_TO_ADDR
// for i in result do
81363: LD_ADDR_VAR 0 4
81367: PUSH
81368: LD_VAR 0 3
81372: PUSH
81373: FOR_IN
81374: IFFALSE 81795
// begin tag := GetTag ( i ) + 1 ;
81376: LD_ADDR_VAR 0 9
81380: PUSH
81381: LD_VAR 0 4
81385: PPUSH
81386: CALL_OW 110
81390: PUSH
81391: LD_INT 1
81393: PLUS
81394: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81395: LD_ADDR_VAR 0 7
81399: PUSH
81400: LD_VAR 0 4
81404: PPUSH
81405: CALL_OW 250
81409: PPUSH
81410: LD_VAR 0 4
81414: PPUSH
81415: CALL_OW 251
81419: PPUSH
81420: LD_INT 6
81422: PPUSH
81423: CALL 80996 0 3
81427: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81428: LD_VAR 0 4
81432: PPUSH
81433: CALL_OW 247
81437: PUSH
81438: LD_INT 2
81440: EQUAL
81441: PUSH
81442: LD_VAR 0 7
81446: AND
81447: PUSH
81448: LD_VAR 0 4
81452: PPUSH
81453: CALL_OW 264
81457: PUSH
81458: LD_VAR 0 10
81462: IN
81463: NOT
81464: AND
81465: IFFALSE 81504
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81467: LD_VAR 0 4
81471: PPUSH
81472: LD_VAR 0 7
81476: PUSH
81477: LD_INT 1
81479: ARRAY
81480: PUSH
81481: LD_INT 1
81483: ARRAY
81484: PPUSH
81485: LD_VAR 0 7
81489: PUSH
81490: LD_INT 1
81492: ARRAY
81493: PUSH
81494: LD_INT 2
81496: ARRAY
81497: PPUSH
81498: CALL_OW 116
81502: GO 81793
// if path > tag then
81504: LD_VAR 0 2
81508: PUSH
81509: LD_VAR 0 9
81513: GREATER
81514: IFFALSE 81722
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81516: LD_ADDR_VAR 0 6
81520: PUSH
81521: LD_VAR 0 5
81525: PPUSH
81526: LD_INT 91
81528: PUSH
81529: LD_VAR 0 4
81533: PUSH
81534: LD_INT 8
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: LIST
81541: PPUSH
81542: CALL_OW 72
81546: ST_TO_ADDR
// if nearEnemy then
81547: LD_VAR 0 6
81551: IFFALSE 81620
// begin if GetWeapon ( i ) = ru_time_lapser then
81553: LD_VAR 0 4
81557: PPUSH
81558: CALL_OW 264
81562: PUSH
81563: LD_INT 49
81565: EQUAL
81566: IFFALSE 81594
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81568: LD_VAR 0 4
81572: PPUSH
81573: LD_VAR 0 6
81577: PPUSH
81578: LD_VAR 0 4
81582: PPUSH
81583: CALL_OW 74
81587: PPUSH
81588: CALL_OW 112
81592: GO 81618
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81594: LD_VAR 0 4
81598: PPUSH
81599: LD_VAR 0 6
81603: PPUSH
81604: LD_VAR 0 4
81608: PPUSH
81609: CALL_OW 74
81613: PPUSH
81614: CALL_OW 115
// end else
81618: GO 81720
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81620: LD_VAR 0 4
81624: PPUSH
81625: LD_VAR 0 2
81629: PUSH
81630: LD_VAR 0 9
81634: ARRAY
81635: PUSH
81636: LD_INT 1
81638: ARRAY
81639: PPUSH
81640: LD_VAR 0 2
81644: PUSH
81645: LD_VAR 0 9
81649: ARRAY
81650: PUSH
81651: LD_INT 2
81653: ARRAY
81654: PPUSH
81655: CALL_OW 297
81659: PUSH
81660: LD_INT 6
81662: GREATER
81663: IFFALSE 81706
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81665: LD_VAR 0 4
81669: PPUSH
81670: LD_VAR 0 2
81674: PUSH
81675: LD_VAR 0 9
81679: ARRAY
81680: PUSH
81681: LD_INT 1
81683: ARRAY
81684: PPUSH
81685: LD_VAR 0 2
81689: PUSH
81690: LD_VAR 0 9
81694: ARRAY
81695: PUSH
81696: LD_INT 2
81698: ARRAY
81699: PPUSH
81700: CALL_OW 114
81704: GO 81720
// SetTag ( i , tag ) ;
81706: LD_VAR 0 4
81710: PPUSH
81711: LD_VAR 0 9
81715: PPUSH
81716: CALL_OW 109
// end else
81720: GO 81793
// if enemy then
81722: LD_VAR 0 5
81726: IFFALSE 81793
// begin if GetWeapon ( i ) = ru_time_lapser then
81728: LD_VAR 0 4
81732: PPUSH
81733: CALL_OW 264
81737: PUSH
81738: LD_INT 49
81740: EQUAL
81741: IFFALSE 81769
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81743: LD_VAR 0 4
81747: PPUSH
81748: LD_VAR 0 5
81752: PPUSH
81753: LD_VAR 0 4
81757: PPUSH
81758: CALL_OW 74
81762: PPUSH
81763: CALL_OW 112
81767: GO 81793
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81769: LD_VAR 0 4
81773: PPUSH
81774: LD_VAR 0 5
81778: PPUSH
81779: LD_VAR 0 4
81783: PPUSH
81784: CALL_OW 74
81788: PPUSH
81789: CALL_OW 115
// end ; end ;
81793: GO 81373
81795: POP
81796: POP
// end ;
81797: LD_VAR 0 3
81801: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81802: LD_INT 0
81804: PPUSH
81805: PPUSH
81806: PPUSH
// if not unit or IsInUnit ( unit ) then
81807: LD_VAR 0 1
81811: NOT
81812: PUSH
81813: LD_VAR 0 1
81817: PPUSH
81818: CALL_OW 310
81822: OR
81823: IFFALSE 81827
// exit ;
81825: GO 81918
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81827: LD_ADDR_VAR 0 4
81831: PUSH
81832: LD_VAR 0 1
81836: PPUSH
81837: CALL_OW 250
81841: PPUSH
81842: LD_VAR 0 2
81846: PPUSH
81847: LD_INT 1
81849: PPUSH
81850: CALL_OW 272
81854: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81855: LD_ADDR_VAR 0 5
81859: PUSH
81860: LD_VAR 0 1
81864: PPUSH
81865: CALL_OW 251
81869: PPUSH
81870: LD_VAR 0 2
81874: PPUSH
81875: LD_INT 1
81877: PPUSH
81878: CALL_OW 273
81882: ST_TO_ADDR
// if ValidHex ( x , y ) then
81883: LD_VAR 0 4
81887: PPUSH
81888: LD_VAR 0 5
81892: PPUSH
81893: CALL_OW 488
81897: IFFALSE 81918
// ComTurnXY ( unit , x , y ) ;
81899: LD_VAR 0 1
81903: PPUSH
81904: LD_VAR 0 4
81908: PPUSH
81909: LD_VAR 0 5
81913: PPUSH
81914: CALL_OW 118
// end ;
81918: LD_VAR 0 3
81922: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81923: LD_INT 0
81925: PPUSH
81926: PPUSH
// result := false ;
81927: LD_ADDR_VAR 0 3
81931: PUSH
81932: LD_INT 0
81934: ST_TO_ADDR
// if not units then
81935: LD_VAR 0 2
81939: NOT
81940: IFFALSE 81944
// exit ;
81942: GO 81989
// for i in units do
81944: LD_ADDR_VAR 0 4
81948: PUSH
81949: LD_VAR 0 2
81953: PUSH
81954: FOR_IN
81955: IFFALSE 81987
// if See ( side , i ) then
81957: LD_VAR 0 1
81961: PPUSH
81962: LD_VAR 0 4
81966: PPUSH
81967: CALL_OW 292
81971: IFFALSE 81985
// begin result := true ;
81973: LD_ADDR_VAR 0 3
81977: PUSH
81978: LD_INT 1
81980: ST_TO_ADDR
// exit ;
81981: POP
81982: POP
81983: GO 81989
// end ;
81985: GO 81954
81987: POP
81988: POP
// end ;
81989: LD_VAR 0 3
81993: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81994: LD_INT 0
81996: PPUSH
81997: PPUSH
81998: PPUSH
81999: PPUSH
// if not unit or not points then
82000: LD_VAR 0 1
82004: NOT
82005: PUSH
82006: LD_VAR 0 2
82010: NOT
82011: OR
82012: IFFALSE 82016
// exit ;
82014: GO 82106
// dist := 99999 ;
82016: LD_ADDR_VAR 0 5
82020: PUSH
82021: LD_INT 99999
82023: ST_TO_ADDR
// for i in points do
82024: LD_ADDR_VAR 0 4
82028: PUSH
82029: LD_VAR 0 2
82033: PUSH
82034: FOR_IN
82035: IFFALSE 82104
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82037: LD_ADDR_VAR 0 6
82041: PUSH
82042: LD_VAR 0 1
82046: PPUSH
82047: LD_VAR 0 4
82051: PUSH
82052: LD_INT 1
82054: ARRAY
82055: PPUSH
82056: LD_VAR 0 4
82060: PUSH
82061: LD_INT 2
82063: ARRAY
82064: PPUSH
82065: CALL_OW 297
82069: ST_TO_ADDR
// if tmpDist < dist then
82070: LD_VAR 0 6
82074: PUSH
82075: LD_VAR 0 5
82079: LESS
82080: IFFALSE 82102
// begin result := i ;
82082: LD_ADDR_VAR 0 3
82086: PUSH
82087: LD_VAR 0 4
82091: ST_TO_ADDR
// dist := tmpDist ;
82092: LD_ADDR_VAR 0 5
82096: PUSH
82097: LD_VAR 0 6
82101: ST_TO_ADDR
// end ; end ;
82102: GO 82034
82104: POP
82105: POP
// end ;
82106: LD_VAR 0 3
82110: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82111: LD_INT 0
82113: PPUSH
// uc_side := side ;
82114: LD_ADDR_OWVAR 20
82118: PUSH
82119: LD_VAR 0 1
82123: ST_TO_ADDR
// uc_nation := 3 ;
82124: LD_ADDR_OWVAR 21
82128: PUSH
82129: LD_INT 3
82131: ST_TO_ADDR
// vc_chassis := 25 ;
82132: LD_ADDR_OWVAR 37
82136: PUSH
82137: LD_INT 25
82139: ST_TO_ADDR
// vc_engine := engine_siberite ;
82140: LD_ADDR_OWVAR 39
82144: PUSH
82145: LD_INT 3
82147: ST_TO_ADDR
// vc_control := control_computer ;
82148: LD_ADDR_OWVAR 38
82152: PUSH
82153: LD_INT 3
82155: ST_TO_ADDR
// vc_weapon := 59 ;
82156: LD_ADDR_OWVAR 40
82160: PUSH
82161: LD_INT 59
82163: ST_TO_ADDR
// result := CreateVehicle ;
82164: LD_ADDR_VAR 0 5
82168: PUSH
82169: CALL_OW 45
82173: ST_TO_ADDR
// SetDir ( result , d ) ;
82174: LD_VAR 0 5
82178: PPUSH
82179: LD_VAR 0 4
82183: PPUSH
82184: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82188: LD_VAR 0 5
82192: PPUSH
82193: LD_VAR 0 2
82197: PPUSH
82198: LD_VAR 0 3
82202: PPUSH
82203: LD_INT 0
82205: PPUSH
82206: CALL_OW 48
// end ;
82210: LD_VAR 0 5
82214: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82215: LD_INT 0
82217: PPUSH
82218: PPUSH
82219: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82220: LD_ADDR_VAR 0 2
82224: PUSH
82225: LD_INT 0
82227: PUSH
82228: LD_INT 0
82230: PUSH
82231: LD_INT 0
82233: PUSH
82234: LD_INT 0
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: LIST
82241: LIST
82242: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82243: LD_VAR 0 1
82247: NOT
82248: PUSH
82249: LD_VAR 0 1
82253: PPUSH
82254: CALL_OW 264
82258: PUSH
82259: LD_INT 12
82261: PUSH
82262: LD_INT 51
82264: PUSH
82265: LD_INT 32
82267: PUSH
82268: LD_INT 89
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: IN
82277: NOT
82278: OR
82279: IFFALSE 82283
// exit ;
82281: GO 82381
// for i := 1 to 3 do
82283: LD_ADDR_VAR 0 3
82287: PUSH
82288: DOUBLE
82289: LD_INT 1
82291: DEC
82292: ST_TO_ADDR
82293: LD_INT 3
82295: PUSH
82296: FOR_TO
82297: IFFALSE 82379
// begin tmp := GetCargo ( cargo , i ) ;
82299: LD_ADDR_VAR 0 4
82303: PUSH
82304: LD_VAR 0 1
82308: PPUSH
82309: LD_VAR 0 3
82313: PPUSH
82314: CALL_OW 289
82318: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82319: LD_ADDR_VAR 0 2
82323: PUSH
82324: LD_VAR 0 2
82328: PPUSH
82329: LD_VAR 0 3
82333: PPUSH
82334: LD_VAR 0 4
82338: PPUSH
82339: CALL_OW 1
82343: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82344: LD_ADDR_VAR 0 2
82348: PUSH
82349: LD_VAR 0 2
82353: PPUSH
82354: LD_INT 4
82356: PPUSH
82357: LD_VAR 0 2
82361: PUSH
82362: LD_INT 4
82364: ARRAY
82365: PUSH
82366: LD_VAR 0 4
82370: PLUS
82371: PPUSH
82372: CALL_OW 1
82376: ST_TO_ADDR
// end ;
82377: GO 82296
82379: POP
82380: POP
// end ;
82381: LD_VAR 0 2
82385: RET
// export function Length ( array ) ; begin
82386: LD_INT 0
82388: PPUSH
// result := array + 0 ;
82389: LD_ADDR_VAR 0 2
82393: PUSH
82394: LD_VAR 0 1
82398: PUSH
82399: LD_INT 0
82401: PLUS
82402: ST_TO_ADDR
// end ;
82403: LD_VAR 0 2
82407: RET
// export function PrepareArray ( array ) ; begin
82408: LD_INT 0
82410: PPUSH
// result := array diff 0 ;
82411: LD_ADDR_VAR 0 2
82415: PUSH
82416: LD_VAR 0 1
82420: PUSH
82421: LD_INT 0
82423: DIFF
82424: ST_TO_ADDR
// if not result [ 1 ] then
82425: LD_VAR 0 2
82429: PUSH
82430: LD_INT 1
82432: ARRAY
82433: NOT
82434: IFFALSE 82454
// result := Delete ( result , 1 ) ;
82436: LD_ADDR_VAR 0 2
82440: PUSH
82441: LD_VAR 0 2
82445: PPUSH
82446: LD_INT 1
82448: PPUSH
82449: CALL_OW 3
82453: ST_TO_ADDR
// end ;
82454: LD_VAR 0 2
82458: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82459: LD_INT 0
82461: PPUSH
82462: PPUSH
82463: PPUSH
82464: PPUSH
// sibRocketRange := 25 ;
82465: LD_ADDR_VAR 0 6
82469: PUSH
82470: LD_INT 25
82472: ST_TO_ADDR
// result := false ;
82473: LD_ADDR_VAR 0 4
82477: PUSH
82478: LD_INT 0
82480: ST_TO_ADDR
// for i := 0 to 5 do
82481: LD_ADDR_VAR 0 5
82485: PUSH
82486: DOUBLE
82487: LD_INT 0
82489: DEC
82490: ST_TO_ADDR
82491: LD_INT 5
82493: PUSH
82494: FOR_TO
82495: IFFALSE 82562
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82497: LD_VAR 0 1
82501: PPUSH
82502: LD_VAR 0 5
82506: PPUSH
82507: LD_VAR 0 6
82511: PPUSH
82512: CALL_OW 272
82516: PPUSH
82517: LD_VAR 0 2
82521: PPUSH
82522: LD_VAR 0 5
82526: PPUSH
82527: LD_VAR 0 6
82531: PPUSH
82532: CALL_OW 273
82536: PPUSH
82537: LD_VAR 0 3
82541: PPUSH
82542: CALL_OW 309
82546: IFFALSE 82560
// begin result := true ;
82548: LD_ADDR_VAR 0 4
82552: PUSH
82553: LD_INT 1
82555: ST_TO_ADDR
// exit ;
82556: POP
82557: POP
82558: GO 82564
// end ;
82560: GO 82494
82562: POP
82563: POP
// end ;
82564: LD_VAR 0 4
82568: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82569: LD_INT 0
82571: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82572: LD_VAR 0 1
82576: PPUSH
82577: LD_VAR 0 2
82581: PPUSH
82582: LD_INT 0
82584: PPUSH
82585: LD_INT 0
82587: PPUSH
82588: LD_INT 1
82590: PPUSH
82591: LD_INT 0
82593: PPUSH
82594: CALL_OW 587
// end ; end_of_file
82598: LD_VAR 0 3
82602: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82603: LD_VAR 0 1
82607: PUSH
82608: LD_INT 200
82610: DOUBLE
82611: GREATEREQUAL
82612: IFFALSE 82620
82614: LD_INT 299
82616: DOUBLE
82617: LESSEQUAL
82618: IFTRUE 82622
82620: GO 82654
82622: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82623: LD_VAR 0 1
82627: PPUSH
82628: LD_VAR 0 2
82632: PPUSH
82633: LD_VAR 0 3
82637: PPUSH
82638: LD_VAR 0 4
82642: PPUSH
82643: LD_VAR 0 5
82647: PPUSH
82648: CALL 37269 0 5
82652: GO 82731
82654: LD_INT 300
82656: DOUBLE
82657: GREATEREQUAL
82658: IFFALSE 82666
82660: LD_INT 399
82662: DOUBLE
82663: LESSEQUAL
82664: IFTRUE 82668
82666: GO 82730
82668: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82669: LD_VAR 0 1
82673: PPUSH
82674: LD_VAR 0 2
82678: PPUSH
82679: LD_VAR 0 3
82683: PPUSH
82684: LD_VAR 0 4
82688: PPUSH
82689: LD_VAR 0 5
82693: PPUSH
82694: LD_VAR 0 6
82698: PPUSH
82699: LD_VAR 0 7
82703: PPUSH
82704: LD_VAR 0 8
82708: PPUSH
82709: LD_VAR 0 9
82713: PPUSH
82714: LD_VAR 0 10
82718: PPUSH
82719: LD_VAR 0 11
82723: PPUSH
82724: CALL 33602 0 11
82728: GO 82731
82730: POP
// end ;
82731: PPOPN 11
82733: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82734: LD_VAR 0 1
82738: PPUSH
82739: LD_VAR 0 2
82743: PPUSH
82744: LD_VAR 0 3
82748: PPUSH
82749: LD_VAR 0 4
82753: PPUSH
82754: LD_VAR 0 5
82758: PPUSH
82759: CALL 37005 0 5
// end ; end_of_file
82763: PPOPN 5
82765: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82766: LD_VAR 0 1
82770: PPUSH
82771: LD_VAR 0 2
82775: PPUSH
82776: LD_VAR 0 3
82780: PPUSH
82781: LD_VAR 0 4
82785: PPUSH
82786: LD_VAR 0 5
82790: PPUSH
82791: LD_VAR 0 6
82795: PPUSH
82796: CALL 21254 0 6
// end ;
82800: PPOPN 6
82802: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82803: LD_INT 0
82805: PPUSH
// begin if not units then
82806: LD_VAR 0 1
82810: NOT
82811: IFFALSE 82815
// exit ;
82813: GO 82815
// end ;
82815: PPOPN 7
82817: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82818: CALL 21158 0 0
// end ;
82822: PPOPN 1
82824: END
