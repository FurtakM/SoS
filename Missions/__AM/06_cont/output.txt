// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7200 0 0
// CreateNature ;
  57: CALL 20554 0 0
// PrepareRussian ;
  61: CALL 5699 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10519 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41008 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41008 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41008 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41008 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41008 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41008 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41008 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41008 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41008 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41008 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41008 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_VAR 0 4
2563: PPUSH
2564: LD_INT 21
2566: PUSH
2567: LD_INT 3
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 70
2578: IFFALSE 2596
// begin area := HarrisonSupportArea2 ;
2580: LD_ADDR_VAR 0 4
2584: PUSH
2585: LD_INT 31
2587: ST_TO_ADDR
// dir := 1 ;
2588: LD_ADDR_VAR 0 5
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// end ; uc_side = 1 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// uc_nation = 1 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine := engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// vc_control := control_manual ;
2620: LD_ADDR_OWVAR 38
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 4
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: LD_INT 2
2641: PUSH
2642: LD_INT 2
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_OWVAR 67
2655: ARRAY
2656: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2657: LD_ADDR_OWVAR 37
2661: PUSH
2662: LD_INT 2
2664: ST_TO_ADDR
// veh := CreateVehicle ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 45
2674: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2689: LD_VAR 0 3
2693: PPUSH
2694: LD_VAR 0 4
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2706: LD_VAR 0 3
2710: PPUSH
2711: LD_INT 50
2713: PPUSH
2714: CALL_OW 240
// hc_class := class_engineer ;
2718: LD_ADDR_OWVAR 28
2722: PUSH
2723: LD_INT 2
2725: ST_TO_ADDR
// hc_sex := sex_male ;
2726: LD_ADDR_OWVAR 27
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2734: LD_ADDR_OWVAR 33
2738: PUSH
2739: LD_STRING SecondCharsGal
2741: ST_TO_ADDR
// hc_face_number := 52 ;
2742: LD_ADDR_OWVAR 34
2746: PUSH
2747: LD_INT 52
2749: ST_TO_ADDR
// hc_name := Craig Brown ;
2750: LD_ADDR_OWVAR 26
2754: PUSH
2755: LD_STRING Craig Brown
2757: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2758: LD_ADDR_OWVAR 29
2762: PUSH
2763: LD_INT 10
2765: PUSH
2766: LD_INT 10
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2773: LD_ADDR_OWVAR 30
2777: PUSH
2778: LD_INT 0
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 0
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2796: LD_ADDR_OWVAR 31
2800: PUSH
2801: LD_INT 2
2803: PUSH
2804: LD_INT 3
2806: PUSH
2807: LD_INT 0
2809: PUSH
2810: LD_INT 0
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2819: LD_ADDR_EXP 18
2823: PUSH
2824: CALL_OW 44
2828: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2829: LD_EXP 18
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: CALL_OW 52
// vc_engine := engine_combustion ;
2843: LD_ADDR_OWVAR 39
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// vc_control := control_manual ;
2851: LD_ADDR_OWVAR 38
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2859: LD_ADDR_OWVAR 40
2863: PUSH
2864: LD_INT 5
2866: PUSH
2867: LD_INT 5
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_OWVAR 67
2886: ARRAY
2887: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2888: LD_ADDR_OWVAR 37
2892: PUSH
2893: LD_INT 2
2895: ST_TO_ADDR
// veh := CreateVehicle ;
2896: LD_ADDR_VAR 0 3
2900: PUSH
2901: CALL_OW 45
2905: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_VAR 0 5
2915: PPUSH
2916: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2920: LD_VAR 0 3
2924: PPUSH
2925: LD_VAR 0 4
2929: PPUSH
2930: LD_INT 0
2932: PPUSH
2933: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 50
2944: PPUSH
2945: CALL_OW 240
// hc_class := class_soldier ;
2949: LD_ADDR_OWVAR 28
2953: PUSH
2954: LD_INT 1
2956: ST_TO_ADDR
// hc_sex := sex_female ;
2957: LD_ADDR_OWVAR 27
2961: PUSH
2962: LD_INT 2
2964: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2965: LD_ADDR_OWVAR 33
2969: PUSH
2970: LD_STRING SecondCharsGal
2972: ST_TO_ADDR
// hc_face_number := 42 ;
2973: LD_ADDR_OWVAR 34
2977: PUSH
2978: LD_INT 42
2980: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2981: LD_ADDR_OWVAR 29
2985: PUSH
2986: LD_INT 11
2988: PUSH
2989: LD_INT 10
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2996: LD_ADDR_OWVAR 26
3000: PUSH
3001: LD_STRING Ingrid Jonsson
3003: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3004: LD_ADDR_OWVAR 30
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: LD_INT 0
3017: PUSH
3018: LD_INT 0
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3027: LD_ADDR_OWVAR 31
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 1
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: LD_INT 0
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3050: LD_ADDR_EXP 19
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3060: LD_EXP 19
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: CALL_OW 52
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: LD_INT 22
3092: PUSH
3093: LD_INT 1
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 23
3102: PUSH
3103: LD_INT 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 26
3112: PUSH
3113: LD_INT 1
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: PPUSH
3125: CALL_OW 69
3129: PUSH
3130: LD_EXP 3
3134: PUSH
3135: LD_EXP 4
3139: PUSH
3140: LD_EXP 8
3144: PUSH
3145: LD_EXP 9
3149: PUSH
3150: LD_EXP 5
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: DIFF
3162: ST_TO_ADDR
// for i in _tmp do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_VAR 0 4
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3215
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 32
3183: PPUSH
3184: CALL_OW 308
3188: PUSH
3189: LD_VAR 0 2
3193: PPUSH
3194: CALL_OW 302
3198: AND
3199: IFFALSE 3213
// begin tmp := i ;
3201: LD_ADDR_VAR 0 3
3205: PUSH
3206: LD_VAR 0 2
3210: ST_TO_ADDR
// break ;
3211: GO 3215
// end ;
3213: GO 3173
3215: POP
3216: POP
// if not tmp then
3217: LD_VAR 0 3
3221: NOT
3222: IFFALSE 3234
// tmp := JMM ;
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: LD_EXP 1
3233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3234: LD_INT 35
3236: PPUSH
3237: CALL_OW 67
// if IsDead ( tmp ) then
3241: LD_VAR 0 3
3245: PPUSH
3246: CALL_OW 301
3250: IFFALSE 3262
// tmp := JMM ;
3252: LD_ADDR_VAR 0 3
3256: PUSH
3257: LD_EXP 1
3261: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3262: LD_INT 81
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 91
3274: PUSH
3275: LD_VAR 0 3
3279: PUSH
3280: LD_INT 15
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 69
3296: NOT
3297: PUSH
3298: LD_EXP 27
3302: PUSH
3303: LD_INT 6300
3305: LESS
3306: OR
3307: IFFALSE 3234
// blockSpawn := 1 ;
3309: LD_ADDR_EXP 30
3313: PUSH
3314: LD_INT 1
3316: ST_TO_ADDR
// uc_side := 4 ;
3317: LD_ADDR_OWVAR 20
3321: PUSH
3322: LD_INT 4
3324: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3325: LD_ADDR_EXP 16
3329: PUSH
3330: LD_STRING Joan
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: LD_EXP 44
3340: PPUSH
3341: CALL 41008 0 3
3345: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3346: LD_EXP 16
3350: PPUSH
3351: LD_VAR 0 3
3355: PPUSH
3356: CALL_OW 250
3360: PPUSH
3361: LD_VAR 0 3
3365: PPUSH
3366: CALL_OW 251
3370: PPUSH
3371: LD_INT 5
3373: PPUSH
3374: LD_INT 1
3376: PPUSH
3377: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3381: LD_EXP 16
3385: PPUSH
3386: LD_INT 250
3388: PPUSH
3389: CALL_OW 234
// InGameOn ;
3393: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3397: LD_EXP 16
3401: PPUSH
3402: CALL_OW 87
// wait ( 0 0$2 ) ;
3406: LD_INT 70
3408: PPUSH
3409: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3413: LD_VAR 0 3
3417: PPUSH
3418: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3422: LD_VAR 0 3
3426: PPUSH
3427: CALL_OW 122
// wait ( 0 0$1 ) ;
3431: LD_INT 35
3433: PPUSH
3434: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_EXP 16
3447: PPUSH
3448: CALL_OW 112
// wait ( 0 0$2 ) ;
3452: LD_INT 70
3454: PPUSH
3455: CALL_OW 67
// DialogueOn ;
3459: CALL_OW 6
// if tmp = JMM then
3463: LD_VAR 0 3
3467: PUSH
3468: LD_EXP 1
3472: EQUAL
3473: IFFALSE 3622
// begin ComTurnUnit ( JMM , Joan ) ;
3475: LD_EXP 1
3479: PPUSH
3480: LD_EXP 16
3484: PPUSH
3485: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3489: LD_EXP 1
3493: PPUSH
3494: LD_STRING D5b-JMM-1
3496: PPUSH
3497: CALL_OW 88
// DialogueOff ;
3501: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3505: LD_EXP 16
3509: PPUSH
3510: LD_INT 500
3512: PPUSH
3513: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3517: LD_EXP 16
3521: PPUSH
3522: LD_EXP 1
3526: PPUSH
3527: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3531: LD_EXP 1
3535: PPUSH
3536: LD_EXP 16
3540: PPUSH
3541: CALL_OW 119
// wait ( 0 0$1 ) ;
3545: LD_INT 35
3547: PPUSH
3548: CALL_OW 67
// DialogueOn ;
3552: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3556: LD_EXP 16
3560: PPUSH
3561: LD_STRING D5b-Joan-1
3563: PPUSH
3564: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3568: LD_EXP 1
3572: PPUSH
3573: LD_STRING D5b-JMM-2
3575: PPUSH
3576: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3580: LD_EXP 16
3584: PPUSH
3585: LD_STRING D5b-Joan-2
3587: PPUSH
3588: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3592: LD_EXP 1
3596: PPUSH
3597: LD_STRING D5b-JMM-3
3599: PPUSH
3600: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_STRING D5b-Joan-3
3611: PPUSH
3612: CALL_OW 88
// DialogueOff ;
3616: CALL_OW 7
// end else
3620: GO 3987
// begin ComTurnUnit ( tmp , Joan ) ;
3622: LD_VAR 0 3
3626: PPUSH
3627: LD_EXP 16
3631: PPUSH
3632: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_STRING D5a-Sol1-1
3643: PPUSH
3644: CALL_OW 88
// DialogueOff ;
3648: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3652: LD_EXP 16
3656: PPUSH
3657: LD_INT 500
3659: PPUSH
3660: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3664: LD_EXP 16
3668: PPUSH
3669: LD_VAR 0 3
3673: PPUSH
3674: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_EXP 16
3687: PPUSH
3688: CALL_OW 119
// wait ( 0 0$1 ) ;
3692: LD_INT 35
3694: PPUSH
3695: CALL_OW 67
// DialogueOn ;
3699: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3703: LD_EXP 16
3707: PPUSH
3708: LD_STRING D5a-Joan-1
3710: PPUSH
3711: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_STRING D5a-Sol1-2
3722: PPUSH
3723: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3727: LD_EXP 16
3731: PPUSH
3732: LD_STRING D5a-Joan-2
3734: PPUSH
3735: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3739: LD_VAR 0 3
3743: PPUSH
3744: LD_STRING D5a-Sol1-3
3746: PPUSH
3747: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3751: LD_EXP 16
3755: PPUSH
3756: LD_STRING D5a-Joan-3
3758: PPUSH
3759: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3763: LD_VAR 0 3
3767: PPUSH
3768: LD_STRING D5a-Sol1-4
3770: PPUSH
3771: CALL_OW 88
// DialogueOff ;
3775: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3779: LD_EXP 1
3783: PUSH
3784: LD_INT 55
3786: PUSH
3787: EMPTY
3788: LIST
3789: PPUSH
3790: CALL_OW 69
3794: IN
3795: IFFALSE 3818
// begin ComMoveUnit ( JMM , Joan ) ;
3797: LD_EXP 1
3801: PPUSH
3802: LD_EXP 16
3806: PPUSH
3807: CALL_OW 112
// wait ( 0 0$05 ) ;
3811: LD_INT 175
3813: PPUSH
3814: CALL_OW 67
// end ; ComExit ( JMM ) ;
3818: LD_EXP 1
3822: PPUSH
3823: CALL 78855 0 1
// wait ( 0 0$1 ) ;
3827: LD_INT 35
3829: PPUSH
3830: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3834: LD_INT 35
3836: PPUSH
3837: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3841: LD_EXP 16
3845: PUSH
3846: LD_VAR 0 3
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: LD_EXP 1
3859: PPUSH
3860: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3864: LD_EXP 16
3868: PPUSH
3869: LD_EXP 1
3873: PPUSH
3874: CALL_OW 296
3878: PUSH
3879: LD_INT 5
3881: LESS
3882: IFFALSE 3834
// ComTurnUnit ( Joan , JMM ) ;
3884: LD_EXP 16
3888: PPUSH
3889: LD_EXP 1
3893: PPUSH
3894: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3898: LD_EXP 1
3902: PPUSH
3903: LD_EXP 16
3907: PPUSH
3908: CALL_OW 119
// wait ( 0 0$1 ) ;
3912: LD_INT 35
3914: PPUSH
3915: CALL_OW 67
// DialogueOn ;
3919: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3923: LD_EXP 16
3927: PPUSH
3928: LD_STRING D5a-Joan-4
3930: PPUSH
3931: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D5a-JMM-4
3942: PPUSH
3943: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3947: LD_EXP 16
3951: PPUSH
3952: LD_STRING D5a-Joan-5
3954: PPUSH
3955: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3959: LD_EXP 1
3963: PPUSH
3964: LD_STRING D5a-JMM-5
3966: PPUSH
3967: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_STRING D5a-Joan-6
3978: PPUSH
3979: CALL_OW 88
// DialogueOff ;
3983: CALL_OW 7
// end ; DialogueOn ;
3987: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3991: LD_EXP 1
3995: PPUSH
3996: LD_STRING D6-JMM-1
3998: PPUSH
3999: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4003: LD_EXP 16
4007: PPUSH
4008: LD_STRING D6-Joan-1
4010: PPUSH
4011: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4015: LD_EXP 1
4019: PPUSH
4020: LD_STRING D6-JMM-2
4022: PPUSH
4023: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4027: LD_EXP 16
4031: PPUSH
4032: LD_STRING D6-Joan-2
4034: PPUSH
4035: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4039: LD_EXP 1
4043: PPUSH
4044: LD_STRING D6-JMM-3
4046: PPUSH
4047: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4051: LD_EXP 16
4055: PPUSH
4056: LD_STRING D6-Joan-3
4058: PPUSH
4059: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4063: LD_EXP 1
4067: PPUSH
4068: LD_STRING D6-JMM-4
4070: PPUSH
4071: CALL_OW 88
// DialogueOff ;
4075: CALL_OW 7
// InGameOff ;
4079: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4083: LD_EXP 16
4087: PPUSH
4088: LD_INT 1
4090: PPUSH
4091: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4095: LD_STRING MJ
4097: PPUSH
4098: CALL_OW 337
// joanStatus = 1 ;
4102: LD_ADDR_EXP 17
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// blockSpawn = 0 ;
4110: LD_ADDR_EXP 30
4114: PUSH
4115: LD_INT 0
4117: ST_TO_ADDR
// end ;
4118: LD_VAR 0 1
4122: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// if not number or number > 8 then
4127: LD_VAR 0 1
4131: NOT
4132: PUSH
4133: LD_VAR 0 1
4137: PUSH
4138: LD_INT 8
4140: GREATER
4141: OR
4142: IFFALSE 4146
// exit ;
4144: GO 5694
// repeat wait ( 0 0$7 ) ;
4146: LD_INT 245
4148: PPUSH
4149: CALL_OW 67
// until blockSpawn = 0 ;
4153: LD_EXP 30
4157: PUSH
4158: LD_INT 0
4160: EQUAL
4161: IFFALSE 4146
// uc_side := 1 ;
4163: LD_ADDR_OWVAR 20
4167: PUSH
4168: LD_INT 1
4170: ST_TO_ADDR
// uc_nation := 1 ;
4171: LD_ADDR_OWVAR 21
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// InitHc ;
4179: CALL_OW 19
// if number = 1 then
4183: LD_VAR 0 1
4187: PUSH
4188: LD_INT 1
4190: EQUAL
4191: IFFALSE 4367
// begin hc_class := 3 ;
4193: LD_ADDR_OWVAR 28
4197: PUSH
4198: LD_INT 3
4200: ST_TO_ADDR
// hc_sex := sex_male ;
4201: LD_ADDR_OWVAR 27
4205: PUSH
4206: LD_INT 1
4208: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4209: LD_ADDR_OWVAR 33
4213: PUSH
4214: LD_STRING SecondCharsGal
4216: ST_TO_ADDR
// hc_face_number := 55 ;
4217: LD_ADDR_OWVAR 34
4221: PUSH
4222: LD_INT 55
4224: ST_TO_ADDR
// hc_name := George McCarthy ;
4225: LD_ADDR_OWVAR 26
4229: PUSH
4230: LD_STRING George McCarthy
4232: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4233: LD_ADDR_OWVAR 29
4237: PUSH
4238: LD_INT 11
4240: PUSH
4241: LD_INT 10
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4248: LD_ADDR_OWVAR 30
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 2
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4271: LD_ADDR_OWVAR 31
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: LD_INT 2
4281: PUSH
4282: LD_INT 3
4284: PUSH
4285: LD_INT 1
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: ST_TO_ADDR
// un = CreateHuman ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4304: LD_VAR 0 3
4308: PPUSH
4309: LD_INT 23
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: CALL_OW 87
// wait ( 0 0$1 ) ;
4328: LD_INT 35
4330: PPUSH
4331: CALL_OW 67
// DialogueOn ;
4335: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: LD_STRING D11d-Sol4-1
4346: PPUSH
4347: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4351: LD_EXP 1
4355: PPUSH
4356: LD_STRING D11d-JMM-1
4358: PPUSH
4359: CALL_OW 88
// DialogueOff ;
4363: CALL_OW 7
// end ; if number = 2 then
4367: LD_VAR 0 1
4371: PUSH
4372: LD_INT 2
4374: EQUAL
4375: IFFALSE 4551
// begin hc_class := 1 ;
4377: LD_ADDR_OWVAR 28
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// hc_sex := sex_male ;
4385: LD_ADDR_OWVAR 27
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4393: LD_ADDR_OWVAR 33
4397: PUSH
4398: LD_STRING AmGalRemake
4400: ST_TO_ADDR
// hc_face_number := 7 ;
4401: LD_ADDR_OWVAR 34
4405: PUSH
4406: LD_INT 7
4408: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4409: LD_ADDR_OWVAR 26
4413: PUSH
4414: LD_STRING Bobby Jordan
4416: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4417: LD_ADDR_OWVAR 29
4421: PUSH
4422: LD_INT 9
4424: PUSH
4425: LD_INT 11
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4432: LD_ADDR_OWVAR 30
4436: PUSH
4437: LD_INT 1
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4455: LD_ADDR_OWVAR 31
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: ST_TO_ADDR
// un = CreateHuman ;
4478: LD_ADDR_VAR 0 3
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4488: LD_VAR 0 3
4492: PPUSH
4493: LD_INT 24
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL_OW 49
// wait ( 0 0$1 ) ;
4503: LD_INT 35
4505: PPUSH
4506: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4510: LD_VAR 0 3
4514: PPUSH
4515: CALL_OW 87
// DialogueOn ;
4519: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_STRING D11b-Sol3-1
4530: PPUSH
4531: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4535: LD_EXP 1
4539: PPUSH
4540: LD_STRING D11b-JMM-1
4542: PPUSH
4543: CALL_OW 88
// DialogueOff ;
4547: CALL_OW 7
// end ; if number = 3 then
4551: LD_VAR 0 1
4555: PUSH
4556: LD_INT 3
4558: EQUAL
4559: IFFALSE 4723
// begin hc_class := 1 ;
4561: LD_ADDR_OWVAR 28
4565: PUSH
4566: LD_INT 1
4568: ST_TO_ADDR
// hc_sex := sex_male ;
4569: LD_ADDR_OWVAR 27
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// hc_gallery := DJ ;
4577: LD_ADDR_OWVAR 33
4581: PUSH
4582: LD_STRING DJ
4584: ST_TO_ADDR
// hc_face_number := 1 ;
4585: LD_ADDR_OWVAR 34
4589: PUSH
4590: LD_INT 1
4592: ST_TO_ADDR
// hc_name := Darius Dajay ;
4593: LD_ADDR_OWVAR 26
4597: PUSH
4598: LD_STRING Darius Dajay
4600: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4601: LD_ADDR_OWVAR 29
4605: PUSH
4606: LD_INT 11
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4616: LD_ADDR_OWVAR 30
4620: PUSH
4621: LD_INT 2
4623: PUSH
4624: LD_INT 0
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4639: LD_ADDR_OWVAR 31
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 0
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: ST_TO_ADDR
// un = CreateHuman ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4672: LD_VAR 0 3
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: LD_INT 1
4682: PPUSH
4683: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4687: LD_VAR 0 3
4691: PPUSH
4692: CALL_OW 87
// wait ( 0 0$1 ) ;
4696: LD_INT 35
4698: PPUSH
4699: CALL_OW 67
// DialogueOn ;
4703: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4707: LD_VAR 0 3
4711: PPUSH
4712: LD_STRING D11f-Sol5-1
4714: PPUSH
4715: CALL_OW 88
// DialogueOff ;
4719: CALL_OW 7
// end ; if number = 4 then
4723: LD_VAR 0 1
4727: PUSH
4728: LD_INT 4
4730: EQUAL
4731: IFFALSE 4868
// begin hc_class := 2 ;
4733: LD_ADDR_OWVAR 28
4737: PUSH
4738: LD_INT 2
4740: ST_TO_ADDR
// hc_sex := sex_female ;
4741: LD_ADDR_OWVAR 27
4745: PUSH
4746: LD_INT 2
4748: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4749: LD_ADDR_OWVAR 33
4753: PUSH
4754: LD_STRING SecondCharsGal
4756: ST_TO_ADDR
// hc_face_number := 46 ;
4757: LD_ADDR_OWVAR 34
4761: PUSH
4762: LD_INT 46
4764: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4765: LD_ADDR_OWVAR 26
4769: PUSH
4770: LD_STRING Sylvia Creak
4772: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4773: LD_ADDR_OWVAR 29
4777: PUSH
4778: LD_INT 10
4780: PUSH
4781: LD_INT 9
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4788: LD_ADDR_OWVAR 30
4792: PUSH
4793: LD_INT 0
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4811: LD_ADDR_OWVAR 31
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: LD_INT 3
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: ST_TO_ADDR
// un = CreateHuman ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: CALL_OW 44
4843: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4844: LD_VAR 0 3
4848: PPUSH
4849: LD_INT 26
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: CALL_OW 87
// end ; if number = 5 then
4868: LD_VAR 0 1
4872: PUSH
4873: LD_INT 5
4875: EQUAL
4876: IFFALSE 5052
// begin hc_class := 1 ;
4878: LD_ADDR_OWVAR 28
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// hc_sex := sex_female ;
4886: LD_ADDR_OWVAR 27
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4894: LD_ADDR_OWVAR 33
4898: PUSH
4899: LD_STRING SecondCharsGal
4901: ST_TO_ADDR
// hc_face_number := 37 ;
4902: LD_ADDR_OWVAR 34
4906: PUSH
4907: LD_INT 37
4909: ST_TO_ADDR
// hc_name := Malena Johnson ;
4910: LD_ADDR_OWVAR 26
4914: PUSH
4915: LD_STRING Malena Johnson
4917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4918: LD_ADDR_OWVAR 29
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: LD_INT 10
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4933: LD_ADDR_OWVAR 30
4937: PUSH
4938: LD_INT 1
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 0
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4956: LD_ADDR_OWVAR 31
4960: PUSH
4961: LD_INT 1
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// un = CreateHuman ;
4979: LD_ADDR_VAR 0 3
4983: PUSH
4984: CALL_OW 44
4988: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4989: LD_VAR 0 3
4993: PPUSH
4994: LD_INT 27
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: CALL_OW 87
// wait ( 0 0$1 ) ;
5013: LD_INT 35
5015: PPUSH
5016: CALL_OW 67
// DialogueOn ;
5020: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_STRING D11c-FSol3-1
5031: PPUSH
5032: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5036: LD_EXP 1
5040: PPUSH
5041: LD_STRING D11c-JMM-1
5043: PPUSH
5044: CALL_OW 88
// DialogueOff ;
5048: CALL_OW 7
// end ; if number = 6 then
5052: LD_VAR 0 1
5056: PUSH
5057: LD_INT 6
5059: EQUAL
5060: IFFALSE 5234
// begin hc_class := 1 ;
5062: LD_ADDR_OWVAR 28
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// hc_sex := sex_male ;
5070: LD_ADDR_OWVAR 27
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5078: LD_ADDR_OWVAR 33
5082: PUSH
5083: LD_STRING AmGalRemake
5085: ST_TO_ADDR
// hc_face_number := 1 ;
5086: LD_ADDR_OWVAR 34
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// hc_name := Charles Brown ;
5094: LD_ADDR_OWVAR 26
5098: PUSH
5099: LD_STRING Charles Brown
5101: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5102: LD_ADDR_OWVAR 29
5106: PUSH
5107: LD_INT 12
5109: PUSH
5110: LD_INT 11
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5117: LD_ADDR_OWVAR 30
5121: PUSH
5122: LD_INT 2
5124: PUSH
5125: LD_INT 0
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5140: LD_ADDR_OWVAR 31
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: LD_INT 1
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: ST_TO_ADDR
// un = CreateHuman ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: CALL_OW 44
5172: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5173: LD_VAR 0 3
5177: PPUSH
5178: LD_INT 28
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5188: LD_VAR 0 3
5192: PPUSH
5193: CALL_OW 87
// wait ( 0 0$1 ) ;
5197: LD_INT 35
5199: PPUSH
5200: CALL_OW 67
// DialogueOn ;
5204: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5208: LD_VAR 0 3
5212: PPUSH
5213: LD_STRING D4-Sol1-5
5215: PPUSH
5216: CALL_OW 88
// DialogueOff ;
5220: CALL_OW 7
// tempCharles = un ;
5224: LD_ADDR_EXP 14
5228: PUSH
5229: LD_VAR 0 3
5233: ST_TO_ADDR
// end ; if number = 7 then
5234: LD_VAR 0 1
5238: PUSH
5239: LD_INT 7
5241: EQUAL
5242: IFFALSE 5514
// begin hc_class := 1 ;
5244: LD_ADDR_OWVAR 28
5248: PUSH
5249: LD_INT 1
5251: ST_TO_ADDR
// hc_sex := sex_female ;
5252: LD_ADDR_OWVAR 27
5256: PUSH
5257: LD_INT 2
5259: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5260: LD_ADDR_OWVAR 33
5264: PUSH
5265: LD_STRING AmGalRemake
5267: ST_TO_ADDR
// hc_face_number := 2 ;
5268: LD_ADDR_OWVAR 34
5272: PUSH
5273: LD_INT 2
5275: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5276: LD_ADDR_OWVAR 26
5280: PUSH
5281: LD_STRING Rebecca Macdonald
5283: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5284: LD_ADDR_OWVAR 29
5288: PUSH
5289: LD_INT 10
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5299: LD_ADDR_OWVAR 30
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 0
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 1
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5322: LD_ADDR_OWVAR 31
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: LD_INT 0
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 1
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: ST_TO_ADDR
// un = CreateHuman ;
5345: LD_ADDR_VAR 0 3
5349: PUSH
5350: CALL_OW 44
5354: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5355: LD_VAR 0 3
5359: PPUSH
5360: LD_INT 29
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5370: LD_VAR 0 3
5374: PPUSH
5375: CALL_OW 87
// wait ( 0 0$1 ) ;
5379: LD_INT 35
5381: PPUSH
5382: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5386: LD_INT 30
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: IFFALSE 5514
// begin DialogueOn ;
5405: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: CALL_OW 250
5418: PPUSH
5419: LD_VAR 0 3
5423: PPUSH
5424: CALL_OW 251
5428: PPUSH
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 15
5434: NEG
5435: PPUSH
5436: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5440: LD_VAR 0 3
5444: PPUSH
5445: CALL_OW 250
5449: PPUSH
5450: LD_VAR 0 3
5454: PPUSH
5455: CALL_OW 251
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5467: LD_VAR 0 3
5471: PPUSH
5472: LD_STRING D11a-FSol2-1
5474: PPUSH
5475: CALL_OW 88
// DialogueOff ;
5479: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5483: LD_INT 3
5485: PPUSH
5486: LD_VAR 0 3
5490: PPUSH
5491: CALL_OW 471
// wait ( 0 0$2 ) ;
5495: LD_INT 70
5497: PPUSH
5498: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5502: LD_INT 3
5504: PPUSH
5505: LD_VAR 0 3
5509: PPUSH
5510: CALL_OW 472
// end ; end ; if number = 8 then
5514: LD_VAR 0 1
5518: PUSH
5519: LD_INT 8
5521: EQUAL
5522: IFFALSE 5678
// begin hc_class := 1 ;
5524: LD_ADDR_OWVAR 28
5528: PUSH
5529: LD_INT 1
5531: ST_TO_ADDR
// hc_sex := sex_female ;
5532: LD_ADDR_OWVAR 27
5536: PUSH
5537: LD_INT 2
5539: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5540: LD_ADDR_OWVAR 33
5544: PUSH
5545: LD_STRING SecondCharsGal
5547: ST_TO_ADDR
// hc_face_number := 45 ;
5548: LD_ADDR_OWVAR 34
5552: PUSH
5553: LD_INT 45
5555: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5556: LD_ADDR_OWVAR 26
5560: PUSH
5561: LD_STRING Margherite Simpson
5563: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5564: LD_ADDR_OWVAR 29
5568: PUSH
5569: LD_INT 12
5571: PUSH
5572: LD_INT 10
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5579: LD_ADDR_OWVAR 30
5583: PUSH
5584: LD_INT 1
5586: PUSH
5587: LD_INT 2
5589: PUSH
5590: LD_INT 0
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5602: LD_ADDR_OWVAR 31
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: LD_INT 2
5612: PUSH
5613: LD_INT 0
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: ST_TO_ADDR
// un = CreateHuman ;
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: CALL_OW 44
5634: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5635: LD_VAR 0 3
5639: PPUSH
5640: LD_INT 33
5642: PPUSH
5643: LD_INT 1
5645: PPUSH
5646: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5650: LD_VAR 0 3
5654: PPUSH
5655: CALL_OW 87
// wait ( 0 0$1 ) ;
5659: LD_INT 35
5661: PPUSH
5662: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_STRING D11e-FSol4-1
5673: PPUSH
5674: CALL_OW 88
// end ; arrivals := arrivals union un ;
5678: LD_ADDR_EXP 45
5682: PUSH
5683: LD_EXP 45
5687: PUSH
5688: LD_VAR 0 3
5692: UNION
5693: ST_TO_ADDR
// end ; end_of_file
5694: LD_VAR 0 2
5698: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
// ruAttackers := [ ] ;
5703: LD_ADDR_EXP 48
5707: PUSH
5708: EMPTY
5709: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5710: LD_ADDR_EXP 49
5714: PUSH
5715: EMPTY
5716: ST_TO_ADDR
// if Difficulty < 3 then
5717: LD_OWVAR 67
5721: PUSH
5722: LD_INT 3
5724: LESS
5725: IFFALSE 5742
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5727: LD_INT 130
5729: PPUSH
5730: LD_INT 81
5732: PPUSH
5733: CALL_OW 428
5737: PPUSH
5738: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: LD_EXP 35
5755: PPUSH
5756: LD_EXP 36
5760: PPUSH
5761: CALL_OW 12
5765: PPUSH
5766: LD_INT 2
5768: PPUSH
5769: LD_INT 4
5771: PPUSH
5772: CALL 6954 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5776: LD_INT 3
5778: PPUSH
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 8
5784: PPUSH
5785: LD_EXP 35
5789: PPUSH
5790: LD_EXP 36
5794: PPUSH
5795: CALL_OW 12
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: LD_INT 4
5805: PPUSH
5806: CALL 6954 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5810: LD_INT 3
5812: PPUSH
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 67
5818: PPUSH
5819: LD_EXP 35
5823: PPUSH
5824: LD_EXP 36
5828: PPUSH
5829: CALL_OW 12
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: LD_INT 2
5839: PPUSH
5840: CALL 6954 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5844: LD_INT 3
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 21
5852: PPUSH
5853: LD_EXP 35
5857: PPUSH
5858: LD_EXP 36
5862: PPUSH
5863: CALL_OW 12
5867: PPUSH
5868: LD_INT 3
5870: PPUSH
5871: LD_INT 6
5873: PPUSH
5874: CALL 6954 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5878: LD_INT 3
5880: PPUSH
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 17
5886: PPUSH
5887: LD_EXP 35
5891: PPUSH
5892: LD_EXP 36
5896: PPUSH
5897: CALL_OW 12
5901: PPUSH
5902: LD_INT 3
5904: PPUSH
5905: LD_INT 6
5907: PPUSH
5908: CALL 6954 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5912: LD_INT 3
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 32
5920: PPUSH
5921: LD_EXP 35
5925: PPUSH
5926: LD_EXP 36
5930: PPUSH
5931: CALL_OW 12
5935: PPUSH
5936: LD_INT 4
5938: PPUSH
5939: LD_INT 2
5941: PPUSH
5942: CALL 6954 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 3
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 21
5963: PUSH
5964: LD_INT 3
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 32
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 69
5990: PUSH
5991: FOR_IN
5992: IFFALSE 6032
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5994: LD_INT 3
5996: PPUSH
5997: LD_INT 3
5999: PPUSH
6000: LD_VAR 0 2
6004: PPUSH
6005: LD_EXP 35
6009: PPUSH
6010: LD_EXP 36
6014: PPUSH
6015: CALL_OW 12
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: CALL 6954 0 6
6030: GO 5991
6032: POP
6033: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6034: LD_ADDR_VAR 0 2
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 30
6061: PUSH
6062: LD_INT 31
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6108
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6082: LD_EXP 35
6086: PPUSH
6087: LD_EXP 36
6091: PPUSH
6092: CALL_OW 12
6096: PPUSH
6097: LD_VAR 0 2
6101: PPUSH
6102: CALL 7064 0 2
6106: GO 6079
6108: POP
6109: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6110: LD_INT 3
6112: PPUSH
6113: LD_INT 32
6115: PPUSH
6116: LD_INT 3
6118: PPUSH
6119: CALL 7343 0 3
// end ;
6123: LD_VAR 0 1
6127: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6128: LD_INT 22
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 32
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: IFFALSE 6233
6158: GO 6160
6160: DISABLE
6161: LD_INT 0
6163: PPUSH
// begin enable ;
6164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6165: LD_ADDR_VAR 0 1
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 32
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PPUSH
6194: CALL_OW 69
6198: PUSH
6199: FOR_IN
6200: IFFALSE 6231
// if GetFuel ( i ) < 3 then
6202: LD_VAR 0 1
6206: PPUSH
6207: CALL_OW 261
6211: PUSH
6212: LD_INT 3
6214: LESS
6215: IFFALSE 6229
// SetFuel ( i , 3 ) ;
6217: LD_VAR 0 1
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: CALL_OW 240
6229: GO 6199
6231: POP
6232: POP
// end ;
6233: PPOPN 1
6235: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6236: LD_OWVAR 67
6240: PUSH
6241: LD_INT 1
6243: GREATER
6244: IFFALSE 6813
6246: GO 6248
6248: DISABLE
6249: LD_INT 0
6251: PPUSH
6252: PPUSH
6253: PPUSH
6254: PPUSH
// begin uc_side := 3 ;
6255: LD_ADDR_OWVAR 20
6259: PUSH
6260: LD_INT 3
6262: ST_TO_ADDR
// uc_nation := 3 ;
6263: LD_ADDR_OWVAR 21
6267: PUSH
6268: LD_INT 3
6270: ST_TO_ADDR
// for i := 1 to 2 do
6271: LD_ADDR_VAR 0 1
6275: PUSH
6276: DOUBLE
6277: LD_INT 1
6279: DEC
6280: ST_TO_ADDR
6281: LD_INT 2
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6399
// begin InitHC_All ( ) ;
6287: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6291: LD_INT 0
6293: PPUSH
6294: LD_INT 4
6296: PUSH
6297: LD_INT 5
6299: PUSH
6300: LD_INT 6
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_OWVAR 67
6316: ARRAY
6317: PPUSH
6318: CALL_OW 381
// un := CreateHuman ;
6322: LD_ADDR_VAR 0 2
6326: PUSH
6327: CALL_OW 44
6331: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 91
6339: PPUSH
6340: LD_INT 87
6342: PPUSH
6343: LD_INT 3
6345: PPUSH
6346: LD_INT 0
6348: PPUSH
6349: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6353: LD_ADDR_EXP 49
6357: PUSH
6358: LD_EXP 49
6362: PPUSH
6363: LD_EXP 49
6367: PUSH
6368: LD_INT 1
6370: PLUS
6371: PPUSH
6372: LD_VAR 0 2
6376: PPUSH
6377: CALL_OW 1
6381: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 46
6389: PPUSH
6390: LD_INT 78
6392: PPUSH
6393: CALL_OW 114
// end ;
6397: GO 6284
6399: POP
6400: POP
// if Difficulty > 2 then
6401: LD_OWVAR 67
6405: PUSH
6406: LD_INT 2
6408: GREATER
6409: IFFALSE 6541
// begin for i := 1 to 3 do
6411: LD_ADDR_VAR 0 1
6415: PUSH
6416: DOUBLE
6417: LD_INT 1
6419: DEC
6420: ST_TO_ADDR
6421: LD_INT 3
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6539
// begin InitHC_All ( ) ;
6427: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6431: LD_INT 0
6433: PPUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: LD_INT 6
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: PUSH
6452: LD_OWVAR 67
6456: ARRAY
6457: PPUSH
6458: CALL_OW 381
// un := CreateHuman ;
6462: LD_ADDR_VAR 0 2
6466: PUSH
6467: CALL_OW 44
6471: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_INT 91
6479: PPUSH
6480: LD_INT 87
6482: PPUSH
6483: LD_INT 3
6485: PPUSH
6486: LD_INT 0
6488: PPUSH
6489: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6493: LD_ADDR_EXP 49
6497: PUSH
6498: LD_EXP 49
6502: PPUSH
6503: LD_EXP 49
6507: PUSH
6508: LD_INT 1
6510: PLUS
6511: PPUSH
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 89
6529: PPUSH
6530: LD_INT 148
6532: PPUSH
6533: CALL_OW 114
// end ;
6537: GO 6424
6539: POP
6540: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6541: LD_ADDR_VAR 0 3
6545: PUSH
6546: LD_INT 33
6548: PUSH
6549: LD_INT 61
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 49
6558: PUSH
6559: LD_INT 85
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 76
6568: PUSH
6569: LD_INT 99
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 81
6578: PUSH
6579: LD_INT 135
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 111
6588: PUSH
6589: LD_INT 155
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 147
6598: PUSH
6599: LD_INT 158
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6614: LD_INT 1050
6616: PPUSH
6617: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: DOUBLE
6627: LD_INT 1
6629: DEC
6630: ST_TO_ADDR
6631: LD_EXP 49
6635: PUSH
6636: FOR_TO
6637: IFFALSE 6804
// begin un := ruAttackersInForest [ i ] ;
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: LD_EXP 49
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: ST_TO_ADDR
// tag := GetTag ( un ) ;
6655: LD_ADDR_VAR 0 4
6659: PUSH
6660: LD_VAR 0 2
6664: PPUSH
6665: CALL_OW 110
6669: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6670: LD_VAR 0 2
6674: PPUSH
6675: CALL_OW 302
6679: PUSH
6680: LD_VAR 0 2
6684: PPUSH
6685: CALL_OW 314
6689: NOT
6690: AND
6691: IFFALSE 6802
// begin if tag <> i then
6693: LD_VAR 0 4
6697: PUSH
6698: LD_VAR 0 1
6702: NONEQUAL
6703: IFFALSE 6731
// begin SetTag ( un , i ) ;
6705: LD_VAR 0 2
6709: PPUSH
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 109
// tag := i ;
6719: LD_ADDR_VAR 0 4
6723: PUSH
6724: LD_VAR 0 1
6728: ST_TO_ADDR
// end else
6729: GO 6763
// begin SetTag ( un , i + 1 ) ;
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_VAR 0 1
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: PPUSH
6745: CALL_OW 109
// tag := i + 1 ;
6749: LD_ADDR_VAR 0 4
6753: PUSH
6754: LD_VAR 0 1
6758: PUSH
6759: LD_INT 1
6761: PLUS
6762: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6763: LD_VAR 0 2
6767: PPUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_VAR 0 4
6777: ARRAY
6778: PUSH
6779: LD_INT 1
6781: ARRAY
6782: PPUSH
6783: LD_VAR 0 3
6787: PUSH
6788: LD_VAR 0 4
6792: ARRAY
6793: PUSH
6794: LD_INT 2
6796: ARRAY
6797: PPUSH
6798: CALL_OW 114
// end ; end ;
6802: GO 6636
6804: POP
6805: POP
// until not ruAttackersInForest ;
6806: LD_EXP 49
6810: NOT
6811: IFFALSE 6614
// end ; end_of_file
6813: PPOPN 4
6815: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6816: LD_INT 0
6818: PPUSH
6819: PPUSH
6820: PPUSH
// if not characters then
6821: LD_VAR 0 1
6825: NOT
6826: IFFALSE 6830
// exit ;
6828: GO 6909
// speaker := characters [ rand ( 1 , characters ) ] ;
6830: LD_ADDR_VAR 0 6
6834: PUSH
6835: LD_VAR 0 1
6839: PUSH
6840: LD_INT 1
6842: PPUSH
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL_OW 12
6852: ARRAY
6853: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6854: LD_VAR 0 6
6858: PPUSH
6859: CALL_OW 258
6863: PUSH
6864: LD_INT 1
6866: EQUAL
6867: IFFALSE 6885
// Say ( speaker , dialogMID ) else
6869: LD_VAR 0 6
6873: PPUSH
6874: LD_VAR 0 2
6878: PPUSH
6879: CALL_OW 88
6883: GO 6899
// Say ( speaker , dialogFID ) ;
6885: LD_VAR 0 6
6889: PPUSH
6890: LD_VAR 0 3
6894: PPUSH
6895: CALL_OW 88
// result := speaker ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 6
6908: ST_TO_ADDR
// end ;
6909: LD_VAR 0 4
6913: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6914: LD_INT 0
6916: PPUSH
6917: PPUSH
// for i in charactersList do
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_IN
6929: IFFALSE 6947
// SaveCharacters ( i , ident ) ;
6931: LD_VAR 0 4
6935: PPUSH
6936: LD_VAR 0 2
6940: PPUSH
6941: CALL_OW 38
6945: GO 6928
6947: POP
6948: POP
// end ;
6949: LD_VAR 0 3
6953: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6954: LD_INT 0
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
// for i = 1 to count do
6960: LD_ADDR_VAR 0 8
6964: PUSH
6965: DOUBLE
6966: LD_INT 1
6968: DEC
6969: ST_TO_ADDR
6970: LD_VAR 0 6
6974: PUSH
6975: FOR_TO
6976: IFFALSE 7057
// begin uc_side = side ;
6978: LD_ADDR_OWVAR 20
6982: PUSH
6983: LD_VAR 0 1
6987: ST_TO_ADDR
// uc_nation = nation ;
6988: LD_ADDR_OWVAR 21
6992: PUSH
6993: LD_VAR 0 2
6997: ST_TO_ADDR
// hc_gallery =  ;
6998: LD_ADDR_OWVAR 33
7002: PUSH
7003: LD_STRING 
7005: ST_TO_ADDR
// hc_name =  ;
7006: LD_ADDR_OWVAR 26
7010: PUSH
7011: LD_STRING 
7013: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7014: LD_INT 0
7016: PPUSH
7017: LD_VAR 0 5
7021: PPUSH
7022: LD_VAR 0 4
7026: PPUSH
7027: CALL_OW 380
// un = CreateHuman ;
7031: LD_ADDR_VAR 0 10
7035: PUSH
7036: CALL_OW 44
7040: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7041: LD_VAR 0 10
7045: PPUSH
7046: LD_VAR 0 3
7050: PPUSH
7051: CALL_OW 52
// end ;
7055: GO 6975
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 7
7063: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7064: LD_INT 0
7066: PPUSH
7067: PPUSH
7068: PPUSH
// uc_side := GetSide ( b ) ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 255
7083: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7084: LD_ADDR_OWVAR 21
7088: PUSH
7089: LD_VAR 0 2
7093: PPUSH
7094: CALL_OW 248
7098: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7099: LD_INT 0
7101: PPUSH
7102: LD_INT 1
7104: PPUSH
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: LD_VAR 0 2
7123: PPUSH
7124: CALL_OW 254
7128: PUSH
7129: LD_INT 3
7131: MINUS
7132: ST_TO_ADDR
// if dir < 0 then
7133: LD_VAR 0 5
7137: PUSH
7138: LD_INT 0
7140: LESS
7141: IFFALSE 7157
// dir := 6 + dir ;
7143: LD_ADDR_VAR 0 5
7147: PUSH
7148: LD_INT 6
7150: PUSH
7151: LD_VAR 0 5
7155: PLUS
7156: ST_TO_ADDR
// un := CreateHuman ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: CALL_OW 44
7166: ST_TO_ADDR
// SetDir ( un , dir ) ;
7167: LD_VAR 0 4
7171: PPUSH
7172: LD_VAR 0 5
7176: PPUSH
7177: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7181: LD_VAR 0 4
7185: PPUSH
7186: LD_VAR 0 2
7190: PPUSH
7191: CALL_OW 52
// end ;
7195: LD_VAR 0 3
7199: RET
// export function PrepareDifficulty ; begin
7200: LD_INT 0
7202: PPUSH
// case Difficulty of 1 :
7203: LD_OWVAR 67
7207: PUSH
7208: LD_INT 1
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7235
7216: POP
// begin RuSolMinLevel = 2 ;
7217: LD_ADDR_EXP 35
7221: PUSH
7222: LD_INT 2
7224: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7225: LD_ADDR_EXP 36
7229: PUSH
7230: LD_INT 3
7232: ST_TO_ADDR
// end ; 2 :
7233: GO 7296
7235: LD_INT 2
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7262
7243: POP
// begin RuSolMinLevel = 3 ;
7244: LD_ADDR_EXP 35
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7252: LD_ADDR_EXP 36
7256: PUSH
7257: LD_INT 5
7259: ST_TO_ADDR
// end ; 3 .. 4 :
7260: GO 7296
7262: LD_INT 3
7264: DOUBLE
7265: GREATEREQUAL
7266: IFFALSE 7274
7268: LD_INT 4
7270: DOUBLE
7271: LESSEQUAL
7272: IFTRUE 7276
7274: GO 7295
7276: POP
// begin RuSolMinLevel = 4 ;
7277: LD_ADDR_EXP 35
7281: PUSH
7282: LD_INT 4
7284: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7285: LD_ADDR_EXP 36
7289: PUSH
7290: LD_INT 6
7292: ST_TO_ADDR
// end ; end ;
7293: GO 7296
7295: POP
// end ;
7296: LD_VAR 0 1
7300: RET
// export function ShowQuery1 ; begin
7301: LD_INT 0
7303: PPUSH
// result := Query ( QKill ) ;
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: LD_STRING QKill
7311: PPUSH
7312: CALL_OW 97
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 1
7321: RET
// export function ShowQuery2 ; begin
7322: LD_INT 0
7324: PPUSH
// result := Query ( QKill2 ) ;
7325: LD_ADDR_VAR 0 1
7329: PUSH
7330: LD_STRING QKill2
7332: PPUSH
7333: CALL_OW 97
7337: ST_TO_ADDR
// end ;
7338: LD_VAR 0 1
7342: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7349: LD_ADDR_VAR 0 7
7353: PUSH
7354: LD_INT 48
7356: PUSH
7357: LD_INT 49
7359: PUSH
7360: LD_INT 50
7362: PUSH
7363: LD_INT 20
7365: PUSH
7366: LD_INT 1
7368: PUSH
7369: LD_INT 51
7371: PUSH
7372: LD_INT 52
7374: PUSH
7375: LD_INT 69
7377: PUSH
7378: LD_INT 39
7380: PUSH
7381: LD_INT 34
7383: PUSH
7384: LD_INT 40
7386: PUSH
7387: LD_INT 53
7389: PUSH
7390: LD_INT 71
7392: PUSH
7393: LD_INT 57
7395: PUSH
7396: LD_INT 58
7398: PUSH
7399: LD_INT 44
7401: PUSH
7402: LD_INT 32
7404: PUSH
7405: LD_INT 27
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 33
7413: PUSH
7414: LD_INT 59
7416: PUSH
7417: LD_INT 54
7419: PUSH
7420: LD_INT 55
7422: PUSH
7423: LD_INT 56
7425: PUSH
7426: LD_INT 63
7428: PUSH
7429: LD_INT 64
7431: PUSH
7432: LD_INT 65
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 31
7440: PUSH
7441: LD_INT 21
7443: PUSH
7444: LD_INT 22
7446: PUSH
7447: LD_INT 25
7449: PUSH
7450: LD_INT 82
7452: PUSH
7453: LD_INT 83
7455: PUSH
7456: LD_INT 84
7458: PUSH
7459: LD_INT 85
7461: PUSH
7462: LD_INT 86
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// for i = 1 to list do
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: DOUBLE
7510: LD_INT 1
7512: DEC
7513: ST_TO_ADDR
7514: LD_VAR 0 7
7518: PUSH
7519: FOR_TO
7520: IFFALSE 7592
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7522: LD_VAR 0 7
7526: PUSH
7527: LD_VAR 0 5
7531: ARRAY
7532: PPUSH
7533: LD_VAR 0 1
7537: PPUSH
7538: CALL_OW 321
7542: PUSH
7543: LD_INT 1
7545: EQUAL
7546: PUSH
7547: LD_VAR 0 7
7551: PUSH
7552: LD_VAR 0 5
7556: ARRAY
7557: PPUSH
7558: LD_VAR 0 3
7562: PPUSH
7563: CALL_OW 482
7567: AND
7568: IFFALSE 7590
// AddComResearch ( lab , list [ i ] ) ;
7570: LD_VAR 0 2
7574: PPUSH
7575: LD_VAR 0 7
7579: PUSH
7580: LD_VAR 0 5
7584: ARRAY
7585: PPUSH
7586: CALL_OW 184
7590: GO 7519
7592: POP
7593: POP
// end ;
7594: LD_VAR 0 4
7598: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7599: LD_INT 0
7601: PPUSH
7602: PPUSH
7603: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7604: LD_INT 22
7606: PUSH
7607: LD_VAR 0 1
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 21
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 69
7634: PUSH
7635: LD_VAR 0 3
7639: LESSEQUAL
7640: IFFALSE 7748
// begin for i = 1 to vehCount do
7642: LD_ADDR_VAR 0 9
7646: PUSH
7647: DOUBLE
7648: LD_INT 1
7650: DEC
7651: ST_TO_ADDR
7652: LD_VAR 0 3
7656: PUSH
7657: FOR_TO
7658: IFFALSE 7746
// begin weapon := weaponTab [ i ] ;
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 4
7669: PUSH
7670: LD_VAR 0 9
7674: ARRAY
7675: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7676: LD_VAR 0 10
7680: PUSH
7681: LD_INT 46
7683: EQUAL
7684: IFFALSE 7715
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7686: LD_VAR 0 2
7690: PPUSH
7691: LD_INT 24
7693: PPUSH
7694: LD_VAR 0 5
7698: PPUSH
7699: LD_VAR 0 6
7703: PPUSH
7704: LD_VAR 0 10
7708: PPUSH
7709: CALL_OW 185
7713: GO 7744
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7715: LD_VAR 0 2
7719: PPUSH
7720: LD_VAR 0 7
7724: PPUSH
7725: LD_VAR 0 5
7729: PPUSH
7730: LD_VAR 0 6
7734: PPUSH
7735: LD_VAR 0 10
7739: PPUSH
7740: CALL_OW 185
// end ;
7744: GO 7657
7746: POP
7747: POP
// end ; end ;
7748: LD_VAR 0 8
7752: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7753: LD_INT 0
7755: PPUSH
7756: PPUSH
7757: PPUSH
7758: PPUSH
7759: PPUSH
7760: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7761: LD_ADDR_VAR 0 8
7765: PUSH
7766: LD_VAR 0 2
7770: PPUSH
7771: CALL_OW 313
7775: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7776: LD_ADDR_VAR 0 9
7780: PUSH
7781: LD_VAR 0 3
7785: PPUSH
7786: LD_INT 22
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 25
7800: PUSH
7801: LD_INT 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 24
7810: PUSH
7811: LD_INT 750
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 54
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 70
7841: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7842: LD_ADDR_VAR 0 6
7846: PUSH
7847: LD_VAR 0 3
7851: PPUSH
7852: LD_INT 22
7854: PUSH
7855: LD_VAR 0 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 21
7866: PUSH
7867: LD_INT 3
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: LD_INT 24
7879: PUSH
7880: LD_INT 1000
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: EMPTY
7897: LIST
7898: PPUSH
7899: CALL_OW 70
7903: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7904: LD_VAR 0 6
7908: NOT
7909: PUSH
7910: LD_INT 22
7912: PUSH
7913: LD_VAR 0 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 25
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 24
7934: PUSH
7935: LD_INT 250
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 69
7951: NOT
7952: AND
7953: IFFALSE 7957
// exit ;
7955: GO 8115
// if buildingsList and engineerOkInside then
7957: LD_VAR 0 6
7961: PUSH
7962: LD_VAR 0 8
7966: AND
7967: IFFALSE 7978
// ComExitBuilding ( engineerOkInside ) ;
7969: LD_VAR 0 8
7973: PPUSH
7974: CALL_OW 122
// if buildingsList and engineerOkOutside then
7978: LD_VAR 0 6
7982: PUSH
7983: LD_VAR 0 9
7987: AND
7988: IFFALSE 8008
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7990: LD_VAR 0 9
7994: PPUSH
7995: LD_VAR 0 6
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PPUSH
8004: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: EQUAL
8016: PUSH
8017: LD_VAR 0 4
8021: PUSH
8022: LD_INT 0
8024: EQUAL
8025: AND
8026: PUSH
8027: LD_VAR 0 9
8031: AND
8032: IFFALSE 8048
// ComEnterUnit ( engineerOkOutside , depot ) ;
8034: LD_VAR 0 9
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8048: LD_VAR 0 9
8052: PUSH
8053: LD_VAR 0 6
8057: PUSH
8058: LD_INT 0
8060: EQUAL
8061: AND
8062: PUSH
8063: LD_VAR 0 4
8067: AND
8068: IFFALSE 8115
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8070: LD_VAR 0 9
8074: PPUSH
8075: LD_VAR 0 4
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 4
8097: PUSH
8098: LD_INT 3
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 4
8106: PUSH
8107: LD_INT 4
8109: ARRAY
8110: PPUSH
8111: CALL_OW 145
// end ;
8115: LD_VAR 0 5
8119: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8120: LD_INT 0
8122: PPUSH
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8131: LD_ADDR_VAR 0 6
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_VAR 0 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 23
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 24
8170: PUSH
8171: LD_INT 251
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8189: LD_ADDR_VAR 0 7
8193: PUSH
8194: LD_VAR 0 3
8198: PPUSH
8199: LD_INT 22
8201: PUSH
8202: LD_VAR 0 1
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 23
8213: PUSH
8214: LD_INT 2
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 25
8223: PUSH
8224: LD_INT 4
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 50
8233: PUSH
8234: EMPTY
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 70
8247: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8248: LD_ADDR_VAR 0 10
8252: PUSH
8253: LD_VAR 0 3
8257: PPUSH
8258: LD_INT 22
8260: PUSH
8261: LD_VAR 0 1
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 25
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 3
8299: PUSH
8300: LD_INT 24
8302: PUSH
8303: LD_INT 750
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PPUSH
8320: CALL_OW 70
8324: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8325: LD_ADDR_VAR 0 11
8329: PUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: LD_INT 22
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: LD_INT 21
8349: PUSH
8350: LD_INT 1
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 25
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 3
8376: PUSH
8377: LD_INT 24
8379: PUSH
8380: LD_INT 1000
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 70
8401: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8402: LD_VAR 0 10
8406: NOT
8407: PUSH
8408: LD_VAR 0 11
8412: NOT
8413: AND
8414: PUSH
8415: LD_VAR 0 6
8419: NOT
8420: AND
8421: IFFALSE 8425
// exit ;
8423: GO 8631
// if damageUnits and sci_list then
8425: LD_VAR 0 10
8429: PUSH
8430: LD_VAR 0 6
8434: AND
8435: IFFALSE 8451
// ComMoveToArea ( damageUnits , healArea ) ;
8437: LD_VAR 0 10
8441: PPUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 113
// if unitsToHeal and sci_list then
8451: LD_VAR 0 11
8455: PUSH
8456: LD_VAR 0 6
8460: AND
8461: IFFALSE 8472
// ComExitBuilding ( sci_list ) ;
8463: LD_VAR 0 6
8467: PPUSH
8468: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8472: LD_VAR 0 11
8476: PUSH
8477: LD_VAR 0 7
8481: AND
8482: IFFALSE 8502
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8484: LD_VAR 0 7
8488: PPUSH
8489: LD_VAR 0 11
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PPUSH
8498: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8502: LD_VAR 0 10
8506: PUSH
8507: LD_INT 0
8509: EQUAL
8510: PUSH
8511: LD_VAR 0 11
8515: PUSH
8516: LD_INT 0
8518: EQUAL
8519: AND
8520: PUSH
8521: LD_VAR 0 7
8525: AND
8526: IFFALSE 8631
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8528: LD_ADDR_VAR 0 12
8532: PUSH
8533: LD_INT 22
8535: PUSH
8536: LD_VAR 0 1
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 21
8547: PUSH
8548: LD_INT 3
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 30
8557: PUSH
8558: LD_INT 8
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8575: LD_ADDR_VAR 0 13
8579: PUSH
8580: LD_INT 1
8582: PPUSH
8583: LD_VAR 0 12
8587: PPUSH
8588: CALL_OW 12
8592: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8593: LD_VAR 0 7
8597: PPUSH
8598: LD_INT 3
8600: PUSH
8601: LD_INT 60
8603: PUSH
8604: EMPTY
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 72
8615: PPUSH
8616: LD_VAR 0 12
8620: PUSH
8621: LD_VAR 0 13
8625: ARRAY
8626: PPUSH
8627: CALL_OW 120
// end ; end ;
8631: LD_VAR 0 5
8635: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8636: LD_INT 0
8638: PPUSH
8639: PPUSH
8640: PPUSH
8641: PPUSH
8642: PPUSH
// tmp := [ ] ;
8643: LD_ADDR_VAR 0 6
8647: PUSH
8648: EMPTY
8649: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8650: LD_ADDR_VAR 0 7
8654: PUSH
8655: LD_INT 22
8657: PUSH
8658: LD_VAR 0 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 30
8669: PUSH
8670: LD_INT 32
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PPUSH
8681: CALL_OW 69
8685: ST_TO_ADDR
// if bunkers then
8686: LD_VAR 0 7
8690: IFFALSE 8760
// for i in bunkers do
8692: LD_ADDR_VAR 0 4
8696: PUSH
8697: LD_VAR 0 7
8701: PUSH
8702: FOR_IN
8703: IFFALSE 8758
// for j in UnitsInside ( i ) do
8705: LD_ADDR_VAR 0 5
8709: PUSH
8710: LD_VAR 0 4
8714: PPUSH
8715: CALL_OW 313
8719: PUSH
8720: FOR_IN
8721: IFFALSE 8754
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8723: LD_ADDR_VAR 0 6
8727: PUSH
8728: LD_VAR 0 6
8732: PPUSH
8733: LD_VAR 0 6
8737: PUSH
8738: LD_INT 1
8740: PLUS
8741: PPUSH
8742: LD_VAR 0 5
8746: PPUSH
8747: CALL_OW 1
8751: ST_TO_ADDR
8752: GO 8720
8754: POP
8755: POP
8756: GO 8702
8758: POP
8759: POP
// if tmp then
8760: LD_VAR 0 6
8764: IFFALSE 8804
// begin ComExitBuilding ( tmp ) ;
8766: LD_VAR 0 6
8770: PPUSH
8771: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8775: LD_VAR 0 6
8779: PPUSH
8780: LD_VAR 0 2
8784: PPUSH
8785: CALL_OW 250
8789: PPUSH
8790: LD_VAR 0 2
8794: PPUSH
8795: CALL_OW 251
8799: PPUSH
8800: CALL_OW 174
// end ; end ;
8804: LD_VAR 0 3
8808: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8809: LD_INT 0
8811: PPUSH
8812: PPUSH
8813: PPUSH
// enable ;
8814: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 435
8829: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8830: LD_ADDR_VAR 0 5
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_VAR 0 1
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 34
8849: PUSH
8850: LD_VAR 0 2
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 69
8867: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8868: LD_VAR 0 5
8872: PUSH
8873: LD_VAR 0 3
8877: PPUSH
8878: CALL_OW 435
8882: AND
8883: PUSH
8884: LD_VAR 0 6
8888: AND
8889: IFFALSE 8922
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8891: LD_VAR 0 5
8895: PUSH
8896: LD_INT 1
8898: ARRAY
8899: PPUSH
8900: LD_VAR 0 6
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 6
8913: PUSH
8914: LD_INT 2
8916: ARRAY
8917: PPUSH
8918: CALL_OW 177
// end ;
8922: LD_VAR 0 4
8926: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8927: LD_INT 0
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: LD_VAR 0 2
8946: PPUSH
8947: LD_INT 22
8949: PUSH
8950: LD_VAR 0 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 56
8961: PUSH
8962: EMPTY
8963: LIST
8964: PUSH
8965: LD_INT 24
8967: PUSH
8968: LD_INT 700
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 3
8977: PUSH
8978: LD_INT 60
8980: PUSH
8981: EMPTY
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 2
8990: PUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 25
9003: PUSH
9004: LD_INT 5
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 25
9013: PUSH
9014: LD_INT 8
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 25
9023: PUSH
9024: LD_INT 9
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 70
9049: PUSH
9050: LD_EXP 48
9054: PUSH
9055: LD_EXP 49
9059: UNION
9060: DIFF
9061: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9062: LD_ADDR_VAR 0 7
9066: PUSH
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 22
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 32
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 58
9096: PUSH
9097: EMPTY
9098: LIST
9099: PUSH
9100: LD_INT 24
9102: PUSH
9103: LD_INT 251
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9121: LD_ADDR_VAR 0 9
9125: PUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: LD_INT 22
9133: PUSH
9134: LD_VAR 0 1
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 2
9145: PUSH
9146: LD_INT 30
9148: PUSH
9149: LD_INT 4
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 30
9158: PUSH
9159: LD_INT 5
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 24
9173: PUSH
9174: LD_INT 251
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL_OW 70
9190: ST_TO_ADDR
// if barrackList then
9191: LD_VAR 0 9
9195: IFFALSE 9351
// begin if turretList = 0 then
9197: LD_VAR 0 7
9201: PUSH
9202: LD_INT 0
9204: EQUAL
9205: IFFALSE 9243
// begin if soldiersList then
9207: LD_VAR 0 6
9211: IFFALSE 9241
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9213: LD_VAR 0 6
9217: PPUSH
9218: LD_VAR 0 9
9222: PUSH
9223: LD_INT 1
9225: PPUSH
9226: LD_VAR 0 9
9230: PPUSH
9231: CALL_OW 12
9235: ARRAY
9236: PPUSH
9237: CALL_OW 120
// end else
9241: GO 9351
// begin for i in barrackList do
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: LD_VAR 0 9
9252: PUSH
9253: FOR_IN
9254: IFFALSE 9349
// begin if not turretList then
9256: LD_VAR 0 7
9260: NOT
9261: IFFALSE 9267
// exit ;
9263: POP
9264: POP
9265: GO 9351
// insideUnits = UnitsInside ( i ) ;
9267: LD_ADDR_VAR 0 10
9271: PUSH
9272: LD_VAR 0 4
9276: PPUSH
9277: CALL_OW 313
9281: ST_TO_ADDR
// if insideUnits then
9282: LD_VAR 0 10
9286: IFFALSE 9347
// begin tmp := insideUnits [ 1 ] ;
9288: LD_ADDR_VAR 0 8
9292: PUSH
9293: LD_VAR 0 10
9297: PUSH
9298: LD_INT 1
9300: ARRAY
9301: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9302: LD_VAR 0 8
9306: PPUSH
9307: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9311: LD_VAR 0 8
9315: PPUSH
9316: LD_VAR 0 7
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9329: LD_ADDR_VAR 0 7
9333: PUSH
9334: LD_VAR 0 7
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 3
9346: ST_TO_ADDR
// end ; end ;
9347: GO 9253
9349: POP
9350: POP
// end ; end ; end ;
9351: LD_VAR 0 3
9355: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9356: LD_INT 0
9358: PPUSH
9359: PPUSH
9360: PPUSH
9361: PPUSH
9362: PPUSH
9363: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9364: LD_ADDR_VAR 0 8
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 2
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 34
9393: PUSH
9394: LD_INT 52
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: ST_TO_ADDR
// if not craneList then
9411: LD_VAR 0 8
9415: NOT
9416: IFFALSE 9420
// exit ;
9418: GO 9854
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9420: LD_ADDR_VAR 0 9
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_VAR 0 1
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 21
9439: PUSH
9440: LD_INT 3
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 3
9449: PUSH
9450: LD_INT 24
9452: PUSH
9453: LD_INT 1000
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9477: LD_VAR 0 9
9481: PUSH
9482: LD_VAR 0 8
9486: PPUSH
9487: LD_INT 24
9489: PUSH
9490: LD_INT 750
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 72
9501: AND
9502: IFFALSE 9537
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9504: LD_VAR 0 8
9508: PPUSH
9509: LD_INT 24
9511: PUSH
9512: LD_INT 750
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PPUSH
9519: CALL_OW 72
9523: PPUSH
9524: LD_VAR 0 9
9528: PUSH
9529: LD_INT 1
9531: ARRAY
9532: PPUSH
9533: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9537: LD_VAR 0 8
9541: PPUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 24
9547: PUSH
9548: LD_INT 750
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: IFFALSE 9601
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9565: LD_VAR 0 8
9569: PPUSH
9570: LD_INT 3
9572: PUSH
9573: LD_INT 24
9575: PUSH
9576: LD_INT 750
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PPUSH
9587: CALL_OW 72
9591: PPUSH
9592: LD_VAR 0 2
9596: PPUSH
9597: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9601: LD_VAR 0 8
9605: PUSH
9606: LD_VAR 0 9
9610: PUSH
9611: LD_INT 0
9613: EQUAL
9614: AND
9615: PUSH
9616: LD_VAR 0 3
9620: AND
9621: IFFALSE 9668
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9623: LD_VAR 0 8
9627: PPUSH
9628: LD_VAR 0 3
9632: PUSH
9633: LD_INT 1
9635: ARRAY
9636: PPUSH
9637: LD_VAR 0 3
9641: PUSH
9642: LD_INT 2
9644: ARRAY
9645: PPUSH
9646: LD_VAR 0 3
9650: PUSH
9651: LD_INT 3
9653: ARRAY
9654: PPUSH
9655: LD_VAR 0 3
9659: PUSH
9660: LD_INT 4
9662: ARRAY
9663: PPUSH
9664: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9668: LD_ADDR_VAR 0 7
9672: PUSH
9673: LD_VAR 0 2
9677: PPUSH
9678: LD_INT 22
9680: PUSH
9681: LD_VAR 0 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 52
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 3
9712: PUSH
9713: LD_INT 24
9715: PUSH
9716: LD_INT 750
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 70
9737: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9738: LD_ADDR_VAR 0 6
9742: PUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: LD_INT 22
9750: PUSH
9751: LD_VAR 0 1
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 30
9765: PUSH
9766: LD_INT 0
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 30
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 70
9796: ST_TO_ADDR
// if crane then
9797: LD_VAR 0 7
9801: IFFALSE 9854
// for i in crane do
9803: LD_ADDR_VAR 0 5
9807: PUSH
9808: LD_VAR 0 7
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9852
// begin if dep then
9816: LD_VAR 0 6
9820: IFFALSE 9836
// ComMoveUnit ( i , dep ) ;
9822: LD_VAR 0 5
9826: PPUSH
9827: LD_VAR 0 6
9831: PPUSH
9832: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9836: LD_VAR 0 5
9840: PPUSH
9841: CALL_OW 311
9845: PPUSH
9846: CALL 80277 0 1
// end ;
9850: GO 9813
9852: POP
9853: POP
// end ;
9854: LD_VAR 0 4
9858: RET
// export function BuildBulldozer ; begin
9859: LD_INT 0
9861: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9862: LD_INT 17
9864: PPUSH
9865: CALL_OW 302
9869: NOT
9870: PUSH
9871: LD_INT 17
9873: PPUSH
9874: CALL_OW 255
9878: PUSH
9879: LD_INT 3
9881: NONEQUAL
9882: OR
9883: IFFALSE 9887
// exit ;
9885: GO 9906
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9887: LD_INT 17
9889: PPUSH
9890: LD_INT 24
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: LD_INT 53
9901: PPUSH
9902: CALL_OW 185
// end ;
9906: LD_VAR 0 1
9910: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9911: LD_INT 0
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
// if not bulldozer then
9918: LD_VAR 0 1
9922: NOT
9923: IFFALSE 9927
// exit ;
9925: GO 10209
// list := ListEnvironmentArea ( area ) ;
9927: LD_ADDR_VAR 0 5
9931: PUSH
9932: LD_VAR 0 2
9936: PPUSH
9937: CALL_OW 353
9941: ST_TO_ADDR
// tmp := [ ] ;
9942: LD_ADDR_VAR 0 6
9946: PUSH
9947: EMPTY
9948: ST_TO_ADDR
// for i = 1 to list do
9949: LD_ADDR_VAR 0 4
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_VAR 0 5
9963: PUSH
9964: FOR_TO
9965: IFFALSE 10063
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9967: LD_VAR 0 5
9971: PUSH
9972: LD_VAR 0 4
9976: ARRAY
9977: PUSH
9978: LD_INT 1
9980: ARRAY
9981: PPUSH
9982: LD_VAR 0 5
9986: PUSH
9987: LD_VAR 0 4
9991: ARRAY
9992: PUSH
9993: LD_INT 2
9995: ARRAY
9996: PPUSH
9997: CALL_OW 554
10001: IFFALSE 10061
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10003: LD_ADDR_VAR 0 6
10007: PUSH
10008: LD_VAR 0 6
10012: PPUSH
10013: LD_VAR 0 6
10017: PUSH
10018: LD_INT 1
10020: PLUS
10021: PPUSH
10022: LD_VAR 0 5
10026: PUSH
10027: LD_VAR 0 4
10031: ARRAY
10032: PUSH
10033: LD_INT 1
10035: ARRAY
10036: PUSH
10037: LD_VAR 0 5
10041: PUSH
10042: LD_VAR 0 4
10046: ARRAY
10047: PUSH
10048: LD_INT 2
10050: ARRAY
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 1
10060: ST_TO_ADDR
// end ;
10061: GO 9964
10063: POP
10064: POP
// ComStop ( bulldozer ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10074: LD_ADDR_VAR 0 7
10078: PUSH
10079: LD_VAR 0 1
10083: PPUSH
10084: CALL_OW 250
10088: PUSH
10089: LD_VAR 0 1
10093: PPUSH
10094: CALL_OW 251
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: ST_TO_ADDR
// for i = tmp downto 1 do
10103: LD_ADDR_VAR 0 4
10107: PUSH
10108: DOUBLE
10109: LD_VAR 0 6
10113: INC
10114: ST_TO_ADDR
10115: LD_INT 1
10117: PUSH
10118: FOR_DOWNTO
10119: IFFALSE 10207
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10121: LD_ADDR_VAR 0 7
10125: PUSH
10126: LD_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: ARRAY
10134: PPUSH
10135: LD_VAR 0 7
10139: PUSH
10140: LD_INT 2
10142: ARRAY
10143: PPUSH
10144: LD_VAR 0 6
10148: PPUSH
10149: CALL 10310 0 3
10153: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_VAR 0 7
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_VAR 0 7
10172: PUSH
10173: LD_INT 2
10175: ARRAY
10176: PPUSH
10177: CALL 10214 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10181: LD_ADDR_VAR 0 6
10185: PUSH
10186: LD_VAR 0 6
10190: PPUSH
10191: LD_VAR 0 7
10195: PUSH
10196: LD_INT 3
10198: ARRAY
10199: PPUSH
10200: CALL_OW 3
10204: ST_TO_ADDR
// end ;
10205: GO 10118
10207: POP
10208: POP
// end ;
10209: LD_VAR 0 3
10213: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10214: LD_INT 0
10216: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10217: LD_VAR 0 2
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: CALL_OW 351
10231: PUSH
10232: LD_VAR 0 2
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: CALL_OW 554
10246: AND
10247: PUSH
10248: LD_VAR 0 2
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: CALL_OW 488
10262: AND
10263: PUSH
10264: LD_VAR 0 2
10268: PPUSH
10269: LD_VAR 0 3
10273: PPUSH
10274: CALL_OW 428
10278: PUSH
10279: LD_INT 1
10281: NEG
10282: EQUAL
10283: AND
10284: IFFALSE 10305
// AddComMoveXY ( bulldozer , x , y ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: CALL_OW 171
// end ;
10305: LD_VAR 0 4
10309: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10310: LD_INT 0
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
// dist := 99999 ;
10319: LD_ADDR_VAR 0 6
10323: PUSH
10324: LD_INT 99999
10326: ST_TO_ADDR
// for i = 1 to list do
10327: LD_ADDR_VAR 0 5
10331: PUSH
10332: DOUBLE
10333: LD_INT 1
10335: DEC
10336: ST_TO_ADDR
10337: LD_VAR 0 3
10341: PUSH
10342: FOR_TO
10343: IFFALSE 10481
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10345: LD_ADDR_VAR 0 7
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: LD_VAR 0 2
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_VAR 0 5
10369: ARRAY
10370: PUSH
10371: LD_INT 1
10373: ARRAY
10374: PPUSH
10375: LD_VAR 0 3
10379: PUSH
10380: LD_VAR 0 5
10384: ARRAY
10385: PUSH
10386: LD_INT 2
10388: ARRAY
10389: PPUSH
10390: CALL_OW 298
10394: ST_TO_ADDR
// if d = 0 then
10395: LD_VAR 0 7
10399: PUSH
10400: LD_INT 0
10402: EQUAL
10403: IFFALSE 10407
// continue ;
10405: GO 10342
// if d < dist then
10407: LD_VAR 0 7
10411: PUSH
10412: LD_VAR 0 6
10416: LESS
10417: IFFALSE 10479
// begin _x := list [ i ] [ 1 ] ;
10419: LD_ADDR_VAR 0 8
10423: PUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_VAR 0 5
10433: ARRAY
10434: PUSH
10435: LD_INT 1
10437: ARRAY
10438: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10439: LD_ADDR_VAR 0 9
10443: PUSH
10444: LD_VAR 0 3
10448: PUSH
10449: LD_VAR 0 5
10453: ARRAY
10454: PUSH
10455: LD_INT 2
10457: ARRAY
10458: ST_TO_ADDR
// _i := i ;
10459: LD_ADDR_VAR 0 10
10463: PUSH
10464: LD_VAR 0 5
10468: ST_TO_ADDR
// dist := d ;
10469: LD_ADDR_VAR 0 6
10473: PUSH
10474: LD_VAR 0 7
10478: ST_TO_ADDR
// end ; end ;
10479: GO 10342
10481: POP
10482: POP
// result := [ _x , _y , _i , dist ] ;
10483: LD_ADDR_VAR 0 4
10487: PUSH
10488: LD_VAR 0 8
10492: PUSH
10493: LD_VAR 0 9
10497: PUSH
10498: LD_VAR 0 10
10502: PUSH
10503: LD_VAR 0 6
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: ST_TO_ADDR
// end ; end_of_file
10514: LD_VAR 0 4
10518: RET
// export function Action ; begin
10519: LD_INT 0
10521: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10522: LD_INT 66
10524: PPUSH
10525: LD_INT 4
10527: PPUSH
10528: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10532: LD_INT 22
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: PUSH
10561: LD_INT 0
10563: EQUAL
10564: IFFALSE 10578
// SetClass ( JMM , 2 ) ;
10566: LD_EXP 1
10570: PPUSH
10571: LD_INT 2
10573: PPUSH
10574: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10578: LD_STRING M1
10580: PPUSH
10581: CALL_OW 337
// case Difficulty of 1 :
10585: LD_OWVAR 67
10589: PUSH
10590: LD_INT 1
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10608
10598: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10599: LD_STRING M1-1
10601: PPUSH
10602: CALL_OW 337
10606: GO 10651
10608: LD_INT 2
10610: DOUBLE
10611: EQUAL
10612: IFTRUE 10616
10614: GO 10626
10616: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10617: LD_STRING M1-2
10619: PPUSH
10620: CALL_OW 337
10624: GO 10651
10626: LD_INT 3
10628: DOUBLE
10629: GREATEREQUAL
10630: IFFALSE 10638
10632: LD_INT 4
10634: DOUBLE
10635: LESSEQUAL
10636: IFTRUE 10640
10638: GO 10650
10640: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10641: LD_STRING M1-3
10643: PPUSH
10644: CALL_OW 337
10648: GO 10651
10650: POP
// ChangeMissionObjectives ( M1cont ) ;
10651: LD_STRING M1cont
10653: PPUSH
10654: CALL_OW 337
// SaveForQuickRestart ;
10658: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10662: LD_INT 525
10664: PPUSH
10665: LD_INT 700
10667: PPUSH
10668: CALL_OW 12
10672: PPUSH
10673: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10677: LD_INT 5
10679: PPUSH
10680: LD_INT 82
10682: PPUSH
10683: LD_INT 38
10685: PPUSH
10686: LD_INT 10
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 56
// wait ( 0 0$14 ) ;
10696: LD_INT 490
10698: PPUSH
10699: CALL_OW 67
// firstCrateSpawn := true ;
10703: LD_ADDR_EXP 41
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// end ;
10711: LD_VAR 0 1
10715: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10716: LD_EXP 41
10720: IFFALSE 11109
10722: GO 10724
10724: DISABLE
10725: LD_INT 0
10727: PPUSH
// begin if IsOk ( Lisa ) then
10728: LD_EXP 2
10732: PPUSH
10733: CALL_OW 302
10737: IFFALSE 10753
// Say ( Lisa , DR0-Lisa-1 ) else
10739: LD_EXP 2
10743: PPUSH
10744: LD_STRING DR0-Lisa-1
10746: PPUSH
10747: CALL_OW 88
10751: GO 10899
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10753: LD_INT 22
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 26
10775: PUSH
10776: LD_INT 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: PUSH
10844: LD_EXP 1
10848: PUSH
10849: LD_EXP 8
10853: PUSH
10854: LD_EXP 5
10858: PUSH
10859: LD_EXP 6
10863: PUSH
10864: LD_EXP 7
10868: PUSH
10869: LD_EXP 4
10873: PUSH
10874: LD_EXP 3
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: DIFF
10888: PPUSH
10889: LD_STRING DR0-Sol1-1
10891: PPUSH
10892: LD_STRING DR0-Sol1-1
10894: PPUSH
10895: CALL 6816 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10899: LD_ADDR_VAR 0 1
10903: PUSH
10904: LD_INT 22
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 1
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: LD_INT 26
10926: PUSH
10927: LD_INT 1
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 2
10936: PUSH
10937: LD_INT 25
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 25
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 3
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PPUSH
10990: CALL_OW 69
10994: PUSH
10995: LD_EXP 1
10999: PUSH
11000: LD_EXP 8
11004: PUSH
11005: LD_EXP 5
11009: PUSH
11010: LD_EXP 2
11014: PUSH
11015: LD_EXP 6
11019: PUSH
11020: LD_EXP 7
11024: PUSH
11025: LD_EXP 4
11029: PUSH
11030: LD_EXP 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: DIFF
11045: PPUSH
11046: LD_STRING DR0-Sol2-1
11048: PPUSH
11049: LD_STRING DR0-Sol2-1
11051: PPUSH
11052: CALL 6816 0 3
11056: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11057: LD_EXP 4
11061: PPUSH
11062: CALL_OW 302
11066: IFFALSE 11080
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11068: LD_EXP 4
11072: PPUSH
11073: LD_STRING DR0-Cyrus-1
11075: PPUSH
11076: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11080: LD_EXP 2
11084: PPUSH
11085: CALL_OW 302
11089: PUSH
11090: LD_VAR 0 1
11094: OR
11095: IFFALSE 11109
// Say ( JMM , DR0-JMM-1 ) ;
11097: LD_EXP 1
11101: PPUSH
11102: LD_STRING DR0-JMM-1
11104: PPUSH
11105: CALL_OW 88
// end ;
11109: PPOPN 1
11111: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11112: LD_EXP 5
11116: PPUSH
11117: CALL_OW 302
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 1
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 25
11134: PUSH
11135: LD_INT 16
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 69
11150: PUSH
11151: LD_INT 0
11153: GREATER
11154: AND
11155: PUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 463
11163: NOT
11164: AND
11165: IFFALSE 11443
11167: GO 11169
11169: DISABLE
// begin DialogueOn ;
11170: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11174: LD_EXP 5
11178: PPUSH
11179: LD_STRING D10-Frank-1
11181: PPUSH
11182: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11186: LD_INT 22
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 25
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 25
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 25
11231: PUSH
11232: LD_INT 3
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 25
11241: PUSH
11242: LD_INT 4
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: PUSH
11266: LD_EXP 1
11270: PUSH
11271: LD_EXP 5
11275: PUSH
11276: LD_EXP 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: DIFF
11286: PPUSH
11287: LD_STRING D10-Sol1-1
11289: PPUSH
11290: LD_STRING D10-FSol1-1
11292: PPUSH
11293: CALL 6816 0 3
// Say ( Frank , D10-Frank-2 ) ;
11297: LD_EXP 5
11301: PPUSH
11302: LD_STRING D10-Frank-2
11304: PPUSH
11305: CALL_OW 88
// if IsOk ( Lisa ) then
11309: LD_EXP 2
11313: PPUSH
11314: CALL_OW 302
11318: IFFALSE 11334
// Say ( Lisa , D10-Lisa-2 ) else
11320: LD_EXP 2
11324: PPUSH
11325: LD_STRING D10-Lisa-2
11327: PPUSH
11328: CALL_OW 88
11332: GO 11439
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11334: LD_INT 22
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: LD_INT 25
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 25
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 25
11379: PUSH
11380: LD_INT 3
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 25
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 69
11413: PUSH
11414: LD_EXP 1
11418: PUSH
11419: LD_EXP 5
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: DIFF
11428: PPUSH
11429: LD_STRING D10-Sol1-2
11431: PPUSH
11432: LD_STRING D10-FSol1-2
11434: PPUSH
11435: CALL 6816 0 3
// DialogueOff ;
11439: CALL_OW 7
// end ;
11443: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 463
11451: NOT
11452: IFFALSE 11735
11454: GO 11456
11456: DISABLE
// begin HarrisonSupport ;
11457: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11461: LD_EXP 18
11465: PPUSH
11466: CALL_OW 310
11470: PPUSH
11471: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11475: LD_EXP 18
11479: PPUSH
11480: LD_STRING DEng-Eng1-1
11482: PPUSH
11483: CALL_OW 88
// wait ( 1 1$0 ) ;
11487: LD_INT 2100
11489: PPUSH
11490: CALL_OW 67
// DialogueOn ;
11494: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11498: LD_EXP 15
11502: PPUSH
11503: LD_STRING DRem-Har-1
11505: PPUSH
11506: CALL_OW 94
// if contactWithRussian then
11510: LD_EXP 23
11514: IFFALSE 11530
// Say ( JMM , DRem-JMM-1 ) else
11516: LD_EXP 1
11520: PPUSH
11521: LD_STRING DRem-JMM-1
11523: PPUSH
11524: CALL_OW 88
11528: GO 11542
// Say ( JMM , DRem-JMM-1a ) ;
11530: LD_EXP 1
11534: PPUSH
11535: LD_STRING DRem-JMM-1a
11537: PPUSH
11538: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11542: LD_EXP 15
11546: PPUSH
11547: LD_STRING DRem-Har-2
11549: PPUSH
11550: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11554: LD_STRING DenisInDelta
11556: PPUSH
11557: LD_INT 0
11559: PPUSH
11560: CALL_OW 30
11564: IFFALSE 11580
// Say ( JMM , DRem-JMM-2 ) else
11566: LD_EXP 1
11570: PPUSH
11571: LD_STRING DRem-JMM-2
11573: PPUSH
11574: CALL_OW 88
11578: GO 11592
// Say ( JMM , DRem-JMM-2a ) ;
11580: LD_EXP 1
11584: PPUSH
11585: LD_STRING DRem-JMM-2a
11587: PPUSH
11588: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11592: LD_EXP 15
11596: PPUSH
11597: LD_STRING DRem-Har-3
11599: PPUSH
11600: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11604: LD_EXP 1
11608: PPUSH
11609: LD_STRING DRem-JMM-3
11611: PPUSH
11612: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11616: LD_EXP 15
11620: PPUSH
11621: LD_STRING DRem-Har-4
11623: PPUSH
11624: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11628: LD_STRING DenisInDelta
11630: PPUSH
11631: LD_INT 0
11633: PPUSH
11634: CALL_OW 30
11638: IFFALSE 11698
// begin Say ( JMM , DRem-JMM-4 ) ;
11640: LD_EXP 1
11644: PPUSH
11645: LD_STRING DRem-JMM-4
11647: PPUSH
11648: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11652: LD_EXP 15
11656: PPUSH
11657: LD_STRING DRem-Har-5
11659: PPUSH
11660: CALL_OW 94
// DialogueOff ;
11664: CALL_OW 7
// wait ( 4 4$00 ) ;
11668: LD_INT 8400
11670: PPUSH
11671: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11675: LD_INT 35
11677: PPUSH
11678: CALL_OW 67
// until not InBattle ( 1 ) ;
11682: LD_INT 1
11684: PPUSH
11685: CALL_OW 463
11689: NOT
11690: IFFALSE 11675
// SpawnDenis ;
11692: CALL 11736 0 0
// end else
11696: GO 11735
// begin DialogueOff ;
11698: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11702: LD_INT 36
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11715: LD_INT 15
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11728: LD_STRING MR
11730: PPUSH
11731: CALL_OW 337
// end ; end ;
11735: END
// export function SpawnDenis ; var tmp ; begin
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
// PrepareDenis ;
11740: CALL 2244 0 0
// if not Denis then
11744: LD_EXP 9
11748: NOT
11749: IFFALSE 11753
// exit ;
11751: GO 11974
// CenterNowOnUnits ( Denis ) ;
11753: LD_EXP 9
11757: PPUSH
11758: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_INT 1
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11782: LD_EXP 9
11786: PPUSH
11787: LD_VAR 0 2
11791: PPUSH
11792: LD_EXP 9
11796: PPUSH
11797: CALL_OW 74
11801: PPUSH
11802: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11806: LD_INT 35
11808: PPUSH
11809: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11813: LD_INT 22
11815: PUSH
11816: LD_INT 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 91
11825: PUSH
11826: LD_EXP 9
11830: PUSH
11831: LD_INT 10
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 69
11847: IFFALSE 11806
// SetSide ( Denis , 1 ) ;
11849: LD_EXP 9
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 235
// DialogueOn ;
11861: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11865: LD_EXP 9
11869: PPUSH
11870: LD_STRING DDen-Den-1
11872: PPUSH
11873: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11877: LD_EXP 1
11881: PPUSH
11882: LD_STRING DDen-JMM-1
11884: PPUSH
11885: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11889: LD_EXP 9
11893: PPUSH
11894: LD_STRING DDen-Den-2
11896: PPUSH
11897: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING DDen-JMM-2
11908: PPUSH
11909: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11913: LD_EXP 9
11917: PPUSH
11918: LD_STRING DDen-Den-3
11920: PPUSH
11921: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11925: LD_EXP 1
11929: PPUSH
11930: LD_STRING DDen-JMM-3
11932: PPUSH
11933: CALL_OW 88
// DialogueOff ;
11937: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11941: LD_INT 36
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11954: LD_INT 15
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11967: LD_STRING MR
11969: PPUSH
11970: CALL_OW 337
// end ;
11974: LD_VAR 0 1
11978: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11979: LD_INT 22
11981: PUSH
11982: LD_INT 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 30
11991: PUSH
11992: LD_INT 15
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: PUSH
12008: LD_EXP 9
12012: PPUSH
12013: CALL_OW 302
12017: AND
12018: PUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 463
12026: NOT
12027: AND
12028: IFFALSE 12057
12030: GO 12032
12032: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12033: LD_EXP 9
12037: PPUSH
12038: LD_STRING DR1-Den-1
12040: PPUSH
12041: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12045: LD_EXP 1
12049: PPUSH
12050: LD_STRING DR1-JMM-1
12052: PPUSH
12053: CALL_OW 88
// end ;
12057: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12058: LD_INT 15
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 321
12068: PUSH
12069: LD_INT 2
12071: EQUAL
12072: PUSH
12073: LD_EXP 9
12077: PPUSH
12078: CALL_OW 302
12082: AND
12083: PUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 463
12091: NOT
12092: AND
12093: IFFALSE 12302
12095: GO 12097
12097: DISABLE
// begin DialogueOn ;
12098: CALL_OW 6
// if IsOK ( Denis ) then
12102: LD_EXP 9
12106: PPUSH
12107: CALL_OW 302
12111: IFFALSE 12127
// Say ( Denis , DR2-Den-1 ) else
12113: LD_EXP 9
12117: PPUSH
12118: LD_STRING DR2-Den-1
12120: PPUSH
12121: CALL_OW 88
12125: GO 12186
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12127: LD_INT 22
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 21
12139: PUSH
12140: LD_INT 1
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 25
12149: PUSH
12150: LD_INT 4
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 69
12166: PUSH
12167: LD_EXP 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: DIFF
12175: PPUSH
12176: LD_STRING DR2-Sci1-1
12178: PPUSH
12179: LD_STRING DR2-FSci1-1
12181: PPUSH
12182: CALL 6816 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING DR2-JMM-1
12193: PPUSH
12194: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 21
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 26
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 23
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PUSH
12249: LD_EXP 1
12253: PUSH
12254: LD_EXP 9
12258: PUSH
12259: LD_EXP 8
12263: PUSH
12264: LD_EXP 5
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: DIFF
12275: PPUSH
12276: LD_STRING DR2-Sol1-1
12278: PPUSH
12279: LD_STRING 
12281: PPUSH
12282: CALL 6816 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12286: LD_EXP 1
12290: PPUSH
12291: LD_STRING DR2-JMM-2
12293: PPUSH
12294: CALL_OW 88
// DialogueOff ;
12298: CALL_OW 7
// end ;
12302: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12303: LD_INT 22
12305: PUSH
12306: LD_INT 1
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 36
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: PUSH
12332: LD_INT 0
12334: EQUAL
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 33
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: PPUSH
12371: CALL_OW 69
12375: PUSH
12376: LD_INT 0
12378: GREATER
12379: AND
12380: PUSH
12381: LD_EXP 24
12385: PUSH
12386: LD_INT 0
12388: EQUAL
12389: AND
12390: PUSH
12391: LD_INT 1
12393: PPUSH
12394: CALL_OW 463
12398: NOT
12399: AND
12400: IFFALSE 12537
12402: GO 12404
12404: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12405: LD_INT 22
12407: PUSH
12408: LD_INT 1
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 25
12427: PUSH
12428: LD_INT 3
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 26
12437: PUSH
12438: LD_INT 1
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: LD_EXP 1
12460: PUSH
12461: LD_EXP 6
12465: PUSH
12466: LD_EXP 7
12470: PUSH
12471: LD_EXP 9
12475: PUSH
12476: LD_EXP 16
12480: PUSH
12481: LD_EXP 3
12485: PUSH
12486: LD_EXP 4
12490: PUSH
12491: LD_EXP 2
12495: PUSH
12496: LD_EXP 5
12500: PUSH
12501: LD_EXP 8
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: DIFF
12518: PPUSH
12519: LD_STRING D3a-Mech1-1
12521: PPUSH
12522: LD_STRING 
12524: PPUSH
12525: CALL 6816 0 3
// firstTower = 2 ;
12529: LD_ADDR_EXP 24
12533: PUSH
12534: LD_INT 2
12536: ST_TO_ADDR
// end ;
12537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12538: LD_INT 22
12540: PUSH
12541: LD_INT 3
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 69
12566: PUSH
12567: LD_INT 0
12569: EQUAL
12570: IFFALSE 12701
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
// begin stop_talking := true ;
12578: LD_ADDR_OWVAR 56
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12586: LD_ADDR_VAR 0 1
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 2
12613: PUSH
12614: LD_INT 25
12616: PUSH
12617: LD_INT 1
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 2
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 25
12646: PUSH
12647: LD_INT 4
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: FOR_IN
12672: IFFALSE 12691
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 7500
12684: PPUSH
12685: CALL_OW 591
12689: GO 12671
12691: POP
12692: POP
// stop_talking := false ;
12693: LD_ADDR_OWVAR 56
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// end ;
12701: PPOPN 1
12703: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12704: LD_INT 22
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 30
12716: PUSH
12717: LD_INT 36
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 69
12732: PUSH
12733: LD_INT 22
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 21
12745: PUSH
12746: LD_INT 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 33
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: PPUSH
12768: CALL_OW 69
12772: AND
12773: PUSH
12774: CALL 13326 0 0
12778: AND
12779: PUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 463
12787: NOT
12788: AND
12789: IFFALSE 13323
12791: GO 12793
12793: DISABLE
12794: LD_INT 0
12796: PPUSH
12797: PPUSH
12798: PPUSH
12799: PPUSH
12800: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12801: LD_ADDR_VAR 0 3
12805: PUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 1
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 36
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 69
12834: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12835: LD_ADDR_VAR 0 4
12839: PUSH
12840: LD_INT 22
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 2
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: LD_INT 33
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: PPUSH
12875: CALL_OW 69
12879: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12880: LD_ADDR_VAR 0 5
12884: PUSH
12885: EMPTY
12886: ST_TO_ADDR
// for i in tmpControlTowers do
12887: LD_ADDR_VAR 0 1
12891: PUSH
12892: LD_VAR 0 3
12896: PUSH
12897: FOR_IN
12898: IFFALSE 13321
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12900: LD_EXP 1
12904: PPUSH
12905: CALL_OW 310
12909: PUSH
12910: LD_VAR 0 1
12914: EQUAL
12915: PUSH
12916: LD_EXP 1
12920: PPUSH
12921: CALL_OW 257
12925: PUSH
12926: LD_INT 3
12928: EQUAL
12929: AND
12930: IFFALSE 13064
// begin InGameOn ;
12932: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12936: LD_VAR 0 4
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12949: LD_EXP 1
12953: PPUSH
12954: LD_STRING D4a-JMM-1
12956: PPUSH
12957: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12961: LD_VAR 0 4
12965: PUSH
12966: LD_INT 1
12968: ARRAY
12969: PPUSH
12970: LD_EXP 1
12974: PPUSH
12975: CALL_OW 53
// wait ( 0 0$1 ) ;
12979: LD_INT 35
12981: PPUSH
12982: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12986: LD_VAR 0 4
12990: PUSH
12991: LD_INT 1
12993: ARRAY
12994: PPUSH
12995: LD_VAR 0 4
12999: PUSH
13000: LD_INT 1
13002: ARRAY
13003: PPUSH
13004: CALL_OW 250
13008: PUSH
13009: LD_INT 3
13011: PLUS
13012: PPUSH
13013: LD_VAR 0 4
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 251
13026: PUSH
13027: LD_INT 2
13029: MINUS
13030: PPUSH
13031: CALL_OW 111
// wait ( 0 0$2 ) ;
13035: LD_INT 70
13037: PPUSH
13038: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13042: LD_EXP 1
13046: PPUSH
13047: LD_STRING D4b-JMM-1
13049: PPUSH
13050: CALL_OW 88
// InGameOff ;
13054: CALL_OW 9
// exit ;
13058: POP
13059: POP
13060: GO 13323
// end else
13062: GO 13319
// begin InGameOn ;
13064: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13068: LD_ADDR_VAR 0 5
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 313
13082: PPUSH
13083: LD_INT 25
13085: PUSH
13086: LD_INT 3
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: ST_TO_ADDR
// if not tmpMechanicInside then
13098: LD_VAR 0 5
13102: NOT
13103: IFFALSE 13107
// continue ;
13105: GO 12897
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13107: LD_VAR 0 5
13111: PUSH
13112: LD_INT 1
13114: ARRAY
13115: PPUSH
13116: CALL_OW 258
13120: PUSH
13121: LD_INT 1
13123: EQUAL
13124: IFFALSE 13144
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13126: LD_VAR 0 5
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: LD_STRING D4a-Mech1-1
13137: PPUSH
13138: CALL_OW 88
13142: GO 13160
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13144: LD_VAR 0 5
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: LD_STRING D4a-FMech1-1
13155: PPUSH
13156: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13160: LD_VAR 0 4
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13173: LD_VAR 0 4
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PPUSH
13182: LD_VAR 0 5
13186: PUSH
13187: LD_INT 1
13189: ARRAY
13190: PPUSH
13191: CALL_OW 53
// wait ( 0 0$1 ) ;
13195: LD_INT 35
13197: PPUSH
13198: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13202: LD_VAR 0 4
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_VAR 0 4
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PPUSH
13220: CALL_OW 250
13224: PUSH
13225: LD_INT 3
13227: PLUS
13228: PPUSH
13229: LD_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 251
13242: PUSH
13243: LD_INT 2
13245: MINUS
13246: PPUSH
13247: CALL_OW 111
// wait ( 0 0$2 ) ;
13251: LD_INT 70
13253: PPUSH
13254: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13258: LD_VAR 0 5
13262: PUSH
13263: LD_INT 1
13265: ARRAY
13266: PPUSH
13267: CALL_OW 258
13271: PUSH
13272: LD_INT 1
13274: EQUAL
13275: IFFALSE 13295
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13277: LD_VAR 0 5
13281: PUSH
13282: LD_INT 1
13284: ARRAY
13285: PPUSH
13286: LD_STRING D4b-Mech1-1
13288: PPUSH
13289: CALL_OW 88
13293: GO 13311
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13295: LD_VAR 0 5
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: LD_STRING D4b-FMech1-1
13306: PPUSH
13307: CALL_OW 88
// InGameOff ;
13311: CALL_OW 9
// exit ;
13315: POP
13316: POP
13317: GO 13323
// end ; end ;
13319: GO 12897
13321: POP
13322: POP
// end ;
13323: PPOPN 5
13325: END
// function CheckMehInside ; var i , j , tmp ; begin
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
// result := false ;
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 30
13357: PUSH
13358: LD_INT 36
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PPUSH
13369: CALL_OW 69
13373: ST_TO_ADDR
// if not tmp then
13374: LD_VAR 0 4
13378: NOT
13379: IFFALSE 13383
// exit ;
13381: GO 13447
// for i in tmp do
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: LD_VAR 0 4
13392: PUSH
13393: FOR_IN
13394: IFFALSE 13445
// for j in UnitsInside ( i ) do
13396: LD_ADDR_VAR 0 3
13400: PUSH
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 313
13410: PUSH
13411: FOR_IN
13412: IFFALSE 13441
// if GetClass ( j ) = class_mechanic then
13414: LD_VAR 0 3
13418: PPUSH
13419: CALL_OW 257
13423: PUSH
13424: LD_INT 3
13426: EQUAL
13427: IFFALSE 13439
// begin result := true ;
13429: LD_ADDR_VAR 0 1
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// break ;
13437: GO 13441
// end ;
13439: GO 13411
13441: POP
13442: POP
13443: GO 13393
13445: POP
13446: POP
// end ;
13447: LD_VAR 0 1
13451: RET
// every 12 12$0 do
13452: GO 13454
13454: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13455: LD_INT 35
13457: PPUSH
13458: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 463
13469: NOT
13470: PUSH
13471: LD_INT 32
13473: PPUSH
13474: LD_INT 81
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 70
13488: NOT
13489: AND
13490: PUSH
13491: LD_EXP 27
13495: PUSH
13496: LD_INT 10500
13498: LESS
13499: OR
13500: IFFALSE 13455
// PrepareKurt ;
13502: CALL 16135 0 0
// end ;
13506: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13507: LD_EXP 16
13511: PPUSH
13512: CALL_OW 302
13516: PUSH
13517: LD_EXP 16
13521: PPUSH
13522: CALL_OW 255
13526: PUSH
13527: LD_INT 1
13529: EQUAL
13530: AND
13531: PUSH
13532: LD_EXP 2
13536: AND
13537: IFFALSE 13702
13539: GO 13541
13541: DISABLE
// begin wait ( 0 0$50 ) ;
13542: LD_INT 1750
13544: PPUSH
13545: CALL_OW 67
// if not IsOk ( Joan ) then
13549: LD_EXP 16
13553: PPUSH
13554: CALL_OW 302
13558: NOT
13559: IFFALSE 13563
// exit ;
13561: GO 13702
// if IsOK ( Lisa ) then
13563: LD_EXP 2
13567: PPUSH
13568: CALL_OW 302
13572: IFFALSE 13702
// begin DialogueOn ;
13574: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13578: LD_EXP 2
13582: PPUSH
13583: LD_STRING D7-Lisa-1
13585: PPUSH
13586: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13590: LD_EXP 1
13594: PPUSH
13595: LD_STRING D7-JMM-1
13597: PPUSH
13598: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13602: LD_EXP 2
13606: PPUSH
13607: LD_STRING D7-Lisa-2
13609: PPUSH
13610: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13614: LD_EXP 1
13618: PPUSH
13619: LD_STRING D7-JMM-2
13621: PPUSH
13622: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13626: LD_EXP 2
13630: PPUSH
13631: LD_STRING D7-Lisa-3
13633: PPUSH
13634: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13638: LD_EXP 1
13642: PPUSH
13643: LD_STRING D7-JMM-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13650: LD_EXP 2
13654: PPUSH
13655: LD_STRING D7-Lisa-4
13657: PPUSH
13658: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13662: LD_EXP 1
13666: PPUSH
13667: LD_STRING D7-JMM-4
13669: PPUSH
13670: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13674: LD_EXP 1
13678: PPUSH
13679: LD_STRING D7-JMM-4a
13681: PPUSH
13682: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13686: LD_EXP 2
13690: PPUSH
13691: LD_STRING D7-Lisa-5
13693: PPUSH
13694: CALL_OW 88
// DialogueOff ;
13698: CALL_OW 7
// end ; end ;
13702: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13703: LD_EXP 14
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_INT 1
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 91
13720: PUSH
13721: LD_EXP 14
13725: PUSH
13726: LD_INT 10
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 2
13736: PUSH
13737: LD_INT 25
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 25
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 25
13759: PUSH
13760: LD_INT 3
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 25
13769: PUSH
13770: LD_INT 4
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: PUSH
13794: LD_INT 1
13796: GREATER
13797: AND
13798: IFFALSE 13815
13800: GO 13802
13802: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13803: LD_EXP 14
13807: PPUSH
13808: LD_STRING D5-Sol1-1
13810: PPUSH
13811: CALL_OW 88
13815: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13816: LD_INT 22
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 33
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: PUSH
13845: LD_INT 2
13847: GREATEREQUAL
13848: IFFALSE 13868
13850: GO 13852
13852: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13853: LD_STRING MRa
13855: PPUSH
13856: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13860: LD_ADDR_EXP 29
13864: PUSH
13865: LD_INT 1
13867: ST_TO_ADDR
// end ;
13868: END
// every 2 2$00 do var i , last ;
13869: GO 13871
13871: DISABLE
13872: LD_INT 0
13874: PPUSH
13875: PPUSH
// begin last := 8 ;
13876: LD_ADDR_VAR 0 2
13880: PUSH
13881: LD_INT 8
13883: ST_TO_ADDR
// for i = 1 to last do
13884: LD_ADDR_VAR 0 1
13888: PUSH
13889: DOUBLE
13890: LD_INT 1
13892: DEC
13893: ST_TO_ADDR
13894: LD_VAR 0 2
13898: PUSH
13899: FOR_TO
13900: IFFALSE 13928
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13902: LD_INT 6300
13904: PPUSH
13905: LD_INT 12600
13907: PPUSH
13908: CALL_OW 12
13912: PPUSH
13913: CALL_OW 67
// PrepareRandoms ( i ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL 4123 0 1
// end ;
13926: GO 13899
13928: POP
13929: POP
// end ;
13930: PPOPN 2
13932: END
// every 5 5$20 do
13933: GO 13935
13935: DISABLE
// begin DialogueOn ;
13936: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13940: LD_EXP 10
13944: PPUSH
13945: LD_STRING D12a-Sci-1
13947: PPUSH
13948: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D12a-JMM-1
13959: PPUSH
13960: CALL_OW 88
// DialogueOff ;
13964: CALL_OW 7
// cratesStatus := 1 ;
13968: LD_ADDR_EXP 39
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// end ;
13976: END
// every 13 13$0 do
13977: GO 13979
13979: DISABLE
// begin DialogueOn ;
13980: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13984: LD_EXP 10
13988: PPUSH
13989: LD_STRING D12b-Sci-1
13991: PPUSH
13992: CALL_OW 94
// DialogueOff ;
13996: CALL_OW 7
// cratesStatus := 2 ;
14000: LD_ADDR_EXP 39
14004: PUSH
14005: LD_INT 2
14007: ST_TO_ADDR
// BuildBulldozer ;
14008: CALL 9859 0 0
// end ;
14012: END
// every 32 32$0 do
14013: GO 14015
14015: DISABLE
// begin DialogueOn ;
14016: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14020: LD_EXP 10
14024: PPUSH
14025: LD_STRING D12c-Sci-1
14027: PPUSH
14028: CALL_OW 94
// DialogueOff ;
14032: CALL_OW 7
// wait ( 3 3$0 ) ;
14036: LD_INT 6300
14038: PPUSH
14039: CALL_OW 67
// DialogueOn ;
14043: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14047: LD_EXP 10
14051: PPUSH
14052: LD_STRING D12d-Sci-1
14054: PPUSH
14055: CALL_OW 94
// DialogueOff ;
14059: CALL_OW 7
// cratesStatus = 1 ;
14063: LD_ADDR_EXP 39
14067: PUSH
14068: LD_INT 1
14070: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14071: CALL 20332 0 0
// wait ( 2 2$30 ) ;
14075: LD_INT 5250
14077: PPUSH
14078: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14082: LD_INT 35
14084: PPUSH
14085: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14089: LD_INT 1
14091: PPUSH
14092: CALL_OW 463
14096: NOT
14097: PUSH
14098: LD_INT 32
14100: PPUSH
14101: LD_INT 81
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 70
14115: NOT
14116: AND
14117: PUSH
14118: LD_EXP 27
14122: PUSH
14123: LD_INT 6300
14125: LESS
14126: OR
14127: IFFALSE 14082
// PrepareJoan ;
14129: CALL 3079 0 0
// end ;
14133: END
// every 42 42$0 do
14134: GO 14136
14136: DISABLE
// begin DialogueOn ;
14137: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14141: LD_EXP 10
14145: PPUSH
14146: LD_STRING D12e-Sci-1
14148: PPUSH
14149: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14153: LD_EXP 1
14157: PPUSH
14158: LD_STRING D12e-JMM-1
14160: PPUSH
14161: CALL_OW 88
// DialogueOff ;
14165: CALL_OW 7
// cratesStatus := 2 ;
14169: LD_ADDR_EXP 39
14173: PUSH
14174: LD_INT 2
14176: ST_TO_ADDR
// end ; end_of_file
14177: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14178: LD_VAR 0 1
14182: PUSH
14183: LD_INT 1
14185: EQUAL
14186: PUSH
14187: LD_VAR 0 2
14191: PUSH
14192: LD_INT 3
14194: EQUAL
14195: AND
14196: IFFALSE 14206
// contactWithRussian := 1 ;
14198: LD_ADDR_EXP 23
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// end ;
14206: PPOPN 2
14208: END
// on BuildingComplete ( building ) do var i ;
14209: LD_INT 0
14211: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 266
14221: PUSH
14222: LD_INT 36
14224: EQUAL
14225: PUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 255
14235: PUSH
14236: LD_INT 1
14238: EQUAL
14239: AND
14240: PUSH
14241: LD_EXP 24
14245: PUSH
14246: LD_INT 0
14248: EQUAL
14249: AND
14250: IFFALSE 14330
// begin firstTower = 1 ;
14252: LD_ADDR_EXP 24
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14260: LD_INT 22
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 25
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 26
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: PUSH
14311: LD_EXP 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: DIFF
14319: PPUSH
14320: LD_STRING D3b-Mech1-1
14322: PPUSH
14323: LD_STRING D3b-Mech1-1
14325: PPUSH
14326: CALL 6816 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 266
14339: PUSH
14340: LD_INT 0
14342: EQUAL
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 255
14353: PUSH
14354: LD_INT 1
14356: EQUAL
14357: AND
14358: IFFALSE 14372
// SetBName ( building , theta ) ;
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_STRING theta
14367: PPUSH
14368: CALL_OW 500
// if GetSide ( building ) = 3 then
14372: LD_VAR 0 1
14376: PPUSH
14377: CALL_OW 255
14381: PUSH
14382: LD_INT 3
14384: EQUAL
14385: IFFALSE 14425
// begin for i := 1 to 4 do
14387: LD_ADDR_VAR 0 2
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_INT 4
14399: PUSH
14400: FOR_TO
14401: IFFALSE 14423
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14403: LD_ADDR_EXP 32
14407: PUSH
14408: LD_EXP 32
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 3
14420: ST_TO_ADDR
14421: GO 14400
14423: POP
14424: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 255
14434: PUSH
14435: LD_INT 3
14437: EQUAL
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 266
14448: PUSH
14449: LD_INT 0
14451: EQUAL
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 266
14462: PUSH
14463: LD_INT 2
14465: EQUAL
14466: OR
14467: PUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 266
14477: PUSH
14478: LD_INT 4
14480: EQUAL
14481: OR
14482: PUSH
14483: EMPTY
14484: LIST
14485: AND
14486: IFFALSE 14497
// ComUpgrade ( building ) ;
14488: LD_VAR 0 1
14492: PPUSH
14493: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 255
14506: PUSH
14507: LD_INT 3
14509: EQUAL
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 266
14520: PUSH
14521: LD_INT 32
14523: EQUAL
14524: AND
14525: IFFALSE 14566
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14527: LD_VAR 0 1
14531: PPUSH
14532: LD_INT 42
14534: PUSH
14535: LD_INT 43
14537: PUSH
14538: LD_INT 44
14540: PUSH
14541: LD_INT 46
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 1
14552: PPUSH
14553: LD_INT 4
14555: PPUSH
14556: CALL_OW 12
14560: ARRAY
14561: PPUSH
14562: CALL_OW 208
// end ;
14566: PPOPN 2
14568: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL 36719 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14578: LD_VAR 0 1
14582: PUSH
14583: LD_INT 22
14585: PUSH
14586: LD_INT 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 23
14605: PUSH
14606: LD_INT 1
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: IN
14623: IFFALSE 14639
// killCounter := killCounter + 1 ;
14625: LD_ADDR_EXP 46
14629: PUSH
14630: LD_EXP 46
14634: PUSH
14635: LD_INT 1
14637: PLUS
14638: ST_TO_ADDR
// if unit in ruAttackersInForest then
14639: LD_VAR 0 1
14643: PUSH
14644: LD_EXP 49
14648: IN
14649: IFFALSE 14667
// ruAttackersInForest := ruAttackersInForest diff unit ;
14651: LD_ADDR_EXP 49
14655: PUSH
14656: LD_EXP 49
14660: PUSH
14661: LD_VAR 0 1
14665: DIFF
14666: ST_TO_ADDR
// if unit in ruAttackers then
14667: LD_VAR 0 1
14671: PUSH
14672: LD_EXP 48
14676: IN
14677: IFFALSE 14695
// ruAttackers := ruAttackers diff unit ;
14679: LD_ADDR_EXP 48
14683: PUSH
14684: LD_EXP 48
14688: PUSH
14689: LD_VAR 0 1
14693: DIFF
14694: ST_TO_ADDR
// if unit = JMM then
14695: LD_VAR 0 1
14699: PUSH
14700: LD_EXP 1
14704: EQUAL
14705: IFFALSE 14714
// YouLost ( JMM ) ;
14707: LD_STRING JMM
14709: PPUSH
14710: CALL_OW 104
// if unit = Joan then
14714: LD_VAR 0 1
14718: PUSH
14719: LD_EXP 16
14723: EQUAL
14724: IFFALSE 14734
// JoanStatus := 0 ;
14726: LD_ADDR_EXP 17
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14734: LD_VAR 0 1
14738: PPUSH
14739: CALL_OW 255
14743: PUSH
14744: LD_INT 1
14746: EQUAL
14747: PUSH
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 247
14757: PUSH
14758: LD_INT 1
14760: EQUAL
14761: AND
14762: PUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 248
14772: PUSH
14773: LD_INT 1
14775: EQUAL
14776: AND
14777: IFFALSE 14793
// unitLost = unitLost + 1 ;
14779: LD_ADDR_EXP 31
14783: PUSH
14784: LD_EXP 31
14788: PUSH
14789: LD_INT 1
14791: PLUS
14792: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 3
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 247
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: AND
14821: PUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 266
14831: PUSH
14832: LD_INT 4
14834: PUSH
14835: LD_INT 5
14837: PUSH
14838: LD_INT 32
14840: PUSH
14841: LD_INT 31
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: IN
14850: AND
14851: IFFALSE 14937
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14853: LD_ADDR_EXP 32
14857: PUSH
14858: LD_EXP 32
14862: PUSH
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 266
14872: ADD
14873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14874: LD_ADDR_EXP 32
14878: PUSH
14879: LD_EXP 32
14883: PUSH
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 250
14893: ADD
14894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14895: LD_ADDR_EXP 32
14899: PUSH
14900: LD_EXP 32
14904: PUSH
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 251
14914: ADD
14915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14916: LD_ADDR_EXP 32
14920: PUSH
14921: LD_EXP 32
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 254
14935: ADD
14936: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14937: LD_EXP 47
14941: PUSH
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 257
14951: PUSH
14952: LD_INT 3
14954: EQUAL
14955: AND
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 255
14966: PUSH
14967: LD_INT 3
14969: EQUAL
14970: AND
14971: PUSH
14972: LD_INT 21
14974: PPUSH
14975: CALL_OW 302
14979: AND
14980: PUSH
14981: LD_INT 21
14983: PPUSH
14984: CALL_OW 255
14988: PUSH
14989: LD_INT 3
14991: EQUAL
14992: AND
14993: IFFALSE 15075
// begin ruMechCounter := ruMechCounter - 1 ;
14995: LD_ADDR_EXP 47
14999: PUSH
15000: LD_EXP 47
15004: PUSH
15005: LD_INT 1
15007: MINUS
15008: ST_TO_ADDR
// uc_side := 3 ;
15009: LD_ADDR_OWVAR 20
15013: PUSH
15014: LD_INT 3
15016: ST_TO_ADDR
// uc_nation := 3 ;
15017: LD_ADDR_OWVAR 21
15021: PUSH
15022: LD_INT 3
15024: ST_TO_ADDR
// hc_gallery :=  ;
15025: LD_ADDR_OWVAR 33
15029: PUSH
15030: LD_STRING 
15032: ST_TO_ADDR
// hc_name :=  ;
15033: LD_ADDR_OWVAR 26
15037: PUSH
15038: LD_STRING 
15040: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15041: LD_INT 0
15043: PPUSH
15044: LD_EXP 35
15048: PPUSH
15049: LD_EXP 36
15053: PPUSH
15054: CALL_OW 12
15058: PPUSH
15059: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15063: CALL_OW 44
15067: PPUSH
15068: LD_INT 21
15070: PPUSH
15071: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15075: LD_VAR 0 1
15079: PPUSH
15080: CALL_OW 255
15084: PUSH
15085: LD_INT 3
15087: EQUAL
15088: PUSH
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 264
15098: PUSH
15099: LD_INT 52
15101: EQUAL
15102: AND
15103: PUSH
15104: LD_INT 21
15106: PPUSH
15107: CALL_OW 302
15111: AND
15112: PUSH
15113: LD_INT 21
15115: PPUSH
15116: CALL_OW 255
15120: PUSH
15121: LD_INT 3
15123: EQUAL
15124: AND
15125: IFFALSE 15146
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15127: LD_INT 21
15129: PPUSH
15130: LD_INT 22
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: LD_INT 1
15138: PPUSH
15139: LD_INT 52
15141: PPUSH
15142: CALL_OW 125
// end ;
15146: PPOPN 1
15148: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15149: LD_INT 0
15151: PPUSH
15152: PPUSH
15153: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15154: LD_VAR 0 1
15158: PPUSH
15159: LD_VAR 0 2
15163: PPUSH
15164: CALL 36839 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 255
15177: PUSH
15178: LD_INT 3
15180: EQUAL
15181: PUSH
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 264
15191: PUSH
15192: LD_INT 51
15194: PUSH
15195: LD_INT 52
15197: PUSH
15198: LD_INT 53
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: LIST
15205: IN
15206: NOT
15207: AND
15208: IFFALSE 15239
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15210: LD_ADDR_EXP 48
15214: PUSH
15215: LD_EXP 48
15219: PPUSH
15220: LD_EXP 48
15224: PUSH
15225: LD_INT 1
15227: PLUS
15228: PPUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 1
15238: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 264
15248: PUSH
15249: LD_INT 53
15251: EQUAL
15252: IFFALSE 15407
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15254: LD_VAR 0 1
15258: PPUSH
15259: LD_INT 60
15261: PPUSH
15262: LD_INT 85
15264: PPUSH
15265: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_INT 43
15276: PPUSH
15277: LD_INT 69
15279: PPUSH
15280: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 37
15291: PPUSH
15292: LD_INT 46
15294: PPUSH
15295: CALL_OW 171
// wait ( 0 0$1 ) ;
15299: LD_INT 35
15301: PPUSH
15302: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15306: LD_INT 35
15308: PPUSH
15309: CALL_OW 67
// until not HasTask ( vehicle ) ;
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 314
15322: NOT
15323: IFFALSE 15306
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_INT 34
15332: PPUSH
15333: CALL 9911 0 2
// repeat wait ( 0 0$1 ) ;
15337: LD_INT 35
15339: PPUSH
15340: CALL_OW 67
// until not HasTask ( vehicle ) ;
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 314
15353: NOT
15354: IFFALSE 15337
// un := IsDrivenBy ( vehicle ) ;
15356: LD_ADDR_VAR 0 4
15360: PUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 311
15370: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15371: LD_VAR 0 4
15375: PPUSH
15376: LD_INT 96
15378: PPUSH
15379: LD_INT 77
15381: PPUSH
15382: CALL_OW 171
// AddComExitVehicle ( un ) ;
15386: LD_VAR 0 4
15390: PPUSH
15391: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15395: LD_VAR 0 4
15399: PPUSH
15400: LD_INT 17
15402: PPUSH
15403: CALL_OW 180
// end ; end ;
15407: PPOPN 5
15409: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 255
15419: PUSH
15420: LD_INT 3
15422: EQUAL
15423: IFFALSE 15454
// begin tamedApemans = tamedApemans + 1 ;
15425: LD_ADDR_EXP 33
15429: PUSH
15430: LD_EXP 33
15434: PUSH
15435: LD_INT 1
15437: PLUS
15438: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_INT 106
15446: PPUSH
15447: LD_INT 85
15449: PPUSH
15450: CALL_OW 111
// end ; end ;
15454: PPOPN 2
15456: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15457: LD_VAR 0 2
15461: PPUSH
15462: CALL_OW 255
15466: PUSH
15467: LD_INT 3
15469: EQUAL
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 255
15480: PUSH
15481: LD_INT 3
15483: EQUAL
15484: AND
15485: PUSH
15486: LD_INT 21
15488: PPUSH
15489: CALL_OW 302
15493: AND
15494: IFFALSE 15508
// ComEnterUnit ( human , rufab ) ;
15496: LD_VAR 0 1
15500: PPUSH
15501: LD_INT 21
15503: PPUSH
15504: CALL_OW 120
// end ;
15508: PPOPN 4
15510: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15511: LD_VAR 0 1
15515: PUSH
15516: LD_INT 21
15518: EQUAL
15519: PUSH
15520: LD_VAR 0 2
15524: PPUSH
15525: CALL_OW 255
15529: PUSH
15530: LD_INT 3
15532: EQUAL
15533: AND
15534: IFFALSE 15548
// SetLives ( human , 1000 ) ;
15536: LD_VAR 0 2
15540: PPUSH
15541: LD_INT 1000
15543: PPUSH
15544: CALL_OW 234
// end ;
15548: PPOPN 2
15550: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL 36823 0 1
// end ; end_of_file
15560: PPOPN 1
15562: END
// every 0 0$30 trigger cratesStatus = 1 do
15563: LD_EXP 39
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: IFFALSE 15624
15573: GO 15575
15575: DISABLE
// begin enable ;
15576: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15577: LD_INT 350
15579: PUSH
15580: LD_INT 875
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PPUSH
15590: LD_INT 2
15592: PPUSH
15593: CALL_OW 12
15597: ARRAY
15598: PPUSH
15599: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15603: LD_INT 1
15605: PPUSH
15606: LD_INT 5
15608: PPUSH
15609: CALL_OW 12
15613: PPUSH
15614: LD_INT 7
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 55
// end ;
15624: END
// every 1 1$0 trigger cratesStatus = 2 do
15625: LD_EXP 39
15629: PUSH
15630: LD_INT 2
15632: EQUAL
15633: IFFALSE 15716
15635: GO 15637
15637: DISABLE
// begin enable ;
15638: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15639: LD_INT 3150
15641: PUSH
15642: LD_INT 4550
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PPUSH
15652: LD_INT 2
15654: PPUSH
15655: CALL_OW 12
15659: ARRAY
15660: PPUSH
15661: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15665: LD_INT 2
15667: PUSH
15668: LD_INT 5
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_INT 2
15680: PPUSH
15681: CALL_OW 12
15685: ARRAY
15686: PPUSH
15687: LD_INT 6
15689: PUSH
15690: LD_INT 7
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_INT 2
15702: PPUSH
15703: CALL_OW 12
15707: ARRAY
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 55
// end ;
15716: END
// every 0 0$30 + 0 0$10 do
15717: GO 15719
15719: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15720: LD_INT 4
15722: PUSH
15723: LD_INT 5
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 1
15732: PPUSH
15733: LD_INT 2
15735: PPUSH
15736: CALL_OW 12
15740: ARRAY
15741: PPUSH
15742: LD_INT 7
15744: PPUSH
15745: LD_INT 1
15747: PPUSH
15748: CALL_OW 55
// Wait ( 0 0$15 ) ;
15752: LD_INT 525
15754: PPUSH
15755: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15759: LD_INT 4
15761: PUSH
15762: LD_INT 5
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 1
15771: PPUSH
15772: LD_INT 2
15774: PPUSH
15775: CALL_OW 12
15779: ARRAY
15780: PPUSH
15781: LD_INT 7
15783: PPUSH
15784: LD_INT 1
15786: PPUSH
15787: CALL_OW 55
// Wait ( 0 0$20 ) ;
15791: LD_INT 700
15793: PPUSH
15794: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15798: LD_INT 4
15800: PUSH
15801: LD_INT 5
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 1
15810: PPUSH
15811: LD_INT 2
15813: PPUSH
15814: CALL_OW 12
15818: ARRAY
15819: PPUSH
15820: LD_INT 7
15822: PPUSH
15823: LD_INT 1
15825: PPUSH
15826: CALL_OW 55
// end ; end_of_file
15830: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15831: LD_EXP 25
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 16132
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
15848: PPUSH
// begin enable ;
15849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15850: LD_ADDR_VAR 0 2
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 30
15880: PUSH
15881: LD_INT 0
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ST_TO_ADDR
// for i in tmp do
15913: LD_ADDR_VAR 0 1
15917: PUSH
15918: LD_VAR 0 2
15922: PUSH
15923: FOR_IN
15924: IFFALSE 15957
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15926: LD_ADDR_VAR 0 3
15930: PUSH
15931: LD_VAR 0 3
15935: PUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 274
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 275
15953: PLUS
15954: ST_TO_ADDR
15955: GO 15923
15957: POP
15958: POP
// strings = [ ] ;
15959: LD_ADDR_EXP 28
15963: PUSH
15964: EMPTY
15965: ST_TO_ADDR
// if tmp = 0 then
15966: LD_VAR 0 2
15970: PUSH
15971: LD_INT 0
15973: EQUAL
15974: IFFALSE 15999
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15976: LD_ADDR_EXP 28
15980: PUSH
15981: LD_EXP 28
15985: PUSH
15986: LD_STRING #Am06-1
15988: PUSH
15989: LD_EXP 26
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: ADD
15998: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15999: LD_VAR 0 2
16003: PUSH
16004: LD_EXP 26
16008: PUSH
16009: LD_VAR 0 3
16013: GREATER
16014: AND
16015: IFFALSE 16046
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16017: LD_ADDR_EXP 28
16021: PUSH
16022: LD_EXP 28
16026: PUSH
16027: LD_STRING #Am06-1
16029: PUSH
16030: LD_EXP 26
16034: PUSH
16035: LD_VAR 0 3
16039: MINUS
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: ADD
16045: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16046: LD_VAR 0 2
16050: PUSH
16051: LD_EXP 26
16055: PUSH
16056: LD_VAR 0 3
16060: LESSEQUAL
16061: AND
16062: IFFALSE 16085
// strings = strings ^ [ #Am06-1 , 0 ] ;
16064: LD_ADDR_EXP 28
16068: PUSH
16069: LD_EXP 28
16073: PUSH
16074: LD_STRING #Am06-1
16076: PUSH
16077: LD_INT 0
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: ADD
16084: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16085: LD_ADDR_EXP 27
16089: PUSH
16090: LD_EXP 27
16094: PUSH
16095: LD_INT 35
16097: MINUS
16098: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16099: LD_ADDR_EXP 28
16103: PUSH
16104: LD_EXP 28
16108: PUSH
16109: LD_STRING #Am06-2
16111: PUSH
16112: LD_EXP 27
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: ADD
16121: ST_TO_ADDR
// display_strings = strings ;
16122: LD_ADDR_OWVAR 47
16126: PUSH
16127: LD_EXP 28
16131: ST_TO_ADDR
// end ; end_of_file
16132: PPOPN 3
16134: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16135: LD_INT 0
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16144: LD_ADDR_VAR 0 3
16148: PUSH
16149: LD_INT 22
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 2
16161: PUSH
16162: LD_INT 30
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16196: LD_INT 35
16198: PPUSH
16199: CALL_OW 67
// until depot ;
16203: LD_VAR 0 3
16207: IFFALSE 16144
// repeat wait ( 0 0$1 ) ;
16209: LD_INT 35
16211: PPUSH
16212: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16216: LD_ADDR_VAR 0 4
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 91
16233: PUSH
16234: LD_VAR 0 3
16238: PUSH
16239: LD_INT 1
16241: ARRAY
16242: PUSH
16243: LD_INT 15
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 21
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 25
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 25
16276: PUSH
16277: LD_INT 2
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 25
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 25
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 3
16313: PUSH
16314: LD_INT 54
16316: PUSH
16317: EMPTY
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 3
16326: PUSH
16327: LD_INT 55
16329: PUSH
16330: EMPTY
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: PUSH
16350: LD_EXP 2
16354: PUSH
16355: LD_EXP 3
16359: PUSH
16360: LD_EXP 4
16364: PUSH
16365: LD_EXP 5
16369: PUSH
16370: LD_EXP 7
16374: PUSH
16375: LD_EXP 8
16379: PUSH
16380: LD_EXP 9
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: PUSH
16394: LD_EXP 45
16398: ADD
16399: DIFF
16400: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16401: LD_VAR 0 4
16405: PUSH
16406: LD_INT 1
16408: PPUSH
16409: CALL_OW 463
16413: NOT
16414: AND
16415: IFFALSE 16209
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16417: LD_ADDR_VAR 0 4
16421: PUSH
16422: LD_VAR 0 4
16426: PUSH
16427: LD_INT 1
16429: PPUSH
16430: LD_VAR 0 4
16434: PPUSH
16435: CALL_OW 12
16439: ARRAY
16440: ST_TO_ADDR
// blockSpawn := 1 ;
16441: LD_ADDR_EXP 30
16445: PUSH
16446: LD_INT 1
16448: ST_TO_ADDR
// uc_side := 2 ;
16449: LD_ADDR_OWVAR 20
16453: PUSH
16454: LD_INT 2
16456: ST_TO_ADDR
// uc_nation := 2 ;
16457: LD_ADDR_OWVAR 21
16461: PUSH
16462: LD_INT 2
16464: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16465: LD_ADDR_EXP 20
16469: PUSH
16470: LD_STRING Kurt
16472: PPUSH
16473: LD_INT 0
16475: PPUSH
16476: LD_STRING 
16478: PPUSH
16479: CALL 41008 0 3
16483: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16484: LD_EXP 20
16488: PPUSH
16489: LD_VAR 0 4
16493: PPUSH
16494: CALL_OW 250
16498: PPUSH
16499: LD_VAR 0 4
16503: PPUSH
16504: CALL_OW 251
16508: PPUSH
16509: LD_INT 5
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 50
// InGameOn ;
16519: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16523: LD_EXP 20
16527: PPUSH
16528: CALL_OW 87
// wait ( 0 0$2 ) ;
16532: LD_INT 70
16534: PPUSH
16535: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16539: LD_EXP 20
16543: PPUSH
16544: LD_VAR 0 4
16548: PPUSH
16549: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16553: LD_VAR 0 4
16557: PPUSH
16558: LD_EXP 20
16562: PPUSH
16563: CALL_OW 112
// wait ( 0 0$1 ) ;
16567: LD_INT 35
16569: PPUSH
16570: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16574: LD_VAR 0 4
16578: PPUSH
16579: LD_EXP 20
16583: PPUSH
16584: CALL_OW 119
// DialogueOn ;
16588: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16592: LD_EXP 20
16596: PPUSH
16597: LD_STRING D2-Kurt-1
16599: PPUSH
16600: CALL_OW 88
// if tmp = JMM then
16604: LD_VAR 0 4
16608: PUSH
16609: LD_EXP 1
16613: EQUAL
16614: IFFALSE 16706
// begin Say ( JMM , D2-JMM-1 ) ;
16616: LD_EXP 1
16620: PPUSH
16621: LD_STRING D2-JMM-1
16623: PPUSH
16624: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16628: LD_EXP 20
16632: PPUSH
16633: LD_STRING D2-Kurt-2
16635: PPUSH
16636: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16640: LD_EXP 1
16644: PPUSH
16645: LD_STRING D2-JMM-2
16647: PPUSH
16648: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16652: LD_EXP 20
16656: PPUSH
16657: LD_STRING D2-Kurt-3
16659: PPUSH
16660: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16664: LD_EXP 1
16668: PPUSH
16669: LD_STRING D2-JMM-3
16671: PPUSH
16672: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16676: LD_EXP 20
16680: PPUSH
16681: LD_STRING D2-Kurt-4
16683: PPUSH
16684: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16688: LD_EXP 1
16692: PPUSH
16693: LD_STRING D2-JMM-4
16695: PPUSH
16696: CALL_OW 88
// DialogueOff ;
16700: CALL_OW 7
// end else
16704: GO 16934
// begin if GetSex ( tmp ) = 1 then
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 258
16715: PUSH
16716: LD_INT 1
16718: EQUAL
16719: IFFALSE 16735
// Say ( tmp , D2-Sol1-1 ) else
16721: LD_VAR 0 4
16725: PPUSH
16726: LD_STRING D2-Sol1-1
16728: PPUSH
16729: CALL_OW 88
16733: GO 16747
// Say ( tmp , D2-FSol1-1 ) ;
16735: LD_VAR 0 4
16739: PPUSH
16740: LD_STRING D2-FSol1-1
16742: PPUSH
16743: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16747: LD_EXP 20
16751: PPUSH
16752: LD_STRING D2-Kurt-2
16754: PPUSH
16755: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16759: LD_VAR 0 4
16763: PPUSH
16764: CALL_OW 258
16768: PUSH
16769: LD_INT 1
16771: EQUAL
16772: IFFALSE 16788
// Say ( tmp , D2-Sol1-2 ) else
16774: LD_VAR 0 4
16778: PPUSH
16779: LD_STRING D2-Sol1-2
16781: PPUSH
16782: CALL_OW 88
16786: GO 16800
// Say ( tmp , D2-FSol1-2 ) ;
16788: LD_VAR 0 4
16792: PPUSH
16793: LD_STRING D2-FSol1-2
16795: PPUSH
16796: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16800: LD_EXP 20
16804: PPUSH
16805: LD_STRING D2-Kurt-3
16807: PPUSH
16808: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16812: LD_VAR 0 4
16816: PPUSH
16817: CALL_OW 258
16821: PUSH
16822: LD_INT 1
16824: EQUAL
16825: IFFALSE 16841
// Say ( tmp , D2-Sol1-3 ) else
16827: LD_VAR 0 4
16831: PPUSH
16832: LD_STRING D2-Sol1-3
16834: PPUSH
16835: CALL_OW 88
16839: GO 16853
// Say ( tmp , D2-FSol1-3 ) ;
16841: LD_VAR 0 4
16845: PPUSH
16846: LD_STRING D2-FSol1-3
16848: PPUSH
16849: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16853: LD_EXP 20
16857: PPUSH
16858: LD_STRING D2-Kurt-4
16860: PPUSH
16861: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16865: LD_VAR 0 4
16869: PPUSH
16870: CALL_OW 258
16874: PUSH
16875: LD_INT 1
16877: EQUAL
16878: IFFALSE 16906
// begin Say ( tmp , D2-Sol1-4 ) ;
16880: LD_VAR 0 4
16884: PPUSH
16885: LD_STRING D2-Sol1-4
16887: PPUSH
16888: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16892: LD_VAR 0 4
16896: PPUSH
16897: LD_STRING D2-Sol1-5
16899: PPUSH
16900: CALL_OW 88
// end else
16904: GO 16930
// begin Say ( tmp , D2-FSol1-4 ) ;
16906: LD_VAR 0 4
16910: PPUSH
16911: LD_STRING D2-FSol1-4
16913: PPUSH
16914: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16918: LD_VAR 0 4
16922: PPUSH
16923: LD_STRING D2-FSol1-5
16925: PPUSH
16926: CALL_OW 88
// end ; DialogueOff ;
16930: CALL_OW 7
// end ; dec := ShowQuery1 ;
16934: LD_ADDR_VAR 0 6
16938: PUSH
16939: CALL 7301 0 0
16943: ST_TO_ADDR
// if dec = 1 then
16944: LD_VAR 0 6
16948: PUSH
16949: LD_INT 1
16951: EQUAL
16952: IFFALSE 17014
// begin DialogueOn ;
16954: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16958: LD_EXP 20
16962: PPUSH
16963: LD_STRING D2a-Kurt-1
16965: PPUSH
16966: CALL_OW 88
// DialogueOff ;
16970: CALL_OW 7
// InGameOff ;
16974: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16978: LD_INT 1
16980: PPUSH
16981: LD_INT 2
16983: PPUSH
16984: LD_INT 2
16986: PPUSH
16987: LD_INT 1
16989: PPUSH
16990: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16994: LD_EXP 20
16998: PPUSH
16999: LD_INT 8
17001: PPUSH
17002: CALL_OW 113
// readyToEscape := 1 ;
17006: LD_ADDR_EXP 22
17010: PUSH
17011: LD_INT 1
17013: ST_TO_ADDR
// end ; if dec = 2 then
17014: LD_VAR 0 6
17018: PUSH
17019: LD_INT 2
17021: EQUAL
17022: IFFALSE 17490
// begin DialogueOn ;
17024: CALL_OW 6
// if tmp = JMM then
17028: LD_VAR 0 4
17032: PUSH
17033: LD_EXP 1
17037: EQUAL
17038: IFFALSE 17094
// begin Say ( JMM , D2b-JMM-1 ) ;
17040: LD_EXP 1
17044: PPUSH
17045: LD_STRING D2b-JMM-1
17047: PPUSH
17048: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17052: LD_EXP 20
17056: PPUSH
17057: LD_STRING D2b-Kurt-1
17059: PPUSH
17060: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17064: LD_EXP 1
17068: PPUSH
17069: LD_STRING D2b-JMM-2
17071: PPUSH
17072: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17076: LD_EXP 20
17080: PPUSH
17081: LD_STRING D2b-Kurt-2
17083: PPUSH
17084: CALL_OW 88
// DialogueOff ;
17088: CALL_OW 7
// end else
17092: GO 17245
// begin if GetSex ( tmp ) = 1 then
17094: LD_VAR 0 4
17098: PPUSH
17099: CALL_OW 258
17103: PUSH
17104: LD_INT 1
17106: EQUAL
17107: IFFALSE 17123
// Say ( tmp , D2b-Sol1-1 ) else
17109: LD_VAR 0 4
17113: PPUSH
17114: LD_STRING D2b-Sol1-1
17116: PPUSH
17117: CALL_OW 88
17121: GO 17135
// Say ( tmp , D2b-FSol1-1 ) ;
17123: LD_VAR 0 4
17127: PPUSH
17128: LD_STRING D2b-FSol1-1
17130: PPUSH
17131: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17135: LD_EXP 20
17139: PPUSH
17140: LD_STRING D2b-Kurt-1
17142: PPUSH
17143: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17147: LD_VAR 0 4
17151: PPUSH
17152: CALL_OW 258
17156: PUSH
17157: LD_INT 1
17159: EQUAL
17160: IFFALSE 17176
// Say ( tmp , D2b-Sol1-2 ) else
17162: LD_VAR 0 4
17166: PPUSH
17167: LD_STRING D2b-Sol1-2
17169: PPUSH
17170: CALL_OW 88
17174: GO 17188
// Say ( tmp , D2b-FSol1-2 ) ;
17176: LD_VAR 0 4
17180: PPUSH
17181: LD_STRING D2b-FSol1-2
17183: PPUSH
17184: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17188: LD_EXP 20
17192: PPUSH
17193: LD_STRING D2b-Kurt-2
17195: PPUSH
17196: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17200: LD_VAR 0 4
17204: PPUSH
17205: CALL_OW 258
17209: PUSH
17210: LD_INT 1
17212: EQUAL
17213: IFFALSE 17229
// Say ( tmp , D2c-Sol1-2 ) else
17215: LD_VAR 0 4
17219: PPUSH
17220: LD_STRING D2c-Sol1-2
17222: PPUSH
17223: CALL_OW 88
17227: GO 17241
// Say ( tmp , D2c-FSol1-2 ) ;
17229: LD_VAR 0 4
17233: PPUSH
17234: LD_STRING D2c-FSol1-2
17236: PPUSH
17237: CALL_OW 88
// DialogueOff ;
17241: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17245: LD_ADDR_VAR 0 7
17249: PUSH
17250: CALL 7322 0 0
17254: ST_TO_ADDR
// if dec2 = 1 then
17255: LD_VAR 0 7
17259: PUSH
17260: LD_INT 1
17262: EQUAL
17263: IFFALSE 17325
// begin DialogueOn ;
17265: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17269: LD_EXP 20
17273: PPUSH
17274: LD_STRING D2a-Kurt-1
17276: PPUSH
17277: CALL_OW 88
// DialogueOff ;
17281: CALL_OW 7
// InGameOff ;
17285: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17289: LD_INT 1
17291: PPUSH
17292: LD_INT 2
17294: PPUSH
17295: LD_INT 2
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17305: LD_EXP 20
17309: PPUSH
17310: LD_INT 8
17312: PPUSH
17313: CALL_OW 113
// readyToEscape := 1 ;
17317: LD_ADDR_EXP 22
17321: PUSH
17322: LD_INT 1
17324: ST_TO_ADDR
// end ; if dec2 = 2 then
17325: LD_VAR 0 7
17329: PUSH
17330: LD_INT 2
17332: EQUAL
17333: IFFALSE 17490
// begin if tmp = JMM then
17335: LD_VAR 0 4
17339: PUSH
17340: LD_EXP 1
17344: EQUAL
17345: IFFALSE 17405
// begin DialogueOn ;
17347: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17351: LD_EXP 1
17355: PPUSH
17356: LD_STRING D2c-JMM-1
17358: PPUSH
17359: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17363: LD_EXP 20
17367: PPUSH
17368: LD_STRING D2c-Kurt-1
17370: PPUSH
17371: CALL_OW 88
// DialogueOff ;
17375: CALL_OW 7
// InGameOff ;
17379: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17383: LD_EXP 20
17387: PPUSH
17388: LD_INT 8
17390: PPUSH
17391: CALL_OW 113
// readyToEscape := 1 ;
17395: LD_ADDR_EXP 22
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// end else
17403: GO 17490
// begin DialogueOn ;
17405: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17409: LD_VAR 0 4
17413: PPUSH
17414: CALL_OW 258
17418: PUSH
17419: LD_INT 1
17421: EQUAL
17422: IFFALSE 17438
// Say ( tmp , D2c-Sol1-1 ) else
17424: LD_VAR 0 4
17428: PPUSH
17429: LD_STRING D2c-Sol1-1
17431: PPUSH
17432: CALL_OW 88
17436: GO 17450
// Say ( tmp , D2c-FSol1-1 ) ;
17438: LD_VAR 0 4
17442: PPUSH
17443: LD_STRING D2c-FSol1-1
17445: PPUSH
17446: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17450: LD_EXP 20
17454: PPUSH
17455: LD_STRING D2c-Kurt-1
17457: PPUSH
17458: CALL_OW 88
// DialogueOff ;
17462: CALL_OW 7
// InGameOff ;
17466: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17470: LD_EXP 20
17474: PPUSH
17475: LD_INT 8
17477: PPUSH
17478: CALL_OW 113
// readyToEscape := 1 ;
17482: LD_ADDR_EXP 22
17486: PUSH
17487: LD_INT 1
17489: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17490: LD_VAR 0 6
17494: PUSH
17495: LD_INT 3
17497: EQUAL
17498: IFFALSE 17659
// begin DialogueOn ;
17500: CALL_OW 6
// if tmp = JMM then
17504: LD_VAR 0 4
17508: PUSH
17509: LD_EXP 1
17513: EQUAL
17514: IFFALSE 17574
// begin DialogueOn ;
17516: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17520: LD_EXP 1
17524: PPUSH
17525: LD_STRING D2c-JMM-1
17527: PPUSH
17528: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17532: LD_EXP 20
17536: PPUSH
17537: LD_STRING D2c-Kurt-1
17539: PPUSH
17540: CALL_OW 88
// DialogueOff ;
17544: CALL_OW 7
// InGameOff ;
17548: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17552: LD_EXP 20
17556: PPUSH
17557: LD_INT 8
17559: PPUSH
17560: CALL_OW 113
// readyToEscape := 1 ;
17564: LD_ADDR_EXP 22
17568: PUSH
17569: LD_INT 1
17571: ST_TO_ADDR
// end else
17572: GO 17659
// begin DialogueOn ;
17574: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17578: LD_VAR 0 4
17582: PPUSH
17583: CALL_OW 258
17587: PUSH
17588: LD_INT 1
17590: EQUAL
17591: IFFALSE 17607
// Say ( tmp , D2c-Sol1-1 ) else
17593: LD_VAR 0 4
17597: PPUSH
17598: LD_STRING D2c-Sol1-1
17600: PPUSH
17601: CALL_OW 88
17605: GO 17619
// Say ( tmp , D2c-FSol1-1 ) ;
17607: LD_VAR 0 4
17611: PPUSH
17612: LD_STRING D2c-FSol1-1
17614: PPUSH
17615: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17619: LD_EXP 20
17623: PPUSH
17624: LD_STRING D2c-Kurt-1
17626: PPUSH
17627: CALL_OW 88
// DialogueOff ;
17631: CALL_OW 7
// InGameOff ;
17635: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17639: LD_EXP 20
17643: PPUSH
17644: LD_INT 8
17646: PPUSH
17647: CALL_OW 113
// readyToEscape := 1 ;
17651: LD_ADDR_EXP 22
17655: PUSH
17656: LD_INT 1
17658: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17659: LD_ADDR_EXP 30
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17667: LD_INT 35
17669: PPUSH
17670: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17674: LD_EXP 20
17678: PPUSH
17679: LD_INT 8
17681: PPUSH
17682: CALL_OW 308
17686: PUSH
17687: LD_EXP 22
17691: AND
17692: PUSH
17693: LD_EXP 20
17697: PPUSH
17698: CALL_OW 301
17702: OR
17703: IFFALSE 17667
// if IsDead ( Kurt ) then
17705: LD_EXP 20
17709: PPUSH
17710: CALL_OW 301
17714: IFFALSE 17718
// exit ;
17716: GO 17773
// RemoveUnit ( Kurt ) ;
17718: LD_EXP 20
17722: PPUSH
17723: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17727: LD_EXP 20
17731: PPUSH
17732: LD_STRING Kurt
17734: PPUSH
17735: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17739: LD_INT 1
17741: PPUSH
17742: LD_INT 2
17744: PPUSH
17745: CALL_OW 81
17749: PUSH
17750: LD_INT 0
17752: EQUAL
17753: IFFALSE 17765
// kurtStatus = 1 else
17755: LD_ADDR_EXP 21
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
17763: GO 17773
// kurtStatus = 2 ;
17765: LD_ADDR_EXP 21
17769: PUSH
17770: LD_INT 2
17772: ST_TO_ADDR
// end ; end_of_file
17773: LD_VAR 0 1
17777: RET
// every 0 0$2 do
17778: GO 17780
17780: DISABLE
// begin enable ;
17781: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17782: LD_INT 3
17784: PPUSH
17785: LD_INT 2
17787: PPUSH
17788: LD_INT 10
17790: PPUSH
17791: LD_EXP 32
17795: PPUSH
17796: CALL 7753 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17800: LD_INT 3
17802: PPUSH
17803: LD_INT 12
17805: PPUSH
17806: LD_EXP 32
17810: PPUSH
17811: CALL 9356 0 3
// if disableHealAI = 0 then
17815: LD_EXP 34
17819: PUSH
17820: LD_INT 0
17822: EQUAL
17823: IFFALSE 17844
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17825: LD_INT 3
17827: PPUSH
17828: LD_INT 9
17830: PPUSH
17831: LD_INT 10
17833: PPUSH
17834: LD_INT 32
17836: PUSH
17837: EMPTY
17838: LIST
17839: PPUSH
17840: CALL 8120 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17844: LD_INT 3
17846: PPUSH
17847: LD_INT 51
17849: PPUSH
17850: LD_INT 6
17852: PPUSH
17853: CALL 8809 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17857: LD_INT 2
17859: PPUSH
17860: CALL_OW 303
17864: PUSH
17865: LD_INT 2
17867: PPUSH
17868: CALL_OW 255
17872: PUSH
17873: LD_INT 1
17875: EQUAL
17876: OR
17877: IFFALSE 17891
// DefendDepot ( 3 , rudepo ) else
17879: LD_INT 3
17881: PPUSH
17882: LD_INT 2
17884: PPUSH
17885: CALL 8636 0 2
17889: GO 17901
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17891: LD_INT 3
17893: PPUSH
17894: LD_INT 10
17896: PPUSH
17897: CALL 8927 0 2
// end ;
17901: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17902: LD_INT 22
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 55
17924: PUSH
17925: EMPTY
17926: LIST
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: LD_INT 34
17933: PUSH
17934: LD_INT 51
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: PUSH
17956: LD_INT 0
17958: EQUAL
17959: PUSH
17960: LD_INT 21
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_INT 3
17970: EQUAL
17971: AND
17972: PUSH
17973: LD_INT 21
17975: PPUSH
17976: CALL_OW 302
17980: AND
17981: PUSH
17982: LD_INT 2
17984: PPUSH
17985: CALL_OW 255
17989: PUSH
17990: LD_INT 3
17992: EQUAL
17993: AND
17994: PUSH
17995: LD_INT 2
17997: PPUSH
17998: CALL_OW 302
18002: AND
18003: PUSH
18004: LD_INT 21
18006: PPUSH
18007: CALL_OW 313
18011: AND
18012: PUSH
18013: LD_EXP 48
18017: PUSH
18018: LD_INT 4
18020: PUSH
18021: LD_INT 5
18023: PUSH
18024: LD_INT 6
18026: PUSH
18027: LD_INT 6
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: PUSH
18036: LD_OWVAR 67
18040: ARRAY
18041: LESS
18042: AND
18043: IFFALSE 18264
18045: GO 18047
18047: DISABLE
// begin enable ;
18048: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18049: LD_INT 2
18051: PPUSH
18052: CALL_OW 274
18056: PPUSH
18057: LD_INT 1
18059: PPUSH
18060: LD_INT 2000
18062: PPUSH
18063: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18067: LD_INT 3
18069: PPUSH
18070: LD_INT 21
18072: PPUSH
18073: LD_INT 4
18075: PUSH
18076: LD_INT 5
18078: PUSH
18079: LD_INT 6
18081: PUSH
18082: LD_INT 6
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: LD_OWVAR 67
18095: ARRAY
18096: PUSH
18097: LD_EXP 48
18101: MINUS
18102: PPUSH
18103: LD_INT 43
18105: PUSH
18106: LD_INT 43
18108: PUSH
18109: LD_INT 44
18111: PUSH
18112: LD_INT 44
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 43
18123: PUSH
18124: LD_INT 43
18126: PUSH
18127: LD_INT 43
18129: PUSH
18130: LD_INT 44
18132: PUSH
18133: LD_INT 44
18135: PUSH
18136: LD_INT 46
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 43
18149: PUSH
18150: LD_INT 43
18152: PUSH
18153: LD_INT 43
18155: PUSH
18156: LD_INT 44
18158: PUSH
18159: LD_INT 44
18161: PUSH
18162: LD_INT 46
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 43
18175: PUSH
18176: LD_INT 43
18178: PUSH
18179: LD_INT 44
18181: PUSH
18182: LD_INT 46
18184: PUSH
18185: LD_INT 46
18187: PUSH
18188: LD_INT 46
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: LD_OWVAR 67
18209: ARRAY
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: LD_INT 1
18216: PPUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 22
18222: PUSH
18223: LD_INT 24
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: PPUSH
18233: LD_INT 2
18235: PPUSH
18236: CALL_OW 12
18240: ARRAY
18241: PUSH
18242: LD_INT 24
18244: PUSH
18245: LD_INT 24
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: LD_OWVAR 67
18258: ARRAY
18259: PPUSH
18260: CALL 7599 0 7
// end ;
18264: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18265: LD_INT 17
18267: PPUSH
18268: CALL_OW 255
18272: PUSH
18273: LD_INT 3
18275: EQUAL
18276: PUSH
18277: LD_INT 17
18279: PPUSH
18280: CALL_OW 302
18284: AND
18285: PUSH
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 255
18293: PUSH
18294: LD_INT 3
18296: EQUAL
18297: AND
18298: PUSH
18299: LD_INT 2
18301: PPUSH
18302: CALL_OW 302
18306: AND
18307: PUSH
18308: LD_EXP 48
18312: PUSH
18313: LD_INT 4
18315: PUSH
18316: LD_INT 5
18318: PUSH
18319: LD_INT 6
18321: PUSH
18322: LD_INT 7
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: PUSH
18331: LD_OWVAR 67
18335: ARRAY
18336: LESS
18337: AND
18338: IFFALSE 18386
18340: GO 18342
18342: DISABLE
// begin enable ;
18343: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18344: LD_INT 17
18346: PPUSH
18347: LD_INT 22
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: LD_INT 42
18358: PUSH
18359: LD_INT 43
18361: PUSH
18362: LD_INT 44
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: CALL_OW 12
18380: ARRAY
18381: PPUSH
18382: CALL_OW 185
// end ;
18386: END
// every 2 2$0 do var i , j ;
18387: GO 18389
18389: DISABLE
18390: LD_INT 0
18392: PPUSH
18393: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18394: LD_INT 14700
18396: PUSH
18397: LD_INT 33600
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: PPUSH
18407: LD_INT 2
18409: PPUSH
18410: CALL_OW 12
18414: ARRAY
18415: PPUSH
18416: CALL_OW 67
// disableHealAI = 1 ;
18420: LD_ADDR_EXP 34
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18428: LD_ADDR_VAR 0 1
18432: PUSH
18433: LD_INT 22
18435: PUSH
18436: LD_INT 3
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 25
18445: PUSH
18446: LD_INT 4
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 69
18461: PUSH
18462: FOR_IN
18463: IFFALSE 18476
// ComExitBuilding ( i ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 122
18474: GO 18462
18476: POP
18477: POP
// wait ( 0 0$1 ) ;
18478: LD_INT 35
18480: PPUSH
18481: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18485: LD_INT 35
18487: PPUSH
18488: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18492: LD_ADDR_VAR 0 1
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 4
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: PUSH
18526: FOR_IN
18527: IFFALSE 18604
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18529: LD_ADDR_VAR 0 2
18533: PUSH
18534: LD_INT 17
18536: PPUSH
18537: LD_INT 22
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 25
18549: PUSH
18550: LD_INT 12
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 70
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18600
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_VAR 0 2
18578: PPUSH
18579: CALL_OW 250
18583: PPUSH
18584: LD_VAR 0 2
18588: PPUSH
18589: CALL_OW 251
18593: PPUSH
18594: CALL_OW 191
18598: GO 18566
18600: POP
18601: POP
18602: GO 18526
18604: POP
18605: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18606: LD_INT 22
18608: PUSH
18609: LD_INT 3
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 25
18618: PUSH
18619: LD_INT 4
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PPUSH
18630: CALL_OW 69
18634: PUSH
18635: LD_INT 0
18637: EQUAL
18638: PUSH
18639: LD_EXP 33
18643: PUSH
18644: LD_INT 6
18646: PUSH
18647: LD_INT 7
18649: PUSH
18650: LD_INT 8
18652: PUSH
18653: LD_INT 8
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: LD_OWVAR 67
18666: ARRAY
18667: GREATEREQUAL
18668: OR
18669: PUSH
18670: LD_INT 17
18672: PPUSH
18673: LD_INT 22
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 25
18685: PUSH
18686: LD_INT 12
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 70
18701: PUSH
18702: LD_INT 0
18704: EQUAL
18705: OR
18706: IFFALSE 18485
// disableHealAI = 0 ;
18708: LD_ADDR_EXP 34
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: LD_INT 22
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 25
18733: PUSH
18734: LD_INT 12
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PPUSH
18745: CALL_OW 69
18749: PUSH
18750: FOR_IN
18751: IFFALSE 18767
// SetClass ( i , 16 ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_INT 16
18760: PPUSH
18761: CALL_OW 336
18765: GO 18750
18767: POP
18768: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18769: LD_ADDR_VAR 0 1
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 3
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 25
18786: PUSH
18787: LD_INT 4
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PPUSH
18798: CALL_OW 69
18802: PUSH
18803: FOR_IN
18804: IFFALSE 18820
// ComEnterUnit ( i , rulab ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_INT 32
18813: PPUSH
18814: CALL_OW 120
18818: GO 18803
18820: POP
18821: POP
// end ; end_of_file
18822: PPOPN 2
18824: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18825: LD_EXP 27
18829: PUSH
18830: LD_INT 0
18832: LESSEQUAL
18833: IFFALSE 18987
18835: GO 18837
18837: DISABLE
18838: LD_INT 0
18840: PPUSH
18841: PPUSH
18842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_INT 22
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 21
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 30
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 30
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: ST_TO_ADDR
// for i in tmp do
18906: LD_ADDR_VAR 0 1
18910: PUSH
18911: LD_VAR 0 2
18915: PUSH
18916: FOR_IN
18917: IFFALSE 18950
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18919: LD_ADDR_VAR 0 3
18923: PUSH
18924: LD_VAR 0 3
18928: PUSH
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL_OW 274
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 275
18946: PLUS
18947: ST_TO_ADDR
18948: GO 18916
18950: POP
18951: POP
// if yourCrates >= needCrates then
18952: LD_VAR 0 3
18956: PUSH
18957: LD_EXP 26
18961: GREATEREQUAL
18962: IFFALSE 18980
// FinishMission ( yourCrates , needCrates ) else
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_EXP 26
18973: PPUSH
18974: CALL 18990 0 2
18978: GO 18987
// YouLost ( matmin ) ;
18980: LD_STRING matmin
18982: PPUSH
18983: CALL_OW 104
// end ;
18987: PPOPN 3
18989: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18990: LD_INT 0
18992: PPUSH
18993: PPUSH
18994: PPUSH
18995: PPUSH
// if killCounter = 0 then
18996: LD_EXP 46
19000: PUSH
19001: LD_INT 0
19003: EQUAL
19004: IFFALSE 19013
// SetAchievement ( ACH_SURV ) ;
19006: LD_STRING ACH_SURV
19008: PPUSH
19009: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19013: LD_INT 22
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 21
19025: PUSH
19026: LD_INT 3
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: PUSH
19042: LD_INT 0
19044: EQUAL
19045: IFFALSE 19061
// begin wait ( 3 ) ;
19047: LD_INT 3
19049: PPUSH
19050: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19054: LD_STRING ACH_BASEDESTROYER
19056: PPUSH
19057: CALL_OW 543
// end ; m1 := false ;
19061: LD_ADDR_VAR 0 4
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// m2 := false ;
19069: LD_ADDR_VAR 0 5
19073: PUSH
19074: LD_INT 0
19076: ST_TO_ADDR
// m3 := false ;
19077: LD_ADDR_VAR 0 6
19081: PUSH
19082: LD_INT 0
19084: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19085: LD_VAR 0 1
19089: PUSH
19090: LD_INT 100
19092: PUSH
19093: LD_INT 140
19095: PUSH
19096: LD_INT 180
19098: PUSH
19099: LD_INT 220
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: PUSH
19108: LD_OWVAR 67
19112: ARRAY
19113: PLUS
19114: PUSH
19115: LD_VAR 0 2
19119: GREATER
19120: IFFALSE 19152
// begin AddMedal ( cans , 1 ) ;
19122: LD_STRING cans
19124: PPUSH
19125: LD_INT 1
19127: PPUSH
19128: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19132: LD_INT 1
19134: PPUSH
19135: LD_STRING 06_crates_1
19137: PPUSH
19138: CALL_OW 39
// m1 := true ;
19142: LD_ADDR_VAR 0 4
19146: PUSH
19147: LD_INT 1
19149: ST_TO_ADDR
// end else
19150: GO 19173
// begin AddMedal ( cans , - 1 ) ;
19152: LD_STRING cans
19154: PPUSH
19155: LD_INT 1
19157: NEG
19158: PPUSH
19159: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19163: LD_INT 0
19165: PPUSH
19166: LD_STRING 06_crates_1
19168: PPUSH
19169: CALL_OW 39
// end ; if unitLost < 3 then
19173: LD_EXP 31
19177: PUSH
19178: LD_INT 3
19180: LESS
19181: IFFALSE 19203
// begin AddMedal ( people , 1 ) ;
19183: LD_STRING people
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: CALL_OW 101
// m2 := true ;
19193: LD_ADDR_VAR 0 5
19197: PUSH
19198: LD_INT 1
19200: ST_TO_ADDR
// end else
19201: GO 19214
// AddMedal ( people , - 1 ) ;
19203: LD_STRING people
19205: PPUSH
19206: LD_INT 1
19208: NEG
19209: PPUSH
19210: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19214: LD_EXP 29
19218: PPUSH
19219: LD_STRING 06_remoteVehs_1
19221: PPUSH
19222: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19226: LD_EXP 29
19230: PUSH
19231: LD_INT 1
19233: EQUAL
19234: IFFALSE 19256
// begin AddMedal ( remote , 1 ) ;
19236: LD_STRING remote
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 101
// m3 := true ;
19246: LD_ADDR_VAR 0 6
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// end else
19254: GO 19296
// begin if GetTech ( 18 , 1 ) = state_enabled then
19256: LD_INT 18
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: CALL_OW 321
19266: PUSH
19267: LD_INT 1
19269: EQUAL
19270: IFFALSE 19285
// AddMedal ( remote , - 1 ) else
19272: LD_STRING remote
19274: PPUSH
19275: LD_INT 1
19277: NEG
19278: PPUSH
19279: CALL_OW 101
19283: GO 19296
// AddMedal ( remote , - 2 ) ;
19285: LD_STRING remote
19287: PPUSH
19288: LD_INT 2
19290: NEG
19291: PPUSH
19292: CALL_OW 101
// end ; if m1 and m2 and m3 then
19296: LD_VAR 0 4
19300: PUSH
19301: LD_VAR 0 5
19305: AND
19306: PUSH
19307: LD_VAR 0 6
19311: AND
19312: IFFALSE 19328
// begin wait ( 3 ) ;
19314: LD_INT 3
19316: PPUSH
19317: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19321: LD_STRING ACH_ASPEED_6
19323: PPUSH
19324: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19328: LD_OWVAR 67
19332: PUSH
19333: LD_INT 3
19335: GREATEREQUAL
19336: PUSH
19337: LD_VAR 0 4
19341: AND
19342: PUSH
19343: LD_VAR 0 5
19347: AND
19348: PUSH
19349: LD_VAR 0 6
19353: AND
19354: IFFALSE 19366
// SetAchievementEX ( ACH_AMER , 6 ) ;
19356: LD_STRING ACH_AMER
19358: PPUSH
19359: LD_INT 6
19361: PPUSH
19362: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19366: LD_EXP 21
19370: PPUSH
19371: LD_STRING 06_KurtStatus_1
19373: PPUSH
19374: CALL_OW 39
// GiveMedals ( Main ) ;
19378: LD_STRING Main
19380: PPUSH
19381: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19385: LD_INT 22
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 50
19407: PUSH
19408: EMPTY
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 25
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 25
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 25
19436: PUSH
19437: LD_INT 3
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 25
19446: PUSH
19447: LD_INT 4
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PPUSH
19467: CALL_OW 69
19471: PPUSH
19472: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19476: LD_EXP 1
19480: PPUSH
19481: LD_EXP 43
19485: PUSH
19486: LD_STRING JMM
19488: STR
19489: PPUSH
19490: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19494: LD_EXP 2
19498: PPUSH
19499: LD_EXP 43
19503: PUSH
19504: LD_STRING Lisa
19506: STR
19507: PPUSH
19508: CALL 6914 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19512: LD_EXP 3
19516: PPUSH
19517: LD_EXP 43
19521: PUSH
19522: LD_STRING Bobby
19524: STR
19525: PPUSH
19526: CALL 6914 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19530: LD_EXP 4
19534: PPUSH
19535: LD_EXP 43
19539: PUSH
19540: LD_STRING Cyrus
19542: STR
19543: PPUSH
19544: CALL 6914 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19548: LD_EXP 5
19552: PPUSH
19553: LD_EXP 43
19557: PUSH
19558: LD_STRING Frank
19560: STR
19561: PPUSH
19562: CALL 6914 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19566: LD_EXP 6
19570: PPUSH
19571: LD_EXP 43
19575: PUSH
19576: LD_STRING Brown
19578: STR
19579: PPUSH
19580: CALL 6914 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19584: LD_EXP 7
19588: PPUSH
19589: LD_EXP 43
19593: PUSH
19594: LD_STRING Donaldson
19596: STR
19597: PPUSH
19598: CALL 6914 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19602: LD_EXP 8
19606: PPUSH
19607: LD_EXP 43
19611: PUSH
19612: LD_STRING Gladstone
19614: STR
19615: PPUSH
19616: CALL 6914 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19620: LD_EXP 9
19624: PPUSH
19625: LD_EXP 43
19629: PUSH
19630: LD_STRING Denis
19632: STR
19633: PPUSH
19634: CALL 6914 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19638: LD_EXP 16
19642: PPUSH
19643: LD_EXP 43
19647: PUSH
19648: LD_STRING Joan
19650: STR
19651: PPUSH
19652: CALL 6914 0 2
// if IsLive ( Mike ) then
19656: LD_EXP 11
19660: PPUSH
19661: CALL_OW 300
19665: IFFALSE 19685
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19667: LD_EXP 11
19671: PPUSH
19672: LD_EXP 43
19676: PUSH
19677: LD_STRING Mike
19679: STR
19680: PPUSH
19681: CALL_OW 38
// if IsLive ( Joan ) then
19685: LD_EXP 16
19689: PPUSH
19690: CALL_OW 300
19694: IFFALSE 19708
// SaveCharacters ( Joan , Joan ) ;
19696: LD_EXP 16
19700: PPUSH
19701: LD_STRING Joan
19703: PPUSH
19704: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19708: LD_EXP 17
19712: PPUSH
19713: LD_STRING 06_JoanStatus_1
19715: PPUSH
19716: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19720: LD_INT 50
19722: PUSH
19723: EMPTY
19724: LIST
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 21
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: LD_INT 25
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 25
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 25
19771: PUSH
19772: LD_INT 3
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 25
19781: PUSH
19782: LD_INT 4
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PPUSH
19802: CALL_OW 69
19806: PUSH
19807: LD_EXP 1
19811: PUSH
19812: LD_EXP 2
19816: PUSH
19817: LD_EXP 3
19821: PUSH
19822: LD_EXP 4
19826: PUSH
19827: LD_EXP 5
19831: PUSH
19832: LD_EXP 6
19836: PUSH
19837: LD_EXP 7
19841: PUSH
19842: LD_EXP 8
19846: PUSH
19847: LD_EXP 9
19851: PUSH
19852: LD_EXP 16
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: DIFF
19869: PPUSH
19870: LD_STRING 06_other_survivors
19872: PPUSH
19873: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19877: LD_INT 50
19879: PUSH
19880: EMPTY
19881: LIST
19882: PUSH
19883: LD_INT 22
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 21
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 25
19908: PUSH
19909: LD_INT 12
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 25
19918: PUSH
19919: LD_INT 16
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: PPUSH
19942: LD_STRING 06_other_apemans
19944: PPUSH
19945: CALL_OW 38
// YouWin ;
19949: CALL_OW 103
// end ; end_of_file
19953: LD_VAR 0 3
19957: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19958: LD_EXP 48
19962: PUSH
19963: LD_OWVAR 1
19967: PUSH
19968: LD_INT 23100
19970: PUSH
19971: LD_INT 21000
19973: PUSH
19974: LD_INT 18900
19976: PUSH
19977: LD_INT 16800
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: LD_OWVAR 67
19990: ARRAY
19991: GREATER
19992: AND
19993: IFFALSE 20329
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
20002: PPUSH
20003: PPUSH
// begin enable ;
20004: ENABLE
// for i in ruAttackers do
20005: LD_ADDR_VAR 0 1
20009: PUSH
20010: LD_EXP 48
20014: PUSH
20015: FOR_IN
20016: IFFALSE 20327
// begin if not IsDrivenBy ( i ) then
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 311
20027: NOT
20028: IFFALSE 20032
// continue ;
20030: GO 20015
// if i mod 2 = 0 then
20032: LD_VAR 0 1
20036: PUSH
20037: LD_INT 2
20039: MOD
20040: PUSH
20041: LD_INT 0
20043: EQUAL
20044: IFFALSE 20110
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 91
20053: PUSH
20054: LD_INT 52
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 82
20063: PUSH
20064: LD_INT 34
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 90
20073: PUSH
20074: LD_INT 26
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 86
20083: PUSH
20084: LD_INT 16
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 80
20093: PUSH
20094: LD_INT 12
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: ST_TO_ADDR
20108: GO 20183
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20110: LD_ADDR_VAR 0 3
20114: PUSH
20115: LD_INT 91
20117: PUSH
20118: LD_INT 52
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 68
20127: PUSH
20128: LD_INT 46
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 48
20137: PUSH
20138: LD_INT 43
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 33
20147: PUSH
20148: LD_INT 34
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 19
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 38
20167: PUSH
20168: LD_INT 16
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 256
20192: PUSH
20193: LD_INT 1000
20195: EQUAL
20196: IFFALSE 20214
// AgressiveMove ( i , path ) else
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_VAR 0 3
20207: PPUSH
20208: CALL 81061 0 2
20212: GO 20325
// if GetLives ( i ) < 650 then
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL_OW 256
20223: PUSH
20224: LD_INT 650
20226: LESS
20227: IFFALSE 20325
// begin if not IsInArea ( i , russianRepairArea ) then
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_INT 12
20236: PPUSH
20237: CALL_OW 308
20241: NOT
20242: IFFALSE 20311
// begin SetTag ( i , 0 ) ;
20244: LD_VAR 0 1
20248: PPUSH
20249: LD_INT 0
20251: PPUSH
20252: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20256: LD_VAR 0 1
20260: PPUSH
20261: CALL_OW 261
20265: PUSH
20266: LD_INT 50
20268: LESS
20269: PUSH
20270: LD_INT 21
20272: PPUSH
20273: CALL_OW 302
20277: AND
20278: IFFALSE 20294
// ComMoveUnit ( i , rufab ) else
20280: LD_VAR 0 1
20284: PPUSH
20285: LD_INT 21
20287: PPUSH
20288: CALL_OW 112
20292: GO 20309
// ComMoveXY ( i , 121 , 99 ) ;
20294: LD_VAR 0 1
20298: PPUSH
20299: LD_INT 121
20301: PPUSH
20302: LD_INT 99
20304: PPUSH
20305: CALL_OW 111
// end else
20309: GO 20325
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20311: LD_VAR 0 1
20315: PPUSH
20316: CALL_OW 311
20320: PPUSH
20321: CALL 80157 0 1
// end ; end ;
20325: GO 20015
20327: POP
20328: POP
// end ;
20329: PPOPN 4
20331: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20332: LD_INT 0
20334: PPUSH
20335: PPUSH
20336: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: DOUBLE
20343: LD_INT 1
20345: DEC
20346: ST_TO_ADDR
20347: LD_INT 4
20349: PUSH
20350: LD_INT 5
20352: PUSH
20353: LD_INT 6
20355: PUSH
20356: LD_INT 6
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: PUSH
20365: LD_OWVAR 67
20369: ARRAY
20370: PUSH
20371: FOR_TO
20372: IFFALSE 20547
// begin uc_side := 3 ;
20374: LD_ADDR_OWVAR 20
20378: PUSH
20379: LD_INT 3
20381: ST_TO_ADDR
// uc_nation := 3 ;
20382: LD_ADDR_OWVAR 21
20386: PUSH
20387: LD_INT 3
20389: ST_TO_ADDR
// InitHC_All ( ) ;
20390: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20394: LD_INT 0
20396: PPUSH
20397: LD_INT 4
20399: PUSH
20400: LD_INT 5
20402: PUSH
20403: LD_INT 6
20405: PUSH
20406: LD_INT 6
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_OWVAR 67
20419: ARRAY
20420: PPUSH
20421: CALL_OW 381
// un := CreateHuman ;
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: CALL_OW 44
20434: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20435: LD_VAR 0 3
20439: PPUSH
20440: LD_INT 127
20442: PPUSH
20443: LD_INT 62
20445: PPUSH
20446: LD_INT 3
20448: PPUSH
20449: LD_INT 0
20451: PPUSH
20452: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20456: LD_ADDR_EXP 49
20460: PUSH
20461: LD_EXP 49
20465: PPUSH
20466: LD_EXP 49
20470: PUSH
20471: LD_INT 1
20473: PLUS
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 1
20484: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20485: LD_VAR 0 3
20489: PPUSH
20490: LD_INT 83
20492: PPUSH
20493: LD_INT 49
20495: PPUSH
20496: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20500: LD_VAR 0 3
20504: PPUSH
20505: LD_INT 49
20507: PPUSH
20508: LD_INT 43
20510: PPUSH
20511: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20515: LD_VAR 0 3
20519: PPUSH
20520: LD_INT 31
20522: PPUSH
20523: LD_INT 15
20525: PPUSH
20526: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20530: LD_VAR 0 3
20534: PPUSH
20535: LD_INT 63
20537: PPUSH
20538: LD_INT 9
20540: PPUSH
20541: CALL_OW 174
// end ;
20545: GO 20371
20547: POP
20548: POP
// end ; end_of_file
20549: LD_VAR 0 1
20553: RET
// export function CreateNature ; var i , un ; begin
20554: LD_INT 0
20556: PPUSH
20557: PPUSH
20558: PPUSH
// for i := 1 to Difficulty + 2 do
20559: LD_ADDR_VAR 0 2
20563: PUSH
20564: DOUBLE
20565: LD_INT 1
20567: DEC
20568: ST_TO_ADDR
20569: LD_OWVAR 67
20573: PUSH
20574: LD_INT 2
20576: PLUS
20577: PUSH
20578: FOR_TO
20579: IFFALSE 20688
// begin hc_sex := sex_male ;
20581: LD_ADDR_OWVAR 27
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// uc_side := 0 ;
20589: LD_ADDR_OWVAR 20
20593: PUSH
20594: LD_INT 0
20596: ST_TO_ADDR
// uc_nation := nation_nature ;
20597: LD_ADDR_OWVAR 21
20601: PUSH
20602: LD_INT 0
20604: ST_TO_ADDR
// hc_class := class_tiger ;
20605: LD_ADDR_OWVAR 28
20609: PUSH
20610: LD_INT 14
20612: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20613: LD_ADDR_OWVAR 31
20617: PUSH
20618: LD_EXP 36
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20638: LD_ADDR_OWVAR 35
20642: PUSH
20643: LD_INT 5
20645: NEG
20646: PPUSH
20647: LD_INT 5
20649: PPUSH
20650: CALL_OW 12
20654: PUSH
20655: LD_OWVAR 67
20659: MUL
20660: ST_TO_ADDR
// un := CreateHuman ;
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: CALL_OW 44
20670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_INT 18
20678: PPUSH
20679: LD_INT 0
20681: PPUSH
20682: CALL_OW 49
// end ;
20686: GO 20578
20688: POP
20689: POP
// for i = 1 to rand ( 3 , 4 ) do
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: DOUBLE
20696: LD_INT 1
20698: DEC
20699: ST_TO_ADDR
20700: LD_INT 3
20702: PPUSH
20703: LD_INT 4
20705: PPUSH
20706: CALL_OW 12
20710: PUSH
20711: FOR_TO
20712: IFFALSE 20782
// begin hc_class := class_phororhacos ;
20714: LD_ADDR_OWVAR 28
20718: PUSH
20719: LD_INT 18
20721: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20722: LD_ADDR_OWVAR 31
20726: PUSH
20727: LD_EXP 36
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
// hc_agressivity := 0 ;
20747: LD_ADDR_OWVAR 35
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// un = CreateHuman ;
20755: LD_ADDR_VAR 0 3
20759: PUSH
20760: CALL_OW 44
20764: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20765: LD_VAR 0 3
20769: PPUSH
20770: LD_INT 18
20772: PPUSH
20773: LD_INT 0
20775: PPUSH
20776: CALL_OW 49
// end ;
20780: GO 20711
20782: POP
20783: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20784: LD_ADDR_VAR 0 2
20788: PUSH
20789: DOUBLE
20790: LD_INT 1
20792: DEC
20793: ST_TO_ADDR
20794: LD_INT 1
20796: PPUSH
20797: LD_INT 3
20799: PPUSH
20800: CALL_OW 12
20804: PUSH
20805: LD_OWVAR 67
20809: PLUS
20810: PUSH
20811: FOR_TO
20812: IFFALSE 20949
// begin hc_class := class_apeman ;
20814: LD_ADDR_OWVAR 28
20818: PUSH
20819: LD_INT 12
20821: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20822: LD_ADDR_OWVAR 31
20826: PUSH
20827: LD_INT 2
20829: PPUSH
20830: LD_INT 5
20832: PPUSH
20833: CALL_OW 12
20837: PUSH
20838: LD_INT 0
20840: PPUSH
20841: LD_INT 2
20843: PPUSH
20844: CALL_OW 12
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20861: LD_ADDR_OWVAR 35
20865: PUSH
20866: LD_INT 0
20868: PPUSH
20869: LD_INT 10
20871: PPUSH
20872: CALL_OW 12
20876: PUSH
20877: LD_INT 10
20879: PPUSH
20880: LD_INT 20
20882: PPUSH
20883: CALL_OW 12
20887: PUSH
20888: LD_INT 20
20890: PPUSH
20891: LD_INT 25
20893: PPUSH
20894: CALL_OW 12
20898: PUSH
20899: LD_INT 20
20901: PPUSH
20902: LD_INT 30
20904: PPUSH
20905: CALL_OW 12
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: LD_OWVAR 67
20920: ARRAY
20921: ST_TO_ADDR
// un := CreateHuman ;
20922: LD_ADDR_VAR 0 3
20926: PUSH
20927: CALL_OW 44
20931: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20932: LD_VAR 0 3
20936: PPUSH
20937: LD_INT 19
20939: PPUSH
20940: LD_INT 0
20942: PPUSH
20943: CALL_OW 49
// end ;
20947: GO 20811
20949: POP
20950: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20951: LD_ADDR_VAR 0 2
20955: PUSH
20956: DOUBLE
20957: LD_INT 1
20959: DEC
20960: ST_TO_ADDR
20961: LD_INT 5
20963: PPUSH
20964: LD_INT 6
20966: PPUSH
20967: CALL_OW 12
20971: PUSH
20972: LD_OWVAR 67
20976: PLUS
20977: PUSH
20978: FOR_TO
20979: IFFALSE 21063
// begin hc_class := class_apeman ;
20981: LD_ADDR_OWVAR 28
20985: PUSH
20986: LD_INT 12
20988: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20989: LD_ADDR_OWVAR 31
20993: PUSH
20994: LD_INT 2
20996: PPUSH
20997: LD_INT 5
20999: PPUSH
21000: CALL_OW 12
21004: PUSH
21005: LD_INT 0
21007: PPUSH
21008: LD_INT 2
21010: PPUSH
21011: CALL_OW 12
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 0
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
// hc_agressivity := 0 ;
21028: LD_ADDR_OWVAR 35
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// un = CreateHuman ;
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: CALL_OW 44
21045: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 20
21053: PPUSH
21054: LD_INT 0
21056: PPUSH
21057: CALL_OW 49
// end ;
21061: GO 20978
21063: POP
21064: POP
// end ; end_of_file end_of_file
21065: LD_VAR 0 1
21069: RET
// every 0 0$1 do
21070: GO 21072
21072: DISABLE
// begin enable ;
21073: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21074: LD_STRING updateTimer(
21076: PUSH
21077: LD_OWVAR 1
21081: STR
21082: PUSH
21083: LD_STRING );
21085: STR
21086: PPUSH
21087: CALL_OW 559
// end ;
21091: END
// export function SOS_MapStart ( ) ; begin
21092: LD_INT 0
21094: PPUSH
// if streamModeActive then
21095: LD_EXP 50
21099: IFFALSE 21108
// DefineStreamItems ( true ) ;
21101: LD_INT 1
21103: PPUSH
21104: CALL 22762 0 1
// UpdateFactoryWaypoints ( ) ;
21108: CALL 35623 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21112: CALL 35880 0 0
// end ;
21116: LD_VAR 0 1
21120: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21121: LD_INT 0
21123: PPUSH
// if p2 = hack_mode then
21124: LD_VAR 0 2
21128: PUSH
21129: LD_INT 100
21131: EQUAL
21132: IFFALSE 22135
// begin if not StreamModeActive then
21134: LD_EXP 50
21138: NOT
21139: IFFALSE 21149
// StreamModeActive := true ;
21141: LD_ADDR_EXP 50
21145: PUSH
21146: LD_INT 1
21148: ST_TO_ADDR
// if p3 = 0 then
21149: LD_VAR 0 3
21153: PUSH
21154: LD_INT 0
21156: EQUAL
21157: IFFALSE 21163
// InitStreamMode ;
21159: CALL 22298 0 0
// if p3 = 1 then
21163: LD_VAR 0 3
21167: PUSH
21168: LD_INT 1
21170: EQUAL
21171: IFFALSE 21181
// sRocket := true ;
21173: LD_ADDR_EXP 55
21177: PUSH
21178: LD_INT 1
21180: ST_TO_ADDR
// if p3 = 2 then
21181: LD_VAR 0 3
21185: PUSH
21186: LD_INT 2
21188: EQUAL
21189: IFFALSE 21199
// sSpeed := true ;
21191: LD_ADDR_EXP 54
21195: PUSH
21196: LD_INT 1
21198: ST_TO_ADDR
// if p3 = 3 then
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 3
21206: EQUAL
21207: IFFALSE 21217
// sEngine := true ;
21209: LD_ADDR_EXP 56
21213: PUSH
21214: LD_INT 1
21216: ST_TO_ADDR
// if p3 = 4 then
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 4
21224: EQUAL
21225: IFFALSE 21235
// sSpec := true ;
21227: LD_ADDR_EXP 53
21231: PUSH
21232: LD_INT 1
21234: ST_TO_ADDR
// if p3 = 5 then
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 5
21242: EQUAL
21243: IFFALSE 21253
// sLevel := true ;
21245: LD_ADDR_EXP 57
21249: PUSH
21250: LD_INT 1
21252: ST_TO_ADDR
// if p3 = 6 then
21253: LD_VAR 0 3
21257: PUSH
21258: LD_INT 6
21260: EQUAL
21261: IFFALSE 21271
// sArmoury := true ;
21263: LD_ADDR_EXP 58
21267: PUSH
21268: LD_INT 1
21270: ST_TO_ADDR
// if p3 = 7 then
21271: LD_VAR 0 3
21275: PUSH
21276: LD_INT 7
21278: EQUAL
21279: IFFALSE 21289
// sRadar := true ;
21281: LD_ADDR_EXP 59
21285: PUSH
21286: LD_INT 1
21288: ST_TO_ADDR
// if p3 = 8 then
21289: LD_VAR 0 3
21293: PUSH
21294: LD_INT 8
21296: EQUAL
21297: IFFALSE 21307
// sBunker := true ;
21299: LD_ADDR_EXP 60
21303: PUSH
21304: LD_INT 1
21306: ST_TO_ADDR
// if p3 = 9 then
21307: LD_VAR 0 3
21311: PUSH
21312: LD_INT 9
21314: EQUAL
21315: IFFALSE 21325
// sHack := true ;
21317: LD_ADDR_EXP 61
21321: PUSH
21322: LD_INT 1
21324: ST_TO_ADDR
// if p3 = 10 then
21325: LD_VAR 0 3
21329: PUSH
21330: LD_INT 10
21332: EQUAL
21333: IFFALSE 21343
// sFire := true ;
21335: LD_ADDR_EXP 62
21339: PUSH
21340: LD_INT 1
21342: ST_TO_ADDR
// if p3 = 11 then
21343: LD_VAR 0 3
21347: PUSH
21348: LD_INT 11
21350: EQUAL
21351: IFFALSE 21361
// sRefresh := true ;
21353: LD_ADDR_EXP 63
21357: PUSH
21358: LD_INT 1
21360: ST_TO_ADDR
// if p3 = 12 then
21361: LD_VAR 0 3
21365: PUSH
21366: LD_INT 12
21368: EQUAL
21369: IFFALSE 21379
// sExp := true ;
21371: LD_ADDR_EXP 64
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
// if p3 = 13 then
21379: LD_VAR 0 3
21383: PUSH
21384: LD_INT 13
21386: EQUAL
21387: IFFALSE 21397
// sDepot := true ;
21389: LD_ADDR_EXP 65
21393: PUSH
21394: LD_INT 1
21396: ST_TO_ADDR
// if p3 = 14 then
21397: LD_VAR 0 3
21401: PUSH
21402: LD_INT 14
21404: EQUAL
21405: IFFALSE 21415
// sFlag := true ;
21407: LD_ADDR_EXP 66
21411: PUSH
21412: LD_INT 1
21414: ST_TO_ADDR
// if p3 = 15 then
21415: LD_VAR 0 3
21419: PUSH
21420: LD_INT 15
21422: EQUAL
21423: IFFALSE 21433
// sKamikadze := true ;
21425: LD_ADDR_EXP 74
21429: PUSH
21430: LD_INT 1
21432: ST_TO_ADDR
// if p3 = 16 then
21433: LD_VAR 0 3
21437: PUSH
21438: LD_INT 16
21440: EQUAL
21441: IFFALSE 21451
// sTroll := true ;
21443: LD_ADDR_EXP 75
21447: PUSH
21448: LD_INT 1
21450: ST_TO_ADDR
// if p3 = 17 then
21451: LD_VAR 0 3
21455: PUSH
21456: LD_INT 17
21458: EQUAL
21459: IFFALSE 21469
// sSlow := true ;
21461: LD_ADDR_EXP 76
21465: PUSH
21466: LD_INT 1
21468: ST_TO_ADDR
// if p3 = 18 then
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 18
21476: EQUAL
21477: IFFALSE 21487
// sLack := true ;
21479: LD_ADDR_EXP 77
21483: PUSH
21484: LD_INT 1
21486: ST_TO_ADDR
// if p3 = 19 then
21487: LD_VAR 0 3
21491: PUSH
21492: LD_INT 19
21494: EQUAL
21495: IFFALSE 21505
// sTank := true ;
21497: LD_ADDR_EXP 79
21501: PUSH
21502: LD_INT 1
21504: ST_TO_ADDR
// if p3 = 20 then
21505: LD_VAR 0 3
21509: PUSH
21510: LD_INT 20
21512: EQUAL
21513: IFFALSE 21523
// sRemote := true ;
21515: LD_ADDR_EXP 80
21519: PUSH
21520: LD_INT 1
21522: ST_TO_ADDR
// if p3 = 21 then
21523: LD_VAR 0 3
21527: PUSH
21528: LD_INT 21
21530: EQUAL
21531: IFFALSE 21541
// sPowell := true ;
21533: LD_ADDR_EXP 81
21537: PUSH
21538: LD_INT 1
21540: ST_TO_ADDR
// if p3 = 22 then
21541: LD_VAR 0 3
21545: PUSH
21546: LD_INT 22
21548: EQUAL
21549: IFFALSE 21559
// sTeleport := true ;
21551: LD_ADDR_EXP 84
21555: PUSH
21556: LD_INT 1
21558: ST_TO_ADDR
// if p3 = 23 then
21559: LD_VAR 0 3
21563: PUSH
21564: LD_INT 23
21566: EQUAL
21567: IFFALSE 21577
// sOilTower := true ;
21569: LD_ADDR_EXP 86
21573: PUSH
21574: LD_INT 1
21576: ST_TO_ADDR
// if p3 = 24 then
21577: LD_VAR 0 3
21581: PUSH
21582: LD_INT 24
21584: EQUAL
21585: IFFALSE 21595
// sShovel := true ;
21587: LD_ADDR_EXP 87
21591: PUSH
21592: LD_INT 1
21594: ST_TO_ADDR
// if p3 = 25 then
21595: LD_VAR 0 3
21599: PUSH
21600: LD_INT 25
21602: EQUAL
21603: IFFALSE 21613
// sSheik := true ;
21605: LD_ADDR_EXP 88
21609: PUSH
21610: LD_INT 1
21612: ST_TO_ADDR
// if p3 = 26 then
21613: LD_VAR 0 3
21617: PUSH
21618: LD_INT 26
21620: EQUAL
21621: IFFALSE 21631
// sEarthquake := true ;
21623: LD_ADDR_EXP 90
21627: PUSH
21628: LD_INT 1
21630: ST_TO_ADDR
// if p3 = 27 then
21631: LD_VAR 0 3
21635: PUSH
21636: LD_INT 27
21638: EQUAL
21639: IFFALSE 21649
// sAI := true ;
21641: LD_ADDR_EXP 91
21645: PUSH
21646: LD_INT 1
21648: ST_TO_ADDR
// if p3 = 28 then
21649: LD_VAR 0 3
21653: PUSH
21654: LD_INT 28
21656: EQUAL
21657: IFFALSE 21667
// sCargo := true ;
21659: LD_ADDR_EXP 94
21663: PUSH
21664: LD_INT 1
21666: ST_TO_ADDR
// if p3 = 29 then
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 29
21674: EQUAL
21675: IFFALSE 21685
// sDLaser := true ;
21677: LD_ADDR_EXP 95
21681: PUSH
21682: LD_INT 1
21684: ST_TO_ADDR
// if p3 = 30 then
21685: LD_VAR 0 3
21689: PUSH
21690: LD_INT 30
21692: EQUAL
21693: IFFALSE 21703
// sExchange := true ;
21695: LD_ADDR_EXP 96
21699: PUSH
21700: LD_INT 1
21702: ST_TO_ADDR
// if p3 = 31 then
21703: LD_VAR 0 3
21707: PUSH
21708: LD_INT 31
21710: EQUAL
21711: IFFALSE 21721
// sFac := true ;
21713: LD_ADDR_EXP 97
21717: PUSH
21718: LD_INT 1
21720: ST_TO_ADDR
// if p3 = 32 then
21721: LD_VAR 0 3
21725: PUSH
21726: LD_INT 32
21728: EQUAL
21729: IFFALSE 21739
// sPower := true ;
21731: LD_ADDR_EXP 98
21735: PUSH
21736: LD_INT 1
21738: ST_TO_ADDR
// if p3 = 33 then
21739: LD_VAR 0 3
21743: PUSH
21744: LD_INT 33
21746: EQUAL
21747: IFFALSE 21757
// sRandom := true ;
21749: LD_ADDR_EXP 99
21753: PUSH
21754: LD_INT 1
21756: ST_TO_ADDR
// if p3 = 34 then
21757: LD_VAR 0 3
21761: PUSH
21762: LD_INT 34
21764: EQUAL
21765: IFFALSE 21775
// sShield := true ;
21767: LD_ADDR_EXP 100
21771: PUSH
21772: LD_INT 1
21774: ST_TO_ADDR
// if p3 = 35 then
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 35
21782: EQUAL
21783: IFFALSE 21793
// sTime := true ;
21785: LD_ADDR_EXP 101
21789: PUSH
21790: LD_INT 1
21792: ST_TO_ADDR
// if p3 = 36 then
21793: LD_VAR 0 3
21797: PUSH
21798: LD_INT 36
21800: EQUAL
21801: IFFALSE 21811
// sTools := true ;
21803: LD_ADDR_EXP 102
21807: PUSH
21808: LD_INT 1
21810: ST_TO_ADDR
// if p3 = 101 then
21811: LD_VAR 0 3
21815: PUSH
21816: LD_INT 101
21818: EQUAL
21819: IFFALSE 21829
// sSold := true ;
21821: LD_ADDR_EXP 67
21825: PUSH
21826: LD_INT 1
21828: ST_TO_ADDR
// if p3 = 102 then
21829: LD_VAR 0 3
21833: PUSH
21834: LD_INT 102
21836: EQUAL
21837: IFFALSE 21847
// sDiff := true ;
21839: LD_ADDR_EXP 68
21843: PUSH
21844: LD_INT 1
21846: ST_TO_ADDR
// if p3 = 103 then
21847: LD_VAR 0 3
21851: PUSH
21852: LD_INT 103
21854: EQUAL
21855: IFFALSE 21865
// sFog := true ;
21857: LD_ADDR_EXP 71
21861: PUSH
21862: LD_INT 1
21864: ST_TO_ADDR
// if p3 = 104 then
21865: LD_VAR 0 3
21869: PUSH
21870: LD_INT 104
21872: EQUAL
21873: IFFALSE 21883
// sReset := true ;
21875: LD_ADDR_EXP 72
21879: PUSH
21880: LD_INT 1
21882: ST_TO_ADDR
// if p3 = 105 then
21883: LD_VAR 0 3
21887: PUSH
21888: LD_INT 105
21890: EQUAL
21891: IFFALSE 21901
// sSun := true ;
21893: LD_ADDR_EXP 73
21897: PUSH
21898: LD_INT 1
21900: ST_TO_ADDR
// if p3 = 106 then
21901: LD_VAR 0 3
21905: PUSH
21906: LD_INT 106
21908: EQUAL
21909: IFFALSE 21919
// sTiger := true ;
21911: LD_ADDR_EXP 69
21915: PUSH
21916: LD_INT 1
21918: ST_TO_ADDR
// if p3 = 107 then
21919: LD_VAR 0 3
21923: PUSH
21924: LD_INT 107
21926: EQUAL
21927: IFFALSE 21937
// sBomb := true ;
21929: LD_ADDR_EXP 70
21933: PUSH
21934: LD_INT 1
21936: ST_TO_ADDR
// if p3 = 108 then
21937: LD_VAR 0 3
21941: PUSH
21942: LD_INT 108
21944: EQUAL
21945: IFFALSE 21955
// sWound := true ;
21947: LD_ADDR_EXP 78
21951: PUSH
21952: LD_INT 1
21954: ST_TO_ADDR
// if p3 = 109 then
21955: LD_VAR 0 3
21959: PUSH
21960: LD_INT 109
21962: EQUAL
21963: IFFALSE 21973
// sBetray := true ;
21965: LD_ADDR_EXP 82
21969: PUSH
21970: LD_INT 1
21972: ST_TO_ADDR
// if p3 = 110 then
21973: LD_VAR 0 3
21977: PUSH
21978: LD_INT 110
21980: EQUAL
21981: IFFALSE 21991
// sContamin := true ;
21983: LD_ADDR_EXP 83
21987: PUSH
21988: LD_INT 1
21990: ST_TO_ADDR
// if p3 = 111 then
21991: LD_VAR 0 3
21995: PUSH
21996: LD_INT 111
21998: EQUAL
21999: IFFALSE 22009
// sOil := true ;
22001: LD_ADDR_EXP 85
22005: PUSH
22006: LD_INT 1
22008: ST_TO_ADDR
// if p3 = 112 then
22009: LD_VAR 0 3
22013: PUSH
22014: LD_INT 112
22016: EQUAL
22017: IFFALSE 22027
// sStu := true ;
22019: LD_ADDR_EXP 89
22023: PUSH
22024: LD_INT 1
22026: ST_TO_ADDR
// if p3 = 113 then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_INT 113
22034: EQUAL
22035: IFFALSE 22045
// sBazooka := true ;
22037: LD_ADDR_EXP 92
22041: PUSH
22042: LD_INT 1
22044: ST_TO_ADDR
// if p3 = 114 then
22045: LD_VAR 0 3
22049: PUSH
22050: LD_INT 114
22052: EQUAL
22053: IFFALSE 22063
// sMortar := true ;
22055: LD_ADDR_EXP 93
22059: PUSH
22060: LD_INT 1
22062: ST_TO_ADDR
// if p3 = 115 then
22063: LD_VAR 0 3
22067: PUSH
22068: LD_INT 115
22070: EQUAL
22071: IFFALSE 22081
// sRanger := true ;
22073: LD_ADDR_EXP 103
22077: PUSH
22078: LD_INT 1
22080: ST_TO_ADDR
// if p3 = 116 then
22081: LD_VAR 0 3
22085: PUSH
22086: LD_INT 116
22088: EQUAL
22089: IFFALSE 22099
// sComputer := true ;
22091: LD_ADDR_EXP 104
22095: PUSH
22096: LD_INT 1
22098: ST_TO_ADDR
// if p3 = 117 then
22099: LD_VAR 0 3
22103: PUSH
22104: LD_INT 117
22106: EQUAL
22107: IFFALSE 22117
// s30 := true ;
22109: LD_ADDR_EXP 105
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// if p3 = 118 then
22117: LD_VAR 0 3
22121: PUSH
22122: LD_INT 118
22124: EQUAL
22125: IFFALSE 22135
// s60 := true ;
22127: LD_ADDR_EXP 106
22131: PUSH
22132: LD_INT 1
22134: ST_TO_ADDR
// end ; if p2 = stream_mode then
22135: LD_VAR 0 2
22139: PUSH
22140: LD_INT 101
22142: EQUAL
22143: IFFALSE 22271
// begin case p3 of 1 :
22145: LD_VAR 0 3
22149: PUSH
22150: LD_INT 1
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22165
22158: POP
// hHackUnlimitedResources ; 2 :
22159: CALL 34369 0 0
22163: GO 22271
22165: LD_INT 2
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22180
22173: POP
// hHackSetLevel10 ; 3 :
22174: CALL 34502 0 0
22178: GO 22271
22180: LD_INT 3
22182: DOUBLE
22183: EQUAL
22184: IFTRUE 22188
22186: GO 22195
22188: POP
// hHackSetLevel10YourUnits ; 4 :
22189: CALL 34587 0 0
22193: GO 22271
22195: LD_INT 4
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22210
22203: POP
// hHackInvincible ; 5 :
22204: CALL 35035 0 0
22208: GO 22271
22210: LD_INT 5
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 22225
22218: POP
// hHackInvisible ; 6 :
22219: CALL 35146 0 0
22223: GO 22271
22225: LD_INT 6
22227: DOUBLE
22228: EQUAL
22229: IFTRUE 22233
22231: GO 22240
22233: POP
// hHackChangeYourSide ; 7 :
22234: CALL 35203 0 0
22238: GO 22271
22240: LD_INT 7
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22255
22248: POP
// hHackChangeUnitSide ; 8 :
22249: CALL 35245 0 0
22253: GO 22271
22255: LD_INT 8
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22270
22263: POP
// hHackFog ; end ;
22264: CALL 35346 0 0
22268: GO 22271
22270: POP
// end ; end ;
22271: LD_VAR 0 7
22275: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22276: GO 22278
22278: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22279: LD_STRING initStreamRollete();
22281: PPUSH
22282: CALL_OW 559
// InitStreamMode ;
22286: CALL 22298 0 0
// DefineStreamItems ( false ) ;
22290: LD_INT 0
22292: PPUSH
22293: CALL 22762 0 1
// end ;
22297: END
// function InitStreamMode ; begin
22298: LD_INT 0
22300: PPUSH
// streamModeActive := false ;
22301: LD_ADDR_EXP 50
22305: PUSH
22306: LD_INT 0
22308: ST_TO_ADDR
// normalCounter := 36 ;
22309: LD_ADDR_EXP 51
22313: PUSH
22314: LD_INT 36
22316: ST_TO_ADDR
// hardcoreCounter := 18 ;
22317: LD_ADDR_EXP 52
22321: PUSH
22322: LD_INT 18
22324: ST_TO_ADDR
// sRocket := false ;
22325: LD_ADDR_EXP 55
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// sSpeed := false ;
22333: LD_ADDR_EXP 54
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// sEngine := false ;
22341: LD_ADDR_EXP 56
22345: PUSH
22346: LD_INT 0
22348: ST_TO_ADDR
// sSpec := false ;
22349: LD_ADDR_EXP 53
22353: PUSH
22354: LD_INT 0
22356: ST_TO_ADDR
// sLevel := false ;
22357: LD_ADDR_EXP 57
22361: PUSH
22362: LD_INT 0
22364: ST_TO_ADDR
// sArmoury := false ;
22365: LD_ADDR_EXP 58
22369: PUSH
22370: LD_INT 0
22372: ST_TO_ADDR
// sRadar := false ;
22373: LD_ADDR_EXP 59
22377: PUSH
22378: LD_INT 0
22380: ST_TO_ADDR
// sBunker := false ;
22381: LD_ADDR_EXP 60
22385: PUSH
22386: LD_INT 0
22388: ST_TO_ADDR
// sHack := false ;
22389: LD_ADDR_EXP 61
22393: PUSH
22394: LD_INT 0
22396: ST_TO_ADDR
// sFire := false ;
22397: LD_ADDR_EXP 62
22401: PUSH
22402: LD_INT 0
22404: ST_TO_ADDR
// sRefresh := false ;
22405: LD_ADDR_EXP 63
22409: PUSH
22410: LD_INT 0
22412: ST_TO_ADDR
// sExp := false ;
22413: LD_ADDR_EXP 64
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
// sDepot := false ;
22421: LD_ADDR_EXP 65
22425: PUSH
22426: LD_INT 0
22428: ST_TO_ADDR
// sFlag := false ;
22429: LD_ADDR_EXP 66
22433: PUSH
22434: LD_INT 0
22436: ST_TO_ADDR
// sKamikadze := false ;
22437: LD_ADDR_EXP 74
22441: PUSH
22442: LD_INT 0
22444: ST_TO_ADDR
// sTroll := false ;
22445: LD_ADDR_EXP 75
22449: PUSH
22450: LD_INT 0
22452: ST_TO_ADDR
// sSlow := false ;
22453: LD_ADDR_EXP 76
22457: PUSH
22458: LD_INT 0
22460: ST_TO_ADDR
// sLack := false ;
22461: LD_ADDR_EXP 77
22465: PUSH
22466: LD_INT 0
22468: ST_TO_ADDR
// sTank := false ;
22469: LD_ADDR_EXP 79
22473: PUSH
22474: LD_INT 0
22476: ST_TO_ADDR
// sRemote := false ;
22477: LD_ADDR_EXP 80
22481: PUSH
22482: LD_INT 0
22484: ST_TO_ADDR
// sPowell := false ;
22485: LD_ADDR_EXP 81
22489: PUSH
22490: LD_INT 0
22492: ST_TO_ADDR
// sTeleport := false ;
22493: LD_ADDR_EXP 84
22497: PUSH
22498: LD_INT 0
22500: ST_TO_ADDR
// sOilTower := false ;
22501: LD_ADDR_EXP 86
22505: PUSH
22506: LD_INT 0
22508: ST_TO_ADDR
// sShovel := false ;
22509: LD_ADDR_EXP 87
22513: PUSH
22514: LD_INT 0
22516: ST_TO_ADDR
// sSheik := false ;
22517: LD_ADDR_EXP 88
22521: PUSH
22522: LD_INT 0
22524: ST_TO_ADDR
// sEarthquake := false ;
22525: LD_ADDR_EXP 90
22529: PUSH
22530: LD_INT 0
22532: ST_TO_ADDR
// sAI := false ;
22533: LD_ADDR_EXP 91
22537: PUSH
22538: LD_INT 0
22540: ST_TO_ADDR
// sCargo := false ;
22541: LD_ADDR_EXP 94
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
// sDLaser := false ;
22549: LD_ADDR_EXP 95
22553: PUSH
22554: LD_INT 0
22556: ST_TO_ADDR
// sExchange := false ;
22557: LD_ADDR_EXP 96
22561: PUSH
22562: LD_INT 0
22564: ST_TO_ADDR
// sFac := false ;
22565: LD_ADDR_EXP 97
22569: PUSH
22570: LD_INT 0
22572: ST_TO_ADDR
// sPower := false ;
22573: LD_ADDR_EXP 98
22577: PUSH
22578: LD_INT 0
22580: ST_TO_ADDR
// sRandom := false ;
22581: LD_ADDR_EXP 99
22585: PUSH
22586: LD_INT 0
22588: ST_TO_ADDR
// sShield := false ;
22589: LD_ADDR_EXP 100
22593: PUSH
22594: LD_INT 0
22596: ST_TO_ADDR
// sTime := false ;
22597: LD_ADDR_EXP 101
22601: PUSH
22602: LD_INT 0
22604: ST_TO_ADDR
// sTools := false ;
22605: LD_ADDR_EXP 102
22609: PUSH
22610: LD_INT 0
22612: ST_TO_ADDR
// sSold := false ;
22613: LD_ADDR_EXP 67
22617: PUSH
22618: LD_INT 0
22620: ST_TO_ADDR
// sDiff := false ;
22621: LD_ADDR_EXP 68
22625: PUSH
22626: LD_INT 0
22628: ST_TO_ADDR
// sFog := false ;
22629: LD_ADDR_EXP 71
22633: PUSH
22634: LD_INT 0
22636: ST_TO_ADDR
// sReset := false ;
22637: LD_ADDR_EXP 72
22641: PUSH
22642: LD_INT 0
22644: ST_TO_ADDR
// sSun := false ;
22645: LD_ADDR_EXP 73
22649: PUSH
22650: LD_INT 0
22652: ST_TO_ADDR
// sTiger := false ;
22653: LD_ADDR_EXP 69
22657: PUSH
22658: LD_INT 0
22660: ST_TO_ADDR
// sBomb := false ;
22661: LD_ADDR_EXP 70
22665: PUSH
22666: LD_INT 0
22668: ST_TO_ADDR
// sWound := false ;
22669: LD_ADDR_EXP 78
22673: PUSH
22674: LD_INT 0
22676: ST_TO_ADDR
// sBetray := false ;
22677: LD_ADDR_EXP 82
22681: PUSH
22682: LD_INT 0
22684: ST_TO_ADDR
// sContamin := false ;
22685: LD_ADDR_EXP 83
22689: PUSH
22690: LD_INT 0
22692: ST_TO_ADDR
// sOil := false ;
22693: LD_ADDR_EXP 85
22697: PUSH
22698: LD_INT 0
22700: ST_TO_ADDR
// sStu := false ;
22701: LD_ADDR_EXP 89
22705: PUSH
22706: LD_INT 0
22708: ST_TO_ADDR
// sBazooka := false ;
22709: LD_ADDR_EXP 92
22713: PUSH
22714: LD_INT 0
22716: ST_TO_ADDR
// sMortar := false ;
22717: LD_ADDR_EXP 93
22721: PUSH
22722: LD_INT 0
22724: ST_TO_ADDR
// sRanger := false ;
22725: LD_ADDR_EXP 103
22729: PUSH
22730: LD_INT 0
22732: ST_TO_ADDR
// sComputer := false ;
22733: LD_ADDR_EXP 104
22737: PUSH
22738: LD_INT 0
22740: ST_TO_ADDR
// s30 := false ;
22741: LD_ADDR_EXP 105
22745: PUSH
22746: LD_INT 0
22748: ST_TO_ADDR
// s60 := false ;
22749: LD_ADDR_EXP 106
22753: PUSH
22754: LD_INT 0
22756: ST_TO_ADDR
// end ;
22757: LD_VAR 0 1
22761: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
// result := [ ] ;
22771: LD_ADDR_VAR 0 2
22775: PUSH
22776: EMPTY
22777: ST_TO_ADDR
// if campaign_id = 1 then
22778: LD_OWVAR 69
22782: PUSH
22783: LD_INT 1
22785: EQUAL
22786: IFFALSE 25952
// begin case mission_number of 1 :
22788: LD_OWVAR 70
22792: PUSH
22793: LD_INT 1
22795: DOUBLE
22796: EQUAL
22797: IFTRUE 22801
22799: GO 22877
22801: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22802: LD_ADDR_VAR 0 2
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 11
22815: PUSH
22816: LD_INT 12
22818: PUSH
22819: LD_INT 15
22821: PUSH
22822: LD_INT 16
22824: PUSH
22825: LD_INT 22
22827: PUSH
22828: LD_INT 23
22830: PUSH
22831: LD_INT 26
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 101
22847: PUSH
22848: LD_INT 102
22850: PUSH
22851: LD_INT 106
22853: PUSH
22854: LD_INT 116
22856: PUSH
22857: LD_INT 117
22859: PUSH
22860: LD_INT 118
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: ST_TO_ADDR
22875: GO 25950
22877: LD_INT 2
22879: DOUBLE
22880: EQUAL
22881: IFTRUE 22885
22883: GO 22969
22885: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22886: LD_ADDR_VAR 0 2
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: LD_INT 4
22896: PUSH
22897: LD_INT 11
22899: PUSH
22900: LD_INT 12
22902: PUSH
22903: LD_INT 15
22905: PUSH
22906: LD_INT 16
22908: PUSH
22909: LD_INT 22
22911: PUSH
22912: LD_INT 23
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 101
22931: PUSH
22932: LD_INT 102
22934: PUSH
22935: LD_INT 105
22937: PUSH
22938: LD_INT 106
22940: PUSH
22941: LD_INT 108
22943: PUSH
22944: LD_INT 116
22946: PUSH
22947: LD_INT 117
22949: PUSH
22950: LD_INT 118
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: ST_TO_ADDR
22967: GO 25950
22969: LD_INT 3
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 23065
22977: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22978: LD_ADDR_VAR 0 2
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: LD_INT 4
22988: PUSH
22989: LD_INT 5
22991: PUSH
22992: LD_INT 11
22994: PUSH
22995: LD_INT 12
22997: PUSH
22998: LD_INT 15
23000: PUSH
23001: LD_INT 16
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_INT 26
23009: PUSH
23010: LD_INT 36
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 101
23027: PUSH
23028: LD_INT 102
23030: PUSH
23031: LD_INT 105
23033: PUSH
23034: LD_INT 106
23036: PUSH
23037: LD_INT 108
23039: PUSH
23040: LD_INT 116
23042: PUSH
23043: LD_INT 117
23045: PUSH
23046: LD_INT 118
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: ST_TO_ADDR
23063: GO 25950
23065: LD_INT 4
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23169
23073: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23074: LD_ADDR_VAR 0 2
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 8
23090: PUSH
23091: LD_INT 11
23093: PUSH
23094: LD_INT 12
23096: PUSH
23097: LD_INT 15
23099: PUSH
23100: LD_INT 16
23102: PUSH
23103: LD_INT 22
23105: PUSH
23106: LD_INT 23
23108: PUSH
23109: LD_INT 26
23111: PUSH
23112: LD_INT 36
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 101
23131: PUSH
23132: LD_INT 102
23134: PUSH
23135: LD_INT 105
23137: PUSH
23138: LD_INT 106
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 116
23146: PUSH
23147: LD_INT 117
23149: PUSH
23150: LD_INT 118
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: ST_TO_ADDR
23167: GO 25950
23169: LD_INT 5
23171: DOUBLE
23172: EQUAL
23173: IFTRUE 23177
23175: GO 23289
23177: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23178: LD_ADDR_VAR 0 2
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: LD_INT 4
23188: PUSH
23189: LD_INT 5
23191: PUSH
23192: LD_INT 6
23194: PUSH
23195: LD_INT 8
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 12
23203: PUSH
23204: LD_INT 15
23206: PUSH
23207: LD_INT 16
23209: PUSH
23210: LD_INT 22
23212: PUSH
23213: LD_INT 23
23215: PUSH
23216: LD_INT 25
23218: PUSH
23219: LD_INT 26
23221: PUSH
23222: LD_INT 36
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 101
23243: PUSH
23244: LD_INT 102
23246: PUSH
23247: LD_INT 105
23249: PUSH
23250: LD_INT 106
23252: PUSH
23253: LD_INT 108
23255: PUSH
23256: LD_INT 109
23258: PUSH
23259: LD_INT 112
23261: PUSH
23262: LD_INT 116
23264: PUSH
23265: LD_INT 117
23267: PUSH
23268: LD_INT 118
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: ST_TO_ADDR
23287: GO 25950
23289: LD_INT 6
23291: DOUBLE
23292: EQUAL
23293: IFTRUE 23297
23295: GO 23429
23297: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23298: LD_ADDR_VAR 0 2
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 4
23308: PUSH
23309: LD_INT 5
23311: PUSH
23312: LD_INT 6
23314: PUSH
23315: LD_INT 8
23317: PUSH
23318: LD_INT 11
23320: PUSH
23321: LD_INT 12
23323: PUSH
23324: LD_INT 15
23326: PUSH
23327: LD_INT 16
23329: PUSH
23330: LD_INT 20
23332: PUSH
23333: LD_INT 21
23335: PUSH
23336: LD_INT 22
23338: PUSH
23339: LD_INT 23
23341: PUSH
23342: LD_INT 25
23344: PUSH
23345: LD_INT 26
23347: PUSH
23348: LD_INT 30
23350: PUSH
23351: LD_INT 31
23353: PUSH
23354: LD_INT 32
23356: PUSH
23357: LD_INT 36
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 101
23383: PUSH
23384: LD_INT 102
23386: PUSH
23387: LD_INT 105
23389: PUSH
23390: LD_INT 106
23392: PUSH
23393: LD_INT 108
23395: PUSH
23396: LD_INT 109
23398: PUSH
23399: LD_INT 112
23401: PUSH
23402: LD_INT 116
23404: PUSH
23405: LD_INT 117
23407: PUSH
23408: LD_INT 118
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 25950
23429: LD_INT 7
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23549
23437: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 4
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: LD_INT 7
23454: PUSH
23455: LD_INT 11
23457: PUSH
23458: LD_INT 12
23460: PUSH
23461: LD_INT 15
23463: PUSH
23464: LD_INT 16
23466: PUSH
23467: LD_INT 20
23469: PUSH
23470: LD_INT 21
23472: PUSH
23473: LD_INT 22
23475: PUSH
23476: LD_INT 23
23478: PUSH
23479: LD_INT 25
23481: PUSH
23482: LD_INT 26
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 101
23503: PUSH
23504: LD_INT 102
23506: PUSH
23507: LD_INT 103
23509: PUSH
23510: LD_INT 105
23512: PUSH
23513: LD_INT 106
23515: PUSH
23516: LD_INT 108
23518: PUSH
23519: LD_INT 112
23521: PUSH
23522: LD_INT 116
23524: PUSH
23525: LD_INT 117
23527: PUSH
23528: LD_INT 118
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: ST_TO_ADDR
23547: GO 25950
23549: LD_INT 8
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23697
23557: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23558: LD_ADDR_VAR 0 2
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 4
23568: PUSH
23569: LD_INT 5
23571: PUSH
23572: LD_INT 6
23574: PUSH
23575: LD_INT 7
23577: PUSH
23578: LD_INT 8
23580: PUSH
23581: LD_INT 11
23583: PUSH
23584: LD_INT 12
23586: PUSH
23587: LD_INT 15
23589: PUSH
23590: LD_INT 16
23592: PUSH
23593: LD_INT 20
23595: PUSH
23596: LD_INT 21
23598: PUSH
23599: LD_INT 22
23601: PUSH
23602: LD_INT 23
23604: PUSH
23605: LD_INT 25
23607: PUSH
23608: LD_INT 26
23610: PUSH
23611: LD_INT 30
23613: PUSH
23614: LD_INT 31
23616: PUSH
23617: LD_INT 32
23619: PUSH
23620: LD_INT 36
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 101
23647: PUSH
23648: LD_INT 102
23650: PUSH
23651: LD_INT 103
23653: PUSH
23654: LD_INT 105
23656: PUSH
23657: LD_INT 106
23659: PUSH
23660: LD_INT 108
23662: PUSH
23663: LD_INT 109
23665: PUSH
23666: LD_INT 112
23668: PUSH
23669: LD_INT 116
23671: PUSH
23672: LD_INT 117
23674: PUSH
23675: LD_INT 118
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: ST_TO_ADDR
23695: GO 25950
23697: LD_INT 9
23699: DOUBLE
23700: EQUAL
23701: IFTRUE 23705
23703: GO 23853
23705: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23706: LD_ADDR_VAR 0 2
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 4
23716: PUSH
23717: LD_INT 5
23719: PUSH
23720: LD_INT 6
23722: PUSH
23723: LD_INT 7
23725: PUSH
23726: LD_INT 8
23728: PUSH
23729: LD_INT 11
23731: PUSH
23732: LD_INT 12
23734: PUSH
23735: LD_INT 15
23737: PUSH
23738: LD_INT 16
23740: PUSH
23741: LD_INT 20
23743: PUSH
23744: LD_INT 21
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_INT 23
23752: PUSH
23753: LD_INT 25
23755: PUSH
23756: LD_INT 26
23758: PUSH
23759: LD_INT 28
23761: PUSH
23762: LD_INT 30
23764: PUSH
23765: LD_INT 31
23767: PUSH
23768: LD_INT 32
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 101
23799: PUSH
23800: LD_INT 102
23802: PUSH
23803: LD_INT 103
23805: PUSH
23806: LD_INT 105
23808: PUSH
23809: LD_INT 106
23811: PUSH
23812: LD_INT 108
23814: PUSH
23815: LD_INT 109
23817: PUSH
23818: LD_INT 112
23820: PUSH
23821: LD_INT 114
23823: PUSH
23824: LD_INT 116
23826: PUSH
23827: LD_INT 117
23829: PUSH
23830: LD_INT 118
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: ST_TO_ADDR
23851: GO 25950
23853: LD_INT 10
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 24057
23861: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23862: LD_ADDR_VAR 0 2
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: LD_INT 6
23878: PUSH
23879: LD_INT 7
23881: PUSH
23882: LD_INT 8
23884: PUSH
23885: LD_INT 9
23887: PUSH
23888: LD_INT 10
23890: PUSH
23891: LD_INT 11
23893: PUSH
23894: LD_INT 12
23896: PUSH
23897: LD_INT 13
23899: PUSH
23900: LD_INT 14
23902: PUSH
23903: LD_INT 15
23905: PUSH
23906: LD_INT 16
23908: PUSH
23909: LD_INT 17
23911: PUSH
23912: LD_INT 18
23914: PUSH
23915: LD_INT 19
23917: PUSH
23918: LD_INT 20
23920: PUSH
23921: LD_INT 21
23923: PUSH
23924: LD_INT 22
23926: PUSH
23927: LD_INT 23
23929: PUSH
23930: LD_INT 24
23932: PUSH
23933: LD_INT 25
23935: PUSH
23936: LD_INT 26
23938: PUSH
23939: LD_INT 28
23941: PUSH
23942: LD_INT 30
23944: PUSH
23945: LD_INT 31
23947: PUSH
23948: LD_INT 32
23950: PUSH
23951: LD_INT 36
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 101
23987: PUSH
23988: LD_INT 102
23990: PUSH
23991: LD_INT 103
23993: PUSH
23994: LD_INT 104
23996: PUSH
23997: LD_INT 105
23999: PUSH
24000: LD_INT 106
24002: PUSH
24003: LD_INT 107
24005: PUSH
24006: LD_INT 108
24008: PUSH
24009: LD_INT 109
24011: PUSH
24012: LD_INT 110
24014: PUSH
24015: LD_INT 111
24017: PUSH
24018: LD_INT 112
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 116
24026: PUSH
24027: LD_INT 117
24029: PUSH
24030: LD_INT 118
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: ST_TO_ADDR
24055: GO 25950
24057: LD_INT 11
24059: DOUBLE
24060: EQUAL
24061: IFTRUE 24065
24063: GO 24269
24065: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: LD_INT 3
24076: PUSH
24077: LD_INT 4
24079: PUSH
24080: LD_INT 5
24082: PUSH
24083: LD_INT 6
24085: PUSH
24086: LD_INT 7
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: LD_INT 9
24094: PUSH
24095: LD_INT 10
24097: PUSH
24098: LD_INT 11
24100: PUSH
24101: LD_INT 12
24103: PUSH
24104: LD_INT 13
24106: PUSH
24107: LD_INT 14
24109: PUSH
24110: LD_INT 15
24112: PUSH
24113: LD_INT 16
24115: PUSH
24116: LD_INT 17
24118: PUSH
24119: LD_INT 18
24121: PUSH
24122: LD_INT 19
24124: PUSH
24125: LD_INT 20
24127: PUSH
24128: LD_INT 21
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_INT 23
24136: PUSH
24137: LD_INT 24
24139: PUSH
24140: LD_INT 25
24142: PUSH
24143: LD_INT 26
24145: PUSH
24146: LD_INT 28
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 31
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 34
24160: PUSH
24161: LD_INT 36
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 101
24199: PUSH
24200: LD_INT 102
24202: PUSH
24203: LD_INT 103
24205: PUSH
24206: LD_INT 104
24208: PUSH
24209: LD_INT 105
24211: PUSH
24212: LD_INT 106
24214: PUSH
24215: LD_INT 107
24217: PUSH
24218: LD_INT 108
24220: PUSH
24221: LD_INT 109
24223: PUSH
24224: LD_INT 110
24226: PUSH
24227: LD_INT 111
24229: PUSH
24230: LD_INT 112
24232: PUSH
24233: LD_INT 114
24235: PUSH
24236: LD_INT 116
24238: PUSH
24239: LD_INT 117
24241: PUSH
24242: LD_INT 118
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 25950
24269: LD_INT 12
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24497
24277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24278: LD_ADDR_VAR 0 2
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 6
24300: PUSH
24301: LD_INT 7
24303: PUSH
24304: LD_INT 8
24306: PUSH
24307: LD_INT 9
24309: PUSH
24310: LD_INT 10
24312: PUSH
24313: LD_INT 11
24315: PUSH
24316: LD_INT 12
24318: PUSH
24319: LD_INT 13
24321: PUSH
24322: LD_INT 14
24324: PUSH
24325: LD_INT 15
24327: PUSH
24328: LD_INT 16
24330: PUSH
24331: LD_INT 17
24333: PUSH
24334: LD_INT 18
24336: PUSH
24337: LD_INT 19
24339: PUSH
24340: LD_INT 20
24342: PUSH
24343: LD_INT 21
24345: PUSH
24346: LD_INT 22
24348: PUSH
24349: LD_INT 23
24351: PUSH
24352: LD_INT 24
24354: PUSH
24355: LD_INT 25
24357: PUSH
24358: LD_INT 26
24360: PUSH
24361: LD_INT 27
24363: PUSH
24364: LD_INT 28
24366: PUSH
24367: LD_INT 30
24369: PUSH
24370: LD_INT 31
24372: PUSH
24373: LD_INT 32
24375: PUSH
24376: LD_INT 33
24378: PUSH
24379: LD_INT 34
24381: PUSH
24382: LD_INT 36
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 101
24423: PUSH
24424: LD_INT 102
24426: PUSH
24427: LD_INT 103
24429: PUSH
24430: LD_INT 104
24432: PUSH
24433: LD_INT 105
24435: PUSH
24436: LD_INT 106
24438: PUSH
24439: LD_INT 107
24441: PUSH
24442: LD_INT 108
24444: PUSH
24445: LD_INT 109
24447: PUSH
24448: LD_INT 110
24450: PUSH
24451: LD_INT 111
24453: PUSH
24454: LD_INT 112
24456: PUSH
24457: LD_INT 113
24459: PUSH
24460: LD_INT 114
24462: PUSH
24463: LD_INT 116
24465: PUSH
24466: LD_INT 117
24468: PUSH
24469: LD_INT 118
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 25950
24497: LD_INT 13
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24713
24505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 8
24528: PUSH
24529: LD_INT 9
24531: PUSH
24532: LD_INT 10
24534: PUSH
24535: LD_INT 11
24537: PUSH
24538: LD_INT 12
24540: PUSH
24541: LD_INT 14
24543: PUSH
24544: LD_INT 15
24546: PUSH
24547: LD_INT 16
24549: PUSH
24550: LD_INT 17
24552: PUSH
24553: LD_INT 18
24555: PUSH
24556: LD_INT 19
24558: PUSH
24559: LD_INT 20
24561: PUSH
24562: LD_INT 21
24564: PUSH
24565: LD_INT 22
24567: PUSH
24568: LD_INT 23
24570: PUSH
24571: LD_INT 24
24573: PUSH
24574: LD_INT 25
24576: PUSH
24577: LD_INT 26
24579: PUSH
24580: LD_INT 27
24582: PUSH
24583: LD_INT 28
24585: PUSH
24586: LD_INT 30
24588: PUSH
24589: LD_INT 31
24591: PUSH
24592: LD_INT 32
24594: PUSH
24595: LD_INT 33
24597: PUSH
24598: LD_INT 34
24600: PUSH
24601: LD_INT 36
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 101
24639: PUSH
24640: LD_INT 102
24642: PUSH
24643: LD_INT 103
24645: PUSH
24646: LD_INT 104
24648: PUSH
24649: LD_INT 105
24651: PUSH
24652: LD_INT 106
24654: PUSH
24655: LD_INT 107
24657: PUSH
24658: LD_INT 108
24660: PUSH
24661: LD_INT 109
24663: PUSH
24664: LD_INT 110
24666: PUSH
24667: LD_INT 111
24669: PUSH
24670: LD_INT 112
24672: PUSH
24673: LD_INT 113
24675: PUSH
24676: LD_INT 114
24678: PUSH
24679: LD_INT 116
24681: PUSH
24682: LD_INT 117
24684: PUSH
24685: LD_INT 118
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: ST_TO_ADDR
24711: GO 25950
24713: LD_INT 14
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24945
24721: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24722: LD_ADDR_VAR 0 2
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: LD_INT 5
24741: PUSH
24742: LD_INT 6
24744: PUSH
24745: LD_INT 7
24747: PUSH
24748: LD_INT 8
24750: PUSH
24751: LD_INT 9
24753: PUSH
24754: LD_INT 10
24756: PUSH
24757: LD_INT 11
24759: PUSH
24760: LD_INT 12
24762: PUSH
24763: LD_INT 13
24765: PUSH
24766: LD_INT 14
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 16
24774: PUSH
24775: LD_INT 17
24777: PUSH
24778: LD_INT 18
24780: PUSH
24781: LD_INT 19
24783: PUSH
24784: LD_INT 20
24786: PUSH
24787: LD_INT 21
24789: PUSH
24790: LD_INT 22
24792: PUSH
24793: LD_INT 23
24795: PUSH
24796: LD_INT 24
24798: PUSH
24799: LD_INT 25
24801: PUSH
24802: LD_INT 26
24804: PUSH
24805: LD_INT 27
24807: PUSH
24808: LD_INT 28
24810: PUSH
24811: LD_INT 29
24813: PUSH
24814: LD_INT 30
24816: PUSH
24817: LD_INT 31
24819: PUSH
24820: LD_INT 32
24822: PUSH
24823: LD_INT 33
24825: PUSH
24826: LD_INT 34
24828: PUSH
24829: LD_INT 36
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 101
24871: PUSH
24872: LD_INT 102
24874: PUSH
24875: LD_INT 103
24877: PUSH
24878: LD_INT 104
24880: PUSH
24881: LD_INT 105
24883: PUSH
24884: LD_INT 106
24886: PUSH
24887: LD_INT 107
24889: PUSH
24890: LD_INT 108
24892: PUSH
24893: LD_INT 109
24895: PUSH
24896: LD_INT 110
24898: PUSH
24899: LD_INT 111
24901: PUSH
24902: LD_INT 112
24904: PUSH
24905: LD_INT 113
24907: PUSH
24908: LD_INT 114
24910: PUSH
24911: LD_INT 116
24913: PUSH
24914: LD_INT 117
24916: PUSH
24917: LD_INT 118
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: ST_TO_ADDR
24943: GO 25950
24945: LD_INT 15
24947: DOUBLE
24948: EQUAL
24949: IFTRUE 24953
24951: GO 25177
24953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 3
24967: PUSH
24968: LD_INT 4
24970: PUSH
24971: LD_INT 5
24973: PUSH
24974: LD_INT 6
24976: PUSH
24977: LD_INT 7
24979: PUSH
24980: LD_INT 8
24982: PUSH
24983: LD_INT 9
24985: PUSH
24986: LD_INT 10
24988: PUSH
24989: LD_INT 11
24991: PUSH
24992: LD_INT 12
24994: PUSH
24995: LD_INT 13
24997: PUSH
24998: LD_INT 14
25000: PUSH
25001: LD_INT 15
25003: PUSH
25004: LD_INT 16
25006: PUSH
25007: LD_INT 17
25009: PUSH
25010: LD_INT 18
25012: PUSH
25013: LD_INT 19
25015: PUSH
25016: LD_INT 20
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 22
25024: PUSH
25025: LD_INT 23
25027: PUSH
25028: LD_INT 24
25030: PUSH
25031: LD_INT 25
25033: PUSH
25034: LD_INT 26
25036: PUSH
25037: LD_INT 27
25039: PUSH
25040: LD_INT 28
25042: PUSH
25043: LD_INT 29
25045: PUSH
25046: LD_INT 30
25048: PUSH
25049: LD_INT 31
25051: PUSH
25052: LD_INT 32
25054: PUSH
25055: LD_INT 33
25057: PUSH
25058: LD_INT 34
25060: PUSH
25061: LD_INT 36
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 101
25103: PUSH
25104: LD_INT 102
25106: PUSH
25107: LD_INT 103
25109: PUSH
25110: LD_INT 104
25112: PUSH
25113: LD_INT 105
25115: PUSH
25116: LD_INT 106
25118: PUSH
25119: LD_INT 107
25121: PUSH
25122: LD_INT 108
25124: PUSH
25125: LD_INT 109
25127: PUSH
25128: LD_INT 110
25130: PUSH
25131: LD_INT 111
25133: PUSH
25134: LD_INT 112
25136: PUSH
25137: LD_INT 113
25139: PUSH
25140: LD_INT 114
25142: PUSH
25143: LD_INT 116
25145: PUSH
25146: LD_INT 117
25148: PUSH
25149: LD_INT 118
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: ST_TO_ADDR
25175: GO 25950
25177: LD_INT 16
25179: DOUBLE
25180: EQUAL
25181: IFTRUE 25185
25183: GO 25321
25185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25186: LD_ADDR_VAR 0 2
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 4
25196: PUSH
25197: LD_INT 5
25199: PUSH
25200: LD_INT 7
25202: PUSH
25203: LD_INT 11
25205: PUSH
25206: LD_INT 12
25208: PUSH
25209: LD_INT 15
25211: PUSH
25212: LD_INT 16
25214: PUSH
25215: LD_INT 20
25217: PUSH
25218: LD_INT 21
25220: PUSH
25221: LD_INT 22
25223: PUSH
25224: LD_INT 23
25226: PUSH
25227: LD_INT 25
25229: PUSH
25230: LD_INT 26
25232: PUSH
25233: LD_INT 30
25235: PUSH
25236: LD_INT 31
25238: PUSH
25239: LD_INT 32
25241: PUSH
25242: LD_INT 33
25244: PUSH
25245: LD_INT 34
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 101
25271: PUSH
25272: LD_INT 102
25274: PUSH
25275: LD_INT 103
25277: PUSH
25278: LD_INT 106
25280: PUSH
25281: LD_INT 108
25283: PUSH
25284: LD_INT 112
25286: PUSH
25287: LD_INT 113
25289: PUSH
25290: LD_INT 114
25292: PUSH
25293: LD_INT 116
25295: PUSH
25296: LD_INT 117
25298: PUSH
25299: LD_INT 118
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25950
25321: LD_INT 17
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25553
25329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25330: LD_ADDR_VAR 0 2
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: LD_INT 4
25346: PUSH
25347: LD_INT 5
25349: PUSH
25350: LD_INT 6
25352: PUSH
25353: LD_INT 7
25355: PUSH
25356: LD_INT 8
25358: PUSH
25359: LD_INT 9
25361: PUSH
25362: LD_INT 10
25364: PUSH
25365: LD_INT 11
25367: PUSH
25368: LD_INT 12
25370: PUSH
25371: LD_INT 13
25373: PUSH
25374: LD_INT 14
25376: PUSH
25377: LD_INT 15
25379: PUSH
25380: LD_INT 16
25382: PUSH
25383: LD_INT 17
25385: PUSH
25386: LD_INT 18
25388: PUSH
25389: LD_INT 19
25391: PUSH
25392: LD_INT 20
25394: PUSH
25395: LD_INT 21
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_INT 23
25403: PUSH
25404: LD_INT 24
25406: PUSH
25407: LD_INT 25
25409: PUSH
25410: LD_INT 26
25412: PUSH
25413: LD_INT 27
25415: PUSH
25416: LD_INT 28
25418: PUSH
25419: LD_INT 29
25421: PUSH
25422: LD_INT 30
25424: PUSH
25425: LD_INT 31
25427: PUSH
25428: LD_INT 32
25430: PUSH
25431: LD_INT 33
25433: PUSH
25434: LD_INT 34
25436: PUSH
25437: LD_INT 36
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 101
25479: PUSH
25480: LD_INT 102
25482: PUSH
25483: LD_INT 103
25485: PUSH
25486: LD_INT 104
25488: PUSH
25489: LD_INT 105
25491: PUSH
25492: LD_INT 106
25494: PUSH
25495: LD_INT 107
25497: PUSH
25498: LD_INT 108
25500: PUSH
25501: LD_INT 109
25503: PUSH
25504: LD_INT 110
25506: PUSH
25507: LD_INT 111
25509: PUSH
25510: LD_INT 112
25512: PUSH
25513: LD_INT 113
25515: PUSH
25516: LD_INT 114
25518: PUSH
25519: LD_INT 116
25521: PUSH
25522: LD_INT 117
25524: PUSH
25525: LD_INT 118
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: ST_TO_ADDR
25551: GO 25950
25553: LD_INT 18
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25709
25561: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25562: LD_ADDR_VAR 0 2
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 4
25572: PUSH
25573: LD_INT 5
25575: PUSH
25576: LD_INT 7
25578: PUSH
25579: LD_INT 11
25581: PUSH
25582: LD_INT 12
25584: PUSH
25585: LD_INT 15
25587: PUSH
25588: LD_INT 16
25590: PUSH
25591: LD_INT 20
25593: PUSH
25594: LD_INT 21
25596: PUSH
25597: LD_INT 22
25599: PUSH
25600: LD_INT 23
25602: PUSH
25603: LD_INT 25
25605: PUSH
25606: LD_INT 26
25608: PUSH
25609: LD_INT 30
25611: PUSH
25612: LD_INT 31
25614: PUSH
25615: LD_INT 32
25617: PUSH
25618: LD_INT 33
25620: PUSH
25621: LD_INT 34
25623: PUSH
25624: LD_INT 35
25626: PUSH
25627: LD_INT 36
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 101
25655: PUSH
25656: LD_INT 102
25658: PUSH
25659: LD_INT 103
25661: PUSH
25662: LD_INT 106
25664: PUSH
25665: LD_INT 108
25667: PUSH
25668: LD_INT 112
25670: PUSH
25671: LD_INT 113
25673: PUSH
25674: LD_INT 114
25676: PUSH
25677: LD_INT 115
25679: PUSH
25680: LD_INT 116
25682: PUSH
25683: LD_INT 117
25685: PUSH
25686: LD_INT 118
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: ST_TO_ADDR
25707: GO 25950
25709: LD_INT 19
25711: DOUBLE
25712: EQUAL
25713: IFTRUE 25717
25715: GO 25949
25717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25718: LD_ADDR_VAR 0 2
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: LD_INT 4
25734: PUSH
25735: LD_INT 5
25737: PUSH
25738: LD_INT 6
25740: PUSH
25741: LD_INT 7
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: LD_INT 9
25749: PUSH
25750: LD_INT 10
25752: PUSH
25753: LD_INT 11
25755: PUSH
25756: LD_INT 12
25758: PUSH
25759: LD_INT 13
25761: PUSH
25762: LD_INT 14
25764: PUSH
25765: LD_INT 15
25767: PUSH
25768: LD_INT 16
25770: PUSH
25771: LD_INT 17
25773: PUSH
25774: LD_INT 18
25776: PUSH
25777: LD_INT 19
25779: PUSH
25780: LD_INT 20
25782: PUSH
25783: LD_INT 21
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_INT 23
25791: PUSH
25792: LD_INT 24
25794: PUSH
25795: LD_INT 25
25797: PUSH
25798: LD_INT 26
25800: PUSH
25801: LD_INT 27
25803: PUSH
25804: LD_INT 28
25806: PUSH
25807: LD_INT 29
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 31
25815: PUSH
25816: LD_INT 32
25818: PUSH
25819: LD_INT 33
25821: PUSH
25822: LD_INT 34
25824: PUSH
25825: LD_INT 35
25827: PUSH
25828: LD_INT 36
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 101
25871: PUSH
25872: LD_INT 102
25874: PUSH
25875: LD_INT 103
25877: PUSH
25878: LD_INT 104
25880: PUSH
25881: LD_INT 105
25883: PUSH
25884: LD_INT 106
25886: PUSH
25887: LD_INT 107
25889: PUSH
25890: LD_INT 108
25892: PUSH
25893: LD_INT 109
25895: PUSH
25896: LD_INT 110
25898: PUSH
25899: LD_INT 111
25901: PUSH
25902: LD_INT 112
25904: PUSH
25905: LD_INT 113
25907: PUSH
25908: LD_INT 114
25910: PUSH
25911: LD_INT 115
25913: PUSH
25914: LD_INT 116
25916: PUSH
25917: LD_INT 117
25919: PUSH
25920: LD_INT 118
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: ST_TO_ADDR
25947: GO 25950
25949: POP
// end else
25950: GO 26181
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25952: LD_ADDR_VAR 0 2
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: LD_INT 4
25968: PUSH
25969: LD_INT 5
25971: PUSH
25972: LD_INT 6
25974: PUSH
25975: LD_INT 7
25977: PUSH
25978: LD_INT 8
25980: PUSH
25981: LD_INT 9
25983: PUSH
25984: LD_INT 10
25986: PUSH
25987: LD_INT 11
25989: PUSH
25990: LD_INT 12
25992: PUSH
25993: LD_INT 13
25995: PUSH
25996: LD_INT 14
25998: PUSH
25999: LD_INT 15
26001: PUSH
26002: LD_INT 16
26004: PUSH
26005: LD_INT 17
26007: PUSH
26008: LD_INT 18
26010: PUSH
26011: LD_INT 19
26013: PUSH
26014: LD_INT 20
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 22
26022: PUSH
26023: LD_INT 23
26025: PUSH
26026: LD_INT 24
26028: PUSH
26029: LD_INT 25
26031: PUSH
26032: LD_INT 26
26034: PUSH
26035: LD_INT 27
26037: PUSH
26038: LD_INT 28
26040: PUSH
26041: LD_INT 29
26043: PUSH
26044: LD_INT 30
26046: PUSH
26047: LD_INT 31
26049: PUSH
26050: LD_INT 32
26052: PUSH
26053: LD_INT 33
26055: PUSH
26056: LD_INT 34
26058: PUSH
26059: LD_INT 35
26061: PUSH
26062: LD_INT 36
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 101
26105: PUSH
26106: LD_INT 102
26108: PUSH
26109: LD_INT 103
26111: PUSH
26112: LD_INT 104
26114: PUSH
26115: LD_INT 105
26117: PUSH
26118: LD_INT 106
26120: PUSH
26121: LD_INT 107
26123: PUSH
26124: LD_INT 108
26126: PUSH
26127: LD_INT 109
26129: PUSH
26130: LD_INT 110
26132: PUSH
26133: LD_INT 111
26135: PUSH
26136: LD_INT 112
26138: PUSH
26139: LD_INT 113
26141: PUSH
26142: LD_INT 114
26144: PUSH
26145: LD_INT 115
26147: PUSH
26148: LD_INT 116
26150: PUSH
26151: LD_INT 117
26153: PUSH
26154: LD_INT 118
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: ST_TO_ADDR
// if result then
26181: LD_VAR 0 2
26185: IFFALSE 26971
// begin normal :=  ;
26187: LD_ADDR_VAR 0 5
26191: PUSH
26192: LD_STRING 
26194: ST_TO_ADDR
// hardcore :=  ;
26195: LD_ADDR_VAR 0 6
26199: PUSH
26200: LD_STRING 
26202: ST_TO_ADDR
// active :=  ;
26203: LD_ADDR_VAR 0 7
26207: PUSH
26208: LD_STRING 
26210: ST_TO_ADDR
// for i = 1 to normalCounter do
26211: LD_ADDR_VAR 0 8
26215: PUSH
26216: DOUBLE
26217: LD_INT 1
26219: DEC
26220: ST_TO_ADDR
26221: LD_EXP 51
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26328
// begin tmp := 0 ;
26229: LD_ADDR_VAR 0 3
26233: PUSH
26234: LD_STRING 0
26236: ST_TO_ADDR
// if result [ 1 ] then
26237: LD_VAR 0 2
26241: PUSH
26242: LD_INT 1
26244: ARRAY
26245: IFFALSE 26310
// if result [ 1 ] [ 1 ] = i then
26247: LD_VAR 0 2
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: PUSH
26256: LD_INT 1
26258: ARRAY
26259: PUSH
26260: LD_VAR 0 8
26264: EQUAL
26265: IFFALSE 26310
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26267: LD_ADDR_VAR 0 2
26271: PUSH
26272: LD_VAR 0 2
26276: PPUSH
26277: LD_INT 1
26279: PPUSH
26280: LD_VAR 0 2
26284: PUSH
26285: LD_INT 1
26287: ARRAY
26288: PPUSH
26289: LD_INT 1
26291: PPUSH
26292: CALL_OW 3
26296: PPUSH
26297: CALL_OW 1
26301: ST_TO_ADDR
// tmp := 1 ;
26302: LD_ADDR_VAR 0 3
26306: PUSH
26307: LD_STRING 1
26309: ST_TO_ADDR
// end ; normal := normal & tmp ;
26310: LD_ADDR_VAR 0 5
26314: PUSH
26315: LD_VAR 0 5
26319: PUSH
26320: LD_VAR 0 3
26324: STR
26325: ST_TO_ADDR
// end ;
26326: GO 26226
26328: POP
26329: POP
// for i = 1 to hardcoreCounter do
26330: LD_ADDR_VAR 0 8
26334: PUSH
26335: DOUBLE
26336: LD_INT 1
26338: DEC
26339: ST_TO_ADDR
26340: LD_EXP 52
26344: PUSH
26345: FOR_TO
26346: IFFALSE 26451
// begin tmp := 0 ;
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_STRING 0
26355: ST_TO_ADDR
// if result [ 2 ] then
26356: LD_VAR 0 2
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: IFFALSE 26433
// if result [ 2 ] [ 1 ] = 100 + i then
26366: LD_VAR 0 2
26370: PUSH
26371: LD_INT 2
26373: ARRAY
26374: PUSH
26375: LD_INT 1
26377: ARRAY
26378: PUSH
26379: LD_INT 100
26381: PUSH
26382: LD_VAR 0 8
26386: PLUS
26387: EQUAL
26388: IFFALSE 26433
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26390: LD_ADDR_VAR 0 2
26394: PUSH
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 2
26402: PPUSH
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 2
26410: ARRAY
26411: PPUSH
26412: LD_INT 1
26414: PPUSH
26415: CALL_OW 3
26419: PPUSH
26420: CALL_OW 1
26424: ST_TO_ADDR
// tmp := 1 ;
26425: LD_ADDR_VAR 0 3
26429: PUSH
26430: LD_STRING 1
26432: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 6
26442: PUSH
26443: LD_VAR 0 3
26447: STR
26448: ST_TO_ADDR
// end ;
26449: GO 26345
26451: POP
26452: POP
// if isGameLoad then
26453: LD_VAR 0 1
26457: IFFALSE 26932
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26459: LD_ADDR_VAR 0 4
26463: PUSH
26464: LD_EXP 55
26468: PUSH
26469: LD_EXP 54
26473: PUSH
26474: LD_EXP 56
26478: PUSH
26479: LD_EXP 53
26483: PUSH
26484: LD_EXP 57
26488: PUSH
26489: LD_EXP 58
26493: PUSH
26494: LD_EXP 59
26498: PUSH
26499: LD_EXP 60
26503: PUSH
26504: LD_EXP 61
26508: PUSH
26509: LD_EXP 62
26513: PUSH
26514: LD_EXP 63
26518: PUSH
26519: LD_EXP 64
26523: PUSH
26524: LD_EXP 65
26528: PUSH
26529: LD_EXP 66
26533: PUSH
26534: LD_EXP 74
26538: PUSH
26539: LD_EXP 75
26543: PUSH
26544: LD_EXP 76
26548: PUSH
26549: LD_EXP 77
26553: PUSH
26554: LD_EXP 79
26558: PUSH
26559: LD_EXP 80
26563: PUSH
26564: LD_EXP 81
26568: PUSH
26569: LD_EXP 84
26573: PUSH
26574: LD_EXP 86
26578: PUSH
26579: LD_EXP 87
26583: PUSH
26584: LD_EXP 88
26588: PUSH
26589: LD_EXP 90
26593: PUSH
26594: LD_EXP 91
26598: PUSH
26599: LD_EXP 94
26603: PUSH
26604: LD_EXP 95
26608: PUSH
26609: LD_EXP 96
26613: PUSH
26614: LD_EXP 97
26618: PUSH
26619: LD_EXP 98
26623: PUSH
26624: LD_EXP 99
26628: PUSH
26629: LD_EXP 100
26633: PUSH
26634: LD_EXP 101
26638: PUSH
26639: LD_EXP 102
26643: PUSH
26644: LD_EXP 67
26648: PUSH
26649: LD_EXP 68
26653: PUSH
26654: LD_EXP 71
26658: PUSH
26659: LD_EXP 72
26663: PUSH
26664: LD_EXP 73
26668: PUSH
26669: LD_EXP 69
26673: PUSH
26674: LD_EXP 70
26678: PUSH
26679: LD_EXP 78
26683: PUSH
26684: LD_EXP 82
26688: PUSH
26689: LD_EXP 83
26693: PUSH
26694: LD_EXP 85
26698: PUSH
26699: LD_EXP 89
26703: PUSH
26704: LD_EXP 92
26708: PUSH
26709: LD_EXP 93
26713: PUSH
26714: LD_EXP 103
26718: PUSH
26719: LD_EXP 104
26723: PUSH
26724: LD_EXP 105
26728: PUSH
26729: LD_EXP 106
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// tmp :=  ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_STRING 
26797: ST_TO_ADDR
// for i = 1 to normalCounter do
26798: LD_ADDR_VAR 0 8
26802: PUSH
26803: DOUBLE
26804: LD_INT 1
26806: DEC
26807: ST_TO_ADDR
26808: LD_EXP 51
26812: PUSH
26813: FOR_TO
26814: IFFALSE 26850
// begin if flags [ i ] then
26816: LD_VAR 0 4
26820: PUSH
26821: LD_VAR 0 8
26825: ARRAY
26826: IFFALSE 26848
// tmp := tmp & i & ; ;
26828: LD_ADDR_VAR 0 3
26832: PUSH
26833: LD_VAR 0 3
26837: PUSH
26838: LD_VAR 0 8
26842: STR
26843: PUSH
26844: LD_STRING ;
26846: STR
26847: ST_TO_ADDR
// end ;
26848: GO 26813
26850: POP
26851: POP
// for i = 1 to hardcoreCounter do
26852: LD_ADDR_VAR 0 8
26856: PUSH
26857: DOUBLE
26858: LD_INT 1
26860: DEC
26861: ST_TO_ADDR
26862: LD_EXP 52
26866: PUSH
26867: FOR_TO
26868: IFFALSE 26914
// begin if flags [ normalCounter + i ] then
26870: LD_VAR 0 4
26874: PUSH
26875: LD_EXP 51
26879: PUSH
26880: LD_VAR 0 8
26884: PLUS
26885: ARRAY
26886: IFFALSE 26912
// tmp := tmp & ( 100 + i ) & ; ;
26888: LD_ADDR_VAR 0 3
26892: PUSH
26893: LD_VAR 0 3
26897: PUSH
26898: LD_INT 100
26900: PUSH
26901: LD_VAR 0 8
26905: PLUS
26906: STR
26907: PUSH
26908: LD_STRING ;
26910: STR
26911: ST_TO_ADDR
// end ;
26912: GO 26867
26914: POP
26915: POP
// if tmp then
26916: LD_VAR 0 3
26920: IFFALSE 26932
// active := tmp ;
26922: LD_ADDR_VAR 0 7
26926: PUSH
26927: LD_VAR 0 3
26931: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26932: LD_STRING getStreamItemsFromMission("
26934: PUSH
26935: LD_VAR 0 5
26939: STR
26940: PUSH
26941: LD_STRING ","
26943: STR
26944: PUSH
26945: LD_VAR 0 6
26949: STR
26950: PUSH
26951: LD_STRING ","
26953: STR
26954: PUSH
26955: LD_VAR 0 7
26959: STR
26960: PUSH
26961: LD_STRING ")
26963: STR
26964: PPUSH
26965: CALL_OW 559
// end else
26969: GO 26978
// ToLua ( getStreamItemsFromMission("","","") ) ;
26971: LD_STRING getStreamItemsFromMission("","","")
26973: PPUSH
26974: CALL_OW 559
// end ;
26978: LD_VAR 0 2
26982: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26983: LD_EXP 50
26987: PUSH
26988: LD_EXP 55
26992: AND
26993: IFFALSE 27117
26995: GO 26997
26997: DISABLE
26998: LD_INT 0
27000: PPUSH
27001: PPUSH
// begin enable ;
27002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27003: LD_ADDR_VAR 0 2
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_OWVAR 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: LD_INT 34
27025: PUSH
27026: LD_INT 7
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 34
27035: PUSH
27036: LD_INT 45
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 34
27045: PUSH
27046: LD_INT 28
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 34
27055: PUSH
27056: LD_INT 47
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 69
27078: ST_TO_ADDR
// if not tmp then
27079: LD_VAR 0 2
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27117
// for i in tmp do
27088: LD_ADDR_VAR 0 1
27092: PUSH
27093: LD_VAR 0 2
27097: PUSH
27098: FOR_IN
27099: IFFALSE 27115
// begin SetLives ( i , 0 ) ;
27101: LD_VAR 0 1
27105: PPUSH
27106: LD_INT 0
27108: PPUSH
27109: CALL_OW 234
// end ;
27113: GO 27098
27115: POP
27116: POP
// end ;
27117: PPOPN 2
27119: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27120: LD_EXP 50
27124: PUSH
27125: LD_EXP 56
27129: AND
27130: IFFALSE 27214
27132: GO 27134
27134: DISABLE
27135: LD_INT 0
27137: PPUSH
27138: PPUSH
// begin enable ;
27139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27140: LD_ADDR_VAR 0 2
27144: PUSH
27145: LD_INT 22
27147: PUSH
27148: LD_OWVAR 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 32
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 69
27175: ST_TO_ADDR
// if not tmp then
27176: LD_VAR 0 2
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27214
// for i in tmp do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: LD_VAR 0 2
27194: PUSH
27195: FOR_IN
27196: IFFALSE 27212
// begin SetLives ( i , 0 ) ;
27198: LD_VAR 0 1
27202: PPUSH
27203: LD_INT 0
27205: PPUSH
27206: CALL_OW 234
// end ;
27210: GO 27195
27212: POP
27213: POP
// end ;
27214: PPOPN 2
27216: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27217: LD_EXP 50
27221: PUSH
27222: LD_EXP 53
27226: AND
27227: IFFALSE 27320
27229: GO 27231
27231: DISABLE
27232: LD_INT 0
27234: PPUSH
// begin enable ;
27235: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27236: LD_ADDR_VAR 0 1
27240: PUSH
27241: LD_INT 22
27243: PUSH
27244: LD_OWVAR 2
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 25
27258: PUSH
27259: LD_INT 5
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 25
27268: PUSH
27269: LD_INT 9
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 25
27278: PUSH
27279: LD_INT 8
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: PUSH
27301: FOR_IN
27302: IFFALSE 27318
// begin SetClass ( i , 1 ) ;
27304: LD_VAR 0 1
27308: PPUSH
27309: LD_INT 1
27311: PPUSH
27312: CALL_OW 336
// end ;
27316: GO 27301
27318: POP
27319: POP
// end ;
27320: PPOPN 1
27322: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27323: LD_EXP 50
27327: PUSH
27328: LD_EXP 54
27332: AND
27333: PUSH
27334: LD_OWVAR 65
27338: PUSH
27339: LD_INT 7
27341: LESS
27342: AND
27343: IFFALSE 27357
27345: GO 27347
27347: DISABLE
// begin enable ;
27348: ENABLE
// game_speed := 7 ;
27349: LD_ADDR_OWVAR 65
27353: PUSH
27354: LD_INT 7
27356: ST_TO_ADDR
// end ;
27357: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27358: LD_EXP 50
27362: PUSH
27363: LD_EXP 57
27367: AND
27368: IFFALSE 27570
27370: GO 27372
27372: DISABLE
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_INT 81
27385: PUSH
27386: LD_OWVAR 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 21
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 69
27413: ST_TO_ADDR
// if not tmp then
27414: LD_VAR 0 3
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 27570
// if tmp > 5 then
27423: LD_VAR 0 3
27427: PUSH
27428: LD_INT 5
27430: GREATER
27431: IFFALSE 27443
// k := 5 else
27433: LD_ADDR_VAR 0 2
27437: PUSH
27438: LD_INT 5
27440: ST_TO_ADDR
27441: GO 27453
// k := tmp ;
27443: LD_ADDR_VAR 0 2
27447: PUSH
27448: LD_VAR 0 3
27452: ST_TO_ADDR
// for i := 1 to k do
27453: LD_ADDR_VAR 0 1
27457: PUSH
27458: DOUBLE
27459: LD_INT 1
27461: DEC
27462: ST_TO_ADDR
27463: LD_VAR 0 2
27467: PUSH
27468: FOR_TO
27469: IFFALSE 27568
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27471: LD_VAR 0 3
27475: PUSH
27476: LD_VAR 0 1
27480: ARRAY
27481: PPUSH
27482: LD_VAR 0 1
27486: PUSH
27487: LD_INT 4
27489: MOD
27490: PUSH
27491: LD_INT 1
27493: PLUS
27494: PPUSH
27495: CALL_OW 259
27499: PUSH
27500: LD_INT 10
27502: LESS
27503: IFFALSE 27566
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27505: LD_VAR 0 3
27509: PUSH
27510: LD_VAR 0 1
27514: ARRAY
27515: PPUSH
27516: LD_VAR 0 1
27520: PUSH
27521: LD_INT 4
27523: MOD
27524: PUSH
27525: LD_INT 1
27527: PLUS
27528: PPUSH
27529: LD_VAR 0 3
27533: PUSH
27534: LD_VAR 0 1
27538: ARRAY
27539: PPUSH
27540: LD_VAR 0 1
27544: PUSH
27545: LD_INT 4
27547: MOD
27548: PUSH
27549: LD_INT 1
27551: PLUS
27552: PPUSH
27553: CALL_OW 259
27557: PUSH
27558: LD_INT 1
27560: PLUS
27561: PPUSH
27562: CALL_OW 237
27566: GO 27468
27568: POP
27569: POP
// end ;
27570: PPOPN 3
27572: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27573: LD_EXP 50
27577: PUSH
27578: LD_EXP 58
27582: AND
27583: IFFALSE 27603
27585: GO 27587
27587: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27588: LD_INT 4
27590: PPUSH
27591: LD_OWVAR 2
27595: PPUSH
27596: LD_INT 0
27598: PPUSH
27599: CALL_OW 324
27603: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27604: LD_EXP 50
27608: PUSH
27609: LD_EXP 87
27613: AND
27614: IFFALSE 27634
27616: GO 27618
27618: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27619: LD_INT 19
27621: PPUSH
27622: LD_OWVAR 2
27626: PPUSH
27627: LD_INT 0
27629: PPUSH
27630: CALL_OW 324
27634: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27635: LD_EXP 50
27639: PUSH
27640: LD_EXP 59
27644: AND
27645: IFFALSE 27747
27647: GO 27649
27649: DISABLE
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
// begin enable ;
27654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27655: LD_ADDR_VAR 0 2
27659: PUSH
27660: LD_INT 22
27662: PUSH
27663: LD_OWVAR 2
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 34
27677: PUSH
27678: LD_INT 11
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 34
27687: PUSH
27688: LD_INT 30
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PPUSH
27704: CALL_OW 69
27708: ST_TO_ADDR
// if not tmp then
27709: LD_VAR 0 2
27713: NOT
27714: IFFALSE 27718
// exit ;
27716: GO 27747
// for i in tmp do
27718: LD_ADDR_VAR 0 1
27722: PUSH
27723: LD_VAR 0 2
27727: PUSH
27728: FOR_IN
27729: IFFALSE 27745
// begin SetLives ( i , 0 ) ;
27731: LD_VAR 0 1
27735: PPUSH
27736: LD_INT 0
27738: PPUSH
27739: CALL_OW 234
// end ;
27743: GO 27728
27745: POP
27746: POP
// end ;
27747: PPOPN 2
27749: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27750: LD_EXP 50
27754: PUSH
27755: LD_EXP 60
27759: AND
27760: IFFALSE 27780
27762: GO 27764
27764: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27765: LD_INT 32
27767: PPUSH
27768: LD_OWVAR 2
27772: PPUSH
27773: LD_INT 0
27775: PPUSH
27776: CALL_OW 324
27780: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27781: LD_EXP 50
27785: PUSH
27786: LD_EXP 61
27790: AND
27791: IFFALSE 27972
27793: GO 27795
27795: DISABLE
27796: LD_INT 0
27798: PPUSH
27799: PPUSH
27800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27801: LD_ADDR_VAR 0 2
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_OWVAR 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 33
27820: PUSH
27821: LD_INT 3
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: ST_TO_ADDR
// if not tmp then
27837: LD_VAR 0 2
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 27972
// side := 0 ;
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_INT 0
27853: ST_TO_ADDR
// for i := 1 to 8 do
27854: LD_ADDR_VAR 0 1
27858: PUSH
27859: DOUBLE
27860: LD_INT 1
27862: DEC
27863: ST_TO_ADDR
27864: LD_INT 8
27866: PUSH
27867: FOR_TO
27868: IFFALSE 27916
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27870: LD_OWVAR 2
27874: PUSH
27875: LD_VAR 0 1
27879: NONEQUAL
27880: PUSH
27881: LD_OWVAR 2
27885: PPUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 81
27895: PUSH
27896: LD_INT 2
27898: EQUAL
27899: AND
27900: IFFALSE 27914
// begin side := i ;
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_VAR 0 1
27911: ST_TO_ADDR
// break ;
27912: GO 27916
// end ;
27914: GO 27867
27916: POP
27917: POP
// if not side then
27918: LD_VAR 0 3
27922: NOT
27923: IFFALSE 27927
// exit ;
27925: GO 27972
// for i := 1 to tmp do
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: DOUBLE
27933: LD_INT 1
27935: DEC
27936: ST_TO_ADDR
27937: LD_VAR 0 2
27941: PUSH
27942: FOR_TO
27943: IFFALSE 27970
// if Prob ( 60 ) then
27945: LD_INT 60
27947: PPUSH
27948: CALL_OW 13
27952: IFFALSE 27968
// SetSide ( i , side ) ;
27954: LD_VAR 0 1
27958: PPUSH
27959: LD_VAR 0 3
27963: PPUSH
27964: CALL_OW 235
27968: GO 27942
27970: POP
27971: POP
// end ;
27972: PPOPN 3
27974: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27975: LD_EXP 50
27979: PUSH
27980: LD_EXP 63
27984: AND
27985: IFFALSE 28104
27987: GO 27989
27989: DISABLE
27990: LD_INT 0
27992: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27993: LD_ADDR_VAR 0 1
27997: PUSH
27998: LD_INT 22
28000: PUSH
28001: LD_OWVAR 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 21
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: LD_INT 23
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 69
28046: PUSH
28047: FOR_IN
28048: IFFALSE 28102
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28050: LD_VAR 0 1
28054: PPUSH
28055: CALL_OW 257
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 3
28068: PUSH
28069: LD_INT 4
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: IN
28078: IFFALSE 28100
// SetClass ( un , rand ( 1 , 4 ) ) ;
28080: LD_VAR 0 1
28084: PPUSH
28085: LD_INT 1
28087: PPUSH
28088: LD_INT 4
28090: PPUSH
28091: CALL_OW 12
28095: PPUSH
28096: CALL_OW 336
28100: GO 28047
28102: POP
28103: POP
// end ;
28104: PPOPN 1
28106: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28107: LD_EXP 50
28111: PUSH
28112: LD_EXP 62
28116: AND
28117: IFFALSE 28196
28119: GO 28121
28121: DISABLE
28122: LD_INT 0
28124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28125: LD_ADDR_VAR 0 1
28129: PUSH
28130: LD_INT 22
28132: PUSH
28133: LD_OWVAR 2
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 21
28144: PUSH
28145: LD_INT 3
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PPUSH
28156: CALL_OW 69
28160: ST_TO_ADDR
// if not tmp then
28161: LD_VAR 0 1
28165: NOT
28166: IFFALSE 28170
// exit ;
28168: GO 28196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28170: LD_VAR 0 1
28174: PUSH
28175: LD_INT 1
28177: PPUSH
28178: LD_VAR 0 1
28182: PPUSH
28183: CALL_OW 12
28187: ARRAY
28188: PPUSH
28189: LD_INT 100
28191: PPUSH
28192: CALL_OW 234
// end ;
28196: PPOPN 1
28198: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28199: LD_EXP 50
28203: PUSH
28204: LD_EXP 64
28208: AND
28209: IFFALSE 28307
28211: GO 28213
28213: DISABLE
28214: LD_INT 0
28216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28217: LD_ADDR_VAR 0 1
28221: PUSH
28222: LD_INT 22
28224: PUSH
28225: LD_OWVAR 2
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 69
28252: ST_TO_ADDR
// if not tmp then
28253: LD_VAR 0 1
28257: NOT
28258: IFFALSE 28262
// exit ;
28260: GO 28307
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28262: LD_VAR 0 1
28266: PUSH
28267: LD_INT 1
28269: PPUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: CALL_OW 12
28279: ARRAY
28280: PPUSH
28281: LD_INT 1
28283: PPUSH
28284: LD_INT 4
28286: PPUSH
28287: CALL_OW 12
28291: PPUSH
28292: LD_INT 3000
28294: PPUSH
28295: LD_INT 9000
28297: PPUSH
28298: CALL_OW 12
28302: PPUSH
28303: CALL_OW 492
// end ;
28307: PPOPN 1
28309: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28310: LD_EXP 50
28314: PUSH
28315: LD_EXP 65
28319: AND
28320: IFFALSE 28340
28322: GO 28324
28324: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28325: LD_INT 1
28327: PPUSH
28328: LD_OWVAR 2
28332: PPUSH
28333: LD_INT 0
28335: PPUSH
28336: CALL_OW 324
28340: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28341: LD_EXP 50
28345: PUSH
28346: LD_EXP 66
28350: AND
28351: IFFALSE 28434
28353: GO 28355
28355: DISABLE
28356: LD_INT 0
28358: PPUSH
28359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28360: LD_ADDR_VAR 0 2
28364: PUSH
28365: LD_INT 22
28367: PUSH
28368: LD_OWVAR 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 21
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PPUSH
28391: CALL_OW 69
28395: ST_TO_ADDR
// if not tmp then
28396: LD_VAR 0 2
28400: NOT
28401: IFFALSE 28405
// exit ;
28403: GO 28434
// for i in tmp do
28405: LD_ADDR_VAR 0 1
28409: PUSH
28410: LD_VAR 0 2
28414: PUSH
28415: FOR_IN
28416: IFFALSE 28432
// SetBLevel ( i , 10 ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_INT 10
28425: PPUSH
28426: CALL_OW 241
28430: GO 28415
28432: POP
28433: POP
// end ;
28434: PPOPN 2
28436: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28437: LD_EXP 50
28441: PUSH
28442: LD_EXP 67
28446: AND
28447: IFFALSE 28558
28449: GO 28451
28451: DISABLE
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
28456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_INT 22
28464: PUSH
28465: LD_OWVAR 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 25
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 3
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28558
// un := tmp [ rand ( 1 , tmp ) ] ;
28502: LD_ADDR_VAR 0 2
28506: PUSH
28507: LD_VAR 0 3
28511: PUSH
28512: LD_INT 1
28514: PPUSH
28515: LD_VAR 0 3
28519: PPUSH
28520: CALL_OW 12
28524: ARRAY
28525: ST_TO_ADDR
// if Crawls ( un ) then
28526: LD_VAR 0 2
28530: PPUSH
28531: CALL_OW 318
28535: IFFALSE 28546
// ComWalk ( un ) ;
28537: LD_VAR 0 2
28541: PPUSH
28542: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28546: LD_VAR 0 2
28550: PPUSH
28551: LD_INT 5
28553: PPUSH
28554: CALL_OW 336
// end ;
28558: PPOPN 3
28560: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28561: LD_EXP 50
28565: PUSH
28566: LD_EXP 68
28570: AND
28571: PUSH
28572: LD_OWVAR 67
28576: PUSH
28577: LD_INT 4
28579: LESS
28580: AND
28581: IFFALSE 28600
28583: GO 28585
28585: DISABLE
// begin Difficulty := Difficulty + 1 ;
28586: LD_ADDR_OWVAR 67
28590: PUSH
28591: LD_OWVAR 67
28595: PUSH
28596: LD_INT 1
28598: PLUS
28599: ST_TO_ADDR
// end ;
28600: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28601: LD_EXP 50
28605: PUSH
28606: LD_EXP 69
28610: AND
28611: IFFALSE 28714
28613: GO 28615
28615: DISABLE
28616: LD_INT 0
28618: PPUSH
// begin for i := 1 to 5 do
28619: LD_ADDR_VAR 0 1
28623: PUSH
28624: DOUBLE
28625: LD_INT 1
28627: DEC
28628: ST_TO_ADDR
28629: LD_INT 5
28631: PUSH
28632: FOR_TO
28633: IFFALSE 28712
// begin uc_nation := nation_nature ;
28635: LD_ADDR_OWVAR 21
28639: PUSH
28640: LD_INT 0
28642: ST_TO_ADDR
// uc_side := 0 ;
28643: LD_ADDR_OWVAR 20
28647: PUSH
28648: LD_INT 0
28650: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28651: LD_ADDR_OWVAR 29
28655: PUSH
28656: LD_INT 12
28658: PUSH
28659: LD_INT 12
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// hc_agressivity := 20 ;
28666: LD_ADDR_OWVAR 35
28670: PUSH
28671: LD_INT 20
28673: ST_TO_ADDR
// hc_class := class_tiger ;
28674: LD_ADDR_OWVAR 28
28678: PUSH
28679: LD_INT 14
28681: ST_TO_ADDR
// hc_gallery :=  ;
28682: LD_ADDR_OWVAR 33
28686: PUSH
28687: LD_STRING 
28689: ST_TO_ADDR
// hc_name :=  ;
28690: LD_ADDR_OWVAR 26
28694: PUSH
28695: LD_STRING 
28697: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28698: CALL_OW 44
28702: PPUSH
28703: LD_INT 0
28705: PPUSH
28706: CALL_OW 51
// end ;
28710: GO 28632
28712: POP
28713: POP
// end ;
28714: PPOPN 1
28716: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28717: LD_EXP 50
28721: PUSH
28722: LD_EXP 70
28726: AND
28727: IFFALSE 28736
28729: GO 28731
28731: DISABLE
// StreamSibBomb ;
28732: CALL 28737 0 0
28736: END
// export function StreamSibBomb ; var i , x , y ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
// result := false ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_INT 0
28750: ST_TO_ADDR
// for i := 1 to 16 do
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: DOUBLE
28757: LD_INT 1
28759: DEC
28760: ST_TO_ADDR
28761: LD_INT 16
28763: PUSH
28764: FOR_TO
28765: IFFALSE 28964
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 10
28774: PUSH
28775: LD_INT 20
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: LD_INT 40
28783: PUSH
28784: LD_INT 50
28786: PUSH
28787: LD_INT 60
28789: PUSH
28790: LD_INT 70
28792: PUSH
28793: LD_INT 80
28795: PUSH
28796: LD_INT 90
28798: PUSH
28799: LD_INT 100
28801: PUSH
28802: LD_INT 110
28804: PUSH
28805: LD_INT 120
28807: PUSH
28808: LD_INT 130
28810: PUSH
28811: LD_INT 140
28813: PUSH
28814: LD_INT 150
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PPUSH
28837: LD_INT 15
28839: PPUSH
28840: CALL_OW 12
28844: ARRAY
28845: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: LD_INT 10
28853: PUSH
28854: LD_INT 20
28856: PUSH
28857: LD_INT 30
28859: PUSH
28860: LD_INT 40
28862: PUSH
28863: LD_INT 50
28865: PUSH
28866: LD_INT 60
28868: PUSH
28869: LD_INT 70
28871: PUSH
28872: LD_INT 80
28874: PUSH
28875: LD_INT 90
28877: PUSH
28878: LD_INT 100
28880: PUSH
28881: LD_INT 110
28883: PUSH
28884: LD_INT 120
28886: PUSH
28887: LD_INT 130
28889: PUSH
28890: LD_INT 140
28892: PUSH
28893: LD_INT 150
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: PPUSH
28916: LD_INT 15
28918: PPUSH
28919: CALL_OW 12
28923: ARRAY
28924: ST_TO_ADDR
// if ValidHex ( x , y ) then
28925: LD_VAR 0 3
28929: PPUSH
28930: LD_VAR 0 4
28934: PPUSH
28935: CALL_OW 488
28939: IFFALSE 28962
// begin result := [ x , y ] ;
28941: LD_ADDR_VAR 0 1
28945: PUSH
28946: LD_VAR 0 3
28950: PUSH
28951: LD_VAR 0 4
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: ST_TO_ADDR
// break ;
28960: GO 28964
// end ; end ;
28962: GO 28764
28964: POP
28965: POP
// if result then
28966: LD_VAR 0 1
28970: IFFALSE 29030
// begin ToLua ( playSibBomb() ) ;
28972: LD_STRING playSibBomb()
28974: PPUSH
28975: CALL_OW 559
// wait ( 0 0$14 ) ;
28979: LD_INT 490
28981: PPUSH
28982: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28986: LD_VAR 0 1
28990: PUSH
28991: LD_INT 1
28993: ARRAY
28994: PPUSH
28995: LD_VAR 0 1
28999: PUSH
29000: LD_INT 2
29002: ARRAY
29003: PPUSH
29004: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29008: LD_VAR 0 1
29012: PUSH
29013: LD_INT 1
29015: ARRAY
29016: PPUSH
29017: LD_VAR 0 1
29021: PUSH
29022: LD_INT 2
29024: ARRAY
29025: PPUSH
29026: CALL_OW 429
// end ; end ;
29030: LD_VAR 0 1
29034: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29035: LD_EXP 50
29039: PUSH
29040: LD_EXP 72
29044: AND
29045: IFFALSE 29057
29047: GO 29049
29049: DISABLE
// YouLost (  ) ;
29050: LD_STRING 
29052: PPUSH
29053: CALL_OW 104
29057: END
// every 0 0$1 trigger StreamModeActive and sFog do
29058: LD_EXP 50
29062: PUSH
29063: LD_EXP 71
29067: AND
29068: IFFALSE 29082
29070: GO 29072
29072: DISABLE
// FogOff ( your_side ) ;
29073: LD_OWVAR 2
29077: PPUSH
29078: CALL_OW 344
29082: END
// every 0 0$1 trigger StreamModeActive and sSun do
29083: LD_EXP 50
29087: PUSH
29088: LD_EXP 73
29092: AND
29093: IFFALSE 29121
29095: GO 29097
29097: DISABLE
// begin solar_recharge_percent := 0 ;
29098: LD_ADDR_OWVAR 79
29102: PUSH
29103: LD_INT 0
29105: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29106: LD_INT 10500
29108: PPUSH
29109: CALL_OW 67
// solar_recharge_percent := 100 ;
29113: LD_ADDR_OWVAR 79
29117: PUSH
29118: LD_INT 100
29120: ST_TO_ADDR
// end ;
29121: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29122: LD_EXP 50
29126: PUSH
29127: LD_EXP 74
29131: AND
29132: IFFALSE 29371
29134: GO 29136
29136: DISABLE
29137: LD_INT 0
29139: PPUSH
29140: PPUSH
29141: PPUSH
// begin tmp := [ ] ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: EMPTY
29148: ST_TO_ADDR
// for i := 1 to 6 do
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: DOUBLE
29155: LD_INT 1
29157: DEC
29158: ST_TO_ADDR
29159: LD_INT 6
29161: PUSH
29162: FOR_TO
29163: IFFALSE 29268
// begin uc_nation := nation_nature ;
29165: LD_ADDR_OWVAR 21
29169: PUSH
29170: LD_INT 0
29172: ST_TO_ADDR
// uc_side := 0 ;
29173: LD_ADDR_OWVAR 20
29177: PUSH
29178: LD_INT 0
29180: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29181: LD_ADDR_OWVAR 29
29185: PUSH
29186: LD_INT 12
29188: PUSH
29189: LD_INT 12
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: ST_TO_ADDR
// hc_agressivity := 20 ;
29196: LD_ADDR_OWVAR 35
29200: PUSH
29201: LD_INT 20
29203: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29204: LD_ADDR_OWVAR 28
29208: PUSH
29209: LD_INT 17
29211: ST_TO_ADDR
// hc_gallery :=  ;
29212: LD_ADDR_OWVAR 33
29216: PUSH
29217: LD_STRING 
29219: ST_TO_ADDR
// hc_name :=  ;
29220: LD_ADDR_OWVAR 26
29224: PUSH
29225: LD_STRING 
29227: ST_TO_ADDR
// un := CreateHuman ;
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: CALL_OW 44
29237: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29238: LD_VAR 0 2
29242: PPUSH
29243: LD_INT 1
29245: PPUSH
29246: CALL_OW 51
// tmp := tmp ^ un ;
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_VAR 0 3
29259: PUSH
29260: LD_VAR 0 2
29264: ADD
29265: ST_TO_ADDR
// end ;
29266: GO 29162
29268: POP
29269: POP
// repeat wait ( 0 0$1 ) ;
29270: LD_INT 35
29272: PPUSH
29273: CALL_OW 67
// for un in tmp do
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_VAR 0 3
29286: PUSH
29287: FOR_IN
29288: IFFALSE 29362
// begin if IsDead ( un ) then
29290: LD_VAR 0 2
29294: PPUSH
29295: CALL_OW 301
29299: IFFALSE 29319
// begin tmp := tmp diff un ;
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_VAR 0 3
29310: PUSH
29311: LD_VAR 0 2
29315: DIFF
29316: ST_TO_ADDR
// continue ;
29317: GO 29287
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29319: LD_VAR 0 2
29323: PPUSH
29324: LD_INT 3
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: PPUSH
29346: LD_VAR 0 2
29350: PPUSH
29351: CALL_OW 74
29355: PPUSH
29356: CALL_OW 115
// end ;
29360: GO 29287
29362: POP
29363: POP
// until not tmp ;
29364: LD_VAR 0 3
29368: NOT
29369: IFFALSE 29270
// end ;
29371: PPOPN 3
29373: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29374: LD_EXP 50
29378: PUSH
29379: LD_EXP 75
29383: AND
29384: IFFALSE 29438
29386: GO 29388
29388: DISABLE
// begin ToLua ( displayTroll(); ) ;
29389: LD_STRING displayTroll();
29391: PPUSH
29392: CALL_OW 559
// wait ( 3 3$00 ) ;
29396: LD_INT 6300
29398: PPUSH
29399: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29403: LD_STRING hideTroll();
29405: PPUSH
29406: CALL_OW 559
// wait ( 1 1$00 ) ;
29410: LD_INT 2100
29412: PPUSH
29413: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29417: LD_STRING displayTroll();
29419: PPUSH
29420: CALL_OW 559
// wait ( 1 1$00 ) ;
29424: LD_INT 2100
29426: PPUSH
29427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29431: LD_STRING hideTroll();
29433: PPUSH
29434: CALL_OW 559
// end ;
29438: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29439: LD_EXP 50
29443: PUSH
29444: LD_EXP 76
29448: AND
29449: IFFALSE 29512
29451: GO 29453
29453: DISABLE
29454: LD_INT 0
29456: PPUSH
// begin p := 0 ;
29457: LD_ADDR_VAR 0 1
29461: PUSH
29462: LD_INT 0
29464: ST_TO_ADDR
// repeat game_speed := 1 ;
29465: LD_ADDR_OWVAR 65
29469: PUSH
29470: LD_INT 1
29472: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29473: LD_INT 35
29475: PPUSH
29476: CALL_OW 67
// p := p + 1 ;
29480: LD_ADDR_VAR 0 1
29484: PUSH
29485: LD_VAR 0 1
29489: PUSH
29490: LD_INT 1
29492: PLUS
29493: ST_TO_ADDR
// until p >= 60 ;
29494: LD_VAR 0 1
29498: PUSH
29499: LD_INT 60
29501: GREATEREQUAL
29502: IFFALSE 29465
// game_speed := 4 ;
29504: LD_ADDR_OWVAR 65
29508: PUSH
29509: LD_INT 4
29511: ST_TO_ADDR
// end ;
29512: PPOPN 1
29514: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29515: LD_EXP 50
29519: PUSH
29520: LD_EXP 77
29524: AND
29525: IFFALSE 29671
29527: GO 29529
29529: DISABLE
29530: LD_INT 0
29532: PPUSH
29533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29534: LD_ADDR_VAR 0 1
29538: PUSH
29539: LD_INT 22
29541: PUSH
29542: LD_OWVAR 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 30
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 30
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PPUSH
29583: CALL_OW 69
29587: ST_TO_ADDR
// if not depot then
29588: LD_VAR 0 1
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29671
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29597: LD_ADDR_VAR 0 2
29601: PUSH
29602: LD_VAR 0 1
29606: PUSH
29607: LD_INT 1
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 12
29619: ARRAY
29620: PPUSH
29621: CALL_OW 274
29625: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_INT 1
29633: PPUSH
29634: LD_INT 0
29636: PPUSH
29637: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_INT 2
29648: PPUSH
29649: LD_INT 0
29651: PPUSH
29652: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29656: LD_VAR 0 2
29660: PPUSH
29661: LD_INT 3
29663: PPUSH
29664: LD_INT 0
29666: PPUSH
29667: CALL_OW 277
// end ;
29671: PPOPN 2
29673: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29674: LD_EXP 50
29678: PUSH
29679: LD_EXP 78
29683: AND
29684: IFFALSE 29781
29686: GO 29688
29688: DISABLE
29689: LD_INT 0
29691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29692: LD_ADDR_VAR 0 1
29696: PUSH
29697: LD_INT 22
29699: PUSH
29700: LD_OWVAR 2
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 21
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: LD_INT 23
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: PPUSH
29741: CALL_OW 69
29745: ST_TO_ADDR
// if not tmp then
29746: LD_VAR 0 1
29750: NOT
29751: IFFALSE 29755
// exit ;
29753: GO 29781
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29755: LD_VAR 0 1
29759: PUSH
29760: LD_INT 1
29762: PPUSH
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 12
29772: ARRAY
29773: PPUSH
29774: LD_INT 200
29776: PPUSH
29777: CALL_OW 234
// end ;
29781: PPOPN 1
29783: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29784: LD_EXP 50
29788: PUSH
29789: LD_EXP 79
29793: AND
29794: IFFALSE 29873
29796: GO 29798
29798: DISABLE
29799: LD_INT 0
29801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29802: LD_ADDR_VAR 0 1
29806: PUSH
29807: LD_INT 22
29809: PUSH
29810: LD_OWVAR 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 21
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL_OW 69
29837: ST_TO_ADDR
// if not tmp then
29838: LD_VAR 0 1
29842: NOT
29843: IFFALSE 29847
// exit ;
29845: GO 29873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29847: LD_VAR 0 1
29851: PUSH
29852: LD_INT 1
29854: PPUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: CALL_OW 12
29864: ARRAY
29865: PPUSH
29866: LD_INT 60
29868: PPUSH
29869: CALL_OW 234
// end ;
29873: PPOPN 1
29875: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29876: LD_EXP 50
29880: PUSH
29881: LD_EXP 80
29885: AND
29886: IFFALSE 29985
29888: GO 29890
29890: DISABLE
29891: LD_INT 0
29893: PPUSH
29894: PPUSH
// begin enable ;
29895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_OWVAR 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 61
29915: PUSH
29916: EMPTY
29917: LIST
29918: PUSH
29919: LD_INT 33
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 1
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 29985
// for i in tmp do
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_VAR 0 1
29957: PUSH
29958: FOR_IN
29959: IFFALSE 29983
// if IsControledBy ( i ) then
29961: LD_VAR 0 2
29965: PPUSH
29966: CALL_OW 312
29970: IFFALSE 29981
// ComUnlink ( i ) ;
29972: LD_VAR 0 2
29976: PPUSH
29977: CALL_OW 136
29981: GO 29958
29983: POP
29984: POP
// end ;
29985: PPOPN 2
29987: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29988: LD_EXP 50
29992: PUSH
29993: LD_EXP 81
29997: AND
29998: IFFALSE 30138
30000: GO 30002
30002: DISABLE
30003: LD_INT 0
30005: PPUSH
30006: PPUSH
// begin ToLua ( displayPowell(); ) ;
30007: LD_STRING displayPowell();
30009: PPUSH
30010: CALL_OW 559
// uc_side := 0 ;
30014: LD_ADDR_OWVAR 20
30018: PUSH
30019: LD_INT 0
30021: ST_TO_ADDR
// uc_nation := 2 ;
30022: LD_ADDR_OWVAR 21
30026: PUSH
30027: LD_INT 2
30029: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30030: LD_ADDR_OWVAR 37
30034: PUSH
30035: LD_INT 14
30037: ST_TO_ADDR
// vc_engine := engine_siberite ;
30038: LD_ADDR_OWVAR 39
30042: PUSH
30043: LD_INT 3
30045: ST_TO_ADDR
// vc_control := control_apeman ;
30046: LD_ADDR_OWVAR 38
30050: PUSH
30051: LD_INT 5
30053: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30054: LD_ADDR_OWVAR 40
30058: PUSH
30059: LD_INT 29
30061: ST_TO_ADDR
// un := CreateVehicle ;
30062: LD_ADDR_VAR 0 2
30066: PUSH
30067: CALL_OW 45
30071: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30072: LD_VAR 0 2
30076: PPUSH
30077: LD_INT 1
30079: PPUSH
30080: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30084: LD_INT 35
30086: PPUSH
30087: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_INT 22
30098: PUSH
30099: LD_OWVAR 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 69
30112: PPUSH
30113: LD_VAR 0 2
30117: PPUSH
30118: CALL_OW 74
30122: PPUSH
30123: CALL_OW 115
// until IsDead ( un ) ;
30127: LD_VAR 0 2
30131: PPUSH
30132: CALL_OW 301
30136: IFFALSE 30084
// end ;
30138: PPOPN 2
30140: END
// every 0 0$1 trigger StreamModeActive and sStu do
30141: LD_EXP 50
30145: PUSH
30146: LD_EXP 89
30150: AND
30151: IFFALSE 30167
30153: GO 30155
30155: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30156: LD_STRING displayStucuk();
30158: PPUSH
30159: CALL_OW 559
// ResetFog ;
30163: CALL_OW 335
// end ;
30167: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30168: LD_EXP 50
30172: PUSH
30173: LD_EXP 82
30177: AND
30178: IFFALSE 30319
30180: GO 30182
30182: DISABLE
30183: LD_INT 0
30185: PPUSH
30186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: LD_INT 22
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 21
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not tmp then
30223: LD_VAR 0 2
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30319
// un := tmp [ rand ( 1 , tmp ) ] ;
30232: LD_ADDR_VAR 0 1
30236: PUSH
30237: LD_VAR 0 2
30241: PUSH
30242: LD_INT 1
30244: PPUSH
30245: LD_VAR 0 2
30249: PPUSH
30250: CALL_OW 12
30254: ARRAY
30255: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30256: LD_VAR 0 1
30260: PPUSH
30261: LD_INT 0
30263: PPUSH
30264: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30268: LD_VAR 0 1
30272: PPUSH
30273: LD_OWVAR 3
30277: PUSH
30278: LD_VAR 0 1
30282: DIFF
30283: PPUSH
30284: LD_VAR 0 1
30288: PPUSH
30289: CALL_OW 74
30293: PPUSH
30294: CALL_OW 115
// wait ( 0 0$20 ) ;
30298: LD_INT 700
30300: PPUSH
30301: CALL_OW 67
// SetSide ( un , your_side ) ;
30305: LD_VAR 0 1
30309: PPUSH
30310: LD_OWVAR 2
30314: PPUSH
30315: CALL_OW 235
// end ;
30319: PPOPN 2
30321: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30322: LD_EXP 50
30326: PUSH
30327: LD_EXP 83
30331: AND
30332: IFFALSE 30438
30334: GO 30336
30336: DISABLE
30337: LD_INT 0
30339: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30340: LD_ADDR_VAR 0 1
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_OWVAR 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PPUSH
30389: CALL_OW 69
30393: ST_TO_ADDR
// if not depot then
30394: LD_VAR 0 1
30398: NOT
30399: IFFALSE 30403
// exit ;
30401: GO 30438
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30403: LD_VAR 0 1
30407: PUSH
30408: LD_INT 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 250
30416: PPUSH
30417: LD_VAR 0 1
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: CALL_OW 251
30430: PPUSH
30431: LD_INT 70
30433: PPUSH
30434: CALL_OW 495
// end ;
30438: PPOPN 1
30440: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30441: LD_EXP 50
30445: PUSH
30446: LD_EXP 84
30450: AND
30451: IFFALSE 30662
30453: GO 30455
30455: DISABLE
30456: LD_INT 0
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_INT 22
30470: PUSH
30471: LD_OWVAR 2
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 21
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PPUSH
30494: CALL_OW 69
30498: ST_TO_ADDR
// if not tmp then
30499: LD_VAR 0 5
30503: NOT
30504: IFFALSE 30508
// exit ;
30506: GO 30662
// for i in tmp do
30508: LD_ADDR_VAR 0 1
30512: PUSH
30513: LD_VAR 0 5
30517: PUSH
30518: FOR_IN
30519: IFFALSE 30660
// begin d := rand ( 0 , 5 ) ;
30521: LD_ADDR_VAR 0 4
30525: PUSH
30526: LD_INT 0
30528: PPUSH
30529: LD_INT 5
30531: PPUSH
30532: CALL_OW 12
30536: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 250
30551: PPUSH
30552: LD_VAR 0 4
30556: PPUSH
30557: LD_INT 3
30559: PPUSH
30560: LD_INT 12
30562: PPUSH
30563: CALL_OW 12
30567: PPUSH
30568: CALL_OW 272
30572: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_VAR 0 1
30582: PPUSH
30583: CALL_OW 251
30587: PPUSH
30588: LD_VAR 0 4
30592: PPUSH
30593: LD_INT 3
30595: PPUSH
30596: LD_INT 12
30598: PPUSH
30599: CALL_OW 12
30603: PPUSH
30604: CALL_OW 273
30608: ST_TO_ADDR
// if ValidHex ( x , y ) then
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: CALL_OW 488
30623: IFFALSE 30658
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30625: LD_VAR 0 1
30629: PPUSH
30630: LD_VAR 0 2
30634: PPUSH
30635: LD_VAR 0 3
30639: PPUSH
30640: LD_INT 3
30642: PPUSH
30643: LD_INT 6
30645: PPUSH
30646: CALL_OW 12
30650: PPUSH
30651: LD_INT 1
30653: PPUSH
30654: CALL_OW 483
// end ;
30658: GO 30518
30660: POP
30661: POP
// end ;
30662: PPOPN 5
30664: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30665: LD_EXP 50
30669: PUSH
30670: LD_EXP 85
30674: AND
30675: IFFALSE 30769
30677: GO 30679
30679: DISABLE
30680: LD_INT 0
30682: PPUSH
30683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30684: LD_ADDR_VAR 0 2
30688: PUSH
30689: LD_INT 22
30691: PUSH
30692: LD_OWVAR 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 32
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 21
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: PPUSH
30726: CALL_OW 69
30730: ST_TO_ADDR
// if not tmp then
30731: LD_VAR 0 2
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 30769
// for i in tmp do
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_VAR 0 2
30749: PUSH
30750: FOR_IN
30751: IFFALSE 30767
// SetFuel ( i , 0 ) ;
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_INT 0
30760: PPUSH
30761: CALL_OW 240
30765: GO 30750
30767: POP
30768: POP
// end ;
30769: PPOPN 2
30771: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30772: LD_EXP 50
30776: PUSH
30777: LD_EXP 86
30781: AND
30782: IFFALSE 30848
30784: GO 30786
30786: DISABLE
30787: LD_INT 0
30789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30790: LD_ADDR_VAR 0 1
30794: PUSH
30795: LD_INT 22
30797: PUSH
30798: LD_OWVAR 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: LD_INT 29
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PPUSH
30821: CALL_OW 69
30825: ST_TO_ADDR
// if not tmp then
30826: LD_VAR 0 1
30830: NOT
30831: IFFALSE 30835
// exit ;
30833: GO 30848
// DestroyUnit ( tmp [ 1 ] ) ;
30835: LD_VAR 0 1
30839: PUSH
30840: LD_INT 1
30842: ARRAY
30843: PPUSH
30844: CALL_OW 65
// end ;
30848: PPOPN 1
30850: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30851: LD_EXP 50
30855: PUSH
30856: LD_EXP 88
30860: AND
30861: IFFALSE 30990
30863: GO 30865
30865: DISABLE
30866: LD_INT 0
30868: PPUSH
// begin uc_side := 0 ;
30869: LD_ADDR_OWVAR 20
30873: PUSH
30874: LD_INT 0
30876: ST_TO_ADDR
// uc_nation := nation_arabian ;
30877: LD_ADDR_OWVAR 21
30881: PUSH
30882: LD_INT 2
30884: ST_TO_ADDR
// hc_gallery :=  ;
30885: LD_ADDR_OWVAR 33
30889: PUSH
30890: LD_STRING 
30892: ST_TO_ADDR
// hc_name :=  ;
30893: LD_ADDR_OWVAR 26
30897: PUSH
30898: LD_STRING 
30900: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30901: LD_INT 1
30903: PPUSH
30904: LD_INT 11
30906: PPUSH
30907: LD_INT 10
30909: PPUSH
30910: CALL_OW 380
// un := CreateHuman ;
30914: LD_ADDR_VAR 0 1
30918: PUSH
30919: CALL_OW 44
30923: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30924: LD_VAR 0 1
30928: PPUSH
30929: LD_INT 1
30931: PPUSH
30932: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30936: LD_INT 35
30938: PPUSH
30939: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30943: LD_VAR 0 1
30947: PPUSH
30948: LD_INT 22
30950: PUSH
30951: LD_OWVAR 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PPUSH
30960: CALL_OW 69
30964: PPUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: CALL_OW 74
30974: PPUSH
30975: CALL_OW 115
// until IsDead ( un ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 301
30988: IFFALSE 30936
// end ;
30990: PPOPN 1
30992: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30993: LD_EXP 50
30997: PUSH
30998: LD_EXP 90
31002: AND
31003: IFFALSE 31015
31005: GO 31007
31007: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31008: LD_STRING earthquake(getX(game), 0, 32)
31010: PPUSH
31011: CALL_OW 559
31015: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31016: LD_EXP 50
31020: PUSH
31021: LD_EXP 91
31025: AND
31026: IFFALSE 31117
31028: GO 31030
31030: DISABLE
31031: LD_INT 0
31033: PPUSH
// begin enable ;
31034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31035: LD_ADDR_VAR 0 1
31039: PUSH
31040: LD_INT 22
31042: PUSH
31043: LD_OWVAR 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 21
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 33
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: PPUSH
31077: CALL_OW 69
31081: ST_TO_ADDR
// if not tmp then
31082: LD_VAR 0 1
31086: NOT
31087: IFFALSE 31091
// exit ;
31089: GO 31117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31091: LD_VAR 0 1
31095: PUSH
31096: LD_INT 1
31098: PPUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 12
31108: ARRAY
31109: PPUSH
31110: LD_INT 1
31112: PPUSH
31113: CALL_OW 234
// end ;
31117: PPOPN 1
31119: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31120: LD_EXP 50
31124: PUSH
31125: LD_EXP 92
31129: AND
31130: IFFALSE 31271
31132: GO 31134
31134: DISABLE
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
31139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_INT 22
31147: PUSH
31148: LD_OWVAR 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 25
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PPUSH
31171: CALL_OW 69
31175: ST_TO_ADDR
// if not tmp then
31176: LD_VAR 0 3
31180: NOT
31181: IFFALSE 31185
// exit ;
31183: GO 31271
// un := tmp [ rand ( 1 , tmp ) ] ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_VAR 0 3
31194: PUSH
31195: LD_INT 1
31197: PPUSH
31198: LD_VAR 0 3
31202: PPUSH
31203: CALL_OW 12
31207: ARRAY
31208: ST_TO_ADDR
// if Crawls ( un ) then
31209: LD_VAR 0 2
31213: PPUSH
31214: CALL_OW 318
31218: IFFALSE 31229
// ComWalk ( un ) ;
31220: LD_VAR 0 2
31224: PPUSH
31225: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31229: LD_VAR 0 2
31233: PPUSH
31234: LD_INT 9
31236: PPUSH
31237: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31241: LD_INT 28
31243: PPUSH
31244: LD_OWVAR 2
31248: PPUSH
31249: LD_INT 2
31251: PPUSH
31252: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31256: LD_INT 29
31258: PPUSH
31259: LD_OWVAR 2
31263: PPUSH
31264: LD_INT 2
31266: PPUSH
31267: CALL_OW 322
// end ;
31271: PPOPN 3
31273: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31274: LD_EXP 50
31278: PUSH
31279: LD_EXP 93
31283: AND
31284: IFFALSE 31395
31286: GO 31288
31288: DISABLE
31289: LD_INT 0
31291: PPUSH
31292: PPUSH
31293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: LD_INT 22
31301: PUSH
31302: LD_OWVAR 2
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 25
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PPUSH
31325: CALL_OW 69
31329: ST_TO_ADDR
// if not tmp then
31330: LD_VAR 0 3
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31395
// un := tmp [ rand ( 1 , tmp ) ] ;
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_VAR 0 3
31348: PUSH
31349: LD_INT 1
31351: PPUSH
31352: LD_VAR 0 3
31356: PPUSH
31357: CALL_OW 12
31361: ARRAY
31362: ST_TO_ADDR
// if Crawls ( un ) then
31363: LD_VAR 0 2
31367: PPUSH
31368: CALL_OW 318
31372: IFFALSE 31383
// ComWalk ( un ) ;
31374: LD_VAR 0 2
31378: PPUSH
31379: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31383: LD_VAR 0 2
31387: PPUSH
31388: LD_INT 8
31390: PPUSH
31391: CALL_OW 336
// end ;
31395: PPOPN 3
31397: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31398: LD_EXP 50
31402: PUSH
31403: LD_EXP 94
31407: AND
31408: IFFALSE 31552
31410: GO 31412
31412: DISABLE
31413: LD_INT 0
31415: PPUSH
31416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31417: LD_ADDR_VAR 0 2
31421: PUSH
31422: LD_INT 22
31424: PUSH
31425: LD_OWVAR 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 21
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 34
31449: PUSH
31450: LD_INT 12
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 34
31459: PUSH
31460: LD_INT 51
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 34
31469: PUSH
31470: LD_INT 32
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: PPUSH
31488: CALL_OW 69
31492: ST_TO_ADDR
// if not tmp then
31493: LD_VAR 0 2
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 31552
// for i in tmp do
31502: LD_ADDR_VAR 0 1
31506: PUSH
31507: LD_VAR 0 2
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31550
// if GetCargo ( i , mat_artifact ) = 0 then
31515: LD_VAR 0 1
31519: PPUSH
31520: LD_INT 4
31522: PPUSH
31523: CALL_OW 289
31527: PUSH
31528: LD_INT 0
31530: EQUAL
31531: IFFALSE 31548
// SetCargo ( i , mat_siberit , 100 ) ;
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 3
31540: PPUSH
31541: LD_INT 100
31543: PPUSH
31544: CALL_OW 290
31548: GO 31512
31550: POP
31551: POP
// end ;
31552: PPOPN 2
31554: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31555: LD_EXP 50
31559: PUSH
31560: LD_EXP 95
31564: AND
31565: IFFALSE 31748
31567: GO 31569
31569: DISABLE
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31574: LD_ADDR_VAR 0 2
31578: PUSH
31579: LD_INT 22
31581: PUSH
31582: LD_OWVAR 2
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PPUSH
31591: CALL_OW 69
31595: ST_TO_ADDR
// if not tmp then
31596: LD_VAR 0 2
31600: NOT
31601: IFFALSE 31605
// exit ;
31603: GO 31748
// for i := 1 to 2 do
31605: LD_ADDR_VAR 0 1
31609: PUSH
31610: DOUBLE
31611: LD_INT 1
31613: DEC
31614: ST_TO_ADDR
31615: LD_INT 2
31617: PUSH
31618: FOR_TO
31619: IFFALSE 31746
// begin uc_side := your_side ;
31621: LD_ADDR_OWVAR 20
31625: PUSH
31626: LD_OWVAR 2
31630: ST_TO_ADDR
// uc_nation := nation_american ;
31631: LD_ADDR_OWVAR 21
31635: PUSH
31636: LD_INT 1
31638: ST_TO_ADDR
// vc_chassis := us_morphling ;
31639: LD_ADDR_OWVAR 37
31643: PUSH
31644: LD_INT 5
31646: ST_TO_ADDR
// vc_engine := engine_siberite ;
31647: LD_ADDR_OWVAR 39
31651: PUSH
31652: LD_INT 3
31654: ST_TO_ADDR
// vc_control := control_computer ;
31655: LD_ADDR_OWVAR 38
31659: PUSH
31660: LD_INT 3
31662: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31663: LD_ADDR_OWVAR 40
31667: PUSH
31668: LD_INT 10
31670: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31671: LD_VAR 0 2
31675: PUSH
31676: LD_INT 1
31678: ARRAY
31679: PPUSH
31680: CALL_OW 310
31684: NOT
31685: IFFALSE 31732
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31687: CALL_OW 45
31691: PPUSH
31692: LD_VAR 0 2
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PPUSH
31701: CALL_OW 250
31705: PPUSH
31706: LD_VAR 0 2
31710: PUSH
31711: LD_INT 1
31713: ARRAY
31714: PPUSH
31715: CALL_OW 251
31719: PPUSH
31720: LD_INT 12
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 50
31730: GO 31744
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31732: CALL_OW 45
31736: PPUSH
31737: LD_INT 1
31739: PPUSH
31740: CALL_OW 51
// end ;
31744: GO 31618
31746: POP
31747: POP
// end ;
31748: PPOPN 2
31750: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31751: LD_EXP 50
31755: PUSH
31756: LD_EXP 96
31760: AND
31761: IFFALSE 31983
31763: GO 31765
31765: DISABLE
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31774: LD_ADDR_VAR 0 6
31778: PUSH
31779: LD_INT 22
31781: PUSH
31782: LD_OWVAR 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 21
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: LD_INT 23
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: PPUSH
31823: CALL_OW 69
31827: ST_TO_ADDR
// if not tmp then
31828: LD_VAR 0 6
31832: NOT
31833: IFFALSE 31837
// exit ;
31835: GO 31983
// s1 := rand ( 1 , 4 ) ;
31837: LD_ADDR_VAR 0 2
31841: PUSH
31842: LD_INT 1
31844: PPUSH
31845: LD_INT 4
31847: PPUSH
31848: CALL_OW 12
31852: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: LD_VAR 0 6
31862: PUSH
31863: LD_INT 1
31865: ARRAY
31866: PPUSH
31867: LD_VAR 0 2
31871: PPUSH
31872: CALL_OW 259
31876: ST_TO_ADDR
// if s1 = 1 then
31877: LD_VAR 0 2
31881: PUSH
31882: LD_INT 1
31884: EQUAL
31885: IFFALSE 31905
// s2 := rand ( 2 , 4 ) else
31887: LD_ADDR_VAR 0 3
31891: PUSH
31892: LD_INT 2
31894: PPUSH
31895: LD_INT 4
31897: PPUSH
31898: CALL_OW 12
31902: ST_TO_ADDR
31903: GO 31913
// s2 := 1 ;
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 1
31912: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_VAR 0 6
31922: PUSH
31923: LD_INT 1
31925: ARRAY
31926: PPUSH
31927: LD_VAR 0 3
31931: PPUSH
31932: CALL_OW 259
31936: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31937: LD_VAR 0 6
31941: PUSH
31942: LD_INT 1
31944: ARRAY
31945: PPUSH
31946: LD_VAR 0 2
31950: PPUSH
31951: LD_VAR 0 5
31955: PPUSH
31956: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31960: LD_VAR 0 6
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: PPUSH
31969: LD_VAR 0 3
31973: PPUSH
31974: LD_VAR 0 4
31978: PPUSH
31979: CALL_OW 237
// end ;
31983: PPOPN 6
31985: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31986: LD_EXP 50
31990: PUSH
31991: LD_EXP 97
31995: AND
31996: IFFALSE 32075
31998: GO 32000
32000: DISABLE
32001: LD_INT 0
32003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32004: LD_ADDR_VAR 0 1
32008: PUSH
32009: LD_INT 22
32011: PUSH
32012: LD_OWVAR 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 30
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PPUSH
32035: CALL_OW 69
32039: ST_TO_ADDR
// if not tmp then
32040: LD_VAR 0 1
32044: NOT
32045: IFFALSE 32049
// exit ;
32047: GO 32075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32049: LD_VAR 0 1
32053: PUSH
32054: LD_INT 1
32056: PPUSH
32057: LD_VAR 0 1
32061: PPUSH
32062: CALL_OW 12
32066: ARRAY
32067: PPUSH
32068: LD_INT 1
32070: PPUSH
32071: CALL_OW 234
// end ;
32075: PPOPN 1
32077: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32078: LD_EXP 50
32082: PUSH
32083: LD_EXP 98
32087: AND
32088: IFFALSE 32200
32090: GO 32092
32092: DISABLE
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32097: LD_ADDR_VAR 0 2
32101: PUSH
32102: LD_INT 22
32104: PUSH
32105: LD_OWVAR 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 30
32119: PUSH
32120: LD_INT 27
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 30
32129: PUSH
32130: LD_INT 26
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 30
32139: PUSH
32140: LD_INT 28
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PPUSH
32157: CALL_OW 69
32161: ST_TO_ADDR
// if not tmp then
32162: LD_VAR 0 2
32166: NOT
32167: IFFALSE 32171
// exit ;
32169: GO 32200
// for i in tmp do
32171: LD_ADDR_VAR 0 1
32175: PUSH
32176: LD_VAR 0 2
32180: PUSH
32181: FOR_IN
32182: IFFALSE 32198
// SetLives ( i , 1 ) ;
32184: LD_VAR 0 1
32188: PPUSH
32189: LD_INT 1
32191: PPUSH
32192: CALL_OW 234
32196: GO 32181
32198: POP
32199: POP
// end ;
32200: PPOPN 2
32202: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32203: LD_EXP 50
32207: PUSH
32208: LD_EXP 99
32212: AND
32213: IFFALSE 32500
32215: GO 32217
32217: DISABLE
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
32222: PPUSH
// begin i := rand ( 1 , 7 ) ;
32223: LD_ADDR_VAR 0 1
32227: PUSH
32228: LD_INT 1
32230: PPUSH
32231: LD_INT 7
32233: PPUSH
32234: CALL_OW 12
32238: ST_TO_ADDR
// case i of 1 :
32239: LD_VAR 0 1
32243: PUSH
32244: LD_INT 1
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32262
32252: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32253: LD_STRING earthquake(getX(game), 0, 32)
32255: PPUSH
32256: CALL_OW 559
32260: GO 32500
32262: LD_INT 2
32264: DOUBLE
32265: EQUAL
32266: IFTRUE 32270
32268: GO 32284
32270: POP
// begin ToLua ( displayStucuk(); ) ;
32271: LD_STRING displayStucuk();
32273: PPUSH
32274: CALL_OW 559
// ResetFog ;
32278: CALL_OW 335
// end ; 3 :
32282: GO 32500
32284: LD_INT 3
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32396
32292: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32293: LD_ADDR_VAR 0 2
32297: PUSH
32298: LD_INT 22
32300: PUSH
32301: LD_OWVAR 2
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 25
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PPUSH
32324: CALL_OW 69
32328: ST_TO_ADDR
// if not tmp then
32329: LD_VAR 0 2
32333: NOT
32334: IFFALSE 32338
// exit ;
32336: GO 32500
// un := tmp [ rand ( 1 , tmp ) ] ;
32338: LD_ADDR_VAR 0 3
32342: PUSH
32343: LD_VAR 0 2
32347: PUSH
32348: LD_INT 1
32350: PPUSH
32351: LD_VAR 0 2
32355: PPUSH
32356: CALL_OW 12
32360: ARRAY
32361: ST_TO_ADDR
// if Crawls ( un ) then
32362: LD_VAR 0 3
32366: PPUSH
32367: CALL_OW 318
32371: IFFALSE 32382
// ComWalk ( un ) ;
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32382: LD_VAR 0 3
32386: PPUSH
32387: LD_INT 8
32389: PPUSH
32390: CALL_OW 336
// end ; 4 :
32394: GO 32500
32396: LD_INT 4
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32478
32404: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: LD_INT 22
32412: PUSH
32413: LD_OWVAR 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 30
32424: PUSH
32425: LD_INT 29
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PPUSH
32436: CALL_OW 69
32440: ST_TO_ADDR
// if not tmp then
32441: LD_VAR 0 2
32445: NOT
32446: IFFALSE 32450
// exit ;
32448: GO 32500
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 1
32457: ARRAY
32458: PPUSH
32459: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32463: LD_VAR 0 2
32467: PUSH
32468: LD_INT 1
32470: ARRAY
32471: PPUSH
32472: CALL_OW 65
// end ; 5 .. 7 :
32476: GO 32500
32478: LD_INT 5
32480: DOUBLE
32481: GREATEREQUAL
32482: IFFALSE 32490
32484: LD_INT 7
32486: DOUBLE
32487: LESSEQUAL
32488: IFTRUE 32492
32490: GO 32499
32492: POP
// StreamSibBomb ; end ;
32493: CALL 28737 0 0
32497: GO 32500
32499: POP
// end ;
32500: PPOPN 3
32502: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32503: LD_EXP 50
32507: PUSH
32508: LD_EXP 100
32512: AND
32513: IFFALSE 32669
32515: GO 32517
32517: DISABLE
32518: LD_INT 0
32520: PPUSH
32521: PPUSH
32522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32523: LD_ADDR_VAR 0 2
32527: PUSH
32528: LD_INT 81
32530: PUSH
32531: LD_OWVAR 2
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 21
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 21
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PPUSH
32572: CALL_OW 69
32576: ST_TO_ADDR
// if not tmp then
32577: LD_VAR 0 2
32581: NOT
32582: IFFALSE 32586
// exit ;
32584: GO 32669
// p := 0 ;
32586: LD_ADDR_VAR 0 3
32590: PUSH
32591: LD_INT 0
32593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32594: LD_INT 35
32596: PPUSH
32597: CALL_OW 67
// p := p + 1 ;
32601: LD_ADDR_VAR 0 3
32605: PUSH
32606: LD_VAR 0 3
32610: PUSH
32611: LD_INT 1
32613: PLUS
32614: ST_TO_ADDR
// for i in tmp do
32615: LD_ADDR_VAR 0 1
32619: PUSH
32620: LD_VAR 0 2
32624: PUSH
32625: FOR_IN
32626: IFFALSE 32657
// if GetLives ( i ) < 1000 then
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 256
32637: PUSH
32638: LD_INT 1000
32640: LESS
32641: IFFALSE 32655
// SetLives ( i , 1000 ) ;
32643: LD_VAR 0 1
32647: PPUSH
32648: LD_INT 1000
32650: PPUSH
32651: CALL_OW 234
32655: GO 32625
32657: POP
32658: POP
// until p > 20 ;
32659: LD_VAR 0 3
32663: PUSH
32664: LD_INT 20
32666: GREATER
32667: IFFALSE 32594
// end ;
32669: PPOPN 3
32671: END
// every 0 0$1 trigger StreamModeActive and sTime do
32672: LD_EXP 50
32676: PUSH
32677: LD_EXP 101
32681: AND
32682: IFFALSE 32717
32684: GO 32686
32686: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32687: LD_INT 28
32689: PPUSH
32690: LD_OWVAR 2
32694: PPUSH
32695: LD_INT 2
32697: PPUSH
32698: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32702: LD_INT 30
32704: PPUSH
32705: LD_OWVAR 2
32709: PPUSH
32710: LD_INT 2
32712: PPUSH
32713: CALL_OW 322
// end ;
32717: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32718: LD_EXP 50
32722: PUSH
32723: LD_EXP 102
32727: AND
32728: IFFALSE 32849
32730: GO 32732
32732: DISABLE
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32737: LD_ADDR_VAR 0 2
32741: PUSH
32742: LD_INT 22
32744: PUSH
32745: LD_OWVAR 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 21
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 23
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: PPUSH
32786: CALL_OW 69
32790: ST_TO_ADDR
// if not tmp then
32791: LD_VAR 0 2
32795: NOT
32796: IFFALSE 32800
// exit ;
32798: GO 32849
// for i in tmp do
32800: LD_ADDR_VAR 0 1
32804: PUSH
32805: LD_VAR 0 2
32809: PUSH
32810: FOR_IN
32811: IFFALSE 32847
// begin if Crawls ( i ) then
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 318
32822: IFFALSE 32833
// ComWalk ( i ) ;
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 138
// SetClass ( i , 2 ) ;
32833: LD_VAR 0 1
32837: PPUSH
32838: LD_INT 2
32840: PPUSH
32841: CALL_OW 336
// end ;
32845: GO 32810
32847: POP
32848: POP
// end ;
32849: PPOPN 2
32851: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32852: LD_EXP 50
32856: PUSH
32857: LD_EXP 103
32861: AND
32862: IFFALSE 33150
32864: GO 32866
32866: DISABLE
32867: LD_INT 0
32869: PPUSH
32870: PPUSH
32871: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32872: LD_OWVAR 2
32876: PPUSH
32877: LD_INT 9
32879: PPUSH
32880: LD_INT 1
32882: PPUSH
32883: LD_INT 1
32885: PPUSH
32886: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32890: LD_INT 9
32892: PPUSH
32893: LD_OWVAR 2
32897: PPUSH
32898: CALL_OW 343
// uc_side := 9 ;
32902: LD_ADDR_OWVAR 20
32906: PUSH
32907: LD_INT 9
32909: ST_TO_ADDR
// uc_nation := 2 ;
32910: LD_ADDR_OWVAR 21
32914: PUSH
32915: LD_INT 2
32917: ST_TO_ADDR
// hc_name := Dark Warrior ;
32918: LD_ADDR_OWVAR 26
32922: PUSH
32923: LD_STRING Dark Warrior
32925: ST_TO_ADDR
// hc_gallery :=  ;
32926: LD_ADDR_OWVAR 33
32930: PUSH
32931: LD_STRING 
32933: ST_TO_ADDR
// hc_noskilllimit := true ;
32934: LD_ADDR_OWVAR 76
32938: PUSH
32939: LD_INT 1
32941: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32942: LD_ADDR_OWVAR 31
32946: PUSH
32947: LD_INT 30
32949: PUSH
32950: LD_INT 30
32952: PUSH
32953: LD_INT 30
32955: PUSH
32956: LD_INT 30
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
// un := CreateHuman ;
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: CALL_OW 44
32974: ST_TO_ADDR
// hc_noskilllimit := false ;
32975: LD_ADDR_OWVAR 76
32979: PUSH
32980: LD_INT 0
32982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32983: LD_VAR 0 3
32987: PPUSH
32988: LD_INT 1
32990: PPUSH
32991: CALL_OW 51
// ToLua ( playRanger() ) ;
32995: LD_STRING playRanger()
32997: PPUSH
32998: CALL_OW 559
// p := 0 ;
33002: LD_ADDR_VAR 0 2
33006: PUSH
33007: LD_INT 0
33009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33010: LD_INT 35
33012: PPUSH
33013: CALL_OW 67
// p := p + 1 ;
33017: LD_ADDR_VAR 0 2
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: LD_INT 1
33029: PLUS
33030: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33031: LD_VAR 0 3
33035: PPUSH
33036: CALL_OW 256
33040: PUSH
33041: LD_INT 1000
33043: LESS
33044: IFFALSE 33058
// SetLives ( un , 1000 ) ;
33046: LD_VAR 0 3
33050: PPUSH
33051: LD_INT 1000
33053: PPUSH
33054: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33058: LD_VAR 0 3
33062: PPUSH
33063: LD_INT 81
33065: PUSH
33066: LD_OWVAR 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 91
33077: PUSH
33078: LD_VAR 0 3
33082: PUSH
33083: LD_INT 30
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL_OW 69
33099: PPUSH
33100: LD_VAR 0 3
33104: PPUSH
33105: CALL_OW 74
33109: PPUSH
33110: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33114: LD_VAR 0 2
33118: PUSH
33119: LD_INT 80
33121: GREATER
33122: PUSH
33123: LD_VAR 0 3
33127: PPUSH
33128: CALL_OW 301
33132: OR
33133: IFFALSE 33010
// if un then
33135: LD_VAR 0 3
33139: IFFALSE 33150
// RemoveUnit ( un ) ;
33141: LD_VAR 0 3
33145: PPUSH
33146: CALL_OW 64
// end ;
33150: PPOPN 3
33152: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33153: LD_EXP 104
33157: IFFALSE 33273
33159: GO 33161
33161: DISABLE
33162: LD_INT 0
33164: PPUSH
33165: PPUSH
33166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33167: LD_ADDR_VAR 0 2
33171: PUSH
33172: LD_INT 81
33174: PUSH
33175: LD_OWVAR 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 21
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PPUSH
33198: CALL_OW 69
33202: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33203: LD_STRING playComputer()
33205: PPUSH
33206: CALL_OW 559
// if not tmp then
33210: LD_VAR 0 2
33214: NOT
33215: IFFALSE 33219
// exit ;
33217: GO 33273
// for i in tmp do
33219: LD_ADDR_VAR 0 1
33223: PUSH
33224: LD_VAR 0 2
33228: PUSH
33229: FOR_IN
33230: IFFALSE 33271
// for j := 1 to 4 do
33232: LD_ADDR_VAR 0 3
33236: PUSH
33237: DOUBLE
33238: LD_INT 1
33240: DEC
33241: ST_TO_ADDR
33242: LD_INT 4
33244: PUSH
33245: FOR_TO
33246: IFFALSE 33267
// SetSkill ( i , j , 10 ) ;
33248: LD_VAR 0 1
33252: PPUSH
33253: LD_VAR 0 3
33257: PPUSH
33258: LD_INT 10
33260: PPUSH
33261: CALL_OW 237
33265: GO 33245
33267: POP
33268: POP
33269: GO 33229
33271: POP
33272: POP
// end ;
33273: PPOPN 3
33275: END
// every 0 0$1 trigger s30 do var i , tmp ;
33276: LD_EXP 105
33280: IFFALSE 33349
33282: GO 33284
33284: DISABLE
33285: LD_INT 0
33287: PPUSH
33288: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33289: LD_ADDR_VAR 0 2
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: LD_OWVAR 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PPUSH
33306: CALL_OW 69
33310: ST_TO_ADDR
// if not tmp then
33311: LD_VAR 0 2
33315: NOT
33316: IFFALSE 33320
// exit ;
33318: GO 33349
// for i in tmp do
33320: LD_ADDR_VAR 0 1
33324: PUSH
33325: LD_VAR 0 2
33329: PUSH
33330: FOR_IN
33331: IFFALSE 33347
// SetLives ( i , 300 ) ;
33333: LD_VAR 0 1
33337: PPUSH
33338: LD_INT 300
33340: PPUSH
33341: CALL_OW 234
33345: GO 33330
33347: POP
33348: POP
// end ;
33349: PPOPN 2
33351: END
// every 0 0$1 trigger s60 do var i , tmp ;
33352: LD_EXP 106
33356: IFFALSE 33425
33358: GO 33360
33360: DISABLE
33361: LD_INT 0
33363: PPUSH
33364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33365: LD_ADDR_VAR 0 2
33369: PUSH
33370: LD_INT 22
33372: PUSH
33373: LD_OWVAR 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PPUSH
33382: CALL_OW 69
33386: ST_TO_ADDR
// if not tmp then
33387: LD_VAR 0 2
33391: NOT
33392: IFFALSE 33396
// exit ;
33394: GO 33425
// for i in tmp do
33396: LD_ADDR_VAR 0 1
33400: PUSH
33401: LD_VAR 0 2
33405: PUSH
33406: FOR_IN
33407: IFFALSE 33423
// SetLives ( i , 600 ) ;
33409: LD_VAR 0 1
33413: PPUSH
33414: LD_INT 600
33416: PPUSH
33417: CALL_OW 234
33421: GO 33406
33423: POP
33424: POP
// end ;
33425: PPOPN 2
33427: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33428: LD_INT 0
33430: PPUSH
// case cmd of 301 :
33431: LD_VAR 0 1
33435: PUSH
33436: LD_INT 301
33438: DOUBLE
33439: EQUAL
33440: IFTRUE 33444
33442: GO 33476
33444: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33445: LD_VAR 0 6
33449: PPUSH
33450: LD_VAR 0 7
33454: PPUSH
33455: LD_VAR 0 8
33459: PPUSH
33460: LD_VAR 0 4
33464: PPUSH
33465: LD_VAR 0 5
33469: PPUSH
33470: CALL 34677 0 5
33474: GO 33597
33476: LD_INT 302
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33484
33482: GO 33521
33484: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33485: LD_VAR 0 6
33489: PPUSH
33490: LD_VAR 0 7
33494: PPUSH
33495: LD_VAR 0 8
33499: PPUSH
33500: LD_VAR 0 9
33504: PPUSH
33505: LD_VAR 0 4
33509: PPUSH
33510: LD_VAR 0 5
33514: PPUSH
33515: CALL 34768 0 6
33519: GO 33597
33521: LD_INT 303
33523: DOUBLE
33524: EQUAL
33525: IFTRUE 33529
33527: GO 33566
33529: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33530: LD_VAR 0 6
33534: PPUSH
33535: LD_VAR 0 7
33539: PPUSH
33540: LD_VAR 0 8
33544: PPUSH
33545: LD_VAR 0 9
33549: PPUSH
33550: LD_VAR 0 4
33554: PPUSH
33555: LD_VAR 0 5
33559: PPUSH
33560: CALL 33602 0 6
33564: GO 33597
33566: LD_INT 304
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33596
33574: POP
// hHackTeleport ( unit , x , y ) ; end ;
33575: LD_VAR 0 2
33579: PPUSH
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_VAR 0 5
33589: PPUSH
33590: CALL 35361 0 3
33594: GO 33597
33596: POP
// end ;
33597: LD_VAR 0 12
33601: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33602: LD_INT 0
33604: PPUSH
33605: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33606: LD_VAR 0 1
33610: PUSH
33611: LD_INT 1
33613: LESS
33614: PUSH
33615: LD_VAR 0 1
33619: PUSH
33620: LD_INT 3
33622: GREATER
33623: OR
33624: PUSH
33625: LD_VAR 0 5
33629: PPUSH
33630: LD_VAR 0 6
33634: PPUSH
33635: CALL_OW 428
33639: OR
33640: IFFALSE 33644
// exit ;
33642: GO 34364
// uc_side := your_side ;
33644: LD_ADDR_OWVAR 20
33648: PUSH
33649: LD_OWVAR 2
33653: ST_TO_ADDR
// uc_nation := nation ;
33654: LD_ADDR_OWVAR 21
33658: PUSH
33659: LD_VAR 0 1
33663: ST_TO_ADDR
// bc_level = 1 ;
33664: LD_ADDR_OWVAR 43
33668: PUSH
33669: LD_INT 1
33671: ST_TO_ADDR
// case btype of 1 :
33672: LD_VAR 0 2
33676: PUSH
33677: LD_INT 1
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33696
33685: POP
// bc_type := b_depot ; 2 :
33686: LD_ADDR_OWVAR 42
33690: PUSH
33691: LD_INT 0
33693: ST_TO_ADDR
33694: GO 34308
33696: LD_INT 2
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33715
33704: POP
// bc_type := b_warehouse ; 3 :
33705: LD_ADDR_OWVAR 42
33709: PUSH
33710: LD_INT 1
33712: ST_TO_ADDR
33713: GO 34308
33715: LD_INT 3
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33734
33723: POP
// bc_type := b_lab ; 4 .. 9 :
33724: LD_ADDR_OWVAR 42
33728: PUSH
33729: LD_INT 6
33731: ST_TO_ADDR
33732: GO 34308
33734: LD_INT 4
33736: DOUBLE
33737: GREATEREQUAL
33738: IFFALSE 33746
33740: LD_INT 9
33742: DOUBLE
33743: LESSEQUAL
33744: IFTRUE 33748
33746: GO 33800
33748: POP
// begin bc_type := b_lab_half ;
33749: LD_ADDR_OWVAR 42
33753: PUSH
33754: LD_INT 7
33756: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33757: LD_ADDR_OWVAR 44
33761: PUSH
33762: LD_INT 10
33764: PUSH
33765: LD_INT 11
33767: PUSH
33768: LD_INT 12
33770: PUSH
33771: LD_INT 15
33773: PUSH
33774: LD_INT 14
33776: PUSH
33777: LD_INT 13
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: PUSH
33788: LD_VAR 0 2
33792: PUSH
33793: LD_INT 3
33795: MINUS
33796: ARRAY
33797: ST_TO_ADDR
// end ; 10 .. 13 :
33798: GO 34308
33800: LD_INT 10
33802: DOUBLE
33803: GREATEREQUAL
33804: IFFALSE 33812
33806: LD_INT 13
33808: DOUBLE
33809: LESSEQUAL
33810: IFTRUE 33814
33812: GO 33891
33814: POP
// begin bc_type := b_lab_full ;
33815: LD_ADDR_OWVAR 42
33819: PUSH
33820: LD_INT 8
33822: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33823: LD_ADDR_OWVAR 44
33827: PUSH
33828: LD_INT 10
33830: PUSH
33831: LD_INT 12
33833: PUSH
33834: LD_INT 14
33836: PUSH
33837: LD_INT 13
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: PUSH
33846: LD_VAR 0 2
33850: PUSH
33851: LD_INT 9
33853: MINUS
33854: ARRAY
33855: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33856: LD_ADDR_OWVAR 45
33860: PUSH
33861: LD_INT 11
33863: PUSH
33864: LD_INT 15
33866: PUSH
33867: LD_INT 12
33869: PUSH
33870: LD_INT 15
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: PUSH
33879: LD_VAR 0 2
33883: PUSH
33884: LD_INT 9
33886: MINUS
33887: ARRAY
33888: ST_TO_ADDR
// end ; 14 :
33889: GO 34308
33891: LD_INT 14
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33910
33899: POP
// bc_type := b_workshop ; 15 :
33900: LD_ADDR_OWVAR 42
33904: PUSH
33905: LD_INT 2
33907: ST_TO_ADDR
33908: GO 34308
33910: LD_INT 15
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33929
33918: POP
// bc_type := b_factory ; 16 :
33919: LD_ADDR_OWVAR 42
33923: PUSH
33924: LD_INT 3
33926: ST_TO_ADDR
33927: GO 34308
33929: LD_INT 16
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33948
33937: POP
// bc_type := b_ext_gun ; 17 :
33938: LD_ADDR_OWVAR 42
33942: PUSH
33943: LD_INT 17
33945: ST_TO_ADDR
33946: GO 34308
33948: LD_INT 17
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 33984
33956: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33957: LD_ADDR_OWVAR 42
33961: PUSH
33962: LD_INT 19
33964: PUSH
33965: LD_INT 23
33967: PUSH
33968: LD_INT 19
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: PUSH
33976: LD_VAR 0 1
33980: ARRAY
33981: ST_TO_ADDR
33982: GO 34308
33984: LD_INT 18
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34003
33992: POP
// bc_type := b_ext_radar ; 19 :
33993: LD_ADDR_OWVAR 42
33997: PUSH
33998: LD_INT 20
34000: ST_TO_ADDR
34001: GO 34308
34003: LD_INT 19
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34022
34011: POP
// bc_type := b_ext_radio ; 20 :
34012: LD_ADDR_OWVAR 42
34016: PUSH
34017: LD_INT 22
34019: ST_TO_ADDR
34020: GO 34308
34022: LD_INT 20
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34030
34028: GO 34041
34030: POP
// bc_type := b_ext_siberium ; 21 :
34031: LD_ADDR_OWVAR 42
34035: PUSH
34036: LD_INT 21
34038: ST_TO_ADDR
34039: GO 34308
34041: LD_INT 21
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34060
34049: POP
// bc_type := b_ext_computer ; 22 :
34050: LD_ADDR_OWVAR 42
34054: PUSH
34055: LD_INT 24
34057: ST_TO_ADDR
34058: GO 34308
34060: LD_INT 22
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34079
34068: POP
// bc_type := b_ext_track ; 23 :
34069: LD_ADDR_OWVAR 42
34073: PUSH
34074: LD_INT 16
34076: ST_TO_ADDR
34077: GO 34308
34079: LD_INT 23
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34098
34087: POP
// bc_type := b_ext_laser ; 24 :
34088: LD_ADDR_OWVAR 42
34092: PUSH
34093: LD_INT 25
34095: ST_TO_ADDR
34096: GO 34308
34098: LD_INT 24
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34117
34106: POP
// bc_type := b_control_tower ; 25 :
34107: LD_ADDR_OWVAR 42
34111: PUSH
34112: LD_INT 36
34114: ST_TO_ADDR
34115: GO 34308
34117: LD_INT 25
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34136
34125: POP
// bc_type := b_breastwork ; 26 :
34126: LD_ADDR_OWVAR 42
34130: PUSH
34131: LD_INT 31
34133: ST_TO_ADDR
34134: GO 34308
34136: LD_INT 26
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34155
34144: POP
// bc_type := b_bunker ; 27 :
34145: LD_ADDR_OWVAR 42
34149: PUSH
34150: LD_INT 32
34152: ST_TO_ADDR
34153: GO 34308
34155: LD_INT 27
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34174
34163: POP
// bc_type := b_turret ; 28 :
34164: LD_ADDR_OWVAR 42
34168: PUSH
34169: LD_INT 33
34171: ST_TO_ADDR
34172: GO 34308
34174: LD_INT 28
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34193
34182: POP
// bc_type := b_armoury ; 29 :
34183: LD_ADDR_OWVAR 42
34187: PUSH
34188: LD_INT 4
34190: ST_TO_ADDR
34191: GO 34308
34193: LD_INT 29
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34212
34201: POP
// bc_type := b_barracks ; 30 :
34202: LD_ADDR_OWVAR 42
34206: PUSH
34207: LD_INT 5
34209: ST_TO_ADDR
34210: GO 34308
34212: LD_INT 30
34214: DOUBLE
34215: EQUAL
34216: IFTRUE 34220
34218: GO 34231
34220: POP
// bc_type := b_solar_power ; 31 :
34221: LD_ADDR_OWVAR 42
34225: PUSH
34226: LD_INT 27
34228: ST_TO_ADDR
34229: GO 34308
34231: LD_INT 31
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34250
34239: POP
// bc_type := b_oil_power ; 32 :
34240: LD_ADDR_OWVAR 42
34244: PUSH
34245: LD_INT 26
34247: ST_TO_ADDR
34248: GO 34308
34250: LD_INT 32
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34258
34256: GO 34269
34258: POP
// bc_type := b_siberite_power ; 33 :
34259: LD_ADDR_OWVAR 42
34263: PUSH
34264: LD_INT 28
34266: ST_TO_ADDR
34267: GO 34308
34269: LD_INT 33
34271: DOUBLE
34272: EQUAL
34273: IFTRUE 34277
34275: GO 34288
34277: POP
// bc_type := b_oil_mine ; 34 :
34278: LD_ADDR_OWVAR 42
34282: PUSH
34283: LD_INT 29
34285: ST_TO_ADDR
34286: GO 34308
34288: LD_INT 34
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34307
34296: POP
// bc_type := b_siberite_mine ; end ;
34297: LD_ADDR_OWVAR 42
34301: PUSH
34302: LD_INT 30
34304: ST_TO_ADDR
34305: GO 34308
34307: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34308: LD_ADDR_VAR 0 8
34312: PUSH
34313: LD_VAR 0 5
34317: PPUSH
34318: LD_VAR 0 6
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL_OW 47
34332: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34333: LD_OWVAR 42
34337: PUSH
34338: LD_INT 32
34340: PUSH
34341: LD_INT 33
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: IN
34348: IFFALSE 34364
// PlaceWeaponTurret ( b , weapon ) ;
34350: LD_VAR 0 8
34354: PPUSH
34355: LD_VAR 0 4
34359: PPUSH
34360: CALL_OW 431
// end ;
34364: LD_VAR 0 7
34368: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34369: LD_INT 0
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34375: LD_ADDR_VAR 0 4
34379: PUSH
34380: LD_INT 22
34382: PUSH
34383: LD_OWVAR 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 30
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PPUSH
34424: CALL_OW 69
34428: ST_TO_ADDR
// if not tmp then
34429: LD_VAR 0 4
34433: NOT
34434: IFFALSE 34438
// exit ;
34436: GO 34497
// for i in tmp do
34438: LD_ADDR_VAR 0 2
34442: PUSH
34443: LD_VAR 0 4
34447: PUSH
34448: FOR_IN
34449: IFFALSE 34495
// for j = 1 to 3 do
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: DOUBLE
34457: LD_INT 1
34459: DEC
34460: ST_TO_ADDR
34461: LD_INT 3
34463: PUSH
34464: FOR_TO
34465: IFFALSE 34491
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34467: LD_VAR 0 2
34471: PPUSH
34472: CALL_OW 274
34476: PPUSH
34477: LD_VAR 0 3
34481: PPUSH
34482: LD_INT 99999
34484: PPUSH
34485: CALL_OW 277
34489: GO 34464
34491: POP
34492: POP
34493: GO 34448
34495: POP
34496: POP
// end ;
34497: LD_VAR 0 1
34501: RET
// export function hHackSetLevel10 ; var i , j ; begin
34502: LD_INT 0
34504: PPUSH
34505: PPUSH
34506: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34507: LD_ADDR_VAR 0 2
34511: PUSH
34512: LD_INT 21
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PPUSH
34522: CALL_OW 69
34526: PUSH
34527: FOR_IN
34528: IFFALSE 34580
// if IsSelected ( i ) then
34530: LD_VAR 0 2
34534: PPUSH
34535: CALL_OW 306
34539: IFFALSE 34578
// begin for j := 1 to 4 do
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: DOUBLE
34547: LD_INT 1
34549: DEC
34550: ST_TO_ADDR
34551: LD_INT 4
34553: PUSH
34554: FOR_TO
34555: IFFALSE 34576
// SetSkill ( i , j , 10 ) ;
34557: LD_VAR 0 2
34561: PPUSH
34562: LD_VAR 0 3
34566: PPUSH
34567: LD_INT 10
34569: PPUSH
34570: CALL_OW 237
34574: GO 34554
34576: POP
34577: POP
// end ;
34578: GO 34527
34580: POP
34581: POP
// end ;
34582: LD_VAR 0 1
34586: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34587: LD_INT 0
34589: PPUSH
34590: PPUSH
34591: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34592: LD_ADDR_VAR 0 2
34596: PUSH
34597: LD_INT 22
34599: PUSH
34600: LD_OWVAR 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 21
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PPUSH
34623: CALL_OW 69
34627: PUSH
34628: FOR_IN
34629: IFFALSE 34670
// begin for j := 1 to 4 do
34631: LD_ADDR_VAR 0 3
34635: PUSH
34636: DOUBLE
34637: LD_INT 1
34639: DEC
34640: ST_TO_ADDR
34641: LD_INT 4
34643: PUSH
34644: FOR_TO
34645: IFFALSE 34666
// SetSkill ( i , j , 10 ) ;
34647: LD_VAR 0 2
34651: PPUSH
34652: LD_VAR 0 3
34656: PPUSH
34657: LD_INT 10
34659: PPUSH
34660: CALL_OW 237
34664: GO 34644
34666: POP
34667: POP
// end ;
34668: GO 34628
34670: POP
34671: POP
// end ;
34672: LD_VAR 0 1
34676: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34677: LD_INT 0
34679: PPUSH
// uc_side := your_side ;
34680: LD_ADDR_OWVAR 20
34684: PUSH
34685: LD_OWVAR 2
34689: ST_TO_ADDR
// uc_nation := nation ;
34690: LD_ADDR_OWVAR 21
34694: PUSH
34695: LD_VAR 0 1
34699: ST_TO_ADDR
// InitHc ;
34700: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34704: LD_INT 0
34706: PPUSH
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_VAR 0 3
34716: PPUSH
34717: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34721: LD_VAR 0 4
34725: PPUSH
34726: LD_VAR 0 5
34730: PPUSH
34731: CALL_OW 428
34735: PUSH
34736: LD_INT 0
34738: EQUAL
34739: IFFALSE 34763
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34741: CALL_OW 44
34745: PPUSH
34746: LD_VAR 0 4
34750: PPUSH
34751: LD_VAR 0 5
34755: PPUSH
34756: LD_INT 1
34758: PPUSH
34759: CALL_OW 48
// end ;
34763: LD_VAR 0 6
34767: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34768: LD_INT 0
34770: PPUSH
34771: PPUSH
// uc_side := your_side ;
34772: LD_ADDR_OWVAR 20
34776: PUSH
34777: LD_OWVAR 2
34781: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34782: LD_VAR 0 1
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: IN
34809: IFFALSE 34821
// uc_nation := nation_american else
34811: LD_ADDR_OWVAR 21
34815: PUSH
34816: LD_INT 1
34818: ST_TO_ADDR
34819: GO 34864
// if chassis in [ 11 , 12 , 13 , 14 ] then
34821: LD_VAR 0 1
34825: PUSH
34826: LD_INT 11
34828: PUSH
34829: LD_INT 12
34831: PUSH
34832: LD_INT 13
34834: PUSH
34835: LD_INT 14
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: IN
34844: IFFALSE 34856
// uc_nation := nation_arabian else
34846: LD_ADDR_OWVAR 21
34850: PUSH
34851: LD_INT 2
34853: ST_TO_ADDR
34854: GO 34864
// uc_nation := nation_russian ;
34856: LD_ADDR_OWVAR 21
34860: PUSH
34861: LD_INT 3
34863: ST_TO_ADDR
// vc_chassis := chassis ;
34864: LD_ADDR_OWVAR 37
34868: PUSH
34869: LD_VAR 0 1
34873: ST_TO_ADDR
// vc_engine := engine ;
34874: LD_ADDR_OWVAR 39
34878: PUSH
34879: LD_VAR 0 2
34883: ST_TO_ADDR
// vc_control := control ;
34884: LD_ADDR_OWVAR 38
34888: PUSH
34889: LD_VAR 0 3
34893: ST_TO_ADDR
// vc_weapon := weapon ;
34894: LD_ADDR_OWVAR 40
34898: PUSH
34899: LD_VAR 0 4
34903: ST_TO_ADDR
// un := CreateVehicle ;
34904: LD_ADDR_VAR 0 8
34908: PUSH
34909: CALL_OW 45
34913: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34914: LD_VAR 0 8
34918: PPUSH
34919: LD_INT 0
34921: PPUSH
34922: LD_INT 5
34924: PPUSH
34925: CALL_OW 12
34929: PPUSH
34930: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34934: LD_VAR 0 8
34938: PPUSH
34939: LD_VAR 0 5
34943: PPUSH
34944: LD_VAR 0 6
34948: PPUSH
34949: LD_INT 1
34951: PPUSH
34952: CALL_OW 48
// end ;
34956: LD_VAR 0 7
34960: RET
// export hInvincible ; every 1 do
34961: GO 34963
34963: DISABLE
// hInvincible := [ ] ;
34964: LD_ADDR_EXP 107
34968: PUSH
34969: EMPTY
34970: ST_TO_ADDR
34971: END
// every 10 do var i ;
34972: GO 34974
34974: DISABLE
34975: LD_INT 0
34977: PPUSH
// begin enable ;
34978: ENABLE
// if not hInvincible then
34979: LD_EXP 107
34983: NOT
34984: IFFALSE 34988
// exit ;
34986: GO 35032
// for i in hInvincible do
34988: LD_ADDR_VAR 0 1
34992: PUSH
34993: LD_EXP 107
34997: PUSH
34998: FOR_IN
34999: IFFALSE 35030
// if GetLives ( i ) < 1000 then
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 256
35010: PUSH
35011: LD_INT 1000
35013: LESS
35014: IFFALSE 35028
// SetLives ( i , 1000 ) ;
35016: LD_VAR 0 1
35020: PPUSH
35021: LD_INT 1000
35023: PPUSH
35024: CALL_OW 234
35028: GO 34998
35030: POP
35031: POP
// end ;
35032: PPOPN 1
35034: END
// export function hHackInvincible ; var i ; begin
35035: LD_INT 0
35037: PPUSH
35038: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35039: LD_ADDR_VAR 0 2
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 21
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 21
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PPUSH
35072: CALL_OW 69
35076: PUSH
35077: FOR_IN
35078: IFFALSE 35139
// if IsSelected ( i ) then
35080: LD_VAR 0 2
35084: PPUSH
35085: CALL_OW 306
35089: IFFALSE 35137
// begin if i in hInvincible then
35091: LD_VAR 0 2
35095: PUSH
35096: LD_EXP 107
35100: IN
35101: IFFALSE 35121
// hInvincible := hInvincible diff i else
35103: LD_ADDR_EXP 107
35107: PUSH
35108: LD_EXP 107
35112: PUSH
35113: LD_VAR 0 2
35117: DIFF
35118: ST_TO_ADDR
35119: GO 35137
// hInvincible := hInvincible union i ;
35121: LD_ADDR_EXP 107
35125: PUSH
35126: LD_EXP 107
35130: PUSH
35131: LD_VAR 0 2
35135: UNION
35136: ST_TO_ADDR
// end ;
35137: GO 35077
35139: POP
35140: POP
// end ;
35141: LD_VAR 0 1
35145: RET
// export function hHackInvisible ; var i , j ; begin
35146: LD_INT 0
35148: PPUSH
35149: PPUSH
35150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35151: LD_ADDR_VAR 0 2
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: PUSH
35171: FOR_IN
35172: IFFALSE 35196
// if IsSelected ( i ) then
35174: LD_VAR 0 2
35178: PPUSH
35179: CALL_OW 306
35183: IFFALSE 35194
// ComForceInvisible ( i ) ;
35185: LD_VAR 0 2
35189: PPUSH
35190: CALL_OW 496
35194: GO 35171
35196: POP
35197: POP
// end ;
35198: LD_VAR 0 1
35202: RET
// export function hHackChangeYourSide ; begin
35203: LD_INT 0
35205: PPUSH
// if your_side = 8 then
35206: LD_OWVAR 2
35210: PUSH
35211: LD_INT 8
35213: EQUAL
35214: IFFALSE 35226
// your_side := 0 else
35216: LD_ADDR_OWVAR 2
35220: PUSH
35221: LD_INT 0
35223: ST_TO_ADDR
35224: GO 35240
// your_side := your_side + 1 ;
35226: LD_ADDR_OWVAR 2
35230: PUSH
35231: LD_OWVAR 2
35235: PUSH
35236: LD_INT 1
35238: PLUS
35239: ST_TO_ADDR
// end ;
35240: LD_VAR 0 1
35244: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
35249: PPUSH
// for i in all_units do
35250: LD_ADDR_VAR 0 2
35254: PUSH
35255: LD_OWVAR 3
35259: PUSH
35260: FOR_IN
35261: IFFALSE 35339
// if IsSelected ( i ) then
35263: LD_VAR 0 2
35267: PPUSH
35268: CALL_OW 306
35272: IFFALSE 35337
// begin j := GetSide ( i ) ;
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_VAR 0 2
35283: PPUSH
35284: CALL_OW 255
35288: ST_TO_ADDR
// if j = 8 then
35289: LD_VAR 0 3
35293: PUSH
35294: LD_INT 8
35296: EQUAL
35297: IFFALSE 35309
// j := 0 else
35299: LD_ADDR_VAR 0 3
35303: PUSH
35304: LD_INT 0
35306: ST_TO_ADDR
35307: GO 35323
// j := j + 1 ;
35309: LD_ADDR_VAR 0 3
35313: PUSH
35314: LD_VAR 0 3
35318: PUSH
35319: LD_INT 1
35321: PLUS
35322: ST_TO_ADDR
// SetSide ( i , j ) ;
35323: LD_VAR 0 2
35327: PPUSH
35328: LD_VAR 0 3
35332: PPUSH
35333: CALL_OW 235
// end ;
35337: GO 35260
35339: POP
35340: POP
// end ;
35341: LD_VAR 0 1
35345: RET
// export function hHackFog ; begin
35346: LD_INT 0
35348: PPUSH
// FogOff ( true ) ;
35349: LD_INT 1
35351: PPUSH
35352: CALL_OW 344
// end ;
35356: LD_VAR 0 1
35360: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35361: LD_INT 0
35363: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: LD_INT 1
35381: PPUSH
35382: LD_INT 1
35384: PPUSH
35385: CALL_OW 483
// CenterOnXY ( x , y ) ;
35389: LD_VAR 0 2
35393: PPUSH
35394: LD_VAR 0 3
35398: PPUSH
35399: CALL_OW 84
// end ;
35403: LD_VAR 0 4
35407: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35408: LD_INT 0
35410: PPUSH
35411: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35412: LD_VAR 0 1
35416: NOT
35417: PUSH
35418: LD_VAR 0 2
35422: PPUSH
35423: LD_VAR 0 3
35427: PPUSH
35428: CALL_OW 488
35432: NOT
35433: OR
35434: PUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 266
35444: PUSH
35445: LD_INT 3
35447: NONEQUAL
35448: PUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 247
35458: PUSH
35459: LD_INT 1
35461: EQUAL
35462: NOT
35463: AND
35464: OR
35465: IFFALSE 35469
// exit ;
35467: GO 35618
// if GetType ( factory ) = unit_human then
35469: LD_VAR 0 1
35473: PPUSH
35474: CALL_OW 247
35478: PUSH
35479: LD_INT 1
35481: EQUAL
35482: IFFALSE 35499
// factory := IsInUnit ( factory ) ;
35484: LD_ADDR_VAR 0 1
35488: PUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 310
35498: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 266
35508: PUSH
35509: LD_INT 3
35511: NONEQUAL
35512: IFFALSE 35516
// exit ;
35514: GO 35618
// if HexInfo ( x , y ) = factory then
35516: LD_VAR 0 2
35520: PPUSH
35521: LD_VAR 0 3
35525: PPUSH
35526: CALL_OW 428
35530: PUSH
35531: LD_VAR 0 1
35535: EQUAL
35536: IFFALSE 35563
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35538: LD_ADDR_EXP 108
35542: PUSH
35543: LD_EXP 108
35547: PPUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: LD_INT 0
35555: PPUSH
35556: CALL_OW 1
35560: ST_TO_ADDR
35561: GO 35614
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35563: LD_ADDR_EXP 108
35567: PUSH
35568: LD_EXP 108
35572: PPUSH
35573: LD_VAR 0 1
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 255
35587: PUSH
35588: LD_VAR 0 1
35592: PUSH
35593: LD_VAR 0 2
35597: PUSH
35598: LD_VAR 0 3
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: PPUSH
35609: CALL_OW 1
35613: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35614: CALL 35623 0 0
// end ;
35618: LD_VAR 0 4
35622: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35623: LD_INT 0
35625: PPUSH
35626: PPUSH
35627: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35628: LD_STRING resetFactoryWaypoint();
35630: PPUSH
35631: CALL_OW 559
// if factoryWaypoints then
35635: LD_EXP 108
35639: IFFALSE 35765
// begin list := PrepareArray ( factoryWaypoints ) ;
35641: LD_ADDR_VAR 0 3
35645: PUSH
35646: LD_EXP 108
35650: PPUSH
35651: CALL 82215 0 1
35655: ST_TO_ADDR
// for i := 1 to list do
35656: LD_ADDR_VAR 0 2
35660: PUSH
35661: DOUBLE
35662: LD_INT 1
35664: DEC
35665: ST_TO_ADDR
35666: LD_VAR 0 3
35670: PUSH
35671: FOR_TO
35672: IFFALSE 35763
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35674: LD_STRING setFactoryWaypointXY(
35676: PUSH
35677: LD_VAR 0 3
35681: PUSH
35682: LD_VAR 0 2
35686: ARRAY
35687: PUSH
35688: LD_INT 1
35690: ARRAY
35691: STR
35692: PUSH
35693: LD_STRING ,
35695: STR
35696: PUSH
35697: LD_VAR 0 3
35701: PUSH
35702: LD_VAR 0 2
35706: ARRAY
35707: PUSH
35708: LD_INT 2
35710: ARRAY
35711: STR
35712: PUSH
35713: LD_STRING ,
35715: STR
35716: PUSH
35717: LD_VAR 0 3
35721: PUSH
35722: LD_VAR 0 2
35726: ARRAY
35727: PUSH
35728: LD_INT 3
35730: ARRAY
35731: STR
35732: PUSH
35733: LD_STRING ,
35735: STR
35736: PUSH
35737: LD_VAR 0 3
35741: PUSH
35742: LD_VAR 0 2
35746: ARRAY
35747: PUSH
35748: LD_INT 4
35750: ARRAY
35751: STR
35752: PUSH
35753: LD_STRING )
35755: STR
35756: PPUSH
35757: CALL_OW 559
35761: GO 35671
35763: POP
35764: POP
// end ; end ;
35765: LD_VAR 0 1
35769: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35770: LD_INT 0
35772: PPUSH
// if HexInfo ( x , y ) = warehouse then
35773: LD_VAR 0 2
35777: PPUSH
35778: LD_VAR 0 3
35782: PPUSH
35783: CALL_OW 428
35787: PUSH
35788: LD_VAR 0 1
35792: EQUAL
35793: IFFALSE 35820
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35795: LD_ADDR_EXP 109
35799: PUSH
35800: LD_EXP 109
35804: PPUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: LD_INT 0
35812: PPUSH
35813: CALL_OW 1
35817: ST_TO_ADDR
35818: GO 35871
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35820: LD_ADDR_EXP 109
35824: PUSH
35825: LD_EXP 109
35829: PPUSH
35830: LD_VAR 0 1
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 255
35844: PUSH
35845: LD_VAR 0 1
35849: PUSH
35850: LD_VAR 0 2
35854: PUSH
35855: LD_VAR 0 3
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: PPUSH
35866: CALL_OW 1
35870: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35871: CALL 35880 0 0
// end ;
35875: LD_VAR 0 4
35879: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35880: LD_INT 0
35882: PPUSH
35883: PPUSH
35884: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35885: LD_STRING resetWarehouseGatheringPoints();
35887: PPUSH
35888: CALL_OW 559
// if warehouseGatheringPoints then
35892: LD_EXP 109
35896: IFFALSE 36022
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35898: LD_ADDR_VAR 0 3
35902: PUSH
35903: LD_EXP 109
35907: PPUSH
35908: CALL 82215 0 1
35912: ST_TO_ADDR
// for i := 1 to list do
35913: LD_ADDR_VAR 0 2
35917: PUSH
35918: DOUBLE
35919: LD_INT 1
35921: DEC
35922: ST_TO_ADDR
35923: LD_VAR 0 3
35927: PUSH
35928: FOR_TO
35929: IFFALSE 36020
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35931: LD_STRING setWarehouseGatheringPointXY(
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_VAR 0 2
35943: ARRAY
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: STR
35949: PUSH
35950: LD_STRING ,
35952: STR
35953: PUSH
35954: LD_VAR 0 3
35958: PUSH
35959: LD_VAR 0 2
35963: ARRAY
35964: PUSH
35965: LD_INT 2
35967: ARRAY
35968: STR
35969: PUSH
35970: LD_STRING ,
35972: STR
35973: PUSH
35974: LD_VAR 0 3
35978: PUSH
35979: LD_VAR 0 2
35983: ARRAY
35984: PUSH
35985: LD_INT 3
35987: ARRAY
35988: STR
35989: PUSH
35990: LD_STRING ,
35992: STR
35993: PUSH
35994: LD_VAR 0 3
35998: PUSH
35999: LD_VAR 0 2
36003: ARRAY
36004: PUSH
36005: LD_INT 4
36007: ARRAY
36008: STR
36009: PUSH
36010: LD_STRING )
36012: STR
36013: PPUSH
36014: CALL_OW 559
36018: GO 35928
36020: POP
36021: POP
// end ; end ;
36022: LD_VAR 0 1
36026: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36027: LD_EXP 109
36031: IFFALSE 36716
36033: GO 36035
36035: DISABLE
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
// begin enable ;
36047: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36048: LD_ADDR_VAR 0 3
36052: PUSH
36053: LD_EXP 109
36057: PPUSH
36058: CALL 82215 0 1
36062: ST_TO_ADDR
// if not list then
36063: LD_VAR 0 3
36067: NOT
36068: IFFALSE 36072
// exit ;
36070: GO 36716
// for i := 1 to list do
36072: LD_ADDR_VAR 0 1
36076: PUSH
36077: DOUBLE
36078: LD_INT 1
36080: DEC
36081: ST_TO_ADDR
36082: LD_VAR 0 3
36086: PUSH
36087: FOR_TO
36088: IFFALSE 36714
// begin depot := list [ i ] [ 2 ] ;
36090: LD_ADDR_VAR 0 8
36094: PUSH
36095: LD_VAR 0 3
36099: PUSH
36100: LD_VAR 0 1
36104: ARRAY
36105: PUSH
36106: LD_INT 2
36108: ARRAY
36109: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36110: LD_ADDR_VAR 0 5
36114: PUSH
36115: LD_VAR 0 3
36119: PUSH
36120: LD_VAR 0 1
36124: ARRAY
36125: PUSH
36126: LD_INT 1
36128: ARRAY
36129: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36130: LD_VAR 0 8
36134: PPUSH
36135: CALL_OW 301
36139: PUSH
36140: LD_VAR 0 5
36144: PUSH
36145: LD_VAR 0 8
36149: PPUSH
36150: CALL_OW 255
36154: NONEQUAL
36155: OR
36156: IFFALSE 36185
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36158: LD_ADDR_EXP 109
36162: PUSH
36163: LD_EXP 109
36167: PPUSH
36168: LD_VAR 0 8
36172: PPUSH
36173: LD_INT 0
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// exit ;
36181: POP
36182: POP
36183: GO 36716
// end ; x := list [ i ] [ 3 ] ;
36185: LD_ADDR_VAR 0 6
36189: PUSH
36190: LD_VAR 0 3
36194: PUSH
36195: LD_VAR 0 1
36199: ARRAY
36200: PUSH
36201: LD_INT 3
36203: ARRAY
36204: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36205: LD_ADDR_VAR 0 7
36209: PUSH
36210: LD_VAR 0 3
36214: PUSH
36215: LD_VAR 0 1
36219: ARRAY
36220: PUSH
36221: LD_INT 4
36223: ARRAY
36224: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36225: LD_ADDR_VAR 0 9
36229: PUSH
36230: LD_VAR 0 6
36234: PPUSH
36235: LD_VAR 0 7
36239: PPUSH
36240: LD_INT 16
36242: PPUSH
36243: CALL 80803 0 3
36247: ST_TO_ADDR
// if not cratesNearbyPoint then
36248: LD_VAR 0 9
36252: NOT
36253: IFFALSE 36259
// exit ;
36255: POP
36256: POP
36257: GO 36716
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36259: LD_ADDR_VAR 0 4
36263: PUSH
36264: LD_INT 22
36266: PUSH
36267: LD_VAR 0 5
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: LD_INT 60
36281: PUSH
36282: EMPTY
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 91
36291: PUSH
36292: LD_VAR 0 8
36296: PUSH
36297: LD_INT 6
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 25
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 25
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: PPUSH
36339: CALL_OW 69
36343: PUSH
36344: LD_VAR 0 8
36348: PPUSH
36349: CALL_OW 313
36353: PPUSH
36354: LD_INT 3
36356: PUSH
36357: LD_INT 60
36359: PUSH
36360: EMPTY
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 25
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 25
36382: PUSH
36383: LD_INT 16
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PPUSH
36399: CALL_OW 72
36403: UNION
36404: ST_TO_ADDR
// if tmp then
36405: LD_VAR 0 4
36409: IFFALSE 36489
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: LD_VAR 0 4
36420: PPUSH
36421: LD_INT 3
36423: PPUSH
36424: CALL 78772 0 2
36428: ST_TO_ADDR
// for j in tmp do
36429: LD_ADDR_VAR 0 2
36433: PUSH
36434: LD_VAR 0 4
36438: PUSH
36439: FOR_IN
36440: IFFALSE 36483
// begin if IsInUnit ( j ) then
36442: LD_VAR 0 2
36446: PPUSH
36447: CALL_OW 310
36451: IFFALSE 36462
// ComExit ( j ) ;
36453: LD_VAR 0 2
36457: PPUSH
36458: CALL 78855 0 1
// AddComCollect ( j , x , y ) ;
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 6
36471: PPUSH
36472: LD_VAR 0 7
36476: PPUSH
36477: CALL_OW 177
// end ;
36481: GO 36439
36483: POP
36484: POP
// exit ;
36485: POP
36486: POP
36487: GO 36716
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36489: LD_ADDR_VAR 0 4
36493: PUSH
36494: LD_INT 22
36496: PUSH
36497: LD_VAR 0 5
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 91
36508: PUSH
36509: LD_VAR 0 8
36513: PUSH
36514: LD_INT 8
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 34
36527: PUSH
36528: LD_INT 12
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 34
36537: PUSH
36538: LD_INT 51
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 34
36547: PUSH
36548: LD_INT 32
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 34
36557: PUSH
36558: LD_INT 89
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: PPUSH
36577: CALL_OW 69
36581: ST_TO_ADDR
// if tmp then
36582: LD_VAR 0 4
36586: IFFALSE 36712
// begin for j in tmp do
36588: LD_ADDR_VAR 0 2
36592: PUSH
36593: LD_VAR 0 4
36597: PUSH
36598: FOR_IN
36599: IFFALSE 36710
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36601: LD_VAR 0 2
36605: PPUSH
36606: CALL_OW 262
36610: PUSH
36611: LD_INT 3
36613: EQUAL
36614: PUSH
36615: LD_VAR 0 2
36619: PPUSH
36620: CALL_OW 261
36624: PUSH
36625: LD_INT 20
36627: GREATER
36628: OR
36629: PUSH
36630: LD_VAR 0 2
36634: PPUSH
36635: CALL_OW 314
36639: NOT
36640: AND
36641: PUSH
36642: LD_VAR 0 2
36646: PPUSH
36647: CALL_OW 263
36651: PUSH
36652: LD_INT 1
36654: NONEQUAL
36655: PUSH
36656: LD_VAR 0 2
36660: PPUSH
36661: CALL_OW 311
36665: OR
36666: AND
36667: IFFALSE 36708
// begin ComCollect ( j , x , y ) ;
36669: LD_VAR 0 2
36673: PPUSH
36674: LD_VAR 0 6
36678: PPUSH
36679: LD_VAR 0 7
36683: PPUSH
36684: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36688: LD_VAR 0 2
36692: PPUSH
36693: LD_VAR 0 8
36697: PPUSH
36698: CALL_OW 172
// exit ;
36702: POP
36703: POP
36704: POP
36705: POP
36706: GO 36716
// end ;
36708: GO 36598
36710: POP
36711: POP
// end ; end ;
36712: GO 36087
36714: POP
36715: POP
// end ; end_of_file
36716: PPOPN 9
36718: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36719: LD_INT 0
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 264
36734: PUSH
36735: LD_INT 91
36737: EQUAL
36738: IFFALSE 36810
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36740: LD_INT 68
36742: PPUSH
36743: LD_VAR 0 1
36747: PPUSH
36748: CALL_OW 255
36752: PPUSH
36753: CALL_OW 321
36757: PUSH
36758: LD_INT 2
36760: EQUAL
36761: IFFALSE 36773
// eff := 70 else
36763: LD_ADDR_VAR 0 4
36767: PUSH
36768: LD_INT 70
36770: ST_TO_ADDR
36771: GO 36781
// eff := 30 ;
36773: LD_ADDR_VAR 0 4
36777: PUSH
36778: LD_INT 30
36780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36781: LD_VAR 0 1
36785: PPUSH
36786: CALL_OW 250
36790: PPUSH
36791: LD_VAR 0 1
36795: PPUSH
36796: CALL_OW 251
36800: PPUSH
36801: LD_VAR 0 4
36805: PPUSH
36806: CALL_OW 495
// end ; end ;
36810: LD_VAR 0 2
36814: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36815: LD_INT 0
36817: PPUSH
// end ;
36818: LD_VAR 0 4
36822: RET
// export function SOS_Command ( cmd ) ; begin
36823: LD_INT 0
36825: PPUSH
// end ;
36826: LD_VAR 0 2
36830: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36831: LD_INT 0
36833: PPUSH
// end ;
36834: LD_VAR 0 6
36838: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36839: LD_INT 0
36841: PPUSH
36842: PPUSH
// if not vehicle or not factory then
36843: LD_VAR 0 1
36847: NOT
36848: PUSH
36849: LD_VAR 0 2
36853: NOT
36854: OR
36855: IFFALSE 36859
// exit ;
36857: GO 37090
// if factoryWaypoints >= factory then
36859: LD_EXP 108
36863: PUSH
36864: LD_VAR 0 2
36868: GREATEREQUAL
36869: IFFALSE 37090
// if factoryWaypoints [ factory ] then
36871: LD_EXP 108
36875: PUSH
36876: LD_VAR 0 2
36880: ARRAY
36881: IFFALSE 37090
// begin if GetControl ( vehicle ) = control_manual then
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 263
36892: PUSH
36893: LD_INT 1
36895: EQUAL
36896: IFFALSE 36977
// begin driver := IsDrivenBy ( vehicle ) ;
36898: LD_ADDR_VAR 0 4
36902: PUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 311
36912: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36913: LD_VAR 0 4
36917: PPUSH
36918: LD_EXP 108
36922: PUSH
36923: LD_VAR 0 2
36927: ARRAY
36928: PUSH
36929: LD_INT 3
36931: ARRAY
36932: PPUSH
36933: LD_EXP 108
36937: PUSH
36938: LD_VAR 0 2
36942: ARRAY
36943: PUSH
36944: LD_INT 4
36946: ARRAY
36947: PPUSH
36948: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36952: LD_VAR 0 4
36956: PPUSH
36957: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36961: LD_VAR 0 4
36965: PPUSH
36966: LD_VAR 0 2
36970: PPUSH
36971: CALL_OW 180
// end else
36975: GO 37090
// if GetControl ( vehicle ) = control_remote then
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 263
36986: PUSH
36987: LD_INT 2
36989: EQUAL
36990: IFFALSE 37051
// begin wait ( 0 0$2 ) ;
36992: LD_INT 70
36994: PPUSH
36995: CALL_OW 67
// if Connect ( vehicle ) then
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL 49114 0 1
37008: IFFALSE 37049
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37010: LD_VAR 0 1
37014: PPUSH
37015: LD_EXP 108
37019: PUSH
37020: LD_VAR 0 2
37024: ARRAY
37025: PUSH
37026: LD_INT 3
37028: ARRAY
37029: PPUSH
37030: LD_EXP 108
37034: PUSH
37035: LD_VAR 0 2
37039: ARRAY
37040: PUSH
37041: LD_INT 4
37043: ARRAY
37044: PPUSH
37045: CALL_OW 171
// end else
37049: GO 37090
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37051: LD_VAR 0 1
37055: PPUSH
37056: LD_EXP 108
37060: PUSH
37061: LD_VAR 0 2
37065: ARRAY
37066: PUSH
37067: LD_INT 3
37069: ARRAY
37070: PPUSH
37071: LD_EXP 108
37075: PUSH
37076: LD_VAR 0 2
37080: ARRAY
37081: PUSH
37082: LD_INT 4
37084: ARRAY
37085: PPUSH
37086: CALL_OW 171
// end ; end ;
37090: LD_VAR 0 3
37094: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37095: LD_INT 0
37097: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37098: LD_VAR 0 1
37102: PUSH
37103: LD_INT 250
37105: EQUAL
37106: PUSH
37107: LD_VAR 0 2
37111: PPUSH
37112: CALL_OW 264
37116: PUSH
37117: LD_INT 81
37119: EQUAL
37120: AND
37121: IFFALSE 37142
// MinerPlaceMine ( unit , x , y ) ;
37123: LD_VAR 0 2
37127: PPUSH
37128: LD_VAR 0 4
37132: PPUSH
37133: LD_VAR 0 5
37137: PPUSH
37138: CALL 39527 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37142: LD_VAR 0 1
37146: PUSH
37147: LD_INT 251
37149: EQUAL
37150: PUSH
37151: LD_VAR 0 2
37155: PPUSH
37156: CALL_OW 264
37160: PUSH
37161: LD_INT 81
37163: EQUAL
37164: AND
37165: IFFALSE 37186
// MinerDetonateMine ( unit , x , y ) ;
37167: LD_VAR 0 2
37171: PPUSH
37172: LD_VAR 0 4
37176: PPUSH
37177: LD_VAR 0 5
37181: PPUSH
37182: CALL 39802 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37186: LD_VAR 0 1
37190: PUSH
37191: LD_INT 252
37193: EQUAL
37194: PUSH
37195: LD_VAR 0 2
37199: PPUSH
37200: CALL_OW 264
37204: PUSH
37205: LD_INT 81
37207: EQUAL
37208: AND
37209: IFFALSE 37230
// MinerCreateMinefield ( unit , x , y ) ;
37211: LD_VAR 0 2
37215: PPUSH
37216: LD_VAR 0 4
37220: PPUSH
37221: LD_VAR 0 5
37225: PPUSH
37226: CALL 40219 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37230: LD_VAR 0 1
37234: PUSH
37235: LD_INT 253
37237: EQUAL
37238: PUSH
37239: LD_VAR 0 2
37243: PPUSH
37244: CALL_OW 257
37248: PUSH
37249: LD_INT 5
37251: EQUAL
37252: AND
37253: IFFALSE 37274
// ComBinocular ( unit , x , y ) ;
37255: LD_VAR 0 2
37259: PPUSH
37260: LD_VAR 0 4
37264: PPUSH
37265: LD_VAR 0 5
37269: PPUSH
37270: CALL 40588 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37274: LD_VAR 0 1
37278: PUSH
37279: LD_INT 254
37281: EQUAL
37282: PUSH
37283: LD_VAR 0 2
37287: PPUSH
37288: CALL_OW 264
37292: PUSH
37293: LD_INT 99
37295: EQUAL
37296: AND
37297: PUSH
37298: LD_VAR 0 3
37302: PPUSH
37303: CALL_OW 263
37307: PUSH
37308: LD_INT 3
37310: EQUAL
37311: AND
37312: IFFALSE 37328
// HackDestroyVehicle ( unit , selectedUnit ) ;
37314: LD_VAR 0 2
37318: PPUSH
37319: LD_VAR 0 3
37323: PPUSH
37324: CALL 38891 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37328: LD_VAR 0 1
37332: PUSH
37333: LD_INT 255
37335: EQUAL
37336: PUSH
37337: LD_VAR 0 2
37341: PPUSH
37342: CALL_OW 264
37346: PUSH
37347: LD_INT 14
37349: PUSH
37350: LD_INT 53
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: IN
37357: AND
37358: PUSH
37359: LD_VAR 0 4
37363: PPUSH
37364: LD_VAR 0 5
37368: PPUSH
37369: CALL_OW 488
37373: AND
37374: IFFALSE 37398
// CutTreeXYR ( unit , x , y , 12 ) ;
37376: LD_VAR 0 2
37380: PPUSH
37381: LD_VAR 0 4
37385: PPUSH
37386: LD_VAR 0 5
37390: PPUSH
37391: LD_INT 12
37393: PPUSH
37394: CALL 37461 0 4
// if cmd = 256 then
37398: LD_VAR 0 1
37402: PUSH
37403: LD_INT 256
37405: EQUAL
37406: IFFALSE 37427
// SetFactoryWaypoint ( unit , x , y ) ;
37408: LD_VAR 0 2
37412: PPUSH
37413: LD_VAR 0 4
37417: PPUSH
37418: LD_VAR 0 5
37422: PPUSH
37423: CALL 35408 0 3
// if cmd = 257 then
37427: LD_VAR 0 1
37431: PUSH
37432: LD_INT 257
37434: EQUAL
37435: IFFALSE 37456
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37437: LD_VAR 0 2
37441: PPUSH
37442: LD_VAR 0 4
37446: PPUSH
37447: LD_VAR 0 5
37451: PPUSH
37452: CALL 35770 0 3
// end ;
37456: LD_VAR 0 6
37460: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37472: LD_VAR 0 1
37476: NOT
37477: PUSH
37478: LD_VAR 0 2
37482: PPUSH
37483: LD_VAR 0 3
37487: PPUSH
37488: CALL_OW 488
37492: NOT
37493: OR
37494: PUSH
37495: LD_VAR 0 4
37499: NOT
37500: OR
37501: IFFALSE 37505
// exit ;
37503: GO 37845
// list := [ ] ;
37505: LD_ADDR_VAR 0 13
37509: PUSH
37510: EMPTY
37511: ST_TO_ADDR
// if x - r < 0 then
37512: LD_VAR 0 2
37516: PUSH
37517: LD_VAR 0 4
37521: MINUS
37522: PUSH
37523: LD_INT 0
37525: LESS
37526: IFFALSE 37538
// min_x := 0 else
37528: LD_ADDR_VAR 0 7
37532: PUSH
37533: LD_INT 0
37535: ST_TO_ADDR
37536: GO 37554
// min_x := x - r ;
37538: LD_ADDR_VAR 0 7
37542: PUSH
37543: LD_VAR 0 2
37547: PUSH
37548: LD_VAR 0 4
37552: MINUS
37553: ST_TO_ADDR
// if y - r < 0 then
37554: LD_VAR 0 3
37558: PUSH
37559: LD_VAR 0 4
37563: MINUS
37564: PUSH
37565: LD_INT 0
37567: LESS
37568: IFFALSE 37580
// min_y := 0 else
37570: LD_ADDR_VAR 0 8
37574: PUSH
37575: LD_INT 0
37577: ST_TO_ADDR
37578: GO 37596
// min_y := y - r ;
37580: LD_ADDR_VAR 0 8
37584: PUSH
37585: LD_VAR 0 3
37589: PUSH
37590: LD_VAR 0 4
37594: MINUS
37595: ST_TO_ADDR
// max_x := x + r ;
37596: LD_ADDR_VAR 0 9
37600: PUSH
37601: LD_VAR 0 2
37605: PUSH
37606: LD_VAR 0 4
37610: PLUS
37611: ST_TO_ADDR
// max_y := y + r ;
37612: LD_ADDR_VAR 0 10
37616: PUSH
37617: LD_VAR 0 3
37621: PUSH
37622: LD_VAR 0 4
37626: PLUS
37627: ST_TO_ADDR
// for _x = min_x to max_x do
37628: LD_ADDR_VAR 0 11
37632: PUSH
37633: DOUBLE
37634: LD_VAR 0 7
37638: DEC
37639: ST_TO_ADDR
37640: LD_VAR 0 9
37644: PUSH
37645: FOR_TO
37646: IFFALSE 37763
// for _y = min_y to max_y do
37648: LD_ADDR_VAR 0 12
37652: PUSH
37653: DOUBLE
37654: LD_VAR 0 8
37658: DEC
37659: ST_TO_ADDR
37660: LD_VAR 0 10
37664: PUSH
37665: FOR_TO
37666: IFFALSE 37759
// begin if not ValidHex ( _x , _y ) then
37668: LD_VAR 0 11
37672: PPUSH
37673: LD_VAR 0 12
37677: PPUSH
37678: CALL_OW 488
37682: NOT
37683: IFFALSE 37687
// continue ;
37685: GO 37665
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37687: LD_VAR 0 11
37691: PPUSH
37692: LD_VAR 0 12
37696: PPUSH
37697: CALL_OW 351
37701: PUSH
37702: LD_VAR 0 11
37706: PPUSH
37707: LD_VAR 0 12
37711: PPUSH
37712: CALL_OW 554
37716: AND
37717: IFFALSE 37757
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37719: LD_ADDR_VAR 0 13
37723: PUSH
37724: LD_VAR 0 13
37728: PPUSH
37729: LD_VAR 0 13
37733: PUSH
37734: LD_INT 1
37736: PLUS
37737: PPUSH
37738: LD_VAR 0 11
37742: PUSH
37743: LD_VAR 0 12
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PPUSH
37752: CALL_OW 2
37756: ST_TO_ADDR
// end ;
37757: GO 37665
37759: POP
37760: POP
37761: GO 37645
37763: POP
37764: POP
// if not list then
37765: LD_VAR 0 13
37769: NOT
37770: IFFALSE 37774
// exit ;
37772: GO 37845
// for i in list do
37774: LD_ADDR_VAR 0 6
37778: PUSH
37779: LD_VAR 0 13
37783: PUSH
37784: FOR_IN
37785: IFFALSE 37843
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37787: LD_VAR 0 1
37791: PPUSH
37792: LD_STRING M
37794: PUSH
37795: LD_VAR 0 6
37799: PUSH
37800: LD_INT 1
37802: ARRAY
37803: PUSH
37804: LD_VAR 0 6
37808: PUSH
37809: LD_INT 2
37811: ARRAY
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: PUSH
37834: EMPTY
37835: LIST
37836: PPUSH
37837: CALL_OW 447
37841: GO 37784
37843: POP
37844: POP
// end ;
37845: LD_VAR 0 5
37849: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37850: LD_EXP 111
37854: NOT
37855: IFFALSE 37905
37857: GO 37859
37859: DISABLE
// begin initHack := true ;
37860: LD_ADDR_EXP 111
37864: PUSH
37865: LD_INT 1
37867: ST_TO_ADDR
// hackTanks := [ ] ;
37868: LD_ADDR_EXP 112
37872: PUSH
37873: EMPTY
37874: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37875: LD_ADDR_EXP 113
37879: PUSH
37880: EMPTY
37881: ST_TO_ADDR
// hackLimit := 3 ;
37882: LD_ADDR_EXP 114
37886: PUSH
37887: LD_INT 3
37889: ST_TO_ADDR
// hackDist := 12 ;
37890: LD_ADDR_EXP 115
37894: PUSH
37895: LD_INT 12
37897: ST_TO_ADDR
// hackCounter := [ ] ;
37898: LD_ADDR_EXP 116
37902: PUSH
37903: EMPTY
37904: ST_TO_ADDR
// end ;
37905: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37906: LD_EXP 111
37910: PUSH
37911: LD_INT 34
37913: PUSH
37914: LD_INT 99
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PPUSH
37921: CALL_OW 69
37925: AND
37926: IFFALSE 38179
37928: GO 37930
37930: DISABLE
37931: LD_INT 0
37933: PPUSH
37934: PPUSH
// begin enable ;
37935: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37936: LD_ADDR_VAR 0 1
37940: PUSH
37941: LD_INT 34
37943: PUSH
37944: LD_INT 99
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PPUSH
37951: CALL_OW 69
37955: PUSH
37956: FOR_IN
37957: IFFALSE 38177
// begin if not i in hackTanks then
37959: LD_VAR 0 1
37963: PUSH
37964: LD_EXP 112
37968: IN
37969: NOT
37970: IFFALSE 38053
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37972: LD_ADDR_EXP 112
37976: PUSH
37977: LD_EXP 112
37981: PPUSH
37982: LD_EXP 112
37986: PUSH
37987: LD_INT 1
37989: PLUS
37990: PPUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 1
38000: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38001: LD_ADDR_EXP 113
38005: PUSH
38006: LD_EXP 113
38010: PPUSH
38011: LD_EXP 113
38015: PUSH
38016: LD_INT 1
38018: PLUS
38019: PPUSH
38020: EMPTY
38021: PPUSH
38022: CALL_OW 1
38026: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38027: LD_ADDR_EXP 116
38031: PUSH
38032: LD_EXP 116
38036: PPUSH
38037: LD_EXP 116
38041: PUSH
38042: LD_INT 1
38044: PLUS
38045: PPUSH
38046: EMPTY
38047: PPUSH
38048: CALL_OW 1
38052: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 302
38062: NOT
38063: IFFALSE 38076
// begin HackUnlinkAll ( i ) ;
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL 38182 0 1
// continue ;
38074: GO 37956
// end ; HackCheckCapturedStatus ( i ) ;
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL 38625 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38085: LD_ADDR_VAR 0 2
38089: PUSH
38090: LD_INT 81
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 255
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 33
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 91
38119: PUSH
38120: LD_VAR 0 1
38124: PUSH
38125: LD_EXP 115
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 50
38137: PUSH
38138: EMPTY
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: PPUSH
38147: CALL_OW 69
38151: ST_TO_ADDR
// if not tmp then
38152: LD_VAR 0 2
38156: NOT
38157: IFFALSE 38161
// continue ;
38159: GO 37956
// HackLink ( i , tmp ) ;
38161: LD_VAR 0 1
38165: PPUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL 38318 0 2
// end ;
38175: GO 37956
38177: POP
38178: POP
// end ;
38179: PPOPN 2
38181: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38182: LD_INT 0
38184: PPUSH
38185: PPUSH
38186: PPUSH
// if not hack in hackTanks then
38187: LD_VAR 0 1
38191: PUSH
38192: LD_EXP 112
38196: IN
38197: NOT
38198: IFFALSE 38202
// exit ;
38200: GO 38313
// index := GetElementIndex ( hackTanks , hack ) ;
38202: LD_ADDR_VAR 0 4
38206: PUSH
38207: LD_EXP 112
38211: PPUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL 45930 0 2
38221: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38222: LD_EXP 113
38226: PUSH
38227: LD_VAR 0 4
38231: ARRAY
38232: IFFALSE 38313
// begin for i in hackTanksCaptured [ index ] do
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_EXP 113
38243: PUSH
38244: LD_VAR 0 4
38248: ARRAY
38249: PUSH
38250: FOR_IN
38251: IFFALSE 38277
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38253: LD_VAR 0 3
38257: PUSH
38258: LD_INT 1
38260: ARRAY
38261: PPUSH
38262: LD_VAR 0 3
38266: PUSH
38267: LD_INT 2
38269: ARRAY
38270: PPUSH
38271: CALL_OW 235
38275: GO 38250
38277: POP
38278: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38279: LD_ADDR_EXP 113
38283: PUSH
38284: LD_EXP 113
38288: PPUSH
38289: LD_VAR 0 4
38293: PPUSH
38294: EMPTY
38295: PPUSH
38296: CALL_OW 1
38300: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38301: LD_VAR 0 1
38305: PPUSH
38306: LD_INT 0
38308: PPUSH
38309: CALL_OW 505
// end ; end ;
38313: LD_VAR 0 2
38317: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38318: LD_INT 0
38320: PPUSH
38321: PPUSH
38322: PPUSH
// if not hack in hackTanks or not vehicles then
38323: LD_VAR 0 1
38327: PUSH
38328: LD_EXP 112
38332: IN
38333: NOT
38334: PUSH
38335: LD_VAR 0 2
38339: NOT
38340: OR
38341: IFFALSE 38345
// exit ;
38343: GO 38620
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38345: LD_ADDR_VAR 0 2
38349: PUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: LD_INT 1
38362: PPUSH
38363: LD_INT 1
38365: PPUSH
38366: CALL 46580 0 4
38370: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_EXP 112
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL 45930 0 2
38390: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38391: LD_EXP 113
38395: PUSH
38396: LD_VAR 0 5
38400: ARRAY
38401: PUSH
38402: LD_EXP 114
38406: LESS
38407: IFFALSE 38596
// begin for i := 1 to vehicles do
38409: LD_ADDR_VAR 0 4
38413: PUSH
38414: DOUBLE
38415: LD_INT 1
38417: DEC
38418: ST_TO_ADDR
38419: LD_VAR 0 2
38423: PUSH
38424: FOR_TO
38425: IFFALSE 38594
// begin if hackTanksCaptured [ index ] = hackLimit then
38427: LD_EXP 113
38431: PUSH
38432: LD_VAR 0 5
38436: ARRAY
38437: PUSH
38438: LD_EXP 114
38442: EQUAL
38443: IFFALSE 38447
// break ;
38445: GO 38594
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38447: LD_ADDR_EXP 116
38451: PUSH
38452: LD_EXP 116
38456: PPUSH
38457: LD_VAR 0 5
38461: PPUSH
38462: LD_EXP 116
38466: PUSH
38467: LD_VAR 0 5
38471: ARRAY
38472: PUSH
38473: LD_INT 1
38475: PLUS
38476: PPUSH
38477: CALL_OW 1
38481: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38482: LD_ADDR_EXP 113
38486: PUSH
38487: LD_EXP 113
38491: PPUSH
38492: LD_VAR 0 5
38496: PUSH
38497: LD_EXP 113
38501: PUSH
38502: LD_VAR 0 5
38506: ARRAY
38507: PUSH
38508: LD_INT 1
38510: PLUS
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PPUSH
38516: LD_VAR 0 2
38520: PUSH
38521: LD_VAR 0 4
38525: ARRAY
38526: PUSH
38527: LD_VAR 0 2
38531: PUSH
38532: LD_VAR 0 4
38536: ARRAY
38537: PPUSH
38538: CALL_OW 255
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PPUSH
38547: CALL 46145 0 3
38551: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38552: LD_VAR 0 2
38556: PUSH
38557: LD_VAR 0 4
38561: ARRAY
38562: PPUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 255
38572: PPUSH
38573: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38577: LD_VAR 0 2
38581: PUSH
38582: LD_VAR 0 4
38586: ARRAY
38587: PPUSH
38588: CALL_OW 141
// end ;
38592: GO 38424
38594: POP
38595: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38596: LD_VAR 0 1
38600: PPUSH
38601: LD_EXP 113
38605: PUSH
38606: LD_VAR 0 5
38610: ARRAY
38611: PUSH
38612: LD_INT 0
38614: PLUS
38615: PPUSH
38616: CALL_OW 505
// end ;
38620: LD_VAR 0 3
38624: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38625: LD_INT 0
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
// if not hack in hackTanks then
38631: LD_VAR 0 1
38635: PUSH
38636: LD_EXP 112
38640: IN
38641: NOT
38642: IFFALSE 38646
// exit ;
38644: GO 38886
// index := GetElementIndex ( hackTanks , hack ) ;
38646: LD_ADDR_VAR 0 4
38650: PUSH
38651: LD_EXP 112
38655: PPUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: CALL 45930 0 2
38665: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: DOUBLE
38672: LD_EXP 113
38676: PUSH
38677: LD_VAR 0 4
38681: ARRAY
38682: INC
38683: ST_TO_ADDR
38684: LD_INT 1
38686: PUSH
38687: FOR_DOWNTO
38688: IFFALSE 38860
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_EXP 113
38699: PUSH
38700: LD_VAR 0 4
38704: ARRAY
38705: PUSH
38706: LD_VAR 0 3
38710: ARRAY
38711: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38712: LD_VAR 0 5
38716: PUSH
38717: LD_INT 1
38719: ARRAY
38720: PPUSH
38721: CALL_OW 302
38725: NOT
38726: PUSH
38727: LD_VAR 0 5
38731: PUSH
38732: LD_INT 1
38734: ARRAY
38735: PPUSH
38736: CALL_OW 255
38740: PUSH
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 255
38750: NONEQUAL
38751: OR
38752: IFFALSE 38858
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38754: LD_VAR 0 5
38758: PUSH
38759: LD_INT 1
38761: ARRAY
38762: PPUSH
38763: CALL_OW 305
38767: PUSH
38768: LD_VAR 0 5
38772: PUSH
38773: LD_INT 1
38775: ARRAY
38776: PPUSH
38777: CALL_OW 255
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 255
38791: EQUAL
38792: AND
38793: IFFALSE 38817
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38795: LD_VAR 0 5
38799: PUSH
38800: LD_INT 1
38802: ARRAY
38803: PPUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_INT 2
38811: ARRAY
38812: PPUSH
38813: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38817: LD_ADDR_EXP 113
38821: PUSH
38822: LD_EXP 113
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: LD_EXP 113
38836: PUSH
38837: LD_VAR 0 4
38841: ARRAY
38842: PPUSH
38843: LD_VAR 0 3
38847: PPUSH
38848: CALL_OW 3
38852: PPUSH
38853: CALL_OW 1
38857: ST_TO_ADDR
// end ; end ;
38858: GO 38687
38860: POP
38861: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_EXP 113
38871: PUSH
38872: LD_VAR 0 4
38876: ARRAY
38877: PUSH
38878: LD_INT 0
38880: PLUS
38881: PPUSH
38882: CALL_OW 505
// end ;
38886: LD_VAR 0 2
38890: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
// if not hack in hackTanks then
38897: LD_VAR 0 1
38901: PUSH
38902: LD_EXP 112
38906: IN
38907: NOT
38908: IFFALSE 38912
// exit ;
38910: GO 38997
// index := GetElementIndex ( hackTanks , hack ) ;
38912: LD_ADDR_VAR 0 5
38916: PUSH
38917: LD_EXP 112
38921: PPUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL 45930 0 2
38931: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38932: LD_ADDR_VAR 0 4
38936: PUSH
38937: DOUBLE
38938: LD_INT 1
38940: DEC
38941: ST_TO_ADDR
38942: LD_EXP 113
38946: PUSH
38947: LD_VAR 0 5
38951: ARRAY
38952: PUSH
38953: FOR_TO
38954: IFFALSE 38995
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38956: LD_EXP 113
38960: PUSH
38961: LD_VAR 0 5
38965: ARRAY
38966: PUSH
38967: LD_VAR 0 4
38971: ARRAY
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PUSH
38977: LD_VAR 0 2
38981: EQUAL
38982: IFFALSE 38993
// KillUnit ( vehicle ) ;
38984: LD_VAR 0 2
38988: PPUSH
38989: CALL_OW 66
38993: GO 38953
38995: POP
38996: POP
// end ;
38997: LD_VAR 0 3
39001: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39002: LD_EXP 117
39006: NOT
39007: IFFALSE 39042
39009: GO 39011
39011: DISABLE
// begin initMiner := true ;
39012: LD_ADDR_EXP 117
39016: PUSH
39017: LD_INT 1
39019: ST_TO_ADDR
// minersList := [ ] ;
39020: LD_ADDR_EXP 118
39024: PUSH
39025: EMPTY
39026: ST_TO_ADDR
// minerMinesList := [ ] ;
39027: LD_ADDR_EXP 119
39031: PUSH
39032: EMPTY
39033: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39034: LD_ADDR_EXP 120
39038: PUSH
39039: LD_INT 5
39041: ST_TO_ADDR
// end ;
39042: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39043: LD_EXP 117
39047: PUSH
39048: LD_INT 34
39050: PUSH
39051: LD_INT 81
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PPUSH
39058: CALL_OW 69
39062: AND
39063: IFFALSE 39524
39065: GO 39067
39067: DISABLE
39068: LD_INT 0
39070: PPUSH
39071: PPUSH
39072: PPUSH
39073: PPUSH
// begin enable ;
39074: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39075: LD_ADDR_VAR 0 1
39079: PUSH
39080: LD_INT 34
39082: PUSH
39083: LD_INT 81
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PPUSH
39090: CALL_OW 69
39094: PUSH
39095: FOR_IN
39096: IFFALSE 39168
// begin if not i in minersList then
39098: LD_VAR 0 1
39102: PUSH
39103: LD_EXP 118
39107: IN
39108: NOT
39109: IFFALSE 39166
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39111: LD_ADDR_EXP 118
39115: PUSH
39116: LD_EXP 118
39120: PPUSH
39121: LD_EXP 118
39125: PUSH
39126: LD_INT 1
39128: PLUS
39129: PPUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 1
39139: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39140: LD_ADDR_EXP 119
39144: PUSH
39145: LD_EXP 119
39149: PPUSH
39150: LD_EXP 119
39154: PUSH
39155: LD_INT 1
39157: PLUS
39158: PPUSH
39159: EMPTY
39160: PPUSH
39161: CALL_OW 1
39165: ST_TO_ADDR
// end end ;
39166: GO 39095
39168: POP
39169: POP
// for i := minerMinesList downto 1 do
39170: LD_ADDR_VAR 0 1
39174: PUSH
39175: DOUBLE
39176: LD_EXP 119
39180: INC
39181: ST_TO_ADDR
39182: LD_INT 1
39184: PUSH
39185: FOR_DOWNTO
39186: IFFALSE 39522
// begin if IsLive ( minersList [ i ] ) then
39188: LD_EXP 118
39192: PUSH
39193: LD_VAR 0 1
39197: ARRAY
39198: PPUSH
39199: CALL_OW 300
39203: IFFALSE 39231
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39205: LD_EXP 118
39209: PUSH
39210: LD_VAR 0 1
39214: ARRAY
39215: PPUSH
39216: LD_EXP 119
39220: PUSH
39221: LD_VAR 0 1
39225: ARRAY
39226: PPUSH
39227: CALL_OW 505
// if not minerMinesList [ i ] then
39231: LD_EXP 119
39235: PUSH
39236: LD_VAR 0 1
39240: ARRAY
39241: NOT
39242: IFFALSE 39246
// continue ;
39244: GO 39185
// for j := minerMinesList [ i ] downto 1 do
39246: LD_ADDR_VAR 0 2
39250: PUSH
39251: DOUBLE
39252: LD_EXP 119
39256: PUSH
39257: LD_VAR 0 1
39261: ARRAY
39262: INC
39263: ST_TO_ADDR
39264: LD_INT 1
39266: PUSH
39267: FOR_DOWNTO
39268: IFFALSE 39518
// begin side := GetSide ( minersList [ i ] ) ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: LD_EXP 118
39279: PUSH
39280: LD_VAR 0 1
39284: ARRAY
39285: PPUSH
39286: CALL_OW 255
39290: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39291: LD_ADDR_VAR 0 4
39295: PUSH
39296: LD_EXP 119
39300: PUSH
39301: LD_VAR 0 1
39305: ARRAY
39306: PUSH
39307: LD_VAR 0 2
39311: ARRAY
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: LD_EXP 119
39321: PUSH
39322: LD_VAR 0 1
39326: ARRAY
39327: PUSH
39328: LD_VAR 0 2
39332: ARRAY
39333: PUSH
39334: LD_INT 2
39336: ARRAY
39337: PPUSH
39338: CALL_OW 428
39342: ST_TO_ADDR
// if not tmp then
39343: LD_VAR 0 4
39347: NOT
39348: IFFALSE 39352
// continue ;
39350: GO 39267
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39352: LD_VAR 0 4
39356: PUSH
39357: LD_INT 81
39359: PUSH
39360: LD_VAR 0 3
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PPUSH
39369: CALL_OW 69
39373: IN
39374: PUSH
39375: LD_EXP 119
39379: PUSH
39380: LD_VAR 0 1
39384: ARRAY
39385: PUSH
39386: LD_VAR 0 2
39390: ARRAY
39391: PUSH
39392: LD_INT 1
39394: ARRAY
39395: PPUSH
39396: LD_EXP 119
39400: PUSH
39401: LD_VAR 0 1
39405: ARRAY
39406: PUSH
39407: LD_VAR 0 2
39411: ARRAY
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: PPUSH
39417: CALL_OW 458
39421: AND
39422: IFFALSE 39516
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39424: LD_EXP 119
39428: PUSH
39429: LD_VAR 0 1
39433: ARRAY
39434: PUSH
39435: LD_VAR 0 2
39439: ARRAY
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: LD_EXP 119
39449: PUSH
39450: LD_VAR 0 1
39454: ARRAY
39455: PUSH
39456: LD_VAR 0 2
39460: ARRAY
39461: PUSH
39462: LD_INT 2
39464: ARRAY
39465: PPUSH
39466: LD_VAR 0 3
39470: PPUSH
39471: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39475: LD_ADDR_EXP 119
39479: PUSH
39480: LD_EXP 119
39484: PPUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_EXP 119
39494: PUSH
39495: LD_VAR 0 1
39499: ARRAY
39500: PPUSH
39501: LD_VAR 0 2
39505: PPUSH
39506: CALL_OW 3
39510: PPUSH
39511: CALL_OW 1
39515: ST_TO_ADDR
// end ; end ;
39516: GO 39267
39518: POP
39519: POP
// end ;
39520: GO 39185
39522: POP
39523: POP
// end ;
39524: PPOPN 4
39526: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39527: LD_INT 0
39529: PPUSH
39530: PPUSH
// result := false ;
39531: LD_ADDR_VAR 0 4
39535: PUSH
39536: LD_INT 0
39538: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39539: LD_VAR 0 1
39543: PPUSH
39544: CALL_OW 264
39548: PUSH
39549: LD_INT 81
39551: EQUAL
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39797
// index := GetElementIndex ( minersList , unit ) ;
39557: LD_ADDR_VAR 0 5
39561: PUSH
39562: LD_EXP 118
39566: PPUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL 45930 0 2
39576: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39577: LD_EXP 119
39581: PUSH
39582: LD_VAR 0 5
39586: ARRAY
39587: PUSH
39588: LD_EXP 120
39592: GREATEREQUAL
39593: IFFALSE 39597
// exit ;
39595: GO 39797
// ComMoveXY ( unit , x , y ) ;
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_VAR 0 2
39606: PPUSH
39607: LD_VAR 0 3
39611: PPUSH
39612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39616: LD_INT 35
39618: PPUSH
39619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39623: LD_VAR 0 1
39627: PPUSH
39628: LD_VAR 0 2
39632: PPUSH
39633: LD_VAR 0 3
39637: PPUSH
39638: CALL 77266 0 3
39642: NOT
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 314
39653: AND
39654: IFFALSE 39658
// exit ;
39656: GO 39797
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39658: LD_VAR 0 2
39662: PPUSH
39663: LD_VAR 0 3
39667: PPUSH
39668: CALL_OW 428
39672: PUSH
39673: LD_VAR 0 1
39677: EQUAL
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 314
39688: NOT
39689: AND
39690: IFFALSE 39616
// PlaySoundXY ( x , y , PlantMine ) ;
39692: LD_VAR 0 2
39696: PPUSH
39697: LD_VAR 0 3
39701: PPUSH
39702: LD_STRING PlantMine
39704: PPUSH
39705: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39709: LD_VAR 0 2
39713: PPUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 255
39728: PPUSH
39729: LD_INT 0
39731: PPUSH
39732: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39736: LD_ADDR_EXP 119
39740: PUSH
39741: LD_EXP 119
39745: PPUSH
39746: LD_VAR 0 5
39750: PUSH
39751: LD_EXP 119
39755: PUSH
39756: LD_VAR 0 5
39760: ARRAY
39761: PUSH
39762: LD_INT 1
39764: PLUS
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PPUSH
39770: LD_VAR 0 2
39774: PUSH
39775: LD_VAR 0 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PPUSH
39784: CALL 46145 0 3
39788: ST_TO_ADDR
// result := true ;
39789: LD_ADDR_VAR 0 4
39793: PUSH
39794: LD_INT 1
39796: ST_TO_ADDR
// end ;
39797: LD_VAR 0 4
39801: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39802: LD_INT 0
39804: PPUSH
39805: PPUSH
39806: PPUSH
// if not unit in minersList then
39807: LD_VAR 0 1
39811: PUSH
39812: LD_EXP 118
39816: IN
39817: NOT
39818: IFFALSE 39822
// exit ;
39820: GO 40214
// index := GetElementIndex ( minersList , unit ) ;
39822: LD_ADDR_VAR 0 6
39826: PUSH
39827: LD_EXP 118
39831: PPUSH
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL 45930 0 2
39841: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39842: LD_ADDR_VAR 0 5
39846: PUSH
39847: DOUBLE
39848: LD_EXP 119
39852: PUSH
39853: LD_VAR 0 6
39857: ARRAY
39858: INC
39859: ST_TO_ADDR
39860: LD_INT 1
39862: PUSH
39863: FOR_DOWNTO
39864: IFFALSE 40025
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39866: LD_EXP 119
39870: PUSH
39871: LD_VAR 0 6
39875: ARRAY
39876: PUSH
39877: LD_VAR 0 5
39881: ARRAY
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: PUSH
39887: LD_VAR 0 2
39891: EQUAL
39892: PUSH
39893: LD_EXP 119
39897: PUSH
39898: LD_VAR 0 6
39902: ARRAY
39903: PUSH
39904: LD_VAR 0 5
39908: ARRAY
39909: PUSH
39910: LD_INT 2
39912: ARRAY
39913: PUSH
39914: LD_VAR 0 3
39918: EQUAL
39919: AND
39920: IFFALSE 40023
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39922: LD_EXP 119
39926: PUSH
39927: LD_VAR 0 6
39931: ARRAY
39932: PUSH
39933: LD_VAR 0 5
39937: ARRAY
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PPUSH
39943: LD_EXP 119
39947: PUSH
39948: LD_VAR 0 6
39952: ARRAY
39953: PUSH
39954: LD_VAR 0 5
39958: ARRAY
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: PPUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 255
39973: PPUSH
39974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39978: LD_ADDR_EXP 119
39982: PUSH
39983: LD_EXP 119
39987: PPUSH
39988: LD_VAR 0 6
39992: PPUSH
39993: LD_EXP 119
39997: PUSH
39998: LD_VAR 0 6
40002: ARRAY
40003: PPUSH
40004: LD_VAR 0 5
40008: PPUSH
40009: CALL_OW 3
40013: PPUSH
40014: CALL_OW 1
40018: ST_TO_ADDR
// exit ;
40019: POP
40020: POP
40021: GO 40214
// end ; end ;
40023: GO 39863
40025: POP
40026: POP
// for i := minerMinesList [ index ] downto 1 do
40027: LD_ADDR_VAR 0 5
40031: PUSH
40032: DOUBLE
40033: LD_EXP 119
40037: PUSH
40038: LD_VAR 0 6
40042: ARRAY
40043: INC
40044: ST_TO_ADDR
40045: LD_INT 1
40047: PUSH
40048: FOR_DOWNTO
40049: IFFALSE 40212
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40051: LD_EXP 119
40055: PUSH
40056: LD_VAR 0 6
40060: ARRAY
40061: PUSH
40062: LD_VAR 0 5
40066: ARRAY
40067: PUSH
40068: LD_INT 1
40070: ARRAY
40071: PPUSH
40072: LD_EXP 119
40076: PUSH
40077: LD_VAR 0 6
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 5
40087: ARRAY
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: PPUSH
40093: LD_VAR 0 2
40097: PPUSH
40098: LD_VAR 0 3
40102: PPUSH
40103: CALL_OW 298
40107: PUSH
40108: LD_INT 6
40110: LESS
40111: IFFALSE 40210
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40113: LD_EXP 119
40117: PUSH
40118: LD_VAR 0 6
40122: ARRAY
40123: PUSH
40124: LD_VAR 0 5
40128: ARRAY
40129: PUSH
40130: LD_INT 1
40132: ARRAY
40133: PPUSH
40134: LD_EXP 119
40138: PUSH
40139: LD_VAR 0 6
40143: ARRAY
40144: PUSH
40145: LD_VAR 0 5
40149: ARRAY
40150: PUSH
40151: LD_INT 2
40153: ARRAY
40154: PPUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 255
40164: PPUSH
40165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40169: LD_ADDR_EXP 119
40173: PUSH
40174: LD_EXP 119
40178: PPUSH
40179: LD_VAR 0 6
40183: PPUSH
40184: LD_EXP 119
40188: PUSH
40189: LD_VAR 0 6
40193: ARRAY
40194: PPUSH
40195: LD_VAR 0 5
40199: PPUSH
40200: CALL_OW 3
40204: PPUSH
40205: CALL_OW 1
40209: ST_TO_ADDR
// end ; end ;
40210: GO 40048
40212: POP
40213: POP
// end ;
40214: LD_VAR 0 4
40218: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40219: LD_INT 0
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 264
40239: PUSH
40240: LD_INT 81
40242: EQUAL
40243: NOT
40244: PUSH
40245: LD_VAR 0 1
40249: PUSH
40250: LD_EXP 118
40254: IN
40255: NOT
40256: OR
40257: IFFALSE 40261
// exit ;
40259: GO 40583
// index := GetElementIndex ( minersList , unit ) ;
40261: LD_ADDR_VAR 0 6
40265: PUSH
40266: LD_EXP 118
40270: PPUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL 45930 0 2
40280: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40281: LD_ADDR_VAR 0 8
40285: PUSH
40286: LD_EXP 120
40290: PUSH
40291: LD_EXP 119
40295: PUSH
40296: LD_VAR 0 6
40300: ARRAY
40301: MINUS
40302: ST_TO_ADDR
// if not minesFreeAmount then
40303: LD_VAR 0 8
40307: NOT
40308: IFFALSE 40312
// exit ;
40310: GO 40583
// tmp := [ ] ;
40312: LD_ADDR_VAR 0 7
40316: PUSH
40317: EMPTY
40318: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40319: LD_ADDR_VAR 0 5
40323: PUSH
40324: DOUBLE
40325: LD_INT 1
40327: DEC
40328: ST_TO_ADDR
40329: LD_VAR 0 8
40333: PUSH
40334: FOR_TO
40335: IFFALSE 40530
// begin _d := rand ( 0 , 5 ) ;
40337: LD_ADDR_VAR 0 11
40341: PUSH
40342: LD_INT 0
40344: PPUSH
40345: LD_INT 5
40347: PPUSH
40348: CALL_OW 12
40352: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40353: LD_ADDR_VAR 0 12
40357: PUSH
40358: LD_INT 2
40360: PPUSH
40361: LD_INT 6
40363: PPUSH
40364: CALL_OW 12
40368: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40369: LD_ADDR_VAR 0 9
40373: PUSH
40374: LD_VAR 0 2
40378: PPUSH
40379: LD_VAR 0 11
40383: PPUSH
40384: LD_VAR 0 12
40388: PPUSH
40389: CALL_OW 272
40393: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40394: LD_ADDR_VAR 0 10
40398: PUSH
40399: LD_VAR 0 3
40403: PPUSH
40404: LD_VAR 0 11
40408: PPUSH
40409: LD_VAR 0 12
40413: PPUSH
40414: CALL_OW 273
40418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40419: LD_VAR 0 9
40423: PPUSH
40424: LD_VAR 0 10
40428: PPUSH
40429: CALL_OW 488
40433: PUSH
40434: LD_VAR 0 9
40438: PUSH
40439: LD_VAR 0 10
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_VAR 0 7
40452: IN
40453: NOT
40454: AND
40455: PUSH
40456: LD_VAR 0 9
40460: PPUSH
40461: LD_VAR 0 10
40465: PPUSH
40466: CALL_OW 458
40470: NOT
40471: AND
40472: IFFALSE 40514
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40474: LD_ADDR_VAR 0 7
40478: PUSH
40479: LD_VAR 0 7
40483: PPUSH
40484: LD_VAR 0 7
40488: PUSH
40489: LD_INT 1
40491: PLUS
40492: PPUSH
40493: LD_VAR 0 9
40497: PUSH
40498: LD_VAR 0 10
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PPUSH
40507: CALL_OW 1
40511: ST_TO_ADDR
40512: GO 40528
// i := i - 1 ;
40514: LD_ADDR_VAR 0 5
40518: PUSH
40519: LD_VAR 0 5
40523: PUSH
40524: LD_INT 1
40526: MINUS
40527: ST_TO_ADDR
// end ;
40528: GO 40334
40530: POP
40531: POP
// for i in tmp do
40532: LD_ADDR_VAR 0 5
40536: PUSH
40537: LD_VAR 0 7
40541: PUSH
40542: FOR_IN
40543: IFFALSE 40581
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40545: LD_VAR 0 1
40549: PPUSH
40550: LD_VAR 0 5
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PPUSH
40559: LD_VAR 0 5
40563: PUSH
40564: LD_INT 2
40566: ARRAY
40567: PPUSH
40568: CALL 39527 0 3
40572: NOT
40573: IFFALSE 40579
// exit ;
40575: POP
40576: POP
40577: GO 40583
40579: GO 40542
40581: POP
40582: POP
// end ;
40583: LD_VAR 0 4
40587: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
// if not GetClass ( unit ) = class_sniper then
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 257
40606: PUSH
40607: LD_INT 5
40609: EQUAL
40610: NOT
40611: IFFALSE 40615
// exit ;
40613: GO 41003
// dist := 8 ;
40615: LD_ADDR_VAR 0 5
40619: PUSH
40620: LD_INT 8
40622: ST_TO_ADDR
// viewRange := 12 ;
40623: LD_ADDR_VAR 0 7
40627: PUSH
40628: LD_INT 12
40630: ST_TO_ADDR
// side := GetSide ( unit ) ;
40631: LD_ADDR_VAR 0 6
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 255
40645: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40646: LD_INT 61
40648: PPUSH
40649: LD_VAR 0 6
40653: PPUSH
40654: CALL_OW 321
40658: PUSH
40659: LD_INT 2
40661: EQUAL
40662: IFFALSE 40672
// viewRange := 16 ;
40664: LD_ADDR_VAR 0 7
40668: PUSH
40669: LD_INT 16
40671: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40672: LD_VAR 0 1
40676: PPUSH
40677: LD_VAR 0 2
40681: PPUSH
40682: LD_VAR 0 3
40686: PPUSH
40687: CALL_OW 297
40691: PUSH
40692: LD_VAR 0 5
40696: GREATER
40697: IFFALSE 40776
// begin ComMoveXY ( unit , x , y ) ;
40699: LD_VAR 0 1
40703: PPUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_VAR 0 3
40713: PPUSH
40714: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40718: LD_INT 35
40720: PPUSH
40721: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_VAR 0 2
40734: PPUSH
40735: LD_VAR 0 3
40739: PPUSH
40740: CALL 77266 0 3
40744: NOT
40745: IFFALSE 40749
// exit ;
40747: GO 41003
// until GetDistUnitXY ( unit , x , y ) < dist ;
40749: LD_VAR 0 1
40753: PPUSH
40754: LD_VAR 0 2
40758: PPUSH
40759: LD_VAR 0 3
40763: PPUSH
40764: CALL_OW 297
40768: PUSH
40769: LD_VAR 0 5
40773: LESS
40774: IFFALSE 40718
// end ; ComTurnXY ( unit , x , y ) ;
40776: LD_VAR 0 1
40780: PPUSH
40781: LD_VAR 0 2
40785: PPUSH
40786: LD_VAR 0 3
40790: PPUSH
40791: CALL_OW 118
// wait ( 5 ) ;
40795: LD_INT 5
40797: PPUSH
40798: CALL_OW 67
// _d := GetDir ( unit ) ;
40802: LD_ADDR_VAR 0 10
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 254
40816: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40817: LD_ADDR_VAR 0 8
40821: PUSH
40822: LD_VAR 0 1
40826: PPUSH
40827: CALL_OW 250
40831: PPUSH
40832: LD_VAR 0 10
40836: PPUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: CALL_OW 272
40846: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40847: LD_ADDR_VAR 0 9
40851: PUSH
40852: LD_VAR 0 1
40856: PPUSH
40857: CALL_OW 251
40861: PPUSH
40862: LD_VAR 0 10
40866: PPUSH
40867: LD_VAR 0 5
40871: PPUSH
40872: CALL_OW 273
40876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40877: LD_VAR 0 8
40881: PPUSH
40882: LD_VAR 0 9
40886: PPUSH
40887: CALL_OW 488
40891: NOT
40892: IFFALSE 40896
// exit ;
40894: GO 41003
// ComAnimCustom ( unit , 1 ) ;
40896: LD_VAR 0 1
40900: PPUSH
40901: LD_INT 1
40903: PPUSH
40904: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40908: LD_VAR 0 8
40912: PPUSH
40913: LD_VAR 0 9
40917: PPUSH
40918: LD_VAR 0 6
40922: PPUSH
40923: LD_VAR 0 7
40927: PPUSH
40928: CALL_OW 330
// repeat wait ( 1 ) ;
40932: LD_INT 1
40934: PPUSH
40935: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40939: LD_VAR 0 1
40943: PPUSH
40944: CALL_OW 316
40948: PUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 314
40958: OR
40959: PUSH
40960: LD_VAR 0 1
40964: PPUSH
40965: CALL_OW 302
40969: NOT
40970: OR
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 301
40981: OR
40982: IFFALSE 40932
// RemoveSeeing ( _x , _y , side ) ;
40984: LD_VAR 0 8
40988: PPUSH
40989: LD_VAR 0 9
40993: PPUSH
40994: LD_VAR 0 6
40998: PPUSH
40999: CALL_OW 331
// end ; end_of_file
41003: LD_VAR 0 4
41007: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41008: LD_INT 0
41010: PPUSH
41011: PPUSH
// if exist_mode then
41012: LD_VAR 0 2
41016: IFFALSE 41041
// unit := CreateCharacter ( prefix & ident ) else
41018: LD_ADDR_VAR 0 5
41022: PUSH
41023: LD_VAR 0 3
41027: PUSH
41028: LD_VAR 0 1
41032: STR
41033: PPUSH
41034: CALL_OW 34
41038: ST_TO_ADDR
41039: GO 41056
// unit := NewCharacter ( ident ) ;
41041: LD_ADDR_VAR 0 5
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 25
41055: ST_TO_ADDR
// result := unit ;
41056: LD_ADDR_VAR 0 4
41060: PUSH
41061: LD_VAR 0 5
41065: ST_TO_ADDR
// end ;
41066: LD_VAR 0 4
41070: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41071: LD_INT 0
41073: PPUSH
41074: PPUSH
// if not side or not nation then
41075: LD_VAR 0 1
41079: NOT
41080: PUSH
41081: LD_VAR 0 2
41085: NOT
41086: OR
41087: IFFALSE 41091
// exit ;
41089: GO 41859
// case nation of nation_american :
41091: LD_VAR 0 2
41095: PUSH
41096: LD_INT 1
41098: DOUBLE
41099: EQUAL
41100: IFTRUE 41104
41102: GO 41318
41104: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41105: LD_ADDR_VAR 0 4
41109: PUSH
41110: LD_INT 35
41112: PUSH
41113: LD_INT 45
41115: PUSH
41116: LD_INT 46
41118: PUSH
41119: LD_INT 47
41121: PUSH
41122: LD_INT 82
41124: PUSH
41125: LD_INT 83
41127: PUSH
41128: LD_INT 84
41130: PUSH
41131: LD_INT 85
41133: PUSH
41134: LD_INT 86
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: LD_INT 6
41145: PUSH
41146: LD_INT 15
41148: PUSH
41149: LD_INT 16
41151: PUSH
41152: LD_INT 7
41154: PUSH
41155: LD_INT 12
41157: PUSH
41158: LD_INT 13
41160: PUSH
41161: LD_INT 10
41163: PUSH
41164: LD_INT 14
41166: PUSH
41167: LD_INT 20
41169: PUSH
41170: LD_INT 21
41172: PUSH
41173: LD_INT 22
41175: PUSH
41176: LD_INT 25
41178: PUSH
41179: LD_INT 32
41181: PUSH
41182: LD_INT 27
41184: PUSH
41185: LD_INT 36
41187: PUSH
41188: LD_INT 69
41190: PUSH
41191: LD_INT 39
41193: PUSH
41194: LD_INT 34
41196: PUSH
41197: LD_INT 40
41199: PUSH
41200: LD_INT 48
41202: PUSH
41203: LD_INT 49
41205: PUSH
41206: LD_INT 50
41208: PUSH
41209: LD_INT 51
41211: PUSH
41212: LD_INT 52
41214: PUSH
41215: LD_INT 53
41217: PUSH
41218: LD_INT 54
41220: PUSH
41221: LD_INT 55
41223: PUSH
41224: LD_INT 56
41226: PUSH
41227: LD_INT 57
41229: PUSH
41230: LD_INT 58
41232: PUSH
41233: LD_INT 59
41235: PUSH
41236: LD_INT 60
41238: PUSH
41239: LD_INT 61
41241: PUSH
41242: LD_INT 62
41244: PUSH
41245: LD_INT 80
41247: PUSH
41248: LD_INT 82
41250: PUSH
41251: LD_INT 83
41253: PUSH
41254: LD_INT 84
41256: PUSH
41257: LD_INT 85
41259: PUSH
41260: LD_INT 86
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
41316: GO 41783
41318: LD_INT 2
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41552
41326: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41327: LD_ADDR_VAR 0 4
41331: PUSH
41332: LD_INT 35
41334: PUSH
41335: LD_INT 45
41337: PUSH
41338: LD_INT 46
41340: PUSH
41341: LD_INT 47
41343: PUSH
41344: LD_INT 82
41346: PUSH
41347: LD_INT 83
41349: PUSH
41350: LD_INT 84
41352: PUSH
41353: LD_INT 85
41355: PUSH
41356: LD_INT 87
41358: PUSH
41359: LD_INT 70
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 11
41367: PUSH
41368: LD_INT 3
41370: PUSH
41371: LD_INT 4
41373: PUSH
41374: LD_INT 5
41376: PUSH
41377: LD_INT 6
41379: PUSH
41380: LD_INT 15
41382: PUSH
41383: LD_INT 18
41385: PUSH
41386: LD_INT 7
41388: PUSH
41389: LD_INT 17
41391: PUSH
41392: LD_INT 8
41394: PUSH
41395: LD_INT 20
41397: PUSH
41398: LD_INT 21
41400: PUSH
41401: LD_INT 22
41403: PUSH
41404: LD_INT 72
41406: PUSH
41407: LD_INT 26
41409: PUSH
41410: LD_INT 69
41412: PUSH
41413: LD_INT 39
41415: PUSH
41416: LD_INT 40
41418: PUSH
41419: LD_INT 41
41421: PUSH
41422: LD_INT 42
41424: PUSH
41425: LD_INT 43
41427: PUSH
41428: LD_INT 48
41430: PUSH
41431: LD_INT 49
41433: PUSH
41434: LD_INT 50
41436: PUSH
41437: LD_INT 51
41439: PUSH
41440: LD_INT 52
41442: PUSH
41443: LD_INT 53
41445: PUSH
41446: LD_INT 54
41448: PUSH
41449: LD_INT 55
41451: PUSH
41452: LD_INT 56
41454: PUSH
41455: LD_INT 60
41457: PUSH
41458: LD_INT 61
41460: PUSH
41461: LD_INT 62
41463: PUSH
41464: LD_INT 66
41466: PUSH
41467: LD_INT 67
41469: PUSH
41470: LD_INT 68
41472: PUSH
41473: LD_INT 81
41475: PUSH
41476: LD_INT 82
41478: PUSH
41479: LD_INT 83
41481: PUSH
41482: LD_INT 84
41484: PUSH
41485: LD_INT 85
41487: PUSH
41488: LD_INT 87
41490: PUSH
41491: LD_INT 88
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
41550: GO 41783
41552: LD_INT 3
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41782
41560: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41561: LD_ADDR_VAR 0 4
41565: PUSH
41566: LD_INT 46
41568: PUSH
41569: LD_INT 47
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 82
41580: PUSH
41581: LD_INT 83
41583: PUSH
41584: LD_INT 84
41586: PUSH
41587: LD_INT 85
41589: PUSH
41590: LD_INT 86
41592: PUSH
41593: LD_INT 11
41595: PUSH
41596: LD_INT 9
41598: PUSH
41599: LD_INT 20
41601: PUSH
41602: LD_INT 19
41604: PUSH
41605: LD_INT 21
41607: PUSH
41608: LD_INT 24
41610: PUSH
41611: LD_INT 22
41613: PUSH
41614: LD_INT 25
41616: PUSH
41617: LD_INT 28
41619: PUSH
41620: LD_INT 29
41622: PUSH
41623: LD_INT 30
41625: PUSH
41626: LD_INT 31
41628: PUSH
41629: LD_INT 37
41631: PUSH
41632: LD_INT 38
41634: PUSH
41635: LD_INT 32
41637: PUSH
41638: LD_INT 27
41640: PUSH
41641: LD_INT 33
41643: PUSH
41644: LD_INT 69
41646: PUSH
41647: LD_INT 39
41649: PUSH
41650: LD_INT 34
41652: PUSH
41653: LD_INT 40
41655: PUSH
41656: LD_INT 71
41658: PUSH
41659: LD_INT 23
41661: PUSH
41662: LD_INT 44
41664: PUSH
41665: LD_INT 48
41667: PUSH
41668: LD_INT 49
41670: PUSH
41671: LD_INT 50
41673: PUSH
41674: LD_INT 51
41676: PUSH
41677: LD_INT 52
41679: PUSH
41680: LD_INT 53
41682: PUSH
41683: LD_INT 54
41685: PUSH
41686: LD_INT 55
41688: PUSH
41689: LD_INT 56
41691: PUSH
41692: LD_INT 57
41694: PUSH
41695: LD_INT 58
41697: PUSH
41698: LD_INT 59
41700: PUSH
41701: LD_INT 63
41703: PUSH
41704: LD_INT 64
41706: PUSH
41707: LD_INT 65
41709: PUSH
41710: LD_INT 82
41712: PUSH
41713: LD_INT 83
41715: PUSH
41716: LD_INT 84
41718: PUSH
41719: LD_INT 85
41721: PUSH
41722: LD_INT 86
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
41780: GO 41783
41782: POP
// if state > - 1 and state < 3 then
41783: LD_VAR 0 3
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: GREATER
41792: PUSH
41793: LD_VAR 0 3
41797: PUSH
41798: LD_INT 3
41800: LESS
41801: AND
41802: IFFALSE 41859
// for i in result do
41804: LD_ADDR_VAR 0 5
41808: PUSH
41809: LD_VAR 0 4
41813: PUSH
41814: FOR_IN
41815: IFFALSE 41857
// if GetTech ( i , side ) <> state then
41817: LD_VAR 0 5
41821: PPUSH
41822: LD_VAR 0 1
41826: PPUSH
41827: CALL_OW 321
41831: PUSH
41832: LD_VAR 0 3
41836: NONEQUAL
41837: IFFALSE 41855
// result := result diff i ;
41839: LD_ADDR_VAR 0 4
41843: PUSH
41844: LD_VAR 0 4
41848: PUSH
41849: LD_VAR 0 5
41853: DIFF
41854: ST_TO_ADDR
41855: GO 41814
41857: POP
41858: POP
// end ;
41859: LD_VAR 0 4
41863: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41864: LD_INT 0
41866: PPUSH
41867: PPUSH
41868: PPUSH
// result := true ;
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 1
41876: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41877: LD_ADDR_VAR 0 5
41881: PUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: CALL_OW 480
41891: ST_TO_ADDR
// if not tmp then
41892: LD_VAR 0 5
41896: NOT
41897: IFFALSE 41901
// exit ;
41899: GO 41950
// for i in tmp do
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: LD_VAR 0 5
41910: PUSH
41911: FOR_IN
41912: IFFALSE 41948
// if GetTech ( i , side ) <> state_researched then
41914: LD_VAR 0 4
41918: PPUSH
41919: LD_VAR 0 1
41923: PPUSH
41924: CALL_OW 321
41928: PUSH
41929: LD_INT 2
41931: NONEQUAL
41932: IFFALSE 41946
// begin result := false ;
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 0
41941: ST_TO_ADDR
// exit ;
41942: POP
41943: POP
41944: GO 41950
// end ;
41946: GO 41911
41948: POP
41949: POP
// end ;
41950: LD_VAR 0 3
41954: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41955: LD_INT 0
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41970: LD_VAR 0 1
41974: NOT
41975: PUSH
41976: LD_VAR 0 1
41980: PPUSH
41981: CALL_OW 257
41985: PUSH
41986: LD_INT 9
41988: NONEQUAL
41989: OR
41990: IFFALSE 41994
// exit ;
41992: GO 42567
// side := GetSide ( unit ) ;
41994: LD_ADDR_VAR 0 9
41998: PUSH
41999: LD_VAR 0 1
42003: PPUSH
42004: CALL_OW 255
42008: ST_TO_ADDR
// tech_space := tech_spacanom ;
42009: LD_ADDR_VAR 0 12
42013: PUSH
42014: LD_INT 29
42016: ST_TO_ADDR
// tech_time := tech_taurad ;
42017: LD_ADDR_VAR 0 13
42021: PUSH
42022: LD_INT 28
42024: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42025: LD_ADDR_VAR 0 11
42029: PUSH
42030: LD_VAR 0 1
42034: PPUSH
42035: CALL_OW 310
42039: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42040: LD_VAR 0 11
42044: PPUSH
42045: CALL_OW 247
42049: PUSH
42050: LD_INT 2
42052: EQUAL
42053: IFFALSE 42057
// exit ;
42055: GO 42567
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42057: LD_ADDR_VAR 0 8
42061: PUSH
42062: LD_INT 81
42064: PUSH
42065: LD_VAR 0 9
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 21
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PPUSH
42095: CALL_OW 69
42099: ST_TO_ADDR
// if not tmp then
42100: LD_VAR 0 8
42104: NOT
42105: IFFALSE 42109
// exit ;
42107: GO 42567
// if in_unit then
42109: LD_VAR 0 11
42113: IFFALSE 42137
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42115: LD_ADDR_VAR 0 10
42119: PUSH
42120: LD_VAR 0 8
42124: PPUSH
42125: LD_VAR 0 11
42129: PPUSH
42130: CALL_OW 74
42134: ST_TO_ADDR
42135: GO 42157
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42137: LD_ADDR_VAR 0 10
42141: PUSH
42142: LD_VAR 0 8
42146: PPUSH
42147: LD_VAR 0 1
42151: PPUSH
42152: CALL_OW 74
42156: ST_TO_ADDR
// if not enemy then
42157: LD_VAR 0 10
42161: NOT
42162: IFFALSE 42166
// exit ;
42164: GO 42567
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42166: LD_VAR 0 11
42170: PUSH
42171: LD_VAR 0 11
42175: PPUSH
42176: LD_VAR 0 10
42180: PPUSH
42181: CALL_OW 296
42185: PUSH
42186: LD_INT 13
42188: GREATER
42189: AND
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: LD_VAR 0 10
42200: PPUSH
42201: CALL_OW 296
42205: PUSH
42206: LD_INT 12
42208: GREATER
42209: OR
42210: IFFALSE 42214
// exit ;
42212: GO 42567
// missile := [ 1 ] ;
42214: LD_ADDR_VAR 0 14
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42225: LD_VAR 0 9
42229: PPUSH
42230: LD_VAR 0 12
42234: PPUSH
42235: CALL_OW 325
42239: IFFALSE 42268
// missile := Replace ( missile , missile + 1 , 2 ) ;
42241: LD_ADDR_VAR 0 14
42245: PUSH
42246: LD_VAR 0 14
42250: PPUSH
42251: LD_VAR 0 14
42255: PUSH
42256: LD_INT 1
42258: PLUS
42259: PPUSH
42260: LD_INT 2
42262: PPUSH
42263: CALL_OW 1
42267: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42268: LD_VAR 0 9
42272: PPUSH
42273: LD_VAR 0 13
42277: PPUSH
42278: CALL_OW 325
42282: PUSH
42283: LD_VAR 0 10
42287: PPUSH
42288: CALL_OW 255
42292: PPUSH
42293: LD_VAR 0 13
42297: PPUSH
42298: CALL_OW 325
42302: NOT
42303: AND
42304: IFFALSE 42333
// missile := Replace ( missile , missile + 1 , 3 ) ;
42306: LD_ADDR_VAR 0 14
42310: PUSH
42311: LD_VAR 0 14
42315: PPUSH
42316: LD_VAR 0 14
42320: PUSH
42321: LD_INT 1
42323: PLUS
42324: PPUSH
42325: LD_INT 3
42327: PPUSH
42328: CALL_OW 1
42332: ST_TO_ADDR
// if missile < 2 then
42333: LD_VAR 0 14
42337: PUSH
42338: LD_INT 2
42340: LESS
42341: IFFALSE 42345
// exit ;
42343: GO 42567
// x := GetX ( enemy ) ;
42345: LD_ADDR_VAR 0 4
42349: PUSH
42350: LD_VAR 0 10
42354: PPUSH
42355: CALL_OW 250
42359: ST_TO_ADDR
// y := GetY ( enemy ) ;
42360: LD_ADDR_VAR 0 5
42364: PUSH
42365: LD_VAR 0 10
42369: PPUSH
42370: CALL_OW 251
42374: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42375: LD_ADDR_VAR 0 6
42379: PUSH
42380: LD_VAR 0 4
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PPUSH
42389: LD_INT 1
42391: PPUSH
42392: CALL_OW 12
42396: PLUS
42397: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42398: LD_ADDR_VAR 0 7
42402: PUSH
42403: LD_VAR 0 5
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PPUSH
42412: LD_INT 1
42414: PPUSH
42415: CALL_OW 12
42419: PLUS
42420: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42421: LD_VAR 0 6
42425: PPUSH
42426: LD_VAR 0 7
42430: PPUSH
42431: CALL_OW 488
42435: NOT
42436: IFFALSE 42458
// begin _x := x ;
42438: LD_ADDR_VAR 0 6
42442: PUSH
42443: LD_VAR 0 4
42447: ST_TO_ADDR
// _y := y ;
42448: LD_ADDR_VAR 0 7
42452: PUSH
42453: LD_VAR 0 5
42457: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42458: LD_ADDR_VAR 0 3
42462: PUSH
42463: LD_INT 1
42465: PPUSH
42466: LD_VAR 0 14
42470: PPUSH
42471: CALL_OW 12
42475: ST_TO_ADDR
// case i of 1 :
42476: LD_VAR 0 3
42480: PUSH
42481: LD_INT 1
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42506
42489: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_VAR 0 10
42499: PPUSH
42500: CALL_OW 115
42504: GO 42567
42506: LD_INT 2
42508: DOUBLE
42509: EQUAL
42510: IFTRUE 42514
42512: GO 42536
42514: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42515: LD_VAR 0 1
42519: PPUSH
42520: LD_VAR 0 6
42524: PPUSH
42525: LD_VAR 0 7
42529: PPUSH
42530: CALL_OW 153
42534: GO 42567
42536: LD_INT 3
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42566
42544: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 6
42554: PPUSH
42555: LD_VAR 0 7
42559: PPUSH
42560: CALL_OW 154
42564: GO 42567
42566: POP
// end ;
42567: LD_VAR 0 2
42571: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42572: LD_INT 0
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
42578: PPUSH
42579: PPUSH
// if not unit or not building then
42580: LD_VAR 0 1
42584: NOT
42585: PUSH
42586: LD_VAR 0 2
42590: NOT
42591: OR
42592: IFFALSE 42596
// exit ;
42594: GO 42754
// x := GetX ( building ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 2
42605: PPUSH
42606: CALL_OW 250
42610: ST_TO_ADDR
// y := GetY ( building ) ;
42611: LD_ADDR_VAR 0 6
42615: PUSH
42616: LD_VAR 0 2
42620: PPUSH
42621: CALL_OW 251
42625: ST_TO_ADDR
// for i = 0 to 5 do
42626: LD_ADDR_VAR 0 4
42630: PUSH
42631: DOUBLE
42632: LD_INT 0
42634: DEC
42635: ST_TO_ADDR
42636: LD_INT 5
42638: PUSH
42639: FOR_TO
42640: IFFALSE 42752
// begin _x := ShiftX ( x , i , 3 ) ;
42642: LD_ADDR_VAR 0 7
42646: PUSH
42647: LD_VAR 0 5
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: LD_INT 3
42659: PPUSH
42660: CALL_OW 272
42664: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42665: LD_ADDR_VAR 0 8
42669: PUSH
42670: LD_VAR 0 6
42674: PPUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: LD_INT 3
42682: PPUSH
42683: CALL_OW 273
42687: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42688: LD_VAR 0 7
42692: PPUSH
42693: LD_VAR 0 8
42697: PPUSH
42698: CALL_OW 488
42702: NOT
42703: IFFALSE 42707
// continue ;
42705: GO 42639
// if HexInfo ( _x , _y ) = 0 then
42707: LD_VAR 0 7
42711: PPUSH
42712: LD_VAR 0 8
42716: PPUSH
42717: CALL_OW 428
42721: PUSH
42722: LD_INT 0
42724: EQUAL
42725: IFFALSE 42750
// begin ComMoveXY ( unit , _x , _y ) ;
42727: LD_VAR 0 1
42731: PPUSH
42732: LD_VAR 0 7
42736: PPUSH
42737: LD_VAR 0 8
42741: PPUSH
42742: CALL_OW 111
// exit ;
42746: POP
42747: POP
42748: GO 42754
// end ; end ;
42750: GO 42639
42752: POP
42753: POP
// end ;
42754: LD_VAR 0 3
42758: RET
// export function ScanBase ( side , base_area ) ; begin
42759: LD_INT 0
42761: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_VAR 0 2
42771: PPUSH
42772: LD_INT 81
42774: PUSH
42775: LD_VAR 0 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 70
42788: ST_TO_ADDR
// end ;
42789: LD_VAR 0 3
42793: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42794: LD_INT 0
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
// result := false ;
42800: LD_ADDR_VAR 0 2
42804: PUSH
42805: LD_INT 0
42807: ST_TO_ADDR
// side := GetSide ( unit ) ;
42808: LD_ADDR_VAR 0 3
42812: PUSH
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 255
42822: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42823: LD_ADDR_VAR 0 4
42827: PUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: CALL_OW 248
42837: ST_TO_ADDR
// case nat of 1 :
42838: LD_VAR 0 4
42842: PUSH
42843: LD_INT 1
42845: DOUBLE
42846: EQUAL
42847: IFTRUE 42851
42849: GO 42862
42851: POP
// tech := tech_lassight ; 2 :
42852: LD_ADDR_VAR 0 5
42856: PUSH
42857: LD_INT 12
42859: ST_TO_ADDR
42860: GO 42901
42862: LD_INT 2
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 42881
42870: POP
// tech := tech_mortar ; 3 :
42871: LD_ADDR_VAR 0 5
42875: PUSH
42876: LD_INT 41
42878: ST_TO_ADDR
42879: GO 42901
42881: LD_INT 3
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42900
42889: POP
// tech := tech_bazooka ; end ;
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: LD_INT 44
42897: ST_TO_ADDR
42898: GO 42901
42900: POP
// if Researched ( side , tech ) then
42901: LD_VAR 0 3
42905: PPUSH
42906: LD_VAR 0 5
42910: PPUSH
42911: CALL_OW 325
42915: IFFALSE 42942
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42917: LD_ADDR_VAR 0 2
42921: PUSH
42922: LD_INT 5
42924: PUSH
42925: LD_INT 8
42927: PUSH
42928: LD_INT 9
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: PUSH
42936: LD_VAR 0 4
42940: ARRAY
42941: ST_TO_ADDR
// end ;
42942: LD_VAR 0 2
42946: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42947: LD_INT 0
42949: PPUSH
42950: PPUSH
42951: PPUSH
// if not mines then
42952: LD_VAR 0 2
42956: NOT
42957: IFFALSE 42961
// exit ;
42959: GO 43105
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42961: LD_ADDR_VAR 0 5
42965: PUSH
42966: LD_INT 81
42968: PUSH
42969: LD_VAR 0 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 3
42980: PUSH
42981: LD_INT 21
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PPUSH
42999: CALL_OW 69
43003: ST_TO_ADDR
// for i in mines do
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: LD_VAR 0 2
43013: PUSH
43014: FOR_IN
43015: IFFALSE 43103
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43017: LD_VAR 0 4
43021: PUSH
43022: LD_INT 1
43024: ARRAY
43025: PPUSH
43026: LD_VAR 0 4
43030: PUSH
43031: LD_INT 2
43033: ARRAY
43034: PPUSH
43035: CALL_OW 458
43039: NOT
43040: IFFALSE 43044
// continue ;
43042: GO 43014
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43044: LD_VAR 0 4
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PPUSH
43053: LD_VAR 0 4
43057: PUSH
43058: LD_INT 2
43060: ARRAY
43061: PPUSH
43062: CALL_OW 428
43066: PUSH
43067: LD_VAR 0 5
43071: IN
43072: IFFALSE 43101
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43074: LD_VAR 0 4
43078: PUSH
43079: LD_INT 1
43081: ARRAY
43082: PPUSH
43083: LD_VAR 0 4
43087: PUSH
43088: LD_INT 2
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 1
43096: PPUSH
43097: CALL_OW 456
// end ;
43101: GO 43014
43103: POP
43104: POP
// end ;
43105: LD_VAR 0 3
43109: RET
// export function Count ( array ) ; var i ; begin
43110: LD_INT 0
43112: PPUSH
43113: PPUSH
// result := 0 ;
43114: LD_ADDR_VAR 0 2
43118: PUSH
43119: LD_INT 0
43121: ST_TO_ADDR
// for i in array do
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_VAR 0 1
43131: PUSH
43132: FOR_IN
43133: IFFALSE 43157
// if i then
43135: LD_VAR 0 3
43139: IFFALSE 43155
// result := result + 1 ;
43141: LD_ADDR_VAR 0 2
43145: PUSH
43146: LD_VAR 0 2
43150: PUSH
43151: LD_INT 1
43153: PLUS
43154: ST_TO_ADDR
43155: GO 43132
43157: POP
43158: POP
// end ;
43159: LD_VAR 0 2
43163: RET
// export function IsEmpty ( building ) ; begin
43164: LD_INT 0
43166: PPUSH
// if not building then
43167: LD_VAR 0 1
43171: NOT
43172: IFFALSE 43176
// exit ;
43174: GO 43219
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43176: LD_ADDR_VAR 0 2
43180: PUSH
43181: LD_VAR 0 1
43185: PUSH
43186: LD_INT 22
43188: PUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: CALL_OW 255
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 58
43205: PUSH
43206: EMPTY
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PPUSH
43213: CALL_OW 69
43217: IN
43218: ST_TO_ADDR
// end ;
43219: LD_VAR 0 2
43223: RET
// export function IsNotFull ( building ) ; var places ; begin
43224: LD_INT 0
43226: PPUSH
43227: PPUSH
// if not building then
43228: LD_VAR 0 1
43232: NOT
43233: IFFALSE 43237
// exit ;
43235: GO 43408
// result := false ;
43237: LD_ADDR_VAR 0 2
43241: PUSH
43242: LD_INT 0
43244: ST_TO_ADDR
// places := 0 ;
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 0
43252: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43253: LD_VAR 0 1
43257: PPUSH
43258: CALL_OW 266
43262: PUSH
43263: LD_INT 0
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43325
43269: LD_INT 1
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43325
43275: LD_INT 6
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43325
43281: LD_INT 7
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43325
43287: LD_INT 8
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43325
43293: LD_INT 4
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43325
43299: LD_INT 5
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43325
43305: LD_INT 2
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43325
43311: LD_INT 3
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43325
43317: LD_INT 35
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43336
43325: POP
// places := 6 ; b_bunker , b_breastwork :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 6
43333: ST_TO_ADDR
43334: GO 43381
43336: LD_INT 32
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43350
43342: LD_INT 31
43344: DOUBLE
43345: EQUAL
43346: IFTRUE 43350
43348: GO 43361
43350: POP
// places := 1 ; b_control_tower :
43351: LD_ADDR_VAR 0 3
43355: PUSH
43356: LD_INT 1
43358: ST_TO_ADDR
43359: GO 43381
43361: LD_INT 36
43363: DOUBLE
43364: EQUAL
43365: IFTRUE 43369
43367: GO 43380
43369: POP
// places := 3 ; end ;
43370: LD_ADDR_VAR 0 3
43374: PUSH
43375: LD_INT 3
43377: ST_TO_ADDR
43378: GO 43381
43380: POP
// if places then
43381: LD_VAR 0 3
43385: IFFALSE 43408
// result := UnitsInside ( building ) < places ;
43387: LD_ADDR_VAR 0 2
43391: PUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL_OW 313
43401: PUSH
43402: LD_VAR 0 3
43406: LESS
43407: ST_TO_ADDR
// end ;
43408: LD_VAR 0 2
43412: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43413: LD_INT 0
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
// tmp := [ ] ;
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: EMPTY
43425: ST_TO_ADDR
// list := [ ] ;
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: EMPTY
43432: ST_TO_ADDR
// for i = 16 to 25 do
43433: LD_ADDR_VAR 0 4
43437: PUSH
43438: DOUBLE
43439: LD_INT 16
43441: DEC
43442: ST_TO_ADDR
43443: LD_INT 25
43445: PUSH
43446: FOR_TO
43447: IFFALSE 43520
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_VAR 0 3
43458: PUSH
43459: LD_INT 22
43461: PUSH
43462: LD_VAR 0 1
43466: PPUSH
43467: CALL_OW 255
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 91
43478: PUSH
43479: LD_VAR 0 1
43483: PUSH
43484: LD_INT 6
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 30
43494: PUSH
43495: LD_VAR 0 4
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: PUSH
43509: EMPTY
43510: LIST
43511: PPUSH
43512: CALL_OW 69
43516: ADD
43517: ST_TO_ADDR
43518: GO 43446
43520: POP
43521: POP
// for i = 1 to tmp do
43522: LD_ADDR_VAR 0 4
43526: PUSH
43527: DOUBLE
43528: LD_INT 1
43530: DEC
43531: ST_TO_ADDR
43532: LD_VAR 0 3
43536: PUSH
43537: FOR_TO
43538: IFFALSE 43626
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43540: LD_ADDR_VAR 0 5
43544: PUSH
43545: LD_VAR 0 5
43549: PUSH
43550: LD_VAR 0 3
43554: PUSH
43555: LD_VAR 0 4
43559: ARRAY
43560: PPUSH
43561: CALL_OW 266
43565: PUSH
43566: LD_VAR 0 3
43570: PUSH
43571: LD_VAR 0 4
43575: ARRAY
43576: PPUSH
43577: CALL_OW 250
43581: PUSH
43582: LD_VAR 0 3
43586: PUSH
43587: LD_VAR 0 4
43591: ARRAY
43592: PPUSH
43593: CALL_OW 251
43597: PUSH
43598: LD_VAR 0 3
43602: PUSH
43603: LD_VAR 0 4
43607: ARRAY
43608: PPUSH
43609: CALL_OW 254
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: ADD
43623: ST_TO_ADDR
43624: GO 43537
43626: POP
43627: POP
// result := list ;
43628: LD_ADDR_VAR 0 2
43632: PUSH
43633: LD_VAR 0 5
43637: ST_TO_ADDR
// end ;
43638: LD_VAR 0 2
43642: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43643: LD_INT 0
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
// if not factory then
43652: LD_VAR 0 1
43656: NOT
43657: IFFALSE 43661
// exit ;
43659: GO 44254
// if control = control_apeman then
43661: LD_VAR 0 4
43665: PUSH
43666: LD_INT 5
43668: EQUAL
43669: IFFALSE 43778
// begin tmp := UnitsInside ( factory ) ;
43671: LD_ADDR_VAR 0 8
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: CALL_OW 313
43685: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43686: LD_VAR 0 8
43690: PPUSH
43691: LD_INT 25
43693: PUSH
43694: LD_INT 12
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PPUSH
43701: CALL_OW 72
43705: NOT
43706: IFFALSE 43716
// control := control_manual ;
43708: LD_ADDR_VAR 0 4
43712: PUSH
43713: LD_INT 1
43715: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43716: LD_ADDR_VAR 0 8
43720: PUSH
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL 43413 0 1
43730: ST_TO_ADDR
// if tmp then
43731: LD_VAR 0 8
43735: IFFALSE 43778
// begin for i in tmp do
43737: LD_ADDR_VAR 0 7
43741: PUSH
43742: LD_VAR 0 8
43746: PUSH
43747: FOR_IN
43748: IFFALSE 43776
// if i [ 1 ] = b_ext_radio then
43750: LD_VAR 0 7
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: PUSH
43759: LD_INT 22
43761: EQUAL
43762: IFFALSE 43774
// begin control := control_remote ;
43764: LD_ADDR_VAR 0 4
43768: PUSH
43769: LD_INT 2
43771: ST_TO_ADDR
// break ;
43772: GO 43776
// end ;
43774: GO 43747
43776: POP
43777: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43778: LD_VAR 0 1
43782: PPUSH
43783: LD_VAR 0 2
43787: PPUSH
43788: LD_VAR 0 3
43792: PPUSH
43793: LD_VAR 0 4
43797: PPUSH
43798: LD_VAR 0 5
43802: PPUSH
43803: CALL_OW 448
43807: IFFALSE 43842
// begin result := [ chassis , engine , control , weapon ] ;
43809: LD_ADDR_VAR 0 6
43813: PUSH
43814: LD_VAR 0 2
43818: PUSH
43819: LD_VAR 0 3
43823: PUSH
43824: LD_VAR 0 4
43828: PUSH
43829: LD_VAR 0 5
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// exit ;
43840: GO 44254
// end ; _chassis := AvailableChassisList ( factory ) ;
43842: LD_ADDR_VAR 0 9
43846: PUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: CALL_OW 475
43856: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43857: LD_ADDR_VAR 0 11
43861: PUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 476
43871: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43872: LD_ADDR_VAR 0 12
43876: PUSH
43877: LD_VAR 0 1
43881: PPUSH
43882: CALL_OW 477
43886: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43887: LD_ADDR_VAR 0 10
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 478
43901: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43902: LD_VAR 0 9
43906: NOT
43907: PUSH
43908: LD_VAR 0 11
43912: NOT
43913: OR
43914: PUSH
43915: LD_VAR 0 12
43919: NOT
43920: OR
43921: PUSH
43922: LD_VAR 0 10
43926: NOT
43927: OR
43928: IFFALSE 43963
// begin result := [ chassis , engine , control , weapon ] ;
43930: LD_ADDR_VAR 0 6
43934: PUSH
43935: LD_VAR 0 2
43939: PUSH
43940: LD_VAR 0 3
43944: PUSH
43945: LD_VAR 0 4
43949: PUSH
43950: LD_VAR 0 5
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// exit ;
43961: GO 44254
// end ; if not chassis in _chassis then
43963: LD_VAR 0 2
43967: PUSH
43968: LD_VAR 0 9
43972: IN
43973: NOT
43974: IFFALSE 44000
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43976: LD_ADDR_VAR 0 2
43980: PUSH
43981: LD_VAR 0 9
43985: PUSH
43986: LD_INT 1
43988: PPUSH
43989: LD_VAR 0 9
43993: PPUSH
43994: CALL_OW 12
43998: ARRAY
43999: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44000: LD_VAR 0 2
44004: PPUSH
44005: LD_VAR 0 3
44009: PPUSH
44010: CALL 44259 0 2
44014: NOT
44015: IFFALSE 44074
// repeat engine := _engine [ 1 ] ;
44017: LD_ADDR_VAR 0 3
44021: PUSH
44022: LD_VAR 0 11
44026: PUSH
44027: LD_INT 1
44029: ARRAY
44030: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44031: LD_ADDR_VAR 0 11
44035: PUSH
44036: LD_VAR 0 11
44040: PPUSH
44041: LD_INT 1
44043: PPUSH
44044: CALL_OW 3
44048: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44049: LD_VAR 0 2
44053: PPUSH
44054: LD_VAR 0 3
44058: PPUSH
44059: CALL 44259 0 2
44063: PUSH
44064: LD_VAR 0 11
44068: PUSH
44069: EMPTY
44070: EQUAL
44071: OR
44072: IFFALSE 44017
// if not control in _control then
44074: LD_VAR 0 4
44078: PUSH
44079: LD_VAR 0 12
44083: IN
44084: NOT
44085: IFFALSE 44111
// control := _control [ rand ( 1 , _control ) ] ;
44087: LD_ADDR_VAR 0 4
44091: PUSH
44092: LD_VAR 0 12
44096: PUSH
44097: LD_INT 1
44099: PPUSH
44100: LD_VAR 0 12
44104: PPUSH
44105: CALL_OW 12
44109: ARRAY
44110: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44111: LD_VAR 0 2
44115: PPUSH
44116: LD_VAR 0 5
44120: PPUSH
44121: CALL 44479 0 2
44125: NOT
44126: IFFALSE 44185
// repeat weapon := _weapon [ 1 ] ;
44128: LD_ADDR_VAR 0 5
44132: PUSH
44133: LD_VAR 0 10
44137: PUSH
44138: LD_INT 1
44140: ARRAY
44141: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44142: LD_ADDR_VAR 0 10
44146: PUSH
44147: LD_VAR 0 10
44151: PPUSH
44152: LD_INT 1
44154: PPUSH
44155: CALL_OW 3
44159: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44160: LD_VAR 0 2
44164: PPUSH
44165: LD_VAR 0 5
44169: PPUSH
44170: CALL 44479 0 2
44174: PUSH
44175: LD_VAR 0 10
44179: PUSH
44180: EMPTY
44181: EQUAL
44182: OR
44183: IFFALSE 44128
// result := [ ] ;
44185: LD_ADDR_VAR 0 6
44189: PUSH
44190: EMPTY
44191: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44192: LD_VAR 0 1
44196: PPUSH
44197: LD_VAR 0 2
44201: PPUSH
44202: LD_VAR 0 3
44206: PPUSH
44207: LD_VAR 0 4
44211: PPUSH
44212: LD_VAR 0 5
44216: PPUSH
44217: CALL_OW 448
44221: IFFALSE 44254
// result := [ chassis , engine , control , weapon ] ;
44223: LD_ADDR_VAR 0 6
44227: PUSH
44228: LD_VAR 0 2
44232: PUSH
44233: LD_VAR 0 3
44237: PUSH
44238: LD_VAR 0 4
44242: PUSH
44243: LD_VAR 0 5
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// end ;
44254: LD_VAR 0 6
44258: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44259: LD_INT 0
44261: PPUSH
// if not chassis or not engine then
44262: LD_VAR 0 1
44266: NOT
44267: PUSH
44268: LD_VAR 0 2
44272: NOT
44273: OR
44274: IFFALSE 44278
// exit ;
44276: GO 44474
// case engine of engine_solar :
44278: LD_VAR 0 2
44282: PUSH
44283: LD_INT 2
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44329
44291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 11
44299: PUSH
44300: LD_INT 12
44302: PUSH
44303: LD_INT 13
44305: PUSH
44306: LD_INT 14
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
44327: GO 44458
44329: LD_INT 1
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44337
44335: GO 44399
44337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44338: LD_ADDR_VAR 0 3
44342: PUSH
44343: LD_INT 11
44345: PUSH
44346: LD_INT 12
44348: PUSH
44349: LD_INT 13
44351: PUSH
44352: LD_INT 14
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: LD_INT 4
44366: PUSH
44367: LD_INT 5
44369: PUSH
44370: LD_INT 21
44372: PUSH
44373: LD_INT 23
44375: PUSH
44376: LD_INT 22
44378: PUSH
44379: LD_INT 24
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
44397: GO 44458
44399: LD_INT 3
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44457
44407: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 14
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: LD_INT 4
44427: PUSH
44428: LD_INT 5
44430: PUSH
44431: LD_INT 21
44433: PUSH
44434: LD_INT 22
44436: PUSH
44437: LD_INT 23
44439: PUSH
44440: LD_INT 24
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
44455: GO 44458
44457: POP
// result := ( chassis in result ) ;
44458: LD_ADDR_VAR 0 3
44462: PUSH
44463: LD_VAR 0 1
44467: PUSH
44468: LD_VAR 0 3
44472: IN
44473: ST_TO_ADDR
// end ;
44474: LD_VAR 0 3
44478: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44479: LD_INT 0
44481: PPUSH
// if not chassis or not weapon then
44482: LD_VAR 0 1
44486: NOT
44487: PUSH
44488: LD_VAR 0 2
44492: NOT
44493: OR
44494: IFFALSE 44498
// exit ;
44496: GO 45558
// case weapon of us_machine_gun :
44498: LD_VAR 0 2
44502: PUSH
44503: LD_INT 2
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44511
44509: GO 44541
44511: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44512: LD_ADDR_VAR 0 3
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: LD_INT 4
44528: PUSH
44529: LD_INT 5
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
44539: GO 45542
44541: LD_INT 3
44543: DOUBLE
44544: EQUAL
44545: IFTRUE 44549
44547: GO 44579
44549: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44550: LD_ADDR_VAR 0 3
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: LD_INT 4
44566: PUSH
44567: LD_INT 5
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: ST_TO_ADDR
44577: GO 45542
44579: LD_INT 11
44581: DOUBLE
44582: EQUAL
44583: IFTRUE 44587
44585: GO 44617
44587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44588: LD_ADDR_VAR 0 3
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 4
44604: PUSH
44605: LD_INT 5
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
44615: GO 45542
44617: LD_INT 4
44619: DOUBLE
44620: EQUAL
44621: IFTRUE 44625
44623: GO 44651
44625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: LD_INT 4
44639: PUSH
44640: LD_INT 5
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
44649: GO 45542
44651: LD_INT 5
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44685
44659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: LD_INT 4
44673: PUSH
44674: LD_INT 5
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
44683: GO 45542
44685: LD_INT 9
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 44719
44693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44694: LD_ADDR_VAR 0 3
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: LD_INT 5
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
44717: GO 45542
44719: LD_INT 7
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44727
44725: GO 44753
44727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44728: LD_ADDR_VAR 0 3
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: LD_INT 4
44741: PUSH
44742: LD_INT 5
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
44751: GO 45542
44753: LD_INT 12
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44787
44761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 4
44775: PUSH
44776: LD_INT 5
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
44785: GO 45542
44787: LD_INT 13
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44795
44793: GO 44821
44795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: LD_INT 4
44809: PUSH
44810: LD_INT 5
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
44819: GO 45542
44821: LD_INT 14
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44829
44827: GO 44847
44829: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 4
44837: PUSH
44838: LD_INT 5
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: ST_TO_ADDR
44845: GO 45542
44847: LD_INT 6
44849: DOUBLE
44850: EQUAL
44851: IFTRUE 44855
44853: GO 44873
44855: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44856: LD_ADDR_VAR 0 3
44860: PUSH
44861: LD_INT 4
44863: PUSH
44864: LD_INT 5
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: ST_TO_ADDR
44871: GO 45542
44873: LD_INT 10
44875: DOUBLE
44876: EQUAL
44877: IFTRUE 44881
44879: GO 44899
44881: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: LD_INT 4
44889: PUSH
44890: LD_INT 5
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: ST_TO_ADDR
44897: GO 45542
44899: LD_INT 22
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44933
44907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_INT 11
44915: PUSH
44916: LD_INT 12
44918: PUSH
44919: LD_INT 13
44921: PUSH
44922: LD_INT 14
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
44931: GO 45542
44933: LD_INT 23
44935: DOUBLE
44936: EQUAL
44937: IFTRUE 44941
44939: GO 44967
44941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44942: LD_ADDR_VAR 0 3
44946: PUSH
44947: LD_INT 11
44949: PUSH
44950: LD_INT 12
44952: PUSH
44953: LD_INT 13
44955: PUSH
44956: LD_INT 14
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 45542
44967: LD_INT 24
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44975
44973: GO 45001
44975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 11
44983: PUSH
44984: LD_INT 12
44986: PUSH
44987: LD_INT 13
44989: PUSH
44990: LD_INT 14
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: ST_TO_ADDR
44999: GO 45542
45001: LD_INT 30
45003: DOUBLE
45004: EQUAL
45005: IFTRUE 45009
45007: GO 45035
45009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45010: LD_ADDR_VAR 0 3
45014: PUSH
45015: LD_INT 11
45017: PUSH
45018: LD_INT 12
45020: PUSH
45021: LD_INT 13
45023: PUSH
45024: LD_INT 14
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
45033: GO 45542
45035: LD_INT 25
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45043
45041: GO 45061
45043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45044: LD_ADDR_VAR 0 3
45048: PUSH
45049: LD_INT 13
45051: PUSH
45052: LD_INT 14
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: ST_TO_ADDR
45059: GO 45542
45061: LD_INT 27
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45087
45069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45070: LD_ADDR_VAR 0 3
45074: PUSH
45075: LD_INT 13
45077: PUSH
45078: LD_INT 14
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: ST_TO_ADDR
45085: GO 45542
45087: LD_INT 92
45089: DOUBLE
45090: EQUAL
45091: IFTRUE 45095
45093: GO 45121
45095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45096: LD_ADDR_VAR 0 3
45100: PUSH
45101: LD_INT 11
45103: PUSH
45104: LD_INT 12
45106: PUSH
45107: LD_INT 13
45109: PUSH
45110: LD_INT 14
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: ST_TO_ADDR
45119: GO 45542
45121: LD_INT 28
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45147
45129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 13
45137: PUSH
45138: LD_INT 14
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: ST_TO_ADDR
45145: GO 45542
45147: LD_INT 29
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45155
45153: GO 45173
45155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45156: LD_ADDR_VAR 0 3
45160: PUSH
45161: LD_INT 13
45163: PUSH
45164: LD_INT 14
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: ST_TO_ADDR
45171: GO 45542
45173: LD_INT 31
45175: DOUBLE
45176: EQUAL
45177: IFTRUE 45181
45179: GO 45199
45181: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45182: LD_ADDR_VAR 0 3
45186: PUSH
45187: LD_INT 13
45189: PUSH
45190: LD_INT 14
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: ST_TO_ADDR
45197: GO 45542
45199: LD_INT 26
45201: DOUBLE
45202: EQUAL
45203: IFTRUE 45207
45205: GO 45225
45207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45208: LD_ADDR_VAR 0 3
45212: PUSH
45213: LD_INT 13
45215: PUSH
45216: LD_INT 14
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: ST_TO_ADDR
45223: GO 45542
45225: LD_INT 42
45227: DOUBLE
45228: EQUAL
45229: IFTRUE 45233
45231: GO 45259
45233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45234: LD_ADDR_VAR 0 3
45238: PUSH
45239: LD_INT 21
45241: PUSH
45242: LD_INT 22
45244: PUSH
45245: LD_INT 23
45247: PUSH
45248: LD_INT 24
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
45257: GO 45542
45259: LD_INT 43
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45293
45267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 21
45275: PUSH
45276: LD_INT 22
45278: PUSH
45279: LD_INT 23
45281: PUSH
45282: LD_INT 24
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
45291: GO 45542
45293: LD_INT 44
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 45327
45301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45302: LD_ADDR_VAR 0 3
45306: PUSH
45307: LD_INT 21
45309: PUSH
45310: LD_INT 22
45312: PUSH
45313: LD_INT 23
45315: PUSH
45316: LD_INT 24
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
45325: GO 45542
45327: LD_INT 45
45329: DOUBLE
45330: EQUAL
45331: IFTRUE 45335
45333: GO 45361
45335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 21
45343: PUSH
45344: LD_INT 22
45346: PUSH
45347: LD_INT 23
45349: PUSH
45350: LD_INT 24
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: ST_TO_ADDR
45359: GO 45542
45361: LD_INT 49
45363: DOUBLE
45364: EQUAL
45365: IFTRUE 45369
45367: GO 45395
45369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45370: LD_ADDR_VAR 0 3
45374: PUSH
45375: LD_INT 21
45377: PUSH
45378: LD_INT 22
45380: PUSH
45381: LD_INT 23
45383: PUSH
45384: LD_INT 24
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: ST_TO_ADDR
45393: GO 45542
45395: LD_INT 51
45397: DOUBLE
45398: EQUAL
45399: IFTRUE 45403
45401: GO 45429
45403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_INT 21
45411: PUSH
45412: LD_INT 22
45414: PUSH
45415: LD_INT 23
45417: PUSH
45418: LD_INT 24
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
45427: GO 45542
45429: LD_INT 52
45431: DOUBLE
45432: EQUAL
45433: IFTRUE 45437
45435: GO 45463
45437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45438: LD_ADDR_VAR 0 3
45442: PUSH
45443: LD_INT 21
45445: PUSH
45446: LD_INT 22
45448: PUSH
45449: LD_INT 23
45451: PUSH
45452: LD_INT 24
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
45461: GO 45542
45463: LD_INT 53
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45471
45469: GO 45489
45471: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45472: LD_ADDR_VAR 0 3
45476: PUSH
45477: LD_INT 23
45479: PUSH
45480: LD_INT 24
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: ST_TO_ADDR
45487: GO 45542
45489: LD_INT 46
45491: DOUBLE
45492: EQUAL
45493: IFTRUE 45497
45495: GO 45515
45497: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45498: LD_ADDR_VAR 0 3
45502: PUSH
45503: LD_INT 23
45505: PUSH
45506: LD_INT 24
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: ST_TO_ADDR
45513: GO 45542
45515: LD_INT 47
45517: DOUBLE
45518: EQUAL
45519: IFTRUE 45523
45521: GO 45541
45523: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45524: LD_ADDR_VAR 0 3
45528: PUSH
45529: LD_INT 23
45531: PUSH
45532: LD_INT 24
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: ST_TO_ADDR
45539: GO 45542
45541: POP
// result := ( chassis in result ) ;
45542: LD_ADDR_VAR 0 3
45546: PUSH
45547: LD_VAR 0 1
45551: PUSH
45552: LD_VAR 0 3
45556: IN
45557: ST_TO_ADDR
// end ;
45558: LD_VAR 0 3
45562: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45563: LD_INT 0
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
// result := array ;
45572: LD_ADDR_VAR 0 5
45576: PUSH
45577: LD_VAR 0 1
45581: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45582: LD_VAR 0 1
45586: NOT
45587: PUSH
45588: LD_VAR 0 2
45592: NOT
45593: OR
45594: PUSH
45595: LD_VAR 0 3
45599: NOT
45600: OR
45601: PUSH
45602: LD_VAR 0 2
45606: PUSH
45607: LD_VAR 0 1
45611: GREATER
45612: OR
45613: PUSH
45614: LD_VAR 0 3
45618: PUSH
45619: LD_VAR 0 1
45623: GREATER
45624: OR
45625: IFFALSE 45629
// exit ;
45627: GO 45925
// if direction then
45629: LD_VAR 0 4
45633: IFFALSE 45697
// begin d := 1 ;
45635: LD_ADDR_VAR 0 9
45639: PUSH
45640: LD_INT 1
45642: ST_TO_ADDR
// if i_from > i_to then
45643: LD_VAR 0 2
45647: PUSH
45648: LD_VAR 0 3
45652: GREATER
45653: IFFALSE 45679
// length := ( array - i_from ) + i_to else
45655: LD_ADDR_VAR 0 11
45659: PUSH
45660: LD_VAR 0 1
45664: PUSH
45665: LD_VAR 0 2
45669: MINUS
45670: PUSH
45671: LD_VAR 0 3
45675: PLUS
45676: ST_TO_ADDR
45677: GO 45695
// length := i_to - i_from ;
45679: LD_ADDR_VAR 0 11
45683: PUSH
45684: LD_VAR 0 3
45688: PUSH
45689: LD_VAR 0 2
45693: MINUS
45694: ST_TO_ADDR
// end else
45695: GO 45758
// begin d := - 1 ;
45697: LD_ADDR_VAR 0 9
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: ST_TO_ADDR
// if i_from > i_to then
45706: LD_VAR 0 2
45710: PUSH
45711: LD_VAR 0 3
45715: GREATER
45716: IFFALSE 45736
// length := i_from - i_to else
45718: LD_ADDR_VAR 0 11
45722: PUSH
45723: LD_VAR 0 2
45727: PUSH
45728: LD_VAR 0 3
45732: MINUS
45733: ST_TO_ADDR
45734: GO 45758
// length := ( array - i_to ) + i_from ;
45736: LD_ADDR_VAR 0 11
45740: PUSH
45741: LD_VAR 0 1
45745: PUSH
45746: LD_VAR 0 3
45750: MINUS
45751: PUSH
45752: LD_VAR 0 2
45756: PLUS
45757: ST_TO_ADDR
// end ; if not length then
45758: LD_VAR 0 11
45762: NOT
45763: IFFALSE 45767
// exit ;
45765: GO 45925
// tmp := array ;
45767: LD_ADDR_VAR 0 10
45771: PUSH
45772: LD_VAR 0 1
45776: ST_TO_ADDR
// for i = 1 to length do
45777: LD_ADDR_VAR 0 6
45781: PUSH
45782: DOUBLE
45783: LD_INT 1
45785: DEC
45786: ST_TO_ADDR
45787: LD_VAR 0 11
45791: PUSH
45792: FOR_TO
45793: IFFALSE 45913
// begin for j = 1 to array do
45795: LD_ADDR_VAR 0 7
45799: PUSH
45800: DOUBLE
45801: LD_INT 1
45803: DEC
45804: ST_TO_ADDR
45805: LD_VAR 0 1
45809: PUSH
45810: FOR_TO
45811: IFFALSE 45899
// begin k := j + d ;
45813: LD_ADDR_VAR 0 8
45817: PUSH
45818: LD_VAR 0 7
45822: PUSH
45823: LD_VAR 0 9
45827: PLUS
45828: ST_TO_ADDR
// if k > array then
45829: LD_VAR 0 8
45833: PUSH
45834: LD_VAR 0 1
45838: GREATER
45839: IFFALSE 45849
// k := 1 ;
45841: LD_ADDR_VAR 0 8
45845: PUSH
45846: LD_INT 1
45848: ST_TO_ADDR
// if not k then
45849: LD_VAR 0 8
45853: NOT
45854: IFFALSE 45866
// k := array ;
45856: LD_ADDR_VAR 0 8
45860: PUSH
45861: LD_VAR 0 1
45865: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45866: LD_ADDR_VAR 0 10
45870: PUSH
45871: LD_VAR 0 10
45875: PPUSH
45876: LD_VAR 0 8
45880: PPUSH
45881: LD_VAR 0 1
45885: PUSH
45886: LD_VAR 0 7
45890: ARRAY
45891: PPUSH
45892: CALL_OW 1
45896: ST_TO_ADDR
// end ;
45897: GO 45810
45899: POP
45900: POP
// array := tmp ;
45901: LD_ADDR_VAR 0 1
45905: PUSH
45906: LD_VAR 0 10
45910: ST_TO_ADDR
// end ;
45911: GO 45792
45913: POP
45914: POP
// result := array ;
45915: LD_ADDR_VAR 0 5
45919: PUSH
45920: LD_VAR 0 1
45924: ST_TO_ADDR
// end ;
45925: LD_VAR 0 5
45929: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45930: LD_INT 0
45932: PPUSH
45933: PPUSH
// result := 0 ;
45934: LD_ADDR_VAR 0 3
45938: PUSH
45939: LD_INT 0
45941: ST_TO_ADDR
// if not array or not value in array then
45942: LD_VAR 0 1
45946: NOT
45947: PUSH
45948: LD_VAR 0 2
45952: PUSH
45953: LD_VAR 0 1
45957: IN
45958: NOT
45959: OR
45960: IFFALSE 45964
// exit ;
45962: GO 46018
// for i = 1 to array do
45964: LD_ADDR_VAR 0 4
45968: PUSH
45969: DOUBLE
45970: LD_INT 1
45972: DEC
45973: ST_TO_ADDR
45974: LD_VAR 0 1
45978: PUSH
45979: FOR_TO
45980: IFFALSE 46016
// if value = array [ i ] then
45982: LD_VAR 0 2
45986: PUSH
45987: LD_VAR 0 1
45991: PUSH
45992: LD_VAR 0 4
45996: ARRAY
45997: EQUAL
45998: IFFALSE 46014
// begin result := i ;
46000: LD_ADDR_VAR 0 3
46004: PUSH
46005: LD_VAR 0 4
46009: ST_TO_ADDR
// exit ;
46010: POP
46011: POP
46012: GO 46018
// end ;
46014: GO 45979
46016: POP
46017: POP
// end ;
46018: LD_VAR 0 3
46022: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46023: LD_INT 0
46025: PPUSH
// vc_chassis := chassis ;
46026: LD_ADDR_OWVAR 37
46030: PUSH
46031: LD_VAR 0 1
46035: ST_TO_ADDR
// vc_engine := engine ;
46036: LD_ADDR_OWVAR 39
46040: PUSH
46041: LD_VAR 0 2
46045: ST_TO_ADDR
// vc_control := control ;
46046: LD_ADDR_OWVAR 38
46050: PUSH
46051: LD_VAR 0 3
46055: ST_TO_ADDR
// vc_weapon := weapon ;
46056: LD_ADDR_OWVAR 40
46060: PUSH
46061: LD_VAR 0 4
46065: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46066: LD_ADDR_OWVAR 41
46070: PUSH
46071: LD_VAR 0 5
46075: ST_TO_ADDR
// end ;
46076: LD_VAR 0 6
46080: RET
// export function WantPlant ( unit ) ; var task ; begin
46081: LD_INT 0
46083: PPUSH
46084: PPUSH
// result := false ;
46085: LD_ADDR_VAR 0 2
46089: PUSH
46090: LD_INT 0
46092: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46093: LD_ADDR_VAR 0 3
46097: PUSH
46098: LD_VAR 0 1
46102: PPUSH
46103: CALL_OW 437
46107: ST_TO_ADDR
// if task then
46108: LD_VAR 0 3
46112: IFFALSE 46140
// if task [ 1 ] [ 1 ] = p then
46114: LD_VAR 0 3
46118: PUSH
46119: LD_INT 1
46121: ARRAY
46122: PUSH
46123: LD_INT 1
46125: ARRAY
46126: PUSH
46127: LD_STRING p
46129: EQUAL
46130: IFFALSE 46140
// result := true ;
46132: LD_ADDR_VAR 0 2
46136: PUSH
46137: LD_INT 1
46139: ST_TO_ADDR
// end ;
46140: LD_VAR 0 2
46144: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46145: LD_INT 0
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
// if pos < 1 then
46151: LD_VAR 0 2
46155: PUSH
46156: LD_INT 1
46158: LESS
46159: IFFALSE 46163
// exit ;
46161: GO 46466
// if pos = 1 then
46163: LD_VAR 0 2
46167: PUSH
46168: LD_INT 1
46170: EQUAL
46171: IFFALSE 46204
// result := Replace ( arr , pos [ 1 ] , value ) else
46173: LD_ADDR_VAR 0 4
46177: PUSH
46178: LD_VAR 0 1
46182: PPUSH
46183: LD_VAR 0 2
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: PPUSH
46192: LD_VAR 0 3
46196: PPUSH
46197: CALL_OW 1
46201: ST_TO_ADDR
46202: GO 46466
// begin tmp := arr ;
46204: LD_ADDR_VAR 0 6
46208: PUSH
46209: LD_VAR 0 1
46213: ST_TO_ADDR
// s_arr := [ tmp ] ;
46214: LD_ADDR_VAR 0 7
46218: PUSH
46219: LD_VAR 0 6
46223: PUSH
46224: EMPTY
46225: LIST
46226: ST_TO_ADDR
// for i = 1 to pos - 1 do
46227: LD_ADDR_VAR 0 5
46231: PUSH
46232: DOUBLE
46233: LD_INT 1
46235: DEC
46236: ST_TO_ADDR
46237: LD_VAR 0 2
46241: PUSH
46242: LD_INT 1
46244: MINUS
46245: PUSH
46246: FOR_TO
46247: IFFALSE 46292
// begin tmp := tmp [ pos [ i ] ] ;
46249: LD_ADDR_VAR 0 6
46253: PUSH
46254: LD_VAR 0 6
46258: PUSH
46259: LD_VAR 0 2
46263: PUSH
46264: LD_VAR 0 5
46268: ARRAY
46269: ARRAY
46270: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46271: LD_ADDR_VAR 0 7
46275: PUSH
46276: LD_VAR 0 7
46280: PUSH
46281: LD_VAR 0 6
46285: PUSH
46286: EMPTY
46287: LIST
46288: ADD
46289: ST_TO_ADDR
// end ;
46290: GO 46246
46292: POP
46293: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46294: LD_ADDR_VAR 0 6
46298: PUSH
46299: LD_VAR 0 6
46303: PPUSH
46304: LD_VAR 0 2
46308: PUSH
46309: LD_VAR 0 2
46313: ARRAY
46314: PPUSH
46315: LD_VAR 0 3
46319: PPUSH
46320: CALL_OW 1
46324: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46325: LD_ADDR_VAR 0 7
46329: PUSH
46330: LD_VAR 0 7
46334: PPUSH
46335: LD_VAR 0 7
46339: PPUSH
46340: LD_VAR 0 6
46344: PPUSH
46345: CALL_OW 1
46349: ST_TO_ADDR
// for i = s_arr downto 2 do
46350: LD_ADDR_VAR 0 5
46354: PUSH
46355: DOUBLE
46356: LD_VAR 0 7
46360: INC
46361: ST_TO_ADDR
46362: LD_INT 2
46364: PUSH
46365: FOR_DOWNTO
46366: IFFALSE 46450
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46368: LD_ADDR_VAR 0 6
46372: PUSH
46373: LD_VAR 0 7
46377: PUSH
46378: LD_VAR 0 5
46382: PUSH
46383: LD_INT 1
46385: MINUS
46386: ARRAY
46387: PPUSH
46388: LD_VAR 0 2
46392: PUSH
46393: LD_VAR 0 5
46397: PUSH
46398: LD_INT 1
46400: MINUS
46401: ARRAY
46402: PPUSH
46403: LD_VAR 0 7
46407: PUSH
46408: LD_VAR 0 5
46412: ARRAY
46413: PPUSH
46414: CALL_OW 1
46418: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46419: LD_ADDR_VAR 0 7
46423: PUSH
46424: LD_VAR 0 7
46428: PPUSH
46429: LD_VAR 0 5
46433: PUSH
46434: LD_INT 1
46436: MINUS
46437: PPUSH
46438: LD_VAR 0 6
46442: PPUSH
46443: CALL_OW 1
46447: ST_TO_ADDR
// end ;
46448: GO 46365
46450: POP
46451: POP
// result := s_arr [ 1 ] ;
46452: LD_ADDR_VAR 0 4
46456: PUSH
46457: LD_VAR 0 7
46461: PUSH
46462: LD_INT 1
46464: ARRAY
46465: ST_TO_ADDR
// end ; end ;
46466: LD_VAR 0 4
46470: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46471: LD_INT 0
46473: PPUSH
46474: PPUSH
// if not list then
46475: LD_VAR 0 1
46479: NOT
46480: IFFALSE 46484
// exit ;
46482: GO 46575
// i := list [ pos1 ] ;
46484: LD_ADDR_VAR 0 5
46488: PUSH
46489: LD_VAR 0 1
46493: PUSH
46494: LD_VAR 0 2
46498: ARRAY
46499: ST_TO_ADDR
// if not i then
46500: LD_VAR 0 5
46504: NOT
46505: IFFALSE 46509
// exit ;
46507: GO 46575
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46509: LD_ADDR_VAR 0 1
46513: PUSH
46514: LD_VAR 0 1
46518: PPUSH
46519: LD_VAR 0 2
46523: PPUSH
46524: LD_VAR 0 1
46528: PUSH
46529: LD_VAR 0 3
46533: ARRAY
46534: PPUSH
46535: CALL_OW 1
46539: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46540: LD_ADDR_VAR 0 1
46544: PUSH
46545: LD_VAR 0 1
46549: PPUSH
46550: LD_VAR 0 3
46554: PPUSH
46555: LD_VAR 0 5
46559: PPUSH
46560: CALL_OW 1
46564: ST_TO_ADDR
// result := list ;
46565: LD_ADDR_VAR 0 4
46569: PUSH
46570: LD_VAR 0 1
46574: ST_TO_ADDR
// end ;
46575: LD_VAR 0 4
46579: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46580: LD_INT 0
46582: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46583: LD_ADDR_VAR 0 5
46587: PUSH
46588: LD_VAR 0 1
46592: PPUSH
46593: CALL_OW 250
46597: PPUSH
46598: LD_VAR 0 1
46602: PPUSH
46603: CALL_OW 251
46607: PPUSH
46608: LD_VAR 0 2
46612: PPUSH
46613: LD_VAR 0 3
46617: PPUSH
46618: LD_VAR 0 4
46622: PPUSH
46623: CALL 46633 0 5
46627: ST_TO_ADDR
// end ;
46628: LD_VAR 0 5
46632: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46633: LD_INT 0
46635: PPUSH
46636: PPUSH
46637: PPUSH
46638: PPUSH
// if not list then
46639: LD_VAR 0 3
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 47036
// result := [ ] ;
46648: LD_ADDR_VAR 0 6
46652: PUSH
46653: EMPTY
46654: ST_TO_ADDR
// for i in list do
46655: LD_ADDR_VAR 0 7
46659: PUSH
46660: LD_VAR 0 3
46664: PUSH
46665: FOR_IN
46666: IFFALSE 46868
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_VAR 0 7
46677: PPUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: LD_VAR 0 2
46687: PPUSH
46688: CALL_OW 297
46692: ST_TO_ADDR
// if not result then
46693: LD_VAR 0 6
46697: NOT
46698: IFFALSE 46724
// result := [ [ i , tmp ] ] else
46700: LD_ADDR_VAR 0 6
46704: PUSH
46705: LD_VAR 0 7
46709: PUSH
46710: LD_VAR 0 9
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: ST_TO_ADDR
46722: GO 46866
// begin if result [ result ] [ 2 ] < tmp then
46724: LD_VAR 0 6
46728: PUSH
46729: LD_VAR 0 6
46733: ARRAY
46734: PUSH
46735: LD_INT 2
46737: ARRAY
46738: PUSH
46739: LD_VAR 0 9
46743: LESS
46744: IFFALSE 46786
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46746: LD_ADDR_VAR 0 6
46750: PUSH
46751: LD_VAR 0 6
46755: PPUSH
46756: LD_VAR 0 6
46760: PUSH
46761: LD_INT 1
46763: PLUS
46764: PPUSH
46765: LD_VAR 0 7
46769: PUSH
46770: LD_VAR 0 9
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PPUSH
46779: CALL_OW 2
46783: ST_TO_ADDR
46784: GO 46866
// for j = 1 to result do
46786: LD_ADDR_VAR 0 8
46790: PUSH
46791: DOUBLE
46792: LD_INT 1
46794: DEC
46795: ST_TO_ADDR
46796: LD_VAR 0 6
46800: PUSH
46801: FOR_TO
46802: IFFALSE 46864
// begin if tmp < result [ j ] [ 2 ] then
46804: LD_VAR 0 9
46808: PUSH
46809: LD_VAR 0 6
46813: PUSH
46814: LD_VAR 0 8
46818: ARRAY
46819: PUSH
46820: LD_INT 2
46822: ARRAY
46823: LESS
46824: IFFALSE 46862
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46826: LD_ADDR_VAR 0 6
46830: PUSH
46831: LD_VAR 0 6
46835: PPUSH
46836: LD_VAR 0 8
46840: PPUSH
46841: LD_VAR 0 7
46845: PUSH
46846: LD_VAR 0 9
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PPUSH
46855: CALL_OW 2
46859: ST_TO_ADDR
// break ;
46860: GO 46864
// end ; end ;
46862: GO 46801
46864: POP
46865: POP
// end ; end ;
46866: GO 46665
46868: POP
46869: POP
// if result and not asc then
46870: LD_VAR 0 6
46874: PUSH
46875: LD_VAR 0 4
46879: NOT
46880: AND
46881: IFFALSE 46956
// begin tmp := result ;
46883: LD_ADDR_VAR 0 9
46887: PUSH
46888: LD_VAR 0 6
46892: ST_TO_ADDR
// for i = tmp downto 1 do
46893: LD_ADDR_VAR 0 7
46897: PUSH
46898: DOUBLE
46899: LD_VAR 0 9
46903: INC
46904: ST_TO_ADDR
46905: LD_INT 1
46907: PUSH
46908: FOR_DOWNTO
46909: IFFALSE 46954
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46911: LD_ADDR_VAR 0 6
46915: PUSH
46916: LD_VAR 0 6
46920: PPUSH
46921: LD_VAR 0 9
46925: PUSH
46926: LD_VAR 0 7
46930: MINUS
46931: PUSH
46932: LD_INT 1
46934: PLUS
46935: PPUSH
46936: LD_VAR 0 9
46940: PUSH
46941: LD_VAR 0 7
46945: ARRAY
46946: PPUSH
46947: CALL_OW 1
46951: ST_TO_ADDR
46952: GO 46908
46954: POP
46955: POP
// end ; tmp := [ ] ;
46956: LD_ADDR_VAR 0 9
46960: PUSH
46961: EMPTY
46962: ST_TO_ADDR
// if mode then
46963: LD_VAR 0 5
46967: IFFALSE 47036
// begin for i = 1 to result do
46969: LD_ADDR_VAR 0 7
46973: PUSH
46974: DOUBLE
46975: LD_INT 1
46977: DEC
46978: ST_TO_ADDR
46979: LD_VAR 0 6
46983: PUSH
46984: FOR_TO
46985: IFFALSE 47024
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46987: LD_ADDR_VAR 0 9
46991: PUSH
46992: LD_VAR 0 9
46996: PPUSH
46997: LD_VAR 0 7
47001: PPUSH
47002: LD_VAR 0 6
47006: PUSH
47007: LD_VAR 0 7
47011: ARRAY
47012: PUSH
47013: LD_INT 1
47015: ARRAY
47016: PPUSH
47017: CALL_OW 1
47021: ST_TO_ADDR
47022: GO 46984
47024: POP
47025: POP
// result := tmp ;
47026: LD_ADDR_VAR 0 6
47030: PUSH
47031: LD_VAR 0 9
47035: ST_TO_ADDR
// end ; end ;
47036: LD_VAR 0 6
47040: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47041: LD_INT 0
47043: PPUSH
47044: PPUSH
47045: PPUSH
47046: PPUSH
47047: PPUSH
47048: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47049: LD_ADDR_VAR 0 5
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// if not x or not y then
47071: LD_VAR 0 2
47075: NOT
47076: PUSH
47077: LD_VAR 0 3
47081: NOT
47082: OR
47083: IFFALSE 47087
// exit ;
47085: GO 48737
// if not range then
47087: LD_VAR 0 4
47091: NOT
47092: IFFALSE 47102
// range := 10 ;
47094: LD_ADDR_VAR 0 4
47098: PUSH
47099: LD_INT 10
47101: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47102: LD_ADDR_VAR 0 8
47106: PUSH
47107: LD_INT 81
47109: PUSH
47110: LD_VAR 0 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 92
47121: PUSH
47122: LD_VAR 0 2
47126: PUSH
47127: LD_VAR 0 3
47131: PUSH
47132: LD_VAR 0 4
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 21
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: PPUSH
47165: CALL_OW 69
47169: ST_TO_ADDR
// if not tmp then
47170: LD_VAR 0 8
47174: NOT
47175: IFFALSE 47179
// exit ;
47177: GO 48737
// for i in tmp do
47179: LD_ADDR_VAR 0 6
47183: PUSH
47184: LD_VAR 0 8
47188: PUSH
47189: FOR_IN
47190: IFFALSE 48712
// begin points := [ 0 , 0 , 0 ] ;
47192: LD_ADDR_VAR 0 9
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// bpoints := 1 ;
47211: LD_ADDR_VAR 0 10
47215: PUSH
47216: LD_INT 1
47218: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47219: LD_VAR 0 6
47223: PPUSH
47224: CALL_OW 247
47228: PUSH
47229: LD_INT 1
47231: DOUBLE
47232: EQUAL
47233: IFTRUE 47237
47235: GO 47815
47237: POP
// begin if GetClass ( i ) = 1 then
47238: LD_VAR 0 6
47242: PPUSH
47243: CALL_OW 257
47247: PUSH
47248: LD_INT 1
47250: EQUAL
47251: IFFALSE 47272
// points := [ 10 , 5 , 3 ] ;
47253: LD_ADDR_VAR 0 9
47257: PUSH
47258: LD_INT 10
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47272: LD_VAR 0 6
47276: PPUSH
47277: CALL_OW 257
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: LD_INT 4
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: IN
47296: IFFALSE 47317
// points := [ 3 , 2 , 1 ] ;
47298: LD_ADDR_VAR 0 9
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47317: LD_VAR 0 6
47321: PPUSH
47322: CALL_OW 257
47326: PUSH
47327: LD_INT 5
47329: EQUAL
47330: IFFALSE 47351
// points := [ 130 , 5 , 2 ] ;
47332: LD_ADDR_VAR 0 9
47336: PUSH
47337: LD_INT 130
47339: PUSH
47340: LD_INT 5
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47351: LD_VAR 0 6
47355: PPUSH
47356: CALL_OW 257
47360: PUSH
47361: LD_INT 8
47363: EQUAL
47364: IFFALSE 47385
// points := [ 35 , 35 , 30 ] ;
47366: LD_ADDR_VAR 0 9
47370: PUSH
47371: LD_INT 35
47373: PUSH
47374: LD_INT 35
47376: PUSH
47377: LD_INT 30
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47385: LD_VAR 0 6
47389: PPUSH
47390: CALL_OW 257
47394: PUSH
47395: LD_INT 9
47397: EQUAL
47398: IFFALSE 47419
// points := [ 20 , 55 , 40 ] ;
47400: LD_ADDR_VAR 0 9
47404: PUSH
47405: LD_INT 20
47407: PUSH
47408: LD_INT 55
47410: PUSH
47411: LD_INT 40
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47419: LD_VAR 0 6
47423: PPUSH
47424: CALL_OW 257
47428: PUSH
47429: LD_INT 12
47431: PUSH
47432: LD_INT 16
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: IN
47439: IFFALSE 47460
// points := [ 5 , 3 , 2 ] ;
47441: LD_ADDR_VAR 0 9
47445: PUSH
47446: LD_INT 5
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47460: LD_VAR 0 6
47464: PPUSH
47465: CALL_OW 257
47469: PUSH
47470: LD_INT 17
47472: EQUAL
47473: IFFALSE 47494
// points := [ 100 , 50 , 75 ] ;
47475: LD_ADDR_VAR 0 9
47479: PUSH
47480: LD_INT 100
47482: PUSH
47483: LD_INT 50
47485: PUSH
47486: LD_INT 75
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47494: LD_VAR 0 6
47498: PPUSH
47499: CALL_OW 257
47503: PUSH
47504: LD_INT 15
47506: EQUAL
47507: IFFALSE 47528
// points := [ 10 , 5 , 3 ] ;
47509: LD_ADDR_VAR 0 9
47513: PUSH
47514: LD_INT 10
47516: PUSH
47517: LD_INT 5
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47528: LD_VAR 0 6
47532: PPUSH
47533: CALL_OW 257
47537: PUSH
47538: LD_INT 14
47540: EQUAL
47541: IFFALSE 47562
// points := [ 10 , 0 , 0 ] ;
47543: LD_ADDR_VAR 0 9
47547: PUSH
47548: LD_INT 10
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47562: LD_VAR 0 6
47566: PPUSH
47567: CALL_OW 257
47571: PUSH
47572: LD_INT 11
47574: EQUAL
47575: IFFALSE 47596
// points := [ 30 , 10 , 5 ] ;
47577: LD_ADDR_VAR 0 9
47581: PUSH
47582: LD_INT 30
47584: PUSH
47585: LD_INT 10
47587: PUSH
47588: LD_INT 5
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47596: LD_VAR 0 1
47600: PPUSH
47601: LD_INT 5
47603: PPUSH
47604: CALL_OW 321
47608: PUSH
47609: LD_INT 2
47611: EQUAL
47612: IFFALSE 47629
// bpoints := bpoints * 1.8 ;
47614: LD_ADDR_VAR 0 10
47618: PUSH
47619: LD_VAR 0 10
47623: PUSH
47624: LD_REAL  1.80000000000000E+0000
47627: MUL
47628: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47629: LD_VAR 0 6
47633: PPUSH
47634: CALL_OW 257
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 4
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: IN
47657: PUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: LD_INT 51
47665: PPUSH
47666: CALL_OW 321
47670: PUSH
47671: LD_INT 2
47673: EQUAL
47674: AND
47675: IFFALSE 47692
// bpoints := bpoints * 1.2 ;
47677: LD_ADDR_VAR 0 10
47681: PUSH
47682: LD_VAR 0 10
47686: PUSH
47687: LD_REAL  1.20000000000000E+0000
47690: MUL
47691: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47692: LD_VAR 0 6
47696: PPUSH
47697: CALL_OW 257
47701: PUSH
47702: LD_INT 5
47704: PUSH
47705: LD_INT 7
47707: PUSH
47708: LD_INT 9
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: IN
47716: PUSH
47717: LD_VAR 0 1
47721: PPUSH
47722: LD_INT 52
47724: PPUSH
47725: CALL_OW 321
47729: PUSH
47730: LD_INT 2
47732: EQUAL
47733: AND
47734: IFFALSE 47751
// bpoints := bpoints * 1.5 ;
47736: LD_ADDR_VAR 0 10
47740: PUSH
47741: LD_VAR 0 10
47745: PUSH
47746: LD_REAL  1.50000000000000E+0000
47749: MUL
47750: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47751: LD_VAR 0 1
47755: PPUSH
47756: LD_INT 66
47758: PPUSH
47759: CALL_OW 321
47763: PUSH
47764: LD_INT 2
47766: EQUAL
47767: IFFALSE 47784
// bpoints := bpoints * 1.1 ;
47769: LD_ADDR_VAR 0 10
47773: PUSH
47774: LD_VAR 0 10
47778: PUSH
47779: LD_REAL  1.10000000000000E+0000
47782: MUL
47783: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47784: LD_ADDR_VAR 0 10
47788: PUSH
47789: LD_VAR 0 10
47793: PUSH
47794: LD_VAR 0 6
47798: PPUSH
47799: LD_INT 1
47801: PPUSH
47802: CALL_OW 259
47806: PUSH
47807: LD_REAL  1.15000000000000E+0000
47810: MUL
47811: MUL
47812: ST_TO_ADDR
// end ; unit_vehicle :
47813: GO 48641
47815: LD_INT 2
47817: DOUBLE
47818: EQUAL
47819: IFTRUE 47823
47821: GO 48629
47823: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47824: LD_VAR 0 6
47828: PPUSH
47829: CALL_OW 264
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 42
47839: PUSH
47840: LD_INT 24
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: IN
47848: IFFALSE 47869
// points := [ 25 , 5 , 3 ] ;
47850: LD_ADDR_VAR 0 9
47854: PUSH
47855: LD_INT 25
47857: PUSH
47858: LD_INT 5
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47869: LD_VAR 0 6
47873: PPUSH
47874: CALL_OW 264
47878: PUSH
47879: LD_INT 4
47881: PUSH
47882: LD_INT 43
47884: PUSH
47885: LD_INT 25
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: IN
47893: IFFALSE 47914
// points := [ 40 , 15 , 5 ] ;
47895: LD_ADDR_VAR 0 9
47899: PUSH
47900: LD_INT 40
47902: PUSH
47903: LD_INT 15
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47914: LD_VAR 0 6
47918: PPUSH
47919: CALL_OW 264
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: LD_INT 23
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: IN
47934: IFFALSE 47955
// points := [ 7 , 25 , 8 ] ;
47936: LD_ADDR_VAR 0 9
47940: PUSH
47941: LD_INT 7
47943: PUSH
47944: LD_INT 25
47946: PUSH
47947: LD_INT 8
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47955: LD_VAR 0 6
47959: PPUSH
47960: CALL_OW 264
47964: PUSH
47965: LD_INT 5
47967: PUSH
47968: LD_INT 27
47970: PUSH
47971: LD_INT 44
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: IN
47979: IFFALSE 48000
// points := [ 14 , 50 , 16 ] ;
47981: LD_ADDR_VAR 0 9
47985: PUSH
47986: LD_INT 14
47988: PUSH
47989: LD_INT 50
47991: PUSH
47992: LD_INT 16
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48000: LD_VAR 0 6
48004: PPUSH
48005: CALL_OW 264
48009: PUSH
48010: LD_INT 6
48012: PUSH
48013: LD_INT 46
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: IN
48020: IFFALSE 48041
// points := [ 32 , 120 , 70 ] ;
48022: LD_ADDR_VAR 0 9
48026: PUSH
48027: LD_INT 32
48029: PUSH
48030: LD_INT 120
48032: PUSH
48033: LD_INT 70
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48041: LD_VAR 0 6
48045: PPUSH
48046: CALL_OW 264
48050: PUSH
48051: LD_INT 7
48053: PUSH
48054: LD_INT 28
48056: PUSH
48057: LD_INT 45
48059: PUSH
48060: LD_INT 92
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: IN
48069: IFFALSE 48090
// points := [ 35 , 20 , 45 ] ;
48071: LD_ADDR_VAR 0 9
48075: PUSH
48076: LD_INT 35
48078: PUSH
48079: LD_INT 20
48081: PUSH
48082: LD_INT 45
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48090: LD_VAR 0 6
48094: PPUSH
48095: CALL_OW 264
48099: PUSH
48100: LD_INT 47
48102: PUSH
48103: EMPTY
48104: LIST
48105: IN
48106: IFFALSE 48127
// points := [ 67 , 45 , 75 ] ;
48108: LD_ADDR_VAR 0 9
48112: PUSH
48113: LD_INT 67
48115: PUSH
48116: LD_INT 45
48118: PUSH
48119: LD_INT 75
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48127: LD_VAR 0 6
48131: PPUSH
48132: CALL_OW 264
48136: PUSH
48137: LD_INT 26
48139: PUSH
48140: EMPTY
48141: LIST
48142: IN
48143: IFFALSE 48164
// points := [ 120 , 30 , 80 ] ;
48145: LD_ADDR_VAR 0 9
48149: PUSH
48150: LD_INT 120
48152: PUSH
48153: LD_INT 30
48155: PUSH
48156: LD_INT 80
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48164: LD_VAR 0 6
48168: PPUSH
48169: CALL_OW 264
48173: PUSH
48174: LD_INT 22
48176: PUSH
48177: EMPTY
48178: LIST
48179: IN
48180: IFFALSE 48201
// points := [ 40 , 1 , 1 ] ;
48182: LD_ADDR_VAR 0 9
48186: PUSH
48187: LD_INT 40
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48201: LD_VAR 0 6
48205: PPUSH
48206: CALL_OW 264
48210: PUSH
48211: LD_INT 29
48213: PUSH
48214: EMPTY
48215: LIST
48216: IN
48217: IFFALSE 48238
// points := [ 70 , 200 , 400 ] ;
48219: LD_ADDR_VAR 0 9
48223: PUSH
48224: LD_INT 70
48226: PUSH
48227: LD_INT 200
48229: PUSH
48230: LD_INT 400
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: LIST
48237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48238: LD_VAR 0 6
48242: PPUSH
48243: CALL_OW 264
48247: PUSH
48248: LD_INT 14
48250: PUSH
48251: LD_INT 53
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: IN
48258: IFFALSE 48279
// points := [ 40 , 10 , 20 ] ;
48260: LD_ADDR_VAR 0 9
48264: PUSH
48265: LD_INT 40
48267: PUSH
48268: LD_INT 10
48270: PUSH
48271: LD_INT 20
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48279: LD_VAR 0 6
48283: PPUSH
48284: CALL_OW 264
48288: PUSH
48289: LD_INT 9
48291: PUSH
48292: EMPTY
48293: LIST
48294: IN
48295: IFFALSE 48316
// points := [ 5 , 70 , 20 ] ;
48297: LD_ADDR_VAR 0 9
48301: PUSH
48302: LD_INT 5
48304: PUSH
48305: LD_INT 70
48307: PUSH
48308: LD_INT 20
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48316: LD_VAR 0 6
48320: PPUSH
48321: CALL_OW 264
48325: PUSH
48326: LD_INT 10
48328: PUSH
48329: EMPTY
48330: LIST
48331: IN
48332: IFFALSE 48353
// points := [ 35 , 110 , 70 ] ;
48334: LD_ADDR_VAR 0 9
48338: PUSH
48339: LD_INT 35
48341: PUSH
48342: LD_INT 110
48344: PUSH
48345: LD_INT 70
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48353: LD_VAR 0 6
48357: PPUSH
48358: CALL_OW 265
48362: PUSH
48363: LD_INT 25
48365: EQUAL
48366: IFFALSE 48387
// points := [ 80 , 65 , 100 ] ;
48368: LD_ADDR_VAR 0 9
48372: PUSH
48373: LD_INT 80
48375: PUSH
48376: LD_INT 65
48378: PUSH
48379: LD_INT 100
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48387: LD_VAR 0 6
48391: PPUSH
48392: CALL_OW 263
48396: PUSH
48397: LD_INT 1
48399: EQUAL
48400: IFFALSE 48435
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48402: LD_ADDR_VAR 0 10
48406: PUSH
48407: LD_VAR 0 10
48411: PUSH
48412: LD_VAR 0 6
48416: PPUSH
48417: CALL_OW 311
48421: PPUSH
48422: LD_INT 3
48424: PPUSH
48425: CALL_OW 259
48429: PUSH
48430: LD_INT 4
48432: MUL
48433: MUL
48434: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48435: LD_VAR 0 6
48439: PPUSH
48440: CALL_OW 263
48444: PUSH
48445: LD_INT 2
48447: EQUAL
48448: IFFALSE 48499
// begin j := IsControledBy ( i ) ;
48450: LD_ADDR_VAR 0 7
48454: PUSH
48455: LD_VAR 0 6
48459: PPUSH
48460: CALL_OW 312
48464: ST_TO_ADDR
// if j then
48465: LD_VAR 0 7
48469: IFFALSE 48499
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48471: LD_ADDR_VAR 0 10
48475: PUSH
48476: LD_VAR 0 10
48480: PUSH
48481: LD_VAR 0 7
48485: PPUSH
48486: LD_INT 3
48488: PPUSH
48489: CALL_OW 259
48493: PUSH
48494: LD_INT 3
48496: MUL
48497: MUL
48498: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48499: LD_VAR 0 6
48503: PPUSH
48504: CALL_OW 264
48508: PUSH
48509: LD_INT 5
48511: PUSH
48512: LD_INT 6
48514: PUSH
48515: LD_INT 46
48517: PUSH
48518: LD_INT 44
48520: PUSH
48521: LD_INT 47
48523: PUSH
48524: LD_INT 45
48526: PUSH
48527: LD_INT 28
48529: PUSH
48530: LD_INT 7
48532: PUSH
48533: LD_INT 27
48535: PUSH
48536: LD_INT 29
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: IN
48551: PUSH
48552: LD_VAR 0 1
48556: PPUSH
48557: LD_INT 52
48559: PPUSH
48560: CALL_OW 321
48564: PUSH
48565: LD_INT 2
48567: EQUAL
48568: AND
48569: IFFALSE 48586
// bpoints := bpoints * 1.2 ;
48571: LD_ADDR_VAR 0 10
48575: PUSH
48576: LD_VAR 0 10
48580: PUSH
48581: LD_REAL  1.20000000000000E+0000
48584: MUL
48585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48586: LD_VAR 0 6
48590: PPUSH
48591: CALL_OW 264
48595: PUSH
48596: LD_INT 6
48598: PUSH
48599: LD_INT 46
48601: PUSH
48602: LD_INT 47
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: IN
48610: IFFALSE 48627
// bpoints := bpoints * 1.2 ;
48612: LD_ADDR_VAR 0 10
48616: PUSH
48617: LD_VAR 0 10
48621: PUSH
48622: LD_REAL  1.20000000000000E+0000
48625: MUL
48626: ST_TO_ADDR
// end ; unit_building :
48627: GO 48641
48629: LD_INT 3
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48637
48635: GO 48640
48637: POP
// ; end ;
48638: GO 48641
48640: POP
// for j = 1 to 3 do
48641: LD_ADDR_VAR 0 7
48645: PUSH
48646: DOUBLE
48647: LD_INT 1
48649: DEC
48650: ST_TO_ADDR
48651: LD_INT 3
48653: PUSH
48654: FOR_TO
48655: IFFALSE 48708
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48657: LD_ADDR_VAR 0 5
48661: PUSH
48662: LD_VAR 0 5
48666: PPUSH
48667: LD_VAR 0 7
48671: PPUSH
48672: LD_VAR 0 5
48676: PUSH
48677: LD_VAR 0 7
48681: ARRAY
48682: PUSH
48683: LD_VAR 0 9
48687: PUSH
48688: LD_VAR 0 7
48692: ARRAY
48693: PUSH
48694: LD_VAR 0 10
48698: MUL
48699: PLUS
48700: PPUSH
48701: CALL_OW 1
48705: ST_TO_ADDR
48706: GO 48654
48708: POP
48709: POP
// end ;
48710: GO 47189
48712: POP
48713: POP
// result := Replace ( result , 4 , tmp ) ;
48714: LD_ADDR_VAR 0 5
48718: PUSH
48719: LD_VAR 0 5
48723: PPUSH
48724: LD_INT 4
48726: PPUSH
48727: LD_VAR 0 8
48731: PPUSH
48732: CALL_OW 1
48736: ST_TO_ADDR
// end ;
48737: LD_VAR 0 5
48741: RET
// export function DangerAtRange ( unit , range ) ; begin
48742: LD_INT 0
48744: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48745: LD_ADDR_VAR 0 3
48749: PUSH
48750: LD_VAR 0 1
48754: PPUSH
48755: CALL_OW 255
48759: PPUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 250
48769: PPUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: CALL_OW 251
48779: PPUSH
48780: LD_VAR 0 2
48784: PPUSH
48785: CALL 47041 0 4
48789: ST_TO_ADDR
// end ;
48790: LD_VAR 0 3
48794: RET
// export function DangerInArea ( side , area ) ; begin
48795: LD_INT 0
48797: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48798: LD_ADDR_VAR 0 3
48802: PUSH
48803: LD_VAR 0 2
48807: PPUSH
48808: LD_INT 81
48810: PUSH
48811: LD_VAR 0 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PPUSH
48820: CALL_OW 70
48824: ST_TO_ADDR
// end ;
48825: LD_VAR 0 3
48829: RET
// export function IsExtension ( b ) ; begin
48830: LD_INT 0
48832: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48833: LD_ADDR_VAR 0 2
48837: PUSH
48838: LD_VAR 0 1
48842: PUSH
48843: LD_INT 23
48845: PUSH
48846: LD_INT 20
48848: PUSH
48849: LD_INT 22
48851: PUSH
48852: LD_INT 17
48854: PUSH
48855: LD_INT 24
48857: PUSH
48858: LD_INT 21
48860: PUSH
48861: LD_INT 19
48863: PUSH
48864: LD_INT 16
48866: PUSH
48867: LD_INT 25
48869: PUSH
48870: LD_INT 18
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: IN
48885: ST_TO_ADDR
// end ;
48886: LD_VAR 0 2
48890: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48891: LD_INT 0
48893: PPUSH
48894: PPUSH
48895: PPUSH
// result := [ ] ;
48896: LD_ADDR_VAR 0 4
48900: PUSH
48901: EMPTY
48902: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48903: LD_ADDR_VAR 0 5
48907: PUSH
48908: LD_VAR 0 2
48912: PPUSH
48913: LD_INT 21
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PPUSH
48923: CALL_OW 70
48927: ST_TO_ADDR
// if not tmp then
48928: LD_VAR 0 5
48932: NOT
48933: IFFALSE 48937
// exit ;
48935: GO 49001
// if checkLink then
48937: LD_VAR 0 3
48941: IFFALSE 48991
// begin for i in tmp do
48943: LD_ADDR_VAR 0 6
48947: PUSH
48948: LD_VAR 0 5
48952: PUSH
48953: FOR_IN
48954: IFFALSE 48989
// if GetBase ( i ) <> base then
48956: LD_VAR 0 6
48960: PPUSH
48961: CALL_OW 274
48965: PUSH
48966: LD_VAR 0 1
48970: NONEQUAL
48971: IFFALSE 48987
// ComLinkToBase ( base , i ) ;
48973: LD_VAR 0 1
48977: PPUSH
48978: LD_VAR 0 6
48982: PPUSH
48983: CALL_OW 169
48987: GO 48953
48989: POP
48990: POP
// end ; result := tmp ;
48991: LD_ADDR_VAR 0 4
48995: PUSH
48996: LD_VAR 0 5
49000: ST_TO_ADDR
// end ;
49001: LD_VAR 0 4
49005: RET
// export function ComComplete ( units , b ) ; var i ; begin
49006: LD_INT 0
49008: PPUSH
49009: PPUSH
// if not units then
49010: LD_VAR 0 1
49014: NOT
49015: IFFALSE 49019
// exit ;
49017: GO 49109
// for i in units do
49019: LD_ADDR_VAR 0 4
49023: PUSH
49024: LD_VAR 0 1
49028: PUSH
49029: FOR_IN
49030: IFFALSE 49107
// if BuildingStatus ( b ) = bs_build then
49032: LD_VAR 0 2
49036: PPUSH
49037: CALL_OW 461
49041: PUSH
49042: LD_INT 1
49044: EQUAL
49045: IFFALSE 49105
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49047: LD_VAR 0 4
49051: PPUSH
49052: LD_STRING h
49054: PUSH
49055: LD_VAR 0 2
49059: PPUSH
49060: CALL_OW 250
49064: PUSH
49065: LD_VAR 0 2
49069: PPUSH
49070: CALL_OW 251
49074: PUSH
49075: LD_VAR 0 2
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: PPUSH
49101: CALL_OW 446
49105: GO 49029
49107: POP
49108: POP
// end ;
49109: LD_VAR 0 3
49113: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49114: LD_INT 0
49116: PPUSH
49117: PPUSH
49118: PPUSH
49119: PPUSH
49120: PPUSH
49121: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49122: LD_VAR 0 1
49126: NOT
49127: PUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: CALL_OW 263
49137: PUSH
49138: LD_INT 2
49140: NONEQUAL
49141: OR
49142: IFFALSE 49146
// exit ;
49144: GO 49462
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49146: LD_ADDR_VAR 0 6
49150: PUSH
49151: LD_INT 22
49153: PUSH
49154: LD_VAR 0 1
49158: PPUSH
49159: CALL_OW 255
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 30
49173: PUSH
49174: LD_INT 36
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 34
49183: PUSH
49184: LD_INT 31
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PPUSH
49200: CALL_OW 69
49204: ST_TO_ADDR
// if not tmp then
49205: LD_VAR 0 6
49209: NOT
49210: IFFALSE 49214
// exit ;
49212: GO 49462
// result := [ ] ;
49214: LD_ADDR_VAR 0 2
49218: PUSH
49219: EMPTY
49220: ST_TO_ADDR
// for i in tmp do
49221: LD_ADDR_VAR 0 3
49225: PUSH
49226: LD_VAR 0 6
49230: PUSH
49231: FOR_IN
49232: IFFALSE 49303
// begin t := UnitsInside ( i ) ;
49234: LD_ADDR_VAR 0 4
49238: PUSH
49239: LD_VAR 0 3
49243: PPUSH
49244: CALL_OW 313
49248: ST_TO_ADDR
// if t then
49249: LD_VAR 0 4
49253: IFFALSE 49301
// for j in t do
49255: LD_ADDR_VAR 0 7
49259: PUSH
49260: LD_VAR 0 4
49264: PUSH
49265: FOR_IN
49266: IFFALSE 49299
// result := Replace ( result , result + 1 , j ) ;
49268: LD_ADDR_VAR 0 2
49272: PUSH
49273: LD_VAR 0 2
49277: PPUSH
49278: LD_VAR 0 2
49282: PUSH
49283: LD_INT 1
49285: PLUS
49286: PPUSH
49287: LD_VAR 0 7
49291: PPUSH
49292: CALL_OW 1
49296: ST_TO_ADDR
49297: GO 49265
49299: POP
49300: POP
// end ;
49301: GO 49231
49303: POP
49304: POP
// if not result then
49305: LD_VAR 0 2
49309: NOT
49310: IFFALSE 49314
// exit ;
49312: GO 49462
// mech := result [ 1 ] ;
49314: LD_ADDR_VAR 0 5
49318: PUSH
49319: LD_VAR 0 2
49323: PUSH
49324: LD_INT 1
49326: ARRAY
49327: ST_TO_ADDR
// if result > 1 then
49328: LD_VAR 0 2
49332: PUSH
49333: LD_INT 1
49335: GREATER
49336: IFFALSE 49448
// begin for i = 2 to result do
49338: LD_ADDR_VAR 0 3
49342: PUSH
49343: DOUBLE
49344: LD_INT 2
49346: DEC
49347: ST_TO_ADDR
49348: LD_VAR 0 2
49352: PUSH
49353: FOR_TO
49354: IFFALSE 49446
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49356: LD_ADDR_VAR 0 4
49360: PUSH
49361: LD_VAR 0 2
49365: PUSH
49366: LD_VAR 0 3
49370: ARRAY
49371: PPUSH
49372: LD_INT 3
49374: PPUSH
49375: CALL_OW 259
49379: PUSH
49380: LD_VAR 0 2
49384: PUSH
49385: LD_VAR 0 3
49389: ARRAY
49390: PPUSH
49391: CALL_OW 432
49395: MINUS
49396: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49397: LD_VAR 0 4
49401: PUSH
49402: LD_VAR 0 5
49406: PPUSH
49407: LD_INT 3
49409: PPUSH
49410: CALL_OW 259
49414: PUSH
49415: LD_VAR 0 5
49419: PPUSH
49420: CALL_OW 432
49424: MINUS
49425: GREATEREQUAL
49426: IFFALSE 49444
// mech := result [ i ] ;
49428: LD_ADDR_VAR 0 5
49432: PUSH
49433: LD_VAR 0 2
49437: PUSH
49438: LD_VAR 0 3
49442: ARRAY
49443: ST_TO_ADDR
// end ;
49444: GO 49353
49446: POP
49447: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49448: LD_VAR 0 1
49452: PPUSH
49453: LD_VAR 0 5
49457: PPUSH
49458: CALL_OW 135
// end ;
49462: LD_VAR 0 2
49466: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49467: LD_INT 0
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
49474: PPUSH
49475: PPUSH
49476: PPUSH
49477: PPUSH
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
// result := [ ] ;
49482: LD_ADDR_VAR 0 7
49486: PUSH
49487: EMPTY
49488: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 266
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: IN
49509: NOT
49510: IFFALSE 49514
// exit ;
49512: GO 51148
// if name then
49514: LD_VAR 0 3
49518: IFFALSE 49534
// SetBName ( base_dep , name ) ;
49520: LD_VAR 0 1
49524: PPUSH
49525: LD_VAR 0 3
49529: PPUSH
49530: CALL_OW 500
// base := GetBase ( base_dep ) ;
49534: LD_ADDR_VAR 0 15
49538: PUSH
49539: LD_VAR 0 1
49543: PPUSH
49544: CALL_OW 274
49548: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49549: LD_ADDR_VAR 0 16
49553: PUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: CALL_OW 255
49563: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49564: LD_ADDR_VAR 0 17
49568: PUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 248
49578: ST_TO_ADDR
// if sources then
49579: LD_VAR 0 5
49583: IFFALSE 49630
// for i = 1 to 3 do
49585: LD_ADDR_VAR 0 8
49589: PUSH
49590: DOUBLE
49591: LD_INT 1
49593: DEC
49594: ST_TO_ADDR
49595: LD_INT 3
49597: PUSH
49598: FOR_TO
49599: IFFALSE 49628
// AddResourceType ( base , i , sources [ i ] ) ;
49601: LD_VAR 0 15
49605: PPUSH
49606: LD_VAR 0 8
49610: PPUSH
49611: LD_VAR 0 5
49615: PUSH
49616: LD_VAR 0 8
49620: ARRAY
49621: PPUSH
49622: CALL_OW 276
49626: GO 49598
49628: POP
49629: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49630: LD_ADDR_VAR 0 18
49634: PUSH
49635: LD_VAR 0 15
49639: PPUSH
49640: LD_VAR 0 2
49644: PPUSH
49645: LD_INT 1
49647: PPUSH
49648: CALL 48891 0 3
49652: ST_TO_ADDR
// InitHc ;
49653: CALL_OW 19
// InitUc ;
49657: CALL_OW 18
// uc_side := side ;
49661: LD_ADDR_OWVAR 20
49665: PUSH
49666: LD_VAR 0 16
49670: ST_TO_ADDR
// uc_nation := nation ;
49671: LD_ADDR_OWVAR 21
49675: PUSH
49676: LD_VAR 0 17
49680: ST_TO_ADDR
// if buildings then
49681: LD_VAR 0 18
49685: IFFALSE 51007
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49687: LD_ADDR_VAR 0 19
49691: PUSH
49692: LD_VAR 0 18
49696: PPUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 30
49702: PUSH
49703: LD_INT 29
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 30
49712: PUSH
49713: LD_INT 30
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: PPUSH
49725: CALL_OW 72
49729: ST_TO_ADDR
// if tmp then
49730: LD_VAR 0 19
49734: IFFALSE 49782
// for i in tmp do
49736: LD_ADDR_VAR 0 8
49740: PUSH
49741: LD_VAR 0 19
49745: PUSH
49746: FOR_IN
49747: IFFALSE 49780
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49749: LD_VAR 0 8
49753: PPUSH
49754: CALL_OW 250
49758: PPUSH
49759: LD_VAR 0 8
49763: PPUSH
49764: CALL_OW 251
49768: PPUSH
49769: LD_VAR 0 16
49773: PPUSH
49774: CALL_OW 441
49778: GO 49746
49780: POP
49781: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49782: LD_VAR 0 18
49786: PPUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 30
49792: PUSH
49793: LD_INT 32
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 30
49802: PUSH
49803: LD_INT 33
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: PPUSH
49815: CALL_OW 72
49819: IFFALSE 49907
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49821: LD_ADDR_VAR 0 8
49825: PUSH
49826: LD_VAR 0 18
49830: PPUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 30
49836: PUSH
49837: LD_INT 32
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 30
49846: PUSH
49847: LD_INT 33
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: PPUSH
49859: CALL_OW 72
49863: PUSH
49864: FOR_IN
49865: IFFALSE 49905
// begin if not GetBWeapon ( i ) then
49867: LD_VAR 0 8
49871: PPUSH
49872: CALL_OW 269
49876: NOT
49877: IFFALSE 49903
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49879: LD_VAR 0 8
49883: PPUSH
49884: LD_VAR 0 8
49888: PPUSH
49889: LD_VAR 0 2
49893: PPUSH
49894: CALL 51153 0 2
49898: PPUSH
49899: CALL_OW 431
// end ;
49903: GO 49864
49905: POP
49906: POP
// end ; for i = 1 to personel do
49907: LD_ADDR_VAR 0 8
49911: PUSH
49912: DOUBLE
49913: LD_INT 1
49915: DEC
49916: ST_TO_ADDR
49917: LD_VAR 0 6
49921: PUSH
49922: FOR_TO
49923: IFFALSE 50987
// begin if i > 4 then
49925: LD_VAR 0 8
49929: PUSH
49930: LD_INT 4
49932: GREATER
49933: IFFALSE 49937
// break ;
49935: GO 50987
// case i of 1 :
49937: LD_VAR 0 8
49941: PUSH
49942: LD_INT 1
49944: DOUBLE
49945: EQUAL
49946: IFTRUE 49950
49948: GO 50030
49950: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49951: LD_ADDR_VAR 0 12
49955: PUSH
49956: LD_VAR 0 18
49960: PPUSH
49961: LD_INT 22
49963: PUSH
49964: LD_VAR 0 16
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 58
49975: PUSH
49976: EMPTY
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 30
49984: PUSH
49985: LD_INT 32
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 30
49994: PUSH
49995: LD_INT 4
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 30
50004: PUSH
50005: LD_INT 5
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: PPUSH
50023: CALL_OW 72
50027: ST_TO_ADDR
50028: GO 50252
50030: LD_INT 2
50032: DOUBLE
50033: EQUAL
50034: IFTRUE 50038
50036: GO 50100
50038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50039: LD_ADDR_VAR 0 12
50043: PUSH
50044: LD_VAR 0 18
50048: PPUSH
50049: LD_INT 22
50051: PUSH
50052: LD_VAR 0 16
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 30
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 30
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PPUSH
50093: CALL_OW 72
50097: ST_TO_ADDR
50098: GO 50252
50100: LD_INT 3
50102: DOUBLE
50103: EQUAL
50104: IFTRUE 50108
50106: GO 50170
50108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50109: LD_ADDR_VAR 0 12
50113: PUSH
50114: LD_VAR 0 18
50118: PPUSH
50119: LD_INT 22
50121: PUSH
50122: LD_VAR 0 16
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 30
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 30
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PPUSH
50163: CALL_OW 72
50167: ST_TO_ADDR
50168: GO 50252
50170: LD_INT 4
50172: DOUBLE
50173: EQUAL
50174: IFTRUE 50178
50176: GO 50251
50178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50179: LD_ADDR_VAR 0 12
50183: PUSH
50184: LD_VAR 0 18
50188: PPUSH
50189: LD_INT 22
50191: PUSH
50192: LD_VAR 0 16
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 30
50206: PUSH
50207: LD_INT 6
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 30
50216: PUSH
50217: LD_INT 7
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 30
50226: PUSH
50227: LD_INT 8
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PPUSH
50244: CALL_OW 72
50248: ST_TO_ADDR
50249: GO 50252
50251: POP
// if i = 1 then
50252: LD_VAR 0 8
50256: PUSH
50257: LD_INT 1
50259: EQUAL
50260: IFFALSE 50371
// begin tmp := [ ] ;
50262: LD_ADDR_VAR 0 19
50266: PUSH
50267: EMPTY
50268: ST_TO_ADDR
// for j in f do
50269: LD_ADDR_VAR 0 9
50273: PUSH
50274: LD_VAR 0 12
50278: PUSH
50279: FOR_IN
50280: IFFALSE 50353
// if GetBType ( j ) = b_bunker then
50282: LD_VAR 0 9
50286: PPUSH
50287: CALL_OW 266
50291: PUSH
50292: LD_INT 32
50294: EQUAL
50295: IFFALSE 50322
// tmp := Insert ( tmp , 1 , j ) else
50297: LD_ADDR_VAR 0 19
50301: PUSH
50302: LD_VAR 0 19
50306: PPUSH
50307: LD_INT 1
50309: PPUSH
50310: LD_VAR 0 9
50314: PPUSH
50315: CALL_OW 2
50319: ST_TO_ADDR
50320: GO 50351
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50322: LD_ADDR_VAR 0 19
50326: PUSH
50327: LD_VAR 0 19
50331: PPUSH
50332: LD_VAR 0 19
50336: PUSH
50337: LD_INT 1
50339: PLUS
50340: PPUSH
50341: LD_VAR 0 9
50345: PPUSH
50346: CALL_OW 2
50350: ST_TO_ADDR
50351: GO 50279
50353: POP
50354: POP
// if tmp then
50355: LD_VAR 0 19
50359: IFFALSE 50371
// f := tmp ;
50361: LD_ADDR_VAR 0 12
50365: PUSH
50366: LD_VAR 0 19
50370: ST_TO_ADDR
// end ; x := personel [ i ] ;
50371: LD_ADDR_VAR 0 13
50375: PUSH
50376: LD_VAR 0 6
50380: PUSH
50381: LD_VAR 0 8
50385: ARRAY
50386: ST_TO_ADDR
// if x = - 1 then
50387: LD_VAR 0 13
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: EQUAL
50396: IFFALSE 50605
// begin for j in f do
50398: LD_ADDR_VAR 0 9
50402: PUSH
50403: LD_VAR 0 12
50407: PUSH
50408: FOR_IN
50409: IFFALSE 50601
// repeat InitHc ;
50411: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50415: LD_VAR 0 9
50419: PPUSH
50420: CALL_OW 266
50424: PUSH
50425: LD_INT 5
50427: EQUAL
50428: IFFALSE 50498
// begin if UnitsInside ( j ) < 3 then
50430: LD_VAR 0 9
50434: PPUSH
50435: CALL_OW 313
50439: PUSH
50440: LD_INT 3
50442: LESS
50443: IFFALSE 50479
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50445: LD_INT 0
50447: PPUSH
50448: LD_INT 5
50450: PUSH
50451: LD_INT 8
50453: PUSH
50454: LD_INT 9
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: PUSH
50462: LD_VAR 0 17
50466: ARRAY
50467: PPUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: CALL_OW 380
50477: GO 50496
// PrepareHuman ( false , i , skill ) ;
50479: LD_INT 0
50481: PPUSH
50482: LD_VAR 0 8
50486: PPUSH
50487: LD_VAR 0 4
50491: PPUSH
50492: CALL_OW 380
// end else
50496: GO 50515
// PrepareHuman ( false , i , skill ) ;
50498: LD_INT 0
50500: PPUSH
50501: LD_VAR 0 8
50505: PPUSH
50506: LD_VAR 0 4
50510: PPUSH
50511: CALL_OW 380
// un := CreateHuman ;
50515: LD_ADDR_VAR 0 14
50519: PUSH
50520: CALL_OW 44
50524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50525: LD_ADDR_VAR 0 7
50529: PUSH
50530: LD_VAR 0 7
50534: PPUSH
50535: LD_INT 1
50537: PPUSH
50538: LD_VAR 0 14
50542: PPUSH
50543: CALL_OW 2
50547: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50548: LD_VAR 0 14
50552: PPUSH
50553: LD_VAR 0 9
50557: PPUSH
50558: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50562: LD_VAR 0 9
50566: PPUSH
50567: CALL_OW 313
50571: PUSH
50572: LD_INT 6
50574: EQUAL
50575: PUSH
50576: LD_VAR 0 9
50580: PPUSH
50581: CALL_OW 266
50585: PUSH
50586: LD_INT 32
50588: PUSH
50589: LD_INT 31
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: IN
50596: OR
50597: IFFALSE 50411
50599: GO 50408
50601: POP
50602: POP
// end else
50603: GO 50985
// for j = 1 to x do
50605: LD_ADDR_VAR 0 9
50609: PUSH
50610: DOUBLE
50611: LD_INT 1
50613: DEC
50614: ST_TO_ADDR
50615: LD_VAR 0 13
50619: PUSH
50620: FOR_TO
50621: IFFALSE 50983
// begin InitHc ;
50623: CALL_OW 19
// if not f then
50627: LD_VAR 0 12
50631: NOT
50632: IFFALSE 50721
// begin PrepareHuman ( false , i , skill ) ;
50634: LD_INT 0
50636: PPUSH
50637: LD_VAR 0 8
50641: PPUSH
50642: LD_VAR 0 4
50646: PPUSH
50647: CALL_OW 380
// un := CreateHuman ;
50651: LD_ADDR_VAR 0 14
50655: PUSH
50656: CALL_OW 44
50660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50661: LD_ADDR_VAR 0 7
50665: PUSH
50666: LD_VAR 0 7
50670: PPUSH
50671: LD_INT 1
50673: PPUSH
50674: LD_VAR 0 14
50678: PPUSH
50679: CALL_OW 2
50683: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50684: LD_VAR 0 14
50688: PPUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 250
50698: PPUSH
50699: LD_VAR 0 1
50703: PPUSH
50704: CALL_OW 251
50708: PPUSH
50709: LD_INT 10
50711: PPUSH
50712: LD_INT 0
50714: PPUSH
50715: CALL_OW 50
// continue ;
50719: GO 50620
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50721: LD_VAR 0 12
50725: PUSH
50726: LD_INT 1
50728: ARRAY
50729: PPUSH
50730: CALL_OW 313
50734: PUSH
50735: LD_VAR 0 12
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: CALL_OW 266
50748: PUSH
50749: LD_INT 32
50751: PUSH
50752: LD_INT 31
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: IN
50759: AND
50760: PUSH
50761: LD_VAR 0 12
50765: PUSH
50766: LD_INT 1
50768: ARRAY
50769: PPUSH
50770: CALL_OW 313
50774: PUSH
50775: LD_INT 6
50777: EQUAL
50778: OR
50779: IFFALSE 50799
// f := Delete ( f , 1 ) ;
50781: LD_ADDR_VAR 0 12
50785: PUSH
50786: LD_VAR 0 12
50790: PPUSH
50791: LD_INT 1
50793: PPUSH
50794: CALL_OW 3
50798: ST_TO_ADDR
// if not f then
50799: LD_VAR 0 12
50803: NOT
50804: IFFALSE 50822
// begin x := x + 2 ;
50806: LD_ADDR_VAR 0 13
50810: PUSH
50811: LD_VAR 0 13
50815: PUSH
50816: LD_INT 2
50818: PLUS
50819: ST_TO_ADDR
// continue ;
50820: GO 50620
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50822: LD_VAR 0 12
50826: PUSH
50827: LD_INT 1
50829: ARRAY
50830: PPUSH
50831: CALL_OW 266
50835: PUSH
50836: LD_INT 5
50838: EQUAL
50839: IFFALSE 50913
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50841: LD_VAR 0 12
50845: PUSH
50846: LD_INT 1
50848: ARRAY
50849: PPUSH
50850: CALL_OW 313
50854: PUSH
50855: LD_INT 3
50857: LESS
50858: IFFALSE 50894
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50860: LD_INT 0
50862: PPUSH
50863: LD_INT 5
50865: PUSH
50866: LD_INT 8
50868: PUSH
50869: LD_INT 9
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: PUSH
50877: LD_VAR 0 17
50881: ARRAY
50882: PPUSH
50883: LD_VAR 0 4
50887: PPUSH
50888: CALL_OW 380
50892: GO 50911
// PrepareHuman ( false , i , skill ) ;
50894: LD_INT 0
50896: PPUSH
50897: LD_VAR 0 8
50901: PPUSH
50902: LD_VAR 0 4
50906: PPUSH
50907: CALL_OW 380
// end else
50911: GO 50930
// PrepareHuman ( false , i , skill ) ;
50913: LD_INT 0
50915: PPUSH
50916: LD_VAR 0 8
50920: PPUSH
50921: LD_VAR 0 4
50925: PPUSH
50926: CALL_OW 380
// un := CreateHuman ;
50930: LD_ADDR_VAR 0 14
50934: PUSH
50935: CALL_OW 44
50939: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50940: LD_ADDR_VAR 0 7
50944: PUSH
50945: LD_VAR 0 7
50949: PPUSH
50950: LD_INT 1
50952: PPUSH
50953: LD_VAR 0 14
50957: PPUSH
50958: CALL_OW 2
50962: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50963: LD_VAR 0 14
50967: PPUSH
50968: LD_VAR 0 12
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: PPUSH
50977: CALL_OW 52
// end ;
50981: GO 50620
50983: POP
50984: POP
// end ;
50985: GO 49922
50987: POP
50988: POP
// result := result ^ buildings ;
50989: LD_ADDR_VAR 0 7
50993: PUSH
50994: LD_VAR 0 7
50998: PUSH
50999: LD_VAR 0 18
51003: ADD
51004: ST_TO_ADDR
// end else
51005: GO 51148
// begin for i = 1 to personel do
51007: LD_ADDR_VAR 0 8
51011: PUSH
51012: DOUBLE
51013: LD_INT 1
51015: DEC
51016: ST_TO_ADDR
51017: LD_VAR 0 6
51021: PUSH
51022: FOR_TO
51023: IFFALSE 51146
// begin if i > 4 then
51025: LD_VAR 0 8
51029: PUSH
51030: LD_INT 4
51032: GREATER
51033: IFFALSE 51037
// break ;
51035: GO 51146
// x := personel [ i ] ;
51037: LD_ADDR_VAR 0 13
51041: PUSH
51042: LD_VAR 0 6
51046: PUSH
51047: LD_VAR 0 8
51051: ARRAY
51052: ST_TO_ADDR
// if x = - 1 then
51053: LD_VAR 0 13
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: EQUAL
51062: IFFALSE 51066
// continue ;
51064: GO 51022
// PrepareHuman ( false , i , skill ) ;
51066: LD_INT 0
51068: PPUSH
51069: LD_VAR 0 8
51073: PPUSH
51074: LD_VAR 0 4
51078: PPUSH
51079: CALL_OW 380
// un := CreateHuman ;
51083: LD_ADDR_VAR 0 14
51087: PUSH
51088: CALL_OW 44
51092: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51093: LD_VAR 0 14
51097: PPUSH
51098: LD_VAR 0 1
51102: PPUSH
51103: CALL_OW 250
51107: PPUSH
51108: LD_VAR 0 1
51112: PPUSH
51113: CALL_OW 251
51117: PPUSH
51118: LD_INT 10
51120: PPUSH
51121: LD_INT 0
51123: PPUSH
51124: CALL_OW 50
// result := result ^ un ;
51128: LD_ADDR_VAR 0 7
51132: PUSH
51133: LD_VAR 0 7
51137: PUSH
51138: LD_VAR 0 14
51142: ADD
51143: ST_TO_ADDR
// end ;
51144: GO 51022
51146: POP
51147: POP
// end ; end ;
51148: LD_VAR 0 7
51152: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51153: LD_INT 0
51155: PPUSH
51156: PPUSH
51157: PPUSH
51158: PPUSH
51159: PPUSH
51160: PPUSH
51161: PPUSH
51162: PPUSH
51163: PPUSH
51164: PPUSH
51165: PPUSH
51166: PPUSH
51167: PPUSH
51168: PPUSH
51169: PPUSH
51170: PPUSH
// result := false ;
51171: LD_ADDR_VAR 0 3
51175: PUSH
51176: LD_INT 0
51178: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51179: LD_VAR 0 1
51183: NOT
51184: PUSH
51185: LD_VAR 0 1
51189: PPUSH
51190: CALL_OW 266
51194: PUSH
51195: LD_INT 32
51197: PUSH
51198: LD_INT 33
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: IN
51205: NOT
51206: OR
51207: IFFALSE 51211
// exit ;
51209: GO 52320
// nat := GetNation ( tower ) ;
51211: LD_ADDR_VAR 0 12
51215: PUSH
51216: LD_VAR 0 1
51220: PPUSH
51221: CALL_OW 248
51225: ST_TO_ADDR
// side := GetSide ( tower ) ;
51226: LD_ADDR_VAR 0 16
51230: PUSH
51231: LD_VAR 0 1
51235: PPUSH
51236: CALL_OW 255
51240: ST_TO_ADDR
// x := GetX ( tower ) ;
51241: LD_ADDR_VAR 0 10
51245: PUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: CALL_OW 250
51255: ST_TO_ADDR
// y := GetY ( tower ) ;
51256: LD_ADDR_VAR 0 11
51260: PUSH
51261: LD_VAR 0 1
51265: PPUSH
51266: CALL_OW 251
51270: ST_TO_ADDR
// if not x or not y then
51271: LD_VAR 0 10
51275: NOT
51276: PUSH
51277: LD_VAR 0 11
51281: NOT
51282: OR
51283: IFFALSE 51287
// exit ;
51285: GO 52320
// weapon := 0 ;
51287: LD_ADDR_VAR 0 18
51291: PUSH
51292: LD_INT 0
51294: ST_TO_ADDR
// fac_list := [ ] ;
51295: LD_ADDR_VAR 0 17
51299: PUSH
51300: EMPTY
51301: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51302: LD_ADDR_VAR 0 6
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 274
51316: PPUSH
51317: LD_VAR 0 2
51321: PPUSH
51322: LD_INT 0
51324: PPUSH
51325: CALL 48891 0 3
51329: PPUSH
51330: LD_INT 30
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PPUSH
51340: CALL_OW 72
51344: ST_TO_ADDR
// if not factories then
51345: LD_VAR 0 6
51349: NOT
51350: IFFALSE 51354
// exit ;
51352: GO 52320
// for i in factories do
51354: LD_ADDR_VAR 0 8
51358: PUSH
51359: LD_VAR 0 6
51363: PUSH
51364: FOR_IN
51365: IFFALSE 51390
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51367: LD_ADDR_VAR 0 17
51371: PUSH
51372: LD_VAR 0 17
51376: PUSH
51377: LD_VAR 0 8
51381: PPUSH
51382: CALL_OW 478
51386: UNION
51387: ST_TO_ADDR
51388: GO 51364
51390: POP
51391: POP
// if not fac_list then
51392: LD_VAR 0 17
51396: NOT
51397: IFFALSE 51401
// exit ;
51399: GO 52320
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51401: LD_ADDR_VAR 0 5
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: LD_INT 5
51411: PUSH
51412: LD_INT 9
51414: PUSH
51415: LD_INT 10
51417: PUSH
51418: LD_INT 6
51420: PUSH
51421: LD_INT 7
51423: PUSH
51424: LD_INT 11
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 27
51438: PUSH
51439: LD_INT 28
51441: PUSH
51442: LD_INT 26
51444: PUSH
51445: LD_INT 30
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 43
51456: PUSH
51457: LD_INT 44
51459: PUSH
51460: LD_INT 46
51462: PUSH
51463: LD_INT 45
51465: PUSH
51466: LD_INT 47
51468: PUSH
51469: LD_INT 49
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: PUSH
51485: LD_VAR 0 12
51489: ARRAY
51490: ST_TO_ADDR
// list := list isect fac_list ;
51491: LD_ADDR_VAR 0 5
51495: PUSH
51496: LD_VAR 0 5
51500: PUSH
51501: LD_VAR 0 17
51505: ISECT
51506: ST_TO_ADDR
// if not list then
51507: LD_VAR 0 5
51511: NOT
51512: IFFALSE 51516
// exit ;
51514: GO 52320
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51516: LD_VAR 0 12
51520: PUSH
51521: LD_INT 3
51523: EQUAL
51524: PUSH
51525: LD_INT 49
51527: PUSH
51528: LD_VAR 0 5
51532: IN
51533: AND
51534: PUSH
51535: LD_INT 31
51537: PPUSH
51538: LD_VAR 0 16
51542: PPUSH
51543: CALL_OW 321
51547: PUSH
51548: LD_INT 2
51550: EQUAL
51551: AND
51552: IFFALSE 51612
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51554: LD_INT 22
51556: PUSH
51557: LD_VAR 0 16
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 35
51568: PUSH
51569: LD_INT 49
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 91
51578: PUSH
51579: LD_VAR 0 1
51583: PUSH
51584: LD_INT 10
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: PPUSH
51597: CALL_OW 69
51601: NOT
51602: IFFALSE 51612
// weapon := ru_time_lapser ;
51604: LD_ADDR_VAR 0 18
51608: PUSH
51609: LD_INT 49
51611: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51612: LD_VAR 0 12
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: IN
51627: PUSH
51628: LD_INT 11
51630: PUSH
51631: LD_VAR 0 5
51635: IN
51636: PUSH
51637: LD_INT 30
51639: PUSH
51640: LD_VAR 0 5
51644: IN
51645: OR
51646: AND
51647: PUSH
51648: LD_INT 6
51650: PPUSH
51651: LD_VAR 0 16
51655: PPUSH
51656: CALL_OW 321
51660: PUSH
51661: LD_INT 2
51663: EQUAL
51664: AND
51665: IFFALSE 51830
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51667: LD_INT 22
51669: PUSH
51670: LD_VAR 0 16
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 35
51684: PUSH
51685: LD_INT 11
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 35
51694: PUSH
51695: LD_INT 30
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 91
51709: PUSH
51710: LD_VAR 0 1
51714: PUSH
51715: LD_INT 18
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: PPUSH
51728: CALL_OW 69
51732: NOT
51733: PUSH
51734: LD_INT 22
51736: PUSH
51737: LD_VAR 0 16
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 30
51751: PUSH
51752: LD_INT 32
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 30
51761: PUSH
51762: LD_INT 33
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 91
51776: PUSH
51777: LD_VAR 0 1
51781: PUSH
51782: LD_INT 12
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: PPUSH
51798: CALL_OW 69
51802: PUSH
51803: LD_INT 2
51805: GREATER
51806: AND
51807: IFFALSE 51830
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51809: LD_ADDR_VAR 0 18
51813: PUSH
51814: LD_INT 11
51816: PUSH
51817: LD_INT 30
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_VAR 0 12
51828: ARRAY
51829: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51830: LD_VAR 0 18
51834: NOT
51835: PUSH
51836: LD_INT 40
51838: PPUSH
51839: LD_VAR 0 16
51843: PPUSH
51844: CALL_OW 321
51848: PUSH
51849: LD_INT 2
51851: EQUAL
51852: AND
51853: PUSH
51854: LD_INT 7
51856: PUSH
51857: LD_VAR 0 5
51861: IN
51862: PUSH
51863: LD_INT 28
51865: PUSH
51866: LD_VAR 0 5
51870: IN
51871: OR
51872: PUSH
51873: LD_INT 45
51875: PUSH
51876: LD_VAR 0 5
51880: IN
51881: OR
51882: AND
51883: IFFALSE 52137
// begin hex := GetHexInfo ( x , y ) ;
51885: LD_ADDR_VAR 0 4
51889: PUSH
51890: LD_VAR 0 10
51894: PPUSH
51895: LD_VAR 0 11
51899: PPUSH
51900: CALL_OW 546
51904: ST_TO_ADDR
// if hex [ 1 ] then
51905: LD_VAR 0 4
51909: PUSH
51910: LD_INT 1
51912: ARRAY
51913: IFFALSE 51917
// exit ;
51915: GO 52320
// height := hex [ 2 ] ;
51917: LD_ADDR_VAR 0 15
51921: PUSH
51922: LD_VAR 0 4
51926: PUSH
51927: LD_INT 2
51929: ARRAY
51930: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51931: LD_ADDR_VAR 0 14
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: LD_INT 5
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// for i in tmp do
51954: LD_ADDR_VAR 0 8
51958: PUSH
51959: LD_VAR 0 14
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52135
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51967: LD_ADDR_VAR 0 9
51971: PUSH
51972: LD_VAR 0 10
51976: PPUSH
51977: LD_VAR 0 8
51981: PPUSH
51982: LD_INT 5
51984: PPUSH
51985: CALL_OW 272
51989: PUSH
51990: LD_VAR 0 11
51994: PPUSH
51995: LD_VAR 0 8
51999: PPUSH
52000: LD_INT 5
52002: PPUSH
52003: CALL_OW 273
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52012: LD_VAR 0 9
52016: PUSH
52017: LD_INT 1
52019: ARRAY
52020: PPUSH
52021: LD_VAR 0 9
52025: PUSH
52026: LD_INT 2
52028: ARRAY
52029: PPUSH
52030: CALL_OW 488
52034: IFFALSE 52133
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52036: LD_ADDR_VAR 0 4
52040: PUSH
52041: LD_VAR 0 9
52045: PUSH
52046: LD_INT 1
52048: ARRAY
52049: PPUSH
52050: LD_VAR 0 9
52054: PUSH
52055: LD_INT 2
52057: ARRAY
52058: PPUSH
52059: CALL_OW 546
52063: ST_TO_ADDR
// if hex [ 1 ] then
52064: LD_VAR 0 4
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: IFFALSE 52076
// continue ;
52074: GO 51964
// h := hex [ 2 ] ;
52076: LD_ADDR_VAR 0 13
52080: PUSH
52081: LD_VAR 0 4
52085: PUSH
52086: LD_INT 2
52088: ARRAY
52089: ST_TO_ADDR
// if h + 7 < height then
52090: LD_VAR 0 13
52094: PUSH
52095: LD_INT 7
52097: PLUS
52098: PUSH
52099: LD_VAR 0 15
52103: LESS
52104: IFFALSE 52133
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52106: LD_ADDR_VAR 0 18
52110: PUSH
52111: LD_INT 7
52113: PUSH
52114: LD_INT 28
52116: PUSH
52117: LD_INT 45
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: LD_VAR 0 12
52129: ARRAY
52130: ST_TO_ADDR
// break ;
52131: GO 52135
// end ; end ; end ;
52133: GO 51964
52135: POP
52136: POP
// end ; if not weapon then
52137: LD_VAR 0 18
52141: NOT
52142: IFFALSE 52202
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52144: LD_ADDR_VAR 0 5
52148: PUSH
52149: LD_VAR 0 5
52153: PUSH
52154: LD_INT 11
52156: PUSH
52157: LD_INT 30
52159: PUSH
52160: LD_INT 49
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: DIFF
52168: ST_TO_ADDR
// if not list then
52169: LD_VAR 0 5
52173: NOT
52174: IFFALSE 52178
// exit ;
52176: GO 52320
// weapon := list [ rand ( 1 , list ) ] ;
52178: LD_ADDR_VAR 0 18
52182: PUSH
52183: LD_VAR 0 5
52187: PUSH
52188: LD_INT 1
52190: PPUSH
52191: LD_VAR 0 5
52195: PPUSH
52196: CALL_OW 12
52200: ARRAY
52201: ST_TO_ADDR
// end ; if weapon then
52202: LD_VAR 0 18
52206: IFFALSE 52320
// begin tmp := CostOfWeapon ( weapon ) ;
52208: LD_ADDR_VAR 0 14
52212: PUSH
52213: LD_VAR 0 18
52217: PPUSH
52218: CALL_OW 451
52222: ST_TO_ADDR
// j := GetBase ( tower ) ;
52223: LD_ADDR_VAR 0 9
52227: PUSH
52228: LD_VAR 0 1
52232: PPUSH
52233: CALL_OW 274
52237: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52238: LD_VAR 0 9
52242: PPUSH
52243: LD_INT 1
52245: PPUSH
52246: CALL_OW 275
52250: PUSH
52251: LD_VAR 0 14
52255: PUSH
52256: LD_INT 1
52258: ARRAY
52259: GREATEREQUAL
52260: PUSH
52261: LD_VAR 0 9
52265: PPUSH
52266: LD_INT 2
52268: PPUSH
52269: CALL_OW 275
52273: PUSH
52274: LD_VAR 0 14
52278: PUSH
52279: LD_INT 2
52281: ARRAY
52282: GREATEREQUAL
52283: AND
52284: PUSH
52285: LD_VAR 0 9
52289: PPUSH
52290: LD_INT 3
52292: PPUSH
52293: CALL_OW 275
52297: PUSH
52298: LD_VAR 0 14
52302: PUSH
52303: LD_INT 3
52305: ARRAY
52306: GREATEREQUAL
52307: AND
52308: IFFALSE 52320
// result := weapon ;
52310: LD_ADDR_VAR 0 3
52314: PUSH
52315: LD_VAR 0 18
52319: ST_TO_ADDR
// end ; end ;
52320: LD_VAR 0 3
52324: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52325: LD_INT 0
52327: PPUSH
52328: PPUSH
// result := true ;
52329: LD_ADDR_VAR 0 3
52333: PUSH
52334: LD_INT 1
52336: ST_TO_ADDR
// if array1 = array2 then
52337: LD_VAR 0 1
52341: PUSH
52342: LD_VAR 0 2
52346: EQUAL
52347: IFFALSE 52407
// begin for i = 1 to array1 do
52349: LD_ADDR_VAR 0 4
52353: PUSH
52354: DOUBLE
52355: LD_INT 1
52357: DEC
52358: ST_TO_ADDR
52359: LD_VAR 0 1
52363: PUSH
52364: FOR_TO
52365: IFFALSE 52403
// if array1 [ i ] <> array2 [ i ] then
52367: LD_VAR 0 1
52371: PUSH
52372: LD_VAR 0 4
52376: ARRAY
52377: PUSH
52378: LD_VAR 0 2
52382: PUSH
52383: LD_VAR 0 4
52387: ARRAY
52388: NONEQUAL
52389: IFFALSE 52401
// begin result := false ;
52391: LD_ADDR_VAR 0 3
52395: PUSH
52396: LD_INT 0
52398: ST_TO_ADDR
// break ;
52399: GO 52403
// end ;
52401: GO 52364
52403: POP
52404: POP
// end else
52405: GO 52415
// result := false ;
52407: LD_ADDR_VAR 0 3
52411: PUSH
52412: LD_INT 0
52414: ST_TO_ADDR
// end ;
52415: LD_VAR 0 3
52419: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52420: LD_INT 0
52422: PPUSH
52423: PPUSH
// if not array1 or not array2 then
52424: LD_VAR 0 1
52428: NOT
52429: PUSH
52430: LD_VAR 0 2
52434: NOT
52435: OR
52436: IFFALSE 52440
// exit ;
52438: GO 52504
// result := true ;
52440: LD_ADDR_VAR 0 3
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// for i = 1 to array1 do
52448: LD_ADDR_VAR 0 4
52452: PUSH
52453: DOUBLE
52454: LD_INT 1
52456: DEC
52457: ST_TO_ADDR
52458: LD_VAR 0 1
52462: PUSH
52463: FOR_TO
52464: IFFALSE 52502
// if array1 [ i ] <> array2 [ i ] then
52466: LD_VAR 0 1
52470: PUSH
52471: LD_VAR 0 4
52475: ARRAY
52476: PUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_VAR 0 4
52486: ARRAY
52487: NONEQUAL
52488: IFFALSE 52500
// begin result := false ;
52490: LD_ADDR_VAR 0 3
52494: PUSH
52495: LD_INT 0
52497: ST_TO_ADDR
// break ;
52498: GO 52502
// end ;
52500: GO 52463
52502: POP
52503: POP
// end ;
52504: LD_VAR 0 3
52508: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52509: LD_INT 0
52511: PPUSH
52512: PPUSH
52513: PPUSH
// pom := GetBase ( fac ) ;
52514: LD_ADDR_VAR 0 5
52518: PUSH
52519: LD_VAR 0 1
52523: PPUSH
52524: CALL_OW 274
52528: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52529: LD_ADDR_VAR 0 4
52533: PUSH
52534: LD_VAR 0 2
52538: PUSH
52539: LD_INT 1
52541: ARRAY
52542: PPUSH
52543: LD_VAR 0 2
52547: PUSH
52548: LD_INT 2
52550: ARRAY
52551: PPUSH
52552: LD_VAR 0 2
52556: PUSH
52557: LD_INT 3
52559: ARRAY
52560: PPUSH
52561: LD_VAR 0 2
52565: PUSH
52566: LD_INT 4
52568: ARRAY
52569: PPUSH
52570: CALL_OW 449
52574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52575: LD_ADDR_VAR 0 3
52579: PUSH
52580: LD_VAR 0 5
52584: PPUSH
52585: LD_INT 1
52587: PPUSH
52588: CALL_OW 275
52592: PUSH
52593: LD_VAR 0 4
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: GREATEREQUAL
52602: PUSH
52603: LD_VAR 0 5
52607: PPUSH
52608: LD_INT 2
52610: PPUSH
52611: CALL_OW 275
52615: PUSH
52616: LD_VAR 0 4
52620: PUSH
52621: LD_INT 2
52623: ARRAY
52624: GREATEREQUAL
52625: AND
52626: PUSH
52627: LD_VAR 0 5
52631: PPUSH
52632: LD_INT 3
52634: PPUSH
52635: CALL_OW 275
52639: PUSH
52640: LD_VAR 0 4
52644: PUSH
52645: LD_INT 3
52647: ARRAY
52648: GREATEREQUAL
52649: AND
52650: ST_TO_ADDR
// end ;
52651: LD_VAR 0 3
52655: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// pom := GetBase ( building ) ;
52662: LD_ADDR_VAR 0 3
52666: PUSH
52667: LD_VAR 0 1
52671: PPUSH
52672: CALL_OW 274
52676: ST_TO_ADDR
// if not pom then
52677: LD_VAR 0 3
52681: NOT
52682: IFFALSE 52686
// exit ;
52684: GO 52856
// btype := GetBType ( building ) ;
52686: LD_ADDR_VAR 0 5
52690: PUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: CALL_OW 266
52700: ST_TO_ADDR
// if btype = b_armoury then
52701: LD_VAR 0 5
52705: PUSH
52706: LD_INT 4
52708: EQUAL
52709: IFFALSE 52719
// btype := b_barracks ;
52711: LD_ADDR_VAR 0 5
52715: PUSH
52716: LD_INT 5
52718: ST_TO_ADDR
// if btype = b_depot then
52719: LD_VAR 0 5
52723: PUSH
52724: LD_INT 0
52726: EQUAL
52727: IFFALSE 52737
// btype := b_warehouse ;
52729: LD_ADDR_VAR 0 5
52733: PUSH
52734: LD_INT 1
52736: ST_TO_ADDR
// if btype = b_workshop then
52737: LD_VAR 0 5
52741: PUSH
52742: LD_INT 2
52744: EQUAL
52745: IFFALSE 52755
// btype := b_factory ;
52747: LD_ADDR_VAR 0 5
52751: PUSH
52752: LD_INT 3
52754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52755: LD_ADDR_VAR 0 4
52759: PUSH
52760: LD_VAR 0 5
52764: PPUSH
52765: LD_VAR 0 1
52769: PPUSH
52770: CALL_OW 248
52774: PPUSH
52775: CALL_OW 450
52779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52780: LD_ADDR_VAR 0 2
52784: PUSH
52785: LD_VAR 0 3
52789: PPUSH
52790: LD_INT 1
52792: PPUSH
52793: CALL_OW 275
52797: PUSH
52798: LD_VAR 0 4
52802: PUSH
52803: LD_INT 1
52805: ARRAY
52806: GREATEREQUAL
52807: PUSH
52808: LD_VAR 0 3
52812: PPUSH
52813: LD_INT 2
52815: PPUSH
52816: CALL_OW 275
52820: PUSH
52821: LD_VAR 0 4
52825: PUSH
52826: LD_INT 2
52828: ARRAY
52829: GREATEREQUAL
52830: AND
52831: PUSH
52832: LD_VAR 0 3
52836: PPUSH
52837: LD_INT 3
52839: PPUSH
52840: CALL_OW 275
52844: PUSH
52845: LD_VAR 0 4
52849: PUSH
52850: LD_INT 3
52852: ARRAY
52853: GREATEREQUAL
52854: AND
52855: ST_TO_ADDR
// end ;
52856: LD_VAR 0 2
52860: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52861: LD_INT 0
52863: PPUSH
52864: PPUSH
52865: PPUSH
// pom := GetBase ( building ) ;
52866: LD_ADDR_VAR 0 4
52870: PUSH
52871: LD_VAR 0 1
52875: PPUSH
52876: CALL_OW 274
52880: ST_TO_ADDR
// if not pom then
52881: LD_VAR 0 4
52885: NOT
52886: IFFALSE 52890
// exit ;
52888: GO 52991
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52890: LD_ADDR_VAR 0 5
52894: PUSH
52895: LD_VAR 0 2
52899: PPUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: CALL_OW 248
52909: PPUSH
52910: CALL_OW 450
52914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_VAR 0 4
52924: PPUSH
52925: LD_INT 1
52927: PPUSH
52928: CALL_OW 275
52932: PUSH
52933: LD_VAR 0 5
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: GREATEREQUAL
52942: PUSH
52943: LD_VAR 0 4
52947: PPUSH
52948: LD_INT 2
52950: PPUSH
52951: CALL_OW 275
52955: PUSH
52956: LD_VAR 0 5
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: GREATEREQUAL
52965: AND
52966: PUSH
52967: LD_VAR 0 4
52971: PPUSH
52972: LD_INT 3
52974: PPUSH
52975: CALL_OW 275
52979: PUSH
52980: LD_VAR 0 5
52984: PUSH
52985: LD_INT 3
52987: ARRAY
52988: GREATEREQUAL
52989: AND
52990: ST_TO_ADDR
// end ;
52991: LD_VAR 0 3
52995: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52996: LD_INT 0
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
// result := false ;
53009: LD_ADDR_VAR 0 8
53013: PUSH
53014: LD_INT 0
53016: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53017: LD_VAR 0 5
53021: NOT
53022: PUSH
53023: LD_VAR 0 1
53027: NOT
53028: OR
53029: PUSH
53030: LD_VAR 0 2
53034: NOT
53035: OR
53036: PUSH
53037: LD_VAR 0 3
53041: NOT
53042: OR
53043: IFFALSE 53047
// exit ;
53045: GO 53861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53047: LD_ADDR_VAR 0 14
53051: PUSH
53052: LD_VAR 0 1
53056: PPUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: LD_VAR 0 3
53066: PPUSH
53067: LD_VAR 0 4
53071: PPUSH
53072: LD_VAR 0 5
53076: PUSH
53077: LD_INT 1
53079: ARRAY
53080: PPUSH
53081: CALL_OW 248
53085: PPUSH
53086: LD_INT 0
53088: PPUSH
53089: CALL 55094 0 6
53093: ST_TO_ADDR
// if not hexes then
53094: LD_VAR 0 14
53098: NOT
53099: IFFALSE 53103
// exit ;
53101: GO 53861
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53103: LD_ADDR_VAR 0 17
53107: PUSH
53108: LD_VAR 0 5
53112: PPUSH
53113: LD_INT 22
53115: PUSH
53116: LD_VAR 0 13
53120: PPUSH
53121: CALL_OW 255
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: LD_INT 30
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 30
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PPUSH
53162: CALL_OW 72
53166: ST_TO_ADDR
// for i = 1 to hexes do
53167: LD_ADDR_VAR 0 9
53171: PUSH
53172: DOUBLE
53173: LD_INT 1
53175: DEC
53176: ST_TO_ADDR
53177: LD_VAR 0 14
53181: PUSH
53182: FOR_TO
53183: IFFALSE 53859
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53185: LD_ADDR_VAR 0 13
53189: PUSH
53190: LD_VAR 0 14
53194: PUSH
53195: LD_VAR 0 9
53199: ARRAY
53200: PUSH
53201: LD_INT 1
53203: ARRAY
53204: PPUSH
53205: LD_VAR 0 14
53209: PUSH
53210: LD_VAR 0 9
53214: ARRAY
53215: PUSH
53216: LD_INT 2
53218: ARRAY
53219: PPUSH
53220: CALL_OW 428
53224: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53225: LD_VAR 0 14
53229: PUSH
53230: LD_VAR 0 9
53234: ARRAY
53235: PUSH
53236: LD_INT 1
53238: ARRAY
53239: PPUSH
53240: LD_VAR 0 14
53244: PUSH
53245: LD_VAR 0 9
53249: ARRAY
53250: PUSH
53251: LD_INT 2
53253: ARRAY
53254: PPUSH
53255: CALL_OW 351
53259: PUSH
53260: LD_VAR 0 14
53264: PUSH
53265: LD_VAR 0 9
53269: ARRAY
53270: PUSH
53271: LD_INT 1
53273: ARRAY
53274: PPUSH
53275: LD_VAR 0 14
53279: PUSH
53280: LD_VAR 0 9
53284: ARRAY
53285: PUSH
53286: LD_INT 2
53288: ARRAY
53289: PPUSH
53290: CALL_OW 488
53294: NOT
53295: OR
53296: PUSH
53297: LD_VAR 0 13
53301: PPUSH
53302: CALL_OW 247
53306: PUSH
53307: LD_INT 3
53309: EQUAL
53310: OR
53311: IFFALSE 53317
// exit ;
53313: POP
53314: POP
53315: GO 53861
// if not tmp then
53317: LD_VAR 0 13
53321: NOT
53322: IFFALSE 53326
// continue ;
53324: GO 53182
// result := true ;
53326: LD_ADDR_VAR 0 8
53330: PUSH
53331: LD_INT 1
53333: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53334: LD_VAR 0 6
53338: PUSH
53339: LD_VAR 0 13
53343: PPUSH
53344: CALL_OW 247
53348: PUSH
53349: LD_INT 2
53351: EQUAL
53352: AND
53353: PUSH
53354: LD_VAR 0 13
53358: PPUSH
53359: CALL_OW 263
53363: PUSH
53364: LD_INT 1
53366: EQUAL
53367: AND
53368: IFFALSE 53532
// begin if IsDrivenBy ( tmp ) then
53370: LD_VAR 0 13
53374: PPUSH
53375: CALL_OW 311
53379: IFFALSE 53383
// continue ;
53381: GO 53182
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53383: LD_VAR 0 6
53387: PPUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 60
53393: PUSH
53394: EMPTY
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: LD_INT 55
53406: PUSH
53407: EMPTY
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PPUSH
53418: CALL_OW 72
53422: IFFALSE 53530
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53424: LD_ADDR_VAR 0 18
53428: PUSH
53429: LD_VAR 0 6
53433: PPUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 60
53439: PUSH
53440: EMPTY
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: LD_INT 55
53452: PUSH
53453: EMPTY
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PPUSH
53464: CALL_OW 72
53468: PUSH
53469: LD_INT 1
53471: ARRAY
53472: ST_TO_ADDR
// if IsInUnit ( driver ) then
53473: LD_VAR 0 18
53477: PPUSH
53478: CALL_OW 310
53482: IFFALSE 53493
// ComExit ( driver ) ;
53484: LD_VAR 0 18
53488: PPUSH
53489: CALL 78855 0 1
// AddComEnterUnit ( driver , tmp ) ;
53493: LD_VAR 0 18
53497: PPUSH
53498: LD_VAR 0 13
53502: PPUSH
53503: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53507: LD_VAR 0 18
53511: PPUSH
53512: LD_VAR 0 7
53516: PPUSH
53517: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53521: LD_VAR 0 18
53525: PPUSH
53526: CALL_OW 181
// end ; continue ;
53530: GO 53182
// end ; if not cleaners or not tmp in cleaners then
53532: LD_VAR 0 6
53536: NOT
53537: PUSH
53538: LD_VAR 0 13
53542: PUSH
53543: LD_VAR 0 6
53547: IN
53548: NOT
53549: OR
53550: IFFALSE 53857
// begin if dep then
53552: LD_VAR 0 17
53556: IFFALSE 53692
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53558: LD_ADDR_VAR 0 16
53562: PUSH
53563: LD_VAR 0 17
53567: PUSH
53568: LD_INT 1
53570: ARRAY
53571: PPUSH
53572: CALL_OW 250
53576: PPUSH
53577: LD_VAR 0 17
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PPUSH
53586: CALL_OW 254
53590: PPUSH
53591: LD_INT 5
53593: PPUSH
53594: CALL_OW 272
53598: PUSH
53599: LD_VAR 0 17
53603: PUSH
53604: LD_INT 1
53606: ARRAY
53607: PPUSH
53608: CALL_OW 251
53612: PPUSH
53613: LD_VAR 0 17
53617: PUSH
53618: LD_INT 1
53620: ARRAY
53621: PPUSH
53622: CALL_OW 254
53626: PPUSH
53627: LD_INT 5
53629: PPUSH
53630: CALL_OW 273
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53639: LD_VAR 0 16
53643: PUSH
53644: LD_INT 1
53646: ARRAY
53647: PPUSH
53648: LD_VAR 0 16
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PPUSH
53657: CALL_OW 488
53661: IFFALSE 53692
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53663: LD_VAR 0 13
53667: PPUSH
53668: LD_VAR 0 16
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_VAR 0 16
53681: PUSH
53682: LD_INT 2
53684: ARRAY
53685: PPUSH
53686: CALL_OW 111
// continue ;
53690: GO 53182
// end ; end ; r := GetDir ( tmp ) ;
53692: LD_ADDR_VAR 0 15
53696: PUSH
53697: LD_VAR 0 13
53701: PPUSH
53702: CALL_OW 254
53706: ST_TO_ADDR
// if r = 5 then
53707: LD_VAR 0 15
53711: PUSH
53712: LD_INT 5
53714: EQUAL
53715: IFFALSE 53725
// r := 0 ;
53717: LD_ADDR_VAR 0 15
53721: PUSH
53722: LD_INT 0
53724: ST_TO_ADDR
// for j = r to 5 do
53725: LD_ADDR_VAR 0 10
53729: PUSH
53730: DOUBLE
53731: LD_VAR 0 15
53735: DEC
53736: ST_TO_ADDR
53737: LD_INT 5
53739: PUSH
53740: FOR_TO
53741: IFFALSE 53855
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53743: LD_ADDR_VAR 0 11
53747: PUSH
53748: LD_VAR 0 13
53752: PPUSH
53753: CALL_OW 250
53757: PPUSH
53758: LD_VAR 0 10
53762: PPUSH
53763: LD_INT 2
53765: PPUSH
53766: CALL_OW 272
53770: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53771: LD_ADDR_VAR 0 12
53775: PUSH
53776: LD_VAR 0 13
53780: PPUSH
53781: CALL_OW 251
53785: PPUSH
53786: LD_VAR 0 10
53790: PPUSH
53791: LD_INT 2
53793: PPUSH
53794: CALL_OW 273
53798: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53799: LD_VAR 0 11
53803: PPUSH
53804: LD_VAR 0 12
53808: PPUSH
53809: CALL_OW 488
53813: PUSH
53814: LD_VAR 0 11
53818: PPUSH
53819: LD_VAR 0 12
53823: PPUSH
53824: CALL_OW 428
53828: NOT
53829: AND
53830: IFFALSE 53853
// begin ComMoveXY ( tmp , _x , _y ) ;
53832: LD_VAR 0 13
53836: PPUSH
53837: LD_VAR 0 11
53841: PPUSH
53842: LD_VAR 0 12
53846: PPUSH
53847: CALL_OW 111
// break ;
53851: GO 53855
// end ; end ;
53853: GO 53740
53855: POP
53856: POP
// end ; end ;
53857: GO 53182
53859: POP
53860: POP
// end ;
53861: LD_VAR 0 8
53865: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53866: LD_INT 0
53868: PPUSH
// result := true ;
53869: LD_ADDR_VAR 0 3
53873: PUSH
53874: LD_INT 1
53876: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53877: LD_VAR 0 2
53881: PUSH
53882: LD_INT 24
53884: DOUBLE
53885: EQUAL
53886: IFTRUE 53896
53888: LD_INT 33
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53896
53894: GO 53921
53896: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53897: LD_ADDR_VAR 0 3
53901: PUSH
53902: LD_INT 32
53904: PPUSH
53905: LD_VAR 0 1
53909: PPUSH
53910: CALL_OW 321
53914: PUSH
53915: LD_INT 2
53917: EQUAL
53918: ST_TO_ADDR
53919: GO 54237
53921: LD_INT 20
53923: DOUBLE
53924: EQUAL
53925: IFTRUE 53929
53927: GO 53954
53929: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53930: LD_ADDR_VAR 0 3
53934: PUSH
53935: LD_INT 6
53937: PPUSH
53938: LD_VAR 0 1
53942: PPUSH
53943: CALL_OW 321
53947: PUSH
53948: LD_INT 2
53950: EQUAL
53951: ST_TO_ADDR
53952: GO 54237
53954: LD_INT 22
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53968
53960: LD_INT 36
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53968
53966: GO 53993
53968: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 15
53976: PPUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: CALL_OW 321
53986: PUSH
53987: LD_INT 2
53989: EQUAL
53990: ST_TO_ADDR
53991: GO 54237
53993: LD_INT 30
53995: DOUBLE
53996: EQUAL
53997: IFTRUE 54001
53999: GO 54026
54001: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54002: LD_ADDR_VAR 0 3
54006: PUSH
54007: LD_INT 20
54009: PPUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 321
54019: PUSH
54020: LD_INT 2
54022: EQUAL
54023: ST_TO_ADDR
54024: GO 54237
54026: LD_INT 28
54028: DOUBLE
54029: EQUAL
54030: IFTRUE 54040
54032: LD_INT 21
54034: DOUBLE
54035: EQUAL
54036: IFTRUE 54040
54038: GO 54065
54040: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54041: LD_ADDR_VAR 0 3
54045: PUSH
54046: LD_INT 21
54048: PPUSH
54049: LD_VAR 0 1
54053: PPUSH
54054: CALL_OW 321
54058: PUSH
54059: LD_INT 2
54061: EQUAL
54062: ST_TO_ADDR
54063: GO 54237
54065: LD_INT 16
54067: DOUBLE
54068: EQUAL
54069: IFTRUE 54073
54071: GO 54098
54073: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54074: LD_ADDR_VAR 0 3
54078: PUSH
54079: LD_INT 84
54081: PPUSH
54082: LD_VAR 0 1
54086: PPUSH
54087: CALL_OW 321
54091: PUSH
54092: LD_INT 2
54094: EQUAL
54095: ST_TO_ADDR
54096: GO 54237
54098: LD_INT 19
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54112
54104: LD_INT 23
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54112
54110: GO 54137
54112: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54113: LD_ADDR_VAR 0 3
54117: PUSH
54118: LD_INT 83
54120: PPUSH
54121: LD_VAR 0 1
54125: PPUSH
54126: CALL_OW 321
54130: PUSH
54131: LD_INT 2
54133: EQUAL
54134: ST_TO_ADDR
54135: GO 54237
54137: LD_INT 17
54139: DOUBLE
54140: EQUAL
54141: IFTRUE 54145
54143: GO 54170
54145: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54146: LD_ADDR_VAR 0 3
54150: PUSH
54151: LD_INT 39
54153: PPUSH
54154: LD_VAR 0 1
54158: PPUSH
54159: CALL_OW 321
54163: PUSH
54164: LD_INT 2
54166: EQUAL
54167: ST_TO_ADDR
54168: GO 54237
54170: LD_INT 18
54172: DOUBLE
54173: EQUAL
54174: IFTRUE 54178
54176: GO 54203
54178: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54179: LD_ADDR_VAR 0 3
54183: PUSH
54184: LD_INT 40
54186: PPUSH
54187: LD_VAR 0 1
54191: PPUSH
54192: CALL_OW 321
54196: PUSH
54197: LD_INT 2
54199: EQUAL
54200: ST_TO_ADDR
54201: GO 54237
54203: LD_INT 27
54205: DOUBLE
54206: EQUAL
54207: IFTRUE 54211
54209: GO 54236
54211: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54212: LD_ADDR_VAR 0 3
54216: PUSH
54217: LD_INT 35
54219: PPUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 321
54229: PUSH
54230: LD_INT 2
54232: EQUAL
54233: ST_TO_ADDR
54234: GO 54237
54236: POP
// end ;
54237: LD_VAR 0 3
54241: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54242: LD_INT 0
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
// result := false ;
54255: LD_ADDR_VAR 0 6
54259: PUSH
54260: LD_INT 0
54262: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54263: LD_VAR 0 1
54267: NOT
54268: PUSH
54269: LD_VAR 0 1
54273: PPUSH
54274: CALL_OW 266
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: IN
54289: NOT
54290: OR
54291: PUSH
54292: LD_VAR 0 2
54296: NOT
54297: OR
54298: PUSH
54299: LD_VAR 0 5
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: IN
54330: NOT
54331: OR
54332: PUSH
54333: LD_VAR 0 3
54337: PPUSH
54338: LD_VAR 0 4
54342: PPUSH
54343: CALL_OW 488
54347: NOT
54348: OR
54349: IFFALSE 54353
// exit ;
54351: GO 55089
// side := GetSide ( depot ) ;
54353: LD_ADDR_VAR 0 9
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: CALL_OW 255
54367: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54368: LD_VAR 0 9
54372: PPUSH
54373: LD_VAR 0 2
54377: PPUSH
54378: CALL 53866 0 2
54382: NOT
54383: IFFALSE 54387
// exit ;
54385: GO 55089
// pom := GetBase ( depot ) ;
54387: LD_ADDR_VAR 0 10
54391: PUSH
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 274
54401: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54402: LD_ADDR_VAR 0 11
54406: PUSH
54407: LD_VAR 0 2
54411: PPUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 248
54421: PPUSH
54422: CALL_OW 450
54426: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54427: LD_VAR 0 10
54431: PPUSH
54432: LD_INT 1
54434: PPUSH
54435: CALL_OW 275
54439: PUSH
54440: LD_VAR 0 11
54444: PUSH
54445: LD_INT 1
54447: ARRAY
54448: GREATEREQUAL
54449: PUSH
54450: LD_VAR 0 10
54454: PPUSH
54455: LD_INT 2
54457: PPUSH
54458: CALL_OW 275
54462: PUSH
54463: LD_VAR 0 11
54467: PUSH
54468: LD_INT 2
54470: ARRAY
54471: GREATEREQUAL
54472: AND
54473: PUSH
54474: LD_VAR 0 10
54478: PPUSH
54479: LD_INT 3
54481: PPUSH
54482: CALL_OW 275
54486: PUSH
54487: LD_VAR 0 11
54491: PUSH
54492: LD_INT 3
54494: ARRAY
54495: GREATEREQUAL
54496: AND
54497: NOT
54498: IFFALSE 54502
// exit ;
54500: GO 55089
// if GetBType ( depot ) = b_depot then
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 266
54511: PUSH
54512: LD_INT 0
54514: EQUAL
54515: IFFALSE 54527
// dist := 28 else
54517: LD_ADDR_VAR 0 14
54521: PUSH
54522: LD_INT 28
54524: ST_TO_ADDR
54525: GO 54535
// dist := 36 ;
54527: LD_ADDR_VAR 0 14
54531: PUSH
54532: LD_INT 36
54534: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54535: LD_VAR 0 1
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: LD_VAR 0 4
54549: PPUSH
54550: CALL_OW 297
54554: PUSH
54555: LD_VAR 0 14
54559: GREATER
54560: IFFALSE 54564
// exit ;
54562: GO 55089
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54564: LD_ADDR_VAR 0 12
54568: PUSH
54569: LD_VAR 0 2
54573: PPUSH
54574: LD_VAR 0 3
54578: PPUSH
54579: LD_VAR 0 4
54583: PPUSH
54584: LD_VAR 0 5
54588: PPUSH
54589: LD_VAR 0 1
54593: PPUSH
54594: CALL_OW 248
54598: PPUSH
54599: LD_INT 0
54601: PPUSH
54602: CALL 55094 0 6
54606: ST_TO_ADDR
// if not hexes then
54607: LD_VAR 0 12
54611: NOT
54612: IFFALSE 54616
// exit ;
54614: GO 55089
// hex := GetHexInfo ( x , y ) ;
54616: LD_ADDR_VAR 0 15
54620: PUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: CALL_OW 546
54635: ST_TO_ADDR
// if hex [ 1 ] then
54636: LD_VAR 0 15
54640: PUSH
54641: LD_INT 1
54643: ARRAY
54644: IFFALSE 54648
// exit ;
54646: GO 55089
// height := hex [ 2 ] ;
54648: LD_ADDR_VAR 0 13
54652: PUSH
54653: LD_VAR 0 15
54657: PUSH
54658: LD_INT 2
54660: ARRAY
54661: ST_TO_ADDR
// for i = 1 to hexes do
54662: LD_ADDR_VAR 0 7
54666: PUSH
54667: DOUBLE
54668: LD_INT 1
54670: DEC
54671: ST_TO_ADDR
54672: LD_VAR 0 12
54676: PUSH
54677: FOR_TO
54678: IFFALSE 55008
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54680: LD_VAR 0 12
54684: PUSH
54685: LD_VAR 0 7
54689: ARRAY
54690: PUSH
54691: LD_INT 1
54693: ARRAY
54694: PPUSH
54695: LD_VAR 0 12
54699: PUSH
54700: LD_VAR 0 7
54704: ARRAY
54705: PUSH
54706: LD_INT 2
54708: ARRAY
54709: PPUSH
54710: CALL_OW 488
54714: NOT
54715: PUSH
54716: LD_VAR 0 12
54720: PUSH
54721: LD_VAR 0 7
54725: ARRAY
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PPUSH
54731: LD_VAR 0 12
54735: PUSH
54736: LD_VAR 0 7
54740: ARRAY
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: CALL_OW 428
54750: PUSH
54751: LD_INT 0
54753: GREATER
54754: OR
54755: PUSH
54756: LD_VAR 0 12
54760: PUSH
54761: LD_VAR 0 7
54765: ARRAY
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PPUSH
54771: LD_VAR 0 12
54775: PUSH
54776: LD_VAR 0 7
54780: ARRAY
54781: PUSH
54782: LD_INT 2
54784: ARRAY
54785: PPUSH
54786: CALL_OW 351
54790: OR
54791: IFFALSE 54797
// exit ;
54793: POP
54794: POP
54795: GO 55089
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54797: LD_ADDR_VAR 0 8
54801: PUSH
54802: LD_VAR 0 12
54806: PUSH
54807: LD_VAR 0 7
54811: ARRAY
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: PPUSH
54817: LD_VAR 0 12
54821: PUSH
54822: LD_VAR 0 7
54826: ARRAY
54827: PUSH
54828: LD_INT 2
54830: ARRAY
54831: PPUSH
54832: CALL_OW 546
54836: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54837: LD_VAR 0 8
54841: PUSH
54842: LD_INT 1
54844: ARRAY
54845: PUSH
54846: LD_VAR 0 8
54850: PUSH
54851: LD_INT 2
54853: ARRAY
54854: PUSH
54855: LD_VAR 0 13
54859: PUSH
54860: LD_INT 2
54862: PLUS
54863: GREATER
54864: OR
54865: PUSH
54866: LD_VAR 0 8
54870: PUSH
54871: LD_INT 2
54873: ARRAY
54874: PUSH
54875: LD_VAR 0 13
54879: PUSH
54880: LD_INT 2
54882: MINUS
54883: LESS
54884: OR
54885: PUSH
54886: LD_VAR 0 8
54890: PUSH
54891: LD_INT 3
54893: ARRAY
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 8
54900: PUSH
54901: LD_INT 9
54903: PUSH
54904: LD_INT 10
54906: PUSH
54907: LD_INT 11
54909: PUSH
54910: LD_INT 12
54912: PUSH
54913: LD_INT 13
54915: PUSH
54916: LD_INT 16
54918: PUSH
54919: LD_INT 17
54921: PUSH
54922: LD_INT 18
54924: PUSH
54925: LD_INT 19
54927: PUSH
54928: LD_INT 20
54930: PUSH
54931: LD_INT 21
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: IN
54949: NOT
54950: OR
54951: PUSH
54952: LD_VAR 0 8
54956: PUSH
54957: LD_INT 5
54959: ARRAY
54960: NOT
54961: OR
54962: PUSH
54963: LD_VAR 0 8
54967: PUSH
54968: LD_INT 6
54970: ARRAY
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 7
54980: PUSH
54981: LD_INT 9
54983: PUSH
54984: LD_INT 10
54986: PUSH
54987: LD_INT 11
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: IN
54998: NOT
54999: OR
55000: IFFALSE 55006
// exit ;
55002: POP
55003: POP
55004: GO 55089
// end ;
55006: GO 54677
55008: POP
55009: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55010: LD_VAR 0 9
55014: PPUSH
55015: LD_VAR 0 3
55019: PPUSH
55020: LD_VAR 0 4
55024: PPUSH
55025: LD_INT 20
55027: PPUSH
55028: CALL 47041 0 4
55032: PUSH
55033: LD_INT 4
55035: ARRAY
55036: IFFALSE 55040
// exit ;
55038: GO 55089
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55040: LD_VAR 0 2
55044: PUSH
55045: LD_INT 29
55047: PUSH
55048: LD_INT 30
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: IN
55055: PUSH
55056: LD_VAR 0 3
55060: PPUSH
55061: LD_VAR 0 4
55065: PPUSH
55066: LD_VAR 0 9
55070: PPUSH
55071: CALL_OW 440
55075: NOT
55076: AND
55077: IFFALSE 55081
// exit ;
55079: GO 55089
// result := true ;
55081: LD_ADDR_VAR 0 6
55085: PUSH
55086: LD_INT 1
55088: ST_TO_ADDR
// end ;
55089: LD_VAR 0 6
55093: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55094: LD_INT 0
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
55100: PPUSH
55101: PPUSH
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
// result = [ ] ;
55154: LD_ADDR_VAR 0 7
55158: PUSH
55159: EMPTY
55160: ST_TO_ADDR
// temp_list = [ ] ;
55161: LD_ADDR_VAR 0 9
55165: PUSH
55166: EMPTY
55167: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55168: LD_VAR 0 4
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 4
55187: PUSH
55188: LD_INT 5
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: IN
55199: NOT
55200: PUSH
55201: LD_VAR 0 1
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: IN
55216: PUSH
55217: LD_VAR 0 5
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: IN
55236: NOT
55237: AND
55238: OR
55239: IFFALSE 55243
// exit ;
55241: GO 73634
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55243: LD_VAR 0 1
55247: PUSH
55248: LD_INT 6
55250: PUSH
55251: LD_INT 7
55253: PUSH
55254: LD_INT 8
55256: PUSH
55257: LD_INT 13
55259: PUSH
55260: LD_INT 12
55262: PUSH
55263: LD_INT 15
55265: PUSH
55266: LD_INT 11
55268: PUSH
55269: LD_INT 14
55271: PUSH
55272: LD_INT 10
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: IN
55286: IFFALSE 55296
// btype = b_lab ;
55288: LD_ADDR_VAR 0 1
55292: PUSH
55293: LD_INT 6
55295: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55296: LD_VAR 0 6
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: IN
55315: NOT
55316: PUSH
55317: LD_VAR 0 1
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: LD_INT 6
55336: PUSH
55337: LD_INT 36
55339: PUSH
55340: LD_INT 4
55342: PUSH
55343: LD_INT 5
55345: PUSH
55346: LD_INT 31
55348: PUSH
55349: LD_INT 32
55351: PUSH
55352: LD_INT 33
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: IN
55368: NOT
55369: PUSH
55370: LD_VAR 0 6
55374: PUSH
55375: LD_INT 1
55377: EQUAL
55378: AND
55379: OR
55380: PUSH
55381: LD_VAR 0 1
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: IN
55396: NOT
55397: PUSH
55398: LD_VAR 0 6
55402: PUSH
55403: LD_INT 2
55405: EQUAL
55406: AND
55407: OR
55408: IFFALSE 55418
// mode = 0 ;
55410: LD_ADDR_VAR 0 6
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// case mode of 0 :
55418: LD_VAR 0 6
55422: PUSH
55423: LD_INT 0
55425: DOUBLE
55426: EQUAL
55427: IFTRUE 55431
55429: GO 66884
55431: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55432: LD_ADDR_VAR 0 11
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55625: LD_ADDR_VAR 0 12
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55821: LD_ADDR_VAR 0 13
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 3
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56020: LD_ADDR_VAR 0 14
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56216: LD_ADDR_VAR 0 15
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56409: LD_ADDR_VAR 0 16
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56602: LD_ADDR_VAR 0 17
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56832: LD_ADDR_VAR 0 18
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57062: LD_ADDR_VAR 0 19
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57292: LD_ADDR_VAR 0 20
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57522: LD_ADDR_VAR 0 21
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57752: LD_ADDR_VAR 0 22
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57982: LD_ADDR_VAR 0 23
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58262: LD_ADDR_VAR 0 24
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58538: LD_ADDR_VAR 0 25
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58812: LD_ADDR_VAR 0 26
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59088: LD_ADDR_VAR 0 27
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59368: LD_ADDR_VAR 0 28
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59650: LD_ADDR_VAR 0 29
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59929: LD_ADDR_VAR 0 30
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60207: LD_ADDR_VAR 0 31
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60485: LD_ADDR_VAR 0 32
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60763: LD_ADDR_VAR 0 33
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61042: LD_ADDR_VAR 0 34
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61322: LD_ADDR_VAR 0 35
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61434: LD_ADDR_VAR 0 36
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61546: LD_ADDR_VAR 0 37
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61658: LD_ADDR_VAR 0 38
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61770: LD_ADDR_VAR 0 39
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61882: LD_ADDR_VAR 0 40
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61994: LD_ADDR_VAR 0 41
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 3
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62344: LD_ADDR_VAR 0 42
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62694: LD_ADDR_VAR 0 43
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63042: LD_ADDR_VAR 0 44
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 3
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 3
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: NEG
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: NEG
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63392: LD_ADDR_VAR 0 45
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 2
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: LD_INT 3
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 3
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: LD_INT 3
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 3
63701: NEG
63702: PUSH
63703: LD_INT 3
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63742: LD_ADDR_VAR 0 46
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 3
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: NEG
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: NEG
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64090: LD_ADDR_VAR 0 47
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: LD_INT 2
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64241: LD_ADDR_VAR 0 48
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64388: LD_ADDR_VAR 0 49
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64532: LD_ADDR_VAR 0 50
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64676: LD_ADDR_VAR 0 51
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 2
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64823: LD_ADDR_VAR 0 52
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64974: LD_ADDR_VAR 0 53
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 2
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65204: LD_ADDR_VAR 0 54
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: NEG
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65434: LD_ADDR_VAR 0 55
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65664: LD_ADDR_VAR 0 56
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65894: LD_ADDR_VAR 0 57
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: NEG
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66124: LD_ADDR_VAR 0 58
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: NEG
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66354: LD_ADDR_VAR 0 59
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: LD_INT 1
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: LD_INT 1
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66442: LD_ADDR_VAR 0 60
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: NEG
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66530: LD_ADDR_VAR 0 61
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66618: LD_ADDR_VAR 0 62
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 1
66687: NEG
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66706: LD_ADDR_VAR 0 63
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66794: LD_ADDR_VAR 0 64
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: ST_TO_ADDR
// end ; 1 :
66882: GO 72779
66884: LD_INT 1
66886: DOUBLE
66887: EQUAL
66888: IFTRUE 66892
66890: GO 69515
66892: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66893: LD_ADDR_VAR 0 11
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66937: LD_ADDR_VAR 0 12
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66978: LD_ADDR_VAR 0 13
66982: PUSH
66983: LD_INT 3
66985: PUSH
66986: LD_INT 2
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 2
67005: PUSH
67006: LD_INT 3
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67018: LD_ADDR_VAR 0 14
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 1
67045: NEG
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: LIST
67058: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67059: LD_ADDR_VAR 0 15
67063: PUSH
67064: LD_INT 2
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: NEG
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: LIST
67102: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67103: LD_ADDR_VAR 0 16
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: LD_INT 3
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67149: LD_ADDR_VAR 0 17
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67193: LD_ADDR_VAR 0 18
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67234: LD_ADDR_VAR 0 19
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: LD_INT 2
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 3
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67274: LD_ADDR_VAR 0 20
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 3
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: LD_INT 3
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 2
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67315: LD_ADDR_VAR 0 21
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67359: LD_ADDR_VAR 0 22
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67405: LD_ADDR_VAR 0 23
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: LD_INT 4
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67449: LD_ADDR_VAR 0 24
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 4
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67490: LD_ADDR_VAR 0 25
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 4
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: LD_INT 4
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67530: LD_ADDR_VAR 0 26
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67571: LD_ADDR_VAR 0 27
67575: PUSH
67576: LD_INT 3
67578: NEG
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: NEG
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 4
67600: NEG
67601: PUSH
67602: LD_INT 1
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67615: LD_ADDR_VAR 0 28
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: LD_INT 3
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67661: LD_ADDR_VAR 0 29
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: LD_INT 4
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: LD_INT 4
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: LD_INT 3
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 5
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 5
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 4
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: LD_INT 6
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 6
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: LD_INT 5
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67816: LD_ADDR_VAR 0 30
67820: PUSH
67821: LD_INT 2
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 3
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 4
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 4
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 5
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 5
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 5
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 6
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 6
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67959: LD_ADDR_VAR 0 31
67963: PUSH
67964: LD_INT 3
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 4
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 4
68006: PUSH
68007: LD_INT 4
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: PUSH
68017: LD_INT 4
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 5
68026: PUSH
68027: LD_INT 4
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 5
68036: PUSH
68037: LD_INT 5
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: LD_INT 5
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 6
68056: PUSH
68057: LD_INT 5
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 6
68066: PUSH
68067: LD_INT 6
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: LD_INT 6
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68098: LD_ADDR_VAR 0 32
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: LD_INT 2
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 4
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 4
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: LD_INT 3
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 1
68167: PUSH
68168: LD_INT 5
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 5
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: LD_INT 6
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: LD_INT 6
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 5
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68241: LD_ADDR_VAR 0 33
68245: PUSH
68246: LD_INT 2
68248: NEG
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: NEG
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 3
68270: NEG
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 3
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 4
68293: NEG
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: NEG
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 5
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 5
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 5
68350: NEG
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 6
68361: NEG
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 6
68372: NEG
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68396: LD_ADDR_VAR 0 34
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: LD_INT 3
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 2
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: LD_INT 3
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 3
68439: NEG
68440: PUSH
68441: LD_INT 4
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: LD_INT 3
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 4
68463: NEG
68464: PUSH
68465: LD_INT 4
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 4
68475: NEG
68476: PUSH
68477: LD_INT 5
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 5
68487: NEG
68488: PUSH
68489: LD_INT 4
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 5
68499: NEG
68500: PUSH
68501: LD_INT 5
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 5
68511: NEG
68512: PUSH
68513: LD_INT 6
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 6
68523: NEG
68524: PUSH
68525: LD_INT 5
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 6
68535: NEG
68536: PUSH
68537: LD_INT 6
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68559: LD_ADDR_VAR 0 41
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68603: LD_ADDR_VAR 0 42
68607: PUSH
68608: LD_INT 2
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: LD_INT 1
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68644: LD_ADDR_VAR 0 43
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: LD_INT 2
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 2
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: LIST
68683: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68684: LD_ADDR_VAR 0 44
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: LD_INT 3
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 2
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68725: LD_ADDR_VAR 0 45
68729: PUSH
68730: LD_INT 2
68732: NEG
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68769: LD_ADDR_VAR 0 46
68773: PUSH
68774: LD_INT 2
68776: NEG
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68815: LD_ADDR_VAR 0 47
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: PUSH
68836: LD_INT 3
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68848: LD_ADDR_VAR 0 48
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 1
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68879: LD_ADDR_VAR 0 49
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: LD_INT 2
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68908: LD_ADDR_VAR 0 50
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68937: LD_ADDR_VAR 0 51
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68968: LD_ADDR_VAR 0 52
68972: PUSH
68973: LD_INT 3
68975: NEG
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69001: LD_ADDR_VAR 0 53
69005: PUSH
69006: LD_INT 1
69008: NEG
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69045: LD_ADDR_VAR 0 54
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69086: LD_ADDR_VAR 0 55
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 2
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69126: LD_ADDR_VAR 0 56
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 3
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69167: LD_ADDR_VAR 0 57
69171: PUSH
69172: LD_INT 2
69174: NEG
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 3
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69211: LD_ADDR_VAR 0 58
69215: PUSH
69216: LD_INT 2
69218: NEG
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 3
69242: NEG
69243: PUSH
69244: LD_INT 3
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: LIST
69256: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69257: LD_ADDR_VAR 0 59
69261: PUSH
69262: LD_INT 1
69264: NEG
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: LIST
69300: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69301: LD_ADDR_VAR 0 60
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 2
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69342: LD_ADDR_VAR 0 61
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: LIST
69381: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69382: LD_ADDR_VAR 0 62
69386: PUSH
69387: LD_INT 1
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: LD_INT 2
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: PUSH
69411: LD_INT 1
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: LIST
69422: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69423: LD_ADDR_VAR 0 63
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 2
69441: NEG
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 2
69452: NEG
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: LIST
69466: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69467: LD_ADDR_VAR 0 64
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: LD_INT 2
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 2
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 2
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: ST_TO_ADDR
// end ; 2 :
69513: GO 72779
69515: LD_INT 2
69517: DOUBLE
69518: EQUAL
69519: IFTRUE 69523
69521: GO 72778
69523: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69524: LD_ADDR_VAR 0 29
69528: PUSH
69529: LD_INT 4
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 4
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 5
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 5
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 4
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 3
69592: PUSH
69593: LD_INT 1
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 5
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 3
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: LD_INT 2
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: LD_INT 3
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 4
69654: PUSH
69655: LD_INT 4
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 4
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: PUSH
69685: LD_INT 2
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: LD_INT 4
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: LD_INT 4
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: LD_INT 5
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: LD_INT 5
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: LD_INT 4
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: LD_INT 3
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 2
69786: PUSH
69787: LD_INT 5
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 2
69796: NEG
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 3
69818: NEG
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 2
69830: NEG
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 4
69863: NEG
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 4
69874: NEG
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 4
69886: NEG
69887: PUSH
69888: LD_INT 2
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: NEG
69899: PUSH
69900: LD_INT 2
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 4
69909: NEG
69910: PUSH
69911: LD_INT 4
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 4
69921: NEG
69922: PUSH
69923: LD_INT 5
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 3
69933: NEG
69934: PUSH
69935: LD_INT 4
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 3
69945: NEG
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 4
69957: NEG
69958: PUSH
69959: LD_INT 3
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 5
69969: NEG
69970: PUSH
69971: LD_INT 4
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: NEG
69982: PUSH
69983: LD_INT 5
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 3
69993: NEG
69994: PUSH
69995: LD_INT 5
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 5
70005: NEG
70006: PUSH
70007: LD_INT 3
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70062: LD_ADDR_VAR 0 30
70066: PUSH
70067: LD_INT 4
70069: PUSH
70070: LD_INT 4
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 5
70089: PUSH
70090: LD_INT 4
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: PUSH
70100: LD_INT 5
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 4
70109: PUSH
70110: LD_INT 5
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 4
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 5
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: LD_INT 5
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 1
70189: PUSH
70190: LD_INT 4
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 2
70241: NEG
70242: PUSH
70243: LD_INT 2
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 4
70263: NEG
70264: PUSH
70265: LD_INT 1
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: NEG
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 4
70297: NEG
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 5
70308: NEG
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 5
70319: NEG
70320: PUSH
70321: LD_INT 1
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 5
70331: NEG
70332: PUSH
70333: LD_INT 2
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: NEG
70344: PUSH
70345: LD_INT 2
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: NEG
70355: PUSH
70356: LD_INT 3
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 2
70378: NEG
70379: PUSH
70380: LD_INT 3
70382: NEG
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 2
70390: NEG
70391: PUSH
70392: LD_INT 2
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 3
70402: NEG
70403: PUSH
70404: LD_INT 2
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 4
70414: NEG
70415: PUSH
70416: LD_INT 3
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 4
70426: NEG
70427: PUSH
70428: LD_INT 4
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: NEG
70439: PUSH
70440: LD_INT 4
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 4
70450: NEG
70451: PUSH
70452: LD_INT 2
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: LD_INT 4
70465: NEG
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: LD_INT 5
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: LD_INT 4
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: LD_INT 3
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 3
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 1
70517: NEG
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 1
70529: NEG
70530: PUSH
70531: LD_INT 5
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 2
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: NEG
70553: PUSH
70554: LD_INT 5
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70609: LD_ADDR_VAR 0 31
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 4
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: LD_INT 4
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: LD_INT 5
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: LD_INT 5
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 1
70666: NEG
70667: PUSH
70668: LD_INT 4
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 1
70677: NEG
70678: PUSH
70679: LD_INT 3
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: LD_INT 5
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 2
70732: NEG
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 2
70743: NEG
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 3
70754: NEG
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: LD_INT 0
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 4
70776: NEG
70777: PUSH
70778: LD_INT 1
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 4
70788: NEG
70789: PUSH
70790: LD_INT 2
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 2
70800: NEG
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 4
70811: NEG
70812: PUSH
70813: LD_INT 4
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: NEG
70824: PUSH
70825: LD_INT 5
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 3
70835: NEG
70836: PUSH
70837: LD_INT 4
70839: NEG
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 3
70847: NEG
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 4
70859: NEG
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 5
70871: NEG
70872: PUSH
70873: LD_INT 4
70875: NEG
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 5
70883: NEG
70884: PUSH
70885: LD_INT 5
70887: NEG
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 3
70895: NEG
70896: PUSH
70897: LD_INT 5
70899: NEG
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 5
70907: NEG
70908: PUSH
70909: LD_INT 3
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 0
70930: PUSH
70931: LD_INT 4
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 1
70941: PUSH
70942: LD_INT 3
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: LD_INT 2
70955: NEG
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: LD_INT 2
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: PUSH
70976: LD_INT 3
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 1
70986: NEG
70987: PUSH
70988: LD_INT 4
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: LD_INT 4
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 4
71021: PUSH
71022: LD_INT 0
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 4
71031: PUSH
71032: LD_INT 1
71034: NEG
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 5
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 5
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 4
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 3
71082: PUSH
71083: LD_INT 1
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: LD_INT 2
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 5
71104: PUSH
71105: LD_INT 2
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71159: LD_ADDR_VAR 0 32
71163: PUSH
71164: LD_INT 4
71166: NEG
71167: PUSH
71168: LD_INT 0
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 4
71177: NEG
71178: PUSH
71179: LD_INT 1
71181: NEG
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 3
71189: NEG
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: LD_INT 1
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 5
71222: NEG
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 5
71233: NEG
71234: PUSH
71235: LD_INT 1
71237: NEG
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 5
71245: NEG
71246: PUSH
71247: LD_INT 2
71249: NEG
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 3
71257: NEG
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 3
71268: NEG
71269: PUSH
71270: LD_INT 3
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: LD_INT 4
71284: NEG
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 2
71292: NEG
71293: PUSH
71294: LD_INT 3
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 2
71304: NEG
71305: PUSH
71306: LD_INT 2
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 3
71316: NEG
71317: PUSH
71318: LD_INT 2
71320: NEG
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 4
71328: NEG
71329: PUSH
71330: LD_INT 3
71332: NEG
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 4
71340: NEG
71341: PUSH
71342: LD_INT 4
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 2
71352: NEG
71353: PUSH
71354: LD_INT 4
71356: NEG
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 4
71364: NEG
71365: PUSH
71366: LD_INT 2
71368: NEG
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 0
71376: PUSH
71377: LD_INT 4
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 5
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 1
71398: PUSH
71399: LD_INT 4
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: LD_INT 3
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 3
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: NEG
71432: PUSH
71433: LD_INT 4
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 1
71443: NEG
71444: PUSH
71445: LD_INT 5
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 2
71455: PUSH
71456: LD_INT 3
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: LD_INT 5
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 3
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 3
71488: PUSH
71489: LD_INT 1
71491: NEG
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 4
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 4
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: PUSH
71520: LD_INT 1
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 2
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: LD_INT 2
71553: NEG
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 4
71561: PUSH
71562: LD_INT 2
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: LD_INT 4
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 4
71581: PUSH
71582: LD_INT 3
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 5
71591: PUSH
71592: LD_INT 4
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 5
71601: PUSH
71602: LD_INT 5
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 4
71611: PUSH
71612: LD_INT 5
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 3
71621: PUSH
71622: LD_INT 4
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 3
71631: PUSH
71632: LD_INT 3
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 5
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 3
71651: PUSH
71652: LD_INT 5
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71706: LD_ADDR_VAR 0 33
71710: PUSH
71711: LD_INT 4
71713: NEG
71714: PUSH
71715: LD_INT 4
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: LD_INT 5
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 3
71737: NEG
71738: PUSH
71739: LD_INT 4
71741: NEG
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 3
71749: NEG
71750: PUSH
71751: LD_INT 3
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 4
71761: NEG
71762: PUSH
71763: LD_INT 3
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 5
71773: NEG
71774: PUSH
71775: LD_INT 4
71777: NEG
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 5
71785: NEG
71786: PUSH
71787: LD_INT 5
71789: NEG
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 3
71797: NEG
71798: PUSH
71799: LD_INT 5
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 5
71809: NEG
71810: PUSH
71811: LD_INT 3
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: LD_INT 3
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: LD_INT 4
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 1
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 2
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 0
71865: PUSH
71866: LD_INT 2
71868: NEG
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 1
71876: NEG
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: LD_INT 4
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 2
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 2
71911: NEG
71912: PUSH
71913: LD_INT 4
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 4
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 4
71933: PUSH
71934: LD_INT 1
71936: NEG
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 5
71944: PUSH
71945: LD_INT 0
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 5
71954: PUSH
71955: LD_INT 1
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 4
71964: PUSH
71965: LD_INT 1
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: LD_INT 1
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 3
71995: PUSH
71996: LD_INT 2
71998: NEG
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 5
72006: PUSH
72007: LD_INT 2
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 3
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 3
72026: PUSH
72027: LD_INT 2
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 4
72036: PUSH
72037: LD_INT 3
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: LD_INT 4
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: LD_INT 4
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: LD_INT 3
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 2
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 4
72086: PUSH
72087: LD_INT 2
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: LD_INT 4
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: LD_INT 4
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 0
72116: PUSH
72117: LD_INT 3
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 1
72126: PUSH
72127: LD_INT 4
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 1
72136: PUSH
72137: LD_INT 5
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 0
72146: PUSH
72147: LD_INT 5
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 1
72156: NEG
72157: PUSH
72158: LD_INT 4
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 1
72167: NEG
72168: PUSH
72169: LD_INT 3
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 2
72178: PUSH
72179: LD_INT 5
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 2
72188: NEG
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72244: LD_ADDR_VAR 0 34
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: LD_INT 4
72254: NEG
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 0
72262: PUSH
72263: LD_INT 5
72265: NEG
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: LD_INT 4
72276: NEG
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 1
72284: PUSH
72285: LD_INT 3
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 0
72295: PUSH
72296: LD_INT 3
72298: NEG
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 1
72306: NEG
72307: PUSH
72308: LD_INT 4
72310: NEG
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 1
72318: NEG
72319: PUSH
72320: LD_INT 5
72322: NEG
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 2
72330: PUSH
72331: LD_INT 3
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 5
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 3
72363: PUSH
72364: LD_INT 1
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 4
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 4
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 3
72394: PUSH
72395: LD_INT 1
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 2
72404: PUSH
72405: LD_INT 0
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 2
72414: PUSH
72415: LD_INT 1
72417: NEG
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 2
72425: PUSH
72426: LD_INT 2
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 4
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 4
72446: PUSH
72447: LD_INT 4
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 4
72456: PUSH
72457: LD_INT 3
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 5
72466: PUSH
72467: LD_INT 4
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 5
72476: PUSH
72477: LD_INT 5
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 4
72486: PUSH
72487: LD_INT 5
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 3
72496: PUSH
72497: LD_INT 4
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 3
72506: PUSH
72507: LD_INT 3
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 5
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 3
72526: PUSH
72527: LD_INT 5
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 0
72536: PUSH
72537: LD_INT 3
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: LD_INT 2
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 1
72556: PUSH
72557: LD_INT 3
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: LD_INT 4
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 0
72576: PUSH
72577: LD_INT 4
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 1
72586: NEG
72587: PUSH
72588: LD_INT 3
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 1
72597: NEG
72598: PUSH
72599: LD_INT 2
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: LD_INT 4
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 4
72629: NEG
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 4
72640: NEG
72641: PUSH
72642: LD_INT 1
72644: NEG
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 3
72652: NEG
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 3
72663: NEG
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 4
72674: NEG
72675: PUSH
72676: LD_INT 1
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 5
72685: NEG
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: LD_INT 5
72696: NEG
72697: PUSH
72698: LD_INT 1
72700: NEG
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 5
72708: NEG
72709: PUSH
72710: LD_INT 2
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 3
72720: NEG
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: ST_TO_ADDR
// end ; end ;
72776: GO 72779
72778: POP
// case btype of b_depot , b_warehouse :
72779: LD_VAR 0 1
72783: PUSH
72784: LD_INT 0
72786: DOUBLE
72787: EQUAL
72788: IFTRUE 72798
72790: LD_INT 1
72792: DOUBLE
72793: EQUAL
72794: IFTRUE 72798
72796: GO 72999
72798: POP
// case nation of nation_american :
72799: LD_VAR 0 5
72803: PUSH
72804: LD_INT 1
72806: DOUBLE
72807: EQUAL
72808: IFTRUE 72812
72810: GO 72868
72812: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72813: LD_ADDR_VAR 0 9
72817: PUSH
72818: LD_VAR 0 11
72822: PUSH
72823: LD_VAR 0 12
72827: PUSH
72828: LD_VAR 0 13
72832: PUSH
72833: LD_VAR 0 14
72837: PUSH
72838: LD_VAR 0 15
72842: PUSH
72843: LD_VAR 0 16
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: PUSH
72856: LD_VAR 0 4
72860: PUSH
72861: LD_INT 1
72863: PLUS
72864: ARRAY
72865: ST_TO_ADDR
72866: GO 72997
72868: LD_INT 2
72870: DOUBLE
72871: EQUAL
72872: IFTRUE 72876
72874: GO 72932
72876: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72877: LD_ADDR_VAR 0 9
72881: PUSH
72882: LD_VAR 0 17
72886: PUSH
72887: LD_VAR 0 18
72891: PUSH
72892: LD_VAR 0 19
72896: PUSH
72897: LD_VAR 0 20
72901: PUSH
72902: LD_VAR 0 21
72906: PUSH
72907: LD_VAR 0 22
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: PUSH
72920: LD_VAR 0 4
72924: PUSH
72925: LD_INT 1
72927: PLUS
72928: ARRAY
72929: ST_TO_ADDR
72930: GO 72997
72932: LD_INT 3
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72940
72938: GO 72996
72940: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72941: LD_ADDR_VAR 0 9
72945: PUSH
72946: LD_VAR 0 23
72950: PUSH
72951: LD_VAR 0 24
72955: PUSH
72956: LD_VAR 0 25
72960: PUSH
72961: LD_VAR 0 26
72965: PUSH
72966: LD_VAR 0 27
72970: PUSH
72971: LD_VAR 0 28
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: PUSH
72984: LD_VAR 0 4
72988: PUSH
72989: LD_INT 1
72991: PLUS
72992: ARRAY
72993: ST_TO_ADDR
72994: GO 72997
72996: POP
72997: GO 73552
72999: LD_INT 2
73001: DOUBLE
73002: EQUAL
73003: IFTRUE 73013
73005: LD_INT 3
73007: DOUBLE
73008: EQUAL
73009: IFTRUE 73013
73011: GO 73069
73013: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73014: LD_ADDR_VAR 0 9
73018: PUSH
73019: LD_VAR 0 29
73023: PUSH
73024: LD_VAR 0 30
73028: PUSH
73029: LD_VAR 0 31
73033: PUSH
73034: LD_VAR 0 32
73038: PUSH
73039: LD_VAR 0 33
73043: PUSH
73044: LD_VAR 0 34
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: LD_VAR 0 4
73061: PUSH
73062: LD_INT 1
73064: PLUS
73065: ARRAY
73066: ST_TO_ADDR
73067: GO 73552
73069: LD_INT 16
73071: DOUBLE
73072: EQUAL
73073: IFTRUE 73131
73075: LD_INT 17
73077: DOUBLE
73078: EQUAL
73079: IFTRUE 73131
73081: LD_INT 18
73083: DOUBLE
73084: EQUAL
73085: IFTRUE 73131
73087: LD_INT 19
73089: DOUBLE
73090: EQUAL
73091: IFTRUE 73131
73093: LD_INT 22
73095: DOUBLE
73096: EQUAL
73097: IFTRUE 73131
73099: LD_INT 20
73101: DOUBLE
73102: EQUAL
73103: IFTRUE 73131
73105: LD_INT 21
73107: DOUBLE
73108: EQUAL
73109: IFTRUE 73131
73111: LD_INT 23
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73131
73117: LD_INT 24
73119: DOUBLE
73120: EQUAL
73121: IFTRUE 73131
73123: LD_INT 25
73125: DOUBLE
73126: EQUAL
73127: IFTRUE 73131
73129: GO 73187
73131: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73132: LD_ADDR_VAR 0 9
73136: PUSH
73137: LD_VAR 0 35
73141: PUSH
73142: LD_VAR 0 36
73146: PUSH
73147: LD_VAR 0 37
73151: PUSH
73152: LD_VAR 0 38
73156: PUSH
73157: LD_VAR 0 39
73161: PUSH
73162: LD_VAR 0 40
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: PUSH
73175: LD_VAR 0 4
73179: PUSH
73180: LD_INT 1
73182: PLUS
73183: ARRAY
73184: ST_TO_ADDR
73185: GO 73552
73187: LD_INT 6
73189: DOUBLE
73190: EQUAL
73191: IFTRUE 73243
73193: LD_INT 7
73195: DOUBLE
73196: EQUAL
73197: IFTRUE 73243
73199: LD_INT 8
73201: DOUBLE
73202: EQUAL
73203: IFTRUE 73243
73205: LD_INT 13
73207: DOUBLE
73208: EQUAL
73209: IFTRUE 73243
73211: LD_INT 12
73213: DOUBLE
73214: EQUAL
73215: IFTRUE 73243
73217: LD_INT 15
73219: DOUBLE
73220: EQUAL
73221: IFTRUE 73243
73223: LD_INT 11
73225: DOUBLE
73226: EQUAL
73227: IFTRUE 73243
73229: LD_INT 14
73231: DOUBLE
73232: EQUAL
73233: IFTRUE 73243
73235: LD_INT 10
73237: DOUBLE
73238: EQUAL
73239: IFTRUE 73243
73241: GO 73299
73243: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73244: LD_ADDR_VAR 0 9
73248: PUSH
73249: LD_VAR 0 41
73253: PUSH
73254: LD_VAR 0 42
73258: PUSH
73259: LD_VAR 0 43
73263: PUSH
73264: LD_VAR 0 44
73268: PUSH
73269: LD_VAR 0 45
73273: PUSH
73274: LD_VAR 0 46
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: PUSH
73287: LD_VAR 0 4
73291: PUSH
73292: LD_INT 1
73294: PLUS
73295: ARRAY
73296: ST_TO_ADDR
73297: GO 73552
73299: LD_INT 36
73301: DOUBLE
73302: EQUAL
73303: IFTRUE 73307
73305: GO 73363
73307: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73308: LD_ADDR_VAR 0 9
73312: PUSH
73313: LD_VAR 0 47
73317: PUSH
73318: LD_VAR 0 48
73322: PUSH
73323: LD_VAR 0 49
73327: PUSH
73328: LD_VAR 0 50
73332: PUSH
73333: LD_VAR 0 51
73337: PUSH
73338: LD_VAR 0 52
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: PUSH
73351: LD_VAR 0 4
73355: PUSH
73356: LD_INT 1
73358: PLUS
73359: ARRAY
73360: ST_TO_ADDR
73361: GO 73552
73363: LD_INT 4
73365: DOUBLE
73366: EQUAL
73367: IFTRUE 73389
73369: LD_INT 5
73371: DOUBLE
73372: EQUAL
73373: IFTRUE 73389
73375: LD_INT 34
73377: DOUBLE
73378: EQUAL
73379: IFTRUE 73389
73381: LD_INT 37
73383: DOUBLE
73384: EQUAL
73385: IFTRUE 73389
73387: GO 73445
73389: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73390: LD_ADDR_VAR 0 9
73394: PUSH
73395: LD_VAR 0 53
73399: PUSH
73400: LD_VAR 0 54
73404: PUSH
73405: LD_VAR 0 55
73409: PUSH
73410: LD_VAR 0 56
73414: PUSH
73415: LD_VAR 0 57
73419: PUSH
73420: LD_VAR 0 58
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: PUSH
73433: LD_VAR 0 4
73437: PUSH
73438: LD_INT 1
73440: PLUS
73441: ARRAY
73442: ST_TO_ADDR
73443: GO 73552
73445: LD_INT 31
73447: DOUBLE
73448: EQUAL
73449: IFTRUE 73495
73451: LD_INT 32
73453: DOUBLE
73454: EQUAL
73455: IFTRUE 73495
73457: LD_INT 33
73459: DOUBLE
73460: EQUAL
73461: IFTRUE 73495
73463: LD_INT 27
73465: DOUBLE
73466: EQUAL
73467: IFTRUE 73495
73469: LD_INT 26
73471: DOUBLE
73472: EQUAL
73473: IFTRUE 73495
73475: LD_INT 28
73477: DOUBLE
73478: EQUAL
73479: IFTRUE 73495
73481: LD_INT 29
73483: DOUBLE
73484: EQUAL
73485: IFTRUE 73495
73487: LD_INT 30
73489: DOUBLE
73490: EQUAL
73491: IFTRUE 73495
73493: GO 73551
73495: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73496: LD_ADDR_VAR 0 9
73500: PUSH
73501: LD_VAR 0 59
73505: PUSH
73506: LD_VAR 0 60
73510: PUSH
73511: LD_VAR 0 61
73515: PUSH
73516: LD_VAR 0 62
73520: PUSH
73521: LD_VAR 0 63
73525: PUSH
73526: LD_VAR 0 64
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: PUSH
73539: LD_VAR 0 4
73543: PUSH
73544: LD_INT 1
73546: PLUS
73547: ARRAY
73548: ST_TO_ADDR
73549: GO 73552
73551: POP
// temp_list2 = [ ] ;
73552: LD_ADDR_VAR 0 10
73556: PUSH
73557: EMPTY
73558: ST_TO_ADDR
// for i in temp_list do
73559: LD_ADDR_VAR 0 8
73563: PUSH
73564: LD_VAR 0 9
73568: PUSH
73569: FOR_IN
73570: IFFALSE 73622
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73572: LD_ADDR_VAR 0 10
73576: PUSH
73577: LD_VAR 0 10
73581: PUSH
73582: LD_VAR 0 8
73586: PUSH
73587: LD_INT 1
73589: ARRAY
73590: PUSH
73591: LD_VAR 0 2
73595: PLUS
73596: PUSH
73597: LD_VAR 0 8
73601: PUSH
73602: LD_INT 2
73604: ARRAY
73605: PUSH
73606: LD_VAR 0 3
73610: PLUS
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: EMPTY
73617: LIST
73618: ADD
73619: ST_TO_ADDR
73620: GO 73569
73622: POP
73623: POP
// result = temp_list2 ;
73624: LD_ADDR_VAR 0 7
73628: PUSH
73629: LD_VAR 0 10
73633: ST_TO_ADDR
// end ;
73634: LD_VAR 0 7
73638: RET
// export function EnemyInRange ( unit , dist ) ; begin
73639: LD_INT 0
73641: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73642: LD_ADDR_VAR 0 3
73646: PUSH
73647: LD_VAR 0 1
73651: PPUSH
73652: CALL_OW 255
73656: PPUSH
73657: LD_VAR 0 1
73661: PPUSH
73662: CALL_OW 250
73666: PPUSH
73667: LD_VAR 0 1
73671: PPUSH
73672: CALL_OW 251
73676: PPUSH
73677: LD_VAR 0 2
73681: PPUSH
73682: CALL 47041 0 4
73686: PUSH
73687: LD_INT 4
73689: ARRAY
73690: ST_TO_ADDR
// end ;
73691: LD_VAR 0 3
73695: RET
// export function PlayerSeeMe ( unit ) ; begin
73696: LD_INT 0
73698: PPUSH
// result := See ( your_side , unit ) ;
73699: LD_ADDR_VAR 0 2
73703: PUSH
73704: LD_OWVAR 2
73708: PPUSH
73709: LD_VAR 0 1
73713: PPUSH
73714: CALL_OW 292
73718: ST_TO_ADDR
// end ;
73719: LD_VAR 0 2
73723: RET
// export function ReverseDir ( unit ) ; begin
73724: LD_INT 0
73726: PPUSH
// if not unit then
73727: LD_VAR 0 1
73731: NOT
73732: IFFALSE 73736
// exit ;
73734: GO 73759
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73736: LD_ADDR_VAR 0 2
73740: PUSH
73741: LD_VAR 0 1
73745: PPUSH
73746: CALL_OW 254
73750: PUSH
73751: LD_INT 3
73753: PLUS
73754: PUSH
73755: LD_INT 6
73757: MOD
73758: ST_TO_ADDR
// end ;
73759: LD_VAR 0 2
73763: RET
// export function ReverseArray ( array ) ; var i ; begin
73764: LD_INT 0
73766: PPUSH
73767: PPUSH
// if not array then
73768: LD_VAR 0 1
73772: NOT
73773: IFFALSE 73777
// exit ;
73775: GO 73832
// result := [ ] ;
73777: LD_ADDR_VAR 0 2
73781: PUSH
73782: EMPTY
73783: ST_TO_ADDR
// for i := array downto 1 do
73784: LD_ADDR_VAR 0 3
73788: PUSH
73789: DOUBLE
73790: LD_VAR 0 1
73794: INC
73795: ST_TO_ADDR
73796: LD_INT 1
73798: PUSH
73799: FOR_DOWNTO
73800: IFFALSE 73830
// result := Join ( result , array [ i ] ) ;
73802: LD_ADDR_VAR 0 2
73806: PUSH
73807: LD_VAR 0 2
73811: PPUSH
73812: LD_VAR 0 1
73816: PUSH
73817: LD_VAR 0 3
73821: ARRAY
73822: PPUSH
73823: CALL 78457 0 2
73827: ST_TO_ADDR
73828: GO 73799
73830: POP
73831: POP
// end ;
73832: LD_VAR 0 2
73836: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73837: LD_INT 0
73839: PPUSH
73840: PPUSH
73841: PPUSH
73842: PPUSH
73843: PPUSH
73844: PPUSH
// if not unit or not hexes then
73845: LD_VAR 0 1
73849: NOT
73850: PUSH
73851: LD_VAR 0 2
73855: NOT
73856: OR
73857: IFFALSE 73861
// exit ;
73859: GO 73984
// dist := 9999 ;
73861: LD_ADDR_VAR 0 5
73865: PUSH
73866: LD_INT 9999
73868: ST_TO_ADDR
// for i = 1 to hexes do
73869: LD_ADDR_VAR 0 4
73873: PUSH
73874: DOUBLE
73875: LD_INT 1
73877: DEC
73878: ST_TO_ADDR
73879: LD_VAR 0 2
73883: PUSH
73884: FOR_TO
73885: IFFALSE 73972
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73887: LD_ADDR_VAR 0 6
73891: PUSH
73892: LD_VAR 0 1
73896: PPUSH
73897: LD_VAR 0 2
73901: PUSH
73902: LD_VAR 0 4
73906: ARRAY
73907: PUSH
73908: LD_INT 1
73910: ARRAY
73911: PPUSH
73912: LD_VAR 0 2
73916: PUSH
73917: LD_VAR 0 4
73921: ARRAY
73922: PUSH
73923: LD_INT 2
73925: ARRAY
73926: PPUSH
73927: CALL_OW 297
73931: ST_TO_ADDR
// if tdist < dist then
73932: LD_VAR 0 6
73936: PUSH
73937: LD_VAR 0 5
73941: LESS
73942: IFFALSE 73970
// begin hex := hexes [ i ] ;
73944: LD_ADDR_VAR 0 8
73948: PUSH
73949: LD_VAR 0 2
73953: PUSH
73954: LD_VAR 0 4
73958: ARRAY
73959: ST_TO_ADDR
// dist := tdist ;
73960: LD_ADDR_VAR 0 5
73964: PUSH
73965: LD_VAR 0 6
73969: ST_TO_ADDR
// end ; end ;
73970: GO 73884
73972: POP
73973: POP
// result := hex ;
73974: LD_ADDR_VAR 0 3
73978: PUSH
73979: LD_VAR 0 8
73983: ST_TO_ADDR
// end ;
73984: LD_VAR 0 3
73988: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73989: LD_INT 0
73991: PPUSH
73992: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73993: LD_VAR 0 1
73997: NOT
73998: PUSH
73999: LD_VAR 0 1
74003: PUSH
74004: LD_INT 21
74006: PUSH
74007: LD_INT 2
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 23
74016: PUSH
74017: LD_INT 2
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PPUSH
74028: CALL_OW 69
74032: IN
74033: NOT
74034: OR
74035: IFFALSE 74039
// exit ;
74037: GO 74086
// for i = 1 to 3 do
74039: LD_ADDR_VAR 0 3
74043: PUSH
74044: DOUBLE
74045: LD_INT 1
74047: DEC
74048: ST_TO_ADDR
74049: LD_INT 3
74051: PUSH
74052: FOR_TO
74053: IFFALSE 74084
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74055: LD_VAR 0 1
74059: PPUSH
74060: CALL_OW 250
74064: PPUSH
74065: LD_VAR 0 1
74069: PPUSH
74070: CALL_OW 251
74074: PPUSH
74075: LD_INT 1
74077: PPUSH
74078: CALL_OW 453
74082: GO 74052
74084: POP
74085: POP
// end ;
74086: LD_VAR 0 2
74090: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74091: LD_INT 0
74093: PPUSH
74094: PPUSH
74095: PPUSH
74096: PPUSH
74097: PPUSH
74098: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74099: LD_VAR 0 1
74103: NOT
74104: PUSH
74105: LD_VAR 0 2
74109: NOT
74110: OR
74111: PUSH
74112: LD_VAR 0 1
74116: PPUSH
74117: CALL_OW 314
74121: OR
74122: IFFALSE 74126
// exit ;
74124: GO 74567
// x := GetX ( enemy_unit ) ;
74126: LD_ADDR_VAR 0 7
74130: PUSH
74131: LD_VAR 0 2
74135: PPUSH
74136: CALL_OW 250
74140: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74141: LD_ADDR_VAR 0 8
74145: PUSH
74146: LD_VAR 0 2
74150: PPUSH
74151: CALL_OW 251
74155: ST_TO_ADDR
// if not x or not y then
74156: LD_VAR 0 7
74160: NOT
74161: PUSH
74162: LD_VAR 0 8
74166: NOT
74167: OR
74168: IFFALSE 74172
// exit ;
74170: GO 74567
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74172: LD_ADDR_VAR 0 6
74176: PUSH
74177: LD_VAR 0 7
74181: PPUSH
74182: LD_INT 0
74184: PPUSH
74185: LD_INT 4
74187: PPUSH
74188: CALL_OW 272
74192: PUSH
74193: LD_VAR 0 8
74197: PPUSH
74198: LD_INT 0
74200: PPUSH
74201: LD_INT 4
74203: PPUSH
74204: CALL_OW 273
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_VAR 0 7
74217: PPUSH
74218: LD_INT 1
74220: PPUSH
74221: LD_INT 4
74223: PPUSH
74224: CALL_OW 272
74228: PUSH
74229: LD_VAR 0 8
74233: PPUSH
74234: LD_INT 1
74236: PPUSH
74237: LD_INT 4
74239: PPUSH
74240: CALL_OW 273
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_VAR 0 7
74253: PPUSH
74254: LD_INT 2
74256: PPUSH
74257: LD_INT 4
74259: PPUSH
74260: CALL_OW 272
74264: PUSH
74265: LD_VAR 0 8
74269: PPUSH
74270: LD_INT 2
74272: PPUSH
74273: LD_INT 4
74275: PPUSH
74276: CALL_OW 273
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_VAR 0 7
74289: PPUSH
74290: LD_INT 3
74292: PPUSH
74293: LD_INT 4
74295: PPUSH
74296: CALL_OW 272
74300: PUSH
74301: LD_VAR 0 8
74305: PPUSH
74306: LD_INT 3
74308: PPUSH
74309: LD_INT 4
74311: PPUSH
74312: CALL_OW 273
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_VAR 0 7
74325: PPUSH
74326: LD_INT 4
74328: PPUSH
74329: LD_INT 4
74331: PPUSH
74332: CALL_OW 272
74336: PUSH
74337: LD_VAR 0 8
74341: PPUSH
74342: LD_INT 4
74344: PPUSH
74345: LD_INT 4
74347: PPUSH
74348: CALL_OW 273
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 7
74361: PPUSH
74362: LD_INT 5
74364: PPUSH
74365: LD_INT 4
74367: PPUSH
74368: CALL_OW 272
74372: PUSH
74373: LD_VAR 0 8
74377: PPUSH
74378: LD_INT 5
74380: PPUSH
74381: LD_INT 4
74383: PPUSH
74384: CALL_OW 273
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: ST_TO_ADDR
// for i = tmp downto 1 do
74401: LD_ADDR_VAR 0 4
74405: PUSH
74406: DOUBLE
74407: LD_VAR 0 6
74411: INC
74412: ST_TO_ADDR
74413: LD_INT 1
74415: PUSH
74416: FOR_DOWNTO
74417: IFFALSE 74518
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74419: LD_VAR 0 6
74423: PUSH
74424: LD_VAR 0 4
74428: ARRAY
74429: PUSH
74430: LD_INT 1
74432: ARRAY
74433: PPUSH
74434: LD_VAR 0 6
74438: PUSH
74439: LD_VAR 0 4
74443: ARRAY
74444: PUSH
74445: LD_INT 2
74447: ARRAY
74448: PPUSH
74449: CALL_OW 488
74453: NOT
74454: PUSH
74455: LD_VAR 0 6
74459: PUSH
74460: LD_VAR 0 4
74464: ARRAY
74465: PUSH
74466: LD_INT 1
74468: ARRAY
74469: PPUSH
74470: LD_VAR 0 6
74474: PUSH
74475: LD_VAR 0 4
74479: ARRAY
74480: PUSH
74481: LD_INT 2
74483: ARRAY
74484: PPUSH
74485: CALL_OW 428
74489: PUSH
74490: LD_INT 0
74492: NONEQUAL
74493: OR
74494: IFFALSE 74516
// tmp := Delete ( tmp , i ) ;
74496: LD_ADDR_VAR 0 6
74500: PUSH
74501: LD_VAR 0 6
74505: PPUSH
74506: LD_VAR 0 4
74510: PPUSH
74511: CALL_OW 3
74515: ST_TO_ADDR
74516: GO 74416
74518: POP
74519: POP
// j := GetClosestHex ( unit , tmp ) ;
74520: LD_ADDR_VAR 0 5
74524: PUSH
74525: LD_VAR 0 1
74529: PPUSH
74530: LD_VAR 0 6
74534: PPUSH
74535: CALL 73837 0 2
74539: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74540: LD_VAR 0 1
74544: PPUSH
74545: LD_VAR 0 5
74549: PUSH
74550: LD_INT 1
74552: ARRAY
74553: PPUSH
74554: LD_VAR 0 5
74558: PUSH
74559: LD_INT 2
74561: ARRAY
74562: PPUSH
74563: CALL_OW 111
// end ;
74567: LD_VAR 0 3
74571: RET
// export function PrepareApemanSoldier ( ) ; begin
74572: LD_INT 0
74574: PPUSH
// uc_nation := 0 ;
74575: LD_ADDR_OWVAR 21
74579: PUSH
74580: LD_INT 0
74582: ST_TO_ADDR
// hc_sex := sex_male ;
74583: LD_ADDR_OWVAR 27
74587: PUSH
74588: LD_INT 1
74590: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74591: LD_ADDR_OWVAR 28
74595: PUSH
74596: LD_INT 15
74598: ST_TO_ADDR
// hc_gallery :=  ;
74599: LD_ADDR_OWVAR 33
74603: PUSH
74604: LD_STRING 
74606: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74607: LD_ADDR_OWVAR 31
74611: PUSH
74612: LD_INT 0
74614: PPUSH
74615: LD_INT 3
74617: PPUSH
74618: CALL_OW 12
74622: PUSH
74623: LD_INT 0
74625: PPUSH
74626: LD_INT 3
74628: PPUSH
74629: CALL_OW 12
74633: PUSH
74634: LD_INT 0
74636: PUSH
74637: LD_INT 0
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: ST_TO_ADDR
// end ;
74646: LD_VAR 0 1
74650: RET
// export function PrepareApemanEngineer ( ) ; begin
74651: LD_INT 0
74653: PPUSH
// uc_nation := 0 ;
74654: LD_ADDR_OWVAR 21
74658: PUSH
74659: LD_INT 0
74661: ST_TO_ADDR
// hc_sex := sex_male ;
74662: LD_ADDR_OWVAR 27
74666: PUSH
74667: LD_INT 1
74669: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74670: LD_ADDR_OWVAR 28
74674: PUSH
74675: LD_INT 16
74677: ST_TO_ADDR
// hc_gallery :=  ;
74678: LD_ADDR_OWVAR 33
74682: PUSH
74683: LD_STRING 
74685: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74686: LD_ADDR_OWVAR 31
74690: PUSH
74691: LD_INT 0
74693: PPUSH
74694: LD_INT 3
74696: PPUSH
74697: CALL_OW 12
74701: PUSH
74702: LD_INT 0
74704: PPUSH
74705: LD_INT 3
74707: PPUSH
74708: CALL_OW 12
74712: PUSH
74713: LD_INT 0
74715: PUSH
74716: LD_INT 0
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: ST_TO_ADDR
// end ;
74725: LD_VAR 0 1
74729: RET
// export function PrepareApeman ( agressivity ) ; begin
74730: LD_INT 0
74732: PPUSH
// uc_side := 0 ;
74733: LD_ADDR_OWVAR 20
74737: PUSH
74738: LD_INT 0
74740: ST_TO_ADDR
// uc_nation := 0 ;
74741: LD_ADDR_OWVAR 21
74745: PUSH
74746: LD_INT 0
74748: ST_TO_ADDR
// hc_sex := sex_male ;
74749: LD_ADDR_OWVAR 27
74753: PUSH
74754: LD_INT 1
74756: ST_TO_ADDR
// hc_class := class_apeman ;
74757: LD_ADDR_OWVAR 28
74761: PUSH
74762: LD_INT 12
74764: ST_TO_ADDR
// hc_gallery :=  ;
74765: LD_ADDR_OWVAR 33
74769: PUSH
74770: LD_STRING 
74772: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74773: LD_ADDR_OWVAR 35
74777: PUSH
74778: LD_VAR 0 1
74782: NEG
74783: PPUSH
74784: LD_VAR 0 1
74788: PPUSH
74789: CALL_OW 12
74793: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74794: LD_ADDR_OWVAR 31
74798: PUSH
74799: LD_INT 0
74801: PPUSH
74802: LD_INT 3
74804: PPUSH
74805: CALL_OW 12
74809: PUSH
74810: LD_INT 0
74812: PPUSH
74813: LD_INT 3
74815: PPUSH
74816: CALL_OW 12
74820: PUSH
74821: LD_INT 0
74823: PUSH
74824: LD_INT 0
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: ST_TO_ADDR
// end ;
74833: LD_VAR 0 2
74837: RET
// export function PrepareTiger ( agressivity ) ; begin
74838: LD_INT 0
74840: PPUSH
// uc_side := 0 ;
74841: LD_ADDR_OWVAR 20
74845: PUSH
74846: LD_INT 0
74848: ST_TO_ADDR
// uc_nation := 0 ;
74849: LD_ADDR_OWVAR 21
74853: PUSH
74854: LD_INT 0
74856: ST_TO_ADDR
// hc_class := class_tiger ;
74857: LD_ADDR_OWVAR 28
74861: PUSH
74862: LD_INT 14
74864: ST_TO_ADDR
// hc_gallery :=  ;
74865: LD_ADDR_OWVAR 33
74869: PUSH
74870: LD_STRING 
74872: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74873: LD_ADDR_OWVAR 35
74877: PUSH
74878: LD_VAR 0 1
74882: NEG
74883: PPUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: CALL_OW 12
74893: ST_TO_ADDR
// end ;
74894: LD_VAR 0 2
74898: RET
// export function PrepareEnchidna ( ) ; begin
74899: LD_INT 0
74901: PPUSH
// uc_side := 0 ;
74902: LD_ADDR_OWVAR 20
74906: PUSH
74907: LD_INT 0
74909: ST_TO_ADDR
// uc_nation := 0 ;
74910: LD_ADDR_OWVAR 21
74914: PUSH
74915: LD_INT 0
74917: ST_TO_ADDR
// hc_class := class_baggie ;
74918: LD_ADDR_OWVAR 28
74922: PUSH
74923: LD_INT 13
74925: ST_TO_ADDR
// hc_gallery :=  ;
74926: LD_ADDR_OWVAR 33
74930: PUSH
74931: LD_STRING 
74933: ST_TO_ADDR
// end ;
74934: LD_VAR 0 1
74938: RET
// export function PrepareFrog ( ) ; begin
74939: LD_INT 0
74941: PPUSH
// uc_side := 0 ;
74942: LD_ADDR_OWVAR 20
74946: PUSH
74947: LD_INT 0
74949: ST_TO_ADDR
// uc_nation := 0 ;
74950: LD_ADDR_OWVAR 21
74954: PUSH
74955: LD_INT 0
74957: ST_TO_ADDR
// hc_class := class_frog ;
74958: LD_ADDR_OWVAR 28
74962: PUSH
74963: LD_INT 19
74965: ST_TO_ADDR
// hc_gallery :=  ;
74966: LD_ADDR_OWVAR 33
74970: PUSH
74971: LD_STRING 
74973: ST_TO_ADDR
// end ;
74974: LD_VAR 0 1
74978: RET
// export function PrepareFish ( ) ; begin
74979: LD_INT 0
74981: PPUSH
// uc_side := 0 ;
74982: LD_ADDR_OWVAR 20
74986: PUSH
74987: LD_INT 0
74989: ST_TO_ADDR
// uc_nation := 0 ;
74990: LD_ADDR_OWVAR 21
74994: PUSH
74995: LD_INT 0
74997: ST_TO_ADDR
// hc_class := class_fish ;
74998: LD_ADDR_OWVAR 28
75002: PUSH
75003: LD_INT 20
75005: ST_TO_ADDR
// hc_gallery :=  ;
75006: LD_ADDR_OWVAR 33
75010: PUSH
75011: LD_STRING 
75013: ST_TO_ADDR
// end ;
75014: LD_VAR 0 1
75018: RET
// export function PrepareBird ( ) ; begin
75019: LD_INT 0
75021: PPUSH
// uc_side := 0 ;
75022: LD_ADDR_OWVAR 20
75026: PUSH
75027: LD_INT 0
75029: ST_TO_ADDR
// uc_nation := 0 ;
75030: LD_ADDR_OWVAR 21
75034: PUSH
75035: LD_INT 0
75037: ST_TO_ADDR
// hc_class := class_phororhacos ;
75038: LD_ADDR_OWVAR 28
75042: PUSH
75043: LD_INT 18
75045: ST_TO_ADDR
// hc_gallery :=  ;
75046: LD_ADDR_OWVAR 33
75050: PUSH
75051: LD_STRING 
75053: ST_TO_ADDR
// end ;
75054: LD_VAR 0 1
75058: RET
// export function PrepareHorse ( ) ; begin
75059: LD_INT 0
75061: PPUSH
// uc_side := 0 ;
75062: LD_ADDR_OWVAR 20
75066: PUSH
75067: LD_INT 0
75069: ST_TO_ADDR
// uc_nation := 0 ;
75070: LD_ADDR_OWVAR 21
75074: PUSH
75075: LD_INT 0
75077: ST_TO_ADDR
// hc_class := class_horse ;
75078: LD_ADDR_OWVAR 28
75082: PUSH
75083: LD_INT 21
75085: ST_TO_ADDR
// hc_gallery :=  ;
75086: LD_ADDR_OWVAR 33
75090: PUSH
75091: LD_STRING 
75093: ST_TO_ADDR
// end ;
75094: LD_VAR 0 1
75098: RET
// export function PrepareMastodont ( ) ; begin
75099: LD_INT 0
75101: PPUSH
// uc_side := 0 ;
75102: LD_ADDR_OWVAR 20
75106: PUSH
75107: LD_INT 0
75109: ST_TO_ADDR
// uc_nation := 0 ;
75110: LD_ADDR_OWVAR 21
75114: PUSH
75115: LD_INT 0
75117: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75118: LD_ADDR_OWVAR 37
75122: PUSH
75123: LD_INT 31
75125: ST_TO_ADDR
// vc_control := control_rider ;
75126: LD_ADDR_OWVAR 38
75130: PUSH
75131: LD_INT 4
75133: ST_TO_ADDR
// end ;
75134: LD_VAR 0 1
75138: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75139: LD_INT 0
75141: PPUSH
75142: PPUSH
75143: PPUSH
// uc_side = 0 ;
75144: LD_ADDR_OWVAR 20
75148: PUSH
75149: LD_INT 0
75151: ST_TO_ADDR
// uc_nation = 0 ;
75152: LD_ADDR_OWVAR 21
75156: PUSH
75157: LD_INT 0
75159: ST_TO_ADDR
// InitHc_All ( ) ;
75160: CALL_OW 584
// InitVc ;
75164: CALL_OW 20
// if mastodonts then
75168: LD_VAR 0 6
75172: IFFALSE 75239
// for i = 1 to mastodonts do
75174: LD_ADDR_VAR 0 11
75178: PUSH
75179: DOUBLE
75180: LD_INT 1
75182: DEC
75183: ST_TO_ADDR
75184: LD_VAR 0 6
75188: PUSH
75189: FOR_TO
75190: IFFALSE 75237
// begin vc_chassis := 31 ;
75192: LD_ADDR_OWVAR 37
75196: PUSH
75197: LD_INT 31
75199: ST_TO_ADDR
// vc_control := control_rider ;
75200: LD_ADDR_OWVAR 38
75204: PUSH
75205: LD_INT 4
75207: ST_TO_ADDR
// animal := CreateVehicle ;
75208: LD_ADDR_VAR 0 12
75212: PUSH
75213: CALL_OW 45
75217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75218: LD_VAR 0 12
75222: PPUSH
75223: LD_VAR 0 8
75227: PPUSH
75228: LD_INT 0
75230: PPUSH
75231: CALL 77374 0 3
// end ;
75235: GO 75189
75237: POP
75238: POP
// if horses then
75239: LD_VAR 0 5
75243: IFFALSE 75310
// for i = 1 to horses do
75245: LD_ADDR_VAR 0 11
75249: PUSH
75250: DOUBLE
75251: LD_INT 1
75253: DEC
75254: ST_TO_ADDR
75255: LD_VAR 0 5
75259: PUSH
75260: FOR_TO
75261: IFFALSE 75308
// begin hc_class := 21 ;
75263: LD_ADDR_OWVAR 28
75267: PUSH
75268: LD_INT 21
75270: ST_TO_ADDR
// hc_gallery :=  ;
75271: LD_ADDR_OWVAR 33
75275: PUSH
75276: LD_STRING 
75278: ST_TO_ADDR
// animal := CreateHuman ;
75279: LD_ADDR_VAR 0 12
75283: PUSH
75284: CALL_OW 44
75288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75289: LD_VAR 0 12
75293: PPUSH
75294: LD_VAR 0 8
75298: PPUSH
75299: LD_INT 0
75301: PPUSH
75302: CALL 77374 0 3
// end ;
75306: GO 75260
75308: POP
75309: POP
// if birds then
75310: LD_VAR 0 1
75314: IFFALSE 75381
// for i = 1 to birds do
75316: LD_ADDR_VAR 0 11
75320: PUSH
75321: DOUBLE
75322: LD_INT 1
75324: DEC
75325: ST_TO_ADDR
75326: LD_VAR 0 1
75330: PUSH
75331: FOR_TO
75332: IFFALSE 75379
// begin hc_class = 18 ;
75334: LD_ADDR_OWVAR 28
75338: PUSH
75339: LD_INT 18
75341: ST_TO_ADDR
// hc_gallery =  ;
75342: LD_ADDR_OWVAR 33
75346: PUSH
75347: LD_STRING 
75349: ST_TO_ADDR
// animal := CreateHuman ;
75350: LD_ADDR_VAR 0 12
75354: PUSH
75355: CALL_OW 44
75359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75360: LD_VAR 0 12
75364: PPUSH
75365: LD_VAR 0 8
75369: PPUSH
75370: LD_INT 0
75372: PPUSH
75373: CALL 77374 0 3
// end ;
75377: GO 75331
75379: POP
75380: POP
// if tigers then
75381: LD_VAR 0 2
75385: IFFALSE 75469
// for i = 1 to tigers do
75387: LD_ADDR_VAR 0 11
75391: PUSH
75392: DOUBLE
75393: LD_INT 1
75395: DEC
75396: ST_TO_ADDR
75397: LD_VAR 0 2
75401: PUSH
75402: FOR_TO
75403: IFFALSE 75467
// begin hc_class = class_tiger ;
75405: LD_ADDR_OWVAR 28
75409: PUSH
75410: LD_INT 14
75412: ST_TO_ADDR
// hc_gallery =  ;
75413: LD_ADDR_OWVAR 33
75417: PUSH
75418: LD_STRING 
75420: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75421: LD_ADDR_OWVAR 35
75425: PUSH
75426: LD_INT 7
75428: NEG
75429: PPUSH
75430: LD_INT 7
75432: PPUSH
75433: CALL_OW 12
75437: ST_TO_ADDR
// animal := CreateHuman ;
75438: LD_ADDR_VAR 0 12
75442: PUSH
75443: CALL_OW 44
75447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75448: LD_VAR 0 12
75452: PPUSH
75453: LD_VAR 0 8
75457: PPUSH
75458: LD_INT 0
75460: PPUSH
75461: CALL 77374 0 3
// end ;
75465: GO 75402
75467: POP
75468: POP
// if apemans then
75469: LD_VAR 0 3
75473: IFFALSE 75596
// for i = 1 to apemans do
75475: LD_ADDR_VAR 0 11
75479: PUSH
75480: DOUBLE
75481: LD_INT 1
75483: DEC
75484: ST_TO_ADDR
75485: LD_VAR 0 3
75489: PUSH
75490: FOR_TO
75491: IFFALSE 75594
// begin hc_class = class_apeman ;
75493: LD_ADDR_OWVAR 28
75497: PUSH
75498: LD_INT 12
75500: ST_TO_ADDR
// hc_gallery =  ;
75501: LD_ADDR_OWVAR 33
75505: PUSH
75506: LD_STRING 
75508: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75509: LD_ADDR_OWVAR 35
75513: PUSH
75514: LD_INT 2
75516: NEG
75517: PPUSH
75518: LD_INT 2
75520: PPUSH
75521: CALL_OW 12
75525: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75526: LD_ADDR_OWVAR 31
75530: PUSH
75531: LD_INT 1
75533: PPUSH
75534: LD_INT 3
75536: PPUSH
75537: CALL_OW 12
75541: PUSH
75542: LD_INT 1
75544: PPUSH
75545: LD_INT 3
75547: PPUSH
75548: CALL_OW 12
75552: PUSH
75553: LD_INT 0
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: ST_TO_ADDR
// animal := CreateHuman ;
75565: LD_ADDR_VAR 0 12
75569: PUSH
75570: CALL_OW 44
75574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75575: LD_VAR 0 12
75579: PPUSH
75580: LD_VAR 0 8
75584: PPUSH
75585: LD_INT 0
75587: PPUSH
75588: CALL 77374 0 3
// end ;
75592: GO 75490
75594: POP
75595: POP
// if enchidnas then
75596: LD_VAR 0 4
75600: IFFALSE 75667
// for i = 1 to enchidnas do
75602: LD_ADDR_VAR 0 11
75606: PUSH
75607: DOUBLE
75608: LD_INT 1
75610: DEC
75611: ST_TO_ADDR
75612: LD_VAR 0 4
75616: PUSH
75617: FOR_TO
75618: IFFALSE 75665
// begin hc_class = 13 ;
75620: LD_ADDR_OWVAR 28
75624: PUSH
75625: LD_INT 13
75627: ST_TO_ADDR
// hc_gallery =  ;
75628: LD_ADDR_OWVAR 33
75632: PUSH
75633: LD_STRING 
75635: ST_TO_ADDR
// animal := CreateHuman ;
75636: LD_ADDR_VAR 0 12
75640: PUSH
75641: CALL_OW 44
75645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75646: LD_VAR 0 12
75650: PPUSH
75651: LD_VAR 0 8
75655: PPUSH
75656: LD_INT 0
75658: PPUSH
75659: CALL 77374 0 3
// end ;
75663: GO 75617
75665: POP
75666: POP
// if fishes then
75667: LD_VAR 0 7
75671: IFFALSE 75738
// for i = 1 to fishes do
75673: LD_ADDR_VAR 0 11
75677: PUSH
75678: DOUBLE
75679: LD_INT 1
75681: DEC
75682: ST_TO_ADDR
75683: LD_VAR 0 7
75687: PUSH
75688: FOR_TO
75689: IFFALSE 75736
// begin hc_class = 20 ;
75691: LD_ADDR_OWVAR 28
75695: PUSH
75696: LD_INT 20
75698: ST_TO_ADDR
// hc_gallery =  ;
75699: LD_ADDR_OWVAR 33
75703: PUSH
75704: LD_STRING 
75706: ST_TO_ADDR
// animal := CreateHuman ;
75707: LD_ADDR_VAR 0 12
75711: PUSH
75712: CALL_OW 44
75716: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75717: LD_VAR 0 12
75721: PPUSH
75722: LD_VAR 0 9
75726: PPUSH
75727: LD_INT 0
75729: PPUSH
75730: CALL 77374 0 3
// end ;
75734: GO 75688
75736: POP
75737: POP
// end ;
75738: LD_VAR 0 10
75742: RET
// export function WantHeal ( sci , unit ) ; begin
75743: LD_INT 0
75745: PPUSH
// if GetTaskList ( sci ) > 0 then
75746: LD_VAR 0 1
75750: PPUSH
75751: CALL_OW 437
75755: PUSH
75756: LD_INT 0
75758: GREATER
75759: IFFALSE 75829
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75761: LD_VAR 0 1
75765: PPUSH
75766: CALL_OW 437
75770: PUSH
75771: LD_INT 1
75773: ARRAY
75774: PUSH
75775: LD_INT 1
75777: ARRAY
75778: PUSH
75779: LD_STRING l
75781: EQUAL
75782: PUSH
75783: LD_VAR 0 1
75787: PPUSH
75788: CALL_OW 437
75792: PUSH
75793: LD_INT 1
75795: ARRAY
75796: PUSH
75797: LD_INT 4
75799: ARRAY
75800: PUSH
75801: LD_VAR 0 2
75805: EQUAL
75806: AND
75807: IFFALSE 75819
// result := true else
75809: LD_ADDR_VAR 0 3
75813: PUSH
75814: LD_INT 1
75816: ST_TO_ADDR
75817: GO 75827
// result := false ;
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_INT 0
75826: ST_TO_ADDR
// end else
75827: GO 75837
// result := false ;
75829: LD_ADDR_VAR 0 3
75833: PUSH
75834: LD_INT 0
75836: ST_TO_ADDR
// end ;
75837: LD_VAR 0 3
75841: RET
// export function HealTarget ( sci ) ; begin
75842: LD_INT 0
75844: PPUSH
// if not sci then
75845: LD_VAR 0 1
75849: NOT
75850: IFFALSE 75854
// exit ;
75852: GO 75919
// result := 0 ;
75854: LD_ADDR_VAR 0 2
75858: PUSH
75859: LD_INT 0
75861: ST_TO_ADDR
// if GetTaskList ( sci ) then
75862: LD_VAR 0 1
75866: PPUSH
75867: CALL_OW 437
75871: IFFALSE 75919
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75873: LD_VAR 0 1
75877: PPUSH
75878: CALL_OW 437
75882: PUSH
75883: LD_INT 1
75885: ARRAY
75886: PUSH
75887: LD_INT 1
75889: ARRAY
75890: PUSH
75891: LD_STRING l
75893: EQUAL
75894: IFFALSE 75919
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75896: LD_ADDR_VAR 0 2
75900: PUSH
75901: LD_VAR 0 1
75905: PPUSH
75906: CALL_OW 437
75910: PUSH
75911: LD_INT 1
75913: ARRAY
75914: PUSH
75915: LD_INT 4
75917: ARRAY
75918: ST_TO_ADDR
// end ;
75919: LD_VAR 0 2
75923: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75924: LD_INT 0
75926: PPUSH
75927: PPUSH
75928: PPUSH
75929: PPUSH
// if not base_units then
75930: LD_VAR 0 1
75934: NOT
75935: IFFALSE 75939
// exit ;
75937: GO 76026
// result := false ;
75939: LD_ADDR_VAR 0 2
75943: PUSH
75944: LD_INT 0
75946: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75947: LD_ADDR_VAR 0 5
75951: PUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: LD_INT 21
75959: PUSH
75960: LD_INT 3
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PPUSH
75967: CALL_OW 72
75971: ST_TO_ADDR
// if not tmp then
75972: LD_VAR 0 5
75976: NOT
75977: IFFALSE 75981
// exit ;
75979: GO 76026
// for i in tmp do
75981: LD_ADDR_VAR 0 3
75985: PUSH
75986: LD_VAR 0 5
75990: PUSH
75991: FOR_IN
75992: IFFALSE 76024
// begin result := EnemyInRange ( i , 22 ) ;
75994: LD_ADDR_VAR 0 2
75998: PUSH
75999: LD_VAR 0 3
76003: PPUSH
76004: LD_INT 22
76006: PPUSH
76007: CALL 73639 0 2
76011: ST_TO_ADDR
// if result then
76012: LD_VAR 0 2
76016: IFFALSE 76022
// exit ;
76018: POP
76019: POP
76020: GO 76026
// end ;
76022: GO 75991
76024: POP
76025: POP
// end ;
76026: LD_VAR 0 2
76030: RET
// export function FilterByTag ( units , tag ) ; begin
76031: LD_INT 0
76033: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76034: LD_ADDR_VAR 0 3
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: LD_INT 120
76046: PUSH
76047: LD_VAR 0 2
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PPUSH
76056: CALL_OW 72
76060: ST_TO_ADDR
// end ;
76061: LD_VAR 0 3
76065: RET
// export function IsDriver ( un ) ; begin
76066: LD_INT 0
76068: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76069: LD_ADDR_VAR 0 2
76073: PUSH
76074: LD_VAR 0 1
76078: PUSH
76079: LD_INT 55
76081: PUSH
76082: EMPTY
76083: LIST
76084: PPUSH
76085: CALL_OW 69
76089: IN
76090: ST_TO_ADDR
// end ;
76091: LD_VAR 0 2
76095: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
// list := [ ] ;
76100: LD_ADDR_VAR 0 5
76104: PUSH
76105: EMPTY
76106: ST_TO_ADDR
// case d of 0 :
76107: LD_VAR 0 3
76111: PUSH
76112: LD_INT 0
76114: DOUBLE
76115: EQUAL
76116: IFTRUE 76120
76118: GO 76253
76120: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76121: LD_ADDR_VAR 0 5
76125: PUSH
76126: LD_VAR 0 1
76130: PUSH
76131: LD_INT 4
76133: MINUS
76134: PUSH
76135: LD_VAR 0 2
76139: PUSH
76140: LD_INT 4
76142: MINUS
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: LIST
76151: PUSH
76152: LD_VAR 0 1
76156: PUSH
76157: LD_INT 3
76159: MINUS
76160: PUSH
76161: LD_VAR 0 2
76165: PUSH
76166: LD_INT 1
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: LIST
76173: PUSH
76174: LD_VAR 0 1
76178: PUSH
76179: LD_INT 4
76181: PLUS
76182: PUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_INT 4
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: LIST
76195: PUSH
76196: LD_VAR 0 1
76200: PUSH
76201: LD_INT 3
76203: PLUS
76204: PUSH
76205: LD_VAR 0 2
76209: PUSH
76210: LD_INT 3
76212: PLUS
76213: PUSH
76214: LD_INT 5
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: PUSH
76222: LD_VAR 0 1
76226: PUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_INT 4
76234: PLUS
76235: PUSH
76236: LD_INT 0
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: ST_TO_ADDR
// end ; 1 :
76251: GO 76951
76253: LD_INT 1
76255: DOUBLE
76256: EQUAL
76257: IFTRUE 76261
76259: GO 76394
76261: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76262: LD_ADDR_VAR 0 5
76266: PUSH
76267: LD_VAR 0 1
76271: PUSH
76272: LD_VAR 0 2
76276: PUSH
76277: LD_INT 4
76279: MINUS
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: LIST
76288: PUSH
76289: LD_VAR 0 1
76293: PUSH
76294: LD_INT 3
76296: MINUS
76297: PUSH
76298: LD_VAR 0 2
76302: PUSH
76303: LD_INT 3
76305: MINUS
76306: PUSH
76307: LD_INT 2
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: LIST
76314: PUSH
76315: LD_VAR 0 1
76319: PUSH
76320: LD_INT 4
76322: MINUS
76323: PUSH
76324: LD_VAR 0 2
76328: PUSH
76329: LD_INT 1
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: LIST
76336: PUSH
76337: LD_VAR 0 1
76341: PUSH
76342: LD_VAR 0 2
76346: PUSH
76347: LD_INT 3
76349: PLUS
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: LIST
76358: PUSH
76359: LD_VAR 0 1
76363: PUSH
76364: LD_INT 4
76366: PLUS
76367: PUSH
76368: LD_VAR 0 2
76372: PUSH
76373: LD_INT 4
76375: PLUS
76376: PUSH
76377: LD_INT 5
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: ST_TO_ADDR
// end ; 2 :
76392: GO 76951
76394: LD_INT 2
76396: DOUBLE
76397: EQUAL
76398: IFTRUE 76402
76400: GO 76531
76402: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76403: LD_ADDR_VAR 0 5
76407: PUSH
76408: LD_VAR 0 1
76412: PUSH
76413: LD_VAR 0 2
76417: PUSH
76418: LD_INT 3
76420: MINUS
76421: PUSH
76422: LD_INT 3
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: LIST
76429: PUSH
76430: LD_VAR 0 1
76434: PUSH
76435: LD_INT 4
76437: PLUS
76438: PUSH
76439: LD_VAR 0 2
76443: PUSH
76444: LD_INT 4
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: LIST
76451: PUSH
76452: LD_VAR 0 1
76456: PUSH
76457: LD_VAR 0 2
76461: PUSH
76462: LD_INT 4
76464: PLUS
76465: PUSH
76466: LD_INT 0
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: LIST
76473: PUSH
76474: LD_VAR 0 1
76478: PUSH
76479: LD_INT 3
76481: MINUS
76482: PUSH
76483: LD_VAR 0 2
76487: PUSH
76488: LD_INT 1
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: LIST
76495: PUSH
76496: LD_VAR 0 1
76500: PUSH
76501: LD_INT 4
76503: MINUS
76504: PUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_INT 4
76512: MINUS
76513: PUSH
76514: LD_INT 2
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: ST_TO_ADDR
// end ; 3 :
76529: GO 76951
76531: LD_INT 3
76533: DOUBLE
76534: EQUAL
76535: IFTRUE 76539
76537: GO 76672
76539: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76540: LD_ADDR_VAR 0 5
76544: PUSH
76545: LD_VAR 0 1
76549: PUSH
76550: LD_INT 3
76552: PLUS
76553: PUSH
76554: LD_VAR 0 2
76558: PUSH
76559: LD_INT 4
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: LIST
76566: PUSH
76567: LD_VAR 0 1
76571: PUSH
76572: LD_INT 4
76574: PLUS
76575: PUSH
76576: LD_VAR 0 2
76580: PUSH
76581: LD_INT 4
76583: PLUS
76584: PUSH
76585: LD_INT 5
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: LIST
76592: PUSH
76593: LD_VAR 0 1
76597: PUSH
76598: LD_INT 4
76600: MINUS
76601: PUSH
76602: LD_VAR 0 2
76606: PUSH
76607: LD_INT 1
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: PUSH
76615: LD_VAR 0 1
76619: PUSH
76620: LD_VAR 0 2
76624: PUSH
76625: LD_INT 4
76627: MINUS
76628: PUSH
76629: LD_INT 3
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: LD_INT 3
76644: MINUS
76645: PUSH
76646: LD_VAR 0 2
76650: PUSH
76651: LD_INT 3
76653: MINUS
76654: PUSH
76655: LD_INT 2
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: LIST
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: ST_TO_ADDR
// end ; 4 :
76670: GO 76951
76672: LD_INT 4
76674: DOUBLE
76675: EQUAL
76676: IFTRUE 76680
76678: GO 76813
76680: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76681: LD_ADDR_VAR 0 5
76685: PUSH
76686: LD_VAR 0 1
76690: PUSH
76691: LD_VAR 0 2
76695: PUSH
76696: LD_INT 4
76698: PLUS
76699: PUSH
76700: LD_INT 0
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: LIST
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 3
76715: PLUS
76716: PUSH
76717: LD_VAR 0 2
76721: PUSH
76722: LD_INT 3
76724: PLUS
76725: PUSH
76726: LD_INT 5
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: LIST
76733: PUSH
76734: LD_VAR 0 1
76738: PUSH
76739: LD_INT 4
76741: PLUS
76742: PUSH
76743: LD_VAR 0 2
76747: PUSH
76748: LD_INT 4
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: LIST
76755: PUSH
76756: LD_VAR 0 1
76760: PUSH
76761: LD_VAR 0 2
76765: PUSH
76766: LD_INT 3
76768: MINUS
76769: PUSH
76770: LD_INT 3
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: PUSH
76778: LD_VAR 0 1
76782: PUSH
76783: LD_INT 4
76785: MINUS
76786: PUSH
76787: LD_VAR 0 2
76791: PUSH
76792: LD_INT 4
76794: MINUS
76795: PUSH
76796: LD_INT 2
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: LIST
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: ST_TO_ADDR
// end ; 5 :
76811: GO 76951
76813: LD_INT 5
76815: DOUBLE
76816: EQUAL
76817: IFTRUE 76821
76819: GO 76950
76821: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76822: LD_ADDR_VAR 0 5
76826: PUSH
76827: LD_VAR 0 1
76831: PUSH
76832: LD_INT 4
76834: MINUS
76835: PUSH
76836: LD_VAR 0 2
76840: PUSH
76841: LD_INT 1
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: LIST
76848: PUSH
76849: LD_VAR 0 1
76853: PUSH
76854: LD_VAR 0 2
76858: PUSH
76859: LD_INT 4
76861: MINUS
76862: PUSH
76863: LD_INT 3
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: PUSH
76871: LD_VAR 0 1
76875: PUSH
76876: LD_INT 4
76878: PLUS
76879: PUSH
76880: LD_VAR 0 2
76884: PUSH
76885: LD_INT 4
76887: PLUS
76888: PUSH
76889: LD_INT 5
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: LIST
76896: PUSH
76897: LD_VAR 0 1
76901: PUSH
76902: LD_INT 3
76904: PLUS
76905: PUSH
76906: LD_VAR 0 2
76910: PUSH
76911: LD_INT 4
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: LIST
76918: PUSH
76919: LD_VAR 0 1
76923: PUSH
76924: LD_VAR 0 2
76928: PUSH
76929: LD_INT 3
76931: PLUS
76932: PUSH
76933: LD_INT 0
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: ST_TO_ADDR
// end ; end ;
76948: GO 76951
76950: POP
// result := list ;
76951: LD_ADDR_VAR 0 4
76955: PUSH
76956: LD_VAR 0 5
76960: ST_TO_ADDR
// end ;
76961: LD_VAR 0 4
76965: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76966: LD_INT 0
76968: PPUSH
76969: PPUSH
76970: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76971: LD_VAR 0 1
76975: NOT
76976: PUSH
76977: LD_VAR 0 2
76981: PUSH
76982: LD_INT 1
76984: PUSH
76985: LD_INT 2
76987: PUSH
76988: LD_INT 3
76990: PUSH
76991: LD_INT 4
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: IN
77000: NOT
77001: OR
77002: IFFALSE 77006
// exit ;
77004: GO 77098
// tmp := [ ] ;
77006: LD_ADDR_VAR 0 5
77010: PUSH
77011: EMPTY
77012: ST_TO_ADDR
// for i in units do
77013: LD_ADDR_VAR 0 4
77017: PUSH
77018: LD_VAR 0 1
77022: PUSH
77023: FOR_IN
77024: IFFALSE 77067
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77026: LD_ADDR_VAR 0 5
77030: PUSH
77031: LD_VAR 0 5
77035: PPUSH
77036: LD_VAR 0 5
77040: PUSH
77041: LD_INT 1
77043: PLUS
77044: PPUSH
77045: LD_VAR 0 4
77049: PPUSH
77050: LD_VAR 0 2
77054: PPUSH
77055: CALL_OW 259
77059: PPUSH
77060: CALL_OW 2
77064: ST_TO_ADDR
77065: GO 77023
77067: POP
77068: POP
// if not tmp then
77069: LD_VAR 0 5
77073: NOT
77074: IFFALSE 77078
// exit ;
77076: GO 77098
// result := SortListByListDesc ( units , tmp ) ;
77078: LD_ADDR_VAR 0 3
77082: PUSH
77083: LD_VAR 0 1
77087: PPUSH
77088: LD_VAR 0 5
77092: PPUSH
77093: CALL_OW 77
77097: ST_TO_ADDR
// end ;
77098: LD_VAR 0 3
77102: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77103: LD_INT 0
77105: PPUSH
77106: PPUSH
77107: PPUSH
// result := false ;
77108: LD_ADDR_VAR 0 3
77112: PUSH
77113: LD_INT 0
77115: ST_TO_ADDR
// x := GetX ( building ) ;
77116: LD_ADDR_VAR 0 4
77120: PUSH
77121: LD_VAR 0 2
77125: PPUSH
77126: CALL_OW 250
77130: ST_TO_ADDR
// y := GetY ( building ) ;
77131: LD_ADDR_VAR 0 5
77135: PUSH
77136: LD_VAR 0 2
77140: PPUSH
77141: CALL_OW 251
77145: ST_TO_ADDR
// if not building or not x or not y then
77146: LD_VAR 0 2
77150: NOT
77151: PUSH
77152: LD_VAR 0 4
77156: NOT
77157: OR
77158: PUSH
77159: LD_VAR 0 5
77163: NOT
77164: OR
77165: IFFALSE 77169
// exit ;
77167: GO 77261
// if GetTaskList ( unit ) then
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 437
77178: IFFALSE 77261
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77180: LD_STRING e
77182: PUSH
77183: LD_VAR 0 1
77187: PPUSH
77188: CALL_OW 437
77192: PUSH
77193: LD_INT 1
77195: ARRAY
77196: PUSH
77197: LD_INT 1
77199: ARRAY
77200: EQUAL
77201: PUSH
77202: LD_VAR 0 4
77206: PUSH
77207: LD_VAR 0 1
77211: PPUSH
77212: CALL_OW 437
77216: PUSH
77217: LD_INT 1
77219: ARRAY
77220: PUSH
77221: LD_INT 2
77223: ARRAY
77224: EQUAL
77225: AND
77226: PUSH
77227: LD_VAR 0 5
77231: PUSH
77232: LD_VAR 0 1
77236: PPUSH
77237: CALL_OW 437
77241: PUSH
77242: LD_INT 1
77244: ARRAY
77245: PUSH
77246: LD_INT 3
77248: ARRAY
77249: EQUAL
77250: AND
77251: IFFALSE 77261
// result := true end ;
77253: LD_ADDR_VAR 0 3
77257: PUSH
77258: LD_INT 1
77260: ST_TO_ADDR
// end ;
77261: LD_VAR 0 3
77265: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77266: LD_INT 0
77268: PPUSH
// result := false ;
77269: LD_ADDR_VAR 0 4
77273: PUSH
77274: LD_INT 0
77276: ST_TO_ADDR
// if GetTaskList ( unit ) then
77277: LD_VAR 0 1
77281: PPUSH
77282: CALL_OW 437
77286: IFFALSE 77369
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77288: LD_STRING M
77290: PUSH
77291: LD_VAR 0 1
77295: PPUSH
77296: CALL_OW 437
77300: PUSH
77301: LD_INT 1
77303: ARRAY
77304: PUSH
77305: LD_INT 1
77307: ARRAY
77308: EQUAL
77309: PUSH
77310: LD_VAR 0 2
77314: PUSH
77315: LD_VAR 0 1
77319: PPUSH
77320: CALL_OW 437
77324: PUSH
77325: LD_INT 1
77327: ARRAY
77328: PUSH
77329: LD_INT 2
77331: ARRAY
77332: EQUAL
77333: AND
77334: PUSH
77335: LD_VAR 0 3
77339: PUSH
77340: LD_VAR 0 1
77344: PPUSH
77345: CALL_OW 437
77349: PUSH
77350: LD_INT 1
77352: ARRAY
77353: PUSH
77354: LD_INT 3
77356: ARRAY
77357: EQUAL
77358: AND
77359: IFFALSE 77369
// result := true ;
77361: LD_ADDR_VAR 0 4
77365: PUSH
77366: LD_INT 1
77368: ST_TO_ADDR
// end ; end ;
77369: LD_VAR 0 4
77373: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77374: LD_INT 0
77376: PPUSH
77377: PPUSH
77378: PPUSH
77379: PPUSH
// if not unit or not area then
77380: LD_VAR 0 1
77384: NOT
77385: PUSH
77386: LD_VAR 0 2
77390: NOT
77391: OR
77392: IFFALSE 77396
// exit ;
77394: GO 77560
// tmp := AreaToList ( area , i ) ;
77396: LD_ADDR_VAR 0 6
77400: PUSH
77401: LD_VAR 0 2
77405: PPUSH
77406: LD_VAR 0 5
77410: PPUSH
77411: CALL_OW 517
77415: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77416: LD_ADDR_VAR 0 5
77420: PUSH
77421: DOUBLE
77422: LD_INT 1
77424: DEC
77425: ST_TO_ADDR
77426: LD_VAR 0 6
77430: PUSH
77431: LD_INT 1
77433: ARRAY
77434: PUSH
77435: FOR_TO
77436: IFFALSE 77558
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77438: LD_ADDR_VAR 0 7
77442: PUSH
77443: LD_VAR 0 6
77447: PUSH
77448: LD_INT 1
77450: ARRAY
77451: PUSH
77452: LD_VAR 0 5
77456: ARRAY
77457: PUSH
77458: LD_VAR 0 6
77462: PUSH
77463: LD_INT 2
77465: ARRAY
77466: PUSH
77467: LD_VAR 0 5
77471: ARRAY
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77477: LD_VAR 0 7
77481: PUSH
77482: LD_INT 1
77484: ARRAY
77485: PPUSH
77486: LD_VAR 0 7
77490: PUSH
77491: LD_INT 2
77493: ARRAY
77494: PPUSH
77495: CALL_OW 428
77499: PUSH
77500: LD_INT 0
77502: EQUAL
77503: IFFALSE 77556
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77505: LD_VAR 0 1
77509: PPUSH
77510: LD_VAR 0 7
77514: PUSH
77515: LD_INT 1
77517: ARRAY
77518: PPUSH
77519: LD_VAR 0 7
77523: PUSH
77524: LD_INT 2
77526: ARRAY
77527: PPUSH
77528: LD_VAR 0 3
77532: PPUSH
77533: CALL_OW 48
// result := IsPlaced ( unit ) ;
77537: LD_ADDR_VAR 0 4
77541: PUSH
77542: LD_VAR 0 1
77546: PPUSH
77547: CALL_OW 305
77551: ST_TO_ADDR
// exit ;
77552: POP
77553: POP
77554: GO 77560
// end ; end ;
77556: GO 77435
77558: POP
77559: POP
// end ;
77560: LD_VAR 0 4
77564: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77565: LD_INT 0
77567: PPUSH
77568: PPUSH
77569: PPUSH
// if not side or side > 8 then
77570: LD_VAR 0 1
77574: NOT
77575: PUSH
77576: LD_VAR 0 1
77580: PUSH
77581: LD_INT 8
77583: GREATER
77584: OR
77585: IFFALSE 77589
// exit ;
77587: GO 77776
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77589: LD_ADDR_VAR 0 4
77593: PUSH
77594: LD_INT 22
77596: PUSH
77597: LD_VAR 0 1
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: PUSH
77606: LD_INT 21
77608: PUSH
77609: LD_INT 3
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PPUSH
77620: CALL_OW 69
77624: ST_TO_ADDR
// if not tmp then
77625: LD_VAR 0 4
77629: NOT
77630: IFFALSE 77634
// exit ;
77632: GO 77776
// enable_addtolog := true ;
77634: LD_ADDR_OWVAR 81
77638: PUSH
77639: LD_INT 1
77641: ST_TO_ADDR
// AddToLog ( [ ) ;
77642: LD_STRING [
77644: PPUSH
77645: CALL_OW 561
// for i in tmp do
77649: LD_ADDR_VAR 0 3
77653: PUSH
77654: LD_VAR 0 4
77658: PUSH
77659: FOR_IN
77660: IFFALSE 77767
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77662: LD_STRING [
77664: PUSH
77665: LD_VAR 0 3
77669: PPUSH
77670: CALL_OW 266
77674: STR
77675: PUSH
77676: LD_STRING , 
77678: STR
77679: PUSH
77680: LD_VAR 0 3
77684: PPUSH
77685: CALL_OW 250
77689: STR
77690: PUSH
77691: LD_STRING , 
77693: STR
77694: PUSH
77695: LD_VAR 0 3
77699: PPUSH
77700: CALL_OW 251
77704: STR
77705: PUSH
77706: LD_STRING , 
77708: STR
77709: PUSH
77710: LD_VAR 0 3
77714: PPUSH
77715: CALL_OW 254
77719: STR
77720: PUSH
77721: LD_STRING , 
77723: STR
77724: PUSH
77725: LD_VAR 0 3
77729: PPUSH
77730: LD_INT 1
77732: PPUSH
77733: CALL_OW 268
77737: STR
77738: PUSH
77739: LD_STRING , 
77741: STR
77742: PUSH
77743: LD_VAR 0 3
77747: PPUSH
77748: LD_INT 2
77750: PPUSH
77751: CALL_OW 268
77755: STR
77756: PUSH
77757: LD_STRING ],
77759: STR
77760: PPUSH
77761: CALL_OW 561
// end ;
77765: GO 77659
77767: POP
77768: POP
// AddToLog ( ]; ) ;
77769: LD_STRING ];
77771: PPUSH
77772: CALL_OW 561
// end ;
77776: LD_VAR 0 2
77780: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
77787: PPUSH
// if not area or not rate or not max then
77788: LD_VAR 0 1
77792: NOT
77793: PUSH
77794: LD_VAR 0 2
77798: NOT
77799: OR
77800: PUSH
77801: LD_VAR 0 4
77805: NOT
77806: OR
77807: IFFALSE 77811
// exit ;
77809: GO 78000
// while 1 do
77811: LD_INT 1
77813: IFFALSE 78000
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77815: LD_ADDR_VAR 0 9
77819: PUSH
77820: LD_VAR 0 1
77824: PPUSH
77825: LD_INT 1
77827: PPUSH
77828: CALL_OW 287
77832: PUSH
77833: LD_INT 10
77835: MUL
77836: ST_TO_ADDR
// r := rate / 10 ;
77837: LD_ADDR_VAR 0 7
77841: PUSH
77842: LD_VAR 0 2
77846: PUSH
77847: LD_INT 10
77849: DIVREAL
77850: ST_TO_ADDR
// time := 1 1$00 ;
77851: LD_ADDR_VAR 0 8
77855: PUSH
77856: LD_INT 2100
77858: ST_TO_ADDR
// if amount < min then
77859: LD_VAR 0 9
77863: PUSH
77864: LD_VAR 0 3
77868: LESS
77869: IFFALSE 77887
// r := r * 2 else
77871: LD_ADDR_VAR 0 7
77875: PUSH
77876: LD_VAR 0 7
77880: PUSH
77881: LD_INT 2
77883: MUL
77884: ST_TO_ADDR
77885: GO 77913
// if amount > max then
77887: LD_VAR 0 9
77891: PUSH
77892: LD_VAR 0 4
77896: GREATER
77897: IFFALSE 77913
// r := r / 2 ;
77899: LD_ADDR_VAR 0 7
77903: PUSH
77904: LD_VAR 0 7
77908: PUSH
77909: LD_INT 2
77911: DIVREAL
77912: ST_TO_ADDR
// time := time / r ;
77913: LD_ADDR_VAR 0 8
77917: PUSH
77918: LD_VAR 0 8
77922: PUSH
77923: LD_VAR 0 7
77927: DIVREAL
77928: ST_TO_ADDR
// if time < 0 then
77929: LD_VAR 0 8
77933: PUSH
77934: LD_INT 0
77936: LESS
77937: IFFALSE 77954
// time := time * - 1 ;
77939: LD_ADDR_VAR 0 8
77943: PUSH
77944: LD_VAR 0 8
77948: PUSH
77949: LD_INT 1
77951: NEG
77952: MUL
77953: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77954: LD_VAR 0 8
77958: PUSH
77959: LD_INT 35
77961: PPUSH
77962: LD_INT 875
77964: PPUSH
77965: CALL_OW 12
77969: PLUS
77970: PPUSH
77971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77975: LD_INT 1
77977: PPUSH
77978: LD_INT 5
77980: PPUSH
77981: CALL_OW 12
77985: PPUSH
77986: LD_VAR 0 1
77990: PPUSH
77991: LD_INT 1
77993: PPUSH
77994: CALL_OW 55
// end ;
77998: GO 77811
// end ;
78000: LD_VAR 0 5
78004: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78005: LD_INT 0
78007: PPUSH
78008: PPUSH
78009: PPUSH
78010: PPUSH
78011: PPUSH
78012: PPUSH
78013: PPUSH
78014: PPUSH
// if not turrets or not factories then
78015: LD_VAR 0 1
78019: NOT
78020: PUSH
78021: LD_VAR 0 2
78025: NOT
78026: OR
78027: IFFALSE 78031
// exit ;
78029: GO 78338
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78031: LD_ADDR_VAR 0 10
78035: PUSH
78036: LD_INT 5
78038: PUSH
78039: LD_INT 6
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: LD_INT 2
78048: PUSH
78049: LD_INT 4
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 3
78058: PUSH
78059: LD_INT 5
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 24
78073: PUSH
78074: LD_INT 25
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PUSH
78081: LD_INT 23
78083: PUSH
78084: LD_INT 27
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 42
78097: PUSH
78098: LD_INT 43
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PUSH
78105: LD_INT 44
78107: PUSH
78108: LD_INT 46
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: PUSH
78115: LD_INT 45
78117: PUSH
78118: LD_INT 47
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: LIST
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: LIST
78134: ST_TO_ADDR
// result := [ ] ;
78135: LD_ADDR_VAR 0 3
78139: PUSH
78140: EMPTY
78141: ST_TO_ADDR
// for i in turrets do
78142: LD_ADDR_VAR 0 4
78146: PUSH
78147: LD_VAR 0 1
78151: PUSH
78152: FOR_IN
78153: IFFALSE 78336
// begin nat := GetNation ( i ) ;
78155: LD_ADDR_VAR 0 7
78159: PUSH
78160: LD_VAR 0 4
78164: PPUSH
78165: CALL_OW 248
78169: ST_TO_ADDR
// weapon := 0 ;
78170: LD_ADDR_VAR 0 8
78174: PUSH
78175: LD_INT 0
78177: ST_TO_ADDR
// if not nat then
78178: LD_VAR 0 7
78182: NOT
78183: IFFALSE 78187
// continue ;
78185: GO 78152
// for j in list [ nat ] do
78187: LD_ADDR_VAR 0 5
78191: PUSH
78192: LD_VAR 0 10
78196: PUSH
78197: LD_VAR 0 7
78201: ARRAY
78202: PUSH
78203: FOR_IN
78204: IFFALSE 78245
// if GetBWeapon ( i ) = j [ 1 ] then
78206: LD_VAR 0 4
78210: PPUSH
78211: CALL_OW 269
78215: PUSH
78216: LD_VAR 0 5
78220: PUSH
78221: LD_INT 1
78223: ARRAY
78224: EQUAL
78225: IFFALSE 78243
// begin weapon := j [ 2 ] ;
78227: LD_ADDR_VAR 0 8
78231: PUSH
78232: LD_VAR 0 5
78236: PUSH
78237: LD_INT 2
78239: ARRAY
78240: ST_TO_ADDR
// break ;
78241: GO 78245
// end ;
78243: GO 78203
78245: POP
78246: POP
// if not weapon then
78247: LD_VAR 0 8
78251: NOT
78252: IFFALSE 78256
// continue ;
78254: GO 78152
// for k in factories do
78256: LD_ADDR_VAR 0 6
78260: PUSH
78261: LD_VAR 0 2
78265: PUSH
78266: FOR_IN
78267: IFFALSE 78332
// begin weapons := AvailableWeaponList ( k ) ;
78269: LD_ADDR_VAR 0 9
78273: PUSH
78274: LD_VAR 0 6
78278: PPUSH
78279: CALL_OW 478
78283: ST_TO_ADDR
// if not weapons then
78284: LD_VAR 0 9
78288: NOT
78289: IFFALSE 78293
// continue ;
78291: GO 78266
// if weapon in weapons then
78293: LD_VAR 0 8
78297: PUSH
78298: LD_VAR 0 9
78302: IN
78303: IFFALSE 78330
// begin result := [ i , weapon ] ;
78305: LD_ADDR_VAR 0 3
78309: PUSH
78310: LD_VAR 0 4
78314: PUSH
78315: LD_VAR 0 8
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: ST_TO_ADDR
// exit ;
78324: POP
78325: POP
78326: POP
78327: POP
78328: GO 78338
// end ; end ;
78330: GO 78266
78332: POP
78333: POP
// end ;
78334: GO 78152
78336: POP
78337: POP
// end ;
78338: LD_VAR 0 3
78342: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78343: LD_INT 0
78345: PPUSH
// if not side or side > 8 then
78346: LD_VAR 0 3
78350: NOT
78351: PUSH
78352: LD_VAR 0 3
78356: PUSH
78357: LD_INT 8
78359: GREATER
78360: OR
78361: IFFALSE 78365
// exit ;
78363: GO 78424
// if not range then
78365: LD_VAR 0 4
78369: NOT
78370: IFFALSE 78381
// range := - 12 ;
78372: LD_ADDR_VAR 0 4
78376: PUSH
78377: LD_INT 12
78379: NEG
78380: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78381: LD_VAR 0 1
78385: PPUSH
78386: LD_VAR 0 2
78390: PPUSH
78391: LD_VAR 0 3
78395: PPUSH
78396: LD_VAR 0 4
78400: PPUSH
78401: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78405: LD_VAR 0 1
78409: PPUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: LD_VAR 0 3
78419: PPUSH
78420: CALL_OW 331
// end ;
78424: LD_VAR 0 5
78428: RET
// export function Video ( mode ) ; begin
78429: LD_INT 0
78431: PPUSH
// ingame_video = mode ;
78432: LD_ADDR_OWVAR 52
78436: PUSH
78437: LD_VAR 0 1
78441: ST_TO_ADDR
// interface_hidden = mode ;
78442: LD_ADDR_OWVAR 54
78446: PUSH
78447: LD_VAR 0 1
78451: ST_TO_ADDR
// end ;
78452: LD_VAR 0 2
78456: RET
// export function Join ( array , element ) ; begin
78457: LD_INT 0
78459: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: LD_VAR 0 1
78469: PPUSH
78470: LD_VAR 0 1
78474: PUSH
78475: LD_INT 1
78477: PLUS
78478: PPUSH
78479: LD_VAR 0 2
78483: PPUSH
78484: CALL_OW 1
78488: ST_TO_ADDR
// end ;
78489: LD_VAR 0 3
78493: RET
// export function JoinUnion ( array , element ) ; begin
78494: LD_INT 0
78496: PPUSH
// result := array union element ;
78497: LD_ADDR_VAR 0 3
78501: PUSH
78502: LD_VAR 0 1
78506: PUSH
78507: LD_VAR 0 2
78511: UNION
78512: ST_TO_ADDR
// end ;
78513: LD_VAR 0 3
78517: RET
// export function GetBehemoths ( side ) ; begin
78518: LD_INT 0
78520: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78521: LD_ADDR_VAR 0 2
78525: PUSH
78526: LD_INT 22
78528: PUSH
78529: LD_VAR 0 1
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 31
78540: PUSH
78541: LD_INT 25
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PPUSH
78552: CALL_OW 69
78556: ST_TO_ADDR
// end ;
78557: LD_VAR 0 2
78561: RET
// export function Shuffle ( array ) ; var i , index ; begin
78562: LD_INT 0
78564: PPUSH
78565: PPUSH
78566: PPUSH
// result := [ ] ;
78567: LD_ADDR_VAR 0 2
78571: PUSH
78572: EMPTY
78573: ST_TO_ADDR
// if not array then
78574: LD_VAR 0 1
78578: NOT
78579: IFFALSE 78583
// exit ;
78581: GO 78682
// Randomize ;
78583: CALL_OW 10
// for i = array downto 1 do
78587: LD_ADDR_VAR 0 3
78591: PUSH
78592: DOUBLE
78593: LD_VAR 0 1
78597: INC
78598: ST_TO_ADDR
78599: LD_INT 1
78601: PUSH
78602: FOR_DOWNTO
78603: IFFALSE 78680
// begin index := rand ( 1 , array ) ;
78605: LD_ADDR_VAR 0 4
78609: PUSH
78610: LD_INT 1
78612: PPUSH
78613: LD_VAR 0 1
78617: PPUSH
78618: CALL_OW 12
78622: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78623: LD_ADDR_VAR 0 2
78627: PUSH
78628: LD_VAR 0 2
78632: PPUSH
78633: LD_VAR 0 2
78637: PUSH
78638: LD_INT 1
78640: PLUS
78641: PPUSH
78642: LD_VAR 0 1
78646: PUSH
78647: LD_VAR 0 4
78651: ARRAY
78652: PPUSH
78653: CALL_OW 2
78657: ST_TO_ADDR
// array := Delete ( array , index ) ;
78658: LD_ADDR_VAR 0 1
78662: PUSH
78663: LD_VAR 0 1
78667: PPUSH
78668: LD_VAR 0 4
78672: PPUSH
78673: CALL_OW 3
78677: ST_TO_ADDR
// end ;
78678: GO 78602
78680: POP
78681: POP
// end ;
78682: LD_VAR 0 2
78686: RET
// export function GetBaseMaterials ( base ) ; begin
78687: LD_INT 0
78689: PPUSH
// result := [ 0 , 0 , 0 ] ;
78690: LD_ADDR_VAR 0 2
78694: PUSH
78695: LD_INT 0
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: LD_INT 0
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: LIST
78708: ST_TO_ADDR
// if not base then
78709: LD_VAR 0 1
78713: NOT
78714: IFFALSE 78718
// exit ;
78716: GO 78767
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78718: LD_ADDR_VAR 0 2
78722: PUSH
78723: LD_VAR 0 1
78727: PPUSH
78728: LD_INT 1
78730: PPUSH
78731: CALL_OW 275
78735: PUSH
78736: LD_VAR 0 1
78740: PPUSH
78741: LD_INT 2
78743: PPUSH
78744: CALL_OW 275
78748: PUSH
78749: LD_VAR 0 1
78753: PPUSH
78754: LD_INT 3
78756: PPUSH
78757: CALL_OW 275
78761: PUSH
78762: EMPTY
78763: LIST
78764: LIST
78765: LIST
78766: ST_TO_ADDR
// end ;
78767: LD_VAR 0 2
78771: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78772: LD_INT 0
78774: PPUSH
78775: PPUSH
// result := array ;
78776: LD_ADDR_VAR 0 3
78780: PUSH
78781: LD_VAR 0 1
78785: ST_TO_ADDR
// if size >= result then
78786: LD_VAR 0 2
78790: PUSH
78791: LD_VAR 0 3
78795: GREATEREQUAL
78796: IFFALSE 78800
// exit ;
78798: GO 78850
// if size then
78800: LD_VAR 0 2
78804: IFFALSE 78850
// for i := array downto size do
78806: LD_ADDR_VAR 0 4
78810: PUSH
78811: DOUBLE
78812: LD_VAR 0 1
78816: INC
78817: ST_TO_ADDR
78818: LD_VAR 0 2
78822: PUSH
78823: FOR_DOWNTO
78824: IFFALSE 78848
// result := Delete ( result , result ) ;
78826: LD_ADDR_VAR 0 3
78830: PUSH
78831: LD_VAR 0 3
78835: PPUSH
78836: LD_VAR 0 3
78840: PPUSH
78841: CALL_OW 3
78845: ST_TO_ADDR
78846: GO 78823
78848: POP
78849: POP
// end ;
78850: LD_VAR 0 3
78854: RET
// export function ComExit ( unit ) ; var tmp ; begin
78855: LD_INT 0
78857: PPUSH
78858: PPUSH
// if not IsInUnit ( unit ) then
78859: LD_VAR 0 1
78863: PPUSH
78864: CALL_OW 310
78868: NOT
78869: IFFALSE 78873
// exit ;
78871: GO 78933
// tmp := IsInUnit ( unit ) ;
78873: LD_ADDR_VAR 0 3
78877: PUSH
78878: LD_VAR 0 1
78882: PPUSH
78883: CALL_OW 310
78887: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78888: LD_VAR 0 3
78892: PPUSH
78893: CALL_OW 247
78897: PUSH
78898: LD_INT 2
78900: EQUAL
78901: IFFALSE 78914
// ComExitVehicle ( unit ) else
78903: LD_VAR 0 1
78907: PPUSH
78908: CALL_OW 121
78912: GO 78923
// ComExitBuilding ( unit ) ;
78914: LD_VAR 0 1
78918: PPUSH
78919: CALL_OW 122
// result := tmp ;
78923: LD_ADDR_VAR 0 2
78927: PUSH
78928: LD_VAR 0 3
78932: ST_TO_ADDR
// end ;
78933: LD_VAR 0 2
78937: RET
// export function ComExitAll ( units ) ; var i ; begin
78938: LD_INT 0
78940: PPUSH
78941: PPUSH
// if not units then
78942: LD_VAR 0 1
78946: NOT
78947: IFFALSE 78951
// exit ;
78949: GO 78977
// for i in units do
78951: LD_ADDR_VAR 0 3
78955: PUSH
78956: LD_VAR 0 1
78960: PUSH
78961: FOR_IN
78962: IFFALSE 78975
// ComExit ( i ) ;
78964: LD_VAR 0 3
78968: PPUSH
78969: CALL 78855 0 1
78973: GO 78961
78975: POP
78976: POP
// end ;
78977: LD_VAR 0 2
78981: RET
// export function ResetHc ; begin
78982: LD_INT 0
78984: PPUSH
// InitHc ;
78985: CALL_OW 19
// hc_importance := 0 ;
78989: LD_ADDR_OWVAR 32
78993: PUSH
78994: LD_INT 0
78996: ST_TO_ADDR
// end ;
78997: LD_VAR 0 1
79001: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79002: LD_INT 0
79004: PPUSH
79005: PPUSH
79006: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79007: LD_ADDR_VAR 0 6
79011: PUSH
79012: LD_VAR 0 1
79016: PUSH
79017: LD_VAR 0 3
79021: PLUS
79022: PUSH
79023: LD_INT 2
79025: DIV
79026: ST_TO_ADDR
// if _x < 0 then
79027: LD_VAR 0 6
79031: PUSH
79032: LD_INT 0
79034: LESS
79035: IFFALSE 79052
// _x := _x * - 1 ;
79037: LD_ADDR_VAR 0 6
79041: PUSH
79042: LD_VAR 0 6
79046: PUSH
79047: LD_INT 1
79049: NEG
79050: MUL
79051: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79052: LD_ADDR_VAR 0 7
79056: PUSH
79057: LD_VAR 0 2
79061: PUSH
79062: LD_VAR 0 4
79066: PLUS
79067: PUSH
79068: LD_INT 2
79070: DIV
79071: ST_TO_ADDR
// if _y < 0 then
79072: LD_VAR 0 7
79076: PUSH
79077: LD_INT 0
79079: LESS
79080: IFFALSE 79097
// _y := _y * - 1 ;
79082: LD_ADDR_VAR 0 7
79086: PUSH
79087: LD_VAR 0 7
79091: PUSH
79092: LD_INT 1
79094: NEG
79095: MUL
79096: ST_TO_ADDR
// result := [ _x , _y ] ;
79097: LD_ADDR_VAR 0 5
79101: PUSH
79102: LD_VAR 0 6
79106: PUSH
79107: LD_VAR 0 7
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: ST_TO_ADDR
// end ;
79116: LD_VAR 0 5
79120: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79121: LD_INT 0
79123: PPUSH
79124: PPUSH
79125: PPUSH
79126: PPUSH
// task := GetTaskList ( unit ) ;
79127: LD_ADDR_VAR 0 7
79131: PUSH
79132: LD_VAR 0 1
79136: PPUSH
79137: CALL_OW 437
79141: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79142: LD_VAR 0 7
79146: NOT
79147: PUSH
79148: LD_VAR 0 1
79152: PPUSH
79153: LD_VAR 0 2
79157: PPUSH
79158: CALL_OW 308
79162: NOT
79163: AND
79164: IFFALSE 79168
// exit ;
79166: GO 79286
// if IsInArea ( unit , area ) then
79168: LD_VAR 0 1
79172: PPUSH
79173: LD_VAR 0 2
79177: PPUSH
79178: CALL_OW 308
79182: IFFALSE 79200
// begin ComMoveToArea ( unit , goAway ) ;
79184: LD_VAR 0 1
79188: PPUSH
79189: LD_VAR 0 3
79193: PPUSH
79194: CALL_OW 113
// exit ;
79198: GO 79286
// end ; if task [ 1 ] [ 1 ] <> M then
79200: LD_VAR 0 7
79204: PUSH
79205: LD_INT 1
79207: ARRAY
79208: PUSH
79209: LD_INT 1
79211: ARRAY
79212: PUSH
79213: LD_STRING M
79215: NONEQUAL
79216: IFFALSE 79220
// exit ;
79218: GO 79286
// x := task [ 1 ] [ 2 ] ;
79220: LD_ADDR_VAR 0 5
79224: PUSH
79225: LD_VAR 0 7
79229: PUSH
79230: LD_INT 1
79232: ARRAY
79233: PUSH
79234: LD_INT 2
79236: ARRAY
79237: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79238: LD_ADDR_VAR 0 6
79242: PUSH
79243: LD_VAR 0 7
79247: PUSH
79248: LD_INT 1
79250: ARRAY
79251: PUSH
79252: LD_INT 3
79254: ARRAY
79255: ST_TO_ADDR
// if InArea ( x , y , area ) then
79256: LD_VAR 0 5
79260: PPUSH
79261: LD_VAR 0 6
79265: PPUSH
79266: LD_VAR 0 2
79270: PPUSH
79271: CALL_OW 309
79275: IFFALSE 79286
// ComStop ( unit ) ;
79277: LD_VAR 0 1
79281: PPUSH
79282: CALL_OW 141
// end ;
79286: LD_VAR 0 4
79290: RET
// export function Abs ( value ) ; begin
79291: LD_INT 0
79293: PPUSH
// result := value ;
79294: LD_ADDR_VAR 0 2
79298: PUSH
79299: LD_VAR 0 1
79303: ST_TO_ADDR
// if value < 0 then
79304: LD_VAR 0 1
79308: PUSH
79309: LD_INT 0
79311: LESS
79312: IFFALSE 79329
// result := value * - 1 ;
79314: LD_ADDR_VAR 0 2
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_INT 1
79326: NEG
79327: MUL
79328: ST_TO_ADDR
// end ;
79329: LD_VAR 0 2
79333: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79334: LD_INT 0
79336: PPUSH
79337: PPUSH
79338: PPUSH
79339: PPUSH
79340: PPUSH
79341: PPUSH
79342: PPUSH
79343: PPUSH
// if not unit or not building then
79344: LD_VAR 0 1
79348: NOT
79349: PUSH
79350: LD_VAR 0 2
79354: NOT
79355: OR
79356: IFFALSE 79360
// exit ;
79358: GO 79586
// x := GetX ( building ) ;
79360: LD_ADDR_VAR 0 4
79364: PUSH
79365: LD_VAR 0 2
79369: PPUSH
79370: CALL_OW 250
79374: ST_TO_ADDR
// y := GetY ( building ) ;
79375: LD_ADDR_VAR 0 6
79379: PUSH
79380: LD_VAR 0 2
79384: PPUSH
79385: CALL_OW 251
79389: ST_TO_ADDR
// d := GetDir ( building ) ;
79390: LD_ADDR_VAR 0 8
79394: PUSH
79395: LD_VAR 0 2
79399: PPUSH
79400: CALL_OW 254
79404: ST_TO_ADDR
// r := 4 ;
79405: LD_ADDR_VAR 0 9
79409: PUSH
79410: LD_INT 4
79412: ST_TO_ADDR
// for i := 1 to 5 do
79413: LD_ADDR_VAR 0 10
79417: PUSH
79418: DOUBLE
79419: LD_INT 1
79421: DEC
79422: ST_TO_ADDR
79423: LD_INT 5
79425: PUSH
79426: FOR_TO
79427: IFFALSE 79584
// begin _x := ShiftX ( x , d , r + i ) ;
79429: LD_ADDR_VAR 0 5
79433: PUSH
79434: LD_VAR 0 4
79438: PPUSH
79439: LD_VAR 0 8
79443: PPUSH
79444: LD_VAR 0 9
79448: PUSH
79449: LD_VAR 0 10
79453: PLUS
79454: PPUSH
79455: CALL_OW 272
79459: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79460: LD_ADDR_VAR 0 7
79464: PUSH
79465: LD_VAR 0 6
79469: PPUSH
79470: LD_VAR 0 8
79474: PPUSH
79475: LD_VAR 0 9
79479: PUSH
79480: LD_VAR 0 10
79484: PLUS
79485: PPUSH
79486: CALL_OW 273
79490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79491: LD_VAR 0 5
79495: PPUSH
79496: LD_VAR 0 7
79500: PPUSH
79501: CALL_OW 488
79505: PUSH
79506: LD_VAR 0 5
79510: PPUSH
79511: LD_VAR 0 7
79515: PPUSH
79516: CALL_OW 428
79520: PPUSH
79521: CALL_OW 247
79525: PUSH
79526: LD_INT 3
79528: PUSH
79529: LD_INT 2
79531: PUSH
79532: EMPTY
79533: LIST
79534: LIST
79535: IN
79536: NOT
79537: AND
79538: IFFALSE 79582
// begin ComMoveXY ( unit , _x , _y ) ;
79540: LD_VAR 0 1
79544: PPUSH
79545: LD_VAR 0 5
79549: PPUSH
79550: LD_VAR 0 7
79554: PPUSH
79555: CALL_OW 111
// result := [ _x , _y ] ;
79559: LD_ADDR_VAR 0 3
79563: PUSH
79564: LD_VAR 0 5
79568: PUSH
79569: LD_VAR 0 7
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: ST_TO_ADDR
// exit ;
79578: POP
79579: POP
79580: GO 79586
// end ; end ;
79582: GO 79426
79584: POP
79585: POP
// end ;
79586: LD_VAR 0 3
79590: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79591: LD_INT 0
79593: PPUSH
79594: PPUSH
79595: PPUSH
// result := 0 ;
79596: LD_ADDR_VAR 0 3
79600: PUSH
79601: LD_INT 0
79603: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79604: LD_VAR 0 1
79608: PUSH
79609: LD_INT 0
79611: LESS
79612: PUSH
79613: LD_VAR 0 1
79617: PUSH
79618: LD_INT 8
79620: GREATER
79621: OR
79622: PUSH
79623: LD_VAR 0 2
79627: PUSH
79628: LD_INT 0
79630: LESS
79631: OR
79632: PUSH
79633: LD_VAR 0 2
79637: PUSH
79638: LD_INT 8
79640: GREATER
79641: OR
79642: IFFALSE 79646
// exit ;
79644: GO 79721
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79646: LD_ADDR_VAR 0 4
79650: PUSH
79651: LD_INT 22
79653: PUSH
79654: LD_VAR 0 2
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PPUSH
79663: CALL_OW 69
79667: PUSH
79668: FOR_IN
79669: IFFALSE 79719
// begin un := UnitShoot ( i ) ;
79671: LD_ADDR_VAR 0 5
79675: PUSH
79676: LD_VAR 0 4
79680: PPUSH
79681: CALL_OW 504
79685: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79686: LD_VAR 0 5
79690: PPUSH
79691: CALL_OW 255
79695: PUSH
79696: LD_VAR 0 1
79700: EQUAL
79701: IFFALSE 79717
// begin result := un ;
79703: LD_ADDR_VAR 0 3
79707: PUSH
79708: LD_VAR 0 5
79712: ST_TO_ADDR
// exit ;
79713: POP
79714: POP
79715: GO 79721
// end ; end ;
79717: GO 79668
79719: POP
79720: POP
// end ;
79721: LD_VAR 0 3
79725: RET
// export function GetCargoBay ( units ) ; begin
79726: LD_INT 0
79728: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79729: LD_ADDR_VAR 0 2
79733: PUSH
79734: LD_VAR 0 1
79738: PPUSH
79739: LD_INT 2
79741: PUSH
79742: LD_INT 34
79744: PUSH
79745: LD_INT 12
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: LD_INT 34
79754: PUSH
79755: LD_INT 51
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 34
79764: PUSH
79765: LD_INT 32
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: LD_INT 34
79774: PUSH
79775: LD_INT 89
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: LIST
79786: LIST
79787: LIST
79788: PPUSH
79789: CALL_OW 72
79793: ST_TO_ADDR
// end ;
79794: LD_VAR 0 2
79798: RET
// export function Negate ( value ) ; begin
79799: LD_INT 0
79801: PPUSH
// result := not value ;
79802: LD_ADDR_VAR 0 2
79806: PUSH
79807: LD_VAR 0 1
79811: NOT
79812: ST_TO_ADDR
// end ;
79813: LD_VAR 0 2
79817: RET
// export function Inc ( value ) ; begin
79818: LD_INT 0
79820: PPUSH
// result := value + 1 ;
79821: LD_ADDR_VAR 0 2
79825: PUSH
79826: LD_VAR 0 1
79830: PUSH
79831: LD_INT 1
79833: PLUS
79834: ST_TO_ADDR
// end ;
79835: LD_VAR 0 2
79839: RET
// export function Dec ( value ) ; begin
79840: LD_INT 0
79842: PPUSH
// result := value - 1 ;
79843: LD_ADDR_VAR 0 2
79847: PUSH
79848: LD_VAR 0 1
79852: PUSH
79853: LD_INT 1
79855: MINUS
79856: ST_TO_ADDR
// end ;
79857: LD_VAR 0 2
79861: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79862: LD_INT 0
79864: PPUSH
79865: PPUSH
79866: PPUSH
79867: PPUSH
79868: PPUSH
79869: PPUSH
79870: PPUSH
79871: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79872: LD_VAR 0 1
79876: PPUSH
79877: LD_VAR 0 2
79881: PPUSH
79882: CALL_OW 488
79886: NOT
79887: PUSH
79888: LD_VAR 0 3
79892: PPUSH
79893: LD_VAR 0 4
79897: PPUSH
79898: CALL_OW 488
79902: NOT
79903: OR
79904: IFFALSE 79917
// begin result := - 1 ;
79906: LD_ADDR_VAR 0 5
79910: PUSH
79911: LD_INT 1
79913: NEG
79914: ST_TO_ADDR
// exit ;
79915: GO 80152
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79917: LD_ADDR_VAR 0 12
79921: PUSH
79922: LD_VAR 0 1
79926: PPUSH
79927: LD_VAR 0 2
79931: PPUSH
79932: LD_VAR 0 3
79936: PPUSH
79937: LD_VAR 0 4
79941: PPUSH
79942: CALL 79002 0 4
79946: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79947: LD_ADDR_VAR 0 11
79951: PUSH
79952: LD_VAR 0 1
79956: PPUSH
79957: LD_VAR 0 2
79961: PPUSH
79962: LD_VAR 0 12
79966: PUSH
79967: LD_INT 1
79969: ARRAY
79970: PPUSH
79971: LD_VAR 0 12
79975: PUSH
79976: LD_INT 2
79978: ARRAY
79979: PPUSH
79980: CALL_OW 298
79984: ST_TO_ADDR
// distance := 9999 ;
79985: LD_ADDR_VAR 0 10
79989: PUSH
79990: LD_INT 9999
79992: ST_TO_ADDR
// for i := 0 to 5 do
79993: LD_ADDR_VAR 0 6
79997: PUSH
79998: DOUBLE
79999: LD_INT 0
80001: DEC
80002: ST_TO_ADDR
80003: LD_INT 5
80005: PUSH
80006: FOR_TO
80007: IFFALSE 80150
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80009: LD_ADDR_VAR 0 7
80013: PUSH
80014: LD_VAR 0 1
80018: PPUSH
80019: LD_VAR 0 6
80023: PPUSH
80024: LD_VAR 0 11
80028: PPUSH
80029: CALL_OW 272
80033: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80034: LD_ADDR_VAR 0 8
80038: PUSH
80039: LD_VAR 0 2
80043: PPUSH
80044: LD_VAR 0 6
80048: PPUSH
80049: LD_VAR 0 11
80053: PPUSH
80054: CALL_OW 273
80058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80059: LD_VAR 0 7
80063: PPUSH
80064: LD_VAR 0 8
80068: PPUSH
80069: CALL_OW 488
80073: NOT
80074: IFFALSE 80078
// continue ;
80076: GO 80006
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80078: LD_ADDR_VAR 0 9
80082: PUSH
80083: LD_VAR 0 12
80087: PUSH
80088: LD_INT 1
80090: ARRAY
80091: PPUSH
80092: LD_VAR 0 12
80096: PUSH
80097: LD_INT 2
80099: ARRAY
80100: PPUSH
80101: LD_VAR 0 7
80105: PPUSH
80106: LD_VAR 0 8
80110: PPUSH
80111: CALL_OW 298
80115: ST_TO_ADDR
// if tmp < distance then
80116: LD_VAR 0 9
80120: PUSH
80121: LD_VAR 0 10
80125: LESS
80126: IFFALSE 80148
// begin result := i ;
80128: LD_ADDR_VAR 0 5
80132: PUSH
80133: LD_VAR 0 6
80137: ST_TO_ADDR
// distance := tmp ;
80138: LD_ADDR_VAR 0 10
80142: PUSH
80143: LD_VAR 0 9
80147: ST_TO_ADDR
// end ; end ;
80148: GO 80006
80150: POP
80151: POP
// end ;
80152: LD_VAR 0 5
80156: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80157: LD_INT 0
80159: PPUSH
80160: PPUSH
// if not driver or not IsInUnit ( driver ) then
80161: LD_VAR 0 1
80165: NOT
80166: PUSH
80167: LD_VAR 0 1
80171: PPUSH
80172: CALL_OW 310
80176: NOT
80177: OR
80178: IFFALSE 80182
// exit ;
80180: GO 80272
// vehicle := IsInUnit ( driver ) ;
80182: LD_ADDR_VAR 0 3
80186: PUSH
80187: LD_VAR 0 1
80191: PPUSH
80192: CALL_OW 310
80196: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80197: LD_VAR 0 1
80201: PPUSH
80202: LD_STRING \
80204: PUSH
80205: LD_INT 0
80207: PUSH
80208: LD_INT 0
80210: PUSH
80211: LD_INT 0
80213: PUSH
80214: LD_INT 0
80216: PUSH
80217: LD_INT 0
80219: PUSH
80220: LD_INT 0
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: PUSH
80232: LD_STRING E
80234: PUSH
80235: LD_INT 0
80237: PUSH
80238: LD_INT 0
80240: PUSH
80241: LD_VAR 0 3
80245: PUSH
80246: LD_INT 0
80248: PUSH
80249: LD_INT 0
80251: PUSH
80252: LD_INT 0
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PPUSH
80268: CALL_OW 446
// end ;
80272: LD_VAR 0 2
80276: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80277: LD_INT 0
80279: PPUSH
80280: PPUSH
// if not driver or not IsInUnit ( driver ) then
80281: LD_VAR 0 1
80285: NOT
80286: PUSH
80287: LD_VAR 0 1
80291: PPUSH
80292: CALL_OW 310
80296: NOT
80297: OR
80298: IFFALSE 80302
// exit ;
80300: GO 80392
// vehicle := IsInUnit ( driver ) ;
80302: LD_ADDR_VAR 0 3
80306: PUSH
80307: LD_VAR 0 1
80311: PPUSH
80312: CALL_OW 310
80316: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80317: LD_VAR 0 1
80321: PPUSH
80322: LD_STRING \
80324: PUSH
80325: LD_INT 0
80327: PUSH
80328: LD_INT 0
80330: PUSH
80331: LD_INT 0
80333: PUSH
80334: LD_INT 0
80336: PUSH
80337: LD_INT 0
80339: PUSH
80340: LD_INT 0
80342: PUSH
80343: EMPTY
80344: LIST
80345: LIST
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: PUSH
80352: LD_STRING E
80354: PUSH
80355: LD_INT 0
80357: PUSH
80358: LD_INT 0
80360: PUSH
80361: LD_VAR 0 3
80365: PUSH
80366: LD_INT 0
80368: PUSH
80369: LD_INT 0
80371: PUSH
80372: LD_INT 0
80374: PUSH
80375: EMPTY
80376: LIST
80377: LIST
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: LIST
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PPUSH
80388: CALL_OW 447
// end ;
80392: LD_VAR 0 2
80396: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80397: LD_INT 0
80399: PPUSH
80400: PPUSH
80401: PPUSH
// tmp := [ ] ;
80402: LD_ADDR_VAR 0 5
80406: PUSH
80407: EMPTY
80408: ST_TO_ADDR
// for i in units do
80409: LD_ADDR_VAR 0 4
80413: PUSH
80414: LD_VAR 0 1
80418: PUSH
80419: FOR_IN
80420: IFFALSE 80458
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80422: LD_ADDR_VAR 0 5
80426: PUSH
80427: LD_VAR 0 5
80431: PPUSH
80432: LD_VAR 0 5
80436: PUSH
80437: LD_INT 1
80439: PLUS
80440: PPUSH
80441: LD_VAR 0 4
80445: PPUSH
80446: CALL_OW 256
80450: PPUSH
80451: CALL_OW 2
80455: ST_TO_ADDR
80456: GO 80419
80458: POP
80459: POP
// if not tmp then
80460: LD_VAR 0 5
80464: NOT
80465: IFFALSE 80469
// exit ;
80467: GO 80517
// if asc then
80469: LD_VAR 0 2
80473: IFFALSE 80497
// result := SortListByListAsc ( units , tmp ) else
80475: LD_ADDR_VAR 0 3
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: LD_VAR 0 5
80489: PPUSH
80490: CALL_OW 76
80494: ST_TO_ADDR
80495: GO 80517
// result := SortListByListDesc ( units , tmp ) ;
80497: LD_ADDR_VAR 0 3
80501: PUSH
80502: LD_VAR 0 1
80506: PPUSH
80507: LD_VAR 0 5
80511: PPUSH
80512: CALL_OW 77
80516: ST_TO_ADDR
// end ;
80517: LD_VAR 0 3
80521: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80522: LD_INT 0
80524: PPUSH
80525: PPUSH
// task := GetTaskList ( mech ) ;
80526: LD_ADDR_VAR 0 4
80530: PUSH
80531: LD_VAR 0 1
80535: PPUSH
80536: CALL_OW 437
80540: ST_TO_ADDR
// if not task then
80541: LD_VAR 0 4
80545: NOT
80546: IFFALSE 80550
// exit ;
80548: GO 80592
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80550: LD_ADDR_VAR 0 3
80554: PUSH
80555: LD_VAR 0 4
80559: PUSH
80560: LD_INT 1
80562: ARRAY
80563: PUSH
80564: LD_INT 1
80566: ARRAY
80567: PUSH
80568: LD_STRING r
80570: EQUAL
80571: PUSH
80572: LD_VAR 0 4
80576: PUSH
80577: LD_INT 1
80579: ARRAY
80580: PUSH
80581: LD_INT 4
80583: ARRAY
80584: PUSH
80585: LD_VAR 0 2
80589: EQUAL
80590: AND
80591: ST_TO_ADDR
// end ;
80592: LD_VAR 0 3
80596: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80597: LD_INT 0
80599: PPUSH
// SetDir ( unit , d ) ;
80600: LD_VAR 0 1
80604: PPUSH
80605: LD_VAR 0 4
80609: PPUSH
80610: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80614: LD_VAR 0 1
80618: PPUSH
80619: LD_VAR 0 2
80623: PPUSH
80624: LD_VAR 0 3
80628: PPUSH
80629: LD_VAR 0 5
80633: PPUSH
80634: CALL_OW 48
// end ;
80638: LD_VAR 0 6
80642: RET
// export function ToNaturalNumber ( number ) ; begin
80643: LD_INT 0
80645: PPUSH
// result := number div 1 ;
80646: LD_ADDR_VAR 0 2
80650: PUSH
80651: LD_VAR 0 1
80655: PUSH
80656: LD_INT 1
80658: DIV
80659: ST_TO_ADDR
// if number < 0 then
80660: LD_VAR 0 1
80664: PUSH
80665: LD_INT 0
80667: LESS
80668: IFFALSE 80678
// result := 0 ;
80670: LD_ADDR_VAR 0 2
80674: PUSH
80675: LD_INT 0
80677: ST_TO_ADDR
// end ;
80678: LD_VAR 0 2
80682: RET
// export function SortByClass ( units , class ) ; var un ; begin
80683: LD_INT 0
80685: PPUSH
80686: PPUSH
// if not units or not class then
80687: LD_VAR 0 1
80691: NOT
80692: PUSH
80693: LD_VAR 0 2
80697: NOT
80698: OR
80699: IFFALSE 80703
// exit ;
80701: GO 80798
// result := [ ] ;
80703: LD_ADDR_VAR 0 3
80707: PUSH
80708: EMPTY
80709: ST_TO_ADDR
// for un in units do
80710: LD_ADDR_VAR 0 4
80714: PUSH
80715: LD_VAR 0 1
80719: PUSH
80720: FOR_IN
80721: IFFALSE 80796
// if GetClass ( un ) = class then
80723: LD_VAR 0 4
80727: PPUSH
80728: CALL_OW 257
80732: PUSH
80733: LD_VAR 0 2
80737: EQUAL
80738: IFFALSE 80765
// result := Insert ( result , 1 , un ) else
80740: LD_ADDR_VAR 0 3
80744: PUSH
80745: LD_VAR 0 3
80749: PPUSH
80750: LD_INT 1
80752: PPUSH
80753: LD_VAR 0 4
80757: PPUSH
80758: CALL_OW 2
80762: ST_TO_ADDR
80763: GO 80794
// result := Replace ( result , result + 1 , un ) ;
80765: LD_ADDR_VAR 0 3
80769: PUSH
80770: LD_VAR 0 3
80774: PPUSH
80775: LD_VAR 0 3
80779: PUSH
80780: LD_INT 1
80782: PLUS
80783: PPUSH
80784: LD_VAR 0 4
80788: PPUSH
80789: CALL_OW 1
80793: ST_TO_ADDR
80794: GO 80720
80796: POP
80797: POP
// end ;
80798: LD_VAR 0 3
80802: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80803: LD_INT 0
80805: PPUSH
80806: PPUSH
80807: PPUSH
80808: PPUSH
80809: PPUSH
80810: PPUSH
80811: PPUSH
// result := [ ] ;
80812: LD_ADDR_VAR 0 4
80816: PUSH
80817: EMPTY
80818: ST_TO_ADDR
// if x - r < 0 then
80819: LD_VAR 0 1
80823: PUSH
80824: LD_VAR 0 3
80828: MINUS
80829: PUSH
80830: LD_INT 0
80832: LESS
80833: IFFALSE 80845
// min_x := 0 else
80835: LD_ADDR_VAR 0 8
80839: PUSH
80840: LD_INT 0
80842: ST_TO_ADDR
80843: GO 80861
// min_x := x - r ;
80845: LD_ADDR_VAR 0 8
80849: PUSH
80850: LD_VAR 0 1
80854: PUSH
80855: LD_VAR 0 3
80859: MINUS
80860: ST_TO_ADDR
// if y - r < 0 then
80861: LD_VAR 0 2
80865: PUSH
80866: LD_VAR 0 3
80870: MINUS
80871: PUSH
80872: LD_INT 0
80874: LESS
80875: IFFALSE 80887
// min_y := 0 else
80877: LD_ADDR_VAR 0 7
80881: PUSH
80882: LD_INT 0
80884: ST_TO_ADDR
80885: GO 80903
// min_y := y - r ;
80887: LD_ADDR_VAR 0 7
80891: PUSH
80892: LD_VAR 0 2
80896: PUSH
80897: LD_VAR 0 3
80901: MINUS
80902: ST_TO_ADDR
// max_x := x + r ;
80903: LD_ADDR_VAR 0 9
80907: PUSH
80908: LD_VAR 0 1
80912: PUSH
80913: LD_VAR 0 3
80917: PLUS
80918: ST_TO_ADDR
// max_y := y + r ;
80919: LD_ADDR_VAR 0 10
80923: PUSH
80924: LD_VAR 0 2
80928: PUSH
80929: LD_VAR 0 3
80933: PLUS
80934: ST_TO_ADDR
// for _x = min_x to max_x do
80935: LD_ADDR_VAR 0 5
80939: PUSH
80940: DOUBLE
80941: LD_VAR 0 8
80945: DEC
80946: ST_TO_ADDR
80947: LD_VAR 0 9
80951: PUSH
80952: FOR_TO
80953: IFFALSE 81054
// for _y = min_y to max_y do
80955: LD_ADDR_VAR 0 6
80959: PUSH
80960: DOUBLE
80961: LD_VAR 0 7
80965: DEC
80966: ST_TO_ADDR
80967: LD_VAR 0 10
80971: PUSH
80972: FOR_TO
80973: IFFALSE 81050
// begin if not ValidHex ( _x , _y ) then
80975: LD_VAR 0 5
80979: PPUSH
80980: LD_VAR 0 6
80984: PPUSH
80985: CALL_OW 488
80989: NOT
80990: IFFALSE 80994
// continue ;
80992: GO 80972
// if GetResourceTypeXY ( _x , _y ) then
80994: LD_VAR 0 5
80998: PPUSH
80999: LD_VAR 0 6
81003: PPUSH
81004: CALL_OW 283
81008: IFFALSE 81048
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81010: LD_ADDR_VAR 0 4
81014: PUSH
81015: LD_VAR 0 4
81019: PPUSH
81020: LD_VAR 0 4
81024: PUSH
81025: LD_INT 1
81027: PLUS
81028: PPUSH
81029: LD_VAR 0 5
81033: PUSH
81034: LD_VAR 0 6
81038: PUSH
81039: EMPTY
81040: LIST
81041: LIST
81042: PPUSH
81043: CALL_OW 1
81047: ST_TO_ADDR
// end ;
81048: GO 80972
81050: POP
81051: POP
81052: GO 80952
81054: POP
81055: POP
// end ;
81056: LD_VAR 0 4
81060: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81061: LD_INT 0
81063: PPUSH
81064: PPUSH
81065: PPUSH
81066: PPUSH
81067: PPUSH
81068: PPUSH
81069: PPUSH
81070: PPUSH
// if not units then
81071: LD_VAR 0 1
81075: NOT
81076: IFFALSE 81080
// exit ;
81078: GO 81604
// result := UnitFilter ( units , [ f_ok ] ) ;
81080: LD_ADDR_VAR 0 3
81084: PUSH
81085: LD_VAR 0 1
81089: PPUSH
81090: LD_INT 50
81092: PUSH
81093: EMPTY
81094: LIST
81095: PPUSH
81096: CALL_OW 72
81100: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81101: LD_ADDR_VAR 0 8
81105: PUSH
81106: LD_VAR 0 1
81110: PUSH
81111: LD_INT 1
81113: ARRAY
81114: PPUSH
81115: CALL_OW 255
81119: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81120: LD_ADDR_VAR 0 10
81124: PUSH
81125: LD_INT 29
81127: PUSH
81128: LD_INT 91
81130: PUSH
81131: LD_INT 49
81133: PUSH
81134: EMPTY
81135: LIST
81136: LIST
81137: LIST
81138: ST_TO_ADDR
// if not result then
81139: LD_VAR 0 3
81143: NOT
81144: IFFALSE 81148
// exit ;
81146: GO 81604
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81148: LD_ADDR_VAR 0 5
81152: PUSH
81153: LD_INT 81
81155: PUSH
81156: LD_VAR 0 8
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PPUSH
81165: CALL_OW 69
81169: ST_TO_ADDR
// for i in result do
81170: LD_ADDR_VAR 0 4
81174: PUSH
81175: LD_VAR 0 3
81179: PUSH
81180: FOR_IN
81181: IFFALSE 81602
// begin tag := GetTag ( i ) + 1 ;
81183: LD_ADDR_VAR 0 9
81187: PUSH
81188: LD_VAR 0 4
81192: PPUSH
81193: CALL_OW 110
81197: PUSH
81198: LD_INT 1
81200: PLUS
81201: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81202: LD_ADDR_VAR 0 7
81206: PUSH
81207: LD_VAR 0 4
81211: PPUSH
81212: CALL_OW 250
81216: PPUSH
81217: LD_VAR 0 4
81221: PPUSH
81222: CALL_OW 251
81226: PPUSH
81227: LD_INT 6
81229: PPUSH
81230: CALL 80803 0 3
81234: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81235: LD_VAR 0 4
81239: PPUSH
81240: CALL_OW 247
81244: PUSH
81245: LD_INT 2
81247: EQUAL
81248: PUSH
81249: LD_VAR 0 7
81253: AND
81254: PUSH
81255: LD_VAR 0 4
81259: PPUSH
81260: CALL_OW 264
81264: PUSH
81265: LD_VAR 0 10
81269: IN
81270: NOT
81271: AND
81272: IFFALSE 81311
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81274: LD_VAR 0 4
81278: PPUSH
81279: LD_VAR 0 7
81283: PUSH
81284: LD_INT 1
81286: ARRAY
81287: PUSH
81288: LD_INT 1
81290: ARRAY
81291: PPUSH
81292: LD_VAR 0 7
81296: PUSH
81297: LD_INT 1
81299: ARRAY
81300: PUSH
81301: LD_INT 2
81303: ARRAY
81304: PPUSH
81305: CALL_OW 116
81309: GO 81600
// if path > tag then
81311: LD_VAR 0 2
81315: PUSH
81316: LD_VAR 0 9
81320: GREATER
81321: IFFALSE 81529
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81323: LD_ADDR_VAR 0 6
81327: PUSH
81328: LD_VAR 0 5
81332: PPUSH
81333: LD_INT 91
81335: PUSH
81336: LD_VAR 0 4
81340: PUSH
81341: LD_INT 8
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: LIST
81348: PPUSH
81349: CALL_OW 72
81353: ST_TO_ADDR
// if nearEnemy then
81354: LD_VAR 0 6
81358: IFFALSE 81427
// begin if GetWeapon ( i ) = ru_time_lapser then
81360: LD_VAR 0 4
81364: PPUSH
81365: CALL_OW 264
81369: PUSH
81370: LD_INT 49
81372: EQUAL
81373: IFFALSE 81401
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81375: LD_VAR 0 4
81379: PPUSH
81380: LD_VAR 0 6
81384: PPUSH
81385: LD_VAR 0 4
81389: PPUSH
81390: CALL_OW 74
81394: PPUSH
81395: CALL_OW 112
81399: GO 81425
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81401: LD_VAR 0 4
81405: PPUSH
81406: LD_VAR 0 6
81410: PPUSH
81411: LD_VAR 0 4
81415: PPUSH
81416: CALL_OW 74
81420: PPUSH
81421: CALL_OW 115
// end else
81425: GO 81527
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81427: LD_VAR 0 4
81431: PPUSH
81432: LD_VAR 0 2
81436: PUSH
81437: LD_VAR 0 9
81441: ARRAY
81442: PUSH
81443: LD_INT 1
81445: ARRAY
81446: PPUSH
81447: LD_VAR 0 2
81451: PUSH
81452: LD_VAR 0 9
81456: ARRAY
81457: PUSH
81458: LD_INT 2
81460: ARRAY
81461: PPUSH
81462: CALL_OW 297
81466: PUSH
81467: LD_INT 6
81469: GREATER
81470: IFFALSE 81513
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81472: LD_VAR 0 4
81476: PPUSH
81477: LD_VAR 0 2
81481: PUSH
81482: LD_VAR 0 9
81486: ARRAY
81487: PUSH
81488: LD_INT 1
81490: ARRAY
81491: PPUSH
81492: LD_VAR 0 2
81496: PUSH
81497: LD_VAR 0 9
81501: ARRAY
81502: PUSH
81503: LD_INT 2
81505: ARRAY
81506: PPUSH
81507: CALL_OW 114
81511: GO 81527
// SetTag ( i , tag ) ;
81513: LD_VAR 0 4
81517: PPUSH
81518: LD_VAR 0 9
81522: PPUSH
81523: CALL_OW 109
// end else
81527: GO 81600
// if enemy then
81529: LD_VAR 0 5
81533: IFFALSE 81600
// begin if GetWeapon ( i ) = ru_time_lapser then
81535: LD_VAR 0 4
81539: PPUSH
81540: CALL_OW 264
81544: PUSH
81545: LD_INT 49
81547: EQUAL
81548: IFFALSE 81576
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81550: LD_VAR 0 4
81554: PPUSH
81555: LD_VAR 0 5
81559: PPUSH
81560: LD_VAR 0 4
81564: PPUSH
81565: CALL_OW 74
81569: PPUSH
81570: CALL_OW 112
81574: GO 81600
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81576: LD_VAR 0 4
81580: PPUSH
81581: LD_VAR 0 5
81585: PPUSH
81586: LD_VAR 0 4
81590: PPUSH
81591: CALL_OW 74
81595: PPUSH
81596: CALL_OW 115
// end ; end ;
81600: GO 81180
81602: POP
81603: POP
// end ;
81604: LD_VAR 0 3
81608: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81609: LD_INT 0
81611: PPUSH
81612: PPUSH
81613: PPUSH
// if not unit or IsInUnit ( unit ) then
81614: LD_VAR 0 1
81618: NOT
81619: PUSH
81620: LD_VAR 0 1
81624: PPUSH
81625: CALL_OW 310
81629: OR
81630: IFFALSE 81634
// exit ;
81632: GO 81725
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81634: LD_ADDR_VAR 0 4
81638: PUSH
81639: LD_VAR 0 1
81643: PPUSH
81644: CALL_OW 250
81648: PPUSH
81649: LD_VAR 0 2
81653: PPUSH
81654: LD_INT 1
81656: PPUSH
81657: CALL_OW 272
81661: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81662: LD_ADDR_VAR 0 5
81666: PUSH
81667: LD_VAR 0 1
81671: PPUSH
81672: CALL_OW 251
81676: PPUSH
81677: LD_VAR 0 2
81681: PPUSH
81682: LD_INT 1
81684: PPUSH
81685: CALL_OW 273
81689: ST_TO_ADDR
// if ValidHex ( x , y ) then
81690: LD_VAR 0 4
81694: PPUSH
81695: LD_VAR 0 5
81699: PPUSH
81700: CALL_OW 488
81704: IFFALSE 81725
// ComTurnXY ( unit , x , y ) ;
81706: LD_VAR 0 1
81710: PPUSH
81711: LD_VAR 0 4
81715: PPUSH
81716: LD_VAR 0 5
81720: PPUSH
81721: CALL_OW 118
// end ;
81725: LD_VAR 0 3
81729: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81730: LD_INT 0
81732: PPUSH
81733: PPUSH
// result := false ;
81734: LD_ADDR_VAR 0 3
81738: PUSH
81739: LD_INT 0
81741: ST_TO_ADDR
// if not units then
81742: LD_VAR 0 2
81746: NOT
81747: IFFALSE 81751
// exit ;
81749: GO 81796
// for i in units do
81751: LD_ADDR_VAR 0 4
81755: PUSH
81756: LD_VAR 0 2
81760: PUSH
81761: FOR_IN
81762: IFFALSE 81794
// if See ( side , i ) then
81764: LD_VAR 0 1
81768: PPUSH
81769: LD_VAR 0 4
81773: PPUSH
81774: CALL_OW 292
81778: IFFALSE 81792
// begin result := true ;
81780: LD_ADDR_VAR 0 3
81784: PUSH
81785: LD_INT 1
81787: ST_TO_ADDR
// exit ;
81788: POP
81789: POP
81790: GO 81796
// end ;
81792: GO 81761
81794: POP
81795: POP
// end ;
81796: LD_VAR 0 3
81800: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81801: LD_INT 0
81803: PPUSH
81804: PPUSH
81805: PPUSH
81806: PPUSH
// if not unit or not points then
81807: LD_VAR 0 1
81811: NOT
81812: PUSH
81813: LD_VAR 0 2
81817: NOT
81818: OR
81819: IFFALSE 81823
// exit ;
81821: GO 81913
// dist := 99999 ;
81823: LD_ADDR_VAR 0 5
81827: PUSH
81828: LD_INT 99999
81830: ST_TO_ADDR
// for i in points do
81831: LD_ADDR_VAR 0 4
81835: PUSH
81836: LD_VAR 0 2
81840: PUSH
81841: FOR_IN
81842: IFFALSE 81911
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81844: LD_ADDR_VAR 0 6
81848: PUSH
81849: LD_VAR 0 1
81853: PPUSH
81854: LD_VAR 0 4
81858: PUSH
81859: LD_INT 1
81861: ARRAY
81862: PPUSH
81863: LD_VAR 0 4
81867: PUSH
81868: LD_INT 2
81870: ARRAY
81871: PPUSH
81872: CALL_OW 297
81876: ST_TO_ADDR
// if tmpDist < dist then
81877: LD_VAR 0 6
81881: PUSH
81882: LD_VAR 0 5
81886: LESS
81887: IFFALSE 81909
// begin result := i ;
81889: LD_ADDR_VAR 0 3
81893: PUSH
81894: LD_VAR 0 4
81898: ST_TO_ADDR
// dist := tmpDist ;
81899: LD_ADDR_VAR 0 5
81903: PUSH
81904: LD_VAR 0 6
81908: ST_TO_ADDR
// end ; end ;
81909: GO 81841
81911: POP
81912: POP
// end ;
81913: LD_VAR 0 3
81917: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81918: LD_INT 0
81920: PPUSH
// uc_side := side ;
81921: LD_ADDR_OWVAR 20
81925: PUSH
81926: LD_VAR 0 1
81930: ST_TO_ADDR
// uc_nation := 3 ;
81931: LD_ADDR_OWVAR 21
81935: PUSH
81936: LD_INT 3
81938: ST_TO_ADDR
// vc_chassis := 25 ;
81939: LD_ADDR_OWVAR 37
81943: PUSH
81944: LD_INT 25
81946: ST_TO_ADDR
// vc_engine := engine_siberite ;
81947: LD_ADDR_OWVAR 39
81951: PUSH
81952: LD_INT 3
81954: ST_TO_ADDR
// vc_control := control_computer ;
81955: LD_ADDR_OWVAR 38
81959: PUSH
81960: LD_INT 3
81962: ST_TO_ADDR
// vc_weapon := 59 ;
81963: LD_ADDR_OWVAR 40
81967: PUSH
81968: LD_INT 59
81970: ST_TO_ADDR
// result := CreateVehicle ;
81971: LD_ADDR_VAR 0 5
81975: PUSH
81976: CALL_OW 45
81980: ST_TO_ADDR
// SetDir ( result , d ) ;
81981: LD_VAR 0 5
81985: PPUSH
81986: LD_VAR 0 4
81990: PPUSH
81991: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81995: LD_VAR 0 5
81999: PPUSH
82000: LD_VAR 0 2
82004: PPUSH
82005: LD_VAR 0 3
82009: PPUSH
82010: LD_INT 0
82012: PPUSH
82013: CALL_OW 48
// end ;
82017: LD_VAR 0 5
82021: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82022: LD_INT 0
82024: PPUSH
82025: PPUSH
82026: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82027: LD_ADDR_VAR 0 2
82031: PUSH
82032: LD_INT 0
82034: PUSH
82035: LD_INT 0
82037: PUSH
82038: LD_INT 0
82040: PUSH
82041: LD_INT 0
82043: PUSH
82044: EMPTY
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82050: LD_VAR 0 1
82054: NOT
82055: PUSH
82056: LD_VAR 0 1
82060: PPUSH
82061: CALL_OW 264
82065: PUSH
82066: LD_INT 12
82068: PUSH
82069: LD_INT 51
82071: PUSH
82072: LD_INT 32
82074: PUSH
82075: LD_INT 89
82077: PUSH
82078: EMPTY
82079: LIST
82080: LIST
82081: LIST
82082: LIST
82083: IN
82084: NOT
82085: OR
82086: IFFALSE 82090
// exit ;
82088: GO 82188
// for i := 1 to 3 do
82090: LD_ADDR_VAR 0 3
82094: PUSH
82095: DOUBLE
82096: LD_INT 1
82098: DEC
82099: ST_TO_ADDR
82100: LD_INT 3
82102: PUSH
82103: FOR_TO
82104: IFFALSE 82186
// begin tmp := GetCargo ( cargo , i ) ;
82106: LD_ADDR_VAR 0 4
82110: PUSH
82111: LD_VAR 0 1
82115: PPUSH
82116: LD_VAR 0 3
82120: PPUSH
82121: CALL_OW 289
82125: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82126: LD_ADDR_VAR 0 2
82130: PUSH
82131: LD_VAR 0 2
82135: PPUSH
82136: LD_VAR 0 3
82140: PPUSH
82141: LD_VAR 0 4
82145: PPUSH
82146: CALL_OW 1
82150: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82151: LD_ADDR_VAR 0 2
82155: PUSH
82156: LD_VAR 0 2
82160: PPUSH
82161: LD_INT 4
82163: PPUSH
82164: LD_VAR 0 2
82168: PUSH
82169: LD_INT 4
82171: ARRAY
82172: PUSH
82173: LD_VAR 0 4
82177: PLUS
82178: PPUSH
82179: CALL_OW 1
82183: ST_TO_ADDR
// end ;
82184: GO 82103
82186: POP
82187: POP
// end ;
82188: LD_VAR 0 2
82192: RET
// export function Length ( array ) ; begin
82193: LD_INT 0
82195: PPUSH
// result := array + 0 ;
82196: LD_ADDR_VAR 0 2
82200: PUSH
82201: LD_VAR 0 1
82205: PUSH
82206: LD_INT 0
82208: PLUS
82209: ST_TO_ADDR
// end ;
82210: LD_VAR 0 2
82214: RET
// export function PrepareArray ( array ) ; begin
82215: LD_INT 0
82217: PPUSH
// result := array diff 0 ;
82218: LD_ADDR_VAR 0 2
82222: PUSH
82223: LD_VAR 0 1
82227: PUSH
82228: LD_INT 0
82230: DIFF
82231: ST_TO_ADDR
// if not result [ 1 ] then
82232: LD_VAR 0 2
82236: PUSH
82237: LD_INT 1
82239: ARRAY
82240: NOT
82241: IFFALSE 82261
// result := Delete ( result , 1 ) ;
82243: LD_ADDR_VAR 0 2
82247: PUSH
82248: LD_VAR 0 2
82252: PPUSH
82253: LD_INT 1
82255: PPUSH
82256: CALL_OW 3
82260: ST_TO_ADDR
// end ;
82261: LD_VAR 0 2
82265: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82266: LD_INT 0
82268: PPUSH
82269: PPUSH
82270: PPUSH
82271: PPUSH
// sibRocketRange := 25 ;
82272: LD_ADDR_VAR 0 6
82276: PUSH
82277: LD_INT 25
82279: ST_TO_ADDR
// result := false ;
82280: LD_ADDR_VAR 0 4
82284: PUSH
82285: LD_INT 0
82287: ST_TO_ADDR
// for i := 0 to 5 do
82288: LD_ADDR_VAR 0 5
82292: PUSH
82293: DOUBLE
82294: LD_INT 0
82296: DEC
82297: ST_TO_ADDR
82298: LD_INT 5
82300: PUSH
82301: FOR_TO
82302: IFFALSE 82369
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82304: LD_VAR 0 1
82308: PPUSH
82309: LD_VAR 0 5
82313: PPUSH
82314: LD_VAR 0 6
82318: PPUSH
82319: CALL_OW 272
82323: PPUSH
82324: LD_VAR 0 2
82328: PPUSH
82329: LD_VAR 0 5
82333: PPUSH
82334: LD_VAR 0 6
82338: PPUSH
82339: CALL_OW 273
82343: PPUSH
82344: LD_VAR 0 3
82348: PPUSH
82349: CALL_OW 309
82353: IFFALSE 82367
// begin result := true ;
82355: LD_ADDR_VAR 0 4
82359: PUSH
82360: LD_INT 1
82362: ST_TO_ADDR
// exit ;
82363: POP
82364: POP
82365: GO 82371
// end ;
82367: GO 82301
82369: POP
82370: POP
// end ;
82371: LD_VAR 0 4
82375: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82376: LD_INT 0
82378: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82379: LD_VAR 0 1
82383: PPUSH
82384: LD_VAR 0 2
82388: PPUSH
82389: LD_INT 0
82391: PPUSH
82392: LD_INT 0
82394: PPUSH
82395: LD_INT 1
82397: PPUSH
82398: LD_INT 0
82400: PPUSH
82401: CALL_OW 587
// end ; end_of_file
82405: LD_VAR 0 3
82409: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82410: LD_VAR 0 1
82414: PUSH
82415: LD_INT 200
82417: DOUBLE
82418: GREATEREQUAL
82419: IFFALSE 82427
82421: LD_INT 299
82423: DOUBLE
82424: LESSEQUAL
82425: IFTRUE 82429
82427: GO 82461
82429: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82430: LD_VAR 0 1
82434: PPUSH
82435: LD_VAR 0 2
82439: PPUSH
82440: LD_VAR 0 3
82444: PPUSH
82445: LD_VAR 0 4
82449: PPUSH
82450: LD_VAR 0 5
82454: PPUSH
82455: CALL 37095 0 5
82459: GO 82538
82461: LD_INT 300
82463: DOUBLE
82464: GREATEREQUAL
82465: IFFALSE 82473
82467: LD_INT 399
82469: DOUBLE
82470: LESSEQUAL
82471: IFTRUE 82475
82473: GO 82537
82475: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82476: LD_VAR 0 1
82480: PPUSH
82481: LD_VAR 0 2
82485: PPUSH
82486: LD_VAR 0 3
82490: PPUSH
82491: LD_VAR 0 4
82495: PPUSH
82496: LD_VAR 0 5
82500: PPUSH
82501: LD_VAR 0 6
82505: PPUSH
82506: LD_VAR 0 7
82510: PPUSH
82511: LD_VAR 0 8
82515: PPUSH
82516: LD_VAR 0 9
82520: PPUSH
82521: LD_VAR 0 10
82525: PPUSH
82526: LD_VAR 0 11
82530: PPUSH
82531: CALL 33428 0 11
82535: GO 82538
82537: POP
// end ;
82538: PPOPN 11
82540: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82541: LD_VAR 0 1
82545: PPUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_VAR 0 3
82555: PPUSH
82556: LD_VAR 0 4
82560: PPUSH
82561: LD_VAR 0 5
82565: PPUSH
82566: CALL 36831 0 5
// end ; end_of_file
82570: PPOPN 5
82572: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82573: LD_VAR 0 1
82577: PPUSH
82578: LD_VAR 0 2
82582: PPUSH
82583: LD_VAR 0 3
82587: PPUSH
82588: LD_VAR 0 4
82592: PPUSH
82593: LD_VAR 0 5
82597: PPUSH
82598: LD_VAR 0 6
82602: PPUSH
82603: CALL 21121 0 6
// end ;
82607: PPOPN 6
82609: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82610: LD_INT 0
82612: PPUSH
// begin if not units then
82613: LD_VAR 0 1
82617: NOT
82618: IFFALSE 82622
// exit ;
82620: GO 82622
// end ;
82622: PPOPN 7
82624: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82625: CALL 21092 0 0
// end ;
82629: PPOPN 1
82631: END
