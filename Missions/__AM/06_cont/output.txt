// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7206 0 0
// CreateNature ;
  57: CALL 20625 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10525 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41251 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41251 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41251 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41251 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41251 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41251 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41251 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41251 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41251 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41251 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41251 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41251 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 79117 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 6960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 6960 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7070 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7349 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ; end_of_file
6819: PPOPN 4
6821: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// if not characters then
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6836
// exit ;
6834: GO 6915
// speaker := characters [ rand ( 1 , characters ) ] ;
6836: LD_ADDR_VAR 0 6
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 12
6858: ARRAY
6859: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL_OW 258
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: IFFALSE 6891
// Say ( speaker , dialogMID ) else
6875: LD_VAR 0 6
6879: PPUSH
6880: LD_VAR 0 2
6884: PPUSH
6885: CALL_OW 88
6889: GO 6905
// Say ( speaker , dialogFID ) ;
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 3
6900: PPUSH
6901: CALL_OW 88
// result := speaker ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_VAR 0 6
6914: ST_TO_ADDR
// end ;
6915: LD_VAR 0 4
6919: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// for i in charactersList do
6924: LD_ADDR_VAR 0 4
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: FOR_IN
6935: IFFALSE 6953
// SaveCharacters ( i , ident ) ;
6937: LD_VAR 0 4
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 38
6951: GO 6934
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 3
6959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to count do
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 6
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7063
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_gallery =  ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_name =  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: CALL_OW 380
// un = CreateHuman ;
7037: LD_ADDR_VAR 0 10
7041: PUSH
7042: CALL_OW 44
7046: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7047: LD_VAR 0 10
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: CALL_OW 52
// end ;
7061: GO 6981
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 7
7069: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
// uc_side := GetSide ( b ) ;
7075: LD_ADDR_OWVAR 20
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7090: LD_ADDR_OWVAR 21
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 248
7104: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: CALL_OW 254
7134: PUSH
7135: LD_INT 3
7137: MINUS
7138: ST_TO_ADDR
// if dir < 0 then
7139: LD_VAR 0 5
7143: PUSH
7144: LD_INT 0
7146: LESS
7147: IFFALSE 7163
// dir := 6 + dir ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: LD_INT 6
7156: PUSH
7157: LD_VAR 0 5
7161: PLUS
7162: ST_TO_ADDR
// un := CreateHuman ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: CALL_OW 44
7172: ST_TO_ADDR
// SetDir ( un , dir ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 5
7182: PPUSH
7183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 52
// end ;
7201: LD_VAR 0 3
7205: RET
// export function PrepareDifficulty ; begin
7206: LD_INT 0
7208: PPUSH
// case Difficulty of 1 :
7209: LD_OWVAR 67
7213: PUSH
7214: LD_INT 1
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7241
7222: POP
// begin RuSolMinLevel = 2 ;
7223: LD_ADDR_EXP 35
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7231: LD_ADDR_EXP 36
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// end ; 2 :
7239: GO 7302
7241: LD_INT 2
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7268
7249: POP
// begin RuSolMinLevel = 3 ;
7250: LD_ADDR_EXP 35
7254: PUSH
7255: LD_INT 3
7257: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7258: LD_ADDR_EXP 36
7262: PUSH
7263: LD_INT 5
7265: ST_TO_ADDR
// end ; 3 .. 4 :
7266: GO 7302
7268: LD_INT 3
7270: DOUBLE
7271: GREATEREQUAL
7272: IFFALSE 7280
7274: LD_INT 4
7276: DOUBLE
7277: LESSEQUAL
7278: IFTRUE 7282
7280: GO 7301
7282: POP
// begin RuSolMinLevel = 4 ;
7283: LD_ADDR_EXP 35
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7291: LD_ADDR_EXP 36
7295: PUSH
7296: LD_INT 6
7298: ST_TO_ADDR
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: LD_VAR 0 1
7306: RET
// export function ShowQuery1 ; begin
7307: LD_INT 0
7309: PPUSH
// result := Query ( QKill ) ;
7310: LD_ADDR_VAR 0 1
7314: PUSH
7315: LD_STRING QKill
7317: PPUSH
7318: CALL_OW 97
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// export function ShowQuery2 ; begin
7328: LD_INT 0
7330: PPUSH
// result := Query ( QKill2 ) ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: LD_STRING QKill2
7338: PPUSH
7339: CALL_OW 97
7343: ST_TO_ADDR
// end ;
7344: LD_VAR 0 1
7348: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7355: LD_ADDR_VAR 0 7
7359: PUSH
7360: LD_INT 48
7362: PUSH
7363: LD_INT 49
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 51
7377: PUSH
7378: LD_INT 52
7380: PUSH
7381: LD_INT 69
7383: PUSH
7384: LD_INT 39
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 40
7392: PUSH
7393: LD_INT 53
7395: PUSH
7396: LD_INT 71
7398: PUSH
7399: LD_INT 57
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 59
7422: PUSH
7423: LD_INT 54
7425: PUSH
7426: LD_INT 55
7428: PUSH
7429: LD_INT 56
7431: PUSH
7432: LD_INT 63
7434: PUSH
7435: LD_INT 64
7437: PUSH
7438: LD_INT 65
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 82
7458: PUSH
7459: LD_INT 83
7461: PUSH
7462: LD_INT 84
7464: PUSH
7465: LD_INT 85
7467: PUSH
7468: LD_INT 86
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: ST_TO_ADDR
// for i = 1 to list do
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: DOUBLE
7516: LD_INT 1
7518: DEC
7519: ST_TO_ADDR
7520: LD_VAR 0 7
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7598
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 5
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 1
7551: EQUAL
7552: PUSH
7553: LD_VAR 0 7
7557: PUSH
7558: LD_VAR 0 5
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 3
7568: PPUSH
7569: CALL_OW 482
7573: AND
7574: IFFALSE 7596
// AddComResearch ( lab , list [ i ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 7
7585: PUSH
7586: LD_VAR 0 5
7590: ARRAY
7591: PPUSH
7592: CALL_OW 184
7596: GO 7525
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 4
7604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
7609: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_VAR 0 3
7645: LESSEQUAL
7646: IFFALSE 7754
// begin for i = 1 to vehCount do
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7752
// begin weapon := weaponTab [ i ] ;
7666: LD_ADDR_VAR 0 10
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: LD_VAR 0 9
7680: ARRAY
7681: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7682: LD_VAR 0 10
7686: PUSH
7687: LD_INT 46
7689: EQUAL
7690: IFFALSE 7721
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7692: LD_VAR 0 2
7696: PPUSH
7697: LD_INT 24
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
7719: GO 7750
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: LD_VAR 0 7
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 6
7740: PPUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: CALL_OW 185
// end ;
7750: GO 7663
7752: POP
7753: POP
// end ; end ;
7754: LD_VAR 0 8
7758: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 313
7781: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_VAR 0 3
7791: PPUSH
7792: LD_INT 22
7794: PUSH
7795: LD_VAR 0 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 750
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 54
7829: PUSH
7830: EMPTY
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 1000
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7910: LD_VAR 0 6
7914: NOT
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: LD_INT 250
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: NOT
7958: AND
7959: IFFALSE 7963
// exit ;
7961: GO 8121
// if buildingsList and engineerOkInside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 8
7972: AND
7973: IFFALSE 7984
// ComExitBuilding ( engineerOkInside ) ;
7975: LD_VAR 0 8
7979: PPUSH
7980: CALL_OW 122
// if buildingsList and engineerOkOutside then
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 9
7993: AND
7994: IFFALSE 8014
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7996: LD_VAR 0 9
8000: PPUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8014: LD_VAR 0 6
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 4
8027: PUSH
8028: LD_INT 0
8030: EQUAL
8031: AND
8032: PUSH
8033: LD_VAR 0 9
8037: AND
8038: IFFALSE 8054
// ComEnterUnit ( engineerOkOutside , depot ) ;
8040: LD_VAR 0 9
8044: PPUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8054: LD_VAR 0 9
8058: PUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_VAR 0 4
8073: AND
8074: IFFALSE 8121
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_VAR 0 4
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_INT 4
8115: ARRAY
8116: PPUSH
8117: CALL_OW 145
// end ;
8121: LD_VAR 0 5
8125: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_INT 22
8144: PUSH
8145: LD_VAR 0 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 251
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 23
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 50
8239: PUSH
8240: EMPTY
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8254: LD_ADDR_VAR 0 10
8258: PUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 750
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8331: LD_ADDR_VAR 0 11
8335: PUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 21
8355: PUSH
8356: LD_INT 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 3
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 24
8385: PUSH
8386: LD_INT 1000
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8408: LD_VAR 0 10
8412: NOT
8413: PUSH
8414: LD_VAR 0 11
8418: NOT
8419: AND
8420: PUSH
8421: LD_VAR 0 6
8425: NOT
8426: AND
8427: IFFALSE 8431
// exit ;
8429: GO 8637
// if damageUnits and sci_list then
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: AND
8441: IFFALSE 8457
// ComMoveToArea ( damageUnits , healArea ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 113
// if unitsToHeal and sci_list then
8457: LD_VAR 0 11
8461: PUSH
8462: LD_VAR 0 6
8466: AND
8467: IFFALSE 8478
// ComExitBuilding ( sci_list ) ;
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8478: LD_VAR 0 11
8482: PUSH
8483: LD_VAR 0 7
8487: AND
8488: IFFALSE 8508
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8490: LD_VAR 0 7
8494: PPUSH
8495: LD_VAR 0 11
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: PUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 0
8524: EQUAL
8525: AND
8526: PUSH
8527: LD_VAR 0 7
8531: AND
8532: IFFALSE 8637
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8581: LD_ADDR_VAR 0 13
8585: PUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_VAR 0 12
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8599: LD_VAR 0 7
8603: PPUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 60
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PPUSH
8622: LD_VAR 0 12
8626: PUSH
8627: LD_VAR 0 13
8631: ARRAY
8632: PPUSH
8633: CALL_OW 120
// end ; end ;
8637: LD_VAR 0 5
8641: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// tmp := [ ] ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8656: LD_ADDR_VAR 0 7
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: ST_TO_ADDR
// if bunkers then
8692: LD_VAR 0 7
8696: IFFALSE 8766
// for i in bunkers do
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 7
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8764
// for j in UnitsInside ( i ) do
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 4
8720: PPUSH
8721: CALL_OW 313
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8760
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_INT 1
8746: PLUS
8747: PPUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
8758: GO 8726
8760: POP
8761: POP
8762: GO 8708
8764: POP
8765: POP
// if tmp then
8766: LD_VAR 0 6
8770: IFFALSE 8810
// begin ComExitBuilding ( tmp ) ;
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PPUSH
8806: CALL_OW 174
// end ; end ;
8810: LD_VAR 0 3
8814: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// enable ;
8820: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8821: LD_ADDR_VAR 0 6
8825: PUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL_OW 435
8835: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 34
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8874: LD_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 435
8888: AND
8889: PUSH
8890: LD_VAR 0 6
8894: AND
8895: IFFALSE 8928
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 177
// end ;
8928: LD_VAR 0 4
8932: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 56
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 700
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 60
8986: PUSH
8987: EMPTY
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 8
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: PUSH
9056: LD_EXP 48
9060: PUSH
9061: LD_EXP 49
9065: UNION
9066: DIFF
9067: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 70
9126: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 251
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: ST_TO_ADDR
// if barrackList then
9197: LD_VAR 0 9
9201: IFFALSE 9357
// begin if turretList = 0 then
9203: LD_VAR 0 7
9207: PUSH
9208: LD_INT 0
9210: EQUAL
9211: IFFALSE 9249
// begin if soldiersList then
9213: LD_VAR 0 6
9217: IFFALSE 9247
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9219: LD_VAR 0 6
9223: PPUSH
9224: LD_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: PPUSH
9243: CALL_OW 120
// end else
9247: GO 9357
// begin for i in barrackList do
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 9
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9355
// begin if not turretList then
9262: LD_VAR 0 7
9266: NOT
9267: IFFALSE 9273
// exit ;
9269: POP
9270: POP
9271: GO 9357
// insideUnits = UnitsInside ( i ) ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 313
9287: ST_TO_ADDR
// if insideUnits then
9288: LD_VAR 0 10
9292: IFFALSE 9353
// begin tmp := insideUnits [ 1 ] ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9317: LD_VAR 0 8
9321: PPUSH
9322: LD_VAR 0 7
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 3
9352: ST_TO_ADDR
// end ; end ;
9353: GO 9259
9355: POP
9356: POP
// end ; end ; end ;
9357: LD_VAR 0 3
9361: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9370: LD_ADDR_VAR 0 8
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 52
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: ST_TO_ADDR
// if not craneList then
9417: LD_VAR 0 8
9421: NOT
9422: IFFALSE 9426
// exit ;
9424: GO 9860
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 1000
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9483: LD_VAR 0 9
9487: PUSH
9488: LD_VAR 0 8
9492: PPUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 750
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: AND
9508: IFFALSE 9543
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 750
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: LD_VAR 0 9
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9543: LD_VAR 0 8
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 750
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 72
9569: IFFALSE 9607
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: LD_INT 750
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 2
9602: PPUSH
9603: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9607: LD_VAR 0 8
9611: PUSH
9612: LD_VAR 0 9
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: AND
9621: PUSH
9622: LD_VAR 0 3
9626: AND
9627: IFFALSE 9674
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9629: LD_VAR 0 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 2
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 3
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 4
9668: ARRAY
9669: PPUSH
9670: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9674: LD_ADDR_VAR 0 7
9678: PUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 52
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 750
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 70
9743: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9744: LD_ADDR_VAR 0 6
9748: PUSH
9749: LD_VAR 0 2
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 70
9802: ST_TO_ADDR
// if crane then
9803: LD_VAR 0 7
9807: IFFALSE 9860
// for i in crane do
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 7
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9858
// begin if dep then
9822: LD_VAR 0 6
9826: IFFALSE 9842
// ComMoveUnit ( i , dep ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9842: LD_VAR 0 5
9846: PPUSH
9847: CALL_OW 311
9851: PPUSH
9852: CALL 80539 0 1
// end ;
9856: GO 9819
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function BuildBulldozer ; begin
9865: LD_INT 0
9867: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 302
9875: NOT
9876: PUSH
9877: LD_INT 17
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: NONEQUAL
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 9912
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9893: LD_INT 17
9895: PPUSH
9896: LD_INT 24
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 53
9907: PPUSH
9908: CALL_OW 185
// end ;
9912: LD_VAR 0 1
9916: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if not bulldozer then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10215
// list := ListEnvironmentArea ( area ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 353
9947: ST_TO_ADDR
// tmp := [ ] ;
9948: LD_ADDR_VAR 0 6
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// for i = 1 to list do
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: DOUBLE
9961: LD_INT 1
9963: DEC
9964: ST_TO_ADDR
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_TO
9971: IFFALSE 10069
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_VAR 0 4
9982: ARRAY
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_VAR 0 4
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: CALL_OW 554
10007: IFFALSE 10067
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10009: LD_ADDR_VAR 0 6
10013: PUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 1
10026: PLUS
10027: PPUSH
10028: LD_VAR 0 5
10032: PUSH
10033: LD_VAR 0 4
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PUSH
10043: LD_VAR 0 5
10047: PUSH
10048: LD_VAR 0 4
10052: ARRAY
10053: PUSH
10054: LD_INT 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
// end ;
10067: GO 9970
10069: POP
10070: POP
// ComStop ( bulldozer ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// for i = tmp downto 1 do
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: DOUBLE
10115: LD_VAR 0 6
10119: INC
10120: ST_TO_ADDR
10121: LD_INT 1
10123: PUSH
10124: FOR_DOWNTO
10125: IFFALSE 10213
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_INT 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 7
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL 10316 0 3
10159: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PPUSH
10183: CALL 10220 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_VAR 0 7
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 3
10210: ST_TO_ADDR
// end ;
10211: GO 10124
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 3
10219: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10220: LD_INT 0
10222: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: CALL_OW 351
10237: PUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: CALL_OW 554
10252: AND
10253: PUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 488
10268: AND
10269: PUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: CALL_OW 428
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: AND
10290: IFFALSE 10311
// AddComMoveXY ( bulldozer , x , y ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 171
// end ;
10311: LD_VAR 0 4
10315: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// dist := 99999 ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 99999
10332: ST_TO_ADDR
// for i = 1 to list do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: DOUBLE
10339: LD_INT 1
10341: DEC
10342: ST_TO_ADDR
10343: LD_VAR 0 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10487
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_VAR 0 5
10375: ARRAY
10376: PUSH
10377: LD_INT 1
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PPUSH
10396: CALL_OW 298
10400: ST_TO_ADDR
// if d = 0 then
10401: LD_VAR 0 7
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: IFFALSE 10413
// continue ;
10411: GO 10348
// if d < dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 6
10422: LESS
10423: IFFALSE 10485
// begin _x := list [ i ] [ 1 ] ;
10425: LD_ADDR_VAR 0 8
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_VAR 0 5
10439: ARRAY
10440: PUSH
10441: LD_INT 1
10443: ARRAY
10444: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_VAR 0 5
10459: ARRAY
10460: PUSH
10461: LD_INT 2
10463: ARRAY
10464: ST_TO_ADDR
// _i := i ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 5
10474: ST_TO_ADDR
// dist := d ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 7
10484: ST_TO_ADDR
// end ; end ;
10485: GO 10348
10487: POP
10488: POP
// result := [ _x , _y , _i , dist ] ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 8
10498: PUSH
10499: LD_VAR 0 9
10503: PUSH
10504: LD_VAR 0 10
10508: PUSH
10509: LD_VAR 0 6
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// end ; end_of_file
10520: LD_VAR 0 4
10524: RET
// export function Action ; begin
10525: LD_INT 0
10527: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10528: LD_INT 66
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10538: LD_INT 22
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10584
// SetClass ( JMM , 2 ) ;
10572: LD_EXP 1
10576: PPUSH
10577: LD_INT 2
10579: PPUSH
10580: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10584: LD_STRING M1
10586: PPUSH
10587: CALL_OW 337
// case Difficulty of 1 :
10591: LD_OWVAR 67
10595: PUSH
10596: LD_INT 1
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10614
10604: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10605: LD_STRING M1-1
10607: PPUSH
10608: CALL_OW 337
10612: GO 10669
10614: LD_INT 2
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10632
10622: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10623: LD_STRING M1-2
10625: PPUSH
10626: CALL_OW 337
10630: GO 10669
10632: LD_INT 3
10634: DOUBLE
10635: EQUAL
10636: IFTRUE 10640
10638: GO 10650
10640: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
10641: LD_STRING M1-3
10643: PPUSH
10644: CALL_OW 337
10648: GO 10669
10650: LD_INT 4
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10668
10658: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
10659: LD_STRING M1-4
10661: PPUSH
10662: CALL_OW 337
10666: GO 10669
10668: POP
// ChangeMissionObjectives ( M1cont ) ;
10669: LD_STRING M1cont
10671: PPUSH
10672: CALL_OW 337
// SaveForQuickRestart ;
10676: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10680: LD_INT 525
10682: PPUSH
10683: LD_INT 700
10685: PPUSH
10686: CALL_OW 12
10690: PPUSH
10691: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10695: LD_INT 5
10697: PPUSH
10698: LD_INT 82
10700: PPUSH
10701: LD_INT 38
10703: PPUSH
10704: LD_INT 10
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 56
// wait ( 0 0$14 ) ;
10714: LD_INT 490
10716: PPUSH
10717: CALL_OW 67
// firstCrateSpawn := true ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// end ;
10729: LD_VAR 0 1
10733: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10734: LD_EXP 41
10738: IFFALSE 11127
10740: GO 10742
10742: DISABLE
10743: LD_INT 0
10745: PPUSH
// begin if IsOk ( Lisa ) then
10746: LD_EXP 2
10750: PPUSH
10751: CALL_OW 302
10755: IFFALSE 10771
// Say ( Lisa , DR0-Lisa-1 ) else
10757: LD_EXP 2
10761: PPUSH
10762: LD_STRING DR0-Lisa-1
10764: PPUSH
10765: CALL_OW 88
10769: GO 10917
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10771: LD_INT 22
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 21
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 26
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 2
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 25
10816: PUSH
10817: LD_INT 2
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 25
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 4
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PUSH
10862: LD_EXP 1
10866: PUSH
10867: LD_EXP 8
10871: PUSH
10872: LD_EXP 5
10876: PUSH
10877: LD_EXP 6
10881: PUSH
10882: LD_EXP 7
10886: PUSH
10887: LD_EXP 4
10891: PUSH
10892: LD_EXP 3
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: DIFF
10906: PPUSH
10907: LD_STRING DR0-Sol1-1
10909: PPUSH
10910: LD_STRING DR0-Sol1-1
10912: PPUSH
10913: CALL 6822 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: LD_INT 22
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 21
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: PUSH
11013: LD_EXP 1
11017: PUSH
11018: LD_EXP 8
11022: PUSH
11023: LD_EXP 5
11027: PUSH
11028: LD_EXP 2
11032: PUSH
11033: LD_EXP 6
11037: PUSH
11038: LD_EXP 7
11042: PUSH
11043: LD_EXP 4
11047: PUSH
11048: LD_EXP 3
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: DIFF
11063: PPUSH
11064: LD_STRING DR0-Sol2-1
11066: PPUSH
11067: LD_STRING DR0-Sol2-1
11069: PPUSH
11070: CALL 6822 0 3
11074: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11075: LD_EXP 4
11079: PPUSH
11080: CALL_OW 302
11084: IFFALSE 11098
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11086: LD_EXP 4
11090: PPUSH
11091: LD_STRING DR0-Cyrus-1
11093: PPUSH
11094: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11098: LD_EXP 2
11102: PPUSH
11103: CALL_OW 302
11107: PUSH
11108: LD_VAR 0 1
11112: OR
11113: IFFALSE 11127
// Say ( JMM , DR0-JMM-1 ) ;
11115: LD_EXP 1
11119: PPUSH
11120: LD_STRING DR0-JMM-1
11122: PPUSH
11123: CALL_OW 88
// end ;
11127: PPOPN 1
11129: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11130: LD_EXP 5
11134: PPUSH
11135: CALL_OW 302
11139: PUSH
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 16
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: PUSH
11169: LD_INT 0
11171: GREATER
11172: AND
11173: PUSH
11174: LD_INT 1
11176: PPUSH
11177: CALL_OW 463
11181: NOT
11182: AND
11183: IFFALSE 11461
11185: GO 11187
11187: DISABLE
// begin DialogueOn ;
11188: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11192: LD_EXP 5
11196: PPUSH
11197: LD_STRING D10-Frank-1
11199: PPUSH
11200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 21
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 25
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PUSH
11284: LD_EXP 1
11288: PUSH
11289: LD_EXP 5
11293: PUSH
11294: LD_EXP 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: DIFF
11304: PPUSH
11305: LD_STRING D10-Sol1-1
11307: PPUSH
11308: LD_STRING D10-FSol1-1
11310: PPUSH
11311: CALL 6822 0 3
// Say ( Frank , D10-Frank-2 ) ;
11315: LD_EXP 5
11319: PPUSH
11320: LD_STRING D10-Frank-2
11322: PPUSH
11323: CALL_OW 88
// if IsOk ( Lisa ) then
11327: LD_EXP 2
11331: PPUSH
11332: CALL_OW 302
11336: IFFALSE 11352
// Say ( Lisa , D10-Lisa-2 ) else
11338: LD_EXP 2
11342: PPUSH
11343: LD_STRING D10-Lisa-2
11345: PPUSH
11346: CALL_OW 88
11350: GO 11457
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11352: LD_INT 22
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 21
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 2
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 3
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: LD_EXP 1
11436: PUSH
11437: LD_EXP 5
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: DIFF
11446: PPUSH
11447: LD_STRING D10-Sol1-2
11449: PPUSH
11450: LD_STRING D10-FSol1-2
11452: PPUSH
11453: CALL 6822 0 3
// DialogueOff ;
11457: CALL_OW 7
// end ;
11461: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 463
11469: NOT
11470: IFFALSE 11753
11472: GO 11474
11474: DISABLE
// begin HarrisonSupport ;
11475: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11479: LD_EXP 18
11483: PPUSH
11484: CALL_OW 310
11488: PPUSH
11489: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11493: LD_EXP 18
11497: PPUSH
11498: LD_STRING DEng-Eng1-1
11500: PPUSH
11501: CALL_OW 88
// wait ( 1 1$0 ) ;
11505: LD_INT 2100
11507: PPUSH
11508: CALL_OW 67
// DialogueOn ;
11512: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11516: LD_EXP 15
11520: PPUSH
11521: LD_STRING DRem-Har-1
11523: PPUSH
11524: CALL_OW 94
// if contactWithRussian then
11528: LD_EXP 23
11532: IFFALSE 11548
// Say ( JMM , DRem-JMM-1 ) else
11534: LD_EXP 1
11538: PPUSH
11539: LD_STRING DRem-JMM-1
11541: PPUSH
11542: CALL_OW 88
11546: GO 11560
// Say ( JMM , DRem-JMM-1a ) ;
11548: LD_EXP 1
11552: PPUSH
11553: LD_STRING DRem-JMM-1a
11555: PPUSH
11556: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11560: LD_EXP 15
11564: PPUSH
11565: LD_STRING DRem-Har-2
11567: PPUSH
11568: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11572: LD_STRING DenisInDelta
11574: PPUSH
11575: LD_INT 0
11577: PPUSH
11578: CALL_OW 30
11582: IFFALSE 11598
// Say ( JMM , DRem-JMM-2 ) else
11584: LD_EXP 1
11588: PPUSH
11589: LD_STRING DRem-JMM-2
11591: PPUSH
11592: CALL_OW 88
11596: GO 11610
// Say ( JMM , DRem-JMM-2a ) ;
11598: LD_EXP 1
11602: PPUSH
11603: LD_STRING DRem-JMM-2a
11605: PPUSH
11606: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11610: LD_EXP 15
11614: PPUSH
11615: LD_STRING DRem-Har-3
11617: PPUSH
11618: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11622: LD_EXP 1
11626: PPUSH
11627: LD_STRING DRem-JMM-3
11629: PPUSH
11630: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11634: LD_EXP 15
11638: PPUSH
11639: LD_STRING DRem-Har-4
11641: PPUSH
11642: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11646: LD_STRING DenisInDelta
11648: PPUSH
11649: LD_INT 0
11651: PPUSH
11652: CALL_OW 30
11656: IFFALSE 11716
// begin Say ( JMM , DRem-JMM-4 ) ;
11658: LD_EXP 1
11662: PPUSH
11663: LD_STRING DRem-JMM-4
11665: PPUSH
11666: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11670: LD_EXP 15
11674: PPUSH
11675: LD_STRING DRem-Har-5
11677: PPUSH
11678: CALL_OW 94
// DialogueOff ;
11682: CALL_OW 7
// wait ( 4 4$00 ) ;
11686: LD_INT 8400
11688: PPUSH
11689: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11693: LD_INT 35
11695: PPUSH
11696: CALL_OW 67
// until not InBattle ( 1 ) ;
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 463
11707: NOT
11708: IFFALSE 11693
// SpawnDenis ;
11710: CALL 11754 0 0
// end else
11714: GO 11753
// begin DialogueOff ;
11716: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11720: LD_INT 36
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11733: LD_INT 15
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11746: LD_STRING MR
11748: PPUSH
11749: CALL_OW 337
// end ; end ;
11753: END
// export function SpawnDenis ; var tmp ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
// PrepareDenis ;
11758: CALL 2244 0 0
// if not Denis then
11762: LD_EXP 9
11766: NOT
11767: IFFALSE 11771
// exit ;
11769: GO 11992
// CenterNowOnUnits ( Denis ) ;
11771: LD_EXP 9
11775: PPUSH
11776: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11780: LD_ADDR_VAR 0 2
11784: PUSH
11785: LD_INT 22
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11800: LD_EXP 9
11804: PPUSH
11805: LD_VAR 0 2
11809: PPUSH
11810: LD_EXP 9
11814: PPUSH
11815: CALL_OW 74
11819: PPUSH
11820: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11831: LD_INT 22
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 91
11843: PUSH
11844: LD_EXP 9
11848: PUSH
11849: LD_INT 10
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 69
11865: IFFALSE 11824
// SetSide ( Denis , 1 ) ;
11867: LD_EXP 9
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 235
// DialogueOn ;
11879: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11883: LD_EXP 9
11887: PPUSH
11888: LD_STRING DDen-Den-1
11890: PPUSH
11891: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11895: LD_EXP 1
11899: PPUSH
11900: LD_STRING DDen-JMM-1
11902: PPUSH
11903: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11907: LD_EXP 9
11911: PPUSH
11912: LD_STRING DDen-Den-2
11914: PPUSH
11915: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11919: LD_EXP 1
11923: PPUSH
11924: LD_STRING DDen-JMM-2
11926: PPUSH
11927: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11931: LD_EXP 9
11935: PPUSH
11936: LD_STRING DDen-Den-3
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11943: LD_EXP 1
11947: PPUSH
11948: LD_STRING DDen-JMM-3
11950: PPUSH
11951: CALL_OW 88
// DialogueOff ;
11955: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11959: LD_INT 36
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11972: LD_INT 15
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11985: LD_STRING MR
11987: PPUSH
11988: CALL_OW 337
// end ;
11992: LD_VAR 0 1
11996: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11997: LD_INT 22
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 30
12009: PUSH
12010: LD_INT 15
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PUSH
12026: LD_EXP 9
12030: PPUSH
12031: CALL_OW 302
12035: AND
12036: PUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 463
12044: NOT
12045: AND
12046: IFFALSE 12075
12048: GO 12050
12050: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12051: LD_EXP 9
12055: PPUSH
12056: LD_STRING DR1-Den-1
12058: PPUSH
12059: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12063: LD_EXP 1
12067: PPUSH
12068: LD_STRING DR1-JMM-1
12070: PPUSH
12071: CALL_OW 88
// end ;
12075: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12076: LD_INT 15
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 321
12086: PUSH
12087: LD_INT 2
12089: EQUAL
12090: PUSH
12091: LD_EXP 9
12095: PPUSH
12096: CALL_OW 302
12100: AND
12101: PUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 463
12109: NOT
12110: AND
12111: IFFALSE 12320
12113: GO 12115
12115: DISABLE
// begin DialogueOn ;
12116: CALL_OW 6
// if IsOK ( Denis ) then
12120: LD_EXP 9
12124: PPUSH
12125: CALL_OW 302
12129: IFFALSE 12145
// Say ( Denis , DR2-Den-1 ) else
12131: LD_EXP 9
12135: PPUSH
12136: LD_STRING DR2-Den-1
12138: PPUSH
12139: CALL_OW 88
12143: GO 12204
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12145: LD_INT 22
12147: PUSH
12148: LD_INT 1
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 4
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: PUSH
12185: LD_EXP 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: DIFF
12193: PPUSH
12194: LD_STRING DR2-Sci1-1
12196: PPUSH
12197: LD_STRING DR2-FSci1-1
12199: PPUSH
12200: CALL 6822 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12204: LD_EXP 1
12208: PPUSH
12209: LD_STRING DR2-JMM-1
12211: PPUSH
12212: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12216: LD_INT 22
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 21
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 26
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: PUSH
12267: LD_EXP 1
12271: PUSH
12272: LD_EXP 9
12276: PUSH
12277: LD_EXP 8
12281: PUSH
12282: LD_EXP 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: DIFF
12293: PPUSH
12294: LD_STRING DR2-Sol1-1
12296: PPUSH
12297: LD_STRING 
12299: PPUSH
12300: CALL 6822 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12304: LD_EXP 1
12308: PPUSH
12309: LD_STRING DR2-JMM-2
12311: PPUSH
12312: CALL_OW 88
// DialogueOff ;
12316: CALL_OW 7
// end ;
12320: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12321: LD_INT 22
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 30
12333: PUSH
12334: LD_INT 36
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: PUSH
12350: LD_INT 0
12352: EQUAL
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 33
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PUSH
12394: LD_INT 0
12396: GREATER
12397: AND
12398: PUSH
12399: LD_EXP 24
12403: PUSH
12404: LD_INT 0
12406: EQUAL
12407: AND
12408: PUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 463
12416: NOT
12417: AND
12418: IFFALSE 12555
12420: GO 12422
12422: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12423: LD_INT 22
12425: PUSH
12426: LD_INT 1
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 21
12435: PUSH
12436: LD_INT 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: LD_EXP 1
12478: PUSH
12479: LD_EXP 6
12483: PUSH
12484: LD_EXP 7
12488: PUSH
12489: LD_EXP 9
12493: PUSH
12494: LD_EXP 16
12498: PUSH
12499: LD_EXP 3
12503: PUSH
12504: LD_EXP 4
12508: PUSH
12509: LD_EXP 2
12513: PUSH
12514: LD_EXP 5
12518: PUSH
12519: LD_EXP 8
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: DIFF
12536: PPUSH
12537: LD_STRING D3a-Mech1-1
12539: PPUSH
12540: LD_STRING 
12542: PPUSH
12543: CALL 6822 0 3
// firstTower = 2 ;
12547: LD_ADDR_EXP 24
12551: PUSH
12552: LD_INT 2
12554: ST_TO_ADDR
// end ;
12555: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12556: LD_INT 22
12558: PUSH
12559: LD_INT 3
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 21
12568: PUSH
12569: LD_INT 3
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: IFFALSE 12719
12590: GO 12592
12592: DISABLE
12593: LD_INT 0
12595: PPUSH
// begin stop_talking := true ;
12596: LD_ADDR_OWVAR 56
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 21
12621: PUSH
12622: LD_INT 1
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 25
12634: PUSH
12635: LD_INT 1
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 3
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 4
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: PUSH
12689: FOR_IN
12690: IFFALSE 12709
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12692: LD_VAR 0 1
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: LD_INT 7500
12702: PPUSH
12703: CALL_OW 591
12707: GO 12689
12709: POP
12710: POP
// stop_talking := false ;
12711: LD_ADDR_OWVAR 56
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// end ;
12719: PPOPN 1
12721: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12722: LD_INT 22
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 30
12734: PUSH
12735: LD_INT 36
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 21
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 33
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: PPUSH
12786: CALL_OW 69
12790: AND
12791: PUSH
12792: CALL 13344 0 0
12796: AND
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 463
12805: NOT
12806: AND
12807: IFFALSE 13341
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12819: LD_ADDR_VAR 0 3
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 30
12836: PUSH
12837: LD_INT 36
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12853: LD_ADDR_VAR 0 4
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 21
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 33
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12898: LD_ADDR_VAR 0 5
12902: PUSH
12903: EMPTY
12904: ST_TO_ADDR
// for i in tmpControlTowers do
12905: LD_ADDR_VAR 0 1
12909: PUSH
12910: LD_VAR 0 3
12914: PUSH
12915: FOR_IN
12916: IFFALSE 13339
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12918: LD_EXP 1
12922: PPUSH
12923: CALL_OW 310
12927: PUSH
12928: LD_VAR 0 1
12932: EQUAL
12933: PUSH
12934: LD_EXP 1
12938: PPUSH
12939: CALL_OW 257
12943: PUSH
12944: LD_INT 3
12946: EQUAL
12947: AND
12948: IFFALSE 13082
// begin InGameOn ;
12950: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12954: LD_VAR 0 4
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12967: LD_EXP 1
12971: PPUSH
12972: LD_STRING D4a-JMM-1
12974: PPUSH
12975: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12979: LD_VAR 0 4
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: PPUSH
12988: LD_EXP 1
12992: PPUSH
12993: CALL_OW 53
// wait ( 0 0$1 ) ;
12997: LD_INT 35
12999: PPUSH
13000: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13004: LD_VAR 0 4
13008: PUSH
13009: LD_INT 1
13011: ARRAY
13012: PPUSH
13013: LD_VAR 0 4
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 250
13026: PUSH
13027: LD_INT 3
13029: PLUS
13030: PPUSH
13031: LD_VAR 0 4
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PPUSH
13040: CALL_OW 251
13044: PUSH
13045: LD_INT 2
13047: MINUS
13048: PPUSH
13049: CALL_OW 111
// wait ( 0 0$2 ) ;
13053: LD_INT 70
13055: PPUSH
13056: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13060: LD_EXP 1
13064: PPUSH
13065: LD_STRING D4b-JMM-1
13067: PPUSH
13068: CALL_OW 88
// InGameOff ;
13072: CALL_OW 9
// exit ;
13076: POP
13077: POP
13078: GO 13341
// end else
13080: GO 13337
// begin InGameOn ;
13082: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13086: LD_ADDR_VAR 0 5
13090: PUSH
13091: LD_VAR 0 1
13095: PPUSH
13096: CALL_OW 313
13100: PPUSH
13101: LD_INT 25
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PPUSH
13111: CALL_OW 72
13115: ST_TO_ADDR
// if not tmpMechanicInside then
13116: LD_VAR 0 5
13120: NOT
13121: IFFALSE 13125
// continue ;
13123: GO 12915
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13125: LD_VAR 0 5
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PPUSH
13134: CALL_OW 258
13138: PUSH
13139: LD_INT 1
13141: EQUAL
13142: IFFALSE 13162
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13144: LD_VAR 0 5
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: LD_STRING D4a-Mech1-1
13155: PPUSH
13156: CALL_OW 88
13160: GO 13178
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13162: LD_VAR 0 5
13166: PUSH
13167: LD_INT 1
13169: ARRAY
13170: PPUSH
13171: LD_STRING D4a-FMech1-1
13173: PPUSH
13174: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13178: LD_VAR 0 4
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13191: LD_VAR 0 4
13195: PUSH
13196: LD_INT 1
13198: ARRAY
13199: PPUSH
13200: LD_VAR 0 5
13204: PUSH
13205: LD_INT 1
13207: ARRAY
13208: PPUSH
13209: CALL_OW 53
// wait ( 0 0$1 ) ;
13213: LD_INT 35
13215: PPUSH
13216: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13220: LD_VAR 0 4
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 250
13242: PUSH
13243: LD_INT 3
13245: PLUS
13246: PPUSH
13247: LD_VAR 0 4
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 251
13260: PUSH
13261: LD_INT 2
13263: MINUS
13264: PPUSH
13265: CALL_OW 111
// wait ( 0 0$2 ) ;
13269: LD_INT 70
13271: PPUSH
13272: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13276: LD_VAR 0 5
13280: PUSH
13281: LD_INT 1
13283: ARRAY
13284: PPUSH
13285: CALL_OW 258
13289: PUSH
13290: LD_INT 1
13292: EQUAL
13293: IFFALSE 13313
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13295: LD_VAR 0 5
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: LD_STRING D4b-Mech1-1
13306: PPUSH
13307: CALL_OW 88
13311: GO 13329
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13313: LD_VAR 0 5
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PPUSH
13322: LD_STRING D4b-FMech1-1
13324: PPUSH
13325: CALL_OW 88
// InGameOff ;
13329: CALL_OW 9
// exit ;
13333: POP
13334: POP
13335: GO 13341
// end ; end ;
13337: GO 12915
13339: POP
13340: POP
// end ;
13341: PPOPN 5
13343: END
// function CheckMehInside ; var i , j , tmp ; begin
13344: LD_INT 0
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// result := false ;
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 0
13357: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13358: LD_ADDR_VAR 0 4
13362: PUSH
13363: LD_INT 22
13365: PUSH
13366: LD_INT 1
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 36
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: ST_TO_ADDR
// if not tmp then
13392: LD_VAR 0 4
13396: NOT
13397: IFFALSE 13401
// exit ;
13399: GO 13465
// for i in tmp do
13401: LD_ADDR_VAR 0 2
13405: PUSH
13406: LD_VAR 0 4
13410: PUSH
13411: FOR_IN
13412: IFFALSE 13463
// for j in UnitsInside ( i ) do
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL_OW 313
13428: PUSH
13429: FOR_IN
13430: IFFALSE 13459
// if GetClass ( j ) = class_mechanic then
13432: LD_VAR 0 3
13436: PPUSH
13437: CALL_OW 257
13441: PUSH
13442: LD_INT 3
13444: EQUAL
13445: IFFALSE 13457
// begin result := true ;
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// break ;
13455: GO 13459
// end ;
13457: GO 13429
13459: POP
13460: POP
13461: GO 13411
13463: POP
13464: POP
// end ;
13465: LD_VAR 0 1
13469: RET
// every 12 12$0 do
13470: GO 13472
13472: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13473: LD_INT 35
13475: PPUSH
13476: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 463
13487: NOT
13488: PUSH
13489: LD_INT 32
13491: PPUSH
13492: LD_INT 81
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 70
13506: NOT
13507: AND
13508: PUSH
13509: LD_EXP 27
13513: PUSH
13514: LD_INT 10500
13516: LESS
13517: OR
13518: IFFALSE 13473
// PrepareKurt ;
13520: CALL 16153 0 0
// end ;
13524: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13525: LD_EXP 16
13529: PPUSH
13530: CALL_OW 302
13534: PUSH
13535: LD_EXP 16
13539: PPUSH
13540: CALL_OW 255
13544: PUSH
13545: LD_INT 1
13547: EQUAL
13548: AND
13549: PUSH
13550: LD_EXP 2
13554: AND
13555: IFFALSE 13720
13557: GO 13559
13559: DISABLE
// begin wait ( 0 0$50 ) ;
13560: LD_INT 1750
13562: PPUSH
13563: CALL_OW 67
// if not IsOk ( Joan ) then
13567: LD_EXP 16
13571: PPUSH
13572: CALL_OW 302
13576: NOT
13577: IFFALSE 13581
// exit ;
13579: GO 13720
// if IsOK ( Lisa ) then
13581: LD_EXP 2
13585: PPUSH
13586: CALL_OW 302
13590: IFFALSE 13720
// begin DialogueOn ;
13592: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13596: LD_EXP 2
13600: PPUSH
13601: LD_STRING D7-Lisa-1
13603: PPUSH
13604: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13608: LD_EXP 1
13612: PPUSH
13613: LD_STRING D7-JMM-1
13615: PPUSH
13616: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13620: LD_EXP 2
13624: PPUSH
13625: LD_STRING D7-Lisa-2
13627: PPUSH
13628: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13632: LD_EXP 1
13636: PPUSH
13637: LD_STRING D7-JMM-2
13639: PPUSH
13640: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13644: LD_EXP 2
13648: PPUSH
13649: LD_STRING D7-Lisa-3
13651: PPUSH
13652: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13656: LD_EXP 1
13660: PPUSH
13661: LD_STRING D7-JMM-3
13663: PPUSH
13664: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13668: LD_EXP 2
13672: PPUSH
13673: LD_STRING D7-Lisa-4
13675: PPUSH
13676: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13680: LD_EXP 1
13684: PPUSH
13685: LD_STRING D7-JMM-4
13687: PPUSH
13688: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13692: LD_EXP 1
13696: PPUSH
13697: LD_STRING D7-JMM-4a
13699: PPUSH
13700: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13704: LD_EXP 2
13708: PPUSH
13709: LD_STRING D7-Lisa-5
13711: PPUSH
13712: CALL_OW 88
// DialogueOff ;
13716: CALL_OW 7
// end ; end ;
13720: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13721: LD_EXP 14
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 91
13738: PUSH
13739: LD_EXP 14
13743: PUSH
13744: LD_INT 10
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 25
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 25
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 3
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 25
13787: PUSH
13788: LD_INT 4
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: PUSH
13812: LD_INT 1
13814: GREATER
13815: AND
13816: IFFALSE 13833
13818: GO 13820
13820: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13821: LD_EXP 14
13825: PPUSH
13826: LD_STRING D5-Sol1-1
13828: PPUSH
13829: CALL_OW 88
13833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13834: LD_INT 22
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 33
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 69
13862: PUSH
13863: LD_INT 2
13865: GREATEREQUAL
13866: IFFALSE 13886
13868: GO 13870
13870: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13871: LD_STRING MRa
13873: PPUSH
13874: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13878: LD_ADDR_EXP 29
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// end ;
13886: END
// every 2 2$00 do var i , last ;
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
13893: PPUSH
// begin last := 8 ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 8
13901: ST_TO_ADDR
// for i = 1 to last do
13902: LD_ADDR_VAR 0 1
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_VAR 0 2
13916: PUSH
13917: FOR_TO
13918: IFFALSE 13946
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13920: LD_INT 6300
13922: PPUSH
13923: LD_INT 12600
13925: PPUSH
13926: CALL_OW 12
13930: PPUSH
13931: CALL_OW 67
// PrepareRandoms ( i ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL 4129 0 1
// end ;
13944: GO 13917
13946: POP
13947: POP
// end ;
13948: PPOPN 2
13950: END
// every 5 5$20 do
13951: GO 13953
13953: DISABLE
// begin DialogueOn ;
13954: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13958: LD_EXP 10
13962: PPUSH
13963: LD_STRING D12a-Sci-1
13965: PPUSH
13966: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13970: LD_EXP 1
13974: PPUSH
13975: LD_STRING D12a-JMM-1
13977: PPUSH
13978: CALL_OW 88
// DialogueOff ;
13982: CALL_OW 7
// cratesStatus := 1 ;
13986: LD_ADDR_EXP 39
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// end ;
13994: END
// every 13 13$0 do
13995: GO 13997
13997: DISABLE
// begin DialogueOn ;
13998: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14002: LD_EXP 10
14006: PPUSH
14007: LD_STRING D12b-Sci-1
14009: PPUSH
14010: CALL_OW 94
// DialogueOff ;
14014: CALL_OW 7
// cratesStatus := 2 ;
14018: LD_ADDR_EXP 39
14022: PUSH
14023: LD_INT 2
14025: ST_TO_ADDR
// BuildBulldozer ;
14026: CALL 9865 0 0
// end ;
14030: END
// every 32 32$0 do
14031: GO 14033
14033: DISABLE
// begin DialogueOn ;
14034: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14038: LD_EXP 10
14042: PPUSH
14043: LD_STRING D12c-Sci-1
14045: PPUSH
14046: CALL_OW 94
// DialogueOff ;
14050: CALL_OW 7
// wait ( 3 3$0 ) ;
14054: LD_INT 6300
14056: PPUSH
14057: CALL_OW 67
// DialogueOn ;
14061: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14065: LD_EXP 10
14069: PPUSH
14070: LD_STRING D12d-Sci-1
14072: PPUSH
14073: CALL_OW 94
// DialogueOff ;
14077: CALL_OW 7
// cratesStatus = 1 ;
14081: LD_ADDR_EXP 39
14085: PUSH
14086: LD_INT 1
14088: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14089: CALL 20403 0 0
// wait ( 2 2$30 ) ;
14093: LD_INT 5250
14095: PPUSH
14096: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14100: LD_INT 35
14102: PPUSH
14103: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 463
14114: NOT
14115: PUSH
14116: LD_INT 32
14118: PPUSH
14119: LD_INT 81
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 70
14133: NOT
14134: AND
14135: PUSH
14136: LD_EXP 27
14140: PUSH
14141: LD_INT 6300
14143: LESS
14144: OR
14145: IFFALSE 14100
// PrepareJoan ;
14147: CALL 3085 0 0
// end ;
14151: END
// every 42 42$0 do
14152: GO 14154
14154: DISABLE
// begin DialogueOn ;
14155: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14159: LD_EXP 10
14163: PPUSH
14164: LD_STRING D12e-Sci-1
14166: PPUSH
14167: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14171: LD_EXP 1
14175: PPUSH
14176: LD_STRING D12e-JMM-1
14178: PPUSH
14179: CALL_OW 88
// DialogueOff ;
14183: CALL_OW 7
// cratesStatus := 2 ;
14187: LD_ADDR_EXP 39
14191: PUSH
14192: LD_INT 2
14194: ST_TO_ADDR
// end ; end_of_file
14195: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14196: LD_VAR 0 1
14200: PUSH
14201: LD_INT 1
14203: EQUAL
14204: PUSH
14205: LD_VAR 0 2
14209: PUSH
14210: LD_INT 3
14212: EQUAL
14213: AND
14214: IFFALSE 14224
// contactWithRussian := 1 ;
14216: LD_ADDR_EXP 23
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// end ;
14224: PPOPN 2
14226: END
// on BuildingComplete ( building ) do var i ;
14227: LD_INT 0
14229: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 266
14239: PUSH
14240: LD_INT 36
14242: EQUAL
14243: PUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 255
14253: PUSH
14254: LD_INT 1
14256: EQUAL
14257: AND
14258: PUSH
14259: LD_EXP 24
14263: PUSH
14264: LD_INT 0
14266: EQUAL
14267: AND
14268: IFFALSE 14348
// begin firstTower = 1 ;
14270: LD_ADDR_EXP 24
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14278: LD_INT 22
14280: PUSH
14281: LD_INT 1
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 21
14290: PUSH
14291: LD_INT 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 25
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 26
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: PUSH
14329: LD_EXP 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: DIFF
14337: PPUSH
14338: LD_STRING D3b-Mech1-1
14340: PPUSH
14341: LD_STRING D3b-Mech1-1
14343: PPUSH
14344: CALL 6822 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 266
14357: PUSH
14358: LD_INT 0
14360: EQUAL
14361: PUSH
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 255
14371: PUSH
14372: LD_INT 1
14374: EQUAL
14375: AND
14376: IFFALSE 14390
// SetBName ( building , theta ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_STRING theta
14385: PPUSH
14386: CALL_OW 500
// if GetSide ( building ) = 3 then
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 255
14399: PUSH
14400: LD_INT 3
14402: EQUAL
14403: IFFALSE 14443
// begin for i := 1 to 4 do
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: DOUBLE
14411: LD_INT 1
14413: DEC
14414: ST_TO_ADDR
14415: LD_INT 4
14417: PUSH
14418: FOR_TO
14419: IFFALSE 14441
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14421: LD_ADDR_EXP 32
14425: PUSH
14426: LD_EXP 32
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 3
14438: ST_TO_ADDR
14439: GO 14418
14441: POP
14442: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14443: LD_VAR 0 1
14447: PPUSH
14448: CALL_OW 255
14452: PUSH
14453: LD_INT 3
14455: EQUAL
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 266
14466: PUSH
14467: LD_INT 0
14469: EQUAL
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 266
14480: PUSH
14481: LD_INT 2
14483: EQUAL
14484: OR
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 266
14495: PUSH
14496: LD_INT 4
14498: EQUAL
14499: OR
14500: PUSH
14501: EMPTY
14502: LIST
14503: AND
14504: IFFALSE 14515
// ComUpgrade ( building ) ;
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14515: LD_VAR 0 1
14519: PPUSH
14520: CALL_OW 255
14524: PUSH
14525: LD_INT 3
14527: EQUAL
14528: PUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 32
14541: EQUAL
14542: AND
14543: IFFALSE 14584
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14545: LD_VAR 0 1
14549: PPUSH
14550: LD_INT 42
14552: PUSH
14553: LD_INT 43
14555: PUSH
14556: LD_INT 44
14558: PUSH
14559: LD_INT 46
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_INT 4
14573: PPUSH
14574: CALL_OW 12
14578: ARRAY
14579: PPUSH
14580: CALL_OW 208
// end ;
14584: PPOPN 2
14586: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL 36962 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14596: LD_VAR 0 1
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 23
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: PPUSH
14636: CALL_OW 69
14640: IN
14641: IFFALSE 14657
// killCounter := killCounter + 1 ;
14643: LD_ADDR_EXP 46
14647: PUSH
14648: LD_EXP 46
14652: PUSH
14653: LD_INT 1
14655: PLUS
14656: ST_TO_ADDR
// if unit in ruAttackersInForest then
14657: LD_VAR 0 1
14661: PUSH
14662: LD_EXP 49
14666: IN
14667: IFFALSE 14685
// ruAttackersInForest := ruAttackersInForest diff unit ;
14669: LD_ADDR_EXP 49
14673: PUSH
14674: LD_EXP 49
14678: PUSH
14679: LD_VAR 0 1
14683: DIFF
14684: ST_TO_ADDR
// if unit in ruAttackers then
14685: LD_VAR 0 1
14689: PUSH
14690: LD_EXP 48
14694: IN
14695: IFFALSE 14713
// ruAttackers := ruAttackers diff unit ;
14697: LD_ADDR_EXP 48
14701: PUSH
14702: LD_EXP 48
14706: PUSH
14707: LD_VAR 0 1
14711: DIFF
14712: ST_TO_ADDR
// if unit = JMM then
14713: LD_VAR 0 1
14717: PUSH
14718: LD_EXP 1
14722: EQUAL
14723: IFFALSE 14732
// YouLost ( JMM ) ;
14725: LD_STRING JMM
14727: PPUSH
14728: CALL_OW 104
// if unit = Joan then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_EXP 16
14741: EQUAL
14742: IFFALSE 14752
// JoanStatus := 0 ;
14744: LD_ADDR_EXP 17
14748: PUSH
14749: LD_INT 0
14751: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 255
14761: PUSH
14762: LD_INT 1
14764: EQUAL
14765: PUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 247
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: AND
14780: PUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 248
14790: PUSH
14791: LD_INT 1
14793: EQUAL
14794: AND
14795: IFFALSE 14811
// unitLost = unitLost + 1 ;
14797: LD_ADDR_EXP 31
14801: PUSH
14802: LD_EXP 31
14806: PUSH
14807: LD_INT 1
14809: PLUS
14810: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 255
14820: PUSH
14821: LD_INT 3
14823: EQUAL
14824: PUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 247
14834: PUSH
14835: LD_INT 3
14837: EQUAL
14838: AND
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 266
14849: PUSH
14850: LD_INT 4
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 31
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: IN
14868: AND
14869: IFFALSE 14955
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14871: LD_ADDR_EXP 32
14875: PUSH
14876: LD_EXP 32
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 266
14890: ADD
14891: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14892: LD_ADDR_EXP 32
14896: PUSH
14897: LD_EXP 32
14901: PUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 250
14911: ADD
14912: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14913: LD_ADDR_EXP 32
14917: PUSH
14918: LD_EXP 32
14922: PUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 251
14932: ADD
14933: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14934: LD_ADDR_EXP 32
14938: PUSH
14939: LD_EXP 32
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 254
14953: ADD
14954: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14955: LD_EXP 47
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 257
14969: PUSH
14970: LD_INT 3
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_VAR 0 1
14979: PPUSH
14980: CALL_OW 255
14984: PUSH
14985: LD_INT 3
14987: EQUAL
14988: AND
14989: PUSH
14990: LD_INT 21
14992: PPUSH
14993: CALL_OW 302
14997: AND
14998: PUSH
14999: LD_INT 21
15001: PPUSH
15002: CALL_OW 255
15006: PUSH
15007: LD_INT 3
15009: EQUAL
15010: AND
15011: IFFALSE 15093
// begin ruMechCounter := ruMechCounter - 1 ;
15013: LD_ADDR_EXP 47
15017: PUSH
15018: LD_EXP 47
15022: PUSH
15023: LD_INT 1
15025: MINUS
15026: ST_TO_ADDR
// uc_side := 3 ;
15027: LD_ADDR_OWVAR 20
15031: PUSH
15032: LD_INT 3
15034: ST_TO_ADDR
// uc_nation := 3 ;
15035: LD_ADDR_OWVAR 21
15039: PUSH
15040: LD_INT 3
15042: ST_TO_ADDR
// hc_gallery :=  ;
15043: LD_ADDR_OWVAR 33
15047: PUSH
15048: LD_STRING 
15050: ST_TO_ADDR
// hc_name :=  ;
15051: LD_ADDR_OWVAR 26
15055: PUSH
15056: LD_STRING 
15058: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15059: LD_INT 0
15061: PPUSH
15062: LD_EXP 35
15066: PPUSH
15067: LD_EXP 36
15071: PPUSH
15072: CALL_OW 12
15076: PPUSH
15077: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15081: CALL_OW 44
15085: PPUSH
15086: LD_INT 21
15088: PPUSH
15089: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 255
15102: PUSH
15103: LD_INT 3
15105: EQUAL
15106: PUSH
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 264
15116: PUSH
15117: LD_INT 52
15119: EQUAL
15120: AND
15121: PUSH
15122: LD_INT 21
15124: PPUSH
15125: CALL_OW 302
15129: AND
15130: PUSH
15131: LD_INT 21
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 3
15141: EQUAL
15142: AND
15143: IFFALSE 15164
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15145: LD_INT 21
15147: PPUSH
15148: LD_INT 22
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: LD_INT 52
15159: PPUSH
15160: CALL_OW 125
// end ;
15164: PPOPN 1
15166: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15167: LD_INT 0
15169: PPUSH
15170: PPUSH
15171: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL 37082 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 255
15195: PUSH
15196: LD_INT 3
15198: EQUAL
15199: PUSH
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL_OW 264
15209: PUSH
15210: LD_INT 51
15212: PUSH
15213: LD_INT 52
15215: PUSH
15216: LD_INT 53
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: IN
15224: NOT
15225: AND
15226: IFFALSE 15257
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15228: LD_ADDR_EXP 48
15232: PUSH
15233: LD_EXP 48
15237: PPUSH
15238: LD_EXP 48
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: PPUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 1
15256: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 264
15266: PUSH
15267: LD_INT 53
15269: EQUAL
15270: IFFALSE 15425
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 60
15279: PPUSH
15280: LD_INT 85
15282: PPUSH
15283: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 43
15294: PPUSH
15295: LD_INT 69
15297: PPUSH
15298: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 37
15309: PPUSH
15310: LD_INT 46
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until not HasTask ( vehicle ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 314
15340: NOT
15341: IFFALSE 15324
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15343: LD_VAR 0 1
15347: PPUSH
15348: LD_INT 34
15350: PPUSH
15351: CALL 9917 0 2
// repeat wait ( 0 0$1 ) ;
15355: LD_INT 35
15357: PPUSH
15358: CALL_OW 67
// until not HasTask ( vehicle ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 314
15371: NOT
15372: IFFALSE 15355
// un := IsDrivenBy ( vehicle ) ;
15374: LD_ADDR_VAR 0 4
15378: PUSH
15379: LD_VAR 0 1
15383: PPUSH
15384: CALL_OW 311
15388: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15389: LD_VAR 0 4
15393: PPUSH
15394: LD_INT 96
15396: PPUSH
15397: LD_INT 77
15399: PPUSH
15400: CALL_OW 171
// AddComExitVehicle ( un ) ;
15404: LD_VAR 0 4
15408: PPUSH
15409: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15413: LD_VAR 0 4
15417: PPUSH
15418: LD_INT 17
15420: PPUSH
15421: CALL_OW 180
// end ; end ;
15425: PPOPN 5
15427: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15428: LD_VAR 0 1
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: IFFALSE 15472
// begin tamedApemans = tamedApemans + 1 ;
15443: LD_ADDR_EXP 33
15447: PUSH
15448: LD_EXP 33
15452: PUSH
15453: LD_INT 1
15455: PLUS
15456: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15457: LD_VAR 0 1
15461: PPUSH
15462: LD_INT 106
15464: PPUSH
15465: LD_INT 85
15467: PPUSH
15468: CALL_OW 111
// end ; end ;
15472: PPOPN 2
15474: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15475: LD_VAR 0 2
15479: PPUSH
15480: CALL_OW 255
15484: PUSH
15485: LD_INT 3
15487: EQUAL
15488: PUSH
15489: LD_VAR 0 1
15493: PPUSH
15494: CALL_OW 255
15498: PUSH
15499: LD_INT 3
15501: EQUAL
15502: AND
15503: PUSH
15504: LD_INT 21
15506: PPUSH
15507: CALL_OW 302
15511: AND
15512: IFFALSE 15526
// ComEnterUnit ( human , rufab ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 21
15521: PPUSH
15522: CALL_OW 120
// end ;
15526: PPOPN 4
15528: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 21
15536: EQUAL
15537: PUSH
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 255
15547: PUSH
15548: LD_INT 3
15550: EQUAL
15551: AND
15552: IFFALSE 15566
// SetLives ( human , 1000 ) ;
15554: LD_VAR 0 2
15558: PPUSH
15559: LD_INT 1000
15561: PPUSH
15562: CALL_OW 234
// end ;
15566: PPOPN 2
15568: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL 37066 0 1
// end ; end_of_file
15578: PPOPN 1
15580: END
// every 0 0$30 trigger cratesStatus = 1 do
15581: LD_EXP 39
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: IFFALSE 15642
15591: GO 15593
15593: DISABLE
// begin enable ;
15594: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15595: LD_INT 350
15597: PUSH
15598: LD_INT 875
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 1
15607: PPUSH
15608: LD_INT 2
15610: PPUSH
15611: CALL_OW 12
15615: ARRAY
15616: PPUSH
15617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15621: LD_INT 1
15623: PPUSH
15624: LD_INT 5
15626: PPUSH
15627: CALL_OW 12
15631: PPUSH
15632: LD_INT 7
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 55
// end ;
15642: END
// every 1 1$0 trigger cratesStatus = 2 do
15643: LD_EXP 39
15647: PUSH
15648: LD_INT 2
15650: EQUAL
15651: IFFALSE 15734
15653: GO 15655
15655: DISABLE
// begin enable ;
15656: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15657: LD_INT 3150
15659: PUSH
15660: LD_INT 4550
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_INT 2
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PPUSH
15679: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15683: LD_INT 2
15685: PUSH
15686: LD_INT 5
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 2
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 6
15707: PUSH
15708: LD_INT 7
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 1
15717: PPUSH
15718: LD_INT 2
15720: PPUSH
15721: CALL_OW 12
15725: ARRAY
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 55
// end ;
15734: END
// every 0 0$30 + 0 0$10 do
15735: GO 15737
15737: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15738: LD_INT 4
15740: PUSH
15741: LD_INT 5
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 1
15750: PPUSH
15751: LD_INT 2
15753: PPUSH
15754: CALL_OW 12
15758: ARRAY
15759: PPUSH
15760: LD_INT 7
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 55
// Wait ( 0 0$15 ) ;
15770: LD_INT 525
15772: PPUSH
15773: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15777: LD_INT 4
15779: PUSH
15780: LD_INT 5
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 1
15789: PPUSH
15790: LD_INT 2
15792: PPUSH
15793: CALL_OW 12
15797: ARRAY
15798: PPUSH
15799: LD_INT 7
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 55
// Wait ( 0 0$20 ) ;
15809: LD_INT 700
15811: PPUSH
15812: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15816: LD_INT 4
15818: PUSH
15819: LD_INT 5
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_INT 2
15831: PPUSH
15832: CALL_OW 12
15836: ARRAY
15837: PPUSH
15838: LD_INT 7
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 55
// end ; end_of_file
15848: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15849: LD_EXP 25
15853: PUSH
15854: LD_INT 1
15856: EQUAL
15857: IFFALSE 16150
15859: GO 15861
15861: DISABLE
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
15866: PPUSH
// begin enable ;
15867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15868: LD_ADDR_VAR 0 2
15872: PUSH
15873: LD_INT 22
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 21
15885: PUSH
15886: LD_INT 3
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 0
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 30
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: ST_TO_ADDR
// for i in tmp do
15931: LD_ADDR_VAR 0 1
15935: PUSH
15936: LD_VAR 0 2
15940: PUSH
15941: FOR_IN
15942: IFFALSE 15975
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 274
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 275
15971: PLUS
15972: ST_TO_ADDR
15973: GO 15941
15975: POP
15976: POP
// strings = [ ] ;
15977: LD_ADDR_EXP 28
15981: PUSH
15982: EMPTY
15983: ST_TO_ADDR
// if tmp = 0 then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: IFFALSE 16017
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15994: LD_ADDR_EXP 28
15998: PUSH
15999: LD_EXP 28
16003: PUSH
16004: LD_STRING #Am06-1
16006: PUSH
16007: LD_EXP 26
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: ADD
16016: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16017: LD_VAR 0 2
16021: PUSH
16022: LD_EXP 26
16026: PUSH
16027: LD_VAR 0 3
16031: GREATER
16032: AND
16033: IFFALSE 16064
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16035: LD_ADDR_EXP 28
16039: PUSH
16040: LD_EXP 28
16044: PUSH
16045: LD_STRING #Am06-1
16047: PUSH
16048: LD_EXP 26
16052: PUSH
16053: LD_VAR 0 3
16057: MINUS
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: ADD
16063: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_EXP 26
16073: PUSH
16074: LD_VAR 0 3
16078: LESSEQUAL
16079: AND
16080: IFFALSE 16103
// strings = strings ^ [ #Am06-1 , 0 ] ;
16082: LD_ADDR_EXP 28
16086: PUSH
16087: LD_EXP 28
16091: PUSH
16092: LD_STRING #Am06-1
16094: PUSH
16095: LD_INT 0
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: ADD
16102: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16103: LD_ADDR_EXP 27
16107: PUSH
16108: LD_EXP 27
16112: PUSH
16113: LD_INT 35
16115: MINUS
16116: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16117: LD_ADDR_EXP 28
16121: PUSH
16122: LD_EXP 28
16126: PUSH
16127: LD_STRING #Am06-2
16129: PUSH
16130: LD_EXP 27
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: ADD
16139: ST_TO_ADDR
// display_strings = strings ;
16140: LD_ADDR_OWVAR 47
16144: PUSH
16145: LD_EXP 28
16149: ST_TO_ADDR
// end ; end_of_file
16150: PPOPN 3
16152: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16163: LD_ADDR_VAR 0 3
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 30
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16215: LD_INT 35
16217: PPUSH
16218: CALL_OW 67
// until depot ;
16222: LD_VAR 0 3
16226: IFFALSE 16163
// forceJMM := false ;
16228: LD_ADDR_VAR 0 8
16232: PUSH
16233: LD_INT 0
16235: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16236: LD_INT 35
16238: PPUSH
16239: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16243: LD_ADDR_VAR 0 4
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 91
16260: PUSH
16261: LD_VAR 0 3
16265: PUSH
16266: LD_INT 1
16268: ARRAY
16269: PUSH
16270: LD_INT 15
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 21
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 2
16290: PUSH
16291: LD_INT 25
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 25
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 25
16313: PUSH
16314: LD_INT 3
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 25
16323: PUSH
16324: LD_INT 4
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: LD_INT 54
16343: PUSH
16344: EMPTY
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 3
16353: PUSH
16354: LD_INT 55
16356: PUSH
16357: EMPTY
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: PUSH
16377: LD_EXP 2
16381: PUSH
16382: LD_EXP 3
16386: PUSH
16387: LD_EXP 4
16391: PUSH
16392: LD_EXP 5
16396: PUSH
16397: LD_EXP 7
16401: PUSH
16402: LD_EXP 8
16406: PUSH
16407: LD_EXP 9
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: DIFF
16421: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
16422: LD_EXP 27
16426: PUSH
16427: LD_INT 21000
16429: LESS
16430: IFFALSE 16442
// begin forceJMM := true ;
16432: LD_ADDR_VAR 0 8
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// break ;
16440: GO 16458
// end ; until tmp and not InBattle ( 1 ) ;
16442: LD_VAR 0 4
16446: PUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 463
16454: NOT
16455: AND
16456: IFFALSE 16236
// if not forceJMM then
16458: LD_VAR 0 8
16462: NOT
16463: IFFALSE 16491
// tmp := tmp [ rand ( 1 , tmp ) ] else
16465: LD_ADDR_VAR 0 4
16469: PUSH
16470: LD_VAR 0 4
16474: PUSH
16475: LD_INT 1
16477: PPUSH
16478: LD_VAR 0 4
16482: PPUSH
16483: CALL_OW 12
16487: ARRAY
16488: ST_TO_ADDR
16489: GO 16501
// tmp := JMM ;
16491: LD_ADDR_VAR 0 4
16495: PUSH
16496: LD_EXP 1
16500: ST_TO_ADDR
// blockSpawn := 1 ;
16501: LD_ADDR_EXP 30
16505: PUSH
16506: LD_INT 1
16508: ST_TO_ADDR
// uc_side := 2 ;
16509: LD_ADDR_OWVAR 20
16513: PUSH
16514: LD_INT 2
16516: ST_TO_ADDR
// uc_nation := 2 ;
16517: LD_ADDR_OWVAR 21
16521: PUSH
16522: LD_INT 2
16524: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16525: LD_ADDR_EXP 20
16529: PUSH
16530: LD_STRING Kurt
16532: PPUSH
16533: LD_INT 0
16535: PPUSH
16536: LD_STRING 
16538: PPUSH
16539: CALL 41251 0 3
16543: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16544: LD_EXP 20
16548: PPUSH
16549: LD_VAR 0 4
16553: PPUSH
16554: CALL_OW 250
16558: PPUSH
16559: LD_VAR 0 4
16563: PPUSH
16564: CALL_OW 251
16568: PPUSH
16569: LD_INT 5
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 50
// InGameOn ;
16579: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16583: LD_EXP 20
16587: PPUSH
16588: CALL_OW 87
// wait ( 0 0$2 ) ;
16592: LD_INT 70
16594: PPUSH
16595: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16599: LD_EXP 20
16603: PPUSH
16604: LD_VAR 0 4
16608: PPUSH
16609: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16613: LD_VAR 0 4
16617: PPUSH
16618: LD_EXP 20
16622: PPUSH
16623: CALL_OW 112
// wait ( 0 0$1 ) ;
16627: LD_INT 35
16629: PPUSH
16630: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16634: LD_VAR 0 4
16638: PPUSH
16639: LD_EXP 20
16643: PPUSH
16644: CALL_OW 119
// DialogueOn ;
16648: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16652: LD_EXP 20
16656: PPUSH
16657: LD_STRING D2-Kurt-1
16659: PPUSH
16660: CALL_OW 88
// if tmp = JMM then
16664: LD_VAR 0 4
16668: PUSH
16669: LD_EXP 1
16673: EQUAL
16674: IFFALSE 16766
// begin Say ( JMM , D2-JMM-1 ) ;
16676: LD_EXP 1
16680: PPUSH
16681: LD_STRING D2-JMM-1
16683: PPUSH
16684: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16688: LD_EXP 20
16692: PPUSH
16693: LD_STRING D2-Kurt-2
16695: PPUSH
16696: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16700: LD_EXP 1
16704: PPUSH
16705: LD_STRING D2-JMM-2
16707: PPUSH
16708: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16712: LD_EXP 20
16716: PPUSH
16717: LD_STRING D2-Kurt-3
16719: PPUSH
16720: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16724: LD_EXP 1
16728: PPUSH
16729: LD_STRING D2-JMM-3
16731: PPUSH
16732: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16736: LD_EXP 20
16740: PPUSH
16741: LD_STRING D2-Kurt-4
16743: PPUSH
16744: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16748: LD_EXP 1
16752: PPUSH
16753: LD_STRING D2-JMM-4
16755: PPUSH
16756: CALL_OW 88
// DialogueOff ;
16760: CALL_OW 7
// end else
16764: GO 16994
// begin if GetSex ( tmp ) = 1 then
16766: LD_VAR 0 4
16770: PPUSH
16771: CALL_OW 258
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: IFFALSE 16795
// Say ( tmp , D2-Sol1-1 ) else
16781: LD_VAR 0 4
16785: PPUSH
16786: LD_STRING D2-Sol1-1
16788: PPUSH
16789: CALL_OW 88
16793: GO 16807
// Say ( tmp , D2-FSol1-1 ) ;
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_STRING D2-FSol1-1
16802: PPUSH
16803: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16807: LD_EXP 20
16811: PPUSH
16812: LD_STRING D2-Kurt-2
16814: PPUSH
16815: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16819: LD_VAR 0 4
16823: PPUSH
16824: CALL_OW 258
16828: PUSH
16829: LD_INT 1
16831: EQUAL
16832: IFFALSE 16848
// Say ( tmp , D2-Sol1-2 ) else
16834: LD_VAR 0 4
16838: PPUSH
16839: LD_STRING D2-Sol1-2
16841: PPUSH
16842: CALL_OW 88
16846: GO 16860
// Say ( tmp , D2-FSol1-2 ) ;
16848: LD_VAR 0 4
16852: PPUSH
16853: LD_STRING D2-FSol1-2
16855: PPUSH
16856: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16860: LD_EXP 20
16864: PPUSH
16865: LD_STRING D2-Kurt-3
16867: PPUSH
16868: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16872: LD_VAR 0 4
16876: PPUSH
16877: CALL_OW 258
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: IFFALSE 16901
// Say ( tmp , D2-Sol1-3 ) else
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_STRING D2-Sol1-3
16894: PPUSH
16895: CALL_OW 88
16899: GO 16913
// Say ( tmp , D2-FSol1-3 ) ;
16901: LD_VAR 0 4
16905: PPUSH
16906: LD_STRING D2-FSol1-3
16908: PPUSH
16909: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16913: LD_EXP 20
16917: PPUSH
16918: LD_STRING D2-Kurt-4
16920: PPUSH
16921: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16925: LD_VAR 0 4
16929: PPUSH
16930: CALL_OW 258
16934: PUSH
16935: LD_INT 1
16937: EQUAL
16938: IFFALSE 16966
// begin Say ( tmp , D2-Sol1-4 ) ;
16940: LD_VAR 0 4
16944: PPUSH
16945: LD_STRING D2-Sol1-4
16947: PPUSH
16948: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16952: LD_VAR 0 4
16956: PPUSH
16957: LD_STRING D2-Sol1-5
16959: PPUSH
16960: CALL_OW 88
// end else
16964: GO 16990
// begin Say ( tmp , D2-FSol1-4 ) ;
16966: LD_VAR 0 4
16970: PPUSH
16971: LD_STRING D2-FSol1-4
16973: PPUSH
16974: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16978: LD_VAR 0 4
16982: PPUSH
16983: LD_STRING D2-FSol1-5
16985: PPUSH
16986: CALL_OW 88
// end ; DialogueOff ;
16990: CALL_OW 7
// end ; dec := ShowQuery1 ;
16994: LD_ADDR_VAR 0 6
16998: PUSH
16999: CALL 7307 0 0
17003: ST_TO_ADDR
// if dec = 1 then
17004: LD_VAR 0 6
17008: PUSH
17009: LD_INT 1
17011: EQUAL
17012: IFFALSE 17074
// begin DialogueOn ;
17014: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17018: LD_EXP 20
17022: PPUSH
17023: LD_STRING D2a-Kurt-1
17025: PPUSH
17026: CALL_OW 88
// DialogueOff ;
17030: CALL_OW 7
// InGameOff ;
17034: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17038: LD_INT 1
17040: PPUSH
17041: LD_INT 2
17043: PPUSH
17044: LD_INT 2
17046: PPUSH
17047: LD_INT 1
17049: PPUSH
17050: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17054: LD_EXP 20
17058: PPUSH
17059: LD_INT 8
17061: PPUSH
17062: CALL_OW 113
// readyToEscape := 1 ;
17066: LD_ADDR_EXP 22
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// end ; if dec = 2 then
17074: LD_VAR 0 6
17078: PUSH
17079: LD_INT 2
17081: EQUAL
17082: IFFALSE 17550
// begin DialogueOn ;
17084: CALL_OW 6
// if tmp = JMM then
17088: LD_VAR 0 4
17092: PUSH
17093: LD_EXP 1
17097: EQUAL
17098: IFFALSE 17154
// begin Say ( JMM , D2b-JMM-1 ) ;
17100: LD_EXP 1
17104: PPUSH
17105: LD_STRING D2b-JMM-1
17107: PPUSH
17108: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17112: LD_EXP 20
17116: PPUSH
17117: LD_STRING D2b-Kurt-1
17119: PPUSH
17120: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17124: LD_EXP 1
17128: PPUSH
17129: LD_STRING D2b-JMM-2
17131: PPUSH
17132: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17136: LD_EXP 20
17140: PPUSH
17141: LD_STRING D2b-Kurt-2
17143: PPUSH
17144: CALL_OW 88
// DialogueOff ;
17148: CALL_OW 7
// end else
17152: GO 17305
// begin if GetSex ( tmp ) = 1 then
17154: LD_VAR 0 4
17158: PPUSH
17159: CALL_OW 258
17163: PUSH
17164: LD_INT 1
17166: EQUAL
17167: IFFALSE 17183
// Say ( tmp , D2b-Sol1-1 ) else
17169: LD_VAR 0 4
17173: PPUSH
17174: LD_STRING D2b-Sol1-1
17176: PPUSH
17177: CALL_OW 88
17181: GO 17195
// Say ( tmp , D2b-FSol1-1 ) ;
17183: LD_VAR 0 4
17187: PPUSH
17188: LD_STRING D2b-FSol1-1
17190: PPUSH
17191: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17195: LD_EXP 20
17199: PPUSH
17200: LD_STRING D2b-Kurt-1
17202: PPUSH
17203: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17207: LD_VAR 0 4
17211: PPUSH
17212: CALL_OW 258
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17236
// Say ( tmp , D2b-Sol1-2 ) else
17222: LD_VAR 0 4
17226: PPUSH
17227: LD_STRING D2b-Sol1-2
17229: PPUSH
17230: CALL_OW 88
17234: GO 17248
// Say ( tmp , D2b-FSol1-2 ) ;
17236: LD_VAR 0 4
17240: PPUSH
17241: LD_STRING D2b-FSol1-2
17243: PPUSH
17244: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17248: LD_EXP 20
17252: PPUSH
17253: LD_STRING D2b-Kurt-2
17255: PPUSH
17256: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17260: LD_VAR 0 4
17264: PPUSH
17265: CALL_OW 258
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17289
// Say ( tmp , D2c-Sol1-2 ) else
17275: LD_VAR 0 4
17279: PPUSH
17280: LD_STRING D2c-Sol1-2
17282: PPUSH
17283: CALL_OW 88
17287: GO 17301
// Say ( tmp , D2c-FSol1-2 ) ;
17289: LD_VAR 0 4
17293: PPUSH
17294: LD_STRING D2c-FSol1-2
17296: PPUSH
17297: CALL_OW 88
// DialogueOff ;
17301: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17305: LD_ADDR_VAR 0 7
17309: PUSH
17310: CALL 7328 0 0
17314: ST_TO_ADDR
// if dec2 = 1 then
17315: LD_VAR 0 7
17319: PUSH
17320: LD_INT 1
17322: EQUAL
17323: IFFALSE 17385
// begin DialogueOn ;
17325: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17329: LD_EXP 20
17333: PPUSH
17334: LD_STRING D2a-Kurt-1
17336: PPUSH
17337: CALL_OW 88
// DialogueOff ;
17341: CALL_OW 7
// InGameOff ;
17345: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17349: LD_INT 1
17351: PPUSH
17352: LD_INT 2
17354: PPUSH
17355: LD_INT 2
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17365: LD_EXP 20
17369: PPUSH
17370: LD_INT 8
17372: PPUSH
17373: CALL_OW 113
// readyToEscape := 1 ;
17377: LD_ADDR_EXP 22
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// end ; if dec2 = 2 then
17385: LD_VAR 0 7
17389: PUSH
17390: LD_INT 2
17392: EQUAL
17393: IFFALSE 17550
// begin if tmp = JMM then
17395: LD_VAR 0 4
17399: PUSH
17400: LD_EXP 1
17404: EQUAL
17405: IFFALSE 17465
// begin DialogueOn ;
17407: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17411: LD_EXP 1
17415: PPUSH
17416: LD_STRING D2c-JMM-1
17418: PPUSH
17419: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17423: LD_EXP 20
17427: PPUSH
17428: LD_STRING D2c-Kurt-1
17430: PPUSH
17431: CALL_OW 88
// DialogueOff ;
17435: CALL_OW 7
// InGameOff ;
17439: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17443: LD_EXP 20
17447: PPUSH
17448: LD_INT 8
17450: PPUSH
17451: CALL_OW 113
// readyToEscape := 1 ;
17455: LD_ADDR_EXP 22
17459: PUSH
17460: LD_INT 1
17462: ST_TO_ADDR
// end else
17463: GO 17550
// begin DialogueOn ;
17465: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17469: LD_VAR 0 4
17473: PPUSH
17474: CALL_OW 258
17478: PUSH
17479: LD_INT 1
17481: EQUAL
17482: IFFALSE 17498
// Say ( tmp , D2c-Sol1-1 ) else
17484: LD_VAR 0 4
17488: PPUSH
17489: LD_STRING D2c-Sol1-1
17491: PPUSH
17492: CALL_OW 88
17496: GO 17510
// Say ( tmp , D2c-FSol1-1 ) ;
17498: LD_VAR 0 4
17502: PPUSH
17503: LD_STRING D2c-FSol1-1
17505: PPUSH
17506: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17510: LD_EXP 20
17514: PPUSH
17515: LD_STRING D2c-Kurt-1
17517: PPUSH
17518: CALL_OW 88
// DialogueOff ;
17522: CALL_OW 7
// InGameOff ;
17526: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17530: LD_EXP 20
17534: PPUSH
17535: LD_INT 8
17537: PPUSH
17538: CALL_OW 113
// readyToEscape := 1 ;
17542: LD_ADDR_EXP 22
17546: PUSH
17547: LD_INT 1
17549: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17550: LD_VAR 0 6
17554: PUSH
17555: LD_INT 3
17557: EQUAL
17558: IFFALSE 17719
// begin DialogueOn ;
17560: CALL_OW 6
// if tmp = JMM then
17564: LD_VAR 0 4
17568: PUSH
17569: LD_EXP 1
17573: EQUAL
17574: IFFALSE 17634
// begin DialogueOn ;
17576: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17580: LD_EXP 1
17584: PPUSH
17585: LD_STRING D2c-JMM-1
17587: PPUSH
17588: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17592: LD_EXP 20
17596: PPUSH
17597: LD_STRING D2c-Kurt-1
17599: PPUSH
17600: CALL_OW 88
// DialogueOff ;
17604: CALL_OW 7
// InGameOff ;
17608: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17612: LD_EXP 20
17616: PPUSH
17617: LD_INT 8
17619: PPUSH
17620: CALL_OW 113
// readyToEscape := 1 ;
17624: LD_ADDR_EXP 22
17628: PUSH
17629: LD_INT 1
17631: ST_TO_ADDR
// end else
17632: GO 17719
// begin DialogueOn ;
17634: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17638: LD_VAR 0 4
17642: PPUSH
17643: CALL_OW 258
17647: PUSH
17648: LD_INT 1
17650: EQUAL
17651: IFFALSE 17667
// Say ( tmp , D2c-Sol1-1 ) else
17653: LD_VAR 0 4
17657: PPUSH
17658: LD_STRING D2c-Sol1-1
17660: PPUSH
17661: CALL_OW 88
17665: GO 17679
// Say ( tmp , D2c-FSol1-1 ) ;
17667: LD_VAR 0 4
17671: PPUSH
17672: LD_STRING D2c-FSol1-1
17674: PPUSH
17675: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17679: LD_EXP 20
17683: PPUSH
17684: LD_STRING D2c-Kurt-1
17686: PPUSH
17687: CALL_OW 88
// DialogueOff ;
17691: CALL_OW 7
// InGameOff ;
17695: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17699: LD_EXP 20
17703: PPUSH
17704: LD_INT 8
17706: PPUSH
17707: CALL_OW 113
// readyToEscape := 1 ;
17711: LD_ADDR_EXP 22
17715: PUSH
17716: LD_INT 1
17718: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17719: LD_ADDR_EXP 30
17723: PUSH
17724: LD_INT 0
17726: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17727: LD_INT 35
17729: PPUSH
17730: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_INT 8
17741: PPUSH
17742: CALL_OW 308
17746: PUSH
17747: LD_EXP 22
17751: AND
17752: PUSH
17753: LD_EXP 20
17757: PPUSH
17758: CALL_OW 301
17762: OR
17763: IFFALSE 17727
// if IsDead ( Kurt ) then
17765: LD_EXP 20
17769: PPUSH
17770: CALL_OW 301
17774: IFFALSE 17778
// exit ;
17776: GO 17833
// RemoveUnit ( Kurt ) ;
17778: LD_EXP 20
17782: PPUSH
17783: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17787: LD_EXP 20
17791: PPUSH
17792: LD_STRING Kurt
17794: PPUSH
17795: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17799: LD_INT 1
17801: PPUSH
17802: LD_INT 2
17804: PPUSH
17805: CALL_OW 81
17809: PUSH
17810: LD_INT 0
17812: EQUAL
17813: IFFALSE 17825
// kurtStatus = 1 else
17815: LD_ADDR_EXP 21
17819: PUSH
17820: LD_INT 1
17822: ST_TO_ADDR
17823: GO 17833
// kurtStatus = 2 ;
17825: LD_ADDR_EXP 21
17829: PUSH
17830: LD_INT 2
17832: ST_TO_ADDR
// end ; end_of_file
17833: LD_VAR 0 1
17837: RET
// every 0 0$2 do
17838: GO 17840
17840: DISABLE
// begin enable ;
17841: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17842: LD_INT 3
17844: PPUSH
17845: LD_INT 2
17847: PPUSH
17848: LD_INT 10
17850: PPUSH
17851: LD_EXP 32
17855: PPUSH
17856: CALL 7759 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17860: LD_INT 3
17862: PPUSH
17863: LD_INT 12
17865: PPUSH
17866: LD_EXP 32
17870: PPUSH
17871: CALL 9362 0 3
// if disableHealAI = 0 then
17875: LD_EXP 34
17879: PUSH
17880: LD_INT 0
17882: EQUAL
17883: IFFALSE 17904
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17885: LD_INT 3
17887: PPUSH
17888: LD_INT 9
17890: PPUSH
17891: LD_INT 10
17893: PPUSH
17894: LD_INT 32
17896: PUSH
17897: EMPTY
17898: LIST
17899: PPUSH
17900: CALL 8126 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17904: LD_INT 3
17906: PPUSH
17907: LD_INT 51
17909: PPUSH
17910: LD_INT 6
17912: PPUSH
17913: CALL 8815 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17917: LD_INT 2
17919: PPUSH
17920: CALL_OW 303
17924: PUSH
17925: LD_INT 2
17927: PPUSH
17928: CALL_OW 255
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: OR
17937: IFFALSE 17951
// DefendDepot ( 3 , rudepo ) else
17939: LD_INT 3
17941: PPUSH
17942: LD_INT 2
17944: PPUSH
17945: CALL 8642 0 2
17949: GO 17961
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17951: LD_INT 3
17953: PPUSH
17954: LD_INT 10
17956: PPUSH
17957: CALL 8933 0 2
// end ;
17961: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17962: LD_INT 22
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 21
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 55
17984: PUSH
17985: EMPTY
17986: LIST
17987: PUSH
17988: LD_INT 3
17990: PUSH
17991: LD_INT 34
17993: PUSH
17994: LD_INT 51
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PPUSH
18011: CALL_OW 69
18015: PUSH
18016: LD_INT 0
18018: EQUAL
18019: PUSH
18020: LD_INT 21
18022: PPUSH
18023: CALL_OW 255
18027: PUSH
18028: LD_INT 3
18030: EQUAL
18031: AND
18032: PUSH
18033: LD_INT 21
18035: PPUSH
18036: CALL_OW 302
18040: AND
18041: PUSH
18042: LD_INT 2
18044: PPUSH
18045: CALL_OW 255
18049: PUSH
18050: LD_INT 3
18052: EQUAL
18053: AND
18054: PUSH
18055: LD_INT 2
18057: PPUSH
18058: CALL_OW 302
18062: AND
18063: PUSH
18064: LD_INT 21
18066: PPUSH
18067: CALL_OW 313
18071: AND
18072: PUSH
18073: LD_EXP 48
18077: PUSH
18078: LD_INT 4
18080: PUSH
18081: LD_INT 5
18083: PUSH
18084: LD_INT 6
18086: PUSH
18087: LD_INT 6
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: LD_OWVAR 67
18100: ARRAY
18101: LESS
18102: AND
18103: IFFALSE 18324
18105: GO 18107
18107: DISABLE
// begin enable ;
18108: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18109: LD_INT 2
18111: PPUSH
18112: CALL_OW 274
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: LD_INT 2000
18122: PPUSH
18123: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18127: LD_INT 3
18129: PPUSH
18130: LD_INT 21
18132: PPUSH
18133: LD_INT 4
18135: PUSH
18136: LD_INT 5
18138: PUSH
18139: LD_INT 6
18141: PUSH
18142: LD_INT 6
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_OWVAR 67
18155: ARRAY
18156: PUSH
18157: LD_EXP 48
18161: MINUS
18162: PPUSH
18163: LD_INT 43
18165: PUSH
18166: LD_INT 43
18168: PUSH
18169: LD_INT 44
18171: PUSH
18172: LD_INT 44
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 43
18183: PUSH
18184: LD_INT 43
18186: PUSH
18187: LD_INT 43
18189: PUSH
18190: LD_INT 44
18192: PUSH
18193: LD_INT 44
18195: PUSH
18196: LD_INT 46
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 43
18209: PUSH
18210: LD_INT 43
18212: PUSH
18213: LD_INT 43
18215: PUSH
18216: LD_INT 44
18218: PUSH
18219: LD_INT 44
18221: PUSH
18222: LD_INT 46
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 43
18235: PUSH
18236: LD_INT 43
18238: PUSH
18239: LD_INT 44
18241: PUSH
18242: LD_INT 46
18244: PUSH
18245: LD_INT 46
18247: PUSH
18248: LD_INT 46
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: LD_OWVAR 67
18269: ARRAY
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: LD_INT 22
18279: PUSH
18280: LD_INT 22
18282: PUSH
18283: LD_INT 24
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PPUSH
18293: LD_INT 2
18295: PPUSH
18296: CALL_OW 12
18300: ARRAY
18301: PUSH
18302: LD_INT 24
18304: PUSH
18305: LD_INT 24
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: PUSH
18314: LD_OWVAR 67
18318: ARRAY
18319: PPUSH
18320: CALL 7605 0 7
// end ;
18324: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18325: LD_INT 17
18327: PPUSH
18328: CALL_OW 255
18332: PUSH
18333: LD_INT 3
18335: EQUAL
18336: PUSH
18337: LD_INT 17
18339: PPUSH
18340: CALL_OW 302
18344: AND
18345: PUSH
18346: LD_INT 2
18348: PPUSH
18349: CALL_OW 255
18353: PUSH
18354: LD_INT 3
18356: EQUAL
18357: AND
18358: PUSH
18359: LD_INT 2
18361: PPUSH
18362: CALL_OW 302
18366: AND
18367: PUSH
18368: LD_EXP 48
18372: PUSH
18373: LD_INT 4
18375: PUSH
18376: LD_INT 5
18378: PUSH
18379: LD_INT 6
18381: PUSH
18382: LD_INT 7
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: LD_OWVAR 67
18395: ARRAY
18396: LESS
18397: AND
18398: IFFALSE 18446
18400: GO 18402
18402: DISABLE
// begin enable ;
18403: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18404: LD_INT 17
18406: PPUSH
18407: LD_INT 22
18409: PPUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: LD_INT 42
18418: PUSH
18419: LD_INT 43
18421: PUSH
18422: LD_INT 44
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PPUSH
18433: LD_INT 3
18435: PPUSH
18436: CALL_OW 12
18440: ARRAY
18441: PPUSH
18442: CALL_OW 185
// end ;
18446: END
// every 2 2$0 do var i , j ;
18447: GO 18449
18449: DISABLE
18450: LD_INT 0
18452: PPUSH
18453: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18454: LD_INT 14700
18456: PUSH
18457: LD_INT 33600
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PPUSH
18467: LD_INT 2
18469: PPUSH
18470: CALL_OW 12
18474: ARRAY
18475: PPUSH
18476: CALL_OW 67
// disableHealAI = 1 ;
18480: LD_ADDR_EXP 34
18484: PUSH
18485: LD_INT 1
18487: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_INT 22
18495: PUSH
18496: LD_INT 3
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 25
18505: PUSH
18506: LD_INT 4
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PUSH
18522: FOR_IN
18523: IFFALSE 18536
// ComExitBuilding ( i ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 122
18534: GO 18522
18536: POP
18537: POP
// wait ( 0 0$1 ) ;
18538: LD_INT 35
18540: PPUSH
18541: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18545: LD_INT 35
18547: PPUSH
18548: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_INT 22
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 25
18569: PUSH
18570: LD_INT 4
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: FOR_IN
18587: IFFALSE 18664
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_INT 17
18596: PPUSH
18597: LD_INT 22
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 25
18609: PUSH
18610: LD_INT 12
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 70
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18660
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18629: LD_VAR 0 1
18633: PPUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: CALL_OW 250
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 251
18653: PPUSH
18654: CALL_OW 191
18658: GO 18626
18660: POP
18661: POP
18662: GO 18586
18664: POP
18665: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18666: LD_INT 22
18668: PUSH
18669: LD_INT 3
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 4
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: PUSH
18695: LD_INT 0
18697: EQUAL
18698: PUSH
18699: LD_EXP 33
18703: PUSH
18704: LD_INT 6
18706: PUSH
18707: LD_INT 7
18709: PUSH
18710: LD_INT 8
18712: PUSH
18713: LD_INT 8
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: LD_OWVAR 67
18726: ARRAY
18727: GREATEREQUAL
18728: OR
18729: PUSH
18730: LD_INT 17
18732: PPUSH
18733: LD_INT 22
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 25
18745: PUSH
18746: LD_INT 12
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 70
18761: PUSH
18762: LD_INT 0
18764: EQUAL
18765: OR
18766: IFFALSE 18545
// disableHealAI = 0 ;
18768: LD_ADDR_EXP 34
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 25
18793: PUSH
18794: LD_INT 12
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 69
18809: PUSH
18810: FOR_IN
18811: IFFALSE 18827
// SetClass ( i , 16 ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 16
18820: PPUSH
18821: CALL_OW 336
18825: GO 18810
18827: POP
18828: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18829: LD_ADDR_VAR 0 1
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 25
18846: PUSH
18847: LD_INT 4
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PPUSH
18858: CALL_OW 69
18862: PUSH
18863: FOR_IN
18864: IFFALSE 18880
// ComEnterUnit ( i , rulab ) ;
18866: LD_VAR 0 1
18870: PPUSH
18871: LD_INT 32
18873: PPUSH
18874: CALL_OW 120
18878: GO 18863
18880: POP
18881: POP
// end ; end_of_file
18882: PPOPN 2
18884: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18885: LD_EXP 27
18889: PUSH
18890: LD_INT 0
18892: LESSEQUAL
18893: IFFALSE 19047
18895: GO 18897
18897: DISABLE
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18903: LD_ADDR_VAR 0 2
18907: PUSH
18908: LD_INT 22
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 3
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: ST_TO_ADDR
// for i in tmp do
18966: LD_ADDR_VAR 0 1
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: FOR_IN
18977: IFFALSE 19010
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_VAR 0 3
18988: PUSH
18989: LD_VAR 0 1
18993: PPUSH
18994: CALL_OW 274
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 275
19006: PLUS
19007: ST_TO_ADDR
19008: GO 18976
19010: POP
19011: POP
// if yourCrates >= needCrates then
19012: LD_VAR 0 3
19016: PUSH
19017: LD_EXP 26
19021: GREATEREQUAL
19022: IFFALSE 19040
// FinishMission ( yourCrates , needCrates ) else
19024: LD_VAR 0 3
19028: PPUSH
19029: LD_EXP 26
19033: PPUSH
19034: CALL 19050 0 2
19038: GO 19047
// YouLost ( matmin ) ;
19040: LD_STRING matmin
19042: PPUSH
19043: CALL_OW 104
// end ;
19047: PPOPN 3
19049: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19050: LD_INT 0
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
// if killCounter = 0 then
19056: LD_EXP 46
19060: PUSH
19061: LD_INT 0
19063: EQUAL
19064: IFFALSE 19073
// SetAchievement ( ACH_SURV ) ;
19066: LD_STRING ACH_SURV
19068: PPUSH
19069: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19073: LD_INT 22
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 21
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: PUSH
19102: LD_INT 0
19104: EQUAL
19105: IFFALSE 19121
// begin wait ( 3 ) ;
19107: LD_INT 3
19109: PPUSH
19110: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19114: LD_STRING ACH_BASEDESTROYER
19116: PPUSH
19117: CALL_OW 543
// end ; m1 := false ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 0
19128: ST_TO_ADDR
// m2 := false ;
19129: LD_ADDR_VAR 0 5
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// m3 := false ;
19137: LD_ADDR_VAR 0 6
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19145: LD_VAR 0 1
19149: PUSH
19150: LD_INT 100
19152: PUSH
19153: LD_INT 140
19155: PUSH
19156: LD_INT 180
19158: PUSH
19159: LD_INT 220
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: PUSH
19168: LD_OWVAR 67
19172: ARRAY
19173: PLUS
19174: PUSH
19175: LD_VAR 0 2
19179: GREATER
19180: IFFALSE 19212
// begin AddMedal ( cans , 1 ) ;
19182: LD_STRING cans
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19192: LD_INT 1
19194: PPUSH
19195: LD_STRING 06_crates_1
19197: PPUSH
19198: CALL_OW 39
// m1 := true ;
19202: LD_ADDR_VAR 0 4
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// end else
19210: GO 19233
// begin AddMedal ( cans , - 1 ) ;
19212: LD_STRING cans
19214: PPUSH
19215: LD_INT 1
19217: NEG
19218: PPUSH
19219: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19223: LD_INT 0
19225: PPUSH
19226: LD_STRING 06_crates_1
19228: PPUSH
19229: CALL_OW 39
// end ; if unitLost < 3 then
19233: LD_EXP 31
19237: PUSH
19238: LD_INT 3
19240: LESS
19241: IFFALSE 19263
// begin AddMedal ( people , 1 ) ;
19243: LD_STRING people
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 101
// m2 := true ;
19253: LD_ADDR_VAR 0 5
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// end else
19261: GO 19274
// AddMedal ( people , - 1 ) ;
19263: LD_STRING people
19265: PPUSH
19266: LD_INT 1
19268: NEG
19269: PPUSH
19270: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19274: LD_EXP 29
19278: PPUSH
19279: LD_STRING 06_remoteVehs_1
19281: PPUSH
19282: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19286: LD_EXP 29
19290: PUSH
19291: LD_INT 1
19293: EQUAL
19294: IFFALSE 19316
// begin AddMedal ( remote , 1 ) ;
19296: LD_STRING remote
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 101
// m3 := true ;
19306: LD_ADDR_VAR 0 6
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// end else
19314: GO 19356
// begin if GetTech ( 18 , 1 ) = state_enabled then
19316: LD_INT 18
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 321
19326: PUSH
19327: LD_INT 1
19329: EQUAL
19330: IFFALSE 19345
// AddMedal ( remote , - 1 ) else
19332: LD_STRING remote
19334: PPUSH
19335: LD_INT 1
19337: NEG
19338: PPUSH
19339: CALL_OW 101
19343: GO 19356
// AddMedal ( remote , - 2 ) ;
19345: LD_STRING remote
19347: PPUSH
19348: LD_INT 2
19350: NEG
19351: PPUSH
19352: CALL_OW 101
// end ; if m1 and m2 and m3 then
19356: LD_VAR 0 4
19360: PUSH
19361: LD_VAR 0 5
19365: AND
19366: PUSH
19367: LD_VAR 0 6
19371: AND
19372: IFFALSE 19388
// begin wait ( 3 ) ;
19374: LD_INT 3
19376: PPUSH
19377: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19381: LD_STRING ACH_ASPEED_6
19383: PPUSH
19384: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19388: LD_OWVAR 67
19392: PUSH
19393: LD_INT 3
19395: GREATEREQUAL
19396: PUSH
19397: LD_VAR 0 4
19401: AND
19402: PUSH
19403: LD_VAR 0 5
19407: AND
19408: PUSH
19409: LD_VAR 0 6
19413: AND
19414: IFFALSE 19426
// SetAchievementEX ( ACH_AMER , 6 ) ;
19416: LD_STRING ACH_AMER
19418: PPUSH
19419: LD_INT 6
19421: PPUSH
19422: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19426: LD_EXP 21
19430: PPUSH
19431: LD_STRING 06_KurtStatus_1
19433: PPUSH
19434: CALL_OW 39
// GiveMedals ( Main ) ;
19438: LD_STRING Main
19440: PPUSH
19441: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19445: LD_INT 22
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 21
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 50
19467: PUSH
19468: EMPTY
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 25
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 25
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 25
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 4
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: PPUSH
19532: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19536: LD_EXP 1
19540: PPUSH
19541: LD_EXP 43
19545: PUSH
19546: LD_STRING JMM
19548: STR
19549: PPUSH
19550: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19554: LD_EXP 2
19558: PPUSH
19559: LD_EXP 43
19563: PUSH
19564: LD_STRING Lisa
19566: STR
19567: PPUSH
19568: CALL 6920 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19572: LD_EXP 3
19576: PPUSH
19577: LD_EXP 43
19581: PUSH
19582: LD_STRING Bobby
19584: STR
19585: PPUSH
19586: CALL 6920 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19590: LD_EXP 4
19594: PPUSH
19595: LD_EXP 43
19599: PUSH
19600: LD_STRING Cyrus
19602: STR
19603: PPUSH
19604: CALL 6920 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19608: LD_EXP 5
19612: PPUSH
19613: LD_EXP 43
19617: PUSH
19618: LD_STRING Frank
19620: STR
19621: PPUSH
19622: CALL 6920 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19626: LD_EXP 6
19630: PPUSH
19631: LD_EXP 43
19635: PUSH
19636: LD_STRING Brown
19638: STR
19639: PPUSH
19640: CALL 6920 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19644: LD_EXP 7
19648: PPUSH
19649: LD_EXP 43
19653: PUSH
19654: LD_STRING Donaldson
19656: STR
19657: PPUSH
19658: CALL 6920 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19662: LD_EXP 8
19666: PPUSH
19667: LD_EXP 43
19671: PUSH
19672: LD_STRING Gladstone
19674: STR
19675: PPUSH
19676: CALL 6920 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19680: LD_EXP 9
19684: PPUSH
19685: LD_EXP 43
19689: PUSH
19690: LD_STRING Denis
19692: STR
19693: PPUSH
19694: CALL 6920 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19698: LD_EXP 16
19702: PPUSH
19703: LD_EXP 43
19707: PUSH
19708: LD_STRING Joan
19710: STR
19711: PPUSH
19712: CALL 6920 0 2
// if IsLive ( Mike ) then
19716: LD_EXP 11
19720: PPUSH
19721: CALL_OW 300
19725: IFFALSE 19745
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19727: LD_EXP 11
19731: PPUSH
19732: LD_EXP 43
19736: PUSH
19737: LD_STRING Mike
19739: STR
19740: PPUSH
19741: CALL_OW 38
// if IsLive ( Joan ) then
19745: LD_EXP 16
19749: PPUSH
19750: CALL_OW 300
19754: IFFALSE 19768
// SaveCharacters ( Joan , Joan ) ;
19756: LD_EXP 16
19760: PPUSH
19761: LD_STRING Joan
19763: PPUSH
19764: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19768: LD_EXP 17
19772: PPUSH
19773: LD_STRING 06_JoanStatus_1
19775: PPUSH
19776: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19780: LD_INT 50
19782: PUSH
19783: EMPTY
19784: LIST
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 21
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 25
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 25
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 25
19831: PUSH
19832: LD_INT 3
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 25
19841: PUSH
19842: LD_INT 4
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PPUSH
19862: CALL_OW 69
19866: PUSH
19867: LD_EXP 1
19871: PUSH
19872: LD_EXP 2
19876: PUSH
19877: LD_EXP 3
19881: PUSH
19882: LD_EXP 4
19886: PUSH
19887: LD_EXP 5
19891: PUSH
19892: LD_EXP 6
19896: PUSH
19897: LD_EXP 7
19901: PUSH
19902: LD_EXP 8
19906: PUSH
19907: LD_EXP 9
19911: PUSH
19912: LD_EXP 16
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: DIFF
19929: PPUSH
19930: LD_STRING 06_other_survivors
19932: PPUSH
19933: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19937: LD_INT 50
19939: PUSH
19940: EMPTY
19941: LIST
19942: PUSH
19943: LD_INT 22
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 21
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 25
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 25
19978: PUSH
19979: LD_INT 16
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: PPUSH
20002: LD_STRING 06_other_apemans
20004: PPUSH
20005: CALL_OW 38
// YouWin ;
20009: CALL_OW 103
// end ; end_of_file
20013: LD_VAR 0 3
20017: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20018: LD_EXP 48
20022: PUSH
20023: LD_OWVAR 1
20027: PUSH
20028: LD_INT 23100
20030: PUSH
20031: LD_INT 21000
20033: PUSH
20034: LD_INT 18900
20036: PUSH
20037: LD_INT 16800
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: PUSH
20046: LD_OWVAR 67
20050: ARRAY
20051: GREATER
20052: AND
20053: IFFALSE 20400
20055: GO 20057
20057: DISABLE
20058: LD_INT 0
20060: PPUSH
20061: PPUSH
20062: PPUSH
20063: PPUSH
// begin enable ;
20064: ENABLE
// for i in ruAttackers do
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_EXP 48
20074: PUSH
20075: FOR_IN
20076: IFFALSE 20398
// begin if not IsDrivenBy ( i ) then
20078: LD_VAR 0 1
20082: PPUSH
20083: CALL_OW 311
20087: NOT
20088: IFFALSE 20092
// continue ;
20090: GO 20075
// if i mod 2 = 0 then
20092: LD_VAR 0 1
20096: PUSH
20097: LD_INT 2
20099: MOD
20100: PUSH
20101: LD_INT 0
20103: EQUAL
20104: IFFALSE 20159
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20106: LD_ADDR_VAR 0 3
20110: PUSH
20111: LD_INT 91
20113: PUSH
20114: LD_INT 52
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 82
20123: PUSH
20124: LD_INT 34
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 90
20133: PUSH
20134: LD_INT 26
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 86
20143: PUSH
20144: LD_INT 16
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: ST_TO_ADDR
20157: GO 20254
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20159: LD_ADDR_VAR 0 3
20163: PUSH
20164: LD_INT 91
20166: PUSH
20167: LD_INT 52
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 68
20176: PUSH
20177: LD_INT 46
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 48
20186: PUSH
20187: LD_INT 43
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 44
20196: PUSH
20197: LD_INT 42
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 33
20206: PUSH
20207: LD_INT 34
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 29
20216: PUSH
20217: LD_INT 23
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 19
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 38
20236: PUSH
20237: LD_INT 16
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 256
20263: PUSH
20264: LD_INT 1000
20266: EQUAL
20267: IFFALSE 20285
// AgressiveMove ( i , path ) else
20269: LD_VAR 0 1
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL 81323 0 2
20283: GO 20396
// if GetLives ( i ) < 650 then
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 256
20294: PUSH
20295: LD_INT 650
20297: LESS
20298: IFFALSE 20396
// begin if not IsInArea ( i , russianRepairArea ) then
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 12
20307: PPUSH
20308: CALL_OW 308
20312: NOT
20313: IFFALSE 20382
// begin SetTag ( i , 0 ) ;
20315: LD_VAR 0 1
20319: PPUSH
20320: LD_INT 0
20322: PPUSH
20323: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20327: LD_VAR 0 1
20331: PPUSH
20332: CALL_OW 261
20336: PUSH
20337: LD_INT 50
20339: LESS
20340: PUSH
20341: LD_INT 21
20343: PPUSH
20344: CALL_OW 302
20348: AND
20349: IFFALSE 20365
// ComMoveUnit ( i , rufab ) else
20351: LD_VAR 0 1
20355: PPUSH
20356: LD_INT 21
20358: PPUSH
20359: CALL_OW 112
20363: GO 20380
// ComMoveXY ( i , 121 , 99 ) ;
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_INT 121
20372: PPUSH
20373: LD_INT 99
20375: PPUSH
20376: CALL_OW 111
// end else
20380: GO 20396
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 311
20391: PPUSH
20392: CALL 80419 0 1
// end ; end ;
20396: GO 20075
20398: POP
20399: POP
// end ;
20400: PPOPN 4
20402: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20403: LD_INT 0
20405: PPUSH
20406: PPUSH
20407: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: DOUBLE
20414: LD_INT 1
20416: DEC
20417: ST_TO_ADDR
20418: LD_INT 4
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: LD_INT 6
20426: PUSH
20427: LD_INT 6
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: LD_OWVAR 67
20440: ARRAY
20441: PUSH
20442: FOR_TO
20443: IFFALSE 20618
// begin uc_side := 3 ;
20445: LD_ADDR_OWVAR 20
20449: PUSH
20450: LD_INT 3
20452: ST_TO_ADDR
// uc_nation := 3 ;
20453: LD_ADDR_OWVAR 21
20457: PUSH
20458: LD_INT 3
20460: ST_TO_ADDR
// InitHC_All ( ) ;
20461: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20465: LD_INT 0
20467: PPUSH
20468: LD_INT 4
20470: PUSH
20471: LD_INT 5
20473: PUSH
20474: LD_INT 6
20476: PUSH
20477: LD_INT 6
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: PUSH
20486: LD_OWVAR 67
20490: ARRAY
20491: PPUSH
20492: CALL_OW 381
// un := CreateHuman ;
20496: LD_ADDR_VAR 0 3
20500: PUSH
20501: CALL_OW 44
20505: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 127
20513: PPUSH
20514: LD_INT 62
20516: PPUSH
20517: LD_INT 3
20519: PPUSH
20520: LD_INT 0
20522: PPUSH
20523: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20527: LD_ADDR_EXP 49
20531: PUSH
20532: LD_EXP 49
20536: PPUSH
20537: LD_EXP 49
20541: PUSH
20542: LD_INT 1
20544: PLUS
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: CALL_OW 1
20555: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20556: LD_VAR 0 3
20560: PPUSH
20561: LD_INT 83
20563: PPUSH
20564: LD_INT 49
20566: PPUSH
20567: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20571: LD_VAR 0 3
20575: PPUSH
20576: LD_INT 49
20578: PPUSH
20579: LD_INT 43
20581: PPUSH
20582: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_INT 31
20593: PPUSH
20594: LD_INT 15
20596: PPUSH
20597: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20601: LD_VAR 0 3
20605: PPUSH
20606: LD_INT 63
20608: PPUSH
20609: LD_INT 9
20611: PPUSH
20612: CALL_OW 174
// end ;
20616: GO 20442
20618: POP
20619: POP
// end ; end_of_file
20620: LD_VAR 0 1
20624: RET
// export function CreateNature ; var i , un ; begin
20625: LD_INT 0
20627: PPUSH
20628: PPUSH
20629: PPUSH
// for i := 1 to Difficulty + 2 do
20630: LD_ADDR_VAR 0 2
20634: PUSH
20635: DOUBLE
20636: LD_INT 1
20638: DEC
20639: ST_TO_ADDR
20640: LD_OWVAR 67
20644: PUSH
20645: LD_INT 2
20647: PLUS
20648: PUSH
20649: FOR_TO
20650: IFFALSE 20759
// begin hc_sex := sex_male ;
20652: LD_ADDR_OWVAR 27
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// uc_side := 0 ;
20660: LD_ADDR_OWVAR 20
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// uc_nation := nation_nature ;
20668: LD_ADDR_OWVAR 21
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// hc_class := class_tiger ;
20676: LD_ADDR_OWVAR 28
20680: PUSH
20681: LD_INT 14
20683: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20684: LD_ADDR_OWVAR 31
20688: PUSH
20689: LD_EXP 36
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20709: LD_ADDR_OWVAR 35
20713: PUSH
20714: LD_INT 5
20716: NEG
20717: PPUSH
20718: LD_INT 5
20720: PPUSH
20721: CALL_OW 12
20725: PUSH
20726: LD_OWVAR 67
20730: MUL
20731: ST_TO_ADDR
// un := CreateHuman ;
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: CALL_OW 44
20741: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_INT 18
20749: PPUSH
20750: LD_INT 0
20752: PPUSH
20753: CALL_OW 49
// end ;
20757: GO 20649
20759: POP
20760: POP
// for i = 1 to rand ( 3 , 4 ) do
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: DOUBLE
20767: LD_INT 1
20769: DEC
20770: ST_TO_ADDR
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 4
20776: PPUSH
20777: CALL_OW 12
20781: PUSH
20782: FOR_TO
20783: IFFALSE 20853
// begin hc_class := class_phororhacos ;
20785: LD_ADDR_OWVAR 28
20789: PUSH
20790: LD_INT 18
20792: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20793: LD_ADDR_OWVAR 31
20797: PUSH
20798: LD_EXP 36
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: ST_TO_ADDR
// hc_agressivity := 0 ;
20818: LD_ADDR_OWVAR 35
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// un = CreateHuman ;
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: CALL_OW 44
20835: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20836: LD_VAR 0 3
20840: PPUSH
20841: LD_INT 18
20843: PPUSH
20844: LD_INT 0
20846: PPUSH
20847: CALL_OW 49
// end ;
20851: GO 20782
20853: POP
20854: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
20855: LD_ADDR_VAR 0 2
20859: PUSH
20860: DOUBLE
20861: LD_INT 1
20863: DEC
20864: ST_TO_ADDR
20865: LD_INT 3
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: LD_INT 4
20873: PUSH
20874: LD_INT 5
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_OWVAR 67
20887: ARRAY
20888: PUSH
20889: FOR_TO
20890: IFFALSE 21031
// begin hc_class := class_apeman ;
20892: LD_ADDR_OWVAR 28
20896: PUSH
20897: LD_INT 12
20899: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20900: LD_ADDR_OWVAR 31
20904: PUSH
20905: LD_INT 2
20907: PPUSH
20908: LD_INT 5
20910: PPUSH
20911: CALL_OW 12
20915: PUSH
20916: LD_INT 0
20918: PPUSH
20919: LD_INT 2
20921: PPUSH
20922: CALL_OW 12
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
20939: LD_ADDR_OWVAR 35
20943: PUSH
20944: LD_INT 5
20946: NEG
20947: PPUSH
20948: LD_INT 10
20950: PPUSH
20951: CALL_OW 12
20955: PUSH
20956: LD_INT 10
20958: NEG
20959: PPUSH
20960: LD_INT 20
20962: PPUSH
20963: CALL_OW 12
20967: PUSH
20968: LD_INT 20
20970: NEG
20971: PPUSH
20972: LD_INT 25
20974: PPUSH
20975: CALL_OW 12
20979: PUSH
20980: LD_INT 30
20982: NEG
20983: PPUSH
20984: LD_INT 30
20986: PPUSH
20987: CALL_OW 12
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_OWVAR 67
21002: ARRAY
21003: ST_TO_ADDR
// un := CreateHuman ;
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: CALL_OW 44
21013: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21014: LD_VAR 0 3
21018: PPUSH
21019: LD_INT 19
21021: PPUSH
21022: LD_INT 0
21024: PPUSH
21025: CALL_OW 49
// end ;
21029: GO 20889
21031: POP
21032: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21033: LD_ADDR_VAR 0 2
21037: PUSH
21038: DOUBLE
21039: LD_INT 1
21041: DEC
21042: ST_TO_ADDR
21043: LD_INT 3
21045: PUSH
21046: LD_INT 4
21048: PUSH
21049: LD_INT 5
21051: PUSH
21052: LD_INT 6
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: LD_OWVAR 67
21065: ARRAY
21066: PUSH
21067: FOR_TO
21068: IFFALSE 21161
// begin hc_class := class_apeman ;
21070: LD_ADDR_OWVAR 28
21074: PUSH
21075: LD_INT 12
21077: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21078: LD_ADDR_OWVAR 31
21082: PUSH
21083: LD_INT 2
21085: PPUSH
21086: LD_INT 5
21088: PPUSH
21089: CALL_OW 12
21093: PUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 2
21099: PPUSH
21100: CALL_OW 12
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21117: LD_ADDR_OWVAR 35
21121: PUSH
21122: LD_INT 15
21124: NEG
21125: PPUSH
21126: LD_INT 15
21128: PPUSH
21129: CALL_OW 12
21133: ST_TO_ADDR
// un = CreateHuman ;
21134: LD_ADDR_VAR 0 3
21138: PUSH
21139: CALL_OW 44
21143: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21144: LD_VAR 0 3
21148: PPUSH
21149: LD_INT 20
21151: PPUSH
21152: LD_INT 0
21154: PPUSH
21155: CALL_OW 49
// end ;
21159: GO 21067
21161: POP
21162: POP
// end ; end_of_file end_of_file
21163: LD_VAR 0 1
21167: RET
// export globalGameSaveCounter ; every 0 0$1 do
21168: GO 21170
21170: DISABLE
// begin enable ;
21171: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21172: LD_STRING updateTimer(
21174: PUSH
21175: LD_OWVAR 1
21179: STR
21180: PUSH
21181: LD_STRING );
21183: STR
21184: PPUSH
21185: CALL_OW 559
// end ;
21189: END
// every 0 0$1 do
21190: GO 21192
21192: DISABLE
// begin globalGameSaveCounter := 0 ;
21193: LD_ADDR_EXP 50
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21201: LD_STRING setGameSaveCounter(0)
21203: PPUSH
21204: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21208: LD_STRING initStreamRollete();
21210: PPUSH
21211: CALL_OW 559
// InitStreamMode ;
21215: CALL 22541 0 0
// DefineStreamItems ( false ) ;
21219: LD_INT 0
21221: PPUSH
21222: CALL 23005 0 1
// end ;
21226: END
// export function SOS_MapStart ( ) ; begin
21227: LD_INT 0
21229: PPUSH
// if streamModeActive then
21230: LD_EXP 51
21234: IFFALSE 21243
// DefineStreamItems ( true ) ;
21236: LD_INT 1
21238: PPUSH
21239: CALL 23005 0 1
// UpdateLuaVariables ( ) ;
21243: CALL 21260 0 0
// UpdateFactoryWaypoints ( ) ;
21247: CALL 35866 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21251: CALL 36123 0 0
// end ;
21255: LD_VAR 0 1
21259: RET
// function UpdateLuaVariables ( ) ; begin
21260: LD_INT 0
21262: PPUSH
// if globalGameSaveCounter then
21263: LD_EXP 50
21267: IFFALSE 21301
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21269: LD_ADDR_EXP 50
21273: PUSH
21274: LD_EXP 50
21278: PPUSH
21279: CALL 80080 0 1
21283: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21284: LD_STRING setGameSaveCounter(
21286: PUSH
21287: LD_EXP 50
21291: STR
21292: PUSH
21293: LD_STRING )
21295: STR
21296: PPUSH
21297: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21301: LD_STRING setGameDifficulty(
21303: PUSH
21304: LD_OWVAR 67
21308: STR
21309: PUSH
21310: LD_STRING )
21312: STR
21313: PPUSH
21314: CALL_OW 559
// end ;
21318: LD_VAR 0 1
21322: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21323: LD_INT 0
21325: PPUSH
// if p2 = stream_mode then
21326: LD_VAR 0 2
21330: PUSH
21331: LD_INT 100
21333: EQUAL
21334: IFFALSE 22337
// begin if not StreamModeActive then
21336: LD_EXP 51
21340: NOT
21341: IFFALSE 21351
// StreamModeActive := true ;
21343: LD_ADDR_EXP 51
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 0 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: IFFALSE 21365
// InitStreamMode ;
21361: CALL 22541 0 0
// if p3 = 1 then
21365: LD_VAR 0 3
21369: PUSH
21370: LD_INT 1
21372: EQUAL
21373: IFFALSE 21383
// sRocket := true ;
21375: LD_ADDR_EXP 56
21379: PUSH
21380: LD_INT 1
21382: ST_TO_ADDR
// if p3 = 2 then
21383: LD_VAR 0 3
21387: PUSH
21388: LD_INT 2
21390: EQUAL
21391: IFFALSE 21401
// sSpeed := true ;
21393: LD_ADDR_EXP 55
21397: PUSH
21398: LD_INT 1
21400: ST_TO_ADDR
// if p3 = 3 then
21401: LD_VAR 0 3
21405: PUSH
21406: LD_INT 3
21408: EQUAL
21409: IFFALSE 21419
// sEngine := true ;
21411: LD_ADDR_EXP 57
21415: PUSH
21416: LD_INT 1
21418: ST_TO_ADDR
// if p3 = 4 then
21419: LD_VAR 0 3
21423: PUSH
21424: LD_INT 4
21426: EQUAL
21427: IFFALSE 21437
// sSpec := true ;
21429: LD_ADDR_EXP 54
21433: PUSH
21434: LD_INT 1
21436: ST_TO_ADDR
// if p3 = 5 then
21437: LD_VAR 0 3
21441: PUSH
21442: LD_INT 5
21444: EQUAL
21445: IFFALSE 21455
// sLevel := true ;
21447: LD_ADDR_EXP 58
21451: PUSH
21452: LD_INT 1
21454: ST_TO_ADDR
// if p3 = 6 then
21455: LD_VAR 0 3
21459: PUSH
21460: LD_INT 6
21462: EQUAL
21463: IFFALSE 21473
// sArmoury := true ;
21465: LD_ADDR_EXP 59
21469: PUSH
21470: LD_INT 1
21472: ST_TO_ADDR
// if p3 = 7 then
21473: LD_VAR 0 3
21477: PUSH
21478: LD_INT 7
21480: EQUAL
21481: IFFALSE 21491
// sRadar := true ;
21483: LD_ADDR_EXP 60
21487: PUSH
21488: LD_INT 1
21490: ST_TO_ADDR
// if p3 = 8 then
21491: LD_VAR 0 3
21495: PUSH
21496: LD_INT 8
21498: EQUAL
21499: IFFALSE 21509
// sBunker := true ;
21501: LD_ADDR_EXP 61
21505: PUSH
21506: LD_INT 1
21508: ST_TO_ADDR
// if p3 = 9 then
21509: LD_VAR 0 3
21513: PUSH
21514: LD_INT 9
21516: EQUAL
21517: IFFALSE 21527
// sHack := true ;
21519: LD_ADDR_EXP 62
21523: PUSH
21524: LD_INT 1
21526: ST_TO_ADDR
// if p3 = 10 then
21527: LD_VAR 0 3
21531: PUSH
21532: LD_INT 10
21534: EQUAL
21535: IFFALSE 21545
// sFire := true ;
21537: LD_ADDR_EXP 63
21541: PUSH
21542: LD_INT 1
21544: ST_TO_ADDR
// if p3 = 11 then
21545: LD_VAR 0 3
21549: PUSH
21550: LD_INT 11
21552: EQUAL
21553: IFFALSE 21563
// sRefresh := true ;
21555: LD_ADDR_EXP 64
21559: PUSH
21560: LD_INT 1
21562: ST_TO_ADDR
// if p3 = 12 then
21563: LD_VAR 0 3
21567: PUSH
21568: LD_INT 12
21570: EQUAL
21571: IFFALSE 21581
// sExp := true ;
21573: LD_ADDR_EXP 65
21577: PUSH
21578: LD_INT 1
21580: ST_TO_ADDR
// if p3 = 13 then
21581: LD_VAR 0 3
21585: PUSH
21586: LD_INT 13
21588: EQUAL
21589: IFFALSE 21599
// sDepot := true ;
21591: LD_ADDR_EXP 66
21595: PUSH
21596: LD_INT 1
21598: ST_TO_ADDR
// if p3 = 14 then
21599: LD_VAR 0 3
21603: PUSH
21604: LD_INT 14
21606: EQUAL
21607: IFFALSE 21617
// sFlag := true ;
21609: LD_ADDR_EXP 67
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
// if p3 = 15 then
21617: LD_VAR 0 3
21621: PUSH
21622: LD_INT 15
21624: EQUAL
21625: IFFALSE 21635
// sKamikadze := true ;
21627: LD_ADDR_EXP 75
21631: PUSH
21632: LD_INT 1
21634: ST_TO_ADDR
// if p3 = 16 then
21635: LD_VAR 0 3
21639: PUSH
21640: LD_INT 16
21642: EQUAL
21643: IFFALSE 21653
// sTroll := true ;
21645: LD_ADDR_EXP 76
21649: PUSH
21650: LD_INT 1
21652: ST_TO_ADDR
// if p3 = 17 then
21653: LD_VAR 0 3
21657: PUSH
21658: LD_INT 17
21660: EQUAL
21661: IFFALSE 21671
// sSlow := true ;
21663: LD_ADDR_EXP 77
21667: PUSH
21668: LD_INT 1
21670: ST_TO_ADDR
// if p3 = 18 then
21671: LD_VAR 0 3
21675: PUSH
21676: LD_INT 18
21678: EQUAL
21679: IFFALSE 21689
// sLack := true ;
21681: LD_ADDR_EXP 78
21685: PUSH
21686: LD_INT 1
21688: ST_TO_ADDR
// if p3 = 19 then
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 19
21696: EQUAL
21697: IFFALSE 21707
// sTank := true ;
21699: LD_ADDR_EXP 80
21703: PUSH
21704: LD_INT 1
21706: ST_TO_ADDR
// if p3 = 20 then
21707: LD_VAR 0 3
21711: PUSH
21712: LD_INT 20
21714: EQUAL
21715: IFFALSE 21725
// sRemote := true ;
21717: LD_ADDR_EXP 81
21721: PUSH
21722: LD_INT 1
21724: ST_TO_ADDR
// if p3 = 21 then
21725: LD_VAR 0 3
21729: PUSH
21730: LD_INT 21
21732: EQUAL
21733: IFFALSE 21743
// sPowell := true ;
21735: LD_ADDR_EXP 82
21739: PUSH
21740: LD_INT 1
21742: ST_TO_ADDR
// if p3 = 22 then
21743: LD_VAR 0 3
21747: PUSH
21748: LD_INT 22
21750: EQUAL
21751: IFFALSE 21761
// sTeleport := true ;
21753: LD_ADDR_EXP 85
21757: PUSH
21758: LD_INT 1
21760: ST_TO_ADDR
// if p3 = 23 then
21761: LD_VAR 0 3
21765: PUSH
21766: LD_INT 23
21768: EQUAL
21769: IFFALSE 21779
// sOilTower := true ;
21771: LD_ADDR_EXP 87
21775: PUSH
21776: LD_INT 1
21778: ST_TO_ADDR
// if p3 = 24 then
21779: LD_VAR 0 3
21783: PUSH
21784: LD_INT 24
21786: EQUAL
21787: IFFALSE 21797
// sShovel := true ;
21789: LD_ADDR_EXP 88
21793: PUSH
21794: LD_INT 1
21796: ST_TO_ADDR
// if p3 = 25 then
21797: LD_VAR 0 3
21801: PUSH
21802: LD_INT 25
21804: EQUAL
21805: IFFALSE 21815
// sSheik := true ;
21807: LD_ADDR_EXP 89
21811: PUSH
21812: LD_INT 1
21814: ST_TO_ADDR
// if p3 = 26 then
21815: LD_VAR 0 3
21819: PUSH
21820: LD_INT 26
21822: EQUAL
21823: IFFALSE 21833
// sEarthquake := true ;
21825: LD_ADDR_EXP 91
21829: PUSH
21830: LD_INT 1
21832: ST_TO_ADDR
// if p3 = 27 then
21833: LD_VAR 0 3
21837: PUSH
21838: LD_INT 27
21840: EQUAL
21841: IFFALSE 21851
// sAI := true ;
21843: LD_ADDR_EXP 92
21847: PUSH
21848: LD_INT 1
21850: ST_TO_ADDR
// if p3 = 28 then
21851: LD_VAR 0 3
21855: PUSH
21856: LD_INT 28
21858: EQUAL
21859: IFFALSE 21869
// sCargo := true ;
21861: LD_ADDR_EXP 95
21865: PUSH
21866: LD_INT 1
21868: ST_TO_ADDR
// if p3 = 29 then
21869: LD_VAR 0 3
21873: PUSH
21874: LD_INT 29
21876: EQUAL
21877: IFFALSE 21887
// sDLaser := true ;
21879: LD_ADDR_EXP 96
21883: PUSH
21884: LD_INT 1
21886: ST_TO_ADDR
// if p3 = 30 then
21887: LD_VAR 0 3
21891: PUSH
21892: LD_INT 30
21894: EQUAL
21895: IFFALSE 21905
// sExchange := true ;
21897: LD_ADDR_EXP 97
21901: PUSH
21902: LD_INT 1
21904: ST_TO_ADDR
// if p3 = 31 then
21905: LD_VAR 0 3
21909: PUSH
21910: LD_INT 31
21912: EQUAL
21913: IFFALSE 21923
// sFac := true ;
21915: LD_ADDR_EXP 98
21919: PUSH
21920: LD_INT 1
21922: ST_TO_ADDR
// if p3 = 32 then
21923: LD_VAR 0 3
21927: PUSH
21928: LD_INT 32
21930: EQUAL
21931: IFFALSE 21941
// sPower := true ;
21933: LD_ADDR_EXP 99
21937: PUSH
21938: LD_INT 1
21940: ST_TO_ADDR
// if p3 = 33 then
21941: LD_VAR 0 3
21945: PUSH
21946: LD_INT 33
21948: EQUAL
21949: IFFALSE 21959
// sRandom := true ;
21951: LD_ADDR_EXP 100
21955: PUSH
21956: LD_INT 1
21958: ST_TO_ADDR
// if p3 = 34 then
21959: LD_VAR 0 3
21963: PUSH
21964: LD_INT 34
21966: EQUAL
21967: IFFALSE 21977
// sShield := true ;
21969: LD_ADDR_EXP 101
21973: PUSH
21974: LD_INT 1
21976: ST_TO_ADDR
// if p3 = 35 then
21977: LD_VAR 0 3
21981: PUSH
21982: LD_INT 35
21984: EQUAL
21985: IFFALSE 21995
// sTime := true ;
21987: LD_ADDR_EXP 102
21991: PUSH
21992: LD_INT 1
21994: ST_TO_ADDR
// if p3 = 36 then
21995: LD_VAR 0 3
21999: PUSH
22000: LD_INT 36
22002: EQUAL
22003: IFFALSE 22013
// sTools := true ;
22005: LD_ADDR_EXP 103
22009: PUSH
22010: LD_INT 1
22012: ST_TO_ADDR
// if p3 = 101 then
22013: LD_VAR 0 3
22017: PUSH
22018: LD_INT 101
22020: EQUAL
22021: IFFALSE 22031
// sSold := true ;
22023: LD_ADDR_EXP 68
22027: PUSH
22028: LD_INT 1
22030: ST_TO_ADDR
// if p3 = 102 then
22031: LD_VAR 0 3
22035: PUSH
22036: LD_INT 102
22038: EQUAL
22039: IFFALSE 22049
// sDiff := true ;
22041: LD_ADDR_EXP 69
22045: PUSH
22046: LD_INT 1
22048: ST_TO_ADDR
// if p3 = 103 then
22049: LD_VAR 0 3
22053: PUSH
22054: LD_INT 103
22056: EQUAL
22057: IFFALSE 22067
// sFog := true ;
22059: LD_ADDR_EXP 72
22063: PUSH
22064: LD_INT 1
22066: ST_TO_ADDR
// if p3 = 104 then
22067: LD_VAR 0 3
22071: PUSH
22072: LD_INT 104
22074: EQUAL
22075: IFFALSE 22085
// sReset := true ;
22077: LD_ADDR_EXP 73
22081: PUSH
22082: LD_INT 1
22084: ST_TO_ADDR
// if p3 = 105 then
22085: LD_VAR 0 3
22089: PUSH
22090: LD_INT 105
22092: EQUAL
22093: IFFALSE 22103
// sSun := true ;
22095: LD_ADDR_EXP 74
22099: PUSH
22100: LD_INT 1
22102: ST_TO_ADDR
// if p3 = 106 then
22103: LD_VAR 0 3
22107: PUSH
22108: LD_INT 106
22110: EQUAL
22111: IFFALSE 22121
// sTiger := true ;
22113: LD_ADDR_EXP 70
22117: PUSH
22118: LD_INT 1
22120: ST_TO_ADDR
// if p3 = 107 then
22121: LD_VAR 0 3
22125: PUSH
22126: LD_INT 107
22128: EQUAL
22129: IFFALSE 22139
// sBomb := true ;
22131: LD_ADDR_EXP 71
22135: PUSH
22136: LD_INT 1
22138: ST_TO_ADDR
// if p3 = 108 then
22139: LD_VAR 0 3
22143: PUSH
22144: LD_INT 108
22146: EQUAL
22147: IFFALSE 22157
// sWound := true ;
22149: LD_ADDR_EXP 79
22153: PUSH
22154: LD_INT 1
22156: ST_TO_ADDR
// if p3 = 109 then
22157: LD_VAR 0 3
22161: PUSH
22162: LD_INT 109
22164: EQUAL
22165: IFFALSE 22175
// sBetray := true ;
22167: LD_ADDR_EXP 83
22171: PUSH
22172: LD_INT 1
22174: ST_TO_ADDR
// if p3 = 110 then
22175: LD_VAR 0 3
22179: PUSH
22180: LD_INT 110
22182: EQUAL
22183: IFFALSE 22193
// sContamin := true ;
22185: LD_ADDR_EXP 84
22189: PUSH
22190: LD_INT 1
22192: ST_TO_ADDR
// if p3 = 111 then
22193: LD_VAR 0 3
22197: PUSH
22198: LD_INT 111
22200: EQUAL
22201: IFFALSE 22211
// sOil := true ;
22203: LD_ADDR_EXP 86
22207: PUSH
22208: LD_INT 1
22210: ST_TO_ADDR
// if p3 = 112 then
22211: LD_VAR 0 3
22215: PUSH
22216: LD_INT 112
22218: EQUAL
22219: IFFALSE 22229
// sStu := true ;
22221: LD_ADDR_EXP 90
22225: PUSH
22226: LD_INT 1
22228: ST_TO_ADDR
// if p3 = 113 then
22229: LD_VAR 0 3
22233: PUSH
22234: LD_INT 113
22236: EQUAL
22237: IFFALSE 22247
// sBazooka := true ;
22239: LD_ADDR_EXP 93
22243: PUSH
22244: LD_INT 1
22246: ST_TO_ADDR
// if p3 = 114 then
22247: LD_VAR 0 3
22251: PUSH
22252: LD_INT 114
22254: EQUAL
22255: IFFALSE 22265
// sMortar := true ;
22257: LD_ADDR_EXP 94
22261: PUSH
22262: LD_INT 1
22264: ST_TO_ADDR
// if p3 = 115 then
22265: LD_VAR 0 3
22269: PUSH
22270: LD_INT 115
22272: EQUAL
22273: IFFALSE 22283
// sRanger := true ;
22275: LD_ADDR_EXP 104
22279: PUSH
22280: LD_INT 1
22282: ST_TO_ADDR
// if p3 = 116 then
22283: LD_VAR 0 3
22287: PUSH
22288: LD_INT 116
22290: EQUAL
22291: IFFALSE 22301
// sComputer := true ;
22293: LD_ADDR_EXP 105
22297: PUSH
22298: LD_INT 1
22300: ST_TO_ADDR
// if p3 = 117 then
22301: LD_VAR 0 3
22305: PUSH
22306: LD_INT 117
22308: EQUAL
22309: IFFALSE 22319
// s30 := true ;
22311: LD_ADDR_EXP 106
22315: PUSH
22316: LD_INT 1
22318: ST_TO_ADDR
// if p3 = 118 then
22319: LD_VAR 0 3
22323: PUSH
22324: LD_INT 118
22326: EQUAL
22327: IFFALSE 22337
// s60 := true ;
22329: LD_ADDR_EXP 107
22333: PUSH
22334: LD_INT 1
22336: ST_TO_ADDR
// end ; if p2 = hack_mode then
22337: LD_VAR 0 2
22341: PUSH
22342: LD_INT 101
22344: EQUAL
22345: IFFALSE 22473
// begin case p3 of 1 :
22347: LD_VAR 0 3
22351: PUSH
22352: LD_INT 1
22354: DOUBLE
22355: EQUAL
22356: IFTRUE 22360
22358: GO 22367
22360: POP
// hHackUnlimitedResources ; 2 :
22361: CALL 34612 0 0
22365: GO 22473
22367: LD_INT 2
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22382
22375: POP
// hHackSetLevel10 ; 3 :
22376: CALL 34745 0 0
22380: GO 22473
22382: LD_INT 3
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22397
22390: POP
// hHackSetLevel10YourUnits ; 4 :
22391: CALL 34830 0 0
22395: GO 22473
22397: LD_INT 4
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22412
22405: POP
// hHackInvincible ; 5 :
22406: CALL 35278 0 0
22410: GO 22473
22412: LD_INT 5
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22427
22420: POP
// hHackInvisible ; 6 :
22421: CALL 35389 0 0
22425: GO 22473
22427: LD_INT 6
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22442
22435: POP
// hHackChangeYourSide ; 7 :
22436: CALL 35446 0 0
22440: GO 22473
22442: LD_INT 7
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22450
22448: GO 22457
22450: POP
// hHackChangeUnitSide ; 8 :
22451: CALL 35488 0 0
22455: GO 22473
22457: LD_INT 8
22459: DOUBLE
22460: EQUAL
22461: IFTRUE 22465
22463: GO 22472
22465: POP
// hHackFog ; end ;
22466: CALL 35589 0 0
22470: GO 22473
22472: POP
// end ; if p2 = game_save_mode then
22473: LD_VAR 0 2
22477: PUSH
22478: LD_INT 102
22480: EQUAL
22481: IFFALSE 22536
// begin if p3 = 1 then
22483: LD_VAR 0 3
22487: PUSH
22488: LD_INT 1
22490: EQUAL
22491: IFFALSE 22503
// globalGameSaveCounter := p4 ;
22493: LD_ADDR_EXP 50
22497: PUSH
22498: LD_VAR 0 4
22502: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22503: LD_VAR 0 3
22507: PUSH
22508: LD_INT 2
22510: EQUAL
22511: PUSH
22512: LD_EXP 50
22516: AND
22517: IFFALSE 22536
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22519: LD_STRING setGameSaveCounter(
22521: PUSH
22522: LD_EXP 50
22526: STR
22527: PUSH
22528: LD_STRING )
22530: STR
22531: PPUSH
22532: CALL_OW 559
// end ; end ;
22536: LD_VAR 0 7
22540: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22541: LD_INT 0
22543: PPUSH
// streamModeActive := false ;
22544: LD_ADDR_EXP 51
22548: PUSH
22549: LD_INT 0
22551: ST_TO_ADDR
// normalCounter := 36 ;
22552: LD_ADDR_EXP 52
22556: PUSH
22557: LD_INT 36
22559: ST_TO_ADDR
// hardcoreCounter := 18 ;
22560: LD_ADDR_EXP 53
22564: PUSH
22565: LD_INT 18
22567: ST_TO_ADDR
// sRocket := false ;
22568: LD_ADDR_EXP 56
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// sSpeed := false ;
22576: LD_ADDR_EXP 55
22580: PUSH
22581: LD_INT 0
22583: ST_TO_ADDR
// sEngine := false ;
22584: LD_ADDR_EXP 57
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
// sSpec := false ;
22592: LD_ADDR_EXP 54
22596: PUSH
22597: LD_INT 0
22599: ST_TO_ADDR
// sLevel := false ;
22600: LD_ADDR_EXP 58
22604: PUSH
22605: LD_INT 0
22607: ST_TO_ADDR
// sArmoury := false ;
22608: LD_ADDR_EXP 59
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// sRadar := false ;
22616: LD_ADDR_EXP 60
22620: PUSH
22621: LD_INT 0
22623: ST_TO_ADDR
// sBunker := false ;
22624: LD_ADDR_EXP 61
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// sHack := false ;
22632: LD_ADDR_EXP 62
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// sFire := false ;
22640: LD_ADDR_EXP 63
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
// sRefresh := false ;
22648: LD_ADDR_EXP 64
22652: PUSH
22653: LD_INT 0
22655: ST_TO_ADDR
// sExp := false ;
22656: LD_ADDR_EXP 65
22660: PUSH
22661: LD_INT 0
22663: ST_TO_ADDR
// sDepot := false ;
22664: LD_ADDR_EXP 66
22668: PUSH
22669: LD_INT 0
22671: ST_TO_ADDR
// sFlag := false ;
22672: LD_ADDR_EXP 67
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// sKamikadze := false ;
22680: LD_ADDR_EXP 75
22684: PUSH
22685: LD_INT 0
22687: ST_TO_ADDR
// sTroll := false ;
22688: LD_ADDR_EXP 76
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// sSlow := false ;
22696: LD_ADDR_EXP 77
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
// sLack := false ;
22704: LD_ADDR_EXP 78
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// sTank := false ;
22712: LD_ADDR_EXP 80
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// sRemote := false ;
22720: LD_ADDR_EXP 81
22724: PUSH
22725: LD_INT 0
22727: ST_TO_ADDR
// sPowell := false ;
22728: LD_ADDR_EXP 82
22732: PUSH
22733: LD_INT 0
22735: ST_TO_ADDR
// sTeleport := false ;
22736: LD_ADDR_EXP 85
22740: PUSH
22741: LD_INT 0
22743: ST_TO_ADDR
// sOilTower := false ;
22744: LD_ADDR_EXP 87
22748: PUSH
22749: LD_INT 0
22751: ST_TO_ADDR
// sShovel := false ;
22752: LD_ADDR_EXP 88
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
// sSheik := false ;
22760: LD_ADDR_EXP 89
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// sEarthquake := false ;
22768: LD_ADDR_EXP 91
22772: PUSH
22773: LD_INT 0
22775: ST_TO_ADDR
// sAI := false ;
22776: LD_ADDR_EXP 92
22780: PUSH
22781: LD_INT 0
22783: ST_TO_ADDR
// sCargo := false ;
22784: LD_ADDR_EXP 95
22788: PUSH
22789: LD_INT 0
22791: ST_TO_ADDR
// sDLaser := false ;
22792: LD_ADDR_EXP 96
22796: PUSH
22797: LD_INT 0
22799: ST_TO_ADDR
// sExchange := false ;
22800: LD_ADDR_EXP 97
22804: PUSH
22805: LD_INT 0
22807: ST_TO_ADDR
// sFac := false ;
22808: LD_ADDR_EXP 98
22812: PUSH
22813: LD_INT 0
22815: ST_TO_ADDR
// sPower := false ;
22816: LD_ADDR_EXP 99
22820: PUSH
22821: LD_INT 0
22823: ST_TO_ADDR
// sRandom := false ;
22824: LD_ADDR_EXP 100
22828: PUSH
22829: LD_INT 0
22831: ST_TO_ADDR
// sShield := false ;
22832: LD_ADDR_EXP 101
22836: PUSH
22837: LD_INT 0
22839: ST_TO_ADDR
// sTime := false ;
22840: LD_ADDR_EXP 102
22844: PUSH
22845: LD_INT 0
22847: ST_TO_ADDR
// sTools := false ;
22848: LD_ADDR_EXP 103
22852: PUSH
22853: LD_INT 0
22855: ST_TO_ADDR
// sSold := false ;
22856: LD_ADDR_EXP 68
22860: PUSH
22861: LD_INT 0
22863: ST_TO_ADDR
// sDiff := false ;
22864: LD_ADDR_EXP 69
22868: PUSH
22869: LD_INT 0
22871: ST_TO_ADDR
// sFog := false ;
22872: LD_ADDR_EXP 72
22876: PUSH
22877: LD_INT 0
22879: ST_TO_ADDR
// sReset := false ;
22880: LD_ADDR_EXP 73
22884: PUSH
22885: LD_INT 0
22887: ST_TO_ADDR
// sSun := false ;
22888: LD_ADDR_EXP 74
22892: PUSH
22893: LD_INT 0
22895: ST_TO_ADDR
// sTiger := false ;
22896: LD_ADDR_EXP 70
22900: PUSH
22901: LD_INT 0
22903: ST_TO_ADDR
// sBomb := false ;
22904: LD_ADDR_EXP 71
22908: PUSH
22909: LD_INT 0
22911: ST_TO_ADDR
// sWound := false ;
22912: LD_ADDR_EXP 79
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
// sBetray := false ;
22920: LD_ADDR_EXP 83
22924: PUSH
22925: LD_INT 0
22927: ST_TO_ADDR
// sContamin := false ;
22928: LD_ADDR_EXP 84
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
// sOil := false ;
22936: LD_ADDR_EXP 86
22940: PUSH
22941: LD_INT 0
22943: ST_TO_ADDR
// sStu := false ;
22944: LD_ADDR_EXP 90
22948: PUSH
22949: LD_INT 0
22951: ST_TO_ADDR
// sBazooka := false ;
22952: LD_ADDR_EXP 93
22956: PUSH
22957: LD_INT 0
22959: ST_TO_ADDR
// sMortar := false ;
22960: LD_ADDR_EXP 94
22964: PUSH
22965: LD_INT 0
22967: ST_TO_ADDR
// sRanger := false ;
22968: LD_ADDR_EXP 104
22972: PUSH
22973: LD_INT 0
22975: ST_TO_ADDR
// sComputer := false ;
22976: LD_ADDR_EXP 105
22980: PUSH
22981: LD_INT 0
22983: ST_TO_ADDR
// s30 := false ;
22984: LD_ADDR_EXP 106
22988: PUSH
22989: LD_INT 0
22991: ST_TO_ADDR
// s60 := false ;
22992: LD_ADDR_EXP 107
22996: PUSH
22997: LD_INT 0
22999: ST_TO_ADDR
// end ;
23000: LD_VAR 0 1
23004: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
// result := [ ] ;
23014: LD_ADDR_VAR 0 2
23018: PUSH
23019: EMPTY
23020: ST_TO_ADDR
// if campaign_id = 1 then
23021: LD_OWVAR 69
23025: PUSH
23026: LD_INT 1
23028: EQUAL
23029: IFFALSE 26195
// begin case mission_number of 1 :
23031: LD_OWVAR 70
23035: PUSH
23036: LD_INT 1
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23120
23044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 4
23055: PUSH
23056: LD_INT 11
23058: PUSH
23059: LD_INT 12
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 22
23070: PUSH
23071: LD_INT 23
23073: PUSH
23074: LD_INT 26
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 101
23090: PUSH
23091: LD_INT 102
23093: PUSH
23094: LD_INT 106
23096: PUSH
23097: LD_INT 116
23099: PUSH
23100: LD_INT 117
23102: PUSH
23103: LD_INT 118
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: ST_TO_ADDR
23118: GO 26193
23120: LD_INT 2
23122: DOUBLE
23123: EQUAL
23124: IFTRUE 23128
23126: GO 23212
23128: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23129: LD_ADDR_VAR 0 2
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 4
23139: PUSH
23140: LD_INT 11
23142: PUSH
23143: LD_INT 12
23145: PUSH
23146: LD_INT 15
23148: PUSH
23149: LD_INT 16
23151: PUSH
23152: LD_INT 22
23154: PUSH
23155: LD_INT 23
23157: PUSH
23158: LD_INT 26
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 101
23174: PUSH
23175: LD_INT 102
23177: PUSH
23178: LD_INT 105
23180: PUSH
23181: LD_INT 106
23183: PUSH
23184: LD_INT 108
23186: PUSH
23187: LD_INT 116
23189: PUSH
23190: LD_INT 117
23192: PUSH
23193: LD_INT 118
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: ST_TO_ADDR
23210: GO 26193
23212: LD_INT 3
23214: DOUBLE
23215: EQUAL
23216: IFTRUE 23220
23218: GO 23308
23220: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 4
23231: PUSH
23232: LD_INT 5
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 15
23243: PUSH
23244: LD_INT 16
23246: PUSH
23247: LD_INT 22
23249: PUSH
23250: LD_INT 26
23252: PUSH
23253: LD_INT 36
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 101
23270: PUSH
23271: LD_INT 102
23273: PUSH
23274: LD_INT 105
23276: PUSH
23277: LD_INT 106
23279: PUSH
23280: LD_INT 108
23282: PUSH
23283: LD_INT 116
23285: PUSH
23286: LD_INT 117
23288: PUSH
23289: LD_INT 118
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: ST_TO_ADDR
23306: GO 26193
23308: LD_INT 4
23310: DOUBLE
23311: EQUAL
23312: IFTRUE 23316
23314: GO 23412
23316: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 4
23327: PUSH
23328: LD_INT 5
23330: PUSH
23331: LD_INT 8
23333: PUSH
23334: LD_INT 11
23336: PUSH
23337: LD_INT 12
23339: PUSH
23340: LD_INT 15
23342: PUSH
23343: LD_INT 16
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_INT 23
23351: PUSH
23352: LD_INT 26
23354: PUSH
23355: LD_INT 36
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 101
23374: PUSH
23375: LD_INT 102
23377: PUSH
23378: LD_INT 105
23380: PUSH
23381: LD_INT 106
23383: PUSH
23384: LD_INT 108
23386: PUSH
23387: LD_INT 116
23389: PUSH
23390: LD_INT 117
23392: PUSH
23393: LD_INT 118
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: ST_TO_ADDR
23410: GO 26193
23412: LD_INT 5
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23532
23420: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 4
23431: PUSH
23432: LD_INT 5
23434: PUSH
23435: LD_INT 6
23437: PUSH
23438: LD_INT 8
23440: PUSH
23441: LD_INT 11
23443: PUSH
23444: LD_INT 12
23446: PUSH
23447: LD_INT 15
23449: PUSH
23450: LD_INT 16
23452: PUSH
23453: LD_INT 22
23455: PUSH
23456: LD_INT 23
23458: PUSH
23459: LD_INT 25
23461: PUSH
23462: LD_INT 26
23464: PUSH
23465: LD_INT 36
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 101
23486: PUSH
23487: LD_INT 102
23489: PUSH
23490: LD_INT 105
23492: PUSH
23493: LD_INT 106
23495: PUSH
23496: LD_INT 108
23498: PUSH
23499: LD_INT 109
23501: PUSH
23502: LD_INT 112
23504: PUSH
23505: LD_INT 116
23507: PUSH
23508: LD_INT 117
23510: PUSH
23511: LD_INT 118
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: ST_TO_ADDR
23530: GO 26193
23532: LD_INT 6
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23672
23540: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23541: LD_ADDR_VAR 0 2
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 4
23551: PUSH
23552: LD_INT 5
23554: PUSH
23555: LD_INT 6
23557: PUSH
23558: LD_INT 8
23560: PUSH
23561: LD_INT 11
23563: PUSH
23564: LD_INT 12
23566: PUSH
23567: LD_INT 15
23569: PUSH
23570: LD_INT 16
23572: PUSH
23573: LD_INT 20
23575: PUSH
23576: LD_INT 21
23578: PUSH
23579: LD_INT 22
23581: PUSH
23582: LD_INT 23
23584: PUSH
23585: LD_INT 25
23587: PUSH
23588: LD_INT 26
23590: PUSH
23591: LD_INT 30
23593: PUSH
23594: LD_INT 31
23596: PUSH
23597: LD_INT 32
23599: PUSH
23600: LD_INT 36
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 101
23626: PUSH
23627: LD_INT 102
23629: PUSH
23630: LD_INT 105
23632: PUSH
23633: LD_INT 106
23635: PUSH
23636: LD_INT 108
23638: PUSH
23639: LD_INT 109
23641: PUSH
23642: LD_INT 112
23644: PUSH
23645: LD_INT 116
23647: PUSH
23648: LD_INT 117
23650: PUSH
23651: LD_INT 118
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: ST_TO_ADDR
23670: GO 26193
23672: LD_INT 7
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23792
23680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: LD_INT 4
23691: PUSH
23692: LD_INT 5
23694: PUSH
23695: LD_INT 7
23697: PUSH
23698: LD_INT 11
23700: PUSH
23701: LD_INT 12
23703: PUSH
23704: LD_INT 15
23706: PUSH
23707: LD_INT 16
23709: PUSH
23710: LD_INT 20
23712: PUSH
23713: LD_INT 21
23715: PUSH
23716: LD_INT 22
23718: PUSH
23719: LD_INT 23
23721: PUSH
23722: LD_INT 25
23724: PUSH
23725: LD_INT 26
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 101
23746: PUSH
23747: LD_INT 102
23749: PUSH
23750: LD_INT 103
23752: PUSH
23753: LD_INT 105
23755: PUSH
23756: LD_INT 106
23758: PUSH
23759: LD_INT 108
23761: PUSH
23762: LD_INT 112
23764: PUSH
23765: LD_INT 116
23767: PUSH
23768: LD_INT 117
23770: PUSH
23771: LD_INT 118
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: ST_TO_ADDR
23790: GO 26193
23792: LD_INT 8
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23940
23800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 4
23811: PUSH
23812: LD_INT 5
23814: PUSH
23815: LD_INT 6
23817: PUSH
23818: LD_INT 7
23820: PUSH
23821: LD_INT 8
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 12
23829: PUSH
23830: LD_INT 15
23832: PUSH
23833: LD_INT 16
23835: PUSH
23836: LD_INT 20
23838: PUSH
23839: LD_INT 21
23841: PUSH
23842: LD_INT 22
23844: PUSH
23845: LD_INT 23
23847: PUSH
23848: LD_INT 25
23850: PUSH
23851: LD_INT 26
23853: PUSH
23854: LD_INT 30
23856: PUSH
23857: LD_INT 31
23859: PUSH
23860: LD_INT 32
23862: PUSH
23863: LD_INT 36
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 101
23890: PUSH
23891: LD_INT 102
23893: PUSH
23894: LD_INT 103
23896: PUSH
23897: LD_INT 105
23899: PUSH
23900: LD_INT 106
23902: PUSH
23903: LD_INT 108
23905: PUSH
23906: LD_INT 109
23908: PUSH
23909: LD_INT 112
23911: PUSH
23912: LD_INT 116
23914: PUSH
23915: LD_INT 117
23917: PUSH
23918: LD_INT 118
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: ST_TO_ADDR
23938: GO 26193
23940: LD_INT 9
23942: DOUBLE
23943: EQUAL
23944: IFTRUE 23948
23946: GO 24096
23948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23949: LD_ADDR_VAR 0 2
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 4
23959: PUSH
23960: LD_INT 5
23962: PUSH
23963: LD_INT 6
23965: PUSH
23966: LD_INT 7
23968: PUSH
23969: LD_INT 8
23971: PUSH
23972: LD_INT 11
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: LD_INT 15
23980: PUSH
23981: LD_INT 16
23983: PUSH
23984: LD_INT 20
23986: PUSH
23987: LD_INT 21
23989: PUSH
23990: LD_INT 22
23992: PUSH
23993: LD_INT 23
23995: PUSH
23996: LD_INT 25
23998: PUSH
23999: LD_INT 26
24001: PUSH
24002: LD_INT 28
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 31
24010: PUSH
24011: LD_INT 32
24013: PUSH
24014: LD_INT 36
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 101
24042: PUSH
24043: LD_INT 102
24045: PUSH
24046: LD_INT 103
24048: PUSH
24049: LD_INT 105
24051: PUSH
24052: LD_INT 106
24054: PUSH
24055: LD_INT 108
24057: PUSH
24058: LD_INT 109
24060: PUSH
24061: LD_INT 112
24063: PUSH
24064: LD_INT 114
24066: PUSH
24067: LD_INT 116
24069: PUSH
24070: LD_INT 117
24072: PUSH
24073: LD_INT 118
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: ST_TO_ADDR
24094: GO 26193
24096: LD_INT 10
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24300
24104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24105: LD_ADDR_VAR 0 2
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 4
24115: PUSH
24116: LD_INT 5
24118: PUSH
24119: LD_INT 6
24121: PUSH
24122: LD_INT 7
24124: PUSH
24125: LD_INT 8
24127: PUSH
24128: LD_INT 9
24130: PUSH
24131: LD_INT 10
24133: PUSH
24134: LD_INT 11
24136: PUSH
24137: LD_INT 12
24139: PUSH
24140: LD_INT 13
24142: PUSH
24143: LD_INT 14
24145: PUSH
24146: LD_INT 15
24148: PUSH
24149: LD_INT 16
24151: PUSH
24152: LD_INT 17
24154: PUSH
24155: LD_INT 18
24157: PUSH
24158: LD_INT 19
24160: PUSH
24161: LD_INT 20
24163: PUSH
24164: LD_INT 21
24166: PUSH
24167: LD_INT 22
24169: PUSH
24170: LD_INT 23
24172: PUSH
24173: LD_INT 24
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 26
24181: PUSH
24182: LD_INT 28
24184: PUSH
24185: LD_INT 30
24187: PUSH
24188: LD_INT 31
24190: PUSH
24191: LD_INT 32
24193: PUSH
24194: LD_INT 36
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 114
24266: PUSH
24267: LD_INT 116
24269: PUSH
24270: LD_INT 117
24272: PUSH
24273: LD_INT 118
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: ST_TO_ADDR
24298: GO 26193
24300: LD_INT 11
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24512
24308: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24309: LD_ADDR_VAR 0 2
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 3
24319: PUSH
24320: LD_INT 4
24322: PUSH
24323: LD_INT 5
24325: PUSH
24326: LD_INT 6
24328: PUSH
24329: LD_INT 7
24331: PUSH
24332: LD_INT 8
24334: PUSH
24335: LD_INT 9
24337: PUSH
24338: LD_INT 10
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: LD_INT 13
24349: PUSH
24350: LD_INT 14
24352: PUSH
24353: LD_INT 15
24355: PUSH
24356: LD_INT 16
24358: PUSH
24359: LD_INT 17
24361: PUSH
24362: LD_INT 18
24364: PUSH
24365: LD_INT 19
24367: PUSH
24368: LD_INT 20
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_INT 23
24379: PUSH
24380: LD_INT 24
24382: PUSH
24383: LD_INT 25
24385: PUSH
24386: LD_INT 26
24388: PUSH
24389: LD_INT 28
24391: PUSH
24392: LD_INT 30
24394: PUSH
24395: LD_INT 31
24397: PUSH
24398: LD_INT 32
24400: PUSH
24401: LD_INT 34
24403: PUSH
24404: LD_INT 36
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 101
24442: PUSH
24443: LD_INT 102
24445: PUSH
24446: LD_INT 103
24448: PUSH
24449: LD_INT 104
24451: PUSH
24452: LD_INT 105
24454: PUSH
24455: LD_INT 106
24457: PUSH
24458: LD_INT 107
24460: PUSH
24461: LD_INT 108
24463: PUSH
24464: LD_INT 109
24466: PUSH
24467: LD_INT 110
24469: PUSH
24470: LD_INT 111
24472: PUSH
24473: LD_INT 112
24475: PUSH
24476: LD_INT 114
24478: PUSH
24479: LD_INT 116
24481: PUSH
24482: LD_INT 117
24484: PUSH
24485: LD_INT 118
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: ST_TO_ADDR
24510: GO 26193
24512: LD_INT 12
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24740
24520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24521: LD_ADDR_VAR 0 2
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: LD_INT 4
24537: PUSH
24538: LD_INT 5
24540: PUSH
24541: LD_INT 6
24543: PUSH
24544: LD_INT 7
24546: PUSH
24547: LD_INT 8
24549: PUSH
24550: LD_INT 9
24552: PUSH
24553: LD_INT 10
24555: PUSH
24556: LD_INT 11
24558: PUSH
24559: LD_INT 12
24561: PUSH
24562: LD_INT 13
24564: PUSH
24565: LD_INT 14
24567: PUSH
24568: LD_INT 15
24570: PUSH
24571: LD_INT 16
24573: PUSH
24574: LD_INT 17
24576: PUSH
24577: LD_INT 18
24579: PUSH
24580: LD_INT 19
24582: PUSH
24583: LD_INT 20
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 24
24597: PUSH
24598: LD_INT 25
24600: PUSH
24601: LD_INT 26
24603: PUSH
24604: LD_INT 27
24606: PUSH
24607: LD_INT 28
24609: PUSH
24610: LD_INT 30
24612: PUSH
24613: LD_INT 31
24615: PUSH
24616: LD_INT 32
24618: PUSH
24619: LD_INT 33
24621: PUSH
24622: LD_INT 34
24624: PUSH
24625: LD_INT 36
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 101
24666: PUSH
24667: LD_INT 102
24669: PUSH
24670: LD_INT 103
24672: PUSH
24673: LD_INT 104
24675: PUSH
24676: LD_INT 105
24678: PUSH
24679: LD_INT 106
24681: PUSH
24682: LD_INT 107
24684: PUSH
24685: LD_INT 108
24687: PUSH
24688: LD_INT 109
24690: PUSH
24691: LD_INT 110
24693: PUSH
24694: LD_INT 111
24696: PUSH
24697: LD_INT 112
24699: PUSH
24700: LD_INT 113
24702: PUSH
24703: LD_INT 114
24705: PUSH
24706: LD_INT 116
24708: PUSH
24709: LD_INT 117
24711: PUSH
24712: LD_INT 118
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: ST_TO_ADDR
24738: GO 26193
24740: LD_INT 13
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24956
24748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: LD_INT 8
24771: PUSH
24772: LD_INT 9
24774: PUSH
24775: LD_INT 10
24777: PUSH
24778: LD_INT 11
24780: PUSH
24781: LD_INT 12
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: LD_INT 15
24789: PUSH
24790: LD_INT 16
24792: PUSH
24793: LD_INT 17
24795: PUSH
24796: LD_INT 18
24798: PUSH
24799: LD_INT 19
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 23
24813: PUSH
24814: LD_INT 24
24816: PUSH
24817: LD_INT 25
24819: PUSH
24820: LD_INT 26
24822: PUSH
24823: LD_INT 27
24825: PUSH
24826: LD_INT 28
24828: PUSH
24829: LD_INT 30
24831: PUSH
24832: LD_INT 31
24834: PUSH
24835: LD_INT 32
24837: PUSH
24838: LD_INT 33
24840: PUSH
24841: LD_INT 34
24843: PUSH
24844: LD_INT 36
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 101
24882: PUSH
24883: LD_INT 102
24885: PUSH
24886: LD_INT 103
24888: PUSH
24889: LD_INT 104
24891: PUSH
24892: LD_INT 105
24894: PUSH
24895: LD_INT 106
24897: PUSH
24898: LD_INT 107
24900: PUSH
24901: LD_INT 108
24903: PUSH
24904: LD_INT 109
24906: PUSH
24907: LD_INT 110
24909: PUSH
24910: LD_INT 111
24912: PUSH
24913: LD_INT 112
24915: PUSH
24916: LD_INT 113
24918: PUSH
24919: LD_INT 114
24921: PUSH
24922: LD_INT 116
24924: PUSH
24925: LD_INT 117
24927: PUSH
24928: LD_INT 118
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 26193
24956: LD_INT 14
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 25188
24964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: LD_INT 4
24981: PUSH
24982: LD_INT 5
24984: PUSH
24985: LD_INT 6
24987: PUSH
24988: LD_INT 7
24990: PUSH
24991: LD_INT 8
24993: PUSH
24994: LD_INT 9
24996: PUSH
24997: LD_INT 10
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 12
25005: PUSH
25006: LD_INT 13
25008: PUSH
25009: LD_INT 14
25011: PUSH
25012: LD_INT 15
25014: PUSH
25015: LD_INT 16
25017: PUSH
25018: LD_INT 17
25020: PUSH
25021: LD_INT 18
25023: PUSH
25024: LD_INT 19
25026: PUSH
25027: LD_INT 20
25029: PUSH
25030: LD_INT 21
25032: PUSH
25033: LD_INT 22
25035: PUSH
25036: LD_INT 23
25038: PUSH
25039: LD_INT 24
25041: PUSH
25042: LD_INT 25
25044: PUSH
25045: LD_INT 26
25047: PUSH
25048: LD_INT 27
25050: PUSH
25051: LD_INT 28
25053: PUSH
25054: LD_INT 29
25056: PUSH
25057: LD_INT 30
25059: PUSH
25060: LD_INT 31
25062: PUSH
25063: LD_INT 32
25065: PUSH
25066: LD_INT 33
25068: PUSH
25069: LD_INT 34
25071: PUSH
25072: LD_INT 36
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 101
25114: PUSH
25115: LD_INT 102
25117: PUSH
25118: LD_INT 103
25120: PUSH
25121: LD_INT 104
25123: PUSH
25124: LD_INT 105
25126: PUSH
25127: LD_INT 106
25129: PUSH
25130: LD_INT 107
25132: PUSH
25133: LD_INT 108
25135: PUSH
25136: LD_INT 109
25138: PUSH
25139: LD_INT 110
25141: PUSH
25142: LD_INT 111
25144: PUSH
25145: LD_INT 112
25147: PUSH
25148: LD_INT 113
25150: PUSH
25151: LD_INT 114
25153: PUSH
25154: LD_INT 116
25156: PUSH
25157: LD_INT 117
25159: PUSH
25160: LD_INT 118
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: ST_TO_ADDR
25186: GO 26193
25188: LD_INT 15
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25420
25196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25197: LD_ADDR_VAR 0 2
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 4
25213: PUSH
25214: LD_INT 5
25216: PUSH
25217: LD_INT 6
25219: PUSH
25220: LD_INT 7
25222: PUSH
25223: LD_INT 8
25225: PUSH
25226: LD_INT 9
25228: PUSH
25229: LD_INT 10
25231: PUSH
25232: LD_INT 11
25234: PUSH
25235: LD_INT 12
25237: PUSH
25238: LD_INT 13
25240: PUSH
25241: LD_INT 14
25243: PUSH
25244: LD_INT 15
25246: PUSH
25247: LD_INT 16
25249: PUSH
25250: LD_INT 17
25252: PUSH
25253: LD_INT 18
25255: PUSH
25256: LD_INT 19
25258: PUSH
25259: LD_INT 20
25261: PUSH
25262: LD_INT 21
25264: PUSH
25265: LD_INT 22
25267: PUSH
25268: LD_INT 23
25270: PUSH
25271: LD_INT 24
25273: PUSH
25274: LD_INT 25
25276: PUSH
25277: LD_INT 26
25279: PUSH
25280: LD_INT 27
25282: PUSH
25283: LD_INT 28
25285: PUSH
25286: LD_INT 29
25288: PUSH
25289: LD_INT 30
25291: PUSH
25292: LD_INT 31
25294: PUSH
25295: LD_INT 32
25297: PUSH
25298: LD_INT 33
25300: PUSH
25301: LD_INT 34
25303: PUSH
25304: LD_INT 36
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 101
25346: PUSH
25347: LD_INT 102
25349: PUSH
25350: LD_INT 103
25352: PUSH
25353: LD_INT 104
25355: PUSH
25356: LD_INT 105
25358: PUSH
25359: LD_INT 106
25361: PUSH
25362: LD_INT 107
25364: PUSH
25365: LD_INT 108
25367: PUSH
25368: LD_INT 109
25370: PUSH
25371: LD_INT 110
25373: PUSH
25374: LD_INT 111
25376: PUSH
25377: LD_INT 112
25379: PUSH
25380: LD_INT 113
25382: PUSH
25383: LD_INT 114
25385: PUSH
25386: LD_INT 116
25388: PUSH
25389: LD_INT 117
25391: PUSH
25392: LD_INT 118
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: ST_TO_ADDR
25418: GO 26193
25420: LD_INT 16
25422: DOUBLE
25423: EQUAL
25424: IFTRUE 25428
25426: GO 25564
25428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: LD_INT 5
25442: PUSH
25443: LD_INT 7
25445: PUSH
25446: LD_INT 11
25448: PUSH
25449: LD_INT 12
25451: PUSH
25452: LD_INT 15
25454: PUSH
25455: LD_INT 16
25457: PUSH
25458: LD_INT 20
25460: PUSH
25461: LD_INT 21
25463: PUSH
25464: LD_INT 22
25466: PUSH
25467: LD_INT 23
25469: PUSH
25470: LD_INT 25
25472: PUSH
25473: LD_INT 26
25475: PUSH
25476: LD_INT 30
25478: PUSH
25479: LD_INT 31
25481: PUSH
25482: LD_INT 32
25484: PUSH
25485: LD_INT 33
25487: PUSH
25488: LD_INT 34
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 101
25514: PUSH
25515: LD_INT 102
25517: PUSH
25518: LD_INT 103
25520: PUSH
25521: LD_INT 106
25523: PUSH
25524: LD_INT 108
25526: PUSH
25527: LD_INT 112
25529: PUSH
25530: LD_INT 113
25532: PUSH
25533: LD_INT 114
25535: PUSH
25536: LD_INT 116
25538: PUSH
25539: LD_INT 117
25541: PUSH
25542: LD_INT 118
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: ST_TO_ADDR
25562: GO 26193
25564: LD_INT 17
25566: DOUBLE
25567: EQUAL
25568: IFTRUE 25572
25570: GO 25796
25572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25573: LD_ADDR_VAR 0 2
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 4
25589: PUSH
25590: LD_INT 5
25592: PUSH
25593: LD_INT 6
25595: PUSH
25596: LD_INT 7
25598: PUSH
25599: LD_INT 8
25601: PUSH
25602: LD_INT 9
25604: PUSH
25605: LD_INT 10
25607: PUSH
25608: LD_INT 11
25610: PUSH
25611: LD_INT 12
25613: PUSH
25614: LD_INT 13
25616: PUSH
25617: LD_INT 14
25619: PUSH
25620: LD_INT 15
25622: PUSH
25623: LD_INT 16
25625: PUSH
25626: LD_INT 17
25628: PUSH
25629: LD_INT 18
25631: PUSH
25632: LD_INT 19
25634: PUSH
25635: LD_INT 20
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_INT 23
25646: PUSH
25647: LD_INT 24
25649: PUSH
25650: LD_INT 25
25652: PUSH
25653: LD_INT 26
25655: PUSH
25656: LD_INT 27
25658: PUSH
25659: LD_INT 28
25661: PUSH
25662: LD_INT 29
25664: PUSH
25665: LD_INT 30
25667: PUSH
25668: LD_INT 31
25670: PUSH
25671: LD_INT 32
25673: PUSH
25674: LD_INT 33
25676: PUSH
25677: LD_INT 34
25679: PUSH
25680: LD_INT 36
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 101
25722: PUSH
25723: LD_INT 102
25725: PUSH
25726: LD_INT 103
25728: PUSH
25729: LD_INT 104
25731: PUSH
25732: LD_INT 105
25734: PUSH
25735: LD_INT 106
25737: PUSH
25738: LD_INT 107
25740: PUSH
25741: LD_INT 108
25743: PUSH
25744: LD_INT 109
25746: PUSH
25747: LD_INT 110
25749: PUSH
25750: LD_INT 111
25752: PUSH
25753: LD_INT 112
25755: PUSH
25756: LD_INT 113
25758: PUSH
25759: LD_INT 114
25761: PUSH
25762: LD_INT 116
25764: PUSH
25765: LD_INT 117
25767: PUSH
25768: LD_INT 118
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: ST_TO_ADDR
25794: GO 26193
25796: LD_INT 18
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25952
25804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25805: LD_ADDR_VAR 0 2
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 4
25815: PUSH
25816: LD_INT 5
25818: PUSH
25819: LD_INT 7
25821: PUSH
25822: LD_INT 11
25824: PUSH
25825: LD_INT 12
25827: PUSH
25828: LD_INT 15
25830: PUSH
25831: LD_INT 16
25833: PUSH
25834: LD_INT 20
25836: PUSH
25837: LD_INT 21
25839: PUSH
25840: LD_INT 22
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 25
25848: PUSH
25849: LD_INT 26
25851: PUSH
25852: LD_INT 30
25854: PUSH
25855: LD_INT 31
25857: PUSH
25858: LD_INT 32
25860: PUSH
25861: LD_INT 33
25863: PUSH
25864: LD_INT 34
25866: PUSH
25867: LD_INT 35
25869: PUSH
25870: LD_INT 36
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 101
25898: PUSH
25899: LD_INT 102
25901: PUSH
25902: LD_INT 103
25904: PUSH
25905: LD_INT 106
25907: PUSH
25908: LD_INT 108
25910: PUSH
25911: LD_INT 112
25913: PUSH
25914: LD_INT 113
25916: PUSH
25917: LD_INT 114
25919: PUSH
25920: LD_INT 115
25922: PUSH
25923: LD_INT 116
25925: PUSH
25926: LD_INT 117
25928: PUSH
25929: LD_INT 118
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: ST_TO_ADDR
25950: GO 26193
25952: LD_INT 19
25954: DOUBLE
25955: EQUAL
25956: IFTRUE 25960
25958: GO 26192
25960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25961: LD_ADDR_VAR 0 2
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 3
25974: PUSH
25975: LD_INT 4
25977: PUSH
25978: LD_INT 5
25980: PUSH
25981: LD_INT 6
25983: PUSH
25984: LD_INT 7
25986: PUSH
25987: LD_INT 8
25989: PUSH
25990: LD_INT 9
25992: PUSH
25993: LD_INT 10
25995: PUSH
25996: LD_INT 11
25998: PUSH
25999: LD_INT 12
26001: PUSH
26002: LD_INT 13
26004: PUSH
26005: LD_INT 14
26007: PUSH
26008: LD_INT 15
26010: PUSH
26011: LD_INT 16
26013: PUSH
26014: LD_INT 17
26016: PUSH
26017: LD_INT 18
26019: PUSH
26020: LD_INT 19
26022: PUSH
26023: LD_INT 20
26025: PUSH
26026: LD_INT 21
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_INT 23
26034: PUSH
26035: LD_INT 24
26037: PUSH
26038: LD_INT 25
26040: PUSH
26041: LD_INT 26
26043: PUSH
26044: LD_INT 27
26046: PUSH
26047: LD_INT 28
26049: PUSH
26050: LD_INT 29
26052: PUSH
26053: LD_INT 30
26055: PUSH
26056: LD_INT 31
26058: PUSH
26059: LD_INT 32
26061: PUSH
26062: LD_INT 33
26064: PUSH
26065: LD_INT 34
26067: PUSH
26068: LD_INT 35
26070: PUSH
26071: LD_INT 36
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 101
26114: PUSH
26115: LD_INT 102
26117: PUSH
26118: LD_INT 103
26120: PUSH
26121: LD_INT 104
26123: PUSH
26124: LD_INT 105
26126: PUSH
26127: LD_INT 106
26129: PUSH
26130: LD_INT 107
26132: PUSH
26133: LD_INT 108
26135: PUSH
26136: LD_INT 109
26138: PUSH
26139: LD_INT 110
26141: PUSH
26142: LD_INT 111
26144: PUSH
26145: LD_INT 112
26147: PUSH
26148: LD_INT 113
26150: PUSH
26151: LD_INT 114
26153: PUSH
26154: LD_INT 115
26156: PUSH
26157: LD_INT 116
26159: PUSH
26160: LD_INT 117
26162: PUSH
26163: LD_INT 118
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: ST_TO_ADDR
26190: GO 26193
26192: POP
// end else
26193: GO 26424
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: LD_INT 4
26211: PUSH
26212: LD_INT 5
26214: PUSH
26215: LD_INT 6
26217: PUSH
26218: LD_INT 7
26220: PUSH
26221: LD_INT 8
26223: PUSH
26224: LD_INT 9
26226: PUSH
26227: LD_INT 10
26229: PUSH
26230: LD_INT 11
26232: PUSH
26233: LD_INT 12
26235: PUSH
26236: LD_INT 13
26238: PUSH
26239: LD_INT 14
26241: PUSH
26242: LD_INT 15
26244: PUSH
26245: LD_INT 16
26247: PUSH
26248: LD_INT 17
26250: PUSH
26251: LD_INT 18
26253: PUSH
26254: LD_INT 19
26256: PUSH
26257: LD_INT 20
26259: PUSH
26260: LD_INT 21
26262: PUSH
26263: LD_INT 22
26265: PUSH
26266: LD_INT 23
26268: PUSH
26269: LD_INT 24
26271: PUSH
26272: LD_INT 25
26274: PUSH
26275: LD_INT 26
26277: PUSH
26278: LD_INT 27
26280: PUSH
26281: LD_INT 28
26283: PUSH
26284: LD_INT 29
26286: PUSH
26287: LD_INT 30
26289: PUSH
26290: LD_INT 31
26292: PUSH
26293: LD_INT 32
26295: PUSH
26296: LD_INT 33
26298: PUSH
26299: LD_INT 34
26301: PUSH
26302: LD_INT 35
26304: PUSH
26305: LD_INT 36
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 101
26348: PUSH
26349: LD_INT 102
26351: PUSH
26352: LD_INT 103
26354: PUSH
26355: LD_INT 104
26357: PUSH
26358: LD_INT 105
26360: PUSH
26361: LD_INT 106
26363: PUSH
26364: LD_INT 107
26366: PUSH
26367: LD_INT 108
26369: PUSH
26370: LD_INT 109
26372: PUSH
26373: LD_INT 110
26375: PUSH
26376: LD_INT 111
26378: PUSH
26379: LD_INT 112
26381: PUSH
26382: LD_INT 113
26384: PUSH
26385: LD_INT 114
26387: PUSH
26388: LD_INT 115
26390: PUSH
26391: LD_INT 116
26393: PUSH
26394: LD_INT 117
26396: PUSH
26397: LD_INT 118
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if result then
26424: LD_VAR 0 2
26428: IFFALSE 27214
// begin normal :=  ;
26430: LD_ADDR_VAR 0 5
26434: PUSH
26435: LD_STRING 
26437: ST_TO_ADDR
// hardcore :=  ;
26438: LD_ADDR_VAR 0 6
26442: PUSH
26443: LD_STRING 
26445: ST_TO_ADDR
// active :=  ;
26446: LD_ADDR_VAR 0 7
26450: PUSH
26451: LD_STRING 
26453: ST_TO_ADDR
// for i = 1 to normalCounter do
26454: LD_ADDR_VAR 0 8
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_EXP 52
26468: PUSH
26469: FOR_TO
26470: IFFALSE 26571
// begin tmp := 0 ;
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_STRING 0
26479: ST_TO_ADDR
// if result [ 1 ] then
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: IFFALSE 26553
// if result [ 1 ] [ 1 ] = i then
26490: LD_VAR 0 2
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: PUSH
26499: LD_INT 1
26501: ARRAY
26502: PUSH
26503: LD_VAR 0 8
26507: EQUAL
26508: IFFALSE 26553
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26510: LD_ADDR_VAR 0 2
26514: PUSH
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_INT 1
26522: PPUSH
26523: LD_VAR 0 2
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: PPUSH
26532: LD_INT 1
26534: PPUSH
26535: CALL_OW 3
26539: PPUSH
26540: CALL_OW 1
26544: ST_TO_ADDR
// tmp := 1 ;
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_STRING 1
26552: ST_TO_ADDR
// end ; normal := normal & tmp ;
26553: LD_ADDR_VAR 0 5
26557: PUSH
26558: LD_VAR 0 5
26562: PUSH
26563: LD_VAR 0 3
26567: STR
26568: ST_TO_ADDR
// end ;
26569: GO 26469
26571: POP
26572: POP
// for i = 1 to hardcoreCounter do
26573: LD_ADDR_VAR 0 8
26577: PUSH
26578: DOUBLE
26579: LD_INT 1
26581: DEC
26582: ST_TO_ADDR
26583: LD_EXP 53
26587: PUSH
26588: FOR_TO
26589: IFFALSE 26694
// begin tmp := 0 ;
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_STRING 0
26598: ST_TO_ADDR
// if result [ 2 ] then
26599: LD_VAR 0 2
26603: PUSH
26604: LD_INT 2
26606: ARRAY
26607: IFFALSE 26676
// if result [ 2 ] [ 1 ] = 100 + i then
26609: LD_VAR 0 2
26613: PUSH
26614: LD_INT 2
26616: ARRAY
26617: PUSH
26618: LD_INT 1
26620: ARRAY
26621: PUSH
26622: LD_INT 100
26624: PUSH
26625: LD_VAR 0 8
26629: PLUS
26630: EQUAL
26631: IFFALSE 26676
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26633: LD_ADDR_VAR 0 2
26637: PUSH
26638: LD_VAR 0 2
26642: PPUSH
26643: LD_INT 2
26645: PPUSH
26646: LD_VAR 0 2
26650: PUSH
26651: LD_INT 2
26653: ARRAY
26654: PPUSH
26655: LD_INT 1
26657: PPUSH
26658: CALL_OW 3
26662: PPUSH
26663: CALL_OW 1
26667: ST_TO_ADDR
// tmp := 1 ;
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: LD_STRING 1
26675: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26676: LD_ADDR_VAR 0 6
26680: PUSH
26681: LD_VAR 0 6
26685: PUSH
26686: LD_VAR 0 3
26690: STR
26691: ST_TO_ADDR
// end ;
26692: GO 26588
26694: POP
26695: POP
// if isGameLoad then
26696: LD_VAR 0 1
26700: IFFALSE 27175
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26702: LD_ADDR_VAR 0 4
26706: PUSH
26707: LD_EXP 56
26711: PUSH
26712: LD_EXP 55
26716: PUSH
26717: LD_EXP 57
26721: PUSH
26722: LD_EXP 54
26726: PUSH
26727: LD_EXP 58
26731: PUSH
26732: LD_EXP 59
26736: PUSH
26737: LD_EXP 60
26741: PUSH
26742: LD_EXP 61
26746: PUSH
26747: LD_EXP 62
26751: PUSH
26752: LD_EXP 63
26756: PUSH
26757: LD_EXP 64
26761: PUSH
26762: LD_EXP 65
26766: PUSH
26767: LD_EXP 66
26771: PUSH
26772: LD_EXP 67
26776: PUSH
26777: LD_EXP 75
26781: PUSH
26782: LD_EXP 76
26786: PUSH
26787: LD_EXP 77
26791: PUSH
26792: LD_EXP 78
26796: PUSH
26797: LD_EXP 80
26801: PUSH
26802: LD_EXP 81
26806: PUSH
26807: LD_EXP 82
26811: PUSH
26812: LD_EXP 85
26816: PUSH
26817: LD_EXP 87
26821: PUSH
26822: LD_EXP 88
26826: PUSH
26827: LD_EXP 89
26831: PUSH
26832: LD_EXP 91
26836: PUSH
26837: LD_EXP 92
26841: PUSH
26842: LD_EXP 95
26846: PUSH
26847: LD_EXP 96
26851: PUSH
26852: LD_EXP 97
26856: PUSH
26857: LD_EXP 98
26861: PUSH
26862: LD_EXP 99
26866: PUSH
26867: LD_EXP 100
26871: PUSH
26872: LD_EXP 101
26876: PUSH
26877: LD_EXP 102
26881: PUSH
26882: LD_EXP 103
26886: PUSH
26887: LD_EXP 68
26891: PUSH
26892: LD_EXP 69
26896: PUSH
26897: LD_EXP 72
26901: PUSH
26902: LD_EXP 73
26906: PUSH
26907: LD_EXP 74
26911: PUSH
26912: LD_EXP 70
26916: PUSH
26917: LD_EXP 71
26921: PUSH
26922: LD_EXP 79
26926: PUSH
26927: LD_EXP 83
26931: PUSH
26932: LD_EXP 84
26936: PUSH
26937: LD_EXP 86
26941: PUSH
26942: LD_EXP 90
26946: PUSH
26947: LD_EXP 93
26951: PUSH
26952: LD_EXP 94
26956: PUSH
26957: LD_EXP 104
26961: PUSH
26962: LD_EXP 105
26966: PUSH
26967: LD_EXP 106
26971: PUSH
26972: LD_EXP 107
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// tmp :=  ;
27033: LD_ADDR_VAR 0 3
27037: PUSH
27038: LD_STRING 
27040: ST_TO_ADDR
// for i = 1 to normalCounter do
27041: LD_ADDR_VAR 0 8
27045: PUSH
27046: DOUBLE
27047: LD_INT 1
27049: DEC
27050: ST_TO_ADDR
27051: LD_EXP 52
27055: PUSH
27056: FOR_TO
27057: IFFALSE 27093
// begin if flags [ i ] then
27059: LD_VAR 0 4
27063: PUSH
27064: LD_VAR 0 8
27068: ARRAY
27069: IFFALSE 27091
// tmp := tmp & i & ; ;
27071: LD_ADDR_VAR 0 3
27075: PUSH
27076: LD_VAR 0 3
27080: PUSH
27081: LD_VAR 0 8
27085: STR
27086: PUSH
27087: LD_STRING ;
27089: STR
27090: ST_TO_ADDR
// end ;
27091: GO 27056
27093: POP
27094: POP
// for i = 1 to hardcoreCounter do
27095: LD_ADDR_VAR 0 8
27099: PUSH
27100: DOUBLE
27101: LD_INT 1
27103: DEC
27104: ST_TO_ADDR
27105: LD_EXP 53
27109: PUSH
27110: FOR_TO
27111: IFFALSE 27157
// begin if flags [ normalCounter + i ] then
27113: LD_VAR 0 4
27117: PUSH
27118: LD_EXP 52
27122: PUSH
27123: LD_VAR 0 8
27127: PLUS
27128: ARRAY
27129: IFFALSE 27155
// tmp := tmp & ( 100 + i ) & ; ;
27131: LD_ADDR_VAR 0 3
27135: PUSH
27136: LD_VAR 0 3
27140: PUSH
27141: LD_INT 100
27143: PUSH
27144: LD_VAR 0 8
27148: PLUS
27149: STR
27150: PUSH
27151: LD_STRING ;
27153: STR
27154: ST_TO_ADDR
// end ;
27155: GO 27110
27157: POP
27158: POP
// if tmp then
27159: LD_VAR 0 3
27163: IFFALSE 27175
// active := tmp ;
27165: LD_ADDR_VAR 0 7
27169: PUSH
27170: LD_VAR 0 3
27174: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27175: LD_STRING getStreamItemsFromMission("
27177: PUSH
27178: LD_VAR 0 5
27182: STR
27183: PUSH
27184: LD_STRING ","
27186: STR
27187: PUSH
27188: LD_VAR 0 6
27192: STR
27193: PUSH
27194: LD_STRING ","
27196: STR
27197: PUSH
27198: LD_VAR 0 7
27202: STR
27203: PUSH
27204: LD_STRING ")
27206: STR
27207: PPUSH
27208: CALL_OW 559
// end else
27212: GO 27221
// ToLua ( getStreamItemsFromMission("","","") ) ;
27214: LD_STRING getStreamItemsFromMission("","","")
27216: PPUSH
27217: CALL_OW 559
// end ;
27221: LD_VAR 0 2
27225: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27226: LD_EXP 51
27230: PUSH
27231: LD_EXP 56
27235: AND
27236: IFFALSE 27360
27238: GO 27240
27240: DISABLE
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
// begin enable ;
27245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: LD_INT 22
27253: PUSH
27254: LD_OWVAR 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 34
27268: PUSH
27269: LD_INT 7
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 34
27278: PUSH
27279: LD_INT 45
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 34
27288: PUSH
27289: LD_INT 28
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 34
27298: PUSH
27299: LD_INT 47
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PPUSH
27317: CALL_OW 69
27321: ST_TO_ADDR
// if not tmp then
27322: LD_VAR 0 2
27326: NOT
27327: IFFALSE 27331
// exit ;
27329: GO 27360
// for i in tmp do
27331: LD_ADDR_VAR 0 1
27335: PUSH
27336: LD_VAR 0 2
27340: PUSH
27341: FOR_IN
27342: IFFALSE 27358
// begin SetLives ( i , 0 ) ;
27344: LD_VAR 0 1
27348: PPUSH
27349: LD_INT 0
27351: PPUSH
27352: CALL_OW 234
// end ;
27356: GO 27341
27358: POP
27359: POP
// end ;
27360: PPOPN 2
27362: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27363: LD_EXP 51
27367: PUSH
27368: LD_EXP 57
27372: AND
27373: IFFALSE 27457
27375: GO 27377
27377: DISABLE
27378: LD_INT 0
27380: PPUSH
27381: PPUSH
// begin enable ;
27382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27383: LD_ADDR_VAR 0 2
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_OWVAR 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 32
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: CALL_OW 69
27418: ST_TO_ADDR
// if not tmp then
27419: LD_VAR 0 2
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27457
// for i in tmp do
27428: LD_ADDR_VAR 0 1
27432: PUSH
27433: LD_VAR 0 2
27437: PUSH
27438: FOR_IN
27439: IFFALSE 27455
// begin SetLives ( i , 0 ) ;
27441: LD_VAR 0 1
27445: PPUSH
27446: LD_INT 0
27448: PPUSH
27449: CALL_OW 234
// end ;
27453: GO 27438
27455: POP
27456: POP
// end ;
27457: PPOPN 2
27459: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27460: LD_EXP 51
27464: PUSH
27465: LD_EXP 54
27469: AND
27470: IFFALSE 27563
27472: GO 27474
27474: DISABLE
27475: LD_INT 0
27477: PPUSH
// begin enable ;
27478: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27479: LD_ADDR_VAR 0 1
27483: PUSH
27484: LD_INT 22
27486: PUSH
27487: LD_OWVAR 2
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 25
27501: PUSH
27502: LD_INT 5
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 25
27511: PUSH
27512: LD_INT 9
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 25
27521: PUSH
27522: LD_INT 8
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PPUSH
27539: CALL_OW 69
27543: PUSH
27544: FOR_IN
27545: IFFALSE 27561
// begin SetClass ( i , 1 ) ;
27547: LD_VAR 0 1
27551: PPUSH
27552: LD_INT 1
27554: PPUSH
27555: CALL_OW 336
// end ;
27559: GO 27544
27561: POP
27562: POP
// end ;
27563: PPOPN 1
27565: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27566: LD_EXP 51
27570: PUSH
27571: LD_EXP 55
27575: AND
27576: PUSH
27577: LD_OWVAR 65
27581: PUSH
27582: LD_INT 7
27584: LESS
27585: AND
27586: IFFALSE 27600
27588: GO 27590
27590: DISABLE
// begin enable ;
27591: ENABLE
// game_speed := 7 ;
27592: LD_ADDR_OWVAR 65
27596: PUSH
27597: LD_INT 7
27599: ST_TO_ADDR
// end ;
27600: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27601: LD_EXP 51
27605: PUSH
27606: LD_EXP 58
27610: AND
27611: IFFALSE 27813
27613: GO 27615
27615: DISABLE
27616: LD_INT 0
27618: PPUSH
27619: PPUSH
27620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27621: LD_ADDR_VAR 0 3
27625: PUSH
27626: LD_INT 81
27628: PUSH
27629: LD_OWVAR 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 21
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 69
27656: ST_TO_ADDR
// if not tmp then
27657: LD_VAR 0 3
27661: NOT
27662: IFFALSE 27666
// exit ;
27664: GO 27813
// if tmp > 5 then
27666: LD_VAR 0 3
27670: PUSH
27671: LD_INT 5
27673: GREATER
27674: IFFALSE 27686
// k := 5 else
27676: LD_ADDR_VAR 0 2
27680: PUSH
27681: LD_INT 5
27683: ST_TO_ADDR
27684: GO 27696
// k := tmp ;
27686: LD_ADDR_VAR 0 2
27690: PUSH
27691: LD_VAR 0 3
27695: ST_TO_ADDR
// for i := 1 to k do
27696: LD_ADDR_VAR 0 1
27700: PUSH
27701: DOUBLE
27702: LD_INT 1
27704: DEC
27705: ST_TO_ADDR
27706: LD_VAR 0 2
27710: PUSH
27711: FOR_TO
27712: IFFALSE 27811
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27714: LD_VAR 0 3
27718: PUSH
27719: LD_VAR 0 1
27723: ARRAY
27724: PPUSH
27725: LD_VAR 0 1
27729: PUSH
27730: LD_INT 4
27732: MOD
27733: PUSH
27734: LD_INT 1
27736: PLUS
27737: PPUSH
27738: CALL_OW 259
27742: PUSH
27743: LD_INT 10
27745: LESS
27746: IFFALSE 27809
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27748: LD_VAR 0 3
27752: PUSH
27753: LD_VAR 0 1
27757: ARRAY
27758: PPUSH
27759: LD_VAR 0 1
27763: PUSH
27764: LD_INT 4
27766: MOD
27767: PUSH
27768: LD_INT 1
27770: PLUS
27771: PPUSH
27772: LD_VAR 0 3
27776: PUSH
27777: LD_VAR 0 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 1
27787: PUSH
27788: LD_INT 4
27790: MOD
27791: PUSH
27792: LD_INT 1
27794: PLUS
27795: PPUSH
27796: CALL_OW 259
27800: PUSH
27801: LD_INT 1
27803: PLUS
27804: PPUSH
27805: CALL_OW 237
27809: GO 27711
27811: POP
27812: POP
// end ;
27813: PPOPN 3
27815: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27816: LD_EXP 51
27820: PUSH
27821: LD_EXP 59
27825: AND
27826: IFFALSE 27846
27828: GO 27830
27830: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27831: LD_INT 4
27833: PPUSH
27834: LD_OWVAR 2
27838: PPUSH
27839: LD_INT 0
27841: PPUSH
27842: CALL_OW 324
27846: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27847: LD_EXP 51
27851: PUSH
27852: LD_EXP 88
27856: AND
27857: IFFALSE 27877
27859: GO 27861
27861: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27862: LD_INT 19
27864: PPUSH
27865: LD_OWVAR 2
27869: PPUSH
27870: LD_INT 0
27872: PPUSH
27873: CALL_OW 324
27877: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27878: LD_EXP 51
27882: PUSH
27883: LD_EXP 60
27887: AND
27888: IFFALSE 27990
27890: GO 27892
27892: DISABLE
27893: LD_INT 0
27895: PPUSH
27896: PPUSH
// begin enable ;
27897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27898: LD_ADDR_VAR 0 2
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_OWVAR 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 34
27920: PUSH
27921: LD_INT 11
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 34
27930: PUSH
27931: LD_INT 30
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PPUSH
27947: CALL_OW 69
27951: ST_TO_ADDR
// if not tmp then
27952: LD_VAR 0 2
27956: NOT
27957: IFFALSE 27961
// exit ;
27959: GO 27990
// for i in tmp do
27961: LD_ADDR_VAR 0 1
27965: PUSH
27966: LD_VAR 0 2
27970: PUSH
27971: FOR_IN
27972: IFFALSE 27988
// begin SetLives ( i , 0 ) ;
27974: LD_VAR 0 1
27978: PPUSH
27979: LD_INT 0
27981: PPUSH
27982: CALL_OW 234
// end ;
27986: GO 27971
27988: POP
27989: POP
// end ;
27990: PPOPN 2
27992: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27993: LD_EXP 51
27997: PUSH
27998: LD_EXP 61
28002: AND
28003: IFFALSE 28023
28005: GO 28007
28007: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28008: LD_INT 32
28010: PPUSH
28011: LD_OWVAR 2
28015: PPUSH
28016: LD_INT 0
28018: PPUSH
28019: CALL_OW 324
28023: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28024: LD_EXP 51
28028: PUSH
28029: LD_EXP 62
28033: AND
28034: IFFALSE 28215
28036: GO 28038
28038: DISABLE
28039: LD_INT 0
28041: PPUSH
28042: PPUSH
28043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: LD_INT 22
28051: PUSH
28052: LD_OWVAR 2
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 33
28063: PUSH
28064: LD_INT 3
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: ST_TO_ADDR
// if not tmp then
28080: LD_VAR 0 2
28084: NOT
28085: IFFALSE 28089
// exit ;
28087: GO 28215
// side := 0 ;
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_INT 0
28096: ST_TO_ADDR
// for i := 1 to 8 do
28097: LD_ADDR_VAR 0 1
28101: PUSH
28102: DOUBLE
28103: LD_INT 1
28105: DEC
28106: ST_TO_ADDR
28107: LD_INT 8
28109: PUSH
28110: FOR_TO
28111: IFFALSE 28159
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28113: LD_OWVAR 2
28117: PUSH
28118: LD_VAR 0 1
28122: NONEQUAL
28123: PUSH
28124: LD_OWVAR 2
28128: PPUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 81
28138: PUSH
28139: LD_INT 2
28141: EQUAL
28142: AND
28143: IFFALSE 28157
// begin side := i ;
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_VAR 0 1
28154: ST_TO_ADDR
// break ;
28155: GO 28159
// end ;
28157: GO 28110
28159: POP
28160: POP
// if not side then
28161: LD_VAR 0 3
28165: NOT
28166: IFFALSE 28170
// exit ;
28168: GO 28215
// for i := 1 to tmp do
28170: LD_ADDR_VAR 0 1
28174: PUSH
28175: DOUBLE
28176: LD_INT 1
28178: DEC
28179: ST_TO_ADDR
28180: LD_VAR 0 2
28184: PUSH
28185: FOR_TO
28186: IFFALSE 28213
// if Prob ( 60 ) then
28188: LD_INT 60
28190: PPUSH
28191: CALL_OW 13
28195: IFFALSE 28211
// SetSide ( i , side ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_VAR 0 3
28206: PPUSH
28207: CALL_OW 235
28211: GO 28185
28213: POP
28214: POP
// end ;
28215: PPOPN 3
28217: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28218: LD_EXP 51
28222: PUSH
28223: LD_EXP 64
28227: AND
28228: IFFALSE 28347
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: LD_INT 22
28243: PUSH
28244: LD_OWVAR 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 23
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: PUSH
28290: FOR_IN
28291: IFFALSE 28345
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 257
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 4
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: IN
28321: IFFALSE 28343
// SetClass ( un , rand ( 1 , 4 ) ) ;
28323: LD_VAR 0 1
28327: PPUSH
28328: LD_INT 1
28330: PPUSH
28331: LD_INT 4
28333: PPUSH
28334: CALL_OW 12
28338: PPUSH
28339: CALL_OW 336
28343: GO 28290
28345: POP
28346: POP
// end ;
28347: PPOPN 1
28349: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28350: LD_EXP 51
28354: PUSH
28355: LD_EXP 63
28359: AND
28360: IFFALSE 28439
28362: GO 28364
28364: DISABLE
28365: LD_INT 0
28367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28368: LD_ADDR_VAR 0 1
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: LD_OWVAR 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 21
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: CALL_OW 69
28403: ST_TO_ADDR
// if not tmp then
28404: LD_VAR 0 1
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28413: LD_VAR 0 1
28417: PUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 12
28430: ARRAY
28431: PPUSH
28432: LD_INT 100
28434: PPUSH
28435: CALL_OW 234
// end ;
28439: PPOPN 1
28441: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28442: LD_EXP 51
28446: PUSH
28447: LD_EXP 65
28451: AND
28452: IFFALSE 28550
28454: GO 28456
28456: DISABLE
28457: LD_INT 0
28459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28460: LD_ADDR_VAR 0 1
28464: PUSH
28465: LD_INT 22
28467: PUSH
28468: LD_OWVAR 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 21
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PPUSH
28491: CALL_OW 69
28495: ST_TO_ADDR
// if not tmp then
28496: LD_VAR 0 1
28500: NOT
28501: IFFALSE 28505
// exit ;
28503: GO 28550
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28505: LD_VAR 0 1
28509: PUSH
28510: LD_INT 1
28512: PPUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 12
28522: ARRAY
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: LD_INT 4
28529: PPUSH
28530: CALL_OW 12
28534: PPUSH
28535: LD_INT 3000
28537: PPUSH
28538: LD_INT 9000
28540: PPUSH
28541: CALL_OW 12
28545: PPUSH
28546: CALL_OW 492
// end ;
28550: PPOPN 1
28552: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28553: LD_EXP 51
28557: PUSH
28558: LD_EXP 66
28562: AND
28563: IFFALSE 28583
28565: GO 28567
28567: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28568: LD_INT 1
28570: PPUSH
28571: LD_OWVAR 2
28575: PPUSH
28576: LD_INT 0
28578: PPUSH
28579: CALL_OW 324
28583: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28584: LD_EXP 51
28588: PUSH
28589: LD_EXP 67
28593: AND
28594: IFFALSE 28677
28596: GO 28598
28598: DISABLE
28599: LD_INT 0
28601: PPUSH
28602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28603: LD_ADDR_VAR 0 2
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: LD_OWVAR 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 21
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PPUSH
28634: CALL_OW 69
28638: ST_TO_ADDR
// if not tmp then
28639: LD_VAR 0 2
28643: NOT
28644: IFFALSE 28648
// exit ;
28646: GO 28677
// for i in tmp do
28648: LD_ADDR_VAR 0 1
28652: PUSH
28653: LD_VAR 0 2
28657: PUSH
28658: FOR_IN
28659: IFFALSE 28675
// SetBLevel ( i , 10 ) ;
28661: LD_VAR 0 1
28665: PPUSH
28666: LD_INT 10
28668: PPUSH
28669: CALL_OW 241
28673: GO 28658
28675: POP
28676: POP
// end ;
28677: PPOPN 2
28679: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28680: LD_EXP 51
28684: PUSH
28685: LD_EXP 68
28689: AND
28690: IFFALSE 28801
28692: GO 28694
28694: DISABLE
28695: LD_INT 0
28697: PPUSH
28698: PPUSH
28699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28700: LD_ADDR_VAR 0 3
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_OWVAR 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 25
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: ST_TO_ADDR
// if not tmp then
28736: LD_VAR 0 3
28740: NOT
28741: IFFALSE 28745
// exit ;
28743: GO 28801
// un := tmp [ rand ( 1 , tmp ) ] ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_VAR 0 3
28754: PUSH
28755: LD_INT 1
28757: PPUSH
28758: LD_VAR 0 3
28762: PPUSH
28763: CALL_OW 12
28767: ARRAY
28768: ST_TO_ADDR
// if Crawls ( un ) then
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 318
28778: IFFALSE 28789
// ComWalk ( un ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28789: LD_VAR 0 2
28793: PPUSH
28794: LD_INT 5
28796: PPUSH
28797: CALL_OW 336
// end ;
28801: PPOPN 3
28803: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28804: LD_EXP 51
28808: PUSH
28809: LD_EXP 69
28813: AND
28814: PUSH
28815: LD_OWVAR 67
28819: PUSH
28820: LD_INT 4
28822: LESS
28823: AND
28824: IFFALSE 28843
28826: GO 28828
28828: DISABLE
// begin Difficulty := Difficulty + 1 ;
28829: LD_ADDR_OWVAR 67
28833: PUSH
28834: LD_OWVAR 67
28838: PUSH
28839: LD_INT 1
28841: PLUS
28842: ST_TO_ADDR
// end ;
28843: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28844: LD_EXP 51
28848: PUSH
28849: LD_EXP 70
28853: AND
28854: IFFALSE 28957
28856: GO 28858
28858: DISABLE
28859: LD_INT 0
28861: PPUSH
// begin for i := 1 to 5 do
28862: LD_ADDR_VAR 0 1
28866: PUSH
28867: DOUBLE
28868: LD_INT 1
28870: DEC
28871: ST_TO_ADDR
28872: LD_INT 5
28874: PUSH
28875: FOR_TO
28876: IFFALSE 28955
// begin uc_nation := nation_nature ;
28878: LD_ADDR_OWVAR 21
28882: PUSH
28883: LD_INT 0
28885: ST_TO_ADDR
// uc_side := 0 ;
28886: LD_ADDR_OWVAR 20
28890: PUSH
28891: LD_INT 0
28893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28894: LD_ADDR_OWVAR 29
28898: PUSH
28899: LD_INT 12
28901: PUSH
28902: LD_INT 12
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// hc_agressivity := 20 ;
28909: LD_ADDR_OWVAR 35
28913: PUSH
28914: LD_INT 20
28916: ST_TO_ADDR
// hc_class := class_tiger ;
28917: LD_ADDR_OWVAR 28
28921: PUSH
28922: LD_INT 14
28924: ST_TO_ADDR
// hc_gallery :=  ;
28925: LD_ADDR_OWVAR 33
28929: PUSH
28930: LD_STRING 
28932: ST_TO_ADDR
// hc_name :=  ;
28933: LD_ADDR_OWVAR 26
28937: PUSH
28938: LD_STRING 
28940: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28941: CALL_OW 44
28945: PPUSH
28946: LD_INT 0
28948: PPUSH
28949: CALL_OW 51
// end ;
28953: GO 28875
28955: POP
28956: POP
// end ;
28957: PPOPN 1
28959: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28960: LD_EXP 51
28964: PUSH
28965: LD_EXP 71
28969: AND
28970: IFFALSE 28979
28972: GO 28974
28974: DISABLE
// StreamSibBomb ;
28975: CALL 28980 0 0
28979: END
// export function StreamSibBomb ; var i , x , y ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
// result := false ;
28986: LD_ADDR_VAR 0 1
28990: PUSH
28991: LD_INT 0
28993: ST_TO_ADDR
// for i := 1 to 16 do
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: DOUBLE
29000: LD_INT 1
29002: DEC
29003: ST_TO_ADDR
29004: LD_INT 16
29006: PUSH
29007: FOR_TO
29008: IFFALSE 29207
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 10
29017: PUSH
29018: LD_INT 20
29020: PUSH
29021: LD_INT 30
29023: PUSH
29024: LD_INT 40
29026: PUSH
29027: LD_INT 50
29029: PUSH
29030: LD_INT 60
29032: PUSH
29033: LD_INT 70
29035: PUSH
29036: LD_INT 80
29038: PUSH
29039: LD_INT 90
29041: PUSH
29042: LD_INT 100
29044: PUSH
29045: LD_INT 110
29047: PUSH
29048: LD_INT 120
29050: PUSH
29051: LD_INT 130
29053: PUSH
29054: LD_INT 140
29056: PUSH
29057: LD_INT 150
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PPUSH
29080: LD_INT 15
29082: PPUSH
29083: CALL_OW 12
29087: ARRAY
29088: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29089: LD_ADDR_VAR 0 4
29093: PUSH
29094: LD_INT 10
29096: PUSH
29097: LD_INT 20
29099: PUSH
29100: LD_INT 30
29102: PUSH
29103: LD_INT 40
29105: PUSH
29106: LD_INT 50
29108: PUSH
29109: LD_INT 60
29111: PUSH
29112: LD_INT 70
29114: PUSH
29115: LD_INT 80
29117: PUSH
29118: LD_INT 90
29120: PUSH
29121: LD_INT 100
29123: PUSH
29124: LD_INT 110
29126: PUSH
29127: LD_INT 120
29129: PUSH
29130: LD_INT 130
29132: PUSH
29133: LD_INT 140
29135: PUSH
29136: LD_INT 150
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PPUSH
29159: LD_INT 15
29161: PPUSH
29162: CALL_OW 12
29166: ARRAY
29167: ST_TO_ADDR
// if ValidHex ( x , y ) then
29168: LD_VAR 0 3
29172: PPUSH
29173: LD_VAR 0 4
29177: PPUSH
29178: CALL_OW 488
29182: IFFALSE 29205
// begin result := [ x , y ] ;
29184: LD_ADDR_VAR 0 1
29188: PUSH
29189: LD_VAR 0 3
29193: PUSH
29194: LD_VAR 0 4
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// break ;
29203: GO 29207
// end ; end ;
29205: GO 29007
29207: POP
29208: POP
// if result then
29209: LD_VAR 0 1
29213: IFFALSE 29273
// begin ToLua ( playSibBomb() ) ;
29215: LD_STRING playSibBomb()
29217: PPUSH
29218: CALL_OW 559
// wait ( 0 0$14 ) ;
29222: LD_INT 490
29224: PPUSH
29225: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29229: LD_VAR 0 1
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: LD_VAR 0 1
29242: PUSH
29243: LD_INT 2
29245: ARRAY
29246: PPUSH
29247: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29251: LD_VAR 0 1
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 2
29267: ARRAY
29268: PPUSH
29269: CALL_OW 429
// end ; end ;
29273: LD_VAR 0 1
29277: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29278: LD_EXP 51
29282: PUSH
29283: LD_EXP 73
29287: AND
29288: IFFALSE 29300
29290: GO 29292
29292: DISABLE
// YouLost (  ) ;
29293: LD_STRING 
29295: PPUSH
29296: CALL_OW 104
29300: END
// every 0 0$1 trigger StreamModeActive and sFog do
29301: LD_EXP 51
29305: PUSH
29306: LD_EXP 72
29310: AND
29311: IFFALSE 29325
29313: GO 29315
29315: DISABLE
// FogOff ( your_side ) ;
29316: LD_OWVAR 2
29320: PPUSH
29321: CALL_OW 344
29325: END
// every 0 0$1 trigger StreamModeActive and sSun do
29326: LD_EXP 51
29330: PUSH
29331: LD_EXP 74
29335: AND
29336: IFFALSE 29364
29338: GO 29340
29340: DISABLE
// begin solar_recharge_percent := 0 ;
29341: LD_ADDR_OWVAR 79
29345: PUSH
29346: LD_INT 0
29348: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29349: LD_INT 10500
29351: PPUSH
29352: CALL_OW 67
// solar_recharge_percent := 100 ;
29356: LD_ADDR_OWVAR 79
29360: PUSH
29361: LD_INT 100
29363: ST_TO_ADDR
// end ;
29364: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29365: LD_EXP 51
29369: PUSH
29370: LD_EXP 75
29374: AND
29375: IFFALSE 29614
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
29384: PPUSH
// begin tmp := [ ] ;
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: EMPTY
29391: ST_TO_ADDR
// for i := 1 to 6 do
29392: LD_ADDR_VAR 0 1
29396: PUSH
29397: DOUBLE
29398: LD_INT 1
29400: DEC
29401: ST_TO_ADDR
29402: LD_INT 6
29404: PUSH
29405: FOR_TO
29406: IFFALSE 29511
// begin uc_nation := nation_nature ;
29408: LD_ADDR_OWVAR 21
29412: PUSH
29413: LD_INT 0
29415: ST_TO_ADDR
// uc_side := 0 ;
29416: LD_ADDR_OWVAR 20
29420: PUSH
29421: LD_INT 0
29423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29424: LD_ADDR_OWVAR 29
29428: PUSH
29429: LD_INT 12
29431: PUSH
29432: LD_INT 12
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: ST_TO_ADDR
// hc_agressivity := 20 ;
29439: LD_ADDR_OWVAR 35
29443: PUSH
29444: LD_INT 20
29446: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29447: LD_ADDR_OWVAR 28
29451: PUSH
29452: LD_INT 17
29454: ST_TO_ADDR
// hc_gallery :=  ;
29455: LD_ADDR_OWVAR 33
29459: PUSH
29460: LD_STRING 
29462: ST_TO_ADDR
// hc_name :=  ;
29463: LD_ADDR_OWVAR 26
29467: PUSH
29468: LD_STRING 
29470: ST_TO_ADDR
// un := CreateHuman ;
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: CALL_OW 44
29480: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29481: LD_VAR 0 2
29485: PPUSH
29486: LD_INT 1
29488: PPUSH
29489: CALL_OW 51
// tmp := tmp ^ un ;
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_VAR 0 3
29502: PUSH
29503: LD_VAR 0 2
29507: ADD
29508: ST_TO_ADDR
// end ;
29509: GO 29405
29511: POP
29512: POP
// repeat wait ( 0 0$1 ) ;
29513: LD_INT 35
29515: PPUSH
29516: CALL_OW 67
// for un in tmp do
29520: LD_ADDR_VAR 0 2
29524: PUSH
29525: LD_VAR 0 3
29529: PUSH
29530: FOR_IN
29531: IFFALSE 29605
// begin if IsDead ( un ) then
29533: LD_VAR 0 2
29537: PPUSH
29538: CALL_OW 301
29542: IFFALSE 29562
// begin tmp := tmp diff un ;
29544: LD_ADDR_VAR 0 3
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_VAR 0 2
29558: DIFF
29559: ST_TO_ADDR
// continue ;
29560: GO 29530
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_INT 3
29569: PUSH
29570: LD_INT 22
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PPUSH
29584: CALL_OW 69
29588: PPUSH
29589: LD_VAR 0 2
29593: PPUSH
29594: CALL_OW 74
29598: PPUSH
29599: CALL_OW 115
// end ;
29603: GO 29530
29605: POP
29606: POP
// until not tmp ;
29607: LD_VAR 0 3
29611: NOT
29612: IFFALSE 29513
// end ;
29614: PPOPN 3
29616: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29617: LD_EXP 51
29621: PUSH
29622: LD_EXP 76
29626: AND
29627: IFFALSE 29681
29629: GO 29631
29631: DISABLE
// begin ToLua ( displayTroll(); ) ;
29632: LD_STRING displayTroll();
29634: PPUSH
29635: CALL_OW 559
// wait ( 3 3$00 ) ;
29639: LD_INT 6300
29641: PPUSH
29642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29646: LD_STRING hideTroll();
29648: PPUSH
29649: CALL_OW 559
// wait ( 1 1$00 ) ;
29653: LD_INT 2100
29655: PPUSH
29656: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29660: LD_STRING displayTroll();
29662: PPUSH
29663: CALL_OW 559
// wait ( 1 1$00 ) ;
29667: LD_INT 2100
29669: PPUSH
29670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29674: LD_STRING hideTroll();
29676: PPUSH
29677: CALL_OW 559
// end ;
29681: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29682: LD_EXP 51
29686: PUSH
29687: LD_EXP 77
29691: AND
29692: IFFALSE 29755
29694: GO 29696
29696: DISABLE
29697: LD_INT 0
29699: PPUSH
// begin p := 0 ;
29700: LD_ADDR_VAR 0 1
29704: PUSH
29705: LD_INT 0
29707: ST_TO_ADDR
// repeat game_speed := 1 ;
29708: LD_ADDR_OWVAR 65
29712: PUSH
29713: LD_INT 1
29715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29716: LD_INT 35
29718: PPUSH
29719: CALL_OW 67
// p := p + 1 ;
29723: LD_ADDR_VAR 0 1
29727: PUSH
29728: LD_VAR 0 1
29732: PUSH
29733: LD_INT 1
29735: PLUS
29736: ST_TO_ADDR
// until p >= 60 ;
29737: LD_VAR 0 1
29741: PUSH
29742: LD_INT 60
29744: GREATEREQUAL
29745: IFFALSE 29708
// game_speed := 4 ;
29747: LD_ADDR_OWVAR 65
29751: PUSH
29752: LD_INT 4
29754: ST_TO_ADDR
// end ;
29755: PPOPN 1
29757: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29758: LD_EXP 51
29762: PUSH
29763: LD_EXP 78
29767: AND
29768: IFFALSE 29914
29770: GO 29772
29772: DISABLE
29773: LD_INT 0
29775: PPUSH
29776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29777: LD_ADDR_VAR 0 1
29781: PUSH
29782: LD_INT 22
29784: PUSH
29785: LD_OWVAR 2
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 30
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 30
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PPUSH
29826: CALL_OW 69
29830: ST_TO_ADDR
// if not depot then
29831: LD_VAR 0 1
29835: NOT
29836: IFFALSE 29840
// exit ;
29838: GO 29914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29840: LD_ADDR_VAR 0 2
29844: PUSH
29845: LD_VAR 0 1
29849: PUSH
29850: LD_INT 1
29852: PPUSH
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 12
29862: ARRAY
29863: PPUSH
29864: CALL_OW 274
29868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29869: LD_VAR 0 2
29873: PPUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_INT 0
29879: PPUSH
29880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29884: LD_VAR 0 2
29888: PPUSH
29889: LD_INT 2
29891: PPUSH
29892: LD_INT 0
29894: PPUSH
29895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29899: LD_VAR 0 2
29903: PPUSH
29904: LD_INT 3
29906: PPUSH
29907: LD_INT 0
29909: PPUSH
29910: CALL_OW 277
// end ;
29914: PPOPN 2
29916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29917: LD_EXP 51
29921: PUSH
29922: LD_EXP 79
29926: AND
29927: IFFALSE 30024
29929: GO 29931
29931: DISABLE
29932: LD_INT 0
29934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29935: LD_ADDR_VAR 0 1
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 23
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 1
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29998: LD_VAR 0 1
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 12
30015: ARRAY
30016: PPUSH
30017: LD_INT 200
30019: PPUSH
30020: CALL_OW 234
// end ;
30024: PPOPN 1
30026: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30027: LD_EXP 51
30031: PUSH
30032: LD_EXP 80
30036: AND
30037: IFFALSE 30116
30039: GO 30041
30041: DISABLE
30042: LD_INT 0
30044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30045: LD_ADDR_VAR 0 1
30049: PUSH
30050: LD_INT 22
30052: PUSH
30053: LD_OWVAR 2
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 21
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PPUSH
30076: CALL_OW 69
30080: ST_TO_ADDR
// if not tmp then
30081: LD_VAR 0 1
30085: NOT
30086: IFFALSE 30090
// exit ;
30088: GO 30116
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30090: LD_VAR 0 1
30094: PUSH
30095: LD_INT 1
30097: PPUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 12
30107: ARRAY
30108: PPUSH
30109: LD_INT 60
30111: PPUSH
30112: CALL_OW 234
// end ;
30116: PPOPN 1
30118: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30119: LD_EXP 51
30123: PUSH
30124: LD_EXP 81
30128: AND
30129: IFFALSE 30228
30131: GO 30133
30133: DISABLE
30134: LD_INT 0
30136: PPUSH
30137: PPUSH
// begin enable ;
30138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30139: LD_ADDR_VAR 0 1
30143: PUSH
30144: LD_INT 22
30146: PUSH
30147: LD_OWVAR 2
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 61
30158: PUSH
30159: EMPTY
30160: LIST
30161: PUSH
30162: LD_INT 33
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: PPUSH
30177: CALL_OW 69
30181: ST_TO_ADDR
// if not tmp then
30182: LD_VAR 0 1
30186: NOT
30187: IFFALSE 30191
// exit ;
30189: GO 30228
// for i in tmp do
30191: LD_ADDR_VAR 0 2
30195: PUSH
30196: LD_VAR 0 1
30200: PUSH
30201: FOR_IN
30202: IFFALSE 30226
// if IsControledBy ( i ) then
30204: LD_VAR 0 2
30208: PPUSH
30209: CALL_OW 312
30213: IFFALSE 30224
// ComUnlink ( i ) ;
30215: LD_VAR 0 2
30219: PPUSH
30220: CALL_OW 136
30224: GO 30201
30226: POP
30227: POP
// end ;
30228: PPOPN 2
30230: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30231: LD_EXP 51
30235: PUSH
30236: LD_EXP 82
30240: AND
30241: IFFALSE 30381
30243: GO 30245
30245: DISABLE
30246: LD_INT 0
30248: PPUSH
30249: PPUSH
// begin ToLua ( displayPowell(); ) ;
30250: LD_STRING displayPowell();
30252: PPUSH
30253: CALL_OW 559
// uc_side := 0 ;
30257: LD_ADDR_OWVAR 20
30261: PUSH
30262: LD_INT 0
30264: ST_TO_ADDR
// uc_nation := 2 ;
30265: LD_ADDR_OWVAR 21
30269: PUSH
30270: LD_INT 2
30272: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30273: LD_ADDR_OWVAR 37
30277: PUSH
30278: LD_INT 14
30280: ST_TO_ADDR
// vc_engine := engine_siberite ;
30281: LD_ADDR_OWVAR 39
30285: PUSH
30286: LD_INT 3
30288: ST_TO_ADDR
// vc_control := control_apeman ;
30289: LD_ADDR_OWVAR 38
30293: PUSH
30294: LD_INT 5
30296: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30297: LD_ADDR_OWVAR 40
30301: PUSH
30302: LD_INT 29
30304: ST_TO_ADDR
// un := CreateVehicle ;
30305: LD_ADDR_VAR 0 2
30309: PUSH
30310: CALL_OW 45
30314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30315: LD_VAR 0 2
30319: PPUSH
30320: LD_INT 1
30322: PPUSH
30323: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30327: LD_INT 35
30329: PPUSH
30330: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30334: LD_VAR 0 2
30338: PPUSH
30339: LD_INT 22
30341: PUSH
30342: LD_OWVAR 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: PPUSH
30356: LD_VAR 0 2
30360: PPUSH
30361: CALL_OW 74
30365: PPUSH
30366: CALL_OW 115
// until IsDead ( un ) ;
30370: LD_VAR 0 2
30374: PPUSH
30375: CALL_OW 301
30379: IFFALSE 30327
// end ;
30381: PPOPN 2
30383: END
// every 0 0$1 trigger StreamModeActive and sStu do
30384: LD_EXP 51
30388: PUSH
30389: LD_EXP 90
30393: AND
30394: IFFALSE 30410
30396: GO 30398
30398: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30399: LD_STRING displayStucuk();
30401: PPUSH
30402: CALL_OW 559
// ResetFog ;
30406: CALL_OW 335
// end ;
30410: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30411: LD_EXP 51
30415: PUSH
30416: LD_EXP 83
30420: AND
30421: IFFALSE 30562
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30430: LD_ADDR_VAR 0 2
30434: PUSH
30435: LD_INT 22
30437: PUSH
30438: LD_OWVAR 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 21
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PPUSH
30461: CALL_OW 69
30465: ST_TO_ADDR
// if not tmp then
30466: LD_VAR 0 2
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30562
// un := tmp [ rand ( 1 , tmp ) ] ;
30475: LD_ADDR_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: PPUSH
30488: LD_VAR 0 2
30492: PPUSH
30493: CALL_OW 12
30497: ARRAY
30498: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30499: LD_VAR 0 1
30503: PPUSH
30504: LD_INT 0
30506: PPUSH
30507: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30511: LD_VAR 0 1
30515: PPUSH
30516: LD_OWVAR 3
30520: PUSH
30521: LD_VAR 0 1
30525: DIFF
30526: PPUSH
30527: LD_VAR 0 1
30531: PPUSH
30532: CALL_OW 74
30536: PPUSH
30537: CALL_OW 115
// wait ( 0 0$20 ) ;
30541: LD_INT 700
30543: PPUSH
30544: CALL_OW 67
// SetSide ( un , your_side ) ;
30548: LD_VAR 0 1
30552: PPUSH
30553: LD_OWVAR 2
30557: PPUSH
30558: CALL_OW 235
// end ;
30562: PPOPN 2
30564: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30565: LD_EXP 51
30569: PUSH
30570: LD_EXP 84
30574: AND
30575: IFFALSE 30681
30577: GO 30579
30579: DISABLE
30580: LD_INT 0
30582: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30583: LD_ADDR_VAR 0 1
30587: PUSH
30588: LD_INT 22
30590: PUSH
30591: LD_OWVAR 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 30
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 69
30636: ST_TO_ADDR
// if not depot then
30637: LD_VAR 0 1
30641: NOT
30642: IFFALSE 30646
// exit ;
30644: GO 30681
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30646: LD_VAR 0 1
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: CALL_OW 250
30659: PPUSH
30660: LD_VAR 0 1
30664: PUSH
30665: LD_INT 1
30667: ARRAY
30668: PPUSH
30669: CALL_OW 251
30673: PPUSH
30674: LD_INT 70
30676: PPUSH
30677: CALL_OW 495
// end ;
30681: PPOPN 1
30683: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30684: LD_EXP 51
30688: PUSH
30689: LD_EXP 85
30693: AND
30694: IFFALSE 30905
30696: GO 30698
30698: DISABLE
30699: LD_INT 0
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30706: LD_ADDR_VAR 0 5
30710: PUSH
30711: LD_INT 22
30713: PUSH
30714: LD_OWVAR 2
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 21
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 69
30741: ST_TO_ADDR
// if not tmp then
30742: LD_VAR 0 5
30746: NOT
30747: IFFALSE 30751
// exit ;
30749: GO 30905
// for i in tmp do
30751: LD_ADDR_VAR 0 1
30755: PUSH
30756: LD_VAR 0 5
30760: PUSH
30761: FOR_IN
30762: IFFALSE 30903
// begin d := rand ( 0 , 5 ) ;
30764: LD_ADDR_VAR 0 4
30768: PUSH
30769: LD_INT 0
30771: PPUSH
30772: LD_INT 5
30774: PPUSH
30775: CALL_OW 12
30779: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30780: LD_ADDR_VAR 0 2
30784: PUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 250
30794: PPUSH
30795: LD_VAR 0 4
30799: PPUSH
30800: LD_INT 3
30802: PPUSH
30803: LD_INT 12
30805: PPUSH
30806: CALL_OW 12
30810: PPUSH
30811: CALL_OW 272
30815: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 251
30830: PPUSH
30831: LD_VAR 0 4
30835: PPUSH
30836: LD_INT 3
30838: PPUSH
30839: LD_INT 12
30841: PPUSH
30842: CALL_OW 12
30846: PPUSH
30847: CALL_OW 273
30851: ST_TO_ADDR
// if ValidHex ( x , y ) then
30852: LD_VAR 0 2
30856: PPUSH
30857: LD_VAR 0 3
30861: PPUSH
30862: CALL_OW 488
30866: IFFALSE 30901
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_VAR 0 2
30877: PPUSH
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 3
30885: PPUSH
30886: LD_INT 6
30888: PPUSH
30889: CALL_OW 12
30893: PPUSH
30894: LD_INT 1
30896: PPUSH
30897: CALL_OW 483
// end ;
30901: GO 30761
30903: POP
30904: POP
// end ;
30905: PPOPN 5
30907: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30908: LD_EXP 51
30912: PUSH
30913: LD_EXP 86
30917: AND
30918: IFFALSE 31012
30920: GO 30922
30922: DISABLE
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30927: LD_ADDR_VAR 0 2
30931: PUSH
30932: LD_INT 22
30934: PUSH
30935: LD_OWVAR 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 32
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 21
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 69
30973: ST_TO_ADDR
// if not tmp then
30974: LD_VAR 0 2
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 31012
// for i in tmp do
30983: LD_ADDR_VAR 0 1
30987: PUSH
30988: LD_VAR 0 2
30992: PUSH
30993: FOR_IN
30994: IFFALSE 31010
// SetFuel ( i , 0 ) ;
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_INT 0
31003: PPUSH
31004: CALL_OW 240
31008: GO 30993
31010: POP
31011: POP
// end ;
31012: PPOPN 2
31014: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31015: LD_EXP 51
31019: PUSH
31020: LD_EXP 87
31024: AND
31025: IFFALSE 31091
31027: GO 31029
31029: DISABLE
31030: LD_INT 0
31032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31033: LD_ADDR_VAR 0 1
31037: PUSH
31038: LD_INT 22
31040: PUSH
31041: LD_OWVAR 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 30
31052: PUSH
31053: LD_INT 29
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: ST_TO_ADDR
// if not tmp then
31069: LD_VAR 0 1
31073: NOT
31074: IFFALSE 31078
// exit ;
31076: GO 31091
// DestroyUnit ( tmp [ 1 ] ) ;
31078: LD_VAR 0 1
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: PPUSH
31087: CALL_OW 65
// end ;
31091: PPOPN 1
31093: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31094: LD_EXP 51
31098: PUSH
31099: LD_EXP 89
31103: AND
31104: IFFALSE 31233
31106: GO 31108
31108: DISABLE
31109: LD_INT 0
31111: PPUSH
// begin uc_side := 0 ;
31112: LD_ADDR_OWVAR 20
31116: PUSH
31117: LD_INT 0
31119: ST_TO_ADDR
// uc_nation := nation_arabian ;
31120: LD_ADDR_OWVAR 21
31124: PUSH
31125: LD_INT 2
31127: ST_TO_ADDR
// hc_gallery :=  ;
31128: LD_ADDR_OWVAR 33
31132: PUSH
31133: LD_STRING 
31135: ST_TO_ADDR
// hc_name :=  ;
31136: LD_ADDR_OWVAR 26
31140: PUSH
31141: LD_STRING 
31143: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31144: LD_INT 1
31146: PPUSH
31147: LD_INT 11
31149: PPUSH
31150: LD_INT 10
31152: PPUSH
31153: CALL_OW 380
// un := CreateHuman ;
31157: LD_ADDR_VAR 0 1
31161: PUSH
31162: CALL_OW 44
31166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31167: LD_VAR 0 1
31171: PPUSH
31172: LD_INT 1
31174: PPUSH
31175: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31179: LD_INT 35
31181: PPUSH
31182: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31186: LD_VAR 0 1
31190: PPUSH
31191: LD_INT 22
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PPUSH
31203: CALL_OW 69
31207: PPUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 74
31217: PPUSH
31218: CALL_OW 115
// until IsDead ( un ) ;
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 301
31231: IFFALSE 31179
// end ;
31233: PPOPN 1
31235: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31236: LD_EXP 51
31240: PUSH
31241: LD_EXP 91
31245: AND
31246: IFFALSE 31258
31248: GO 31250
31250: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31251: LD_STRING earthquake(getX(game), 0, 32)
31253: PPUSH
31254: CALL_OW 559
31258: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31259: LD_EXP 51
31263: PUSH
31264: LD_EXP 92
31268: AND
31269: IFFALSE 31360
31271: GO 31273
31273: DISABLE
31274: LD_INT 0
31276: PPUSH
// begin enable ;
31277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31278: LD_ADDR_VAR 0 1
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_OWVAR 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 21
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 33
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 69
31324: ST_TO_ADDR
// if not tmp then
31325: LD_VAR 0 1
31329: NOT
31330: IFFALSE 31334
// exit ;
31332: GO 31360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31334: LD_VAR 0 1
31338: PUSH
31339: LD_INT 1
31341: PPUSH
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 12
31351: ARRAY
31352: PPUSH
31353: LD_INT 1
31355: PPUSH
31356: CALL_OW 234
// end ;
31360: PPOPN 1
31362: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31363: LD_EXP 51
31367: PUSH
31368: LD_EXP 93
31372: AND
31373: IFFALSE 31514
31375: GO 31377
31377: DISABLE
31378: LD_INT 0
31380: PPUSH
31381: PPUSH
31382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 22
31390: PUSH
31391: LD_OWVAR 2
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 25
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 69
31418: ST_TO_ADDR
// if not tmp then
31419: LD_VAR 0 3
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 31514
// un := tmp [ rand ( 1 , tmp ) ] ;
31428: LD_ADDR_VAR 0 2
31432: PUSH
31433: LD_VAR 0 3
31437: PUSH
31438: LD_INT 1
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 12
31450: ARRAY
31451: ST_TO_ADDR
// if Crawls ( un ) then
31452: LD_VAR 0 2
31456: PPUSH
31457: CALL_OW 318
31461: IFFALSE 31472
// ComWalk ( un ) ;
31463: LD_VAR 0 2
31467: PPUSH
31468: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_INT 9
31479: PPUSH
31480: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31484: LD_INT 28
31486: PPUSH
31487: LD_OWVAR 2
31491: PPUSH
31492: LD_INT 2
31494: PPUSH
31495: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31499: LD_INT 29
31501: PPUSH
31502: LD_OWVAR 2
31506: PPUSH
31507: LD_INT 2
31509: PPUSH
31510: CALL_OW 322
// end ;
31514: PPOPN 3
31516: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31517: LD_EXP 51
31521: PUSH
31522: LD_EXP 94
31526: AND
31527: IFFALSE 31638
31529: GO 31531
31531: DISABLE
31532: LD_INT 0
31534: PPUSH
31535: PPUSH
31536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 22
31544: PUSH
31545: LD_OWVAR 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 25
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 69
31572: ST_TO_ADDR
// if not tmp then
31573: LD_VAR 0 3
31577: NOT
31578: IFFALSE 31582
// exit ;
31580: GO 31638
// un := tmp [ rand ( 1 , tmp ) ] ;
31582: LD_ADDR_VAR 0 2
31586: PUSH
31587: LD_VAR 0 3
31591: PUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_VAR 0 3
31599: PPUSH
31600: CALL_OW 12
31604: ARRAY
31605: ST_TO_ADDR
// if Crawls ( un ) then
31606: LD_VAR 0 2
31610: PPUSH
31611: CALL_OW 318
31615: IFFALSE 31626
// ComWalk ( un ) ;
31617: LD_VAR 0 2
31621: PPUSH
31622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31626: LD_VAR 0 2
31630: PPUSH
31631: LD_INT 8
31633: PPUSH
31634: CALL_OW 336
// end ;
31638: PPOPN 3
31640: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31641: LD_EXP 51
31645: PUSH
31646: LD_EXP 95
31650: AND
31651: IFFALSE 31795
31653: GO 31655
31655: DISABLE
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 22
31667: PUSH
31668: LD_OWVAR 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 21
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 34
31692: PUSH
31693: LD_INT 12
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 34
31702: PUSH
31703: LD_INT 51
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 34
31712: PUSH
31713: LD_INT 32
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PPUSH
31731: CALL_OW 69
31735: ST_TO_ADDR
// if not tmp then
31736: LD_VAR 0 2
31740: NOT
31741: IFFALSE 31745
// exit ;
31743: GO 31795
// for i in tmp do
31745: LD_ADDR_VAR 0 1
31749: PUSH
31750: LD_VAR 0 2
31754: PUSH
31755: FOR_IN
31756: IFFALSE 31793
// if GetCargo ( i , mat_artifact ) = 0 then
31758: LD_VAR 0 1
31762: PPUSH
31763: LD_INT 4
31765: PPUSH
31766: CALL_OW 289
31770: PUSH
31771: LD_INT 0
31773: EQUAL
31774: IFFALSE 31791
// SetCargo ( i , mat_siberit , 100 ) ;
31776: LD_VAR 0 1
31780: PPUSH
31781: LD_INT 3
31783: PPUSH
31784: LD_INT 100
31786: PPUSH
31787: CALL_OW 290
31791: GO 31755
31793: POP
31794: POP
// end ;
31795: PPOPN 2
31797: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31798: LD_EXP 51
31802: PUSH
31803: LD_EXP 96
31807: AND
31808: IFFALSE 31991
31810: GO 31812
31812: DISABLE
31813: LD_INT 0
31815: PPUSH
31816: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31817: LD_ADDR_VAR 0 2
31821: PUSH
31822: LD_INT 22
31824: PUSH
31825: LD_OWVAR 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PPUSH
31834: CALL_OW 69
31838: ST_TO_ADDR
// if not tmp then
31839: LD_VAR 0 2
31843: NOT
31844: IFFALSE 31848
// exit ;
31846: GO 31991
// for i := 1 to 2 do
31848: LD_ADDR_VAR 0 1
31852: PUSH
31853: DOUBLE
31854: LD_INT 1
31856: DEC
31857: ST_TO_ADDR
31858: LD_INT 2
31860: PUSH
31861: FOR_TO
31862: IFFALSE 31989
// begin uc_side := your_side ;
31864: LD_ADDR_OWVAR 20
31868: PUSH
31869: LD_OWVAR 2
31873: ST_TO_ADDR
// uc_nation := nation_american ;
31874: LD_ADDR_OWVAR 21
31878: PUSH
31879: LD_INT 1
31881: ST_TO_ADDR
// vc_chassis := us_morphling ;
31882: LD_ADDR_OWVAR 37
31886: PUSH
31887: LD_INT 5
31889: ST_TO_ADDR
// vc_engine := engine_siberite ;
31890: LD_ADDR_OWVAR 39
31894: PUSH
31895: LD_INT 3
31897: ST_TO_ADDR
// vc_control := control_computer ;
31898: LD_ADDR_OWVAR 38
31902: PUSH
31903: LD_INT 3
31905: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31906: LD_ADDR_OWVAR 40
31910: PUSH
31911: LD_INT 10
31913: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31914: LD_VAR 0 2
31918: PUSH
31919: LD_INT 1
31921: ARRAY
31922: PPUSH
31923: CALL_OW 310
31927: NOT
31928: IFFALSE 31975
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31930: CALL_OW 45
31934: PPUSH
31935: LD_VAR 0 2
31939: PUSH
31940: LD_INT 1
31942: ARRAY
31943: PPUSH
31944: CALL_OW 250
31948: PPUSH
31949: LD_VAR 0 2
31953: PUSH
31954: LD_INT 1
31956: ARRAY
31957: PPUSH
31958: CALL_OW 251
31962: PPUSH
31963: LD_INT 12
31965: PPUSH
31966: LD_INT 1
31968: PPUSH
31969: CALL_OW 50
31973: GO 31987
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31975: CALL_OW 45
31979: PPUSH
31980: LD_INT 1
31982: PPUSH
31983: CALL_OW 51
// end ;
31987: GO 31861
31989: POP
31990: POP
// end ;
31991: PPOPN 2
31993: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31994: LD_EXP 51
31998: PUSH
31999: LD_EXP 97
32003: AND
32004: IFFALSE 32226
32006: GO 32008
32008: DISABLE
32009: LD_INT 0
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32017: LD_ADDR_VAR 0 6
32021: PUSH
32022: LD_INT 22
32024: PUSH
32025: LD_OWVAR 2
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 21
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: LD_INT 23
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: LIST
32065: PPUSH
32066: CALL_OW 69
32070: ST_TO_ADDR
// if not tmp then
32071: LD_VAR 0 6
32075: NOT
32076: IFFALSE 32080
// exit ;
32078: GO 32226
// s1 := rand ( 1 , 4 ) ;
32080: LD_ADDR_VAR 0 2
32084: PUSH
32085: LD_INT 1
32087: PPUSH
32088: LD_INT 4
32090: PPUSH
32091: CALL_OW 12
32095: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32096: LD_ADDR_VAR 0 4
32100: PUSH
32101: LD_VAR 0 6
32105: PUSH
32106: LD_INT 1
32108: ARRAY
32109: PPUSH
32110: LD_VAR 0 2
32114: PPUSH
32115: CALL_OW 259
32119: ST_TO_ADDR
// if s1 = 1 then
32120: LD_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: EQUAL
32128: IFFALSE 32148
// s2 := rand ( 2 , 4 ) else
32130: LD_ADDR_VAR 0 3
32134: PUSH
32135: LD_INT 2
32137: PPUSH
32138: LD_INT 4
32140: PPUSH
32141: CALL_OW 12
32145: ST_TO_ADDR
32146: GO 32156
// s2 := 1 ;
32148: LD_ADDR_VAR 0 3
32152: PUSH
32153: LD_INT 1
32155: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32156: LD_ADDR_VAR 0 5
32160: PUSH
32161: LD_VAR 0 6
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: CALL_OW 259
32179: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32180: LD_VAR 0 6
32184: PUSH
32185: LD_INT 1
32187: ARRAY
32188: PPUSH
32189: LD_VAR 0 2
32193: PPUSH
32194: LD_VAR 0 5
32198: PPUSH
32199: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32203: LD_VAR 0 6
32207: PUSH
32208: LD_INT 1
32210: ARRAY
32211: PPUSH
32212: LD_VAR 0 3
32216: PPUSH
32217: LD_VAR 0 4
32221: PPUSH
32222: CALL_OW 237
// end ;
32226: PPOPN 6
32228: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32229: LD_EXP 51
32233: PUSH
32234: LD_EXP 98
32238: AND
32239: IFFALSE 32318
32241: GO 32243
32243: DISABLE
32244: LD_INT 0
32246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32247: LD_ADDR_VAR 0 1
32251: PUSH
32252: LD_INT 22
32254: PUSH
32255: LD_OWVAR 2
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 30
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PPUSH
32278: CALL_OW 69
32282: ST_TO_ADDR
// if not tmp then
32283: LD_VAR 0 1
32287: NOT
32288: IFFALSE 32292
// exit ;
32290: GO 32318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32292: LD_VAR 0 1
32296: PUSH
32297: LD_INT 1
32299: PPUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 12
32309: ARRAY
32310: PPUSH
32311: LD_INT 1
32313: PPUSH
32314: CALL_OW 234
// end ;
32318: PPOPN 1
32320: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32321: LD_EXP 51
32325: PUSH
32326: LD_EXP 99
32330: AND
32331: IFFALSE 32443
32333: GO 32335
32335: DISABLE
32336: LD_INT 0
32338: PPUSH
32339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_INT 22
32347: PUSH
32348: LD_OWVAR 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 30
32362: PUSH
32363: LD_INT 27
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 30
32372: PUSH
32373: LD_INT 26
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 30
32382: PUSH
32383: LD_INT 28
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PPUSH
32400: CALL_OW 69
32404: ST_TO_ADDR
// if not tmp then
32405: LD_VAR 0 2
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 32443
// for i in tmp do
32414: LD_ADDR_VAR 0 1
32418: PUSH
32419: LD_VAR 0 2
32423: PUSH
32424: FOR_IN
32425: IFFALSE 32441
// SetLives ( i , 1 ) ;
32427: LD_VAR 0 1
32431: PPUSH
32432: LD_INT 1
32434: PPUSH
32435: CALL_OW 234
32439: GO 32424
32441: POP
32442: POP
// end ;
32443: PPOPN 2
32445: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32446: LD_EXP 51
32450: PUSH
32451: LD_EXP 100
32455: AND
32456: IFFALSE 32743
32458: GO 32460
32460: DISABLE
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
32465: PPUSH
// begin i := rand ( 1 , 7 ) ;
32466: LD_ADDR_VAR 0 1
32470: PUSH
32471: LD_INT 1
32473: PPUSH
32474: LD_INT 7
32476: PPUSH
32477: CALL_OW 12
32481: ST_TO_ADDR
// case i of 1 :
32482: LD_VAR 0 1
32486: PUSH
32487: LD_INT 1
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32505
32495: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32496: LD_STRING earthquake(getX(game), 0, 32)
32498: PPUSH
32499: CALL_OW 559
32503: GO 32743
32505: LD_INT 2
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32527
32513: POP
// begin ToLua ( displayStucuk(); ) ;
32514: LD_STRING displayStucuk();
32516: PPUSH
32517: CALL_OW 559
// ResetFog ;
32521: CALL_OW 335
// end ; 3 :
32525: GO 32743
32527: LD_INT 3
32529: DOUBLE
32530: EQUAL
32531: IFTRUE 32535
32533: GO 32639
32535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32536: LD_ADDR_VAR 0 2
32540: PUSH
32541: LD_INT 22
32543: PUSH
32544: LD_OWVAR 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 25
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PPUSH
32567: CALL_OW 69
32571: ST_TO_ADDR
// if not tmp then
32572: LD_VAR 0 2
32576: NOT
32577: IFFALSE 32581
// exit ;
32579: GO 32743
// un := tmp [ rand ( 1 , tmp ) ] ;
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 1
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: CALL_OW 12
32603: ARRAY
32604: ST_TO_ADDR
// if Crawls ( un ) then
32605: LD_VAR 0 3
32609: PPUSH
32610: CALL_OW 318
32614: IFFALSE 32625
// ComWalk ( un ) ;
32616: LD_VAR 0 3
32620: PPUSH
32621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32625: LD_VAR 0 3
32629: PPUSH
32630: LD_INT 8
32632: PPUSH
32633: CALL_OW 336
// end ; 4 :
32637: GO 32743
32639: LD_INT 4
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32721
32647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32648: LD_ADDR_VAR 0 2
32652: PUSH
32653: LD_INT 22
32655: PUSH
32656: LD_OWVAR 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 30
32667: PUSH
32668: LD_INT 29
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PPUSH
32679: CALL_OW 69
32683: ST_TO_ADDR
// if not tmp then
32684: LD_VAR 0 2
32688: NOT
32689: IFFALSE 32693
// exit ;
32691: GO 32743
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32693: LD_VAR 0 2
32697: PUSH
32698: LD_INT 1
32700: ARRAY
32701: PPUSH
32702: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32706: LD_VAR 0 2
32710: PUSH
32711: LD_INT 1
32713: ARRAY
32714: PPUSH
32715: CALL_OW 65
// end ; 5 .. 7 :
32719: GO 32743
32721: LD_INT 5
32723: DOUBLE
32724: GREATEREQUAL
32725: IFFALSE 32733
32727: LD_INT 7
32729: DOUBLE
32730: LESSEQUAL
32731: IFTRUE 32735
32733: GO 32742
32735: POP
// StreamSibBomb ; end ;
32736: CALL 28980 0 0
32740: GO 32743
32742: POP
// end ;
32743: PPOPN 3
32745: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32746: LD_EXP 51
32750: PUSH
32751: LD_EXP 101
32755: AND
32756: IFFALSE 32912
32758: GO 32760
32760: DISABLE
32761: LD_INT 0
32763: PPUSH
32764: PPUSH
32765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32766: LD_ADDR_VAR 0 2
32770: PUSH
32771: LD_INT 81
32773: PUSH
32774: LD_OWVAR 2
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 21
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 21
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PPUSH
32815: CALL_OW 69
32819: ST_TO_ADDR
// if not tmp then
32820: LD_VAR 0 2
32824: NOT
32825: IFFALSE 32829
// exit ;
32827: GO 32912
// p := 0 ;
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_INT 0
32836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32837: LD_INT 35
32839: PPUSH
32840: CALL_OW 67
// p := p + 1 ;
32844: LD_ADDR_VAR 0 3
32848: PUSH
32849: LD_VAR 0 3
32853: PUSH
32854: LD_INT 1
32856: PLUS
32857: ST_TO_ADDR
// for i in tmp do
32858: LD_ADDR_VAR 0 1
32862: PUSH
32863: LD_VAR 0 2
32867: PUSH
32868: FOR_IN
32869: IFFALSE 32900
// if GetLives ( i ) < 1000 then
32871: LD_VAR 0 1
32875: PPUSH
32876: CALL_OW 256
32880: PUSH
32881: LD_INT 1000
32883: LESS
32884: IFFALSE 32898
// SetLives ( i , 1000 ) ;
32886: LD_VAR 0 1
32890: PPUSH
32891: LD_INT 1000
32893: PPUSH
32894: CALL_OW 234
32898: GO 32868
32900: POP
32901: POP
// until p > 20 ;
32902: LD_VAR 0 3
32906: PUSH
32907: LD_INT 20
32909: GREATER
32910: IFFALSE 32837
// end ;
32912: PPOPN 3
32914: END
// every 0 0$1 trigger StreamModeActive and sTime do
32915: LD_EXP 51
32919: PUSH
32920: LD_EXP 102
32924: AND
32925: IFFALSE 32960
32927: GO 32929
32929: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32930: LD_INT 28
32932: PPUSH
32933: LD_OWVAR 2
32937: PPUSH
32938: LD_INT 2
32940: PPUSH
32941: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32945: LD_INT 30
32947: PPUSH
32948: LD_OWVAR 2
32952: PPUSH
32953: LD_INT 2
32955: PPUSH
32956: CALL_OW 322
// end ;
32960: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32961: LD_EXP 51
32965: PUSH
32966: LD_EXP 103
32970: AND
32971: IFFALSE 33092
32973: GO 32975
32975: DISABLE
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32980: LD_ADDR_VAR 0 2
32984: PUSH
32985: LD_INT 22
32987: PUSH
32988: LD_OWVAR 2
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 21
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: PPUSH
33029: CALL_OW 69
33033: ST_TO_ADDR
// if not tmp then
33034: LD_VAR 0 2
33038: NOT
33039: IFFALSE 33043
// exit ;
33041: GO 33092
// for i in tmp do
33043: LD_ADDR_VAR 0 1
33047: PUSH
33048: LD_VAR 0 2
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33090
// begin if Crawls ( i ) then
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL_OW 318
33065: IFFALSE 33076
// ComWalk ( i ) ;
33067: LD_VAR 0 1
33071: PPUSH
33072: CALL_OW 138
// SetClass ( i , 2 ) ;
33076: LD_VAR 0 1
33080: PPUSH
33081: LD_INT 2
33083: PPUSH
33084: CALL_OW 336
// end ;
33088: GO 33053
33090: POP
33091: POP
// end ;
33092: PPOPN 2
33094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33095: LD_EXP 51
33099: PUSH
33100: LD_EXP 104
33104: AND
33105: IFFALSE 33393
33107: GO 33109
33109: DISABLE
33110: LD_INT 0
33112: PPUSH
33113: PPUSH
33114: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33115: LD_OWVAR 2
33119: PPUSH
33120: LD_INT 9
33122: PPUSH
33123: LD_INT 1
33125: PPUSH
33126: LD_INT 1
33128: PPUSH
33129: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33133: LD_INT 9
33135: PPUSH
33136: LD_OWVAR 2
33140: PPUSH
33141: CALL_OW 343
// uc_side := 9 ;
33145: LD_ADDR_OWVAR 20
33149: PUSH
33150: LD_INT 9
33152: ST_TO_ADDR
// uc_nation := 2 ;
33153: LD_ADDR_OWVAR 21
33157: PUSH
33158: LD_INT 2
33160: ST_TO_ADDR
// hc_name := Dark Warrior ;
33161: LD_ADDR_OWVAR 26
33165: PUSH
33166: LD_STRING Dark Warrior
33168: ST_TO_ADDR
// hc_gallery :=  ;
33169: LD_ADDR_OWVAR 33
33173: PUSH
33174: LD_STRING 
33176: ST_TO_ADDR
// hc_noskilllimit := true ;
33177: LD_ADDR_OWVAR 76
33181: PUSH
33182: LD_INT 1
33184: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33185: LD_ADDR_OWVAR 31
33189: PUSH
33190: LD_INT 30
33192: PUSH
33193: LD_INT 30
33195: PUSH
33196: LD_INT 30
33198: PUSH
33199: LD_INT 30
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: ST_TO_ADDR
// un := CreateHuman ;
33208: LD_ADDR_VAR 0 3
33212: PUSH
33213: CALL_OW 44
33217: ST_TO_ADDR
// hc_noskilllimit := false ;
33218: LD_ADDR_OWVAR 76
33222: PUSH
33223: LD_INT 0
33225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33226: LD_VAR 0 3
33230: PPUSH
33231: LD_INT 1
33233: PPUSH
33234: CALL_OW 51
// ToLua ( playRanger() ) ;
33238: LD_STRING playRanger()
33240: PPUSH
33241: CALL_OW 559
// p := 0 ;
33245: LD_ADDR_VAR 0 2
33249: PUSH
33250: LD_INT 0
33252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33253: LD_INT 35
33255: PPUSH
33256: CALL_OW 67
// p := p + 1 ;
33260: LD_ADDR_VAR 0 2
33264: PUSH
33265: LD_VAR 0 2
33269: PUSH
33270: LD_INT 1
33272: PLUS
33273: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33274: LD_VAR 0 3
33278: PPUSH
33279: CALL_OW 256
33283: PUSH
33284: LD_INT 1000
33286: LESS
33287: IFFALSE 33301
// SetLives ( un , 1000 ) ;
33289: LD_VAR 0 3
33293: PPUSH
33294: LD_INT 1000
33296: PPUSH
33297: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33301: LD_VAR 0 3
33305: PPUSH
33306: LD_INT 81
33308: PUSH
33309: LD_OWVAR 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 91
33320: PUSH
33321: LD_VAR 0 3
33325: PUSH
33326: LD_INT 30
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PPUSH
33338: CALL_OW 69
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: CALL_OW 74
33352: PPUSH
33353: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33357: LD_VAR 0 2
33361: PUSH
33362: LD_INT 80
33364: GREATER
33365: PUSH
33366: LD_VAR 0 3
33370: PPUSH
33371: CALL_OW 301
33375: OR
33376: IFFALSE 33253
// if un then
33378: LD_VAR 0 3
33382: IFFALSE 33393
// RemoveUnit ( un ) ;
33384: LD_VAR 0 3
33388: PPUSH
33389: CALL_OW 64
// end ;
33393: PPOPN 3
33395: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33396: LD_EXP 105
33400: IFFALSE 33516
33402: GO 33404
33404: DISABLE
33405: LD_INT 0
33407: PPUSH
33408: PPUSH
33409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33410: LD_ADDR_VAR 0 2
33414: PUSH
33415: LD_INT 81
33417: PUSH
33418: LD_OWVAR 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 21
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL_OW 69
33445: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33446: LD_STRING playComputer()
33448: PPUSH
33449: CALL_OW 559
// if not tmp then
33453: LD_VAR 0 2
33457: NOT
33458: IFFALSE 33462
// exit ;
33460: GO 33516
// for i in tmp do
33462: LD_ADDR_VAR 0 1
33466: PUSH
33467: LD_VAR 0 2
33471: PUSH
33472: FOR_IN
33473: IFFALSE 33514
// for j := 1 to 4 do
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: DOUBLE
33481: LD_INT 1
33483: DEC
33484: ST_TO_ADDR
33485: LD_INT 4
33487: PUSH
33488: FOR_TO
33489: IFFALSE 33510
// SetSkill ( i , j , 10 ) ;
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_VAR 0 3
33500: PPUSH
33501: LD_INT 10
33503: PPUSH
33504: CALL_OW 237
33508: GO 33488
33510: POP
33511: POP
33512: GO 33472
33514: POP
33515: POP
// end ;
33516: PPOPN 3
33518: END
// every 0 0$1 trigger s30 do var i , tmp ;
33519: LD_EXP 106
33523: IFFALSE 33592
33525: GO 33527
33527: DISABLE
33528: LD_INT 0
33530: PPUSH
33531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33532: LD_ADDR_VAR 0 2
33536: PUSH
33537: LD_INT 22
33539: PUSH
33540: LD_OWVAR 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PPUSH
33549: CALL_OW 69
33553: ST_TO_ADDR
// if not tmp then
33554: LD_VAR 0 2
33558: NOT
33559: IFFALSE 33563
// exit ;
33561: GO 33592
// for i in tmp do
33563: LD_ADDR_VAR 0 1
33567: PUSH
33568: LD_VAR 0 2
33572: PUSH
33573: FOR_IN
33574: IFFALSE 33590
// SetLives ( i , 300 ) ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_INT 300
33583: PPUSH
33584: CALL_OW 234
33588: GO 33573
33590: POP
33591: POP
// end ;
33592: PPOPN 2
33594: END
// every 0 0$1 trigger s60 do var i , tmp ;
33595: LD_EXP 107
33599: IFFALSE 33668
33601: GO 33603
33603: DISABLE
33604: LD_INT 0
33606: PPUSH
33607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33608: LD_ADDR_VAR 0 2
33612: PUSH
33613: LD_INT 22
33615: PUSH
33616: LD_OWVAR 2
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 69
33629: ST_TO_ADDR
// if not tmp then
33630: LD_VAR 0 2
33634: NOT
33635: IFFALSE 33639
// exit ;
33637: GO 33668
// for i in tmp do
33639: LD_ADDR_VAR 0 1
33643: PUSH
33644: LD_VAR 0 2
33648: PUSH
33649: FOR_IN
33650: IFFALSE 33666
// SetLives ( i , 600 ) ;
33652: LD_VAR 0 1
33656: PPUSH
33657: LD_INT 600
33659: PPUSH
33660: CALL_OW 234
33664: GO 33649
33666: POP
33667: POP
// end ;
33668: PPOPN 2
33670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33671: LD_INT 0
33673: PPUSH
// case cmd of 301 :
33674: LD_VAR 0 1
33678: PUSH
33679: LD_INT 301
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33719
33687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33688: LD_VAR 0 6
33692: PPUSH
33693: LD_VAR 0 7
33697: PPUSH
33698: LD_VAR 0 8
33702: PPUSH
33703: LD_VAR 0 4
33707: PPUSH
33708: LD_VAR 0 5
33712: PPUSH
33713: CALL 34920 0 5
33717: GO 33840
33719: LD_INT 302
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33764
33727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33728: LD_VAR 0 6
33732: PPUSH
33733: LD_VAR 0 7
33737: PPUSH
33738: LD_VAR 0 8
33742: PPUSH
33743: LD_VAR 0 9
33747: PPUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: LD_VAR 0 5
33757: PPUSH
33758: CALL 35011 0 6
33762: GO 33840
33764: LD_INT 303
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33772
33770: GO 33809
33772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33773: LD_VAR 0 6
33777: PPUSH
33778: LD_VAR 0 7
33782: PPUSH
33783: LD_VAR 0 8
33787: PPUSH
33788: LD_VAR 0 9
33792: PPUSH
33793: LD_VAR 0 4
33797: PPUSH
33798: LD_VAR 0 5
33802: PPUSH
33803: CALL 33845 0 6
33807: GO 33840
33809: LD_INT 304
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 33839
33817: POP
// hHackTeleport ( unit , x , y ) ; end ;
33818: LD_VAR 0 2
33822: PPUSH
33823: LD_VAR 0 4
33827: PPUSH
33828: LD_VAR 0 5
33832: PPUSH
33833: CALL 35604 0 3
33837: GO 33840
33839: POP
// end ;
33840: LD_VAR 0 12
33844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33845: LD_INT 0
33847: PPUSH
33848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33849: LD_VAR 0 1
33853: PUSH
33854: LD_INT 1
33856: LESS
33857: PUSH
33858: LD_VAR 0 1
33862: PUSH
33863: LD_INT 3
33865: GREATER
33866: OR
33867: PUSH
33868: LD_VAR 0 5
33872: PPUSH
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 428
33882: OR
33883: IFFALSE 33887
// exit ;
33885: GO 34607
// uc_side := your_side ;
33887: LD_ADDR_OWVAR 20
33891: PUSH
33892: LD_OWVAR 2
33896: ST_TO_ADDR
// uc_nation := nation ;
33897: LD_ADDR_OWVAR 21
33901: PUSH
33902: LD_VAR 0 1
33906: ST_TO_ADDR
// bc_level = 1 ;
33907: LD_ADDR_OWVAR 43
33911: PUSH
33912: LD_INT 1
33914: ST_TO_ADDR
// case btype of 1 :
33915: LD_VAR 0 2
33919: PUSH
33920: LD_INT 1
33922: DOUBLE
33923: EQUAL
33924: IFTRUE 33928
33926: GO 33939
33928: POP
// bc_type := b_depot ; 2 :
33929: LD_ADDR_OWVAR 42
33933: PUSH
33934: LD_INT 0
33936: ST_TO_ADDR
33937: GO 34551
33939: LD_INT 2
33941: DOUBLE
33942: EQUAL
33943: IFTRUE 33947
33945: GO 33958
33947: POP
// bc_type := b_warehouse ; 3 :
33948: LD_ADDR_OWVAR 42
33952: PUSH
33953: LD_INT 1
33955: ST_TO_ADDR
33956: GO 34551
33958: LD_INT 3
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 33966
33964: GO 33977
33966: POP
// bc_type := b_lab ; 4 .. 9 :
33967: LD_ADDR_OWVAR 42
33971: PUSH
33972: LD_INT 6
33974: ST_TO_ADDR
33975: GO 34551
33977: LD_INT 4
33979: DOUBLE
33980: GREATEREQUAL
33981: IFFALSE 33989
33983: LD_INT 9
33985: DOUBLE
33986: LESSEQUAL
33987: IFTRUE 33991
33989: GO 34043
33991: POP
// begin bc_type := b_lab_half ;
33992: LD_ADDR_OWVAR 42
33996: PUSH
33997: LD_INT 7
33999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34000: LD_ADDR_OWVAR 44
34004: PUSH
34005: LD_INT 10
34007: PUSH
34008: LD_INT 11
34010: PUSH
34011: LD_INT 12
34013: PUSH
34014: LD_INT 15
34016: PUSH
34017: LD_INT 14
34019: PUSH
34020: LD_INT 13
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: PUSH
34031: LD_VAR 0 2
34035: PUSH
34036: LD_INT 3
34038: MINUS
34039: ARRAY
34040: ST_TO_ADDR
// end ; 10 .. 13 :
34041: GO 34551
34043: LD_INT 10
34045: DOUBLE
34046: GREATEREQUAL
34047: IFFALSE 34055
34049: LD_INT 13
34051: DOUBLE
34052: LESSEQUAL
34053: IFTRUE 34057
34055: GO 34134
34057: POP
// begin bc_type := b_lab_full ;
34058: LD_ADDR_OWVAR 42
34062: PUSH
34063: LD_INT 8
34065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34066: LD_ADDR_OWVAR 44
34070: PUSH
34071: LD_INT 10
34073: PUSH
34074: LD_INT 12
34076: PUSH
34077: LD_INT 14
34079: PUSH
34080: LD_INT 13
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: PUSH
34089: LD_VAR 0 2
34093: PUSH
34094: LD_INT 9
34096: MINUS
34097: ARRAY
34098: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34099: LD_ADDR_OWVAR 45
34103: PUSH
34104: LD_INT 11
34106: PUSH
34107: LD_INT 15
34109: PUSH
34110: LD_INT 12
34112: PUSH
34113: LD_INT 15
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: PUSH
34122: LD_VAR 0 2
34126: PUSH
34127: LD_INT 9
34129: MINUS
34130: ARRAY
34131: ST_TO_ADDR
// end ; 14 :
34132: GO 34551
34134: LD_INT 14
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34142
34140: GO 34153
34142: POP
// bc_type := b_workshop ; 15 :
34143: LD_ADDR_OWVAR 42
34147: PUSH
34148: LD_INT 2
34150: ST_TO_ADDR
34151: GO 34551
34153: LD_INT 15
34155: DOUBLE
34156: EQUAL
34157: IFTRUE 34161
34159: GO 34172
34161: POP
// bc_type := b_factory ; 16 :
34162: LD_ADDR_OWVAR 42
34166: PUSH
34167: LD_INT 3
34169: ST_TO_ADDR
34170: GO 34551
34172: LD_INT 16
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34191
34180: POP
// bc_type := b_ext_gun ; 17 :
34181: LD_ADDR_OWVAR 42
34185: PUSH
34186: LD_INT 17
34188: ST_TO_ADDR
34189: GO 34551
34191: LD_INT 17
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34199
34197: GO 34227
34199: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34200: LD_ADDR_OWVAR 42
34204: PUSH
34205: LD_INT 19
34207: PUSH
34208: LD_INT 23
34210: PUSH
34211: LD_INT 19
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: LD_VAR 0 1
34223: ARRAY
34224: ST_TO_ADDR
34225: GO 34551
34227: LD_INT 18
34229: DOUBLE
34230: EQUAL
34231: IFTRUE 34235
34233: GO 34246
34235: POP
// bc_type := b_ext_radar ; 19 :
34236: LD_ADDR_OWVAR 42
34240: PUSH
34241: LD_INT 20
34243: ST_TO_ADDR
34244: GO 34551
34246: LD_INT 19
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34265
34254: POP
// bc_type := b_ext_radio ; 20 :
34255: LD_ADDR_OWVAR 42
34259: PUSH
34260: LD_INT 22
34262: ST_TO_ADDR
34263: GO 34551
34265: LD_INT 20
34267: DOUBLE
34268: EQUAL
34269: IFTRUE 34273
34271: GO 34284
34273: POP
// bc_type := b_ext_siberium ; 21 :
34274: LD_ADDR_OWVAR 42
34278: PUSH
34279: LD_INT 21
34281: ST_TO_ADDR
34282: GO 34551
34284: LD_INT 21
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34292
34290: GO 34303
34292: POP
// bc_type := b_ext_computer ; 22 :
34293: LD_ADDR_OWVAR 42
34297: PUSH
34298: LD_INT 24
34300: ST_TO_ADDR
34301: GO 34551
34303: LD_INT 22
34305: DOUBLE
34306: EQUAL
34307: IFTRUE 34311
34309: GO 34322
34311: POP
// bc_type := b_ext_track ; 23 :
34312: LD_ADDR_OWVAR 42
34316: PUSH
34317: LD_INT 16
34319: ST_TO_ADDR
34320: GO 34551
34322: LD_INT 23
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34330
34328: GO 34341
34330: POP
// bc_type := b_ext_laser ; 24 :
34331: LD_ADDR_OWVAR 42
34335: PUSH
34336: LD_INT 25
34338: ST_TO_ADDR
34339: GO 34551
34341: LD_INT 24
34343: DOUBLE
34344: EQUAL
34345: IFTRUE 34349
34347: GO 34360
34349: POP
// bc_type := b_control_tower ; 25 :
34350: LD_ADDR_OWVAR 42
34354: PUSH
34355: LD_INT 36
34357: ST_TO_ADDR
34358: GO 34551
34360: LD_INT 25
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34379
34368: POP
// bc_type := b_breastwork ; 26 :
34369: LD_ADDR_OWVAR 42
34373: PUSH
34374: LD_INT 31
34376: ST_TO_ADDR
34377: GO 34551
34379: LD_INT 26
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 34398
34387: POP
// bc_type := b_bunker ; 27 :
34388: LD_ADDR_OWVAR 42
34392: PUSH
34393: LD_INT 32
34395: ST_TO_ADDR
34396: GO 34551
34398: LD_INT 27
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34406
34404: GO 34417
34406: POP
// bc_type := b_turret ; 28 :
34407: LD_ADDR_OWVAR 42
34411: PUSH
34412: LD_INT 33
34414: ST_TO_ADDR
34415: GO 34551
34417: LD_INT 28
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34436
34425: POP
// bc_type := b_armoury ; 29 :
34426: LD_ADDR_OWVAR 42
34430: PUSH
34431: LD_INT 4
34433: ST_TO_ADDR
34434: GO 34551
34436: LD_INT 29
34438: DOUBLE
34439: EQUAL
34440: IFTRUE 34444
34442: GO 34455
34444: POP
// bc_type := b_barracks ; 30 :
34445: LD_ADDR_OWVAR 42
34449: PUSH
34450: LD_INT 5
34452: ST_TO_ADDR
34453: GO 34551
34455: LD_INT 30
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34474
34463: POP
// bc_type := b_solar_power ; 31 :
34464: LD_ADDR_OWVAR 42
34468: PUSH
34469: LD_INT 27
34471: ST_TO_ADDR
34472: GO 34551
34474: LD_INT 31
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34493
34482: POP
// bc_type := b_oil_power ; 32 :
34483: LD_ADDR_OWVAR 42
34487: PUSH
34488: LD_INT 26
34490: ST_TO_ADDR
34491: GO 34551
34493: LD_INT 32
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34501
34499: GO 34512
34501: POP
// bc_type := b_siberite_power ; 33 :
34502: LD_ADDR_OWVAR 42
34506: PUSH
34507: LD_INT 28
34509: ST_TO_ADDR
34510: GO 34551
34512: LD_INT 33
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34531
34520: POP
// bc_type := b_oil_mine ; 34 :
34521: LD_ADDR_OWVAR 42
34525: PUSH
34526: LD_INT 29
34528: ST_TO_ADDR
34529: GO 34551
34531: LD_INT 34
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34550
34539: POP
// bc_type := b_siberite_mine ; end ;
34540: LD_ADDR_OWVAR 42
34544: PUSH
34545: LD_INT 30
34547: ST_TO_ADDR
34548: GO 34551
34550: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34551: LD_ADDR_VAR 0 8
34555: PUSH
34556: LD_VAR 0 5
34560: PPUSH
34561: LD_VAR 0 6
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: CALL_OW 47
34575: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34576: LD_OWVAR 42
34580: PUSH
34581: LD_INT 32
34583: PUSH
34584: LD_INT 33
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: IN
34591: IFFALSE 34607
// PlaceWeaponTurret ( b , weapon ) ;
34593: LD_VAR 0 8
34597: PPUSH
34598: LD_VAR 0 4
34602: PPUSH
34603: CALL_OW 431
// end ;
34607: LD_VAR 0 7
34611: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34612: LD_INT 0
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: LD_INT 22
34625: PUSH
34626: LD_OWVAR 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: LD_INT 30
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 30
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PPUSH
34667: CALL_OW 69
34671: ST_TO_ADDR
// if not tmp then
34672: LD_VAR 0 4
34676: NOT
34677: IFFALSE 34681
// exit ;
34679: GO 34740
// for i in tmp do
34681: LD_ADDR_VAR 0 2
34685: PUSH
34686: LD_VAR 0 4
34690: PUSH
34691: FOR_IN
34692: IFFALSE 34738
// for j = 1 to 3 do
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: DOUBLE
34700: LD_INT 1
34702: DEC
34703: ST_TO_ADDR
34704: LD_INT 3
34706: PUSH
34707: FOR_TO
34708: IFFALSE 34734
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34710: LD_VAR 0 2
34714: PPUSH
34715: CALL_OW 274
34719: PPUSH
34720: LD_VAR 0 3
34724: PPUSH
34725: LD_INT 99999
34727: PPUSH
34728: CALL_OW 277
34732: GO 34707
34734: POP
34735: POP
34736: GO 34691
34738: POP
34739: POP
// end ;
34740: LD_VAR 0 1
34744: RET
// export function hHackSetLevel10 ; var i , j ; begin
34745: LD_INT 0
34747: PPUSH
34748: PPUSH
34749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34750: LD_ADDR_VAR 0 2
34754: PUSH
34755: LD_INT 21
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PPUSH
34765: CALL_OW 69
34769: PUSH
34770: FOR_IN
34771: IFFALSE 34823
// if IsSelected ( i ) then
34773: LD_VAR 0 2
34777: PPUSH
34778: CALL_OW 306
34782: IFFALSE 34821
// begin for j := 1 to 4 do
34784: LD_ADDR_VAR 0 3
34788: PUSH
34789: DOUBLE
34790: LD_INT 1
34792: DEC
34793: ST_TO_ADDR
34794: LD_INT 4
34796: PUSH
34797: FOR_TO
34798: IFFALSE 34819
// SetSkill ( i , j , 10 ) ;
34800: LD_VAR 0 2
34804: PPUSH
34805: LD_VAR 0 3
34809: PPUSH
34810: LD_INT 10
34812: PPUSH
34813: CALL_OW 237
34817: GO 34797
34819: POP
34820: POP
// end ;
34821: GO 34770
34823: POP
34824: POP
// end ;
34825: LD_VAR 0 1
34829: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: LD_INT 22
34842: PUSH
34843: LD_OWVAR 2
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 21
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PPUSH
34866: CALL_OW 69
34870: PUSH
34871: FOR_IN
34872: IFFALSE 34913
// begin for j := 1 to 4 do
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: DOUBLE
34880: LD_INT 1
34882: DEC
34883: ST_TO_ADDR
34884: LD_INT 4
34886: PUSH
34887: FOR_TO
34888: IFFALSE 34909
// SetSkill ( i , j , 10 ) ;
34890: LD_VAR 0 2
34894: PPUSH
34895: LD_VAR 0 3
34899: PPUSH
34900: LD_INT 10
34902: PPUSH
34903: CALL_OW 237
34907: GO 34887
34909: POP
34910: POP
// end ;
34911: GO 34871
34913: POP
34914: POP
// end ;
34915: LD_VAR 0 1
34919: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34920: LD_INT 0
34922: PPUSH
// uc_side := your_side ;
34923: LD_ADDR_OWVAR 20
34927: PUSH
34928: LD_OWVAR 2
34932: ST_TO_ADDR
// uc_nation := nation ;
34933: LD_ADDR_OWVAR 21
34937: PUSH
34938: LD_VAR 0 1
34942: ST_TO_ADDR
// InitHc ;
34943: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34947: LD_INT 0
34949: PPUSH
34950: LD_VAR 0 2
34954: PPUSH
34955: LD_VAR 0 3
34959: PPUSH
34960: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34964: LD_VAR 0 4
34968: PPUSH
34969: LD_VAR 0 5
34973: PPUSH
34974: CALL_OW 428
34978: PUSH
34979: LD_INT 0
34981: EQUAL
34982: IFFALSE 35006
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34984: CALL_OW 44
34988: PPUSH
34989: LD_VAR 0 4
34993: PPUSH
34994: LD_VAR 0 5
34998: PPUSH
34999: LD_INT 1
35001: PPUSH
35002: CALL_OW 48
// end ;
35006: LD_VAR 0 6
35010: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35011: LD_INT 0
35013: PPUSH
35014: PPUSH
// uc_side := your_side ;
35015: LD_ADDR_OWVAR 20
35019: PUSH
35020: LD_OWVAR 2
35024: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35025: LD_VAR 0 1
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 3
35038: PUSH
35039: LD_INT 4
35041: PUSH
35042: LD_INT 5
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: IN
35052: IFFALSE 35064
// uc_nation := nation_american else
35054: LD_ADDR_OWVAR 21
35058: PUSH
35059: LD_INT 1
35061: ST_TO_ADDR
35062: GO 35107
// if chassis in [ 11 , 12 , 13 , 14 ] then
35064: LD_VAR 0 1
35068: PUSH
35069: LD_INT 11
35071: PUSH
35072: LD_INT 12
35074: PUSH
35075: LD_INT 13
35077: PUSH
35078: LD_INT 14
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: IN
35087: IFFALSE 35099
// uc_nation := nation_arabian else
35089: LD_ADDR_OWVAR 21
35093: PUSH
35094: LD_INT 2
35096: ST_TO_ADDR
35097: GO 35107
// uc_nation := nation_russian ;
35099: LD_ADDR_OWVAR 21
35103: PUSH
35104: LD_INT 3
35106: ST_TO_ADDR
// vc_chassis := chassis ;
35107: LD_ADDR_OWVAR 37
35111: PUSH
35112: LD_VAR 0 1
35116: ST_TO_ADDR
// vc_engine := engine ;
35117: LD_ADDR_OWVAR 39
35121: PUSH
35122: LD_VAR 0 2
35126: ST_TO_ADDR
// vc_control := control ;
35127: LD_ADDR_OWVAR 38
35131: PUSH
35132: LD_VAR 0 3
35136: ST_TO_ADDR
// vc_weapon := weapon ;
35137: LD_ADDR_OWVAR 40
35141: PUSH
35142: LD_VAR 0 4
35146: ST_TO_ADDR
// un := CreateVehicle ;
35147: LD_ADDR_VAR 0 8
35151: PUSH
35152: CALL_OW 45
35156: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35157: LD_VAR 0 8
35161: PPUSH
35162: LD_INT 0
35164: PPUSH
35165: LD_INT 5
35167: PPUSH
35168: CALL_OW 12
35172: PPUSH
35173: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35177: LD_VAR 0 8
35181: PPUSH
35182: LD_VAR 0 5
35186: PPUSH
35187: LD_VAR 0 6
35191: PPUSH
35192: LD_INT 1
35194: PPUSH
35195: CALL_OW 48
// end ;
35199: LD_VAR 0 7
35203: RET
// export hInvincible ; every 1 do
35204: GO 35206
35206: DISABLE
// hInvincible := [ ] ;
35207: LD_ADDR_EXP 108
35211: PUSH
35212: EMPTY
35213: ST_TO_ADDR
35214: END
// every 10 do var i ;
35215: GO 35217
35217: DISABLE
35218: LD_INT 0
35220: PPUSH
// begin enable ;
35221: ENABLE
// if not hInvincible then
35222: LD_EXP 108
35226: NOT
35227: IFFALSE 35231
// exit ;
35229: GO 35275
// for i in hInvincible do
35231: LD_ADDR_VAR 0 1
35235: PUSH
35236: LD_EXP 108
35240: PUSH
35241: FOR_IN
35242: IFFALSE 35273
// if GetLives ( i ) < 1000 then
35244: LD_VAR 0 1
35248: PPUSH
35249: CALL_OW 256
35253: PUSH
35254: LD_INT 1000
35256: LESS
35257: IFFALSE 35271
// SetLives ( i , 1000 ) ;
35259: LD_VAR 0 1
35263: PPUSH
35264: LD_INT 1000
35266: PPUSH
35267: CALL_OW 234
35271: GO 35241
35273: POP
35274: POP
// end ;
35275: PPOPN 1
35277: END
// export function hHackInvincible ; var i ; begin
35278: LD_INT 0
35280: PPUSH
35281: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35282: LD_ADDR_VAR 0 2
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 21
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 21
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: PPUSH
35315: CALL_OW 69
35319: PUSH
35320: FOR_IN
35321: IFFALSE 35382
// if IsSelected ( i ) then
35323: LD_VAR 0 2
35327: PPUSH
35328: CALL_OW 306
35332: IFFALSE 35380
// begin if i in hInvincible then
35334: LD_VAR 0 2
35338: PUSH
35339: LD_EXP 108
35343: IN
35344: IFFALSE 35364
// hInvincible := hInvincible diff i else
35346: LD_ADDR_EXP 108
35350: PUSH
35351: LD_EXP 108
35355: PUSH
35356: LD_VAR 0 2
35360: DIFF
35361: ST_TO_ADDR
35362: GO 35380
// hInvincible := hInvincible union i ;
35364: LD_ADDR_EXP 108
35368: PUSH
35369: LD_EXP 108
35373: PUSH
35374: LD_VAR 0 2
35378: UNION
35379: ST_TO_ADDR
// end ;
35380: GO 35320
35382: POP
35383: POP
// end ;
35384: LD_VAR 0 1
35388: RET
// export function hHackInvisible ; var i , j ; begin
35389: LD_INT 0
35391: PPUSH
35392: PPUSH
35393: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35394: LD_ADDR_VAR 0 2
35398: PUSH
35399: LD_INT 21
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PPUSH
35409: CALL_OW 69
35413: PUSH
35414: FOR_IN
35415: IFFALSE 35439
// if IsSelected ( i ) then
35417: LD_VAR 0 2
35421: PPUSH
35422: CALL_OW 306
35426: IFFALSE 35437
// ComForceInvisible ( i ) ;
35428: LD_VAR 0 2
35432: PPUSH
35433: CALL_OW 496
35437: GO 35414
35439: POP
35440: POP
// end ;
35441: LD_VAR 0 1
35445: RET
// export function hHackChangeYourSide ; begin
35446: LD_INT 0
35448: PPUSH
// if your_side = 8 then
35449: LD_OWVAR 2
35453: PUSH
35454: LD_INT 8
35456: EQUAL
35457: IFFALSE 35469
// your_side := 0 else
35459: LD_ADDR_OWVAR 2
35463: PUSH
35464: LD_INT 0
35466: ST_TO_ADDR
35467: GO 35483
// your_side := your_side + 1 ;
35469: LD_ADDR_OWVAR 2
35473: PUSH
35474: LD_OWVAR 2
35478: PUSH
35479: LD_INT 1
35481: PLUS
35482: ST_TO_ADDR
// end ;
35483: LD_VAR 0 1
35487: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35488: LD_INT 0
35490: PPUSH
35491: PPUSH
35492: PPUSH
// for i in all_units do
35493: LD_ADDR_VAR 0 2
35497: PUSH
35498: LD_OWVAR 3
35502: PUSH
35503: FOR_IN
35504: IFFALSE 35582
// if IsSelected ( i ) then
35506: LD_VAR 0 2
35510: PPUSH
35511: CALL_OW 306
35515: IFFALSE 35580
// begin j := GetSide ( i ) ;
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_VAR 0 2
35526: PPUSH
35527: CALL_OW 255
35531: ST_TO_ADDR
// if j = 8 then
35532: LD_VAR 0 3
35536: PUSH
35537: LD_INT 8
35539: EQUAL
35540: IFFALSE 35552
// j := 0 else
35542: LD_ADDR_VAR 0 3
35546: PUSH
35547: LD_INT 0
35549: ST_TO_ADDR
35550: GO 35566
// j := j + 1 ;
35552: LD_ADDR_VAR 0 3
35556: PUSH
35557: LD_VAR 0 3
35561: PUSH
35562: LD_INT 1
35564: PLUS
35565: ST_TO_ADDR
// SetSide ( i , j ) ;
35566: LD_VAR 0 2
35570: PPUSH
35571: LD_VAR 0 3
35575: PPUSH
35576: CALL_OW 235
// end ;
35580: GO 35503
35582: POP
35583: POP
// end ;
35584: LD_VAR 0 1
35588: RET
// export function hHackFog ; begin
35589: LD_INT 0
35591: PPUSH
// FogOff ( true ) ;
35592: LD_INT 1
35594: PPUSH
35595: CALL_OW 344
// end ;
35599: LD_VAR 0 1
35603: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35604: LD_INT 0
35606: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35607: LD_VAR 0 1
35611: PPUSH
35612: LD_VAR 0 2
35616: PPUSH
35617: LD_VAR 0 3
35621: PPUSH
35622: LD_INT 1
35624: PPUSH
35625: LD_INT 1
35627: PPUSH
35628: CALL_OW 483
// CenterOnXY ( x , y ) ;
35632: LD_VAR 0 2
35636: PPUSH
35637: LD_VAR 0 3
35641: PPUSH
35642: CALL_OW 84
// end ;
35646: LD_VAR 0 4
35650: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35651: LD_INT 0
35653: PPUSH
35654: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35655: LD_VAR 0 1
35659: NOT
35660: PUSH
35661: LD_VAR 0 2
35665: PPUSH
35666: LD_VAR 0 3
35670: PPUSH
35671: CALL_OW 488
35675: NOT
35676: OR
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 266
35687: PUSH
35688: LD_INT 3
35690: NONEQUAL
35691: PUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 247
35701: PUSH
35702: LD_INT 1
35704: EQUAL
35705: NOT
35706: AND
35707: OR
35708: IFFALSE 35712
// exit ;
35710: GO 35861
// if GetType ( factory ) = unit_human then
35712: LD_VAR 0 1
35716: PPUSH
35717: CALL_OW 247
35721: PUSH
35722: LD_INT 1
35724: EQUAL
35725: IFFALSE 35742
// factory := IsInUnit ( factory ) ;
35727: LD_ADDR_VAR 0 1
35731: PUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 310
35741: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35742: LD_VAR 0 1
35746: PPUSH
35747: CALL_OW 266
35751: PUSH
35752: LD_INT 3
35754: NONEQUAL
35755: IFFALSE 35759
// exit ;
35757: GO 35861
// if HexInfo ( x , y ) = factory then
35759: LD_VAR 0 2
35763: PPUSH
35764: LD_VAR 0 3
35768: PPUSH
35769: CALL_OW 428
35773: PUSH
35774: LD_VAR 0 1
35778: EQUAL
35779: IFFALSE 35806
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35781: LD_ADDR_EXP 109
35785: PUSH
35786: LD_EXP 109
35790: PPUSH
35791: LD_VAR 0 1
35795: PPUSH
35796: LD_INT 0
35798: PPUSH
35799: CALL_OW 1
35803: ST_TO_ADDR
35804: GO 35857
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35806: LD_ADDR_EXP 109
35810: PUSH
35811: LD_EXP 109
35815: PPUSH
35816: LD_VAR 0 1
35820: PPUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: CALL_OW 255
35830: PUSH
35831: LD_VAR 0 1
35835: PUSH
35836: LD_VAR 0 2
35840: PUSH
35841: LD_VAR 0 3
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PPUSH
35852: CALL_OW 1
35856: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35857: CALL 35866 0 0
// end ;
35861: LD_VAR 0 4
35865: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
35870: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35871: LD_STRING resetFactoryWaypoint();
35873: PPUSH
35874: CALL_OW 559
// if factoryWaypoints then
35878: LD_EXP 109
35882: IFFALSE 36008
// begin list := PrepareArray ( factoryWaypoints ) ;
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_EXP 109
35893: PPUSH
35894: CALL 82477 0 1
35898: ST_TO_ADDR
// for i := 1 to list do
35899: LD_ADDR_VAR 0 2
35903: PUSH
35904: DOUBLE
35905: LD_INT 1
35907: DEC
35908: ST_TO_ADDR
35909: LD_VAR 0 3
35913: PUSH
35914: FOR_TO
35915: IFFALSE 36006
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35917: LD_STRING setFactoryWaypointXY(
35919: PUSH
35920: LD_VAR 0 3
35924: PUSH
35925: LD_VAR 0 2
35929: ARRAY
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: STR
35935: PUSH
35936: LD_STRING ,
35938: STR
35939: PUSH
35940: LD_VAR 0 3
35944: PUSH
35945: LD_VAR 0 2
35949: ARRAY
35950: PUSH
35951: LD_INT 2
35953: ARRAY
35954: STR
35955: PUSH
35956: LD_STRING ,
35958: STR
35959: PUSH
35960: LD_VAR 0 3
35964: PUSH
35965: LD_VAR 0 2
35969: ARRAY
35970: PUSH
35971: LD_INT 3
35973: ARRAY
35974: STR
35975: PUSH
35976: LD_STRING ,
35978: STR
35979: PUSH
35980: LD_VAR 0 3
35984: PUSH
35985: LD_VAR 0 2
35989: ARRAY
35990: PUSH
35991: LD_INT 4
35993: ARRAY
35994: STR
35995: PUSH
35996: LD_STRING )
35998: STR
35999: PPUSH
36000: CALL_OW 559
36004: GO 35914
36006: POP
36007: POP
// end ; end ;
36008: LD_VAR 0 1
36012: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36013: LD_INT 0
36015: PPUSH
// if HexInfo ( x , y ) = warehouse then
36016: LD_VAR 0 2
36020: PPUSH
36021: LD_VAR 0 3
36025: PPUSH
36026: CALL_OW 428
36030: PUSH
36031: LD_VAR 0 1
36035: EQUAL
36036: IFFALSE 36063
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36038: LD_ADDR_EXP 110
36042: PUSH
36043: LD_EXP 110
36047: PPUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_INT 0
36055: PPUSH
36056: CALL_OW 1
36060: ST_TO_ADDR
36061: GO 36114
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36063: LD_ADDR_EXP 110
36067: PUSH
36068: LD_EXP 110
36072: PPUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: LD_VAR 0 1
36082: PPUSH
36083: CALL_OW 255
36087: PUSH
36088: LD_VAR 0 1
36092: PUSH
36093: LD_VAR 0 2
36097: PUSH
36098: LD_VAR 0 3
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: PPUSH
36109: CALL_OW 1
36113: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36114: CALL 36123 0 0
// end ;
36118: LD_VAR 0 4
36122: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36123: LD_INT 0
36125: PPUSH
36126: PPUSH
36127: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36128: LD_STRING resetWarehouseGatheringPoints();
36130: PPUSH
36131: CALL_OW 559
// if warehouseGatheringPoints then
36135: LD_EXP 110
36139: IFFALSE 36265
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36141: LD_ADDR_VAR 0 3
36145: PUSH
36146: LD_EXP 110
36150: PPUSH
36151: CALL 82477 0 1
36155: ST_TO_ADDR
// for i := 1 to list do
36156: LD_ADDR_VAR 0 2
36160: PUSH
36161: DOUBLE
36162: LD_INT 1
36164: DEC
36165: ST_TO_ADDR
36166: LD_VAR 0 3
36170: PUSH
36171: FOR_TO
36172: IFFALSE 36263
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36174: LD_STRING setWarehouseGatheringPointXY(
36176: PUSH
36177: LD_VAR 0 3
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: STR
36192: PUSH
36193: LD_STRING ,
36195: STR
36196: PUSH
36197: LD_VAR 0 3
36201: PUSH
36202: LD_VAR 0 2
36206: ARRAY
36207: PUSH
36208: LD_INT 2
36210: ARRAY
36211: STR
36212: PUSH
36213: LD_STRING ,
36215: STR
36216: PUSH
36217: LD_VAR 0 3
36221: PUSH
36222: LD_VAR 0 2
36226: ARRAY
36227: PUSH
36228: LD_INT 3
36230: ARRAY
36231: STR
36232: PUSH
36233: LD_STRING ,
36235: STR
36236: PUSH
36237: LD_VAR 0 3
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PUSH
36248: LD_INT 4
36250: ARRAY
36251: STR
36252: PUSH
36253: LD_STRING )
36255: STR
36256: PPUSH
36257: CALL_OW 559
36261: GO 36171
36263: POP
36264: POP
// end ; end ;
36265: LD_VAR 0 1
36269: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36270: LD_EXP 110
36274: IFFALSE 36959
36276: GO 36278
36278: DISABLE
36279: LD_INT 0
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// begin enable ;
36290: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_EXP 110
36300: PPUSH
36301: CALL 82477 0 1
36305: ST_TO_ADDR
// if not list then
36306: LD_VAR 0 3
36310: NOT
36311: IFFALSE 36315
// exit ;
36313: GO 36959
// for i := 1 to list do
36315: LD_ADDR_VAR 0 1
36319: PUSH
36320: DOUBLE
36321: LD_INT 1
36323: DEC
36324: ST_TO_ADDR
36325: LD_VAR 0 3
36329: PUSH
36330: FOR_TO
36331: IFFALSE 36957
// begin depot := list [ i ] [ 2 ] ;
36333: LD_ADDR_VAR 0 8
36337: PUSH
36338: LD_VAR 0 3
36342: PUSH
36343: LD_VAR 0 1
36347: ARRAY
36348: PUSH
36349: LD_INT 2
36351: ARRAY
36352: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36353: LD_ADDR_VAR 0 5
36357: PUSH
36358: LD_VAR 0 3
36362: PUSH
36363: LD_VAR 0 1
36367: ARRAY
36368: PUSH
36369: LD_INT 1
36371: ARRAY
36372: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36373: LD_VAR 0 8
36377: PPUSH
36378: CALL_OW 301
36382: PUSH
36383: LD_VAR 0 5
36387: PUSH
36388: LD_VAR 0 8
36392: PPUSH
36393: CALL_OW 255
36397: NONEQUAL
36398: OR
36399: IFFALSE 36428
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36401: LD_ADDR_EXP 110
36405: PUSH
36406: LD_EXP 110
36410: PPUSH
36411: LD_VAR 0 8
36415: PPUSH
36416: LD_INT 0
36418: PPUSH
36419: CALL_OW 1
36423: ST_TO_ADDR
// exit ;
36424: POP
36425: POP
36426: GO 36959
// end ; x := list [ i ] [ 3 ] ;
36428: LD_ADDR_VAR 0 6
36432: PUSH
36433: LD_VAR 0 3
36437: PUSH
36438: LD_VAR 0 1
36442: ARRAY
36443: PUSH
36444: LD_INT 3
36446: ARRAY
36447: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36448: LD_ADDR_VAR 0 7
36452: PUSH
36453: LD_VAR 0 3
36457: PUSH
36458: LD_VAR 0 1
36462: ARRAY
36463: PUSH
36464: LD_INT 4
36466: ARRAY
36467: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36468: LD_ADDR_VAR 0 9
36472: PUSH
36473: LD_VAR 0 6
36477: PPUSH
36478: LD_VAR 0 7
36482: PPUSH
36483: LD_INT 16
36485: PPUSH
36486: CALL 81065 0 3
36490: ST_TO_ADDR
// if not cratesNearbyPoint then
36491: LD_VAR 0 9
36495: NOT
36496: IFFALSE 36502
// exit ;
36498: POP
36499: POP
36500: GO 36959
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 60
36524: PUSH
36525: EMPTY
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 91
36534: PUSH
36535: LD_VAR 0 8
36539: PUSH
36540: LD_INT 6
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 25
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 25
36563: PUSH
36564: LD_INT 16
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: PPUSH
36582: CALL_OW 69
36586: PUSH
36587: LD_VAR 0 8
36591: PPUSH
36592: CALL_OW 313
36596: PPUSH
36597: LD_INT 3
36599: PUSH
36600: LD_INT 60
36602: PUSH
36603: EMPTY
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 25
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 25
36625: PUSH
36626: LD_INT 16
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL_OW 72
36646: UNION
36647: ST_TO_ADDR
// if tmp then
36648: LD_VAR 0 4
36652: IFFALSE 36732
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36654: LD_ADDR_VAR 0 4
36658: PUSH
36659: LD_VAR 0 4
36663: PPUSH
36664: LD_INT 3
36666: PPUSH
36667: CALL 79034 0 2
36671: ST_TO_ADDR
// for j in tmp do
36672: LD_ADDR_VAR 0 2
36676: PUSH
36677: LD_VAR 0 4
36681: PUSH
36682: FOR_IN
36683: IFFALSE 36726
// begin if IsInUnit ( j ) then
36685: LD_VAR 0 2
36689: PPUSH
36690: CALL_OW 310
36694: IFFALSE 36705
// ComExit ( j ) ;
36696: LD_VAR 0 2
36700: PPUSH
36701: CALL 79117 0 1
// AddComCollect ( j , x , y ) ;
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 6
36714: PPUSH
36715: LD_VAR 0 7
36719: PPUSH
36720: CALL_OW 177
// end ;
36724: GO 36682
36726: POP
36727: POP
// exit ;
36728: POP
36729: POP
36730: GO 36959
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: LD_INT 22
36739: PUSH
36740: LD_VAR 0 5
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 91
36751: PUSH
36752: LD_VAR 0 8
36756: PUSH
36757: LD_INT 8
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 34
36770: PUSH
36771: LD_INT 12
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 34
36780: PUSH
36781: LD_INT 51
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 34
36790: PUSH
36791: LD_INT 32
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 34
36800: PUSH
36801: LD_INT 89
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PPUSH
36820: CALL_OW 69
36824: ST_TO_ADDR
// if tmp then
36825: LD_VAR 0 4
36829: IFFALSE 36955
// begin for j in tmp do
36831: LD_ADDR_VAR 0 2
36835: PUSH
36836: LD_VAR 0 4
36840: PUSH
36841: FOR_IN
36842: IFFALSE 36953
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36844: LD_VAR 0 2
36848: PPUSH
36849: CALL_OW 262
36853: PUSH
36854: LD_INT 3
36856: EQUAL
36857: PUSH
36858: LD_VAR 0 2
36862: PPUSH
36863: CALL_OW 261
36867: PUSH
36868: LD_INT 20
36870: GREATER
36871: OR
36872: PUSH
36873: LD_VAR 0 2
36877: PPUSH
36878: CALL_OW 314
36882: NOT
36883: AND
36884: PUSH
36885: LD_VAR 0 2
36889: PPUSH
36890: CALL_OW 263
36894: PUSH
36895: LD_INT 1
36897: NONEQUAL
36898: PUSH
36899: LD_VAR 0 2
36903: PPUSH
36904: CALL_OW 311
36908: OR
36909: AND
36910: IFFALSE 36951
// begin ComCollect ( j , x , y ) ;
36912: LD_VAR 0 2
36916: PPUSH
36917: LD_VAR 0 6
36921: PPUSH
36922: LD_VAR 0 7
36926: PPUSH
36927: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_VAR 0 8
36940: PPUSH
36941: CALL_OW 172
// exit ;
36945: POP
36946: POP
36947: POP
36948: POP
36949: GO 36959
// end ;
36951: GO 36841
36953: POP
36954: POP
// end ; end ;
36955: GO 36330
36957: POP
36958: POP
// end ; end_of_file
36959: PPOPN 9
36961: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36962: LD_INT 0
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL_OW 264
36977: PUSH
36978: LD_INT 91
36980: EQUAL
36981: IFFALSE 37053
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36983: LD_INT 68
36985: PPUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 255
36995: PPUSH
36996: CALL_OW 321
37000: PUSH
37001: LD_INT 2
37003: EQUAL
37004: IFFALSE 37016
// eff := 70 else
37006: LD_ADDR_VAR 0 4
37010: PUSH
37011: LD_INT 70
37013: ST_TO_ADDR
37014: GO 37024
// eff := 30 ;
37016: LD_ADDR_VAR 0 4
37020: PUSH
37021: LD_INT 30
37023: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37024: LD_VAR 0 1
37028: PPUSH
37029: CALL_OW 250
37033: PPUSH
37034: LD_VAR 0 1
37038: PPUSH
37039: CALL_OW 251
37043: PPUSH
37044: LD_VAR 0 4
37048: PPUSH
37049: CALL_OW 495
// end ; end ;
37053: LD_VAR 0 2
37057: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37058: LD_INT 0
37060: PPUSH
// end ;
37061: LD_VAR 0 4
37065: RET
// export function SOS_Command ( cmd ) ; begin
37066: LD_INT 0
37068: PPUSH
// end ;
37069: LD_VAR 0 2
37073: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37074: LD_INT 0
37076: PPUSH
// end ;
37077: LD_VAR 0 6
37081: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37082: LD_INT 0
37084: PPUSH
37085: PPUSH
// if not vehicle or not factory then
37086: LD_VAR 0 1
37090: NOT
37091: PUSH
37092: LD_VAR 0 2
37096: NOT
37097: OR
37098: IFFALSE 37102
// exit ;
37100: GO 37333
// if factoryWaypoints >= factory then
37102: LD_EXP 109
37106: PUSH
37107: LD_VAR 0 2
37111: GREATEREQUAL
37112: IFFALSE 37333
// if factoryWaypoints [ factory ] then
37114: LD_EXP 109
37118: PUSH
37119: LD_VAR 0 2
37123: ARRAY
37124: IFFALSE 37333
// begin if GetControl ( vehicle ) = control_manual then
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 263
37135: PUSH
37136: LD_INT 1
37138: EQUAL
37139: IFFALSE 37220
// begin driver := IsDrivenBy ( vehicle ) ;
37141: LD_ADDR_VAR 0 4
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 311
37155: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37156: LD_VAR 0 4
37160: PPUSH
37161: LD_EXP 109
37165: PUSH
37166: LD_VAR 0 2
37170: ARRAY
37171: PUSH
37172: LD_INT 3
37174: ARRAY
37175: PPUSH
37176: LD_EXP 109
37180: PUSH
37181: LD_VAR 0 2
37185: ARRAY
37186: PUSH
37187: LD_INT 4
37189: ARRAY
37190: PPUSH
37191: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37195: LD_VAR 0 4
37199: PPUSH
37200: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37204: LD_VAR 0 4
37208: PPUSH
37209: LD_VAR 0 2
37213: PPUSH
37214: CALL_OW 180
// end else
37218: GO 37333
// if GetControl ( vehicle ) = control_remote then
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 263
37229: PUSH
37230: LD_INT 2
37232: EQUAL
37233: IFFALSE 37294
// begin wait ( 0 0$2 ) ;
37235: LD_INT 70
37237: PPUSH
37238: CALL_OW 67
// if Connect ( vehicle ) then
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL 49357 0 1
37251: IFFALSE 37292
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37253: LD_VAR 0 1
37257: PPUSH
37258: LD_EXP 109
37262: PUSH
37263: LD_VAR 0 2
37267: ARRAY
37268: PUSH
37269: LD_INT 3
37271: ARRAY
37272: PPUSH
37273: LD_EXP 109
37277: PUSH
37278: LD_VAR 0 2
37282: ARRAY
37283: PUSH
37284: LD_INT 4
37286: ARRAY
37287: PPUSH
37288: CALL_OW 171
// end else
37292: GO 37333
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37294: LD_VAR 0 1
37298: PPUSH
37299: LD_EXP 109
37303: PUSH
37304: LD_VAR 0 2
37308: ARRAY
37309: PUSH
37310: LD_INT 3
37312: ARRAY
37313: PPUSH
37314: LD_EXP 109
37318: PUSH
37319: LD_VAR 0 2
37323: ARRAY
37324: PUSH
37325: LD_INT 4
37327: ARRAY
37328: PPUSH
37329: CALL_OW 171
// end ; end ;
37333: LD_VAR 0 3
37337: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37338: LD_INT 0
37340: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37341: LD_VAR 0 1
37345: PUSH
37346: LD_INT 250
37348: EQUAL
37349: PUSH
37350: LD_VAR 0 2
37354: PPUSH
37355: CALL_OW 264
37359: PUSH
37360: LD_INT 81
37362: EQUAL
37363: AND
37364: IFFALSE 37385
// MinerPlaceMine ( unit , x , y ) ;
37366: LD_VAR 0 2
37370: PPUSH
37371: LD_VAR 0 4
37375: PPUSH
37376: LD_VAR 0 5
37380: PPUSH
37381: CALL 39770 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37385: LD_VAR 0 1
37389: PUSH
37390: LD_INT 251
37392: EQUAL
37393: PUSH
37394: LD_VAR 0 2
37398: PPUSH
37399: CALL_OW 264
37403: PUSH
37404: LD_INT 81
37406: EQUAL
37407: AND
37408: IFFALSE 37429
// MinerDetonateMine ( unit , x , y ) ;
37410: LD_VAR 0 2
37414: PPUSH
37415: LD_VAR 0 4
37419: PPUSH
37420: LD_VAR 0 5
37424: PPUSH
37425: CALL 40045 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37429: LD_VAR 0 1
37433: PUSH
37434: LD_INT 252
37436: EQUAL
37437: PUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: CALL_OW 264
37447: PUSH
37448: LD_INT 81
37450: EQUAL
37451: AND
37452: IFFALSE 37473
// MinerCreateMinefield ( unit , x , y ) ;
37454: LD_VAR 0 2
37458: PPUSH
37459: LD_VAR 0 4
37463: PPUSH
37464: LD_VAR 0 5
37468: PPUSH
37469: CALL 40462 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37473: LD_VAR 0 1
37477: PUSH
37478: LD_INT 253
37480: EQUAL
37481: PUSH
37482: LD_VAR 0 2
37486: PPUSH
37487: CALL_OW 257
37491: PUSH
37492: LD_INT 5
37494: EQUAL
37495: AND
37496: IFFALSE 37517
// ComBinocular ( unit , x , y ) ;
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: LD_VAR 0 5
37512: PPUSH
37513: CALL 40831 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37517: LD_VAR 0 1
37521: PUSH
37522: LD_INT 254
37524: EQUAL
37525: PUSH
37526: LD_VAR 0 2
37530: PPUSH
37531: CALL_OW 264
37535: PUSH
37536: LD_INT 99
37538: EQUAL
37539: AND
37540: PUSH
37541: LD_VAR 0 3
37545: PPUSH
37546: CALL_OW 263
37550: PUSH
37551: LD_INT 3
37553: EQUAL
37554: AND
37555: IFFALSE 37571
// HackDestroyVehicle ( unit , selectedUnit ) ;
37557: LD_VAR 0 2
37561: PPUSH
37562: LD_VAR 0 3
37566: PPUSH
37567: CALL 39134 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37571: LD_VAR 0 1
37575: PUSH
37576: LD_INT 255
37578: EQUAL
37579: PUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL_OW 264
37589: PUSH
37590: LD_INT 14
37592: PUSH
37593: LD_INT 53
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: IN
37600: AND
37601: PUSH
37602: LD_VAR 0 4
37606: PPUSH
37607: LD_VAR 0 5
37611: PPUSH
37612: CALL_OW 488
37616: AND
37617: IFFALSE 37641
// CutTreeXYR ( unit , x , y , 12 ) ;
37619: LD_VAR 0 2
37623: PPUSH
37624: LD_VAR 0 4
37628: PPUSH
37629: LD_VAR 0 5
37633: PPUSH
37634: LD_INT 12
37636: PPUSH
37637: CALL 37704 0 4
// if cmd = 256 then
37641: LD_VAR 0 1
37645: PUSH
37646: LD_INT 256
37648: EQUAL
37649: IFFALSE 37670
// SetFactoryWaypoint ( unit , x , y ) ;
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_VAR 0 4
37660: PPUSH
37661: LD_VAR 0 5
37665: PPUSH
37666: CALL 35651 0 3
// if cmd = 257 then
37670: LD_VAR 0 1
37674: PUSH
37675: LD_INT 257
37677: EQUAL
37678: IFFALSE 37699
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37680: LD_VAR 0 2
37684: PPUSH
37685: LD_VAR 0 4
37689: PPUSH
37690: LD_VAR 0 5
37694: PPUSH
37695: CALL 36013 0 3
// end ;
37699: LD_VAR 0 6
37703: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37704: LD_INT 0
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37715: LD_VAR 0 1
37719: NOT
37720: PUSH
37721: LD_VAR 0 2
37725: PPUSH
37726: LD_VAR 0 3
37730: PPUSH
37731: CALL_OW 488
37735: NOT
37736: OR
37737: PUSH
37738: LD_VAR 0 4
37742: NOT
37743: OR
37744: IFFALSE 37748
// exit ;
37746: GO 38088
// list := [ ] ;
37748: LD_ADDR_VAR 0 13
37752: PUSH
37753: EMPTY
37754: ST_TO_ADDR
// if x - r < 0 then
37755: LD_VAR 0 2
37759: PUSH
37760: LD_VAR 0 4
37764: MINUS
37765: PUSH
37766: LD_INT 0
37768: LESS
37769: IFFALSE 37781
// min_x := 0 else
37771: LD_ADDR_VAR 0 7
37775: PUSH
37776: LD_INT 0
37778: ST_TO_ADDR
37779: GO 37797
// min_x := x - r ;
37781: LD_ADDR_VAR 0 7
37785: PUSH
37786: LD_VAR 0 2
37790: PUSH
37791: LD_VAR 0 4
37795: MINUS
37796: ST_TO_ADDR
// if y - r < 0 then
37797: LD_VAR 0 3
37801: PUSH
37802: LD_VAR 0 4
37806: MINUS
37807: PUSH
37808: LD_INT 0
37810: LESS
37811: IFFALSE 37823
// min_y := 0 else
37813: LD_ADDR_VAR 0 8
37817: PUSH
37818: LD_INT 0
37820: ST_TO_ADDR
37821: GO 37839
// min_y := y - r ;
37823: LD_ADDR_VAR 0 8
37827: PUSH
37828: LD_VAR 0 3
37832: PUSH
37833: LD_VAR 0 4
37837: MINUS
37838: ST_TO_ADDR
// max_x := x + r ;
37839: LD_ADDR_VAR 0 9
37843: PUSH
37844: LD_VAR 0 2
37848: PUSH
37849: LD_VAR 0 4
37853: PLUS
37854: ST_TO_ADDR
// max_y := y + r ;
37855: LD_ADDR_VAR 0 10
37859: PUSH
37860: LD_VAR 0 3
37864: PUSH
37865: LD_VAR 0 4
37869: PLUS
37870: ST_TO_ADDR
// for _x = min_x to max_x do
37871: LD_ADDR_VAR 0 11
37875: PUSH
37876: DOUBLE
37877: LD_VAR 0 7
37881: DEC
37882: ST_TO_ADDR
37883: LD_VAR 0 9
37887: PUSH
37888: FOR_TO
37889: IFFALSE 38006
// for _y = min_y to max_y do
37891: LD_ADDR_VAR 0 12
37895: PUSH
37896: DOUBLE
37897: LD_VAR 0 8
37901: DEC
37902: ST_TO_ADDR
37903: LD_VAR 0 10
37907: PUSH
37908: FOR_TO
37909: IFFALSE 38002
// begin if not ValidHex ( _x , _y ) then
37911: LD_VAR 0 11
37915: PPUSH
37916: LD_VAR 0 12
37920: PPUSH
37921: CALL_OW 488
37925: NOT
37926: IFFALSE 37930
// continue ;
37928: GO 37908
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37930: LD_VAR 0 11
37934: PPUSH
37935: LD_VAR 0 12
37939: PPUSH
37940: CALL_OW 351
37944: PUSH
37945: LD_VAR 0 11
37949: PPUSH
37950: LD_VAR 0 12
37954: PPUSH
37955: CALL_OW 554
37959: AND
37960: IFFALSE 38000
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37962: LD_ADDR_VAR 0 13
37966: PUSH
37967: LD_VAR 0 13
37971: PPUSH
37972: LD_VAR 0 13
37976: PUSH
37977: LD_INT 1
37979: PLUS
37980: PPUSH
37981: LD_VAR 0 11
37985: PUSH
37986: LD_VAR 0 12
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PPUSH
37995: CALL_OW 2
37999: ST_TO_ADDR
// end ;
38000: GO 37908
38002: POP
38003: POP
38004: GO 37888
38006: POP
38007: POP
// if not list then
38008: LD_VAR 0 13
38012: NOT
38013: IFFALSE 38017
// exit ;
38015: GO 38088
// for i in list do
38017: LD_ADDR_VAR 0 6
38021: PUSH
38022: LD_VAR 0 13
38026: PUSH
38027: FOR_IN
38028: IFFALSE 38086
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_STRING M
38037: PUSH
38038: LD_VAR 0 6
38042: PUSH
38043: LD_INT 1
38045: ARRAY
38046: PUSH
38047: LD_VAR 0 6
38051: PUSH
38052: LD_INT 2
38054: ARRAY
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: PPUSH
38080: CALL_OW 447
38084: GO 38027
38086: POP
38087: POP
// end ;
38088: LD_VAR 0 5
38092: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38093: LD_EXP 112
38097: NOT
38098: IFFALSE 38148
38100: GO 38102
38102: DISABLE
// begin initHack := true ;
38103: LD_ADDR_EXP 112
38107: PUSH
38108: LD_INT 1
38110: ST_TO_ADDR
// hackTanks := [ ] ;
38111: LD_ADDR_EXP 113
38115: PUSH
38116: EMPTY
38117: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38118: LD_ADDR_EXP 114
38122: PUSH
38123: EMPTY
38124: ST_TO_ADDR
// hackLimit := 3 ;
38125: LD_ADDR_EXP 115
38129: PUSH
38130: LD_INT 3
38132: ST_TO_ADDR
// hackDist := 12 ;
38133: LD_ADDR_EXP 116
38137: PUSH
38138: LD_INT 12
38140: ST_TO_ADDR
// hackCounter := [ ] ;
38141: LD_ADDR_EXP 117
38145: PUSH
38146: EMPTY
38147: ST_TO_ADDR
// end ;
38148: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38149: LD_EXP 112
38153: PUSH
38154: LD_INT 34
38156: PUSH
38157: LD_INT 99
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PPUSH
38164: CALL_OW 69
38168: AND
38169: IFFALSE 38422
38171: GO 38173
38173: DISABLE
38174: LD_INT 0
38176: PPUSH
38177: PPUSH
// begin enable ;
38178: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38179: LD_ADDR_VAR 0 1
38183: PUSH
38184: LD_INT 34
38186: PUSH
38187: LD_INT 99
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PPUSH
38194: CALL_OW 69
38198: PUSH
38199: FOR_IN
38200: IFFALSE 38420
// begin if not i in hackTanks then
38202: LD_VAR 0 1
38206: PUSH
38207: LD_EXP 113
38211: IN
38212: NOT
38213: IFFALSE 38296
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38215: LD_ADDR_EXP 113
38219: PUSH
38220: LD_EXP 113
38224: PPUSH
38225: LD_EXP 113
38229: PUSH
38230: LD_INT 1
38232: PLUS
38233: PPUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 1
38243: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38244: LD_ADDR_EXP 114
38248: PUSH
38249: LD_EXP 114
38253: PPUSH
38254: LD_EXP 114
38258: PUSH
38259: LD_INT 1
38261: PLUS
38262: PPUSH
38263: EMPTY
38264: PPUSH
38265: CALL_OW 1
38269: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38270: LD_ADDR_EXP 117
38274: PUSH
38275: LD_EXP 117
38279: PPUSH
38280: LD_EXP 117
38284: PUSH
38285: LD_INT 1
38287: PLUS
38288: PPUSH
38289: EMPTY
38290: PPUSH
38291: CALL_OW 1
38295: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38296: LD_VAR 0 1
38300: PPUSH
38301: CALL_OW 302
38305: NOT
38306: IFFALSE 38319
// begin HackUnlinkAll ( i ) ;
38308: LD_VAR 0 1
38312: PPUSH
38313: CALL 38425 0 1
// continue ;
38317: GO 38199
// end ; HackCheckCapturedStatus ( i ) ;
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL 38868 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38328: LD_ADDR_VAR 0 2
38332: PUSH
38333: LD_INT 81
38335: PUSH
38336: LD_VAR 0 1
38340: PPUSH
38341: CALL_OW 255
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 33
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 91
38362: PUSH
38363: LD_VAR 0 1
38367: PUSH
38368: LD_EXP 116
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 50
38380: PUSH
38381: EMPTY
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: PPUSH
38390: CALL_OW 69
38394: ST_TO_ADDR
// if not tmp then
38395: LD_VAR 0 2
38399: NOT
38400: IFFALSE 38404
// continue ;
38402: GO 38199
// HackLink ( i , tmp ) ;
38404: LD_VAR 0 1
38408: PPUSH
38409: LD_VAR 0 2
38413: PPUSH
38414: CALL 38561 0 2
// end ;
38418: GO 38199
38420: POP
38421: POP
// end ;
38422: PPOPN 2
38424: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38425: LD_INT 0
38427: PPUSH
38428: PPUSH
38429: PPUSH
// if not hack in hackTanks then
38430: LD_VAR 0 1
38434: PUSH
38435: LD_EXP 113
38439: IN
38440: NOT
38441: IFFALSE 38445
// exit ;
38443: GO 38556
// index := GetElementIndex ( hackTanks , hack ) ;
38445: LD_ADDR_VAR 0 4
38449: PUSH
38450: LD_EXP 113
38454: PPUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL 46173 0 2
38464: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38465: LD_EXP 114
38469: PUSH
38470: LD_VAR 0 4
38474: ARRAY
38475: IFFALSE 38556
// begin for i in hackTanksCaptured [ index ] do
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: LD_EXP 114
38486: PUSH
38487: LD_VAR 0 4
38491: ARRAY
38492: PUSH
38493: FOR_IN
38494: IFFALSE 38520
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38496: LD_VAR 0 3
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: PPUSH
38505: LD_VAR 0 3
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: PPUSH
38514: CALL_OW 235
38518: GO 38493
38520: POP
38521: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38522: LD_ADDR_EXP 114
38526: PUSH
38527: LD_EXP 114
38531: PPUSH
38532: LD_VAR 0 4
38536: PPUSH
38537: EMPTY
38538: PPUSH
38539: CALL_OW 1
38543: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38544: LD_VAR 0 1
38548: PPUSH
38549: LD_INT 0
38551: PPUSH
38552: CALL_OW 505
// end ; end ;
38556: LD_VAR 0 2
38560: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38561: LD_INT 0
38563: PPUSH
38564: PPUSH
38565: PPUSH
// if not hack in hackTanks or not vehicles then
38566: LD_VAR 0 1
38570: PUSH
38571: LD_EXP 113
38575: IN
38576: NOT
38577: PUSH
38578: LD_VAR 0 2
38582: NOT
38583: OR
38584: IFFALSE 38588
// exit ;
38586: GO 38863
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38588: LD_ADDR_VAR 0 2
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: LD_VAR 0 2
38602: PPUSH
38603: LD_INT 1
38605: PPUSH
38606: LD_INT 1
38608: PPUSH
38609: CALL 46823 0 4
38613: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: LD_EXP 113
38623: PPUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL 46173 0 2
38633: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38634: LD_EXP 114
38638: PUSH
38639: LD_VAR 0 5
38643: ARRAY
38644: PUSH
38645: LD_EXP 115
38649: LESS
38650: IFFALSE 38839
// begin for i := 1 to vehicles do
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: DOUBLE
38658: LD_INT 1
38660: DEC
38661: ST_TO_ADDR
38662: LD_VAR 0 2
38666: PUSH
38667: FOR_TO
38668: IFFALSE 38837
// begin if hackTanksCaptured [ index ] = hackLimit then
38670: LD_EXP 114
38674: PUSH
38675: LD_VAR 0 5
38679: ARRAY
38680: PUSH
38681: LD_EXP 115
38685: EQUAL
38686: IFFALSE 38690
// break ;
38688: GO 38837
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38690: LD_ADDR_EXP 117
38694: PUSH
38695: LD_EXP 117
38699: PPUSH
38700: LD_VAR 0 5
38704: PPUSH
38705: LD_EXP 117
38709: PUSH
38710: LD_VAR 0 5
38714: ARRAY
38715: PUSH
38716: LD_INT 1
38718: PLUS
38719: PPUSH
38720: CALL_OW 1
38724: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38725: LD_ADDR_EXP 114
38729: PUSH
38730: LD_EXP 114
38734: PPUSH
38735: LD_VAR 0 5
38739: PUSH
38740: LD_EXP 114
38744: PUSH
38745: LD_VAR 0 5
38749: ARRAY
38750: PUSH
38751: LD_INT 1
38753: PLUS
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PPUSH
38759: LD_VAR 0 2
38763: PUSH
38764: LD_VAR 0 4
38768: ARRAY
38769: PUSH
38770: LD_VAR 0 2
38774: PUSH
38775: LD_VAR 0 4
38779: ARRAY
38780: PPUSH
38781: CALL_OW 255
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PPUSH
38790: CALL 46388 0 3
38794: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38795: LD_VAR 0 2
38799: PUSH
38800: LD_VAR 0 4
38804: ARRAY
38805: PPUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 255
38815: PPUSH
38816: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38820: LD_VAR 0 2
38824: PUSH
38825: LD_VAR 0 4
38829: ARRAY
38830: PPUSH
38831: CALL_OW 141
// end ;
38835: GO 38667
38837: POP
38838: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38839: LD_VAR 0 1
38843: PPUSH
38844: LD_EXP 114
38848: PUSH
38849: LD_VAR 0 5
38853: ARRAY
38854: PUSH
38855: LD_INT 0
38857: PLUS
38858: PPUSH
38859: CALL_OW 505
// end ;
38863: LD_VAR 0 3
38867: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38868: LD_INT 0
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
// if not hack in hackTanks then
38874: LD_VAR 0 1
38878: PUSH
38879: LD_EXP 113
38883: IN
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 39129
// index := GetElementIndex ( hackTanks , hack ) ;
38889: LD_ADDR_VAR 0 4
38893: PUSH
38894: LD_EXP 113
38898: PPUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL 46173 0 2
38908: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38909: LD_ADDR_VAR 0 3
38913: PUSH
38914: DOUBLE
38915: LD_EXP 114
38919: PUSH
38920: LD_VAR 0 4
38924: ARRAY
38925: INC
38926: ST_TO_ADDR
38927: LD_INT 1
38929: PUSH
38930: FOR_DOWNTO
38931: IFFALSE 39103
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38933: LD_ADDR_VAR 0 5
38937: PUSH
38938: LD_EXP 114
38942: PUSH
38943: LD_VAR 0 4
38947: ARRAY
38948: PUSH
38949: LD_VAR 0 3
38953: ARRAY
38954: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38955: LD_VAR 0 5
38959: PUSH
38960: LD_INT 1
38962: ARRAY
38963: PPUSH
38964: CALL_OW 302
38968: NOT
38969: PUSH
38970: LD_VAR 0 5
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: CALL_OW 255
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 255
38993: NONEQUAL
38994: OR
38995: IFFALSE 39101
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38997: LD_VAR 0 5
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PPUSH
39006: CALL_OW 305
39010: PUSH
39011: LD_VAR 0 5
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: PPUSH
39020: CALL_OW 255
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: CALL_OW 255
39034: EQUAL
39035: AND
39036: IFFALSE 39060
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39038: LD_VAR 0 5
39042: PUSH
39043: LD_INT 1
39045: ARRAY
39046: PPUSH
39047: LD_VAR 0 5
39051: PUSH
39052: LD_INT 2
39054: ARRAY
39055: PPUSH
39056: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39060: LD_ADDR_EXP 114
39064: PUSH
39065: LD_EXP 114
39069: PPUSH
39070: LD_VAR 0 4
39074: PPUSH
39075: LD_EXP 114
39079: PUSH
39080: LD_VAR 0 4
39084: ARRAY
39085: PPUSH
39086: LD_VAR 0 3
39090: PPUSH
39091: CALL_OW 3
39095: PPUSH
39096: CALL_OW 1
39100: ST_TO_ADDR
// end ; end ;
39101: GO 38930
39103: POP
39104: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39105: LD_VAR 0 1
39109: PPUSH
39110: LD_EXP 114
39114: PUSH
39115: LD_VAR 0 4
39119: ARRAY
39120: PUSH
39121: LD_INT 0
39123: PLUS
39124: PPUSH
39125: CALL_OW 505
// end ;
39129: LD_VAR 0 2
39133: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39134: LD_INT 0
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
// if not hack in hackTanks then
39140: LD_VAR 0 1
39144: PUSH
39145: LD_EXP 113
39149: IN
39150: NOT
39151: IFFALSE 39155
// exit ;
39153: GO 39240
// index := GetElementIndex ( hackTanks , hack ) ;
39155: LD_ADDR_VAR 0 5
39159: PUSH
39160: LD_EXP 113
39164: PPUSH
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL 46173 0 2
39174: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39175: LD_ADDR_VAR 0 4
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_EXP 114
39189: PUSH
39190: LD_VAR 0 5
39194: ARRAY
39195: PUSH
39196: FOR_TO
39197: IFFALSE 39238
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39199: LD_EXP 114
39203: PUSH
39204: LD_VAR 0 5
39208: ARRAY
39209: PUSH
39210: LD_VAR 0 4
39214: ARRAY
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: PUSH
39220: LD_VAR 0 2
39224: EQUAL
39225: IFFALSE 39236
// KillUnit ( vehicle ) ;
39227: LD_VAR 0 2
39231: PPUSH
39232: CALL_OW 66
39236: GO 39196
39238: POP
39239: POP
// end ;
39240: LD_VAR 0 3
39244: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39245: LD_EXP 118
39249: NOT
39250: IFFALSE 39285
39252: GO 39254
39254: DISABLE
// begin initMiner := true ;
39255: LD_ADDR_EXP 118
39259: PUSH
39260: LD_INT 1
39262: ST_TO_ADDR
// minersList := [ ] ;
39263: LD_ADDR_EXP 119
39267: PUSH
39268: EMPTY
39269: ST_TO_ADDR
// minerMinesList := [ ] ;
39270: LD_ADDR_EXP 120
39274: PUSH
39275: EMPTY
39276: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39277: LD_ADDR_EXP 121
39281: PUSH
39282: LD_INT 5
39284: ST_TO_ADDR
// end ;
39285: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39286: LD_EXP 118
39290: PUSH
39291: LD_INT 34
39293: PUSH
39294: LD_INT 81
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PPUSH
39301: CALL_OW 69
39305: AND
39306: IFFALSE 39767
39308: GO 39310
39310: DISABLE
39311: LD_INT 0
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
// begin enable ;
39317: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39318: LD_ADDR_VAR 0 1
39322: PUSH
39323: LD_INT 34
39325: PUSH
39326: LD_INT 81
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PPUSH
39333: CALL_OW 69
39337: PUSH
39338: FOR_IN
39339: IFFALSE 39411
// begin if not i in minersList then
39341: LD_VAR 0 1
39345: PUSH
39346: LD_EXP 119
39350: IN
39351: NOT
39352: IFFALSE 39409
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39354: LD_ADDR_EXP 119
39358: PUSH
39359: LD_EXP 119
39363: PPUSH
39364: LD_EXP 119
39368: PUSH
39369: LD_INT 1
39371: PLUS
39372: PPUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 1
39382: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39383: LD_ADDR_EXP 120
39387: PUSH
39388: LD_EXP 120
39392: PPUSH
39393: LD_EXP 120
39397: PUSH
39398: LD_INT 1
39400: PLUS
39401: PPUSH
39402: EMPTY
39403: PPUSH
39404: CALL_OW 1
39408: ST_TO_ADDR
// end end ;
39409: GO 39338
39411: POP
39412: POP
// for i := minerMinesList downto 1 do
39413: LD_ADDR_VAR 0 1
39417: PUSH
39418: DOUBLE
39419: LD_EXP 120
39423: INC
39424: ST_TO_ADDR
39425: LD_INT 1
39427: PUSH
39428: FOR_DOWNTO
39429: IFFALSE 39765
// begin if IsLive ( minersList [ i ] ) then
39431: LD_EXP 119
39435: PUSH
39436: LD_VAR 0 1
39440: ARRAY
39441: PPUSH
39442: CALL_OW 300
39446: IFFALSE 39474
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39448: LD_EXP 119
39452: PUSH
39453: LD_VAR 0 1
39457: ARRAY
39458: PPUSH
39459: LD_EXP 120
39463: PUSH
39464: LD_VAR 0 1
39468: ARRAY
39469: PPUSH
39470: CALL_OW 505
// if not minerMinesList [ i ] then
39474: LD_EXP 120
39478: PUSH
39479: LD_VAR 0 1
39483: ARRAY
39484: NOT
39485: IFFALSE 39489
// continue ;
39487: GO 39428
// for j := minerMinesList [ i ] downto 1 do
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: DOUBLE
39495: LD_EXP 120
39499: PUSH
39500: LD_VAR 0 1
39504: ARRAY
39505: INC
39506: ST_TO_ADDR
39507: LD_INT 1
39509: PUSH
39510: FOR_DOWNTO
39511: IFFALSE 39761
// begin side := GetSide ( minersList [ i ] ) ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_EXP 119
39522: PUSH
39523: LD_VAR 0 1
39527: ARRAY
39528: PPUSH
39529: CALL_OW 255
39533: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39534: LD_ADDR_VAR 0 4
39538: PUSH
39539: LD_EXP 120
39543: PUSH
39544: LD_VAR 0 1
39548: ARRAY
39549: PUSH
39550: LD_VAR 0 2
39554: ARRAY
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: PPUSH
39560: LD_EXP 120
39564: PUSH
39565: LD_VAR 0 1
39569: ARRAY
39570: PUSH
39571: LD_VAR 0 2
39575: ARRAY
39576: PUSH
39577: LD_INT 2
39579: ARRAY
39580: PPUSH
39581: CALL_OW 428
39585: ST_TO_ADDR
// if not tmp then
39586: LD_VAR 0 4
39590: NOT
39591: IFFALSE 39595
// continue ;
39593: GO 39510
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39595: LD_VAR 0 4
39599: PUSH
39600: LD_INT 81
39602: PUSH
39603: LD_VAR 0 3
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PPUSH
39612: CALL_OW 69
39616: IN
39617: PUSH
39618: LD_EXP 120
39622: PUSH
39623: LD_VAR 0 1
39627: ARRAY
39628: PUSH
39629: LD_VAR 0 2
39633: ARRAY
39634: PUSH
39635: LD_INT 1
39637: ARRAY
39638: PPUSH
39639: LD_EXP 120
39643: PUSH
39644: LD_VAR 0 1
39648: ARRAY
39649: PUSH
39650: LD_VAR 0 2
39654: ARRAY
39655: PUSH
39656: LD_INT 2
39658: ARRAY
39659: PPUSH
39660: CALL_OW 458
39664: AND
39665: IFFALSE 39759
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39667: LD_EXP 120
39671: PUSH
39672: LD_VAR 0 1
39676: ARRAY
39677: PUSH
39678: LD_VAR 0 2
39682: ARRAY
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: PPUSH
39688: LD_EXP 120
39692: PUSH
39693: LD_VAR 0 1
39697: ARRAY
39698: PUSH
39699: LD_VAR 0 2
39703: ARRAY
39704: PUSH
39705: LD_INT 2
39707: ARRAY
39708: PPUSH
39709: LD_VAR 0 3
39713: PPUSH
39714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39718: LD_ADDR_EXP 120
39722: PUSH
39723: LD_EXP 120
39727: PPUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: LD_EXP 120
39737: PUSH
39738: LD_VAR 0 1
39742: ARRAY
39743: PPUSH
39744: LD_VAR 0 2
39748: PPUSH
39749: CALL_OW 3
39753: PPUSH
39754: CALL_OW 1
39758: ST_TO_ADDR
// end ; end ;
39759: GO 39510
39761: POP
39762: POP
// end ;
39763: GO 39428
39765: POP
39766: POP
// end ;
39767: PPOPN 4
39769: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39770: LD_INT 0
39772: PPUSH
39773: PPUSH
// result := false ;
39774: LD_ADDR_VAR 0 4
39778: PUSH
39779: LD_INT 0
39781: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 264
39791: PUSH
39792: LD_INT 81
39794: EQUAL
39795: NOT
39796: IFFALSE 39800
// exit ;
39798: GO 40040
// index := GetElementIndex ( minersList , unit ) ;
39800: LD_ADDR_VAR 0 5
39804: PUSH
39805: LD_EXP 119
39809: PPUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL 46173 0 2
39819: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39820: LD_EXP 120
39824: PUSH
39825: LD_VAR 0 5
39829: ARRAY
39830: PUSH
39831: LD_EXP 121
39835: GREATEREQUAL
39836: IFFALSE 39840
// exit ;
39838: GO 40040
// ComMoveXY ( unit , x , y ) ;
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_VAR 0 2
39849: PPUSH
39850: LD_VAR 0 3
39854: PPUSH
39855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39859: LD_INT 35
39861: PPUSH
39862: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_VAR 0 2
39875: PPUSH
39876: LD_VAR 0 3
39880: PPUSH
39881: CALL 77528 0 3
39885: NOT
39886: PUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: CALL_OW 314
39896: AND
39897: IFFALSE 39901
// exit ;
39899: GO 40040
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39901: LD_VAR 0 2
39905: PPUSH
39906: LD_VAR 0 3
39910: PPUSH
39911: CALL_OW 428
39915: PUSH
39916: LD_VAR 0 1
39920: EQUAL
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 314
39931: NOT
39932: AND
39933: IFFALSE 39859
// PlaySoundXY ( x , y , PlantMine ) ;
39935: LD_VAR 0 2
39939: PPUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: LD_STRING PlantMine
39947: PPUSH
39948: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39952: LD_VAR 0 2
39956: PPUSH
39957: LD_VAR 0 3
39961: PPUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 255
39971: PPUSH
39972: LD_INT 0
39974: PPUSH
39975: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39979: LD_ADDR_EXP 120
39983: PUSH
39984: LD_EXP 120
39988: PPUSH
39989: LD_VAR 0 5
39993: PUSH
39994: LD_EXP 120
39998: PUSH
39999: LD_VAR 0 5
40003: ARRAY
40004: PUSH
40005: LD_INT 1
40007: PLUS
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PPUSH
40013: LD_VAR 0 2
40017: PUSH
40018: LD_VAR 0 3
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PPUSH
40027: CALL 46388 0 3
40031: ST_TO_ADDR
// result := true ;
40032: LD_ADDR_VAR 0 4
40036: PUSH
40037: LD_INT 1
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 4
40044: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
40049: PPUSH
// if not unit in minersList then
40050: LD_VAR 0 1
40054: PUSH
40055: LD_EXP 119
40059: IN
40060: NOT
40061: IFFALSE 40065
// exit ;
40063: GO 40457
// index := GetElementIndex ( minersList , unit ) ;
40065: LD_ADDR_VAR 0 6
40069: PUSH
40070: LD_EXP 119
40074: PPUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL 46173 0 2
40084: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40085: LD_ADDR_VAR 0 5
40089: PUSH
40090: DOUBLE
40091: LD_EXP 120
40095: PUSH
40096: LD_VAR 0 6
40100: ARRAY
40101: INC
40102: ST_TO_ADDR
40103: LD_INT 1
40105: PUSH
40106: FOR_DOWNTO
40107: IFFALSE 40268
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40109: LD_EXP 120
40113: PUSH
40114: LD_VAR 0 6
40118: ARRAY
40119: PUSH
40120: LD_VAR 0 5
40124: ARRAY
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: PUSH
40130: LD_VAR 0 2
40134: EQUAL
40135: PUSH
40136: LD_EXP 120
40140: PUSH
40141: LD_VAR 0 6
40145: ARRAY
40146: PUSH
40147: LD_VAR 0 5
40151: ARRAY
40152: PUSH
40153: LD_INT 2
40155: ARRAY
40156: PUSH
40157: LD_VAR 0 3
40161: EQUAL
40162: AND
40163: IFFALSE 40266
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40165: LD_EXP 120
40169: PUSH
40170: LD_VAR 0 6
40174: ARRAY
40175: PUSH
40176: LD_VAR 0 5
40180: ARRAY
40181: PUSH
40182: LD_INT 1
40184: ARRAY
40185: PPUSH
40186: LD_EXP 120
40190: PUSH
40191: LD_VAR 0 6
40195: ARRAY
40196: PUSH
40197: LD_VAR 0 5
40201: ARRAY
40202: PUSH
40203: LD_INT 2
40205: ARRAY
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 255
40216: PPUSH
40217: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40221: LD_ADDR_EXP 120
40225: PUSH
40226: LD_EXP 120
40230: PPUSH
40231: LD_VAR 0 6
40235: PPUSH
40236: LD_EXP 120
40240: PUSH
40241: LD_VAR 0 6
40245: ARRAY
40246: PPUSH
40247: LD_VAR 0 5
40251: PPUSH
40252: CALL_OW 3
40256: PPUSH
40257: CALL_OW 1
40261: ST_TO_ADDR
// exit ;
40262: POP
40263: POP
40264: GO 40457
// end ; end ;
40266: GO 40106
40268: POP
40269: POP
// for i := minerMinesList [ index ] downto 1 do
40270: LD_ADDR_VAR 0 5
40274: PUSH
40275: DOUBLE
40276: LD_EXP 120
40280: PUSH
40281: LD_VAR 0 6
40285: ARRAY
40286: INC
40287: ST_TO_ADDR
40288: LD_INT 1
40290: PUSH
40291: FOR_DOWNTO
40292: IFFALSE 40455
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40294: LD_EXP 120
40298: PUSH
40299: LD_VAR 0 6
40303: ARRAY
40304: PUSH
40305: LD_VAR 0 5
40309: ARRAY
40310: PUSH
40311: LD_INT 1
40313: ARRAY
40314: PPUSH
40315: LD_EXP 120
40319: PUSH
40320: LD_VAR 0 6
40324: ARRAY
40325: PUSH
40326: LD_VAR 0 5
40330: ARRAY
40331: PUSH
40332: LD_INT 2
40334: ARRAY
40335: PPUSH
40336: LD_VAR 0 2
40340: PPUSH
40341: LD_VAR 0 3
40345: PPUSH
40346: CALL_OW 298
40350: PUSH
40351: LD_INT 6
40353: LESS
40354: IFFALSE 40453
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40356: LD_EXP 120
40360: PUSH
40361: LD_VAR 0 6
40365: ARRAY
40366: PUSH
40367: LD_VAR 0 5
40371: ARRAY
40372: PUSH
40373: LD_INT 1
40375: ARRAY
40376: PPUSH
40377: LD_EXP 120
40381: PUSH
40382: LD_VAR 0 6
40386: ARRAY
40387: PUSH
40388: LD_VAR 0 5
40392: ARRAY
40393: PUSH
40394: LD_INT 2
40396: ARRAY
40397: PPUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 255
40407: PPUSH
40408: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40412: LD_ADDR_EXP 120
40416: PUSH
40417: LD_EXP 120
40421: PPUSH
40422: LD_VAR 0 6
40426: PPUSH
40427: LD_EXP 120
40431: PUSH
40432: LD_VAR 0 6
40436: ARRAY
40437: PPUSH
40438: LD_VAR 0 5
40442: PPUSH
40443: CALL_OW 3
40447: PPUSH
40448: CALL_OW 1
40452: ST_TO_ADDR
// end ; end ;
40453: GO 40291
40455: POP
40456: POP
// end ;
40457: LD_VAR 0 4
40461: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40462: LD_INT 0
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40473: LD_VAR 0 1
40477: PPUSH
40478: CALL_OW 264
40482: PUSH
40483: LD_INT 81
40485: EQUAL
40486: NOT
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: LD_EXP 119
40497: IN
40498: NOT
40499: OR
40500: IFFALSE 40504
// exit ;
40502: GO 40826
// index := GetElementIndex ( minersList , unit ) ;
40504: LD_ADDR_VAR 0 6
40508: PUSH
40509: LD_EXP 119
40513: PPUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: CALL 46173 0 2
40523: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40524: LD_ADDR_VAR 0 8
40528: PUSH
40529: LD_EXP 121
40533: PUSH
40534: LD_EXP 120
40538: PUSH
40539: LD_VAR 0 6
40543: ARRAY
40544: MINUS
40545: ST_TO_ADDR
// if not minesFreeAmount then
40546: LD_VAR 0 8
40550: NOT
40551: IFFALSE 40555
// exit ;
40553: GO 40826
// tmp := [ ] ;
40555: LD_ADDR_VAR 0 7
40559: PUSH
40560: EMPTY
40561: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40562: LD_ADDR_VAR 0 5
40566: PUSH
40567: DOUBLE
40568: LD_INT 1
40570: DEC
40571: ST_TO_ADDR
40572: LD_VAR 0 8
40576: PUSH
40577: FOR_TO
40578: IFFALSE 40773
// begin _d := rand ( 0 , 5 ) ;
40580: LD_ADDR_VAR 0 11
40584: PUSH
40585: LD_INT 0
40587: PPUSH
40588: LD_INT 5
40590: PPUSH
40591: CALL_OW 12
40595: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40596: LD_ADDR_VAR 0 12
40600: PUSH
40601: LD_INT 2
40603: PPUSH
40604: LD_INT 6
40606: PPUSH
40607: CALL_OW 12
40611: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40612: LD_ADDR_VAR 0 9
40616: PUSH
40617: LD_VAR 0 2
40621: PPUSH
40622: LD_VAR 0 11
40626: PPUSH
40627: LD_VAR 0 12
40631: PPUSH
40632: CALL_OW 272
40636: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40637: LD_ADDR_VAR 0 10
40641: PUSH
40642: LD_VAR 0 3
40646: PPUSH
40647: LD_VAR 0 11
40651: PPUSH
40652: LD_VAR 0 12
40656: PPUSH
40657: CALL_OW 273
40661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40662: LD_VAR 0 9
40666: PPUSH
40667: LD_VAR 0 10
40671: PPUSH
40672: CALL_OW 488
40676: PUSH
40677: LD_VAR 0 9
40681: PUSH
40682: LD_VAR 0 10
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_VAR 0 7
40695: IN
40696: NOT
40697: AND
40698: PUSH
40699: LD_VAR 0 9
40703: PPUSH
40704: LD_VAR 0 10
40708: PPUSH
40709: CALL_OW 458
40713: NOT
40714: AND
40715: IFFALSE 40757
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: LD_VAR 0 7
40726: PPUSH
40727: LD_VAR 0 7
40731: PUSH
40732: LD_INT 1
40734: PLUS
40735: PPUSH
40736: LD_VAR 0 9
40740: PUSH
40741: LD_VAR 0 10
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 1
40754: ST_TO_ADDR
40755: GO 40771
// i := i - 1 ;
40757: LD_ADDR_VAR 0 5
40761: PUSH
40762: LD_VAR 0 5
40766: PUSH
40767: LD_INT 1
40769: MINUS
40770: ST_TO_ADDR
// end ;
40771: GO 40577
40773: POP
40774: POP
// for i in tmp do
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 7
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40824
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 5
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: LD_VAR 0 5
40806: PUSH
40807: LD_INT 2
40809: ARRAY
40810: PPUSH
40811: CALL 39770 0 3
40815: NOT
40816: IFFALSE 40822
// exit ;
40818: POP
40819: POP
40820: GO 40826
40822: GO 40785
40824: POP
40825: POP
// end ;
40826: LD_VAR 0 4
40830: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
// if not GetClass ( unit ) = class_sniper then
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 257
40849: PUSH
40850: LD_INT 5
40852: EQUAL
40853: NOT
40854: IFFALSE 40858
// exit ;
40856: GO 41246
// dist := 8 ;
40858: LD_ADDR_VAR 0 5
40862: PUSH
40863: LD_INT 8
40865: ST_TO_ADDR
// viewRange := 12 ;
40866: LD_ADDR_VAR 0 7
40870: PUSH
40871: LD_INT 12
40873: ST_TO_ADDR
// side := GetSide ( unit ) ;
40874: LD_ADDR_VAR 0 6
40878: PUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 255
40888: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40889: LD_INT 61
40891: PPUSH
40892: LD_VAR 0 6
40896: PPUSH
40897: CALL_OW 321
40901: PUSH
40902: LD_INT 2
40904: EQUAL
40905: IFFALSE 40915
// viewRange := 16 ;
40907: LD_ADDR_VAR 0 7
40911: PUSH
40912: LD_INT 16
40914: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40915: LD_VAR 0 1
40919: PPUSH
40920: LD_VAR 0 2
40924: PPUSH
40925: LD_VAR 0 3
40929: PPUSH
40930: CALL_OW 297
40934: PUSH
40935: LD_VAR 0 5
40939: GREATER
40940: IFFALSE 41019
// begin ComMoveXY ( unit , x , y ) ;
40942: LD_VAR 0 1
40946: PPUSH
40947: LD_VAR 0 2
40951: PPUSH
40952: LD_VAR 0 3
40956: PPUSH
40957: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40961: LD_INT 35
40963: PPUSH
40964: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40968: LD_VAR 0 1
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: LD_VAR 0 3
40982: PPUSH
40983: CALL 77528 0 3
40987: NOT
40988: IFFALSE 40992
// exit ;
40990: GO 41246
// until GetDistUnitXY ( unit , x , y ) < dist ;
40992: LD_VAR 0 1
40996: PPUSH
40997: LD_VAR 0 2
41001: PPUSH
41002: LD_VAR 0 3
41006: PPUSH
41007: CALL_OW 297
41011: PUSH
41012: LD_VAR 0 5
41016: LESS
41017: IFFALSE 40961
// end ; ComTurnXY ( unit , x , y ) ;
41019: LD_VAR 0 1
41023: PPUSH
41024: LD_VAR 0 2
41028: PPUSH
41029: LD_VAR 0 3
41033: PPUSH
41034: CALL_OW 118
// wait ( 5 ) ;
41038: LD_INT 5
41040: PPUSH
41041: CALL_OW 67
// _d := GetDir ( unit ) ;
41045: LD_ADDR_VAR 0 10
41049: PUSH
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 254
41059: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41060: LD_ADDR_VAR 0 8
41064: PUSH
41065: LD_VAR 0 1
41069: PPUSH
41070: CALL_OW 250
41074: PPUSH
41075: LD_VAR 0 10
41079: PPUSH
41080: LD_VAR 0 5
41084: PPUSH
41085: CALL_OW 272
41089: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41090: LD_ADDR_VAR 0 9
41094: PUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 251
41104: PPUSH
41105: LD_VAR 0 10
41109: PPUSH
41110: LD_VAR 0 5
41114: PPUSH
41115: CALL_OW 273
41119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41120: LD_VAR 0 8
41124: PPUSH
41125: LD_VAR 0 9
41129: PPUSH
41130: CALL_OW 488
41134: NOT
41135: IFFALSE 41139
// exit ;
41137: GO 41246
// ComAnimCustom ( unit , 1 ) ;
41139: LD_VAR 0 1
41143: PPUSH
41144: LD_INT 1
41146: PPUSH
41147: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41151: LD_VAR 0 8
41155: PPUSH
41156: LD_VAR 0 9
41160: PPUSH
41161: LD_VAR 0 6
41165: PPUSH
41166: LD_VAR 0 7
41170: PPUSH
41171: CALL_OW 330
// repeat wait ( 1 ) ;
41175: LD_INT 1
41177: PPUSH
41178: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 316
41191: PUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 314
41201: OR
41202: PUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 302
41212: NOT
41213: OR
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 301
41224: OR
41225: IFFALSE 41175
// RemoveSeeing ( _x , _y , side ) ;
41227: LD_VAR 0 8
41231: PPUSH
41232: LD_VAR 0 9
41236: PPUSH
41237: LD_VAR 0 6
41241: PPUSH
41242: CALL_OW 331
// end ; end_of_file
41246: LD_VAR 0 4
41250: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41251: LD_INT 0
41253: PPUSH
41254: PPUSH
// if exist_mode then
41255: LD_VAR 0 2
41259: IFFALSE 41284
// unit := CreateCharacter ( prefix & ident ) else
41261: LD_ADDR_VAR 0 5
41265: PUSH
41266: LD_VAR 0 3
41270: PUSH
41271: LD_VAR 0 1
41275: STR
41276: PPUSH
41277: CALL_OW 34
41281: ST_TO_ADDR
41282: GO 41299
// unit := NewCharacter ( ident ) ;
41284: LD_ADDR_VAR 0 5
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 25
41298: ST_TO_ADDR
// result := unit ;
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: LD_VAR 0 5
41308: ST_TO_ADDR
// end ;
41309: LD_VAR 0 4
41313: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41314: LD_INT 0
41316: PPUSH
41317: PPUSH
// if not side or not nation then
41318: LD_VAR 0 1
41322: NOT
41323: PUSH
41324: LD_VAR 0 2
41328: NOT
41329: OR
41330: IFFALSE 41334
// exit ;
41332: GO 42102
// case nation of nation_american :
41334: LD_VAR 0 2
41338: PUSH
41339: LD_INT 1
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41347
41345: GO 41561
41347: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41348: LD_ADDR_VAR 0 4
41352: PUSH
41353: LD_INT 35
41355: PUSH
41356: LD_INT 45
41358: PUSH
41359: LD_INT 46
41361: PUSH
41362: LD_INT 47
41364: PUSH
41365: LD_INT 82
41367: PUSH
41368: LD_INT 83
41370: PUSH
41371: LD_INT 84
41373: PUSH
41374: LD_INT 85
41376: PUSH
41377: LD_INT 86
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 6
41388: PUSH
41389: LD_INT 15
41391: PUSH
41392: LD_INT 16
41394: PUSH
41395: LD_INT 7
41397: PUSH
41398: LD_INT 12
41400: PUSH
41401: LD_INT 13
41403: PUSH
41404: LD_INT 10
41406: PUSH
41407: LD_INT 14
41409: PUSH
41410: LD_INT 20
41412: PUSH
41413: LD_INT 21
41415: PUSH
41416: LD_INT 22
41418: PUSH
41419: LD_INT 25
41421: PUSH
41422: LD_INT 32
41424: PUSH
41425: LD_INT 27
41427: PUSH
41428: LD_INT 36
41430: PUSH
41431: LD_INT 69
41433: PUSH
41434: LD_INT 39
41436: PUSH
41437: LD_INT 34
41439: PUSH
41440: LD_INT 40
41442: PUSH
41443: LD_INT 48
41445: PUSH
41446: LD_INT 49
41448: PUSH
41449: LD_INT 50
41451: PUSH
41452: LD_INT 51
41454: PUSH
41455: LD_INT 52
41457: PUSH
41458: LD_INT 53
41460: PUSH
41461: LD_INT 54
41463: PUSH
41464: LD_INT 55
41466: PUSH
41467: LD_INT 56
41469: PUSH
41470: LD_INT 57
41472: PUSH
41473: LD_INT 58
41475: PUSH
41476: LD_INT 59
41478: PUSH
41479: LD_INT 60
41481: PUSH
41482: LD_INT 61
41484: PUSH
41485: LD_INT 62
41487: PUSH
41488: LD_INT 80
41490: PUSH
41491: LD_INT 82
41493: PUSH
41494: LD_INT 83
41496: PUSH
41497: LD_INT 84
41499: PUSH
41500: LD_INT 85
41502: PUSH
41503: LD_INT 86
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: ST_TO_ADDR
41559: GO 42026
41561: LD_INT 2
41563: DOUBLE
41564: EQUAL
41565: IFTRUE 41569
41567: GO 41795
41569: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41570: LD_ADDR_VAR 0 4
41574: PUSH
41575: LD_INT 35
41577: PUSH
41578: LD_INT 45
41580: PUSH
41581: LD_INT 46
41583: PUSH
41584: LD_INT 47
41586: PUSH
41587: LD_INT 82
41589: PUSH
41590: LD_INT 83
41592: PUSH
41593: LD_INT 84
41595: PUSH
41596: LD_INT 85
41598: PUSH
41599: LD_INT 87
41601: PUSH
41602: LD_INT 70
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 11
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: LD_INT 4
41616: PUSH
41617: LD_INT 5
41619: PUSH
41620: LD_INT 6
41622: PUSH
41623: LD_INT 15
41625: PUSH
41626: LD_INT 18
41628: PUSH
41629: LD_INT 7
41631: PUSH
41632: LD_INT 17
41634: PUSH
41635: LD_INT 8
41637: PUSH
41638: LD_INT 20
41640: PUSH
41641: LD_INT 21
41643: PUSH
41644: LD_INT 22
41646: PUSH
41647: LD_INT 72
41649: PUSH
41650: LD_INT 26
41652: PUSH
41653: LD_INT 69
41655: PUSH
41656: LD_INT 39
41658: PUSH
41659: LD_INT 40
41661: PUSH
41662: LD_INT 41
41664: PUSH
41665: LD_INT 42
41667: PUSH
41668: LD_INT 43
41670: PUSH
41671: LD_INT 48
41673: PUSH
41674: LD_INT 49
41676: PUSH
41677: LD_INT 50
41679: PUSH
41680: LD_INT 51
41682: PUSH
41683: LD_INT 52
41685: PUSH
41686: LD_INT 53
41688: PUSH
41689: LD_INT 54
41691: PUSH
41692: LD_INT 55
41694: PUSH
41695: LD_INT 56
41697: PUSH
41698: LD_INT 60
41700: PUSH
41701: LD_INT 61
41703: PUSH
41704: LD_INT 62
41706: PUSH
41707: LD_INT 66
41709: PUSH
41710: LD_INT 67
41712: PUSH
41713: LD_INT 68
41715: PUSH
41716: LD_INT 81
41718: PUSH
41719: LD_INT 82
41721: PUSH
41722: LD_INT 83
41724: PUSH
41725: LD_INT 84
41727: PUSH
41728: LD_INT 85
41730: PUSH
41731: LD_INT 87
41733: PUSH
41734: LD_INT 88
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: ST_TO_ADDR
41793: GO 42026
41795: LD_INT 3
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 42025
41803: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41804: LD_ADDR_VAR 0 4
41808: PUSH
41809: LD_INT 46
41811: PUSH
41812: LD_INT 47
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 82
41823: PUSH
41824: LD_INT 83
41826: PUSH
41827: LD_INT 84
41829: PUSH
41830: LD_INT 85
41832: PUSH
41833: LD_INT 86
41835: PUSH
41836: LD_INT 11
41838: PUSH
41839: LD_INT 9
41841: PUSH
41842: LD_INT 20
41844: PUSH
41845: LD_INT 19
41847: PUSH
41848: LD_INT 21
41850: PUSH
41851: LD_INT 24
41853: PUSH
41854: LD_INT 22
41856: PUSH
41857: LD_INT 25
41859: PUSH
41860: LD_INT 28
41862: PUSH
41863: LD_INT 29
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 31
41871: PUSH
41872: LD_INT 37
41874: PUSH
41875: LD_INT 38
41877: PUSH
41878: LD_INT 32
41880: PUSH
41881: LD_INT 27
41883: PUSH
41884: LD_INT 33
41886: PUSH
41887: LD_INT 69
41889: PUSH
41890: LD_INT 39
41892: PUSH
41893: LD_INT 34
41895: PUSH
41896: LD_INT 40
41898: PUSH
41899: LD_INT 71
41901: PUSH
41902: LD_INT 23
41904: PUSH
41905: LD_INT 44
41907: PUSH
41908: LD_INT 48
41910: PUSH
41911: LD_INT 49
41913: PUSH
41914: LD_INT 50
41916: PUSH
41917: LD_INT 51
41919: PUSH
41920: LD_INT 52
41922: PUSH
41923: LD_INT 53
41925: PUSH
41926: LD_INT 54
41928: PUSH
41929: LD_INT 55
41931: PUSH
41932: LD_INT 56
41934: PUSH
41935: LD_INT 57
41937: PUSH
41938: LD_INT 58
41940: PUSH
41941: LD_INT 59
41943: PUSH
41944: LD_INT 63
41946: PUSH
41947: LD_INT 64
41949: PUSH
41950: LD_INT 65
41952: PUSH
41953: LD_INT 82
41955: PUSH
41956: LD_INT 83
41958: PUSH
41959: LD_INT 84
41961: PUSH
41962: LD_INT 85
41964: PUSH
41965: LD_INT 86
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
42023: GO 42026
42025: POP
// if state > - 1 and state < 3 then
42026: LD_VAR 0 3
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: GREATER
42035: PUSH
42036: LD_VAR 0 3
42040: PUSH
42041: LD_INT 3
42043: LESS
42044: AND
42045: IFFALSE 42102
// for i in result do
42047: LD_ADDR_VAR 0 5
42051: PUSH
42052: LD_VAR 0 4
42056: PUSH
42057: FOR_IN
42058: IFFALSE 42100
// if GetTech ( i , side ) <> state then
42060: LD_VAR 0 5
42064: PPUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: CALL_OW 321
42074: PUSH
42075: LD_VAR 0 3
42079: NONEQUAL
42080: IFFALSE 42098
// result := result diff i ;
42082: LD_ADDR_VAR 0 4
42086: PUSH
42087: LD_VAR 0 4
42091: PUSH
42092: LD_VAR 0 5
42096: DIFF
42097: ST_TO_ADDR
42098: GO 42057
42100: POP
42101: POP
// end ;
42102: LD_VAR 0 4
42106: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42107: LD_INT 0
42109: PPUSH
42110: PPUSH
42111: PPUSH
// result := true ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_INT 1
42119: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42120: LD_ADDR_VAR 0 5
42124: PUSH
42125: LD_VAR 0 2
42129: PPUSH
42130: CALL_OW 480
42134: ST_TO_ADDR
// if not tmp then
42135: LD_VAR 0 5
42139: NOT
42140: IFFALSE 42144
// exit ;
42142: GO 42193
// for i in tmp do
42144: LD_ADDR_VAR 0 4
42148: PUSH
42149: LD_VAR 0 5
42153: PUSH
42154: FOR_IN
42155: IFFALSE 42191
// if GetTech ( i , side ) <> state_researched then
42157: LD_VAR 0 4
42161: PPUSH
42162: LD_VAR 0 1
42166: PPUSH
42167: CALL_OW 321
42171: PUSH
42172: LD_INT 2
42174: NONEQUAL
42175: IFFALSE 42189
// begin result := false ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 0
42184: ST_TO_ADDR
// exit ;
42185: POP
42186: POP
42187: GO 42193
// end ;
42189: GO 42154
42191: POP
42192: POP
// end ;
42193: LD_VAR 0 3
42197: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42198: LD_INT 0
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42213: LD_VAR 0 1
42217: NOT
42218: PUSH
42219: LD_VAR 0 1
42223: PPUSH
42224: CALL_OW 257
42228: PUSH
42229: LD_INT 9
42231: NONEQUAL
42232: OR
42233: IFFALSE 42237
// exit ;
42235: GO 42810
// side := GetSide ( unit ) ;
42237: LD_ADDR_VAR 0 9
42241: PUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 255
42251: ST_TO_ADDR
// tech_space := tech_spacanom ;
42252: LD_ADDR_VAR 0 12
42256: PUSH
42257: LD_INT 29
42259: ST_TO_ADDR
// tech_time := tech_taurad ;
42260: LD_ADDR_VAR 0 13
42264: PUSH
42265: LD_INT 28
42267: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42268: LD_ADDR_VAR 0 11
42272: PUSH
42273: LD_VAR 0 1
42277: PPUSH
42278: CALL_OW 310
42282: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42283: LD_VAR 0 11
42287: PPUSH
42288: CALL_OW 247
42292: PUSH
42293: LD_INT 2
42295: EQUAL
42296: IFFALSE 42300
// exit ;
42298: GO 42810
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42300: LD_ADDR_VAR 0 8
42304: PUSH
42305: LD_INT 81
42307: PUSH
42308: LD_VAR 0 9
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: PUSH
42320: LD_INT 21
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PPUSH
42338: CALL_OW 69
42342: ST_TO_ADDR
// if not tmp then
42343: LD_VAR 0 8
42347: NOT
42348: IFFALSE 42352
// exit ;
42350: GO 42810
// if in_unit then
42352: LD_VAR 0 11
42356: IFFALSE 42380
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42358: LD_ADDR_VAR 0 10
42362: PUSH
42363: LD_VAR 0 8
42367: PPUSH
42368: LD_VAR 0 11
42372: PPUSH
42373: CALL_OW 74
42377: ST_TO_ADDR
42378: GO 42400
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42380: LD_ADDR_VAR 0 10
42384: PUSH
42385: LD_VAR 0 8
42389: PPUSH
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 74
42399: ST_TO_ADDR
// if not enemy then
42400: LD_VAR 0 10
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 42810
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42409: LD_VAR 0 11
42413: PUSH
42414: LD_VAR 0 11
42418: PPUSH
42419: LD_VAR 0 10
42423: PPUSH
42424: CALL_OW 296
42428: PUSH
42429: LD_INT 13
42431: GREATER
42432: AND
42433: PUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: LD_VAR 0 10
42443: PPUSH
42444: CALL_OW 296
42448: PUSH
42449: LD_INT 12
42451: GREATER
42452: OR
42453: IFFALSE 42457
// exit ;
42455: GO 42810
// missile := [ 1 ] ;
42457: LD_ADDR_VAR 0 14
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42468: LD_VAR 0 9
42472: PPUSH
42473: LD_VAR 0 12
42477: PPUSH
42478: CALL_OW 325
42482: IFFALSE 42511
// missile := Replace ( missile , missile + 1 , 2 ) ;
42484: LD_ADDR_VAR 0 14
42488: PUSH
42489: LD_VAR 0 14
42493: PPUSH
42494: LD_VAR 0 14
42498: PUSH
42499: LD_INT 1
42501: PLUS
42502: PPUSH
42503: LD_INT 2
42505: PPUSH
42506: CALL_OW 1
42510: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42511: LD_VAR 0 9
42515: PPUSH
42516: LD_VAR 0 13
42520: PPUSH
42521: CALL_OW 325
42525: PUSH
42526: LD_VAR 0 10
42530: PPUSH
42531: CALL_OW 255
42535: PPUSH
42536: LD_VAR 0 13
42540: PPUSH
42541: CALL_OW 325
42545: NOT
42546: AND
42547: IFFALSE 42576
// missile := Replace ( missile , missile + 1 , 3 ) ;
42549: LD_ADDR_VAR 0 14
42553: PUSH
42554: LD_VAR 0 14
42558: PPUSH
42559: LD_VAR 0 14
42563: PUSH
42564: LD_INT 1
42566: PLUS
42567: PPUSH
42568: LD_INT 3
42570: PPUSH
42571: CALL_OW 1
42575: ST_TO_ADDR
// if missile < 2 then
42576: LD_VAR 0 14
42580: PUSH
42581: LD_INT 2
42583: LESS
42584: IFFALSE 42588
// exit ;
42586: GO 42810
// x := GetX ( enemy ) ;
42588: LD_ADDR_VAR 0 4
42592: PUSH
42593: LD_VAR 0 10
42597: PPUSH
42598: CALL_OW 250
42602: ST_TO_ADDR
// y := GetY ( enemy ) ;
42603: LD_ADDR_VAR 0 5
42607: PUSH
42608: LD_VAR 0 10
42612: PPUSH
42613: CALL_OW 251
42617: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42618: LD_ADDR_VAR 0 6
42622: PUSH
42623: LD_VAR 0 4
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PPUSH
42632: LD_INT 1
42634: PPUSH
42635: CALL_OW 12
42639: PLUS
42640: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42641: LD_ADDR_VAR 0 7
42645: PUSH
42646: LD_VAR 0 5
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PPUSH
42655: LD_INT 1
42657: PPUSH
42658: CALL_OW 12
42662: PLUS
42663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42664: LD_VAR 0 6
42668: PPUSH
42669: LD_VAR 0 7
42673: PPUSH
42674: CALL_OW 488
42678: NOT
42679: IFFALSE 42701
// begin _x := x ;
42681: LD_ADDR_VAR 0 6
42685: PUSH
42686: LD_VAR 0 4
42690: ST_TO_ADDR
// _y := y ;
42691: LD_ADDR_VAR 0 7
42695: PUSH
42696: LD_VAR 0 5
42700: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_INT 1
42708: PPUSH
42709: LD_VAR 0 14
42713: PPUSH
42714: CALL_OW 12
42718: ST_TO_ADDR
// case i of 1 :
42719: LD_VAR 0 3
42723: PUSH
42724: LD_INT 1
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 42749
42732: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42733: LD_VAR 0 1
42737: PPUSH
42738: LD_VAR 0 10
42742: PPUSH
42743: CALL_OW 115
42747: GO 42810
42749: LD_INT 2
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42757
42755: GO 42779
42757: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42758: LD_VAR 0 1
42762: PPUSH
42763: LD_VAR 0 6
42767: PPUSH
42768: LD_VAR 0 7
42772: PPUSH
42773: CALL_OW 153
42777: GO 42810
42779: LD_INT 3
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 42809
42787: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42788: LD_VAR 0 1
42792: PPUSH
42793: LD_VAR 0 6
42797: PPUSH
42798: LD_VAR 0 7
42802: PPUSH
42803: CALL_OW 154
42807: GO 42810
42809: POP
// end ;
42810: LD_VAR 0 2
42814: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42815: LD_INT 0
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
// if not unit or not building then
42823: LD_VAR 0 1
42827: NOT
42828: PUSH
42829: LD_VAR 0 2
42833: NOT
42834: OR
42835: IFFALSE 42839
// exit ;
42837: GO 42997
// x := GetX ( building ) ;
42839: LD_ADDR_VAR 0 5
42843: PUSH
42844: LD_VAR 0 2
42848: PPUSH
42849: CALL_OW 250
42853: ST_TO_ADDR
// y := GetY ( building ) ;
42854: LD_ADDR_VAR 0 6
42858: PUSH
42859: LD_VAR 0 2
42863: PPUSH
42864: CALL_OW 251
42868: ST_TO_ADDR
// for i = 0 to 5 do
42869: LD_ADDR_VAR 0 4
42873: PUSH
42874: DOUBLE
42875: LD_INT 0
42877: DEC
42878: ST_TO_ADDR
42879: LD_INT 5
42881: PUSH
42882: FOR_TO
42883: IFFALSE 42995
// begin _x := ShiftX ( x , i , 3 ) ;
42885: LD_ADDR_VAR 0 7
42889: PUSH
42890: LD_VAR 0 5
42894: PPUSH
42895: LD_VAR 0 4
42899: PPUSH
42900: LD_INT 3
42902: PPUSH
42903: CALL_OW 272
42907: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42908: LD_ADDR_VAR 0 8
42912: PUSH
42913: LD_VAR 0 6
42917: PPUSH
42918: LD_VAR 0 4
42922: PPUSH
42923: LD_INT 3
42925: PPUSH
42926: CALL_OW 273
42930: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42931: LD_VAR 0 7
42935: PPUSH
42936: LD_VAR 0 8
42940: PPUSH
42941: CALL_OW 488
42945: NOT
42946: IFFALSE 42950
// continue ;
42948: GO 42882
// if HexInfo ( _x , _y ) = 0 then
42950: LD_VAR 0 7
42954: PPUSH
42955: LD_VAR 0 8
42959: PPUSH
42960: CALL_OW 428
42964: PUSH
42965: LD_INT 0
42967: EQUAL
42968: IFFALSE 42993
// begin ComMoveXY ( unit , _x , _y ) ;
42970: LD_VAR 0 1
42974: PPUSH
42975: LD_VAR 0 7
42979: PPUSH
42980: LD_VAR 0 8
42984: PPUSH
42985: CALL_OW 111
// exit ;
42989: POP
42990: POP
42991: GO 42997
// end ; end ;
42993: GO 42882
42995: POP
42996: POP
// end ;
42997: LD_VAR 0 3
43001: RET
// export function ScanBase ( side , base_area ) ; begin
43002: LD_INT 0
43004: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43005: LD_ADDR_VAR 0 3
43009: PUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: LD_INT 81
43017: PUSH
43018: LD_VAR 0 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PPUSH
43027: CALL_OW 70
43031: ST_TO_ADDR
// end ;
43032: LD_VAR 0 3
43036: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43037: LD_INT 0
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
// result := false ;
43043: LD_ADDR_VAR 0 2
43047: PUSH
43048: LD_INT 0
43050: ST_TO_ADDR
// side := GetSide ( unit ) ;
43051: LD_ADDR_VAR 0 3
43055: PUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: CALL_OW 255
43065: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43066: LD_ADDR_VAR 0 4
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 248
43080: ST_TO_ADDR
// case nat of 1 :
43081: LD_VAR 0 4
43085: PUSH
43086: LD_INT 1
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43094
43092: GO 43105
43094: POP
// tech := tech_lassight ; 2 :
43095: LD_ADDR_VAR 0 5
43099: PUSH
43100: LD_INT 12
43102: ST_TO_ADDR
43103: GO 43144
43105: LD_INT 2
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43124
43113: POP
// tech := tech_mortar ; 3 :
43114: LD_ADDR_VAR 0 5
43118: PUSH
43119: LD_INT 41
43121: ST_TO_ADDR
43122: GO 43144
43124: LD_INT 3
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43143
43132: POP
// tech := tech_bazooka ; end ;
43133: LD_ADDR_VAR 0 5
43137: PUSH
43138: LD_INT 44
43140: ST_TO_ADDR
43141: GO 43144
43143: POP
// if Researched ( side , tech ) then
43144: LD_VAR 0 3
43148: PPUSH
43149: LD_VAR 0 5
43153: PPUSH
43154: CALL_OW 325
43158: IFFALSE 43185
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43160: LD_ADDR_VAR 0 2
43164: PUSH
43165: LD_INT 5
43167: PUSH
43168: LD_INT 8
43170: PUSH
43171: LD_INT 9
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: PUSH
43179: LD_VAR 0 4
43183: ARRAY
43184: ST_TO_ADDR
// end ;
43185: LD_VAR 0 2
43189: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43190: LD_INT 0
43192: PPUSH
43193: PPUSH
43194: PPUSH
// if not mines then
43195: LD_VAR 0 2
43199: NOT
43200: IFFALSE 43204
// exit ;
43202: GO 43348
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43204: LD_ADDR_VAR 0 5
43208: PUSH
43209: LD_INT 81
43211: PUSH
43212: LD_VAR 0 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 21
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PPUSH
43242: CALL_OW 69
43246: ST_TO_ADDR
// for i in mines do
43247: LD_ADDR_VAR 0 4
43251: PUSH
43252: LD_VAR 0 2
43256: PUSH
43257: FOR_IN
43258: IFFALSE 43346
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43260: LD_VAR 0 4
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PPUSH
43269: LD_VAR 0 4
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: PPUSH
43278: CALL_OW 458
43282: NOT
43283: IFFALSE 43287
// continue ;
43285: GO 43257
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43287: LD_VAR 0 4
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: PPUSH
43296: LD_VAR 0 4
43300: PUSH
43301: LD_INT 2
43303: ARRAY
43304: PPUSH
43305: CALL_OW 428
43309: PUSH
43310: LD_VAR 0 5
43314: IN
43315: IFFALSE 43344
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43317: LD_VAR 0 4
43321: PUSH
43322: LD_INT 1
43324: ARRAY
43325: PPUSH
43326: LD_VAR 0 4
43330: PUSH
43331: LD_INT 2
43333: ARRAY
43334: PPUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 456
// end ;
43344: GO 43257
43346: POP
43347: POP
// end ;
43348: LD_VAR 0 3
43352: RET
// export function Count ( array ) ; var i ; begin
43353: LD_INT 0
43355: PPUSH
43356: PPUSH
// result := 0 ;
43357: LD_ADDR_VAR 0 2
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
// for i in array do
43365: LD_ADDR_VAR 0 3
43369: PUSH
43370: LD_VAR 0 1
43374: PUSH
43375: FOR_IN
43376: IFFALSE 43400
// if i then
43378: LD_VAR 0 3
43382: IFFALSE 43398
// result := result + 1 ;
43384: LD_ADDR_VAR 0 2
43388: PUSH
43389: LD_VAR 0 2
43393: PUSH
43394: LD_INT 1
43396: PLUS
43397: ST_TO_ADDR
43398: GO 43375
43400: POP
43401: POP
// end ;
43402: LD_VAR 0 2
43406: RET
// export function IsEmpty ( building ) ; begin
43407: LD_INT 0
43409: PPUSH
// if not building then
43410: LD_VAR 0 1
43414: NOT
43415: IFFALSE 43419
// exit ;
43417: GO 43462
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43419: LD_ADDR_VAR 0 2
43423: PUSH
43424: LD_VAR 0 1
43428: PUSH
43429: LD_INT 22
43431: PUSH
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 255
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 58
43448: PUSH
43449: EMPTY
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PPUSH
43456: CALL_OW 69
43460: IN
43461: ST_TO_ADDR
// end ;
43462: LD_VAR 0 2
43466: RET
// export function IsNotFull ( building ) ; var places ; begin
43467: LD_INT 0
43469: PPUSH
43470: PPUSH
// if not building then
43471: LD_VAR 0 1
43475: NOT
43476: IFFALSE 43480
// exit ;
43478: GO 43651
// result := false ;
43480: LD_ADDR_VAR 0 2
43484: PUSH
43485: LD_INT 0
43487: ST_TO_ADDR
// places := 0 ;
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 0
43495: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 266
43505: PUSH
43506: LD_INT 0
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43568
43512: LD_INT 1
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43568
43518: LD_INT 6
43520: DOUBLE
43521: EQUAL
43522: IFTRUE 43568
43524: LD_INT 7
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43568
43530: LD_INT 8
43532: DOUBLE
43533: EQUAL
43534: IFTRUE 43568
43536: LD_INT 4
43538: DOUBLE
43539: EQUAL
43540: IFTRUE 43568
43542: LD_INT 5
43544: DOUBLE
43545: EQUAL
43546: IFTRUE 43568
43548: LD_INT 2
43550: DOUBLE
43551: EQUAL
43552: IFTRUE 43568
43554: LD_INT 3
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43568
43560: LD_INT 35
43562: DOUBLE
43563: EQUAL
43564: IFTRUE 43568
43566: GO 43579
43568: POP
// places := 6 ; b_bunker , b_breastwork :
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_INT 6
43576: ST_TO_ADDR
43577: GO 43624
43579: LD_INT 32
43581: DOUBLE
43582: EQUAL
43583: IFTRUE 43593
43585: LD_INT 31
43587: DOUBLE
43588: EQUAL
43589: IFTRUE 43593
43591: GO 43604
43593: POP
// places := 1 ; b_control_tower :
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_INT 1
43601: ST_TO_ADDR
43602: GO 43624
43604: LD_INT 36
43606: DOUBLE
43607: EQUAL
43608: IFTRUE 43612
43610: GO 43623
43612: POP
// places := 3 ; end ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_INT 3
43620: ST_TO_ADDR
43621: GO 43624
43623: POP
// if places then
43624: LD_VAR 0 3
43628: IFFALSE 43651
// result := UnitsInside ( building ) < places ;
43630: LD_ADDR_VAR 0 2
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 313
43644: PUSH
43645: LD_VAR 0 3
43649: LESS
43650: ST_TO_ADDR
// end ;
43651: LD_VAR 0 2
43655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43656: LD_INT 0
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
// tmp := [ ] ;
43662: LD_ADDR_VAR 0 3
43666: PUSH
43667: EMPTY
43668: ST_TO_ADDR
// list := [ ] ;
43669: LD_ADDR_VAR 0 5
43673: PUSH
43674: EMPTY
43675: ST_TO_ADDR
// for i = 16 to 25 do
43676: LD_ADDR_VAR 0 4
43680: PUSH
43681: DOUBLE
43682: LD_INT 16
43684: DEC
43685: ST_TO_ADDR
43686: LD_INT 25
43688: PUSH
43689: FOR_TO
43690: IFFALSE 43763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43692: LD_ADDR_VAR 0 3
43696: PUSH
43697: LD_VAR 0 3
43701: PUSH
43702: LD_INT 22
43704: PUSH
43705: LD_VAR 0 1
43709: PPUSH
43710: CALL_OW 255
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 91
43721: PUSH
43722: LD_VAR 0 1
43726: PUSH
43727: LD_INT 6
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 30
43737: PUSH
43738: LD_VAR 0 4
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: PUSH
43752: EMPTY
43753: LIST
43754: PPUSH
43755: CALL_OW 69
43759: ADD
43760: ST_TO_ADDR
43761: GO 43689
43763: POP
43764: POP
// for i = 1 to tmp do
43765: LD_ADDR_VAR 0 4
43769: PUSH
43770: DOUBLE
43771: LD_INT 1
43773: DEC
43774: ST_TO_ADDR
43775: LD_VAR 0 3
43779: PUSH
43780: FOR_TO
43781: IFFALSE 43869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43783: LD_ADDR_VAR 0 5
43787: PUSH
43788: LD_VAR 0 5
43792: PUSH
43793: LD_VAR 0 3
43797: PUSH
43798: LD_VAR 0 4
43802: ARRAY
43803: PPUSH
43804: CALL_OW 266
43808: PUSH
43809: LD_VAR 0 3
43813: PUSH
43814: LD_VAR 0 4
43818: ARRAY
43819: PPUSH
43820: CALL_OW 250
43824: PUSH
43825: LD_VAR 0 3
43829: PUSH
43830: LD_VAR 0 4
43834: ARRAY
43835: PPUSH
43836: CALL_OW 251
43840: PUSH
43841: LD_VAR 0 3
43845: PUSH
43846: LD_VAR 0 4
43850: ARRAY
43851: PPUSH
43852: CALL_OW 254
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: ADD
43866: ST_TO_ADDR
43867: GO 43780
43869: POP
43870: POP
// result := list ;
43871: LD_ADDR_VAR 0 2
43875: PUSH
43876: LD_VAR 0 5
43880: ST_TO_ADDR
// end ;
43881: LD_VAR 0 2
43885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43886: LD_INT 0
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
// if not factory then
43895: LD_VAR 0 1
43899: NOT
43900: IFFALSE 43904
// exit ;
43902: GO 44497
// if control = control_apeman then
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 5
43911: EQUAL
43912: IFFALSE 44021
// begin tmp := UnitsInside ( factory ) ;
43914: LD_ADDR_VAR 0 8
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: CALL_OW 313
43928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43929: LD_VAR 0 8
43933: PPUSH
43934: LD_INT 25
43936: PUSH
43937: LD_INT 12
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL_OW 72
43948: NOT
43949: IFFALSE 43959
// control := control_manual ;
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_INT 1
43958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43959: LD_ADDR_VAR 0 8
43963: PUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: CALL 43656 0 1
43973: ST_TO_ADDR
// if tmp then
43974: LD_VAR 0 8
43978: IFFALSE 44021
// begin for i in tmp do
43980: LD_ADDR_VAR 0 7
43984: PUSH
43985: LD_VAR 0 8
43989: PUSH
43990: FOR_IN
43991: IFFALSE 44019
// if i [ 1 ] = b_ext_radio then
43993: LD_VAR 0 7
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: PUSH
44002: LD_INT 22
44004: EQUAL
44005: IFFALSE 44017
// begin control := control_remote ;
44007: LD_ADDR_VAR 0 4
44011: PUSH
44012: LD_INT 2
44014: ST_TO_ADDR
// break ;
44015: GO 44019
// end ;
44017: GO 43990
44019: POP
44020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44021: LD_VAR 0 1
44025: PPUSH
44026: LD_VAR 0 2
44030: PPUSH
44031: LD_VAR 0 3
44035: PPUSH
44036: LD_VAR 0 4
44040: PPUSH
44041: LD_VAR 0 5
44045: PPUSH
44046: CALL_OW 448
44050: IFFALSE 44085
// begin result := [ chassis , engine , control , weapon ] ;
44052: LD_ADDR_VAR 0 6
44056: PUSH
44057: LD_VAR 0 2
44061: PUSH
44062: LD_VAR 0 3
44066: PUSH
44067: LD_VAR 0 4
44071: PUSH
44072: LD_VAR 0 5
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: ST_TO_ADDR
// exit ;
44083: GO 44497
// end ; _chassis := AvailableChassisList ( factory ) ;
44085: LD_ADDR_VAR 0 9
44089: PUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: CALL_OW 475
44099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44100: LD_ADDR_VAR 0 11
44104: PUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 476
44114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44115: LD_ADDR_VAR 0 12
44119: PUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 477
44129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44130: LD_ADDR_VAR 0 10
44134: PUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 478
44144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44145: LD_VAR 0 9
44149: NOT
44150: PUSH
44151: LD_VAR 0 11
44155: NOT
44156: OR
44157: PUSH
44158: LD_VAR 0 12
44162: NOT
44163: OR
44164: PUSH
44165: LD_VAR 0 10
44169: NOT
44170: OR
44171: IFFALSE 44206
// begin result := [ chassis , engine , control , weapon ] ;
44173: LD_ADDR_VAR 0 6
44177: PUSH
44178: LD_VAR 0 2
44182: PUSH
44183: LD_VAR 0 3
44187: PUSH
44188: LD_VAR 0 4
44192: PUSH
44193: LD_VAR 0 5
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// exit ;
44204: GO 44497
// end ; if not chassis in _chassis then
44206: LD_VAR 0 2
44210: PUSH
44211: LD_VAR 0 9
44215: IN
44216: NOT
44217: IFFALSE 44243
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44219: LD_ADDR_VAR 0 2
44223: PUSH
44224: LD_VAR 0 9
44228: PUSH
44229: LD_INT 1
44231: PPUSH
44232: LD_VAR 0 9
44236: PPUSH
44237: CALL_OW 12
44241: ARRAY
44242: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44243: LD_VAR 0 2
44247: PPUSH
44248: LD_VAR 0 3
44252: PPUSH
44253: CALL 44502 0 2
44257: NOT
44258: IFFALSE 44317
// repeat engine := _engine [ 1 ] ;
44260: LD_ADDR_VAR 0 3
44264: PUSH
44265: LD_VAR 0 11
44269: PUSH
44270: LD_INT 1
44272: ARRAY
44273: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44274: LD_ADDR_VAR 0 11
44278: PUSH
44279: LD_VAR 0 11
44283: PPUSH
44284: LD_INT 1
44286: PPUSH
44287: CALL_OW 3
44291: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44292: LD_VAR 0 2
44296: PPUSH
44297: LD_VAR 0 3
44301: PPUSH
44302: CALL 44502 0 2
44306: PUSH
44307: LD_VAR 0 11
44311: PUSH
44312: EMPTY
44313: EQUAL
44314: OR
44315: IFFALSE 44260
// if not control in _control then
44317: LD_VAR 0 4
44321: PUSH
44322: LD_VAR 0 12
44326: IN
44327: NOT
44328: IFFALSE 44354
// control := _control [ rand ( 1 , _control ) ] ;
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: LD_VAR 0 12
44339: PUSH
44340: LD_INT 1
44342: PPUSH
44343: LD_VAR 0 12
44347: PPUSH
44348: CALL_OW 12
44352: ARRAY
44353: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44354: LD_VAR 0 2
44358: PPUSH
44359: LD_VAR 0 5
44363: PPUSH
44364: CALL 44722 0 2
44368: NOT
44369: IFFALSE 44428
// repeat weapon := _weapon [ 1 ] ;
44371: LD_ADDR_VAR 0 5
44375: PUSH
44376: LD_VAR 0 10
44380: PUSH
44381: LD_INT 1
44383: ARRAY
44384: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44385: LD_ADDR_VAR 0 10
44389: PUSH
44390: LD_VAR 0 10
44394: PPUSH
44395: LD_INT 1
44397: PPUSH
44398: CALL_OW 3
44402: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44403: LD_VAR 0 2
44407: PPUSH
44408: LD_VAR 0 5
44412: PPUSH
44413: CALL 44722 0 2
44417: PUSH
44418: LD_VAR 0 10
44422: PUSH
44423: EMPTY
44424: EQUAL
44425: OR
44426: IFFALSE 44371
// result := [ ] ;
44428: LD_ADDR_VAR 0 6
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44435: LD_VAR 0 1
44439: PPUSH
44440: LD_VAR 0 2
44444: PPUSH
44445: LD_VAR 0 3
44449: PPUSH
44450: LD_VAR 0 4
44454: PPUSH
44455: LD_VAR 0 5
44459: PPUSH
44460: CALL_OW 448
44464: IFFALSE 44497
// result := [ chassis , engine , control , weapon ] ;
44466: LD_ADDR_VAR 0 6
44470: PUSH
44471: LD_VAR 0 2
44475: PUSH
44476: LD_VAR 0 3
44480: PUSH
44481: LD_VAR 0 4
44485: PUSH
44486: LD_VAR 0 5
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// end ;
44497: LD_VAR 0 6
44501: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44502: LD_INT 0
44504: PPUSH
// if not chassis or not engine then
44505: LD_VAR 0 1
44509: NOT
44510: PUSH
44511: LD_VAR 0 2
44515: NOT
44516: OR
44517: IFFALSE 44521
// exit ;
44519: GO 44717
// case engine of engine_solar :
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 2
44528: DOUBLE
44529: EQUAL
44530: IFTRUE 44534
44532: GO 44572
44534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44535: LD_ADDR_VAR 0 3
44539: PUSH
44540: LD_INT 11
44542: PUSH
44543: LD_INT 12
44545: PUSH
44546: LD_INT 13
44548: PUSH
44549: LD_INT 14
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
44570: GO 44701
44572: LD_INT 1
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44580
44578: GO 44642
44580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_INT 11
44588: PUSH
44589: LD_INT 12
44591: PUSH
44592: LD_INT 13
44594: PUSH
44595: LD_INT 14
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: LD_INT 4
44609: PUSH
44610: LD_INT 5
44612: PUSH
44613: LD_INT 21
44615: PUSH
44616: LD_INT 23
44618: PUSH
44619: LD_INT 22
44621: PUSH
44622: LD_INT 24
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
44640: GO 44701
44642: LD_INT 3
44644: DOUBLE
44645: EQUAL
44646: IFTRUE 44650
44648: GO 44700
44650: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44651: LD_ADDR_VAR 0 3
44655: PUSH
44656: LD_INT 13
44658: PUSH
44659: LD_INT 14
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 4
44670: PUSH
44671: LD_INT 5
44673: PUSH
44674: LD_INT 21
44676: PUSH
44677: LD_INT 22
44679: PUSH
44680: LD_INT 23
44682: PUSH
44683: LD_INT 24
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: ST_TO_ADDR
44698: GO 44701
44700: POP
// result := ( chassis in result ) ;
44701: LD_ADDR_VAR 0 3
44705: PUSH
44706: LD_VAR 0 1
44710: PUSH
44711: LD_VAR 0 3
44715: IN
44716: ST_TO_ADDR
// end ;
44717: LD_VAR 0 3
44721: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44722: LD_INT 0
44724: PPUSH
// if not chassis or not weapon then
44725: LD_VAR 0 1
44729: NOT
44730: PUSH
44731: LD_VAR 0 2
44735: NOT
44736: OR
44737: IFFALSE 44741
// exit ;
44739: GO 45801
// case weapon of us_machine_gun :
44741: LD_VAR 0 2
44745: PUSH
44746: LD_INT 2
44748: DOUBLE
44749: EQUAL
44750: IFTRUE 44754
44752: GO 44784
44754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44755: LD_ADDR_VAR 0 3
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 3
44768: PUSH
44769: LD_INT 4
44771: PUSH
44772: LD_INT 5
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: ST_TO_ADDR
44782: GO 45785
44784: LD_INT 3
44786: DOUBLE
44787: EQUAL
44788: IFTRUE 44792
44790: GO 44822
44792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: LD_INT 4
44809: PUSH
44810: LD_INT 5
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
44820: GO 45785
44822: LD_INT 11
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44830
44828: GO 44860
44830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44831: LD_ADDR_VAR 0 3
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 4
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
44858: GO 45785
44860: LD_INT 4
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44868
44866: GO 44894
44868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44869: LD_ADDR_VAR 0 3
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 4
44882: PUSH
44883: LD_INT 5
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: ST_TO_ADDR
44892: GO 45785
44894: LD_INT 5
44896: DOUBLE
44897: EQUAL
44898: IFTRUE 44902
44900: GO 44928
44902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44903: LD_ADDR_VAR 0 3
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: LD_INT 4
44916: PUSH
44917: LD_INT 5
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
44926: GO 45785
44928: LD_INT 9
44930: DOUBLE
44931: EQUAL
44932: IFTRUE 44936
44934: GO 44962
44936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44937: LD_ADDR_VAR 0 3
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: LD_INT 4
44950: PUSH
44951: LD_INT 5
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
44960: GO 45785
44962: LD_INT 7
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 44970
44968: GO 44996
44970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44971: LD_ADDR_VAR 0 3
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 4
44984: PUSH
44985: LD_INT 5
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
44994: GO 45785
44996: LD_INT 12
44998: DOUBLE
44999: EQUAL
45000: IFTRUE 45004
45002: GO 45030
45004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: LD_INT 4
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
45028: GO 45785
45030: LD_INT 13
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45064
45038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 3
45049: PUSH
45050: LD_INT 4
45052: PUSH
45053: LD_INT 5
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
45062: GO 45785
45064: LD_INT 14
45066: DOUBLE
45067: EQUAL
45068: IFTRUE 45072
45070: GO 45090
45072: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: LD_INT 4
45080: PUSH
45081: LD_INT 5
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: ST_TO_ADDR
45088: GO 45785
45090: LD_INT 6
45092: DOUBLE
45093: EQUAL
45094: IFTRUE 45098
45096: GO 45116
45098: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45099: LD_ADDR_VAR 0 3
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: LD_INT 5
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: ST_TO_ADDR
45114: GO 45785
45116: LD_INT 10
45118: DOUBLE
45119: EQUAL
45120: IFTRUE 45124
45122: GO 45142
45124: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45125: LD_ADDR_VAR 0 3
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: LD_INT 5
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: ST_TO_ADDR
45140: GO 45785
45142: LD_INT 22
45144: DOUBLE
45145: EQUAL
45146: IFTRUE 45150
45148: GO 45176
45150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45151: LD_ADDR_VAR 0 3
45155: PUSH
45156: LD_INT 11
45158: PUSH
45159: LD_INT 12
45161: PUSH
45162: LD_INT 13
45164: PUSH
45165: LD_INT 14
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
45174: GO 45785
45176: LD_INT 23
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45184
45182: GO 45210
45184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45185: LD_ADDR_VAR 0 3
45189: PUSH
45190: LD_INT 11
45192: PUSH
45193: LD_INT 12
45195: PUSH
45196: LD_INT 13
45198: PUSH
45199: LD_INT 14
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
45208: GO 45785
45210: LD_INT 24
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45244
45218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 11
45226: PUSH
45227: LD_INT 12
45229: PUSH
45230: LD_INT 13
45232: PUSH
45233: LD_INT 14
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
45242: GO 45785
45244: LD_INT 30
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45278
45252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 11
45260: PUSH
45261: LD_INT 12
45263: PUSH
45264: LD_INT 13
45266: PUSH
45267: LD_INT 14
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
45276: GO 45785
45278: LD_INT 25
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45304
45286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_INT 13
45294: PUSH
45295: LD_INT 14
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: ST_TO_ADDR
45302: GO 45785
45304: LD_INT 27
45306: DOUBLE
45307: EQUAL
45308: IFTRUE 45312
45310: GO 45330
45312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_INT 13
45320: PUSH
45321: LD_INT 14
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: ST_TO_ADDR
45328: GO 45785
45330: LD_INT 92
45332: DOUBLE
45333: EQUAL
45334: IFTRUE 45338
45336: GO 45364
45338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45339: LD_ADDR_VAR 0 3
45343: PUSH
45344: LD_INT 11
45346: PUSH
45347: LD_INT 12
45349: PUSH
45350: LD_INT 13
45352: PUSH
45353: LD_INT 14
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
45362: GO 45785
45364: LD_INT 28
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45390
45372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 13
45380: PUSH
45381: LD_INT 14
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: ST_TO_ADDR
45388: GO 45785
45390: LD_INT 29
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45416
45398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45399: LD_ADDR_VAR 0 3
45403: PUSH
45404: LD_INT 13
45406: PUSH
45407: LD_INT 14
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: ST_TO_ADDR
45414: GO 45785
45416: LD_INT 31
45418: DOUBLE
45419: EQUAL
45420: IFTRUE 45424
45422: GO 45442
45424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45425: LD_ADDR_VAR 0 3
45429: PUSH
45430: LD_INT 13
45432: PUSH
45433: LD_INT 14
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: ST_TO_ADDR
45440: GO 45785
45442: LD_INT 26
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45450
45448: GO 45468
45450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45451: LD_ADDR_VAR 0 3
45455: PUSH
45456: LD_INT 13
45458: PUSH
45459: LD_INT 14
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: ST_TO_ADDR
45466: GO 45785
45468: LD_INT 42
45470: DOUBLE
45471: EQUAL
45472: IFTRUE 45476
45474: GO 45502
45476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_INT 21
45484: PUSH
45485: LD_INT 22
45487: PUSH
45488: LD_INT 23
45490: PUSH
45491: LD_INT 24
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: ST_TO_ADDR
45500: GO 45785
45502: LD_INT 43
45504: DOUBLE
45505: EQUAL
45506: IFTRUE 45510
45508: GO 45536
45510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45511: LD_ADDR_VAR 0 3
45515: PUSH
45516: LD_INT 21
45518: PUSH
45519: LD_INT 22
45521: PUSH
45522: LD_INT 23
45524: PUSH
45525: LD_INT 24
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
45534: GO 45785
45536: LD_INT 44
45538: DOUBLE
45539: EQUAL
45540: IFTRUE 45544
45542: GO 45570
45544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45545: LD_ADDR_VAR 0 3
45549: PUSH
45550: LD_INT 21
45552: PUSH
45553: LD_INT 22
45555: PUSH
45556: LD_INT 23
45558: PUSH
45559: LD_INT 24
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
45568: GO 45785
45570: LD_INT 45
45572: DOUBLE
45573: EQUAL
45574: IFTRUE 45578
45576: GO 45604
45578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45579: LD_ADDR_VAR 0 3
45583: PUSH
45584: LD_INT 21
45586: PUSH
45587: LD_INT 22
45589: PUSH
45590: LD_INT 23
45592: PUSH
45593: LD_INT 24
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
45602: GO 45785
45604: LD_INT 49
45606: DOUBLE
45607: EQUAL
45608: IFTRUE 45612
45610: GO 45638
45612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45613: LD_ADDR_VAR 0 3
45617: PUSH
45618: LD_INT 21
45620: PUSH
45621: LD_INT 22
45623: PUSH
45624: LD_INT 23
45626: PUSH
45627: LD_INT 24
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
45636: GO 45785
45638: LD_INT 51
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45672
45646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_INT 21
45654: PUSH
45655: LD_INT 22
45657: PUSH
45658: LD_INT 23
45660: PUSH
45661: LD_INT 24
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
45670: GO 45785
45672: LD_INT 52
45674: DOUBLE
45675: EQUAL
45676: IFTRUE 45680
45678: GO 45706
45680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45681: LD_ADDR_VAR 0 3
45685: PUSH
45686: LD_INT 21
45688: PUSH
45689: LD_INT 22
45691: PUSH
45692: LD_INT 23
45694: PUSH
45695: LD_INT 24
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
45704: GO 45785
45706: LD_INT 53
45708: DOUBLE
45709: EQUAL
45710: IFTRUE 45714
45712: GO 45732
45714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45715: LD_ADDR_VAR 0 3
45719: PUSH
45720: LD_INT 23
45722: PUSH
45723: LD_INT 24
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: ST_TO_ADDR
45730: GO 45785
45732: LD_INT 46
45734: DOUBLE
45735: EQUAL
45736: IFTRUE 45740
45738: GO 45758
45740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_INT 23
45748: PUSH
45749: LD_INT 24
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: ST_TO_ADDR
45756: GO 45785
45758: LD_INT 47
45760: DOUBLE
45761: EQUAL
45762: IFTRUE 45766
45764: GO 45784
45766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45767: LD_ADDR_VAR 0 3
45771: PUSH
45772: LD_INT 23
45774: PUSH
45775: LD_INT 24
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: ST_TO_ADDR
45782: GO 45785
45784: POP
// result := ( chassis in result ) ;
45785: LD_ADDR_VAR 0 3
45789: PUSH
45790: LD_VAR 0 1
45794: PUSH
45795: LD_VAR 0 3
45799: IN
45800: ST_TO_ADDR
// end ;
45801: LD_VAR 0 3
45805: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45806: LD_INT 0
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
// result := array ;
45815: LD_ADDR_VAR 0 5
45819: PUSH
45820: LD_VAR 0 1
45824: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45825: LD_VAR 0 1
45829: NOT
45830: PUSH
45831: LD_VAR 0 2
45835: NOT
45836: OR
45837: PUSH
45838: LD_VAR 0 3
45842: NOT
45843: OR
45844: PUSH
45845: LD_VAR 0 2
45849: PUSH
45850: LD_VAR 0 1
45854: GREATER
45855: OR
45856: PUSH
45857: LD_VAR 0 3
45861: PUSH
45862: LD_VAR 0 1
45866: GREATER
45867: OR
45868: IFFALSE 45872
// exit ;
45870: GO 46168
// if direction then
45872: LD_VAR 0 4
45876: IFFALSE 45940
// begin d := 1 ;
45878: LD_ADDR_VAR 0 9
45882: PUSH
45883: LD_INT 1
45885: ST_TO_ADDR
// if i_from > i_to then
45886: LD_VAR 0 2
45890: PUSH
45891: LD_VAR 0 3
45895: GREATER
45896: IFFALSE 45922
// length := ( array - i_from ) + i_to else
45898: LD_ADDR_VAR 0 11
45902: PUSH
45903: LD_VAR 0 1
45907: PUSH
45908: LD_VAR 0 2
45912: MINUS
45913: PUSH
45914: LD_VAR 0 3
45918: PLUS
45919: ST_TO_ADDR
45920: GO 45938
// length := i_to - i_from ;
45922: LD_ADDR_VAR 0 11
45926: PUSH
45927: LD_VAR 0 3
45931: PUSH
45932: LD_VAR 0 2
45936: MINUS
45937: ST_TO_ADDR
// end else
45938: GO 46001
// begin d := - 1 ;
45940: LD_ADDR_VAR 0 9
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: ST_TO_ADDR
// if i_from > i_to then
45949: LD_VAR 0 2
45953: PUSH
45954: LD_VAR 0 3
45958: GREATER
45959: IFFALSE 45979
// length := i_from - i_to else
45961: LD_ADDR_VAR 0 11
45965: PUSH
45966: LD_VAR 0 2
45970: PUSH
45971: LD_VAR 0 3
45975: MINUS
45976: ST_TO_ADDR
45977: GO 46001
// length := ( array - i_to ) + i_from ;
45979: LD_ADDR_VAR 0 11
45983: PUSH
45984: LD_VAR 0 1
45988: PUSH
45989: LD_VAR 0 3
45993: MINUS
45994: PUSH
45995: LD_VAR 0 2
45999: PLUS
46000: ST_TO_ADDR
// end ; if not length then
46001: LD_VAR 0 11
46005: NOT
46006: IFFALSE 46010
// exit ;
46008: GO 46168
// tmp := array ;
46010: LD_ADDR_VAR 0 10
46014: PUSH
46015: LD_VAR 0 1
46019: ST_TO_ADDR
// for i = 1 to length do
46020: LD_ADDR_VAR 0 6
46024: PUSH
46025: DOUBLE
46026: LD_INT 1
46028: DEC
46029: ST_TO_ADDR
46030: LD_VAR 0 11
46034: PUSH
46035: FOR_TO
46036: IFFALSE 46156
// begin for j = 1 to array do
46038: LD_ADDR_VAR 0 7
46042: PUSH
46043: DOUBLE
46044: LD_INT 1
46046: DEC
46047: ST_TO_ADDR
46048: LD_VAR 0 1
46052: PUSH
46053: FOR_TO
46054: IFFALSE 46142
// begin k := j + d ;
46056: LD_ADDR_VAR 0 8
46060: PUSH
46061: LD_VAR 0 7
46065: PUSH
46066: LD_VAR 0 9
46070: PLUS
46071: ST_TO_ADDR
// if k > array then
46072: LD_VAR 0 8
46076: PUSH
46077: LD_VAR 0 1
46081: GREATER
46082: IFFALSE 46092
// k := 1 ;
46084: LD_ADDR_VAR 0 8
46088: PUSH
46089: LD_INT 1
46091: ST_TO_ADDR
// if not k then
46092: LD_VAR 0 8
46096: NOT
46097: IFFALSE 46109
// k := array ;
46099: LD_ADDR_VAR 0 8
46103: PUSH
46104: LD_VAR 0 1
46108: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46109: LD_ADDR_VAR 0 10
46113: PUSH
46114: LD_VAR 0 10
46118: PPUSH
46119: LD_VAR 0 8
46123: PPUSH
46124: LD_VAR 0 1
46128: PUSH
46129: LD_VAR 0 7
46133: ARRAY
46134: PPUSH
46135: CALL_OW 1
46139: ST_TO_ADDR
// end ;
46140: GO 46053
46142: POP
46143: POP
// array := tmp ;
46144: LD_ADDR_VAR 0 1
46148: PUSH
46149: LD_VAR 0 10
46153: ST_TO_ADDR
// end ;
46154: GO 46035
46156: POP
46157: POP
// result := array ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_VAR 0 1
46167: ST_TO_ADDR
// end ;
46168: LD_VAR 0 5
46172: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46173: LD_INT 0
46175: PPUSH
46176: PPUSH
// result := 0 ;
46177: LD_ADDR_VAR 0 3
46181: PUSH
46182: LD_INT 0
46184: ST_TO_ADDR
// if not array or not value in array then
46185: LD_VAR 0 1
46189: NOT
46190: PUSH
46191: LD_VAR 0 2
46195: PUSH
46196: LD_VAR 0 1
46200: IN
46201: NOT
46202: OR
46203: IFFALSE 46207
// exit ;
46205: GO 46261
// for i = 1 to array do
46207: LD_ADDR_VAR 0 4
46211: PUSH
46212: DOUBLE
46213: LD_INT 1
46215: DEC
46216: ST_TO_ADDR
46217: LD_VAR 0 1
46221: PUSH
46222: FOR_TO
46223: IFFALSE 46259
// if value = array [ i ] then
46225: LD_VAR 0 2
46229: PUSH
46230: LD_VAR 0 1
46234: PUSH
46235: LD_VAR 0 4
46239: ARRAY
46240: EQUAL
46241: IFFALSE 46257
// begin result := i ;
46243: LD_ADDR_VAR 0 3
46247: PUSH
46248: LD_VAR 0 4
46252: ST_TO_ADDR
// exit ;
46253: POP
46254: POP
46255: GO 46261
// end ;
46257: GO 46222
46259: POP
46260: POP
// end ;
46261: LD_VAR 0 3
46265: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46266: LD_INT 0
46268: PPUSH
// vc_chassis := chassis ;
46269: LD_ADDR_OWVAR 37
46273: PUSH
46274: LD_VAR 0 1
46278: ST_TO_ADDR
// vc_engine := engine ;
46279: LD_ADDR_OWVAR 39
46283: PUSH
46284: LD_VAR 0 2
46288: ST_TO_ADDR
// vc_control := control ;
46289: LD_ADDR_OWVAR 38
46293: PUSH
46294: LD_VAR 0 3
46298: ST_TO_ADDR
// vc_weapon := weapon ;
46299: LD_ADDR_OWVAR 40
46303: PUSH
46304: LD_VAR 0 4
46308: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46309: LD_ADDR_OWVAR 41
46313: PUSH
46314: LD_VAR 0 5
46318: ST_TO_ADDR
// end ;
46319: LD_VAR 0 6
46323: RET
// export function WantPlant ( unit ) ; var task ; begin
46324: LD_INT 0
46326: PPUSH
46327: PPUSH
// result := false ;
46328: LD_ADDR_VAR 0 2
46332: PUSH
46333: LD_INT 0
46335: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46336: LD_ADDR_VAR 0 3
46340: PUSH
46341: LD_VAR 0 1
46345: PPUSH
46346: CALL_OW 437
46350: ST_TO_ADDR
// if task then
46351: LD_VAR 0 3
46355: IFFALSE 46383
// if task [ 1 ] [ 1 ] = p then
46357: LD_VAR 0 3
46361: PUSH
46362: LD_INT 1
46364: ARRAY
46365: PUSH
46366: LD_INT 1
46368: ARRAY
46369: PUSH
46370: LD_STRING p
46372: EQUAL
46373: IFFALSE 46383
// result := true ;
46375: LD_ADDR_VAR 0 2
46379: PUSH
46380: LD_INT 1
46382: ST_TO_ADDR
// end ;
46383: LD_VAR 0 2
46387: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46388: LD_INT 0
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
// if pos < 1 then
46394: LD_VAR 0 2
46398: PUSH
46399: LD_INT 1
46401: LESS
46402: IFFALSE 46406
// exit ;
46404: GO 46709
// if pos = 1 then
46406: LD_VAR 0 2
46410: PUSH
46411: LD_INT 1
46413: EQUAL
46414: IFFALSE 46447
// result := Replace ( arr , pos [ 1 ] , value ) else
46416: LD_ADDR_VAR 0 4
46420: PUSH
46421: LD_VAR 0 1
46425: PPUSH
46426: LD_VAR 0 2
46430: PUSH
46431: LD_INT 1
46433: ARRAY
46434: PPUSH
46435: LD_VAR 0 3
46439: PPUSH
46440: CALL_OW 1
46444: ST_TO_ADDR
46445: GO 46709
// begin tmp := arr ;
46447: LD_ADDR_VAR 0 6
46451: PUSH
46452: LD_VAR 0 1
46456: ST_TO_ADDR
// s_arr := [ tmp ] ;
46457: LD_ADDR_VAR 0 7
46461: PUSH
46462: LD_VAR 0 6
46466: PUSH
46467: EMPTY
46468: LIST
46469: ST_TO_ADDR
// for i = 1 to pos - 1 do
46470: LD_ADDR_VAR 0 5
46474: PUSH
46475: DOUBLE
46476: LD_INT 1
46478: DEC
46479: ST_TO_ADDR
46480: LD_VAR 0 2
46484: PUSH
46485: LD_INT 1
46487: MINUS
46488: PUSH
46489: FOR_TO
46490: IFFALSE 46535
// begin tmp := tmp [ pos [ i ] ] ;
46492: LD_ADDR_VAR 0 6
46496: PUSH
46497: LD_VAR 0 6
46501: PUSH
46502: LD_VAR 0 2
46506: PUSH
46507: LD_VAR 0 5
46511: ARRAY
46512: ARRAY
46513: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46514: LD_ADDR_VAR 0 7
46518: PUSH
46519: LD_VAR 0 7
46523: PUSH
46524: LD_VAR 0 6
46528: PUSH
46529: EMPTY
46530: LIST
46531: ADD
46532: ST_TO_ADDR
// end ;
46533: GO 46489
46535: POP
46536: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46537: LD_ADDR_VAR 0 6
46541: PUSH
46542: LD_VAR 0 6
46546: PPUSH
46547: LD_VAR 0 2
46551: PUSH
46552: LD_VAR 0 2
46556: ARRAY
46557: PPUSH
46558: LD_VAR 0 3
46562: PPUSH
46563: CALL_OW 1
46567: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46568: LD_ADDR_VAR 0 7
46572: PUSH
46573: LD_VAR 0 7
46577: PPUSH
46578: LD_VAR 0 7
46582: PPUSH
46583: LD_VAR 0 6
46587: PPUSH
46588: CALL_OW 1
46592: ST_TO_ADDR
// for i = s_arr downto 2 do
46593: LD_ADDR_VAR 0 5
46597: PUSH
46598: DOUBLE
46599: LD_VAR 0 7
46603: INC
46604: ST_TO_ADDR
46605: LD_INT 2
46607: PUSH
46608: FOR_DOWNTO
46609: IFFALSE 46693
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46611: LD_ADDR_VAR 0 6
46615: PUSH
46616: LD_VAR 0 7
46620: PUSH
46621: LD_VAR 0 5
46625: PUSH
46626: LD_INT 1
46628: MINUS
46629: ARRAY
46630: PPUSH
46631: LD_VAR 0 2
46635: PUSH
46636: LD_VAR 0 5
46640: PUSH
46641: LD_INT 1
46643: MINUS
46644: ARRAY
46645: PPUSH
46646: LD_VAR 0 7
46650: PUSH
46651: LD_VAR 0 5
46655: ARRAY
46656: PPUSH
46657: CALL_OW 1
46661: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46662: LD_ADDR_VAR 0 7
46666: PUSH
46667: LD_VAR 0 7
46671: PPUSH
46672: LD_VAR 0 5
46676: PUSH
46677: LD_INT 1
46679: MINUS
46680: PPUSH
46681: LD_VAR 0 6
46685: PPUSH
46686: CALL_OW 1
46690: ST_TO_ADDR
// end ;
46691: GO 46608
46693: POP
46694: POP
// result := s_arr [ 1 ] ;
46695: LD_ADDR_VAR 0 4
46699: PUSH
46700: LD_VAR 0 7
46704: PUSH
46705: LD_INT 1
46707: ARRAY
46708: ST_TO_ADDR
// end ; end ;
46709: LD_VAR 0 4
46713: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46714: LD_INT 0
46716: PPUSH
46717: PPUSH
// if not list then
46718: LD_VAR 0 1
46722: NOT
46723: IFFALSE 46727
// exit ;
46725: GO 46818
// i := list [ pos1 ] ;
46727: LD_ADDR_VAR 0 5
46731: PUSH
46732: LD_VAR 0 1
46736: PUSH
46737: LD_VAR 0 2
46741: ARRAY
46742: ST_TO_ADDR
// if not i then
46743: LD_VAR 0 5
46747: NOT
46748: IFFALSE 46752
// exit ;
46750: GO 46818
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46752: LD_ADDR_VAR 0 1
46756: PUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: LD_VAR 0 2
46766: PPUSH
46767: LD_VAR 0 1
46771: PUSH
46772: LD_VAR 0 3
46776: ARRAY
46777: PPUSH
46778: CALL_OW 1
46782: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46783: LD_ADDR_VAR 0 1
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: LD_VAR 0 3
46797: PPUSH
46798: LD_VAR 0 5
46802: PPUSH
46803: CALL_OW 1
46807: ST_TO_ADDR
// result := list ;
46808: LD_ADDR_VAR 0 4
46812: PUSH
46813: LD_VAR 0 1
46817: ST_TO_ADDR
// end ;
46818: LD_VAR 0 4
46822: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46823: LD_INT 0
46825: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46826: LD_ADDR_VAR 0 5
46830: PUSH
46831: LD_VAR 0 1
46835: PPUSH
46836: CALL_OW 250
46840: PPUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 251
46850: PPUSH
46851: LD_VAR 0 2
46855: PPUSH
46856: LD_VAR 0 3
46860: PPUSH
46861: LD_VAR 0 4
46865: PPUSH
46866: CALL 46876 0 5
46870: ST_TO_ADDR
// end ;
46871: LD_VAR 0 5
46875: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46876: LD_INT 0
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
// if not list then
46882: LD_VAR 0 3
46886: NOT
46887: IFFALSE 46891
// exit ;
46889: GO 47279
// result := [ ] ;
46891: LD_ADDR_VAR 0 6
46895: PUSH
46896: EMPTY
46897: ST_TO_ADDR
// for i in list do
46898: LD_ADDR_VAR 0 7
46902: PUSH
46903: LD_VAR 0 3
46907: PUSH
46908: FOR_IN
46909: IFFALSE 47111
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46911: LD_ADDR_VAR 0 9
46915: PUSH
46916: LD_VAR 0 7
46920: PPUSH
46921: LD_VAR 0 1
46925: PPUSH
46926: LD_VAR 0 2
46930: PPUSH
46931: CALL_OW 297
46935: ST_TO_ADDR
// if not result then
46936: LD_VAR 0 6
46940: NOT
46941: IFFALSE 46967
// result := [ [ i , tmp ] ] else
46943: LD_ADDR_VAR 0 6
46947: PUSH
46948: LD_VAR 0 7
46952: PUSH
46953: LD_VAR 0 9
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: ST_TO_ADDR
46965: GO 47109
// begin if result [ result ] [ 2 ] < tmp then
46967: LD_VAR 0 6
46971: PUSH
46972: LD_VAR 0 6
46976: ARRAY
46977: PUSH
46978: LD_INT 2
46980: ARRAY
46981: PUSH
46982: LD_VAR 0 9
46986: LESS
46987: IFFALSE 47029
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46989: LD_ADDR_VAR 0 6
46993: PUSH
46994: LD_VAR 0 6
46998: PPUSH
46999: LD_VAR 0 6
47003: PUSH
47004: LD_INT 1
47006: PLUS
47007: PPUSH
47008: LD_VAR 0 7
47012: PUSH
47013: LD_VAR 0 9
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PPUSH
47022: CALL_OW 2
47026: ST_TO_ADDR
47027: GO 47109
// for j = 1 to result do
47029: LD_ADDR_VAR 0 8
47033: PUSH
47034: DOUBLE
47035: LD_INT 1
47037: DEC
47038: ST_TO_ADDR
47039: LD_VAR 0 6
47043: PUSH
47044: FOR_TO
47045: IFFALSE 47107
// begin if tmp < result [ j ] [ 2 ] then
47047: LD_VAR 0 9
47051: PUSH
47052: LD_VAR 0 6
47056: PUSH
47057: LD_VAR 0 8
47061: ARRAY
47062: PUSH
47063: LD_INT 2
47065: ARRAY
47066: LESS
47067: IFFALSE 47105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47069: LD_ADDR_VAR 0 6
47073: PUSH
47074: LD_VAR 0 6
47078: PPUSH
47079: LD_VAR 0 8
47083: PPUSH
47084: LD_VAR 0 7
47088: PUSH
47089: LD_VAR 0 9
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PPUSH
47098: CALL_OW 2
47102: ST_TO_ADDR
// break ;
47103: GO 47107
// end ; end ;
47105: GO 47044
47107: POP
47108: POP
// end ; end ;
47109: GO 46908
47111: POP
47112: POP
// if result and not asc then
47113: LD_VAR 0 6
47117: PUSH
47118: LD_VAR 0 4
47122: NOT
47123: AND
47124: IFFALSE 47199
// begin tmp := result ;
47126: LD_ADDR_VAR 0 9
47130: PUSH
47131: LD_VAR 0 6
47135: ST_TO_ADDR
// for i = tmp downto 1 do
47136: LD_ADDR_VAR 0 7
47140: PUSH
47141: DOUBLE
47142: LD_VAR 0 9
47146: INC
47147: ST_TO_ADDR
47148: LD_INT 1
47150: PUSH
47151: FOR_DOWNTO
47152: IFFALSE 47197
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47154: LD_ADDR_VAR 0 6
47158: PUSH
47159: LD_VAR 0 6
47163: PPUSH
47164: LD_VAR 0 9
47168: PUSH
47169: LD_VAR 0 7
47173: MINUS
47174: PUSH
47175: LD_INT 1
47177: PLUS
47178: PPUSH
47179: LD_VAR 0 9
47183: PUSH
47184: LD_VAR 0 7
47188: ARRAY
47189: PPUSH
47190: CALL_OW 1
47194: ST_TO_ADDR
47195: GO 47151
47197: POP
47198: POP
// end ; tmp := [ ] ;
47199: LD_ADDR_VAR 0 9
47203: PUSH
47204: EMPTY
47205: ST_TO_ADDR
// if mode then
47206: LD_VAR 0 5
47210: IFFALSE 47279
// begin for i = 1 to result do
47212: LD_ADDR_VAR 0 7
47216: PUSH
47217: DOUBLE
47218: LD_INT 1
47220: DEC
47221: ST_TO_ADDR
47222: LD_VAR 0 6
47226: PUSH
47227: FOR_TO
47228: IFFALSE 47267
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47230: LD_ADDR_VAR 0 9
47234: PUSH
47235: LD_VAR 0 9
47239: PPUSH
47240: LD_VAR 0 7
47244: PPUSH
47245: LD_VAR 0 6
47249: PUSH
47250: LD_VAR 0 7
47254: ARRAY
47255: PUSH
47256: LD_INT 1
47258: ARRAY
47259: PPUSH
47260: CALL_OW 1
47264: ST_TO_ADDR
47265: GO 47227
47267: POP
47268: POP
// result := tmp ;
47269: LD_ADDR_VAR 0 6
47273: PUSH
47274: LD_VAR 0 9
47278: ST_TO_ADDR
// end ; end ;
47279: LD_VAR 0 6
47283: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47284: LD_INT 0
47286: PPUSH
47287: PPUSH
47288: PPUSH
47289: PPUSH
47290: PPUSH
47291: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47292: LD_ADDR_VAR 0 5
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// if not x or not y then
47314: LD_VAR 0 2
47318: NOT
47319: PUSH
47320: LD_VAR 0 3
47324: NOT
47325: OR
47326: IFFALSE 47330
// exit ;
47328: GO 48980
// if not range then
47330: LD_VAR 0 4
47334: NOT
47335: IFFALSE 47345
// range := 10 ;
47337: LD_ADDR_VAR 0 4
47341: PUSH
47342: LD_INT 10
47344: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47345: LD_ADDR_VAR 0 8
47349: PUSH
47350: LD_INT 81
47352: PUSH
47353: LD_VAR 0 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 92
47364: PUSH
47365: LD_VAR 0 2
47369: PUSH
47370: LD_VAR 0 3
47374: PUSH
47375: LD_VAR 0 4
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 21
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: PPUSH
47408: CALL_OW 69
47412: ST_TO_ADDR
// if not tmp then
47413: LD_VAR 0 8
47417: NOT
47418: IFFALSE 47422
// exit ;
47420: GO 48980
// for i in tmp do
47422: LD_ADDR_VAR 0 6
47426: PUSH
47427: LD_VAR 0 8
47431: PUSH
47432: FOR_IN
47433: IFFALSE 48955
// begin points := [ 0 , 0 , 0 ] ;
47435: LD_ADDR_VAR 0 9
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// bpoints := 1 ;
47454: LD_ADDR_VAR 0 10
47458: PUSH
47459: LD_INT 1
47461: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47462: LD_VAR 0 6
47466: PPUSH
47467: CALL_OW 247
47471: PUSH
47472: LD_INT 1
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 48058
47480: POP
// begin if GetClass ( i ) = 1 then
47481: LD_VAR 0 6
47485: PPUSH
47486: CALL_OW 257
47490: PUSH
47491: LD_INT 1
47493: EQUAL
47494: IFFALSE 47515
// points := [ 10 , 5 , 3 ] ;
47496: LD_ADDR_VAR 0 9
47500: PUSH
47501: LD_INT 10
47503: PUSH
47504: LD_INT 5
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47515: LD_VAR 0 6
47519: PPUSH
47520: CALL_OW 257
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: IN
47539: IFFALSE 47560
// points := [ 3 , 2 , 1 ] ;
47541: LD_ADDR_VAR 0 9
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47560: LD_VAR 0 6
47564: PPUSH
47565: CALL_OW 257
47569: PUSH
47570: LD_INT 5
47572: EQUAL
47573: IFFALSE 47594
// points := [ 130 , 5 , 2 ] ;
47575: LD_ADDR_VAR 0 9
47579: PUSH
47580: LD_INT 130
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47594: LD_VAR 0 6
47598: PPUSH
47599: CALL_OW 257
47603: PUSH
47604: LD_INT 8
47606: EQUAL
47607: IFFALSE 47628
// points := [ 35 , 35 , 30 ] ;
47609: LD_ADDR_VAR 0 9
47613: PUSH
47614: LD_INT 35
47616: PUSH
47617: LD_INT 35
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47628: LD_VAR 0 6
47632: PPUSH
47633: CALL_OW 257
47637: PUSH
47638: LD_INT 9
47640: EQUAL
47641: IFFALSE 47662
// points := [ 20 , 55 , 40 ] ;
47643: LD_ADDR_VAR 0 9
47647: PUSH
47648: LD_INT 20
47650: PUSH
47651: LD_INT 55
47653: PUSH
47654: LD_INT 40
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47662: LD_VAR 0 6
47666: PPUSH
47667: CALL_OW 257
47671: PUSH
47672: LD_INT 12
47674: PUSH
47675: LD_INT 16
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: IN
47682: IFFALSE 47703
// points := [ 5 , 3 , 2 ] ;
47684: LD_ADDR_VAR 0 9
47688: PUSH
47689: LD_INT 5
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47703: LD_VAR 0 6
47707: PPUSH
47708: CALL_OW 257
47712: PUSH
47713: LD_INT 17
47715: EQUAL
47716: IFFALSE 47737
// points := [ 100 , 50 , 75 ] ;
47718: LD_ADDR_VAR 0 9
47722: PUSH
47723: LD_INT 100
47725: PUSH
47726: LD_INT 50
47728: PUSH
47729: LD_INT 75
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47737: LD_VAR 0 6
47741: PPUSH
47742: CALL_OW 257
47746: PUSH
47747: LD_INT 15
47749: EQUAL
47750: IFFALSE 47771
// points := [ 10 , 5 , 3 ] ;
47752: LD_ADDR_VAR 0 9
47756: PUSH
47757: LD_INT 10
47759: PUSH
47760: LD_INT 5
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47771: LD_VAR 0 6
47775: PPUSH
47776: CALL_OW 257
47780: PUSH
47781: LD_INT 14
47783: EQUAL
47784: IFFALSE 47805
// points := [ 10 , 0 , 0 ] ;
47786: LD_ADDR_VAR 0 9
47790: PUSH
47791: LD_INT 10
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47805: LD_VAR 0 6
47809: PPUSH
47810: CALL_OW 257
47814: PUSH
47815: LD_INT 11
47817: EQUAL
47818: IFFALSE 47839
// points := [ 30 , 10 , 5 ] ;
47820: LD_ADDR_VAR 0 9
47824: PUSH
47825: LD_INT 30
47827: PUSH
47828: LD_INT 10
47830: PUSH
47831: LD_INT 5
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47839: LD_VAR 0 1
47843: PPUSH
47844: LD_INT 5
47846: PPUSH
47847: CALL_OW 321
47851: PUSH
47852: LD_INT 2
47854: EQUAL
47855: IFFALSE 47872
// bpoints := bpoints * 1.8 ;
47857: LD_ADDR_VAR 0 10
47861: PUSH
47862: LD_VAR 0 10
47866: PUSH
47867: LD_REAL  1.80000000000000E+0000
47870: MUL
47871: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47872: LD_VAR 0 6
47876: PPUSH
47877: CALL_OW 257
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: IN
47900: PUSH
47901: LD_VAR 0 1
47905: PPUSH
47906: LD_INT 51
47908: PPUSH
47909: CALL_OW 321
47913: PUSH
47914: LD_INT 2
47916: EQUAL
47917: AND
47918: IFFALSE 47935
// bpoints := bpoints * 1.2 ;
47920: LD_ADDR_VAR 0 10
47924: PUSH
47925: LD_VAR 0 10
47929: PUSH
47930: LD_REAL  1.20000000000000E+0000
47933: MUL
47934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47935: LD_VAR 0 6
47939: PPUSH
47940: CALL_OW 257
47944: PUSH
47945: LD_INT 5
47947: PUSH
47948: LD_INT 7
47950: PUSH
47951: LD_INT 9
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: IN
47959: PUSH
47960: LD_VAR 0 1
47964: PPUSH
47965: LD_INT 52
47967: PPUSH
47968: CALL_OW 321
47972: PUSH
47973: LD_INT 2
47975: EQUAL
47976: AND
47977: IFFALSE 47994
// bpoints := bpoints * 1.5 ;
47979: LD_ADDR_VAR 0 10
47983: PUSH
47984: LD_VAR 0 10
47988: PUSH
47989: LD_REAL  1.50000000000000E+0000
47992: MUL
47993: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47994: LD_VAR 0 1
47998: PPUSH
47999: LD_INT 66
48001: PPUSH
48002: CALL_OW 321
48006: PUSH
48007: LD_INT 2
48009: EQUAL
48010: IFFALSE 48027
// bpoints := bpoints * 1.1 ;
48012: LD_ADDR_VAR 0 10
48016: PUSH
48017: LD_VAR 0 10
48021: PUSH
48022: LD_REAL  1.10000000000000E+0000
48025: MUL
48026: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48027: LD_ADDR_VAR 0 10
48031: PUSH
48032: LD_VAR 0 10
48036: PUSH
48037: LD_VAR 0 6
48041: PPUSH
48042: LD_INT 1
48044: PPUSH
48045: CALL_OW 259
48049: PUSH
48050: LD_REAL  1.15000000000000E+0000
48053: MUL
48054: MUL
48055: ST_TO_ADDR
// end ; unit_vehicle :
48056: GO 48884
48058: LD_INT 2
48060: DOUBLE
48061: EQUAL
48062: IFTRUE 48066
48064: GO 48872
48066: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48067: LD_VAR 0 6
48071: PPUSH
48072: CALL_OW 264
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 42
48082: PUSH
48083: LD_INT 24
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: IN
48091: IFFALSE 48112
// points := [ 25 , 5 , 3 ] ;
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_INT 25
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48112: LD_VAR 0 6
48116: PPUSH
48117: CALL_OW 264
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: LD_INT 43
48127: PUSH
48128: LD_INT 25
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: IN
48136: IFFALSE 48157
// points := [ 40 , 15 , 5 ] ;
48138: LD_ADDR_VAR 0 9
48142: PUSH
48143: LD_INT 40
48145: PUSH
48146: LD_INT 15
48148: PUSH
48149: LD_INT 5
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48157: LD_VAR 0 6
48161: PPUSH
48162: CALL_OW 264
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: LD_INT 23
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: IN
48177: IFFALSE 48198
// points := [ 7 , 25 , 8 ] ;
48179: LD_ADDR_VAR 0 9
48183: PUSH
48184: LD_INT 7
48186: PUSH
48187: LD_INT 25
48189: PUSH
48190: LD_INT 8
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48198: LD_VAR 0 6
48202: PPUSH
48203: CALL_OW 264
48207: PUSH
48208: LD_INT 5
48210: PUSH
48211: LD_INT 27
48213: PUSH
48214: LD_INT 44
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: IN
48222: IFFALSE 48243
// points := [ 14 , 50 , 16 ] ;
48224: LD_ADDR_VAR 0 9
48228: PUSH
48229: LD_INT 14
48231: PUSH
48232: LD_INT 50
48234: PUSH
48235: LD_INT 16
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48243: LD_VAR 0 6
48247: PPUSH
48248: CALL_OW 264
48252: PUSH
48253: LD_INT 6
48255: PUSH
48256: LD_INT 46
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: IN
48263: IFFALSE 48284
// points := [ 32 , 120 , 70 ] ;
48265: LD_ADDR_VAR 0 9
48269: PUSH
48270: LD_INT 32
48272: PUSH
48273: LD_INT 120
48275: PUSH
48276: LD_INT 70
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48284: LD_VAR 0 6
48288: PPUSH
48289: CALL_OW 264
48293: PUSH
48294: LD_INT 7
48296: PUSH
48297: LD_INT 28
48299: PUSH
48300: LD_INT 45
48302: PUSH
48303: LD_INT 92
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: IN
48312: IFFALSE 48333
// points := [ 35 , 20 , 45 ] ;
48314: LD_ADDR_VAR 0 9
48318: PUSH
48319: LD_INT 35
48321: PUSH
48322: LD_INT 20
48324: PUSH
48325: LD_INT 45
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48333: LD_VAR 0 6
48337: PPUSH
48338: CALL_OW 264
48342: PUSH
48343: LD_INT 47
48345: PUSH
48346: EMPTY
48347: LIST
48348: IN
48349: IFFALSE 48370
// points := [ 67 , 45 , 75 ] ;
48351: LD_ADDR_VAR 0 9
48355: PUSH
48356: LD_INT 67
48358: PUSH
48359: LD_INT 45
48361: PUSH
48362: LD_INT 75
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48370: LD_VAR 0 6
48374: PPUSH
48375: CALL_OW 264
48379: PUSH
48380: LD_INT 26
48382: PUSH
48383: EMPTY
48384: LIST
48385: IN
48386: IFFALSE 48407
// points := [ 120 , 30 , 80 ] ;
48388: LD_ADDR_VAR 0 9
48392: PUSH
48393: LD_INT 120
48395: PUSH
48396: LD_INT 30
48398: PUSH
48399: LD_INT 80
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48407: LD_VAR 0 6
48411: PPUSH
48412: CALL_OW 264
48416: PUSH
48417: LD_INT 22
48419: PUSH
48420: EMPTY
48421: LIST
48422: IN
48423: IFFALSE 48444
// points := [ 40 , 1 , 1 ] ;
48425: LD_ADDR_VAR 0 9
48429: PUSH
48430: LD_INT 40
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48444: LD_VAR 0 6
48448: PPUSH
48449: CALL_OW 264
48453: PUSH
48454: LD_INT 29
48456: PUSH
48457: EMPTY
48458: LIST
48459: IN
48460: IFFALSE 48481
// points := [ 70 , 200 , 400 ] ;
48462: LD_ADDR_VAR 0 9
48466: PUSH
48467: LD_INT 70
48469: PUSH
48470: LD_INT 200
48472: PUSH
48473: LD_INT 400
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48481: LD_VAR 0 6
48485: PPUSH
48486: CALL_OW 264
48490: PUSH
48491: LD_INT 14
48493: PUSH
48494: LD_INT 53
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: IN
48501: IFFALSE 48522
// points := [ 40 , 10 , 20 ] ;
48503: LD_ADDR_VAR 0 9
48507: PUSH
48508: LD_INT 40
48510: PUSH
48511: LD_INT 10
48513: PUSH
48514: LD_INT 20
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48522: LD_VAR 0 6
48526: PPUSH
48527: CALL_OW 264
48531: PUSH
48532: LD_INT 9
48534: PUSH
48535: EMPTY
48536: LIST
48537: IN
48538: IFFALSE 48559
// points := [ 5 , 70 , 20 ] ;
48540: LD_ADDR_VAR 0 9
48544: PUSH
48545: LD_INT 5
48547: PUSH
48548: LD_INT 70
48550: PUSH
48551: LD_INT 20
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48559: LD_VAR 0 6
48563: PPUSH
48564: CALL_OW 264
48568: PUSH
48569: LD_INT 10
48571: PUSH
48572: EMPTY
48573: LIST
48574: IN
48575: IFFALSE 48596
// points := [ 35 , 110 , 70 ] ;
48577: LD_ADDR_VAR 0 9
48581: PUSH
48582: LD_INT 35
48584: PUSH
48585: LD_INT 110
48587: PUSH
48588: LD_INT 70
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48596: LD_VAR 0 6
48600: PPUSH
48601: CALL_OW 265
48605: PUSH
48606: LD_INT 25
48608: EQUAL
48609: IFFALSE 48630
// points := [ 80 , 65 , 100 ] ;
48611: LD_ADDR_VAR 0 9
48615: PUSH
48616: LD_INT 80
48618: PUSH
48619: LD_INT 65
48621: PUSH
48622: LD_INT 100
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48630: LD_VAR 0 6
48634: PPUSH
48635: CALL_OW 263
48639: PUSH
48640: LD_INT 1
48642: EQUAL
48643: IFFALSE 48678
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48645: LD_ADDR_VAR 0 10
48649: PUSH
48650: LD_VAR 0 10
48654: PUSH
48655: LD_VAR 0 6
48659: PPUSH
48660: CALL_OW 311
48664: PPUSH
48665: LD_INT 3
48667: PPUSH
48668: CALL_OW 259
48672: PUSH
48673: LD_INT 4
48675: MUL
48676: MUL
48677: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48678: LD_VAR 0 6
48682: PPUSH
48683: CALL_OW 263
48687: PUSH
48688: LD_INT 2
48690: EQUAL
48691: IFFALSE 48742
// begin j := IsControledBy ( i ) ;
48693: LD_ADDR_VAR 0 7
48697: PUSH
48698: LD_VAR 0 6
48702: PPUSH
48703: CALL_OW 312
48707: ST_TO_ADDR
// if j then
48708: LD_VAR 0 7
48712: IFFALSE 48742
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48714: LD_ADDR_VAR 0 10
48718: PUSH
48719: LD_VAR 0 10
48723: PUSH
48724: LD_VAR 0 7
48728: PPUSH
48729: LD_INT 3
48731: PPUSH
48732: CALL_OW 259
48736: PUSH
48737: LD_INT 3
48739: MUL
48740: MUL
48741: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48742: LD_VAR 0 6
48746: PPUSH
48747: CALL_OW 264
48751: PUSH
48752: LD_INT 5
48754: PUSH
48755: LD_INT 6
48757: PUSH
48758: LD_INT 46
48760: PUSH
48761: LD_INT 44
48763: PUSH
48764: LD_INT 47
48766: PUSH
48767: LD_INT 45
48769: PUSH
48770: LD_INT 28
48772: PUSH
48773: LD_INT 7
48775: PUSH
48776: LD_INT 27
48778: PUSH
48779: LD_INT 29
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: IN
48794: PUSH
48795: LD_VAR 0 1
48799: PPUSH
48800: LD_INT 52
48802: PPUSH
48803: CALL_OW 321
48807: PUSH
48808: LD_INT 2
48810: EQUAL
48811: AND
48812: IFFALSE 48829
// bpoints := bpoints * 1.2 ;
48814: LD_ADDR_VAR 0 10
48818: PUSH
48819: LD_VAR 0 10
48823: PUSH
48824: LD_REAL  1.20000000000000E+0000
48827: MUL
48828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48829: LD_VAR 0 6
48833: PPUSH
48834: CALL_OW 264
48838: PUSH
48839: LD_INT 6
48841: PUSH
48842: LD_INT 46
48844: PUSH
48845: LD_INT 47
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: LIST
48852: IN
48853: IFFALSE 48870
// bpoints := bpoints * 1.2 ;
48855: LD_ADDR_VAR 0 10
48859: PUSH
48860: LD_VAR 0 10
48864: PUSH
48865: LD_REAL  1.20000000000000E+0000
48868: MUL
48869: ST_TO_ADDR
// end ; unit_building :
48870: GO 48884
48872: LD_INT 3
48874: DOUBLE
48875: EQUAL
48876: IFTRUE 48880
48878: GO 48883
48880: POP
// ; end ;
48881: GO 48884
48883: POP
// for j = 1 to 3 do
48884: LD_ADDR_VAR 0 7
48888: PUSH
48889: DOUBLE
48890: LD_INT 1
48892: DEC
48893: ST_TO_ADDR
48894: LD_INT 3
48896: PUSH
48897: FOR_TO
48898: IFFALSE 48951
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48900: LD_ADDR_VAR 0 5
48904: PUSH
48905: LD_VAR 0 5
48909: PPUSH
48910: LD_VAR 0 7
48914: PPUSH
48915: LD_VAR 0 5
48919: PUSH
48920: LD_VAR 0 7
48924: ARRAY
48925: PUSH
48926: LD_VAR 0 9
48930: PUSH
48931: LD_VAR 0 7
48935: ARRAY
48936: PUSH
48937: LD_VAR 0 10
48941: MUL
48942: PLUS
48943: PPUSH
48944: CALL_OW 1
48948: ST_TO_ADDR
48949: GO 48897
48951: POP
48952: POP
// end ;
48953: GO 47432
48955: POP
48956: POP
// result := Replace ( result , 4 , tmp ) ;
48957: LD_ADDR_VAR 0 5
48961: PUSH
48962: LD_VAR 0 5
48966: PPUSH
48967: LD_INT 4
48969: PPUSH
48970: LD_VAR 0 8
48974: PPUSH
48975: CALL_OW 1
48979: ST_TO_ADDR
// end ;
48980: LD_VAR 0 5
48984: RET
// export function DangerAtRange ( unit , range ) ; begin
48985: LD_INT 0
48987: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48988: LD_ADDR_VAR 0 3
48992: PUSH
48993: LD_VAR 0 1
48997: PPUSH
48998: CALL_OW 255
49002: PPUSH
49003: LD_VAR 0 1
49007: PPUSH
49008: CALL_OW 250
49012: PPUSH
49013: LD_VAR 0 1
49017: PPUSH
49018: CALL_OW 251
49022: PPUSH
49023: LD_VAR 0 2
49027: PPUSH
49028: CALL 47284 0 4
49032: ST_TO_ADDR
// end ;
49033: LD_VAR 0 3
49037: RET
// export function DangerInArea ( side , area ) ; begin
49038: LD_INT 0
49040: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49041: LD_ADDR_VAR 0 3
49045: PUSH
49046: LD_VAR 0 2
49050: PPUSH
49051: LD_INT 81
49053: PUSH
49054: LD_VAR 0 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PPUSH
49063: CALL_OW 70
49067: ST_TO_ADDR
// end ;
49068: LD_VAR 0 3
49072: RET
// export function IsExtension ( b ) ; begin
49073: LD_INT 0
49075: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49076: LD_ADDR_VAR 0 2
49080: PUSH
49081: LD_VAR 0 1
49085: PUSH
49086: LD_INT 23
49088: PUSH
49089: LD_INT 20
49091: PUSH
49092: LD_INT 22
49094: PUSH
49095: LD_INT 17
49097: PUSH
49098: LD_INT 24
49100: PUSH
49101: LD_INT 21
49103: PUSH
49104: LD_INT 19
49106: PUSH
49107: LD_INT 16
49109: PUSH
49110: LD_INT 25
49112: PUSH
49113: LD_INT 18
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: IN
49128: ST_TO_ADDR
// end ;
49129: LD_VAR 0 2
49133: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49134: LD_INT 0
49136: PPUSH
49137: PPUSH
49138: PPUSH
// result := [ ] ;
49139: LD_ADDR_VAR 0 4
49143: PUSH
49144: EMPTY
49145: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49146: LD_ADDR_VAR 0 5
49150: PUSH
49151: LD_VAR 0 2
49155: PPUSH
49156: LD_INT 21
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PPUSH
49166: CALL_OW 70
49170: ST_TO_ADDR
// if not tmp then
49171: LD_VAR 0 5
49175: NOT
49176: IFFALSE 49180
// exit ;
49178: GO 49244
// if checkLink then
49180: LD_VAR 0 3
49184: IFFALSE 49234
// begin for i in tmp do
49186: LD_ADDR_VAR 0 6
49190: PUSH
49191: LD_VAR 0 5
49195: PUSH
49196: FOR_IN
49197: IFFALSE 49232
// if GetBase ( i ) <> base then
49199: LD_VAR 0 6
49203: PPUSH
49204: CALL_OW 274
49208: PUSH
49209: LD_VAR 0 1
49213: NONEQUAL
49214: IFFALSE 49230
// ComLinkToBase ( base , i ) ;
49216: LD_VAR 0 1
49220: PPUSH
49221: LD_VAR 0 6
49225: PPUSH
49226: CALL_OW 169
49230: GO 49196
49232: POP
49233: POP
// end ; result := tmp ;
49234: LD_ADDR_VAR 0 4
49238: PUSH
49239: LD_VAR 0 5
49243: ST_TO_ADDR
// end ;
49244: LD_VAR 0 4
49248: RET
// export function ComComplete ( units , b ) ; var i ; begin
49249: LD_INT 0
49251: PPUSH
49252: PPUSH
// if not units then
49253: LD_VAR 0 1
49257: NOT
49258: IFFALSE 49262
// exit ;
49260: GO 49352
// for i in units do
49262: LD_ADDR_VAR 0 4
49266: PUSH
49267: LD_VAR 0 1
49271: PUSH
49272: FOR_IN
49273: IFFALSE 49350
// if BuildingStatus ( b ) = bs_build then
49275: LD_VAR 0 2
49279: PPUSH
49280: CALL_OW 461
49284: PUSH
49285: LD_INT 1
49287: EQUAL
49288: IFFALSE 49348
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49290: LD_VAR 0 4
49294: PPUSH
49295: LD_STRING h
49297: PUSH
49298: LD_VAR 0 2
49302: PPUSH
49303: CALL_OW 250
49307: PUSH
49308: LD_VAR 0 2
49312: PPUSH
49313: CALL_OW 251
49317: PUSH
49318: LD_VAR 0 2
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: PPUSH
49344: CALL_OW 446
49348: GO 49272
49350: POP
49351: POP
// end ;
49352: LD_VAR 0 3
49356: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49357: LD_INT 0
49359: PPUSH
49360: PPUSH
49361: PPUSH
49362: PPUSH
49363: PPUSH
49364: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49365: LD_VAR 0 1
49369: NOT
49370: PUSH
49371: LD_VAR 0 1
49375: PPUSH
49376: CALL_OW 263
49380: PUSH
49381: LD_INT 2
49383: NONEQUAL
49384: OR
49385: IFFALSE 49389
// exit ;
49387: GO 49705
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49389: LD_ADDR_VAR 0 6
49393: PUSH
49394: LD_INT 22
49396: PUSH
49397: LD_VAR 0 1
49401: PPUSH
49402: CALL_OW 255
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 30
49416: PUSH
49417: LD_INT 36
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 34
49426: PUSH
49427: LD_INT 31
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PPUSH
49443: CALL_OW 69
49447: ST_TO_ADDR
// if not tmp then
49448: LD_VAR 0 6
49452: NOT
49453: IFFALSE 49457
// exit ;
49455: GO 49705
// result := [ ] ;
49457: LD_ADDR_VAR 0 2
49461: PUSH
49462: EMPTY
49463: ST_TO_ADDR
// for i in tmp do
49464: LD_ADDR_VAR 0 3
49468: PUSH
49469: LD_VAR 0 6
49473: PUSH
49474: FOR_IN
49475: IFFALSE 49546
// begin t := UnitsInside ( i ) ;
49477: LD_ADDR_VAR 0 4
49481: PUSH
49482: LD_VAR 0 3
49486: PPUSH
49487: CALL_OW 313
49491: ST_TO_ADDR
// if t then
49492: LD_VAR 0 4
49496: IFFALSE 49544
// for j in t do
49498: LD_ADDR_VAR 0 7
49502: PUSH
49503: LD_VAR 0 4
49507: PUSH
49508: FOR_IN
49509: IFFALSE 49542
// result := Replace ( result , result + 1 , j ) ;
49511: LD_ADDR_VAR 0 2
49515: PUSH
49516: LD_VAR 0 2
49520: PPUSH
49521: LD_VAR 0 2
49525: PUSH
49526: LD_INT 1
49528: PLUS
49529: PPUSH
49530: LD_VAR 0 7
49534: PPUSH
49535: CALL_OW 1
49539: ST_TO_ADDR
49540: GO 49508
49542: POP
49543: POP
// end ;
49544: GO 49474
49546: POP
49547: POP
// if not result then
49548: LD_VAR 0 2
49552: NOT
49553: IFFALSE 49557
// exit ;
49555: GO 49705
// mech := result [ 1 ] ;
49557: LD_ADDR_VAR 0 5
49561: PUSH
49562: LD_VAR 0 2
49566: PUSH
49567: LD_INT 1
49569: ARRAY
49570: ST_TO_ADDR
// if result > 1 then
49571: LD_VAR 0 2
49575: PUSH
49576: LD_INT 1
49578: GREATER
49579: IFFALSE 49691
// begin for i = 2 to result do
49581: LD_ADDR_VAR 0 3
49585: PUSH
49586: DOUBLE
49587: LD_INT 2
49589: DEC
49590: ST_TO_ADDR
49591: LD_VAR 0 2
49595: PUSH
49596: FOR_TO
49597: IFFALSE 49689
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49599: LD_ADDR_VAR 0 4
49603: PUSH
49604: LD_VAR 0 2
49608: PUSH
49609: LD_VAR 0 3
49613: ARRAY
49614: PPUSH
49615: LD_INT 3
49617: PPUSH
49618: CALL_OW 259
49622: PUSH
49623: LD_VAR 0 2
49627: PUSH
49628: LD_VAR 0 3
49632: ARRAY
49633: PPUSH
49634: CALL_OW 432
49638: MINUS
49639: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49640: LD_VAR 0 4
49644: PUSH
49645: LD_VAR 0 5
49649: PPUSH
49650: LD_INT 3
49652: PPUSH
49653: CALL_OW 259
49657: PUSH
49658: LD_VAR 0 5
49662: PPUSH
49663: CALL_OW 432
49667: MINUS
49668: GREATEREQUAL
49669: IFFALSE 49687
// mech := result [ i ] ;
49671: LD_ADDR_VAR 0 5
49675: PUSH
49676: LD_VAR 0 2
49680: PUSH
49681: LD_VAR 0 3
49685: ARRAY
49686: ST_TO_ADDR
// end ;
49687: GO 49596
49689: POP
49690: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49691: LD_VAR 0 1
49695: PPUSH
49696: LD_VAR 0 5
49700: PPUSH
49701: CALL_OW 135
// end ;
49705: LD_VAR 0 2
49709: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49710: LD_INT 0
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
49721: PPUSH
49722: PPUSH
49723: PPUSH
49724: PPUSH
// result := [ ] ;
49725: LD_ADDR_VAR 0 7
49729: PUSH
49730: EMPTY
49731: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 266
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: IN
49752: NOT
49753: IFFALSE 49757
// exit ;
49755: GO 51391
// if name then
49757: LD_VAR 0 3
49761: IFFALSE 49777
// SetBName ( base_dep , name ) ;
49763: LD_VAR 0 1
49767: PPUSH
49768: LD_VAR 0 3
49772: PPUSH
49773: CALL_OW 500
// base := GetBase ( base_dep ) ;
49777: LD_ADDR_VAR 0 15
49781: PUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 274
49791: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49792: LD_ADDR_VAR 0 16
49796: PUSH
49797: LD_VAR 0 1
49801: PPUSH
49802: CALL_OW 255
49806: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49807: LD_ADDR_VAR 0 17
49811: PUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 248
49821: ST_TO_ADDR
// if sources then
49822: LD_VAR 0 5
49826: IFFALSE 49873
// for i = 1 to 3 do
49828: LD_ADDR_VAR 0 8
49832: PUSH
49833: DOUBLE
49834: LD_INT 1
49836: DEC
49837: ST_TO_ADDR
49838: LD_INT 3
49840: PUSH
49841: FOR_TO
49842: IFFALSE 49871
// AddResourceType ( base , i , sources [ i ] ) ;
49844: LD_VAR 0 15
49848: PPUSH
49849: LD_VAR 0 8
49853: PPUSH
49854: LD_VAR 0 5
49858: PUSH
49859: LD_VAR 0 8
49863: ARRAY
49864: PPUSH
49865: CALL_OW 276
49869: GO 49841
49871: POP
49872: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49873: LD_ADDR_VAR 0 18
49877: PUSH
49878: LD_VAR 0 15
49882: PPUSH
49883: LD_VAR 0 2
49887: PPUSH
49888: LD_INT 1
49890: PPUSH
49891: CALL 49134 0 3
49895: ST_TO_ADDR
// InitHc ;
49896: CALL_OW 19
// InitUc ;
49900: CALL_OW 18
// uc_side := side ;
49904: LD_ADDR_OWVAR 20
49908: PUSH
49909: LD_VAR 0 16
49913: ST_TO_ADDR
// uc_nation := nation ;
49914: LD_ADDR_OWVAR 21
49918: PUSH
49919: LD_VAR 0 17
49923: ST_TO_ADDR
// if buildings then
49924: LD_VAR 0 18
49928: IFFALSE 51250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49930: LD_ADDR_VAR 0 19
49934: PUSH
49935: LD_VAR 0 18
49939: PPUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 30
49945: PUSH
49946: LD_INT 29
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 30
49955: PUSH
49956: LD_INT 30
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: PPUSH
49968: CALL_OW 72
49972: ST_TO_ADDR
// if tmp then
49973: LD_VAR 0 19
49977: IFFALSE 50025
// for i in tmp do
49979: LD_ADDR_VAR 0 8
49983: PUSH
49984: LD_VAR 0 19
49988: PUSH
49989: FOR_IN
49990: IFFALSE 50023
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49992: LD_VAR 0 8
49996: PPUSH
49997: CALL_OW 250
50001: PPUSH
50002: LD_VAR 0 8
50006: PPUSH
50007: CALL_OW 251
50011: PPUSH
50012: LD_VAR 0 16
50016: PPUSH
50017: CALL_OW 441
50021: GO 49989
50023: POP
50024: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50025: LD_VAR 0 18
50029: PPUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 30
50035: PUSH
50036: LD_INT 32
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 30
50045: PUSH
50046: LD_INT 33
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: PPUSH
50058: CALL_OW 72
50062: IFFALSE 50150
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50064: LD_ADDR_VAR 0 8
50068: PUSH
50069: LD_VAR 0 18
50073: PPUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 30
50079: PUSH
50080: LD_INT 32
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 30
50089: PUSH
50090: LD_INT 33
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: PPUSH
50102: CALL_OW 72
50106: PUSH
50107: FOR_IN
50108: IFFALSE 50148
// begin if not GetBWeapon ( i ) then
50110: LD_VAR 0 8
50114: PPUSH
50115: CALL_OW 269
50119: NOT
50120: IFFALSE 50146
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50122: LD_VAR 0 8
50126: PPUSH
50127: LD_VAR 0 8
50131: PPUSH
50132: LD_VAR 0 2
50136: PPUSH
50137: CALL 51396 0 2
50141: PPUSH
50142: CALL_OW 431
// end ;
50146: GO 50107
50148: POP
50149: POP
// end ; for i = 1 to personel do
50150: LD_ADDR_VAR 0 8
50154: PUSH
50155: DOUBLE
50156: LD_INT 1
50158: DEC
50159: ST_TO_ADDR
50160: LD_VAR 0 6
50164: PUSH
50165: FOR_TO
50166: IFFALSE 51230
// begin if i > 4 then
50168: LD_VAR 0 8
50172: PUSH
50173: LD_INT 4
50175: GREATER
50176: IFFALSE 50180
// break ;
50178: GO 51230
// case i of 1 :
50180: LD_VAR 0 8
50184: PUSH
50185: LD_INT 1
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 50273
50193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50194: LD_ADDR_VAR 0 12
50198: PUSH
50199: LD_VAR 0 18
50203: PPUSH
50204: LD_INT 22
50206: PUSH
50207: LD_VAR 0 16
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 58
50218: PUSH
50219: EMPTY
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 30
50227: PUSH
50228: LD_INT 32
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 30
50237: PUSH
50238: LD_INT 4
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 30
50247: PUSH
50248: LD_INT 5
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: PPUSH
50266: CALL_OW 72
50270: ST_TO_ADDR
50271: GO 50495
50273: LD_INT 2
50275: DOUBLE
50276: EQUAL
50277: IFTRUE 50281
50279: GO 50343
50281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50282: LD_ADDR_VAR 0 12
50286: PUSH
50287: LD_VAR 0 18
50291: PPUSH
50292: LD_INT 22
50294: PUSH
50295: LD_VAR 0 16
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 30
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 30
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PPUSH
50336: CALL_OW 72
50340: ST_TO_ADDR
50341: GO 50495
50343: LD_INT 3
50345: DOUBLE
50346: EQUAL
50347: IFTRUE 50351
50349: GO 50413
50351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50352: LD_ADDR_VAR 0 12
50356: PUSH
50357: LD_VAR 0 18
50361: PPUSH
50362: LD_INT 22
50364: PUSH
50365: LD_VAR 0 16
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 30
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 30
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PPUSH
50406: CALL_OW 72
50410: ST_TO_ADDR
50411: GO 50495
50413: LD_INT 4
50415: DOUBLE
50416: EQUAL
50417: IFTRUE 50421
50419: GO 50494
50421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50422: LD_ADDR_VAR 0 12
50426: PUSH
50427: LD_VAR 0 18
50431: PPUSH
50432: LD_INT 22
50434: PUSH
50435: LD_VAR 0 16
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 30
50449: PUSH
50450: LD_INT 6
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 30
50459: PUSH
50460: LD_INT 7
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 30
50469: PUSH
50470: LD_INT 8
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PPUSH
50487: CALL_OW 72
50491: ST_TO_ADDR
50492: GO 50495
50494: POP
// if i = 1 then
50495: LD_VAR 0 8
50499: PUSH
50500: LD_INT 1
50502: EQUAL
50503: IFFALSE 50614
// begin tmp := [ ] ;
50505: LD_ADDR_VAR 0 19
50509: PUSH
50510: EMPTY
50511: ST_TO_ADDR
// for j in f do
50512: LD_ADDR_VAR 0 9
50516: PUSH
50517: LD_VAR 0 12
50521: PUSH
50522: FOR_IN
50523: IFFALSE 50596
// if GetBType ( j ) = b_bunker then
50525: LD_VAR 0 9
50529: PPUSH
50530: CALL_OW 266
50534: PUSH
50535: LD_INT 32
50537: EQUAL
50538: IFFALSE 50565
// tmp := Insert ( tmp , 1 , j ) else
50540: LD_ADDR_VAR 0 19
50544: PUSH
50545: LD_VAR 0 19
50549: PPUSH
50550: LD_INT 1
50552: PPUSH
50553: LD_VAR 0 9
50557: PPUSH
50558: CALL_OW 2
50562: ST_TO_ADDR
50563: GO 50594
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50565: LD_ADDR_VAR 0 19
50569: PUSH
50570: LD_VAR 0 19
50574: PPUSH
50575: LD_VAR 0 19
50579: PUSH
50580: LD_INT 1
50582: PLUS
50583: PPUSH
50584: LD_VAR 0 9
50588: PPUSH
50589: CALL_OW 2
50593: ST_TO_ADDR
50594: GO 50522
50596: POP
50597: POP
// if tmp then
50598: LD_VAR 0 19
50602: IFFALSE 50614
// f := tmp ;
50604: LD_ADDR_VAR 0 12
50608: PUSH
50609: LD_VAR 0 19
50613: ST_TO_ADDR
// end ; x := personel [ i ] ;
50614: LD_ADDR_VAR 0 13
50618: PUSH
50619: LD_VAR 0 6
50623: PUSH
50624: LD_VAR 0 8
50628: ARRAY
50629: ST_TO_ADDR
// if x = - 1 then
50630: LD_VAR 0 13
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: EQUAL
50639: IFFALSE 50848
// begin for j in f do
50641: LD_ADDR_VAR 0 9
50645: PUSH
50646: LD_VAR 0 12
50650: PUSH
50651: FOR_IN
50652: IFFALSE 50844
// repeat InitHc ;
50654: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50658: LD_VAR 0 9
50662: PPUSH
50663: CALL_OW 266
50667: PUSH
50668: LD_INT 5
50670: EQUAL
50671: IFFALSE 50741
// begin if UnitsInside ( j ) < 3 then
50673: LD_VAR 0 9
50677: PPUSH
50678: CALL_OW 313
50682: PUSH
50683: LD_INT 3
50685: LESS
50686: IFFALSE 50722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50688: LD_INT 0
50690: PPUSH
50691: LD_INT 5
50693: PUSH
50694: LD_INT 8
50696: PUSH
50697: LD_INT 9
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: PUSH
50705: LD_VAR 0 17
50709: ARRAY
50710: PPUSH
50711: LD_VAR 0 4
50715: PPUSH
50716: CALL_OW 380
50720: GO 50739
// PrepareHuman ( false , i , skill ) ;
50722: LD_INT 0
50724: PPUSH
50725: LD_VAR 0 8
50729: PPUSH
50730: LD_VAR 0 4
50734: PPUSH
50735: CALL_OW 380
// end else
50739: GO 50758
// PrepareHuman ( false , i , skill ) ;
50741: LD_INT 0
50743: PPUSH
50744: LD_VAR 0 8
50748: PPUSH
50749: LD_VAR 0 4
50753: PPUSH
50754: CALL_OW 380
// un := CreateHuman ;
50758: LD_ADDR_VAR 0 14
50762: PUSH
50763: CALL_OW 44
50767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50768: LD_ADDR_VAR 0 7
50772: PUSH
50773: LD_VAR 0 7
50777: PPUSH
50778: LD_INT 1
50780: PPUSH
50781: LD_VAR 0 14
50785: PPUSH
50786: CALL_OW 2
50790: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50791: LD_VAR 0 14
50795: PPUSH
50796: LD_VAR 0 9
50800: PPUSH
50801: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50805: LD_VAR 0 9
50809: PPUSH
50810: CALL_OW 313
50814: PUSH
50815: LD_INT 6
50817: EQUAL
50818: PUSH
50819: LD_VAR 0 9
50823: PPUSH
50824: CALL_OW 266
50828: PUSH
50829: LD_INT 32
50831: PUSH
50832: LD_INT 31
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: IN
50839: OR
50840: IFFALSE 50654
50842: GO 50651
50844: POP
50845: POP
// end else
50846: GO 51228
// for j = 1 to x do
50848: LD_ADDR_VAR 0 9
50852: PUSH
50853: DOUBLE
50854: LD_INT 1
50856: DEC
50857: ST_TO_ADDR
50858: LD_VAR 0 13
50862: PUSH
50863: FOR_TO
50864: IFFALSE 51226
// begin InitHc ;
50866: CALL_OW 19
// if not f then
50870: LD_VAR 0 12
50874: NOT
50875: IFFALSE 50964
// begin PrepareHuman ( false , i , skill ) ;
50877: LD_INT 0
50879: PPUSH
50880: LD_VAR 0 8
50884: PPUSH
50885: LD_VAR 0 4
50889: PPUSH
50890: CALL_OW 380
// un := CreateHuman ;
50894: LD_ADDR_VAR 0 14
50898: PUSH
50899: CALL_OW 44
50903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50904: LD_ADDR_VAR 0 7
50908: PUSH
50909: LD_VAR 0 7
50913: PPUSH
50914: LD_INT 1
50916: PPUSH
50917: LD_VAR 0 14
50921: PPUSH
50922: CALL_OW 2
50926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50927: LD_VAR 0 14
50931: PPUSH
50932: LD_VAR 0 1
50936: PPUSH
50937: CALL_OW 250
50941: PPUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: CALL_OW 251
50951: PPUSH
50952: LD_INT 10
50954: PPUSH
50955: LD_INT 0
50957: PPUSH
50958: CALL_OW 50
// continue ;
50962: GO 50863
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50964: LD_VAR 0 12
50968: PUSH
50969: LD_INT 1
50971: ARRAY
50972: PPUSH
50973: CALL_OW 313
50977: PUSH
50978: LD_VAR 0 12
50982: PUSH
50983: LD_INT 1
50985: ARRAY
50986: PPUSH
50987: CALL_OW 266
50991: PUSH
50992: LD_INT 32
50994: PUSH
50995: LD_INT 31
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: IN
51002: AND
51003: PUSH
51004: LD_VAR 0 12
51008: PUSH
51009: LD_INT 1
51011: ARRAY
51012: PPUSH
51013: CALL_OW 313
51017: PUSH
51018: LD_INT 6
51020: EQUAL
51021: OR
51022: IFFALSE 51042
// f := Delete ( f , 1 ) ;
51024: LD_ADDR_VAR 0 12
51028: PUSH
51029: LD_VAR 0 12
51033: PPUSH
51034: LD_INT 1
51036: PPUSH
51037: CALL_OW 3
51041: ST_TO_ADDR
// if not f then
51042: LD_VAR 0 12
51046: NOT
51047: IFFALSE 51065
// begin x := x + 2 ;
51049: LD_ADDR_VAR 0 13
51053: PUSH
51054: LD_VAR 0 13
51058: PUSH
51059: LD_INT 2
51061: PLUS
51062: ST_TO_ADDR
// continue ;
51063: GO 50863
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51065: LD_VAR 0 12
51069: PUSH
51070: LD_INT 1
51072: ARRAY
51073: PPUSH
51074: CALL_OW 266
51078: PUSH
51079: LD_INT 5
51081: EQUAL
51082: IFFALSE 51156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51084: LD_VAR 0 12
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PPUSH
51093: CALL_OW 313
51097: PUSH
51098: LD_INT 3
51100: LESS
51101: IFFALSE 51137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51103: LD_INT 0
51105: PPUSH
51106: LD_INT 5
51108: PUSH
51109: LD_INT 8
51111: PUSH
51112: LD_INT 9
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PUSH
51120: LD_VAR 0 17
51124: ARRAY
51125: PPUSH
51126: LD_VAR 0 4
51130: PPUSH
51131: CALL_OW 380
51135: GO 51154
// PrepareHuman ( false , i , skill ) ;
51137: LD_INT 0
51139: PPUSH
51140: LD_VAR 0 8
51144: PPUSH
51145: LD_VAR 0 4
51149: PPUSH
51150: CALL_OW 380
// end else
51154: GO 51173
// PrepareHuman ( false , i , skill ) ;
51156: LD_INT 0
51158: PPUSH
51159: LD_VAR 0 8
51163: PPUSH
51164: LD_VAR 0 4
51168: PPUSH
51169: CALL_OW 380
// un := CreateHuman ;
51173: LD_ADDR_VAR 0 14
51177: PUSH
51178: CALL_OW 44
51182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51183: LD_ADDR_VAR 0 7
51187: PUSH
51188: LD_VAR 0 7
51192: PPUSH
51193: LD_INT 1
51195: PPUSH
51196: LD_VAR 0 14
51200: PPUSH
51201: CALL_OW 2
51205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51206: LD_VAR 0 14
51210: PPUSH
51211: LD_VAR 0 12
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: CALL_OW 52
// end ;
51224: GO 50863
51226: POP
51227: POP
// end ;
51228: GO 50165
51230: POP
51231: POP
// result := result ^ buildings ;
51232: LD_ADDR_VAR 0 7
51236: PUSH
51237: LD_VAR 0 7
51241: PUSH
51242: LD_VAR 0 18
51246: ADD
51247: ST_TO_ADDR
// end else
51248: GO 51391
// begin for i = 1 to personel do
51250: LD_ADDR_VAR 0 8
51254: PUSH
51255: DOUBLE
51256: LD_INT 1
51258: DEC
51259: ST_TO_ADDR
51260: LD_VAR 0 6
51264: PUSH
51265: FOR_TO
51266: IFFALSE 51389
// begin if i > 4 then
51268: LD_VAR 0 8
51272: PUSH
51273: LD_INT 4
51275: GREATER
51276: IFFALSE 51280
// break ;
51278: GO 51389
// x := personel [ i ] ;
51280: LD_ADDR_VAR 0 13
51284: PUSH
51285: LD_VAR 0 6
51289: PUSH
51290: LD_VAR 0 8
51294: ARRAY
51295: ST_TO_ADDR
// if x = - 1 then
51296: LD_VAR 0 13
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: EQUAL
51305: IFFALSE 51309
// continue ;
51307: GO 51265
// PrepareHuman ( false , i , skill ) ;
51309: LD_INT 0
51311: PPUSH
51312: LD_VAR 0 8
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: CALL_OW 380
// un := CreateHuman ;
51326: LD_ADDR_VAR 0 14
51330: PUSH
51331: CALL_OW 44
51335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51336: LD_VAR 0 14
51340: PPUSH
51341: LD_VAR 0 1
51345: PPUSH
51346: CALL_OW 250
51350: PPUSH
51351: LD_VAR 0 1
51355: PPUSH
51356: CALL_OW 251
51360: PPUSH
51361: LD_INT 10
51363: PPUSH
51364: LD_INT 0
51366: PPUSH
51367: CALL_OW 50
// result := result ^ un ;
51371: LD_ADDR_VAR 0 7
51375: PUSH
51376: LD_VAR 0 7
51380: PUSH
51381: LD_VAR 0 14
51385: ADD
51386: ST_TO_ADDR
// end ;
51387: GO 51265
51389: POP
51390: POP
// end ; end ;
51391: LD_VAR 0 7
51395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51396: LD_INT 0
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
// result := false ;
51414: LD_ADDR_VAR 0 3
51418: PUSH
51419: LD_INT 0
51421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51422: LD_VAR 0 1
51426: NOT
51427: PUSH
51428: LD_VAR 0 1
51432: PPUSH
51433: CALL_OW 266
51437: PUSH
51438: LD_INT 32
51440: PUSH
51441: LD_INT 33
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: IN
51448: NOT
51449: OR
51450: IFFALSE 51454
// exit ;
51452: GO 52563
// nat := GetNation ( tower ) ;
51454: LD_ADDR_VAR 0 12
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: CALL_OW 248
51468: ST_TO_ADDR
// side := GetSide ( tower ) ;
51469: LD_ADDR_VAR 0 16
51473: PUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 255
51483: ST_TO_ADDR
// x := GetX ( tower ) ;
51484: LD_ADDR_VAR 0 10
51488: PUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 250
51498: ST_TO_ADDR
// y := GetY ( tower ) ;
51499: LD_ADDR_VAR 0 11
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 251
51513: ST_TO_ADDR
// if not x or not y then
51514: LD_VAR 0 10
51518: NOT
51519: PUSH
51520: LD_VAR 0 11
51524: NOT
51525: OR
51526: IFFALSE 51530
// exit ;
51528: GO 52563
// weapon := 0 ;
51530: LD_ADDR_VAR 0 18
51534: PUSH
51535: LD_INT 0
51537: ST_TO_ADDR
// fac_list := [ ] ;
51538: LD_ADDR_VAR 0 17
51542: PUSH
51543: EMPTY
51544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51545: LD_ADDR_VAR 0 6
51549: PUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 274
51559: PPUSH
51560: LD_VAR 0 2
51564: PPUSH
51565: LD_INT 0
51567: PPUSH
51568: CALL 49134 0 3
51572: PPUSH
51573: LD_INT 30
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PPUSH
51583: CALL_OW 72
51587: ST_TO_ADDR
// if not factories then
51588: LD_VAR 0 6
51592: NOT
51593: IFFALSE 51597
// exit ;
51595: GO 52563
// for i in factories do
51597: LD_ADDR_VAR 0 8
51601: PUSH
51602: LD_VAR 0 6
51606: PUSH
51607: FOR_IN
51608: IFFALSE 51633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51610: LD_ADDR_VAR 0 17
51614: PUSH
51615: LD_VAR 0 17
51619: PUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: CALL_OW 478
51629: UNION
51630: ST_TO_ADDR
51631: GO 51607
51633: POP
51634: POP
// if not fac_list then
51635: LD_VAR 0 17
51639: NOT
51640: IFFALSE 51644
// exit ;
51642: GO 52563
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51644: LD_ADDR_VAR 0 5
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 5
51654: PUSH
51655: LD_INT 9
51657: PUSH
51658: LD_INT 10
51660: PUSH
51661: LD_INT 6
51663: PUSH
51664: LD_INT 7
51666: PUSH
51667: LD_INT 11
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 27
51681: PUSH
51682: LD_INT 28
51684: PUSH
51685: LD_INT 26
51687: PUSH
51688: LD_INT 30
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 43
51699: PUSH
51700: LD_INT 44
51702: PUSH
51703: LD_INT 46
51705: PUSH
51706: LD_INT 45
51708: PUSH
51709: LD_INT 47
51711: PUSH
51712: LD_INT 49
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: PUSH
51728: LD_VAR 0 12
51732: ARRAY
51733: ST_TO_ADDR
// list := list isect fac_list ;
51734: LD_ADDR_VAR 0 5
51738: PUSH
51739: LD_VAR 0 5
51743: PUSH
51744: LD_VAR 0 17
51748: ISECT
51749: ST_TO_ADDR
// if not list then
51750: LD_VAR 0 5
51754: NOT
51755: IFFALSE 51759
// exit ;
51757: GO 52563
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51759: LD_VAR 0 12
51763: PUSH
51764: LD_INT 3
51766: EQUAL
51767: PUSH
51768: LD_INT 49
51770: PUSH
51771: LD_VAR 0 5
51775: IN
51776: AND
51777: PUSH
51778: LD_INT 31
51780: PPUSH
51781: LD_VAR 0 16
51785: PPUSH
51786: CALL_OW 321
51790: PUSH
51791: LD_INT 2
51793: EQUAL
51794: AND
51795: IFFALSE 51855
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51797: LD_INT 22
51799: PUSH
51800: LD_VAR 0 16
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 35
51811: PUSH
51812: LD_INT 49
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 91
51821: PUSH
51822: LD_VAR 0 1
51826: PUSH
51827: LD_INT 10
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: PPUSH
51840: CALL_OW 69
51844: NOT
51845: IFFALSE 51855
// weapon := ru_time_lapser ;
51847: LD_ADDR_VAR 0 18
51851: PUSH
51852: LD_INT 49
51854: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51855: LD_VAR 0 12
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: IN
51870: PUSH
51871: LD_INT 11
51873: PUSH
51874: LD_VAR 0 5
51878: IN
51879: PUSH
51880: LD_INT 30
51882: PUSH
51883: LD_VAR 0 5
51887: IN
51888: OR
51889: AND
51890: PUSH
51891: LD_INT 6
51893: PPUSH
51894: LD_VAR 0 16
51898: PPUSH
51899: CALL_OW 321
51903: PUSH
51904: LD_INT 2
51906: EQUAL
51907: AND
51908: IFFALSE 52073
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51910: LD_INT 22
51912: PUSH
51913: LD_VAR 0 16
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 35
51927: PUSH
51928: LD_INT 11
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 35
51937: PUSH
51938: LD_INT 30
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 91
51952: PUSH
51953: LD_VAR 0 1
51957: PUSH
51958: LD_INT 18
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PPUSH
51971: CALL_OW 69
51975: NOT
51976: PUSH
51977: LD_INT 22
51979: PUSH
51980: LD_VAR 0 16
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 30
51994: PUSH
51995: LD_INT 32
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 30
52004: PUSH
52005: LD_INT 33
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 91
52019: PUSH
52020: LD_VAR 0 1
52024: PUSH
52025: LD_INT 12
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: PPUSH
52041: CALL_OW 69
52045: PUSH
52046: LD_INT 2
52048: GREATER
52049: AND
52050: IFFALSE 52073
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52052: LD_ADDR_VAR 0 18
52056: PUSH
52057: LD_INT 11
52059: PUSH
52060: LD_INT 30
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_VAR 0 12
52071: ARRAY
52072: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52073: LD_VAR 0 18
52077: NOT
52078: PUSH
52079: LD_INT 40
52081: PPUSH
52082: LD_VAR 0 16
52086: PPUSH
52087: CALL_OW 321
52091: PUSH
52092: LD_INT 2
52094: EQUAL
52095: AND
52096: PUSH
52097: LD_INT 7
52099: PUSH
52100: LD_VAR 0 5
52104: IN
52105: PUSH
52106: LD_INT 28
52108: PUSH
52109: LD_VAR 0 5
52113: IN
52114: OR
52115: PUSH
52116: LD_INT 45
52118: PUSH
52119: LD_VAR 0 5
52123: IN
52124: OR
52125: AND
52126: IFFALSE 52380
// begin hex := GetHexInfo ( x , y ) ;
52128: LD_ADDR_VAR 0 4
52132: PUSH
52133: LD_VAR 0 10
52137: PPUSH
52138: LD_VAR 0 11
52142: PPUSH
52143: CALL_OW 546
52147: ST_TO_ADDR
// if hex [ 1 ] then
52148: LD_VAR 0 4
52152: PUSH
52153: LD_INT 1
52155: ARRAY
52156: IFFALSE 52160
// exit ;
52158: GO 52563
// height := hex [ 2 ] ;
52160: LD_ADDR_VAR 0 15
52164: PUSH
52165: LD_VAR 0 4
52169: PUSH
52170: LD_INT 2
52172: ARRAY
52173: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52174: LD_ADDR_VAR 0 14
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 5
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// for i in tmp do
52197: LD_ADDR_VAR 0 8
52201: PUSH
52202: LD_VAR 0 14
52206: PUSH
52207: FOR_IN
52208: IFFALSE 52378
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52210: LD_ADDR_VAR 0 9
52214: PUSH
52215: LD_VAR 0 10
52219: PPUSH
52220: LD_VAR 0 8
52224: PPUSH
52225: LD_INT 5
52227: PPUSH
52228: CALL_OW 272
52232: PUSH
52233: LD_VAR 0 11
52237: PPUSH
52238: LD_VAR 0 8
52242: PPUSH
52243: LD_INT 5
52245: PPUSH
52246: CALL_OW 273
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52255: LD_VAR 0 9
52259: PUSH
52260: LD_INT 1
52262: ARRAY
52263: PPUSH
52264: LD_VAR 0 9
52268: PUSH
52269: LD_INT 2
52271: ARRAY
52272: PPUSH
52273: CALL_OW 488
52277: IFFALSE 52376
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52279: LD_ADDR_VAR 0 4
52283: PUSH
52284: LD_VAR 0 9
52288: PUSH
52289: LD_INT 1
52291: ARRAY
52292: PPUSH
52293: LD_VAR 0 9
52297: PUSH
52298: LD_INT 2
52300: ARRAY
52301: PPUSH
52302: CALL_OW 546
52306: ST_TO_ADDR
// if hex [ 1 ] then
52307: LD_VAR 0 4
52311: PUSH
52312: LD_INT 1
52314: ARRAY
52315: IFFALSE 52319
// continue ;
52317: GO 52207
// h := hex [ 2 ] ;
52319: LD_ADDR_VAR 0 13
52323: PUSH
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: ST_TO_ADDR
// if h + 7 < height then
52333: LD_VAR 0 13
52337: PUSH
52338: LD_INT 7
52340: PLUS
52341: PUSH
52342: LD_VAR 0 15
52346: LESS
52347: IFFALSE 52376
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52349: LD_ADDR_VAR 0 18
52353: PUSH
52354: LD_INT 7
52356: PUSH
52357: LD_INT 28
52359: PUSH
52360: LD_INT 45
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: LD_VAR 0 12
52372: ARRAY
52373: ST_TO_ADDR
// break ;
52374: GO 52378
// end ; end ; end ;
52376: GO 52207
52378: POP
52379: POP
// end ; if not weapon then
52380: LD_VAR 0 18
52384: NOT
52385: IFFALSE 52445
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52387: LD_ADDR_VAR 0 5
52391: PUSH
52392: LD_VAR 0 5
52396: PUSH
52397: LD_INT 11
52399: PUSH
52400: LD_INT 30
52402: PUSH
52403: LD_INT 49
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: DIFF
52411: ST_TO_ADDR
// if not list then
52412: LD_VAR 0 5
52416: NOT
52417: IFFALSE 52421
// exit ;
52419: GO 52563
// weapon := list [ rand ( 1 , list ) ] ;
52421: LD_ADDR_VAR 0 18
52425: PUSH
52426: LD_VAR 0 5
52430: PUSH
52431: LD_INT 1
52433: PPUSH
52434: LD_VAR 0 5
52438: PPUSH
52439: CALL_OW 12
52443: ARRAY
52444: ST_TO_ADDR
// end ; if weapon then
52445: LD_VAR 0 18
52449: IFFALSE 52563
// begin tmp := CostOfWeapon ( weapon ) ;
52451: LD_ADDR_VAR 0 14
52455: PUSH
52456: LD_VAR 0 18
52460: PPUSH
52461: CALL_OW 451
52465: ST_TO_ADDR
// j := GetBase ( tower ) ;
52466: LD_ADDR_VAR 0 9
52470: PUSH
52471: LD_VAR 0 1
52475: PPUSH
52476: CALL_OW 274
52480: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52481: LD_VAR 0 9
52485: PPUSH
52486: LD_INT 1
52488: PPUSH
52489: CALL_OW 275
52493: PUSH
52494: LD_VAR 0 14
52498: PUSH
52499: LD_INT 1
52501: ARRAY
52502: GREATEREQUAL
52503: PUSH
52504: LD_VAR 0 9
52508: PPUSH
52509: LD_INT 2
52511: PPUSH
52512: CALL_OW 275
52516: PUSH
52517: LD_VAR 0 14
52521: PUSH
52522: LD_INT 2
52524: ARRAY
52525: GREATEREQUAL
52526: AND
52527: PUSH
52528: LD_VAR 0 9
52532: PPUSH
52533: LD_INT 3
52535: PPUSH
52536: CALL_OW 275
52540: PUSH
52541: LD_VAR 0 14
52545: PUSH
52546: LD_INT 3
52548: ARRAY
52549: GREATEREQUAL
52550: AND
52551: IFFALSE 52563
// result := weapon ;
52553: LD_ADDR_VAR 0 3
52557: PUSH
52558: LD_VAR 0 18
52562: ST_TO_ADDR
// end ; end ;
52563: LD_VAR 0 3
52567: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52568: LD_INT 0
52570: PPUSH
52571: PPUSH
// result := true ;
52572: LD_ADDR_VAR 0 3
52576: PUSH
52577: LD_INT 1
52579: ST_TO_ADDR
// if array1 = array2 then
52580: LD_VAR 0 1
52584: PUSH
52585: LD_VAR 0 2
52589: EQUAL
52590: IFFALSE 52650
// begin for i = 1 to array1 do
52592: LD_ADDR_VAR 0 4
52596: PUSH
52597: DOUBLE
52598: LD_INT 1
52600: DEC
52601: ST_TO_ADDR
52602: LD_VAR 0 1
52606: PUSH
52607: FOR_TO
52608: IFFALSE 52646
// if array1 [ i ] <> array2 [ i ] then
52610: LD_VAR 0 1
52614: PUSH
52615: LD_VAR 0 4
52619: ARRAY
52620: PUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_VAR 0 4
52630: ARRAY
52631: NONEQUAL
52632: IFFALSE 52644
// begin result := false ;
52634: LD_ADDR_VAR 0 3
52638: PUSH
52639: LD_INT 0
52641: ST_TO_ADDR
// break ;
52642: GO 52646
// end ;
52644: GO 52607
52646: POP
52647: POP
// end else
52648: GO 52658
// result := false ;
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// end ;
52658: LD_VAR 0 3
52662: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52663: LD_INT 0
52665: PPUSH
52666: PPUSH
// if not array1 or not array2 then
52667: LD_VAR 0 1
52671: NOT
52672: PUSH
52673: LD_VAR 0 2
52677: NOT
52678: OR
52679: IFFALSE 52683
// exit ;
52681: GO 52747
// result := true ;
52683: LD_ADDR_VAR 0 3
52687: PUSH
52688: LD_INT 1
52690: ST_TO_ADDR
// for i = 1 to array1 do
52691: LD_ADDR_VAR 0 4
52695: PUSH
52696: DOUBLE
52697: LD_INT 1
52699: DEC
52700: ST_TO_ADDR
52701: LD_VAR 0 1
52705: PUSH
52706: FOR_TO
52707: IFFALSE 52745
// if array1 [ i ] <> array2 [ i ] then
52709: LD_VAR 0 1
52713: PUSH
52714: LD_VAR 0 4
52718: ARRAY
52719: PUSH
52720: LD_VAR 0 2
52724: PUSH
52725: LD_VAR 0 4
52729: ARRAY
52730: NONEQUAL
52731: IFFALSE 52743
// begin result := false ;
52733: LD_ADDR_VAR 0 3
52737: PUSH
52738: LD_INT 0
52740: ST_TO_ADDR
// break ;
52741: GO 52745
// end ;
52743: GO 52706
52745: POP
52746: POP
// end ;
52747: LD_VAR 0 3
52751: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52752: LD_INT 0
52754: PPUSH
52755: PPUSH
52756: PPUSH
// pom := GetBase ( fac ) ;
52757: LD_ADDR_VAR 0 5
52761: PUSH
52762: LD_VAR 0 1
52766: PPUSH
52767: CALL_OW 274
52771: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52772: LD_ADDR_VAR 0 4
52776: PUSH
52777: LD_VAR 0 2
52781: PUSH
52782: LD_INT 1
52784: ARRAY
52785: PPUSH
52786: LD_VAR 0 2
52790: PUSH
52791: LD_INT 2
52793: ARRAY
52794: PPUSH
52795: LD_VAR 0 2
52799: PUSH
52800: LD_INT 3
52802: ARRAY
52803: PPUSH
52804: LD_VAR 0 2
52808: PUSH
52809: LD_INT 4
52811: ARRAY
52812: PPUSH
52813: CALL_OW 449
52817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52818: LD_ADDR_VAR 0 3
52822: PUSH
52823: LD_VAR 0 5
52827: PPUSH
52828: LD_INT 1
52830: PPUSH
52831: CALL_OW 275
52835: PUSH
52836: LD_VAR 0 4
52840: PUSH
52841: LD_INT 1
52843: ARRAY
52844: GREATEREQUAL
52845: PUSH
52846: LD_VAR 0 5
52850: PPUSH
52851: LD_INT 2
52853: PPUSH
52854: CALL_OW 275
52858: PUSH
52859: LD_VAR 0 4
52863: PUSH
52864: LD_INT 2
52866: ARRAY
52867: GREATEREQUAL
52868: AND
52869: PUSH
52870: LD_VAR 0 5
52874: PPUSH
52875: LD_INT 3
52877: PPUSH
52878: CALL_OW 275
52882: PUSH
52883: LD_VAR 0 4
52887: PUSH
52888: LD_INT 3
52890: ARRAY
52891: GREATEREQUAL
52892: AND
52893: ST_TO_ADDR
// end ;
52894: LD_VAR 0 3
52898: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
52903: PPUSH
52904: PPUSH
// pom := GetBase ( building ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: CALL_OW 274
52919: ST_TO_ADDR
// if not pom then
52920: LD_VAR 0 3
52924: NOT
52925: IFFALSE 52929
// exit ;
52927: GO 53099
// btype := GetBType ( building ) ;
52929: LD_ADDR_VAR 0 5
52933: PUSH
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 266
52943: ST_TO_ADDR
// if btype = b_armoury then
52944: LD_VAR 0 5
52948: PUSH
52949: LD_INT 4
52951: EQUAL
52952: IFFALSE 52962
// btype := b_barracks ;
52954: LD_ADDR_VAR 0 5
52958: PUSH
52959: LD_INT 5
52961: ST_TO_ADDR
// if btype = b_depot then
52962: LD_VAR 0 5
52966: PUSH
52967: LD_INT 0
52969: EQUAL
52970: IFFALSE 52980
// btype := b_warehouse ;
52972: LD_ADDR_VAR 0 5
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// if btype = b_workshop then
52980: LD_VAR 0 5
52984: PUSH
52985: LD_INT 2
52987: EQUAL
52988: IFFALSE 52998
// btype := b_factory ;
52990: LD_ADDR_VAR 0 5
52994: PUSH
52995: LD_INT 3
52997: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52998: LD_ADDR_VAR 0 4
53002: PUSH
53003: LD_VAR 0 5
53007: PPUSH
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL_OW 248
53017: PPUSH
53018: CALL_OW 450
53022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53023: LD_ADDR_VAR 0 2
53027: PUSH
53028: LD_VAR 0 3
53032: PPUSH
53033: LD_INT 1
53035: PPUSH
53036: CALL_OW 275
53040: PUSH
53041: LD_VAR 0 4
53045: PUSH
53046: LD_INT 1
53048: ARRAY
53049: GREATEREQUAL
53050: PUSH
53051: LD_VAR 0 3
53055: PPUSH
53056: LD_INT 2
53058: PPUSH
53059: CALL_OW 275
53063: PUSH
53064: LD_VAR 0 4
53068: PUSH
53069: LD_INT 2
53071: ARRAY
53072: GREATEREQUAL
53073: AND
53074: PUSH
53075: LD_VAR 0 3
53079: PPUSH
53080: LD_INT 3
53082: PPUSH
53083: CALL_OW 275
53087: PUSH
53088: LD_VAR 0 4
53092: PUSH
53093: LD_INT 3
53095: ARRAY
53096: GREATEREQUAL
53097: AND
53098: ST_TO_ADDR
// end ;
53099: LD_VAR 0 2
53103: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53104: LD_INT 0
53106: PPUSH
53107: PPUSH
53108: PPUSH
// pom := GetBase ( building ) ;
53109: LD_ADDR_VAR 0 4
53113: PUSH
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 274
53123: ST_TO_ADDR
// if not pom then
53124: LD_VAR 0 4
53128: NOT
53129: IFFALSE 53133
// exit ;
53131: GO 53234
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53133: LD_ADDR_VAR 0 5
53137: PUSH
53138: LD_VAR 0 2
53142: PPUSH
53143: LD_VAR 0 1
53147: PPUSH
53148: CALL_OW 248
53152: PPUSH
53153: CALL_OW 450
53157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53158: LD_ADDR_VAR 0 3
53162: PUSH
53163: LD_VAR 0 4
53167: PPUSH
53168: LD_INT 1
53170: PPUSH
53171: CALL_OW 275
53175: PUSH
53176: LD_VAR 0 5
53180: PUSH
53181: LD_INT 1
53183: ARRAY
53184: GREATEREQUAL
53185: PUSH
53186: LD_VAR 0 4
53190: PPUSH
53191: LD_INT 2
53193: PPUSH
53194: CALL_OW 275
53198: PUSH
53199: LD_VAR 0 5
53203: PUSH
53204: LD_INT 2
53206: ARRAY
53207: GREATEREQUAL
53208: AND
53209: PUSH
53210: LD_VAR 0 4
53214: PPUSH
53215: LD_INT 3
53217: PPUSH
53218: CALL_OW 275
53222: PUSH
53223: LD_VAR 0 5
53227: PUSH
53228: LD_INT 3
53230: ARRAY
53231: GREATEREQUAL
53232: AND
53233: ST_TO_ADDR
// end ;
53234: LD_VAR 0 3
53238: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53239: LD_INT 0
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
// result := false ;
53252: LD_ADDR_VAR 0 8
53256: PUSH
53257: LD_INT 0
53259: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53260: LD_VAR 0 5
53264: NOT
53265: PUSH
53266: LD_VAR 0 1
53270: NOT
53271: OR
53272: PUSH
53273: LD_VAR 0 2
53277: NOT
53278: OR
53279: PUSH
53280: LD_VAR 0 3
53284: NOT
53285: OR
53286: IFFALSE 53290
// exit ;
53288: GO 54104
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53290: LD_ADDR_VAR 0 14
53294: PUSH
53295: LD_VAR 0 1
53299: PPUSH
53300: LD_VAR 0 2
53304: PPUSH
53305: LD_VAR 0 3
53309: PPUSH
53310: LD_VAR 0 4
53314: PPUSH
53315: LD_VAR 0 5
53319: PUSH
53320: LD_INT 1
53322: ARRAY
53323: PPUSH
53324: CALL_OW 248
53328: PPUSH
53329: LD_INT 0
53331: PPUSH
53332: CALL 55337 0 6
53336: ST_TO_ADDR
// if not hexes then
53337: LD_VAR 0 14
53341: NOT
53342: IFFALSE 53346
// exit ;
53344: GO 54104
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53346: LD_ADDR_VAR 0 17
53350: PUSH
53351: LD_VAR 0 5
53355: PPUSH
53356: LD_INT 22
53358: PUSH
53359: LD_VAR 0 13
53363: PPUSH
53364: CALL_OW 255
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 30
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 30
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PPUSH
53405: CALL_OW 72
53409: ST_TO_ADDR
// for i = 1 to hexes do
53410: LD_ADDR_VAR 0 9
53414: PUSH
53415: DOUBLE
53416: LD_INT 1
53418: DEC
53419: ST_TO_ADDR
53420: LD_VAR 0 14
53424: PUSH
53425: FOR_TO
53426: IFFALSE 54102
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53428: LD_ADDR_VAR 0 13
53432: PUSH
53433: LD_VAR 0 14
53437: PUSH
53438: LD_VAR 0 9
53442: ARRAY
53443: PUSH
53444: LD_INT 1
53446: ARRAY
53447: PPUSH
53448: LD_VAR 0 14
53452: PUSH
53453: LD_VAR 0 9
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: PPUSH
53463: CALL_OW 428
53467: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53468: LD_VAR 0 14
53472: PUSH
53473: LD_VAR 0 9
53477: ARRAY
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PPUSH
53483: LD_VAR 0 14
53487: PUSH
53488: LD_VAR 0 9
53492: ARRAY
53493: PUSH
53494: LD_INT 2
53496: ARRAY
53497: PPUSH
53498: CALL_OW 351
53502: PUSH
53503: LD_VAR 0 14
53507: PUSH
53508: LD_VAR 0 9
53512: ARRAY
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PPUSH
53518: LD_VAR 0 14
53522: PUSH
53523: LD_VAR 0 9
53527: ARRAY
53528: PUSH
53529: LD_INT 2
53531: ARRAY
53532: PPUSH
53533: CALL_OW 488
53537: NOT
53538: OR
53539: PUSH
53540: LD_VAR 0 13
53544: PPUSH
53545: CALL_OW 247
53549: PUSH
53550: LD_INT 3
53552: EQUAL
53553: OR
53554: IFFALSE 53560
// exit ;
53556: POP
53557: POP
53558: GO 54104
// if not tmp then
53560: LD_VAR 0 13
53564: NOT
53565: IFFALSE 53569
// continue ;
53567: GO 53425
// result := true ;
53569: LD_ADDR_VAR 0 8
53573: PUSH
53574: LD_INT 1
53576: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53577: LD_VAR 0 6
53581: PUSH
53582: LD_VAR 0 13
53586: PPUSH
53587: CALL_OW 247
53591: PUSH
53592: LD_INT 2
53594: EQUAL
53595: AND
53596: PUSH
53597: LD_VAR 0 13
53601: PPUSH
53602: CALL_OW 263
53606: PUSH
53607: LD_INT 1
53609: EQUAL
53610: AND
53611: IFFALSE 53775
// begin if IsDrivenBy ( tmp ) then
53613: LD_VAR 0 13
53617: PPUSH
53618: CALL_OW 311
53622: IFFALSE 53626
// continue ;
53624: GO 53425
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53626: LD_VAR 0 6
53630: PPUSH
53631: LD_INT 3
53633: PUSH
53634: LD_INT 60
53636: PUSH
53637: EMPTY
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 55
53649: PUSH
53650: EMPTY
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PPUSH
53661: CALL_OW 72
53665: IFFALSE 53773
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53667: LD_ADDR_VAR 0 18
53671: PUSH
53672: LD_VAR 0 6
53676: PPUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 60
53682: PUSH
53683: EMPTY
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 55
53695: PUSH
53696: EMPTY
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PPUSH
53707: CALL_OW 72
53711: PUSH
53712: LD_INT 1
53714: ARRAY
53715: ST_TO_ADDR
// if IsInUnit ( driver ) then
53716: LD_VAR 0 18
53720: PPUSH
53721: CALL_OW 310
53725: IFFALSE 53736
// ComExit ( driver ) ;
53727: LD_VAR 0 18
53731: PPUSH
53732: CALL 79117 0 1
// AddComEnterUnit ( driver , tmp ) ;
53736: LD_VAR 0 18
53740: PPUSH
53741: LD_VAR 0 13
53745: PPUSH
53746: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53750: LD_VAR 0 18
53754: PPUSH
53755: LD_VAR 0 7
53759: PPUSH
53760: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53764: LD_VAR 0 18
53768: PPUSH
53769: CALL_OW 181
// end ; continue ;
53773: GO 53425
// end ; if not cleaners or not tmp in cleaners then
53775: LD_VAR 0 6
53779: NOT
53780: PUSH
53781: LD_VAR 0 13
53785: PUSH
53786: LD_VAR 0 6
53790: IN
53791: NOT
53792: OR
53793: IFFALSE 54100
// begin if dep then
53795: LD_VAR 0 17
53799: IFFALSE 53935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53801: LD_ADDR_VAR 0 16
53805: PUSH
53806: LD_VAR 0 17
53810: PUSH
53811: LD_INT 1
53813: ARRAY
53814: PPUSH
53815: CALL_OW 250
53819: PPUSH
53820: LD_VAR 0 17
53824: PUSH
53825: LD_INT 1
53827: ARRAY
53828: PPUSH
53829: CALL_OW 254
53833: PPUSH
53834: LD_INT 5
53836: PPUSH
53837: CALL_OW 272
53841: PUSH
53842: LD_VAR 0 17
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: CALL_OW 251
53855: PPUSH
53856: LD_VAR 0 17
53860: PUSH
53861: LD_INT 1
53863: ARRAY
53864: PPUSH
53865: CALL_OW 254
53869: PPUSH
53870: LD_INT 5
53872: PPUSH
53873: CALL_OW 273
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53882: LD_VAR 0 16
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PPUSH
53891: LD_VAR 0 16
53895: PUSH
53896: LD_INT 2
53898: ARRAY
53899: PPUSH
53900: CALL_OW 488
53904: IFFALSE 53935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53906: LD_VAR 0 13
53910: PPUSH
53911: LD_VAR 0 16
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PPUSH
53920: LD_VAR 0 16
53924: PUSH
53925: LD_INT 2
53927: ARRAY
53928: PPUSH
53929: CALL_OW 111
// continue ;
53933: GO 53425
// end ; end ; r := GetDir ( tmp ) ;
53935: LD_ADDR_VAR 0 15
53939: PUSH
53940: LD_VAR 0 13
53944: PPUSH
53945: CALL_OW 254
53949: ST_TO_ADDR
// if r = 5 then
53950: LD_VAR 0 15
53954: PUSH
53955: LD_INT 5
53957: EQUAL
53958: IFFALSE 53968
// r := 0 ;
53960: LD_ADDR_VAR 0 15
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// for j = r to 5 do
53968: LD_ADDR_VAR 0 10
53972: PUSH
53973: DOUBLE
53974: LD_VAR 0 15
53978: DEC
53979: ST_TO_ADDR
53980: LD_INT 5
53982: PUSH
53983: FOR_TO
53984: IFFALSE 54098
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53986: LD_ADDR_VAR 0 11
53990: PUSH
53991: LD_VAR 0 13
53995: PPUSH
53996: CALL_OW 250
54000: PPUSH
54001: LD_VAR 0 10
54005: PPUSH
54006: LD_INT 2
54008: PPUSH
54009: CALL_OW 272
54013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54014: LD_ADDR_VAR 0 12
54018: PUSH
54019: LD_VAR 0 13
54023: PPUSH
54024: CALL_OW 251
54028: PPUSH
54029: LD_VAR 0 10
54033: PPUSH
54034: LD_INT 2
54036: PPUSH
54037: CALL_OW 273
54041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54042: LD_VAR 0 11
54046: PPUSH
54047: LD_VAR 0 12
54051: PPUSH
54052: CALL_OW 488
54056: PUSH
54057: LD_VAR 0 11
54061: PPUSH
54062: LD_VAR 0 12
54066: PPUSH
54067: CALL_OW 428
54071: NOT
54072: AND
54073: IFFALSE 54096
// begin ComMoveXY ( tmp , _x , _y ) ;
54075: LD_VAR 0 13
54079: PPUSH
54080: LD_VAR 0 11
54084: PPUSH
54085: LD_VAR 0 12
54089: PPUSH
54090: CALL_OW 111
// break ;
54094: GO 54098
// end ; end ;
54096: GO 53983
54098: POP
54099: POP
// end ; end ;
54100: GO 53425
54102: POP
54103: POP
// end ;
54104: LD_VAR 0 8
54108: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54109: LD_INT 0
54111: PPUSH
// result := true ;
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_INT 1
54119: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54120: LD_VAR 0 2
54124: PUSH
54125: LD_INT 24
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54139
54131: LD_INT 33
54133: DOUBLE
54134: EQUAL
54135: IFTRUE 54139
54137: GO 54164
54139: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54140: LD_ADDR_VAR 0 3
54144: PUSH
54145: LD_INT 32
54147: PPUSH
54148: LD_VAR 0 1
54152: PPUSH
54153: CALL_OW 321
54157: PUSH
54158: LD_INT 2
54160: EQUAL
54161: ST_TO_ADDR
54162: GO 54480
54164: LD_INT 20
54166: DOUBLE
54167: EQUAL
54168: IFTRUE 54172
54170: GO 54197
54172: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54173: LD_ADDR_VAR 0 3
54177: PUSH
54178: LD_INT 6
54180: PPUSH
54181: LD_VAR 0 1
54185: PPUSH
54186: CALL_OW 321
54190: PUSH
54191: LD_INT 2
54193: EQUAL
54194: ST_TO_ADDR
54195: GO 54480
54197: LD_INT 22
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54211
54203: LD_INT 36
54205: DOUBLE
54206: EQUAL
54207: IFTRUE 54211
54209: GO 54236
54211: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54212: LD_ADDR_VAR 0 3
54216: PUSH
54217: LD_INT 15
54219: PPUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 321
54229: PUSH
54230: LD_INT 2
54232: EQUAL
54233: ST_TO_ADDR
54234: GO 54480
54236: LD_INT 30
54238: DOUBLE
54239: EQUAL
54240: IFTRUE 54244
54242: GO 54269
54244: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54245: LD_ADDR_VAR 0 3
54249: PUSH
54250: LD_INT 20
54252: PPUSH
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 321
54262: PUSH
54263: LD_INT 2
54265: EQUAL
54266: ST_TO_ADDR
54267: GO 54480
54269: LD_INT 28
54271: DOUBLE
54272: EQUAL
54273: IFTRUE 54283
54275: LD_INT 21
54277: DOUBLE
54278: EQUAL
54279: IFTRUE 54283
54281: GO 54308
54283: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54284: LD_ADDR_VAR 0 3
54288: PUSH
54289: LD_INT 21
54291: PPUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: CALL_OW 321
54301: PUSH
54302: LD_INT 2
54304: EQUAL
54305: ST_TO_ADDR
54306: GO 54480
54308: LD_INT 16
54310: DOUBLE
54311: EQUAL
54312: IFTRUE 54316
54314: GO 54341
54316: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54317: LD_ADDR_VAR 0 3
54321: PUSH
54322: LD_INT 84
54324: PPUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: CALL_OW 321
54334: PUSH
54335: LD_INT 2
54337: EQUAL
54338: ST_TO_ADDR
54339: GO 54480
54341: LD_INT 19
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54355
54347: LD_INT 23
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54355
54353: GO 54380
54355: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54356: LD_ADDR_VAR 0 3
54360: PUSH
54361: LD_INT 83
54363: PPUSH
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 321
54373: PUSH
54374: LD_INT 2
54376: EQUAL
54377: ST_TO_ADDR
54378: GO 54480
54380: LD_INT 17
54382: DOUBLE
54383: EQUAL
54384: IFTRUE 54388
54386: GO 54413
54388: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54389: LD_ADDR_VAR 0 3
54393: PUSH
54394: LD_INT 39
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: CALL_OW 321
54406: PUSH
54407: LD_INT 2
54409: EQUAL
54410: ST_TO_ADDR
54411: GO 54480
54413: LD_INT 18
54415: DOUBLE
54416: EQUAL
54417: IFTRUE 54421
54419: GO 54446
54421: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54422: LD_ADDR_VAR 0 3
54426: PUSH
54427: LD_INT 40
54429: PPUSH
54430: LD_VAR 0 1
54434: PPUSH
54435: CALL_OW 321
54439: PUSH
54440: LD_INT 2
54442: EQUAL
54443: ST_TO_ADDR
54444: GO 54480
54446: LD_INT 27
54448: DOUBLE
54449: EQUAL
54450: IFTRUE 54454
54452: GO 54479
54454: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54455: LD_ADDR_VAR 0 3
54459: PUSH
54460: LD_INT 35
54462: PPUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 321
54472: PUSH
54473: LD_INT 2
54475: EQUAL
54476: ST_TO_ADDR
54477: GO 54480
54479: POP
// end ;
54480: LD_VAR 0 3
54484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
// result := false ;
54498: LD_ADDR_VAR 0 6
54502: PUSH
54503: LD_INT 0
54505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54506: LD_VAR 0 1
54510: NOT
54511: PUSH
54512: LD_VAR 0 1
54516: PPUSH
54517: CALL_OW 266
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: IN
54532: NOT
54533: OR
54534: PUSH
54535: LD_VAR 0 2
54539: NOT
54540: OR
54541: PUSH
54542: LD_VAR 0 5
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: LD_INT 5
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: IN
54573: NOT
54574: OR
54575: PUSH
54576: LD_VAR 0 3
54580: PPUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: CALL_OW 488
54590: NOT
54591: OR
54592: IFFALSE 54596
// exit ;
54594: GO 55332
// side := GetSide ( depot ) ;
54596: LD_ADDR_VAR 0 9
54600: PUSH
54601: LD_VAR 0 1
54605: PPUSH
54606: CALL_OW 255
54610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54611: LD_VAR 0 9
54615: PPUSH
54616: LD_VAR 0 2
54620: PPUSH
54621: CALL 54109 0 2
54625: NOT
54626: IFFALSE 54630
// exit ;
54628: GO 55332
// pom := GetBase ( depot ) ;
54630: LD_ADDR_VAR 0 10
54634: PUSH
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 274
54644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54645: LD_ADDR_VAR 0 11
54649: PUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL_OW 248
54664: PPUSH
54665: CALL_OW 450
54669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54670: LD_VAR 0 10
54674: PPUSH
54675: LD_INT 1
54677: PPUSH
54678: CALL_OW 275
54682: PUSH
54683: LD_VAR 0 11
54687: PUSH
54688: LD_INT 1
54690: ARRAY
54691: GREATEREQUAL
54692: PUSH
54693: LD_VAR 0 10
54697: PPUSH
54698: LD_INT 2
54700: PPUSH
54701: CALL_OW 275
54705: PUSH
54706: LD_VAR 0 11
54710: PUSH
54711: LD_INT 2
54713: ARRAY
54714: GREATEREQUAL
54715: AND
54716: PUSH
54717: LD_VAR 0 10
54721: PPUSH
54722: LD_INT 3
54724: PPUSH
54725: CALL_OW 275
54729: PUSH
54730: LD_VAR 0 11
54734: PUSH
54735: LD_INT 3
54737: ARRAY
54738: GREATEREQUAL
54739: AND
54740: NOT
54741: IFFALSE 54745
// exit ;
54743: GO 55332
// if GetBType ( depot ) = b_depot then
54745: LD_VAR 0 1
54749: PPUSH
54750: CALL_OW 266
54754: PUSH
54755: LD_INT 0
54757: EQUAL
54758: IFFALSE 54770
// dist := 28 else
54760: LD_ADDR_VAR 0 14
54764: PUSH
54765: LD_INT 28
54767: ST_TO_ADDR
54768: GO 54778
// dist := 36 ;
54770: LD_ADDR_VAR 0 14
54774: PUSH
54775: LD_INT 36
54777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 3
54787: PPUSH
54788: LD_VAR 0 4
54792: PPUSH
54793: CALL_OW 297
54797: PUSH
54798: LD_VAR 0 14
54802: GREATER
54803: IFFALSE 54807
// exit ;
54805: GO 55332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54807: LD_ADDR_VAR 0 12
54811: PUSH
54812: LD_VAR 0 2
54816: PPUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: LD_VAR 0 5
54831: PPUSH
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 248
54841: PPUSH
54842: LD_INT 0
54844: PPUSH
54845: CALL 55337 0 6
54849: ST_TO_ADDR
// if not hexes then
54850: LD_VAR 0 12
54854: NOT
54855: IFFALSE 54859
// exit ;
54857: GO 55332
// hex := GetHexInfo ( x , y ) ;
54859: LD_ADDR_VAR 0 15
54863: PUSH
54864: LD_VAR 0 3
54868: PPUSH
54869: LD_VAR 0 4
54873: PPUSH
54874: CALL_OW 546
54878: ST_TO_ADDR
// if hex [ 1 ] then
54879: LD_VAR 0 15
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: IFFALSE 54891
// exit ;
54889: GO 55332
// height := hex [ 2 ] ;
54891: LD_ADDR_VAR 0 13
54895: PUSH
54896: LD_VAR 0 15
54900: PUSH
54901: LD_INT 2
54903: ARRAY
54904: ST_TO_ADDR
// for i = 1 to hexes do
54905: LD_ADDR_VAR 0 7
54909: PUSH
54910: DOUBLE
54911: LD_INT 1
54913: DEC
54914: ST_TO_ADDR
54915: LD_VAR 0 12
54919: PUSH
54920: FOR_TO
54921: IFFALSE 55251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54923: LD_VAR 0 12
54927: PUSH
54928: LD_VAR 0 7
54932: ARRAY
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_VAR 0 12
54942: PUSH
54943: LD_VAR 0 7
54947: ARRAY
54948: PUSH
54949: LD_INT 2
54951: ARRAY
54952: PPUSH
54953: CALL_OW 488
54957: NOT
54958: PUSH
54959: LD_VAR 0 12
54963: PUSH
54964: LD_VAR 0 7
54968: ARRAY
54969: PUSH
54970: LD_INT 1
54972: ARRAY
54973: PPUSH
54974: LD_VAR 0 12
54978: PUSH
54979: LD_VAR 0 7
54983: ARRAY
54984: PUSH
54985: LD_INT 2
54987: ARRAY
54988: PPUSH
54989: CALL_OW 428
54993: PUSH
54994: LD_INT 0
54996: GREATER
54997: OR
54998: PUSH
54999: LD_VAR 0 12
55003: PUSH
55004: LD_VAR 0 7
55008: ARRAY
55009: PUSH
55010: LD_INT 1
55012: ARRAY
55013: PPUSH
55014: LD_VAR 0 12
55018: PUSH
55019: LD_VAR 0 7
55023: ARRAY
55024: PUSH
55025: LD_INT 2
55027: ARRAY
55028: PPUSH
55029: CALL_OW 351
55033: OR
55034: IFFALSE 55040
// exit ;
55036: POP
55037: POP
55038: GO 55332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55040: LD_ADDR_VAR 0 8
55044: PUSH
55045: LD_VAR 0 12
55049: PUSH
55050: LD_VAR 0 7
55054: ARRAY
55055: PUSH
55056: LD_INT 1
55058: ARRAY
55059: PPUSH
55060: LD_VAR 0 12
55064: PUSH
55065: LD_VAR 0 7
55069: ARRAY
55070: PUSH
55071: LD_INT 2
55073: ARRAY
55074: PPUSH
55075: CALL_OW 546
55079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55080: LD_VAR 0 8
55084: PUSH
55085: LD_INT 1
55087: ARRAY
55088: PUSH
55089: LD_VAR 0 8
55093: PUSH
55094: LD_INT 2
55096: ARRAY
55097: PUSH
55098: LD_VAR 0 13
55102: PUSH
55103: LD_INT 2
55105: PLUS
55106: GREATER
55107: OR
55108: PUSH
55109: LD_VAR 0 8
55113: PUSH
55114: LD_INT 2
55116: ARRAY
55117: PUSH
55118: LD_VAR 0 13
55122: PUSH
55123: LD_INT 2
55125: MINUS
55126: LESS
55127: OR
55128: PUSH
55129: LD_VAR 0 8
55133: PUSH
55134: LD_INT 3
55136: ARRAY
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 8
55143: PUSH
55144: LD_INT 9
55146: PUSH
55147: LD_INT 10
55149: PUSH
55150: LD_INT 11
55152: PUSH
55153: LD_INT 12
55155: PUSH
55156: LD_INT 13
55158: PUSH
55159: LD_INT 16
55161: PUSH
55162: LD_INT 17
55164: PUSH
55165: LD_INT 18
55167: PUSH
55168: LD_INT 19
55170: PUSH
55171: LD_INT 20
55173: PUSH
55174: LD_INT 21
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: IN
55192: NOT
55193: OR
55194: PUSH
55195: LD_VAR 0 8
55199: PUSH
55200: LD_INT 5
55202: ARRAY
55203: NOT
55204: OR
55205: PUSH
55206: LD_VAR 0 8
55210: PUSH
55211: LD_INT 6
55213: ARRAY
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 7
55223: PUSH
55224: LD_INT 9
55226: PUSH
55227: LD_INT 10
55229: PUSH
55230: LD_INT 11
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: IN
55241: NOT
55242: OR
55243: IFFALSE 55249
// exit ;
55245: POP
55246: POP
55247: GO 55332
// end ;
55249: GO 54920
55251: POP
55252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55253: LD_VAR 0 9
55257: PPUSH
55258: LD_VAR 0 3
55262: PPUSH
55263: LD_VAR 0 4
55267: PPUSH
55268: LD_INT 20
55270: PPUSH
55271: CALL 47284 0 4
55275: PUSH
55276: LD_INT 4
55278: ARRAY
55279: IFFALSE 55283
// exit ;
55281: GO 55332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55283: LD_VAR 0 2
55287: PUSH
55288: LD_INT 29
55290: PUSH
55291: LD_INT 30
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: IN
55298: PUSH
55299: LD_VAR 0 3
55303: PPUSH
55304: LD_VAR 0 4
55308: PPUSH
55309: LD_VAR 0 9
55313: PPUSH
55314: CALL_OW 440
55318: NOT
55319: AND
55320: IFFALSE 55324
// exit ;
55322: GO 55332
// result := true ;
55324: LD_ADDR_VAR 0 6
55328: PUSH
55329: LD_INT 1
55331: ST_TO_ADDR
// end ;
55332: LD_VAR 0 6
55336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55337: LD_INT 0
55339: PPUSH
55340: PPUSH
55341: PPUSH
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
55347: PPUSH
55348: PPUSH
55349: PPUSH
55350: PPUSH
55351: PPUSH
55352: PPUSH
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
// result = [ ] ;
55397: LD_ADDR_VAR 0 7
55401: PUSH
55402: EMPTY
55403: ST_TO_ADDR
// temp_list = [ ] ;
55404: LD_ADDR_VAR 0 9
55408: PUSH
55409: EMPTY
55410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55411: LD_VAR 0 4
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: IN
55442: NOT
55443: PUSH
55444: LD_VAR 0 1
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: IN
55459: PUSH
55460: LD_VAR 0 5
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: IN
55479: NOT
55480: AND
55481: OR
55482: IFFALSE 55486
// exit ;
55484: GO 73877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55486: LD_VAR 0 1
55490: PUSH
55491: LD_INT 6
55493: PUSH
55494: LD_INT 7
55496: PUSH
55497: LD_INT 8
55499: PUSH
55500: LD_INT 13
55502: PUSH
55503: LD_INT 12
55505: PUSH
55506: LD_INT 15
55508: PUSH
55509: LD_INT 11
55511: PUSH
55512: LD_INT 14
55514: PUSH
55515: LD_INT 10
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: IN
55529: IFFALSE 55539
// btype = b_lab ;
55531: LD_ADDR_VAR 0 1
55535: PUSH
55536: LD_INT 6
55538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55539: LD_VAR 0 6
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: IN
55558: NOT
55559: PUSH
55560: LD_VAR 0 1
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 6
55579: PUSH
55580: LD_INT 36
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: LD_INT 31
55591: PUSH
55592: LD_INT 32
55594: PUSH
55595: LD_INT 33
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: IN
55611: NOT
55612: PUSH
55613: LD_VAR 0 6
55617: PUSH
55618: LD_INT 1
55620: EQUAL
55621: AND
55622: OR
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: IN
55639: NOT
55640: PUSH
55641: LD_VAR 0 6
55645: PUSH
55646: LD_INT 2
55648: EQUAL
55649: AND
55650: OR
55651: IFFALSE 55661
// mode = 0 ;
55653: LD_ADDR_VAR 0 6
55657: PUSH
55658: LD_INT 0
55660: ST_TO_ADDR
// case mode of 0 :
55661: LD_VAR 0 6
55665: PUSH
55666: LD_INT 0
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55674
55672: GO 67127
55674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55675: LD_ADDR_VAR 0 11
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 12
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56064: LD_ADDR_VAR 0 13
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56263: LD_ADDR_VAR 0 14
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56459: LD_ADDR_VAR 0 15
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56652: LD_ADDR_VAR 0 16
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56845: LD_ADDR_VAR 0 17
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57075: LD_ADDR_VAR 0 18
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57305: LD_ADDR_VAR 0 19
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57535: LD_ADDR_VAR 0 20
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57765: LD_ADDR_VAR 0 21
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57995: LD_ADDR_VAR 0 22
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 23
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58505: LD_ADDR_VAR 0 24
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58781: LD_ADDR_VAR 0 25
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59055: LD_ADDR_VAR 0 26
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59331: LD_ADDR_VAR 0 27
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59611: LD_ADDR_VAR 0 28
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59893: LD_ADDR_VAR 0 29
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60172: LD_ADDR_VAR 0 30
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60450: LD_ADDR_VAR 0 31
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60728: LD_ADDR_VAR 0 32
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61006: LD_ADDR_VAR 0 33
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61285: LD_ADDR_VAR 0 34
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 35
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61677: LD_ADDR_VAR 0 36
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61789: LD_ADDR_VAR 0 37
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61901: LD_ADDR_VAR 0 38
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62013: LD_ADDR_VAR 0 39
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62125: LD_ADDR_VAR 0 40
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62237: LD_ADDR_VAR 0 41
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62587: LD_ADDR_VAR 0 42
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62937: LD_ADDR_VAR 0 43
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63285: LD_ADDR_VAR 0 44
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63635: LD_ADDR_VAR 0 45
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 3
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 3
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 3
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: LD_INT 3
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63985: LD_ADDR_VAR 0 46
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64333: LD_ADDR_VAR 0 47
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64484: LD_ADDR_VAR 0 48
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64631: LD_ADDR_VAR 0 49
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64775: LD_ADDR_VAR 0 50
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64919: LD_ADDR_VAR 0 51
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65066: LD_ADDR_VAR 0 52
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65217: LD_ADDR_VAR 0 53
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65447: LD_ADDR_VAR 0 54
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 2
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65677: LD_ADDR_VAR 0 55
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65907: LD_ADDR_VAR 0 56
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66137: LD_ADDR_VAR 0 57
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66367: LD_ADDR_VAR 0 58
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66597: LD_ADDR_VAR 0 59
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66685: LD_ADDR_VAR 0 60
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66773: LD_ADDR_VAR 0 61
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66861: LD_ADDR_VAR 0 62
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66949: LD_ADDR_VAR 0 63
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67037: LD_ADDR_VAR 0 64
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: ST_TO_ADDR
// end ; 1 :
67125: GO 73022
67127: LD_INT 1
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 69758
67135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67136: LD_ADDR_VAR 0 11
67140: PUSH
67141: LD_INT 1
67143: NEG
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 3
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67180: LD_ADDR_VAR 0 12
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67221: LD_ADDR_VAR 0 13
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: LIST
67260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67261: LD_ADDR_VAR 0 14
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67302: LD_ADDR_VAR 0 15
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67346: LD_ADDR_VAR 0 16
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67392: LD_ADDR_VAR 0 17
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 3
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67436: LD_ADDR_VAR 0 18
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67477: LD_ADDR_VAR 0 19
67481: PUSH
67482: LD_INT 3
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67517: LD_ADDR_VAR 0 20
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67558: LD_ADDR_VAR 0 21
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67602: LD_ADDR_VAR 0 22
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: NEG
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67648: LD_ADDR_VAR 0 23
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 3
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 4
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67692: LD_ADDR_VAR 0 24
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67733: LD_ADDR_VAR 0 25
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: LD_INT 4
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67773: LD_ADDR_VAR 0 26
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: LD_INT 3
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: LD_INT 4
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67814: LD_ADDR_VAR 0 27
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67858: LD_ADDR_VAR 0 28
67862: PUSH
67863: LD_INT 3
67865: NEG
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 3
67877: NEG
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67904: LD_ADDR_VAR 0 29
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 4
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 4
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 3
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 5
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 6
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 6
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 5
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68059: LD_ADDR_VAR 0 30
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 4
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 5
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 5
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 5
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 6
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 6
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68202: LD_ADDR_VAR 0 31
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 4
68249: PUSH
68250: LD_INT 4
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: LD_INT 4
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: PUSH
68270: LD_INT 4
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 5
68279: PUSH
68280: LD_INT 5
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 4
68289: PUSH
68290: LD_INT 5
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 6
68299: PUSH
68300: LD_INT 5
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 6
68309: PUSH
68310: LD_INT 6
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: LD_INT 6
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68341: LD_ADDR_VAR 0 32
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: LD_INT 3
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 3
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 5
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: LD_INT 5
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 4
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 6
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 6
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: LD_INT 5
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68484: LD_ADDR_VAR 0 33
68488: PUSH
68489: LD_INT 2
68491: NEG
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 3
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 3
68525: NEG
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 4
68536: NEG
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: NEG
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 5
68570: NEG
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 5
68581: NEG
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 5
68593: NEG
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 6
68604: NEG
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 6
68615: NEG
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68639: LD_ADDR_VAR 0 34
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: LD_INT 2
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: NEG
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 3
68682: NEG
68683: PUSH
68684: LD_INT 4
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: NEG
68695: PUSH
68696: LD_INT 3
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: LD_INT 4
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: LD_INT 5
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 5
68730: NEG
68731: PUSH
68732: LD_INT 4
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: NEG
68743: PUSH
68744: LD_INT 5
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: NEG
68755: PUSH
68756: LD_INT 6
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 6
68766: NEG
68767: PUSH
68768: LD_INT 5
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 6
68778: NEG
68779: PUSH
68780: LD_INT 6
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68802: LD_ADDR_VAR 0 41
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 2
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68846: LD_ADDR_VAR 0 42
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68887: LD_ADDR_VAR 0 43
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 2
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: LIST
68926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68927: LD_ADDR_VAR 0 44
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68968: LD_ADDR_VAR 0 45
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: NEG
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 3
68997: NEG
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69012: LD_ADDR_VAR 0 46
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: LD_INT 2
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69058: LD_ADDR_VAR 0 47
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69091: LD_ADDR_VAR 0 48
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69122: LD_ADDR_VAR 0 49
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69151: LD_ADDR_VAR 0 50
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 3
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69180: LD_ADDR_VAR 0 51
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69211: LD_ADDR_VAR 0 52
69215: PUSH
69216: LD_INT 3
69218: NEG
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 2
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69244: LD_ADDR_VAR 0 53
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69288: LD_ADDR_VAR 0 54
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: LIST
69328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69329: LD_ADDR_VAR 0 55
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 2
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69369: LD_ADDR_VAR 0 56
69373: PUSH
69374: LD_INT 1
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 3
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 2
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: LIST
69409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69410: LD_ADDR_VAR 0 57
69414: PUSH
69415: LD_INT 2
69417: NEG
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: NEG
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 3
69439: NEG
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69454: LD_ADDR_VAR 0 58
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 3
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: LIST
69499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69500: LD_ADDR_VAR 0 59
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: LD_INT 2
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 2
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69544: LD_ADDR_VAR 0 60
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 2
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69585: LD_ADDR_VAR 0 61
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: LD_INT 1
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69625: LD_ADDR_VAR 0 62
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69666: LD_ADDR_VAR 0 63
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: NEG
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69710: LD_ADDR_VAR 0 64
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// end ; 2 :
69756: GO 73022
69758: LD_INT 2
69760: DOUBLE
69761: EQUAL
69762: IFTRUE 69766
69764: GO 73021
69766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69767: LD_ADDR_VAR 0 29
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: LD_INT 1
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 5
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 4
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 2
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: LD_INT 2
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 2
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: LD_INT 5
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 1
70007: NEG
70008: PUSH
70009: LD_INT 4
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: NEG
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: LD_INT 5
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: NEG
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: NEG
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 3
70061: NEG
70062: PUSH
70063: LD_INT 1
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: LD_INT 0
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 2
70084: NEG
70085: PUSH
70086: LD_INT 1
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 3
70095: NEG
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 4
70106: NEG
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 4
70129: NEG
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 2
70141: NEG
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: LD_INT 4
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: LD_INT 5
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: LD_INT 4
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: LD_INT 3
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: NEG
70225: PUSH
70226: LD_INT 5
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 3
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70305: LD_ADDR_VAR 0 30
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: LD_INT 4
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 3
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 5
70342: PUSH
70343: LD_INT 5
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: LD_INT 5
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: LD_INT 4
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 5
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 3
70392: PUSH
70393: LD_INT 5
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: LD_INT 4
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 2
70484: NEG
70485: PUSH
70486: LD_INT 2
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 4
70495: NEG
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 4
70506: NEG
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: LD_INT 1
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 5
70551: NEG
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: NEG
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 5
70574: NEG
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: NEG
70587: PUSH
70588: LD_INT 2
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: NEG
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 3
70609: NEG
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: LD_INT 3
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 3
70645: NEG
70646: PUSH
70647: LD_INT 2
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 4
70669: NEG
70670: PUSH
70671: LD_INT 4
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 4
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 4
70693: NEG
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 5
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: LD_INT 4
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: LD_INT 3
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: LD_INT 3
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: LD_INT 4
70764: NEG
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 1
70772: NEG
70773: PUSH
70774: LD_INT 5
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 2
70795: NEG
70796: PUSH
70797: LD_INT 5
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70852: LD_ADDR_VAR 0 31
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 4
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: LD_INT 5
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 5
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 3
70997: NEG
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 4
71008: NEG
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 4
71019: NEG
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 4
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 4
71054: NEG
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: LD_INT 5
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: NEG
71079: PUSH
71080: LD_INT 4
71082: NEG
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 3
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 4
71102: NEG
71103: PUSH
71104: LD_INT 3
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 5
71114: NEG
71115: PUSH
71116: LD_INT 4
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: NEG
71127: PUSH
71128: LD_INT 5
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: LD_INT 5
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 5
71150: NEG
71151: PUSH
71152: LD_INT 3
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: LD_INT 3
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: LD_INT 2
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 1
71217: NEG
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: LD_INT 4
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 2
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: LD_INT 4
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 4
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 4
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 5
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 5
71295: PUSH
71296: LD_INT 1
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 4
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 3
71325: PUSH
71326: LD_INT 1
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 3
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 5
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71402: LD_ADDR_VAR 0 32
71406: PUSH
71407: LD_INT 4
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: NEG
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 3
71443: NEG
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 5
71465: NEG
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 5
71476: NEG
71477: PUSH
71478: LD_INT 1
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 5
71488: NEG
71489: PUSH
71490: LD_INT 2
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 3
71500: NEG
71501: PUSH
71502: LD_INT 2
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 3
71511: NEG
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: LD_INT 4
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: LD_INT 3
71539: NEG
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: LD_INT 2
71551: NEG
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: LD_INT 2
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: NEG
71572: PUSH
71573: LD_INT 3
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 4
71583: NEG
71584: PUSH
71585: LD_INT 4
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: NEG
71596: PUSH
71597: LD_INT 4
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 4
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: LD_INT 5
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 3
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 1
71674: NEG
71675: PUSH
71676: LD_INT 4
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: LD_INT 5
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 2
71709: NEG
71710: PUSH
71711: LD_INT 5
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 3
71721: PUSH
71722: LD_INT 0
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 3
71731: PUSH
71732: LD_INT 1
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: LD_INT 2
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 4
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: LD_INT 4
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: LD_INT 3
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 5
71834: PUSH
71835: LD_INT 4
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: PUSH
71845: LD_INT 5
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: PUSH
71855: LD_INT 5
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: LD_INT 3
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 5
71884: PUSH
71885: LD_INT 3
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: LD_INT 5
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71949: LD_ADDR_VAR 0 33
71953: PUSH
71954: LD_INT 4
71956: NEG
71957: PUSH
71958: LD_INT 4
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 4
71968: NEG
71969: PUSH
71970: LD_INT 5
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: NEG
71981: PUSH
71982: LD_INT 4
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: LD_INT 3
71996: NEG
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 4
72004: NEG
72005: PUSH
72006: LD_INT 3
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 5
72016: NEG
72017: PUSH
72018: LD_INT 4
72020: NEG
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 5
72028: NEG
72029: PUSH
72030: LD_INT 5
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 3
72040: NEG
72041: PUSH
72042: LD_INT 5
72044: NEG
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 5
72052: NEG
72053: PUSH
72054: LD_INT 3
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: LD_INT 3
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 4
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 1
72097: PUSH
72098: LD_INT 2
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 3
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 1
72131: NEG
72132: PUSH
72133: LD_INT 4
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: LD_INT 4
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 4
72166: PUSH
72167: LD_INT 0
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 5
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: LD_INT 1
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 3
72238: PUSH
72239: LD_INT 2
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: LD_INT 2
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: PUSH
72270: LD_INT 2
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 4
72279: PUSH
72280: LD_INT 3
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 4
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: LD_INT 2
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 4
72329: PUSH
72330: LD_INT 2
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 2
72339: PUSH
72340: LD_INT 4
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: LD_INT 4
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: LD_INT 4
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: LD_INT 5
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 5
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 1
72399: NEG
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 1
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: LD_INT 5
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: NEG
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72487: LD_ADDR_VAR 0 34
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: LD_INT 4
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 1
72516: PUSH
72517: LD_INT 4
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 1
72527: PUSH
72528: LD_INT 3
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 0
72538: PUSH
72539: LD_INT 3
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 1
72549: NEG
72550: PUSH
72551: LD_INT 4
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: NEG
72562: PUSH
72563: LD_INT 5
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: PUSH
72574: LD_INT 3
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: LD_INT 5
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 3
72606: PUSH
72607: LD_INT 1
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 4
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 4
72627: PUSH
72628: LD_INT 1
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 1
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 2
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: LD_INT 1
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: LD_INT 2
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 4
72679: PUSH
72680: LD_INT 2
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 4
72689: PUSH
72690: LD_INT 4
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: LD_INT 3
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 5
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 5
72719: PUSH
72720: LD_INT 5
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 4
72729: PUSH
72730: LD_INT 5
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 3
72739: PUSH
72740: LD_INT 4
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 3
72749: PUSH
72750: LD_INT 3
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: LD_INT 3
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: LD_INT 5
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 1
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: LD_INT 4
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 1
72829: NEG
72830: PUSH
72831: LD_INT 3
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 1
72840: NEG
72841: PUSH
72842: LD_INT 2
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: LD_INT 4
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 2
72861: NEG
72862: PUSH
72863: LD_INT 2
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 4
72872: NEG
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 4
72883: NEG
72884: PUSH
72885: LD_INT 1
72887: NEG
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 3
72895: NEG
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_INT 3
72906: NEG
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 4
72917: NEG
72918: PUSH
72919: LD_INT 1
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 5
72928: NEG
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 5
72939: NEG
72940: PUSH
72941: LD_INT 1
72943: NEG
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 5
72951: NEG
72952: PUSH
72953: LD_INT 2
72955: NEG
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: LD_INT 2
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: ST_TO_ADDR
// end ; end ;
73019: GO 73022
73021: POP
// case btype of b_depot , b_warehouse :
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 0
73029: DOUBLE
73030: EQUAL
73031: IFTRUE 73041
73033: LD_INT 1
73035: DOUBLE
73036: EQUAL
73037: IFTRUE 73041
73039: GO 73242
73041: POP
// case nation of nation_american :
73042: LD_VAR 0 5
73046: PUSH
73047: LD_INT 1
73049: DOUBLE
73050: EQUAL
73051: IFTRUE 73055
73053: GO 73111
73055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73056: LD_ADDR_VAR 0 9
73060: PUSH
73061: LD_VAR 0 11
73065: PUSH
73066: LD_VAR 0 12
73070: PUSH
73071: LD_VAR 0 13
73075: PUSH
73076: LD_VAR 0 14
73080: PUSH
73081: LD_VAR 0 15
73085: PUSH
73086: LD_VAR 0 16
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 4
73103: PUSH
73104: LD_INT 1
73106: PLUS
73107: ARRAY
73108: ST_TO_ADDR
73109: GO 73240
73111: LD_INT 2
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73119
73117: GO 73175
73119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73120: LD_ADDR_VAR 0 9
73124: PUSH
73125: LD_VAR 0 17
73129: PUSH
73130: LD_VAR 0 18
73134: PUSH
73135: LD_VAR 0 19
73139: PUSH
73140: LD_VAR 0 20
73144: PUSH
73145: LD_VAR 0 21
73149: PUSH
73150: LD_VAR 0 22
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 4
73167: PUSH
73168: LD_INT 1
73170: PLUS
73171: ARRAY
73172: ST_TO_ADDR
73173: GO 73240
73175: LD_INT 3
73177: DOUBLE
73178: EQUAL
73179: IFTRUE 73183
73181: GO 73239
73183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73184: LD_ADDR_VAR 0 9
73188: PUSH
73189: LD_VAR 0 23
73193: PUSH
73194: LD_VAR 0 24
73198: PUSH
73199: LD_VAR 0 25
73203: PUSH
73204: LD_VAR 0 26
73208: PUSH
73209: LD_VAR 0 27
73213: PUSH
73214: LD_VAR 0 28
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: PUSH
73227: LD_VAR 0 4
73231: PUSH
73232: LD_INT 1
73234: PLUS
73235: ARRAY
73236: ST_TO_ADDR
73237: GO 73240
73239: POP
73240: GO 73795
73242: LD_INT 2
73244: DOUBLE
73245: EQUAL
73246: IFTRUE 73256
73248: LD_INT 3
73250: DOUBLE
73251: EQUAL
73252: IFTRUE 73256
73254: GO 73312
73256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73257: LD_ADDR_VAR 0 9
73261: PUSH
73262: LD_VAR 0 29
73266: PUSH
73267: LD_VAR 0 30
73271: PUSH
73272: LD_VAR 0 31
73276: PUSH
73277: LD_VAR 0 32
73281: PUSH
73282: LD_VAR 0 33
73286: PUSH
73287: LD_VAR 0 34
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: PUSH
73300: LD_VAR 0 4
73304: PUSH
73305: LD_INT 1
73307: PLUS
73308: ARRAY
73309: ST_TO_ADDR
73310: GO 73795
73312: LD_INT 16
73314: DOUBLE
73315: EQUAL
73316: IFTRUE 73374
73318: LD_INT 17
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73374
73324: LD_INT 18
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73374
73330: LD_INT 19
73332: DOUBLE
73333: EQUAL
73334: IFTRUE 73374
73336: LD_INT 22
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73374
73342: LD_INT 20
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73374
73348: LD_INT 21
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73374
73354: LD_INT 23
73356: DOUBLE
73357: EQUAL
73358: IFTRUE 73374
73360: LD_INT 24
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73374
73366: LD_INT 25
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73374
73372: GO 73430
73374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73375: LD_ADDR_VAR 0 9
73379: PUSH
73380: LD_VAR 0 35
73384: PUSH
73385: LD_VAR 0 36
73389: PUSH
73390: LD_VAR 0 37
73394: PUSH
73395: LD_VAR 0 38
73399: PUSH
73400: LD_VAR 0 39
73404: PUSH
73405: LD_VAR 0 40
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: LD_VAR 0 4
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: ARRAY
73427: ST_TO_ADDR
73428: GO 73795
73430: LD_INT 6
73432: DOUBLE
73433: EQUAL
73434: IFTRUE 73486
73436: LD_INT 7
73438: DOUBLE
73439: EQUAL
73440: IFTRUE 73486
73442: LD_INT 8
73444: DOUBLE
73445: EQUAL
73446: IFTRUE 73486
73448: LD_INT 13
73450: DOUBLE
73451: EQUAL
73452: IFTRUE 73486
73454: LD_INT 12
73456: DOUBLE
73457: EQUAL
73458: IFTRUE 73486
73460: LD_INT 15
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73486
73466: LD_INT 11
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73486
73472: LD_INT 14
73474: DOUBLE
73475: EQUAL
73476: IFTRUE 73486
73478: LD_INT 10
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73486
73484: GO 73542
73486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73487: LD_ADDR_VAR 0 9
73491: PUSH
73492: LD_VAR 0 41
73496: PUSH
73497: LD_VAR 0 42
73501: PUSH
73502: LD_VAR 0 43
73506: PUSH
73507: LD_VAR 0 44
73511: PUSH
73512: LD_VAR 0 45
73516: PUSH
73517: LD_VAR 0 46
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: LD_VAR 0 4
73534: PUSH
73535: LD_INT 1
73537: PLUS
73538: ARRAY
73539: ST_TO_ADDR
73540: GO 73795
73542: LD_INT 36
73544: DOUBLE
73545: EQUAL
73546: IFTRUE 73550
73548: GO 73606
73550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73551: LD_ADDR_VAR 0 9
73555: PUSH
73556: LD_VAR 0 47
73560: PUSH
73561: LD_VAR 0 48
73565: PUSH
73566: LD_VAR 0 49
73570: PUSH
73571: LD_VAR 0 50
73575: PUSH
73576: LD_VAR 0 51
73580: PUSH
73581: LD_VAR 0 52
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: PUSH
73594: LD_VAR 0 4
73598: PUSH
73599: LD_INT 1
73601: PLUS
73602: ARRAY
73603: ST_TO_ADDR
73604: GO 73795
73606: LD_INT 4
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73632
73612: LD_INT 5
73614: DOUBLE
73615: EQUAL
73616: IFTRUE 73632
73618: LD_INT 34
73620: DOUBLE
73621: EQUAL
73622: IFTRUE 73632
73624: LD_INT 37
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73632
73630: GO 73688
73632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73633: LD_ADDR_VAR 0 9
73637: PUSH
73638: LD_VAR 0 53
73642: PUSH
73643: LD_VAR 0 54
73647: PUSH
73648: LD_VAR 0 55
73652: PUSH
73653: LD_VAR 0 56
73657: PUSH
73658: LD_VAR 0 57
73662: PUSH
73663: LD_VAR 0 58
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: PUSH
73676: LD_VAR 0 4
73680: PUSH
73681: LD_INT 1
73683: PLUS
73684: ARRAY
73685: ST_TO_ADDR
73686: GO 73795
73688: LD_INT 31
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73738
73694: LD_INT 32
73696: DOUBLE
73697: EQUAL
73698: IFTRUE 73738
73700: LD_INT 33
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73738
73706: LD_INT 27
73708: DOUBLE
73709: EQUAL
73710: IFTRUE 73738
73712: LD_INT 26
73714: DOUBLE
73715: EQUAL
73716: IFTRUE 73738
73718: LD_INT 28
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73738
73724: LD_INT 29
73726: DOUBLE
73727: EQUAL
73728: IFTRUE 73738
73730: LD_INT 30
73732: DOUBLE
73733: EQUAL
73734: IFTRUE 73738
73736: GO 73794
73738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73739: LD_ADDR_VAR 0 9
73743: PUSH
73744: LD_VAR 0 59
73748: PUSH
73749: LD_VAR 0 60
73753: PUSH
73754: LD_VAR 0 61
73758: PUSH
73759: LD_VAR 0 62
73763: PUSH
73764: LD_VAR 0 63
73768: PUSH
73769: LD_VAR 0 64
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: PUSH
73782: LD_VAR 0 4
73786: PUSH
73787: LD_INT 1
73789: PLUS
73790: ARRAY
73791: ST_TO_ADDR
73792: GO 73795
73794: POP
// temp_list2 = [ ] ;
73795: LD_ADDR_VAR 0 10
73799: PUSH
73800: EMPTY
73801: ST_TO_ADDR
// for i in temp_list do
73802: LD_ADDR_VAR 0 8
73806: PUSH
73807: LD_VAR 0 9
73811: PUSH
73812: FOR_IN
73813: IFFALSE 73865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73815: LD_ADDR_VAR 0 10
73819: PUSH
73820: LD_VAR 0 10
73824: PUSH
73825: LD_VAR 0 8
73829: PUSH
73830: LD_INT 1
73832: ARRAY
73833: PUSH
73834: LD_VAR 0 2
73838: PLUS
73839: PUSH
73840: LD_VAR 0 8
73844: PUSH
73845: LD_INT 2
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 3
73853: PLUS
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: EMPTY
73860: LIST
73861: ADD
73862: ST_TO_ADDR
73863: GO 73812
73865: POP
73866: POP
// result = temp_list2 ;
73867: LD_ADDR_VAR 0 7
73871: PUSH
73872: LD_VAR 0 10
73876: ST_TO_ADDR
// end ;
73877: LD_VAR 0 7
73881: RET
// export function EnemyInRange ( unit , dist ) ; begin
73882: LD_INT 0
73884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: CALL_OW 255
73899: PPUSH
73900: LD_VAR 0 1
73904: PPUSH
73905: CALL_OW 250
73909: PPUSH
73910: LD_VAR 0 1
73914: PPUSH
73915: CALL_OW 251
73919: PPUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: CALL 47284 0 4
73929: PUSH
73930: LD_INT 4
73932: ARRAY
73933: ST_TO_ADDR
// end ;
73934: LD_VAR 0 3
73938: RET
// export function PlayerSeeMe ( unit ) ; begin
73939: LD_INT 0
73941: PPUSH
// result := See ( your_side , unit ) ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: LD_OWVAR 2
73951: PPUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: CALL_OW 292
73961: ST_TO_ADDR
// end ;
73962: LD_VAR 0 2
73966: RET
// export function ReverseDir ( unit ) ; begin
73967: LD_INT 0
73969: PPUSH
// if not unit then
73970: LD_VAR 0 1
73974: NOT
73975: IFFALSE 73979
// exit ;
73977: GO 74002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73979: LD_ADDR_VAR 0 2
73983: PUSH
73984: LD_VAR 0 1
73988: PPUSH
73989: CALL_OW 254
73993: PUSH
73994: LD_INT 3
73996: PLUS
73997: PUSH
73998: LD_INT 6
74000: MOD
74001: ST_TO_ADDR
// end ;
74002: LD_VAR 0 2
74006: RET
// export function ReverseArray ( array ) ; var i ; begin
74007: LD_INT 0
74009: PPUSH
74010: PPUSH
// if not array then
74011: LD_VAR 0 1
74015: NOT
74016: IFFALSE 74020
// exit ;
74018: GO 74075
// result := [ ] ;
74020: LD_ADDR_VAR 0 2
74024: PUSH
74025: EMPTY
74026: ST_TO_ADDR
// for i := array downto 1 do
74027: LD_ADDR_VAR 0 3
74031: PUSH
74032: DOUBLE
74033: LD_VAR 0 1
74037: INC
74038: ST_TO_ADDR
74039: LD_INT 1
74041: PUSH
74042: FOR_DOWNTO
74043: IFFALSE 74073
// result := Join ( result , array [ i ] ) ;
74045: LD_ADDR_VAR 0 2
74049: PUSH
74050: LD_VAR 0 2
74054: PPUSH
74055: LD_VAR 0 1
74059: PUSH
74060: LD_VAR 0 3
74064: ARRAY
74065: PPUSH
74066: CALL 78719 0 2
74070: ST_TO_ADDR
74071: GO 74042
74073: POP
74074: POP
// end ;
74075: LD_VAR 0 2
74079: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74080: LD_INT 0
74082: PPUSH
74083: PPUSH
74084: PPUSH
74085: PPUSH
74086: PPUSH
74087: PPUSH
// if not unit or not hexes then
74088: LD_VAR 0 1
74092: NOT
74093: PUSH
74094: LD_VAR 0 2
74098: NOT
74099: OR
74100: IFFALSE 74104
// exit ;
74102: GO 74227
// dist := 9999 ;
74104: LD_ADDR_VAR 0 5
74108: PUSH
74109: LD_INT 9999
74111: ST_TO_ADDR
// for i = 1 to hexes do
74112: LD_ADDR_VAR 0 4
74116: PUSH
74117: DOUBLE
74118: LD_INT 1
74120: DEC
74121: ST_TO_ADDR
74122: LD_VAR 0 2
74126: PUSH
74127: FOR_TO
74128: IFFALSE 74215
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74130: LD_ADDR_VAR 0 6
74134: PUSH
74135: LD_VAR 0 1
74139: PPUSH
74140: LD_VAR 0 2
74144: PUSH
74145: LD_VAR 0 4
74149: ARRAY
74150: PUSH
74151: LD_INT 1
74153: ARRAY
74154: PPUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_VAR 0 4
74164: ARRAY
74165: PUSH
74166: LD_INT 2
74168: ARRAY
74169: PPUSH
74170: CALL_OW 297
74174: ST_TO_ADDR
// if tdist < dist then
74175: LD_VAR 0 6
74179: PUSH
74180: LD_VAR 0 5
74184: LESS
74185: IFFALSE 74213
// begin hex := hexes [ i ] ;
74187: LD_ADDR_VAR 0 8
74191: PUSH
74192: LD_VAR 0 2
74196: PUSH
74197: LD_VAR 0 4
74201: ARRAY
74202: ST_TO_ADDR
// dist := tdist ;
74203: LD_ADDR_VAR 0 5
74207: PUSH
74208: LD_VAR 0 6
74212: ST_TO_ADDR
// end ; end ;
74213: GO 74127
74215: POP
74216: POP
// result := hex ;
74217: LD_ADDR_VAR 0 3
74221: PUSH
74222: LD_VAR 0 8
74226: ST_TO_ADDR
// end ;
74227: LD_VAR 0 3
74231: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74232: LD_INT 0
74234: PPUSH
74235: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74236: LD_VAR 0 1
74240: NOT
74241: PUSH
74242: LD_VAR 0 1
74246: PUSH
74247: LD_INT 21
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 23
74259: PUSH
74260: LD_INT 2
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: PPUSH
74271: CALL_OW 69
74275: IN
74276: NOT
74277: OR
74278: IFFALSE 74282
// exit ;
74280: GO 74329
// for i = 1 to 3 do
74282: LD_ADDR_VAR 0 3
74286: PUSH
74287: DOUBLE
74288: LD_INT 1
74290: DEC
74291: ST_TO_ADDR
74292: LD_INT 3
74294: PUSH
74295: FOR_TO
74296: IFFALSE 74327
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74298: LD_VAR 0 1
74302: PPUSH
74303: CALL_OW 250
74307: PPUSH
74308: LD_VAR 0 1
74312: PPUSH
74313: CALL_OW 251
74317: PPUSH
74318: LD_INT 1
74320: PPUSH
74321: CALL_OW 453
74325: GO 74295
74327: POP
74328: POP
// end ;
74329: LD_VAR 0 2
74333: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74334: LD_INT 0
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
74340: PPUSH
74341: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74342: LD_VAR 0 1
74346: NOT
74347: PUSH
74348: LD_VAR 0 2
74352: NOT
74353: OR
74354: PUSH
74355: LD_VAR 0 1
74359: PPUSH
74360: CALL_OW 314
74364: OR
74365: IFFALSE 74369
// exit ;
74367: GO 74836
// if GetLives ( i ) < 250 then
74369: LD_VAR 0 4
74373: PPUSH
74374: CALL_OW 256
74378: PUSH
74379: LD_INT 250
74381: LESS
74382: IFFALSE 74395
// begin ComAutodestruct ( i ) ;
74384: LD_VAR 0 4
74388: PPUSH
74389: CALL 74232 0 1
// exit ;
74393: GO 74836
// end ; x := GetX ( enemy_unit ) ;
74395: LD_ADDR_VAR 0 7
74399: PUSH
74400: LD_VAR 0 2
74404: PPUSH
74405: CALL_OW 250
74409: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74410: LD_ADDR_VAR 0 8
74414: PUSH
74415: LD_VAR 0 2
74419: PPUSH
74420: CALL_OW 251
74424: ST_TO_ADDR
// if not x or not y then
74425: LD_VAR 0 7
74429: NOT
74430: PUSH
74431: LD_VAR 0 8
74435: NOT
74436: OR
74437: IFFALSE 74441
// exit ;
74439: GO 74836
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74441: LD_ADDR_VAR 0 6
74445: PUSH
74446: LD_VAR 0 7
74450: PPUSH
74451: LD_INT 0
74453: PPUSH
74454: LD_INT 4
74456: PPUSH
74457: CALL_OW 272
74461: PUSH
74462: LD_VAR 0 8
74466: PPUSH
74467: LD_INT 0
74469: PPUSH
74470: LD_INT 4
74472: PPUSH
74473: CALL_OW 273
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_VAR 0 7
74486: PPUSH
74487: LD_INT 1
74489: PPUSH
74490: LD_INT 4
74492: PPUSH
74493: CALL_OW 272
74497: PUSH
74498: LD_VAR 0 8
74502: PPUSH
74503: LD_INT 1
74505: PPUSH
74506: LD_INT 4
74508: PPUSH
74509: CALL_OW 273
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_VAR 0 7
74522: PPUSH
74523: LD_INT 2
74525: PPUSH
74526: LD_INT 4
74528: PPUSH
74529: CALL_OW 272
74533: PUSH
74534: LD_VAR 0 8
74538: PPUSH
74539: LD_INT 2
74541: PPUSH
74542: LD_INT 4
74544: PPUSH
74545: CALL_OW 273
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PUSH
74554: LD_VAR 0 7
74558: PPUSH
74559: LD_INT 3
74561: PPUSH
74562: LD_INT 4
74564: PPUSH
74565: CALL_OW 272
74569: PUSH
74570: LD_VAR 0 8
74574: PPUSH
74575: LD_INT 3
74577: PPUSH
74578: LD_INT 4
74580: PPUSH
74581: CALL_OW 273
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_VAR 0 7
74594: PPUSH
74595: LD_INT 4
74597: PPUSH
74598: LD_INT 4
74600: PPUSH
74601: CALL_OW 272
74605: PUSH
74606: LD_VAR 0 8
74610: PPUSH
74611: LD_INT 4
74613: PPUSH
74614: LD_INT 4
74616: PPUSH
74617: CALL_OW 273
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_VAR 0 7
74630: PPUSH
74631: LD_INT 5
74633: PPUSH
74634: LD_INT 4
74636: PPUSH
74637: CALL_OW 272
74641: PUSH
74642: LD_VAR 0 8
74646: PPUSH
74647: LD_INT 5
74649: PPUSH
74650: LD_INT 4
74652: PPUSH
74653: CALL_OW 273
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: ST_TO_ADDR
// for i = tmp downto 1 do
74670: LD_ADDR_VAR 0 4
74674: PUSH
74675: DOUBLE
74676: LD_VAR 0 6
74680: INC
74681: ST_TO_ADDR
74682: LD_INT 1
74684: PUSH
74685: FOR_DOWNTO
74686: IFFALSE 74787
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74688: LD_VAR 0 6
74692: PUSH
74693: LD_VAR 0 4
74697: ARRAY
74698: PUSH
74699: LD_INT 1
74701: ARRAY
74702: PPUSH
74703: LD_VAR 0 6
74707: PUSH
74708: LD_VAR 0 4
74712: ARRAY
74713: PUSH
74714: LD_INT 2
74716: ARRAY
74717: PPUSH
74718: CALL_OW 488
74722: NOT
74723: PUSH
74724: LD_VAR 0 6
74728: PUSH
74729: LD_VAR 0 4
74733: ARRAY
74734: PUSH
74735: LD_INT 1
74737: ARRAY
74738: PPUSH
74739: LD_VAR 0 6
74743: PUSH
74744: LD_VAR 0 4
74748: ARRAY
74749: PUSH
74750: LD_INT 2
74752: ARRAY
74753: PPUSH
74754: CALL_OW 428
74758: PUSH
74759: LD_INT 0
74761: NONEQUAL
74762: OR
74763: IFFALSE 74785
// tmp := Delete ( tmp , i ) ;
74765: LD_ADDR_VAR 0 6
74769: PUSH
74770: LD_VAR 0 6
74774: PPUSH
74775: LD_VAR 0 4
74779: PPUSH
74780: CALL_OW 3
74784: ST_TO_ADDR
74785: GO 74685
74787: POP
74788: POP
// j := GetClosestHex ( unit , tmp ) ;
74789: LD_ADDR_VAR 0 5
74793: PUSH
74794: LD_VAR 0 1
74798: PPUSH
74799: LD_VAR 0 6
74803: PPUSH
74804: CALL 74080 0 2
74808: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74809: LD_VAR 0 1
74813: PPUSH
74814: LD_VAR 0 5
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: PPUSH
74823: LD_VAR 0 5
74827: PUSH
74828: LD_INT 2
74830: ARRAY
74831: PPUSH
74832: CALL_OW 111
// end ;
74836: LD_VAR 0 3
74840: RET
// export function PrepareApemanSoldier ( ) ; begin
74841: LD_INT 0
74843: PPUSH
// uc_nation := 0 ;
74844: LD_ADDR_OWVAR 21
74848: PUSH
74849: LD_INT 0
74851: ST_TO_ADDR
// hc_sex := sex_male ;
74852: LD_ADDR_OWVAR 27
74856: PUSH
74857: LD_INT 1
74859: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74860: LD_ADDR_OWVAR 28
74864: PUSH
74865: LD_INT 15
74867: ST_TO_ADDR
// hc_gallery :=  ;
74868: LD_ADDR_OWVAR 33
74872: PUSH
74873: LD_STRING 
74875: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74876: LD_ADDR_OWVAR 31
74880: PUSH
74881: LD_INT 0
74883: PPUSH
74884: LD_INT 3
74886: PPUSH
74887: CALL_OW 12
74891: PUSH
74892: LD_INT 0
74894: PPUSH
74895: LD_INT 3
74897: PPUSH
74898: CALL_OW 12
74902: PUSH
74903: LD_INT 0
74905: PUSH
74906: LD_INT 0
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: ST_TO_ADDR
// end ;
74915: LD_VAR 0 1
74919: RET
// export function PrepareApemanEngineer ( ) ; begin
74920: LD_INT 0
74922: PPUSH
// uc_nation := 0 ;
74923: LD_ADDR_OWVAR 21
74927: PUSH
74928: LD_INT 0
74930: ST_TO_ADDR
// hc_sex := sex_male ;
74931: LD_ADDR_OWVAR 27
74935: PUSH
74936: LD_INT 1
74938: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74939: LD_ADDR_OWVAR 28
74943: PUSH
74944: LD_INT 16
74946: ST_TO_ADDR
// hc_gallery :=  ;
74947: LD_ADDR_OWVAR 33
74951: PUSH
74952: LD_STRING 
74954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74955: LD_ADDR_OWVAR 31
74959: PUSH
74960: LD_INT 0
74962: PPUSH
74963: LD_INT 3
74965: PPUSH
74966: CALL_OW 12
74970: PUSH
74971: LD_INT 0
74973: PPUSH
74974: LD_INT 3
74976: PPUSH
74977: CALL_OW 12
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: ST_TO_ADDR
// end ;
74994: LD_VAR 0 1
74998: RET
// export function PrepareApeman ( agressivity ) ; begin
74999: LD_INT 0
75001: PPUSH
// uc_side := 0 ;
75002: LD_ADDR_OWVAR 20
75006: PUSH
75007: LD_INT 0
75009: ST_TO_ADDR
// uc_nation := 0 ;
75010: LD_ADDR_OWVAR 21
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// hc_sex := sex_male ;
75018: LD_ADDR_OWVAR 27
75022: PUSH
75023: LD_INT 1
75025: ST_TO_ADDR
// hc_class := class_apeman ;
75026: LD_ADDR_OWVAR 28
75030: PUSH
75031: LD_INT 12
75033: ST_TO_ADDR
// hc_gallery :=  ;
75034: LD_ADDR_OWVAR 33
75038: PUSH
75039: LD_STRING 
75041: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75042: LD_ADDR_OWVAR 35
75046: PUSH
75047: LD_VAR 0 1
75051: NEG
75052: PPUSH
75053: LD_VAR 0 1
75057: PPUSH
75058: CALL_OW 12
75062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75063: LD_ADDR_OWVAR 31
75067: PUSH
75068: LD_INT 0
75070: PPUSH
75071: LD_INT 3
75073: PPUSH
75074: CALL_OW 12
75078: PUSH
75079: LD_INT 0
75081: PPUSH
75082: LD_INT 3
75084: PPUSH
75085: CALL_OW 12
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: ST_TO_ADDR
// end ;
75102: LD_VAR 0 2
75106: RET
// export function PrepareTiger ( agressivity ) ; begin
75107: LD_INT 0
75109: PPUSH
// uc_side := 0 ;
75110: LD_ADDR_OWVAR 20
75114: PUSH
75115: LD_INT 0
75117: ST_TO_ADDR
// uc_nation := 0 ;
75118: LD_ADDR_OWVAR 21
75122: PUSH
75123: LD_INT 0
75125: ST_TO_ADDR
// hc_class := class_tiger ;
75126: LD_ADDR_OWVAR 28
75130: PUSH
75131: LD_INT 14
75133: ST_TO_ADDR
// hc_gallery :=  ;
75134: LD_ADDR_OWVAR 33
75138: PUSH
75139: LD_STRING 
75141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75142: LD_ADDR_OWVAR 35
75146: PUSH
75147: LD_VAR 0 1
75151: NEG
75152: PPUSH
75153: LD_VAR 0 1
75157: PPUSH
75158: CALL_OW 12
75162: ST_TO_ADDR
// end ;
75163: LD_VAR 0 2
75167: RET
// export function PrepareEnchidna ( ) ; begin
75168: LD_INT 0
75170: PPUSH
// uc_side := 0 ;
75171: LD_ADDR_OWVAR 20
75175: PUSH
75176: LD_INT 0
75178: ST_TO_ADDR
// uc_nation := 0 ;
75179: LD_ADDR_OWVAR 21
75183: PUSH
75184: LD_INT 0
75186: ST_TO_ADDR
// hc_class := class_baggie ;
75187: LD_ADDR_OWVAR 28
75191: PUSH
75192: LD_INT 13
75194: ST_TO_ADDR
// hc_gallery :=  ;
75195: LD_ADDR_OWVAR 33
75199: PUSH
75200: LD_STRING 
75202: ST_TO_ADDR
// end ;
75203: LD_VAR 0 1
75207: RET
// export function PrepareFrog ( ) ; begin
75208: LD_INT 0
75210: PPUSH
// uc_side := 0 ;
75211: LD_ADDR_OWVAR 20
75215: PUSH
75216: LD_INT 0
75218: ST_TO_ADDR
// uc_nation := 0 ;
75219: LD_ADDR_OWVAR 21
75223: PUSH
75224: LD_INT 0
75226: ST_TO_ADDR
// hc_class := class_frog ;
75227: LD_ADDR_OWVAR 28
75231: PUSH
75232: LD_INT 19
75234: ST_TO_ADDR
// hc_gallery :=  ;
75235: LD_ADDR_OWVAR 33
75239: PUSH
75240: LD_STRING 
75242: ST_TO_ADDR
// end ;
75243: LD_VAR 0 1
75247: RET
// export function PrepareFish ( ) ; begin
75248: LD_INT 0
75250: PPUSH
// uc_side := 0 ;
75251: LD_ADDR_OWVAR 20
75255: PUSH
75256: LD_INT 0
75258: ST_TO_ADDR
// uc_nation := 0 ;
75259: LD_ADDR_OWVAR 21
75263: PUSH
75264: LD_INT 0
75266: ST_TO_ADDR
// hc_class := class_fish ;
75267: LD_ADDR_OWVAR 28
75271: PUSH
75272: LD_INT 20
75274: ST_TO_ADDR
// hc_gallery :=  ;
75275: LD_ADDR_OWVAR 33
75279: PUSH
75280: LD_STRING 
75282: ST_TO_ADDR
// end ;
75283: LD_VAR 0 1
75287: RET
// export function PrepareBird ( ) ; begin
75288: LD_INT 0
75290: PPUSH
// uc_side := 0 ;
75291: LD_ADDR_OWVAR 20
75295: PUSH
75296: LD_INT 0
75298: ST_TO_ADDR
// uc_nation := 0 ;
75299: LD_ADDR_OWVAR 21
75303: PUSH
75304: LD_INT 0
75306: ST_TO_ADDR
// hc_class := class_phororhacos ;
75307: LD_ADDR_OWVAR 28
75311: PUSH
75312: LD_INT 18
75314: ST_TO_ADDR
// hc_gallery :=  ;
75315: LD_ADDR_OWVAR 33
75319: PUSH
75320: LD_STRING 
75322: ST_TO_ADDR
// end ;
75323: LD_VAR 0 1
75327: RET
// export function PrepareHorse ( ) ; begin
75328: LD_INT 0
75330: PPUSH
// uc_side := 0 ;
75331: LD_ADDR_OWVAR 20
75335: PUSH
75336: LD_INT 0
75338: ST_TO_ADDR
// uc_nation := 0 ;
75339: LD_ADDR_OWVAR 21
75343: PUSH
75344: LD_INT 0
75346: ST_TO_ADDR
// hc_class := class_horse ;
75347: LD_ADDR_OWVAR 28
75351: PUSH
75352: LD_INT 21
75354: ST_TO_ADDR
// hc_gallery :=  ;
75355: LD_ADDR_OWVAR 33
75359: PUSH
75360: LD_STRING 
75362: ST_TO_ADDR
// end ;
75363: LD_VAR 0 1
75367: RET
// export function PrepareMastodont ( ) ; begin
75368: LD_INT 0
75370: PPUSH
// uc_side := 0 ;
75371: LD_ADDR_OWVAR 20
75375: PUSH
75376: LD_INT 0
75378: ST_TO_ADDR
// uc_nation := 0 ;
75379: LD_ADDR_OWVAR 21
75383: PUSH
75384: LD_INT 0
75386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75387: LD_ADDR_OWVAR 37
75391: PUSH
75392: LD_INT 31
75394: ST_TO_ADDR
// vc_control := control_rider ;
75395: LD_ADDR_OWVAR 38
75399: PUSH
75400: LD_INT 4
75402: ST_TO_ADDR
// end ;
75403: LD_VAR 0 1
75407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75408: LD_INT 0
75410: PPUSH
75411: PPUSH
75412: PPUSH
// uc_side = 0 ;
75413: LD_ADDR_OWVAR 20
75417: PUSH
75418: LD_INT 0
75420: ST_TO_ADDR
// uc_nation = 0 ;
75421: LD_ADDR_OWVAR 21
75425: PUSH
75426: LD_INT 0
75428: ST_TO_ADDR
// InitHc_All ( ) ;
75429: CALL_OW 584
// InitVc ;
75433: CALL_OW 20
// if mastodonts then
75437: LD_VAR 0 6
75441: IFFALSE 75508
// for i = 1 to mastodonts do
75443: LD_ADDR_VAR 0 11
75447: PUSH
75448: DOUBLE
75449: LD_INT 1
75451: DEC
75452: ST_TO_ADDR
75453: LD_VAR 0 6
75457: PUSH
75458: FOR_TO
75459: IFFALSE 75506
// begin vc_chassis := 31 ;
75461: LD_ADDR_OWVAR 37
75465: PUSH
75466: LD_INT 31
75468: ST_TO_ADDR
// vc_control := control_rider ;
75469: LD_ADDR_OWVAR 38
75473: PUSH
75474: LD_INT 4
75476: ST_TO_ADDR
// animal := CreateVehicle ;
75477: LD_ADDR_VAR 0 12
75481: PUSH
75482: CALL_OW 45
75486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75487: LD_VAR 0 12
75491: PPUSH
75492: LD_VAR 0 8
75496: PPUSH
75497: LD_INT 0
75499: PPUSH
75500: CALL 77636 0 3
// end ;
75504: GO 75458
75506: POP
75507: POP
// if horses then
75508: LD_VAR 0 5
75512: IFFALSE 75579
// for i = 1 to horses do
75514: LD_ADDR_VAR 0 11
75518: PUSH
75519: DOUBLE
75520: LD_INT 1
75522: DEC
75523: ST_TO_ADDR
75524: LD_VAR 0 5
75528: PUSH
75529: FOR_TO
75530: IFFALSE 75577
// begin hc_class := 21 ;
75532: LD_ADDR_OWVAR 28
75536: PUSH
75537: LD_INT 21
75539: ST_TO_ADDR
// hc_gallery :=  ;
75540: LD_ADDR_OWVAR 33
75544: PUSH
75545: LD_STRING 
75547: ST_TO_ADDR
// animal := CreateHuman ;
75548: LD_ADDR_VAR 0 12
75552: PUSH
75553: CALL_OW 44
75557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75558: LD_VAR 0 12
75562: PPUSH
75563: LD_VAR 0 8
75567: PPUSH
75568: LD_INT 0
75570: PPUSH
75571: CALL 77636 0 3
// end ;
75575: GO 75529
75577: POP
75578: POP
// if birds then
75579: LD_VAR 0 1
75583: IFFALSE 75650
// for i = 1 to birds do
75585: LD_ADDR_VAR 0 11
75589: PUSH
75590: DOUBLE
75591: LD_INT 1
75593: DEC
75594: ST_TO_ADDR
75595: LD_VAR 0 1
75599: PUSH
75600: FOR_TO
75601: IFFALSE 75648
// begin hc_class = 18 ;
75603: LD_ADDR_OWVAR 28
75607: PUSH
75608: LD_INT 18
75610: ST_TO_ADDR
// hc_gallery =  ;
75611: LD_ADDR_OWVAR 33
75615: PUSH
75616: LD_STRING 
75618: ST_TO_ADDR
// animal := CreateHuman ;
75619: LD_ADDR_VAR 0 12
75623: PUSH
75624: CALL_OW 44
75628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75629: LD_VAR 0 12
75633: PPUSH
75634: LD_VAR 0 8
75638: PPUSH
75639: LD_INT 0
75641: PPUSH
75642: CALL 77636 0 3
// end ;
75646: GO 75600
75648: POP
75649: POP
// if tigers then
75650: LD_VAR 0 2
75654: IFFALSE 75738
// for i = 1 to tigers do
75656: LD_ADDR_VAR 0 11
75660: PUSH
75661: DOUBLE
75662: LD_INT 1
75664: DEC
75665: ST_TO_ADDR
75666: LD_VAR 0 2
75670: PUSH
75671: FOR_TO
75672: IFFALSE 75736
// begin hc_class = class_tiger ;
75674: LD_ADDR_OWVAR 28
75678: PUSH
75679: LD_INT 14
75681: ST_TO_ADDR
// hc_gallery =  ;
75682: LD_ADDR_OWVAR 33
75686: PUSH
75687: LD_STRING 
75689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75690: LD_ADDR_OWVAR 35
75694: PUSH
75695: LD_INT 7
75697: NEG
75698: PPUSH
75699: LD_INT 7
75701: PPUSH
75702: CALL_OW 12
75706: ST_TO_ADDR
// animal := CreateHuman ;
75707: LD_ADDR_VAR 0 12
75711: PUSH
75712: CALL_OW 44
75716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75717: LD_VAR 0 12
75721: PPUSH
75722: LD_VAR 0 8
75726: PPUSH
75727: LD_INT 0
75729: PPUSH
75730: CALL 77636 0 3
// end ;
75734: GO 75671
75736: POP
75737: POP
// if apemans then
75738: LD_VAR 0 3
75742: IFFALSE 75865
// for i = 1 to apemans do
75744: LD_ADDR_VAR 0 11
75748: PUSH
75749: DOUBLE
75750: LD_INT 1
75752: DEC
75753: ST_TO_ADDR
75754: LD_VAR 0 3
75758: PUSH
75759: FOR_TO
75760: IFFALSE 75863
// begin hc_class = class_apeman ;
75762: LD_ADDR_OWVAR 28
75766: PUSH
75767: LD_INT 12
75769: ST_TO_ADDR
// hc_gallery =  ;
75770: LD_ADDR_OWVAR 33
75774: PUSH
75775: LD_STRING 
75777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75778: LD_ADDR_OWVAR 35
75782: PUSH
75783: LD_INT 2
75785: NEG
75786: PPUSH
75787: LD_INT 2
75789: PPUSH
75790: CALL_OW 12
75794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75795: LD_ADDR_OWVAR 31
75799: PUSH
75800: LD_INT 1
75802: PPUSH
75803: LD_INT 3
75805: PPUSH
75806: CALL_OW 12
75810: PUSH
75811: LD_INT 1
75813: PPUSH
75814: LD_INT 3
75816: PPUSH
75817: CALL_OW 12
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: LD_INT 0
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: ST_TO_ADDR
// animal := CreateHuman ;
75834: LD_ADDR_VAR 0 12
75838: PUSH
75839: CALL_OW 44
75843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75844: LD_VAR 0 12
75848: PPUSH
75849: LD_VAR 0 8
75853: PPUSH
75854: LD_INT 0
75856: PPUSH
75857: CALL 77636 0 3
// end ;
75861: GO 75759
75863: POP
75864: POP
// if enchidnas then
75865: LD_VAR 0 4
75869: IFFALSE 75936
// for i = 1 to enchidnas do
75871: LD_ADDR_VAR 0 11
75875: PUSH
75876: DOUBLE
75877: LD_INT 1
75879: DEC
75880: ST_TO_ADDR
75881: LD_VAR 0 4
75885: PUSH
75886: FOR_TO
75887: IFFALSE 75934
// begin hc_class = 13 ;
75889: LD_ADDR_OWVAR 28
75893: PUSH
75894: LD_INT 13
75896: ST_TO_ADDR
// hc_gallery =  ;
75897: LD_ADDR_OWVAR 33
75901: PUSH
75902: LD_STRING 
75904: ST_TO_ADDR
// animal := CreateHuman ;
75905: LD_ADDR_VAR 0 12
75909: PUSH
75910: CALL_OW 44
75914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75915: LD_VAR 0 12
75919: PPUSH
75920: LD_VAR 0 8
75924: PPUSH
75925: LD_INT 0
75927: PPUSH
75928: CALL 77636 0 3
// end ;
75932: GO 75886
75934: POP
75935: POP
// if fishes then
75936: LD_VAR 0 7
75940: IFFALSE 76007
// for i = 1 to fishes do
75942: LD_ADDR_VAR 0 11
75946: PUSH
75947: DOUBLE
75948: LD_INT 1
75950: DEC
75951: ST_TO_ADDR
75952: LD_VAR 0 7
75956: PUSH
75957: FOR_TO
75958: IFFALSE 76005
// begin hc_class = 20 ;
75960: LD_ADDR_OWVAR 28
75964: PUSH
75965: LD_INT 20
75967: ST_TO_ADDR
// hc_gallery =  ;
75968: LD_ADDR_OWVAR 33
75972: PUSH
75973: LD_STRING 
75975: ST_TO_ADDR
// animal := CreateHuman ;
75976: LD_ADDR_VAR 0 12
75980: PUSH
75981: CALL_OW 44
75985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75986: LD_VAR 0 12
75990: PPUSH
75991: LD_VAR 0 9
75995: PPUSH
75996: LD_INT 0
75998: PPUSH
75999: CALL 77636 0 3
// end ;
76003: GO 75957
76005: POP
76006: POP
// end ;
76007: LD_VAR 0 10
76011: RET
// export function WantHeal ( sci , unit ) ; begin
76012: LD_INT 0
76014: PPUSH
// if GetTaskList ( sci ) > 0 then
76015: LD_VAR 0 1
76019: PPUSH
76020: CALL_OW 437
76024: PUSH
76025: LD_INT 0
76027: GREATER
76028: IFFALSE 76098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76030: LD_VAR 0 1
76034: PPUSH
76035: CALL_OW 437
76039: PUSH
76040: LD_INT 1
76042: ARRAY
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: PUSH
76048: LD_STRING l
76050: EQUAL
76051: PUSH
76052: LD_VAR 0 1
76056: PPUSH
76057: CALL_OW 437
76061: PUSH
76062: LD_INT 1
76064: ARRAY
76065: PUSH
76066: LD_INT 4
76068: ARRAY
76069: PUSH
76070: LD_VAR 0 2
76074: EQUAL
76075: AND
76076: IFFALSE 76088
// result := true else
76078: LD_ADDR_VAR 0 3
76082: PUSH
76083: LD_INT 1
76085: ST_TO_ADDR
76086: GO 76096
// result := false ;
76088: LD_ADDR_VAR 0 3
76092: PUSH
76093: LD_INT 0
76095: ST_TO_ADDR
// end else
76096: GO 76106
// result := false ;
76098: LD_ADDR_VAR 0 3
76102: PUSH
76103: LD_INT 0
76105: ST_TO_ADDR
// end ;
76106: LD_VAR 0 3
76110: RET
// export function HealTarget ( sci ) ; begin
76111: LD_INT 0
76113: PPUSH
// if not sci then
76114: LD_VAR 0 1
76118: NOT
76119: IFFALSE 76123
// exit ;
76121: GO 76188
// result := 0 ;
76123: LD_ADDR_VAR 0 2
76127: PUSH
76128: LD_INT 0
76130: ST_TO_ADDR
// if GetTaskList ( sci ) then
76131: LD_VAR 0 1
76135: PPUSH
76136: CALL_OW 437
76140: IFFALSE 76188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76142: LD_VAR 0 1
76146: PPUSH
76147: CALL_OW 437
76151: PUSH
76152: LD_INT 1
76154: ARRAY
76155: PUSH
76156: LD_INT 1
76158: ARRAY
76159: PUSH
76160: LD_STRING l
76162: EQUAL
76163: IFFALSE 76188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76165: LD_ADDR_VAR 0 2
76169: PUSH
76170: LD_VAR 0 1
76174: PPUSH
76175: CALL_OW 437
76179: PUSH
76180: LD_INT 1
76182: ARRAY
76183: PUSH
76184: LD_INT 4
76186: ARRAY
76187: ST_TO_ADDR
// end ;
76188: LD_VAR 0 2
76192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76193: LD_INT 0
76195: PPUSH
76196: PPUSH
76197: PPUSH
76198: PPUSH
// if not base_units then
76199: LD_VAR 0 1
76203: NOT
76204: IFFALSE 76208
// exit ;
76206: GO 76295
// result := false ;
76208: LD_ADDR_VAR 0 2
76212: PUSH
76213: LD_INT 0
76215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76216: LD_ADDR_VAR 0 5
76220: PUSH
76221: LD_VAR 0 1
76225: PPUSH
76226: LD_INT 21
76228: PUSH
76229: LD_INT 3
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PPUSH
76236: CALL_OW 72
76240: ST_TO_ADDR
// if not tmp then
76241: LD_VAR 0 5
76245: NOT
76246: IFFALSE 76250
// exit ;
76248: GO 76295
// for i in tmp do
76250: LD_ADDR_VAR 0 3
76254: PUSH
76255: LD_VAR 0 5
76259: PUSH
76260: FOR_IN
76261: IFFALSE 76293
// begin result := EnemyInRange ( i , 22 ) ;
76263: LD_ADDR_VAR 0 2
76267: PUSH
76268: LD_VAR 0 3
76272: PPUSH
76273: LD_INT 22
76275: PPUSH
76276: CALL 73882 0 2
76280: ST_TO_ADDR
// if result then
76281: LD_VAR 0 2
76285: IFFALSE 76291
// exit ;
76287: POP
76288: POP
76289: GO 76295
// end ;
76291: GO 76260
76293: POP
76294: POP
// end ;
76295: LD_VAR 0 2
76299: RET
// export function FilterByTag ( units , tag ) ; begin
76300: LD_INT 0
76302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76303: LD_ADDR_VAR 0 3
76307: PUSH
76308: LD_VAR 0 1
76312: PPUSH
76313: LD_INT 120
76315: PUSH
76316: LD_VAR 0 2
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PPUSH
76325: CALL_OW 72
76329: ST_TO_ADDR
// end ;
76330: LD_VAR 0 3
76334: RET
// export function IsDriver ( un ) ; begin
76335: LD_INT 0
76337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76338: LD_ADDR_VAR 0 2
76342: PUSH
76343: LD_VAR 0 1
76347: PUSH
76348: LD_INT 55
76350: PUSH
76351: EMPTY
76352: LIST
76353: PPUSH
76354: CALL_OW 69
76358: IN
76359: ST_TO_ADDR
// end ;
76360: LD_VAR 0 2
76364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76365: LD_INT 0
76367: PPUSH
76368: PPUSH
// list := [ ] ;
76369: LD_ADDR_VAR 0 5
76373: PUSH
76374: EMPTY
76375: ST_TO_ADDR
// case d of 0 :
76376: LD_VAR 0 3
76380: PUSH
76381: LD_INT 0
76383: DOUBLE
76384: EQUAL
76385: IFTRUE 76389
76387: GO 76522
76389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76390: LD_ADDR_VAR 0 5
76394: PUSH
76395: LD_VAR 0 1
76399: PUSH
76400: LD_INT 4
76402: MINUS
76403: PUSH
76404: LD_VAR 0 2
76408: PUSH
76409: LD_INT 4
76411: MINUS
76412: PUSH
76413: LD_INT 2
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: PUSH
76421: LD_VAR 0 1
76425: PUSH
76426: LD_INT 3
76428: MINUS
76429: PUSH
76430: LD_VAR 0 2
76434: PUSH
76435: LD_INT 1
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: LIST
76442: PUSH
76443: LD_VAR 0 1
76447: PUSH
76448: LD_INT 4
76450: PLUS
76451: PUSH
76452: LD_VAR 0 2
76456: PUSH
76457: LD_INT 4
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: LIST
76464: PUSH
76465: LD_VAR 0 1
76469: PUSH
76470: LD_INT 3
76472: PLUS
76473: PUSH
76474: LD_VAR 0 2
76478: PUSH
76479: LD_INT 3
76481: PLUS
76482: PUSH
76483: LD_INT 5
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: LIST
76490: PUSH
76491: LD_VAR 0 1
76495: PUSH
76496: LD_VAR 0 2
76500: PUSH
76501: LD_INT 4
76503: PLUS
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: LIST
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: ST_TO_ADDR
// end ; 1 :
76520: GO 77220
76522: LD_INT 1
76524: DOUBLE
76525: EQUAL
76526: IFTRUE 76530
76528: GO 76663
76530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76531: LD_ADDR_VAR 0 5
76535: PUSH
76536: LD_VAR 0 1
76540: PUSH
76541: LD_VAR 0 2
76545: PUSH
76546: LD_INT 4
76548: MINUS
76549: PUSH
76550: LD_INT 3
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: PUSH
76558: LD_VAR 0 1
76562: PUSH
76563: LD_INT 3
76565: MINUS
76566: PUSH
76567: LD_VAR 0 2
76571: PUSH
76572: LD_INT 3
76574: MINUS
76575: PUSH
76576: LD_INT 2
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: LIST
76583: PUSH
76584: LD_VAR 0 1
76588: PUSH
76589: LD_INT 4
76591: MINUS
76592: PUSH
76593: LD_VAR 0 2
76597: PUSH
76598: LD_INT 1
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: LIST
76605: PUSH
76606: LD_VAR 0 1
76610: PUSH
76611: LD_VAR 0 2
76615: PUSH
76616: LD_INT 3
76618: PLUS
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: PUSH
76628: LD_VAR 0 1
76632: PUSH
76633: LD_INT 4
76635: PLUS
76636: PUSH
76637: LD_VAR 0 2
76641: PUSH
76642: LD_INT 4
76644: PLUS
76645: PUSH
76646: LD_INT 5
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: ST_TO_ADDR
// end ; 2 :
76661: GO 77220
76663: LD_INT 2
76665: DOUBLE
76666: EQUAL
76667: IFTRUE 76671
76669: GO 76800
76671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76672: LD_ADDR_VAR 0 5
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_VAR 0 2
76686: PUSH
76687: LD_INT 3
76689: MINUS
76690: PUSH
76691: LD_INT 3
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: LIST
76698: PUSH
76699: LD_VAR 0 1
76703: PUSH
76704: LD_INT 4
76706: PLUS
76707: PUSH
76708: LD_VAR 0 2
76712: PUSH
76713: LD_INT 4
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: LIST
76720: PUSH
76721: LD_VAR 0 1
76725: PUSH
76726: LD_VAR 0 2
76730: PUSH
76731: LD_INT 4
76733: PLUS
76734: PUSH
76735: LD_INT 0
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: PUSH
76743: LD_VAR 0 1
76747: PUSH
76748: LD_INT 3
76750: MINUS
76751: PUSH
76752: LD_VAR 0 2
76756: PUSH
76757: LD_INT 1
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: LIST
76764: PUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_INT 4
76772: MINUS
76773: PUSH
76774: LD_VAR 0 2
76778: PUSH
76779: LD_INT 4
76781: MINUS
76782: PUSH
76783: LD_INT 2
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: LIST
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: ST_TO_ADDR
// end ; 3 :
76798: GO 77220
76800: LD_INT 3
76802: DOUBLE
76803: EQUAL
76804: IFTRUE 76808
76806: GO 76941
76808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76809: LD_ADDR_VAR 0 5
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 3
76821: PLUS
76822: PUSH
76823: LD_VAR 0 2
76827: PUSH
76828: LD_INT 4
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: LIST
76835: PUSH
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 4
76843: PLUS
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 4
76852: PLUS
76853: PUSH
76854: LD_INT 5
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: LD_VAR 0 1
76866: PUSH
76867: LD_INT 4
76869: MINUS
76870: PUSH
76871: LD_VAR 0 2
76875: PUSH
76876: LD_INT 1
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: PUSH
76884: LD_VAR 0 1
76888: PUSH
76889: LD_VAR 0 2
76893: PUSH
76894: LD_INT 4
76896: MINUS
76897: PUSH
76898: LD_INT 3
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: LIST
76905: PUSH
76906: LD_VAR 0 1
76910: PUSH
76911: LD_INT 3
76913: MINUS
76914: PUSH
76915: LD_VAR 0 2
76919: PUSH
76920: LD_INT 3
76922: MINUS
76923: PUSH
76924: LD_INT 2
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: LIST
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: ST_TO_ADDR
// end ; 4 :
76939: GO 77220
76941: LD_INT 4
76943: DOUBLE
76944: EQUAL
76945: IFTRUE 76949
76947: GO 77082
76949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76950: LD_ADDR_VAR 0 5
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: LD_VAR 0 2
76964: PUSH
76965: LD_INT 4
76967: PLUS
76968: PUSH
76969: LD_INT 0
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: PUSH
76977: LD_VAR 0 1
76981: PUSH
76982: LD_INT 3
76984: PLUS
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_INT 3
76993: PLUS
76994: PUSH
76995: LD_INT 5
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: LIST
77002: PUSH
77003: LD_VAR 0 1
77007: PUSH
77008: LD_INT 4
77010: PLUS
77011: PUSH
77012: LD_VAR 0 2
77016: PUSH
77017: LD_INT 4
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: LIST
77024: PUSH
77025: LD_VAR 0 1
77029: PUSH
77030: LD_VAR 0 2
77034: PUSH
77035: LD_INT 3
77037: MINUS
77038: PUSH
77039: LD_INT 3
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: LIST
77046: PUSH
77047: LD_VAR 0 1
77051: PUSH
77052: LD_INT 4
77054: MINUS
77055: PUSH
77056: LD_VAR 0 2
77060: PUSH
77061: LD_INT 4
77063: MINUS
77064: PUSH
77065: LD_INT 2
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: LIST
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: ST_TO_ADDR
// end ; 5 :
77080: GO 77220
77082: LD_INT 5
77084: DOUBLE
77085: EQUAL
77086: IFTRUE 77090
77088: GO 77219
77090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77091: LD_ADDR_VAR 0 5
77095: PUSH
77096: LD_VAR 0 1
77100: PUSH
77101: LD_INT 4
77103: MINUS
77104: PUSH
77105: LD_VAR 0 2
77109: PUSH
77110: LD_INT 1
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: LIST
77117: PUSH
77118: LD_VAR 0 1
77122: PUSH
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 4
77130: MINUS
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: LD_INT 4
77147: PLUS
77148: PUSH
77149: LD_VAR 0 2
77153: PUSH
77154: LD_INT 4
77156: PLUS
77157: PUSH
77158: LD_INT 5
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: LIST
77165: PUSH
77166: LD_VAR 0 1
77170: PUSH
77171: LD_INT 3
77173: PLUS
77174: PUSH
77175: LD_VAR 0 2
77179: PUSH
77180: LD_INT 4
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: LIST
77187: PUSH
77188: LD_VAR 0 1
77192: PUSH
77193: LD_VAR 0 2
77197: PUSH
77198: LD_INT 3
77200: PLUS
77201: PUSH
77202: LD_INT 0
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: LIST
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: ST_TO_ADDR
// end ; end ;
77217: GO 77220
77219: POP
// result := list ;
77220: LD_ADDR_VAR 0 4
77224: PUSH
77225: LD_VAR 0 5
77229: ST_TO_ADDR
// end ;
77230: LD_VAR 0 4
77234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77235: LD_INT 0
77237: PPUSH
77238: PPUSH
77239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77240: LD_VAR 0 1
77244: NOT
77245: PUSH
77246: LD_VAR 0 2
77250: PUSH
77251: LD_INT 1
77253: PUSH
77254: LD_INT 2
77256: PUSH
77257: LD_INT 3
77259: PUSH
77260: LD_INT 4
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: IN
77269: NOT
77270: OR
77271: IFFALSE 77275
// exit ;
77273: GO 77358
// tmp := [ ] ;
77275: LD_ADDR_VAR 0 5
77279: PUSH
77280: EMPTY
77281: ST_TO_ADDR
// for i in units do
77282: LD_ADDR_VAR 0 4
77286: PUSH
77287: LD_VAR 0 1
77291: PUSH
77292: FOR_IN
77293: IFFALSE 77327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77295: LD_ADDR_VAR 0 5
77299: PUSH
77300: LD_VAR 0 5
77304: PPUSH
77305: LD_VAR 0 4
77309: PPUSH
77310: LD_VAR 0 2
77314: PPUSH
77315: CALL_OW 259
77319: PPUSH
77320: CALL 78719 0 2
77324: ST_TO_ADDR
77325: GO 77292
77327: POP
77328: POP
// if not tmp then
77329: LD_VAR 0 5
77333: NOT
77334: IFFALSE 77338
// exit ;
77336: GO 77358
// result := SortListByListDesc ( units , tmp ) ;
77338: LD_ADDR_VAR 0 3
77342: PUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_VAR 0 5
77352: PPUSH
77353: CALL_OW 77
77357: ST_TO_ADDR
// end ;
77358: LD_VAR 0 3
77362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77363: LD_INT 0
77365: PPUSH
77366: PPUSH
77367: PPUSH
// result := false ;
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: LD_INT 0
77375: ST_TO_ADDR
// if not building then
77376: LD_VAR 0 2
77380: NOT
77381: IFFALSE 77385
// exit ;
77383: GO 77523
// x := GetX ( building ) ;
77385: LD_ADDR_VAR 0 4
77389: PUSH
77390: LD_VAR 0 2
77394: PPUSH
77395: CALL_OW 250
77399: ST_TO_ADDR
// y := GetY ( building ) ;
77400: LD_ADDR_VAR 0 5
77404: PUSH
77405: LD_VAR 0 2
77409: PPUSH
77410: CALL_OW 251
77414: ST_TO_ADDR
// if not x or not y then
77415: LD_VAR 0 4
77419: NOT
77420: PUSH
77421: LD_VAR 0 5
77425: NOT
77426: OR
77427: IFFALSE 77431
// exit ;
77429: GO 77523
// if GetTaskList ( unit ) then
77431: LD_VAR 0 1
77435: PPUSH
77436: CALL_OW 437
77440: IFFALSE 77523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77442: LD_STRING e
77444: PUSH
77445: LD_VAR 0 1
77449: PPUSH
77450: CALL_OW 437
77454: PUSH
77455: LD_INT 1
77457: ARRAY
77458: PUSH
77459: LD_INT 1
77461: ARRAY
77462: EQUAL
77463: PUSH
77464: LD_VAR 0 4
77468: PUSH
77469: LD_VAR 0 1
77473: PPUSH
77474: CALL_OW 437
77478: PUSH
77479: LD_INT 1
77481: ARRAY
77482: PUSH
77483: LD_INT 2
77485: ARRAY
77486: EQUAL
77487: AND
77488: PUSH
77489: LD_VAR 0 5
77493: PUSH
77494: LD_VAR 0 1
77498: PPUSH
77499: CALL_OW 437
77503: PUSH
77504: LD_INT 1
77506: ARRAY
77507: PUSH
77508: LD_INT 3
77510: ARRAY
77511: EQUAL
77512: AND
77513: IFFALSE 77523
// result := true end ;
77515: LD_ADDR_VAR 0 3
77519: PUSH
77520: LD_INT 1
77522: ST_TO_ADDR
// end ;
77523: LD_VAR 0 3
77527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77528: LD_INT 0
77530: PPUSH
// result := false ;
77531: LD_ADDR_VAR 0 4
77535: PUSH
77536: LD_INT 0
77538: ST_TO_ADDR
// if GetTaskList ( unit ) then
77539: LD_VAR 0 1
77543: PPUSH
77544: CALL_OW 437
77548: IFFALSE 77631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77550: LD_STRING M
77552: PUSH
77553: LD_VAR 0 1
77557: PPUSH
77558: CALL_OW 437
77562: PUSH
77563: LD_INT 1
77565: ARRAY
77566: PUSH
77567: LD_INT 1
77569: ARRAY
77570: EQUAL
77571: PUSH
77572: LD_VAR 0 2
77576: PUSH
77577: LD_VAR 0 1
77581: PPUSH
77582: CALL_OW 437
77586: PUSH
77587: LD_INT 1
77589: ARRAY
77590: PUSH
77591: LD_INT 2
77593: ARRAY
77594: EQUAL
77595: AND
77596: PUSH
77597: LD_VAR 0 3
77601: PUSH
77602: LD_VAR 0 1
77606: PPUSH
77607: CALL_OW 437
77611: PUSH
77612: LD_INT 1
77614: ARRAY
77615: PUSH
77616: LD_INT 3
77618: ARRAY
77619: EQUAL
77620: AND
77621: IFFALSE 77631
// result := true ;
77623: LD_ADDR_VAR 0 4
77627: PUSH
77628: LD_INT 1
77630: ST_TO_ADDR
// end ; end ;
77631: LD_VAR 0 4
77635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77636: LD_INT 0
77638: PPUSH
77639: PPUSH
77640: PPUSH
77641: PPUSH
// if not unit or not area then
77642: LD_VAR 0 1
77646: NOT
77647: PUSH
77648: LD_VAR 0 2
77652: NOT
77653: OR
77654: IFFALSE 77658
// exit ;
77656: GO 77822
// tmp := AreaToList ( area , i ) ;
77658: LD_ADDR_VAR 0 6
77662: PUSH
77663: LD_VAR 0 2
77667: PPUSH
77668: LD_VAR 0 5
77672: PPUSH
77673: CALL_OW 517
77677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77678: LD_ADDR_VAR 0 5
77682: PUSH
77683: DOUBLE
77684: LD_INT 1
77686: DEC
77687: ST_TO_ADDR
77688: LD_VAR 0 6
77692: PUSH
77693: LD_INT 1
77695: ARRAY
77696: PUSH
77697: FOR_TO
77698: IFFALSE 77820
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77700: LD_ADDR_VAR 0 7
77704: PUSH
77705: LD_VAR 0 6
77709: PUSH
77710: LD_INT 1
77712: ARRAY
77713: PUSH
77714: LD_VAR 0 5
77718: ARRAY
77719: PUSH
77720: LD_VAR 0 6
77724: PUSH
77725: LD_INT 2
77727: ARRAY
77728: PUSH
77729: LD_VAR 0 5
77733: ARRAY
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77739: LD_VAR 0 7
77743: PUSH
77744: LD_INT 1
77746: ARRAY
77747: PPUSH
77748: LD_VAR 0 7
77752: PUSH
77753: LD_INT 2
77755: ARRAY
77756: PPUSH
77757: CALL_OW 428
77761: PUSH
77762: LD_INT 0
77764: EQUAL
77765: IFFALSE 77818
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77767: LD_VAR 0 1
77771: PPUSH
77772: LD_VAR 0 7
77776: PUSH
77777: LD_INT 1
77779: ARRAY
77780: PPUSH
77781: LD_VAR 0 7
77785: PUSH
77786: LD_INT 2
77788: ARRAY
77789: PPUSH
77790: LD_VAR 0 3
77794: PPUSH
77795: CALL_OW 48
// result := IsPlaced ( unit ) ;
77799: LD_ADDR_VAR 0 4
77803: PUSH
77804: LD_VAR 0 1
77808: PPUSH
77809: CALL_OW 305
77813: ST_TO_ADDR
// exit ;
77814: POP
77815: POP
77816: GO 77822
// end ; end ;
77818: GO 77697
77820: POP
77821: POP
// end ;
77822: LD_VAR 0 4
77826: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77827: LD_INT 0
77829: PPUSH
77830: PPUSH
77831: PPUSH
// if not side or side > 8 then
77832: LD_VAR 0 1
77836: NOT
77837: PUSH
77838: LD_VAR 0 1
77842: PUSH
77843: LD_INT 8
77845: GREATER
77846: OR
77847: IFFALSE 77851
// exit ;
77849: GO 78038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77851: LD_ADDR_VAR 0 4
77855: PUSH
77856: LD_INT 22
77858: PUSH
77859: LD_VAR 0 1
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: LD_INT 21
77870: PUSH
77871: LD_INT 3
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PPUSH
77882: CALL_OW 69
77886: ST_TO_ADDR
// if not tmp then
77887: LD_VAR 0 4
77891: NOT
77892: IFFALSE 77896
// exit ;
77894: GO 78038
// enable_addtolog := true ;
77896: LD_ADDR_OWVAR 81
77900: PUSH
77901: LD_INT 1
77903: ST_TO_ADDR
// AddToLog ( [ ) ;
77904: LD_STRING [
77906: PPUSH
77907: CALL_OW 561
// for i in tmp do
77911: LD_ADDR_VAR 0 3
77915: PUSH
77916: LD_VAR 0 4
77920: PUSH
77921: FOR_IN
77922: IFFALSE 78029
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77924: LD_STRING [
77926: PUSH
77927: LD_VAR 0 3
77931: PPUSH
77932: CALL_OW 266
77936: STR
77937: PUSH
77938: LD_STRING , 
77940: STR
77941: PUSH
77942: LD_VAR 0 3
77946: PPUSH
77947: CALL_OW 250
77951: STR
77952: PUSH
77953: LD_STRING , 
77955: STR
77956: PUSH
77957: LD_VAR 0 3
77961: PPUSH
77962: CALL_OW 251
77966: STR
77967: PUSH
77968: LD_STRING , 
77970: STR
77971: PUSH
77972: LD_VAR 0 3
77976: PPUSH
77977: CALL_OW 254
77981: STR
77982: PUSH
77983: LD_STRING , 
77985: STR
77986: PUSH
77987: LD_VAR 0 3
77991: PPUSH
77992: LD_INT 1
77994: PPUSH
77995: CALL_OW 268
77999: STR
78000: PUSH
78001: LD_STRING , 
78003: STR
78004: PUSH
78005: LD_VAR 0 3
78009: PPUSH
78010: LD_INT 2
78012: PPUSH
78013: CALL_OW 268
78017: STR
78018: PUSH
78019: LD_STRING ],
78021: STR
78022: PPUSH
78023: CALL_OW 561
// end ;
78027: GO 77921
78029: POP
78030: POP
// AddToLog ( ]; ) ;
78031: LD_STRING ];
78033: PPUSH
78034: CALL_OW 561
// end ;
78038: LD_VAR 0 2
78042: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78043: LD_INT 0
78045: PPUSH
78046: PPUSH
78047: PPUSH
78048: PPUSH
78049: PPUSH
// if not area or not rate or not max then
78050: LD_VAR 0 1
78054: NOT
78055: PUSH
78056: LD_VAR 0 2
78060: NOT
78061: OR
78062: PUSH
78063: LD_VAR 0 4
78067: NOT
78068: OR
78069: IFFALSE 78073
// exit ;
78071: GO 78262
// while 1 do
78073: LD_INT 1
78075: IFFALSE 78262
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78077: LD_ADDR_VAR 0 9
78081: PUSH
78082: LD_VAR 0 1
78086: PPUSH
78087: LD_INT 1
78089: PPUSH
78090: CALL_OW 287
78094: PUSH
78095: LD_INT 10
78097: MUL
78098: ST_TO_ADDR
// r := rate / 10 ;
78099: LD_ADDR_VAR 0 7
78103: PUSH
78104: LD_VAR 0 2
78108: PUSH
78109: LD_INT 10
78111: DIVREAL
78112: ST_TO_ADDR
// time := 1 1$00 ;
78113: LD_ADDR_VAR 0 8
78117: PUSH
78118: LD_INT 2100
78120: ST_TO_ADDR
// if amount < min then
78121: LD_VAR 0 9
78125: PUSH
78126: LD_VAR 0 3
78130: LESS
78131: IFFALSE 78149
// r := r * 2 else
78133: LD_ADDR_VAR 0 7
78137: PUSH
78138: LD_VAR 0 7
78142: PUSH
78143: LD_INT 2
78145: MUL
78146: ST_TO_ADDR
78147: GO 78175
// if amount > max then
78149: LD_VAR 0 9
78153: PUSH
78154: LD_VAR 0 4
78158: GREATER
78159: IFFALSE 78175
// r := r / 2 ;
78161: LD_ADDR_VAR 0 7
78165: PUSH
78166: LD_VAR 0 7
78170: PUSH
78171: LD_INT 2
78173: DIVREAL
78174: ST_TO_ADDR
// time := time / r ;
78175: LD_ADDR_VAR 0 8
78179: PUSH
78180: LD_VAR 0 8
78184: PUSH
78185: LD_VAR 0 7
78189: DIVREAL
78190: ST_TO_ADDR
// if time < 0 then
78191: LD_VAR 0 8
78195: PUSH
78196: LD_INT 0
78198: LESS
78199: IFFALSE 78216
// time := time * - 1 ;
78201: LD_ADDR_VAR 0 8
78205: PUSH
78206: LD_VAR 0 8
78210: PUSH
78211: LD_INT 1
78213: NEG
78214: MUL
78215: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78216: LD_VAR 0 8
78220: PUSH
78221: LD_INT 35
78223: PPUSH
78224: LD_INT 875
78226: PPUSH
78227: CALL_OW 12
78231: PLUS
78232: PPUSH
78233: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78237: LD_INT 1
78239: PPUSH
78240: LD_INT 5
78242: PPUSH
78243: CALL_OW 12
78247: PPUSH
78248: LD_VAR 0 1
78252: PPUSH
78253: LD_INT 1
78255: PPUSH
78256: CALL_OW 55
// end ;
78260: GO 78073
// end ;
78262: LD_VAR 0 5
78266: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78267: LD_INT 0
78269: PPUSH
78270: PPUSH
78271: PPUSH
78272: PPUSH
78273: PPUSH
78274: PPUSH
78275: PPUSH
78276: PPUSH
// if not turrets or not factories then
78277: LD_VAR 0 1
78281: NOT
78282: PUSH
78283: LD_VAR 0 2
78287: NOT
78288: OR
78289: IFFALSE 78293
// exit ;
78291: GO 78600
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78293: LD_ADDR_VAR 0 10
78297: PUSH
78298: LD_INT 5
78300: PUSH
78301: LD_INT 6
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 2
78310: PUSH
78311: LD_INT 4
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: PUSH
78318: LD_INT 3
78320: PUSH
78321: LD_INT 5
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: LIST
78332: PUSH
78333: LD_INT 24
78335: PUSH
78336: LD_INT 25
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: LD_INT 23
78345: PUSH
78346: LD_INT 27
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 42
78359: PUSH
78360: LD_INT 43
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 44
78369: PUSH
78370: LD_INT 46
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: LD_INT 45
78379: PUSH
78380: LD_INT 47
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: LIST
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: LIST
78396: ST_TO_ADDR
// result := [ ] ;
78397: LD_ADDR_VAR 0 3
78401: PUSH
78402: EMPTY
78403: ST_TO_ADDR
// for i in turrets do
78404: LD_ADDR_VAR 0 4
78408: PUSH
78409: LD_VAR 0 1
78413: PUSH
78414: FOR_IN
78415: IFFALSE 78598
// begin nat := GetNation ( i ) ;
78417: LD_ADDR_VAR 0 7
78421: PUSH
78422: LD_VAR 0 4
78426: PPUSH
78427: CALL_OW 248
78431: ST_TO_ADDR
// weapon := 0 ;
78432: LD_ADDR_VAR 0 8
78436: PUSH
78437: LD_INT 0
78439: ST_TO_ADDR
// if not nat then
78440: LD_VAR 0 7
78444: NOT
78445: IFFALSE 78449
// continue ;
78447: GO 78414
// for j in list [ nat ] do
78449: LD_ADDR_VAR 0 5
78453: PUSH
78454: LD_VAR 0 10
78458: PUSH
78459: LD_VAR 0 7
78463: ARRAY
78464: PUSH
78465: FOR_IN
78466: IFFALSE 78507
// if GetBWeapon ( i ) = j [ 1 ] then
78468: LD_VAR 0 4
78472: PPUSH
78473: CALL_OW 269
78477: PUSH
78478: LD_VAR 0 5
78482: PUSH
78483: LD_INT 1
78485: ARRAY
78486: EQUAL
78487: IFFALSE 78505
// begin weapon := j [ 2 ] ;
78489: LD_ADDR_VAR 0 8
78493: PUSH
78494: LD_VAR 0 5
78498: PUSH
78499: LD_INT 2
78501: ARRAY
78502: ST_TO_ADDR
// break ;
78503: GO 78507
// end ;
78505: GO 78465
78507: POP
78508: POP
// if not weapon then
78509: LD_VAR 0 8
78513: NOT
78514: IFFALSE 78518
// continue ;
78516: GO 78414
// for k in factories do
78518: LD_ADDR_VAR 0 6
78522: PUSH
78523: LD_VAR 0 2
78527: PUSH
78528: FOR_IN
78529: IFFALSE 78594
// begin weapons := AvailableWeaponList ( k ) ;
78531: LD_ADDR_VAR 0 9
78535: PUSH
78536: LD_VAR 0 6
78540: PPUSH
78541: CALL_OW 478
78545: ST_TO_ADDR
// if not weapons then
78546: LD_VAR 0 9
78550: NOT
78551: IFFALSE 78555
// continue ;
78553: GO 78528
// if weapon in weapons then
78555: LD_VAR 0 8
78559: PUSH
78560: LD_VAR 0 9
78564: IN
78565: IFFALSE 78592
// begin result := [ i , weapon ] ;
78567: LD_ADDR_VAR 0 3
78571: PUSH
78572: LD_VAR 0 4
78576: PUSH
78577: LD_VAR 0 8
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: ST_TO_ADDR
// exit ;
78586: POP
78587: POP
78588: POP
78589: POP
78590: GO 78600
// end ; end ;
78592: GO 78528
78594: POP
78595: POP
// end ;
78596: GO 78414
78598: POP
78599: POP
// end ;
78600: LD_VAR 0 3
78604: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78605: LD_INT 0
78607: PPUSH
// if not side or side > 8 then
78608: LD_VAR 0 3
78612: NOT
78613: PUSH
78614: LD_VAR 0 3
78618: PUSH
78619: LD_INT 8
78621: GREATER
78622: OR
78623: IFFALSE 78627
// exit ;
78625: GO 78686
// if not range then
78627: LD_VAR 0 4
78631: NOT
78632: IFFALSE 78643
// range := - 12 ;
78634: LD_ADDR_VAR 0 4
78638: PUSH
78639: LD_INT 12
78641: NEG
78642: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78643: LD_VAR 0 1
78647: PPUSH
78648: LD_VAR 0 2
78652: PPUSH
78653: LD_VAR 0 3
78657: PPUSH
78658: LD_VAR 0 4
78662: PPUSH
78663: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78667: LD_VAR 0 1
78671: PPUSH
78672: LD_VAR 0 2
78676: PPUSH
78677: LD_VAR 0 3
78681: PPUSH
78682: CALL_OW 331
// end ;
78686: LD_VAR 0 5
78690: RET
// export function Video ( mode ) ; begin
78691: LD_INT 0
78693: PPUSH
// ingame_video = mode ;
78694: LD_ADDR_OWVAR 52
78698: PUSH
78699: LD_VAR 0 1
78703: ST_TO_ADDR
// interface_hidden = mode ;
78704: LD_ADDR_OWVAR 54
78708: PUSH
78709: LD_VAR 0 1
78713: ST_TO_ADDR
// end ;
78714: LD_VAR 0 2
78718: RET
// export function Join ( array , element ) ; begin
78719: LD_INT 0
78721: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78722: LD_ADDR_VAR 0 3
78726: PUSH
78727: LD_VAR 0 1
78731: PPUSH
78732: LD_VAR 0 1
78736: PUSH
78737: LD_INT 1
78739: PLUS
78740: PPUSH
78741: LD_VAR 0 2
78745: PPUSH
78746: CALL_OW 1
78750: ST_TO_ADDR
// end ;
78751: LD_VAR 0 3
78755: RET
// export function JoinUnion ( array , element ) ; begin
78756: LD_INT 0
78758: PPUSH
// result := array union element ;
78759: LD_ADDR_VAR 0 3
78763: PUSH
78764: LD_VAR 0 1
78768: PUSH
78769: LD_VAR 0 2
78773: UNION
78774: ST_TO_ADDR
// end ;
78775: LD_VAR 0 3
78779: RET
// export function GetBehemoths ( side ) ; begin
78780: LD_INT 0
78782: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78783: LD_ADDR_VAR 0 2
78787: PUSH
78788: LD_INT 22
78790: PUSH
78791: LD_VAR 0 1
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: PUSH
78800: LD_INT 31
78802: PUSH
78803: LD_INT 25
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PPUSH
78814: CALL_OW 69
78818: ST_TO_ADDR
// end ;
78819: LD_VAR 0 2
78823: RET
// export function Shuffle ( array ) ; var i , index ; begin
78824: LD_INT 0
78826: PPUSH
78827: PPUSH
78828: PPUSH
// result := [ ] ;
78829: LD_ADDR_VAR 0 2
78833: PUSH
78834: EMPTY
78835: ST_TO_ADDR
// if not array then
78836: LD_VAR 0 1
78840: NOT
78841: IFFALSE 78845
// exit ;
78843: GO 78944
// Randomize ;
78845: CALL_OW 10
// for i = array downto 1 do
78849: LD_ADDR_VAR 0 3
78853: PUSH
78854: DOUBLE
78855: LD_VAR 0 1
78859: INC
78860: ST_TO_ADDR
78861: LD_INT 1
78863: PUSH
78864: FOR_DOWNTO
78865: IFFALSE 78942
// begin index := rand ( 1 , array ) ;
78867: LD_ADDR_VAR 0 4
78871: PUSH
78872: LD_INT 1
78874: PPUSH
78875: LD_VAR 0 1
78879: PPUSH
78880: CALL_OW 12
78884: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78885: LD_ADDR_VAR 0 2
78889: PUSH
78890: LD_VAR 0 2
78894: PPUSH
78895: LD_VAR 0 2
78899: PUSH
78900: LD_INT 1
78902: PLUS
78903: PPUSH
78904: LD_VAR 0 1
78908: PUSH
78909: LD_VAR 0 4
78913: ARRAY
78914: PPUSH
78915: CALL_OW 2
78919: ST_TO_ADDR
// array := Delete ( array , index ) ;
78920: LD_ADDR_VAR 0 1
78924: PUSH
78925: LD_VAR 0 1
78929: PPUSH
78930: LD_VAR 0 4
78934: PPUSH
78935: CALL_OW 3
78939: ST_TO_ADDR
// end ;
78940: GO 78864
78942: POP
78943: POP
// end ;
78944: LD_VAR 0 2
78948: RET
// export function GetBaseMaterials ( base ) ; begin
78949: LD_INT 0
78951: PPUSH
// result := [ 0 , 0 , 0 ] ;
78952: LD_ADDR_VAR 0 2
78956: PUSH
78957: LD_INT 0
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: LIST
78970: ST_TO_ADDR
// if not base then
78971: LD_VAR 0 1
78975: NOT
78976: IFFALSE 78980
// exit ;
78978: GO 79029
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78980: LD_ADDR_VAR 0 2
78984: PUSH
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_INT 1
78992: PPUSH
78993: CALL_OW 275
78997: PUSH
78998: LD_VAR 0 1
79002: PPUSH
79003: LD_INT 2
79005: PPUSH
79006: CALL_OW 275
79010: PUSH
79011: LD_VAR 0 1
79015: PPUSH
79016: LD_INT 3
79018: PPUSH
79019: CALL_OW 275
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: LIST
79028: ST_TO_ADDR
// end ;
79029: LD_VAR 0 2
79033: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79034: LD_INT 0
79036: PPUSH
79037: PPUSH
// result := array ;
79038: LD_ADDR_VAR 0 3
79042: PUSH
79043: LD_VAR 0 1
79047: ST_TO_ADDR
// if size >= result then
79048: LD_VAR 0 2
79052: PUSH
79053: LD_VAR 0 3
79057: GREATEREQUAL
79058: IFFALSE 79062
// exit ;
79060: GO 79112
// if size then
79062: LD_VAR 0 2
79066: IFFALSE 79112
// for i := array downto size do
79068: LD_ADDR_VAR 0 4
79072: PUSH
79073: DOUBLE
79074: LD_VAR 0 1
79078: INC
79079: ST_TO_ADDR
79080: LD_VAR 0 2
79084: PUSH
79085: FOR_DOWNTO
79086: IFFALSE 79110
// result := Delete ( result , result ) ;
79088: LD_ADDR_VAR 0 3
79092: PUSH
79093: LD_VAR 0 3
79097: PPUSH
79098: LD_VAR 0 3
79102: PPUSH
79103: CALL_OW 3
79107: ST_TO_ADDR
79108: GO 79085
79110: POP
79111: POP
// end ;
79112: LD_VAR 0 3
79116: RET
// export function ComExit ( unit ) ; var tmp ; begin
79117: LD_INT 0
79119: PPUSH
79120: PPUSH
// if not IsInUnit ( unit ) then
79121: LD_VAR 0 1
79125: PPUSH
79126: CALL_OW 310
79130: NOT
79131: IFFALSE 79135
// exit ;
79133: GO 79195
// tmp := IsInUnit ( unit ) ;
79135: LD_ADDR_VAR 0 3
79139: PUSH
79140: LD_VAR 0 1
79144: PPUSH
79145: CALL_OW 310
79149: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79150: LD_VAR 0 3
79154: PPUSH
79155: CALL_OW 247
79159: PUSH
79160: LD_INT 2
79162: EQUAL
79163: IFFALSE 79176
// ComExitVehicle ( unit ) else
79165: LD_VAR 0 1
79169: PPUSH
79170: CALL_OW 121
79174: GO 79185
// ComExitBuilding ( unit ) ;
79176: LD_VAR 0 1
79180: PPUSH
79181: CALL_OW 122
// result := tmp ;
79185: LD_ADDR_VAR 0 2
79189: PUSH
79190: LD_VAR 0 3
79194: ST_TO_ADDR
// end ;
79195: LD_VAR 0 2
79199: RET
// export function ComExitAll ( units ) ; var i ; begin
79200: LD_INT 0
79202: PPUSH
79203: PPUSH
// if not units then
79204: LD_VAR 0 1
79208: NOT
79209: IFFALSE 79213
// exit ;
79211: GO 79239
// for i in units do
79213: LD_ADDR_VAR 0 3
79217: PUSH
79218: LD_VAR 0 1
79222: PUSH
79223: FOR_IN
79224: IFFALSE 79237
// ComExit ( i ) ;
79226: LD_VAR 0 3
79230: PPUSH
79231: CALL 79117 0 1
79235: GO 79223
79237: POP
79238: POP
// end ;
79239: LD_VAR 0 2
79243: RET
// export function ResetHc ; begin
79244: LD_INT 0
79246: PPUSH
// InitHc ;
79247: CALL_OW 19
// hc_importance := 0 ;
79251: LD_ADDR_OWVAR 32
79255: PUSH
79256: LD_INT 0
79258: ST_TO_ADDR
// end ;
79259: LD_VAR 0 1
79263: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79264: LD_INT 0
79266: PPUSH
79267: PPUSH
79268: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79269: LD_ADDR_VAR 0 6
79273: PUSH
79274: LD_VAR 0 1
79278: PUSH
79279: LD_VAR 0 3
79283: PLUS
79284: PUSH
79285: LD_INT 2
79287: DIV
79288: ST_TO_ADDR
// if _x < 0 then
79289: LD_VAR 0 6
79293: PUSH
79294: LD_INT 0
79296: LESS
79297: IFFALSE 79314
// _x := _x * - 1 ;
79299: LD_ADDR_VAR 0 6
79303: PUSH
79304: LD_VAR 0 6
79308: PUSH
79309: LD_INT 1
79311: NEG
79312: MUL
79313: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79314: LD_ADDR_VAR 0 7
79318: PUSH
79319: LD_VAR 0 2
79323: PUSH
79324: LD_VAR 0 4
79328: PLUS
79329: PUSH
79330: LD_INT 2
79332: DIV
79333: ST_TO_ADDR
// if _y < 0 then
79334: LD_VAR 0 7
79338: PUSH
79339: LD_INT 0
79341: LESS
79342: IFFALSE 79359
// _y := _y * - 1 ;
79344: LD_ADDR_VAR 0 7
79348: PUSH
79349: LD_VAR 0 7
79353: PUSH
79354: LD_INT 1
79356: NEG
79357: MUL
79358: ST_TO_ADDR
// result := [ _x , _y ] ;
79359: LD_ADDR_VAR 0 5
79363: PUSH
79364: LD_VAR 0 6
79368: PUSH
79369: LD_VAR 0 7
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: ST_TO_ADDR
// end ;
79378: LD_VAR 0 5
79382: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79383: LD_INT 0
79385: PPUSH
79386: PPUSH
79387: PPUSH
79388: PPUSH
// task := GetTaskList ( unit ) ;
79389: LD_ADDR_VAR 0 7
79393: PUSH
79394: LD_VAR 0 1
79398: PPUSH
79399: CALL_OW 437
79403: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79404: LD_VAR 0 7
79408: NOT
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: LD_VAR 0 2
79419: PPUSH
79420: CALL_OW 308
79424: NOT
79425: AND
79426: IFFALSE 79430
// exit ;
79428: GO 79548
// if IsInArea ( unit , area ) then
79430: LD_VAR 0 1
79434: PPUSH
79435: LD_VAR 0 2
79439: PPUSH
79440: CALL_OW 308
79444: IFFALSE 79462
// begin ComMoveToArea ( unit , goAway ) ;
79446: LD_VAR 0 1
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: CALL_OW 113
// exit ;
79460: GO 79548
// end ; if task [ 1 ] [ 1 ] <> M then
79462: LD_VAR 0 7
79466: PUSH
79467: LD_INT 1
79469: ARRAY
79470: PUSH
79471: LD_INT 1
79473: ARRAY
79474: PUSH
79475: LD_STRING M
79477: NONEQUAL
79478: IFFALSE 79482
// exit ;
79480: GO 79548
// x := task [ 1 ] [ 2 ] ;
79482: LD_ADDR_VAR 0 5
79486: PUSH
79487: LD_VAR 0 7
79491: PUSH
79492: LD_INT 1
79494: ARRAY
79495: PUSH
79496: LD_INT 2
79498: ARRAY
79499: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79500: LD_ADDR_VAR 0 6
79504: PUSH
79505: LD_VAR 0 7
79509: PUSH
79510: LD_INT 1
79512: ARRAY
79513: PUSH
79514: LD_INT 3
79516: ARRAY
79517: ST_TO_ADDR
// if InArea ( x , y , area ) then
79518: LD_VAR 0 5
79522: PPUSH
79523: LD_VAR 0 6
79527: PPUSH
79528: LD_VAR 0 2
79532: PPUSH
79533: CALL_OW 309
79537: IFFALSE 79548
// ComStop ( unit ) ;
79539: LD_VAR 0 1
79543: PPUSH
79544: CALL_OW 141
// end ;
79548: LD_VAR 0 4
79552: RET
// export function Abs ( value ) ; begin
79553: LD_INT 0
79555: PPUSH
// result := value ;
79556: LD_ADDR_VAR 0 2
79560: PUSH
79561: LD_VAR 0 1
79565: ST_TO_ADDR
// if value < 0 then
79566: LD_VAR 0 1
79570: PUSH
79571: LD_INT 0
79573: LESS
79574: IFFALSE 79591
// result := value * - 1 ;
79576: LD_ADDR_VAR 0 2
79580: PUSH
79581: LD_VAR 0 1
79585: PUSH
79586: LD_INT 1
79588: NEG
79589: MUL
79590: ST_TO_ADDR
// end ;
79591: LD_VAR 0 2
79595: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79596: LD_INT 0
79598: PPUSH
79599: PPUSH
79600: PPUSH
79601: PPUSH
79602: PPUSH
79603: PPUSH
79604: PPUSH
79605: PPUSH
// if not unit or not building then
79606: LD_VAR 0 1
79610: NOT
79611: PUSH
79612: LD_VAR 0 2
79616: NOT
79617: OR
79618: IFFALSE 79622
// exit ;
79620: GO 79848
// x := GetX ( building ) ;
79622: LD_ADDR_VAR 0 4
79626: PUSH
79627: LD_VAR 0 2
79631: PPUSH
79632: CALL_OW 250
79636: ST_TO_ADDR
// y := GetY ( building ) ;
79637: LD_ADDR_VAR 0 6
79641: PUSH
79642: LD_VAR 0 2
79646: PPUSH
79647: CALL_OW 251
79651: ST_TO_ADDR
// d := GetDir ( building ) ;
79652: LD_ADDR_VAR 0 8
79656: PUSH
79657: LD_VAR 0 2
79661: PPUSH
79662: CALL_OW 254
79666: ST_TO_ADDR
// r := 4 ;
79667: LD_ADDR_VAR 0 9
79671: PUSH
79672: LD_INT 4
79674: ST_TO_ADDR
// for i := 1 to 5 do
79675: LD_ADDR_VAR 0 10
79679: PUSH
79680: DOUBLE
79681: LD_INT 1
79683: DEC
79684: ST_TO_ADDR
79685: LD_INT 5
79687: PUSH
79688: FOR_TO
79689: IFFALSE 79846
// begin _x := ShiftX ( x , d , r + i ) ;
79691: LD_ADDR_VAR 0 5
79695: PUSH
79696: LD_VAR 0 4
79700: PPUSH
79701: LD_VAR 0 8
79705: PPUSH
79706: LD_VAR 0 9
79710: PUSH
79711: LD_VAR 0 10
79715: PLUS
79716: PPUSH
79717: CALL_OW 272
79721: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79722: LD_ADDR_VAR 0 7
79726: PUSH
79727: LD_VAR 0 6
79731: PPUSH
79732: LD_VAR 0 8
79736: PPUSH
79737: LD_VAR 0 9
79741: PUSH
79742: LD_VAR 0 10
79746: PLUS
79747: PPUSH
79748: CALL_OW 273
79752: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79753: LD_VAR 0 5
79757: PPUSH
79758: LD_VAR 0 7
79762: PPUSH
79763: CALL_OW 488
79767: PUSH
79768: LD_VAR 0 5
79772: PPUSH
79773: LD_VAR 0 7
79777: PPUSH
79778: CALL_OW 428
79782: PPUSH
79783: CALL_OW 247
79787: PUSH
79788: LD_INT 3
79790: PUSH
79791: LD_INT 2
79793: PUSH
79794: EMPTY
79795: LIST
79796: LIST
79797: IN
79798: NOT
79799: AND
79800: IFFALSE 79844
// begin ComMoveXY ( unit , _x , _y ) ;
79802: LD_VAR 0 1
79806: PPUSH
79807: LD_VAR 0 5
79811: PPUSH
79812: LD_VAR 0 7
79816: PPUSH
79817: CALL_OW 111
// result := [ _x , _y ] ;
79821: LD_ADDR_VAR 0 3
79825: PUSH
79826: LD_VAR 0 5
79830: PUSH
79831: LD_VAR 0 7
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: ST_TO_ADDR
// exit ;
79840: POP
79841: POP
79842: GO 79848
// end ; end ;
79844: GO 79688
79846: POP
79847: POP
// end ;
79848: LD_VAR 0 3
79852: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79853: LD_INT 0
79855: PPUSH
79856: PPUSH
79857: PPUSH
// result := 0 ;
79858: LD_ADDR_VAR 0 3
79862: PUSH
79863: LD_INT 0
79865: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79866: LD_VAR 0 1
79870: PUSH
79871: LD_INT 0
79873: LESS
79874: PUSH
79875: LD_VAR 0 1
79879: PUSH
79880: LD_INT 8
79882: GREATER
79883: OR
79884: PUSH
79885: LD_VAR 0 2
79889: PUSH
79890: LD_INT 0
79892: LESS
79893: OR
79894: PUSH
79895: LD_VAR 0 2
79899: PUSH
79900: LD_INT 8
79902: GREATER
79903: OR
79904: IFFALSE 79908
// exit ;
79906: GO 79983
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79908: LD_ADDR_VAR 0 4
79912: PUSH
79913: LD_INT 22
79915: PUSH
79916: LD_VAR 0 2
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PPUSH
79925: CALL_OW 69
79929: PUSH
79930: FOR_IN
79931: IFFALSE 79981
// begin un := UnitShoot ( i ) ;
79933: LD_ADDR_VAR 0 5
79937: PUSH
79938: LD_VAR 0 4
79942: PPUSH
79943: CALL_OW 504
79947: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79948: LD_VAR 0 5
79952: PPUSH
79953: CALL_OW 255
79957: PUSH
79958: LD_VAR 0 1
79962: EQUAL
79963: IFFALSE 79979
// begin result := un ;
79965: LD_ADDR_VAR 0 3
79969: PUSH
79970: LD_VAR 0 5
79974: ST_TO_ADDR
// exit ;
79975: POP
79976: POP
79977: GO 79983
// end ; end ;
79979: GO 79930
79981: POP
79982: POP
// end ;
79983: LD_VAR 0 3
79987: RET
// export function GetCargoBay ( units ) ; begin
79988: LD_INT 0
79990: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79991: LD_ADDR_VAR 0 2
79995: PUSH
79996: LD_VAR 0 1
80000: PPUSH
80001: LD_INT 2
80003: PUSH
80004: LD_INT 34
80006: PUSH
80007: LD_INT 12
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: LD_INT 34
80016: PUSH
80017: LD_INT 51
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PUSH
80024: LD_INT 34
80026: PUSH
80027: LD_INT 32
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: PUSH
80034: LD_INT 34
80036: PUSH
80037: LD_INT 89
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: PPUSH
80051: CALL_OW 72
80055: ST_TO_ADDR
// end ;
80056: LD_VAR 0 2
80060: RET
// export function Negate ( value ) ; begin
80061: LD_INT 0
80063: PPUSH
// result := not value ;
80064: LD_ADDR_VAR 0 2
80068: PUSH
80069: LD_VAR 0 1
80073: NOT
80074: ST_TO_ADDR
// end ;
80075: LD_VAR 0 2
80079: RET
// export function Inc ( value ) ; begin
80080: LD_INT 0
80082: PPUSH
// result := value + 1 ;
80083: LD_ADDR_VAR 0 2
80087: PUSH
80088: LD_VAR 0 1
80092: PUSH
80093: LD_INT 1
80095: PLUS
80096: ST_TO_ADDR
// end ;
80097: LD_VAR 0 2
80101: RET
// export function Dec ( value ) ; begin
80102: LD_INT 0
80104: PPUSH
// result := value - 1 ;
80105: LD_ADDR_VAR 0 2
80109: PUSH
80110: LD_VAR 0 1
80114: PUSH
80115: LD_INT 1
80117: MINUS
80118: ST_TO_ADDR
// end ;
80119: LD_VAR 0 2
80123: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80124: LD_INT 0
80126: PPUSH
80127: PPUSH
80128: PPUSH
80129: PPUSH
80130: PPUSH
80131: PPUSH
80132: PPUSH
80133: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80134: LD_VAR 0 1
80138: PPUSH
80139: LD_VAR 0 2
80143: PPUSH
80144: CALL_OW 488
80148: NOT
80149: PUSH
80150: LD_VAR 0 3
80154: PPUSH
80155: LD_VAR 0 4
80159: PPUSH
80160: CALL_OW 488
80164: NOT
80165: OR
80166: IFFALSE 80179
// begin result := - 1 ;
80168: LD_ADDR_VAR 0 5
80172: PUSH
80173: LD_INT 1
80175: NEG
80176: ST_TO_ADDR
// exit ;
80177: GO 80414
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80179: LD_ADDR_VAR 0 12
80183: PUSH
80184: LD_VAR 0 1
80188: PPUSH
80189: LD_VAR 0 2
80193: PPUSH
80194: LD_VAR 0 3
80198: PPUSH
80199: LD_VAR 0 4
80203: PPUSH
80204: CALL 79264 0 4
80208: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80209: LD_ADDR_VAR 0 11
80213: PUSH
80214: LD_VAR 0 1
80218: PPUSH
80219: LD_VAR 0 2
80223: PPUSH
80224: LD_VAR 0 12
80228: PUSH
80229: LD_INT 1
80231: ARRAY
80232: PPUSH
80233: LD_VAR 0 12
80237: PUSH
80238: LD_INT 2
80240: ARRAY
80241: PPUSH
80242: CALL_OW 298
80246: ST_TO_ADDR
// distance := 9999 ;
80247: LD_ADDR_VAR 0 10
80251: PUSH
80252: LD_INT 9999
80254: ST_TO_ADDR
// for i := 0 to 5 do
80255: LD_ADDR_VAR 0 6
80259: PUSH
80260: DOUBLE
80261: LD_INT 0
80263: DEC
80264: ST_TO_ADDR
80265: LD_INT 5
80267: PUSH
80268: FOR_TO
80269: IFFALSE 80412
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80271: LD_ADDR_VAR 0 7
80275: PUSH
80276: LD_VAR 0 1
80280: PPUSH
80281: LD_VAR 0 6
80285: PPUSH
80286: LD_VAR 0 11
80290: PPUSH
80291: CALL_OW 272
80295: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80296: LD_ADDR_VAR 0 8
80300: PUSH
80301: LD_VAR 0 2
80305: PPUSH
80306: LD_VAR 0 6
80310: PPUSH
80311: LD_VAR 0 11
80315: PPUSH
80316: CALL_OW 273
80320: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80321: LD_VAR 0 7
80325: PPUSH
80326: LD_VAR 0 8
80330: PPUSH
80331: CALL_OW 488
80335: NOT
80336: IFFALSE 80340
// continue ;
80338: GO 80268
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80340: LD_ADDR_VAR 0 9
80344: PUSH
80345: LD_VAR 0 12
80349: PUSH
80350: LD_INT 1
80352: ARRAY
80353: PPUSH
80354: LD_VAR 0 12
80358: PUSH
80359: LD_INT 2
80361: ARRAY
80362: PPUSH
80363: LD_VAR 0 7
80367: PPUSH
80368: LD_VAR 0 8
80372: PPUSH
80373: CALL_OW 298
80377: ST_TO_ADDR
// if tmp < distance then
80378: LD_VAR 0 9
80382: PUSH
80383: LD_VAR 0 10
80387: LESS
80388: IFFALSE 80410
// begin result := i ;
80390: LD_ADDR_VAR 0 5
80394: PUSH
80395: LD_VAR 0 6
80399: ST_TO_ADDR
// distance := tmp ;
80400: LD_ADDR_VAR 0 10
80404: PUSH
80405: LD_VAR 0 9
80409: ST_TO_ADDR
// end ; end ;
80410: GO 80268
80412: POP
80413: POP
// end ;
80414: LD_VAR 0 5
80418: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80419: LD_INT 0
80421: PPUSH
80422: PPUSH
// if not driver or not IsInUnit ( driver ) then
80423: LD_VAR 0 1
80427: NOT
80428: PUSH
80429: LD_VAR 0 1
80433: PPUSH
80434: CALL_OW 310
80438: NOT
80439: OR
80440: IFFALSE 80444
// exit ;
80442: GO 80534
// vehicle := IsInUnit ( driver ) ;
80444: LD_ADDR_VAR 0 3
80448: PUSH
80449: LD_VAR 0 1
80453: PPUSH
80454: CALL_OW 310
80458: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80459: LD_VAR 0 1
80463: PPUSH
80464: LD_STRING \
80466: PUSH
80467: LD_INT 0
80469: PUSH
80470: LD_INT 0
80472: PUSH
80473: LD_INT 0
80475: PUSH
80476: LD_INT 0
80478: PUSH
80479: LD_INT 0
80481: PUSH
80482: LD_INT 0
80484: PUSH
80485: EMPTY
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: LIST
80493: PUSH
80494: LD_STRING E
80496: PUSH
80497: LD_INT 0
80499: PUSH
80500: LD_INT 0
80502: PUSH
80503: LD_VAR 0 3
80507: PUSH
80508: LD_INT 0
80510: PUSH
80511: LD_INT 0
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: EMPTY
80518: LIST
80519: LIST
80520: LIST
80521: LIST
80522: LIST
80523: LIST
80524: LIST
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: PPUSH
80530: CALL_OW 446
// end ;
80534: LD_VAR 0 2
80538: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80539: LD_INT 0
80541: PPUSH
80542: PPUSH
// if not driver or not IsInUnit ( driver ) then
80543: LD_VAR 0 1
80547: NOT
80548: PUSH
80549: LD_VAR 0 1
80553: PPUSH
80554: CALL_OW 310
80558: NOT
80559: OR
80560: IFFALSE 80564
// exit ;
80562: GO 80654
// vehicle := IsInUnit ( driver ) ;
80564: LD_ADDR_VAR 0 3
80568: PUSH
80569: LD_VAR 0 1
80573: PPUSH
80574: CALL_OW 310
80578: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80579: LD_VAR 0 1
80583: PPUSH
80584: LD_STRING \
80586: PUSH
80587: LD_INT 0
80589: PUSH
80590: LD_INT 0
80592: PUSH
80593: LD_INT 0
80595: PUSH
80596: LD_INT 0
80598: PUSH
80599: LD_INT 0
80601: PUSH
80602: LD_INT 0
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: LIST
80609: LIST
80610: LIST
80611: LIST
80612: LIST
80613: PUSH
80614: LD_STRING E
80616: PUSH
80617: LD_INT 0
80619: PUSH
80620: LD_INT 0
80622: PUSH
80623: LD_VAR 0 3
80627: PUSH
80628: LD_INT 0
80630: PUSH
80631: LD_INT 0
80633: PUSH
80634: LD_INT 0
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: LIST
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PPUSH
80650: CALL_OW 447
// end ;
80654: LD_VAR 0 2
80658: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80659: LD_INT 0
80661: PPUSH
80662: PPUSH
80663: PPUSH
// tmp := [ ] ;
80664: LD_ADDR_VAR 0 5
80668: PUSH
80669: EMPTY
80670: ST_TO_ADDR
// for i in units do
80671: LD_ADDR_VAR 0 4
80675: PUSH
80676: LD_VAR 0 1
80680: PUSH
80681: FOR_IN
80682: IFFALSE 80720
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80684: LD_ADDR_VAR 0 5
80688: PUSH
80689: LD_VAR 0 5
80693: PPUSH
80694: LD_VAR 0 5
80698: PUSH
80699: LD_INT 1
80701: PLUS
80702: PPUSH
80703: LD_VAR 0 4
80707: PPUSH
80708: CALL_OW 256
80712: PPUSH
80713: CALL_OW 2
80717: ST_TO_ADDR
80718: GO 80681
80720: POP
80721: POP
// if not tmp then
80722: LD_VAR 0 5
80726: NOT
80727: IFFALSE 80731
// exit ;
80729: GO 80779
// if asc then
80731: LD_VAR 0 2
80735: IFFALSE 80759
// result := SortListByListAsc ( units , tmp ) else
80737: LD_ADDR_VAR 0 3
80741: PUSH
80742: LD_VAR 0 1
80746: PPUSH
80747: LD_VAR 0 5
80751: PPUSH
80752: CALL_OW 76
80756: ST_TO_ADDR
80757: GO 80779
// result := SortListByListDesc ( units , tmp ) ;
80759: LD_ADDR_VAR 0 3
80763: PUSH
80764: LD_VAR 0 1
80768: PPUSH
80769: LD_VAR 0 5
80773: PPUSH
80774: CALL_OW 77
80778: ST_TO_ADDR
// end ;
80779: LD_VAR 0 3
80783: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80784: LD_INT 0
80786: PPUSH
80787: PPUSH
// task := GetTaskList ( mech ) ;
80788: LD_ADDR_VAR 0 4
80792: PUSH
80793: LD_VAR 0 1
80797: PPUSH
80798: CALL_OW 437
80802: ST_TO_ADDR
// if not task then
80803: LD_VAR 0 4
80807: NOT
80808: IFFALSE 80812
// exit ;
80810: GO 80854
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80812: LD_ADDR_VAR 0 3
80816: PUSH
80817: LD_VAR 0 4
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: PUSH
80826: LD_INT 1
80828: ARRAY
80829: PUSH
80830: LD_STRING r
80832: EQUAL
80833: PUSH
80834: LD_VAR 0 4
80838: PUSH
80839: LD_INT 1
80841: ARRAY
80842: PUSH
80843: LD_INT 4
80845: ARRAY
80846: PUSH
80847: LD_VAR 0 2
80851: EQUAL
80852: AND
80853: ST_TO_ADDR
// end ;
80854: LD_VAR 0 3
80858: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80859: LD_INT 0
80861: PPUSH
// SetDir ( unit , d ) ;
80862: LD_VAR 0 1
80866: PPUSH
80867: LD_VAR 0 4
80871: PPUSH
80872: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80876: LD_VAR 0 1
80880: PPUSH
80881: LD_VAR 0 2
80885: PPUSH
80886: LD_VAR 0 3
80890: PPUSH
80891: LD_VAR 0 5
80895: PPUSH
80896: CALL_OW 48
// end ;
80900: LD_VAR 0 6
80904: RET
// export function ToNaturalNumber ( number ) ; begin
80905: LD_INT 0
80907: PPUSH
// result := number div 1 ;
80908: LD_ADDR_VAR 0 2
80912: PUSH
80913: LD_VAR 0 1
80917: PUSH
80918: LD_INT 1
80920: DIV
80921: ST_TO_ADDR
// if number < 0 then
80922: LD_VAR 0 1
80926: PUSH
80927: LD_INT 0
80929: LESS
80930: IFFALSE 80940
// result := 0 ;
80932: LD_ADDR_VAR 0 2
80936: PUSH
80937: LD_INT 0
80939: ST_TO_ADDR
// end ;
80940: LD_VAR 0 2
80944: RET
// export function SortByClass ( units , class ) ; var un ; begin
80945: LD_INT 0
80947: PPUSH
80948: PPUSH
// if not units or not class then
80949: LD_VAR 0 1
80953: NOT
80954: PUSH
80955: LD_VAR 0 2
80959: NOT
80960: OR
80961: IFFALSE 80965
// exit ;
80963: GO 81060
// result := [ ] ;
80965: LD_ADDR_VAR 0 3
80969: PUSH
80970: EMPTY
80971: ST_TO_ADDR
// for un in units do
80972: LD_ADDR_VAR 0 4
80976: PUSH
80977: LD_VAR 0 1
80981: PUSH
80982: FOR_IN
80983: IFFALSE 81058
// if GetClass ( un ) = class then
80985: LD_VAR 0 4
80989: PPUSH
80990: CALL_OW 257
80994: PUSH
80995: LD_VAR 0 2
80999: EQUAL
81000: IFFALSE 81027
// result := Insert ( result , 1 , un ) else
81002: LD_ADDR_VAR 0 3
81006: PUSH
81007: LD_VAR 0 3
81011: PPUSH
81012: LD_INT 1
81014: PPUSH
81015: LD_VAR 0 4
81019: PPUSH
81020: CALL_OW 2
81024: ST_TO_ADDR
81025: GO 81056
// result := Replace ( result , result + 1 , un ) ;
81027: LD_ADDR_VAR 0 3
81031: PUSH
81032: LD_VAR 0 3
81036: PPUSH
81037: LD_VAR 0 3
81041: PUSH
81042: LD_INT 1
81044: PLUS
81045: PPUSH
81046: LD_VAR 0 4
81050: PPUSH
81051: CALL_OW 1
81055: ST_TO_ADDR
81056: GO 80982
81058: POP
81059: POP
// end ;
81060: LD_VAR 0 3
81064: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81065: LD_INT 0
81067: PPUSH
81068: PPUSH
81069: PPUSH
81070: PPUSH
81071: PPUSH
81072: PPUSH
81073: PPUSH
// result := [ ] ;
81074: LD_ADDR_VAR 0 4
81078: PUSH
81079: EMPTY
81080: ST_TO_ADDR
// if x - r < 0 then
81081: LD_VAR 0 1
81085: PUSH
81086: LD_VAR 0 3
81090: MINUS
81091: PUSH
81092: LD_INT 0
81094: LESS
81095: IFFALSE 81107
// min_x := 0 else
81097: LD_ADDR_VAR 0 8
81101: PUSH
81102: LD_INT 0
81104: ST_TO_ADDR
81105: GO 81123
// min_x := x - r ;
81107: LD_ADDR_VAR 0 8
81111: PUSH
81112: LD_VAR 0 1
81116: PUSH
81117: LD_VAR 0 3
81121: MINUS
81122: ST_TO_ADDR
// if y - r < 0 then
81123: LD_VAR 0 2
81127: PUSH
81128: LD_VAR 0 3
81132: MINUS
81133: PUSH
81134: LD_INT 0
81136: LESS
81137: IFFALSE 81149
// min_y := 0 else
81139: LD_ADDR_VAR 0 7
81143: PUSH
81144: LD_INT 0
81146: ST_TO_ADDR
81147: GO 81165
// min_y := y - r ;
81149: LD_ADDR_VAR 0 7
81153: PUSH
81154: LD_VAR 0 2
81158: PUSH
81159: LD_VAR 0 3
81163: MINUS
81164: ST_TO_ADDR
// max_x := x + r ;
81165: LD_ADDR_VAR 0 9
81169: PUSH
81170: LD_VAR 0 1
81174: PUSH
81175: LD_VAR 0 3
81179: PLUS
81180: ST_TO_ADDR
// max_y := y + r ;
81181: LD_ADDR_VAR 0 10
81185: PUSH
81186: LD_VAR 0 2
81190: PUSH
81191: LD_VAR 0 3
81195: PLUS
81196: ST_TO_ADDR
// for _x = min_x to max_x do
81197: LD_ADDR_VAR 0 5
81201: PUSH
81202: DOUBLE
81203: LD_VAR 0 8
81207: DEC
81208: ST_TO_ADDR
81209: LD_VAR 0 9
81213: PUSH
81214: FOR_TO
81215: IFFALSE 81316
// for _y = min_y to max_y do
81217: LD_ADDR_VAR 0 6
81221: PUSH
81222: DOUBLE
81223: LD_VAR 0 7
81227: DEC
81228: ST_TO_ADDR
81229: LD_VAR 0 10
81233: PUSH
81234: FOR_TO
81235: IFFALSE 81312
// begin if not ValidHex ( _x , _y ) then
81237: LD_VAR 0 5
81241: PPUSH
81242: LD_VAR 0 6
81246: PPUSH
81247: CALL_OW 488
81251: NOT
81252: IFFALSE 81256
// continue ;
81254: GO 81234
// if GetResourceTypeXY ( _x , _y ) then
81256: LD_VAR 0 5
81260: PPUSH
81261: LD_VAR 0 6
81265: PPUSH
81266: CALL_OW 283
81270: IFFALSE 81310
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81272: LD_ADDR_VAR 0 4
81276: PUSH
81277: LD_VAR 0 4
81281: PPUSH
81282: LD_VAR 0 4
81286: PUSH
81287: LD_INT 1
81289: PLUS
81290: PPUSH
81291: LD_VAR 0 5
81295: PUSH
81296: LD_VAR 0 6
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: PPUSH
81305: CALL_OW 1
81309: ST_TO_ADDR
// end ;
81310: GO 81234
81312: POP
81313: POP
81314: GO 81214
81316: POP
81317: POP
// end ;
81318: LD_VAR 0 4
81322: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81323: LD_INT 0
81325: PPUSH
81326: PPUSH
81327: PPUSH
81328: PPUSH
81329: PPUSH
81330: PPUSH
81331: PPUSH
81332: PPUSH
// if not units then
81333: LD_VAR 0 1
81337: NOT
81338: IFFALSE 81342
// exit ;
81340: GO 81866
// result := UnitFilter ( units , [ f_ok ] ) ;
81342: LD_ADDR_VAR 0 3
81346: PUSH
81347: LD_VAR 0 1
81351: PPUSH
81352: LD_INT 50
81354: PUSH
81355: EMPTY
81356: LIST
81357: PPUSH
81358: CALL_OW 72
81362: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81363: LD_ADDR_VAR 0 8
81367: PUSH
81368: LD_VAR 0 1
81372: PUSH
81373: LD_INT 1
81375: ARRAY
81376: PPUSH
81377: CALL_OW 255
81381: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81382: LD_ADDR_VAR 0 10
81386: PUSH
81387: LD_INT 29
81389: PUSH
81390: LD_INT 91
81392: PUSH
81393: LD_INT 49
81395: PUSH
81396: EMPTY
81397: LIST
81398: LIST
81399: LIST
81400: ST_TO_ADDR
// if not result then
81401: LD_VAR 0 3
81405: NOT
81406: IFFALSE 81410
// exit ;
81408: GO 81866
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81410: LD_ADDR_VAR 0 5
81414: PUSH
81415: LD_INT 81
81417: PUSH
81418: LD_VAR 0 8
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PPUSH
81427: CALL_OW 69
81431: ST_TO_ADDR
// for i in result do
81432: LD_ADDR_VAR 0 4
81436: PUSH
81437: LD_VAR 0 3
81441: PUSH
81442: FOR_IN
81443: IFFALSE 81864
// begin tag := GetTag ( i ) + 1 ;
81445: LD_ADDR_VAR 0 9
81449: PUSH
81450: LD_VAR 0 4
81454: PPUSH
81455: CALL_OW 110
81459: PUSH
81460: LD_INT 1
81462: PLUS
81463: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81464: LD_ADDR_VAR 0 7
81468: PUSH
81469: LD_VAR 0 4
81473: PPUSH
81474: CALL_OW 250
81478: PPUSH
81479: LD_VAR 0 4
81483: PPUSH
81484: CALL_OW 251
81488: PPUSH
81489: LD_INT 6
81491: PPUSH
81492: CALL 81065 0 3
81496: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81497: LD_VAR 0 4
81501: PPUSH
81502: CALL_OW 247
81506: PUSH
81507: LD_INT 2
81509: EQUAL
81510: PUSH
81511: LD_VAR 0 7
81515: AND
81516: PUSH
81517: LD_VAR 0 4
81521: PPUSH
81522: CALL_OW 264
81526: PUSH
81527: LD_VAR 0 10
81531: IN
81532: NOT
81533: AND
81534: IFFALSE 81573
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81536: LD_VAR 0 4
81540: PPUSH
81541: LD_VAR 0 7
81545: PUSH
81546: LD_INT 1
81548: ARRAY
81549: PUSH
81550: LD_INT 1
81552: ARRAY
81553: PPUSH
81554: LD_VAR 0 7
81558: PUSH
81559: LD_INT 1
81561: ARRAY
81562: PUSH
81563: LD_INT 2
81565: ARRAY
81566: PPUSH
81567: CALL_OW 116
81571: GO 81862
// if path > tag then
81573: LD_VAR 0 2
81577: PUSH
81578: LD_VAR 0 9
81582: GREATER
81583: IFFALSE 81791
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81585: LD_ADDR_VAR 0 6
81589: PUSH
81590: LD_VAR 0 5
81594: PPUSH
81595: LD_INT 91
81597: PUSH
81598: LD_VAR 0 4
81602: PUSH
81603: LD_INT 8
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: LIST
81610: PPUSH
81611: CALL_OW 72
81615: ST_TO_ADDR
// if nearEnemy then
81616: LD_VAR 0 6
81620: IFFALSE 81689
// begin if GetWeapon ( i ) = ru_time_lapser then
81622: LD_VAR 0 4
81626: PPUSH
81627: CALL_OW 264
81631: PUSH
81632: LD_INT 49
81634: EQUAL
81635: IFFALSE 81663
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81637: LD_VAR 0 4
81641: PPUSH
81642: LD_VAR 0 6
81646: PPUSH
81647: LD_VAR 0 4
81651: PPUSH
81652: CALL_OW 74
81656: PPUSH
81657: CALL_OW 112
81661: GO 81687
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81663: LD_VAR 0 4
81667: PPUSH
81668: LD_VAR 0 6
81672: PPUSH
81673: LD_VAR 0 4
81677: PPUSH
81678: CALL_OW 74
81682: PPUSH
81683: CALL_OW 115
// end else
81687: GO 81789
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81689: LD_VAR 0 4
81693: PPUSH
81694: LD_VAR 0 2
81698: PUSH
81699: LD_VAR 0 9
81703: ARRAY
81704: PUSH
81705: LD_INT 1
81707: ARRAY
81708: PPUSH
81709: LD_VAR 0 2
81713: PUSH
81714: LD_VAR 0 9
81718: ARRAY
81719: PUSH
81720: LD_INT 2
81722: ARRAY
81723: PPUSH
81724: CALL_OW 297
81728: PUSH
81729: LD_INT 6
81731: GREATER
81732: IFFALSE 81775
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81734: LD_VAR 0 4
81738: PPUSH
81739: LD_VAR 0 2
81743: PUSH
81744: LD_VAR 0 9
81748: ARRAY
81749: PUSH
81750: LD_INT 1
81752: ARRAY
81753: PPUSH
81754: LD_VAR 0 2
81758: PUSH
81759: LD_VAR 0 9
81763: ARRAY
81764: PUSH
81765: LD_INT 2
81767: ARRAY
81768: PPUSH
81769: CALL_OW 114
81773: GO 81789
// SetTag ( i , tag ) ;
81775: LD_VAR 0 4
81779: PPUSH
81780: LD_VAR 0 9
81784: PPUSH
81785: CALL_OW 109
// end else
81789: GO 81862
// if enemy then
81791: LD_VAR 0 5
81795: IFFALSE 81862
// begin if GetWeapon ( i ) = ru_time_lapser then
81797: LD_VAR 0 4
81801: PPUSH
81802: CALL_OW 264
81806: PUSH
81807: LD_INT 49
81809: EQUAL
81810: IFFALSE 81838
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81812: LD_VAR 0 4
81816: PPUSH
81817: LD_VAR 0 5
81821: PPUSH
81822: LD_VAR 0 4
81826: PPUSH
81827: CALL_OW 74
81831: PPUSH
81832: CALL_OW 112
81836: GO 81862
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81838: LD_VAR 0 4
81842: PPUSH
81843: LD_VAR 0 5
81847: PPUSH
81848: LD_VAR 0 4
81852: PPUSH
81853: CALL_OW 74
81857: PPUSH
81858: CALL_OW 115
// end ; end ;
81862: GO 81442
81864: POP
81865: POP
// end ;
81866: LD_VAR 0 3
81870: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81871: LD_INT 0
81873: PPUSH
81874: PPUSH
81875: PPUSH
// if not unit or IsInUnit ( unit ) then
81876: LD_VAR 0 1
81880: NOT
81881: PUSH
81882: LD_VAR 0 1
81886: PPUSH
81887: CALL_OW 310
81891: OR
81892: IFFALSE 81896
// exit ;
81894: GO 81987
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81896: LD_ADDR_VAR 0 4
81900: PUSH
81901: LD_VAR 0 1
81905: PPUSH
81906: CALL_OW 250
81910: PPUSH
81911: LD_VAR 0 2
81915: PPUSH
81916: LD_INT 1
81918: PPUSH
81919: CALL_OW 272
81923: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81924: LD_ADDR_VAR 0 5
81928: PUSH
81929: LD_VAR 0 1
81933: PPUSH
81934: CALL_OW 251
81938: PPUSH
81939: LD_VAR 0 2
81943: PPUSH
81944: LD_INT 1
81946: PPUSH
81947: CALL_OW 273
81951: ST_TO_ADDR
// if ValidHex ( x , y ) then
81952: LD_VAR 0 4
81956: PPUSH
81957: LD_VAR 0 5
81961: PPUSH
81962: CALL_OW 488
81966: IFFALSE 81987
// ComTurnXY ( unit , x , y ) ;
81968: LD_VAR 0 1
81972: PPUSH
81973: LD_VAR 0 4
81977: PPUSH
81978: LD_VAR 0 5
81982: PPUSH
81983: CALL_OW 118
// end ;
81987: LD_VAR 0 3
81991: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81992: LD_INT 0
81994: PPUSH
81995: PPUSH
// result := false ;
81996: LD_ADDR_VAR 0 3
82000: PUSH
82001: LD_INT 0
82003: ST_TO_ADDR
// if not units then
82004: LD_VAR 0 2
82008: NOT
82009: IFFALSE 82013
// exit ;
82011: GO 82058
// for i in units do
82013: LD_ADDR_VAR 0 4
82017: PUSH
82018: LD_VAR 0 2
82022: PUSH
82023: FOR_IN
82024: IFFALSE 82056
// if See ( side , i ) then
82026: LD_VAR 0 1
82030: PPUSH
82031: LD_VAR 0 4
82035: PPUSH
82036: CALL_OW 292
82040: IFFALSE 82054
// begin result := true ;
82042: LD_ADDR_VAR 0 3
82046: PUSH
82047: LD_INT 1
82049: ST_TO_ADDR
// exit ;
82050: POP
82051: POP
82052: GO 82058
// end ;
82054: GO 82023
82056: POP
82057: POP
// end ;
82058: LD_VAR 0 3
82062: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82063: LD_INT 0
82065: PPUSH
82066: PPUSH
82067: PPUSH
82068: PPUSH
// if not unit or not points then
82069: LD_VAR 0 1
82073: NOT
82074: PUSH
82075: LD_VAR 0 2
82079: NOT
82080: OR
82081: IFFALSE 82085
// exit ;
82083: GO 82175
// dist := 99999 ;
82085: LD_ADDR_VAR 0 5
82089: PUSH
82090: LD_INT 99999
82092: ST_TO_ADDR
// for i in points do
82093: LD_ADDR_VAR 0 4
82097: PUSH
82098: LD_VAR 0 2
82102: PUSH
82103: FOR_IN
82104: IFFALSE 82173
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82106: LD_ADDR_VAR 0 6
82110: PUSH
82111: LD_VAR 0 1
82115: PPUSH
82116: LD_VAR 0 4
82120: PUSH
82121: LD_INT 1
82123: ARRAY
82124: PPUSH
82125: LD_VAR 0 4
82129: PUSH
82130: LD_INT 2
82132: ARRAY
82133: PPUSH
82134: CALL_OW 297
82138: ST_TO_ADDR
// if tmpDist < dist then
82139: LD_VAR 0 6
82143: PUSH
82144: LD_VAR 0 5
82148: LESS
82149: IFFALSE 82171
// begin result := i ;
82151: LD_ADDR_VAR 0 3
82155: PUSH
82156: LD_VAR 0 4
82160: ST_TO_ADDR
// dist := tmpDist ;
82161: LD_ADDR_VAR 0 5
82165: PUSH
82166: LD_VAR 0 6
82170: ST_TO_ADDR
// end ; end ;
82171: GO 82103
82173: POP
82174: POP
// end ;
82175: LD_VAR 0 3
82179: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82180: LD_INT 0
82182: PPUSH
// uc_side := side ;
82183: LD_ADDR_OWVAR 20
82187: PUSH
82188: LD_VAR 0 1
82192: ST_TO_ADDR
// uc_nation := 3 ;
82193: LD_ADDR_OWVAR 21
82197: PUSH
82198: LD_INT 3
82200: ST_TO_ADDR
// vc_chassis := 25 ;
82201: LD_ADDR_OWVAR 37
82205: PUSH
82206: LD_INT 25
82208: ST_TO_ADDR
// vc_engine := engine_siberite ;
82209: LD_ADDR_OWVAR 39
82213: PUSH
82214: LD_INT 3
82216: ST_TO_ADDR
// vc_control := control_computer ;
82217: LD_ADDR_OWVAR 38
82221: PUSH
82222: LD_INT 3
82224: ST_TO_ADDR
// vc_weapon := 59 ;
82225: LD_ADDR_OWVAR 40
82229: PUSH
82230: LD_INT 59
82232: ST_TO_ADDR
// result := CreateVehicle ;
82233: LD_ADDR_VAR 0 5
82237: PUSH
82238: CALL_OW 45
82242: ST_TO_ADDR
// SetDir ( result , d ) ;
82243: LD_VAR 0 5
82247: PPUSH
82248: LD_VAR 0 4
82252: PPUSH
82253: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82257: LD_VAR 0 5
82261: PPUSH
82262: LD_VAR 0 2
82266: PPUSH
82267: LD_VAR 0 3
82271: PPUSH
82272: LD_INT 0
82274: PPUSH
82275: CALL_OW 48
// end ;
82279: LD_VAR 0 5
82283: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82284: LD_INT 0
82286: PPUSH
82287: PPUSH
82288: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82289: LD_ADDR_VAR 0 2
82293: PUSH
82294: LD_INT 0
82296: PUSH
82297: LD_INT 0
82299: PUSH
82300: LD_INT 0
82302: PUSH
82303: LD_INT 0
82305: PUSH
82306: EMPTY
82307: LIST
82308: LIST
82309: LIST
82310: LIST
82311: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82312: LD_VAR 0 1
82316: NOT
82317: PUSH
82318: LD_VAR 0 1
82322: PPUSH
82323: CALL_OW 264
82327: PUSH
82328: LD_INT 12
82330: PUSH
82331: LD_INT 51
82333: PUSH
82334: LD_INT 32
82336: PUSH
82337: LD_INT 89
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: IN
82346: NOT
82347: OR
82348: IFFALSE 82352
// exit ;
82350: GO 82450
// for i := 1 to 3 do
82352: LD_ADDR_VAR 0 3
82356: PUSH
82357: DOUBLE
82358: LD_INT 1
82360: DEC
82361: ST_TO_ADDR
82362: LD_INT 3
82364: PUSH
82365: FOR_TO
82366: IFFALSE 82448
// begin tmp := GetCargo ( cargo , i ) ;
82368: LD_ADDR_VAR 0 4
82372: PUSH
82373: LD_VAR 0 1
82377: PPUSH
82378: LD_VAR 0 3
82382: PPUSH
82383: CALL_OW 289
82387: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82388: LD_ADDR_VAR 0 2
82392: PUSH
82393: LD_VAR 0 2
82397: PPUSH
82398: LD_VAR 0 3
82402: PPUSH
82403: LD_VAR 0 4
82407: PPUSH
82408: CALL_OW 1
82412: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82413: LD_ADDR_VAR 0 2
82417: PUSH
82418: LD_VAR 0 2
82422: PPUSH
82423: LD_INT 4
82425: PPUSH
82426: LD_VAR 0 2
82430: PUSH
82431: LD_INT 4
82433: ARRAY
82434: PUSH
82435: LD_VAR 0 4
82439: PLUS
82440: PPUSH
82441: CALL_OW 1
82445: ST_TO_ADDR
// end ;
82446: GO 82365
82448: POP
82449: POP
// end ;
82450: LD_VAR 0 2
82454: RET
// export function Length ( array ) ; begin
82455: LD_INT 0
82457: PPUSH
// result := array + 0 ;
82458: LD_ADDR_VAR 0 2
82462: PUSH
82463: LD_VAR 0 1
82467: PUSH
82468: LD_INT 0
82470: PLUS
82471: ST_TO_ADDR
// end ;
82472: LD_VAR 0 2
82476: RET
// export function PrepareArray ( array ) ; begin
82477: LD_INT 0
82479: PPUSH
// result := array diff 0 ;
82480: LD_ADDR_VAR 0 2
82484: PUSH
82485: LD_VAR 0 1
82489: PUSH
82490: LD_INT 0
82492: DIFF
82493: ST_TO_ADDR
// if not result [ 1 ] then
82494: LD_VAR 0 2
82498: PUSH
82499: LD_INT 1
82501: ARRAY
82502: NOT
82503: IFFALSE 82523
// result := Delete ( result , 1 ) ;
82505: LD_ADDR_VAR 0 2
82509: PUSH
82510: LD_VAR 0 2
82514: PPUSH
82515: LD_INT 1
82517: PPUSH
82518: CALL_OW 3
82522: ST_TO_ADDR
// end ;
82523: LD_VAR 0 2
82527: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82528: LD_INT 0
82530: PPUSH
82531: PPUSH
82532: PPUSH
82533: PPUSH
// sibRocketRange := 25 ;
82534: LD_ADDR_VAR 0 6
82538: PUSH
82539: LD_INT 25
82541: ST_TO_ADDR
// result := false ;
82542: LD_ADDR_VAR 0 4
82546: PUSH
82547: LD_INT 0
82549: ST_TO_ADDR
// for i := 0 to 5 do
82550: LD_ADDR_VAR 0 5
82554: PUSH
82555: DOUBLE
82556: LD_INT 0
82558: DEC
82559: ST_TO_ADDR
82560: LD_INT 5
82562: PUSH
82563: FOR_TO
82564: IFFALSE 82631
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82566: LD_VAR 0 1
82570: PPUSH
82571: LD_VAR 0 5
82575: PPUSH
82576: LD_VAR 0 6
82580: PPUSH
82581: CALL_OW 272
82585: PPUSH
82586: LD_VAR 0 2
82590: PPUSH
82591: LD_VAR 0 5
82595: PPUSH
82596: LD_VAR 0 6
82600: PPUSH
82601: CALL_OW 273
82605: PPUSH
82606: LD_VAR 0 3
82610: PPUSH
82611: CALL_OW 309
82615: IFFALSE 82629
// begin result := true ;
82617: LD_ADDR_VAR 0 4
82621: PUSH
82622: LD_INT 1
82624: ST_TO_ADDR
// exit ;
82625: POP
82626: POP
82627: GO 82633
// end ;
82629: GO 82563
82631: POP
82632: POP
// end ;
82633: LD_VAR 0 4
82637: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82638: LD_INT 0
82640: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82641: LD_VAR 0 1
82645: PPUSH
82646: LD_VAR 0 2
82650: PPUSH
82651: LD_INT 0
82653: PPUSH
82654: LD_INT 0
82656: PPUSH
82657: LD_INT 1
82659: PPUSH
82660: LD_INT 0
82662: PPUSH
82663: CALL_OW 587
// end ; end_of_file
82667: LD_VAR 0 3
82671: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82672: LD_VAR 0 1
82676: PUSH
82677: LD_INT 200
82679: DOUBLE
82680: GREATEREQUAL
82681: IFFALSE 82689
82683: LD_INT 299
82685: DOUBLE
82686: LESSEQUAL
82687: IFTRUE 82691
82689: GO 82723
82691: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82692: LD_VAR 0 1
82696: PPUSH
82697: LD_VAR 0 2
82701: PPUSH
82702: LD_VAR 0 3
82706: PPUSH
82707: LD_VAR 0 4
82711: PPUSH
82712: LD_VAR 0 5
82716: PPUSH
82717: CALL 37338 0 5
82721: GO 82800
82723: LD_INT 300
82725: DOUBLE
82726: GREATEREQUAL
82727: IFFALSE 82735
82729: LD_INT 399
82731: DOUBLE
82732: LESSEQUAL
82733: IFTRUE 82737
82735: GO 82799
82737: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82738: LD_VAR 0 1
82742: PPUSH
82743: LD_VAR 0 2
82747: PPUSH
82748: LD_VAR 0 3
82752: PPUSH
82753: LD_VAR 0 4
82757: PPUSH
82758: LD_VAR 0 5
82762: PPUSH
82763: LD_VAR 0 6
82767: PPUSH
82768: LD_VAR 0 7
82772: PPUSH
82773: LD_VAR 0 8
82777: PPUSH
82778: LD_VAR 0 9
82782: PPUSH
82783: LD_VAR 0 10
82787: PPUSH
82788: LD_VAR 0 11
82792: PPUSH
82793: CALL 33671 0 11
82797: GO 82800
82799: POP
// end ;
82800: PPOPN 11
82802: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82803: LD_VAR 0 1
82807: PPUSH
82808: LD_VAR 0 2
82812: PPUSH
82813: LD_VAR 0 3
82817: PPUSH
82818: LD_VAR 0 4
82822: PPUSH
82823: LD_VAR 0 5
82827: PPUSH
82828: CALL 37074 0 5
// end ; end_of_file
82832: PPOPN 5
82834: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82835: LD_VAR 0 1
82839: PPUSH
82840: LD_VAR 0 2
82844: PPUSH
82845: LD_VAR 0 3
82849: PPUSH
82850: LD_VAR 0 4
82854: PPUSH
82855: LD_VAR 0 5
82859: PPUSH
82860: LD_VAR 0 6
82864: PPUSH
82865: CALL 21323 0 6
// end ;
82869: PPOPN 6
82871: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82872: LD_INT 0
82874: PPUSH
// begin if not units then
82875: LD_VAR 0 1
82879: NOT
82880: IFFALSE 82884
// exit ;
82882: GO 82884
// end ;
82884: PPOPN 7
82886: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82887: CALL 21227 0 0
// end ;
82891: PPOPN 1
82893: END
